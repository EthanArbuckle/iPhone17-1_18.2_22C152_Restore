void sub_1B8B6D73C(_Unwind_Exception *a1)
{
  void *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = &unk_1F12623C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F12623C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, unsigned __int8 *a2, unsigned int *a3)
{
  if (*((unsigned char *)a3 + 4))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *a3;
    v6 = *(uint64_t ***)(a1 + 8);
    v8 = v6[1];
    unint64_t v7 = (unint64_t)v6[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = *v6;
      uint64_t v11 = (char *)v8 - (char *)*v6;
      uint64_t v12 = v11 >> 3;
      unint64_t v13 = (v11 >> 3) + 1;
      if (v13 >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v7 - (void)v10;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      uint64_t *v17 = v4 | (v5 << 32) | 0xAAAAAA00;
      v9 = v17 + 1;
      if (v8 != v10)
      {
        unint64_t v18 = (char *)v8 - (char *)v10 - 8;
        if (v18 < 0x58) {
          goto LABEL_30;
        }
        if ((unint64_t)((char *)v8 - v16 - v11) < 0x20) {
          goto LABEL_30;
        }
        uint64_t v19 = (v18 >> 3) + 1;
        uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v8[v20 / 0xFFFFFFFFFFFFFFF8];
        v17 = (uint64_t *)((char *)v17 - v20);
        v22 = &v16[8 * v12 - 16];
        v23 = v8 - 2;
        uint64_t v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          _OWORD *v22 = v25;
          v22 -= 2;
          v23 -= 4;
          v24 -= 4;
        }
        while (v24);
        v8 = v21;
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            uint64_t v26 = *--v8;
            *--v17 = v26;
          }
          while (v8 != v10);
        }
        v8 = *v6;
      }
      *v6 = v17;
      v6[1] = v9;
      v6[2] = (uint64_t *)&v16[8 * v15];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      uint64_t *v8 = v4 | (v5 << 32) | 0xAAAAAA00;
      v9 = v8 + 1;
    }
    v6[1] = v9;
    ++**(_DWORD **)(a1 + 16);
  }
  return 1;
}

uint64_t std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ct"
                     "u2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgetsEE_clESH_EUlRKN3abm28B"
                     "asebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_po"
                                "interFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgets"
                                "EE_clESH_EUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgetsEE_clESH_EUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgetsEE_clESH_EUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NumberOfBudgets>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NumberOfBudgets>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NumberOfBudgets>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1262468;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm14SetPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B6DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B6DB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B6DB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B6DC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v4;
  v19[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
  uint64_t v14 = v3 + 64;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZZN4cpms16QMICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_41_1;
  v11[4] = v3;
  uint64_t v5 = (void *)v2[1];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v12 = v5;
  v6 = v2[2];
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetCurrentPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61940A0;
  aBlock[4] = v11;
  unint64_t v7 = _Block_copy(aBlock);
  unint64_t v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    unint64_t v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    _Block_release(v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
  v8 = v2[2];
  if (v8) {
    dispatch_release(v8);
  }
  v9 = (const void *)v2[1];
  if (v9) {
    _Block_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1B8B6DE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17) {
    qmi::Client::send();
  }
  if (a20) {
    _Block_release(a20);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  uint64_t v24 = v22[2];
  if (v24) {
    dispatch_release(v24);
  }
  long long v25 = (const void *)v22[1];
  if (v25) {
    _Block_release(v25);
  }
  operator delete(v22);
  uint64_t v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *this)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  if (!*((_DWORD *)this + 1))
  {
    v10 = this;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (!TlvValue) {
      return;
    }
    unint64_t v13 = TlvValue;
    int v14 = v12;
    v40 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<bsp::tlv::abm::CurrentPowerBudgets>(&v40, v12, (uint64_t)__p);
    uint64_t v15 = v40;
    if (v40)
    {
      v34 = v40;
      v35 = v13;
      v36 = v10;
      v45 = 0;
      uint64_t v46 = 0;
      v44 = &v45;
      uint64_t v17 = (unsigned __int8 *)__p[0];
      int v16 = (unsigned __int8 *)__p[1];
      if (__p[0] != __p[1])
      {
        while (1)
        {
          unint64_t v18 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            int v24 = *v17;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v24;
            _os_log_debug_impl(&dword_1B8B00000, v18, OS_LOG_TYPE_DEBUG, "#D Current Power from BB: Budget ID: %u", buf, 8u);
            unint64_t v18 = *(NSObject **)(v3 + 40);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
LABEL_14:
              unsigned int v19 = *v17;
              int v20 = *((_DWORD *)v17 + 1);
              v21 = &v45;
              v22 = &v45;
              v23 = v45;
              if (v45) {
                goto LABEL_20;
              }
              goto LABEL_24;
            }
          }
          else if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            goto LABEL_14;
          }
          int v25 = *((_DWORD *)v17 + 1);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v25;
          _os_log_debug_impl(&dword_1B8B00000, v18, OS_LOG_TYPE_DEBUG, "#D Current Power from BB: Budget: %u", buf, 8u);
          unsigned int v19 = *v17;
          int v20 = *((_DWORD *)v17 + 1);
          v21 = &v45;
          v22 = &v45;
          v23 = v45;
          if (v45)
          {
            while (1)
            {
LABEL_20:
              while (1)
              {
                v22 = (uint64_t **)v23;
                unsigned int v26 = *((unsigned __int8 *)v23 + 28);
                if (v26 <= v19) {
                  break;
                }
                v23 = *v22;
                v21 = v22;
                if (!*v22) {
                  goto LABEL_24;
                }
              }
              if (v26 >= v19) {
                break;
              }
              v23 = v22[1];
              if (!v23)
              {
                v21 = v22 + 1;
                goto LABEL_24;
              }
            }
            *((_DWORD *)v22 + 8) = v20;
            *((unsigned char *)v22 + 36) = 1;
            v17 += 8;
            if (v17 == v16) {
              goto LABEL_36;
            }
          }
          else
          {
LABEL_24:
            v27 = operator new(0x28uLL);
            v27[28] = v19;
            v27[32] = 0;
            v27[36] = 0;
            *(void *)v27 = 0;
            *((void *)v27 + 1) = 0;
            *((void *)v27 + 2) = v22;
            void *v21 = (uint64_t *)v27;
            v28 = (uint64_t *)v27;
            if (*v44)
            {
              v44 = (uint64_t **)*v44;
              v28 = *v21;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v45, v28);
            ++v46;
            *((_DWORD *)v27 + 8) = v20;
            v27[36] = 1;
            v17 += 8;
            if (v17 == v16) {
              goto LABEL_36;
            }
          }
        }
      }
      v29 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8B00000, v29, OS_LOG_TYPE_DEFAULT, "#I Got zero current power budget!", buf, 2u);
      }
LABEL_36:
      if (a1[5] && a1[6])
      {
        v42 = 0;
        uint64_t v43 = 0;
        v41 = &v42;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v41, v44, &v45);
        v30 = (const void *)a1[5];
        if (v30) {
          v31 = _Block_copy(v30);
        }
        else {
          v31 = 0;
        }
        v32 = a1[6];
        *(void *)buf = MEMORY[0x1E4F143A8];
        uint64_t v48 = 1174405120;
        v49 = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
        v50 = &__block_descriptor_tmp_43_1;
        if (v31) {
          v33 = _Block_copy(v31);
        }
        else {
          v33 = 0;
        }
        v53 = 0;
        uint64_t v54 = 0;
        aBlock = v33;
        v52 = &v53;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v52, v41, &v42);
        dispatch_async(v32, buf);
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v52, v53);
        v53 = 0;
        uint64_t v54 = 0;
        v52 = &v53;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v31) {
          _Block_release(v31);
        }
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v41, v42);
        v42 = 0;
        uint64_t v43 = 0;
        v41 = &v42;
      }
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v44, v45);
      unint64_t v13 = v35;
      v10 = v36;
      uint64_t v15 = v34;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v15) {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)v10, 16, v13, v14);
    }
    return;
  }
  long long v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "Failed to get thermal sensor IDs from the baseband", buf, 2u);
    uint64_t v5 = (const void *)a1[5];
    if (!v5) {
      return;
    }
  }
  else
  {
    uint64_t v5 = (const void *)a1[5];
    if (!v5) {
      return;
    }
  }
  if (a1[6])
  {
    v38[0] = 0;
    v38[1] = 0;
    v37 = v38;
    v6 = _Block_copy(v5);
    unint64_t v7 = v6;
    v8 = a1[6];
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v48 = 1174405120;
    v49 = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
    v50 = &__block_descriptor_tmp_43_1;
    if (v6) {
      v9 = _Block_copy(v6);
    }
    else {
      v9 = 0;
    }
    v53 = 0;
    uint64_t v54 = 0;
    aBlock = v9;
    v52 = &v53;
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v52, v37, v38);
    dispatch_async(v8, buf);
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v52, v53);
    v53 = 0;
    uint64_t v54 = 0;
    v52 = &v53;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v7) {
      _Block_release(v7);
    }
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v37, v38[0]);
  }
}

void sub_1B8B6E430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *aBlock,uint64_t a34,uint64_t a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10BudgetDataEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a2 + 40);
  if (v4) {
    long long v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10BudgetDataEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetCurrentPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B6E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B6E6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B6E6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  if (&v2 != a1 + 5) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v2, (void *)a1[5], a1 + 6);
  }
  (*(void (**)(uint64_t, void ***))(v1 + 16))(v1, &v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v2, v3[0]);
}

void sub_1B8B6E75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_1B8B6E774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(void *a1, uint64_t a2)
{
  long long v4 = *(void **)(a2 + 32);
  if (v4) {
    long long v4 = _Block_copy(v4);
  }
  a1[6] = 0;
  a1[4] = v4;
  a1[5] = a1 + 6;
  a1[7] = 0;
  if (a1 != (void *)a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 5), *(void **)(a2 + 40), (void *)(a2 + 48));
  }
}

void sub_1B8B6E7F4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(void **)(v1 + 48));
  long long v4 = *(const void **)(v1 + 32);
  if (v4) {
    _Block_release(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 48);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1 + 40, *(void **)(a1 + 48));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  uint64_t v2 = (const void *)*(v1 - 2);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>(cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0,std::default_delete<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v4;
  v19[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
  uint64_t v14 = v3 + 64;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_48_1;
  v11[4] = v3;
  uint64_t v5 = (void *)v2[1];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  int v12 = v5;
  v6 = v2[2];
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17ThermalGetSensors8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61940C8;
  aBlock[4] = v11;
  unint64_t v7 = _Block_copy(aBlock);
  unint64_t v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    unint64_t v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    _Block_release(v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
  v8 = v2[2];
  if (v8) {
    dispatch_release(v8);
  }
  v9 = (const void *)v2[1];
  if (v9) {
    _Block_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1B8B6EA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17) {
    qmi::Client::send();
  }
  if (a20) {
    _Block_release(a20);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  int v24 = v22[2];
  if (v24) {
    dispatch_release(v24);
  }
  int v25 = (const void *)v22[1];
  if (v25) {
    _Block_release(v25);
  }
  operator delete(v22);
  unsigned int v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *this)
{
  uint64_t v3 = a1[4];
  if (*((_DWORD *)this + 1))
  {
    long long v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "Failed to get thermal sensor IDs from the baseband", (uint8_t *)&__p, 2u);
      uint64_t v5 = (const void *)a1[5];
      if (!v5) {
        return;
      }
    }
    else
    {
      uint64_t v5 = (const void *)a1[5];
      if (!v5) {
        return;
      }
    }
    if (a1[6])
    {
      v6 = _Block_copy(v5);
      unint64_t v7 = v6;
      v8 = a1[6];
      __p = (void *)MEMORY[0x1E4F143A8];
      uint64_t v22 = 1174405120;
      v23 = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
      int v24 = &__block_descriptor_tmp_50_1;
      if (v6) {
        v9 = _Block_copy(v6);
      }
      else {
        v9 = 0;
      }
      int v25 = v9;
      unsigned int v26 = 0;
      v27 = 0;
      uint64_t v28 = 0;
      dispatch_async(v8, &__p);
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      if (v25) {
        _Block_release(v25);
      }
      if (v7) {
        _Block_release(v7);
      }
    }
  }
  else
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1174405120;
    int v16 = ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_44;
    uint64_t v17 = &__block_descriptor_tmp_45_1;
    uint64_t v18 = v3;
    uint64_t v11 = (void *)a1[5];
    if (v11) {
      uint64_t v11 = _Block_copy(v11);
    }
    int v12 = a1[6];
    aBlock = v11;
    dispatch_object_t object = v12;
    if (v12) {
      dispatch_retain(v12);
    }
    TlvValue = (char *)qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      __p = 0;
      uint64_t v22 = 0;
      v23 = 0;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, TlvValue, &TlvValue[v14], v14);
      v16(v15, (unsigned __int8 **)&__p);
      if (__p)
      {
        uint64_t v22 = (uint64_t)__p;
        operator delete(__p);
      }
    }
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
}

void sub_1B8B6ED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>::~callback(v18 + 40);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>::~callback(v18 + 40);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_44(void *a1, unsigned __int8 **a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  long long v4 = 0;
  if (*a2 != v3)
  {
    uint64_t v5 = 0;
    v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = a1[4];
    while (1)
    {
      v10 = *(NSObject **)(v8 + 40);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_8;
      }
      unsigned int v11 = *v2;
      unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v44 = 0x7AAAAAAAAAAAAAALL;
      strcpy((char *)&__p, "Invalid");
      if (v11 <= 2)
      {
        HIBYTE(v44) = 4;
        LODWORD(__p) = (v11 << 16) + 1378894420;
        BYTE4(__p) = 0;
      }
      *(_DWORD *)buf = 136315138;
      p_p = &__p;
      _os_log_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_DEFAULT, "#I Available Sensor ID: %s", buf, 0xCu);
      if (SHIBYTE(v44) < 0)
      {
        operator delete(__p);
        unsigned __int8 v12 = *v2;
        if (v7 < (unsigned __int8 *)v6) {
          goto LABEL_3;
        }
LABEL_9:
        unint64_t v13 = v7 - v5;
        uint64_t v14 = v7 - v5 + 1;
        if (v14 < 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if (2 * (v6 - (char *)v5) > (unint64_t)v14) {
          uint64_t v14 = 2 * (v6 - (char *)v5);
        }
        if ((unint64_t)(v6 - (char *)v5) >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v15 = v14;
        }
        if (v15)
        {
          int v16 = (unsigned __int8 *)operator new(v15);
          uint64_t v17 = (char *)&v16[v13];
          v16[v13] = v12;
          uint64_t v9 = (uint64_t)&v16[v13 + 1];
          if (v7 == v5) {
            goto LABEL_28;
          }
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = (char *)(v7 - v5);
          *(unsigned char *)unint64_t v13 = v12;
          uint64_t v9 = v13 + 1;
          if (v7 == v5)
          {
LABEL_28:
            long long v4 = (unsigned __int8 *)v17;
            v6 = (char *)&v16[v15];
            if (!v5) {
              goto LABEL_23;
            }
LABEL_22:
            operator delete(v5);
            goto LABEL_23;
          }
        }
        if (v13 < 8 || v16 > &v16[v7 - v5 - 1] || v5 > v7 - 1 || (unint64_t)(v5 - v16) < 0x20)
        {
          uint64_t v18 = v7;
          goto LABEL_19;
        }
        if (v13 >= 0x20)
        {
          unint64_t v21 = v13 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v22 = &v16[v13 - 16];
          v23 = (long long *)(v7 - 16);
          unint64_t v24 = v13 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v25 = *v23;
            *((_OWORD *)v22 - 1) = *(v23 - 1);
            *(_OWORD *)uint64_t v22 = v25;
            v22 -= 32;
            v23 -= 2;
            v24 -= 32;
          }
          while (v24);
          if (v13 == v21) {
            goto LABEL_21;
          }
          if ((v13 & 0x18) == 0)
          {
            v17 -= v21;
            uint64_t v18 = &v7[-v21];
LABEL_19:
            unsigned int v19 = v17 - 1;
            do
            {
              char v20 = *--v18;
              *v19-- = v20;
            }
            while (v18 != v5);
            goto LABEL_21;
          }
        }
        else
        {
          unint64_t v21 = 0;
        }
        uint64_t v18 = &v7[-(v13 & 0xFFFFFFFFFFFFFFF8)];
        v17 -= v13 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v26 = &v16[&v7[-v21] - v5 - 8];
        v27 = (uint64_t *)&v7[-v21 - 8];
        unint64_t v28 = v21 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v29 = *v27--;
          *(void *)unsigned int v26 = v29;
          v26 -= 8;
          v28 += 8;
        }
        while (v28);
        if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_19;
        }
LABEL_21:
        long long v4 = v16;
        v6 = (char *)&v16[v15];
        if (v5) {
          goto LABEL_22;
        }
LABEL_23:
        uint64_t v5 = v4;
        ++v2;
        unint64_t v7 = (unsigned __int8 *)v9;
        if (v2 == v3) {
          goto LABEL_45;
        }
      }
      else
      {
LABEL_8:
        unsigned __int8 v12 = *v2;
        if (v7 >= (unsigned __int8 *)v6) {
          goto LABEL_9;
        }
LABEL_3:
        *v7++ = v12;
        uint64_t v9 = (uint64_t)v7;
        if (++v2 == v3) {
          goto LABEL_45;
        }
      }
    }
  }
  uint64_t v9 = 0;
LABEL_45:
  v30 = (const void *)a1[5];
  if (v30 && a1[6])
  {
    size_t v31 = v9 - (void)v4;
    if ((unsigned __int8 *)v9 == v4)
    {
      v33 = 0;
      v32 = 0;
    }
    else
    {
      if ((v31 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      v32 = (char *)operator new(v9 - (void)v4);
      v33 = &v32[v31];
      memcpy(v32, v4, v31);
    }
    v34 = _Block_copy(v30);
    v35 = v34;
    v36 = a1[6];
    __p = (void *)MEMORY[0x1E4F143A8];
    unint64_t v43 = 1174405120;
    uint64_t v44 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
    v45 = &__block_descriptor_tmp_50_1;
    if (v34)
    {
      aBlock = _Block_copy(v34);
      v47 = 0;
      uint64_t v48 = 0;
      v49 = 0;
      size_t v37 = v33 - v32;
      if (v33 != v32) {
        goto LABEL_53;
      }
    }
    else
    {
      aBlock = 0;
      v47 = 0;
      uint64_t v48 = 0;
      v49 = 0;
      size_t v37 = v33 - v32;
      if (v33 != v32)
      {
LABEL_53:
        if ((v37 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        v38 = (char *)operator new(v37);
        v39 = &v38[v37];
        v47 = v38;
        v49 = &v38[v37];
        memcpy(v38, v32, v37);
        uint64_t v48 = v39;
        dispatch_async(v36, &__p);
        v40 = (char *)v47;
        if (!v47) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
    }
    dispatch_async(v36, &__p);
    v40 = (char *)v47;
    if (!v47)
    {
LABEL_59:
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v35) {
        _Block_release(v35);
      }
      if (v32) {
        operator delete(v32);
      }
      goto LABEL_65;
    }
LABEL_58:
    uint64_t v48 = v40;
    operator delete(v40);
    goto LABEL_59;
  }
LABEL_65:
  if (v4) {
    operator delete(v4);
  }
}

void sub_1B8B6F278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock, void *__p,uint64_t a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a2 + 40);
  if (v4) {
    long long v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17ThermalGetSensors8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B6F464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B6F478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B6F4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = (unsigned char *)a1[5];
  uint64_t v3 = (unsigned char *)a1[6];
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  size_t v4 = v3 - v2;
  if (v3 != v2)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)operator new(v3 - v2);
    v6 = &v5[v4];
    __p = v5;
    uint64_t v9 = &v5[v4];
    memcpy(v5, v2, v4);
    uint64_t v8 = v6;
  }
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_1B8B6F54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE40c65_ZTSNSt3__16vectorIN3abm17BasebandThermalIDENS_9allocatorIS2_EEEE(void *a1, void *a2)
{
  __n128 result = (void *)a2[4];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[5] = 0;
  a1[4] = result;
  a1[6] = 0;
  a1[7] = 0;
  v6 = (unsigned char *)a2[5];
  uint64_t v5 = (unsigned char *)a2[6];
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[5] = v8;
    a1[6] = v8;
    uint64_t v9 = &v8[v7];
    a1[7] = &v8[v7];
    __n128 result = memcpy(v8, v6, v7);
    a1[6] = v9;
  }
  return result;
}

void sub_1B8B6F5F0(_Unwind_Exception *exception_object)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(const void **)(v1 + 32);
  if (v5) {
    _Block_release(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE40c65_ZTSNSt3__16vectorIN3abm17BasebandThermalIDENS_9allocatorIS2_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v52 = v3;
  long long v53 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v52);
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 0x40000000;
  size_t v4 = (uint64_t (*)(uint64_t, char *))___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke;
  v49 = (uint64_t (*)(uint64_t, char *))___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke;
  v50 = &__block_descriptor_tmp_52_0;
  int v51 = *((_DWORD *)v1 + 3);
  uint64_t v5 = (char *)*((void *)&v52 + 1);
  v6 = (char *)v53;
  size_t v7 = (const void **)*((void *)&v52 + 1);
  if (*((void *)&v52 + 1) != (void)v53)
  {
    size_t v7 = (const void **)*((void *)&v52 + 1);
    while (*((unsigned char *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v53) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v53)
  {
LABEL_9:
    v10 = operator new(0x10uLL);
    unsigned int v11 = v10;
    v10[8] = 1;
    *(void *)v10 = &unk_1F1262638;
    *((_DWORD *)v10 + 3) = 0;
    uint64_t v9 = v10 + 12;
    if ((unint64_t)v6 < *((void *)&v53 + 1))
    {
      *(void *)v6 = v10;
      uint64_t v12 = (uint64_t)(v6 + 8);
LABEL_22:
      *(void *)&long long v53 = v12;
      size_t v4 = v49;
      goto LABEL_23;
    }
    int64_t v13 = v6 - v5;
    uint64_t v14 = (v6 - v5) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = *((void *)&v53 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v53 + 1) - (void)v5) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v18 = operator new(8 * v17);
      unsigned int v19 = &v18[8 * v14];
      char v20 = &v18[8 * v17];
      *unsigned int v19 = v11;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((void *)&v52 + 1) = v19;
        *(void *)&long long v53 = v12;
        *((void *)&v53 + 1) = v20;
        if (!v5) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v18 = 0;
      unsigned int v19 = (void *)(8 * v14);
      char v20 = 0;
      *(void *)(8 * v14) = v11;
      uint64_t v12 = 8 * v14 + 8;
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_63;
    }
    if ((unint64_t)(v5 - v18) < 0x20) {
      goto LABEL_63;
    }
    unint64_t v29 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    size_t v31 = &v6[-v30];
    unsigned int v19 = (void *)((char *)v19 - v30);
    v32 = &v18[8 * v14 - 16];
    v33 = v6 - 16;
    uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      _OWORD *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 4;
    }
    while (v34);
    v6 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
      {
        uint64_t v36 = *((void *)v6 - 1);
        v6 -= 8;
        *--unsigned int v19 = v36;
      }
      while (v6 != v5);
    }
    uint64_t v5 = (char *)*((void *)&v52 + 1);
    *((void *)&v52 + 1) = v19;
    *(void *)&long long v53 = v12;
    *((void *)&v53 + 1) = v20;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v8) {
    __cxa_bad_cast();
  }
  uint64_t v9 = v8 + 12;
LABEL_23:
  v4((uint64_t)v48, v9);
  uint64_t v43 = v2 + 64;
  uint64_t v44 = QMIServiceMsg::create();
  int v45 = 25000;
  uint64_t v46 = 0;
  v47 = 0;
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 1174405120;
  v38[2] = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_2;
  v38[3] = &__block_descriptor_tmp_60_2;
  v38[4] = v2;
  int v42 = *((_DWORD *)v1 + 2);
  unint64_t v21 = (void *)v1[2];
  if (v21) {
    unint64_t v21 = _Block_copy(v21);
  }
  v39 = v21;
  uint64_t v22 = (void *)v1[3];
  if (v22) {
    uint64_t v22 = _Block_copy(v22);
  }
  v40 = v22;
  v23 = v1[4];
  dispatch_object_t object = v23;
  if (v23) {
    dispatch_retain(v23);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22ThermalConfigFrequency8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194160;
  aBlock[4] = v38;
  unint64_t v24 = _Block_copy(aBlock);
  v47 = v24;
  if (v44)
  {
    qmi::Client::send();
    unint64_t v24 = v47;
  }
  if (v24) {
    _Block_release(v24);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v39) {
    _Block_release(v39);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v52);
  long long v25 = v1[4];
  if (v25) {
    dispatch_release(v25);
  }
  unsigned int v26 = (const void *)v1[3];
  if (v26) {
    _Block_release(v26);
  }
  v27 = (const void *)v1[2];
  if (v27) {
    _Block_release(v27);
  }
  operator delete(v1);
  unint64_t v28 = (std::__shared_weak_count *)a1[2];
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  operator delete(a1);
}

void sub_1B8B6FB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    _Block_release(a15);
  }
  if (a20) {
    qmi::Client::send();
  }
  if (a23) {
    _Block_release(a23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  size_t v31 = v29[4];
  if (v31) {
    dispatch_release(v31);
  }
  v32 = (const void *)v29[3];
  if (v32) {
    _Block_release(v32);
  }
  v33 = (const void *)v29[2];
  if (v33) {
    _Block_release(v33);
  }
  operator delete(v29);
  uint64_t v34 = (std::__shared_weak_count *)__p[2];
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v15 = 0;
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v5 = operator new(0x38uLL);
    __p = v5;
    long long v17 = xmmword_1B8C31670;
    strcpy((char *)v5, "Failed to make configuration of the reporting frequency");
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    cpms::QMICommandDriver::checkError(v3, a2, (uint64_t)&__p, (CFTypeRef *)buf);
    size_t v7 = *(const void **)buf;
    uint64_t v15 = *(void *)buf;
    if (SHIBYTE(v17) < 0) {
      operator delete(__p);
    }
    uint64_t v8 = *(const void **)(a1 + 48);
    if (!v8) {
      goto LABEL_17;
    }
  }
  else
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 1174405120;
    v12[2] = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_54;
    v12[3] = &__block_descriptor_tmp_59_2;
    v12[4] = v3;
    int v14 = *(_DWORD *)(a1 + 64);
    uint64_t v9 = *(void **)(a1 + 40);
    if (v9) {
      uint64_t v9 = _Block_copy(v9);
    }
    aBlock = v9;
    __p = (void *)MEMORY[0x1E4F143A8];
    *(void *)&long long v17 = 0x40000000;
    *((void *)&v17 + 1) = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16ThermalSensorInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    uint64_t v18 = &unk_1E6194188;
    unsigned int v19 = v12;
    qmi::Client::setIndHandler();
    if (aBlock) {
      _Block_release(aBlock);
    }
    size_t v7 = 0;
    uint64_t v8 = *(const void **)(a1 + 48);
    if (!v8)
    {
LABEL_17:
      if (!v7) {
        return;
      }
LABEL_33:
      CFRelease(v7);
      return;
    }
  }
  if (!*(void *)(a1 + 56)) {
    goto LABEL_17;
  }
  if (v7 && (CFRetain(v7), (uint64_t v8 = *(const void **)(a1 + 48)) == 0)) {
    v10 = 0;
  }
  else {
    v10 = _Block_copy(v8);
  }
  unsigned int v11 = *(NSObject **)(a1 + 56);
  __p = (void *)MEMORY[0x1E4F143A8];
  *(void *)&long long v17 = 1174405120;
  *((void *)&v17 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  uint64_t v18 = &__block_descriptor_tmp_40_3;
  if (!v10)
  {
    unsigned int v19 = 0;
    CFTypeRef cf = v7;
    if (!v7) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  unsigned int v19 = _Block_copy(v10);
  CFTypeRef cf = v7;
  if (v7) {
LABEL_24:
  }
    CFRetain(v7);
LABEL_25:
  dispatch_async(v11, &__p);
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v7)
  {
    CFRelease(v7);
    goto LABEL_33;
  }
}

void sub_1B8B6FF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_54(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v32 = 0;
  v33 = &v32;
  uint64_t v34 = 0x4002000000;
  long long v35 = __Block_byref_object_copy__4;
  uint64_t v36 = __Block_byref_object_dispose__4;
  __p = 0;
  v38 = 0;
  uint64_t v39 = 0;
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 == 2)
  {
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 0x40000000;
    v23 = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_57;
    unint64_t v24 = &unk_1E6194138;
    long long v25 = &v32;
    uint64_t v26 = v4;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    uint64_t v8 = TlvValue;
    if (TlvValue)
    {
      int v9 = v13;
      v40 = TlvValue;
      memset(buf, 170, sizeof(buf));
      tlv::parseV<bsp::tlv::abm::ThermalSensorsFloatType>(&v40, v13, (uint64_t)buf);
      int v14 = v40;
      if (v40) {
        v23((uint64_t)v22, (float **)buf);
      }
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (!v14)
      {
        uint64_t v11 = 16;
        goto LABEL_17;
      }
    }
  }
  else if (v5 == 1)
  {
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 0x40000000;
    unint64_t v28 = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_55;
    unint64_t v29 = &unk_1E6194110;
    uint64_t v30 = &v32;
    uint64_t v31 = v4;
    v6 = (tlv *)qmi::MessageBase::findTlvValue(this);
    uint64_t v8 = v6;
    if (v6)
    {
      int v9 = v7;
      v40 = v6;
      memset(buf, 170, sizeof(buf));
      tlv::parseV<bsp::tlv::abm::ThermalSensors>(&v40, v7, (uint64_t)buf);
      v10 = v40;
      if (v40) {
        v28((uint64_t)v27, (unsigned __int8 **)buf);
      }
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (!v10)
      {
        uint64_t v11 = 1;
LABEL_17:
        ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, v11, v8, v9);
      }
    }
  }
  else
  {
    uint64_t v15 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_error_impl(&dword_1B8B00000, v15, OS_LOG_TYPE_ERROR, "Cannot handle %u version", buf, 8u);
      uint64_t v16 = *(void *)(a1 + 40);
      if (!v16) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_20:
  uint64_t v18 = (unsigned char *)v33[5];
  long long v17 = (unsigned char *)v33[6];
  memset(buf, 0, sizeof(buf));
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    char v20 = (char *)operator new(v17 - v18);
    unint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)buf = v20;
    *(void *)&buf[16] = v21;
    memcpy(v20, v18, v19);
    *(void *)&uint8_t buf[8] = v21;
  }
  (*(void (**)(uint64_t, uint8_t *))(v16 + 16))(v16, buf);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
LABEL_25:
  _Block_object_dispose(&v32, 8);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
}

void sub_1B8B702D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v30 = *(void **)(v28 - 96);
  if (v30)
  {
    *(void *)(v28 - 88) = v30;
    operator delete(v30);
    _Block_object_dispose(&a22, 8);
    uint64_t v31 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    _Block_object_dispose(&a22, 8);
    uint64_t v31 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  a28 = (uint64_t)v31;
  operator delete(v31);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_55(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    v33 = a2[1];
    uint64_t v34 = v5;
    do
    {
      int v7 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v31 = *v2;
        *(_DWORD *)buf = 67109120;
        int v36 = v31;
        _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Thermal Sensor ID: %d", buf, 8u);
        int v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_7;
        }
      }
      else if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_7;
      }
      int v32 = *((_DWORD *)v2 + 1);
      *(_DWORD *)buf = 67109120;
      int v36 = v32;
      _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Temperature (int32): %d", buf, 8u);
LABEL_7:
      uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 8);
      uint64_t v9 = *v2;
      uint64_t v10 = *((unsigned int *)v2 + 1);
      uint64_t v12 = (char *)v8[6];
      unint64_t v11 = v8[7];
      if ((unint64_t)v12 < v11)
      {
        *(void *)uint64_t v12 = v9 | (v10 << 32);
        uint64_t v6 = (uint64_t)(v12 + 8);
        goto LABEL_4;
      }
      int v13 = (char *)v8[5];
      uint64_t v14 = (v12 - v13) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v11 - (void)v13;
      if (v16 >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v18 = v17;
        int64_t v19 = (char *)operator new(8 * v17);
        unint64_t v17 = v18;
        char v20 = &v19[8 * v14];
        *(void *)char v20 = v9 | (v10 << 32);
        uint64_t v6 = (uint64_t)(v20 + 8);
        unint64_t v21 = (char *)(v12 - v13);
        if (v12 == v13)
        {
LABEL_20:
          uint64_t v3 = v33;
          uint64_t v5 = v34;
          v8[5] = v20;
          v8[6] = v6;
          v8[7] = &v19[8 * v17];
          if (!v12) {
            goto LABEL_4;
          }
LABEL_28:
          operator delete(v12);
          goto LABEL_4;
        }
      }
      else
      {
        int64_t v19 = 0;
        char v20 = (char *)(8 * v14);
        *(void *)(8 * v14) = v9 | (v10 << 32);
        uint64_t v6 = 8 * v14 + 8;
        unint64_t v21 = (char *)(v12 - v13);
        if (v12 == v13) {
          goto LABEL_20;
        }
      }
      unint64_t v22 = (unint64_t)(v21 - 8);
      if (v22 < 0x58)
      {
        uint64_t v3 = v33;
        uint64_t v5 = v34;
        do
        {
LABEL_26:
          uint64_t v30 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v20 - 1) = v30;
          v20 -= 8;
        }
        while (v12 != v13);
        goto LABEL_27;
      }
      uint64_t v3 = v33;
      uint64_t v5 = v34;
      if ((unint64_t)(v13 - v19) < 0x20) {
        goto LABEL_26;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      long long v25 = &v12[-v24];
      v20 -= v24;
      uint64_t v26 = &v19[8 * v14 - 16];
      v27 = v12 - 16;
      uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)uint64_t v26 = v29;
        v26 -= 32;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      uint64_t v12 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v12 = (char *)v8[5];
      v8[5] = v20;
      v8[6] = v6;
      v8[7] = &v19[8 * v17];
      if (v12) {
        goto LABEL_28;
      }
LABEL_4:
      v8[6] = v6;
      v2 += 8;
    }
    while (v2 != v3);
  }
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_57(uint64_t a1, float **a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = (unsigned __int8 *)a2[1];
  if (*a2 != (float *)v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    v33 = (unsigned __int8 *)a2[1];
    uint64_t v34 = v5;
    do
    {
      int v7 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        int v31 = *(unsigned __int8 *)v2;
        *(_DWORD *)buf = 67109120;
        LODWORD(v36) = v31;
        _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Thermal Sensor ID: %d", buf, 8u);
        int v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_7;
        }
      }
      else if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_7;
      }
      double v32 = v2[1];
      *(_DWORD *)buf = 134217984;
      double v36 = v32;
      _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Temperature (float): %f", buf, 0xCu);
LABEL_7:
      uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 8);
      uint64_t v9 = *(unsigned __int8 *)v2;
      uint64_t v10 = *((unsigned int *)v2 + 1);
      uint64_t v12 = (char *)v8[6];
      unint64_t v11 = v8[7];
      if ((unint64_t)v12 < v11)
      {
        *(void *)uint64_t v12 = v9 | (v10 << 32);
        uint64_t v6 = (uint64_t)(v12 + 8);
        goto LABEL_4;
      }
      int v13 = (char *)v8[5];
      uint64_t v14 = (v12 - v13) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v11 - (void)v13;
      if (v16 >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v18 = v17;
        int64_t v19 = (char *)operator new(8 * v17);
        unint64_t v17 = v18;
        char v20 = &v19[8 * v14];
        *(void *)char v20 = v9 | (v10 << 32);
        uint64_t v6 = (uint64_t)(v20 + 8);
        unint64_t v21 = (char *)(v12 - v13);
        if (v12 == v13)
        {
LABEL_20:
          uint64_t v3 = v33;
          uint64_t v5 = v34;
          v8[5] = v20;
          v8[6] = v6;
          v8[7] = &v19[8 * v17];
          if (!v12) {
            goto LABEL_4;
          }
LABEL_28:
          operator delete(v12);
          goto LABEL_4;
        }
      }
      else
      {
        int64_t v19 = 0;
        char v20 = (char *)(8 * v14);
        *(void *)(8 * v14) = v9 | (v10 << 32);
        uint64_t v6 = 8 * v14 + 8;
        unint64_t v21 = (char *)(v12 - v13);
        if (v12 == v13) {
          goto LABEL_20;
        }
      }
      unint64_t v22 = (unint64_t)(v21 - 8);
      if (v22 < 0x58)
      {
        uint64_t v3 = v33;
        uint64_t v5 = v34;
        do
        {
LABEL_26:
          uint64_t v30 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v20 - 1) = v30;
          v20 -= 8;
        }
        while (v12 != v13);
        goto LABEL_27;
      }
      uint64_t v3 = v33;
      uint64_t v5 = v34;
      if ((unint64_t)(v13 - v19) < 0x20) {
        goto LABEL_26;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      long long v25 = &v12[-v24];
      v20 -= v24;
      uint64_t v26 = &v19[8 * v14 - 16];
      v27 = v12 - 16;
      uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)uint64_t v26 = v29;
        v26 -= 32;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      uint64_t v12 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v12 = (char *)v8[5];
      v8[5] = v20;
      v8[6] = v6;
      v8[7] = &v19[8 * v17];
      if (v12) {
        goto LABEL_28;
      }
LABEL_4:
      v8[6] = v6;
      v2 += 2;
    }
    while (v2 != (float *)v3);
  }
}

void *__copy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 40);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void __copy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE48c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  a1[5] = v4;
  uint64_t v5 = (void *)a2[6];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE48c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    _Block_release(v4);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ReportFrequency>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ReportFrequency>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ReportFrequency>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1262638;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22ThermalConfigFrequency8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B70B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B70B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B70BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16ThermalSensorInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B70C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B70CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B70CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>(cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0,std::default_delete<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v4;
  v19[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
  uint64_t v14 = v3 + 64;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_67_0;
  v11[4] = v3;
  uint64_t v5 = (void *)v2[1];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v12 = v5;
  uint64_t v6 = v2[2];
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetCurrentMitigation8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61941B0;
  aBlock[4] = v11;
  int v7 = _Block_copy(aBlock);
  unint64_t v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    int v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    _Block_release(v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
  uint64_t v8 = v2[2];
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (const void *)v2[1];
  if (v9) {
    _Block_release(v9);
  }
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1B8B70ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17) {
    qmi::Client::send();
  }
  if (a20) {
    _Block_release(a20);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  uint64_t v24 = v22[2];
  if (v24) {
    dispatch_release(v24);
  }
  long long v25 = (const void *)v22[1];
  if (v25) {
    _Block_release(v25);
  }
  operator delete(v22);
  uint64_t v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *this)
{
  uint64_t v3 = a1[4];
  if (*((_DWORD *)this + 1))
  {
    long long v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "Failed to get power mitigation data from the baseband", (uint8_t *)__p, 2u);
      uint64_t v5 = (const void *)a1[5];
      if (!v5) {
        return;
      }
    }
    else
    {
      uint64_t v5 = (const void *)a1[5];
      if (!v5) {
        return;
      }
    }
    if (a1[6])
    {
      uint64_t v6 = _Block_copy(v5);
      int v7 = v6;
      uint64_t v8 = a1[6];
      __p[0] = (void *)MEMORY[0x1E4F143A8];
      __p[1] = (void *)1174405120;
      __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
      __p[3] = &__block_descriptor_tmp_69_2;
      if (v6) {
        uint64_t v9 = _Block_copy(v6);
      }
      else {
        uint64_t v9 = 0;
      }
      long long v25 = v9;
      uint64_t v26 = 0;
      v27 = 0;
      uint64_t v28 = 0;
      dispatch_async(v8, __p);
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      if (v25) {
        _Block_release(v25);
      }
      if (v7) {
        _Block_release(v7);
      }
    }
  }
  else
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 1174405120;
    int64_t v19 = ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_63;
    char v20 = &__block_descriptor_tmp_64_3;
    uint64_t v21 = v3;
    unint64_t v11 = (void *)a1[5];
    if (v11) {
      unint64_t v11 = _Block_copy(v11);
    }
    uint64_t v12 = a1[6];
    aBlock = v11;
    dispatch_object_t object = v12;
    if (v12) {
      dispatch_retain(v12);
    }
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    uint64_t v15 = TlvValue;
    if (TlvValue)
    {
      int v16 = v14;
      long long v29 = TlvValue;
      memset(__p, 170, 24);
      tlv::parseV<bsp::tlv::abm::MitigationData>(&v29, v14, (uint64_t)__p);
      uint64_t v17 = v29;
      if (v29) {
        v19(v18, (unsigned __int8 **)__p);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (!v17) {
        ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)this, 16, v15, v16);
      }
    }
    if (object) {
      dispatch_release(object);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
}

void sub_1B8B711F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>::~callback(v18 + 40);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>::~callback(v18 + 40);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_63(void *a1, unsigned __int8 **a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  long long v4 = 0;
  if (*a2 != v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = a1[4];
    uint64_t v43 = a2[1];
    while (1)
    {
      uint64_t v9 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v23 = *v3;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v23;
        _os_log_debug_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEBUG, "#D Power Mitigation Device: %d", buf, 8u);
        uint64_t v9 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_31;
        }
LABEL_6:
        __int16 v10 = *v3;
        __int16 v11 = v3[1];
        if (v6 >= v5) {
          goto LABEL_7;
        }
LABEL_3:
        *(_WORD *)uint64_t v6 = v10 | (v11 << 8);
        v6 += 2;
        uint64_t v8 = (uint64_t)v6;
        v3 += 2;
        if (v3 == v2) {
          goto LABEL_40;
        }
      }
      else
      {
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_6;
        }
LABEL_31:
        int v24 = v3[1];
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v24;
        _os_log_debug_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEBUG, "#D Power Mitigation Level: %d", buf, 8u);
        __int16 v10 = *v3;
        __int16 v11 = v3[1];
        if (v6 < v5) {
          goto LABEL_3;
        }
LABEL_7:
        uint64_t v12 = v6 - v4;
        if (v6 - v4 <= -3) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v12 >> 1;
        if (v5 - v4 <= (unint64_t)((v12 >> 1) + 1)) {
          uint64_t v14 = v13 + 1;
        }
        else {
          uint64_t v14 = v5 - v4;
        }
        if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (v15)
        {
          if (v15 < 0) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v13];
          *(_WORD *)uint64_t v17 = v10 | (v11 << 8);
          uint64_t v8 = (uint64_t)(v17 + 2);
          int64_t v18 = v6 - v4;
          if (v6 == v4) {
            goto LABEL_22;
          }
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = (char *)(2 * v13);
          *(_WORD *)(2 * v13) = v10 | (v11 << 8);
          uint64_t v8 = 2 * v13 + 2;
          int64_t v18 = v6 - v4;
          if (v6 == v4) {
            goto LABEL_22;
          }
        }
        unint64_t v19 = v18 - 2;
        if (v19 >= 0x5E)
        {
          unint64_t v22 = (v6 - 2 - v4) & 0xFFFFFFFFFFFFFFFELL;
          if (&v16[(v12 & 0xFFFFFFFFFFFFFFFELL) - 2 - v22] > &v16[(v12 & 0xFFFFFFFFFFFFFFFELL) - 2])
          {
            char v20 = v6;
          }
          else if (&v6[-v22 - 2] > v6 - 2)
          {
            char v20 = v6;
          }
          else if (v6 - v16 - (v12 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
          {
            uint64_t v25 = (v19 >> 1) + 1;
            unint64_t v26 = 2 * (v25 & 0xFFFFFFFFFFFFFFF0);
            char v20 = &v6[-v26];
            v17 -= v26;
            v27 = &v16[2 * v13 - 16];
            uint64_t v28 = v6 - 16;
            unint64_t v29 = v25 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              _OWORD *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 16;
            }
            while (v29);
            if (v25 == (v25 & 0xFFFFFFFFFFFFFFF0)) {
              goto LABEL_22;
            }
          }
          else
          {
            char v20 = v6;
          }
        }
        else
        {
          char v20 = v6;
        }
        do
        {
          __int16 v21 = *((_WORD *)v20 - 1);
          v20 -= 2;
          *((_WORD *)v17 - 1) = v21;
          v17 -= 2;
        }
        while (v20 != v4);
LABEL_22:
        uint64_t v5 = &v16[2 * v15];
        if (v4) {
          operator delete(v4);
        }
        long long v4 = v17;
        uint64_t v2 = v43;
        v3 += 2;
        uint64_t v6 = (char *)v8;
        if (v3 == v43) {
          goto LABEL_40;
        }
      }
    }
  }
  uint64_t v8 = 0;
LABEL_40:
  int v31 = (const void *)a1[5];
  if (v31 && a1[6])
  {
    int64_t v32 = v8 - (void)v4;
    if ((char *)v8 == v4)
    {
      uint64_t v34 = 0;
      v33 = 0;
    }
    else
    {
      if (v32 < 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      v33 = (char *)operator new(v8 - (void)v4);
      uint64_t v34 = &v33[2 * (v32 >> 1)];
      memcpy(v33, v4, v32);
    }
    long long v35 = _Block_copy(v31);
    double v36 = v35;
    uint64_t v37 = a1[6];
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v45 = 1174405120;
    uint64_t v46 = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
    v47 = &__block_descriptor_tmp_69_2;
    if (v35)
    {
      aBlock = _Block_copy(v35);
      __p = 0;
      v50 = 0;
      int v51 = 0;
      int64_t v38 = v34 - v33;
      if (v34 == v33) {
        goto LABEL_48;
      }
    }
    else
    {
      aBlock = 0;
      __p = 0;
      v50 = 0;
      int v51 = 0;
      int64_t v38 = v34 - v33;
      if (v34 == v33)
      {
LABEL_48:
        dispatch_async(v37, buf);
        uint64_t v39 = (char *)__p;
        if (!__p)
        {
LABEL_50:
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v36) {
            _Block_release(v36);
          }
          if (v33) {
            operator delete(v33);
          }
          goto LABEL_56;
        }
LABEL_49:
        v50 = v39;
        operator delete(v39);
        goto LABEL_50;
      }
    }
    if (v38 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    v40 = (char *)operator new(v38);
    v41 = &v40[2 * (v38 >> 1)];
    __p = v40;
    int v51 = v41;
    memcpy(v40, v33, v38);
    v50 = v41;
    dispatch_async(v37, buf);
    uint64_t v39 = (char *)__p;
    if (!__p) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
LABEL_56:
  if (v4) {
    operator delete(v4);
  }
}

void sub_1B8B716B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock, void *__p,uint64_t a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a2 + 40);
  if (v4) {
    long long v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetCurrentMitigation8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B71898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B718AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B718D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = (unsigned char *)a1[5];
  uint64_t v3 = (unsigned char *)a1[6];
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)operator new(v3 - v2);
    uint64_t v6 = &v5[2 * (v4 >> 1)];
    __p = v5;
    uint64_t v9 = v6;
    memcpy(v5, v2, v4);
    uint64_t v8 = v6;
  }
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_1B8B71984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE40c67_ZTSNSt3__16vectorIN3abm19PowerMitigationDataENS_9allocatorIS2_EEEE(void *a1, void *a2)
{
  __n128 result = (void *)a2[4];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[5] = 0;
  a1[4] = result;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v6 = (unsigned char *)a2[5];
  uint64_t v5 = (unsigned char *)a2[6];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[5] = v8;
    a1[6] = v8;
    uint64_t v9 = &v8[2 * (v7 >> 1)];
    a1[7] = v9;
    __n128 result = memcpy(v8, v6, v7);
    a1[6] = v9;
  }
  return result;
}

void sub_1B8B71A2C(_Unwind_Exception *exception_object)
{
  int64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(const void **)(v1 + 32);
  if (v5) {
    _Block_release(v5);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE40c67_ZTSNSt3__16vectorIN3abm19PowerMitigationDataENS_9allocatorIS2_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
}

void abm::debug::registerLogServer(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1) {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
  }
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig((uint64_t *)&xdict, **(ctu::LogServer ***)(a1 + 32));
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kDomainLogLevels");
  xpc_object_t v3 = value;
  uint64_t v4 = MEMORY[0x1E4F14590];
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    if (!v3)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v3) == v4)
  {
    xpc_retain(v3);
    xpc_object_t v5 = v3;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v3);
  if (MEMORY[0x1BA9C88F0](v5) == v4)
  {
    xpc_object_t v7 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1BA9C88F0](v6) == v4)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v8);
  }
  xpc_object_t v9 = xpc_int64_create(1);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "libetl", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(1);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "libtu", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(1);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "trace.diag.cfg", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(1);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "trace.diag.svc", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(1);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "libktl", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v7)
  {
    xpc_retain(v7);
    xpc_object_t v19 = v7;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t object = xdict;
  if (xdict) {
    xpc_retain(xdict);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::LogServer::updateConfig();
  xpc_release(object);
  __int16 v21 = (capabilities::abs *)operator new(0x10uLL);
  unint64_t v22 = *(void **)(a1 + 32);
  *(void *)__int16 v21 = *v22;
  uint64_t v23 = v22[1];
  *((void *)v21 + 1) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
  }
  _MergedGlobals_0 = (uint64_t)v21;
  if (!qword_1EC05B998)
  {
    __int16 v21 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1EC05B998 = (uint64_t)v21;
  }
  capabilities::abs::TUDebugFlags(v21);
  TelephonyUtilDebugSetFlags();
  int v24 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  uint64_t v25 = (capabilities::radio *)capabilities::radio::ice(v24);
  if ((v25 & 1) == 0 && capabilities::radio::maverick(v25))
  {
    if (!qword_1EC05B9A0) {
      qword_1EC05B9A0 = (uint64_t)os_log_create("com.apple.telephony.abm", "libetl");
    }
    ETLDebugRegisterDelegate();
  }
  if (!qword_1EC05B9A8) {
    qword_1EC05B9A8 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  }
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(v7);
  xpc_release(xdict);
}

void sub_1B8B71F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(v10);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintETL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryETL(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 1, (uint64_t)v7, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v5;
  v29[8] = v5;
  v29[5] = v5;
  v29[6] = v5;
  v29[3] = v5;
  v29[4] = v5;
  v29[1] = v5;
  v29[2] = v5;
  v29[0] = v5;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  *(_OWORD *)__p = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v22 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  xpc_object_t v6 = (void *)std::ostream::operator<<();
  xpc_object_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  size_t v8 = strlen(a3);
  xpc_object_t v9 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v15 = v28;
    if ((unint64_t)v28 < *((void *)&v25 + 1))
    {
      *(void *)&long long v28 = *((void *)&v25 + 1);
      uint64_t v15 = *((void *)&v25 + 1);
    }
    xpc_object_t v16 = (const void *)v25;
    size_t v13 = v15 - v25;
    if ((unint64_t)(v15 - v25) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_22;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      HIBYTE(__dst[2]) = 0;
      xpc_object_t v14 = __dst;
      goto LABEL_14;
    }
    xpc_object_t v16 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_22:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v14 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)v13;
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v14;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v13;
  xpc_object_t v14 = __dst;
  if (v13) {
LABEL_13:
  }
    xpc_object_t v9 = (abm::debug *)memmove(v14, v16, v13);
LABEL_14:
  *((unsigned char *)v14 + v13) = 0;
  xpc_object_t v19 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    xpc_object_t v19 = (void **)__dst[0];
  }
  abm::debug::handleDebugPrintBBUHelper(v9, v10, v11, v12, v19);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22 + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v22 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v29);
}

void sub_1B8B7239C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(int a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)_MergedGlobals_0;
  if (!_MergedGlobals_0) {
    return;
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v6) {
    return;
  }
  xpc_object_t v10 = std::__shared_weak_count::lock(v6);
  uint64_t v52 = v10;
  if (!v10) {
    return;
  }
  if (!*v4)
  {
    xpc_object_t v19 = v10;
LABEL_68:
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49[1] = v11;
  v49[2] = v11;
  v49[0] = v11;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v49);
  if (a2 && *a2)
  {
    uint64_t v12 = MEMORY[0x1BA9C7920](v49, a2);
    MEMORY[0x1BA9C7920](v12, ": ");
  }
  MEMORY[0x1BA9C7680](&v47, a3, a4);
  ctu::operator<<();
  size_t v13 = (ctu::Clock *)MEMORY[0x1BA9C76A0](&v47);
  ctu::Clock::now_in_nanoseconds(v13);
  xpc_object_t v14 = (std::string *)operator new(0x60uLL);
  uint64_t v15 = abm::debug::kLogDomainMap[a1];
  size_t v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v20 = v16 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v18 = (void **)operator new(v20 + 1);
    __dst[1] = v17;
    unint64_t v46 = v21 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_16;
  }
  HIBYTE(v46) = v16;
  uint64_t v18 = __dst;
  if (v16) {
LABEL_16:
  }
    memmove(v18, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v18) = 0;
  MEMORY[0x1BA9C7660](v49);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v49);
  ctu::LogMessage::LogMessage();
  v47 = v14;
  long long v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1262720;
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  uint64_t v48 = v22;
  if (SHIBYTE(v46) < 0)
  {
    operator delete(__dst[0]);
    long long v23 = v14 + 2;
    int v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v23 = v14 + 2;
    int v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_19:
      size_t size = v24;
      data = v23;
      goto LABEL_22;
    }
  }
  data = (std::string *)v14[2].__r_.__value_.__l.__data_;
  size_t size = v14[2].__r_.__value_.__l.__size_;
LABEL_22:
  long long v27 = memchr(data, 10, size);
  if (v27) {
    unint64_t v28 = (unint64_t)v27;
  }
  else {
    unint64_t v28 = (unint64_t)data + size;
  }
  if (v28 - (void)data != size)
  {
    unint64_t v29 = (unsigned __int8 *)(v28 + 1);
    if ((std::string *)(v28 + 1) != (std::string *)((char *)data + size))
    {
      unint64_t v30 = (char *)data + size + ~v28;
      do
      {
        int v31 = *v29;
        if (v31 != 10) {
          *(unsigned char *)v28++ = v31;
        }
        ++v29;
        --v30;
      }
      while (v30);
      LOBYTE(v24) = *((unsigned char *)&v14[2].__r_.__value_.__s + 23);
    }
  }
  if ((v24 & 0x80) == 0)
  {
    int64_t v32 = (char *)v23 + v24;
    std::string::size_type v33 = v28 - (void)v23;
    if (v24 >= v28 - (unint64_t)v23) {
      goto LABEL_34;
    }
LABEL_49:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::string::pointer v38 = v14[2].__r_.__value_.__l.__data_;
  std::string::size_type v37 = v14[2].__r_.__value_.__l.__size_;
  int64_t v32 = &v38[v37];
  std::string::size_type v33 = v28 - (void)v38;
  if (v37 < v28 - (unint64_t)v38) {
    goto LABEL_49;
  }
LABEL_34:
  if (&v32[-v28] == (char *)-1)
  {
    if ((v24 & 0x80) != 0)
    {
      std::string::pointer v43 = v14[2].__r_.__value_.__l.__data_;
      v14[2].__r_.__value_.__l.__size_ = v33;
      v43[v33] = 0;
      uint64_t v34 = v48;
      uint64_t v44 = v48;
      if (!v48) {
        goto LABEL_37;
      }
    }
    else
    {
      *((unsigned char *)&v14[2].__r_.__value_.__s + 23) = v33 & 0x7F;
      v23->__r_.__value_.__s.__data_[v33] = 0;
      uint64_t v34 = v48;
      uint64_t v44 = v48;
      if (!v48) {
        goto LABEL_37;
      }
    }
    goto LABEL_36;
  }
  std::string::__erase_external_with_move(v23, v33, (std::string::size_type)&v32[-v28]);
  uint64_t v34 = v48;
  uint64_t v44 = v48;
  if (v48) {
LABEL_36:
  }
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_37:
  ctu::LogServer::log();
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v39 = qword_1EC05B9A0;
      if (qword_1EC05B9A0 && os_log_type_enabled((os_log_t)qword_1EC05B9A0, OS_LOG_TYPE_DEBUG))
      {
        v40 = (std::string::__raw *)&v47[2];
        if (SHIBYTE(v47[2].__r_.__value_.__r.__words[2]) < 0) {
          v40 = (std::string::__raw *)v40->__words[0];
        }
        *(_DWORD *)buf = 136315138;
        uint64_t v54 = v40;
        _os_log_debug_impl(&dword_1B8B00000, v39, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a1 == 3)
    {
      long long v35 = qword_1EC05B9A8;
      if (qword_1EC05B9A8)
      {
        if (os_log_type_enabled((os_log_t)qword_1EC05B9A8, OS_LOG_TYPE_DEFAULT))
        {
          double v36 = (std::string::__raw *)&v47[2];
          if (SHIBYTE(v47[2].__r_.__value_.__r.__words[2]) < 0) {
            double v36 = (std::string::__raw *)v36->__words[0];
          }
          *(_DWORD *)buf = 136315138;
          uint64_t v54 = v36;
LABEL_63:
          _os_log_impl(&dword_1B8B00000, v35, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    long long v35 = qword_1EC05B998;
    if (qword_1EC05B998 && os_log_type_enabled((os_log_t)qword_1EC05B998, OS_LOG_TYPE_DEFAULT))
    {
      v41 = (std::string::__raw *)&v47[2];
      if (SHIBYTE(v47[2].__r_.__value_.__r.__words[2]) < 0) {
        v41 = (std::string::__raw *)v41->__words[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v54 = v41;
      goto LABEL_63;
    }
  }
  uint64_t v42 = v48;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  MEMORY[0x1BA9C76A0](v49);
  xpc_object_t v19 = v52;
  if (v52) {
    goto LABEL_68;
  }
}

void sub_1B8B7296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x1BA9C76A0](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 112);
  _Unwind_Resume(a1);
}

void sub_1B8B72A1C(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_1B8B72A30()
{
  operator delete(v0);
  JUMPOUT(0x1B8B72A78);
}

void sub_1B8B72A5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  JUMPOUT(0x1B8B72A78);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001B8C31CAFLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001B8C31CAFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B8C31CAFLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B8C31CAFLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v5 = (void *)_MergedGlobals_0;
  if (!_MergedGlobals_0) {
    return;
  }
  xpc_object_t v7 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v7) {
    return;
  }
  long long v11 = std::__shared_weak_count::lock(v7);
  uint64_t v39 = v11;
  if (!v11) {
    return;
  }
  if (!*v5)
  {
    long long v23 = v11;
LABEL_34:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = v12;
  v36[2] = v12;
  v36[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v36);
  uint64_t v13 = MEMORY[0x1BA9C7920](v36, a1);
  MEMORY[0x1BA9C7920](v13, " (");
  uint64_t v14 = ctu::operator<<();
  uint64_t v15 = MEMORY[0x1BA9C7920](v14, ") ");
  uint64_t v16 = MEMORY[0x1BA9C7920](v15, a3);
  MEMORY[0x1BA9C7920](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  uint64_t v17 = (ctu::Clock *)MEMORY[0x1BA9C7930](v36, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  uint64_t v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  xpc_object_t v19 = abm::debug::kLogDomainMap[a2];
  size_t v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v24 = v20 | 7;
    }
    uint64_t v25 = v24 + 1;
    long long v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    unint64_t v31 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v31) = v20;
  long long v22 = __dst;
  if (v20) {
LABEL_13:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  MEMORY[0x1BA9C7660](v36);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v36);
  ctu::LogMessage::LogMessage();
  int64_t v32 = v18;
  unint64_t v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1262720;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  std::string::size_type v33 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::log();
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (a2)
  {
    if (a2 == 1)
    {
      long long v27 = qword_1EC05B9A0;
      if (qword_1EC05B9A0)
      {
        if (os_log_type_enabled((os_log_t)qword_1EC05B9A0, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v28 = __p;
          if (v35 < 0) {
            unint64_t v28 = (void **)__p[0];
          }
          goto LABEL_39;
        }
      }
    }
  }
  else
  {
    long long v27 = qword_1EC05B998;
    if (qword_1EC05B998 && os_log_type_enabled((os_log_t)qword_1EC05B998, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v28 = __p;
      if (v35 < 0) {
        unint64_t v28 = (void **)__p[0];
      }
LABEL_39:
      *(_DWORD *)buf = 67109634;
      int v41 = a5;
      __int16 v42 = 2080;
      uint64_t v43 = a3;
      __int16 v44 = 2080;
      uint64_t v45 = v28;
      _os_log_debug_impl(&dword_1B8B00000, v27, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      unint64_t v29 = v33;
      if (!v33) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
  }
  unint64_t v29 = v33;
  if (!v33) {
    goto LABEL_31;
  }
LABEL_29:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_31:
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1BA9C76A0](v36);
  long long v23 = v39;
  if (v39) {
    goto LABEL_34;
  }
}

void sub_1B8B72FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1BA9C76A0](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1BA9C76A0](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_start(va, a4);
  abm::debug::handleDebugPrint(3, &unk_1B8C37E6D, (uint64_t)"%s", (uint64_t)va);
}

uint64_t QMIWakeCommandParser::getWakeReasonForWMS(unsigned __int16 *a1, int a2)
{
  uint64_t v60 = 0;
  v58 = &v59;
  v59 = 0;
  unint64_t v61 = 0xAAAAAAAA00000000;
  uint64_t v2 = (a2 - 4);
  if (a2 < 4) {
    goto LABEL_86;
  }
  int v3 = *a1;
  LOWORD(v61) = *a1;
  int v4 = a1[1];
  WORD1(v61) = a1[1];
  if (a2 >= 8)
  {
    unsigned __int16 v5 = 0;
    xpc_object_t v6 = (unsigned __int8 *)(a1 + 2);
    uint64_t v54 = v2 - 3;
    while (1)
    {
      unsigned int v11 = *v6;
      unint64_t v12 = *(unsigned __int16 *)(v6 + 1);
      if (v54 - (unint64_t)v5 >= v12) {
        size_t v13 = *(unsigned __int16 *)(v6 + 1);
      }
      else {
        size_t v13 = v54 - v5;
      }
      if (v13)
      {
        uint64_t v14 = (char *)operator new(v13);
        uint64_t v15 = &v14[v13];
        bzero(v14, v13);
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      memcpy(v14, v6 + 3, v13);
      uint64_t v16 = v59;
      uint64_t v17 = &v59;
LABEL_15:
      uint64_t v18 = v17;
      if (v16)
      {
        while (1)
        {
          uint64_t v17 = (uint64_t **)v16;
          unsigned int v19 = *((unsigned __int8 *)v16 + 32);
          if (v11 < v19)
          {
            uint64_t v16 = *v17;
            goto LABEL_15;
          }
          if (v19 >= v11) {
            break;
          }
          uint64_t v16 = v17[1];
          if (!v16)
          {
            uint64_t v18 = v17 + 1;
            goto LABEL_20;
          }
        }
        xpc_object_t v7 = (char *)v17;
        xpc_object_t v10 = v17[5];
        xpc_object_t v9 = v17 + 5;
        size_t v8 = v10;
        if (!v10) {
          goto LABEL_6;
        }
      }
      else
      {
LABEL_20:
        xpc_object_t v7 = (char *)operator new(0x40uLL);
        v7[32] = v11;
        *((void *)v7 + 6) = 0;
        *((void *)v7 + 7) = 0;
        *((void *)v7 + 5) = 0;
        *(void *)xpc_object_t v7 = 0;
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 2) = v17;
        *uint64_t v18 = (uint64_t *)v7;
        size_t v20 = (uint64_t *)v7;
        if (*v58)
        {
          v58 = (uint64_t **)*v58;
          size_t v20 = *v18;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v59, v20);
        ++v60;
        xpc_object_t v9 = v7 + 40;
        size_t v8 = (uint64_t *)*((void *)v7 + 5);
        if (!v8) {
          goto LABEL_6;
        }
      }
      *((void *)v7 + 6) = v8;
      operator delete(v8);
      void *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
LABEL_6:
      v6 += (v12 + 3);
      v5 += v12 + 3;
      *((void *)v7 + 5) = v14;
      *((void *)v7 + 6) = v15;
      *((void *)v7 + 7) = v15;
      if (v5 + 3 >= (int)v2)
      {
        int v4 = WORD1(v61);
        int v3 = (unsigned __int16)v61;
        break;
      }
    }
  }
  uint64_t v21 = 1;
  if (v4 && v3 == 1)
  {
    v56 = 0;
    uint64_t v57 = 0;
    uint64_t v55 = &v56;
    long long v22 = v58;
    if (v58 == &v59)
    {
      long long v23 = 0;
      goto LABEL_85;
    }
    while (1)
    {
      uint64_t v24 = v56;
      uint64_t v25 = &v56;
      if (v55 != &v56)
      {
        unint64_t v26 = v56;
        long long v27 = &v56;
        if (v56)
        {
          do
          {
            uint64_t v25 = (uint64_t **)v26;
            unint64_t v26 = (uint64_t *)v26[1];
          }
          while (v26);
        }
        else
        {
          do
          {
            uint64_t v25 = (uint64_t **)v27[2];
            BOOL v28 = *v25 == (uint64_t *)v27;
            long long v27 = v25;
          }
          while (v28);
        }
        unsigned int v29 = *((unsigned __int8 *)v22 + 32);
        if (*((unsigned __int8 *)v25 + 32) >= v29) {
          break;
        }
      }
      if (v56) {
        unint64_t v30 = v25;
      }
      else {
        unint64_t v30 = &v56;
      }
      if (v56) {
        unint64_t v31 = (uint64_t ***)v25;
      }
      else {
        unint64_t v31 = &v55;
      }
      if (v56) {
        int64_t v32 = v25 + 1;
      }
      else {
        int64_t v32 = &v56;
      }
      if (!v31[1]) {
        goto LABEL_54;
      }
LABEL_60:
      int v41 = v22[1];
      if (v41)
      {
        do
        {
          __int16 v42 = (uint64_t **)v41;
          int v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          __int16 v42 = (uint64_t **)v22[2];
          BOOL v28 = *v42 == (uint64_t *)v22;
          long long v22 = v42;
        }
        while (!v28);
      }
      long long v22 = v42;
      if (v42 == &v59)
      {
        long long v23 = v56;
        if (v56)
        {
          uint64_t v43 = &v56;
          __int16 v44 = v56;
          do
          {
            uint64_t v45 = v44;
            uint64_t v46 = v43;
            unsigned int v47 = *((unsigned __int8 *)v44 + 32);
            if (v47 >= 0x11) {
              uint64_t v43 = (uint64_t **)v44;
            }
            else {
              ++v44;
            }
            __int16 v44 = (uint64_t *)*v44;
          }
          while (v44);
          if (v43 != &v56)
          {
            uint64_t v48 = v47 >= 0x11 ? v45 : (uint64_t *)v46;
            if (*((unsigned __int8 *)v48 + 32) <= 0x11u)
            {
              if (v47 < 0x11) {
                uint64_t v45 = (uint64_t *)v46;
              }
              unint64_t v50 = (unsigned char *)v45[5];
              v49 = (unsigned char *)v45[6];
              size_t v51 = v49 - v50;
              if (v49 != v50)
              {
                if ((v51 & 0x8000000000000000) != 0) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v52 = operator new(v49 - v50);
                memcpy(v52, v50, v51);
                if (v51 >= 6 && v52[5] == 7)
                {
                  operator delete(v52);
                  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v56);
                  uint64_t v21 = 0;
                  goto LABEL_87;
                }
                operator delete(v52);
                long long v23 = v56;
              }
            }
          }
        }
LABEL_85:
        std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v23);
LABEL_86:
        uint64_t v21 = 1;
        goto LABEL_87;
      }
    }
    int64_t v32 = &v56;
    unint64_t v30 = &v56;
    if (v56)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v30 = (uint64_t **)v24;
          unsigned int v33 = *((unsigned __int8 *)v24 + 32);
          if (v33 <= v29) {
            break;
          }
          uint64_t v24 = *v30;
          int64_t v32 = v30;
          if (!*v30) {
            goto LABEL_54;
          }
        }
        if (v33 >= v29) {
          goto LABEL_60;
        }
        uint64_t v24 = v30[1];
        if (!v24)
        {
          int64_t v32 = v30 + 1;
          break;
        }
      }
    }
LABEL_54:
    uint64_t v34 = operator new(0x40uLL);
    char v35 = *((unsigned char *)v22 + 32);
    v34[5] = 0;
    *((unsigned char *)v34 + 32) = v35;
    v34[6] = 0;
    v34[7] = 0;
    unint64_t v37 = v22[5];
    double v36 = v22[6];
    size_t v38 = (char *)v36 - (char *)v37;
    if (v36 != v37)
    {
      if ((v38 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = (char *)operator new((char *)v36 - (char *)v37);
      v34[5] = v39;
      v34[6] = v39;
      v40 = &v39[v38];
      v34[7] = &v39[v38];
      memcpy(v39, v37, v38);
      v34[6] = v40;
    }
    void *v34 = 0;
    v34[1] = 0;
    v34[2] = v30;
    std::__shared_weak_count_vtbl *v32 = v34;
    if (*v55)
    {
      uint64_t v55 = (uint64_t **)*v55;
      uint64_t v34 = *v32;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v56, v34);
    ++v57;
    goto LABEL_60;
  }
LABEL_87:
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v59);
  return v21;
}

void sub_1B8B73560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
  {
    operator delete(__p);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a15);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a18);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a15);
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a18);
  _Unwind_Resume(a1);
}

void sub_1B8B735E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void sub_1B8B735F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (v18) {
    operator delete(v18);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a18);
  _Unwind_Resume(a1);
}

uint64_t QMIWakeCommandParser::getWakeReason(CFDataRef *a1, CFTypeRef *a2)
{
  uint64_t v7 = 0;
  size_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 1;
  CFDataGetBytePtr(*a1);
  CFDataGetLength(*a1);
  CFTypeRef cf = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  qmi::parse();
  uint64_t v4 = *((unsigned int *)v8 + 6);
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B8B73718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8B73738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8B73750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN20QMIWakeCommandParser13getWakeReasonEN3ctu2cf11CFSharedRefIK8__CFDataEENS2_I14__CFDictionaryEE_block_invoke(uint64_t a1, unsigned char *a2, unsigned __int16 *a3, int a4, int a5)
{
  if (*a2 == 1 && a2[4] == 128 && a2[5] == 5)
  {
    if (a5 >= a4) {
      int v8 = a4;
    }
    else {
      int v8 = a5;
    }
    uint64_t v9 = *(const void **)(a1 + 40);
    if (v9) {
      CFRetain(v9);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = QMIWakeCommandParser::getWakeReasonForWMS(a3, v8);
    if (v9) {
      CFRelease(v9);
    }
  }
}

void sub_1B8B73804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

std::string *abm::trace::getBasebandTraceDirSuffix@<X0>(abm::trace *this@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)this;
  memset(a2, 170, sizeof(std::string));
  *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
  a2->__r_.__value_.__s.__data_[0] = 0;
  CFTypeRef result = (std::string *)capabilities::radio::vendor(this);
  if ((result - 2) >= 2)
  {
    if (result != 1) {
      return result;
    }
    if (v2)
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = 5;
      strcpy((char *)a2, "-qdss");
      return result;
    }
    unsigned __int16 v5 = &abm::trace::kEURTraceSnapshotDirectorySuffix;
  }
  else
  {
    unsigned __int16 v5 = &abm::trace::kICETraceSnapshotDirectorySuffix;
  }
  return std::string::__assign_external(a2, *v5);
}

void sub_1B8B73960(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void abm::trace::getCoreDumpDirSuffix(std::string *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_1, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (capabilities::radio *)__cxa_guard_acquire(&_MergedGlobals_1);
    if (v4)
    {
      int v5 = capabilities::radio::maverick(v4);
      xpc_object_t v6 = &abm::trace::kEURCoreDumpSnapshotDirectorySuffix;
      if (!v5) {
        xpc_object_t v6 = &abm::trace::kCoreDumpSnapshotDirectorySuffix;
      }
      std::string::basic_string[abi:ne180100]<0>(&xmmword_1EC05B9B8, *v6);
      __cxa_guard_release(&_MergedGlobals_1);
    }
  }
  if (byte_1EC05B9CF < 0)
  {
    long long v3 = xmmword_1EC05B9B8;
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v3, *((std::string::size_type *)&v3 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_1EC05B9B8;
    a1->__r_.__value_.__r.__words[2] = unk_1EC05B9C8;
  }
}

void sub_1B8B73A48(_Unwind_Exception *a1)
{
}

uint64_t abm::trace::isSupported(uint64_t a1)
{
  uint64_t v1 = (const char *)a1;
  int v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    long long v3 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)abm::trace::kDIAG);
    if (v3)
    {
LABEL_3:
      uint64_t v4 = v1;
      if ((v2 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    long long v3 = (capabilities::radio *)strcasecmp((const char *)a1, (const char *)abm::trace::kDIAG);
    if (v3) {
      goto LABEL_3;
    }
  }
  if (capabilities::radio::maverick(v3)) {
    return 1;
  }
  LOBYTE(v2) = v1[23];
  uint64_t v4 = v1;
  if ((v2 & 0x80) == 0)
  {
LABEL_4:
    int v5 = (capabilities::radio *)strcasecmp(v4, (const char *)abm::trace::kICETrace);
    if (v5) {
      goto LABEL_5;
    }
LABEL_12:
    if (capabilities::radio::ice(v5)) {
      return 1;
    }
    LOBYTE(v2) = v1[23];
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_11:
  int v5 = (capabilities::radio *)strcasecmp(*(const char **)v1, (const char *)abm::trace::kICETrace);
  if (!v5) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    xpc_object_t v6 = v1;
    if (!strcasecmp(v1, (const char *)abm::trace::kBasebandTrace)) {
      return 1;
    }
    goto LABEL_15;
  }
LABEL_14:
  xpc_object_t v6 = *(const char **)v1;
  if (!strcasecmp(*(const char **)v1, (const char *)abm::trace::kBasebandTrace)) {
    return 1;
  }
LABEL_15:
  uint64_t v7 = (capabilities::radio *)strcasecmp(v6, (const char *)abm::trace::kEURCoreDump);
  if (v7)
  {
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    if (capabilities::radio::maverick(v7)) {
      return 1;
    }
    if ((v1[23] & 0x80) == 0)
    {
LABEL_17:
      if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump)
        || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
      {
        return 1;
      }
      if (!strcasecmp(v1, (const char *)abm::trace::kCompression)) {
        goto LABEL_40;
      }
      if (strcasecmp(v1, (const char *)abm::trace::kBasebandIPC))
      {
        if (!strcasecmp(v1, (const char *)abm::trace::kIPC)
          || !strcasecmp(v1, "KernelPCI")
          || !strcasecmp(v1, (const char *)abm::trace::kTapToRadar))
        {
          goto LABEL_40;
        }
LABEL_34:
        if (strcasecmp(v1, (const char *)abm::trace::kProfile))
        {
          if (strcasecmp(v1, (const char *)abm::trace::kTraceTailspin)
            && strcasecmp(v1, "Settings")
            && strcasecmp(v1, "LogFilter"))
          {
            return 0;
          }
          goto LABEL_40;
        }
        return 1;
      }
      goto LABEL_43;
    }
  }
  uint64_t v1 = *(const char **)v1;
  if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump) || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs)) {
    return 1;
  }
  if (!strcasecmp(v1, (const char *)abm::trace::kCompression)) {
    goto LABEL_40;
  }
  if (strcasecmp(v1, (const char *)abm::trace::kBasebandIPC))
  {
    if (!strcasecmp(v1, (const char *)abm::trace::kIPC)
      || !strcasecmp(v1, "KernelPCI")
      || !strcasecmp(v1, (const char *)abm::trace::kTapToRadar))
    {
LABEL_40:
      return MEMORY[0x1F417D688]();
    }
    goto LABEL_34;
  }
LABEL_43:

  return MEMORY[0x1F417D648]();
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1BA9C88F0](*a1) != MEMORY[0x1E4F14590]) {
    return "Unknown";
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v3 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v3 < 5) {
    return off_1E6194220[v3];
  }
  else {
    return "Unknown";
  }
}

void sub_1B8B73DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x1BA9C88F0](*a1) != MEMORY[0x1E4F14590]) {
    return 5;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

void sub_1B8B73EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  int v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1 = *((int *)this + 3);
  if (v1 > 2) {
    return "unknown";
  }
  else {
    return off_1E6194248[v1];
  }
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F12627A8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1BA9C88F0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v5 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1B8B7430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F12627A8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(unsigned char *)(a2 + 8) = 0;
    CFTypeRef result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  int v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F12627F0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1BA9C88F0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1B8B74728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F12627F0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  int v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F1262838;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1BA9C88F0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1B8B74B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F1262838;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(3);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  int v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*(unsigned char *)(a1 + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F1262880;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1BA9C88F0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1B8B74F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F1262880;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(4);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  int v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*(unsigned char *)(a1 + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1BA9C88F0](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F12628C8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1BA9C88F0](*a1) == MEMORY[0x1E4F14590] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_1B8B75354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_1F12628C8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

double QMICommandDriverFactory::create_default_global@<D0>(void *a1@<X8>)
{
  xpc_object_t v3 = operator new(0xA8uLL);
  v3[1] = 0;
  v3[2] = 0;
  *xpc_object_t v3 = &unk_1F12629E0;
  CommandDriverFactory::CommandDriverFactory((CommandDriverFactory *)(v3 + 3));
  v3[3] = &unk_1F1262910;
  double result = 0.0;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  v3[20] = 0;
  *a1 = v5;
  a1[1] = v3;
  return result;
}

void sub_1B8B75424(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::QMICommandDriverFactory(QMICommandDriverFactory *this)
{
  CommandDriverFactory::CommandDriverFactory(this);
  *(void *)uint64_t v1 = &unk_1F1262910;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(void *)(v1 + 136) = 0;
}

{
  uint64_t v1;

  CommandDriverFactory::CommandDriverFactory(this);
  *(void *)uint64_t v1 = &unk_1F1262910;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(void *)(v1 + 136) = 0;
}

const char *QMICommandDriverFactory::getName(QMICommandDriverFactory *this)
{
  return "qmi.driver.factory";
}

void QMICommandDriverFactory::createRadioCommandDriver(NSObject *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  xpc_object_t v4 = a1;
  long long v32 = 0uLL;
  if (a1[13].isa)
  {
LABEL_2:
    if (capabilities::radio::mav20Plus((capabilities::radio *)a1))
    {
      uint64_t v6 = a2[1];
      uint64_t v29 = *a2;
      unint64_t v30 = (std::__shared_weak_count *)v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      isa = v4[13].isa;
      dispatch_object_t object = isa;
      if (isa) {
        dispatch_retain(isa);
      }
      int v8 = (std::__shared_weak_count *)v4[2].isa;
      Class v26 = v4[1].isa;
      long long v27 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      radio::QMICommandDriverM20::create(&v29, &object, (uint64_t *)&v26, (uint64_t *)buf);
      long long v9 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      long long v32 = v9;
      xpc_object_t v10 = v27;
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      if (object) {
        dispatch_release(object);
      }
      xpc_object_t v11 = v30;
      if (!v30) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v12 = a2[1];
      uint64_t v24 = *a2;
      uint64_t v25 = (std::__shared_weak_count *)v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      size_t v13 = v4[13].isa;
      dispatch_object_t v23 = v13;
      if (v13) {
        dispatch_retain(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)v4[2].isa;
      Class v21 = v4[1].isa;
      long long v22 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      radio::QMICommandDriver::create(&v24, &v23, (uint64_t *)&v21, (uint64_t *)buf);
      long long v15 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      long long v32 = v15;
      uint64_t v16 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v23) {
        dispatch_release(v23);
      }
      xpc_object_t v11 = v25;
      if (!v25) {
        goto LABEL_30;
      }
    }
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_30:
    *(_OWORD *)a3 = v32;
    return;
  }
  uint64_t v17 = dispatch_workloop_create("radio.wl");
  uint64_t v18 = v4[13].isa;
  v4[13].isa = (Class)v17;
  if (v18)
  {
    dispatch_release(v18);
    uint64_t v17 = v4[13].isa;
  }
  if (v17)
  {
    dispatch_retain(v17);
    a1 = v4[13].isa;
    v4[13].isa = (Class)v17;
    if (!a1) {
      goto LABEL_2;
    }
    dispatch_release(a1);
    if (v4[13].isa) {
      goto LABEL_2;
    }
  }
  else
  {
    v4[13].isa = 0;
  }
  unsigned int v19 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "qmi.driver.factory");
  size_t v20 = *(NSObject **)&buf[8];
  ctu::OsLogContext::~OsLogContext(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v20, OS_LOG_TYPE_DEFAULT, "Failed to create radio workloop!", buf, 2u);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

void sub_1B8B757AC(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1B8B757C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, char a12)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v12 - 48);
  _Unwind_Resume(a1);
}

void sub_1B8B757F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, dispatch_object_t object, char a17)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v17 - 48);
  _Unwind_Resume(a1);
}

void sub_1B8B75820(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::getRadioWorkloop(QMICommandDriverFactory *this@<X0>, NSObject **a2@<X8>)
{
  xpc_object_t v4 = *((void *)this + 13);
  if (v4)
  {
    *a2 = v4;
LABEL_4:
    dispatch_retain(v4);
    return;
  }
  xpc_object_t v4 = dispatch_workloop_create("radio.wl");
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = v4;
  if (v5)
  {
    dispatch_release(v5);
    xpc_object_t v4 = *((void *)this + 13);
  }
  *a2 = v4;
  if (v4)
  {
    goto LABEL_4;
  }
}

void QMICommandDriverFactory::weakRadioCommandDriver(QMICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 11);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((void *)this + 11))
    {
      GetABMLogServer(&v10);
      QMICommandDriverFactory::createRadioCommandDriver(this, &v10, (uint64_t)&v12);
      long long v6 = v12;
      long long v12 = 0uLL;
      xpc_object_t v7 = (std::__shared_weak_count *)*((void *)this + 12);
      *(_OWORD *)((char *)this + 88) = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      int v8 = (std::__shared_weak_count *)*((void *)&v12 + 1);
      if (*((void *)&v12 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      long long v9 = v11;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    uint64_t v4 = *((void *)this + 11);
  }
  uint64_t v5 = *((void *)this + 12);
  *a2 = v4;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_1B8B75A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_1B8B75A58(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createRFSCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  GetABMLogServer(&v8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  v7[0] = v4;
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMIRFSCommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a2 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B8B75B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void QMICommandDriverFactory::weakRFSCommandDriver(QMICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 14);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((void *)this + 14))
    {
      QMICommandDriverFactory::createRFSCommandDriver(this, &v9);
      long long v6 = v9;
      long long v9 = 0uLL;
      xpc_object_t v7 = (std::__shared_weak_count *)*((void *)this + 15);
      *((_OWORD *)this + 7) = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      if (*((void *)&v9 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    uint64_t v4 = *((void *)this + 14);
  }
  uint64_t v5 = *((void *)this + 15);
  *a2 = v4;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_1B8B75CAC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createCoexCommandDriver(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[1];
  uint64_t v8 = *a2;
  long long v9 = (std::__shared_weak_count *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  v7[0] = *(void *)(a1 + 8);
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coex::QMICommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a3 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B8B75DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void QMICommandDriverFactory::createAntennaCommandDriver(uint64_t a1@<X0>, NSObject **a2@<X1>, _OWORD *a3@<X8>)
{
  GetABMLogServer(&v13);
  long long v6 = *a2;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  xpc_object_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 8);
  xpc_object_t v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  antenna::QMICommandDriver::create(&v13, &object, &v10, &v15);
  *a3 = v15;
  long long v15 = 0uLL;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  long long v9 = v14;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B8B75F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createAwdCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  GetABMLogServer(&v8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  v7[0] = v4;
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  awd::QMIAwdCommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a2 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B8B76050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void QMICommandDriverFactory::createHealthCommandDriver(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6 = a2[1];
  uint64_t v19 = *a2;
  size_t v20 = (std::__shared_weak_count *)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = *(const void **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  int64_t v9 = v7 - *(void *)a3;
  if (v7 != *(void *)a3)
  {
    if (v9 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    long long v10 = (char *)operator new(v7 - *(void *)a3);
    xpc_object_t v11 = &v10[4 * (v9 >> 2)];
    __p = v10;
    uint64_t v18 = v11;
    memcpy(v10, v8, v9);
    uint64_t v17 = v11;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 16);
  v15[0] = v12;
  v15[1] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMIHealthCommandDriver::create(&v19, (uint64_t)&__p, v15, (uint64_t *)&v21);
  *a4 = v21;
  long long v21 = 0uLL;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  uint64_t v14 = v20;
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B8B761F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createLogCommandDriver(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  GetABMLogServer(&v29);
  uint64_t v12 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v12 = _Block_copy(v12);
  }
  uint64_t v13 = *(NSObject **)(a2 + 8);
  long long v27 = v12;
  dispatch_object_t v28 = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  uint64_t v14 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v14 = _Block_copy(v14);
  }
  long long v15 = *(NSObject **)(a3 + 8);
  aBlock = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  uint64_t v16 = *a4;
  CFTypeRef cf = v16;
  if (v16) {
    CFRetain(v16);
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v23 = *(std::string *)a5;
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 8);
  long long v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  logs::QMICommandDriver::create(&v29, (uint64_t)&v27, (uint64_t)&aBlock, &cf, (uint64_t)&v23, &v21, &v31);
  *a6 = v31;
  long long v31 = 0uLL;
  uint64_t v18 = v22;
  if (!v22 || atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_22:
    operator delete(v23.__r_.__value_.__l.__data_);
    CFTypeRef v19 = cf;
    if (!cf) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_19:
  CFTypeRef v19 = cf;
  if (cf) {
LABEL_23:
  }
    CFRelease(v19);
LABEL_24:
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v28) {
    dispatch_release(v28);
  }
  if (v27) {
    _Block_release(v27);
  }
  size_t v20 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8B76444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
}

void QMICommandDriverFactory::createDataCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  GetABMLogServer(&v8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  v7[0] = v4;
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data::QMIDataCommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a2 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B8B765AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void QMICommandDriverFactory::weakDataCommandDriver(QMICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 16);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((void *)this + 16))
    {
      QMICommandDriverFactory::createDataCommandDriver(this, &v9);
      long long v6 = v9;
      long long v9 = 0uLL;
      uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 17);
      *((_OWORD *)this + 8) = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      if (*((void *)&v9 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    uint64_t v4 = *((void *)this + 16);
  }
  uint64_t v5 = *((void *)this + 17);
  *a2 = v4;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_1B8B766E8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createCPMSCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  v4[0] = *((void *)this + 1);
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cpms::QMICommandDriver::create(v4, (cpms::QMICommandDriver **)&v5);
  *a2 = v5;
  long long v5 = 0uLL;
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B767A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMICommandDriverFactory::createCoreDumpCommandDriver(QMICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::mav20Plus(this))
  {
    GetABMLogServer(&v15);
    uint64_t v4 = *((void *)this + 1);
    long long v5 = (std::__shared_weak_count *)*((void *)this + 2);
    v14[0] = v4;
    v14[1] = (uint64_t)v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    coredump::QMICommandDriverM20::create(&v15, v14, (uint64_t *)&v17);
    long long v6 = v17;
    long long v17 = 0uLL;
    *(_OWORD *)a2 = v6;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v7 = v16;
    if (!v16) {
      return;
    }
LABEL_15:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  GetABMLogServer(&v12);
  uint64_t v8 = *((void *)this + 1);
  long long v9 = (std::__shared_weak_count *)*((void *)this + 2);
  v11[0] = v8;
  v11[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coredump::QMICommandDriver::create(&v12, v11, (uint64_t *)&v17);
  long long v10 = v17;
  long long v17 = 0uLL;
  *(_OWORD *)a2 = v10;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v7 = v13;
  if (v13) {
    goto LABEL_15;
  }
}

void sub_1B8B76954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1B8B76978(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8B7698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void sub_1B8B769B0(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8B769C4(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createDebugCommandDriver(capabilities::radio *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (capabilities::radio::mav20Plus(a1))
  {
    uint64_t v6 = a2[1];
    uint64_t v19 = *a2;
    size_t v20 = (std::__shared_weak_count *)v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *((void *)a1 + 1);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 2);
    v18[0] = v7;
    v18[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    radio::QMIDebugCommandDriverM20::create(&v19, v18, (uint64_t *)&v21);
    long long v9 = v21;
    long long v21 = 0uLL;
    *(_OWORD *)a3 = v9;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    long long v10 = v20;
    if (!v20) {
      return;
    }
LABEL_19:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  uint64_t v11 = a2[1];
  uint64_t v16 = *a2;
  long long v17 = (std::__shared_weak_count *)v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)a1 + 1);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 2);
  v15[0] = v12;
  v15[1] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMIDebugCommandDriver::create(&v16, v15, (uint64_t *)&v21);
  long long v14 = v21;
  long long v21 = 0uLL;
  *(_OWORD *)a3 = v14;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v10 = v17;
  if (v17) {
    goto LABEL_19;
  }
}

void sub_1B8B76BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1B8B76BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void sub_1B8B76BE8(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createDiagCommandDriver(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  GetABMLogServer(&v15);
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a2 + 8);
  aBlock = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  diag::QMICommandDriver::create(&v15, (uint64_t)&aBlock, &v11, &v17);
  *a3 = v17;
  long long v17 = 0uLL;
  uint64_t v9 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  long long v10 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B8B76D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(uint64_t a1)
{
  xpc_object_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void QMICommandDriverFactory::createTraceCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void QMICommandDriverFactory::createDesenseCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  GetABMLogServer(&v8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  v7[0] = v4;
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  desense::QMICommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a2 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1B8B76EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void QMICommandDriverFactory::createCellularCertCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__shared_ptr_emplace<QMICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12629E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12629E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<QMICommandDriverFactory>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1262910;
  xpc_object_t v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(NSObject **)(a1 + 128);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    *(void *)(a1 + 24) = MEMORY[0x1E4FB9E30] + 16;
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v6) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 24) = MEMORY[0x1E4FB9E30] + 16;
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

const char *wda::asString(unsigned int a1)
{
  if (a1 > 9) {
    return "???";
  }
  else {
    return off_1E6194260[a1];
  }
}

{
  if (a1 > 5) {
    return "???";
  }
  else {
    return off_1E61942B0[a1];
  }
}

const char *wda::asString(int a1)
{
  uint64_t v1 = "???";
  if (a1 == 7) {
    uint64_t v1 = "LowLatency";
  }
  if (a1 == 4) {
    return "Default";
  }
  else {
    return v1;
  }
}

{
  const char *v1;

  uint64_t v1 = "???";
  if (a1 == 2) {
    uint64_t v1 = "IP";
  }
  if (a1 == 1) {
    return "Ethernet";
  }
  else {
    return v1;
  }
}

{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 0x7FFFFFFF) {
        return "AllMask";
      }
      return "???";
    }
    return "FlowControl";
  }
  else
  {
    if (a1)
    {
      if (a1 == 1) {
        return "DownLinkMarker";
      }
      return "???";
    }
    return "Unsupported";
  }
}

{
  const char *v1;

  uint64_t v1 = "???";
  if (a1 == 1) {
    uint64_t v1 = "Version1";
  }
  if (a1) {
    return v1;
  }
  else {
    return "Unsupported";
  }
}

{
  const char *v1;

  uint64_t v1 = "???";
  if (a1 == 1) {
    uint64_t v1 = "Enable";
  }
  if (a1) {
    return v1;
  }
  else {
    return "Disable";
  }
}

uint64_t radio::QMICommandDriverBase::checkError@<X0>(uint64_t this@<X0>, const qmi::ResponseBase *a2@<X1>, const char *a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  if (!*((_DWORD *)a2 + 1)) {
    return this;
  }
  uint64_t v6 = this;
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v39[7] = v7;
  v39[8] = v7;
  v39[5] = v7;
  v39[6] = v7;
  v39[3] = v7;
  v39[4] = v7;
  v39[1] = v7;
  v39[2] = v7;
  long long v38 = v7;
  v39[0] = v7;
  *(_OWORD *)double v36 = v7;
  long long v37 = v7;
  long long v34 = v7;
  long long v35 = v7;
  long long v32 = v7;
  long long v33 = v7;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Failed ", 7);
  if (a3)
  {
    size_t v8 = strlen(a3);
  }
  else
  {
    a3 = "(missing description)";
    size_t v8 = 21;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)a3, v8);
  uint64_t v9 = (const char *)qmi::asString();
  if (v9)
  {
    long long v10 = (long long *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)" ", 1);
    size_t v11 = strlen(v9);
  }
  else
  {
    uint64_t v9 = " Unknown baseband error!";
    long long v10 = &v32;
    size_t v11 = 24;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v9, v11);
  uint64_t v12 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v38) & 0x10) != 0)
    {
      uint64_t v22 = v38;
      if ((unint64_t)v38 < *((void *)&v35 + 1))
      {
        *(void *)&long long v38 = *((void *)&v35 + 1);
        uint64_t v22 = *((void *)&v35 + 1);
      }
      std::string v23 = (const void **)&v35;
    }
    else
    {
      if ((BYTE8(v38) & 8) == 0)
      {
        size_t v20 = 0;
        HIBYTE(v31) = 0;
        long long v21 = cf;
        goto LABEL_50;
      }
      std::string v23 = (const void **)&v33 + 1;
      uint64_t v22 = *((void *)&v34 + 1);
    }
    uint64_t v24 = *v23;
    size_t v20 = v22 - (void)*v23;
    if (v20 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v20 >= 0x17)
    {
      uint64_t v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v25 = v20 | 7;
      }
      uint64_t v26 = v25 + 1;
      long long v21 = operator new(v25 + 1);
      cf[1] = (CFTypeRef)v20;
      int64_t v31 = v26 | 0x8000000000000000;
      cf[0] = v21;
    }
    else
    {
      HIBYTE(v31) = v22 - *(unsigned char *)v23;
      long long v21 = cf;
      if (!v20) {
        goto LABEL_50;
      }
    }
    memmove(v21, v24, v20);
LABEL_50:
    *((unsigned char *)v21 + v20) = 0;
    long long v27 = cf;
    if (v31 < 0) {
      long long v27 = (CFTypeRef *)cf[0];
    }
    *(_DWORD *)buf = 136446210;
    __int16 v42 = v27;
    _os_log_error_impl(&dword_1B8B00000, v12, OS_LOG_TYPE_ERROR, "%{public}s: ", buf, 0xCu);
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)cf[0]);
    }
  }
  if ((BYTE8(v38) & 0x10) != 0)
  {
    uint64_t v15 = v38;
    if ((unint64_t)v38 < *((void *)&v35 + 1))
    {
      *(void *)&long long v38 = *((void *)&v35 + 1);
      uint64_t v15 = *((void *)&v35 + 1);
    }
    uint64_t v16 = (const void *)v35;
    size_t v13 = v15 - v35;
    if ((unint64_t)(v15 - v35) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((BYTE8(v38) & 8) == 0)
    {
      size_t v13 = 0;
      HIBYTE(v29) = 0;
      long long v14 = __p;
      goto LABEL_22;
    }
    uint64_t v16 = (const void *)*((void *)&v33 + 1);
    size_t v13 = *((void *)&v34 + 1) - *((void *)&v33 + 1);
    if (*((void *)&v34 + 1) - *((void *)&v33 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_34:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    long long v14 = operator new(v17 + 1);
    __p[1] = (void *)v13;
    unint64_t v29 = v18 | 0x8000000000000000;
    __p[0] = v14;
    goto LABEL_21;
  }
  HIBYTE(v29) = v13;
  long long v14 = __p;
  if (v13) {
LABEL_21:
  }
    memmove(v14, v16, v13);
LABEL_22:
  *((unsigned char *)v14 + v13) = 0;
  CreateError();
  if (cf == a4) {
    goto LABEL_25;
  }
  CFTypeRef v19 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v19)
  {
    CFRelease(v19);
LABEL_25:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v32 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v32 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v39);
}

void sub_1B8B7772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL radio::QMICommandDriverBase::isEmptyBuffer(uint64_t a1, CFDataRef *a2)
{
  if (*a2) {
    xpc_object_t v2 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    xpc_object_t v2 = 0;
  }
  if (!v2) {
    return 1;
  }
  BytePtr = CFDataGetBytePtr(*a2);
  CFIndex Length = CFDataGetLength(*a2);
  CFIndex v6 = Length - 1;
  if (Length < 1) {
    return 1;
  }
  do
  {
    int v8 = *BytePtr++;
    int v7 = v8;
    BOOL result = v8 == 0;
    BOOL v11 = v6-- != 0;
  }
  while (!v7 && v11);
  return result;
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t radio::QMICommandDriverBase::QMICommandDriverBase(uint64_t a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  CFIndex v6 = *(std::__shared_weak_count **)(a2 + 8);
  BOOL v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  int v7 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::CommandDriver::CommandDriver();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)a1 = &unk_1F1262A30;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  return a1;
}

void sub_1B8B7795C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::~QMICommandDriverBase(radio::QMICommandDriverBase *this)
{
  *(void *)this = &unk_1F1262A30;
  xpc_object_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string v23 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v23, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverBase *)((char *)this + 320));
  qmi::Client::~Client((radio::QMICommandDriverBase *)((char *)this + 288));
  *(void *)this = &unk_1F1263700;
  if (*((char *)this + 287) < 0) {
    operator delete(*((void **)this + 33));
  }
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  CFIndex v6 = *((void *)this + 26);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = (const void *)*((void *)this + 25);
  if (v7) {
    _Block_release(v7);
  }
  if (*((void *)this + 24))
  {
    uint64_t v8 = *((void *)this + 22);
    uint64_t v9 = (radio::QMICommandDriverBase *)*((void *)this + 23);
    uint64_t v10 = *(void *)v9;
    *(void *)(v10 + 8) = *(void *)(v8 + 8);
    **(void **)(v8 + 8) = v10;
    *((void *)this + 24) = 0;
    if (v9 != (radio::QMICommandDriverBase *)((char *)this + 176))
    {
      do
      {
        size_t v20 = (radio::QMICommandDriverBase *)*((void *)v9 + 1);
        CFTypeRef v19 = (const void *)*((void *)v9 + 2);
        if (v19) {
          _Block_release(v19);
        }
        operator delete(v9);
        uint64_t v9 = v20;
      }
      while (v20 != (radio::QMICommandDriverBase *)((char *)this + 176));
    }
  }
  if (*((void *)this + 21))
  {
    uint64_t v11 = *((void *)this + 19);
    uint64_t v12 = (radio::QMICommandDriverBase *)*((void *)this + 20);
    uint64_t v13 = *(void *)v12;
    *(void *)(v13 + 8) = *(void *)(v11 + 8);
    **(void **)(v11 + 8) = v13;
    *((void *)this + 21) = 0;
    if (v12 != (radio::QMICommandDriverBase *)((char *)this + 152))
    {
      do
      {
        uint64_t v22 = (radio::QMICommandDriverBase *)*((void *)v12 + 1);
        long long v21 = (const void *)*((void *)v12 + 2);
        if (v21) {
          _Block_release(v21);
        }
        operator delete(v12);
        uint64_t v12 = v22;
      }
      while (v22 != (radio::QMICommandDriverBase *)((char *)this + 152));
    }
  }
  *((void *)this + 16) = &unk_1F12638A0;
  long long v14 = (atomic_uint *)*((void *)this + 18);
  if (v14)
  {
    if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
      if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
      }
    }
  }
  *((void *)this + 13) = &unk_1F1263910;
  uint64_t v15 = (atomic_uint *)*((void *)this + 15);
  if (v15)
  {
    if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
      if (atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
      }
    }
  }
  *(void *)this = &unk_1F1263980;
  MEMORY[0x1BA9C75B0]((char *)this + 8);
  uint64_t v16 = *((void *)this + 12);
  if (v16) {
    dispatch_release(v16);
  }
  uint64_t v17 = *((void *)this + 11);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

void radio::QMICommandDriverBase::startDMSClient_sync(radio::QMICommandDriverBase *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (v3 = *((void *)this + 9), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  memset(v62, 170, sizeof(v62));
  Name = (const char *)radio::CommandDriver::getName(this);
  BYTE7(v64) = 4;
  strcpy((char *)&v63, ".DMS");
  size_t v7 = strlen(Name);
  uint64_t v8 = std::string::insert((std::string *)&v63, 0, Name, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v62[16] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)v62 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v64) & 0x80000000) == 0)
  {
    if (*((void *)this + 31)) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v13 = *((void *)this + 11);
    uint64_t v54 = v13;
    if (v13) {
      dispatch_retain(v13);
    }
    char v60 = 5;
    strcpy((char *)v59, "radio");
    uint64_t v52 = 0;
    long long v53 = 0;
    long long v14 = std::__shared_weak_count::lock(v5);
    if (v14)
    {
      uint64_t v15 = v14;
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v52 = v3;
      long long v53 = v14;
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      uint64_t v52 = 0;
      long long v53 = 0;
    }
    qmi::Client::createWithQueue();
    long long v27 = v64;
    long long v64 = 0uLL;
    dispatch_object_t v28 = (std::__shared_weak_count *)*((void *)this + 39);
    *((_OWORD *)this + 19) = v27;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    qmi::Client::~Client((qmi::Client *)&v63);
    if (v53) {
      std::__shared_weak_count::__release_weak(v53);
    }
    if (v60 < 0)
    {
      operator delete(v59[0]);
      CFTypeRef v19 = v54;
      if (!v54) {
        goto LABEL_33;
      }
    }
    else
    {
      CFTypeRef v19 = v54;
      if (!v54) {
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
  operator delete((void *)v63);
  if (!*((void *)this + 31)) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v10 = *((void *)this + 11);
  unint64_t v61 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  char v60 = 5;
  strcpy((char *)v59, "radio");
  uint64_t v57 = 0;
  v58 = 0;
  uint64_t v11 = std::__shared_weak_count::lock(v5);
  if (v11)
  {
    uint64_t v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v57 = v3;
    v58 = v11;
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    uint64_t v57 = 0;
    v58 = 0;
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 32);
  uint64_t v55 = *((void *)this + 31);
  v56 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v17 = v64;
  long long v64 = 0uLL;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 39);
  *((_OWORD *)this + 19) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  qmi::Client::~Client((qmi::Client *)&v63);
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  CFTypeRef v19 = v61;
  if (v61) {
LABEL_32:
  }
    dispatch_release(v19);
LABEL_33:
  size_t v20 = (radio::QMICommandDriverBase *)((char *)this + 288);
  uint64_t v45 = MEMORY[0x1E4F143A8];
  uint64_t v46 = 1174405120;
  unsigned int v47 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke;
  uint64_t v48 = &__block_descriptor_tmp_14;
  v49 = this;
  uint64_t v50 = v3;
  size_t v51 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  uint64_t v38 = MEMORY[0x1E4F143A8];
  uint64_t v39 = 1174405120;
  unint64_t v40 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_8;
  int v41 = &__block_descriptor_tmp_11_3;
  __int16 v42 = this;
  uint64_t v43 = v3;
  __int16 v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1174405120;
  long long v33 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_12;
  long long v34 = &__block_descriptor_tmp_16_2;
  long long v35 = this;
  uint64_t v36 = v3;
  long long v37 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v29[2] = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_17;
  v29[3] = &__block_descriptor_tmp_26_1;
  v29[4] = this;
  v29[5] = v3;
  unint64_t v30 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v63 = MEMORY[0x1E4F143A8];
  *((void *)&v63 + 1) = 0x40000000;
  *(void *)&long long v64 = ___ZNK3qmi6Client13setIndHandlerIRKN3dms3abm11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v64 + 1) = &unk_1E6194458;
  v65 = v29;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake((radio::QMICommandDriverBase *)((char *)this + 288));
  long long v21 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v21 || (uint64_t v22 = *((void *)this + 9), (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v24 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
    uint64_t v25 = std::__shared_weak_count::lock(v24);
    if (v25) {
      goto LABEL_37;
    }
LABEL_40:
    long long v63 = 0uLL;
    goto LABEL_41;
  }
  uint64_t v25 = std::__shared_weak_count::lock(v23);
  if (!v25) {
    goto LABEL_40;
  }
LABEL_37:
  uint64_t v26 = (atomic_ullong *)v25;
  atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v63 = v22;
  *((void *)&v63 + 1) = v25;
  std::__shared_weak_count::__release_weak(v24);
  if (atomic_fetch_add(v26 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_42;
  }
  (*(void (**)(atomic_ullong *))(*v26 + 16))(v26);
  uint64_t v24 = (std::__shared_weak_count *)v26;
LABEL_41:
  std::__shared_weak_count::__release_weak(v24);
LABEL_42:
  qmi::Client::setClientHandle();
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
  }
  qmi::Client::start(v20);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  if ((v62[23] & 0x80000000) != 0) {
    operator delete(*(void **)v62);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1B8B784E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  unint64_t v40 = *(std::__shared_weak_count **)(v38 - 208);
  if (v40)
  {
    std::__shared_weak_count::__release_weak(v40);
    if (*(char *)(v38 - 137) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v38 - 160));
      int v41 = *(NSObject **)(v38 - 200);
      if (!v41)
      {
LABEL_8:
        if (*(char *)(v38 - 105) < 0) {
          operator delete(*(void **)(v38 - 128));
        }
        std::__shared_weak_count::__release_weak(v37);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v41);
      goto LABEL_8;
    }
  }
  else if (*(char *)(v38 - 137) < 0)
  {
    goto LABEL_3;
  }
  int v41 = *(NSObject **)(v38 - 200);
  if (!v41) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1B8B785D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (a23)
    {
      std::__shared_weak_count::__release_weak(a23);
      if (a30)
      {
        std::__shared_weak_count::__release_weak(a30);
        if (!a37) {
          JUMPOUT(0x1B8B785A4);
        }
        JUMPOUT(0x1B8B785A0);
      }
      JUMPOUT(0x1B8B78598);
    }
    JUMPOUT(0x1B8B78590);
  }
  JUMPOUT(0x1B8B78588);
}

void sub_1B8B785E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23) {
    JUMPOUT(0x1B8B78664);
  }
  JUMPOUT(0x1B8B78590);
}

void sub_1B8B785F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30) {
    JUMPOUT(0x1B8B78670);
  }
  JUMPOUT(0x1B8B78598);
}

void sub_1B8B78604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (!a37) {
    JUMPOUT(0x1B8B785A4);
  }
  JUMPOUT(0x1B8B785A0);
}

void sub_1B8B78614()
{
  if (*(char *)(v0 - 81) < 0) {
    JUMPOUT(0x1B8B785B0);
  }
  JUMPOUT(0x1B8B785B4);
}

void sub_1B8B78628(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B7863C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (a23)
    {
      std::__shared_weak_count::__release_weak(a23);
      if (a30)
      {
        std::__shared_weak_count::__release_weak(a30);
        if (!a37) {
          JUMPOUT(0x1B8B785A4);
        }
        JUMPOUT(0x1B8B785A0);
      }
      JUMPOUT(0x1B8B78598);
    }
    JUMPOUT(0x1B8B78590);
  }
  JUMPOUT(0x1B8B78588);
}

void sub_1B8B7864C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    JUMPOUT(0x1B8B78658);
  }
  JUMPOUT(0x1B8B78588);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (radio::CommandDriver *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    long long v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        CFIndex v6 = *((void *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)size_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I DMS:Stopped", v7, 2u);
        }
        radio::CommandDriver::handleClientStateChanged_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B78774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_8(void *a1)
{
  xpc_object_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (radio::QMICommandDriverBase *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    long long v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        CFIndex v6 = *((void *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)size_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I DMS:Started", v7, 2u);
        }
        radio::QMICommandDriverBase::setupOperatingModeReporting_sync(v3);
        radio::CommandDriver::handleClientStateChanged_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B78884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::setupOperatingModeReporting_sync(radio::QMICommandDriverBase *this)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v29 = v2;
  long long v30 = v2;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v29);
  uint64_t v3 = (char *)*((void *)&v29 + 1);
  uint64_t v4 = (char *)v30;
  uint64_t v5 = (const void **)*((void *)&v29 + 1);
  if (*((void *)&v29 + 1) != (void)v30)
  {
    uint64_t v5 = (const void **)*((void *)&v29 + 1);
    while (*((unsigned char *)*v5 + 8) != 20)
    {
      if (++v5 == (const void **)v30) {
        goto LABEL_9;
      }
    }
  }
  if (v5 == (const void **)v30)
  {
LABEL_9:
    uint64_t v8 = operator new(0x10uLL);
    long long v9 = v8;
    v8[4] = 20;
    *(void *)uint64_t v8 = &unk_1F1263AE8;
    if ((unint64_t)v4 < *((void *)&v30 + 1))
    {
      *(void *)uint64_t v4 = v8;
      uint64_t v10 = (uint64_t)(v4 + 8);
LABEL_22:
      size_t v7 = (char *)v9 + 9;
      *(void *)&long long v30 = v10;
      goto LABEL_23;
    }
    int64_t v11 = v4 - v3;
    uint64_t v12 = (v4 - v3) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = *((void *)&v30 + 1) - (void)v3;
    if ((uint64_t)(*((void *)&v30 + 1) - (void)v3) >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v16 = operator new(8 * v15);
      long long v17 = &v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      void *v17 = v9;
      uint64_t v10 = (uint64_t)(v17 + 1);
      if (v3 == v4)
      {
LABEL_20:
        *((void *)&v29 + 1) = v17;
        *(void *)&long long v30 = v10;
        *((void *)&v30 + 1) = v18;
        if (!v3) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v3);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v16 = 0;
      long long v17 = (void *)(8 * v12);
      uint64_t v18 = 0;
      *(void *)(8 * v12) = v9;
      uint64_t v10 = 8 * v12 + 8;
      if (v3 == v4) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v11 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)(v3 - v16) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v20 = ((unint64_t)(v11 - 8) >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v4[-v21];
    long long v17 = (void *)((char *)v17 - v21);
    std::string v23 = &v16[8 * v12 - 16];
    uint64_t v24 = v4 - 16;
    uint64_t v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      _OWORD *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    uint64_t v4 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v27 = *((void *)v4 - 1);
        v4 -= 8;
        *--long long v17 = v27;
      }
      while (v4 != v3);
    }
    uint64_t v3 = (char *)*((void *)&v29 + 1);
    *((void *)&v29 + 1) = v17;
    *(void *)&long long v30 = v10;
    *((void *)&v30 + 1) = v18;
    if (!v3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v6) {
    __cxa_bad_cast();
  }
  size_t v7 = v6 + 9;
LABEL_23:
  *size_t v7 = 1;
  CFTypeRef v19 = *((void *)this + 5);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v19, OS_LOG_TYPE_DEFAULT, "#I Setup Operating mode reporting", buf, 2u);
  }
  if (QMIServiceMsg::create()) {
    qmi::Client::send();
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v29);
}

void sub_1B8B78B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_12(void *a1, xpc_object_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (radio::CommandDriver *)a1[4];
    CFIndex v6 = std::__shared_weak_count::lock(v3);
    uint64_t v12 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *((void *)v5 + 5);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Server error", v10, 2u);
        }
        radio::CommandDriver::handleClientStateChanged_sync(v5);
        if (a2) {
          xpc_retain(a2);
        }
        else {
          a2 = xpc_null_create();
        }
        long long v9 = (void *)MEMORY[0x1BA9C88A0](a2);
        free(v9);
        xpc_release(a2);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B78CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_17(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    CFIndex v6 = std::__shared_weak_count::lock(v3);
    std::string v23 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (a1[5])
      {
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 0x40000000;
        CFTypeRef v19 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_2;
        unint64_t v20 = &__block_descriptor_tmp_19_0;
        uint64_t v21 = v5;
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v10 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)2);
          __int16 v24 = *(_WORD *)v10;
          ((void (*)(void *, __int16 *))v19)(v18, &v24);
        }
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 0x40000000;
        unint64_t v15 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_20;
        uint64_t v16 = &__block_descriptor_tmp_22_0;
        uint64_t v17 = v5;
        int64_t v11 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        unint64_t v13 = v11;
        if (v11)
        {
          tlv::throwIfNotEnoughBytes(v11, (const unsigned __int8 *)v11 + v12, (const unsigned __int8 *)1);
          LOBYTE(v24) = *(unsigned char *)v13;
          ((void (*)(void *, __int16 *))v15)(v14, &v24);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B78EAC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 20, v2, v3);
  JUMPOUT(0x1B8B78E50);
}

void sub_1B8B78ED8(void *a1)
{
}

void sub_1B8B78EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  radio::OpMode::setConfig(*(radio::OpMode **)(v1 + 216));
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getConfigString((uint64_t *)__p, *(radio::OpMode **)(v1 + 216));
    if (v5 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    size_t v7 = v3;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Protocol NV config indication: %{public}s", buf, 0xCu);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_20(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  radio::OpMode::setMode(*(radio::OpMode **)(v1 + 216));
  radio::OpMode::getMode(*(radio::OpMode **)(v1 + 216));
  radio::CommandDriver::handleOperatingModeChanged_sync();
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getModeString((uint64_t *)__p, *(radio::OpMode **)(v1 + 216));
    if (v5 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    size_t v7 = v3;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Operating mode indication: %{public}s", buf, 0xCu);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void radio::QMICommandDriverBase::startBSPClient_sync(radio::QMICommandDriverBase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (v3 = *((void *)this + 9), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  memset(v62, 170, sizeof(v62));
  Name = (const char *)radio::CommandDriver::getName(this);
  BYTE7(v64) = 4;
  strcpy((char *)&v63, ".BSP");
  size_t v7 = strlen(Name);
  uint64_t v8 = std::string::insert((std::string *)&v63, 0, Name, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v62[16] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)v62 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v64) & 0x80000000) == 0)
  {
    if (*((void *)this + 31)) {
      goto LABEL_7;
    }
LABEL_13:
    unint64_t v13 = *((void *)this + 11);
    uint64_t v54 = v13;
    if (v13) {
      dispatch_retain(v13);
    }
    char v60 = 5;
    strcpy((char *)v59, "radio");
    uint64_t v52 = 0;
    long long v53 = 0;
    uint64_t v14 = std::__shared_weak_count::lock(v5);
    if (v14)
    {
      unint64_t v15 = v14;
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v52 = v3;
      long long v53 = v14;
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      uint64_t v52 = 0;
      long long v53 = 0;
    }
    qmi::Client::createWithQueue();
    long long v27 = v64;
    long long v64 = 0uLL;
    dispatch_object_t v28 = (std::__shared_weak_count *)*((void *)this + 43);
    *((_OWORD *)this + 21) = v27;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    qmi::Client::~Client((qmi::Client *)&v63);
    if (v53) {
      std::__shared_weak_count::__release_weak(v53);
    }
    if (v60 < 0)
    {
      operator delete(v59[0]);
      CFTypeRef v19 = v54;
      if (!v54) {
        goto LABEL_33;
      }
    }
    else
    {
      CFTypeRef v19 = v54;
      if (!v54) {
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
  operator delete((void *)v63);
  if (!*((void *)this + 31)) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v10 = *((void *)this + 11);
  unint64_t v61 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  char v60 = 5;
  strcpy((char *)v59, "radio");
  uint64_t v57 = 0;
  v58 = 0;
  int64_t v11 = std::__shared_weak_count::lock(v5);
  if (v11)
  {
    int v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v57 = v3;
    v58 = v11;
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    uint64_t v57 = 0;
    v58 = 0;
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 32);
  uint64_t v55 = *((void *)this + 31);
  v56 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v17 = v64;
  long long v64 = 0uLL;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 43);
  *((_OWORD *)this + 21) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  qmi::Client::~Client((qmi::Client *)&v63);
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  CFTypeRef v19 = v61;
  if (v61) {
LABEL_32:
  }
    dispatch_release(v19);
LABEL_33:
  unint64_t v20 = (radio::QMICommandDriverBase *)((char *)this + 320);
  uint64_t v45 = MEMORY[0x1E4F143A8];
  uint64_t v46 = 1174405120;
  unsigned int v47 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke;
  uint64_t v48 = &__block_descriptor_tmp_30_0;
  v49 = this;
  uint64_t v50 = v3;
  size_t v51 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  uint64_t v38 = MEMORY[0x1E4F143A8];
  uint64_t v39 = 1174405120;
  unint64_t v40 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_31;
  int v41 = &__block_descriptor_tmp_34_0;
  __int16 v42 = this;
  uint64_t v43 = v3;
  __int16 v44 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1174405120;
  long long v33 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_35;
  long long v34 = &__block_descriptor_tmp_38_4;
  long long v35 = this;
  uint64_t v36 = v3;
  long long v37 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v29[2] = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_39;
  v29[3] = &__block_descriptor_tmp_53_2;
  v29[4] = this;
  v29[5] = v3;
  long long v30 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v63 = MEMORY[0x1E4F143A8];
  *((void *)&v63 + 1) = 0x40000000;
  *(void *)&long long v64 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm11DumpLogsInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v64 + 1) = &unk_1E6194480;
  v65 = v29;
  qmi::Client::setIndHandler();
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v21 || (uint64_t v22 = *((void *)this + 9), (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  __int16 v24 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
    uint64_t v25 = std::__shared_weak_count::lock(v24);
    if (v25) {
      goto LABEL_37;
    }
LABEL_40:
    long long v63 = 0uLL;
    goto LABEL_41;
  }
  uint64_t v25 = std::__shared_weak_count::lock(v23);
  if (!v25) {
    goto LABEL_40;
  }
LABEL_37:
  long long v26 = (atomic_ullong *)v25;
  atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v63 = v22;
  *((void *)&v63 + 1) = v25;
  std::__shared_weak_count::__release_weak(v24);
  if (atomic_fetch_add(v26 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_42;
  }
  (*(void (**)(atomic_ullong *))(*v26 + 16))(v26);
  __int16 v24 = (std::__shared_weak_count *)v26;
LABEL_41:
  std::__shared_weak_count::__release_weak(v24);
LABEL_42:
  qmi::Client::setClientHandle();
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v63 + 1));
  }
  qmi::Client::start(v20);
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  if ((v62[23] & 0x80000000) != 0) {
    operator delete(*(void **)v62);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1B8B79814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  unint64_t v40 = *(std::__shared_weak_count **)(v38 - 208);
  if (v40)
  {
    std::__shared_weak_count::__release_weak(v40);
    if (*(char *)(v38 - 137) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v38 - 160));
      int v41 = *(NSObject **)(v38 - 200);
      if (!v41)
      {
LABEL_8:
        if (*(char *)(v38 - 105) < 0) {
          operator delete(*(void **)(v38 - 128));
        }
        std::__shared_weak_count::__release_weak(v37);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v41);
      goto LABEL_8;
    }
  }
  else if (*(char *)(v38 - 137) < 0)
  {
    goto LABEL_3;
  }
  int v41 = *(NSObject **)(v38 - 200);
  if (!v41) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1B8B79908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23) {
    JUMPOUT(0x1B8B79978);
  }
  JUMPOUT(0x1B8B798C0);
}

void sub_1B8B79918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30) {
    JUMPOUT(0x1B8B79984);
  }
  JUMPOUT(0x1B8B798C8);
}

void sub_1B8B79928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (!a37) {
    JUMPOUT(0x1B8B798D4);
  }
  JUMPOUT(0x1B8B798D0);
}

void sub_1B8B79938()
{
  if (*(char *)(v0 - 81) < 0) {
    JUMPOUT(0x1B8B798E0);
  }
  JUMPOUT(0x1B8B798E4);
}

void sub_1B8B7994C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B79960(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (a23)
    {
      std::__shared_weak_count::__release_weak(a23);
      if (a30)
      {
        std::__shared_weak_count::__release_weak(a30);
        if (!a37) {
          JUMPOUT(0x1B8B798D4);
        }
        JUMPOUT(0x1B8B798D0);
      }
      JUMPOUT(0x1B8B798C8);
    }
    JUMPOUT(0x1B8B798C0);
  }
  JUMPOUT(0x1B8B798B8);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[5])
      {
        CFIndex v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)size_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I BSP:Stopped", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_31(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[5])
      {
        CFIndex v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)size_t v7 = 0;
          _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I BSP:Started", v7, 2u);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_35(void *a1, xpc_object_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    CFIndex v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      size_t v7 = v6;
      if (a1[5])
      {
        if (a2) {
          xpc_retain(a2);
        }
        else {
          a2 = xpc_null_create();
        }
        uint64_t v8 = (void *)MEMORY[0x1BA9C88A0](a2);
        long long v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          int64_t v11 = v8;
          _os_log_debug_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEBUG, "#D Server error %s", buf, 0xCu);
        }
        free(v8);
        xpc_release(a2);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8B79C9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_39(void *a1, qmi::MessageBase *a2)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  CFIndex v6 = std::__shared_weak_count::lock(v3);
  v66 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    int64_t v11 = v6;
LABEL_98:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  CFTypeRef v64 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v8 = Mutable;
  if (Mutable) {
    CFTypeRef v64 = Mutable;
  }
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 1174405120;
  unint64_t v61 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_2;
  v62 = &__block_descriptor_tmp_40_4;
  CFTypeRef v63 = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    long long __p = 0uLL;
    *(void *)&long long v81 = 0;
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)&__p, TlvValue, (char *)(TlvValue + v10), v10);
    v61((uint64_t)v60, (uint64_t *)&__p);
    if (SBYTE7(v81) < 0) {
      operator delete((void *)__p);
    }
  }
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 1174405120;
  uint64_t v57 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_41;
  v58 = &__block_descriptor_tmp_45_2;
  CFTypeRef v59 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v14 = v12;
  if (v12)
  {
    tlv::throwIfNotEnoughBytes(v12, (const unsigned __int8 *)v12 + v13, (const unsigned __int8 *)1);
    LOBYTE(__p) = *(unsigned char *)v14 != 0;
    v57((uint64_t)v56, (unsigned __int8 *)&__p);
  }
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 1174405120;
  long long v53 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_46;
  uint64_t v54 = &__block_descriptor_tmp_50_2;
  CFTypeRef v55 = v8;
  if (v8) {
    CFRetain(v8);
  }
  unint64_t v15 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  long long v17 = v15;
  if (v15)
  {
    tlv::throwIfNotEnoughBytes(v15, (const unsigned __int8 *)v15 + v16, (const unsigned __int8 *)1);
    LOBYTE(__p) = *(unsigned char *)v17;
    ((void (*)(void *, long long *))v53)(v52, &__p);
  }
  uint64_t v18 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p) = 138412290;
    *(void *)((char *)&__p + 4) = v8;
    _os_log_impl(&dword_1B8B00000, v18, OS_LOG_TYPE_DEFAULT, "#I Baseband requested to dump logs\n%@", (uint8_t *)&__p, 0xCu);
  }
  if (v8 && (CFTypeID v19 = CFGetTypeID(v8), v19 == CFDictionaryGetTypeID()))
  {
    CFRetain(v8);
    uint64_t v20 = *(void *)(v5 + 112);
    CFTypeRef v67 = v8;
    CFRetain(v8);
  }
  else
  {
    CFMutableDictionaryRef v8 = 0;
    uint64_t v20 = *(void *)(v5 + 112);
    CFTypeRef v67 = 0;
  }
  v74 = 0;
  v75 = 0;
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v88 = v21;
  long long v89 = v21;
  long long v86 = v21;
  long long v87 = v21;
  long long v84 = v21;
  long long v85 = v21;
  long long v82 = v21;
  long long v83 = v21;
  long long __p = v21;
  long long v81 = v21;
  uint64_t v22 = *(pthread_mutex_t **)(v20 + 24);
  *(void *)&long long v90 = 10;
  *((void *)&v90 + 1) = &__p;
  *(void *)&long long v91 = 0;
  *((void *)&v91 + 1) = v22;
  pthread_mutex_lock(v22);
  std::string v23 = *(atomic_uint **)(v20 + 8);
  if (v23)
  {
    unsigned int explicit = atomic_load_explicit(v23 + 2, memory_order_acquire);
    uint64_t v25 = *(uint64_t ***)v20;
    if (explicit == 1)
    {
      long long v26 = *v25;
      uint64_t v27 = *(void *)(v20 + 16);
      if ((uint64_t *)v27 == *v25) {
        uint64_t v27 = v26[1];
      }
      *(void *)&long long v76 = v27;
      if (v26 != (uint64_t *)v27)
      {
        uint64_t v28 = *(void *)(v27 + 16);
        if (*(unsigned char *)(v28 + 24))
        {
          uint64_t v27 = *(void *)(v27 + 8);
        }
        else
        {
          uint64_t v27 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v26, (int *)(v28 + 64), (uint64_t **)&v76);
          uint64_t v25 = *(uint64_t ***)v20;
        }
      }
      *(void *)(v20 + 16) = v27;
    }
    std::string v23 = *(atomic_uint **)(v20 + 8);
    if (v23) {
      atomic_fetch_add_explicit(v23 + 2, 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v25 = *(uint64_t ***)v20;
  }
  long long v29 = v75;
  v74 = v25;
  v75 = v23;
  if (v29)
  {
    if (atomic_fetch_add(v29 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v29 + 16))(v29);
      if (atomic_fetch_add(v29 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v29 + 24))(v29);
      }
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v91 + 1));
  unint64_t v30 = *((void *)&v90 + 1);
  if (*((void *)&v90 + 1))
  {
    if ((uint64_t)v91 - 1 >= 0)
    {
      unint64_t v31 = *((void *)&v90 + 1) + 16 * v91;
      do
      {
        uint64_t v32 = *(atomic_uint **)(v31 - 8);
        if (v32)
        {
          if (atomic_fetch_add(v32 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v32 + 16))(v32);
            if (atomic_fetch_add(v32 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v32 + 24))(v32);
            }
          }
        }
        v31 -= 16;
      }
      while (v31 > v30);
    }
    if ((unint64_t)v90 >= 0xB) {
      operator delete(*((void **)&v90 + 1));
    }
  }
  *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v93 = v33;
  long long v94 = v33;
  long long v91 = v33;
  long long v92 = v33;
  long long v89 = v33;
  long long v90 = v33;
  long long v87 = v33;
  long long v88 = v33;
  long long v85 = v33;
  long long v86 = v33;
  long long v83 = v33;
  long long v84 = v33;
  long long v81 = v33;
  long long v82 = v33;
  long long __p = v33;
  LOBYTE(__p) = 0;
  unint64_t v95 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v96 = 10;
  v97 = (char *)&__p + 8;
  uint64_t v98 = 0;
  v99 = &v67;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  long long v34 = v74;
  uint64_t v35 = (uint64_t)*v74;
  p_p = &__p;
  uint64_t v72 = v20;
  uint64_t v73 = v35;
  *(void *)&long long v69 = *(void *)(v35 + 8);
  *((void *)&v69 + 1) = v35;
  *(void *)&long long v70 = &__p;
  *((void *)&v70 + 1) = v35;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v69);
  v68[0] = *v34;
  v68[1] = v68[0];
  v68[2] = &__p;
  v68[3] = v68[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(v68);
  long long v76 = v69;
  long long v77 = v70;
  uint64_t v36 = v68[0];
  uint64_t v37 = v69;
  if ((void)v69 == v68[0])
  {
    if (HIDWORD(v100) <= v100) {
      goto LABEL_81;
    }
LABEL_80:
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(v72, v73);
    goto LABEL_81;
  }
  uint64_t v38 = (unsigned char *)v77;
  if (!*(unsigned char *)v77)
  {
    uint64_t v39 = *(void *)(*(void *)(v76 + 16) + 32);
    unint64_t v40 = *(CFTypeRef **)(v77 + 272);
    CFTypeRef v41 = *v40;
    if (*v40) {
      CFRetain(*v40);
    }
    uint64_t v42 = *(void *)(v39 + 24);
    if (!v42)
    {
      std::runtime_error::runtime_error(&v79, "call to empty boost::function");
      v79.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
      boost::throw_exception<boost::bad_function_call>(&v79);
    }
    uint64_t v43 = *(void (**)(uint64_t, CFTypeRef *))((v42 & 0xFFFFFFFFFFFFFFFELL) + 8);
    CFTypeRef cf = v41;
    v43(v39 + 32, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (!*v38) {
      unsigned char *v38 = 1;
    }
  }
  *(void *)&long long v76 = *(void *)(v37 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v76);
  uint64_t v44 = v77;
  if (*(unsigned char *)v77) {
    *(unsigned char *)long long v77 = 0;
  }
  for (uint64_t i = v76; (void)v76 != v36; uint64_t i = v76)
  {
    uint64_t v46 = *(void *)(*(void *)(i + 16) + 32);
    unsigned int v47 = *(CFTypeRef **)(v44 + 272);
    CFTypeRef v48 = *v47;
    if (*v47) {
      CFRetain(*v47);
    }
    uint64_t v49 = *(void *)(v46 + 24);
    if (!v49)
    {
      std::runtime_error::runtime_error(&v79, "call to empty boost::function");
      v79.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
      boost::throw_exception<boost::bad_function_call>(&v79);
    }
    uint64_t v50 = *(void (**)(uint64_t, CFTypeRef *))((v49 & 0xFFFFFFFFFFFFFFFELL) + 8);
    CFTypeRef cf = v48;
    v50(v46 + 32, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (!*(unsigned char *)v44) {
      *(unsigned char *)uint64_t v44 = 1;
    }
    *(void *)&long long v76 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v76);
    uint64_t v44 = v77;
    if (*(unsigned char *)v77) {
      *(unsigned char *)long long v77 = 0;
    }
  }
  if (*((_DWORD *)p_p + 71) > *((_DWORD *)p_p + 70)) {
    goto LABEL_80;
  }
LABEL_81:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&__p);
  size_t v51 = v75;
  if (v75)
  {
    if (atomic_fetch_add(v75 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v51 + 16))(v51);
      if (atomic_fetch_add(v51 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v51 + 24))(v51);
      }
    }
  }
  if (v67) {
    CFRelease(v67);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v64) {
    CFRelease(v64);
  }
  int64_t v11 = v66;
  if (v66) {
    goto LABEL_98;
  }
}

void sub_1B8B7A6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if ((a58 & 0x80000000) == 0) {
    JUMPOUT(0x1B8B7A9B8);
  }
  JUMPOUT(0x1B8B79E38);
}

void sub_1B8B7A6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1B8B7A708(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,std::runtime_error a51)
{
  std::runtime_error::~runtime_error(&a51);
  if (v51) {
    CFRelease(v51);
  }
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v61);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v63);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v62);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v60);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v57);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v53 + 32));
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v52 + 32));
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v56);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v58);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
    _Unwind_Resume(v55);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a45 + 16));
  __cxa_rethrow();
}

void sub_1B8B7A794(uint64_t a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v11);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v13);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v12);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v10);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v7);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v3 + 32));
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 + 32));
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v6);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v8);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
    _Unwind_Resume(v5);
  }
  JUMPOUT(0x1B8B7A764);
}

void sub_1B8B7A7E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v10, 20, v11, v12);
    JUMPOUT(0x1B8B79FBCLL);
  }
  JUMPOUT(0x1B8B7A9CCLL);
}

void sub_1B8B7A820(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v10, 17, v11, v12);
    JUMPOUT(0x1B8B79F30);
  }
  JUMPOUT(0x1B8B7A9CCLL);
}

void sub_1B8B7A864()
{
  unint64_t v0 = STACK[0x208];
  if (STACK[0x208])
  {
    if ((uint64_t)(STACK[0x210] - 1) >= 0)
    {
      unint64_t v1 = v0 + 16 * STACK[0x210];
      do
      {
        uint64_t v2 = *(atomic_uint **)(v1 - 8);
        if (v2)
        {
          if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
            if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
            }
          }
        }
        v1 -= 16;
      }
      while (v1 > v0);
    }
    if (STACK[0x200] >= 0xB) {
      operator delete((void *)STACK[0x208]);
    }
  }
  JUMPOUT(0x1B8B7A98CLL);
}

void sub_1B8B7A92C()
{
}

void sub_1B8B7A938()
{
}

void sub_1B8B7A948()
{
}

void sub_1B8B7A950()
{
}

uint64_t sub_1B8B7A958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B8B7A978(a1, a2, a3);
}

void sub_1B8B7A968(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8B7A9CCLL);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  int v2 = *((char *)a2 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  if (v2 >= 0) {
    std::string::size_type v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v4 = a2[1];
  }
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_p = (std::string *)operator new(v8 + 1);
    __p.__r_.__value_.__l.__size_ = v4;
    __p.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v4;
    p_p = &__p;
    if (!v4)
    {
      size_t v7 = &__p;
      goto LABEL_22;
    }
  }
  if (v4 < 0x20 || (unint64_t)((char *)p_p - (char *)v3) < 0x20)
  {
    size_t v7 = p_p;
    int v10 = (std::string::value_type *)v3;
  }
  else
  {
    size_t v7 = (std::string *)((char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0));
    int v10 = (char *)v3 + (v4 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (long long *)(v3 + 2);
    uint64_t v12 = &p_p->__r_.__value_.__r.__words[2];
    unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v14 = *v11;
      *((_OWORD *)v12 - 1) = *(v11 - 1);
      *(_OWORD *)uint64_t v12 = v14;
      v11 += 2;
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    if (v4 == (v4 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_22;
    }
  }
  do
  {
    std::string::value_type v15 = *v10++;
    v7->__r_.__value_.__s.__data_[0] = v15;
    size_t v7 = (std::string *)((char *)v7 + 1);
  }
  while (v10 != (char *)v3 + v4);
LABEL_22:
  v7->__r_.__value_.__s.__data_[0] = 0;
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v19 = __p;
  }
  ctu::cf::insert<__CFString const*,std::string>(v16, (CFTypeRef)*MEMORY[0x1E4FB9BD8]);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0) {
      return;
    }
LABEL_29:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (v17 < 0) {
    goto LABEL_29;
  }
}

void sub_1B8B7AB7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B7AB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  unint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_41(uint64_t a1, unsigned __int8 *a2)
{
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_46(uint64_t a1)
{
  uint64_t v3 = (const __CFString **)radio::asString();
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t v5 = *(__CFDictionary **)(a1 + 32);
  CFIndex v6 = (const void *)*MEMORY[0x1E4FB9C20];
  if (*MEMORY[0x1E4FB9C20]) {
    CFRetain((CFTypeRef)*MEMORY[0x1E4FB9C20]);
  }
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, v3, (const char *)0x8000100, v4, v2);
  size_t v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!value) {
      goto LABEL_10;
    }
  }
  else
  {
    CFDictionaryAddValue(v5, v6, value);
  }
  CFRelease(v7);
LABEL_10:
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1B8B7ACF4(_Unwind_Exception *a1)
{
  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v6 = *(void **)a3;
  if (*(void *)a3) {
    CFIndex v6 = _Block_copy(v6);
  }
  size_t v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a1 + 152))(a1, a2, 4, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B7ADD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::QMICommandDriverBase::powerOff(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex v6 = *(void **)a3;
  if (*(void *)a3) {
    CFIndex v6 = _Block_copy(v6);
  }
  size_t v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a1 + 152))(a1, a2, 5, &aBlock);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_1B8B7AE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::QMICommandDriverBase::setOperatingMode_sync(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  BOOL v8 = *(NSObject **)(a1 + 40);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    radio::OpMode::getModeString((uint64_t *)v52, *(radio::OpMode **)(a1 + 216));
    int v10 = v53;
    uint64_t v11 = (void **)v52[0];
    radio::OpMode::modeToString();
    uint64_t v12 = v52;
    if (v10 < 0) {
      uint64_t v12 = v11;
    }
    if (v51 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2048;
    unint64_t v55 = a2 / 0xF4240;
    _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Preparing to change operating mode from %{public}s to %{public}s, with timeout %llu ms", buf, 0x20u);
    if (v51 < 0)
    {
      operator delete(__p[0]);
      if ((v53 & 0x80000000) == 0) {
        goto LABEL_9;
      }
    }
    else if ((v53 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v52[0]);
  }
LABEL_9:
  if (capabilities::abs::supportsProtocolNVConfig((capabilities::abs *)v9))
  {
    long long v14 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v14 || (uint64_t v15 = *(void *)(a1 + 72), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v17 = v16;
    p_shared_weak_owners = &v16->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio20QMICommandDriverBase21setOperatingMode_syncEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_58_3;
    aBlock[4] = a1;
    void aBlock[5] = v15;
    uint64_t v45 = v17;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    char v49 = a3;
    std::string v19 = *(void **)a4;
    if (*(void *)a4) {
      std::string v19 = _Block_copy(v19);
    }
    uint64_t v20 = *(NSObject **)(a4 + 8);
    uint64_t v46 = v19;
    dispatch_object_t object = v20;
    if (v20) {
      dispatch_retain(v20);
    }
    unint64_t v48 = a2;
    long long v21 = _Block_copy(aBlock);
    uint64_t v22 = *(NSObject **)(a1 + 88);
    if (v22) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    }
    if (v21)
    {
      std::string v23 = _Block_copy(v21);
      uint64_t v42 = v23;
      uint64_t v43 = v22;
      if (v22) {
        goto LABEL_22;
      }
    }
    else
    {
      std::string v23 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = v22;
      if (v22)
      {
LABEL_22:
        dispatch_retain(v22);
        radio::QMICommandDriverBase::getOperatingMode(a1, (uint64_t)&v42);
        dispatch_release(v22);
        if (!v23) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
    }
    radio::QMICommandDriverBase::getOperatingMode(a1, (uint64_t)&v42);
    if (!v23)
    {
LABEL_38:
      if (v22) {
        dispatch_release(v22);
      }
      if (v21) {
        _Block_release(v21);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v46) {
        _Block_release(v46);
      }
      if (v45) {
        std::__shared_weak_count::__release_weak(v45);
      }
      std::__shared_weak_count::__release_weak(v17);
      return;
    }
LABEL_37:
    _Block_release(v23);
    goto LABEL_38;
  }
  if (radio::OpMode::allowModeChange(*(radio::OpMode **)(a1 + 216)))
  {
    if (*(void *)a4)
    {
      __int16 v24 = _Block_copy(*(const void **)a4);
      uint64_t v25 = *(NSObject **)(a4 + 8);
      uint64_t v35 = v24;
      uint64_t v36 = v25;
      if (!v25)
      {
LABEL_28:
        radio::QMICommandDriverBase::setOperatingModeUnconditionally(a1, a2, a3, (uint64_t)&v35);
        if (v25) {
          dispatch_release(v25);
        }
        if (v24) {
          _Block_release(v24);
        }
        return;
      }
    }
    else
    {
      __int16 v24 = 0;
      uint64_t v25 = *(NSObject **)(a4 + 8);
      uint64_t v35 = 0;
      uint64_t v36 = v25;
      if (!v25) {
        goto LABEL_28;
      }
    }
    dispatch_retain(v25);
    goto LABEL_28;
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  uint64_t v39 = operator new(0x38uLL);
  long long v40 = xmmword_1B8C31F40;
  strcpy((char *)v39, "setting operating mode while in factory test mode");
  CreateError();
  operator delete(v39);
  long long v26 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_63;
  }
  radio::OpMode::modeToString();
  if (v53 >= 0) {
    uint64_t v27 = v52;
  }
  else {
    uint64_t v27 = (void **)v52[0];
  }
  radio::OpMode::getModeString((uint64_t *)__p, *(radio::OpMode **)(a1 + 216));
  int v28 = v51;
  long long v29 = (void **)__p[0];
  radio::OpMode::getConfigString((uint64_t *)v37, *(radio::OpMode **)(a1 + 216));
  unint64_t v30 = __p;
  if (v28 < 0) {
    unint64_t v30 = v29;
  }
  if (v38 >= 0) {
    unint64_t v31 = v37;
  }
  else {
    unint64_t v31 = (void **)v37[0];
  }
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = v27;
  *(_WORD *)&buf[12] = 2082;
  *(void *)&buf[14] = v30;
  *(_WORD *)&buf[22] = 2082;
  unint64_t v55 = (unint64_t)v31;
  _os_log_impl(&dword_1B8B00000, v26, OS_LOG_TYPE_DEFAULT, "#I Rejecting operating mode change to %{public}s because current operating mode is %{public}s and protocol NV config is %{public}s", buf, 0x20u);
  if ((v38 & 0x80000000) == 0)
  {
    if ((v51 & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_85;
  }
  operator delete(v37[0]);
  if (v51 < 0)
  {
LABEL_85:
    operator delete(__p[0]);
    if (v53 < 0) {
      goto LABEL_86;
    }
LABEL_63:
    CFTypeRef v32 = cf;
    if (!cf) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_62:
  if ((v53 & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_86:
  operator delete(v52[0]);
  CFTypeRef v32 = cf;
  if (cf) {
LABEL_64:
  }
    CFRetain(v32);
LABEL_65:
  if (*(void *)a4) {
    long long v33 = _Block_copy(*(const void **)a4);
  }
  else {
    long long v33 = 0;
  }
  long long v34 = *(NSObject **)(a4 + 8);
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  unint64_t v55 = (unint64_t)&__block_descriptor_tmp_327;
  if (v33)
  {
    v56 = _Block_copy(v33);
    CFTypeRef v57 = v32;
    if (!v32) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  v56 = 0;
  CFTypeRef v57 = v32;
  if (v32) {
LABEL_72:
  }
    CFRetain(v32);
LABEL_73:
  dispatch_async(v34, buf);
  if (v57) {
    CFRelease(v57);
  }
  if (v56) {
    _Block_release(v56);
  }
  if (v33) {
    _Block_release(v33);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B7B4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v36 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a17);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v36 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v36 - 168));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_1B8B7B508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B7B51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio20QMICommandDriverBase21setOperatingMode_syncEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    CFIndex v6 = std::__shared_weak_count::lock(v3);
    char v49 = v6;
    if (v6)
    {
      size_t v7 = v6;
      if (!*(void *)(a1 + 40))
      {
LABEL_77:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      if (*(void *)a2) {
        BOOL v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        int Config = radio::OpMode::getConfig(*(radio::OpMode **)(v5 + 216));
        int v10 = *(NSObject **)(v5 + 40);
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
        if (Config == 3)
        {
          if (v11)
          {
            radio::OpMode::getModeString((uint64_t *)v46, *(radio::OpMode **)(v5 + 216));
            int v32 = v47;
            long long v33 = (void **)v46[0];
            radio::OpMode::modeToString();
            long long v34 = v46;
            if (v32 < 0) {
              long long v34 = v33;
            }
            if (v45 >= 0) {
              uint64_t v35 = v44;
            }
            else {
              uint64_t v35 = (void **)v44[0];
            }
            uint64_t v36 = *(void ***)a2;
            *(_DWORD *)CFTypeRef cf = 136446722;
            *(void *)&cf[4] = v34;
            *(_WORD *)&cf[12] = 2082;
            *(void *)&cf[14] = v35;
            *(_WORD *)&cf[22] = 2112;
            char v51 = v36;
            _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Skipping operating mode change from %{public}s to %{public}s because we could not get the current operating mode (error ='%@')", cf, 0x20u);
            if (v45 < 0) {
              operator delete(v44[0]);
            }
            if (v47 < 0) {
              operator delete(v46[0]);
            }
          }
          uint64_t v12 = *(const void **)a2;
          if (v12) {
            CFRetain(v12);
          }
          unint64_t v13 = *(const void **)(a1 + 56);
          if (v13) {
            long long v14 = _Block_copy(v13);
          }
          else {
            long long v14 = 0;
          }
          unint64_t v31 = *(NSObject **)(a1 + 64);
          *(void *)CFTypeRef cf = MEMORY[0x1E4F143A8];
          *(void *)&cf[8] = 1174405120;
          *(void *)&cf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
          char v51 = (void **)&__block_descriptor_tmp_327;
          if (v14)
          {
            aBlock = _Block_copy(v14);
            CFTypeRef v53 = v12;
            if (!v12) {
              goto LABEL_69;
            }
          }
          else
          {
            aBlock = 0;
            CFTypeRef v53 = v12;
            if (!v12)
            {
LABEL_69:
              dispatch_async(v31, cf);
              if (v53) {
                CFRelease(v53);
              }
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (v14) {
                _Block_release(v14);
              }
              if (v12) {
                CFRelease(v12);
              }
              goto LABEL_77;
            }
          }
          CFRetain(v12);
          goto LABEL_69;
        }
        if (v11)
        {
          uint64_t v37 = *(void *)a2;
          *(_DWORD *)CFTypeRef cf = 138412290;
          *(void *)&cf[4] = v37;
          _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "%@, attempting to set operating mode anyway", cf, 0xCu);
        }
      }
      if (radio::OpMode::allowModeChange(*(radio::OpMode **)(v5 + 216)))
      {
        unint64_t v15 = *(void *)(a1 + 72);
        char v16 = *(unsigned char *)(a1 + 80);
        int v17 = *(const void **)(a1 + 56);
        if (v17)
        {
          int v18 = _Block_copy(v17);
          std::string v19 = *(NSObject **)(a1 + 64);
          char v38 = v18;
          uint64_t v39 = v19;
          if (!v19)
          {
LABEL_20:
            radio::QMICommandDriverBase::setOperatingModeUnconditionally(v5, v15, v16, (uint64_t)&v38);
            if (v19) {
              dispatch_release(v19);
            }
            if (v18) {
              _Block_release(v18);
            }
            goto LABEL_77;
          }
        }
        else
        {
          int v18 = 0;
          std::string v19 = *(NSObject **)(a1 + 64);
          char v38 = 0;
          uint64_t v39 = v19;
          if (!v19) {
            goto LABEL_20;
          }
        }
        dispatch_retain(v19);
        goto LABEL_20;
      }
      std::string __p = operator new(0x38uLL);
      long long v43 = xmmword_1B8C31F40;
      strcpy((char *)__p, "setting operating mode while in factory test mode");
      CreateError();
      if (cf != a2)
      {
        uint64_t v20 = *(const void **)a2;
        *(void *)a2 = *(void *)cf;
        *(void *)CFTypeRef cf = 0;
        if (!v20) {
          goto LABEL_29;
        }
        CFRelease(v20);
      }
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
LABEL_29:
      if (SHIBYTE(v43) < 0)
      {
        operator delete(__p);
        long long v21 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_45;
        }
      }
      else
      {
        long long v21 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
LABEL_45:
          uint64_t v27 = *(const void **)a2;
          if (!v27) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
      }
      uint64_t v22 = v46;
      radio::OpMode::modeToString();
      if (v47 < 0) {
        uint64_t v22 = (void **)v46[0];
      }
      radio::OpMode::getModeString((uint64_t *)v44, *(radio::OpMode **)(v5 + 216));
      int v23 = v45;
      __int16 v24 = (void **)v44[0];
      radio::OpMode::getConfigString((uint64_t *)v40, *(radio::OpMode **)(v5 + 216));
      uint64_t v25 = v44;
      if (v23 < 0) {
        uint64_t v25 = v24;
      }
      if (v41 >= 0) {
        long long v26 = v40;
      }
      else {
        long long v26 = (void **)v40[0];
      }
      *(_DWORD *)CFTypeRef cf = 136446722;
      *(void *)&cf[4] = v22;
      *(_WORD *)&cf[12] = 2082;
      *(void *)&cf[14] = v25;
      *(_WORD *)&cf[22] = 2082;
      char v51 = v26;
      _os_log_impl(&dword_1B8B00000, v21, OS_LOG_TYPE_DEFAULT, "#I Rejecting operating mode change to %{public}s because current operating mode is %{public}s and protocol NV config is %{public}s", cf, 0x20u);
      if (v41 < 0)
      {
        operator delete(v40[0]);
        if ((v45 & 0x80000000) == 0)
        {
LABEL_44:
          if ((v47 & 0x80000000) == 0) {
            goto LABEL_45;
          }
          goto LABEL_82;
        }
      }
      else if ((v45 & 0x80000000) == 0)
      {
        goto LABEL_44;
      }
      operator delete(v44[0]);
      if ((v47 & 0x80000000) == 0) {
        goto LABEL_45;
      }
LABEL_82:
      operator delete(v46[0]);
      uint64_t v27 = *(const void **)a2;
      if (!v27)
      {
LABEL_47:
        int v28 = *(const void **)(a1 + 56);
        if (v28) {
          long long v29 = _Block_copy(v28);
        }
        else {
          long long v29 = 0;
        }
        unint64_t v30 = *(NSObject **)(a1 + 64);
        *(void *)CFTypeRef cf = MEMORY[0x1E4F143A8];
        *(void *)&cf[8] = 1174405120;
        *(void *)&cf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
        char v51 = (void **)&__block_descriptor_tmp_327;
        if (v29)
        {
          aBlock = _Block_copy(v29);
          CFTypeRef v53 = v27;
          if (!v27) {
            goto LABEL_55;
          }
        }
        else
        {
          aBlock = 0;
          CFTypeRef v53 = v27;
          if (!v27)
          {
LABEL_55:
            dispatch_async(v30, cf);
            if (v53) {
              CFRelease(v53);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v29) {
              _Block_release(v29);
            }
            if (v27) {
              CFRelease(v27);
            }
            goto LABEL_77;
          }
        }
        CFRetain(v27);
        goto LABEL_55;
      }
LABEL_46:
      CFRetain(v27);
      goto LABEL_47;
    }
  }
}

void sub_1B8B7BBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::setOperatingModeUnconditionally(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  size_t v7 = *(NSObject **)(a1 + 40);
  unint64_t v8 = a2 / 0xF4240;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getModeString((uint64_t *)&v45, *(radio::OpMode **)(a1 + 216));
    int v9 = v48;
    int v10 = (void **)v45;
    radio::OpMode::modeToString();
    BOOL v11 = &v45;
    if (v9 < 0) {
      BOOL v11 = v10;
    }
    if ((SBYTE7(v57) & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v12;
    *(_WORD *)&buf[22] = 2048;
    uint64_t v59 = (void *)v8;
    _os_log_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEFAULT, "#I Requesting operating mode change from %{public}s to %{public}s, with timeout %llu ms", buf, 0x20u);
    if (SBYTE7(v57) < 0)
    {
      operator delete(__p[0]);
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_9;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v45);
  }
LABEL_9:
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v13;
  long long v57 = v13;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 0x40000000;
  long long v14 = ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  uint64_t v52 = ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  CFTypeRef v53 = &__block_descriptor_tmp_60;
  uint64_t v54 = a1;
  char v55 = a3;
  unint64_t v15 = (char *)__p[1];
  char v16 = (char *)v57;
  int v17 = (const void **)__p[1];
  if (__p[1] != (void *)v57)
  {
    int v17 = (const void **)__p[1];
    while (*((unsigned char *)*v17 + 8) != 1)
    {
      if (++v17 == (const void **)v57) {
        goto LABEL_17;
      }
    }
  }
  if (v17 == (const void **)v57)
  {
LABEL_17:
    uint64_t v20 = operator new(0x10uLL);
    long long v21 = v20;
    v20[4] = 1;
    *(void *)uint64_t v20 = &unk_1F1263B68;
    if ((unint64_t)v16 < *((void *)&v57 + 1))
    {
      *(void *)char v16 = v20;
      uint64_t v22 = (uint64_t)(v16 + 8);
LABEL_30:
      std::string v19 = (char *)v21 + 9;
      *(void *)&long long v57 = v22;
      long long v14 = v52;
      goto LABEL_31;
    }
    int64_t v23 = v16 - v15;
    uint64_t v24 = (v16 - v15) >> 3;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = *((void *)&v57 + 1) - (void)v15;
    if ((uint64_t)(*((void *)&v57 + 1) - (void)v15) >> 2 > v25) {
      unint64_t v25 = v26 >> 2;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    if (v27)
    {
      if (v27 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v28 = operator new(8 * v27);
      long long v29 = &v28[8 * v24];
      unint64_t v30 = &v28[8 * v27];
      void *v29 = v21;
      uint64_t v22 = (uint64_t)(v29 + 1);
      if (v15 == v16)
      {
LABEL_28:
        __p[1] = v29;
        *(void *)&long long v57 = v22;
        *((void *)&v57 + 1) = v30;
        if (!v15) {
          goto LABEL_30;
        }
LABEL_29:
        operator delete(v15);
        goto LABEL_30;
      }
    }
    else
    {
      int v28 = 0;
      long long v29 = (void *)(8 * v24);
      unint64_t v30 = 0;
      *(void *)(8 * v24) = v21;
      uint64_t v22 = 8 * v24 + 8;
      if (v15 == v16) {
        goto LABEL_28;
      }
    }
    if ((unint64_t)(v23 - 8) < 0x58) {
      goto LABEL_60;
    }
    if ((unint64_t)(v15 - v28) < 0x20) {
      goto LABEL_60;
    }
    unint64_t v34 = ((unint64_t)(v23 - 8) >> 3) + 1;
    uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v36 = &v16[-v35];
    long long v29 = (void *)((char *)v29 - v35);
    uint64_t v37 = &v28[8 * v24 - 16];
    char v38 = v16 - 16;
    uint64_t v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v40 = *(_OWORD *)v38;
      *(v37 - 1) = *((_OWORD *)v38 - 1);
      _OWORD *v37 = v40;
      v37 -= 2;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    char v16 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_60:
      do
      {
        uint64_t v41 = *((void *)v16 - 1);
        v16 -= 8;
        *--long long v29 = v41;
      }
      while (v16 != v15);
    }
    unint64_t v15 = (char *)__p[1];
    __p[1] = v29;
    *(void *)&long long v57 = v22;
    *((void *)&v57 + 1) = v30;
    if (!v15) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (!v18) {
    __cxa_bad_cast();
  }
  std::string v19 = v18 + 9;
LABEL_31:
  v14((uint64_t)v51, v19);
  char v45 = (void *)(a1 + 288);
  uint64_t v46 = QMIServiceMsg::create();
  uint64_t v49 = 0;
  aBlock = 0;
  int v47 = v8;
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 1174405120;
  v42[2] = ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v42[3] = &__block_descriptor_tmp_65;
  v42[4] = a1;
  unint64_t v31 = *(void **)a4;
  if (*(void *)a4) {
    unint64_t v31 = _Block_copy(v31);
  }
  int v32 = *(NSObject **)(a4 + 8);
  long long v43 = v31;
  dispatch_object_t object = v32;
  if (v32) {
    dispatch_retain(v32);
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16SetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v59 = &unk_1E61944A8;
  char v60 = v42;
  long long v33 = _Block_copy(buf);
  aBlock = v33;
  if (v46)
  {
    qmi::Client::send();
    long long v33 = aBlock;
  }
  if (v33) {
    _Block_release(v33);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v43) {
    _Block_release(v43);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_1B8B7C1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8B7C220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void radio::QMICommandDriverBase::getOperatingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting operating mode", buf, 2u);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_85;
  v8[4] = a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v5 = _Block_copy(v5);
  }
  CFIndex v6 = (uint64_t *)(a1 + 72);
  size_t v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

uint64_t ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t result = radio::OpMode::convertMode();
  *a2 = result;
  return result;
}

void ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(void *a1, qmi::ResponseBase *a2)
{
  uint64_t v4 = a1[4];
  CFTypeRef v24 = 0;
  if (*((_DWORD *)a2 + 1) == 26)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    long long v21 = ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
    uint64_t v22 = &__block_descriptor_tmp_61_2;
    uint64_t v23 = v4;
    uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    size_t v7 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)1);
      LOBYTE(cf[0]) = *(unsigned char *)v7;
      ((void (*)(void *, CFTypeRef *))v21)(v20, cf);
    }
    else
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      int v17 = ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
      int v18 = &__block_descriptor_tmp_63_0;
      uint64_t v19 = v4;
      uint64_t v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
      long long v14 = v12;
      if (v12)
      {
        tlv::throwIfNotEnoughBytes(v12, (const unsigned __int8 *)v12 + v13, (const unsigned __int8 *)1);
        LOBYTE(cf[0]) = *(unsigned char *)v14;
        ((void (*)(void *, CFTypeRef *))v17)(v16, cf);
      }
    }
    CFTypeRef v8 = 0;
    char v9 = 1;
    int v10 = (const void *)a1[5];
    if (v10) {
      goto LABEL_12;
    }
LABEL_8:
    BOOL v11 = 0;
    goto LABEL_13;
  }
  radio::QMICommandDriverBase::checkError(v4, a2, "setting operating mode", cf);
  CFTypeRef v8 = cf[0];
  CFTypeRef v24 = cf[0];
  if (cf[0])
  {
    CFRetain(cf[0]);
    char v9 = 0;
    int v10 = (const void *)a1[5];
    if (!v10) {
      goto LABEL_8;
    }
  }
  else
  {
    char v9 = 1;
    int v10 = (const void *)a1[5];
    if (!v10) {
      goto LABEL_8;
    }
  }
LABEL_12:
  BOOL v11 = _Block_copy(v10);
LABEL_13:
  unint64_t v15 = a1[6];
  cf[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
  cf[1] = (CFTypeRef)1174405120;
  CFTypeRef cf[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  cf[3] = &__block_descriptor_tmp_327;
  if (!v11)
  {
    aBlock = 0;
    CFTypeRef v27 = v8;
    if (v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  aBlock = _Block_copy(v11);
  CFTypeRef v27 = v8;
  if ((v9 & 1) == 0) {
LABEL_17:
  }
    CFRetain(v8);
LABEL_18:
  dispatch_async(v15, cf);
  if (v27) {
    CFRelease(v27);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v11) {
    _Block_release(v11);
  }
  if ((v9 & 1) == 0)
  {
    CFRelease(v8);
    CFRelease(v8);
  }
}

void sub_1B8B7C628(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 16, v2, v3);
  JUMPOUT(0x1B8B7C53CLL);
}

void sub_1B8B7C660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B7C688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1)
{
  radio::OpMode::convertMode(*(radio::OpMode **)(*(void *)(a1 + 32) + 216));

  return radio::CommandDriver::handleOperatingModeChanged_sync();
}

uint64_t ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(uint64_t a1)
{
  radio::OpMode::convertMode(*(radio::OpMode **)(*(void *)(a1 + 32) + 216));

  return radio::CommandDriver::handleOperatingModeChanged_sync();
}

void radio::QMICommandDriverBase::setOperatingMode(uint64_t a1, int64_t a2, char a3, uint64_t a4)
{
  dispatch_time_t v8 = dispatch_time(0, a2);
  v22[0] = 0;
  v22[1] = v22;
  void v22[2] = 0x3802000000;
  v22[3] = __Block_byref_object_copy__5;
  v22[4] = __Block_byref_object_dispose__5;
  uint64_t v23 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v24 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  char v9 = *(void **)a4;
  if (*(void *)a4) {
    char v9 = _Block_copy(v9);
  }
  int v10 = *(NSObject **)(a4 + 8);
  uint64_t v23 = v9;
  dispatch_object_t v24 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v11 = *(NSObject **)(a1 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_1E6194388;
  aBlock[4] = v22;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v19 = v12;
  watchdog::create(&v20, v11, &v19, v8);
  if (v12) {
    _Block_release(v12);
  }
  if (v11) {
    dispatch_release(v11);
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  uint64_t v15[2] = ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v15[3] = &unk_1F1262E70;
  v15[5] = a1;
  v15[6] = a2;
  char v17 = a3;
  v15[7] = v20;
  char v16 = (std::__shared_weak_count *)v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = v22;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = (std::__shared_weak_count *)v21;
  if (v21 && !atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Block_object_dispose(v22, 8);
  if (v24) {
    dispatch_release(v24);
  }
  if (v23) {
    _Block_release(v23);
  }
}

void sub_1B8B7C9C0(_Unwind_Exception *a1)
{
  if (v3) {
    _Block_release(v3);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Block_object_dispose((const void *)(v4 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v2);
  _Unwind_Resume(a1);
}

void watchdog::create(void *a1, NSObject *a2, const void **a3, dispatch_time_t a4)
{
  dispatch_time_t v8 = operator new(0x28uLL);
  if (a2) {
    dispatch_retain(a2);
  }
  if (*a3)
  {
    char v9 = _Block_copy(*a3);
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = a2;
    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v9 = 0;
  void *v8 = 0;
  v8[1] = 0;
  v8[2] = a2;
  if (a2) {
LABEL_5:
  }
    dispatch_retain(a2);
LABEL_6:
  v8[3] = 0;
  int v10 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, a2);
  v8[4] = v10;
  dispatch_source_set_timer(v10, a4, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  dispatch_source_set_event_handler(v10, v9);
  dispatch_activate(v10);
  *a1 = v8;
  BOOL v11 = (atomic_ullong *)operator new(0x20uLL);
  uint64_t v12 = (std::__shared_weak_count *)v11;
  uint64_t v11[2] = 0;
  v11[1] = 0;
  *BOOL v11 = (atomic_ullong)&unk_1F12639C0;
  v11[3] = (atomic_ullong)v8;
  a1[1] = v11;
  atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(v11 + 2, 1uLL, memory_order_relaxed);
  void *v8 = v8;
  v8[1] = v11;
  if (!atomic_fetch_add(v11 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v11 + 16))(v11);
    std::__shared_weak_count::__release_weak(v12);
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v9) {
LABEL_12:
  }
    _Block_release(v9);
LABEL_13:
  if (a2)
  {
    dispatch_release(a2);
  }
}

void sub_1B8B7CBBC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog*)#1}::operator() const(watchdog*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B7CBE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v2) {
    _Block_release(v2);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v10 = 7;
  strcpy(__p, "timeout");
  CreateError();
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v2 + 40) && *(void *)(v2 + 48))
  {
    CFRetain(cf);
    uint64_t v3 = *(const void **)(v2 + 40);
    if (v3) {
      uint64_t v4 = _Block_copy(v3);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
    block[3] = &__block_descriptor_tmp_327;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      CFTypeRef v14 = cf;
    }
    else
    {
      aBlock = 0;
      CFTypeRef v14 = cf;
    }
    CFRetain(cf);
    dispatch_async(v5, block);
    if (v14) {
      CFRelease(v14);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v4) {
      _Block_release(v4);
    }
    CFRelease(cf);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    size_t v7 = *(const void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;
    if (v7) {
      _Block_release(v7);
    }
    dispatch_time_t v8 = *(NSObject **)(v6 + 48);
    *(void *)(v6 + 48) = 0;
    if (v8) {
      dispatch_release(v8);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B7CDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  unint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  aBlock[3] = &unk_1F1262E38;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  void aBlock[5] = *(void *)(a1 + 56);
  char v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock[4] = *(void *)(a1 + 32);
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = *(NSObject **)(v1 + 88);
  if (v6) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 88));
  }
  v10[0] = v5;
  v10[1] = v6;
  radio::QMICommandDriverBase::setOperatingMode_sync(v1, v2, v3, (uint64_t)v10);
  if (v6) {
    dispatch_release(v6);
  }
  if (v5) {
    _Block_release(v5);
  }
  size_t v7 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B8B7CF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)va);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(const void **)(v3 + 40);
  if (!v4 || !*(void *)(v3 + 48)) {
    return;
  }
  CFTypeRef v5 = *a2;
  if (*a2 && (CFRetain(*a2), (uint64_t v4 = *(const void **)(v3 + 40)) == 0)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = _Block_copy(v4);
  }
  size_t v7 = *(NSObject **)(v3 + 48);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  v11[3] = &__block_descriptor_tmp_327;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef cf = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef cf = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, v11);
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(const void **)(v8 + 40);
  *(void *)(v8 + 40) = 0;
  if (v9) {
    _Block_release(v9);
  }
  char v10 = *(NSObject **)(v8 + 48);
  *(void *)(v8 + 48) = 0;
  if (v10) {
    dispatch_release(v10);
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_e8_56c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void radio::QMICommandDriverBase::forceOperatingMode(uint64_t a1, int64_t a2, char a3, uint64_t a4)
{
  dispatch_time_t v8 = dispatch_time(0, a2);
  v22[0] = 0;
  v22[1] = v22;
  void v22[2] = 0x3802000000;
  v22[3] = __Block_byref_object_copy__5;
  v22[4] = __Block_byref_object_dispose__5;
  uint64_t v23 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v24 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v9 = _Block_copy(v9);
  }
  char v10 = *(NSObject **)(a4 + 8);
  uint64_t v23 = v9;
  dispatch_object_t v24 = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v11 = *(NSObject **)(a1 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_1E61943B0;
  aBlock[4] = v22;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v19 = v12;
  watchdog::create(&v20, v11, &v19, v8);
  if (v12) {
    _Block_release(v12);
  }
  if (v11) {
    dispatch_release(v11);
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  uint64_t v15[2] = ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v15[3] = &unk_1F1262EE0;
  v15[5] = a1;
  v15[6] = a2;
  char v17 = a3;
  v15[7] = v20;
  char v16 = (std::__shared_weak_count *)v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = v22;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v15);
  int v13 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  CFTypeRef v14 = (std::__shared_weak_count *)v21;
  if (v21 && !atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Block_object_dispose(v22, 8);
  if (v24) {
    dispatch_release(v24);
  }
  if (v23) {
    _Block_release(v23);
  }
}

void sub_1B8B7D4B8(_Unwind_Exception *a1)
{
  if (v3) {
    _Block_release(v3);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Block_object_dispose((const void *)(v4 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v2);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v10 = 7;
  strcpy(__p, "timeout");
  CreateError();
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v2 + 40) && *(void *)(v2 + 48))
  {
    CFRetain(cf);
    uint64_t v3 = *(const void **)(v2 + 40);
    if (v3) {
      uint64_t v4 = _Block_copy(v3);
    }
    else {
      uint64_t v4 = 0;
    }
    CFTypeRef v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
    block[3] = &__block_descriptor_tmp_327;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      CFTypeRef v14 = cf;
    }
    else
    {
      aBlock = 0;
      CFTypeRef v14 = cf;
    }
    CFRetain(cf);
    dispatch_async(v5, block);
    if (v14) {
      CFRelease(v14);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v4) {
      _Block_release(v4);
    }
    CFRelease(cf);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    size_t v7 = *(const void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;
    if (v7) {
      _Block_release(v7);
    }
    dispatch_time_t v8 = *(NSObject **)(v6 + 48);
    *(void *)(v6 + 48) = 0;
    if (v8) {
      dispatch_release(v8);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B7D6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  unint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  aBlock[3] = &unk_1F1262EA8;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  void aBlock[5] = *(void *)(a1 + 56);
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock[4] = *(void *)(a1 + 32);
  CFTypeRef v5 = _Block_copy(aBlock);
  uint64_t v6 = *(NSObject **)(v1 + 88);
  if (v6) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 88));
  }
  v10[0] = v5;
  v10[1] = v6;
  radio::QMICommandDriverBase::setOperatingModeUnconditionally(v1, v2, v3, (uint64_t)v10);
  if (v6) {
    dispatch_release(v6);
  }
  if (v5) {
    _Block_release(v5);
  }
  size_t v7 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B8B7D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)va);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(const void **)(v3 + 40);
  if (!v4 || !*(void *)(v3 + 48)) {
    return;
  }
  CFTypeRef v5 = *a2;
  if (*a2 && (CFRetain(*a2), (uint64_t v4 = *(const void **)(v3 + 40)) == 0)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = _Block_copy(v4);
  }
  size_t v7 = *(NSObject **)(v3 + 48);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  uint64_t v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  v11[3] = &__block_descriptor_tmp_327;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef cf = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef cf = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, v11);
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(const void **)(v8 + 40);
  *(void *)(v8 + 40) = 0;
  if (v9) {
    _Block_release(v9);
  }
  char v10 = *(NSObject **)(v8 + 48);
  *(void *)(v8 + 48) = 0;
  if (v10) {
    dispatch_release(v10);
  }
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v3;
  v15[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
  uint64_t v10 = v2 + 288;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  CFTypeRef v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_82_0;
  v7[4] = v2;
  uint64_t v4 = (void *)a1[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = a1[6];
  uint64_t v8 = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16GetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61944D0;
  aBlock[4] = v7;
  uint64_t v6 = _Block_copy(aBlock);
  CFTypeRef v14 = v6;
  if (v11)
  {
    qmi::Client::send();
    uint64_t v6 = v14;
  }
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v8) {
    _Block_release(v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_1B8B7DB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B7DB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4 = a1[4];
  CFTypeRef v27 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v28 = 0;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting operating mode", &v27);
  CFMutableDictionaryRef v5 = 0;
  if (v27) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v5 = Mutable;
    if (Mutable) {
      CFTypeRef v28 = Mutable;
    }
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 0x40000000;
    dispatch_object_t v24 = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
    unint64_t v25 = &__block_descriptor_tmp_79;
    uint64_t v26 = v4;
    uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    uint64_t v10 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)2);
      LOWORD(block[0]) = *(_WORD *)v10;
      ((void (*)(void *, void *))v24)(v23, block);
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 1174405120;
    uint64_t v19 = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_80;
    unint64_t v20 = &__block_descriptor_tmp_81_0;
    uint64_t v21 = v4;
    CFTypeRef cf = v5;
    if (v5) {
      CFRetain(v5);
    }
    uint64_t v11 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    uint64_t v13 = v11;
    if (v11)
    {
      tlv::throwIfNotEnoughBytes(v11, (const unsigned __int8 *)v11 + v12, (const unsigned __int8 *)1);
      LOBYTE(block[0]) = *(unsigned char *)v13;
      ((void (*)(void *, void *))v19)(v18, block);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  if (a1[5] && a1[6])
  {
    CFTypeRef v14 = v27;
    if (v27) {
      CFRetain(v27);
    }
    if (v5) {
      CFRetain(v5);
    }
    uint64_t v15 = (const void *)a1[5];
    if (v15) {
      char v16 = _Block_copy(v15);
    }
    else {
      char v16 = 0;
    }
    char v17 = a1[6];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
    block[3] = &__block_descriptor_tmp_330;
    if (v16)
    {
      aBlock = _Block_copy(v16);
      CFTypeRef v31 = v14;
      if (!v14) {
        goto LABEL_29;
      }
    }
    else
    {
      aBlock = 0;
      CFTypeRef v31 = v14;
      if (!v14)
      {
LABEL_29:
        CFTypeRef v32 = v5;
        if (v5) {
          CFRetain(v5);
        }
        dispatch_async(v17, block);
        if (v32) {
          CFRelease(v32);
        }
        if (v31) {
          CFRelease(v31);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v16) {
          _Block_release(v16);
        }
        if (v5) {
          CFRelease(v5);
        }
        if (v14) {
          CFRelease(v14);
        }
        goto LABEL_43;
      }
    }
    CFRetain(v14);
    goto LABEL_29;
  }
LABEL_43:
  if (v27) {
    CFRelease(v27);
  }
  if (v28) {
    CFRelease(v28);
  }
}

void sub_1B8B7DEC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8B7DD38);
}

void sub_1B8B7DEF8(void *a1)
{
}

void sub_1B8B7DF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  CFTypeRef v14 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B7DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  radio::OpMode::setConfig(*(radio::OpMode **)(v1 + 216));
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getConfigString((uint64_t *)__p, *(radio::OpMode **)(v1 + 216));
    if (v5 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    size_t v7 = v3;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Got config: %s", buf, 0xCu);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_80(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  radio::OpMode::setMode(*(radio::OpMode **)(v2 + 216));
  int Mode = radio::OpMode::getMode(*(radio::OpMode **)(v2 + 216));
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 40), (CFTypeRef)*MEMORY[0x1E4FB9BD0], Mode, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getModeString((uint64_t *)__p, *(radio::OpMode **)(v2 + 216));
    if (v7 >= 0) {
      char v5 = __p;
    }
    else {
      char v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    int v9 = v5;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Got mode: %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void radio::QMICommandDriverBase::releaseResetDetect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Releasing reset detect", buf, 2u);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_93_0;
  v8[4] = a1;
  char v5 = *(void **)a2;
  if (*(void *)a2) {
    char v5 = _Block_copy(v5);
  }
  uint64_t v6 = (uint64_t *)(a1 + 72);
  char v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v3;
  v15[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
  uint64_t v10 = v2 + 320;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  CFTypeRef v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_90_0;
  v7[4] = v2;
  uint64_t v4 = (void *)a1[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  char v5 = a1[6];
  uint64_t v8 = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18ReleaseResetDetect8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61944F8;
  aBlock[4] = v7;
  uint64_t v6 = _Block_copy(aBlock);
  CFTypeRef v14 = v6;
  if (v11)
  {
    qmi::Client::send();
    uint64_t v6 = v14;
  }
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v8) {
    _Block_release(v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_1B8B7E3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B7E3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "releasing reset detect", &cf);
  uint64_t v4 = (const void *)a1[5];
  if (!v4 || !a1[6]) {
    goto LABEL_20;
  }
  CFTypeRef v5 = cf;
  if (cf && (CFRetain(cf), (uint64_t v4 = (const void *)a1[5]) == 0)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = _Block_copy(v4);
  }
  char v7 = a1[6];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_327;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef v11 = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v11 = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11) {
    CFRelease(v11);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void radio::QMICommandDriverBase::eraseNonvol(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Erasing baseband nonvolatile data", buf, 2u);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_105_3;
  v8[4] = a1;
  CFTypeRef v5 = *(void **)a2;
  if (*(void *)a2) {
    CFTypeRef v5 = _Block_copy(v5);
  }
  uint64_t v6 = (uint64_t *)(a1 + 72);
  char v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v3;
  long long v40 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v39);
  uint64_t v4 = (char *)*((void *)&v39 + 1);
  CFTypeRef v5 = (char *)v40;
  uint64_t v6 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    uint64_t v6 = (const void **)*((void *)&v39 + 1);
    while (*((unsigned char *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v40) {
        goto LABEL_9;
      }
    }
  }
  if (v6 == (const void **)v40)
  {
LABEL_9:
    int v9 = (char *)operator new(0x10uLL);
    uint64_t v10 = v9;
    v9[8] = 1;
    *(void *)int v9 = &unk_1F1263BE8;
    *((_DWORD *)v9 + 3) = 0;
    uint64_t v8 = v9 + 12;
    if ((unint64_t)v5 < *((void *)&v40 + 1))
    {
      *(void *)CFTypeRef v5 = v9;
      *(void *)&long long v40 = v5 + 8;
      goto LABEL_23;
    }
    int64_t v11 = v5 - v4;
    uint64_t v12 = (v5 - v4) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = *((void *)&v40 + 1) - (void)v4;
    if ((uint64_t)(*((void *)&v40 + 1) - (void)v4) >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v16 = operator new(8 * v15);
      char v17 = &v16[8 * v12];
      int v18 = &v16[8 * v15];
      void *v17 = v10;
      uint64_t v19 = (uint64_t)(v17 + 1);
      if (v4 == v5)
      {
LABEL_20:
        *((void *)&v39 + 1) = v17;
        *(void *)&long long v40 = v19;
        *((void *)&v40 + 1) = v18;
        if (!v4)
        {
LABEL_22:
          *(void *)&long long v40 = v19;
          goto LABEL_23;
        }
LABEL_21:
        operator delete(v4);
        goto LABEL_22;
      }
    }
    else
    {
      char v16 = 0;
      char v17 = (void *)(8 * v12);
      int v18 = 0;
      *(void *)(8 * v12) = v10;
      uint64_t v19 = 8 * v12 + 8;
      if (v4 == v5) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v11 - 8) < 0x58) {
      goto LABEL_50;
    }
    if ((unint64_t)(v4 - v16) < 0x20) {
      goto LABEL_50;
    }
    unint64_t v23 = ((unint64_t)(v11 - 8) >> 3) + 1;
    uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v25 = &v5[-v24];
    char v17 = (void *)((char *)v17 - v24);
    uint64_t v26 = &v16[8 * v12 - 16];
    CFTypeRef v27 = v5 - 16;
    uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *uint64_t v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    CFTypeRef v5 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        uint64_t v30 = *((void *)v5 - 1);
        v5 -= 8;
        *--char v17 = v30;
      }
      while (v5 != v4);
    }
    uint64_t v4 = (char *)*((void *)&v39 + 1);
    *((void *)&v39 + 1) = v17;
    *(void *)&long long v40 = v19;
    *((void *)&v40 + 1) = v18;
    if (!v4) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = v7 + 12;
LABEL_23:
  _DWORD *v8 = 1;
  uint64_t v34 = v2 + 320;
  uint64_t v35 = QMIServiceMsg::create();
  int v36 = 25000;
  uint64_t v37 = 0;
  char v38 = 0;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 1174405120;
  v31[2] = ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v31[3] = &__block_descriptor_tmp_102_1;
  v31[4] = v2;
  unint64_t v20 = (void *)a1[5];
  if (v20) {
    unint64_t v20 = _Block_copy(v20);
  }
  uint64_t v21 = a1[6];
  CFTypeRef v32 = v20;
  dispatch_object_t object = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13EraseSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194520;
  aBlock[4] = v31;
  uint64_t v22 = _Block_copy(aBlock);
  char v38 = v22;
  if (v35)
  {
    qmi::Client::send();
    uint64_t v22 = v38;
  }
  if (v22) {
    _Block_release(v22);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v32) {
    _Block_release(v32);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v39);
}

void sub_1B8B7EA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B7EA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B7EA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "erasing baseband nonvolatile data", &cf);
  uint64_t v4 = (const void *)a1[5];
  if (!v4 || !a1[6]) {
    goto LABEL_20;
  }
  CFTypeRef v5 = cf;
  if (cf && (CFRetain(cf), (uint64_t v4 = (const void *)a1[5]) == 0)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = _Block_copy(v4);
  }
  char v7 = a1[6];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_327;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef v11 = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v11 = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11) {
    CFRelease(v11);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void radio::QMICommandDriverBase::restoreNonvolDefaults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Restoring baseband carrier defaults", buf, 2u);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_113;
  v8[4] = a1;
  CFTypeRef v5 = *(void **)a2;
  if (*(void *)a2) {
    CFTypeRef v5 = _Block_copy(v5);
  }
  uint64_t v6 = (uint64_t *)(a1 + 72);
  char v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v3;
  v15[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v15);
  uint64_t v10 = v2 + 320;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_110_0;
  v7[4] = v2;
  uint64_t v4 = (void *)a1[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  CFTypeRef v5 = a1[6];
  uint64_t v8 = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21RestoreCarrierNVItems8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194548;
  aBlock[4] = v7;
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v14 = v6;
  if (v11)
  {
    qmi::Client::send();
    uint64_t v6 = v14;
  }
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v8) {
    _Block_release(v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v15);
}

void sub_1B8B7EE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B7EE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3 = a1[4];
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "restoring baseband carrier defaults", &cf);
  uint64_t v4 = (const void *)a1[5];
  if (!v4 || !a1[6]) {
    goto LABEL_20;
  }
  CFTypeRef v5 = cf;
  if (cf && (CFRetain(cf), (uint64_t v4 = (const void *)a1[5]) == 0)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = _Block_copy(v4);
  }
  char v7 = a1[6];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_327;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    CFTypeRef v11 = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  aBlock = 0;
  CFTypeRef v11 = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11) {
    CFRelease(v11);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
}

void radio::QMICommandDriverBase::getBasebandTime(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband time", buf, 2u);
  }
  uint64_t v6 = a1[9];
  CFTypeRef v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (char v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_123;
  v12[4] = a1;
  void v12[5] = v6;
  uint64_t v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 288;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  char v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_120_0;
  uint64_t v5 = a1[5];
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  v9[4] = v2;
  v9[5] = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = a1[8];
  CFTypeRef v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm15GetBasebandTime8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194570;
  aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  char v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8B7F308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8B7F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    CFTypeRef v27 = v6;
    if (v6)
    {
      char v7 = v6;
      if (!a1[5])
      {
LABEL_50:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef v25 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting baseband time", &v25);
      CFMutableDictionaryRef v24 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v24 = Mutable;
      }
      if (v25) {
        uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v10)
      {
        if (!a1[7]) {
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t block = 0;
        p_uint64_t block = (uint64_t)&block;
        uint64_t v30 = 0x2000000000;
        CFTypeRef v31 = 0;
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 1174405120;
        uint64_t v19 = ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        unint64_t v20 = &unk_1F12630C8;
        uint64_t v21 = &block;
        uint64_t v22 = v5;
        CFTypeRef cf = Mutable;
        if (Mutable) {
          CFRetain(Mutable);
        }
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v13 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)8);
          uint64_t v35 = *(void *)v13;
          v19((uint64_t)v18, &v35);
        }
        if (cf) {
          CFRelease(cf);
        }
        _Block_object_dispose(&block, 8);
        if (!a1[7]) {
          goto LABEL_46;
        }
      }
      if (!a1[8])
      {
LABEL_46:
        if (v9) {
          CFRelease(v9);
        }
        if (v25) {
          CFRelease(v25);
        }
        goto LABEL_50;
      }
      CFTypeRef v14 = v25;
      if (v25) {
        CFRetain(v25);
      }
      if (v9) {
        CFRetain(v9);
      }
      int v15 = (const void *)a1[7];
      if (v15) {
        uint64_t v16 = _Block_copy(v15);
      }
      else {
        uint64_t v16 = 0;
      }
      char v17 = a1[8];
      uint64_t block = MEMORY[0x1E4F143A8];
      p_uint64_t block = 1174405120;
      uint64_t v30 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      CFTypeRef v31 = &__block_descriptor_tmp_330;
      if (v16)
      {
        aBlock = _Block_copy(v16);
        CFTypeRef v33 = v14;
        if (!v14) {
          goto LABEL_32;
        }
      }
      else
      {
        aBlock = 0;
        CFTypeRef v33 = v14;
        if (!v14)
        {
LABEL_32:
          CFTypeRef v34 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v17, &block);
          if (v34) {
            CFRelease(v34);
          }
          if (v33) {
            CFRelease(v33);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v16) {
            _Block_release(v16);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v14) {
            CFRelease(v14);
          }
          goto LABEL_46;
        }
      }
      CFRetain(v14);
      goto LABEL_32;
    }
  }
}

void sub_1B8B7F6B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8B7F4D4);
}

void sub_1B8B7F6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  CFTypeRef v11 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v9);
  _Block_object_dispose(va3, 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B8B7F728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4FB9A80], *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 8) + 30), (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) &= 0xFFFFFFFFFFFFuLL;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) *= 5;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >>= 2;
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  time_t v6 = v5 / 0x3E8 + 315964800;
  memset(&v18, 0, sizeof(v18));
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v7;
  long long v28 = v7;
  *(_OWORD *)CFTypeRef v25 = v7;
  long long v26 = v7;
  long long v23 = v7;
  long long v24 = v7;
  *(_OWORD *)__str = v7;
  long long v22 = v7;
  time_t v17 = v6;
  uint64_t v8 = localtime(&v17);
  strftime(v25, 0x40uLL, "%Y-%m-%d %H:%M:%S", v8);
  unsigned int v9 = 1000 * (v5 % 0x3E8);
  snprintf(__str, 0x40uLL, "%s.%06d", v25, v9);
  std::string::__assign_external(&v18, __str);
  uint64_t v10 = *(__CFDictionary **)(a1 + 48);
  CFTypeRef v11 = (const void *)*MEMORY[0x1E4FB9A98];
  unint64_t v20 = v11;
  if (v11) {
    CFRetain(v11);
  }
  valuePtr.__r_.__value_.__r.__words[0] = v6;
  CFNumberRef v12 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v13 = v12;
  CFNumberRef v19 = v12;
  if (v11 && v12)
  {
    CFDictionaryAddValue(v10, v11, v12);
  }
  else if (!v12)
  {
    goto LABEL_8;
  }
  CFRelease(v13);
LABEL_8:
  if (v11) {
    CFRelease(v11);
  }
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 48), (CFTypeRef)*MEMORY[0x1E4FB9AC0], v9, v4);
  uint64_t v14 = *(void *)(a1 + 48);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&valuePtr, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  }
  else {
    std::string valuePtr = v18;
  }
  ctu::cf::insert<__CFString const*,std::string>(v14, (CFTypeRef)*MEMORY[0x1E4FB9A88]);
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(valuePtr.__r_.__value_.__l.__data_);
    uint64_t v15 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      operator delete(v18.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    uint64_t v15 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
  }
  uint64_t v16 = &v18;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  LODWORD(valuePtr.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)valuePtr.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
  _os_log_impl(&dword_1B8B00000, v15, OS_LOG_TYPE_DEFAULT, "#I Baseband time: %s", (uint8_t *)&valuePtr, 0xCu);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_1B8B7FA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, const void *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 48);
  if (v1) {
    CFRelease(v1);
  }
}

void radio::QMICommandDriverBase::getBasebandStatus(void *a1, uint64_t a2)
{
  CFAllocatorRef v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband status", buf, 2u);
  }
  uint64_t v6 = a1[9];
  unint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (long long v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_140_2;
  v12[4] = a1;
  void v12[5] = v6;
  CFNumberRef v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 320;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  time_t v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_137;
  uint64_t v5 = a1[5];
  CFAllocatorRef v4 = (std::__shared_weak_count *)a1[6];
  v9[4] = v2;
  v9[5] = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  long long v7 = a1[8];
  CFTypeRef v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetBasebandStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194598;
  aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  time_t v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8B7FE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8B7FE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    CFTypeRef v34 = v6;
    if (v6)
    {
      long long v7 = v6;
      if (!a1[5])
      {
LABEL_56:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef v32 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting baseband status", &v32);
      CFMutableDictionaryRef v31 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v31 = Mutable;
      }
      if (v32) {
        uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10)
      {
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 1174405120;
        long long v28 = (void (*)(uint64_t, uint64_t *))___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        long long v29 = &__block_descriptor_tmp_129;
        CFTypeRef v30 = Mutable;
        if (Mutable) {
          CFRetain(Mutable);
        }
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v13 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)1);
          LOBYTE(block) = *(unsigned char *)v13;
          v28((uint64_t)v27, &block);
        }
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 1174405120;
        long long v24 = ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_130;
        CFTypeRef v25 = &__block_descriptor_tmp_134;
        CFTypeRef cf = v9;
        if (v9) {
          CFRetain(v9);
        }
        uint64_t v14 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v16 = v14;
        if (v14)
        {
          int v17 = v15;
          uint64_t v42 = v14;
          uint64_t block = tlv::parseV<bsp::tlv::abm::SleepManagerStats>(&v42, v15);
          uint64_t v36 = v18;
          if (v42) {
            v24((uint64_t)v23, (unsigned int *)&block);
          }
          else {
            ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 17, v16, v17);
          }
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v30) {
          CFRelease(v30);
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_52:
        if (v9) {
          CFRelease(v9);
        }
        if (v32) {
          CFRelease(v32);
        }
        goto LABEL_56;
      }
      CFTypeRef v19 = v32;
      if (v32) {
        CFRetain(v32);
      }
      if (v9) {
        CFRetain(v9);
      }
      unint64_t v20 = (const void *)a1[7];
      if (v20) {
        uint64_t v21 = _Block_copy(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      long long v22 = a1[8];
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v36 = 1174405120;
      uint64_t v37 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      char v38 = &__block_descriptor_tmp_330;
      if (v21)
      {
        aBlock = _Block_copy(v21);
        CFTypeRef v40 = v19;
        if (!v19) {
          goto LABEL_38;
        }
      }
      else
      {
        aBlock = 0;
        CFTypeRef v40 = v19;
        if (!v19)
        {
LABEL_38:
          CFTypeRef v41 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v22, &block);
          if (v41) {
            CFRelease(v41);
          }
          if (v40) {
            CFRelease(v40);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v21) {
            _Block_release(v21);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v19) {
            CFRelease(v19);
          }
          goto LABEL_52;
        }
      }
      CFRetain(v19);
      goto LABEL_38;
    }
  }
}

void sub_1B8B80280(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 16, v2, v3);
  JUMPOUT(0x1B8B7FFE0);
}

void sub_1B8B802B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, const void *);
  va_copy(va2, va1);
  int v15 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v11);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B8B802FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, unsigned char *a2)
{
  ctu::cf::insert<__CFString const*,BOOL>(*(CFMutableDictionaryRef *)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9A48], *a2 != 0);
}

uint64_t ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_130(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,unsigned char>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9A90], *(unsigned __int8 *)a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9AB8], a2[1], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9AD8], a2[2], v4);
  uint64_t v5 = *(__CFDictionary **)(a1 + 32);
  uint64_t v6 = (const void *)*MEMORY[0x1E4FB9AE8];
  unsigned int v7 = a2[3];

  return ctu::cf::insert<__CFString const*,unsigned int>(v5, v6, v7, v4);
}

void radio::QMICommandDriverBase::getBasebandFWVersion(void *a1, uint64_t a2)
{
  CFAllocatorRef v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband firmware version", buf, 2u);
  }
  uint64_t v6 = a1[9];
  uint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (unsigned int v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_151;
  v12[4] = a1;
  void v12[5] = v6;
  uint64_t v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 288;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  int v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_148_0;
  uint64_t v5 = a1[5];
  CFAllocatorRef v4 = (std::__shared_weak_count *)a1[6];
  v9[4] = v2;
  v9[5] = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  unsigned int v7 = a1[8];
  CFTypeRef v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm20GetBasebandFWVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61945C0;
  aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  int v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8B80710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8B80740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    long long v24 = v6;
    if (v6)
    {
      unsigned int v7 = v6;
      if (!a1[5])
      {
LABEL_49:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef v22 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting baseband firmware version", &v22);
      CFMutableDictionaryRef v21 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v21 = Mutable;
      }
      if (v22) {
        uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10)
      {
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 1174405120;
        uint64_t v18 = ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        CFTypeRef v19 = &__block_descriptor_tmp_145;
        CFTypeRef cf = Mutable;
        if (Mutable) {
          CFRetain(Mutable);
        }
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        if (TlvValue)
        {
          std::string __p = 0;
          uint64_t v26 = 0;
          long long v27 = 0;
          std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, TlvValue, (char *)(TlvValue + v12), v12);
          v18((uint64_t)v17, (uint64_t *)&__p);
          if (SHIBYTE(v27) < 0) {
            operator delete(__p);
          }
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_45:
        if (v9) {
          CFRelease(v9);
        }
        if (v22) {
          CFRelease(v22);
        }
        goto LABEL_49;
      }
      CFTypeRef v13 = v22;
      if (v22) {
        CFRetain(v22);
      }
      if (v9) {
        CFRetain(v9);
      }
      uint64_t v14 = (const void *)a1[7];
      if (v14) {
        int v15 = _Block_copy(v14);
      }
      else {
        int v15 = 0;
      }
      uint64_t v16 = a1[8];
      std::string __p = (void *)MEMORY[0x1E4F143A8];
      uint64_t v26 = 1174405120;
      long long v27 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      long long v28 = &__block_descriptor_tmp_330;
      if (v15)
      {
        aBlock = _Block_copy(v15);
        CFTypeRef v30 = v13;
        if (!v13) {
          goto LABEL_31;
        }
      }
      else
      {
        aBlock = 0;
        CFTypeRef v30 = v13;
        if (!v13)
        {
LABEL_31:
          CFTypeRef v31 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v16, &__p);
          if (v31) {
            CFRelease(v31);
          }
          if (v30) {
            CFRelease(v30);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v15) {
            _Block_release(v15);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v13) {
            CFRelease(v13);
          }
          goto LABEL_45;
        }
      }
      CFRetain(v13);
      goto LABEL_31;
    }
  }
}

void sub_1B8B80A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v25 + 32));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a15);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1B8B80B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 170, sizeof(__p));
  int v2 = *((char *)a2 + 23);
  if (v2 >= 0) {
    long long v3 = a2;
  }
  else {
    long long v3 = (uint64_t *)*a2;
  }
  if (v2 >= 0) {
    std::string::size_type v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v4 = a2[1];
  }
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_p = (std::string *)operator new(v8 + 1);
    __p.__r_.__value_.__l.__size_ = v4;
    __p.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v4;
    p_p = &__p;
    if (!v4)
    {
      unsigned int v7 = &__p;
      goto LABEL_22;
    }
  }
  if (v4 < 0x20 || (unint64_t)((char *)p_p - (char *)v3) < 0x20)
  {
    unsigned int v7 = p_p;
    uint64_t v10 = (std::string::value_type *)v3;
  }
  else
  {
    unsigned int v7 = (std::string *)((char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v10 = (char *)v3 + (v4 & 0xFFFFFFFFFFFFFFE0);
    CFTypeRef v11 = (long long *)(v3 + 2);
    int v12 = &p_p->__r_.__value_.__r.__words[2];
    unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v14 = *v11;
      *((_OWORD *)v12 - 1) = *(v11 - 1);
      *(_OWORD *)int v12 = v14;
      v11 += 2;
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    if (v4 == (v4 & 0x7FFFFFFFFFFFFFE0)) {
      goto LABEL_22;
    }
  }
  do
  {
    std::string::value_type v15 = *v10++;
    v7->__r_.__value_.__s.__data_[0] = v15;
    unsigned int v7 = (std::string *)((char *)v7 + 1);
  }
  while (v10 != (char *)v3 + v4);
LABEL_22:
  v7->__r_.__value_.__s.__data_[0] = 0;
  char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size >= 2)
  {
    uint64_t v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    CFTypeRef v19 = memchr((char *)&v18->__r_.__value_.__l.__data_ + 1, 32, size - 1);
    std::string::size_type v20 = v19 - (unsigned char *)v18;
    if (v19 && v20 != -1)
    {
      if (size >= v20) {
        std::string::size_type v22 = v19 - (unsigned char *)v18;
      }
      else {
        std::string::size_type v22 = size;
      }
      if (v22 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v22 >= 0x17)
      {
        uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17) {
          uint64_t v25 = v22 | 7;
        }
        uint64_t v26 = v25 + 1;
        p_dst = operator new(v25 + 1);
        __dst.__r_.__value_.__l.__size_ = v22;
        __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v22;
        p_dst = &__dst;
        if (!v22)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_40:
            std::string __p = __dst;
            char v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            goto LABEL_41;
          }
LABEL_53:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_40;
        }
      }
      memmove(p_dst, v18, v22);
      *((unsigned char *)p_dst + v22) = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_53;
    }
  }
LABEL_41:
  uint64_t v24 = *(void *)(a1 + 32);
  if (v16 < 0) {
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  ctu::cf::insert<__CFString const*,std::string>(v24, (CFTypeRef)*MEMORY[0x1E4FB9BC0]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_48:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_48;
  }
}

void sub_1B8B80DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::getFactoryCalibrationStatus(void *a1, uint64_t a2)
{
  std::string::size_type v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting factory calibration status", buf, 2u);
  }
  uint64_t v6 = a1[9];
  uint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (unsigned int v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_163;
  v12[4] = a1;
  void v12[5] = v6;
  unint64_t v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 320;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  int v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_160_0;
  uint64_t v5 = a1[5];
  std::string::size_type v4 = (std::__shared_weak_count *)a1[6];
  v9[4] = v2;
  v9[5] = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  unsigned int v7 = a1[8];
  CFTypeRef v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm27GetFactoryCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61945E8;
  aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  int v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8B81178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8B811A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v26 = v6;
    if (v6)
    {
      unsigned int v7 = v6;
      if (!a1[5])
      {
LABEL_52:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting factory calibration status", &cf);
      CFMutableDictionaryRef v23 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v23 = Mutable;
      }
      if (cf) {
        uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10)
      {
        if (Mutable
           ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
           : 0)
        {
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 1174405120;
          std::string::size_type v20 = ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
          CFMutableDictionaryRef v21 = &__block_descriptor_tmp_157;
          CFTypeRef v22 = Mutable;
          if (Mutable) {
            CFRetain(Mutable);
          }
          uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
          int v17 = TlvValue;
          if (TlvValue)
          {
            tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v16, (const unsigned __int8 *)1);
            LOBYTE(block[0]) = *(unsigned char *)v17;
            v20((uint64_t)v19, (unsigned __int8 *)block);
          }
          if (v22) {
            CFRelease(v22);
          }
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_48:
        if (v9) {
          CFRelease(v9);
        }
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_52;
      }
      CFTypeRef v11 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v9) {
        CFRetain(v9);
      }
      int v12 = (const void *)a1[7];
      if (v12) {
        uint64_t v13 = _Block_copy(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v18 = a1[8];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      block[3] = &__block_descriptor_tmp_330;
      if (v13)
      {
        aBlock = _Block_copy(v13);
        CFTypeRef v29 = v11;
        if (!v11) {
          goto LABEL_34;
        }
      }
      else
      {
        aBlock = 0;
        CFTypeRef v29 = v11;
        if (!v11)
        {
LABEL_34:
          CFTypeRef v30 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v18, block);
          if (v30) {
            CFRelease(v30);
          }
          if (v29) {
            CFRelease(v29);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v13) {
            _Block_release(v13);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v11) {
            CFRelease(v11);
          }
          goto LABEL_48;
        }
      }
      CFRetain(v11);
      goto LABEL_34;
    }
  }
}

void sub_1B8B814DC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8B81378);
}

void sub_1B8B8153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v6);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B8B81578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, unsigned __int8 *a2)
{
  return ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9C50], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
}

void radio::QMICommandDriverBase::getRFCalibrationStatus(void *a1, uint64_t a2)
{
  std::string::size_type v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting RF calibration status", buf, 2u);
  }
  uint64_t v6 = a1[9];
  uint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (unsigned int v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_200;
  v12[4] = a1;
  void v12[5] = v6;
  uint64_t v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 320;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  int v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_197_0;
  uint64_t v5 = a1[5];
  std::string::size_type v4 = (std::__shared_weak_count *)a1[6];
  v9[4] = v2;
  v9[5] = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  unsigned int v7 = a1[8];
  CFTypeRef v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22GetRFCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194610;
  aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  int v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8B818DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8B8190C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v72 = v6;
    if (v6)
    {
      unsigned int v7 = v6;
      if (!a1[5])
      {
LABEL_82:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef v70 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting RF calibration status", &v70);
      CFMutableDictionaryRef v69 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v69 = Mutable;
      }
      if (v70) {
        uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (!v10)
      {
        if (Mutable
           ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
           : 0)
        {
          v65[0] = MEMORY[0x1E4F143A8];
          v65[1] = 1174405120;
          v66 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
          CFTypeRef v67 = &__block_descriptor_tmp_169;
          CFTypeRef v68 = Mutable;
          if (Mutable) {
            CFRetain(Mutable);
          }
          uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
          int v17 = TlvValue;
          if (TlvValue)
          {
            tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v16, (const unsigned __int8 *)1);
            LOBYTE(block) = *(unsigned char *)v17;
            v66((uint64_t)v65, (unsigned __int8 *)&block);
          }
          v61[0] = MEMORY[0x1E4F143A8];
          v61[1] = 1174405120;
          uint64_t v62 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_170;
          uint64_t v63 = &__block_descriptor_tmp_174_1;
          CFTypeRef v64 = v9;
          if (v9) {
            CFRetain(v9);
          }
          uint64_t v18 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          std::string::size_type v20 = v18;
          if (v18)
          {
            CFMutableDictionaryRef v21 = (const unsigned __int8 *)v18 + v19;
            tlv::throwIfNotEnoughBytes(v18, v21, (const unsigned __int8 *)2);
            int v22 = *(unsigned __int16 *)v20;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v20 + 2), v21, (const unsigned __int8 *)2);
            LODWORD(block) = v22 | (*((unsigned __int16 *)v20 + 1) << 16);
            v62((uint64_t)v61, (unsigned __int16 *)&block);
          }
          v57[0] = MEMORY[0x1E4F143A8];
          v57[1] = 1174405120;
          uint64_t v58 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_175;
          uint64_t v59 = &__block_descriptor_tmp_179_0;
          CFTypeRef v60 = v9;
          if (v9) {
            CFRetain(v9);
          }
          uint64_t v23 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          uint64_t v25 = v23;
          if (v23)
          {
            uint64_t v26 = (const unsigned __int8 *)v23 + v24;
            tlv::throwIfNotEnoughBytes(v23, v26, (const unsigned __int8 *)4);
            uint64_t v27 = *(unsigned int *)v25;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v25 + 4), v26, (const unsigned __int8 *)4);
            unint64_t block = v27 | ((unint64_t)*((unsigned int *)v25 + 1) << 32);
            v58((uint64_t)v57, (unsigned int *)&block);
          }
          v53[0] = MEMORY[0x1E4F143A8];
          v53[1] = 1174405120;
          uint64_t v54 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_180;
          char v55 = &__block_descriptor_tmp_184_1;
          CFTypeRef v56 = v9;
          if (v9) {
            CFRetain(v9);
          }
          long long v28 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          CFTypeRef v30 = v28;
          if (v28)
          {
            CFTypeRef v31 = (const unsigned __int8 *)v28 + v29;
            tlv::throwIfNotEnoughBytes(v28, v31, (const unsigned __int8 *)4);
            uint64_t v32 = *(unsigned int *)v30;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v30 + 4), v31, (const unsigned __int8 *)4);
            unint64_t block = v32 | ((unint64_t)*((unsigned int *)v30 + 1) << 32);
            v54((uint64_t)v53, (unsigned int *)&block);
          }
          v49[0] = MEMORY[0x1E4F143A8];
          v49[1] = 1174405120;
          uint64_t v50 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_185;
          char v51 = &__block_descriptor_tmp_189;
          CFTypeRef v52 = v9;
          if (v9) {
            CFRetain(v9);
          }
          CFTypeRef v33 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          uint64_t v35 = v33;
          if (v33)
          {
            uint64_t v36 = (const unsigned __int8 *)v33 + v34;
            tlv::throwIfNotEnoughBytes(v33, v36, (const unsigned __int8 *)4);
            uint64_t v37 = *(unsigned int *)v35;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v35 + 4), v36, (const unsigned __int8 *)4);
            unint64_t block = v37 | ((unint64_t)*((unsigned int *)v35 + 1) << 32);
            v50((uint64_t)v49, (unsigned int *)&block);
          }
          v45[0] = MEMORY[0x1E4F143A8];
          v45[1] = 1174405120;
          uint64_t v46 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_190;
          int v47 = &__block_descriptor_tmp_194_0;
          CFTypeRef cf = v9;
          if (v9) {
            CFRetain(v9);
          }
          char v38 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          CFTypeRef v40 = (unint64_t *)v38;
          if (v38)
          {
            CFTypeRef v41 = (const unsigned __int8 *)v38 + v39;
            tlv::throwIfNotEnoughBytes(v38, v41, (const unsigned __int8 *)8);
            unint64_t v42 = *v40;
            tlv::throwIfNotEnoughBytes((tlv *)(v40 + 1), v41, (const unsigned __int8 *)8);
            uint64_t v43 = v40[1];
            unint64_t block = v42;
            uint64_t v74 = v43;
            v46((uint64_t)v45, (uint64_t *)&block);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (v52) {
            CFRelease(v52);
          }
          if (v56) {
            CFRelease(v56);
          }
          if (v60) {
            CFRelease(v60);
          }
          if (v64) {
            CFRelease(v64);
          }
          if (v68) {
            CFRelease(v68);
          }
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_78:
        if (v9) {
          CFRelease(v9);
        }
        if (v70) {
          CFRelease(v70);
        }
        goto LABEL_82;
      }
      CFTypeRef v11 = v70;
      if (v70) {
        CFRetain(v70);
      }
      if (v9) {
        CFRetain(v9);
      }
      int v12 = (const void *)a1[7];
      if (v12) {
        uint64_t v13 = _Block_copy(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v44 = a1[8];
      unint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v74 = 1174405120;
      v75 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      long long v76 = &__block_descriptor_tmp_330;
      if (v13)
      {
        long long v77 = _Block_copy(v13);
        CFTypeRef v78 = v11;
        if (!v11) {
          goto LABEL_64;
        }
      }
      else
      {
        long long v77 = 0;
        CFTypeRef v78 = v11;
        if (!v11)
        {
LABEL_64:
          CFMutableDictionaryRef v79 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v44, &block);
          if (v79) {
            CFRelease(v79);
          }
          if (v78) {
            CFRelease(v78);
          }
          if (v77) {
            _Block_release(v77);
          }
          if (v13) {
            _Block_release(v13);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v11) {
            CFRelease(v11);
          }
          goto LABEL_78;
        }
      }
      CFRetain(v11);
      goto LABEL_64;
    }
  }
}

void sub_1B8B82018(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8B81AE4);
}

void sub_1B8B82078(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 7, v2, v3);
  JUMPOUT(0x1B8B81E48);
}

void sub_1B8B820A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 6, v2, v3);
  JUMPOUT(0x1B8B81D98);
}

void sub_1B8B820D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 5, v2, v3);
  JUMPOUT(0x1B8B81CECLL);
}

void sub_1B8B820FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 4, v2, v3);
  JUMPOUT(0x1B8B81C40);
}

void sub_1B8B82128(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 3, v2, v3);
  JUMPOUT(0x1B8B81B94);
}

void sub_1B8B82154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a35);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 192));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v35 - 184));
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v35 - 176);
  _Unwind_Resume(a1);
}

void sub_1B8B821F8(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, unsigned __int8 *a2)
{
  ctu::cf::insert<__CFString const*,BOOL>(*(CFMutableDictionaryRef *)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9C60], *a2 == 1);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_170(uint64_t a1, unsigned __int16 *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,unsigned short>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9C00], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  uint64_t v5 = *(__CFDictionary **)(a1 + 32);
  uint64_t v6 = (const void *)*MEMORY[0x1E4FB9BE0];
  unsigned int v7 = a2[1];

  ctu::cf::insert<__CFString const*,unsigned short>(v5, v6, v7, v4);
}

uint64_t ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_175(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9C18], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  uint64_t v5 = *(__CFDictionary **)(a1 + 32);
  uint64_t v6 = (const void *)*MEMORY[0x1E4FB9BF0];
  unsigned int v7 = a2[1];

  return ctu::cf::insert<__CFString const*,unsigned int>(v5, v6, v7, v4);
}

uint64_t ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_180(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9C38], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  uint64_t v5 = *(__CFDictionary **)(a1 + 32);
  uint64_t v6 = (const void *)*MEMORY[0x1E4FB9C10];
  unsigned int v7 = a2[1];

  return ctu::cf::insert<__CFString const*,unsigned int>(v5, v6, v7, v4);
}

uint64_t ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_185(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9C58], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  uint64_t v5 = *(__CFDictionary **)(a1 + 32);
  uint64_t v6 = (const void *)*MEMORY[0x1E4FB9C30];
  unsigned int v7 = a2[1];

  return ctu::cf::insert<__CFString const*,unsigned int>(v5, v6, v7, v4);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_190(uint64_t a1, uint64_t *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  ctu::cf::insert<__CFString const*,long long>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E4FB9C08], *a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  uint64_t v5 = a2[1];
  uint64_t v6 = *(__CFDictionary **)(a1 + 32);
  unsigned int v7 = (const void *)*MEMORY[0x1E4FB9BE8];

  ctu::cf::insert<__CFString const*,long long>(v6, v7, v5, v4);
}

void radio::QMICommandDriverBase::getWakeReason(void *a1, uint64_t a2)
{
  CFAllocatorRef v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  uint64_t v6 = a1[9];
  uint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (unsigned int v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_215;
  v12[4] = a1;
  void v12[5] = v6;
  uint64_t v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  CFTypeRef v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  uint64_t v13 = v2 + 320;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  int v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_212;
  uint64_t v5 = a1[5];
  CFAllocatorRef v4 = (std::__shared_weak_count *)a1[6];
  v9[4] = v2;
  v9[5] = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  unsigned int v7 = a1[8];
  CFTypeRef v11 = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194638;
  aBlock[4] = v9;
  uint64_t v8 = _Block_copy(aBlock);
  int v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v8 = v17;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B8B827C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B8B827F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1, const qmi::ResponseBase *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v32 = v6;
    if (v6)
    {
      unsigned int v7 = v6;
      if (!a1[5])
      {
LABEL_59:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting wake reason", &cf);
      CFMutableDictionaryRef v29 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFMutableDictionaryRef v9 = Mutable;
      if (Mutable) {
        CFMutableDictionaryRef v29 = Mutable;
      }
      if (cf) {
        uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v10)
      {
        if (!a1[7]) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t block = 0;
        p_uint64_t block = (uint64_t)&block;
        uint64_t v35 = 0x2000000000;
        LOBYTE(v36) = 0;
        v27[0] = 0;
        v27[1] = v27;
        void v27[2] = 0x2000000000;
        int v28 = 0;
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 1174405120;
        uint64_t v23 = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        int v24 = &unk_1F12634C0;
        uint64_t v25 = v27;
        CFTypeRef v26 = Mutable;
        if (Mutable) {
          CFRetain(Mutable);
        }
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v13 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)4);
          LODWORD(v40) = *(_DWORD *)v13;
          ((void (*)(void *, void **))v23)(v22, &v40);
        }
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 1174405120;
        void v20[2] = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_207;
        v20[3] = &unk_1F12634F8;
        v20[6] = v5;
        CFTypeRef v21 = v9;
        if (v9) {
          CFRetain(v9);
        }
        v20[4] = v27;
        v20[5] = &block;
        CFTypeRef v40 = v20;
        qmi::MessageBase::applyTlv<bsp::tlv::abm::WakeBuffer,void({block_pointer}&)(bsp::tlv::abm::WakeBuffer const&)>(a2, 19, (uint64_t)&v40);
        if (*(unsigned char *)(p_block + 24))
        {
          std::string __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Null wake data from baseband");
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = v40;
          CFTypeRef v40 = 0;
          if (v14)
          {
            CFRelease(v14);
            if (v40) {
              CFRelease(v40);
            }
          }
          operator delete(__p);
        }
        if (v21) {
          CFRelease(v21);
        }
        if (v26) {
          CFRelease(v26);
        }
        _Block_object_dispose(v27, 8);
        _Block_object_dispose(&block, 8);
        if (!a1[7]) {
          goto LABEL_55;
        }
      }
      if (!a1[8])
      {
LABEL_55:
        if (v9) {
          CFRelease(v9);
        }
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_59;
      }
      CFTypeRef v15 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v9) {
        CFRetain(v9);
      }
      uint64_t v16 = (const void *)a1[7];
      if (v16) {
        int v17 = _Block_copy(v16);
      }
      else {
        int v17 = 0;
      }
      uint64_t v18 = a1[8];
      uint64_t block = MEMORY[0x1E4F143A8];
      p_uint64_t block = 1174405120;
      uint64_t v35 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      uint64_t v36 = &__block_descriptor_tmp_330;
      if (v17)
      {
        uint64_t v37 = _Block_copy(v17);
        CFTypeRef v38 = v15;
        if (!v15) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v37 = 0;
        CFTypeRef v38 = v15;
        if (!v15)
        {
LABEL_41:
          CFMutableDictionaryRef v39 = v9;
          if (v9) {
            CFRetain(v9);
          }
          dispatch_async(v18, &block);
          if (v39) {
            CFRelease(v39);
          }
          if (v38) {
            CFRelease(v38);
          }
          if (v37) {
            _Block_release(v37);
          }
          if (v17) {
            _Block_release(v17);
          }
          if (v9) {
            CFRelease(v9);
          }
          if (v15) {
            CFRelease(v15);
          }
          goto LABEL_55;
        }
      }
      CFRetain(v15);
      goto LABEL_41;
    }
  }
}

void sub_1B8B82C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34,const void *a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 + 56));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v36 + 40));
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a34);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a35);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v37 - 176);
  _Unwind_Resume(a1);
}

void sub_1B8B82D4C(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t v5 = *(__CFDictionary **)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return ctu::cf::insert<char const*,unsigned int>(v5, (const __CFString **)"kKeyBasebandWakeChannel", *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], a5);
}

void ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_207(uint64_t a1)
{
  ctu::cf::convert_copy();
  ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 56), (const __CFString **)"kKeyBasebandWakeData", 0, *MEMORY[0x1E4F1CF80], v2);
  unsigned int v3 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  BOOL v4 = v3 > 0xD;
  int v5 = (1 << v3) & 0x2410;
  if (!v4 && v5 != 0) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_1B8B82F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unsigned int v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B82F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8B82F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  CFAllocatorRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFTypeRef __copy_helper_block_e8_56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 56);
  if (v1) {
    CFRelease(v1);
  }
}

void radio::QMICommandDriverBase::dumpLogsIndState_sync(radio::QMICommandDriverBase *this, char a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = v4;
  long long v52 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v51);
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 0x40000000;
  int v5 = ___ZN5radio20QMICommandDriverBase21dumpLogsIndState_syncEb_block_invoke;
  char v48 = ___ZN5radio20QMICommandDriverBase21dumpLogsIndState_syncEb_block_invoke;
  uint64_t v49 = &__block_descriptor_tmp_217;
  char v50 = a2;
  uint64_t v6 = (char *)*((void *)&v51 + 1);
  unsigned int v7 = (char *)v52;
  uint64_t v8 = (const void **)*((void *)&v51 + 1);
  if (*((void *)&v51 + 1) != (void)v52)
  {
    uint64_t v8 = (const void **)*((void *)&v51 + 1);
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v52) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == (const void **)v52)
  {
LABEL_9:
    CFTypeRef v11 = operator new(0x10uLL);
    int v12 = v11;
    void v11[4] = 1;
    *(void *)CFTypeRef v11 = &unk_1F1263C38;
    if ((unint64_t)v7 < *((void *)&v52 + 1))
    {
      *(void *)unsigned int v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_22:
      uint64_t v10 = (char *)v12 + 9;
      *(void *)&long long v52 = v13;
      int v5 = v48;
      goto LABEL_23;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v52 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v52 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v19 = operator new(8 * v18);
      std::string::size_type v20 = &v19[8 * v15];
      CFTypeRef v21 = &v19[8 * v18];
      *std::string::size_type v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((void *)&v51 + 1) = v20;
        *(void *)&long long v52 = v13;
        *((void *)&v52 + 1) = v21;
        if (!v6) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      int v19 = 0;
      std::string::size_type v20 = (void *)(8 * v15);
      CFTypeRef v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_51;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_51;
    }
    unint64_t v29 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeRef v31 = &v7[-v30];
    std::string::size_type v20 = (void *)((char *)v20 - v30);
    uint64_t v32 = &v19[8 * v15 - 16];
    CFTypeRef v33 = v7 - 16;
    uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      _OWORD *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 4;
    }
    while (v34);
    unsigned int v7 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        uint64_t v36 = *((void *)v7 - 1);
        v7 -= 8;
        *--std::string::size_type v20 = v36;
      }
      while (v7 != v6);
    }
    uint64_t v6 = (char *)*((void *)&v51 + 1);
    *((void *)&v51 + 1) = v20;
    *(void *)&long long v52 = v13;
    *((void *)&v52 + 1) = v21;
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9 + 9;
LABEL_23:
  v5((uint64_t)v47, v10);
  uint64_t v23 = *((void *)this + 9);
  int v22 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v45 = v23;
  if (!v22 || (int v24 = std::__shared_weak_count::lock(v22), (v46 = v24) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v25 = v24;
  CFTypeRef v40 = (char *)this + 320;
  uint64_t v41 = QMIServiceMsg::create();
  int v42 = 25000;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 1174405120;
  v37[2] = ___ZN5radio20QMICommandDriverBase21dumpLogsIndState_syncEb_block_invoke_2;
  v37[3] = &__block_descriptor_tmp_222;
  v37[4] = this;
  v37[5] = v23;
  CFTypeRef v38 = v25;
  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  char v39 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8DumpLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194660;
  aBlock[4] = v37;
  CFTypeRef v26 = _Block_copy(aBlock);
  uint64_t v44 = v26;
  if (v41)
  {
    qmi::Client::send();
    CFTypeRef v26 = v44;
  }
  if (v26) {
    _Block_release(v26);
  }
  uint64_t v27 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  int v28 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v51);
}

void sub_1B8B8344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v29);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void sub_1B8B83484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1B8B83498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t ___ZN5radio20QMICommandDriverBase21dumpLogsIndState_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN5radio20QMICommandDriverBase21dumpLogsIndState_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a2 + 4)) {
      int v5 = "Failure";
    }
    else {
      int v5 = "Success";
    }
    uint64_t v6 = "Enable";
    if (!*(unsigned char *)(a1 + 56)) {
      uint64_t v6 = "Disable";
    }
    int v7 = 136315394;
    uint64_t v8 = v5;
    __int16 v9 = 2080;
    uint64_t v10 = v6;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s DumpLogs indication", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void radio::QMICommandDriverBase::enableDumpLogsInd(radio::QMICommandDriverBase *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio20QMICommandDriverBase17enableDumpLogsIndEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_223;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio20QMICommandDriverBase17enableDumpLogsIndEv_block_invoke(uint64_t a1)
{
}

void radio::QMICommandDriverBase::disableDumpLogsInd(radio::QMICommandDriverBase *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio20QMICommandDriverBase18disableDumpLogsIndEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_224;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio20QMICommandDriverBase18disableDumpLogsIndEv_block_invoke(uint64_t a1)
{
}

void radio::QMICommandDriverBase::simTestCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  int v5 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (uint64_t v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1174405120;
  void v14[2] = ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_231;
  v14[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v12 = *(void **)a3;
  if (*(void *)a3) {
    int v12 = _Block_copy(v12);
  }
  uint64_t v13 = *(NSObject **)(a3 + 8);
  aBlock = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  uint64_t v18 = v7;
  int v19 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v14);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1B8B838D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    if (*(void *)(a1 + 48))
    {
LABEL_3:
      uint64_t v2 = *(void *)(a1 + 32);
      unsigned int v3 = (_OWORD *)(a1 + 40);
      *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v4;
      long long v53 = v4;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      v48[0] = MEMORY[0x1E4F143A8];
      v48[1] = 1174405120;
      uint64_t v49 = ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke_2;
      char v50 = &__block_descriptor_tmp_227;
      if (*(char *)(a1 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *v3;
        v51.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
      }
      uint64_t v37 = v2;
      int v5 = (char *)__p[1];
      uint64_t v6 = (char *)v53;
      uint64_t v7 = (const void **)__p[1];
      if (__p[1] != (void *)v53)
      {
        uint64_t v7 = (const void **)__p[1];
        while (*((unsigned char *)*v7 + 8) != 1)
        {
          if (++v7 == (const void **)v53) {
            goto LABEL_16;
          }
        }
      }
      if (v7 != (const void **)v53)
      {
        if (!v8) {
          __cxa_bad_cast();
        }
        __int16 v9 = (char **)(v8 + 16);
        goto LABEL_43;
      }
LABEL_16:
      uint64_t v10 = operator new(0x28uLL);
      uint64_t v11 = v10;
      v10[8] = 1;
      *(void *)uint64_t v10 = &unk_1F1263CB8;
      *((void *)v10 + 2) = 0;
      __int16 v9 = (char **)(v10 + 16);
      *((void *)v10 + 3) = 0;
      *((void *)v10 + 4) = 0;
      if ((unint64_t)v6 < *((void *)&v53 + 1))
      {
        *(void *)uint64_t v6 = v10;
        *(void *)&long long v53 = v6 + 8;
LABEL_43:
        v49((char *)v48, v9);
        CFTypeRef cf = (CFTypeRef)(v37 + 320);
        uint64_t v44 = QMIServiceMsg::create();
        int v45 = 25000;
        uint64_t v46 = 0;
        int v47 = 0;
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 1174405120;
        v38[2] = ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke_228;
        v38[3] = &__block_descriptor_tmp_230;
        uint64_t v32 = *(void *)(a1 + 80);
        CFTypeRef v31 = *(std::__shared_weak_count **)(a1 + 88);
        v38[4] = v37;
        void v38[5] = v32;
        char v39 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(char *)(a1 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *v3;
          v40.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
        }
        CFTypeRef v33 = *(void **)(a1 + 64);
        if (v33) {
          CFTypeRef v33 = _Block_copy(v33);
        }
        uint64_t v34 = *(NSObject **)(a1 + 72);
        uint64_t v41 = v33;
        dispatch_object_t object = v34;
        if (v34) {
          dispatch_retain(v34);
        }
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v57 = 0x40000000;
        uint64_t v58 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendTestCommand8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        uint64_t v59 = &unk_1E6194688;
        CFTypeRef v60 = v38;
        long long v35 = _Block_copy(&aBlock);
        int v47 = v35;
        if (v44)
        {
          qmi::Client::send();
          long long v35 = v47;
        }
        if (v35) {
          _Block_release(v35);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v41) {
          _Block_release(v41);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        if (v39) {
          std::__shared_weak_count::__release_weak(v39);
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        return;
      }
      int64_t v12 = v6 - v5;
      uint64_t v13 = (v6 - v5) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = *((void *)&v53 + 1) - (void)v5;
      if ((uint64_t)(*((void *)&v53 + 1) - (void)v5) >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v17 = operator new(8 * v16);
        uint64_t v18 = &v17[8 * v13];
        int v19 = &v17[8 * v16];
        *uint64_t v18 = v11;
        uint64_t v20 = (uint64_t)(v18 + 1);
        if (v5 != v6)
        {
LABEL_27:
          if ((unint64_t)(v12 - 8) < 0x58) {
            goto LABEL_86;
          }
          if ((unint64_t)(v5 - v17) < 0x20) {
            goto LABEL_86;
          }
          unint64_t v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
          uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v23 = &v6[-v22];
          uint64_t v18 = (void *)((char *)v18 - v22);
          int v24 = &v17[8 * v13 - 16];
          uint64_t v25 = v6 - 16;
          uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *int v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          uint64_t v6 = v23;
          if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_86:
            do
            {
              uint64_t v28 = *((void *)v6 - 1);
              v6 -= 8;
              *--uint64_t v18 = v28;
            }
            while (v6 != v5);
          }
          int v5 = (char *)__p[1];
          __p[1] = v18;
          *(void *)&long long v53 = v20;
          *((void *)&v53 + 1) = v19;
          if (!v5) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = (void *)(8 * v13);
        int v19 = 0;
        *(void *)(8 * v13) = v11;
        uint64_t v20 = 8 * v13 + 8;
        if (v5 != v6) {
          goto LABEL_27;
        }
      }
      __p[1] = v18;
      *(void *)&long long v53 = v20;
      *((void *)&v53 + 1) = v19;
      if (!v5)
      {
LABEL_42:
        *(void *)&long long v53 = v20;
        goto LABEL_43;
      }
LABEL_41:
      operator delete(v5);
      goto LABEL_42;
    }
  }
  else if (*(unsigned char *)(a1 + 63))
  {
    goto LABEL_3;
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  uint64_t v54 = (char *)operator new(0x20uLL);
  long long v55 = xmmword_1B8C2EF50;
  strcpy(v54, "Invalid SIM test command");
  CreateError();
  operator delete(v54);
  if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
  {
    CFRetain(cf);
    uint64_t v29 = *(const void **)(a1 + 64);
    if (v29) {
      uint64_t v30 = _Block_copy(v29);
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v36 = *(NSObject **)(a1 + 72);
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v57 = 1174405120;
    uint64_t v58 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    uint64_t v59 = &__block_descriptor_tmp_342;
    if (v30)
    {
      CFTypeRef v60 = _Block_copy(v30);
      CFTypeRef v61 = cf;
    }
    else
    {
      CFTypeRef v60 = 0;
      CFTypeRef v61 = cf;
    }
    CFRetain(cf);
    CFTypeRef v62 = 0;
    dispatch_async(v36, &aBlock);
    if (v62) {
      CFRelease(v62);
    }
    if (v61) {
      CFRelease(v61);
    }
    if (v60) {
      _Block_release(v60);
    }
    if (v30) {
      _Block_release(v30);
    }
    CFRelease(cf);
  }
  CFRelease(cf);
}

void sub_1B8B83F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a26);
  if (a40 < 0) {
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a41);
  _Unwind_Resume(a1);
}

char *___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke_2(char *result, char **a2)
{
  if (result[55] < 0)
  {
    unsigned int v3 = (char *)*((void *)result + 4);
    size_t v4 = *((void *)result + 5);
    int v5 = &v3[v4];
    unint64_t v6 = (unint64_t)a2[2];
    uint64_t v7 = *a2;
    if (v6 - (unint64_t)*a2 < v4)
    {
LABEL_3:
      if (v7)
      {
        a2[1] = v7;
        operator delete(v7);
        unint64_t v6 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v4 & 0x8000000000000000) != 0) {
        goto LABEL_39;
      }
      uint64_t v8 = 2 * v6;
      if (2 * v6 <= v4) {
        uint64_t v8 = v4;
      }
      size_t v9 = v6 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v8;
      if ((v9 & 0x8000000000000000) != 0) {
LABEL_39:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      CFTypeRef result = (char *)operator new(v9);
      *a2 = result;
      a2[1] = result;
      a2[2] = &result[v9];
      if (v4 < 0x20 || (unint64_t)(result - v3) < 0x20)
      {
        uint64_t v10 = v3;
        uint64_t v11 = result;
      }
      else
      {
        uint64_t v10 = &v3[v4 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v11 = &result[v4 & 0xFFFFFFFFFFFFFFE0];
        int64_t v12 = result + 16;
        uint64_t v13 = (long long *)(v3 + 16);
        unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v15 = *v13;
          *(v12 - 1) = *(v13 - 1);
          *int64_t v12 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 32;
        }
        while (v14);
        if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_28;
        }
      }
      do
      {
        char v22 = *v10++;
        *v11++ = v22;
      }
      while (v10 != v5);
LABEL_28:
      a2[1] = v11;
      return result;
    }
  }
  else
  {
    unsigned int v3 = result + 32;
    size_t v4 = result[55];
    int v5 = &result[v4 + 32];
    unint64_t v6 = (unint64_t)a2[2];
    uint64_t v7 = *a2;
    if (v6 - (unint64_t)*a2 < v4) {
      goto LABEL_3;
    }
  }
  unint64_t v16 = a2[1];
  size_t v17 = v16 - v7;
  if (v16 - v7 >= v4)
  {
    if (v4) {
      CFTypeRef result = (char *)memmove(v7, v3, v4);
    }
    unint64_t v21 = &v7[v4];
    goto LABEL_38;
  }
  uint64_t v18 = &v3[v17];
  if (v16 == v7)
  {
    int v19 = v7;
    uint64_t v20 = v7;
    if (v18 == v5) {
      goto LABEL_37;
    }
  }
  else
  {
    CFTypeRef result = (char *)memmove(v7, v3, v17);
    int v19 = a2[1];
    uint64_t v20 = v19;
    if (v18 == v5) {
      goto LABEL_37;
    }
  }
  unint64_t v23 = &v7[v4] - v16;
  if (v23 >= 0x20)
  {
    uint64_t v20 = v19;
    if (&v19[v7 - &v16[(void)v3]] >= (char *)0x20)
    {
      v18 += v23 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v20 = &v19[v23 & 0xFFFFFFFFFFFFFFE0];
      int v24 = v19 + 16;
      uint64_t v25 = &v3[v16 - v7 + 16];
      unint64_t v26 = v23 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *(v24 - 1) = *((_OWORD *)v25 - 1);
        *int v24 = v27;
        v24 += 2;
        v25 += 32;
        v26 -= 32;
      }
      while (v26);
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    uint64_t v20 = v19;
  }
  do
  {
    char v28 = *v18++;
    *v20++ = v28;
  }
  while (v18 != v5);
LABEL_37:
  unint64_t v21 = v20;
LABEL_38:
  a2[1] = v21;
  return result;
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke_228(uint64_t a1, const qmi::ResponseBase *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v25 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (!*(void *)(a1 + 40))
      {
LABEL_57:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      int v8 = *(char *)(a1 + 79);
      if (v8 >= 0) {
        size_t v9 = *(unsigned __int8 *)(a1 + 79);
      }
      else {
        size_t v9 = *(void *)(a1 + 64);
      }
      unint64_t v10 = v9 + 26;
      memset(__p, 170, 24);
      if (v9 + 26 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = (void *)(a1 + 56);
      if (v10 > 0x16)
      {
        uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v13 = v10 | 7;
        }
        *(void *)&__p[8] = v9 + 26;
        *(void *)&__p[16] = (v13 + 1) | 0x8000000000000000;
        *(void *)std::string __p = operator new(v13 + 1);
        qmemcpy(*(void **)__p, "sending SIM test command: ", 26);
        int64_t v12 = (unsigned char *)(*(void *)__p + 26);
        if (!v9)
        {
LABEL_17:
          v12[v9] = 0;
          if (__p[23] >= 0) {
            long long v15 = __p;
          }
          else {
            long long v15 = *(const char **)__p;
          }
          radio::QMICommandDriverBase::checkError(v5, a2, v15, &cf);
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (cf) {
              size_t v17 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              size_t v17 = 0;
            }
            if (v17) {
              goto LABEL_34;
            }
          }
          else
          {
            if (cf) {
              unint64_t v16 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              unint64_t v16 = 0;
            }
            if (v16) {
              goto LABEL_34;
            }
          }
          uint64_t v18 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a1 + 79) < 0) {
              uint64_t v11 = (void *)*v11;
            }
            *(_DWORD *)std::string __p = 136315138;
            *(void *)&__p[4] = v11;
            _os_log_impl(&dword_1B8B00000, v18, OS_LOG_TYPE_DEFAULT, "#I SIM test command: %s successful", __p, 0xCu);
          }
LABEL_34:
          int v19 = *(const void **)(a1 + 80);
          if (!v19 || !*(void *)(a1 + 88))
          {
LABEL_55:
            if (cf) {
              CFRelease(cf);
            }
            goto LABEL_57;
          }
          CFTypeRef v20 = cf;
          if (cf && (CFRetain(cf), (int v19 = *(const void **)(a1 + 80)) == 0)) {
            unint64_t v21 = 0;
          }
          else {
            unint64_t v21 = _Block_copy(v19);
          }
          char v22 = *(NSObject **)(a1 + 88);
          *(void *)std::string __p = MEMORY[0x1E4F143A8];
          *(void *)&__p[8] = 1174405120;
          *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
          *(void *)&__p[24] = &__block_descriptor_tmp_342;
          if (v21)
          {
            uint64_t aBlock = _Block_copy(v21);
            CFTypeRef v28 = v20;
            if (!v20) {
              goto LABEL_45;
            }
          }
          else
          {
            uint64_t aBlock = 0;
            CFTypeRef v28 = v20;
            if (!v20)
            {
LABEL_45:
              CFTypeRef v29 = 0;
              dispatch_async(v22, __p);
              if (v29) {
                CFRelease(v29);
              }
              if (v28) {
                CFRelease(v28);
              }
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (v21) {
                _Block_release(v21);
              }
              if (v20) {
                CFRelease(v20);
              }
              goto LABEL_55;
            }
          }
          CFRetain(v20);
          goto LABEL_45;
        }
      }
      else
      {
        qmemcpy(__p, "sending SIM test command: ", 26);
        int64_t v12 = &__p[26];
      }
      if (v8 >= 0) {
        unint64_t v14 = (void *)(a1 + 56);
      }
      else {
        unint64_t v14 = (void *)*v11;
      }
      memmove(v12, v14, v9);
      goto LABEL_17;
    }
  }
}

void sub_1B8B845E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = *(void **)(a2 + 80);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  int v8 = *(NSObject **)(a2 + 88);
  a1[10] = v7;
  a1[11] = v8;
  if (v8)
  {
    dispatch_retain(v8);
  }
}

void sub_1B8B846E8(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 80);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v4) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v4);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::string *)(a1 + 5);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    long long v6 = *(void **)(a2 + 64);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  long long v6 = *(void **)(a2 + 64);
  if (v6) {
LABEL_5:
  }
    long long v6 = _Block_copy(v6);
LABEL_6:
  uint64_t v7 = *(NSObject **)(a2 + 72);
  a1[8] = v6;
  a1[9] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(NSObject **)(a1 + 72);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_release(v4);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    long long v5 = *(void **)(a1 + 40);
    operator delete(v5);
  }
}

void radio::QMICommandDriverBase::getFirmwareNonce(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    size_t v9 = 0;
    unint64_t v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  size_t v9 = _Block_copy(v8);
  unint64_t v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v14 = v13;
  long long v15 = operator new(0x28uLL);
  *long long v15 = a1;
  v15[1] = v9;
  _OWORD v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  unint64_t v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  void v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::getPkHash(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    size_t v9 = 0;
    unint64_t v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  size_t v9 = _Block_copy(v8);
  unint64_t v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v14 = v13;
  long long v15 = operator new(0x28uLL);
  *long long v15 = a1;
  v15[1] = v9;
  _OWORD v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  unint64_t v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  void v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::getPersParams(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  p_p = operator new(0x20uLL);
  std::string __p = p_p;
  long long v11 = xmmword_1B8C31F50;
  strcpy((char *)p_p, "Unsupported cmd: getPersParams");
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = p_p;
    _os_log_error_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (SHIBYTE(v11) < 0) {
      p_p = __p;
    }
    else {
      p_p = &__p;
    }
  }
  xpc_object_t v6 = xpc_string_create((const char *)p_p);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_object_t v7 = xpc_null_create();
  if (*(void *)a2) {
    uint64_t v8 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v8 = 0;
  }
  size_t v9 = *(NSObject **)(a2 + 8);
  *(void *)&long long block = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  uint64_t v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
  unint64_t v14 = &__block_descriptor_tmp_344;
  if (v8)
  {
    uint64_t aBlock = _Block_copy(v8);
    xpc_object_t v16 = v6;
    if (v6) {
      goto LABEL_9;
    }
LABEL_12:
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t object = v7;
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t aBlock = 0;
  xpc_object_t v16 = v6;
  if (!v6) {
    goto LABEL_12;
  }
LABEL_9:
  xpc_retain(v6);
  xpc_object_t object = v7;
  if (v7)
  {
LABEL_10:
    xpc_retain(v7);
    goto LABEL_14;
  }
LABEL_13:
  xpc_object_t object = xpc_null_create();
LABEL_14:
  dispatch_async(v9, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v8) {
    _Block_release(v8);
  }
  xpc_release(v7);
  xpc_release(v6);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
}

void sub_1B8B84E14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::getFirmwareInfo(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    size_t v9 = 0;
    unint64_t v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  size_t v9 = _Block_copy(v8);
  unint64_t v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v14 = v13;
  long long v15 = operator new(0x28uLL);
  *long long v15 = a1;
  v15[1] = v9;
  _OWORD v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  xpc_object_t v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  void v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

uint64_t radio::QMICommandDriverBase::mapManifestStatus(radio::QMICommandDriverBase *this, int a2)
{
  if (a2 == 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (a2) {
    return v2;
  }
  else {
    return 0;
  }
}

void radio::QMICommandDriverBase::getManifestStatus(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    size_t v9 = 0;
    unint64_t v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  size_t v9 = _Block_copy(v8);
  unint64_t v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v14 = v13;
  long long v15 = operator new(0x28uLL);
  *long long v15 = a1;
  v15[1] = v9;
  _OWORD v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  xpc_object_t v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  void v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::getManifest(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    size_t v9 = 0;
    unint64_t v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  size_t v9 = _Block_copy(v8);
  unint64_t v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v14 = v13;
  long long v15 = operator new(0x28uLL);
  *long long v15 = a1;
  v15[1] = v9;
  _OWORD v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  xpc_object_t v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  void v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::setRegionCode(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    long long v3 = "setRegionCode";
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMICommandDriverBase::screenState(radio::QMICommandDriverBase *this, char a2)
{
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v9 || (v10 = *((void *)this + 9), (long long v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  *(void *)uint64_t v13 = this;
  v13[8] = a2;
  *((void *)v13 + 2) = v5;
  *((void *)v13 + 3) = v7;
  unint64_t v14 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v15 = operator new(0x18uLL);
  *long long v15 = v13;
  v15[1] = v10;
  _OWORD v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::screenState(BOOL)::$_0>(radio::QMICommandDriverBase::screenState(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::screenState(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::screenState(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::forceNetworkSearch(radio::QMICommandDriverBase *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    long long v3 = "forceNetworkSearch";
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMICommandDriverBase::getRFSelfTestNonce(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = operator new(0x28uLL);
  std::string __p = v4;
  long long v12 = xmmword_1B8C31F60;
  strcpy((char *)v4, "Get RF Self Test none: not supported!");
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = v4;
    _os_log_error_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(void *)a2) {
      goto LABEL_24;
    }
  }
  else if (!*(void *)a2)
  {
    goto LABEL_24;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_24;
  }
  if (v12 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v7 = xpc_string_create(p_p);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = xpc_null_create();
  if (*(void *)a2) {
    size_t v9 = _Block_copy(*(const void **)a2);
  }
  else {
    size_t v9 = 0;
  }
  uint64_t v10 = *(NSObject **)(a2 + 8);
  *(void *)&long long block = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  unint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
  long long v15 = &__block_descriptor_tmp_344;
  if (v9)
  {
    uint64_t aBlock = _Block_copy(v9);
    xpc_object_t v17 = v7;
    if (v7) {
      goto LABEL_14;
    }
LABEL_17:
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_15;
    }
LABEL_18:
    xpc_object_t object = xpc_null_create();
    goto LABEL_19;
  }
  uint64_t aBlock = 0;
  xpc_object_t v17 = v7;
  if (!v7) {
    goto LABEL_17;
  }
LABEL_14:
  xpc_retain(v7);
  xpc_object_t object = v8;
  if (!v8) {
    goto LABEL_18;
  }
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
}

void sub_1B8B858DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::setRFSelfTestTicket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0x28uLL);
  strcpy(v5, "Set RF Self Test Ticket: not supported!");
  xpc_object_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = v5;
    _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(void *)a3) {
      goto LABEL_22;
    }
  }
  else if (!*(void *)a3)
  {
    goto LABEL_22;
  }
  if (!*(void *)(a3 + 8)) {
    goto LABEL_22;
  }
  std::string::__init_copy_ctor_external(&__p, v5, 0x27uLL);
  CreateError();
  if (*(void *)a3) {
    xpc_object_t v7 = _Block_copy(*(const void **)a3);
  }
  else {
    xpc_object_t v7 = 0;
  }
  xpc_object_t v8 = *(NSObject **)(a3 + 8);
  *(void *)&long long block = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  unint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  long long v15 = &__block_descriptor_tmp_327;
  if (v7)
  {
    size_t v9 = _Block_copy(v7);
    CFTypeRef v10 = cf;
    uint64_t aBlock = v9;
    CFTypeRef v17 = cf;
    if (!cf) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  CFTypeRef v10 = cf;
  uint64_t aBlock = 0;
  CFTypeRef v17 = cf;
  if (cf) {
LABEL_11:
  }
    CFRetain(v10);
LABEL_12:
  dispatch_async(v8, &block);
  if (v17) {
    CFRelease(v17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_22:
  operator delete(v5);
}

void sub_1B8B85B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::prepareRFSelfTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)operator new(0x38uLL);
  strcpy(v5, "Prepare baseband for RF Self Test: not supported!");
  xpc_object_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = v5;
    _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(void *)a3) {
      goto LABEL_22;
    }
  }
  else if (!*(void *)a3)
  {
    goto LABEL_22;
  }
  if (!*(void *)(a3 + 8)) {
    goto LABEL_22;
  }
  std::string::__init_copy_ctor_external(&__p, v5, 0x31uLL);
  CreateError();
  if (*(void *)a3) {
    xpc_object_t v7 = _Block_copy(*(const void **)a3);
  }
  else {
    xpc_object_t v7 = 0;
  }
  xpc_object_t v8 = *(NSObject **)(a3 + 8);
  *(void *)&long long block = MEMORY[0x1E4F143A8];
  *((void *)&block + 1) = 1174405120;
  unint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  long long v15 = &__block_descriptor_tmp_327;
  if (v7)
  {
    size_t v9 = _Block_copy(v7);
    CFTypeRef v10 = cf;
    uint64_t aBlock = v9;
    CFTypeRef v17 = cf;
    if (!cf) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  CFTypeRef v10 = cf;
  uint64_t aBlock = 0;
  CFTypeRef v17 = cf;
  if (cf) {
LABEL_11:
  }
    CFRetain(v10);
LABEL_12:
  dispatch_async(v8, &block);
  if (v17) {
    CFRelease(v17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_22:
  operator delete(v5);
}

void sub_1B8B85D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::setBreadMode(radio::QMICommandDriverBase *this, char a2)
{
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v9 || (v10 = *((void *)this + 9), (long long v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  *(void *)uint64_t v13 = this;
  v13[8] = a2;
  *((void *)v13 + 2) = v5;
  *((void *)v13 + 3) = v7;
  unint64_t v14 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v15 = operator new(0x18uLL);
  *long long v15 = v13;
  v15[1] = v10;
  _OWORD v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>(radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::setButterMode(radio::QMICommandDriverBase *this, char a2)
{
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  size_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v9 || (v10 = *((void *)this + 9), (long long v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v12 = v11;
  uint64_t v13 = operator new(0x20uLL);
  *(void *)uint64_t v13 = this;
  v13[8] = a2;
  *((void *)v13 + 2) = v5;
  *((void *)v13 + 3) = v7;
  unint64_t v14 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v15 = operator new(0x18uLL);
  *long long v15 = v13;
  v15[1] = v10;
  _OWORD v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>(radio::QMICommandDriverBase::setButterMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::sendVisitInfo(radio::QMICommandDriverBase *this, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v4 || (uint64_t v7 = *((void *)this + 9), (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  long long v11 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v11 || (uint64_t v12 = *((void *)this + 9), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v14 = v13;
  long long v15 = operator new(0x20uLL);
  *long long v15 = this;
  v15[1] = v7;
  _OWORD v15[2] = v9;
  v15[3] = a2 | (unint64_t)(a3 << 32);
  xpc_object_t v16 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  void v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>(radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v9);
}

void *boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F12638A0;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F1263910;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F12638A0;
  int v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F1263910;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1263980;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1263980;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<watchdog *,std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog *)#1},std::allocator<watchdog>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<watchdog *,std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog *)#1},std::allocator<watchdog>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<watchdog *,std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog *)#1},std::allocator<watchdog>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

void std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog*)#1}::operator() const(watchdog*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  if (a1)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
    uint64_t v2 = *(NSObject **)(a1 + 32);
    if (v2) {
      dispatch_release(v2);
    }
    unint64_t v3 = *(NSObject **)(a1 + 24);
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = *(NSObject **)(a1 + 16);
    if (v4) {
      dispatch_release(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete((void *)a1);
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dms3abm11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B86848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8685C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B86888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::cf::insert<__CFString const*,std::string>(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  ctu::cf::convert_copy();
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B86940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B86964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  if (cf) {
    CFRetain(cf);
  }
  xpc_object_t v6 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!a3) {
    xpc_object_t v6 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B86A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    unint64_t v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    int v24 = (uint64_t *)v23[1];
    uint64_t v25 = (uint64_t **)(a1 + 4);
    uint64_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  uint64_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        long long v15 = (uint64_t *)v11;
      }
      else {
        long long v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        xpc_object_t v16 = v10;
      }
      else {
        xpc_object_t v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        long long v15 = (uint64_t *)v11;
        uint64_t v10 = (uint64_t *)v11;
      }
      else
      {
        uint64_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  uint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  CFTypeRef v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    unint64_t v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        unint64_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        CFTypeRef v20 = (uint64_t **)v21;
        unint64_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  unint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    CFTypeRef v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      CFTypeRef v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      CFTypeRef v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      unint64_t v26 = v20;
    }
    if (v29) {
      CFTypeRef v31 = v28;
    }
    else {
      CFTypeRef v20 = v26;
    }
    unint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  int v24 = (uint64_t *)v19[1];
  uint64_t v32 = a1;
  if (v20 != v7) {
    uint64_t v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    uint64_t v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        CFTypeRef v38 = v37;
        uint64_t v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      uint64_t v41 = v10;
      do
      {
        CFTypeRef v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        uint64_t v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      uint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          uint64_t v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          uint64_t v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      uint64_t v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  uint64_t v7 = (uint64_t **)v6;
LABEL_75:
  uint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  *uint64_t v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  uint64_t v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    uint64_t v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  uint64_t v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  int v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    int v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        uint64_t v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 280);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 288);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 288) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 288);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 288) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 284);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          unint64_t v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        CFTypeRef v28 = *(_DWORD **)(v27 + 288);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 288) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              CFTypeRef v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_1B8B8748C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8B874A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8B87680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  void v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  std::string __p = v68;
  uint64_t v71 = 0;
  uint64_t v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    v66 = v7;
    uint64_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    void *v10 = v10;
    v10[1] = v10;
    void v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        _OWORD v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        *int v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *uint64_t v11 = v15;
        uint64_t v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    CFTypeRef v64 = v3;
    v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    void v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      unint64_t v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              CFTypeRef v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              CFTypeRef v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              CFTypeRef v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              CFTypeRef v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              unint64_t v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          unint64_t v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      uint64_t *v66 = (uint64_t)v11;
      v66[1] = 0;
      long long v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      void *v53 = &unk_1F1263A70;
      void v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      long long v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      *long long v55 = (uint64_t)&unk_1F1263A10;
      v55[2] = (uint64_t)v66;
      CFTypeRef v56 = (atomic_uint *)v64[1];
      *CFTypeRef v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            int v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            void v47[2] = v43;
            void *v42 = v47;
            uint64_t v49 = (void *)**v17;
            if (v49)
            {
              _DWORD *v17 = v49;
              int v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      char v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          std::string v51 = v50;
          char v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          std::string v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  uint64_t v57 = (uint64_t **)*v3;
  uint64_t v58 = (uint64_t *)**v3;
  uint64_t v59 = (uint64_t *)v58[1];
  CFTypeRef v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        uint64_t v59 = (uint64_t *)v59[1];
        CFTypeRef v67 = v59;
        uint64_t v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      uint64_t v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      uint64_t v57 = (uint64_t **)*v3;
      CFTypeRef v67 = v59;
      uint64_t v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  CFTypeRef v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      CFTypeRef v62 = (char *)__p + 16 * v71;
      do
      {
        uint64_t v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8B87D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8B8878C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm11DumpLogsInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B88944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B88958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B88984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingModeReporting>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingModeReporting>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingModeReporting>::clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)CFTypeRef result = &unk_1F1263AE8;
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B88A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingMode>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingMode>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingMode>::clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)CFTypeRef result = &unk_1F1263B68;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16SetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B88BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B88BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B88C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1(uint64_t a1)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16GetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B88D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B88D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B88D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18ReleaseResetDetect8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B88E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B88E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B88E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EraseMask>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EraseMask>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EraseMask>::clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)CFTypeRef result = &unk_1F1263BE8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13EraseSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B88FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B88FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B89014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21RestoreCarrierNVItems8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B890F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B89104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B89130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void sub_1B8B891F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B89214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm15GetBasebandTime8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B892F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B89304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B89330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetBasebandStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B89420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm20GetBasebandFWVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B89528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B89568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm27GetFactoryCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B89644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B89658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B89684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::cf::insert<__CFString const*,unsigned short>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B89738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B8975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B8980C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B89830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22GetRFCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8990C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B89920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8994C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::abm::WakeBuffer,void({block_pointer}&)(bsp::tlv::abm::WakeBuffer const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    std::string __p = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, (char *)result, (char *)(result + v5), v5);
    (*(void (**)(void))(*(void *)a3 + 16))();
    if (__p)
    {
      uint64_t v7 = __p;
      operator delete(__p);
    }
    return 1;
  }
  return result;
}

void sub_1B8B89A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8B89A50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B899DCLL);
  }
  JUMPOUT(0x1B8B899D4);
}

void sub_1B8B89A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1B8B89A48);
  }
  JUMPOUT(0x1B8B89A40);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<bsp::abm::GetWakeReason::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B8B89AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<bsp::abm::GetWakeReason::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, (QMIServiceMsg *)a1);
    qmi::ResponseBase::ResponseBase(a2, __p[0]);
    qmi::MessageBase::validateMsgId(a2);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    uint64_t v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId(v4);
  }
}

void sub_1B8B89B88(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B89B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  qmi::MessageBase::~MessageBase(v11);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DumpLogsState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DumpLogsState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DumpLogsState>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)uint64_t result = &unk_1F1263C38;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8DumpLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B89D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B89D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B89D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0(uint64_t a1)
{
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1263CB8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1263CB8;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::getSize(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 3;
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::write(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *a2;
  uint64_t v6 = (char *)(*a2 + 3);
  *a2 = v6;
  uint64_t result = memcpy(v6, *(const void **)(a1 + 16), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  uint64_t v8 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  *a2 = &v6[v8];
  *(unsigned char *)uint64_t v5 = v4;
  *(_WORD *)(v5 + 1) = v8;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F1263CB8;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  char v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    uint64_t v7 = &v6[v5];
    *((void *)v2 + 4) = &v6[v5];
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B8B89F60(_Unwind_Exception *a1)
{
  char v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendTestCommand8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8A04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8A060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8A08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0(uint64_t a1)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  uint64_t v17 = v3 + 320;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_352;
  v13[4] = v3;
  v13[5] = v2[3];
  size_t v5 = (std::__shared_weak_count *)v2[4];
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)v2[1];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  int v15 = v6;
  uint64_t v7 = v2[2];
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8GetNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194700;
  aBlock[4] = v13;
  uint64_t v8 = _Block_copy(aBlock);
  unint64_t v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    uint64_t v8 = v21;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  CFNumberRef v9 = (std::__shared_weak_count *)v2[4];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  BOOL v10 = v2[2];
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = (const void *)v2[1];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  uint64_t v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1B8B8A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  uint64_t v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    uint64_t v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      CFTypeRef v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        BOOL v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v27 = v24[2];
    if (!v27) {
      goto LABEL_13;
    }
  }
  dispatch_release(v27);
  CFTypeRef v28 = (const void *)v24[1];
  if (!v28) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    long long v38 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (!a1[5])
      {
LABEL_53:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      if (*((_DWORD *)a2 + 1))
      {
        std::string __p = 0;
        uint64_t p_p = (uint64_t)&__p;
        uint64_t v41 = 0x2000000000;
        LOWORD(v42) = 0;
        v29[0] = MEMORY[0x1E4F143A8];
        v29[1] = 0x40000000;
        uint64_t v30 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
        CFTypeRef v31 = &unk_1E61946D8;
        long long v32 = &__p;
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        BOOL v10 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)2);
          LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v10;
          v30((uint64_t)v29, &block);
        }
        memset(v28, 170, sizeof(v28));
        ctu::hex((ctu *)*(unsigned __int16 *)(p_p + 24));
        uint64_t v11 = std::string::insert(&block, 0, "Failed to get Nonce: BBSecurityStatus: 0x", 0x29uLL);
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v28[2] = (void *)v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)CFTypeRef v28 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(block.__r_.__value_.__l.__data_);
        }
        uint64_t v13 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = v28;
          if (SHIBYTE(v28[2]) < 0) {
            uint64_t v27 = (void **)v28[0];
          }
          LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
          _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
        }
        if (SHIBYTE(v28[2]) >= 0) {
          uint64_t v14 = v28;
        }
        else {
          uint64_t v14 = (void **)v28[0];
        }
        xpc_object_t v15 = xpc_string_create((const char *)v14);
        if (!v15) {
          xpc_object_t v15 = xpc_null_create();
        }
        xpc_object_t v16 = xpc_null_create();
        uint64_t v17 = (const void *)a1[7];
        if (v17) {
          uint64_t v18 = _Block_copy(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        long long v25 = a1[8];
        block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
        int v47 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_344;
        if (v18)
        {
          long long v48 = _Block_copy(v18);
          xpc_object_t v49 = v15;
          if (v15) {
            goto LABEL_27;
          }
        }
        else
        {
          long long v48 = 0;
          xpc_object_t v49 = v15;
          if (v15)
          {
LABEL_27:
            xpc_retain(v15);
            xpc_object_t v50 = v16;
            if (v16)
            {
LABEL_28:
              xpc_retain(v16);
LABEL_32:
              dispatch_async(v25, &block);
              xpc_release(v50);
              xpc_object_t v50 = 0;
              xpc_release(v49);
              xpc_object_t v49 = 0;
              if (v48) {
                _Block_release(v48);
              }
              if (v18) {
                _Block_release(v18);
              }
              xpc_release(v16);
              xpc_release(v15);
              if (SHIBYTE(v28[2]) < 0) {
                operator delete(v28[0]);
              }
              _Block_object_dispose(&__p, 8);
              goto LABEL_53;
            }
LABEL_31:
            xpc_object_t v50 = xpc_null_create();
            goto LABEL_32;
          }
        }
        xpc_object_t v49 = xpc_null_create();
        xpc_object_t v50 = v16;
        if (v16) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
      block.__r_.__value_.__r.__words[0] = 0;
      block.__r_.__value_.__l.__size_ = (std::string::size_type)&block;
      block.__r_.__value_.__r.__words[2] = 0x4002000000;
      int v47 = __Block_byref_object_copy__345;
      long long v48 = __Block_byref_object_dispose__346;
      xpc_object_t v49 = 0;
      xpc_object_t v50 = 0;
      uint64_t v51 = 0;
      v33[0] = MEMORY[0x1E4F143A8];
      v33[1] = 0x40000000;
      int v34 = ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_347;
      long long v35 = &unk_1E61946B0;
      p_std::string block = &block;
      int v19 = (char *)qmi::MessageBase::findTlvValue(a2);
      if (v19)
      {
        std::string __p = 0;
        uint64_t p_p = 0;
        uint64_t v41 = 0;
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v19, &v19[v20], v20);
        v34((uint64_t)v33, (char **)&__p);
        if (__p)
        {
          uint64_t p_p = (uint64_t)__p;
          operator delete(__p);
        }
      }
      xpc_object_t v21 = xpc_null_create();
      xpc_object_t v22 = xpc_data_create(*(const void **)(block.__r_.__value_.__l.__size_ + 40), *(void *)(block.__r_.__value_.__l.__size_ + 48) - *(void *)(block.__r_.__value_.__l.__size_ + 40));
      if (!v22) {
        xpc_object_t v22 = xpc_null_create();
      }
      uint64_t v23 = (const void *)a1[7];
      if (v23) {
        uint64_t v24 = _Block_copy(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v26 = a1[8];
      std::string __p = (void *)MEMORY[0x1E4F143A8];
      uint64_t p_p = 1174405120;
      uint64_t v41 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke_0;
      long long v42 = &__block_descriptor_tmp_354;
      if (v24)
      {
        uint64_t aBlock = _Block_copy(v24);
        xpc_object_t v44 = v21;
        if (v21) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t aBlock = 0;
        xpc_object_t v44 = v21;
        if (v21)
        {
LABEL_42:
          xpc_retain(v21);
          xpc_object_t object = v22;
          if (v22)
          {
LABEL_43:
            xpc_retain(v22);
LABEL_47:
            dispatch_async(v26, &__p);
            xpc_release(object);
            xpc_object_t object = 0;
            xpc_release(v44);
            xpc_object_t v44 = 0;
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v24) {
              _Block_release(v24);
            }
            xpc_release(v22);
            xpc_release(v21);
            _Block_object_dispose(&block, 8);
            if (v49)
            {
              xpc_object_t v50 = v49;
              operator delete(v49);
            }
            goto LABEL_53;
          }
LABEL_46:
          xpc_object_t object = xpc_null_create();
          goto LABEL_47;
        }
      }
      xpc_object_t v44 = xpc_null_create();
      xpc_object_t object = v22;
      if (v22) {
        goto LABEL_43;
      }
      goto LABEL_46;
    }
  }
}

void sub_1B8B8A9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__345(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__346(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_347(uint64_t a1, char **a2)
{
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a2, a2[1], a2[1] - *a2);
}

uint64_t ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8GetNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8AD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8AD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8AD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke_0(uint64_t a1)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  uint64_t v17 = v3 + 320;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  xpc_object_t v21 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_360;
  v13[4] = v3;
  v13[5] = v2[3];
  uint64_t v5 = (std::__shared_weak_count *)v2[4];
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)v2[1];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  xpc_object_t v15 = v6;
  uint64_t v7 = v2[2];
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9GetPKHash8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194778;
  aBlock[4] = v13;
  uint64_t v8 = _Block_copy(aBlock);
  xpc_object_t v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    uint64_t v8 = v21;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  int v9 = (std::__shared_weak_count *)v2[4];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  BOOL v10 = v2[2];
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = (const void *)v2[1];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  long long v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1B8B8AF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  uint64_t v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    uint64_t v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      CFTypeRef v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        BOOL v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v27 = v24[2];
    if (!v27) {
      goto LABEL_13;
    }
  }
  dispatch_release(v27);
  CFTypeRef v28 = (const void *)v24[1];
  if (!v28) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  int v45 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5])
  {
LABEL_62:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  if (*((_DWORD *)a2 + 1))
  {
    std::string __p = 0;
    uint64_t p_p = (uint64_t)&__p;
    uint64_t v48 = 0x2000000000;
    LOWORD(v49) = 0;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 0x40000000;
    long long v37 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
    long long v38 = &unk_1E6194750;
    int v39 = &__p;
    uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    BOOL v10 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)2);
      LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v10;
      v37((uint64_t)v36, &block);
    }
    memset(v35, 170, sizeof(v35));
    ctu::hex((ctu *)*(unsigned __int16 *)(p_p + 24));
    uint64_t v11 = std::string::insert(&block, 0, "Failed to get PK hash: BBSecurityStatus: 0x", 0x2BuLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v35[2] = (void *)v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v35 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(block.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v34 = v35;
      if (SHIBYTE(v35[2]) < 0) {
        int v34 = (void **)v35[0];
      }
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
      _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    xpc_object_t v14 = xpc_int64_create(*(unsigned __int16 *)(p_p + 24));
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = (const void *)a1[7];
    if (v16) {
      uint64_t v17 = _Block_copy(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v24 = a1[8];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    uint64_t v54 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_344;
    if (v17)
    {
      long long v55 = _Block_copy(v17);
      xpc_object_t v56 = v14;
      if (v14) {
        goto LABEL_25;
      }
    }
    else
    {
      long long v55 = 0;
      xpc_object_t v56 = v14;
      if (v14)
      {
LABEL_25:
        xpc_retain(v14);
        xpc_object_t v57 = v15;
        if (v15)
        {
LABEL_26:
          xpc_retain(v15);
LABEL_30:
          dispatch_async(v24, &block);
          xpc_release(v57);
          xpc_object_t v57 = 0;
          xpc_release(v56);
          xpc_object_t v56 = 0;
          if (v55) {
            _Block_release(v55);
          }
          if (v17) {
            _Block_release(v17);
          }
          xpc_release(v15);
          xpc_release(v14);
          if (SHIBYTE(v35[2]) < 0) {
            operator delete(v35[0]);
          }
          _Block_object_dispose(&__p, 8);
          goto LABEL_62;
        }
LABEL_29:
        xpc_object_t v57 = xpc_null_create();
        goto LABEL_30;
      }
    }
    xpc_object_t v56 = xpc_null_create();
    xpc_object_t v57 = v15;
    if (v15) {
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  block.__r_.__value_.__r.__words[0] = 0;
  block.__r_.__value_.__l.__size_ = (std::string::size_type)&block;
  block.__r_.__value_.__r.__words[2] = 0x4002000000;
  uint64_t v54 = __Block_byref_object_copy__345;
  long long v55 = __Block_byref_object_dispose__346;
  xpc_object_t v56 = 0;
  xpc_object_t v57 = 0;
  uint64_t v58 = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 0x40000000;
  uint64_t v41 = ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  long long v42 = &unk_1E6194728;
  p_std::string block = &block;
  uint64_t v18 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v18)
  {
    std::string __p = 0;
    uint64_t p_p = 0;
    uint64_t v48 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v18, &v18[v19], v19);
    v41((uint64_t)v40, (char **)&__p);
    if (__p)
    {
      uint64_t p_p = (uint64_t)__p;
      operator delete(__p);
    }
  }
  uint64_t v20 = *(unsigned int **)(block.__r_.__value_.__l.__size_ + 40);
  if (*(void *)(block.__r_.__value_.__l.__size_ + 48) - (void)v20 < 4uLL) {
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v21 = *v20;
  xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1BA9C88F0](v22) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v22);
      xpc_object_t v23 = v22;
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v22 = 0;
  }
  xpc_release(v22);
  xpc_object_t v25 = xpc_data_create(*(const void **)(block.__r_.__value_.__l.__size_ + 40), *(void *)(block.__r_.__value_.__l.__size_ + 48) - *(void *)(block.__r_.__value_.__l.__size_ + 40));
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4FB9A60], v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  xpc_object_t v27 = xpc_int64_create(bswap32(v21));
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E4FB9A50], v27);
  xpc_object_t v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  xpc_object_t v29 = xpc_null_create();
  if (v23)
  {
    xpc_retain(v23);
    xpc_object_t v30 = v23;
    CFTypeRef v31 = (const void *)a1[7];
    if (v31)
    {
LABEL_45:
      long long v32 = _Block_copy(v31);
      goto LABEL_48;
    }
  }
  else
  {
    xpc_object_t v30 = xpc_null_create();
    CFTypeRef v31 = (const void *)a1[7];
    if (v31) {
      goto LABEL_45;
    }
  }
  long long v32 = 0;
LABEL_48:
  long long v33 = a1[8];
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  uint64_t p_p = 1174405120;
  uint64_t v48 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  xpc_object_t v49 = &__block_descriptor_tmp_362;
  if (v32)
  {
    uint64_t aBlock = _Block_copy(v32);
    xpc_object_t v51 = v29;
    if (v29) {
      goto LABEL_50;
    }
LABEL_53:
    xpc_object_t v51 = xpc_null_create();
    xpc_object_t object = v30;
    if (v30) {
      goto LABEL_51;
    }
    goto LABEL_54;
  }
  uint64_t aBlock = 0;
  xpc_object_t v51 = v29;
  if (!v29) {
    goto LABEL_53;
  }
LABEL_50:
  xpc_retain(v29);
  xpc_object_t object = v30;
  if (v30)
  {
LABEL_51:
    xpc_retain(v30);
    goto LABEL_55;
  }
LABEL_54:
  xpc_object_t object = xpc_null_create();
LABEL_55:
  dispatch_async(v33, &__p);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v51);
  xpc_object_t v51 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v32) {
    _Block_release(v32);
  }
  xpc_release(v30);
  xpc_release(v29);
  xpc_release(v23);
  _Block_object_dispose(&block, 8);
  if (v56)
  {
    xpc_object_t v57 = v56;
    operator delete(v56);
  }
  uint64_t v7 = v45;
  if (v45) {
    goto LABEL_62;
  }
}

void sub_1B8B8B794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t a1, char **a2)
{
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a2, a2[1], a2[1] - *a2);
}

uint64_t ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9GetPKHash8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8BA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8BA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8BA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]()
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  xpc_object_t v6 = v2;
  if (!v2)
  {
    xpc_object_t v6 = xpc_null_create();
    long long v4 = (void *)a1[6];
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v2);
  long long v4 = (void *)a1[6];
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v4);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v3 + 16))(v3, &v6, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v6);
}

void sub_1B8B8BB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  long long v4 = (const void *)a2[4];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    xpc_object_t v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    a1[5] = xpc_null_create();
    uint64_t v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
    goto LABEL_7;
  }
  xpc_object_t v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v6);
  uint64_t v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
LABEL_7:
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  uint64_t v17 = v3 + 320;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_369;
  v13[4] = v3;
  v13[5] = v2[3];
  uint64_t v5 = (std::__shared_weak_count *)v2[4];
  xpc_object_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = (void *)v2[1];
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  xpc_object_t v15 = v6;
  uint64_t v7 = v2[2];
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61947F0;
  aBlock[4] = v13;
  uint64_t v8 = _Block_copy(aBlock);
  unsigned int v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    uint64_t v8 = v21;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  int v9 = (std::__shared_weak_count *)v2[4];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  BOOL v10 = v2[2];
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = (const void *)v2[1];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  long long v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1B8B8BE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  xpc_object_t v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    xpc_object_t v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      xpc_object_t v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        xpc_object_t v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    xpc_object_t v27 = v24[2];
    if (!v27) {
      goto LABEL_13;
    }
  }
  dispatch_release(v27);
  xpc_object_t v28 = (const void *)v24[1];
  if (!v28) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  xpc_object_t v6 = std::__shared_weak_count::lock(v3);
  CFTypeRef v61 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5])
  {
LABEL_61:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  uint64_t v56 = 0;
  xpc_object_t v57 = &v56;
  uint64_t v58 = 0x2000000000;
  int v59 = 0;
  if (*((_DWORD *)a2 + 1))
  {
    uint64_t v52 = 0;
    long long v53 = &v52;
    uint64_t v54 = 0x2000000000;
    LOWORD(v55) = 0;
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 0x40000000;
    xpc_object_t v44 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
    int v45 = &unk_1E61947C8;
    int v46 = &v52;
    uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    BOOL v10 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)2);
      LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v10;
      v44((uint64_t)v43, &block);
    }
    memset(__p, 170, sizeof(__p));
    ctu::hex((ctu *)*((unsigned __int16 *)v53 + 12));
    uint64_t v11 = std::string::insert(&block, 0, "Failed to get firmware information: BBSecurityStatus: 0x", 0x38uLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __p[2] = (void *)v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(block.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = __p;
      if (SHIBYTE(__p[2]) < 0) {
        uint64_t v41 = (void **)__p[0];
      }
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
      _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    xpc_object_t v14 = xpc_int64_create(*((unsigned __int16 *)v53 + 12));
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v16 = (const void *)a1[7];
    if (v16) {
      uint64_t v17 = _Block_copy(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    CFTypeRef v31 = a1[8];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    uint64_t v63 = &__block_descriptor_tmp_344;
    if (v17)
    {
      CFTypeRef v64 = _Block_copy(v17);
      xpc_object_t v65 = v14;
      if (v14) {
        goto LABEL_26;
      }
    }
    else
    {
      CFTypeRef v64 = 0;
      xpc_object_t v65 = v14;
      if (v14)
      {
LABEL_26:
        xpc_retain(v14);
        xpc_object_t v66 = v15;
        if (v15)
        {
LABEL_27:
          xpc_retain(v15);
LABEL_31:
          dispatch_async(v31, &block);
          xpc_release(v66);
          xpc_object_t v66 = 0;
          xpc_release(v65);
          xpc_object_t v65 = 0;
          if (v64) {
            _Block_release(v64);
          }
          if (v17) {
            _Block_release(v17);
          }
          xpc_release(v15);
          xpc_release(v14);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          _Block_object_dispose(&v52, 8);
          _Block_object_dispose(&v56, 8);
          goto LABEL_61;
        }
LABEL_30:
        xpc_object_t v66 = xpc_null_create();
        goto LABEL_31;
      }
    }
    xpc_object_t v65 = xpc_null_create();
    xpc_object_t v66 = v15;
    if (v15) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  uint64_t v52 = 0;
  long long v53 = &v52;
  uint64_t v54 = 0x2000000000;
  int v55 = 0;
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 0x40000000;
  uint64_t v48 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  xpc_object_t v49 = &unk_1E61947A0;
  xpc_object_t v50 = &v52;
  xpc_object_t v51 = &v56;
  uint64_t v18 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v20 = v18;
  if (v18)
  {
    unsigned int v21 = (const unsigned __int8 *)v18 + v19;
    tlv::throwIfNotEnoughBytes(v18, v21, (const unsigned __int8 *)4);
    uint64_t v22 = *(unsigned int *)v20;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)v20 + 4), v21, (const unsigned __int8 *)4);
    block.__r_.__value_.__r.__words[0] = v22 | ((unint64_t)*((unsigned int *)v20 + 1) << 32);
    v48((uint64_t)v47, &block);
  }
  xpc_object_t v23 = v53;
  uint64_t v24 = (char *)operator new(4uLL);
  *(_DWORD *)uint64_t v24 = *((_DWORD *)v23 + 6);
  xpc_object_t v25 = v24 + 1;
  xpc_object_t v26 = v24 + 3;
  do
  {
    char v27 = *(v25 - 1);
    *(v25 - 1) = *v26;
    *v26-- = v27;
  }
  while (v25++ < v26);
  xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
  if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1BA9C88F0](v29) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v29);
      xpc_object_t v30 = v29;
    }
    else
    {
      xpc_object_t v30 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v30 = xpc_null_create();
    xpc_object_t v29 = 0;
  }
  xpc_release(v29);
  xpc_object_t v32 = xpc_int64_create(*((unsigned int *)v57 + 6));
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4FB9A58], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v34 = xpc_data_create(v24, 4uLL);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E4FB9AA8], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  xpc_object_t v36 = xpc_null_create();
  if (v30)
  {
    xpc_retain(v30);
    xpc_object_t v37 = v30;
    long long v38 = (const void *)a1[7];
    if (v38)
    {
LABEL_46:
      int v39 = _Block_copy(v38);
      goto LABEL_49;
    }
  }
  else
  {
    xpc_object_t v37 = xpc_null_create();
    long long v38 = (const void *)a1[7];
    if (v38) {
      goto LABEL_46;
    }
  }
  int v39 = 0;
LABEL_49:
  int v40 = a1[8];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  uint64_t v63 = &__block_descriptor_tmp_362;
  if (v39)
  {
    CFTypeRef v64 = _Block_copy(v39);
    xpc_object_t v65 = v36;
    if (v36) {
      goto LABEL_51;
    }
LABEL_54:
    xpc_object_t v65 = xpc_null_create();
    xpc_object_t v66 = v37;
    if (v37) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  CFTypeRef v64 = 0;
  xpc_object_t v65 = v36;
  if (!v36) {
    goto LABEL_54;
  }
LABEL_51:
  xpc_retain(v36);
  xpc_object_t v66 = v37;
  if (v37)
  {
LABEL_52:
    xpc_retain(v37);
    goto LABEL_56;
  }
LABEL_55:
  xpc_object_t v66 = xpc_null_create();
LABEL_56:
  dispatch_async(v40, &block);
  xpc_release(v66);
  xpc_object_t v66 = 0;
  xpc_release(v65);
  xpc_object_t v65 = 0;
  if (v64) {
    _Block_release(v64);
  }
  if (v39) {
    _Block_release(v39);
  }
  xpc_release(v37);
  xpc_release(v36);
  xpc_release(v30);
  _Block_object_dispose(&v52, 8);
  operator delete(v24);
  uint64_t v7 = v61;
  _Block_object_dispose(&v56, 8);
  if (v7) {
    goto LABEL_61;
  }
}

void sub_1B8B8C660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a2[1];
  return result;
}

uint64_t ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8C8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8C914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  uint64_t v17 = v3 + 320;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_379;
  v13[4] = v3;
  v13[5] = v2[3];
  uint64_t v5 = (std::__shared_weak_count *)v2[4];
  xpc_object_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = (void *)v2[1];
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  xpc_object_t v15 = v6;
  uint64_t v7 = v2[2];
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetManifestStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61948B8;
  aBlock[4] = v13;
  uint64_t v8 = _Block_copy(aBlock);
  unsigned int v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    uint64_t v8 = v21;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  int v9 = (std::__shared_weak_count *)v2[4];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  BOOL v10 = v2[2];
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = (const void *)v2[1];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  long long v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1B8B8CB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  xpc_object_t v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    char v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      xpc_object_t v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        xpc_object_t v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    char v27 = v24[2];
    if (!v27) {
      goto LABEL_13;
    }
  }
  dispatch_release(v27);
  xpc_object_t v28 = (const void *)v24[1];
  if (!v28) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  xpc_object_t v6 = std::__shared_weak_count::lock(v3);
  long long v82 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5])
  {
LABEL_70:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  int v8 = *((_DWORD *)a2 + 1);
  if (v8)
  {
    int v9 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v43 = qmi::asString();
      LODWORD(block) = 67109378;
      HIDWORD(block) = v8;
      LOWORD(v90) = 2080;
      *(void *)((char *)&v90 + 2) = v43;
      _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Error = 0x%x (%s)", (uint8_t *)&block, 0x12u);
    }
    BOOL v10 = (const char *)qmi::asString();
    xpc_object_t v11 = xpc_string_create(v10);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_object_t v12 = xpc_null_create();
    uint64_t v13 = (const void *)a1[7];
    if (v13) {
      xpc_object_t v14 = _Block_copy(v13);
    }
    else {
      xpc_object_t v14 = 0;
    }
    xpc_object_t v25 = a1[8];
    uint64_t block = MEMORY[0x1E4F143A8];
    *(void *)&long long v90 = 1174405120;
    *((void *)&v90 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    long long v91 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_344;
    if (v14)
    {
      long long v92 = _Block_copy(v14);
      xpc_object_t v93 = v11;
      if (v11) {
        goto LABEL_26;
      }
    }
    else
    {
      long long v92 = 0;
      xpc_object_t v93 = v11;
      if (v11)
      {
LABEL_26:
        xpc_retain(v11);
        xpc_object_t v94 = v12;
        if (v12)
        {
LABEL_27:
          xpc_retain(v12);
LABEL_31:
          dispatch_async(v25, &block);
          xpc_release(v94);
          xpc_object_t v94 = 0;
          xpc_release(v93);
          xpc_object_t v93 = 0;
          if (v92) {
            _Block_release(v92);
          }
          if (v14) {
            _Block_release(v14);
          }
          xpc_release(v12);
          xpc_release(v11);
          goto LABEL_70;
        }
LABEL_30:
        xpc_object_t v94 = xpc_null_create();
        goto LABEL_31;
      }
    }
    xpc_object_t v93 = xpc_null_create();
    xpc_object_t v94 = v12;
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  uint64_t v77 = 0;
  CFTypeRef v78 = &v77;
  uint64_t v79 = 0x2000000000;
  char v80 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = &v73;
  uint64_t v75 = 0x2000000000;
  int v76 = 0;
  uint64_t v69 = 0;
  CFTypeRef v70 = &v69;
  uint64_t v71 = 0x2000000000;
  int v72 = 0;
  uint64_t block = 0;
  *(void *)&long long v90 = &block;
  *((void *)&v90 + 1) = 0x4002000000;
  long long v91 = __Block_byref_object_copy__345;
  long long v92 = __Block_byref_object_dispose__346;
  xpc_object_t v93 = 0;
  xpc_object_t v94 = 0;
  uint64_t v95 = 0;
  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 0x40000000;
  CFTypeRef v64 = (uint64_t (*)(uint64_t, long long *))___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  xpc_object_t v65 = &unk_1E6194818;
  uint64_t v67 = &v77;
  uint64_t v68 = v5;
  xpc_object_t v66 = &v73;
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v17 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v16, (const unsigned __int8 *)2);
    LOWORD(v83) = *(_WORD *)v17;
    v64((uint64_t)v63, &v83);
  }
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 0x40000000;
  uint64_t v58 = (uint64_t (*)(uint64_t, long long *))___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
  int v59 = &unk_1E6194840;
  uint64_t v60 = &v69;
  CFTypeRef v61 = &v77;
  uint64_t v62 = v5;
  uint64_t v18 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v20 = v18;
  if (v18)
  {
    tlv::throwIfNotEnoughBytes(v18, (const unsigned __int8 *)v18 + v19, (const unsigned __int8 *)2);
    LOWORD(v83) = *(_WORD *)v20;
    v58((uint64_t)v57, &v83);
  }
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 0x40000000;
  uint64_t v52 = ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_4;
  long long v53 = &unk_1E6194868;
  uint64_t v54 = &v73;
  p_uint64_t block = &block;
  uint64_t v56 = &v77;
  unsigned int v21 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v21)
  {
    long long v83 = 0uLL;
    *(void *)&long long v84 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v83, v21, &v21[v22], v22);
    v52(v51, (char **)&v83);
    if ((void)v83)
    {
      *((void *)&v83 + 1) = v83;
      operator delete((void *)v83);
    }
  }
  if (!*((unsigned char *)v78 + 24))
  {
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 0x40000000;
    int v45 = ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_5;
    int v46 = &unk_1E6194890;
    int v47 = &v73;
    uint64_t v48 = &v69;
    xpc_object_t v49 = &block;
    uint64_t v50 = v5;
    xpc_object_t v26 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    xpc_object_t v28 = v26;
    if (v26)
    {
      int v29 = v27;
      long long v88 = v26;
      *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v83 = v30;
      long long v84 = v30;
      tlv::parseV<bsp::tlv::abm::ManifestStruct>(&v88, v27, (uint64_t)&v83);
      CFTypeRef v31 = v88;
      if (v88) {
        v45(v44, (uint64_t)&v83);
      }
      if (*((void *)&v83 + 1))
      {
        *(void *)&long long v84 = *((void *)&v83 + 1);
        operator delete(*((void **)&v83 + 1));
      }
      if (!v31) {
        ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 1, v28, v29);
      }
    }
  }
  xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
  if (v23 || (xpc_object_t v23 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1BA9C88F0](v23) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v23);
      xpc_object_t v24 = v23;
    }
    else
    {
      xpc_object_t v24 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
    xpc_object_t v23 = 0;
  }
  xpc_release(v23);
  xpc_object_t v32 = xpc_int64_create(*((unsigned int *)v74 + 6));
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4FB9A78], v32);
  xpc_object_t v33 = xpc_null_create();
  xpc_release(v32);
  xpc_release(v33);
  xpc_object_t v34 = xpc_int64_create(*((unsigned int *)v70 + 6));
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4FB9A70], v34);
  xpc_object_t v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  xpc_object_t v36 = xpc_data_create(*(const void **)(v90 + 40), *(void *)(v90 + 48) - *(void *)(v90 + 40));
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E4FB9A68], v36);
  xpc_object_t v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  xpc_object_t v38 = xpc_null_create();
  if (v24)
  {
    xpc_retain(v24);
    xpc_object_t v39 = v24;
    int v40 = (const void *)a1[7];
    if (v40)
    {
LABEL_53:
      uint64_t v41 = _Block_copy(v40);
      goto LABEL_56;
    }
  }
  else
  {
    xpc_object_t v39 = xpc_null_create();
    int v40 = (const void *)a1[7];
    if (v40) {
      goto LABEL_53;
    }
  }
  uint64_t v41 = 0;
LABEL_56:
  long long v42 = a1[8];
  *(void *)&long long v83 = MEMORY[0x1E4F143A8];
  *((void *)&v83 + 1) = 1174405120;
  *(void *)&long long v84 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  *((void *)&v84 + 1) = &__block_descriptor_tmp_362;
  if (v41)
  {
    long long v85 = _Block_copy(v41);
    xpc_object_t v86 = v38;
    if (v38) {
      goto LABEL_58;
    }
LABEL_61:
    xpc_object_t v86 = xpc_null_create();
    xpc_object_t v87 = v39;
    if (v39) {
      goto LABEL_59;
    }
    goto LABEL_62;
  }
  long long v85 = 0;
  xpc_object_t v86 = v38;
  if (!v38) {
    goto LABEL_61;
  }
LABEL_58:
  xpc_retain(v38);
  xpc_object_t v87 = v39;
  if (v39)
  {
LABEL_59:
    xpc_retain(v39);
    goto LABEL_63;
  }
LABEL_62:
  xpc_object_t v87 = xpc_null_create();
LABEL_63:
  dispatch_async(v42, &v83);
  xpc_release(v87);
  xpc_object_t v87 = 0;
  xpc_release(v86);
  xpc_object_t v86 = 0;
  if (v85) {
    _Block_release(v85);
  }
  if (v41) {
    _Block_release(v41);
  }
  xpc_release(v39);
  xpc_release(v38);
  xpc_release(v24);
  _Block_object_dispose(&block, 8);
  if (v93)
  {
    xpc_object_t v94 = v93;
    operator delete(v93);
  }
  _Block_object_dispose(&v69, 8);
  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(&v77, 8);
  uint64_t v7 = v82;
  if (v82) {
    goto LABEL_70;
  }
}

void sub_1B8B8D4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  xpc_object_t v49 = *(void **)(v47 - 216);
  if (v49)
  {
    *(void *)(v47 - 208) = v49;
    operator delete(v49);
  }
  _Block_object_dispose((const void *)(v47 - 160), 8);
  uint64_t v50 = *(void **)(v47 - 120);
  if (v50)
  {
    *(void *)(v47 - 112) = v50;
    operator delete(v50);
  }
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v47 - 240);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _WORD *a2)
{
  if (*a2 == 1) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  if (*a2) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
  return result;
}

uint64_t ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3(uint64_t result, _WORD *a2)
{
  if (*a2 == 1) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  if (*a2) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
  return result;
}

void *___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_4(void *result, char **a2)
{
  int v2 = result;
  if (*(_DWORD *)(*(void *)(result[4] + 8) + 24) != 2) {
    xpc_object_t result = std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(result[5] + 8) + 40), *a2, a2[1], a2[1] - *a2);
  }
  *(unsigned char *)(*(void *)(v2[6] + 8) + 24) = 1;
  return result;
}

void *___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_5(void *result, uint64_t a2)
{
  if (*(_WORD *)a2 == 1) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  if (*(_WORD *)a2) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(*(void *)(result[4] + 8) + 24) = v3;
  if (*(_WORD *)(a2 + 2) == 1) {
    int v4 = 1;
  }
  else {
    int v4 = 2;
  }
  if (*(_WORD *)(a2 + 2)) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(*(void *)(result[5] + 8) + 24) = v5;
  if (*(_DWORD *)(*(void *)(result[4] + 8) + 24) != 2) {
    return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(result[6] + 8) + 40), *(char **)(a2 + 8), (char *)(*(void *)(a2 + 8) + 20), 0x14uLL);
  }
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetManifestStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8D8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8D8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8D920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  uint64_t v17 = v3 + 320;
  uint64_t v18 = QMIServiceMsg::create();
  int v19 = 25000;
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_392;
  v13[4] = v3;
  v13[5] = v2[3];
  int v5 = (std::__shared_weak_count *)v2[4];
  xpc_object_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = (void *)v2[1];
  if (v6) {
    xpc_object_t v6 = _Block_copy(v6);
  }
  xpc_object_t v15 = v6;
  uint64_t v7 = v2[2];
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm11GetManifest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194980;
  aBlock[4] = v13;
  int v8 = _Block_copy(aBlock);
  unsigned int v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    int v8 = v21;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  int v9 = (std::__shared_weak_count *)v2[4];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  BOOL v10 = v2[2];
  if (v10) {
    dispatch_release(v10);
  }
  xpc_object_t v11 = (const void *)v2[1];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  xpc_object_t v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1B8B8DB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  xpc_object_t v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    int v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      xpc_object_t v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        int v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    int v27 = v24[2];
    if (!v27) {
      goto LABEL_13;
    }
  }
  dispatch_release(v27);
  xpc_object_t v28 = (const void *)v24[1];
  if (!v28) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  xpc_object_t v6 = std::__shared_weak_count::lock(v3);
  long long v83 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (!a1[5])
  {
LABEL_81:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  int v8 = *((_DWORD *)a2 + 1);
  if (v8)
  {
    int v9 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 67109378;
      HIDWORD(block) = v8;
      LOWORD(v88) = 2080;
      *(void *)((char *)&v88 + 2) = qmi::asString();
      _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Error = 0x%x (%s)", (uint8_t *)&block, 0x12u);
    }
    BOOL v10 = (const char *)qmi::asString();
    xpc_object_t v11 = xpc_string_create(v10);
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    xpc_object_t v12 = xpc_null_create();
    uint64_t v13 = (const void *)a1[7];
    if (v13) {
      xpc_object_t v14 = _Block_copy(v13);
    }
    else {
      xpc_object_t v14 = 0;
    }
    int v19 = a1[8];
    uint64_t block = (tlv *)MEMORY[0x1E4F143A8];
    *(void *)&long long v88 = 1174405120;
    *((void *)&v88 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    long long v89 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_344;
    if (v14)
    {
      long long v90 = _Block_copy(v14);
      xpc_object_t v91 = v11;
      if (v11) {
        goto LABEL_17;
      }
    }
    else
    {
      long long v90 = 0;
      xpc_object_t v91 = v11;
      if (v11)
      {
LABEL_17:
        xpc_retain(v11);
        xpc_object_t v92 = v12;
        if (v12)
        {
LABEL_18:
          xpc_retain(v12);
LABEL_22:
          dispatch_async(v19, &block);
          xpc_release(v92);
          xpc_object_t v92 = 0;
          xpc_release(v91);
          xpc_object_t v91 = 0;
          if (v90) {
            _Block_release(v90);
          }
          if (v14) {
            _Block_release(v14);
          }
          xpc_release(v12);
          xpc_release(v11);
          goto LABEL_81;
        }
LABEL_21:
        xpc_object_t v92 = xpc_null_create();
        goto LABEL_22;
      }
    }
    xpc_object_t v91 = xpc_null_create();
    xpc_object_t v92 = v12;
    if (v12) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  uint64_t v78 = 0;
  uint64_t v79 = &v78;
  uint64_t v80 = 0x2000000000;
  int v81 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = &v74;
  uint64_t v76 = 0x2000000000;
  int v77 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = &v70;
  uint64_t v72 = 0x2000000000;
  int v73 = 0;
  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 0x40000000;
  CFTypeRef v64 = (void (*)(void *, void **))___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  xpc_object_t v65 = &unk_1E61948E0;
  xpc_object_t v66 = &v78;
  uint64_t v67 = &v74;
  uint64_t v68 = &v70;
  uint64_t v69 = v5;
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v17 = TlvValue;
  if (TlvValue)
  {
    int v18 = v16;
    uint64_t block = TlvValue;
    long long v84 = (void *)tlv::parseV<bsp::tlv::abm::ManifestStatus>(&block, v16);
    if (block) {
      v64(v63, &v84);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 1, v17, v18);
    }
  }
  xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
  if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1BA9C88F0](v20) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v20);
      xpc_object_t v21 = v20;
    }
    else
    {
      xpc_object_t v21 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    xpc_object_t v20 = 0;
  }
  xpc_release(v20);
  xpc_object_t v22 = xpc_int64_create(*((unsigned int *)v79 + 6));
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4FB9AD0], v22);
  xpc_object_t v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  xpc_object_t v24 = xpc_int64_create(*((unsigned int *)v75 + 6));
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4FB9AF8], v24);
  xpc_object_t v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  xpc_object_t v26 = xpc_int64_create(*((unsigned int *)v71 + 6));
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4FB9AF0], v26);
  xpc_object_t v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  if (!*((_DWORD *)v79 + 6))
  {
    uint64_t block = 0;
    *(void *)&long long v88 = &block;
    *((void *)&v88 + 1) = 0x4002000000;
    long long v89 = __Block_byref_object_copy__345;
    long long v90 = __Block_byref_object_dispose__346;
    xpc_object_t v91 = 0;
    xpc_object_t v92 = 0;
    uint64_t v93 = 0;
    v59[0] = MEMORY[0x1E4F143A8];
    v59[1] = 0x40000000;
    uint64_t v60 = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
    CFTypeRef v61 = &unk_1E6194908;
    p_uint64_t block = &block;
    xpc_object_t v28 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    long long v30 = (char *)v28;
    if (v28)
    {
      long long v84 = 0;
      long long v85 = 0;
      uint64_t v86 = 0;
      CFTypeRef v31 = (const unsigned __int8 *)v28 + v29;
      tlv::throwIfNotEnoughBytes(v28, v31, (const unsigned __int8 *)2);
      unint64_t v32 = *(unsigned __int16 *)v30;
      tlv::throwIfNotEnoughBytes((tlv *)(v30 + 2), v31, (const unsigned __int8 *)v32);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v84, v30 + 2, &v30[v32 + 2], v32);
      v60((uint64_t)v59, (char **)&v84);
      if (v84)
      {
        long long v85 = v84;
        operator delete(v84);
      }
    }
    xpc_object_t v33 = xpc_data_create(*(const void **)(v88 + 40), *(void *)(v88 + 48) - *(void *)(v88 + 40));
    if (!v33) {
      xpc_object_t v33 = xpc_null_create();
    }
    xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4FB9AA0], v33);
    xpc_object_t v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
    _Block_object_dispose(&block, 8);
    if (v91)
    {
      xpc_object_t v92 = v91;
      operator delete(v91);
    }
  }
  if (!*((_DWORD *)v75 + 6))
  {
    uint64_t block = 0;
    *(void *)&long long v88 = &block;
    *((void *)&v88 + 1) = 0x4002000000;
    long long v89 = __Block_byref_object_copy__384;
    long long v90 = __Block_byref_object_dispose__385;
    xpc_object_t v91 = 0;
    xpc_object_t v92 = 0;
    uint64_t v93 = 0;
    v55[0] = MEMORY[0x1E4F143A8];
    v55[1] = 0x40000000;
    uint64_t v56 = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_386;
    xpc_object_t v57 = &unk_1E6194930;
    uint64_t v58 = &block;
    xpc_object_t v35 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    xpc_object_t v37 = (char *)v35;
    if (v35)
    {
      long long v84 = 0;
      long long v85 = 0;
      uint64_t v86 = 0;
      xpc_object_t v38 = (const unsigned __int8 *)v35 + v36;
      tlv::throwIfNotEnoughBytes(v35, v38, (const unsigned __int8 *)2);
      unint64_t v39 = *(unsigned __int16 *)v37;
      tlv::throwIfNotEnoughBytes((tlv *)(v37 + 2), v38, (const unsigned __int8 *)v39);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v84, v37 + 2, &v37[v39 + 2], v39);
      v56((uint64_t)v55, (char **)&v84);
      if (v84)
      {
        long long v85 = v84;
        operator delete(v84);
      }
    }
    xpc_object_t v40 = xpc_data_create(*(const void **)(v88 + 40), *(void *)(v88 + 48) - *(void *)(v88 + 40));
    if (!v40) {
      xpc_object_t v40 = xpc_null_create();
    }
    xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4FB9AE0], v40);
    xpc_object_t v41 = xpc_null_create();
    xpc_release(v40);
    xpc_release(v41);
    _Block_object_dispose(&block, 8);
    if (v91)
    {
      xpc_object_t v92 = v91;
      operator delete(v91);
    }
  }
  if (!*((_DWORD *)v71 + 6))
  {
    uint64_t block = 0;
    *(void *)&long long v88 = &block;
    *((void *)&v88 + 1) = 0x4002000000;
    long long v89 = __Block_byref_object_copy__384;
    long long v90 = __Block_byref_object_dispose__385;
    xpc_object_t v91 = 0;
    xpc_object_t v92 = 0;
    uint64_t v93 = 0;
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 0x40000000;
    uint64_t v52 = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2_388;
    long long v53 = &unk_1E6194958;
    uint64_t v54 = &block;
    long long v42 = (char *)qmi::MessageBase::findTlvValue(a2);
    if (v42)
    {
      long long v84 = 0;
      long long v85 = 0;
      uint64_t v86 = 0;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v84, v42, &v42[v43], v43);
      v52((uint64_t)v51, (char **)&v84);
      if (v84)
      {
        long long v85 = v84;
        operator delete(v84);
      }
    }
    xpc_object_t v44 = xpc_data_create(*(const void **)(v88 + 40), *(void *)(v88 + 48) - *(void *)(v88 + 40));
    if (!v44) {
      xpc_object_t v44 = xpc_null_create();
    }
    xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E4FB9AC8], v44);
    xpc_object_t v45 = xpc_null_create();
    xpc_release(v44);
    xpc_release(v45);
    _Block_object_dispose(&block, 8);
    if (v91)
    {
      xpc_object_t v92 = v91;
      operator delete(v91);
    }
  }
  xpc_object_t v46 = xpc_null_create();
  if (v21)
  {
    xpc_retain(v21);
    xpc_object_t v47 = v21;
    uint64_t v48 = (const void *)a1[7];
    if (v48)
    {
LABEL_66:
      xpc_object_t v49 = _Block_copy(v48);
      goto LABEL_69;
    }
  }
  else
  {
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = (const void *)a1[7];
    if (v48) {
      goto LABEL_66;
    }
  }
  xpc_object_t v49 = 0;
LABEL_69:
  uint64_t v50 = a1[8];
  uint64_t block = (tlv *)MEMORY[0x1E4F143A8];
  *(void *)&long long v88 = 1174405120;
  *((void *)&v88 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  long long v89 = (__n128 (*)(void *, uint64_t))&__block_descriptor_tmp_362;
  if (v49)
  {
    long long v90 = _Block_copy(v49);
    xpc_object_t v91 = v46;
    if (v46) {
      goto LABEL_71;
    }
LABEL_74:
    xpc_object_t v91 = xpc_null_create();
    xpc_object_t v92 = v47;
    if (v47) {
      goto LABEL_72;
    }
    goto LABEL_75;
  }
  long long v90 = 0;
  xpc_object_t v91 = v46;
  if (!v46) {
    goto LABEL_74;
  }
LABEL_71:
  xpc_retain(v46);
  xpc_object_t v92 = v47;
  if (v47)
  {
LABEL_72:
    xpc_retain(v47);
    goto LABEL_76;
  }
LABEL_75:
  xpc_object_t v92 = xpc_null_create();
LABEL_76:
  dispatch_async(v50, &block);
  xpc_release(v92);
  xpc_object_t v92 = 0;
  xpc_release(v91);
  xpc_object_t v91 = 0;
  if (v90) {
    _Block_release(v90);
  }
  if (v49) {
    _Block_release(v49);
  }
  xpc_release(v47);
  xpc_release(v46);
  xpc_release(v21);
  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(&v74, 8);
  _Block_object_dispose(&v78, 8);
  uint64_t v7 = v83;
  if (v83) {
    goto LABEL_81;
  }
}

void sub_1B8B8E718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(void *result, _WORD *a2)
{
  if (*a2 == 1) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  if (*a2) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(*(void *)(result[4] + 8) + 24) = v3;
  if (a2[1] == 1) {
    int v4 = 1;
  }
  else {
    int v4 = 2;
  }
  if (a2[1]) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(*(void *)(result[5] + 8) + 24) = v5;
  if (a2[3] == 1) {
    int v6 = 1;
  }
  else {
    int v6 = 2;
  }
  if (a2[3]) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(*(void *)(result[6] + 8) + 24) = v7;
  return result;
}

void *___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3(uint64_t a1, char **a2)
{
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a2, a2[1], a2[1] - *a2);
}

__n128 __Block_byref_object_copy__384(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__385(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_386(uint64_t a1, char **a2)
{
  return std::vector<char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a2, a2[1], a2[1] - *a2);
}

char *___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2_388(uint64_t a1, char **a2)
{
  return std::vector<char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a2, a2[1], a2[1] - *a2);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm11GetManifest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8EB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8EB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *std::vector<char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, char *__src, char *a3, unint64_t a4)
{
  int v6 = __src;
  int v7 = result;
  unint64_t v8 = *((void *)result + 2);
  int v9 = *(void **)result;
  if (v8 - *(void *)result < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_38;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_38:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    __n128 result = (char *)operator new(v11);
    *int v7 = result;
    v7[1] = result;
    uint64_t v7[2] = &result[v11];
    if (v6 == a3)
    {
      uint64_t v13 = result;
    }
    else
    {
      uint64_t v12 = a3 - v6;
      if ((unint64_t)(a3 - v6) < 0x20) {
        goto LABEL_17;
      }
      if ((unint64_t)(result - v6) < 0x20) {
        goto LABEL_17;
      }
      uint64_t v13 = &result[v12 & 0xFFFFFFFFFFFFFFE0];
      xpc_object_t v14 = result + 16;
      xpc_object_t v15 = (long long *)(v6 + 16);
      unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *xpc_object_t v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      v6 += v12 & 0xFFFFFFFFFFFFFFE0;
      result += v12 & 0xFFFFFFFFFFFFFFE0;
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_17:
        uint64_t v13 = result;
        do
        {
          char v18 = *v6++;
          *v13++ = v18;
        }
        while (v6 != a3);
      }
    }
    goto LABEL_37;
  }
  int v19 = (void *)*((void *)result + 1);
  if ((unsigned char *)v19 - (unsigned char *)v9 < a4)
  {
    xpc_object_t v20 = &__src[(unsigned char *)v19 - (unsigned char *)v9];
    if (v19 == v9)
    {
      uint64_t v21 = *(void *)result;
      xpc_object_t v22 = *(char **)result;
      if (v20 == a3) {
        goto LABEL_36;
      }
    }
    else
    {
      __n128 result = (char *)memmove(*(void **)result, __src, (unsigned char *)v19 - (unsigned char *)v9);
      uint64_t v21 = v7[1];
      xpc_object_t v22 = (char *)v21;
      if (v20 == a3) {
        goto LABEL_36;
      }
    }
    unint64_t v24 = &a3[(void)v9] - &v6[(void)v19];
    if (v24 >= 0x20)
    {
      xpc_object_t v22 = (char *)v21;
      if ((unint64_t)((unsigned char *)v9 - &v6[(void)v19] + v21) >= 0x20)
      {
        v20 += v24 & 0xFFFFFFFFFFFFFFE0;
        xpc_object_t v22 = (char *)(v21 + (v24 & 0xFFFFFFFFFFFFFFE0));
        xpc_object_t v25 = (_OWORD *)(v21 + 16);
        xpc_object_t v26 = (long long *)&v6[(unsigned char *)v19 - (unsigned char *)v9 + 16];
        unint64_t v27 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v28 = *v26;
          *(v25 - 1) = *(v26 - 1);
          *xpc_object_t v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 32;
        }
        while (v27);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_36;
        }
      }
    }
    else
    {
      xpc_object_t v22 = (char *)v21;
    }
    do
    {
      char v29 = *v20++;
      *v22++ = v29;
    }
    while (v20 != a3);
LABEL_36:
    uint64_t v13 = v22;
    goto LABEL_37;
  }
  size_t v23 = a3 - __src;
  if (a3 != __src) {
    __n128 result = (char *)memmove(*(void **)result, __src, v23);
  }
  uint64_t v13 = (char *)v9 + v23;
LABEL_37:
  v7[1] = v13;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::screenState(BOOL)::$_0>(radio::QMICommandDriverBase::screenState(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::screenState(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::screenState(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v4;
  long long v46 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v45);
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 0x40000000;
  int v5 = ___ZZN5radio20QMICommandDriverBase11screenStateEbENK3__0clEv_block_invoke;
  long long v42 = ___ZZN5radio20QMICommandDriverBase11screenStateEbENK3__0clEv_block_invoke;
  int v43 = &__block_descriptor_tmp_395;
  char v44 = *((unsigned char *)v2 + 8);
  int v6 = (char *)*((void *)&v45 + 1);
  int v7 = (char *)v46;
  unint64_t v8 = (const void **)*((void *)&v45 + 1);
  if (*((void *)&v45 + 1) != (void)v46)
  {
    unint64_t v8 = (const void **)*((void *)&v45 + 1);
    while (*((unsigned char *)*v8 + 8) != 16)
    {
      if (++v8 == (const void **)v46) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == (const void **)v46)
  {
LABEL_9:
    size_t v11 = operator new(0x10uLL);
    uint64_t v12 = v11;
    void v11[4] = 16;
    *(void *)size_t v11 = &unk_1F1263EB8;
    if ((unint64_t)v7 < *((void *)&v46 + 1))
    {
      *(void *)int v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_22:
      uint64_t v10 = (char *)v12 + 9;
      *(void *)&long long v46 = v13;
      int v5 = v42;
      goto LABEL_23;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v46 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v46 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v19 = operator new(8 * v18);
      xpc_object_t v20 = &v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      *xpc_object_t v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((void *)&v45 + 1) = v20;
        *(void *)&long long v46 = v13;
        *((void *)&v46 + 1) = v21;
        if (!v6) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      int v19 = 0;
      xpc_object_t v20 = (void *)(8 * v15);
      uint64_t v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_51;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_51;
    }
    unint64_t v26 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    long long v28 = &v7[-v27];
    xpc_object_t v20 = (void *)((char *)v20 - v27);
    char v29 = &v19[8 * v15 - 16];
    long long v30 = v7 - 16;
    uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      _OWORD *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 4;
    }
    while (v31);
    int v7 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        uint64_t v33 = *((void *)v7 - 1);
        v7 -= 8;
        *--xpc_object_t v20 = v33;
      }
      while (v7 != v6);
    }
    int v6 = (char *)*((void *)&v45 + 1);
    *((void *)&v45 + 1) = v20;
    *(void *)&long long v46 = v13;
    *((void *)&v46 + 1) = v21;
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9 + 9;
LABEL_23:
  v5((uint64_t)v41, v10);
  uint64_t v36 = v3 + 320;
  uint64_t v37 = QMIServiceMsg::create();
  int v38 = 25000;
  uint64_t v39 = 0;
  xpc_object_t v40 = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZZN5radio20QMICommandDriverBase11screenStateEbENK3__0clEv_block_invoke_2;
  v34[3] = &__block_descriptor_tmp_398;
  v34[4] = v3;
  v34[5] = v2[2];
  xpc_object_t v22 = (std::__shared_weak_count *)v2[3];
  xpc_object_t v35 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm12SendAPStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E61949C8;
  aBlock[4] = v34;
  size_t v23 = _Block_copy(aBlock);
  xpc_object_t v40 = v23;
  if (v37)
  {
    qmi::Client::send();
    size_t v23 = v40;
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v45);
  unint64_t v24 = (std::__shared_weak_count *)v2[3];
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete(v2);
  xpc_object_t v25 = (std::__shared_weak_count *)a1[2];
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(a1);
}

void sub_1B8B8F1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a18) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  long long v30 = (std::__shared_weak_count *)v28[3];
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(v28);
  uint64_t v31 = (std::__shared_weak_count *)v27[2];
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio20QMICommandDriverBase11screenStateEbENK3__0clEv_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZZN5radio20QMICommandDriverBase11screenStateEbENK3__0clEv_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        if (!*(_DWORD *)(a2 + 4))
        {
          unint64_t v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v9 = 0;
            _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Update AP Screen Status successful", v9, 2u);
          }
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ScreenStatus>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ScreenStatus>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ScreenStatus>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1263EB8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm12SendAPStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8F4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8F4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>(radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v46 = v4;
  long long v47 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v46);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 0x40000000;
  uint64_t v5 = ___ZZN5radio20QMICommandDriverBase12setBreadModeEbENK3__0clEv_block_invoke;
  int v43 = ___ZZN5radio20QMICommandDriverBase12setBreadModeEbENK3__0clEv_block_invoke;
  char v44 = &__block_descriptor_tmp_401;
  char v45 = *((unsigned char *)v2 + 8);
  int v6 = (char *)*((void *)&v46 + 1);
  int v7 = (char *)v47;
  unint64_t v8 = (const void **)*((void *)&v46 + 1);
  if (*((void *)&v46 + 1) != (void)v47)
  {
    unint64_t v8 = (const void **)*((void *)&v46 + 1);
    while (*((unsigned char *)*v8 + 8) != 16)
    {
      if (++v8 == (const void **)v47) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == (const void **)v47)
  {
LABEL_9:
    size_t v11 = operator new(0x10uLL);
    uint64_t v12 = v11;
    void v11[4] = 16;
    *(void *)size_t v11 = &unk_1F1263F38;
    if ((unint64_t)v7 < *((void *)&v47 + 1))
    {
      *(void *)int v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_22:
      uint64_t v10 = (char *)v12 + 9;
      *(void *)&long long v47 = v13;
      uint64_t v5 = v43;
      goto LABEL_23;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v47 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v47 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v19 = operator new(8 * v18);
      xpc_object_t v20 = &v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      *xpc_object_t v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((void *)&v46 + 1) = v20;
        *(void *)&long long v47 = v13;
        *((void *)&v47 + 1) = v21;
        if (!v6) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      int v19 = 0;
      xpc_object_t v20 = (void *)(8 * v15);
      uint64_t v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_51;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_51;
    }
    unint64_t v26 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    long long v28 = &v7[-v27];
    xpc_object_t v20 = (void *)((char *)v20 - v27);
    char v29 = &v19[8 * v15 - 16];
    long long v30 = v7 - 16;
    uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      _OWORD *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 4;
    }
    while (v31);
    int v7 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        uint64_t v33 = *((void *)v7 - 1);
        v7 -= 8;
        *--xpc_object_t v20 = v33;
      }
      while (v7 != v6);
    }
    int v6 = (char *)*((void *)&v46 + 1);
    *((void *)&v46 + 1) = v20;
    *(void *)&long long v47 = v13;
    *((void *)&v47 + 1) = v21;
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9 + 9;
LABEL_23:
  v5((uint64_t)v42, v10);
  uint64_t v37 = v3 + 320;
  uint64_t v38 = QMIServiceMsg::create();
  int v39 = 25000;
  uint64_t v40 = 0;
  xpc_object_t v41 = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZZN5radio20QMICommandDriverBase12setBreadModeEbENK3__0clEv_block_invoke_2;
  v34[3] = &__block_descriptor_tmp_408;
  v34[4] = v3;
  v34[5] = v2[2];
  xpc_object_t v22 = (std::__shared_weak_count *)v2[3];
  xpc_object_t v35 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v36 = *((unsigned char *)v2 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendBreadMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194A10;
  aBlock[4] = v34;
  size_t v23 = _Block_copy(aBlock);
  xpc_object_t v41 = v23;
  if (v38)
  {
    qmi::Client::send();
    size_t v23 = v41;
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v46);
  unint64_t v24 = (std::__shared_weak_count *)v2[3];
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete(v2);
  xpc_object_t v25 = (std::__shared_weak_count *)a1[2];
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(a1);
}

void sub_1B8B8F990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a18) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  long long v30 = (std::__shared_weak_count *)v28[3];
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(v28);
  uint64_t v31 = (std::__shared_weak_count *)v27[2];
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio20QMICommandDriverBase12setBreadModeEbENK3__0clEv_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZZN5radio20QMICommandDriverBase12setBreadModeEbENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        int v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            if (*(unsigned char *)(a1 + 56)) {
              uint64_t v10 = "enable";
            }
            else {
              uint64_t v10 = "disable";
            }
            int v12 = 136315138;
            uint64_t v13 = v10;
            _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Failed to %s Bread mode", (uint8_t *)&v12, 0xCu);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*(unsigned char *)(a1 + 56)) {
            size_t v11 = "enabled";
          }
          else {
            size_t v11 = "disabled";
          }
          int v12 = 136315138;
          uint64_t v13 = v11;
          _os_log_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Bread mode", (uint8_t *)&v12, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BreadModeType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BreadModeType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BreadModeType>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1263F38;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendBreadMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B8FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B8FD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B8FD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>(radio::QMICommandDriverBase::setButterMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v46 = v4;
  long long v47 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v46);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 0x40000000;
  uint64_t v5 = ___ZZN5radio20QMICommandDriverBase13setButterModeEbENK3__0clEv_block_invoke;
  int v43 = ___ZZN5radio20QMICommandDriverBase13setButterModeEbENK3__0clEv_block_invoke;
  char v44 = &__block_descriptor_tmp_411;
  char v45 = *((unsigned char *)v2 + 8);
  int v6 = (char *)*((void *)&v46 + 1);
  int v7 = (char *)v47;
  int v8 = (const void **)*((void *)&v46 + 1);
  if (*((void *)&v46 + 1) != (void)v47)
  {
    int v8 = (const void **)*((void *)&v46 + 1);
    while (*((unsigned char *)*v8 + 8) != 17)
    {
      if (++v8 == (const void **)v47) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == (const void **)v47)
  {
LABEL_9:
    size_t v11 = operator new(0x10uLL);
    int v12 = v11;
    void v11[4] = 17;
    *(void *)size_t v11 = &unk_1F1263FB8;
    if ((unint64_t)v7 < *((void *)&v47 + 1))
    {
      *(void *)int v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_22:
      uint64_t v10 = (char *)v12 + 9;
      *(void *)&long long v47 = v13;
      uint64_t v5 = v43;
      goto LABEL_23;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v47 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v47 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v19 = operator new(8 * v18);
      xpc_object_t v20 = &v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      *xpc_object_t v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((void *)&v46 + 1) = v20;
        *(void *)&long long v47 = v13;
        *((void *)&v47 + 1) = v21;
        if (!v6) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      int v19 = 0;
      xpc_object_t v20 = (void *)(8 * v15);
      uint64_t v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_51;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_51;
    }
    unint64_t v26 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    long long v28 = &v7[-v27];
    xpc_object_t v20 = (void *)((char *)v20 - v27);
    char v29 = &v19[8 * v15 - 16];
    long long v30 = v7 - 16;
    uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      _OWORD *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 4;
    }
    while (v31);
    int v7 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_51:
      do
      {
        uint64_t v33 = *((void *)v7 - 1);
        v7 -= 8;
        *--xpc_object_t v20 = v33;
      }
      while (v7 != v6);
    }
    int v6 = (char *)*((void *)&v46 + 1);
    *((void *)&v46 + 1) = v20;
    *(void *)&long long v47 = v13;
    *((void *)&v47 + 1) = v21;
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9 + 9;
LABEL_23:
  v5((uint64_t)v42, v10);
  uint64_t v37 = v3 + 320;
  uint64_t v38 = QMIServiceMsg::create();
  int v39 = 25000;
  uint64_t v40 = 0;
  xpc_object_t v41 = 0;
  v34[0] = MEMORY[0x1E4F143A8];
  v34[1] = 1174405120;
  v34[2] = ___ZZN5radio20QMICommandDriverBase13setButterModeEbENK3__0clEv_block_invoke_2;
  v34[3] = &__block_descriptor_tmp_414;
  v34[4] = v3;
  v34[5] = v2[2];
  xpc_object_t v22 = (std::__shared_weak_count *)v2[3];
  xpc_object_t v35 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v36 = *((unsigned char *)v2 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendBreadMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194A10;
  aBlock[4] = v34;
  size_t v23 = _Block_copy(aBlock);
  xpc_object_t v41 = v23;
  if (v38)
  {
    qmi::Client::send();
    size_t v23 = v41;
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v46);
  unint64_t v24 = (std::__shared_weak_count *)v2[3];
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  operator delete(v2);
  xpc_object_t v25 = (std::__shared_weak_count *)a1[2];
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(a1);
}

void sub_1B8B901DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a18) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  long long v30 = (std::__shared_weak_count *)v28[3];
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  operator delete(v28);
  uint64_t v31 = (std::__shared_weak_count *)v27[2];
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio20QMICommandDriverBase13setButterModeEbENK3__0clEv_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZZN5radio20QMICommandDriverBase13setButterModeEbENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (*(void *)(a1 + 40))
      {
        int v8 = *(_DWORD *)(a2 + 4);
        int v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            if (*(unsigned char *)(a1 + 56)) {
              uint64_t v10 = "enable";
            }
            else {
              uint64_t v10 = "disable";
            }
            int v12 = 136315138;
            uint64_t v13 = v10;
            _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Failed to %s Butter mode", (uint8_t *)&v12, 0xCu);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*(unsigned char *)(a1 + 56)) {
            size_t v11 = "enabled";
          }
          else {
            size_t v11 = "disabled";
          }
          int v12 = 136315138;
          uint64_t v13 = v11;
          _os_log_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Butter mode", (uint8_t *)&v12, 0xCu);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ButterModeType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ButterModeType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ButterModeType>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1263FB8;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>(radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v74 = v3;
  long long v75 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v74);
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 0x40000000;
  uint64_t v4 = (uint64_t (*)(uint64_t, char *))___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke;
  uint64_t v71 = (uint64_t (*)(uint64_t, char *))___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke;
  uint64_t v72 = &__block_descriptor_tmp_416;
  int v73 = *((_DWORD *)v1 + 6);
  uint64_t v5 = (char *)*((void *)&v74 + 1);
  int v6 = (char *)v75;
  int v7 = (const void **)*((void *)&v74 + 1);
  if (*((void *)&v74 + 1) != (void)v75)
  {
    int v7 = (const void **)*((void *)&v74 + 1);
    while (*((unsigned char *)*v7 + 8) != 19)
    {
      if (++v7 == (const void **)v75) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v75)
  {
LABEL_9:
    uint64_t v10 = operator new(0x10uLL);
    size_t v11 = v10;
    v10[8] = 19;
    *(void *)uint64_t v10 = &unk_1F1264038;
    *((_DWORD *)v10 + 3) = 0;
    int v9 = v10 + 12;
    if ((unint64_t)v6 < *((void *)&v75 + 1))
    {
      *(void *)int v6 = v10;
      uint64_t v12 = (uint64_t)(v6 + 8);
LABEL_22:
      *(void *)&long long v75 = v12;
      uint64_t v4 = v71;
      goto LABEL_23;
    }
    int64_t v13 = v6 - v5;
    uint64_t v14 = (v6 - v5) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      goto LABEL_78;
    }
    uint64_t v16 = *((void *)&v75 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v75 + 1) - (void)v5) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        goto LABEL_79;
      }
      unint64_t v18 = operator new(8 * v17);
      int v19 = &v18[8 * v14];
      xpc_object_t v20 = &v18[8 * v17];
      *int v19 = v11;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((void *)&v74 + 1) = v19;
        *(void *)&long long v75 = v12;
        *((void *)&v75 + 1) = v20;
        if (!v5) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v18 = 0;
      int v19 = (void *)(8 * v14);
      xpc_object_t v20 = 0;
      *(void *)(8 * v14) = v11;
      uint64_t v12 = 8 * v14 + 8;
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_82;
    }
    if ((unint64_t)(v5 - v18) < 0x20) {
      goto LABEL_82;
    }
    unint64_t v42 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    char v44 = &v6[-v43];
    int v19 = (void *)((char *)v19 - v43);
    char v45 = &v18[8 * v14 - 16];
    long long v46 = v6 - 16;
    uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      _OWORD *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    int v6 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_82:
      do
      {
        uint64_t v49 = *((void *)v6 - 1);
        v6 -= 8;
        *--int v19 = v49;
      }
      while (v6 != v5);
    }
    uint64_t v5 = (char *)*((void *)&v74 + 1);
    *((void *)&v74 + 1) = v19;
    *(void *)&long long v75 = v12;
    *((void *)&v75 + 1) = v20;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v8) {
    goto LABEL_77;
  }
  int v9 = v8 + 12;
LABEL_23:
  v4((uint64_t)v70, v9);
  v66[0] = MEMORY[0x1E4F143A8];
  v66[1] = 0x40000000;
  uint64_t v21 = (uint64_t (*)(uint64_t, char *))___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke_2;
  uint64_t v67 = (uint64_t (*)(uint64_t, char *))___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke_2;
  uint64_t v68 = &__block_descriptor_tmp_418;
  int v69 = *((_DWORD *)v1 + 7);
  xpc_object_t v22 = (char *)*((void *)&v74 + 1);
  size_t v23 = (char *)v75;
  unint64_t v24 = (const void **)*((void *)&v74 + 1);
  if (*((void *)&v74 + 1) != (void)v75)
  {
    unint64_t v24 = (const void **)*((void *)&v74 + 1);
    while (*((unsigned char *)*v24 + 8) != 20)
    {
      if (++v24 == (const void **)v75) {
        goto LABEL_31;
      }
    }
  }
  if (v24 != (const void **)v75)
  {
    if (v25)
    {
      unint64_t v26 = v25 + 12;
      goto LABEL_45;
    }
LABEL_77:
    __cxa_bad_cast();
  }
LABEL_31:
  uint64_t v27 = operator new(0x10uLL);
  long long v28 = v27;
  v27[8] = 20;
  *(void *)uint64_t v27 = &unk_1F1264088;
  *((_DWORD *)v27 + 3) = 0;
  unint64_t v26 = v27 + 12;
  if ((unint64_t)v23 >= *((void *)&v75 + 1))
  {
    int64_t v30 = v23 - v22;
    uint64_t v31 = (v23 - v22) >> 3;
    unint64_t v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 61))
    {
      uint64_t v33 = *((void *)&v75 + 1) - (void)v22;
      if ((uint64_t)(*((void *)&v75 + 1) - (void)v22) >> 2 > v32) {
        unint64_t v32 = v33 >> 2;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (!v34)
      {
        xpc_object_t v35 = 0;
        char v36 = (void *)(8 * v31);
        uint64_t v37 = 0;
        *(void *)(8 * v31) = v28;
        uint64_t v29 = 8 * v31 + 8;
        if (v22 == v23)
        {
LABEL_42:
          *((void *)&v74 + 1) = v36;
          *(void *)&long long v75 = v29;
          *((void *)&v75 + 1) = v37;
          if (!v22) {
            goto LABEL_44;
          }
LABEL_43:
          operator delete(v22);
          goto LABEL_44;
        }
LABEL_69:
        if ((unint64_t)(v30 - 8) < 0x58) {
          goto LABEL_83;
        }
        if ((unint64_t)(v22 - v35) < 0x20) {
          goto LABEL_83;
        }
        unint64_t v50 = ((unint64_t)(v30 - 8) >> 3) + 1;
        uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v52 = &v23[-v51];
        char v36 = (void *)((char *)v36 - v51);
        long long v53 = &v35[8 * v31 - 16];
        uint64_t v54 = v23 - 16;
        uint64_t v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v56 = *(_OWORD *)v54;
          *(v53 - 1) = *((_OWORD *)v54 - 1);
          _OWORD *v53 = v56;
          v53 -= 2;
          v54 -= 32;
          v55 -= 4;
        }
        while (v55);
        size_t v23 = v52;
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_83:
          do
          {
            uint64_t v57 = *((void *)v23 - 1);
            v23 -= 8;
            *--char v36 = v57;
          }
          while (v23 != v22);
        }
        xpc_object_t v22 = (char *)*((void *)&v74 + 1);
        *((void *)&v74 + 1) = v36;
        *(void *)&long long v75 = v29;
        *((void *)&v75 + 1) = v37;
        if (!v22) {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      if (!(v34 >> 61))
      {
        xpc_object_t v35 = operator new(8 * v34);
        char v36 = &v35[8 * v31];
        uint64_t v37 = &v35[8 * v34];
        void *v36 = v28;
        uint64_t v29 = (uint64_t)(v36 + 1);
        if (v22 == v23) {
          goto LABEL_42;
        }
        goto LABEL_69;
      }
LABEL_79:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_78:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(void *)size_t v23 = v27;
  uint64_t v29 = (uint64_t)(v23 + 8);
LABEL_44:
  *(void *)&long long v75 = v29;
  uint64_t v21 = v67;
LABEL_45:
  v21((uint64_t)v66, v26);
  uint64_t v61 = v2 + 320;
  uint64_t v62 = QMIServiceMsg::create();
  int v63 = 25000;
  uint64_t v64 = 0;
  xpc_object_t v65 = 0;
  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 1174405120;
  void v59[2] = ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke_3;
  v59[3] = &__block_descriptor_tmp_421;
  v59[4] = v2;
  v59[5] = v1[1];
  uint64_t v38 = (std::__shared_weak_count *)v1[2];
  uint64_t v60 = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendVisitInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194A98;
  aBlock[4] = v59;
  int v39 = _Block_copy(aBlock);
  xpc_object_t v65 = v39;
  if (v62)
  {
    qmi::Client::send();
    int v39 = v65;
  }
  if (v39) {
    _Block_release(v39);
  }
  if (v60) {
    std::__shared_weak_count::__release_weak(v60);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v74);
  uint64_t v40 = (std::__shared_weak_count *)v1[2];
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  operator delete(v1);
  xpc_object_t v41 = (std::__shared_weak_count *)a1[2];
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  operator delete(a1);
}

void sub_1B8B90B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *aBlock)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v23 - 176));
  xpc_object_t v25 = (std::__shared_weak_count *)v22[2];
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  operator delete(v22);
  unint64_t v26 = (std::__shared_weak_count *)__p[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke_3(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        int v8 = *(_DWORD *)(a2 + 4);
        int v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Failed to send visit info", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully sent visit info", v10, 2u);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ArrivalTime>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ArrivalTime>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ArrivalTime>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1264038;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DepartureTime>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DepartureTime>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DepartureTime>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1264088;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendVisitInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B90F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B90F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B90F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t radio::QMIDebugCommandDriverM20::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  int v6 = operator new(0xF0uLL);
  uint64_t v7 = (uint64_t)v6;
  int v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  unint64_t v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMIDebugCommandDriverM20::QMIDebugCommandDriverM20((uint64_t)v6, (uint64_t)&v16, (uint64_t)v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIDebugCommandDriverM20>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriverM20,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1},void>(a3, v7);
  ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 80))(*a3, v11, v12);
}

void sub_1B8B91100(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8B91114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t radio::QMIDebugCommandDriverM20::QMIDebugCommandDriverM20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  int v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::DebugCommandDriver::DebugCommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1F12640C0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  return a1;
}

void sub_1B8B91288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void radio::DebugCommandDriver::~DebugCommandDriver(void **this)
{
  *this = &unk_1F1264378;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    uint64_t v2 = (std::__shared_weak_count *)this[14];
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
    {
LABEL_6:
      *this = &unk_1F12643E0;
      MEMORY[0x1BA9C75B0](this + 1);
      uint64_t v3 = this[12];
      if (!v3) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  *this = &unk_1F12643E0;
  MEMORY[0x1BA9C75B0](this + 1);
  uint64_t v3 = this[12];
  if (v3) {
LABEL_7:
  }
    dispatch_release(v3);
LABEL_8:
  uint64_t v4 = this[11];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[10];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void radio::QMIDebugCommandDriverM20::~QMIDebugCommandDriverM20(radio::QMIDebugCommandDriverM20 *this)
{
  *(void *)this = &unk_1F12640C0;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 208));
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 176));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 20));
  radio::DebugCommandDriver::~DebugCommandDriver((void **)this);
}

{
  void *v1;
  uint64_t vars8;

  radio::QMIDebugCommandDriverM20::~QMIDebugCommandDriverM20(this);

  operator delete(v1);
}

void radio::QMIDebugCommandDriverM20::init(radio::QMIDebugCommandDriverM20 *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_11_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = (uint64_t **)(v1 + 160);
  uint64_t v2 = *(uint64_t **)(v1 + 160);
  uint64_t v4 = (uint64_t **)(v1 + 160);
  uint64_t v5 = (uint64_t **)(v1 + 160);
  if (v2)
  {
    int v6 = *(uint64_t **)(v1 + 160);
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v6;
        unint64_t v7 = v6[4];
        if (v7 <= (unint64_t)"mhi.log") {
          break;
        }
        int v6 = *v5;
        uint64_t v4 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if (v7 >= (unint64_t)"mhi.log") {
        break;
      }
      int v6 = v5[1];
      if (!v6)
      {
        uint64_t v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v8 = (uint64_t *)v5;
    uint64_t v5 = (uint64_t **)operator new(0x30uLL);
    v5[4] = (uint64_t *)"mhi.log";
    *((_DWORD *)v5 + 10) = 0;
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = v8;
    *uint64_t v4 = (uint64_t *)v5;
    uint64_t v9 = **(void **)(v1 + 152);
    uint64_t v10 = (uint64_t *)v5;
    if (v9)
    {
      *(void *)(v1 + 152) = v9;
      uint64_t v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 160), v10);
    uint64_t v2 = *(uint64_t **)(v1 + 160);
    ++*(void *)(v1 + 168);
  }
  *((_DWORD *)v5 + 10) = 0;
  uint64_t v11 = (uint64_t **)(v1 + 160);
  uint64_t v12 = (uint64_t **)(v1 + 160);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v2;
        unint64_t v13 = v2[4];
        if (v13 <= (unint64_t)"pcie.log") {
          break;
        }
        uint64_t v2 = *v12;
        uint64_t v11 = v12;
        if (!*v12) {
          goto LABEL_18;
        }
      }
      if (v13 >= (unint64_t)"pcie.log") {
        break;
      }
      uint64_t v2 = v12[1];
      if (!v2)
      {
        uint64_t v11 = v12 + 1;
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    uint64_t v14 = (uint64_t *)v12;
    uint64_t v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)"pcie.log";
    *((_DWORD *)v12 + 10) = 0;
    *uint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *uint64_t v11 = (uint64_t *)v12;
    uint64_t v15 = **(void **)(v1 + 152);
    uint64_t v16 = (uint64_t *)v12;
    if (v15)
    {
      *(void *)(v1 + 152) = v15;
      uint64_t v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 160), v16);
    ++*(void *)(v1 + 168);
  }
  *((_DWORD *)v12 + 10) = 0;
  unint64_t v17 = *v3;
  unint64_t v18 = (uint64_t **)(v1 + 160);
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v18 = (uint64_t **)v17;
        unint64_t v19 = v17[4];
        if (v19 <= (unint64_t)"ipa.log") {
          break;
        }
        unint64_t v17 = *v18;
        uint64_t v3 = v18;
        if (!*v18) {
          goto LABEL_28;
        }
      }
      if (v19 >= (unint64_t)"ipa.log") {
        break;
      }
      unint64_t v17 = v18[1];
      if (!v17)
      {
        uint64_t v3 = v18 + 1;
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    xpc_object_t v20 = (uint64_t *)v18;
    unint64_t v18 = (uint64_t **)operator new(0x30uLL);
    v18[4] = (uint64_t *)"ipa.log";
    *((_DWORD *)v18 + 10) = 0;
    *unint64_t v18 = 0;
    v18[1] = 0;
    _OWORD v18[2] = v20;
    *uint64_t v3 = (uint64_t *)v18;
    uint64_t v21 = **(void **)(v1 + 152);
    xpc_object_t v22 = (uint64_t *)v18;
    if (v21)
    {
      *(void *)(v1 + 152) = v21;
      xpc_object_t v22 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 160), v22);
    ++*(void *)(v1 + 168);
  }
  *((_DWORD *)v18 + 10) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  unint64_t v79 = 0xAAAAAAAAAAAA0063;
  uint64_t v80 = 0x9AAAAAAAAAAAAAALL;
  uint64_t v78 = *(std::string::value_type **)"debug_ipc";
  memset(&__dst[1], 170, sizeof(std::string));
  Name = (const char *)radio::DebugCommandDriver::getName((radio::DebugCommandDriver *)v1);
  size_t v24 = strlen(Name);
  if (v24 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v25 = v24;
  if (v24 >= 0x17)
  {
    uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v27 = v24 | 7;
    }
    uint64_t v28 = v27 + 1;
    unint64_t v26 = (std::string *)operator new(v27 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v25;
    __dst[0].__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    goto LABEL_38;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v24;
  unint64_t v26 = __dst;
  if (v24) {
LABEL_38:
  }
    memmove(v26, Name, v25);
  v26->__r_.__value_.__s.__data_[v25] = 0;
  uint64_t v29 = std::string::append(__dst, "::", 2uLL);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(void *)&v76[16] = *((void *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v76 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v80 >= 0) {
    uint64_t v31 = (const std::string::value_type *)&v78;
  }
  else {
    uint64_t v31 = v78;
  }
  if (v80 >= 0) {
    std::string::size_type v32 = HIBYTE(v80);
  }
  else {
    std::string::size_type v32 = v79;
  }
  uint64_t v33 = std::string::append((std::string *)v76, v31, v32);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  __dst[1].__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((v76[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v76);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_47:
  __dst[0].__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst[0].__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection((uint64_t *)__dst, *(Registry **)(v1 + 104));
  if (!__dst[0].__r_.__value_.__r.__words[0])
  {
    uint64_t v52 = *(NSObject **)(v1 + 88);
    uint64_t v72 = v52;
    if (v52) {
      dispatch_retain(v52);
    }
    long long v53 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v53 || (uint64_t v54 = std::__shared_weak_count::lock(v53)) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v55 = v54;
    atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v56 = std::__shared_weak_count::lock(v54);
      if (v56)
      {
LABEL_106:
        atomic_fetch_add_explicit(&v56->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v71 = v56;
LABEL_107:
        std::__shared_weak_count::__release_weak(v55);
        if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        qmi::Client::createWithQueue();
        long long v57 = *(_OWORD *)&v76[16];
        *(_OWORD *)&v76[16] = 0uLL;
        uint64_t v58 = *(std::__shared_weak_count **)(v1 + 200);
        *(_OWORD *)(v1 + 192) = v57;
        if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
        qmi::Client::~Client((qmi::Client *)v76);
        if (v71) {
          std::__shared_weak_count::__release_weak(v71);
        }
        unint64_t v42 = v72;
        if (v72) {
          goto LABEL_69;
        }
        goto LABEL_70;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v55);
      long long v56 = std::__shared_weak_count::lock(v55);
      if (v56) {
        goto LABEL_106;
      }
    }
    uint64_t v71 = v56;
    goto LABEL_107;
  }
  xpc_object_t v35 = *(NSObject **)(v1 + 88);
  long long v75 = v35;
  if (v35) {
    dispatch_retain(v35);
  }
  char v36 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v36 || (uint64_t v37 = std::__shared_weak_count::lock(v36)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v38 = v37;
  atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v38);
    int v39 = std::__shared_weak_count::lock(v38);
    if (v39) {
      goto LABEL_54;
    }
LABEL_135:
    long long v74 = v39;
    goto LABEL_55;
  }
  int v39 = std::__shared_weak_count::lock(v37);
  if (!v39) {
    goto LABEL_135;
  }
LABEL_54:
  atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v74 = v39;
LABEL_55:
  std::__shared_weak_count::__release_weak(v38);
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  std::string::size_type size = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__dst[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v40 = *(_OWORD *)&v76[16];
  *(_OWORD *)&v76[16] = 0uLL;
  xpc_object_t v41 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v40;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  qmi::Client::~Client((qmi::Client *)v76);
  if (size && !atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  if (v74) {
    std::__shared_weak_count::__release_weak(v74);
  }
  unint64_t v42 = v75;
  if (v75) {
LABEL_69:
  }
    dispatch_release(v42);
LABEL_70:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::start((qmi::Client *)(v1 + 176));
  if (!__dst[0].__r_.__value_.__r.__words[0])
  {
    int v59 = *(NSObject **)(v1 + 88);
    uint64_t v67 = v59;
    if (v59) {
      dispatch_retain(v59);
    }
    uint64_t v60 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v60 || (uint64_t v61 = std::__shared_weak_count::lock(v60)) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v62 = v61;
    atomic_fetch_add_explicit(&v61->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int v63 = std::__shared_weak_count::lock(v61);
      if (v63)
      {
LABEL_123:
        atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v66 = v63;
LABEL_124:
        std::__shared_weak_count::__release_weak(v62);
        if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        qmi::Client::createWithQueue();
        long long v64 = *(_OWORD *)&v76[16];
        *(_OWORD *)&v76[16] = 0uLL;
        xpc_object_t v65 = *(std::__shared_weak_count **)(v1 + 232);
        *(_OWORD *)(v1 + 224) = v64;
        if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
        qmi::Client::~Client((qmi::Client *)v76);
        if (v66) {
          std::__shared_weak_count::__release_weak(v66);
        }
        unint64_t v50 = v67;
        if (v67) {
          goto LABEL_92;
        }
        goto LABEL_93;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v62);
      int v63 = std::__shared_weak_count::lock(v62);
      if (v63) {
        goto LABEL_123;
      }
    }
    xpc_object_t v66 = v63;
    goto LABEL_124;
  }
  uint64_t v43 = *(NSObject **)(v1 + 88);
  dispatch_object_t object = v43;
  if (v43) {
    dispatch_retain(v43);
  }
  char v44 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v44 || (char v45 = std::__shared_weak_count::lock(v44)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v46 = v45;
  atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v46);
    uint64_t v47 = std::__shared_weak_count::lock(v46);
    if (v47) {
      goto LABEL_77;
    }
LABEL_137:
    int v69 = v47;
    goto LABEL_78;
  }
  uint64_t v47 = std::__shared_weak_count::lock(v45);
  if (!v47) {
    goto LABEL_137;
  }
LABEL_77:
  atomic_fetch_add_explicit(&v47->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v69 = v47;
LABEL_78:
  std::__shared_weak_count::__release_weak(v46);
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  uint64_t v68 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__dst[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v48 = *(_OWORD *)&v76[16];
  *(_OWORD *)&v76[16] = 0uLL;
  uint64_t v49 = *(std::__shared_weak_count **)(v1 + 232);
  *(_OWORD *)(v1 + 224) = v48;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  qmi::Client::~Client((qmi::Client *)v76);
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  if (v69) {
    std::__shared_weak_count::__release_weak(v69);
  }
  unint64_t v50 = object;
  if (object) {
LABEL_92:
  }
    dispatch_release(v50);
LABEL_93:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::start((qmi::Client *)(v1 + 208));
  uint64_t v51 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__dst[0].__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_96:
      if ((SHIBYTE(v80) & 0x80000000) == 0) {
        return;
      }
LABEL_140:
      operator delete(v78);
      return;
    }
  }
  else if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_96;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v80) < 0) {
    goto LABEL_140;
  }
}

void sub_1B8B921F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,dispatch_object_t object,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v39 - 152);
  if (*(char *)(v39 - 105) < 0) {
    operator delete(*(void **)(v39 - 128));
  }
  if (*(char *)(v39 - 81) < 0) {
    operator delete(*(void **)(v39 - 104));
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(radio::QMIDebugCommandDriverM20 **)(a1 + 32);
  uint64_t v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_debug_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEBUG, "#D APPS started", v3, 2u);
    radio::QMIDebugCommandDriverM20::getIPCInfo_sync(v1);
  }
  else
  {
    radio::QMIDebugCommandDriverM20::getIPCInfo_sync(v1);
  }
}

void radio::QMIDebugCommandDriverM20::getIPCInfo_sync(radio::QMIDebugCommandDriverM20 *this)
{
  if (*((void *)this + 24))
  {
    *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[0] = v2;
    v10[1] = v2;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
    v5[5] = (char *)this + 176;
    uint64_t v6 = QMIServiceMsg::create();
    int v7 = 25000;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZN5radio24QMIDebugCommandDriverM2015getIPCInfo_syncEv_block_invoke;
    v5[3] = &__block_descriptor_tmp_24_1;
    v5[4] = this;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetIPCInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_1E6194CE0;
    aBlock[4] = v5;
    uint64_t v3 = _Block_copy(aBlock);
    uint64_t v9 = v3;
    if (v6)
    {
      qmi::Client::send();
      uint64_t v3 = v9;
    }
    if (v3) {
      _Block_release(v3);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
  }
  else
  {
    uint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(aBlock[0]) = 0;
      _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "No APPS client, bail", (uint8_t *)aBlock, 2u);
    }
  }
}

void sub_1B8B924F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B92510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_4(uint64_t a1, xpc_object_t object)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v8 = object;
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v8 = v3;
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  xpc::object::to_string((uint64_t *)__p, (xpc::object *)&v8);
  if (v7 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  *(_DWORD *)buf = 136315138;
  uint64_t v10 = v5;
  _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "APPS server error %s", buf, 0xCu);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v3 = v8;
LABEL_5:
  xpc_release(v3);
}

void sub_1B8B9263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_7(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D BSP started", v2, 2u);
  }
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_9(uint64_t a1, xpc_object_t object)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v8 = object;
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v8 = v3;
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  xpc::object::to_string((uint64_t *)__p, (xpc::object *)&v8);
  if (v7 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  *(_DWORD *)buf = 136315138;
  uint64_t v10 = v5;
  _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "BSP server error %s", buf, 0xCu);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v3 = v8;
LABEL_5:
  xpc_release(v3);
}

void sub_1B8B927F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void radio::QMIDebugCommandDriverM20::updateProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZN5radio24QMIDebugCommandDriverM2014updatePropertyENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7__block_invoke;
  v5[3] = &__block_descriptor_tmp_12_0;
  v5[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v6 = *(std::string *)a2;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      std::string __p = *(std::string *)a3;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_6:
  ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v5);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
}

void sub_1B8B92948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio24QMIDebugCommandDriverM2014updatePropertyENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(radio::QMIDebugCommandDriverM20 **)(a1 + 32);
  unsigned int v6 = -1;
  *(_DWORD *)char v7 = -1;
  char v5 = 8;
  strcpy(v4, "LogLevel");
  if (*(char *)(a1 + 63) >= 0) {
    xpc_object_t v3 = (const char *)(a1 + 40);
  }
  else {
    xpc_object_t v3 = *(const char **)(a1 + 40);
  }
  if (!strcasecmp(v3, v4))
  {
    if ((util::convert<int>((const std::string *)(a1 + 64), v7, 0) & 1) == 0) {
      return;
    }
    if (*(_DWORD *)v7 <= 0xFFu)
    {
      radio::QMIDebugCommandDriverM20::setMHILogLevel_sync(v2, v7[0]);
      radio::QMIDebugCommandDriverM20::setPCIeLogLevel_sync(v2, v7[0]);
      return;
    }
    goto LABEL_11;
  }
  char v5 = 11;
  strcpy(v4, "PayloadSize");
  if (!strcasecmp(v3, v4) && (util::convert<int>((const std::string *)(a1 + 64), &v6, 0) & 1) != 0)
  {
LABEL_11:
    if ((v6 & 0x80000000) == 0) {
      radio::QMIDebugCommandDriverM20::configMHILogPayload_sync(v2, v6);
    }
  }
}

void radio::QMIDebugCommandDriverM20::setMHILogLevel_sync(radio::QMIDebugCommandDriverM20 *this, char a2)
{
  if (*((void *)this + 24))
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v22 = v4;
    long long v23 = v4;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v22);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    char v5 = ___ZN5radio24QMIDebugCommandDriverM2019setMHILogLevel_syncEh_block_invoke;
    unint64_t v19 = ___ZN5radio24QMIDebugCommandDriverM2019setMHILogLevel_syncEh_block_invoke;
    xpc_object_t v20 = &__block_descriptor_tmp_20;
    char v21 = a2;
    unsigned int v6 = (const void **)*((void *)&v22 + 1);
    if (*((void *)&v22 + 1) != (void)v23)
    {
      while (*((unsigned char *)*v6 + 8) != 1)
      {
        if (++v6 == (const void **)v23) {
          goto LABEL_11;
        }
      }
    }
    if (v6 == (const void **)v23)
    {
LABEL_11:
      xpc_object_t v8 = qmi::MutableMessageBase::createTLV<apps::tlv::abm::Level>(&v22);
      char v5 = v19;
    }
    else
    {
      if (!v7) {
        __cxa_bad_cast();
      }
      xpc_object_t v8 = v7 + 9;
    }
    v5((uint64_t)v18, v8);
    unint64_t v13 = (char *)this + 176;
    uint64_t v14 = QMIServiceMsg::create();
    int v15 = 25000;
    uint64_t v16 = 0;
    uint64_t aBlock = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    uint64_t v11[2] = ___ZN5radio24QMIDebugCommandDriverM2019setMHILogLevel_syncEh_block_invoke_2;
    v11[3] = &__block_descriptor_tmp_21_0;
    void v11[4] = this;
    char v12 = a2;
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v25 = 0x40000000;
    unint64_t v26 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm14SetMHILogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v27 = &unk_1E6194C90;
    uint64_t v28 = v11;
    uint64_t v10 = _Block_copy(buf);
    uint64_t aBlock = v10;
    if (v14)
    {
      qmi::Client::send();
      uint64_t v10 = aBlock;
    }
    if (v10) {
      _Block_release(v10);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v22);
  }
  else
  {
    uint64_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "No APPS client, bail", buf, 2u);
    }
  }
}

void sub_1B8B92D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B92D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B92D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::setPCIeLogLevel_sync(radio::QMIDebugCommandDriverM20 *this, char a2)
{
  if (*((void *)this + 24))
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v22 = v4;
    long long v23 = v4;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v22);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    char v5 = ___ZN5radio24QMIDebugCommandDriverM2020setPCIeLogLevel_syncEh_block_invoke;
    unint64_t v19 = ___ZN5radio24QMIDebugCommandDriverM2020setPCIeLogLevel_syncEh_block_invoke;
    xpc_object_t v20 = &__block_descriptor_tmp_22_1;
    char v21 = a2;
    unsigned int v6 = (const void **)*((void *)&v22 + 1);
    if (*((void *)&v22 + 1) != (void)v23)
    {
      while (*((unsigned char *)*v6 + 8) != 1)
      {
        if (++v6 == (const void **)v23) {
          goto LABEL_11;
        }
      }
    }
    if (v6 == (const void **)v23)
    {
LABEL_11:
      uint64_t v8 = qmi::MutableMessageBase::createTLV<apps::tlv::abm::Level>(&v22);
      char v5 = v19;
    }
    else
    {
      if (!v7) {
        __cxa_bad_cast();
      }
      uint64_t v8 = v7 + 9;
    }
    v5((uint64_t)v18, v8);
    uint64_t v13 = (char *)this + 176;
    uint64_t v14 = QMIServiceMsg::create();
    int v15 = 25000;
    uint64_t v16 = 0;
    uint64_t aBlock = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    uint64_t v11[2] = ___ZN5radio24QMIDebugCommandDriverM2020setPCIeLogLevel_syncEh_block_invoke_2;
    v11[3] = &__block_descriptor_tmp_23_1;
    void v11[4] = this;
    char v12 = a2;
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v25 = 0x40000000;
    unint64_t v26 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15SetPCIeLogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v27 = &unk_1E6194CB8;
    uint64_t v28 = v11;
    uint64_t v10 = _Block_copy(buf);
    uint64_t aBlock = v10;
    if (v14)
    {
      qmi::Client::send();
      uint64_t v10 = aBlock;
    }
    if (v10) {
      _Block_release(v10);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v22);
  }
  else
  {
    uint64_t v9 = *((void *)this + 5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "No APPS client, bail", buf, 2u);
    }
  }
}

void sub_1B8B92FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B92FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B92FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::configMHILogPayload_sync(radio::QMIDebugCommandDriverM20 *this, int a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v42 = v4;
  long long v43 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v42);
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 0x40000000;
  char v5 = (uint64_t (*)(uint64_t, char *))___ZN5radio24QMIDebugCommandDriverM2024configMHILogPayload_syncEj_block_invoke;
  uint64_t v39 = (uint64_t (*)(uint64_t, char *))___ZN5radio24QMIDebugCommandDriverM2024configMHILogPayload_syncEj_block_invoke;
  long long v40 = &__block_descriptor_tmp_14_3;
  int v41 = a2;
  unsigned int v6 = (char *)*((void *)&v42 + 1);
  char v7 = (char *)v43;
  uint64_t v8 = (const void **)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1) != (void)v43)
  {
    uint64_t v8 = (const void **)*((void *)&v42 + 1);
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v43) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == (const void **)v43)
  {
LABEL_9:
    uint64_t v11 = operator new(0x10uLL);
    uint64_t v12 = v11;
    v11[8] = 1;
    *(void *)uint64_t v11 = &unk_1F12644C0;
    *((_DWORD *)v11 + 3) = 0;
    uint64_t v10 = v11 + 12;
    if ((unint64_t)v7 < *((void *)&v43 + 1))
    {
      *(void *)char v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_22:
      *(void *)&long long v43 = v13;
      char v5 = v39;
      goto LABEL_23;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v43 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v43 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v19 = operator new(8 * v18);
      xpc_object_t v20 = &v19[8 * v15];
      char v21 = &v19[8 * v18];
      *xpc_object_t v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((void *)&v42 + 1) = v20;
        *(void *)&long long v43 = v13;
        *((void *)&v43 + 1) = v21;
        if (!v6) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v19 = 0;
      xpc_object_t v20 = (void *)(8 * v15);
      char v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_42;
    }
    unint64_t v23 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v25 = &v7[-v24];
    xpc_object_t v20 = (void *)((char *)v20 - v24);
    unint64_t v26 = &v19[8 * v15 - 16];
    uint64_t v27 = v7 - 16;
    uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *unint64_t v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    char v7 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        uint64_t v30 = *((void *)v7 - 1);
        v7 -= 8;
        *--xpc_object_t v20 = v30;
      }
      while (v7 != v6);
    }
    unsigned int v6 = (char *)*((void *)&v42 + 1);
    *((void *)&v42 + 1) = v20;
    *(void *)&long long v43 = v13;
    *((void *)&v43 + 1) = v21;
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9 + 12;
LABEL_23:
  v5((uint64_t)v38, v10);
  uint64_t v33 = (char *)this + 176;
  uint64_t v34 = QMIServiceMsg::create();
  int v35 = 25000;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 0x40000000;
  v31[2] = ___ZN5radio24QMIDebugCommandDriverM2024configMHILogPayload_syncEj_block_invoke_2;
  v31[3] = &__block_descriptor_tmp_18;
  v31[4] = this;
  int v32 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm19ConfigMHILogPayload8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6194C68;
  aBlock[4] = v31;
  long long v22 = _Block_copy(aBlock);
  uint64_t v37 = v22;
  if (v34)
  {
    qmi::Client::send();
    long long v22 = v37;
  }
  if (v22) {
    _Block_release(v22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v42);
}

void sub_1B8B933B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8B933D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8B933E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    char v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    char v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
}

void sub_1B8B93498(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      return;
    }
  }
  else if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 40);

  operator delete(v2);
}

uint64_t ___ZN5radio24QMIDebugCommandDriverM2024configMHILogPayload_syncEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN5radio24QMIDebugCommandDriverM2024configMHILogPayload_syncEj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 40);
    long long v6 = "Failed";
    if (!*(_DWORD *)(a2 + 4)) {
      long long v6 = "Success";
    }
    v7[0] = 67109378;
    v7[1] = v5;
    __int16 v8 = 2080;
    uint64_t v9 = v6;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Config MHI Log payload to %d: %s", (uint8_t *)v7, 0x12u);
  }
}

uint64_t ___ZN5radio24QMIDebugCommandDriverM2019setMHILogLevel_syncEh_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN5radio24QMIDebugCommandDriverM2019setMHILogLevel_syncEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 40);
    long long v6 = "Failed";
    if (!*(_DWORD *)(a2 + 4)) {
      long long v6 = "Success";
    }
    v7[0] = 67109378;
    v7[1] = v5;
    __int16 v8 = 2080;
    uint64_t v9 = v6;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Set MHI Log Level to %d: %s", (uint8_t *)v7, 0x12u);
  }
}

uint64_t ___ZN5radio24QMIDebugCommandDriverM2020setPCIeLogLevel_syncEh_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN5radio24QMIDebugCommandDriverM2020setPCIeLogLevel_syncEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 40);
    long long v6 = "Failed";
    if (!*(_DWORD *)(a2 + 4)) {
      long long v6 = "Success";
    }
    v7[0] = 67109378;
    v7[1] = v5;
    __int16 v8 = 2080;
    uint64_t v9 = v6;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Set PCIe Log Level to %d: %s", (uint8_t *)v7, 0x12u);
  }
}

float ___ZN5radio24QMIDebugCommandDriverM2015getIPCInfo_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 1))
  {
    xpc_object_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v68[0]) = 0;
      _os_log_error_impl(&dword_1B8B00000, v3, OS_LOG_TYPE_ERROR, "Failed to get IPC log Info", (uint8_t *)v68, 2u);
    }
  }
  else
  {
    uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      __int16 v8 = TlvValue;
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v7, (const unsigned __int8 *)4);
      *(_DWORD *)(v2 + 144) = *(_DWORD *)v8;
    }
    uint64_t v9 = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (v9)
    {
      uint64_t v11 = v9;
      tlv::throwIfNotEnoughBytes(v9, (const unsigned __int8 *)v9 + v10, (const unsigned __int8 *)4);
      int v12 = *(_DWORD *)v11;
      uint64_t v14 = (uint64_t **)(v2 + 160);
      uint64_t v13 = *(uint64_t **)(v2 + 160);
      if (v13)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v15 = (uint64_t **)v13;
            unint64_t v16 = v13[4];
            if (v16 <= (unint64_t)"mhi.log") {
              break;
            }
            uint64_t v13 = *v15;
            uint64_t v14 = v15;
            if (!*v15) {
              goto LABEL_14;
            }
          }
          if (v16 >= (unint64_t)"mhi.log") {
            break;
          }
          uint64_t v13 = v15[1];
          if (!v13)
          {
            uint64_t v14 = v15 + 1;
            goto LABEL_14;
          }
        }
      }
      else
      {
        uint64_t v15 = (uint64_t **)(v2 + 160);
LABEL_14:
        uint64_t v17 = (uint64_t *)v15;
        uint64_t v15 = (uint64_t **)operator new(0x30uLL);
        v15[4] = (uint64_t *)"mhi.log";
        *((_DWORD *)v15 + 10) = 0;
        *uint64_t v15 = 0;
        v15[1] = 0;
        void v15[2] = v17;
        *uint64_t v14 = (uint64_t *)v15;
        uint64_t v18 = **(void **)(v2 + 152);
        unint64_t v19 = (uint64_t *)v15;
        if (v18)
        {
          *(void *)(v2 + 152) = v18;
          unint64_t v19 = *v14;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v19);
        ++*(void *)(v2 + 168);
      }
      *((_DWORD *)v15 + 10) = v12;
    }
    xpc_object_t v20 = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (v20)
    {
      long long v22 = v20;
      tlv::throwIfNotEnoughBytes(v20, (const unsigned __int8 *)v20 + v21, (const unsigned __int8 *)4);
      int v23 = *(_DWORD *)v22;
      uint64_t v25 = (uint64_t **)(v2 + 160);
      uint64_t v24 = *(uint64_t **)(v2 + 160);
      if (v24)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v26 = (uint64_t **)v24;
            unint64_t v27 = v24[4];
            if (v27 <= (unint64_t)"pcie.log") {
              break;
            }
            uint64_t v24 = *v26;
            uint64_t v25 = v26;
            if (!*v26) {
              goto LABEL_26;
            }
          }
          if (v27 >= (unint64_t)"pcie.log") {
            break;
          }
          uint64_t v24 = v26[1];
          if (!v24)
          {
            uint64_t v25 = v26 + 1;
            goto LABEL_26;
          }
        }
      }
      else
      {
        unint64_t v26 = (uint64_t **)(v2 + 160);
LABEL_26:
        uint64_t v28 = (uint64_t *)v26;
        unint64_t v26 = (uint64_t **)operator new(0x30uLL);
        v26[4] = (uint64_t *)"pcie.log";
        *((_DWORD *)v26 + 10) = 0;
        *unint64_t v26 = 0;
        v26[1] = 0;
        v26[2] = v28;
        *uint64_t v25 = (uint64_t *)v26;
        uint64_t v29 = **(void **)(v2 + 152);
        uint64_t v30 = (uint64_t *)v26;
        if (v29)
        {
          *(void *)(v2 + 152) = v29;
          uint64_t v30 = *v25;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v30);
        ++*(void *)(v2 + 168);
      }
      *((_DWORD *)v26 + 10) = v23;
    }
    uint64_t v31 = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (v31)
    {
      uint64_t v33 = v31;
      tlv::throwIfNotEnoughBytes(v31, (const unsigned __int8 *)v31 + v32, (const unsigned __int8 *)4);
      int v34 = *(_DWORD *)v33;
      uint64_t v36 = (uint64_t **)(v2 + 160);
      int v35 = *(uint64_t **)(v2 + 160);
      if (v35)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v37 = (uint64_t **)v35;
            unint64_t v38 = v35[4];
            if (v38 <= (unint64_t)"ipa.log") {
              break;
            }
            int v35 = *v37;
            uint64_t v36 = v37;
            if (!*v37) {
              goto LABEL_38;
            }
          }
          if (v38 >= (unint64_t)"ipa.log") {
            break;
          }
          int v35 = v37[1];
          if (!v35)
          {
            uint64_t v36 = v37 + 1;
            goto LABEL_38;
          }
        }
      }
      else
      {
        uint64_t v37 = (uint64_t **)(v2 + 160);
LABEL_38:
        uint64_t v39 = (uint64_t *)v37;
        uint64_t v37 = (uint64_t **)operator new(0x30uLL);
        v37[4] = (uint64_t *)"ipa.log";
        *((_DWORD *)v37 + 10) = 0;
        void *v37 = 0;
        v37[1] = 0;
        v37[2] = v39;
        std::__shared_weak_count *v36 = (uint64_t *)v37;
        uint64_t v40 = **(void **)(v2 + 152);
        int v41 = (uint64_t *)v37;
        if (v40)
        {
          *(void *)(v2 + 152) = v40;
          int v41 = *v36;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v41);
        ++*(void *)(v2 + 168);
      }
      *((_DWORD *)v37 + 10) = v34;
    }
    long long v42 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      char v44 = (uint64_t **)(v2 + 160);
      long long v43 = *(uint64_t **)(v2 + 160);
      int v45 = *(_DWORD *)(v2 + 144);
      long long v46 = (uint64_t **)(v2 + 160);
      uint64_t v47 = (uint64_t **)(v2 + 160);
      if (v43)
      {
        long long v48 = *(uint64_t **)(v2 + 160);
        while (1)
        {
          while (1)
          {
            uint64_t v47 = (uint64_t **)v48;
            unint64_t v49 = v48[4];
            if (v49 <= (unint64_t)"mhi.log") {
              break;
            }
            long long v48 = *v47;
            long long v46 = v47;
            if (!*v47) {
              goto LABEL_50;
            }
          }
          if (v49 >= (unint64_t)"mhi.log") {
            break;
          }
          long long v48 = v47[1];
          if (!v48)
          {
            long long v46 = v47 + 1;
            goto LABEL_50;
          }
        }
      }
      else
      {
LABEL_50:
        unint64_t v50 = (uint64_t *)v47;
        uint64_t v47 = (uint64_t **)operator new(0x30uLL);
        v47[4] = (uint64_t *)"mhi.log";
        *((_DWORD *)v47 + 10) = 0;
        std::__shared_weak_count *v47 = 0;
        v47[1] = 0;
        void v47[2] = v50;
        *long long v46 = (uint64_t *)v47;
        uint64_t v51 = **(void **)(v2 + 152);
        uint64_t v52 = (uint64_t *)v47;
        if (v51)
        {
          *(void *)(v2 + 152) = v51;
          uint64_t v52 = *v46;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v52);
        long long v43 = *(uint64_t **)(v2 + 160);
        ++*(void *)(v2 + 168);
      }
      int v53 = *((_DWORD *)v47 + 10);
      uint64_t v54 = (uint64_t **)(v2 + 160);
      uint64_t v55 = (uint64_t **)(v2 + 160);
      if (v43)
      {
        long long v56 = v43;
        while (1)
        {
          while (1)
          {
            uint64_t v55 = (uint64_t **)v56;
            unint64_t v57 = v56[4];
            if (v57 <= (unint64_t)"pcie.log") {
              break;
            }
            long long v56 = *v55;
            uint64_t v54 = v55;
            if (!*v55) {
              goto LABEL_60;
            }
          }
          if (v57 >= (unint64_t)"pcie.log") {
            break;
          }
          long long v56 = v55[1];
          if (!v56)
          {
            uint64_t v54 = v55 + 1;
            goto LABEL_60;
          }
        }
      }
      else
      {
LABEL_60:
        uint64_t v58 = (uint64_t *)v55;
        uint64_t v55 = (uint64_t **)operator new(0x30uLL);
        v55[4] = (uint64_t *)"pcie.log";
        *((_DWORD *)v55 + 10) = 0;
        *uint64_t v55 = 0;
        v55[1] = 0;
        void v55[2] = v58;
        *uint64_t v54 = (uint64_t *)v55;
        uint64_t v59 = **(void **)(v2 + 152);
        uint64_t v60 = (uint64_t *)v55;
        if (v59)
        {
          *(void *)(v2 + 152) = v59;
          uint64_t v60 = *v54;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v60);
        long long v43 = *(uint64_t **)(v2 + 160);
        ++*(void *)(v2 + 168);
      }
      int v61 = *((_DWORD *)v55 + 10);
      uint64_t v62 = (uint64_t **)(v2 + 160);
      if (v43)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v62 = (uint64_t **)v43;
            unint64_t v63 = v43[4];
            if (v63 <= (unint64_t)"ipa.log") {
              break;
            }
            long long v43 = *v62;
            char v44 = v62;
            if (!*v62) {
              goto LABEL_70;
            }
          }
          if (v63 >= (unint64_t)"ipa.log") {
            break;
          }
          long long v43 = v62[1];
          if (!v43)
          {
            char v44 = v62 + 1;
            goto LABEL_70;
          }
        }
      }
      else
      {
LABEL_70:
        long long v64 = (uint64_t *)v62;
        uint64_t v62 = (uint64_t **)operator new(0x30uLL);
        v62[4] = (uint64_t *)"ipa.log";
        *((_DWORD *)v62 + 10) = 0;
        std::__shared_weak_count *v62 = 0;
        v62[1] = 0;
        v62[2] = v64;
        *char v44 = (uint64_t *)v62;
        uint64_t v65 = **(void **)(v2 + 152);
        xpc_object_t v66 = (uint64_t *)v62;
        if (v65)
        {
          *(void *)(v2 + 152) = v65;
          xpc_object_t v66 = *v44;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v66);
        ++*(void *)(v2 + 168);
      }
      int v67 = *((_DWORD *)v62 + 10);
      v68[0] = 67109888;
      v68[1] = v45;
      __int16 v69 = 1024;
      int v70 = v53;
      __int16 v71 = 1024;
      int v72 = v61;
      __int16 v73 = 1024;
      int v74 = v67;
      _os_log_impl(&dword_1B8B00000, v42, OS_LOG_TYPE_DEFAULT, "#I IPC Info: blockSize= %d, MHI buffer=%d, PCIe buffer=%d, IPA buffer=%d", (uint8_t *)v68, 0x1Au);
    }
  }
  return result;
}

void sub_1B8B93D18(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v2, 6, v3, v4);
    JUMPOUT(0x1B8B93ABCLL);
  }
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::queryIPCLogs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[2] = a3;
  uint64_t v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_24QMIDebugCommandDriverM2012queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke;
  block[3] = &__block_descriptor_tmp_102_0;
  void block[4] = a1 + 72;
  void block[5] = v5;
  uint64_t v4 = a1 + 88;
  uint64_t v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void radio::QMIDebugCommandDriverM20::queryIPCLogs_sync(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3802000000;
  v25[3] = __Block_byref_object_copy__6;
  v25[4] = __Block_byref_object_dispose__6;
  unint64_t v26 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v27 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v6 = _Block_copy(v6);
  }
  int v7 = *(NSObject **)(a3 + 8);
  unint64_t v26 = v6;
  dispatch_object_t v27 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v19 = 0;
  xpc_object_t v20 = &v19;
  uint64_t v21 = 0x3002000000;
  long long v22 = __Block_byref_object_copy__25;
  int v23 = __Block_byref_object_dispose__26;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  v17[0] = 0;
  v17[1] = v17;
  void v17[2] = 0x2000000000;
  char v18 = 0;
  CFMutableDictionaryRef v16 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v9 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v16 = Mutable;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_1F12641C0;
  void aBlock[7] = a1;
  CFTypeRef cf = Mutable;
  if (Mutable) {
    CFRetain(Mutable);
  }
  aBlock[4] = v17;
  void aBlock[5] = v25;
  void aBlock[6] = &v19;
  int v10 = _Block_copy(aBlock);
  uint64_t v15 = v10;
  radio::QMIDebugCommandDriverM20::getMHILog_sync(a1, &v15);
  if (v10) {
    _Block_release(v10);
  }
  uint64_t v11 = v20[5];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_38;
  v12[3] = &unk_1E6194C40;
  v12[4] = v25;
  void v12[5] = &v19;
  dispatch_source_set_event_handler(v11, v12);
  dispatch_source_set_timer((dispatch_source_t)v20[5], a2, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
  dispatch_activate((dispatch_object_t)v20[5]);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(&v19, 8);
  if (object) {
    dispatch_release(object);
  }
  _Block_object_dispose(v25, 8);
  if (v27) {
    dispatch_release(v27);
  }
  if (v26) {
    _Block_release(v26);
  }
}

void sub_1B8B9418C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,dispatch_object_t object)
{
  if (v37) {
    _Block_release(v37);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v38);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a25);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  if (object) {
    dispatch_release(object);
  }
  _Block_object_dispose((const void *)(v40 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v39 + 40);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

void radio::QMIDebugCommandDriverM20::getMHILog_sync(uint64_t a1, const void **a2)
{
  if (!*(_DWORD *)(a1 + 144)) {
    goto LABEL_45;
  }
  int v5 = (uint64_t **)(a1 + 160);
  uint64_t v4 = *(uint64_t **)(a1 + 160);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= (unint64_t)"mhi.log") {
          break;
        }
        uint64_t v4 = *v6;
        int v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= (unint64_t)"mhi.log") {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        int v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 160);
LABEL_9:
    __int16 v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x30uLL);
    v6[4] = (uint64_t *)"mhi.log";
    *((_DWORD *)v6 + 10) = 0;
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *int v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 152);
    int v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 152) = v9;
      int v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v10);
    ++*(void *)(a1 + 168);
  }
  if (*((_DWORD *)v6 + 10))
  {
    CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFMutableDataRef v12 = Mutable;
    CFMutableDataRef v23 = Mutable;
    if (Mutable) {
      uint64_t v13 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
      CFMutableDataRef v16 = Mutable;
      if (Mutable) {
        CFRetain(Mutable);
      }
      if (*a2) {
        uint64_t v14 = _Block_copy(*a2);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14;
      radio::QMIDebugCommandDriverM20::getMHILogBlock_sync(a1, (const void **)&v16, &v15);
      if (v14) {
        _Block_release(v14);
      }
      if (v12)
      {
        CFRelease(v12);
LABEL_42:
        CFRelease(v12);
      }
    }
    else
    {
      if (*a2)
      {
        char v18 = operator new(0x28uLL);
        long long v19 = xmmword_1B8C32860;
        strcpy((char *)v18, "Error on Memory allocation for MHI logs");
        CreateError();
        CFTypeRef v17 = 0;
        dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, &cf, &v17);
        if (v17) {
          CFRelease(v17);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v19) < 0) {
          operator delete(v18);
        }
      }
      if (v12) {
        goto LABEL_42;
      }
    }
  }
  else
  {
LABEL_45:
    if (*a2)
    {
      std::string __p = operator new(0x20uLL);
      long long v22 = xmmword_1B8C31660;
      strcpy((char *)__p, "Invalid Regioninfo for MHI");
      CreateError();
      CFTypeRef cf = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, (const void **)&v23, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_1B8B944D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v20 - 56));
  _Unwind_Resume(a1);
}

void sub_1B8B94554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v22 - 56));
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *a2;
  if (*a2) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    unint64_t v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v5;
      _os_log_error_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_ERROR, "Failed to get MHI log: %@", buf, 0xCu);
    }
  }
  else
  {
    if (*a3) {
      uint64_t v11 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 && CFDataGetLength((CFDataRef)*a3) >= 1)
    {
      ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 64), (const __CFString **)"mhi.log", *a3, *MEMORY[0x1E4F1CF80], v12);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_27;
  v13[3] = &unk_1F1264188;
  __int16 v8 = *(const void **)(a1 + 64);
  uint64_t v16 = v4;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v9 = _Block_copy(v13);
  char v18 = v9;
  radio::QMIDebugCommandDriverM20::getPCIeLog_sync(v4, &v18);
  if (v9) {
    _Block_release(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B94754(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void radio::QMIDebugCommandDriverM20::getPCIeLog_sync(uint64_t a1, const void **a2)
{
  if (!*(_DWORD *)(a1 + 144)) {
    goto LABEL_45;
  }
  uint64_t v5 = (uint64_t **)(a1 + 160);
  uint64_t v4 = *(uint64_t **)(a1 + 160);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= (unint64_t)"pcie.log") {
          break;
        }
        uint64_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= (unint64_t)"pcie.log") {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 160);
LABEL_9:
    __int16 v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x30uLL);
    v6[4] = (uint64_t *)"pcie.log";
    *((_DWORD *)v6 + 10) = 0;
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *uint64_t v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 152);
    int v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 152) = v9;
      int v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v10);
    ++*(void *)(a1 + 168);
  }
  if (*((_DWORD *)v6 + 10))
  {
    CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFMutableDataRef v12 = Mutable;
    CFMutableDataRef v23 = Mutable;
    if (Mutable) {
      uint64_t v13 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
      CFMutableDataRef v16 = Mutable;
      if (Mutable) {
        CFRetain(Mutable);
      }
      if (*a2) {
        long long v14 = _Block_copy(*a2);
      }
      else {
        long long v14 = 0;
      }
      uint64_t v15 = v14;
      radio::QMIDebugCommandDriverM20::getPCIeLogBlock_sync(a1, (const void **)&v16, &v15);
      if (v14) {
        _Block_release(v14);
      }
      if (v12)
      {
        CFRelease(v12);
LABEL_42:
        CFRelease(v12);
      }
    }
    else
    {
      if (*a2)
      {
        char v18 = operator new(0x30uLL);
        long long v19 = xmmword_1B8C32870;
        strcpy((char *)v18, "Error on Memory allocation for PCIe log block");
        CreateError();
        CFTypeRef v17 = 0;
        dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, &cf, &v17);
        if (v17) {
          CFRelease(v17);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v19) < 0) {
          operator delete(v18);
        }
      }
      if (v12) {
        goto LABEL_42;
      }
    }
  }
  else
  {
LABEL_45:
    if (*a2)
    {
      std::string __p = operator new(0x20uLL);
      long long v22 = xmmword_1B8C32880;
      strcpy((char *)__p, "Invalid Regioninfo for PCIe");
      CreateError();
      CFTypeRef cf = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, (const void **)&v23, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_1B8B94A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v20 - 56));
  _Unwind_Resume(a1);
}

void sub_1B8B94AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v22 - 56));
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_27(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *a2;
  if (*a2) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    unint64_t v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v5;
      _os_log_error_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_ERROR, "Failed to get PCIe log: %@", buf, 0xCu);
    }
  }
  else
  {
    if (*a3) {
      uint64_t v11 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11 && CFDataGetLength((CFDataRef)*a3) >= 1)
    {
      ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 64), (const __CFString **)"pcie.log", *a3, *MEMORY[0x1E4F1CF80], v12);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_28;
  v13[3] = &unk_1F1264150;
  __int16 v8 = *(const void **)(a1 + 64);
  uint64_t v16 = v4;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v9 = _Block_copy(v13);
  char v18 = v9;
  radio::QMIDebugCommandDriverM20::getIPALog_sync(v4, &v18);
  if (v9) {
    _Block_release(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8B94CD0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void radio::QMIDebugCommandDriverM20::getIPALog_sync(uint64_t a1, const void **a2)
{
  if (!*(_DWORD *)(a1 + 144)) {
    goto LABEL_45;
  }
  uint64_t v5 = (uint64_t **)(a1 + 160);
  uint64_t v4 = *(uint64_t **)(a1 + 160);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= (unint64_t)"ipa.log") {
          break;
        }
        uint64_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= (unint64_t)"ipa.log") {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 160);
LABEL_9:
    __int16 v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x30uLL);
    v6[4] = (uint64_t *)"ipa.log";
    *((_DWORD *)v6 + 10) = 0;
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *uint64_t v5 = (uint64_t *)v6;
    uint64_t v9 = **(void **)(a1 + 152);
    int v10 = (uint64_t *)v6;
    if (v9)
    {
      *(void *)(a1 + 152) = v9;
      int v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v10);
    ++*(void *)(a1 + 168);
  }
  if (*((_DWORD *)v6 + 10))
  {
    CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    CFMutableDataRef v12 = Mutable;
    CFMutableDataRef v23 = Mutable;
    if (Mutable) {
      uint64_t v13 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
      CFMutableDataRef v16 = Mutable;
      if (Mutable) {
        CFRetain(Mutable);
      }
      if (*a2) {
        long long v14 = _Block_copy(*a2);
      }
      else {
        long long v14 = 0;
      }
      uint64_t v15 = v14;
      radio::QMIDebugCommandDriverM20::getIPALogBlock_sync(a1, (const void **)&v16, &v15);
      if (v14) {
        _Block_release(v14);
      }
      if (v12)
      {
        CFRelease(v12);
LABEL_42:
        CFRelease(v12);
      }
    }
    else
    {
      if (*a2)
      {
        char v18 = operator new(0x30uLL);
        long long v19 = xmmword_1B8C32890;
        strcpy((char *)v18, "Error on Memory allocation for IPA log block");
        CreateError();
        CFTypeRef v17 = 0;
        dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, &cf, &v17);
        if (v17) {
          CFRelease(v17);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v19) < 0) {
          operator delete(v18);
        }
      }
      if (v12) {
        goto LABEL_42;
      }
    }
  }
  else
  {
LABEL_45:
    if (*a2)
    {
      std::string __p = operator new(0x20uLL);
      long long v22 = xmmword_1B8C31660;
      strcpy((char *)__p, "Invalid Regioninfo for IPA");
      CreateError();
      CFTypeRef cf = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, (const void **)&v23, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_1B8B94FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v20 - 56));
  _Unwind_Resume(a1);
}

void sub_1B8B9504C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v22 - 56));
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_28(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2) {
    uint64_t v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 56) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 138412290;
      *(void *)((char *)&block + 4) = v4;
      _os_log_error_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_ERROR, "Failed to get IPA log: %@", (uint8_t *)&block, 0xCu);
    }
  }
  else
  {
    if (*a3) {
      CFMutableDataRef v12 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    }
    else {
      CFMutableDataRef v12 = 0;
    }
    if (v12 && CFDataGetLength((CFDataRef)*a3) >= 1)
    {
      ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 64), (const __CFString **)"ipa.log", *a3, *MEMORY[0x1E4F1CF80], v13);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void *)(v7 + 40);
  uint64_t v8 = v7 + 40;
  if (v9 && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48))
  {
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      int v10 = 0;
      CFTypeRef cf = 0;
    }
    else
    {
      std::string __p = (char *)operator new(0x20uLL);
      strcpy(__p, "Failed to capture BBIPC logs");
      CreateError();
      operator delete(__p);
      int v10 = (const void *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
      CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    }
    long long v14 = *(const void **)(a1 + 64);
    if (v14) {
      CFRetain(*(CFTypeRef *)(a1 + 64));
    }
    if (*(void *)v8) {
      uint64_t v15 = _Block_copy(*(const void **)v8);
    }
    else {
      uint64_t v15 = 0;
    }
    CFMutableDataRef v16 = *(NSObject **)(v8 + 8);
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 1174405120;
    uint64_t v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_2;
    uint64_t v25 = &__block_descriptor_tmp_103_0;
    if (v15)
    {
      uint64_t aBlock = _Block_copy(v15);
      CFTypeRef v27 = v10;
      if (!v10) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t aBlock = 0;
      CFTypeRef v27 = v10;
      if (!v10)
      {
LABEL_28:
        CFTypeRef v28 = v14;
        if (v14) {
          CFRetain(v14);
        }
        dispatch_async(v16, &block);
        if (v28) {
          CFRelease(v28);
        }
        if (v27) {
          CFRelease(v27);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v15) {
          _Block_release(v15);
        }
        if (v14) {
          CFRelease(v14);
        }
        if (v10) {
          CFRelease(v10);
        }
        uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
        char v18 = *(const void **)(v17 + 40);
        *(void *)(v17 + 40) = 0;
        if (v18) {
          _Block_release(v18);
        }
        long long v19 = *(NSObject **)(v17 + 48);
        *(void *)(v17 + 48) = 0;
        if (v19) {
          dispatch_release(v19);
        }
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_48;
      }
    }
    CFRetain(v10);
    goto LABEL_28;
  }
LABEL_48:
  uint64_t v20 = *(NSObject **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v20) {
    dispatch_source_cancel(v20);
  }
}

void sub_1B8B953C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

CFTypeRef __copy_helper_block_e8_64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 64);
  *(void *)(a1 + 64) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 64);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_38(uint64_t a1)
{
  std::string __p = (char *)operator new(0x20uLL);
  strcpy(__p, "timeout on query IPC logs");
  CreateError();
  operator delete(__p);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v2 + 40) && *(void *)(v2 + 48))
  {
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    uint64_t v3 = *(const void **)(v2 + 40);
    if (v3) {
      uint64_t v4 = _Block_copy(v3);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_1;
    block[3] = &__block_descriptor_tmp_104;
    if (v4)
    {
      uint64_t aBlock = _Block_copy(v4);
      CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      uint64_t aBlock = 0;
      CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    CFTypeRef v14 = 0;
    dispatch_async(v5, block);
    if (v14) {
      CFRelease(v14);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v4) {
      _Block_release(v4);
    }
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(const void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;
    if (v7) {
      _Block_release(v7);
    }
    uint64_t v8 = *(NSObject **)(v6 + 48);
    *(void *)(v6 + 48) = 0;
    if (v8) {
      dispatch_release(v8);
    }
  }
  uint64_t v9 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v9) {
    dispatch_source_cancel(v9);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
}

void sub_1B8B95698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>(uint64_t a1, const void **a2, CFTypeRef *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  CFTypeRef cf = *a3;
  CFTypeRef v5 = v3;
  *a3 = 0;
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(a1 + 16))(a1, &v5, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8B95720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void radio::QMIDebugCommandDriverM20::getIPALogBlock_sync(uint64_t a1, const void **a2, const void **a3)
{
  if (*(void *)(a1 + 224))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[0] = v6;
    v19[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
    uint64_t v14 = a1 + 208;
    uint64_t v15 = QMIServiceMsg::create();
    int v16 = 25000;
    uint64_t v17 = 0;
    char v18 = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    uint64_t v11[2] = ___ZN5radio24QMIDebugCommandDriverM2019getIPALogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
    v11[3] = &__block_descriptor_tmp_44_6;
    void v11[4] = a1;
    if (*a3)
    {
      uint64_t v7 = _Block_copy(*a3);
      uint64_t v8 = *a2;
      CFMutableDataRef v12 = v7;
      CFTypeRef cf = v8;
      if (!v8) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v8 = *a2;
      CFMutableDataRef v12 = 0;
      CFTypeRef cf = v8;
      if (!v8)
      {
LABEL_9:
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPALogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        aBlock[3] = &unk_1E6194D28;
        aBlock[4] = v11;
        int v10 = _Block_copy(aBlock);
        char v18 = v10;
        if (v15)
        {
          qmi::Client::send();
          int v10 = v18;
        }
        if (v10) {
          _Block_release(v10);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v12) {
          _Block_release(v12);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
        return;
      }
    }
    CFRetain(v8);
    goto LABEL_9;
  }
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "No BSP client, bail", (uint8_t *)aBlock, 2u);
  }
}

void sub_1B8B9593C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(v21);
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B8B95970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN5radio24QMIDebugCommandDriverM2019getIPALogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    long long v6 = _Block_copy(v4);
  }
  else {
    long long v6 = 0;
  }
  uint64_t aBlock = v6;
  char v38 = 1;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1B8C2EF40;
  strcpy(v37.__r_.__value_.__l.__data_, "Error on GetIPALogs response");
  if (*((_DWORD *)a2 + 1))
  {
    if (!v6) {
      goto LABEL_73;
    }
LABEL_57:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v37.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v30, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        goto LABEL_62;
      }
    }
    else if (*((unsigned char *)&v37.__r_.__value_.__s + 23))
    {
      std::string v30 = v37;
LABEL_62:
      CreateError();
      bytes = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)v6, &v31, (CFTypeRef *)&bytes);
      if (bytes) {
        CFRelease(bytes);
      }
      if (v31) {
        CFRelease(v31);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
LABEL_71:
      CFTypeRef v27 = aBlock;
      uint64_t aBlock = 0;
      if (v27) {
        _Block_release(v27);
      }
      goto LABEL_73;
    }
    if (v38)
    {
      CFTypeRef v31 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>((uint64_t *)&aBlock, &v31, (CFTypeRef *)(a1 + 48));
      if (v31) {
        CFRelease(v31);
      }
    }
    goto LABEL_71;
  }
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)2);
    unsigned int v10 = *(unsigned __int16 *)v9;
    CFTypeRef v31 = (CFTypeRef)v5;
    if (!v6) {
      goto LABEL_9;
    }
LABEL_12:
    long long v6 = _Block_copy(v6);
    uint64_t v11 = *(void **)(a1 + 48);
    int v32 = v6;
    CFTypeRef cf = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unsigned int v10 = 0;
  CFTypeRef v31 = (CFTypeRef)v5;
  if (v6) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v11 = *(void **)(a1 + 48);
  int v32 = v6;
  CFTypeRef cf = v11;
  if (v11) {
LABEL_13:
  }
    CFRetain(v11);
LABEL_14:
  __int16 v34 = v10;
  int v35 = &v38;
  uint64_t v36 = &v37;
  CFMutableDataRef v12 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (!v12) {
    goto LABEL_52;
  }
  bytes = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&bytes, v12, &v12[v13], v13);
  uint64_t v14 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    CFIndex Length = CFDataGetLength((CFDataRef)v11);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v10;
    __int16 v45 = 2048;
    CFIndex v46 = Length;
    _os_log_impl(&dword_1B8B00000, v14, OS_LOG_TYPE_DEFAULT, "#I Reading IPA log block(size %u), data:%ld", buf, 0x12u);
  }
  if (*(_DWORD *)(v5 + 144) < v10)
  {
    std::string::__assign_external(&v37, "Block size error on getting IPA Logs", 0x24uLL);
    goto LABEL_50;
  }
  if (v10)
  {
    uint64_t v29 = v5;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      *v37.__r_.__value_.__l.__data_ = 0;
      v37.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v37.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
    }
    CFDataAppendBytes((CFMutableDataRef)v11, bytes, v10);
    CFIndex v17 = CFDataGetLength((CFDataRef)v11);
    uint64_t v18 = v17;
    uint64_t v20 = (uint64_t **)(v5 + 160);
    long long v19 = *(uint64_t **)(v29 + 160);
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v21 = v19;
          unint64_t v22 = v19[4];
          if (v22 <= (unint64_t)"ipa.log") {
            break;
          }
          long long v19 = (uint64_t *)*v21;
          uint64_t v20 = (uint64_t **)v21;
          if (!*v21) {
            goto LABEL_33;
          }
        }
        if (v22 >= (unint64_t)"ipa.log") {
          break;
        }
        long long v19 = (uint64_t *)v21[1];
        if (!v19)
        {
          uint64_t v20 = (uint64_t **)(v21 + 1);
          goto LABEL_33;
        }
      }
      if (v17 >= *((unsigned int *)v21 + 10))
      {
LABEL_50:
        int v16 = bytes;
        if (!bytes) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v21 = (uint64_t *)(v29 + 160);
LABEL_33:
      CFMutableDataRef v23 = operator new(0x30uLL);
      v23[4] = "ipa.log";
      *((_DWORD *)v23 + 10) = 0;
      void *v23 = 0;
      v23[1] = 0;
      void v23[2] = v21;
      *uint64_t v20 = v23;
      uint64_t v24 = **(void **)(v29 + 152);
      uint64_t v25 = v23;
      if (v24)
      {
        *(void *)(v29 + 152) = v24;
        uint64_t v25 = *v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v29 + 160), v25);
      ++*(void *)(v29 + 168);
      if (v18 >= *((unsigned int *)v23 + 10)) {
        goto LABEL_50;
      }
    }
    *(void *)buf = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v6) {
      unint64_t v26 = _Block_copy(v6);
    }
    else {
      unint64_t v26 = 0;
    }
    long long v43 = v26;
    radio::QMIDebugCommandDriverM20::getIPALogBlock_sync(v29, buf, &v43);
    if (v26) {
      _Block_release(v26);
    }
    if (cf) {
      CFRelease(cf);
    }
    char *v35 = 0;
    goto LABEL_50;
  }
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v37.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
    int v16 = bytes;
    if (!bytes) {
      goto LABEL_52;
    }
LABEL_51:
    int v41 = v16;
    operator delete(v16);
    goto LABEL_52;
  }
  *v37.__r_.__value_.__l.__data_ = 0;
  v37.__r_.__value_.__l.__size_ = 0;
  int v16 = bytes;
  if (bytes) {
    goto LABEL_51;
  }
LABEL_52:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    _Block_release(v6);
  }
  long long v6 = aBlock;
  if (aBlock) {
    goto LABEL_57;
  }
LABEL_73:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    CFTypeRef v28 = aBlock;
    if (!aBlock) {
      return;
    }
    goto LABEL_77;
  }
  CFTypeRef v28 = aBlock;
  if (aBlock) {
LABEL_77:
  }
    _Block_release(v28);
}

void sub_1B8B95ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *aBlock,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZZZN5radio24QMIDebugCommandDriverM2019getIPALogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEEEUb0_EN3__6D1Ev(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    _Block_release(v3);
  }
  return a1;
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>(uint64_t *a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t v3 = *a1;
  CFTypeRef v7 = *a2;
  *a2 = 0;
  CFTypeRef v4 = *a3;
  if (*a3 && (CFTypeID v5 = CFGetTypeID(*a3), v5 == CFDataGetTypeID()))
  {
    CFTypeRef cf = v4;
    CFRetain(v4);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v3 + 16))(v3, &v7, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1B8B96138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1B8B96154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c93_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK8__CFDataEEEEE48c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(const void **)(a2 + 40);
  if (!v4)
  {
    CFTypeRef result = *(CFTypeRef *)(a2 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  CFTypeID v5 = _Block_copy(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c93_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK8__CFDataEEEEE48c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void radio::QMIDebugCommandDriverM20::getPCIeLogBlock_sync(uint64_t a1, const void **a2, const void **a3)
{
  if (*(void *)(a1 + 192))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[0] = v6;
    v19[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
    uint64_t v14 = a1 + 176;
    uint64_t v15 = QMIServiceMsg::create();
    int v16 = 25000;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 1174405120;
    uint64_t v11[2] = ___ZN5radio24QMIDebugCommandDriverM2020getPCIeLogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
    v11[3] = &__block_descriptor_tmp_50_3;
    void v11[4] = a1;
    if (*a3)
    {
      CFTypeRef v7 = _Block_copy(*a3);
      int v8 = *a2;
      CFMutableDataRef v12 = v7;
      CFTypeRef cf = v8;
      if (!v8) {
        goto LABEL_9;
      }
    }
    else
    {
      int v8 = *a2;
      CFMutableDataRef v12 = 0;
      CFTypeRef cf = v8;
      if (!v8)
      {
LABEL_9:
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm11GetPCIeLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        aBlock[3] = &unk_1E6194D50;
        aBlock[4] = v11;
        unsigned int v10 = _Block_copy(aBlock);
        uint64_t v18 = v10;
        if (v15)
        {
          qmi::Client::send();
          unsigned int v10 = v18;
        }
        if (v10) {
          _Block_release(v10);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v12) {
          _Block_release(v12);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
        return;
      }
    }
    CFRetain(v8);
    goto LABEL_9;
  }
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "No APPS client, bail", (uint8_t *)aBlock, 2u);
  }
}

void sub_1B8B96408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(v21);
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B8B9643C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2020getPCIeLogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  CFTypeRef v4 = *(const void **)(a1 + 40);
  if (v4) {
    long long v6 = _Block_copy(v4);
  }
  else {
    long long v6 = 0;
  }
  uint64_t aBlock = v6;
  char v38 = 1;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1B8C301E0;
  strcpy(v37.__r_.__value_.__l.__data_, "Error on GetPCIeLogs response");
  if (*((_DWORD *)a2 + 1))
  {
    if (!v6) {
      goto LABEL_73;
    }
LABEL_57:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v37.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v30, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        goto LABEL_62;
      }
    }
    else if (*((unsigned char *)&v37.__r_.__value_.__s + 23))
    {
      std::string v30 = v37;
LABEL_62:
      CreateError();
      bytes = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)v6, &v31, (CFTypeRef *)&bytes);
      if (bytes) {
        CFRelease(bytes);
      }
      if (v31) {
        CFRelease(v31);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
LABEL_71:
      CFTypeRef v27 = aBlock;
      uint64_t aBlock = 0;
      if (v27) {
        _Block_release(v27);
      }
      goto LABEL_73;
    }
    if (v38)
    {
      CFTypeRef v31 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>((uint64_t *)&aBlock, &v31, (CFTypeRef *)(a1 + 48));
      if (v31) {
        CFRelease(v31);
      }
    }
    goto LABEL_71;
  }
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)2);
    unsigned int v10 = *(unsigned __int16 *)v9;
    CFTypeRef v31 = (CFTypeRef)v5;
    if (!v6) {
      goto LABEL_9;
    }
LABEL_12:
    long long v6 = _Block_copy(v6);
    uint64_t v11 = *(void **)(a1 + 48);
    int v32 = v6;
    CFTypeRef cf = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unsigned int v10 = 0;
  CFTypeRef v31 = (CFTypeRef)v5;
  if (v6) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v11 = *(void **)(a1 + 48);
  int v32 = v6;
  CFTypeRef cf = v11;
  if (v11) {
LABEL_13:
  }
    CFRetain(v11);
LABEL_14:
  __int16 v34 = v10;
  int v35 = &v38;
  uint64_t v36 = &v37;
  CFMutableDataRef v12 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (!v12) {
    goto LABEL_52;
  }
  bytes = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&bytes, v12, &v12[v13], v13);
  uint64_t v14 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    CFIndex Length = CFDataGetLength((CFDataRef)v11);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v10;
    __int16 v45 = 2048;
    CFIndex v46 = Length;
    _os_log_impl(&dword_1B8B00000, v14, OS_LOG_TYPE_DEFAULT, "#I Reading PCIe log block(size %u), data:%ld", buf, 0x12u);
  }
  if (*(_DWORD *)(v5 + 144) < v10)
  {
    std::string::__assign_external(&v37, "Block size error on getting PCIe Logs", 0x25uLL);
    goto LABEL_50;
  }
  if (v10)
  {
    uint64_t v29 = v5;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      *v37.__r_.__value_.__l.__data_ = 0;
      v37.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v37.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
    }
    CFDataAppendBytes((CFMutableDataRef)v11, bytes, v10);
    CFIndex v17 = CFDataGetLength((CFDataRef)v11);
    uint64_t v18 = v17;
    uint64_t v20 = (uint64_t **)(v5 + 160);
    long long v19 = *(uint64_t **)(v29 + 160);
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v21 = v19;
          unint64_t v22 = v19[4];
          if (v22 <= (unint64_t)"pcie.log") {
            break;
          }
          long long v19 = (uint64_t *)*v21;
          uint64_t v20 = (uint64_t **)v21;
          if (!*v21) {
            goto LABEL_33;
          }
        }
        if (v22 >= (unint64_t)"pcie.log") {
          break;
        }
        long long v19 = (uint64_t *)v21[1];
        if (!v19)
        {
          uint64_t v20 = (uint64_t **)(v21 + 1);
          goto LABEL_33;
        }
      }
      if (v17 >= *((unsigned int *)v21 + 10))
      {
LABEL_50:
        int v16 = bytes;
        if (!bytes) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v21 = (uint64_t *)(v29 + 160);
LABEL_33:
      CFMutableDataRef v23 = operator new(0x30uLL);
      v23[4] = "pcie.log";
      *((_DWORD *)v23 + 10) = 0;
      void *v23 = 0;
      v23[1] = 0;
      void v23[2] = v21;
      *uint64_t v20 = v23;
      uint64_t v24 = **(void **)(v29 + 152);
      uint64_t v25 = v23;
      if (v24)
      {
        *(void *)(v29 + 152) = v24;
        uint64_t v25 = *v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v29 + 160), v25);
      ++*(void *)(v29 + 168);
      if (v18 >= *((unsigned int *)v23 + 10)) {
        goto LABEL_50;
      }
    }
    *(void *)buf = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v6) {
      unint64_t v26 = _Block_copy(v6);
    }
    else {
      unint64_t v26 = 0;
    }
    long long v43 = v26;
    radio::QMIDebugCommandDriverM20::getPCIeLogBlock_sync(v29, buf, &v43);
    if (v26) {
      _Block_release(v26);
    }
    if (cf) {
      CFRelease(cf);
    }
    char *v35 = 0;
    goto LABEL_50;
  }
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v37.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
    int v16 = bytes;
    if (!bytes) {
      goto LABEL_52;
    }
LABEL_51:
    int v41 = v16;
    operator delete(v16);
    goto LABEL_52;
  }
  *v37.__r_.__value_.__l.__data_ = 0;
  v37.__r_.__value_.__l.__size_ = 0;
  int v16 = bytes;
  if (bytes) {
    goto LABEL_51;
  }
LABEL_52:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    _Block_release(v6);
  }
  long long v6 = aBlock;
  if (aBlock) {
    goto LABEL_57;
  }
LABEL_73:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    CFTypeRef v28 = aBlock;
    if (!aBlock) {
      return;
    }
    goto LABEL_77;
  }
  CFTypeRef v28 = aBlock;
  if (aBlock) {
LABEL_77:
  }
    _Block_release(v28);
}

void sub_1B8B96970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *aBlock,void *__p,uint64_t a32)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t _ZZZN5radio24QMIDebugCommandDriverM2020getPCIeLogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEEEUb1_EN3__8D1Ev(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    _Block_release(v3);
  }
  return a1;
}

void radio::QMIDebugCommandDriverM20::getMHILogBlock_sync(uint64_t a1, const void **a2, void **a3)
{
  if (*(void *)(a1 + 192))
  {
    *(void *)buf = 0;
    uint64_t v21 = buf;
    uint64_t v22 = 0x3002000000;
    CFMutableDataRef v23 = __Block_byref_object_copy__53;
    uint64_t v24 = __Block_byref_object_dispose__54;
    uint64_t v25 = (const void *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v5 = *a3;
    if (*a3) {
      uint64_t v5 = _Block_copy(v5);
    }
    uint64_t v25 = v5;
    v18[0] = 0;
    v18[1] = v18;
    void v18[2] = 0x2000000000;
    char v19 = 1;
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v17[0] = v6;
    v17[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
    uint64_t v12 = a1 + 176;
    uint64_t v13 = QMIServiceMsg::create();
    int v14 = 25000;
    uint64_t v15 = 0;
    int v16 = 0;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    _OWORD v10[2] = ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
    v10[3] = &unk_1F1264290;
    CFTypeRef v7 = *a2;
    v10[6] = a1;
    CFTypeRef cf = v7;
    if (v7) {
      CFRetain(v7);
    }
    v10[4] = buf;
    v10[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetMHILogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_1E6194D78;
    aBlock[4] = v10;
    int v8 = _Block_copy(aBlock);
    int v16 = v8;
    if (v13)
    {
      qmi::Client::send();
      int v8 = v16;
    }
    if (v8) {
      _Block_release(v8);
    }
    if (cf) {
      CFRelease(cf);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
    _Block_object_dispose(v18, 8);
    _Block_object_dispose(buf, 8);
    if (v25) {
      _Block_release(v25);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "No APPS client, bail", buf, 2u);
    }
  }
}

void sub_1B8B96D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(v27);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);
  std::string v30 = *(const void **)(v28 - 88);
  if (v30) {
    _Block_release(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__54(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v29 = 0;
  std::string v30 = &v29;
  uint64_t v31 = 0x4002000000;
  int v32 = __Block_byref_object_copy__55;
  uint64_t v33 = __Block_byref_object_dispose__56;
  std::string __p = operator new(0x20uLL);
  long long v35 = xmmword_1B8C2EF40;
  strcpy((char *)__p, "Error on GetMHILogs response");
  if (!*((_DWORD *)a2 + 1))
  {
    uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    CFTypeRef v7 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)2);
      __int16 v8 = *(_WORD *)v7;
    }
    else
    {
      __int16 v8 = 0;
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 1174405120;
    uint64_t v22 = ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_58;
    CFMutableDataRef v23 = &unk_1F1264258;
    __int16 v28 = v8;
    uint64_t v9 = *(const void **)(a1 + 56);
    uint64_t v26 = v4;
    CFTypeRef cf = v9;
    if (v9) {
      CFRetain(v9);
    }
    uint64_t v24 = &v29;
    long long v25 = *(_OWORD *)(a1 + 32);
    unsigned int v10 = (char *)qmi::MessageBase::findTlvValue(a2);
    if (v10)
    {
      uint64_t v36 = 0;
      std::string v37 = 0;
      uint64_t v38 = 0;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v36, v10, &v10[v11], v11);
      v22((uint64_t)v21, (const UInt8 **)&v36);
      if (v36)
      {
        std::string v37 = v36;
        operator delete(v36);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v14 = *(void *)(v12 + 40);
  uint64_t v13 = (uint64_t *)(v12 + 40);
  if (v14)
  {
    uint64_t v15 = (const std::string::value_type **)(v30 + 5);
    if (*((char *)v30 + 63) < 0)
    {
      std::string::size_type v16 = v30[6];
      if (v16)
      {
        std::string::__init_copy_ctor_external(&v20, *v15, v16);
        goto LABEL_18;
      }
    }
    else if (*((unsigned char *)v30 + 63))
    {
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
      v20.__r_.__value_.__r.__words[2] = v30[7];
LABEL_18:
      CreateError();
      CFTypeRef v19 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>(*v13, (const void **)&v36, &v19);
      if (v19) {
        CFRelease(v19);
      }
      if (v36) {
        CFRelease(v36);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
LABEL_27:
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v18 = *(const void **)(v17 + 40);
      *(void *)(v17 + 40) = 0;
      if (v18) {
        _Block_release(v18);
      }
      goto LABEL_29;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      uint64_t v36 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>(v13, (CFTypeRef *)&v36, (CFTypeRef *)(a1 + 56));
      if (v36) {
        CFRelease(v36);
      }
    }
    goto LABEL_27;
  }
LABEL_29:
  _Block_object_dispose(&v29, 8);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p);
  }
}

void sub_1B8B97114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v37 - 88));
  _Block_object_dispose(&a27, 8);
  if ((a37 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__55(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__56(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_58(uint64_t a1, const UInt8 **a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int16 *)(a1 + 72);
    CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 64));
    *(_DWORD *)buf = 67109376;
    int v25 = v6;
    __int16 v26 = 2048;
    CFIndex v27 = Length;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Reading MHI log block(size: %u), data: %ld", buf, 0x12u);
  }
  if (*(_DWORD *)(v4 + 144) < *(unsigned __int16 *)(a1 + 72))
  {
    std::string::__assign_external((std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "Block size error on getting MHI Logs", 0x24uLL);
    return;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  int v9 = *(char *)(v8 + 63);
  if (!*(_WORD *)(a1 + 72))
  {
    if (v9 < 0)
    {
      **(unsigned char **)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
    }
    else
    {
      *(unsigned char *)(v8 + 40) = 0;
      *(unsigned char *)(v8 + 63) = 0;
    }
    return;
  }
  if (v9 < 0)
  {
    **(unsigned char **)(v8 + 40) = 0;
    *(void *)(v8 + 48) = 0;
  }
  else
  {
    *(unsigned char *)(v8 + 40) = 0;
    *(unsigned char *)(v8 + 63) = 0;
  }
  CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 64), *a2, *(unsigned __int16 *)(a1 + 72));
  CFIndex v10 = CFDataGetLength(*(CFDataRef *)(a1 + 64));
  uint64_t v11 = v10;
  uint64_t v13 = (uint64_t **)(v4 + 160);
  uint64_t v12 = *(uint64_t **)(v4 + 160);
  if (!v12)
  {
    uint64_t v14 = (uint64_t *)(v4 + 160);
LABEL_18:
    std::string::size_type v16 = operator new(0x30uLL);
    v16[4] = "mhi.log";
    *((_DWORD *)v16 + 10) = 0;
    void *v16 = 0;
    v16[1] = 0;
    void v16[2] = v14;
    *uint64_t v13 = v16;
    uint64_t v17 = **(void **)(v4 + 152);
    uint64_t v18 = v16;
    if (v17)
    {
      *(void *)(v4 + 152) = v17;
      uint64_t v18 = *v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 160), v18);
    ++*(void *)(v4 + 168);
    if (v11 >= *((unsigned int *)v16 + 10)) {
      return;
    }
LABEL_24:
    CFTypeRef v19 = *(const void **)(a1 + 64);
    CFMutableDataRef v23 = v19;
    if (v19) {
      CFRetain(v19);
    }
    std::string v20 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v20) {
      uint64_t v21 = _Block_copy(v20);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = v21;
    radio::QMIDebugCommandDriverM20::getMHILogBlock_sync(v4, &v23, &v22);
    if (v21) {
      _Block_release(v21);
    }
    if (v19) {
      CFRelease(v19);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    return;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v14 = v12;
      unint64_t v15 = v12[4];
      if (v15 <= (unint64_t)"mhi.log") {
        break;
      }
      uint64_t v12 = (uint64_t *)*v14;
      uint64_t v13 = (uint64_t **)v14;
      if (!*v14) {
        goto LABEL_18;
      }
    }
    if (v15 >= (unint64_t)"mhi.log") {
      break;
    }
    uint64_t v12 = (uint64_t *)v14[1];
    if (!v12)
    {
      uint64_t v13 = (uint64_t **)(v14 + 1);
      goto LABEL_18;
    }
  }
  if (v10 < *((unsigned int *)v14 + 10)) {
    goto LABEL_24;
  }
}

void sub_1B8B974FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get(uint64_t a1)
{
  return *(void *)a1;
}

CFTypeRef __copy_helper_block_e8_64c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 64);
  *(void *)(a1 + 64) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_64c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 64);
  if (v1) {
    CFRelease(v1);
  }
}

CFTypeRef __copy_helper_block_e8_56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 56);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::DebugCommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)radio::DebugCommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12643E0;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12643E0;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B97878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8B97894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<radio::QMIDebugCommandDriverM20>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriverM20,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1264420;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8B979C0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1}::operator() const(radio::QMIDebugCommandDriverM20*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B979E8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriverM20 *,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20 *)#1},std::allocator<radio::QMIDebugCommandDriverM20>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriverM20 *,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20 *)#1},std::allocator<radio::QMIDebugCommandDriverM20>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::QMIDebugCommandDriverM20 *,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20 *)#1},std::allocator<radio::QMIDebugCommandDriverM20>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDebugCommandDr"
                     "iverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDeb"
                                "ugCommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDebugCommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDebugCommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1}::operator() const(radio::QMIDebugCommandDriverM20*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F1264468;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  CFIndex v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN5radio18DebugCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN5radio18DebugCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::length>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::length>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::length>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F12644C0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm19ConfigMHILogPayload8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B97E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B97E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B97E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *qmi::MutableMessageBase::createTLV<apps::tlv::abm::Level>(void *a1)
{
  uint64_t v2 = operator new(0x10uLL);
  uint64_t v3 = v2;
  v2[4] = 1;
  *(void *)uint64_t v2 = &unk_1F1264510;
  uint64_t v5 = (char *)a1[2];
  unint64_t v4 = a1[3];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = v2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  uint64_t v8 = (char *)a1[1];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = v3;
    uint64_t v7 = (uint64_t)(v14 + 8);
    std::string::size_type v16 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  uint64_t v14 = (char *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = v3;
  uint64_t v7 = 8 * v9 + 8;
  std::string::size_type v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    v14 -= v19;
    std::string v20 = &v13[8 * v9 - 16];
    uint64_t v21 = (long long *)(v5 - 16);
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)std::string v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    uint64_t v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  size_t result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::Level>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::Level>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::Level>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1264510;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm14SetMHILogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B98194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B981A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B981D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15SetPCIeLogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B982B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B982C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B982F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetIPCInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B983CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B983E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B9840C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_24QMIDebugCommandDriverM2012queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  dispatch_time_t v3 = **(void **)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  if (*(void *)v4)
  {
    uint64_t v5 = _Block_copy(*(const void **)v4);
    uint64_t v6 = *(NSObject **)(v4 + 8);
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(NSObject **)(v4 + 8);
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  radio::QMIDebugCommandDriverM20::queryIPCLogs_sync(v2, v3, (uint64_t)&v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v5) {
    _Block_release(v5);
  }
}

void sub_1B8B984C4(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_2(uint64_t a1)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_1(uint64_t a1)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPALogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B985DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B985F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B9861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm11GetPCIeLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B986F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B9870C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B98738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetMHILogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8B98814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B98828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8B98854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t coredump::QMICommandDriverM20::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xE0uLL);
  uint64_t v7 = (uint64_t)v6;
  uint64_t v8 = a1[1];
  uint64_t v16 = *a1;
  unint64_t v17 = (std::__shared_weak_count *)v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  unint64_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coredump::QMICommandDriverM20::QMICommandDriverM20((uint64_t)v6, &v16, v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coredump::QMICommandDriverM20>::shared_ptr[abi:ne180100]<coredump::QMICommandDriverM20,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1},void>(a3, v7);
  ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 48))(*a3, v11, v12);
}

void sub_1B8B989CC(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8B989E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t coredump::QMICommandDriverM20::QMICommandDriverM20(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  uint64_t v9 = *a3;
  unint64_t v10 = (std::__shared_weak_count *)v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  coredump::CommandDriver::CommandDriver((uint64_t *)a1, &v11, &v9);
  uint64_t v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)a1 = &unk_1F12645A8;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return a1;
}

void sub_1B8B98B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t *coredump::CommandDriver::CommandDriver(uint64_t *a1, void *a2, uint64_t *a3)
{
  *a1 = (uint64_t)&unk_1F1264778;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, "com.apple.telephony.abm", "coredump.drv");
  uint64_t v6 = dispatch_queue_create("coredump.drv", 0);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = (uint64_t)v6;
  if (v6)
  {
    uint64_t v7 = v6;
    dispatch_retain(v6);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v13, a2);
  *a1 = (uint64_t)&unk_1F12647E0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *a1 = (uint64_t)&unk_1F1264778;
  a1[13] = (uint64_t)&unk_1F12648A0;
  uint64_t v8 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::signal_impl(v8);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(a1 + 14, (uint64_t)v8);
  a1[16] = (uint64_t)&unk_1F1264AF0;
  uint64_t v9 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::signal_impl(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(a1 + 17, (uint64_t)v9);
  a1[19] = (uint64_t)&unk_1F1264C80;
  unint64_t v10 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v10);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(a1 + 20, (uint64_t)v10);
  a1[22] = *a3;
  uint64_t v11 = a3[1];
  a1[23] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1B8B98D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v14);
  boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::~signal(v13);
  boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::~signal(v12);
  ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v11);
  _Unwind_Resume(a1);
}

void sub_1B8B98DBC(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void coredump::CommandDriver::~CommandDriver(coredump::CommandDriver *this)
{
  *(void *)this = &unk_1F1264778;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *((void *)this + 19) = &unk_1F1264C80;
    dispatch_time_t v3 = (atomic_uint *)*((void *)this + 21);
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    *((void *)this + 19) = &unk_1F1264C80;
    dispatch_time_t v3 = (atomic_uint *)*((void *)this + 21);
    if (!v3) {
      goto LABEL_8;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
LABEL_8:
  *((void *)this + 16) = &unk_1F1264AF0;
  uint64_t v4 = (atomic_uint *)*((void *)this + 18);
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  *((void *)this + 13) = &unk_1F12648A0;
  uint64_t v5 = (atomic_uint *)*((void *)this + 15);
  if (v5)
  {
    if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
      if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
      }
    }
  }
  *(void *)this = &unk_1F1264820;
  MEMORY[0x1BA9C75B0]((char *)this + 8);
  uint64_t v6 = *((void *)this + 12);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *((void *)this + 11);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void coredump::QMICommandDriverM20::~QMICommandDriverM20(coredump::QMICommandDriverM20 *this)
{
  *(void *)this = &unk_1F12645A8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_time_t v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriverM20 *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(void *)this = &unk_1F12645A8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_time_t v3 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriverM20 *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(void *)this = &unk_1F12645A8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriverM20 *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
  operator delete(v3);
}

void coredump::QMICommandDriverM20::init(coredump::QMICommandDriverM20 *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN8coredump19QMICommandDriverM204initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_13_1;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_73_1;
  void block[4] = (char *)this + 72;
  void block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v42 = 0uLL;
  uint64_t v2 = *(Registry **)(v1 + 176);
  if (v2)
  {
    Registry::getServerConnection((uint64_t *)&buf, v2);
    long long v42 = buf;
    if ((void)buf)
    {
      char v39 = 12;
      dispatch_time_t v3 = *(NSObject **)(v1 + 88);
      uint64_t v37 = v3;
      strcpy((char *)v38, "coredump.drv");
      if (v3) {
        dispatch_retain(v3);
      }
      char v36 = 5;
      strcpy((char *)v35, "ssctl");
      uint64_t v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (!v4 || (uint64_t v5 = std::__shared_weak_count::lock(v4)) == 0) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v6 = v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v7 = std::__shared_weak_count::lock(v5);
        if (v7)
        {
LABEL_9:
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          __int16 v34 = v7;
LABEL_10:
          std::__shared_weak_count::__release_weak(v6);
          if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          uint64_t v33 = (std::__shared_weak_count *)*((void *)&v42 + 1);
          if (*((void *)&v42 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          qmi::Client::createWithQueueLocal();
          long long v8 = v41;
          long long v41 = 0uLL;
          uint64_t v9 = *(std::__shared_weak_count **)(v1 + 216);
          *(_OWORD *)(v1 + 208) = v8;
          if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          qmi::Client::~Client((qmi::Client *)&buf);
          if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          if (v34) {
            std::__shared_weak_count::__release_weak(v34);
          }
          if (v36 < 0) {
            operator delete(v35[0]);
          }
          unint64_t v10 = v37;
          if (!v37) {
            goto LABEL_46;
          }
LABEL_45:
          dispatch_release(v10);
          goto LABEL_46;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        if (v7) {
          goto LABEL_9;
        }
      }
      __int16 v34 = v7;
      goto LABEL_10;
    }
  }
  char v39 = 12;
  strcpy((char *)v38, "coredump.drv");
  uint64_t v11 = *(NSObject **)(v1 + 88);
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  char v36 = 5;
  strcpy((char *)v35, "ssctl");
  uint64_t v12 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v12 || (uint64_t v13 = std::__shared_weak_count::lock(v12)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v14 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
    unint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15) {
      goto LABEL_33;
    }
LABEL_71:
    uint64_t v31 = v15;
    goto LABEL_34;
  }
  unint64_t v15 = std::__shared_weak_count::lock(v13);
  if (!v15) {
    goto LABEL_71;
  }
LABEL_33:
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v31 = v15;
LABEL_34:
  std::__shared_weak_count::__release_weak(v14);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  qmi::Client::createWithQueue();
  long long v16 = v41;
  long long v41 = 0uLL;
  unint64_t v17 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  qmi::Client::~Client((qmi::Client *)&buf);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  unint64_t v10 = object;
  if (object) {
    goto LABEL_45;
  }
LABEL_46:
  if (v39 < 0)
  {
    operator delete(v38[0]);
    uint64_t v18 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
LABEL_48:
      uint64_t v19 = *(std::__shared_weak_count **)(v1 + 80);
      if (!v19) {
        goto LABEL_60;
      }
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v18 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_48;
    }
  }
  LOWORD(buf) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v18, OS_LOG_TYPE_DEBUG, "#D initializing", (uint8_t *)&buf, 2u);
  uint64_t v19 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v19) {
LABEL_60:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_49:
  std::string v20 = std::__shared_weak_count::lock(v19);
  if (!v20) {
    goto LABEL_60;
  }
  uint64_t v21 = v20;
  p_shared_weak_owners = &v20->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  long long v23 = (qmi::Client *)(v1 + 192);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  qmi::Client::setHandler();
  uint64_t v24 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v24 || (uint64_t v25 = *(void *)(v1 + 72), (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFIndex v27 = v26;
  atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
    uint64_t v28 = std::__shared_weak_count::lock(v27);
    if (v28) {
      goto LABEL_56;
    }
LABEL_62:
    long long buf = 0uLL;
    goto LABEL_63;
  }
  uint64_t v28 = std::__shared_weak_count::lock(v26);
  if (!v28) {
    goto LABEL_62;
  }
LABEL_56:
  uint64_t v29 = (atomic_ullong *)v28;
  atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long buf = v25;
  *((void *)&buf + 1) = v28;
  std::__shared_weak_count::__release_weak(v27);
  if (atomic_fetch_add(v29 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_64;
  }
  (*(void (**)(atomic_ullong *))(*v29 + 16))(v29);
  CFIndex v27 = (std::__shared_weak_count *)v29;
LABEL_63:
  std::__shared_weak_count::__release_weak(v27);
LABEL_64:
  qmi::Client::setClientHandle();
  if (*((void *)&buf + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&buf + 1));
  }
  qmi::Client::start(v23);
  std::__shared_weak_count::__release_weak(v21);
  std::__shared_weak_count::__release_weak(v21);
  std::__shared_weak_count::__release_weak(v21);
  std::__shared_weak_count::__release_weak(v21);
  std::string v30 = (std::__shared_weak_count *)*((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1B8B99B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,char a34)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  char v36 = *(std::__shared_weak_count **)(v34 - 176);
  if (v36)
  {
    std::__shared_weak_count::__release_weak(v36);
    if ((*(char *)(v34 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v37 = *(NSObject **)(v34 - 144);
      if (!v37) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v34 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 168));
  uint64_t v37 = *(NSObject **)(v34 - 144);
  if (!v37)
  {
LABEL_8:
    if (*(char *)(v34 - 113) < 0)
    {
      operator delete(*(void **)(v34 - 136));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 80);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 80);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v37);
  goto LABEL_8;
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D stopped", v7, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 1);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B99E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke_4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D started", v7, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 0);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8B99F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke_8(void *a1, xpc_object_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v14 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        long long v8 = v6;
LABEL_10:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      xpc_object_t v12 = a2;
      if (a2)
      {
        xpc_retain(a2);
        uint64_t v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_9;
        }
      }
      else
      {
        a2 = xpc_null_create();
        xpc_object_t v12 = a2;
        uint64_t v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_9;
        }
      }
      xpc::object::to_string((uint64_t *)__p, (xpc::object *)&v12);
      if (v11 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      long long v16 = v9;
      _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D server error %s", buf, 0xCu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      a2 = v12;
LABEL_9:
      xpc_release(a2);
      long long v8 = v14;
      if (!v14) {
        return;
      }
      goto LABEL_10;
    }
  }
}

void sub_1B8B9A0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13)
{
}

void sub_1B8B9A100(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void coredump::QMICommandDriverM20::fetchPostBootCrashReason(coredump::QMICommandDriverM20 *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_25;
  v1[4] = this;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[26])
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[10];
    if (!v2 || (v3 = v1[9], (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[0] = v6;
    v16[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
    char v11 = v1 + 24;
    uint64_t v12 = QMIServiceMsg::create();
    int v13 = 25000;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_14;
    v9[3] = &__block_descriptor_tmp_24_5;
    v9[4] = v1;
    v9[5] = v3;
    unint64_t v10 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 0x40000000;
    uint64_t v18 = ___ZNO3qmi6Client9SendProxy8callbackIRKN5ssctl3abm16GetFailureReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v19 = &unk_1E6194E78;
    std::string v20 = v9;
    uint64_t v7 = _Block_copy(&aBlock);
    unint64_t v15 = v7;
    if (v12)
    {
      qmi::Client::send();
      uint64_t v7 = v15;
    }
    if (v7) {
      _Block_release(v7);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    long long v8 = v1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock) = 136315138;
      *(void *)((char *)&aBlock + 4) = "fetchPostBootCrashReason_block_invoke";
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_1B8B9A400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void sub_1B8B9A440(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8B9A438);
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_14(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    long long v6 = std::__shared_weak_count::lock(v3);
    uint64_t v54 = v6;
    if (v6)
    {
      uint64_t v7 = v6;
      if (!a1[5])
      {
LABEL_23:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      uint64_t v45 = 0;
      CFIndex v46 = &v45;
      uint64_t v47 = 0x4002000000;
      long long v48 = __Block_byref_object_copy__7;
      unint64_t v49 = __Block_byref_object_dispose__7;
      uint64_t v50 = (uint64_t)&v50;
      uint64_t v51 = &v50;
      uint64_t v52 = 0;
      if (*((_DWORD *)a2 + 1))
      {
        long long v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "Failed: Getting PostBootCrashReason response", buf, 2u);
        }
      }
      else
      {
        long long v43 = v44;
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 0x40000000;
        void v44[2] = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_15;
        v44[3] = &unk_1E6194DC0;
        v44[4] = &v45;
        v44[5] = v5;
        v40[0] = MEMORY[0x1E4F143A8];
        v40[1] = 0x40000000;
        long long v41 = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_18;
        long long v42 = &unk_1E6194DE8;
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v19 = TlvValue;
        if (TlvValue)
        {
          int v20 = v18;
          long long v56 = TlvValue;
          memset(buf, 170, sizeof(buf));
          tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessages>(&v56, v18, (uint64_t)buf);
          uint64_t v21 = v56;
          if (v56) {
            v41((uint64_t)v40, (long long **)buf);
          }
          uint64_t v22 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v23 = *(void *)&buf[8];
            uint64_t v24 = *(void **)buf;
            if (*(void *)&buf[8] != *(void *)buf)
            {
              do
              {
                if (*(char *)(v23 - 1) < 0) {
                  operator delete(*(void **)(v23 - 24));
                }
                v23 -= 24;
              }
              while (v23 != v22);
              uint64_t v24 = *(void **)buf;
            }
            *(void *)&uint8_t buf[8] = v22;
            operator delete(v24);
          }
          if (!v21) {
            ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 17, v19, v20);
          }
        }
        v36[0] = MEMORY[0x1E4F143A8];
        v36[1] = 0x40000000;
        uint64_t v37 = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_2;
        uint64_t v38 = &unk_1E6194E10;
        char v39 = v44;
        uint64_t v25 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        CFIndex v27 = v25;
        if (v25)
        {
          int v28 = v26;
          long long v56 = v25;
          memset(buf, 170, sizeof(buf));
          tlv::parseV<ssctl::tlv::abm::ErrorMessages>(&v56, v26, (uint64_t)buf);
          uint64_t v29 = v56;
          if (v56) {
            v37((uint64_t)v36, (long long **)buf);
          }
          uint64_t v30 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v31 = *(void *)&buf[8];
            int v32 = *(void **)buf;
            if (*(void *)&buf[8] != *(void *)buf)
            {
              do
              {
                if (*(char *)(v31 - 1) < 0) {
                  operator delete(*(void **)(v31 - 24));
                }
                v31 -= 24;
              }
              while (v31 != v30);
              int v32 = *(void **)buf;
            }
            *(void *)&uint8_t buf[8] = v30;
            operator delete(v32);
          }
          if (!v29) {
            ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 16, v27, v28);
          }
        }
      }
      std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v33, (uint64_t)(v46 + 5));
      boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(v5 + 128, (uint64_t)&v33);
      if (!v35
        || (uint64_t v9 = v33,
            unint64_t v10 = v34,
            char v11 = *v34,
            *((void *)v11 + 1) = *((void *)v33 + 1),
            **((void **)v9 + 1) = v11,
            uint64_t v35 = 0,
            v10 == &v33))
      {
LABEL_15:
        _Block_object_dispose(&v45, 8);
        if (!v52) {
          goto LABEL_23;
        }
        uint64_t v13 = v50;
        uint64_t v14 = v51;
        uint64_t v15 = *v51;
        *(void *)(v15 + 8) = *(void *)(v50 + 8);
        **(void **)(v13 + 8) = v15;
        uint64_t v52 = 0;
        if (v14 == &v50) {
          goto LABEL_23;
        }
        while (1)
        {
          long long v16 = (uint64_t *)v14[1];
          if (*((char *)v14 + 63) < 0)
          {
            operator delete((void *)v14[5]);
            if ((*((char *)v14 + 39) & 0x80000000) == 0) {
              goto LABEL_19;
            }
LABEL_22:
            operator delete((void *)v14[2]);
            operator delete(v14);
            uint64_t v14 = v16;
            if (v16 == &v50) {
              goto LABEL_23;
            }
          }
          else
          {
            if (*((char *)v14 + 39) < 0) {
              goto LABEL_22;
            }
LABEL_19:
            operator delete(v14);
            uint64_t v14 = v16;
            if (v16 == &v50) {
              goto LABEL_23;
            }
          }
        }
      }
      while (1)
      {
        uint64_t v12 = (char **)v10[1];
        if (*((char *)v10 + 63) < 0)
        {
          operator delete(v10[5]);
          if ((*((char *)v10 + 39) & 0x80000000) == 0) {
            goto LABEL_11;
          }
LABEL_14:
          operator delete(v10[2]);
          operator delete(v10);
          unint64_t v10 = v12;
          if (v12 == &v33) {
            goto LABEL_15;
          }
        }
        else
        {
          if (*((char *)v10 + 39) < 0) {
            goto LABEL_14;
          }
LABEL_11:
          operator delete(v10);
          unint64_t v10 = v12;
          if (v12 == &v33) {
            goto LABEL_15;
          }
        }
      }
    }
  }
}

void sub_1B8B9A900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v32 = *(void *)(v30 - 128);
  if (v32)
  {
    uint64_t v33 = *(void *)(v30 - 120);
    uint64_t v34 = *(void **)(v30 - 128);
    if (v33 != v32)
    {
      do
      {
        if (*(char *)(v33 - 1) < 0) {
          operator delete(*(void **)(v33 - 24));
        }
        v33 -= 24;
      }
      while (v33 != v32);
      uint64_t v34 = *(void **)(v30 - 128);
    }
    *(void *)(v30 - 120) = v32;
    operator delete(v34);
  }
  _Block_object_dispose(&a29, 8);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(v29);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v30 - 144);
  _Unwind_Resume(a1);
}

char *std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        long long v6 = (char *)*((void *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0) {
LABEL_9:
          }
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_15(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v26 = -1431655766;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[14] = v3;
  v25[15] = v3;
  v25[12] = v3;
  v25[13] = v3;
  v25[10] = v3;
  v25[11] = v3;
  v25[8] = v3;
  v25[9] = v3;
  v25[6] = v3;
  v25[7] = v3;
  v25[4] = v3;
  void v25[5] = v3;
  v25[2] = v3;
  v25[3] = v3;
  v25[0] = v3;
  v25[1] = v3;
  v24[2] = v3;
  v24[3] = v3;
  v24[0] = v3;
  v24[1] = v3;
  long long v22 = v3;
  long long v23 = v3;
  long long v20 = v3;
  long long v21 = v3;
  if (ETLEFCopyCrashLocationDetailsM20())
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v13 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::__assign_external((std::string *)v13, (const std::string::value_type *)v25 + 4, 0x100uLL);
    std::string::__assign_external((std::string *)&__p[1], (const std::string::value_type *)v24 + 4, 0x40uLL);
    LODWORD(v15) = v20;
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v13;
      if (SHIBYTE(__p[0]) < 0) {
        uint64_t v5 = (void **)v13[0];
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v17 = v5;
      _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Crash Reason: %{public}s", buf, 0xCu);
      uint64_t v4 = *(NSObject **)(v2 + 40);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (SHIBYTE(__p[3]) >= 0) {
        long long v6 = &__p[1];
      }
      else {
        long long v6 = (void **)__p[1];
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v17 = v6;
      __int16 v18 = 1024;
      int v19 = v15;
      _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Crash File: %{public}s, Crash line: %d", buf, 0x12u);
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    long long v8 = (char *)operator new(0x48uLL);
    uint64_t v9 = v8;
    *(void *)long long v8 = 0;
    *((void *)v8 + 1) = 0;
    if (SHIBYTE(__p[0]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v8 + 16), (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    }
    else
    {
      *((_OWORD *)v8 + 1) = *(_OWORD *)v13;
      *((void **)v8 + 4) = __p[0];
    }
    char v11 = (std::string *)(v9 + 40);
    if (SHIBYTE(__p[3]) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[1];
      *((void **)v9 + 7) = __p[3];
    }
    *((void *)v9 + 8) = v15;
    *((void *)v9 + 1) = v7 + 40;
    uint64_t v12 = *(void *)(v7 + 40);
    *(void *)uint64_t v9 = v12;
    *(void *)(v12 + 8) = v9;
    *(void *)(v7 + 40) = v9;
    ++*(void *)(v7 + 56);
    if ((SHIBYTE(__p[3]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
        return;
      }
LABEL_23:
      operator delete(v13[0]);
      return;
    }
    operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13[0]) = 0;
      _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Failed to parse failure reason string", (uint8_t *)v13, 2u);
    }
  }
}

void sub_1B8B9AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9[39] < 0) {
    operator delete(*v10);
  }
  operator delete(v9);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B8B9ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_18(uint64_t a1, long long **a2)
{
  uint64_t v2 = *a2;
  long long v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      (*(void (**)(uint64_t, std::string *))(v5 + 16))(v5, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_1B8B9AE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_2(uint64_t a1, long long **a2)
{
  uint64_t v2 = *a2;
  long long v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      (*(void (**)(uint64_t, std::string *))(v5 + 16))(v5, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_1B8B9AF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t ****)(a1 + 8);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v7, a2);
  boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(v2, (uint64_t)&v7);
  if (v9)
  {
    long long v3 = v7;
    uint64_t v4 = v8;
    uint64_t v5 = *v8;
    *((void *)v5 + 1) = *((void *)v7 + 1);
    **((void **)v3 + 1) = v5;
    uint64_t v9 = 0;
    if (v4 != &v7)
    {
      do
      {
        long long v6 = (char **)v4[1];
        if (*((char *)v4 + 63) < 0)
        {
          operator delete(v4[5]);
          if (*((char *)v4 + 39) < 0) {
LABEL_9:
          }
            operator delete(v4[2]);
        }
        else if (*((char *)v4 + 39) < 0)
        {
          goto LABEL_9;
        }
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6 != &v7);
    }
  }
}

void sub_1B8B9AFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

char **std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(char **a1, uint64_t a2)
{
  *a1 = (char *)a1;
  a1[1] = (char *)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = std::__list_imp<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::__create_node[abi:ne180100]<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash const&>((uint64_t)a1, 0, 0, i + 16);
    long long v6 = *a1;
    *(void *)uint64_t v5 = *a1;
    *((void *)v5 + 1) = a1;
    *((void *)v6 + 1) = v5;
    *a1 = v5;
    ++a1[2];
  }
  return a1;
}

void sub_1B8B9B08C(_Unwind_Exception *exception_object)
{
  if (!*((void *)v1 + 2)
    || (uint64_t v3 = *(void *)v1,
        uint64_t v4 = (char *)*((void *)v1 + 1),
        uint64_t v5 = *(void *)v4,
        *(void *)(v5 + 8) = *(void *)(*(void *)v1 + 8),
        **(void **)(v3 + 8) = v5,
        *((void *)v1 + 2) = 0,
        v4 == v1))
  {
LABEL_3:
    _Unwind_Resume(exception_object);
  }
  while (1)
  {
    long long v6 = (char *)*((void *)v4 + 1);
    if (v4[63] < 0)
    {
      operator delete(*((void **)v4 + 5));
      if (v4[39] < 0) {
LABEL_9:
      }
        operator delete(*((void **)v4 + 2));
    }
    else if (v4[39] < 0)
    {
      goto LABEL_9;
    }
    operator delete(v4);
    uint64_t v4 = v6;
    if (v6 == v1) {
      goto LABEL_3;
    }
  }
}

void coredump::QMICommandDriverM20::crashBaseband(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "crashBaseband";
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I %s: Deprecated", (uint8_t *)&v2, 0xCu);
  }
}

void coredump::QMICommandDriverM20::getCoreDumpEnabledStatus(coredump::QMICommandDriverM20 *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "getCoreDumpEnabledStatus";
    _os_log_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEFAULT, "#I %s:Deprecated", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t coredump::QMICommandDriverM20::setCoreDumpEnabledStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = "setCoreDumpEnabledStatus";
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Deprecated", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
}

uint64_t ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

void ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "coredump.drv");
}

uint64_t ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F1264AF0;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F12648A0;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F1264820;
  MEMORY[0x1BA9C75B0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1F1264820;
  MEMORY[0x1BA9C75B0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_1F1264820;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_1F1264860;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_1B8B9B600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedSynchronizable<coredump::CommandDriver>::~SharedSynchronizable(void *a1)
{
  int v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_1F1264820;
  MEMORY[0x1BA9C75B0](a1 + 1);
  int v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1264820;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F1264820;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9B8A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F12648A0;
  int v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t v2 = operator new(0x20uLL);
  uint64_t v10 = (uint64_t)&v10;
  char v11 = &v10;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = v14;
  boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state::invocation_state((uint64_t)v2, (uint64_t)&v10);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v13, v14[0]);
  if (v12)
  {
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    uint64_t v5 = *v11;
    *(void *)(v5 + 8) = *(void *)(v10 + 8);
    **(void **)(v3 + 8) = v5;
    uint64_t v12 = 0;
    if (v4 != &v10)
    {
      do
      {
        int v6 = (uint64_t *)v4[1];
        uint64_t v7 = (atomic_uint *)v4[3];
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6 != &v10);
    }
  }
  a1[2] = *(void *)*a1;
  uint64_t v8 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v8, 0);
  boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(a1 + 3, (uint64_t)v8);
  return a1;
}

void sub_1B8B9BBA0(_Unwind_Exception *a1)
{
  operator delete(v2);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B9BBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B9BBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B8B9BBEC(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9BCCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        int v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t *boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::mutex>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9BF30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        int v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state::invocation_state(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v4, a2);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>((uint64_t *)a1, (uint64_t)v4);
  uint64_t v5 = operator new(1uLL);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(a1 + 16, (uint64_t)v5, (atomic_uint **)(a1 + 24));
  return a1;
}

void sub_1B8B9C1DC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B9C27C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9C358(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  uint64_t v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  int v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      char v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          char v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          long long v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          int v6 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          __int16 v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          __int16 v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          uint64_t v7 = v18;
        }
        while (!v14);
      }
      int v6 = v16;
      uint64_t v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1B8B9C5EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    int v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      _DWORD v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        int v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *uint64_t v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = (void *)v3[1];
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B8B9C6B4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F1264910;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9C7F8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9C8E8(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

atomic_uint *boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(uint64_t a1, uint64_t a2, atomic_uint **a3)
{
  size_t result = (atomic_uint *)operator new(0x18uLL);
  *((void *)result + 1) = 0x100000001;
  *(void *)size_t result = &unk_1F1264970;
  *((void *)result + 2) = a2;
  uint64_t v6 = *a3;
  *a3 = result;
  if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
  {
    size_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
    if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
      return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
    }
  }
  return result;
}

void sub_1B8B9CB2C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9CB44(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F12649D0;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9CBE8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9CD08(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

void *boost::detail::shared_count::shared_count<boost::signals2::mutex>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F1264A30;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9CEE8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    pthread_mutex_destroy(v1);
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9CF0C(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F1264A90;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9CFF0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9D110(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9D358(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F1264AF0;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t v2 = operator new(0x20uLL);
  uint64_t v10 = (uint64_t)&v10;
  char v11 = &v10;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = v14;
  boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state::invocation_state((uint64_t)v2, (uint64_t)&v10);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v13, v14[0]);
  if (v12)
  {
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    uint64_t v5 = *v11;
    *(void *)(v5 + 8) = *(void *)(v10 + 8);
    **(void **)(v3 + 8) = v5;
    uint64_t v12 = 0;
    if (v4 != &v10)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v4[1];
        uint64_t v7 = (atomic_uint *)v4[3];
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6 != &v10);
    }
  }
  a1[2] = *(void *)*a1;
  uint64_t v8 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v8, 0);
  boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(a1 + 3, (uint64_t)v8);
  return a1;
}

void sub_1B8B9D654(_Unwind_Exception *a1)
{
  operator delete(v2);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B9D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B9D684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B8B9D6A0(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9D780(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state::invocation_state(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v4, a2);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>((uint64_t *)a1, (uint64_t)v4);
  uint64_t v5 = operator new(1uLL);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(a1 + 16, (uint64_t)v5, (atomic_uint **)(a1 + 24));
  return a1;
}

void sub_1B8B9DB38(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B9DBD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9DCB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::list((void *)a1, (void *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = *(unsigned char *)(a2 + 48);
  v4[3] = v4 + 4;
  uint64_t v5 = (void *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6 != (void *)(a2 + 32))
  {
    uint64_t v7 = *(void **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      v7[6] = v8;
      uint64_t v9 = a2;
      if (v6 != v5) {
        uint64_t v9 = v6[6];
      }
      uint64_t v10 = (void *)v6[1];
      char v11 = v10;
      uint64_t v12 = v6;
      if (v10)
      {
        do
        {
          uint64_t v13 = v11;
          char v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v12[2];
          BOOL v14 = *v13 == (void)v12;
          uint64_t v12 = v13;
        }
        while (!v14);
      }
      uint64_t v15 = a2;
      if (v13 != v5) {
        uint64_t v15 = v13[6];
      }
      while (v9 != v15)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v8 = *(void *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          long long v16 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v16 = (void *)v6[2];
          BOOL v14 = *v16 == (void)v6;
          uint64_t v6 = v16;
        }
        while (!v14);
      }
      uint64_t v17 = (void *)v7[1];
      if (v17)
      {
        do
        {
          __int16 v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          __int16 v18 = (void *)v7[2];
          BOOL v14 = *v18 == (void)v7;
          uint64_t v7 = v18;
        }
        while (!v14);
      }
      uint64_t v6 = v16;
      uint64_t v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1B8B9DF48(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(void **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

void *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::list(void *a1, void *a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 != a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      uint64_t v8 = v3[3];
      _DWORD v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
        uint64_t v6 = (void *)*a1;
        uint64_t v5 = a1[2];
      }
      *uint64_t v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      uint64_t v3 = (void *)v3[1];
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B8B9E010(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)v1[1];
    uint64_t v6 = *v5;
    *(void *)(v6 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v5[1];
        uint64_t v8 = (atomic_uint *)v5[3];
        if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
          if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F1264B60;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9E154(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9E244(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F1264BC0;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9E40C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9E52C(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F1264C20;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9E70C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9E82C(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(&v5, a2);
  uint64_t v3 = (atomic_uint *)a1[1];
  a1[1] = (uint64_t)v5;
  uint64_t v5 = v3;
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  return a1;
}

void sub_1B8B9EA74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F1264C80;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F1264C80;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t v2 = operator new(0x20uLL);
  uint64_t v10 = (uint64_t)&v10;
  char v11 = &v10;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = v14;
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state::invocation_state((uint64_t)v2, (uint64_t)&v10);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v13, v14[0]);
  if (v12)
  {
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    uint64_t v5 = *v11;
    *(void *)(v5 + 8) = *(void *)(v10 + 8);
    **(void **)(v3 + 8) = v5;
    uint64_t v12 = 0;
    if (v4 != &v10)
    {
      do
      {
        uint64_t v6 = (uint64_t *)v4[1];
        uint64_t v7 = (atomic_uint *)v4[3];
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
        operator delete(v4);
        uint64_t v4 = v6;
      }
      while (v6 != &v10);
    }
  }
  a1[2] = *(void *)*a1;
  uint64_t v8 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v8, 0);
  boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(a1 + 3, (uint64_t)v8);
  return a1;
}

void sub_1B8B9EE34(_Unwind_Exception *a1)
{
  operator delete(v2);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B9EE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8B9EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B8B9EE80(_Unwind_Exception *a1)
{
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(a1 + 3), (void *)a1[4]);
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state::invocation_state(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v4, a2);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>((uint64_t *)a1, (uint64_t)v4);
  uint64_t v5 = operator new(1uLL);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(a1 + 16, (uint64_t)v5, (atomic_uint **)(a1 + 24));
  return a1;
}

void sub_1B8B9F018(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
    if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B8B9F0B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(void *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *uint64_t v4 = &unk_1F1264CF0;
  uint64_t v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B8B9F1D4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B8B9F2F4(_Unwind_Exception *a1)
{
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[4];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    uint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

void ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8B9F594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8B9F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<coredump::QMICommandDriverM20>::shared_ptr[abi:ne180100]<coredump::QMICommandDriverM20,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1264D50;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8B9F6DC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1}::operator() const(coredump::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8B9F704(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<coredump::QMICommandDriverM20 *,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20 *)#1},std::allocator<coredump::QMICommandDriverM20>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coredump::QMICommandDriverM20 *,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20 *)#1},std::allocator<coredump::QMICommandDriverM20>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coredump::QMICommandDriverM20 *,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20 *)#1},std::allocator<coredump::QMICommandDriverM20>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20"
                     "EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMIComma"
                                "ndDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1}::operator() const(coredump::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(uint64_t ***a1, int a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v29 = a2;
  uint64_t v27 = 0;
  int v28 = 0;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v40 = v3;
  long long v41 = v3;
  long long v38 = v3;
  long long v39 = v3;
  long long v36 = v3;
  long long v37 = v3;
  long long v34 = v3;
  long long v35 = v3;
  long long v32 = v3;
  long long v33 = v3;
  uint64_t v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v32;
  v43[0] = 0;
  v43[1] = v4;
  pthread_mutex_lock(v4);
  uint64_t v5 = (atomic_uint *)a1[1];
  if (!v5)
  {
    uint64_t v7 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v5 + 2, memory_order_acquire);
  uint64_t v7 = *a1;
  if (explicit == 1)
  {
    uint64_t v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      uint64_t v8 = (*v7)[1];
      *(void *)&long long v30 = v8;
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v30 = a1[2];
      uint64_t v9 = *v7;
      if (*v7 == (uint64_t *)v8) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = *(void *)(v8 + 16);
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v8 = *(void *)(v8 + 8);
    }
    else
    {
      uint64_t v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v30);
      uint64_t v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v5 = (atomic_uint *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  char v11 = v28;
  uint64_t v27 = v7;
  int v28 = v5;
  if (v11)
  {
    if (atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
      if (atomic_fetch_add(v11 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v11 + 24))(v11);
      }
    }
  }
  pthread_mutex_unlock(v43[1]);
  uint64_t v12 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v43[0][-1].__opaque[55] >= 0)
    {
      uint64_t v13 = (char *)__p[1] + 16 * (uint64_t)v43[0];
      do
      {
        BOOL v14 = (atomic_uint *)*((void *)v13 - 1);
        if (v14)
        {
          if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
            if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
            }
          }
        }
        v13 -= 16;
      }
      while (v13 > v12);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v15;
  long long v46 = v15;
  *(_OWORD *)long long v43 = v15;
  long long v44 = v15;
  long long v41 = v15;
  *(_OWORD *)std::string __p = v15;
  long long v39 = v15;
  long long v40 = v15;
  long long v37 = v15;
  long long v38 = v15;
  long long v35 = v15;
  long long v36 = v15;
  long long v33 = v15;
  long long v34 = v15;
  long long v32 = v15;
  LOBYTE(v32) = 0;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v48 = 10;
  unint64_t v49 = (char *)&v32 + 8;
  uint64_t v50 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = &v29;
  long long v16 = v27;
  uint64_t v17 = (uint64_t)*v27;
  uint64_t v24 = &v32;
  uint64_t v25 = a1;
  uint64_t v26 = v17;
  *(void *)&long long v22 = *(void *)(v17 + 8);
  *((void *)&v22 + 1) = v17;
  *(void *)&long long v23 = &v32;
  *((void *)&v23 + 1) = v17;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(&v22);
  v21[0] = *v16;
  v21[1] = v21[0];
  void v21[2] = &v32;
  v21[3] = v21[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(v21);
  long long v30 = v22;
  long long v31 = v23;
  uint64_t v18 = v21[0];
  if ((void)v22 == v21[0])
  {
    if (HIDWORD(v52) <= v52) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::dereference(&v30);
    *(void *)&long long v30 = *(void *)(v30 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(&v30);
    if (*(unsigned char *)v31) {
      *(unsigned char *)long long v31 = 0;
    }
  }
  while ((void)v30 != v18);
  if (*((_DWORD *)v24 + 71) > *((_DWORD *)v24 + 70)) {
LABEL_35:
  }
    boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v25, v26);
LABEL_36:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>>::~slot_call_iterator_cache((uint64_t)&v32);
  long long v20 = v28;
  if (v28 && atomic_fetch_add(v28 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
    if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
    }
  }
  return result;
}

void sub_1B8B9FC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B8B9FC40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8B9FD48);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 4;
  uint64_t v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v23 = a1[10];
    if ((uint64_t *)v23 != *a3) {
      goto LABEL_55;
    }
    int v19 = *(uint64_t **)(v23 + 8);
    uint64_t v9 = v6;
    uint64_t v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      long long v39 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v39)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  int v7 = *a2;
  int v8 = a2[2];
  uint64_t v9 = v6;
  uint64_t v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v16 = *((_DWORD *)v10 + 8);
        BOOL v17 = v16 < 1;
        if (v16 == 1) {
          BOOL v17 = *((_DWORD *)v10 + 10) < v8;
        }
        if (!v17) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
      uint64_t v9 = v10;
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)v10 + 8);
      BOOL v12 = v11 == v7;
      BOOL v13 = v11 < v7;
      if (v11 >= v7) {
        BOOL v14 = (uint64_t **)v10;
      }
      else {
        BOOL v14 = (uint64_t **)(v10 + 1);
      }
      if (v13) {
        long long v15 = v9;
      }
      else {
        long long v15 = v10;
      }
      if (v12)
      {
        BOOL v14 = (uint64_t **)v10;
        uint64_t v9 = v10;
      }
      else
      {
        uint64_t v9 = v15;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  uint64_t v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    int v19 = *(uint64_t **)(v18 + 8);
    long long v20 = v6;
    if (v7 == 1)
    {
      long long v21 = v5;
      while (1)
      {
        int v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10)) {
            goto LABEL_27;
          }
LABEL_22:
          long long v21 = (uint64_t *)v21[1];
          if (!v21) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v22 <= 1) {
            goto LABEL_22;
          }
LABEL_27:
          long long v20 = v21;
          long long v21 = (uint64_t *)*v21;
          if (!v21) {
            goto LABEL_44;
          }
        }
      }
    }
    uint64_t v27 = v5;
    do
    {
      int v28 = *((_DWORD *)v27 + 8);
      int v29 = (uint64_t **)(v27 + 1);
      BOOL v30 = v7 == v28;
      BOOL v31 = v7 < v28;
      if (v7 >= v28) {
        long long v32 = (uint64_t **)(v27 + 1);
      }
      else {
        long long v32 = (uint64_t **)v27;
      }
      if (!v31) {
        uint64_t v27 = v20;
      }
      if (v30) {
        long long v32 = v29;
      }
      else {
        long long v20 = v27;
      }
      uint64_t v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      uint64_t v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6]) {
        goto LABEL_46;
      }
    }
LABEL_31:
    uint64_t v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        uint64_t v26 = v25;
        uint64_t v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      long long v33 = v9;
      do
      {
        uint64_t v26 = (uint64_t *)v33[2];
        BOOL v12 = *v26 == (void)v33;
        long long v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9) {
      *uint64_t v24 = v26;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  long long v34 = *a3;
  uint64_t v35 = **a3;
  uint64_t v36 = (*a3)[1];
  *(void *)(v35 + 8) = v36;
  *(void *)v34[1] = v35;
  --a1[2];
  long long v37 = (atomic_uint *)v34[3];
  if (v37)
  {
    if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
      if (atomic_fetch_add(v37 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v37 + 24))(v37);
      }
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::dereference(void *a1)
{
  uint64_t v2 = a1[2];
  if (!*(unsigned char *)v2)
  {
    uint64_t v3 = *(void *)(*(void *)(*a1 + 16) + 32);
    uint64_t v4 = *(void *)(v3 + 24);
    if (!v4)
    {
      std::runtime_error::runtime_error(&v6, "call to empty boost::function");
      v6.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
      boost::throw_exception<boost::bad_function_call>(&v6);
    }
    (*(void (**)(uint64_t, void))((v4 & 0xFFFFFFFFFFFFFFFELL) + 8))(v3 + 32, **(unsigned int **)(v2 + 272));
    if (!*(unsigned char *)v2) {
      *(unsigned char *)uint64_t v2 = 1;
    }
  }
  return a1[2] + 1;
}

void sub_1B8BA010C()
{
}

void sub_1B8BA0150()
{
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1])
  {
LABEL_31:
    uint64_t v19 = a1[3];
    if (v19 != v1)
    {
      *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v35 = v20;
      long long v36 = v20;
      long long v33 = v20;
      long long v34 = v20;
      long long v31 = v20;
      long long v32 = v20;
      long long v29 = v20;
      long long v30 = v20;
      long long v27 = v20;
      long long v28 = v20;
      uint64_t v21 = *(void *)(v19 + 16);
      __p[0] = (void *)10;
      __p[1] = &v27;
      *(void *)&long long v38 = 0;
      *((void *)&v38 + 1) = v21;
      (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
      uint64_t v22 = a1[2];
      a1[3] = a1[1];
      uint64_t v23 = *(_DWORD **)(v22 + 288);
      if (v23) {
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v23, &v27);
      }
      *(void *)(v22 + 288) = 0;
      (*(void (**)(void))(**((void **)&v38 + 1) + 32))(*((void *)&v38 + 1));
      uint64_t v24 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)v38 - 1 >= 0)
        {
          uint64_t v25 = (char *)__p[1] + 16 * v38;
          do
          {
            uint64_t v26 = (atomic_uint *)*((void *)v25 - 1);
            if (v26)
            {
              if (atomic_fetch_add(v26 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v26 + 16))(v26);
                if (atomic_fetch_add(v26 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v26 + 24))(v26);
                }
              }
            }
            v25 -= 16;
          }
          while (v25 > v24);
        }
        if (__p[0] >= (void *)0xB) {
          operator delete(__p[1]);
        }
      }
    }
    return;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v3;
    long long v38 = v3;
    long long v35 = v3;
    long long v36 = v3;
    long long v33 = v3;
    long long v34 = v3;
    long long v31 = v3;
    long long v32 = v3;
    long long v29 = v3;
    long long v30 = v3;
    long long v27 = v3;
    long long v28 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    __p[0] = (void *)10;
    __p[1] = &v27;
    *(void *)&long long v38 = 0;
    *((void *)&v38 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(*(void *)(*a1 + 16), &v27, (void *)(a1[2] + 8));
    uint64_t v5 = *(void *)(*a1 + 16);
    uint64_t v6 = a1[2];
    if (*(unsigned char *)(v5 + 24))
    {
      ++*(_DWORD *)(v6 + 280);
      uint64_t v7 = *(void *)(v5 + 16);
      if (v7)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v7 + 8), memory_order_acquire))
        {
          int v8 = 1;
          goto LABEL_17;
        }
        uint64_t v6 = a1[2];
      }
      uint64_t v9 = *a1;
      uint64_t v10 = a1[1];
      a1[3] = *a1;
      if (v10 == v9)
      {
        BOOL v13 = *(_DWORD **)(v6 + 288);
        if (v13) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v13, &v27);
        }
        int v8 = 0;
        *(void *)(v6 + 288) = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 16);
        BOOL v12 = *(_DWORD **)(v6 + 288);
        if (v12) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v12, &v27);
        }
        *(void *)(v6 + 288) = v11;
        int v8 = 0;
        if (v11) {
          ++*(_DWORD *)(v11 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v6 + 284);
      int v8 = 1;
    }
LABEL_17:
    (*(void (**)(void))(**((void **)&v38 + 1) + 32))(*((void *)&v38 + 1));
    BOOL v14 = (char *)__p[1];
    if (__p[1])
    {
      if ((uint64_t)v38 - 1 >= 0)
      {
        long long v15 = (char *)__p[1] + 16 * v38;
        do
        {
          int v16 = (atomic_uint *)*((void *)v15 - 1);
          if (v16)
          {
            if (atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
              if (atomic_fetch_add(v16 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v16 + 24))(v16);
              }
            }
          }
          v15 -= 16;
        }
        while (v15 > v14);
      }
      if (__p[0] >= (void *)0xB) {
        operator delete(__p[1]);
      }
    }
    uint64_t v1 = *a1;
    uint64_t v17 = a1[1];
    if (!v8) {
      break;
    }
    uint64_t v18 = *(void *)(v1 + 8);
    *a1 = v18;
    if (v18 == v17)
    {
      uint64_t v1 = v17;
      goto LABEL_31;
    }
  }
  if (v1 == v17) {
    goto LABEL_31;
  }
}

void sub_1B8BA0588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BA059C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(uint64_t a1, void *a2, void *a3)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  long long v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3 != v3[1])
    {
      while (1)
      {
        memset(v11, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v4, (uint64_t)v11);
        if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v4 + 8) + 24))(*(void *)(v4 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(v4 + 16);
          if (v8 && atomic_load_explicit((atomic_uint *volatile)(v8 + 8), memory_order_acquire))
          {
LABEL_6:
            boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(a3, (uint64_t)v11);
            char v9 = 0;
            if (LODWORD(v11[0]) == SLODWORD(v11[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)a1, a2);
        }
        char v9 = 1;
        if (LODWORD(v11[0]) == SLODWORD(v11[0]) >> 31)
        {
LABEL_13:
          uint64_t v10 = (atomic_uint *)v11[2];
          if (v11[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v11[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
              if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v11[1]) {
          (*(void (**)(void))(*(void *)v11[1] + 8))(v11[1]);
        }
LABEL_17:
        if ((v9 & 1) == 0)
        {
          v4 += 24;
          if (v4 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        return;
      }
    }
  }
}

void sub_1B8BA0954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[8] = v4;
  v22[9] = v4;
  v22[6] = v4;
  v22[7] = v4;
  v22[4] = v4;
  void v22[5] = v4;
  _OWORD v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v23 = 10;
  std::string __p = v22;
  uint64_t v25 = 0;
  uint64_t v26 = v5;
  pthread_mutex_lock(v5);
  if (**(void **)a1 == a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1)
    {
      uint64_t v7 = (uint64_t *)operator new(0x20uLL);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      uint64_t v10 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v10, v9);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(v7, (uint64_t)v10);
      _DWORD v7[2] = v8[2];
      uint64_t v11 = v8[3];
      v7[3] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v21, (uint64_t)v7);
      BOOL v12 = *(uint64_t **)a1;
      BOOL v13 = *(atomic_uint **)(a1 + 8);
      *(_OWORD *)a1 = v21;
      *(void *)&long long v21 = v12;
      *((void *)&v21 + 1) = v13;
      if (v13)
      {
        if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
          if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
          }
        }
      }
    }
    BOOL v14 = *(uint64_t ***)a1;
    long long v15 = **(uint64_t ***)a1;
    uint64_t v16 = v15[1];
    *(void *)&long long v21 = v16;
    if (v15 != (uint64_t *)v16)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 16);
          if (!*(unsigned char *)(v17 + 24)) {
            break;
          }
          uint64_t v16 = *(void *)(v16 + 8);
          *(void *)&long long v21 = v16;
          long long v15 = *v14;
          if ((uint64_t *)v16 == *v14) {
            goto LABEL_15;
          }
        }
        uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v21);
        BOOL v14 = *(uint64_t ***)a1;
        *(void *)&long long v21 = v16;
        long long v15 = *v14;
      }
      while ((uint64_t *)v16 != *v14);
    }
LABEL_15:
    *(void *)(a1 + 16) = v16;
  }
  pthread_mutex_unlock(v26);
  uint64_t v18 = (char *)__p;
  if (__p)
  {
    if (v25 - 1 >= 0)
    {
      uint64_t v19 = (char *)__p + 16 * v25;
      do
      {
        long long v20 = (atomic_uint *)*((void *)v19 - 1);
        if (v20)
        {
          if (atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
            if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
            }
          }
        }
        v19 -= 16;
      }
      while (v19 > v18);
    }
    if (v23 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8BA0C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    long long v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8BA0F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

char *std::__list_imp<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::__create_node[abi:ne180100]<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (char *)operator new(0x48uLL);
  uint64_t v8 = v7;
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v7 + 1) = *(_OWORD *)a4;
    *((void *)v7 + 4) = *(void *)(a4 + 16);
  }
  unint64_t v9 = (std::string *)(v8 + 40);
  if (*(char *)(a4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 24), *(void *)(a4 + 32));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 24);
    *((void *)v8 + 7) = *(void *)(a4 + 40);
  }
  *((void *)v8 + 8) = *(void *)(a4 + 48);
  return v8;
}

void sub_1B8BA1118(_Unwind_Exception *a1)
{
  if (v1[39] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(uint64_t ***a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v28 = 0;
  long long v29 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v40 = v4;
  long long v41 = v4;
  long long v38 = v4;
  long long v39 = v4;
  long long v36 = v4;
  long long v37 = v4;
  long long v34 = v4;
  long long v35 = v4;
  long long v32 = v4;
  long long v33 = v4;
  uint64_t v5 = (pthread_mutex_t *)a1[3];
  *(void *)&long long v42 = 10;
  *((void *)&v42 + 1) = &v32;
  *(void *)&long long v43 = 0;
  *((void *)&v43 + 1) = v5;
  pthread_mutex_lock(v5);
  uint64_t v6 = (atomic_uint *)a1[1];
  if (!v6)
  {
    uint64_t v8 = *a1;
    goto LABEL_14;
  }
  unsigned int explicit = atomic_load_explicit(v6 + 2, memory_order_acquire);
  uint64_t v8 = *a1;
  if (explicit == 1)
  {
    uint64_t v9 = (uint64_t)a1[2];
    if ((uint64_t *)v9 == *v8)
    {
      uint64_t v9 = (*v8)[1];
      *(void *)&long long v30 = v9;
      uint64_t v10 = *v8;
      if (*v8 == (uint64_t *)v9)
      {
LABEL_11:
        a1[2] = (uint64_t **)v9;
        goto LABEL_12;
      }
    }
    else
    {
      *(void *)&long long v30 = a1[2];
      uint64_t v10 = *v8;
      if (*v8 == (uint64_t *)v9) {
        goto LABEL_11;
      }
    }
    uint64_t v11 = *(void *)(v9 + 16);
    if (*(unsigned char *)(v11 + 24))
    {
      uint64_t v9 = *(void *)(v9 + 8);
    }
    else
    {
      uint64_t v9 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::erase(v10, (int *)(v11 + 64), (uint64_t **)&v30);
      uint64_t v8 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v6 = (atomic_uint *)a1[1];
  if (v6) {
    atomic_fetch_add_explicit(v6 + 2, 1u, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v12 = v29;
  long long v28 = v8;
  long long v29 = v6;
  if (v12)
  {
    if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v43 + 1));
  unint64_t v13 = *((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    if ((uint64_t)v43 - 1 >= 0)
    {
      unint64_t v14 = *((void *)&v42 + 1) + 16 * v43;
      do
      {
        long long v15 = *(atomic_uint **)(v14 - 8);
        if (v15)
        {
          if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
            if (atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
            }
          }
        }
        v14 -= 16;
      }
      while (v14 > v13);
    }
    if ((unint64_t)v42 >= 0xB) {
      operator delete(*((void **)&v42 + 1));
    }
  }
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v16;
  long long v46 = v16;
  long long v43 = v16;
  long long v44 = v16;
  long long v41 = v16;
  long long v42 = v16;
  long long v39 = v16;
  long long v40 = v16;
  long long v37 = v16;
  long long v38 = v16;
  long long v35 = v16;
  long long v36 = v16;
  long long v33 = v16;
  long long v34 = v16;
  long long v32 = v16;
  LOBYTE(v32) = 0;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v48 = 10;
  unint64_t v49 = (char *)&v32 + 8;
  uint64_t v50 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = a2;
  uint64_t v17 = v28;
  uint64_t v18 = (uint64_t)*v28;
  uint64_t v25 = &v32;
  uint64_t v26 = a1;
  uint64_t v27 = v18;
  *(void *)&long long v23 = *(void *)(v18 + 8);
  *((void *)&v23 + 1) = v18;
  *(void *)&long long v24 = &v32;
  *((void *)&v24 + 1) = v18;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(&v23);
  v22[0] = *v17;
  v22[1] = v22[0];
  _OWORD v22[2] = &v32;
  v22[3] = v22[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(v22);
  long long v30 = v23;
  long long v31 = v24;
  uint64_t v19 = v22[0];
  if ((void)v23 == v22[0])
  {
    if (HIDWORD(v52) <= v52) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::dereference(&v30);
    *(void *)&long long v30 = *(void *)(v30 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(&v30);
    if (*(unsigned char *)v31) {
      *(unsigned char *)long long v31 = 0;
    }
  }
  while ((void)v30 != v19);
  if (*((_DWORD *)v25 + 71) > *((_DWORD *)v25 + 70)) {
LABEL_35:
  }
    boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v26, v27);
LABEL_36:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>>::~slot_call_iterator_cache((uint64_t)&v32);
  long long v21 = v29;
  if (v29 && atomic_fetch_add(v29 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
    if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
    }
  }
  return result;
}

void sub_1B8BA1588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B8BA1598(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8BA16A0);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 4;
  uint64_t v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    uint64_t v23 = a1[10];
    if ((uint64_t *)v23 != *a3) {
      goto LABEL_55;
    }
    uint64_t v19 = *(uint64_t **)(v23 + 8);
    uint64_t v9 = v6;
    long long v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      long long v39 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v39)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  int v7 = *a2;
  int v8 = a2[2];
  uint64_t v9 = v6;
  uint64_t v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v16 = *((_DWORD *)v10 + 8);
        BOOL v17 = v16 < 1;
        if (v16 == 1) {
          BOOL v17 = *((_DWORD *)v10 + 10) < v8;
        }
        if (!v17) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
        if (!v10) {
          goto LABEL_19;
        }
      }
      uint64_t v9 = v10;
      uint64_t v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)v10 + 8);
      BOOL v12 = v11 == v7;
      BOOL v13 = v11 < v7;
      if (v11 >= v7) {
        unint64_t v14 = (uint64_t **)v10;
      }
      else {
        unint64_t v14 = (uint64_t **)(v10 + 1);
      }
      if (v13) {
        long long v15 = v9;
      }
      else {
        long long v15 = v10;
      }
      if (v12)
      {
        unint64_t v14 = (uint64_t **)v10;
        uint64_t v9 = v10;
      }
      else
      {
        uint64_t v9 = v15;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  uint64_t v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    uint64_t v19 = *(uint64_t **)(v18 + 8);
    long long v20 = v6;
    if (v7 == 1)
    {
      long long v21 = v5;
      while (1)
      {
        int v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10)) {
            goto LABEL_27;
          }
LABEL_22:
          long long v21 = (uint64_t *)v21[1];
          if (!v21) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v22 <= 1) {
            goto LABEL_22;
          }
LABEL_27:
          long long v20 = v21;
          long long v21 = (uint64_t *)*v21;
          if (!v21) {
            goto LABEL_44;
          }
        }
      }
    }
    uint64_t v27 = v5;
    do
    {
      int v28 = *((_DWORD *)v27 + 8);
      long long v29 = (uint64_t **)(v27 + 1);
      BOOL v30 = v7 == v28;
      BOOL v31 = v7 < v28;
      if (v7 >= v28) {
        long long v32 = (uint64_t **)(v27 + 1);
      }
      else {
        long long v32 = (uint64_t **)v27;
      }
      if (!v31) {
        uint64_t v27 = v20;
      }
      if (v30) {
        long long v32 = v29;
      }
      else {
        long long v20 = v27;
      }
      uint64_t v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      long long v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1) {
        goto LABEL_46;
      }
    }
    else
    {
      long long v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6]) {
        goto LABEL_46;
      }
    }
LABEL_31:
    uint64_t v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        uint64_t v26 = v25;
        uint64_t v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      long long v33 = v9;
      do
      {
        uint64_t v26 = (uint64_t *)v33[2];
        BOOL v12 = *v26 == (void)v33;
        long long v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9) {
      *long long v24 = v26;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  long long v34 = *a3;
  uint64_t v35 = **a3;
  uint64_t v36 = (*a3)[1];
  *(void *)(v35 + 8) = v36;
  *(void *)v34[1] = v35;
  --a1[2];
  long long v37 = (atomic_uint *)v34[3];
  if (v37)
  {
    if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
      if (atomic_fetch_add(v37 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v37 + 24))(v37);
      }
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::dereference(void *a1)
{
  uint64_t v2 = a1[2];
  if (*(unsigned char *)v2) {
    return a1[2] + 1;
  }
  boost::signals2::detail::call_with_tuple_args<boost::signals2::detail::void_type>::m_invoke<boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,0u,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>&>((uint64_t)&v4, (void *)(*(void *)(*(void *)(*a1 + 16) + 32) + 24), (uint64_t *)(v2 + 272));
  if (*(unsigned char *)v2) {
    return a1[2] + 1;
  }
  *(unsigned char *)uint64_t v2 = 1;
  return a1[2] + 1;
}

void boost::signals2::detail::call_with_tuple_args<boost::signals2::detail::void_type>::m_invoke<boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,0u,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>&>(uint64_t a1, void *a2, uint64_t *a3)
{
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v8, *a3);
  boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::operator()(a2, &v8);
  if (v10)
  {
    char v4 = v8;
    uint64_t v5 = v9;
    uint64_t v6 = *v9;
    *((void *)v6 + 1) = *((void *)v8 + 1);
    **((void **)v4 + 1) = v6;
    uint64_t v10 = 0;
    if (v5 != &v8)
    {
      do
      {
        int v7 = (char **)v5[1];
        if (*((char *)v5 + 63) < 0)
        {
          operator delete(v5[5]);
          if (*((char *)v5 + 39) < 0) {
LABEL_9:
          }
            operator delete(v5[2]);
        }
        else if (*((char *)v5 + 39) < 0)
        {
          goto LABEL_9;
        }
        operator delete(v5);
        uint64_t v5 = v7;
      }
      while (v7 != &v8);
    }
  }
}

void sub_1B8BA1B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

void boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::operator()(void *a1, void *a2)
{
  if (!*a1)
  {
    std::runtime_error::runtime_error(&v16, "call to empty boost::function");
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
    boost::throw_exception<boost::bad_function_call>(&v16);
  }
  uint64_t v2 = *(void (**)(void *, uint64_t *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  long long v3 = a1 + 1;
  uint64_t v13 = (uint64_t)&v13;
  unint64_t v14 = &v13;
  uint64_t v15 = 0;
  uint64_t v4 = a2[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v5 = (uint64_t *)a2[1];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(*a2 + 8);
    **(void **)(v6 + 8) = v7;
    uint64_t v8 = v13;
    *(void *)(v13 + 8) = v5;
    *uint64_t v5 = v8;
    *(void *)(v6 + 8) = &v13;
    uint64_t v13 = v6;
    uint64_t v15 = v4;
    a2[2] = 0;
  }
  v2(v3, &v13);
  if (v15)
  {
    uint64_t v9 = v13;
    uint64_t v10 = v14;
    uint64_t v11 = *v14;
    *(void *)(v11 + 8) = *(void *)(v13 + 8);
    **(void **)(v9 + 8) = v11;
    uint64_t v15 = 0;
    if (v10 != &v13)
    {
      do
      {
        BOOL v12 = (uint64_t *)v10[1];
        if (*((char *)v10 + 63) < 0)
        {
          operator delete((void *)v10[5]);
          if (*((char *)v10 + 39) < 0) {
LABEL_12:
          }
            operator delete((void *)v10[2]);
        }
        else if (*((char *)v10 + 39) < 0)
        {
          goto LABEL_12;
        }
        operator delete(v10);
        uint64_t v10 = v12;
      }
      while (v12 != &v13);
    }
  }
}

void sub_1B8BA1C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

void sub_1B8BA1C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1])
  {
LABEL_31:
    uint64_t v19 = a1[3];
    if (v19 != v1)
    {
      *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v35 = v20;
      long long v36 = v20;
      long long v33 = v20;
      long long v34 = v20;
      long long v31 = v20;
      long long v32 = v20;
      long long v29 = v20;
      long long v30 = v20;
      long long v27 = v20;
      long long v28 = v20;
      uint64_t v21 = *(void *)(v19 + 16);
      __p[0] = (void *)10;
      __p[1] = &v27;
      *(void *)&long long v38 = 0;
      *((void *)&v38 + 1) = v21;
      (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
      uint64_t v22 = a1[2];
      a1[3] = a1[1];
      uint64_t v23 = *(_DWORD **)(v22 + 288);
      if (v23) {
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v23, &v27);
      }
      *(void *)(v22 + 288) = 0;
      (*(void (**)(void))(**((void **)&v38 + 1) + 32))(*((void *)&v38 + 1));
      long long v24 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)v38 - 1 >= 0)
        {
          uint64_t v25 = (char *)__p[1] + 16 * v38;
          do
          {
            uint64_t v26 = (atomic_uint *)*((void *)v25 - 1);
            if (v26)
            {
              if (atomic_fetch_add(v26 + 2, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v26 + 16))(v26);
                if (atomic_fetch_add(v26 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v26 + 24))(v26);
                }
              }
            }
            v25 -= 16;
          }
          while (v25 > v24);
        }
        if (__p[0] >= (void *)0xB) {
          operator delete(__p[1]);
        }
      }
    }
    return;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v3;
    long long v38 = v3;
    long long v35 = v3;
    long long v36 = v3;
    long long v33 = v3;
    long long v34 = v3;
    long long v31 = v3;
    long long v32 = v3;
    long long v29 = v3;
    long long v30 = v3;
    long long v27 = v3;
    long long v28 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    __p[0] = (void *)10;
    __p[1] = &v27;
    *(void *)&long long v38 = 0;
    *((void *)&v38 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(*(void *)(*a1 + 16), &v27, (void *)(a1[2] + 8));
    uint64_t v5 = *(void *)(*a1 + 16);
    uint64_t v6 = a1[2];
    if (*(unsigned char *)(v5 + 24))
    {
      ++*(_DWORD *)(v6 + 280);
      uint64_t v7 = *(void *)(v5 + 16);
      if (v7)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v7 + 8), memory_order_acquire))
        {
          int v8 = 1;
          goto LABEL_17;
        }
        uint64_t v6 = a1[2];
      }
      uint64_t v9 = *a1;
      uint64_t v10 = a1[1];
      a1[3] = *a1;
      if (v10 == v9)
      {
        uint64_t v13 = *(_DWORD **)(v6 + 288);
        if (v13) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v13, &v27);
        }
        int v8 = 0;
        *(void *)(v6 + 288) = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 16);
        BOOL v12 = *(_DWORD **)(v6 + 288);
        if (v12) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v12, &v27);
        }
        *(void *)(v6 + 288) = v11;
        int v8 = 0;
        if (v11) {
          ++*(_DWORD *)(v11 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v6 + 284);
      int v8 = 1;
    }
LABEL_17:
    (*(void (**)(void))(**((void **)&v38 + 1) + 32))(*((void *)&v38 + 1));
    unint64_t v14 = (char *)__p[1];
    if (__p[1])
    {
      if ((uint64_t)v38 - 1 >= 0)
      {
        uint64_t v15 = (char *)__p[1] + 16 * v38;
        do
        {
          std::runtime_error v16 = (atomic_uint *)*((void *)v15 - 1);
          if (v16)
          {
            if (atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
              if (atomic_fetch_add(v16 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v16 + 24))(v16);
              }
            }
          }
          v15 -= 16;
        }
        while (v15 > v14);
      }
      if (__p[0] >= (void *)0xB) {
        operator delete(__p[1]);
      }
    }
    uint64_t v1 = *a1;
    uint64_t v17 = a1[1];
    if (!v8) {
      break;
    }
    uint64_t v18 = *(void *)(v1 + 8);
    *a1 = v18;
    if (v18 == v17)
    {
      uint64_t v1 = v17;
      goto LABEL_31;
    }
  }
  if (v1 == v17) {
    goto LABEL_31;
  }
}

void sub_1B8BA20D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BA20E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(uint64_t a1, void *a2, void *a3)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  long long v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *v3;
    if (*v3 != v3[1])
    {
      while (1)
      {
        memset(v11, 170, 24);
        boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v4, (uint64_t)v11);
        if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        {
          if (!(*(unsigned int (**)(void))(**(void **)(v4 + 8) + 24))(*(void *)(v4 + 8))) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(v4 + 16);
          if (v8 && atomic_load_explicit((atomic_uint *volatile)(v8 + 8), memory_order_acquire))
          {
LABEL_6:
            boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(a3, (uint64_t)v11);
            char v9 = 0;
            if (LODWORD(v11[0]) == SLODWORD(v11[0]) >> 31) {
              goto LABEL_13;
            }
            goto LABEL_7;
          }
        }
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)a1, a2);
        }
        char v9 = 1;
        if (LODWORD(v11[0]) == SLODWORD(v11[0]) >> 31)
        {
LABEL_13:
          uint64_t v10 = (atomic_uint *)v11[2];
          if (v11[2])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v11[2] + 8), 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
              if (atomic_fetch_add(v10 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v10 + 24))(v10);
              }
            }
          }
          goto LABEL_17;
        }
LABEL_7:
        if (v11[1]) {
          (*(void (**)(void))(*(void *)v11[1] + 8))(v11[1]);
        }
LABEL_17:
        if ((v9 & 1) == 0)
        {
          v4 += 24;
          if (v4 != *(void *)(*(void *)(a1 + 32) + 8)) {
            continue;
          }
        }
        return;
      }
    }
  }
}

void sub_1B8BA249C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[8] = v4;
  v22[9] = v4;
  v22[6] = v4;
  v22[7] = v4;
  void v22[4] = v4;
  void v22[5] = v4;
  _OWORD v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v23 = 10;
  std::string __p = v22;
  uint64_t v25 = 0;
  uint64_t v26 = v5;
  pthread_mutex_lock(v5);
  if (**(void **)a1 == a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1)
    {
      uint64_t v7 = (uint64_t *)operator new(0x20uLL);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      uint64_t v10 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v10, v9);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(v7, (uint64_t)v10);
      _DWORD v7[2] = v8[2];
      uint64_t v11 = v8[3];
      v7[3] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v21, (uint64_t)v7);
      BOOL v12 = *(uint64_t **)a1;
      uint64_t v13 = *(atomic_uint **)(a1 + 8);
      *(_OWORD *)a1 = v21;
      *(void *)&long long v21 = v12;
      *((void *)&v21 + 1) = v13;
      if (v13)
      {
        if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
          if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
          }
        }
      }
    }
    unint64_t v14 = *(uint64_t ***)a1;
    uint64_t v15 = **(uint64_t ***)a1;
    uint64_t v16 = v15[1];
    *(void *)&long long v21 = v16;
    if (v15 != (uint64_t *)v16)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = *(void *)(v16 + 16);
          if (!*(unsigned char *)(v17 + 24)) {
            break;
          }
          uint64_t v16 = *(void *)(v16 + 8);
          *(void *)&long long v21 = v16;
          uint64_t v15 = *v14;
          if ((uint64_t *)v16 == *v14) {
            goto LABEL_15;
          }
        }
        uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v21);
        unint64_t v14 = *(uint64_t ***)a1;
        *(void *)&long long v21 = v16;
        uint64_t v15 = *v14;
      }
      while ((uint64_t *)v16 != *v14);
    }
LABEL_15:
    *(void *)(a1 + 16) = v16;
  }
  pthread_mutex_unlock(v26);
  uint64_t v18 = (char *)__p;
  if (__p)
  {
    if (v25 - 1 >= 0)
    {
      uint64_t v19 = (char *)__p + 16 * v25;
      do
      {
        long long v20 = (atomic_uint *)*((void *)v19 - 1);
        if (v20)
        {
          if (atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
            if (atomic_fetch_add(v20 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v20 + 24))(v20);
            }
          }
        }
        v19 -= 16;
      }
      while (v19 > v18);
    }
    if (v23 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8BA27C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    long long v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8BA2AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5ssctl3abm16GetFailureReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BA2C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BA2C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BA2CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1F1264D98;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN8coredump13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN8coredump13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1211";
}

uint64_t radio::QMIDebugCommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4)) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v7;
  v43[8] = v7;
  v43[5] = v7;
  v43[6] = v7;
  v43[3] = v7;
  v43[4] = v7;
  v43[1] = v7;
  void v43[2] = v7;
  long long v42 = v7;
  v43[0] = v7;
  *(_OWORD *)long long v40 = v7;
  long long v41 = v7;
  long long v38 = v7;
  long long v39 = v7;
  long long v36 = v7;
  long long v37 = v7;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Failed to ", 10);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  LOBYTE(cf[0]) = 10;
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)cf, 1);
  unint64_t v14 = (const char *)qmi::asString();
  size_t v15 = strlen(v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  uint64_t v16 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    if ((BYTE8(v42) & 0x10) != 0)
    {
      uint64_t v26 = v42;
      if ((unint64_t)v42 < *((void *)&v39 + 1))
      {
        *(void *)&long long v42 = *((void *)&v39 + 1);
        uint64_t v26 = *((void *)&v39 + 1);
      }
      uint64_t v27 = (const void **)&v39;
    }
    else
    {
      if ((BYTE8(v42) & 8) == 0)
      {
        size_t v24 = 0;
        HIBYTE(v35) = 0;
        uint64_t v25 = cf;
        goto LABEL_50;
      }
      uint64_t v27 = (const void **)&v37 + 1;
      uint64_t v26 = *((void *)&v38 + 1);
    }
    long long v28 = *v27;
    size_t v24 = v26 - (void)*v27;
    if (v24 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v29 = v24 | 7;
      }
      uint64_t v30 = v29 + 1;
      uint64_t v25 = operator new(v29 + 1);
      cf[1] = (CFTypeRef)v24;
      int64_t v35 = v30 | 0x8000000000000000;
      cf[0] = v25;
    }
    else
    {
      HIBYTE(v35) = v26 - *(unsigned char *)v27;
      uint64_t v25 = cf;
      if (!v24) {
        goto LABEL_50;
      }
    }
    memmove(v25, v28, v24);
LABEL_50:
    *((unsigned char *)v25 + v24) = 0;
    long long v31 = cf;
    if (v35 < 0) {
      long long v31 = (CFTypeRef *)cf[0];
    }
    *(_DWORD *)long long buf = 136315138;
    long long v46 = v31;
    _os_log_error_impl(&dword_1B8B00000, v16, OS_LOG_TYPE_ERROR, "%s: \n", buf, 0xCu);
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)cf[0]);
    }
  }
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v19 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v19 = *((void *)&v39 + 1);
    }
    long long v20 = (const void *)v39;
    size_t v17 = v19 - v39;
    if ((unint64_t)(v19 - v39) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((BYTE8(v42) & 8) == 0)
    {
      size_t v17 = 0;
      HIBYTE(v33) = 0;
      uint64_t v18 = __p;
      goto LABEL_22;
    }
    long long v20 = (const void *)*((void *)&v37 + 1);
    size_t v17 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
    if (*((void *)&v38 + 1) - *((void *)&v37 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_34:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v18 = operator new(v21 + 1);
    __p[1] = (void *)v17;
    unint64_t v33 = v22 | 0x8000000000000000;
    __p[0] = v18;
    goto LABEL_21;
  }
  HIBYTE(v33) = v17;
  uint64_t v18 = __p;
  if (v17) {
LABEL_21:
  }
    memmove(v18, v20, v17);
LABEL_22:
  *((unsigned char *)v18 + v17) = 0;
  CreateError();
  if (cf == a4) {
    goto LABEL_25;
  }
  CFTypeRef v23 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v23)
  {
    CFRelease(v23);
LABEL_25:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v36 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v36 + *(void *)(v36 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v36 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v43);
}

void sub_1B8BA333C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t radio::QMIDebugCommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xD0uLL);
  uint64_t v7 = (uint64_t)v6;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  size_t v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::QMIDebugCommandDriver::QMIDebugCommandDriver((uint64_t)v6, (uint64_t)&v16, (uint64_t)v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIDebugCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriver,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 80))(*a3, v11, v12);
}

void sub_1B8BA34F8(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8BA350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t radio::QMIDebugCommandDriver::QMIDebugCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::DebugCommandDriver::DebugCommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)a1 = &unk_1F1264DD8;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = 0;
  return a1;
}

void sub_1B8BA367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void radio::QMIDebugCommandDriver::~QMIDebugCommandDriver(radio::QMIDebugCommandDriver *this)
{
  *(void *)this = &unk_1F1264DD8;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  qmi::Client::~Client((radio::QMIDebugCommandDriver *)((char *)this + 176));
  uint64_t v3 = *((void *)this + 19);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 20);
    uint64_t v5 = (void *)*((void *)this + 19);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 32;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 19);
    }
    *((void *)this + 20) = v3;
    operator delete(v5);
  }
  radio::DebugCommandDriver::~DebugCommandDriver((void **)this);
}

{
  void *v1;
  uint64_t vars8;

  radio::QMIDebugCommandDriver::~QMIDebugCommandDriver(this);

  operator delete(v1);
}

void radio::QMIDebugCommandDriver::init(radio::QMIDebugCommandDriver *this)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_8_2;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v38 = 0xAAAAAAAAAAAA0063;
  uint64_t v39 = 0x9AAAAAAAAAAAAAALL;
  long long v37 = *(std::string::value_type **)"debug_ipc";
  memset(&__dst[1], 170, sizeof(std::string));
  Name = (const char *)radio::DebugCommandDriver::getName((radio::DebugCommandDriver *)v1);
  size_t v3 = strlen(Name);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (std::string *)operator new(v6 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v4;
    __dst[0].__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v3;
  uint64_t v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, Name, v4);
  v5->__r_.__value_.__s.__data_[v4] = 0;
  uint64_t v8 = std::string::append(__dst, "::", 2uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(void *)&v35[16] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)int64_t v35 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v39 >= 0) {
    uint64_t v10 = (const std::string::value_type *)&v37;
  }
  else {
    uint64_t v10 = v37;
  }
  if (v39 >= 0) {
    std::string::size_type v11 = HIBYTE(v39);
  }
  else {
    std::string::size_type v11 = v38;
  }
  uint64_t v12 = std::string::append((std::string *)v35, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __dst[1].__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v35[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v35);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_17:
  __dst[0].__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst[0].__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection((uint64_t *)__dst, *(Registry **)(v1 + 104));
  if (!__dst[0].__r_.__value_.__r.__words[0])
  {
    CFTypeRef v23 = *(NSObject **)(v1 + 88);
    long long v31 = v23;
    if (v23) {
      dispatch_retain(v23);
    }
    size_t v24 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v24 || (uint64_t v25 = std::__shared_weak_count::lock(v24)) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v26 = v25;
    atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v27 = std::__shared_weak_count::lock(v25);
      if (v27)
      {
LABEL_53:
        atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v30 = v27;
LABEL_54:
        std::__shared_weak_count::__release_weak(v26);
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        qmi::Client::createWithQueue();
        long long v28 = *(_OWORD *)&v35[16];
        *(_OWORD *)&v35[16] = 0uLL;
        uint64_t v29 = *(std::__shared_weak_count **)(v1 + 200);
        *(_OWORD *)(v1 + 192) = v28;
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        qmi::Client::~Client((qmi::Client *)v35);
        if (v30) {
          std::__shared_weak_count::__release_weak(v30);
        }
        uint64_t v21 = v31;
        if (v31) {
          goto LABEL_39;
        }
        goto LABEL_40;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v27 = std::__shared_weak_count::lock(v26);
      if (v27) {
        goto LABEL_53;
      }
    }
    uint64_t v30 = v27;
    goto LABEL_54;
  }
  unint64_t v14 = *(NSObject **)(v1 + 88);
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  size_t v15 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v15 || (uint64_t v16 = std::__shared_weak_count::lock(v15)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v17 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
    uint64_t v18 = std::__shared_weak_count::lock(v17);
    if (v18) {
      goto LABEL_24;
    }
LABEL_65:
    unint64_t v33 = v18;
    goto LABEL_25;
  }
  uint64_t v18 = std::__shared_weak_count::lock(v16);
  if (!v18) {
    goto LABEL_65;
  }
LABEL_24:
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v33 = v18;
LABEL_25:
  std::__shared_weak_count::__release_weak(v17);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::string::size_type size = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__dst[0].__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v19 = *(_OWORD *)&v35[16];
  *(_OWORD *)&v35[16] = 0uLL;
  long long v20 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v19;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  qmi::Client::~Client((qmi::Client *)v35);
  if (size && !atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v21 = object;
  if (object) {
LABEL_39:
  }
    dispatch_release(v21);
LABEL_40:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::set((qmi::Client *)(v1 + 176), (const char *)*MEMORY[0x1E4FB8C30]);
  qmi::Client::start((qmi::Client *)(v1 + 176));
  uint64_t v22 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__dst[0].__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      if ((SHIBYTE(v39) & 0x80000000) == 0) {
        return;
      }
LABEL_68:
      operator delete(v37);
      return;
    }
  }
  else if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v39) < 0) {
    goto LABEL_68;
  }
}

void sub_1B8BA3EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,dispatch_object_t object,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20) {
    std::__shared_weak_count::__release_weak(a20);
  }
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v32 - 136);
  if (*(char *)(v32 - 89) < 0) {
    operator delete(*(void **)(v32 - 112));
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D BSP started", v2, 2u);
  }
}

void ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke_5(uint64_t a1, xpc_object_t object)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v8 = object;
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
    std::string::size_type v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v8 = v3;
    std::string::size_type v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  xpc::object::to_string((uint64_t *)__p, (xpc::object *)&v8);
  if (v7 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  *(_DWORD *)long long buf = 136315138;
  uint64_t v10 = v5;
  _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "BSP server error %s", buf, 0xCu);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v3 = v8;
LABEL_5:
  xpc_release(v3);
}

void sub_1B8BA4114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void radio::QMIDebugCommandDriver::enable(void *a1, const void ***a2, uint64_t a3, NSObject **a4)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  *(void *)&long long v25 = a1;
  *((void *)&v25 + 1) = &v26;
  char v7 = a2 + 1;
  xpc_object_t v8 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)&v25 + 1, (uint64_t)&v26, v8 + 4, (uint64_t)(v8 + 4));
      long long v9 = (const void **)v8[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = (const void ***)v9;
          long long v9 = (const void **)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (const void ***)v8[2];
          BOOL v11 = *v10 == v8;
          xpc_object_t v8 = (const void **)v10;
        }
        while (!v11);
      }
      xpc_object_t v8 = (const void **)v10;
    }
    while (v10 != v7);
  }
  uint64_t v28 = a3;
  uint64_t v12 = *a4;
  if (*a4) {
    uint64_t v12 = _Block_copy(v12);
  }
  long long v13 = a4[1];
  object[0] = v12;
  object[1] = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  unint64_t v14 = (std::__shared_weak_count *)a1[10];
  if (!v14 || (uint64_t v15 = a1[9], (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v17 = v16;
  uint64_t v18 = (char *)operator new(0x38uLL);
  long long v19 = v18;
  *(_OWORD *)uint64_t v18 = v25;
  long long v20 = v26;
  uint64_t v21 = v27;
  *((void *)v18 + 2) = v26;
  uint64_t v22 = v18 + 16;
  *((void *)v18 + 3) = v21;
  if (v21)
  {
    *((void *)v20 + 2) = v22;
    *((void *)&v25 + 1) = &v26;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    *((void *)v18 + 1) = v22;
  }
  *((void *)v18 + 4) = v28;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)object;
  object[0] = 0;
  object[1] = 0;
  CFTypeRef v23 = a1[11];
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  size_t v24 = operator new(0x18uLL);
  *size_t v24 = v19;
  v24[1] = v15;
  v24[2] = v17;
  dispatch_async_f(v23, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (object[1]) {
    dispatch_release(object[1]);
  }
  if (object[0]) {
    _Block_release(object[0]);
  }
  std::__tree<std::string>::destroy(v26);
}

void sub_1B8BA4348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
}

void radio::QMIDebugCommandDriver::enable_sync(uint64_t a1, const void ***a2, dispatch_time_t a3, uint64_t a4)
{
  v42[0] = 0;
  v42[1] = v42;
  void v42[2] = 0x3802000000;
  v42[3] = __Block_byref_object_copy__8;
  v42[4] = __Block_byref_object_dispose__8;
  long long v43 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v44 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v8 = *(void **)a4;
  if (*(void *)a4) {
    xpc_object_t v8 = _Block_copy(v8);
  }
  long long v9 = *(NSObject **)(a4 + 8);
  long long v43 = v8;
  dispatch_object_t v44 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x2000000000;
  dispatch_source_t v41 = (dispatch_source_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_source_t v41 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_1E6194F00;
  aBlock[4] = v42;
  void aBlock[5] = &v38;
  uint64_t v10 = _Block_copy(aBlock);
  char v36 = 1;
  __s1[0] = 42;
  BOOL v11 = a2 + 1;
  uint64_t v12 = (uint64_t **)a2[1];
  if (!v12)
  {
LABEL_6:
    char v13 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    int v14 = *((char *)v12 + 55);
    if (v14 >= 0) {
      uint64_t v15 = (uint64_t *)(v12 + 4);
    }
    else {
      uint64_t v15 = v12[4];
    }
    if (v14 >= 0) {
      unint64_t v16 = *((unsigned __int8 *)v12 + 55);
    }
    else {
      unint64_t v16 = (unint64_t)v12[5];
    }
    int v17 = memcmp(__s1, v15, v16 != 0);
    if (v17)
    {
      if (v17 < 0) {
        goto LABEL_9;
      }
    }
    else if (v16 > 1)
    {
      goto LABEL_9;
    }
    int v18 = memcmp(v15, __s1, v16 != 0);
    if (!v18)
    {
      if (v16) {
        break;
      }
      goto LABEL_8;
    }
    if ((v18 & 0x80000000) == 0) {
      break;
    }
LABEL_8:
    ++v12;
LABEL_9:
    uint64_t v12 = (uint64_t **)*v12;
    if (!v12) {
      goto LABEL_6;
    }
  }
  char v13 = 1;
LABEL_23:
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  void v29[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v29[3] = &__block_descriptor_tmp_15_2;
  v29[4] = a1;
  if (v10) {
    long long v19 = _Block_copy(v10);
  }
  else {
    long long v19 = 0;
  }
  char v33 = v13;
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v30 = v19;
  long long v31 = v32;
  long long v20 = *a2;
  if (*a2 != (const void **)v11)
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)&v31, (uint64_t)v32, v20 + 4, (uint64_t)(v20 + 4));
      uint64_t v21 = (const void **)v20[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = (const void ***)v21;
          uint64_t v21 = (const void **)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (const void ***)v20[2];
          BOOL v23 = *v22 == v20;
          long long v20 = (const void **)v22;
        }
        while (!v23);
      }
      long long v20 = (const void **)v22;
    }
    while (v22 != v11);
  }
  size_t v24 = _Block_copy(v29);
  long long v34 = v24;
  radio::QMIDebugCommandDriver::queryAndCacheCapabilities_sync(a1, &v34);
  if (v24) {
    _Block_release(v24);
  }
  long long v25 = v39[3];
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_16;
  handler[3] = &__block_descriptor_tmp_20_4;
  if (v10) {
    uint64_t v26 = _Block_copy(v10);
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v28 = v26;
  dispatch_source_set_event_handler(v25, handler);
  dispatch_source_set_timer((dispatch_source_t)v39[3], a3, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
  dispatch_activate((dispatch_object_t)v39[3]);
  if (v28) {
    _Block_release(v28);
  }
  std::__tree<std::string>::destroy(v32[0]);
  if (v30) {
    _Block_release(v30);
  }
  if (v10) {
    _Block_release(v10);
  }
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(v42, 8);
  if (v44) {
    dispatch_release(v44);
  }
  if (v43) {
    _Block_release(v43);
  }
}

void sub_1B8BA474C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,uint64_t a21,char *a22)
{
  if (v23) {
    _Block_release(v23);
  }
  std::__tree<std::string>::destroy(a22);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v22) {
    _Block_release(v22);
  }
  _Block_object_dispose((const void *)(v25 - 192), 8);
  _Block_object_dispose((const void *)(v25 - 160), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v24 + 40);
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  std::string::size_type v4 = *(const void **)(v3 + 40);
  if (!v4 || !*(void *)(v3 + 48)) {
    goto LABEL_24;
  }
  CFTypeRef v5 = *a2;
  if (*a2 && (CFRetain(*a2), (std::string::size_type v4 = *(const void **)(v3 + 40)) == 0)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = _Block_copy(v4);
  }
  char v7 = *(NSObject **)(v3 + 48);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_3;
  v12[3] = &__block_descriptor_tmp_91_1;
  if (v6)
  {
    long long aBlock = _Block_copy(v6);
    CFTypeRef cf = v5;
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long aBlock = 0;
  CFTypeRef cf = v5;
  if (v5) {
LABEL_11:
  }
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, v12);
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v9 = *(const void **)(v8 + 40);
  *(void *)(v8 + 40) = 0;
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = *(NSObject **)(v8 + 48);
  *(void *)(v8 + 48) = 0;
  if (v10) {
    dispatch_release(v10);
  }
LABEL_24:
  BOOL v11 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v11)
  {
    dispatch_source_cancel(v11);
    dispatch_release(*(dispatch_object_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void radio::QMIDebugCommandDriver::queryAndCacheCapabilities_sync(uint64_t a1, void **a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v17 = v4;
  long long v18 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v17);
  CFTypeRef v5 = (const void **)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1) != (void)v18)
  {
    while (*((unsigned char *)*v5 + 8) != 1)
    {
      if (++v5 == (const void **)v18) {
        goto LABEL_8;
      }
    }
  }
  if (v5 == (const void **)v18)
  {
LABEL_8:
    char v7 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(&v17);
  }
  else
  {
    if (!v6) {
      __cxa_bad_cast();
    }
    char v7 = v6 + 12;
  }
  *(_DWORD *)char v7 = 32;
  uint64_t v12 = a1 + 176;
  uint64_t v13 = QMIServiceMsg::create();
  int v14 = 25000;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  _OWORD v10[2] = ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v10[3] = &__block_descriptor_tmp_26_2;
  v10[4] = a1;
  uint64_t v8 = *a2;
  if (*a2) {
    uint64_t v8 = _Block_copy(v8);
  }
  BOOL v11 = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6195018;
  aBlock[4] = v10;
  long long v9 = _Block_copy(aBlock);
  unint64_t v16 = v9;
  if (v13)
  {
    qmi::Client::send();
    long long v9 = v16;
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v11) {
    _Block_release(v11);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v17);
}

void sub_1B8BA4B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B8BA4B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BA4B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    long long v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    long long v4 = 0;
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    CFTypeRef cf = *a2;
    if (v3) {
      CFRetain(v3);
    }
    (*(void (**)(uint64_t, CFTypeRef *))(v5 + 16))(v5, &cf);
    if (cf) {
      CFRelease(cf);
    }
    return;
  }
  uint64_t v6 = *(void **)(a1 + 32);
  char v7 = dispatch_group_create();
  if (v6[20] != v6[19])
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = &__block_descriptor_tmp_12_2;
    uint64_t v31 = a1;
    while (1)
    {
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      if (!*(unsigned char *)(a1 + 72)) {
        break;
      }
      int v11 = 1;
LABEL_45:
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
      aBlock[3] = v10;
      dispatch_group_t group = v7;
      if (v7)
      {
        dispatch_retain(v7);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      uint64_t v28 = _Block_copy(aBlock);
      char v36 = v28;
      radio::QMIDebugCommandDriver::enableSpecific_sync((uint64_t)v6, &v36, v9, v11);
      if (v28) {
        _Block_release(v28);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      if (v7)
      {
        dispatch_group_leave(v7);
        dispatch_release(v7);
      }
      uint64_t v8 = ++v9;
      if (v9 >= (unint64_t)((uint64_t)(v6[20] - v6[19]) >> 5)) {
        goto LABEL_55;
      }
    }
    uint64_t v12 = a1;
    uint64_t v13 = v10;
    int v14 = *(uint64_t ***)(v12 + 56);
    if (!v14)
    {
      int v11 = 0;
LABEL_44:
      uint64_t v10 = v13;
      a1 = v31;
      goto LABEL_45;
    }
    uint64_t v15 = v6[19] + 32 * v8;
    long long v18 = *(const void **)(v15 + 8);
    uint64_t v16 = v15 + 8;
    long long v17 = v18;
    int v19 = *(char *)(v16 + 23);
    if (v19 >= 0) {
      long long v20 = (const void *)v16;
    }
    else {
      long long v20 = v17;
    }
    if (v19 >= 0) {
      size_t v21 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      size_t v21 = *(void *)(v16 + 8);
    }
    while (1)
    {
      int v22 = *((char *)v14 + 55);
      if (v22 >= 0) {
        BOOL v23 = (uint64_t *)(v14 + 4);
      }
      else {
        BOOL v23 = v14[4];
      }
      if (v22 >= 0) {
        size_t v24 = *((unsigned __int8 *)v14 + 55);
      }
      else {
        size_t v24 = (size_t)v14[5];
      }
      if (v24 >= v21) {
        size_t v25 = v21;
      }
      else {
        size_t v25 = v24;
      }
      int v26 = memcmp(v20, v23, v25);
      if (v26)
      {
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_39;
        }
      }
      else if (v21 >= v24)
      {
LABEL_39:
        int v27 = memcmp(v23, v20, v25);
        if (v27)
        {
          if ((v27 & 0x80000000) == 0)
          {
LABEL_41:
            int v11 = 1;
            goto LABEL_44;
          }
        }
        else if (v24 >= v21)
        {
          goto LABEL_41;
        }
        ++v14;
      }
      int v14 = (uint64_t **)*v14;
      if (!v14)
      {
        int v11 = 0;
        goto LABEL_44;
      }
    }
  }
LABEL_55:
  uint64_t v29 = v6[11];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_13;
  block[3] = &__block_descriptor_tmp_14_5;
  uint64_t v30 = *(void **)(a1 + 40);
  if (v30) {
    uint64_t v30 = _Block_copy(v30);
  }
  char v33 = v30;
  dispatch_group_notify(v7, v29, block);
  if (v33) {
    _Block_release(v33);
  }
  if (v7) {
    dispatch_release(v7);
  }
}

void sub_1B8BA4ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BA4EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, dispatch_group_t group)
{
  if (v21) {
    _Block_release(v21);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
    if (v20)
    {
LABEL_8:
      dispatch_group_leave(v20);
      dispatch_release(v20);
      dispatch_release(v20);
      _Unwind_Resume(exception_object);
    }
  }
  else if (v20)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(exception_object);
}

void radio::QMIDebugCommandDriver::enableSpecific_sync(uint64_t a1, void **a2, int a3, int a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a3;
    LOWORD(v44) = 1024;
    *(_DWORD *)((char *)&v44 + 2) = a4;
    _os_log_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEFAULT, "#I Setting enable on index %u to %d", buf, 0xEu);
  }
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v41 = v9;
  long long v42 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v41);
  uint64_t v10 = (const void **)*((void *)&v41 + 1);
  int v11 = (const void **)v42;
  uint64_t v12 = (const void **)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1) != (void)v42)
  {
    uint64_t v12 = (const void **)*((void *)&v41 + 1);
    while (*((unsigned char *)*v12 + 8) != 1)
    {
      if (++v12 == (const void **)v42) {
        goto LABEL_11;
      }
    }
  }
  if (v12 == (const void **)v42)
  {
LABEL_11:
    int v14 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(&v41);
    uint64_t v10 = (const void **)*((void *)&v41 + 1);
    int v11 = (const void **)v42;
  }
  else
  {
    if (!v13) {
      goto LABEL_38;
    }
    int v14 = v13 + 12;
  }
  *(_DWORD *)int v14 = 33;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 0x40000000;
  uint64_t v38 = ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_2;
  uint64_t v39 = &__block_descriptor_tmp_31;
  char v40 = a4;
  if (v10 == v11) {
    goto LABEL_20;
  }
  uint64_t v15 = ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_2;
  while (*((unsigned char *)*v10 + 8) != 18)
  {
    if (++v10 == v11) {
      goto LABEL_20;
    }
  }
  if (v10 == v11)
  {
LABEL_20:
    long long v17 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(&v41, 18);
    uint64_t v15 = v38;
  }
  else
  {
    if (!v16) {
      goto LABEL_38;
    }
    long long v17 = v16 + 9;
  }
  v15((uint64_t)v37, v17);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 0x40000000;
  long long v18 = ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_3;
  long long v34 = ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_3;
  int64_t v35 = &__block_descriptor_tmp_33_1;
  int v36 = a3;
  int v19 = (const void **)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1) != (void)v42)
  {
    while (*((unsigned char *)*v19 + 8) != 16)
    {
      if (++v19 == (const void **)v42) {
        goto LABEL_28;
      }
    }
  }
  if (v19 != (const void **)v42)
  {
    if (v20)
    {
      size_t v21 = v20 + 9;
      goto LABEL_29;
    }
LABEL_38:
    __cxa_bad_cast();
  }
LABEL_28:
  size_t v21 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::RegionIndex>(&v41);
  long long v18 = v34;
LABEL_29:
  v18((uint64_t)v33, v21);
  uint64_t v28 = a1 + 176;
  uint64_t v29 = QMIServiceMsg::create();
  int v30 = 25000;
  uint64_t v31 = 0;
  long long aBlock = 0;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  v24[2] = ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_4;
  v24[3] = &__block_descriptor_tmp_38_5;
  _OWORD v24[4] = a1;
  int v26 = a3;
  char v27 = a4;
  int v22 = *a2;
  if (*a2) {
    int v22 = _Block_copy(v22);
  }
  size_t v25 = v22;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v44 = 0x40000000;
  long long v45 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  long long v46 = &unk_1E6195018;
  uint64_t v47 = v24;
  BOOL v23 = _Block_copy(buf);
  long long aBlock = v23;
  if (v29)
  {
    qmi::Client::send();
    BOOL v23 = aBlock;
  }
  if (v23) {
    _Block_release(v23);
  }
  if (v25) {
    _Block_release(v25);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v41);
}

void sub_1B8BA53A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BA5408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    long long v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    CFTypeRef v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_13(uint64_t a1)
{
}

void sub_1B8BA5510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void *__copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

const void *__copy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE48c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE(void *a1, void *a2)
{
  uint64_t result = (const void *)a2[5];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = 0;
  a1[6] = a1 + 7;
  a1[5] = result;
  a1[8] = 0;
  uint64_t v5 = (const void **)a2[6];
  uint64_t v6 = (const void **)(a2 + 7);
  if (v5 != v6)
  {
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(a1 + 6, (uint64_t)(a1 + 7), v5 + 4, (uint64_t)(v5 + 4));
      char v7 = (const void **)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          char v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void **)v5[2];
          BOOL v9 = *v8 == v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

void sub_1B8BA5640(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(*(char **)(v1 + 56));
  CFTypeRef v3 = *(const void **)(v1 + 40);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE48c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE(uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 56));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    _Block_release(v2);
  }
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_16(uint64_t a1)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v4 = 7;
  strcpy(__p, "timeout");
  CreateError();
  uint64_t v2 = *(void *)(a1 + 32);
  CFTypeRef v6 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &v6);
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(cf);
}

void sub_1B8BA5770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v5 - 24));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BA578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = operator new(0x28uLL);
  *(_OWORD *)long long v17 = xmmword_1B8C339B0;
  strcpy((char *)__p, "Querying capabilities for enabling");
  radio::QMIDebugCommandDriver::checkError(v4, (uint64_t)a2, (uint64_t)&__p, &cf);
  if (SHIBYTE(v17[1]) < 0)
  {
    operator delete(__p);
    uint64_t v5 = (void *)cf;
    if (cf) {
      uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8)
    {
LABEL_6:
      uint64_t v7 = *(void *)(a1 + 40);
      std::string __p = v5;
      if (!v5) {
        goto LABEL_17;
      }
LABEL_16:
      CFRetain(v5);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v5 = (void *)cf;
    if (cf) {
      CFTypeRef v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v6 = 0;
    }
    if (v6) {
      goto LABEL_6;
    }
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  uint64_t v12 = ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  uint64_t v13 = &__block_descriptor_tmp_25_0;
  uint64_t v14 = v4;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    std::string __p = (void *)0xAAAAAAAA00000000;
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    bsp::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)(TlvValue + v10), (uint64_t)&__p);
    v12((uint64_t)v11, (uint64_t)&__p);
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
  }
  uint64_t v5 = (void *)cf;
  uint64_t v7 = *(void *)(a1 + 40);
  std::string __p = (void *)cf;
  if (cf) {
    goto LABEL_16;
  }
LABEL_17:
  (*(void (**)(uint64_t, void **))(v7 + 16))(v7, &__p);
  if (__p) {
    CFRelease(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BA59A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void sub_1B8BA5A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  *(_DWORD *)(v3 + 144) = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(v3 + 152);
  for (uint64_t i = *(void *)(v3 + 160); i != v4; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  *(void *)(v3 + 160) = v4;
  CFTypeRef v6 = *(long long **)(a2 + 8);
  uint64_t v38 = *(long long **)(a2 + 16);
  while (v6 != v38)
  {
    long long v47 = *v6;
    int v48 = *((_DWORD *)v6 + 4);
    HIBYTE(v39) = -86;
    unint64_t v41 = 0;
    long long __p = 0uLL;
    for (uint64_t j = 4; j != 20; ++j)
    {
      int v11 = *((unsigned __int8 *)&v47 + j);
      BOOL v12 = (v11 - 97) >= 0x1A && (v11 - 48) >= 0xA;
      if (!v12 || v11 == 95 || v11 == 46)
      {
        if (SHIBYTE(v41) < 0)
        {
          size_t v8 = (v41 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (*((void *)&__p + 1) == v8)
          {
            if ((v41 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            uint64_t p_p = (long long *)__p;
            if (v8 > 0x3FFFFFFFFFFFFFF2)
            {
              size_t v16 = 0x7FFFFFFFFFFFFFF7;
            }
            else
            {
LABEL_26:
              if (v8 + 1 > 2 * v8) {
                unint64_t v14 = v8 + 1;
              }
              else {
                unint64_t v14 = 2 * v8;
              }
              uint64_t v15 = (v14 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17) {
                uint64_t v15 = v14 | 7;
              }
              if (v14 >= 0x17) {
                size_t v16 = v15 + 1;
              }
              else {
                size_t v16 = 23;
              }
            }
            long long v17 = (long long *)operator new(v16);
            BOOL v9 = v17;
            if (!v8 || (memmove(v17, p_p, v8), v8 != 22)) {
              operator delete(p_p);
            }
            *(void *)&long long __p = v9;
            unint64_t v41 = v16 | 0x8000000000000000;
          }
          else
          {
            size_t v8 = *((void *)&__p + 1);
            BOOL v9 = (long long *)__p;
          }
          *((void *)&__p + 1) = v8 + 1;
        }
        else
        {
          if (HIBYTE(v41) == 22)
          {
            uint64_t p_p = &__p;
            size_t v8 = 22;
            goto LABEL_26;
          }
          size_t v8 = HIBYTE(v41);
          HIBYTE(v41) = (HIBYTE(v41) + 1) & 0x7F;
          BOOL v9 = &__p;
        }
        int v10 = (char *)v9 + v8;
        unsigned char *v10 = v11;
        v10[1] = 0;
        continue;
      }
    }
    int v18 = v47;
    unint64_t v20 = *(void *)(v3 + 160);
    unint64_t v19 = *(void *)(v3 + 168);
    if (v20 < v19)
    {
      *(_DWORD *)unint64_t v20 = v47;
      size_t v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v41) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        long long v22 = __p;
        *(void *)(v20 + 24) = v41;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      uint64_t v29 = (char *)(v20 + 32);
      *(void *)(v3 + 160) = v29;
      goto LABEL_66;
    }
    BOOL v23 = *(void ***)(v3 + 152);
    uint64_t v24 = (uint64_t)(v20 - (void)v23) >> 5;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 59) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v19 - (void)v23;
    if (v26 >> 4 > v25) {
      unint64_t v25 = v26 >> 4;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    uint64_t v46 = v3 + 168;
    if (v27)
    {
      if (v27 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v28 = (void **)operator new(32 * v27);
    }
    else
    {
      uint64_t v28 = 0;
    }
    int v30 = (char *)&v28[4 * v24];
    long long v42 = v28;
    long long v43 = (void **)v30;
    uint64_t v44 = (void **)v30;
    long long v45 = (char *)&v28[4 * v27];
    *(_DWORD *)int v30 = v18;
    uint64_t v31 = (std::string *)(v30 + 8);
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      BOOL v23 = *(void ***)(v3 + 152);
      unint64_t v20 = *(void *)(v3 + 160);
      int v30 = (char *)v43;
      uint64_t v32 = (char *)v44;
      if ((void **)v20 == v23) {
        goto LABEL_62;
      }
    }
    else
    {
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = __p;
      *((void *)v30 + 3) = v41;
      uint64_t v32 = v30;
      if ((void **)v20 == v23)
      {
LABEL_62:
        int64_t v35 = v23;
        goto LABEL_63;
      }
    }
    do
    {
      int v33 = *(_DWORD *)(v20 - 32);
      v20 -= 32;
      *((_DWORD *)v30 - 8) = v33;
      v30 -= 32;
      long long v34 = *(_OWORD *)(v20 + 8);
      *((void *)v30 + 3) = *(void *)(v20 + 24);
      *(_OWORD *)(v30 + 8) = v34;
      *(void *)(v20 + 16) = 0;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 8) = 0;
    }
    while ((void **)v20 != v23);
    int64_t v35 = *(void ***)(v3 + 152);
    BOOL v23 = *(void ***)(v3 + 160);
LABEL_63:
    uint64_t v29 = v32 + 32;
    *(void *)(v3 + 152) = v30;
    *(void *)(v3 + 160) = v32 + 32;
    int v36 = *(char **)(v3 + 168);
    *(void *)(v3 + 168) = v45;
    long long v45 = v36;
    long long v42 = v35;
    long long v43 = v35;
    if (v23 == v35)
    {
      if (!v23) {
        goto LABEL_66;
      }
      goto LABEL_65;
    }
    do
    {
      long long v37 = v23 - 4;
      uint64_t v44 = v23 - 4;
      if (*((char *)v23 - 1) < 0) {
        operator delete(*(v23 - 3));
      }
      v23 -= 4;
    }
    while (v37 != v35);
    BOOL v23 = v35;
    if (v35) {
LABEL_65:
    }
      operator delete(v23);
LABEL_66:
    *(void *)(v3 + 160) = v29;
    if (SHIBYTE(v41) < 0) {
      operator delete((void *)__p);
    }
    CFTypeRef v6 = (long long *)((char *)v6 + 20);
  }
}

void sub_1B8BA5E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  *(void *)(v20 + 160) = v19;
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 40);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[7] = v5;
  v26[8] = v5;
  v26[5] = v5;
  v26[6] = v5;
  v26[3] = v5;
  v26[4] = v5;
  v26[1] = v5;
  v26[2] = v5;
  long long v25 = v5;
  v26[0] = v5;
  *(_OWORD *)BOOL v23 = v5;
  long long v24 = v5;
  long long v21 = v5;
  long long v22 = v5;
  long long v19 = v5;
  long long v20 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Setting enable for region ", 26);
  CFTypeRef v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" to ", 4);
  std::ostream::operator<<();
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if ((BYTE8(v25) & 0x10) != 0)
  {
    uint64_t v9 = v25;
    if ((unint64_t)v25 < *((void *)&v22 + 1))
    {
      *(void *)&long long v25 = *((void *)&v22 + 1);
      uint64_t v9 = *((void *)&v22 + 1);
    }
    int v10 = (const void *)v22;
    size_t v7 = v9 - v22;
    if ((unint64_t)(v9 - v22) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
  }
  else
  {
    if ((BYTE8(v25) & 8) == 0)
    {
      size_t v7 = 0;
      HIBYTE(v17) = 0;
      size_t v8 = __p;
      goto LABEL_14;
    }
    int v10 = (const void *)*((void *)&v20 + 1);
    size_t v7 = *((void *)&v21 + 1) - *((void *)&v20 + 1);
    if (*((void *)&v21 + 1) - *((void *)&v20 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    size_t v8 = operator new(v11 + 1);
    __p[1] = (void *)v7;
    unint64_t v17 = v12 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v17) = v7;
  size_t v8 = __p;
  if (v7) {
LABEL_13:
  }
    memmove(v8, v10, v7);
LABEL_14:
  *((unsigned char *)v8 + v7) = 0;
  radio::QMIDebugCommandDriver::checkError(v4, a2, (uint64_t)__p, &cf);
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    uint64_t v13 = *(void *)(a1 + 40);
    CFTypeRef v14 = cf;
    __p[0] = (void *)cf;
    if (!cf) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(a1 + 40);
  CFTypeRef v14 = cf;
  __p[0] = (void *)cf;
  if (cf) {
LABEL_18:
  }
    CFRetain(v14);
LABEL_19:
  (*(void (**)(uint64_t, void **))(v13 + 16))(v13, __p);
  if (__p[0]) {
    CFRelease(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  *(void *)&long long v19 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v19 + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v19 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v26);
}

void sub_1B8BA61DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, const void *a12, char a13)
{
}

void sub_1B8BA6200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriver::queryIPCLogs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[2] = a3;
  uint64_t v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_21QMIDebugCommandDriver12queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke;
  block[3] = &__block_descriptor_tmp_96_0;
  void block[4] = a1 + 72;
  void block[5] = v5;
  uint64_t v4 = a1 + 88;
  uint64_t v3 = *(NSObject **)(a1 + 88);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

void radio::QMIDebugCommandDriver::queryIPCLogs_sync(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x3802000000;
  v24[3] = __Block_byref_object_copy__39;
  _OWORD v24[4] = __Block_byref_object_dispose__40;
  long long v25 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v26 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v6 = _Block_copy(v6);
  }
  size_t v7 = *(NSObject **)(a3 + 8);
  long long v25 = v6;
  dispatch_object_t v26 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  v20[0] = 0;
  v20[1] = v20;
  void v20[2] = 0x4002000000;
  v20[3] = __Block_byref_object_copy__41;
  v20[4] = __Block_byref_object_dispose__42;
  long long __p = 0;
  long long v22 = 0;
  uint64_t v23 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  dispatch_source_t v19 = (dispatch_source_t)0xAAAAAAAAAAAAAAAALL;
  dispatch_source_t v19 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_1E6194F88;
  void aBlock[4] = v24;
  void aBlock[5] = v20;
  void aBlock[6] = &v16;
  size_t v8 = _Block_copy(aBlock);
  uint64_t v15 = v8;
  radio::QMIDebugCommandDriver::capture_sync(a1, &v15);
  if (v8) {
    _Block_release(v8);
  }
  uint64_t v9 = v17[3];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v13[3] = &unk_1E6194FB0;
  void v13[4] = v24;
  v13[5] = v20;
  void v13[6] = &v16;
  dispatch_source_set_event_handler(v9, v13);
  dispatch_source_set_timer((dispatch_source_t)v17[3], a2, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
  dispatch_activate((dispatch_object_t)v17[3]);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(v20, 8);
  int v10 = (char *)__p;
  if (__p)
  {
    uint64_t v11 = v22;
    uint64_t v12 = __p;
    if (v22 != __p)
    {
      do
        qmi::Client::~Client((qmi::Client *)(v11 - 32));
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    long long v22 = v10;
    operator delete(v12);
  }
  _Block_object_dispose(v24, 8);
  if (v26) {
    dispatch_release(v26);
  }
  if (v25) {
    _Block_release(v25);
  }
}

void sub_1B8BA6598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v30) {
    _Block_release(v30);
  }
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  std::vector<qmi::Client>::~vector[abi:ne180100](v29);
  _Block_object_dispose((const void *)(v31 - 136), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v28);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__39(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

__n128 __Block_byref_object_copy__41(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(char **)(a1 + 48);
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        qmi::Client::~Client((qmi::Client *)(v3 - 32));
      while (v3 != v1);
      uint64_t v4 = *(char **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

void **std::vector<qmi::Client>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        qmi::Client::~Client((qmi::Client *)(v3 - 32));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void radio::QMIDebugCommandDriver::capture_sync(uint64_t a1, void **a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 144))
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v39 = 0x3002000000;
    char v40 = __Block_byref_object_copy__47;
    unint64_t v41 = __Block_byref_object_dispose__48;
    long long v42 = (const void *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v4 = *a2;
    if (*a2) {
      uint64_t v4 = _Block_copy(v4);
    }
    long long v42 = v4;
    CFMutableDictionaryRef v37 = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v6 = Mutable;
    if (Mutable) {
      CFMutableDictionaryRef v37 = Mutable;
    }
    size_t v7 = dispatch_group_create();
    size_t v8 = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v8);
    }
    uint64_t v9 = *(void *)(a1 + 152);
    if (*(void *)(a1 + 160) != v9)
    {
      unint64_t v10 = 0;
      int v11 = *(_DWORD *)(a1 + 144);
      unsigned int v12 = 1;
      do
      {
        *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)long long v34 = v13;
        *(_OWORD *)&v34[16] = v13;
        CFTypeRef v14 = (int *)(v9 + 32 * v10);
        int v15 = *v14;
        *(_DWORD *)long long v34 = *v14;
        uint64_t v16 = (const std::string::value_type **)(v14 + 2);
        if (*((char *)v14 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v34[8], *v16, *((void *)v14 + 2));
          int v15 = *(_DWORD *)v34;
        }
        else
        {
          long long v17 = *(_OWORD *)v16;
          *(void *)&v34[24] = *((void *)v14 + 3);
          *(_OWORD *)&v34[8] = v17;
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
        aBlock[3] = &unk_1F1264F90;
        void aBlock[5] = a1;
        int v27 = v15;
        if ((v34[31] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v34[8], *(std::string::size_type *)&v34[16]);
        }
        else {
          std::string __p = *(std::string *)&v34[8];
        }
        int v31 = v11;
        unsigned int v32 = v12 - 1;
        dispatch_group_t group = v8;
        if (v8)
        {
          dispatch_retain(v8);
          if (group) {
            dispatch_group_enter(group);
          }
        }
        void aBlock[4] = &buf;
        CFTypeRef cf = v6;
        if (v6) {
          CFRetain(v6);
        }
        uint64_t v18 = _Block_copy(aBlock);
        int v33 = v18;
        radio::QMIDebugCommandDriver::enableSpecific_sync(a1, &v33, v12 - 1, 0);
        if (v18) {
          _Block_release(v18);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v34[31] & 0x80000000) != 0) {
LABEL_33:
          }
            operator delete(*(void **)&v34[8]);
        }
        else if ((v34[31] & 0x80000000) != 0)
        {
          goto LABEL_33;
        }
        unint64_t v10 = v12;
        uint64_t v9 = *(void *)(a1 + 152);
        ++v12;
      }
      while (v10 < (*(void *)(a1 + 160) - v9) >> 5);
    }
    if (v8)
    {
      dispatch_group_leave(v8);
      dispatch_release(v8);
    }
    dispatch_source_t v19 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_53;
    block[3] = &unk_1F1264FC8;
    void block[4] = &buf;
    CFTypeRef v25 = v6;
    if (v6) {
      CFRetain(v6);
    }
    dispatch_group_notify(v8, v19, block);
    if (v25) {
      CFRelease(v25);
    }
    if (v8) {
      dispatch_release(v8);
    }
    if (v6) {
      CFRelease(v6);
    }
    _Block_object_dispose(&buf, 8);
    if (v42) {
      _Block_release(v42);
    }
  }
  else
  {
    long long v20 = (char *)operator new(0x20uLL);
    strcpy(v20, "Block size hasn't been loaded");
    long long v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v20;
      _os_log_error_impl(&dword_1B8B00000, v21, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }
    std::string::__init_copy_ctor_external(&v36, v20, 0x1DuLL);
    CreateError();
    long long v22 = (void (**)(void))*a2;
    CFMutableDictionaryRef v23 = v37;
    CFMutableDictionaryRef v37 = 0;
    *(void *)&long long buf = v23;
    *(void *)long long v34 = 0;
    uint64_t v35 = 0;
    v22[2]();
    if ((void)buf) {
      CFRelease((CFTypeRef)buf);
    }
    if (v37) {
      CFRelease(v37);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    operator delete(v20);
  }
}

void sub_1B8BA6BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,dispatch_group_t group,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1, CFTypeRef *a2, const void **a3)
{
  uint64_t v4 = *(void *)(a1[4] + 8);
  if (!*(void *)(v4 + 40) || !*(void *)(v4 + 48)) {
    goto LABEL_36;
  }
  CFTypeRef v6 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  size_t v7 = *a3;
  if (v7) {
    CFRetain(v7);
  }
  size_t v8 = *(const void **)(v4 + 40);
  if (v8) {
    uint64_t v9 = _Block_copy(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *(NSObject **)(v4 + 48);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_97_1;
  if (v9)
  {
    long long aBlock = _Block_copy(v9);
    CFTypeRef v20 = v6;
    if (!v6) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  long long aBlock = 0;
  CFTypeRef v20 = v6;
  if (v6) {
LABEL_14:
  }
    CFRetain(v6);
LABEL_15:
  CFTypeRef cf = v7;
  if (v7) {
    CFRetain(v7);
  }
  dispatch_async(v10, block);
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v11 = *(void *)(a1[4] + 8);
  unsigned int v12 = *(const void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
  if (v12) {
    _Block_release(v12);
  }
  long long v13 = *(NSObject **)(v11 + 48);
  *(void *)(v11 + 48) = 0;
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = *(void *)(a1[5] + 8);
  uint64_t v16 = *(void *)(v14 + 40);
  for (uint64_t i = *(void *)(v14 + 48); i != v16; qmi::Client::~Client((qmi::Client *)(i - 32)))
    ;
  *(void *)(v14 + 48) = v16;
LABEL_36:
  long long v17 = *(NSObject **)(*(void *)(a1[6] + 8) + 24);
  if (v17)
  {
    dispatch_source_cancel(v17);
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1[6] + 8) + 24));
    *(void *)(*(void *)(a1[6] + 8) + 24) = 0;
  }
}

void ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(void *a1)
{
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v14 = 7;
  strcpy(__p, "timeout");
  CreateError();
  uint64_t v2 = *(void *)(a1[4] + 8);
  if (*(void *)(v2 + 40) && *(void *)(v2 + 48))
  {
    CFRetain(cf);
    uint64_t v3 = *(const void **)(v2 + 40);
    if (v3) {
      uint64_t v4 = _Block_copy(v3);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_2;
    block[3] = &__block_descriptor_tmp_97_1;
    if (v4)
    {
      long long aBlock = _Block_copy(v4);
      CFTypeRef v18 = cf;
    }
    else
    {
      long long aBlock = 0;
      CFTypeRef v18 = cf;
    }
    CFRetain(cf);
    CFTypeRef v19 = 0;
    dispatch_async(v5, block);
    if (v19) {
      CFRelease(v19);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v4) {
      _Block_release(v4);
    }
    CFRelease(cf);
    uint64_t v6 = *(void *)(a1[4] + 8);
    size_t v7 = *(const void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;
    if (v7) {
      _Block_release(v7);
    }
    size_t v8 = *(NSObject **)(v6 + 48);
    *(void *)(v6 + 48) = 0;
    if (v8) {
      dispatch_release(v8);
    }
    uint64_t v9 = *(void *)(a1[5] + 8);
    uint64_t v11 = *(void *)(v9 + 40);
    for (uint64_t i = *(void *)(v9 + 48); i != v11; qmi::Client::~Client((qmi::Client *)(i - 32)))
      ;
    *(void *)(v9 + 48) = v11;
  }
  unsigned int v12 = *(NSObject **)(*(void *)(a1[6] + 8) + 24);
  if (v12)
  {
    dispatch_source_cancel(v12);
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1[6] + 8) + 24));
    *(void *)(*(void *)(a1[6] + 8) + 24) = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BA7178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = (*(_DWORD *)(a1 + 96) * v3) >> 10;
    uint64_t v6 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 136315650;
    CFTypeRef v19 = v6;
    __int16 v20 = 1024;
    int v21 = v3;
    __int16 v22 = 1024;
    unsigned int v23 = v5;
    _os_log_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEFAULT, "#I Begin capturing file %s, blocks %u, %ukB", buf, 0x18u);
    int v3 = *(_DWORD *)(a1 + 48);
  }
  int v8 = *(_DWORD *)(a1 + 96);
  int v7 = *(_DWORD *)(a1 + 100);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_49;
  aBlock[3] = &unk_1F1264F58;
  uint64_t v9 = *(NSObject **)(a1 + 80);
  void aBlock[5] = v2;
  dispatch_group_t group = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(group);
  }
  int v14 = *(_DWORD *)(a1 + 48);
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string __p = *(std::string *)(a1 + 56);
  }
  unint64_t v10 = *(const void **)(a1 + 88);
  void aBlock[4] = *(void *)(a1 + 32);
  CFTypeRef cf = v10;
  if (v10) {
    CFRetain(v10);
  }
  uint64_t v11 = _Block_copy(aBlock);
  long long v17 = v11;
  radio::QMIDebugCommandDriver::captureFile_sync(v2, v7, v3, v8, &v17);
  if (v11) {
    _Block_release(v11);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_1B8BA73D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMIDebugCommandDriver::captureFile_sync(uint64_t a1, int a2, int a3, int a4, void **a5)
{
  uint64_t v101 = 0;
  uint64_t v102 = &v101;
  uint64_t v103 = 0x3002000000;
  v104 = __Block_byref_object_copy__55_0;
  v105 = __Block_byref_object_dispose__56_0;
  v106 = (const void *)0xAAAAAAAAAAAAAAAALL;
  unsigned int v5 = *a5;
  if (*a5) {
    unsigned int v5 = _Block_copy(v5);
  }
  v106 = v5;
  uint64_t v6 = dispatch_group_create();
  int v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  CFMutableDataRef v100 = (CFMutableDataRef)0xAAAAAAAAAAAAAAAALL;
  uint64_t v59 = v7;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (a4 * a3));
  CFMutableDataRef v100 = Mutable;
  if (Mutable) {
    uint64_t v9 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!v9)
  {
    unint64_t v99 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v98[7] = v16;
    v98[8] = v16;
    v98[5] = v16;
    v98[6] = v16;
    v98[3] = v16;
    v98[4] = v16;
    v98[1] = v16;
    v98[2] = v16;
    long long v97 = v16;
    v98[0] = v16;
    long long v95 = v16;
    long long v96 = v16;
    long long v93 = v16;
    long long v94 = v16;
    long long aBlock = v16;
    long long v92 = v16;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&aBlock, (uint64_t)"Memory allocation for file", 26);
    long long v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" failed", 7);
    CFTypeRef v90 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    if ((BYTE8(v97) & 0x10) != 0)
    {
      uint64_t v50 = v97;
      if ((unint64_t)v97 < *((void *)&v94 + 1))
      {
        *(void *)&long long v97 = *((void *)&v94 + 1);
        uint64_t v50 = *((void *)&v94 + 1);
      }
      uint64_t v51 = (const void *)v94;
      size_t v18 = v50 - v94;
      if ((unint64_t)(v50 - v94) >= 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_121;
      }
    }
    else
    {
      if ((BYTE8(v97) & 8) == 0)
      {
        size_t v18 = 0;
        HIBYTE(v89) = 0;
        CFTypeRef v19 = __dst;
        goto LABEL_94;
      }
      uint64_t v51 = (const void *)*((void *)&v92 + 1);
      size_t v18 = *((void *)&v93 + 1) - *((void *)&v92 + 1);
      if (*((void *)&v93 + 1) - *((void *)&v92 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_121:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v18 >= 0x17)
    {
      uint64_t v52 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v52 = v18 | 7;
      }
      uint64_t v53 = v52 + 1;
      CFTypeRef v19 = (void **)operator new(v52 + 1);
      __dst[1] = (void *)v18;
      unint64_t v89 = v53 | 0x8000000000000000;
      __dst[0] = v19;
    }
    else
    {
      HIBYTE(v89) = v18;
      CFTypeRef v19 = __dst;
      if (!v18)
      {
LABEL_94:
        *((unsigned char *)v19 + v18) = 0;
        CreateError();
        if (SHIBYTE(v89) < 0)
        {
          operator delete(__dst[0]);
          uint64_t v54 = v102[5];
          CFTypeRef v55 = v90;
          CFTypeRef v73 = v90;
          if (!v90)
          {
LABEL_99:
            CFMutableDataRef v56 = v100;
            if (v100 && (CFTypeID v57 = CFGetTypeID(v100), v57 == CFDataGetTypeID()))
            {
              *(void *)&long long v86 = v56;
              CFRetain(v56);
            }
            else
            {
              *(void *)&long long v86 = 0;
            }
            (*(void (**)(uint64_t, CFTypeRef *, long long *))(v54 + 16))(v54, &v73, &v86);
            if ((void)v86) {
              CFRelease((CFTypeRef)v86);
            }
            if (v73) {
              CFRelease(v73);
            }
            uint64_t v58 = (const void *)v102[5];
            v102[5] = 0;
            if (v58) {
              _Block_release(v58);
            }
            if (v90) {
              CFRelease(v90);
            }
            *(void *)&long long aBlock = *MEMORY[0x1E4FBA418];
            *(void *)((char *)&aBlock + *(void *)(aBlock - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
            *((void *)&aBlock + 1) = MEMORY[0x1E4FBA470] + 16;
            if (SHIBYTE(v96) < 0) {
              operator delete(*((void **)&v95 + 1));
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1BA9C8300](v98);
            CFMutableDataRef v49 = v100;
            if (!v100) {
              goto LABEL_115;
            }
LABEL_114:
            CFRelease(v49);
            goto LABEL_115;
          }
        }
        else
        {
          uint64_t v54 = v102[5];
          CFTypeRef v55 = v90;
          CFTypeRef v73 = v90;
          if (!v90) {
            goto LABEL_99;
          }
        }
        CFRetain(v55);
        goto LABEL_99;
      }
    }
    memmove(v19, v51, v18);
    goto LABEL_94;
  }
  CFDataSetLength(Mutable, (a4 * a3));
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v86 = v10;
  long long v87 = v10;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v86);
  uint64_t v11 = (const void **)*((void *)&v86 + 1);
  unsigned int v12 = (const void **)v87;
  long long v13 = (const void **)*((void *)&v86 + 1);
  if (*((void *)&v86 + 1) != (void)v87)
  {
    long long v13 = (const void **)*((void *)&v86 + 1);
    while (*((unsigned char *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v87) {
        goto LABEL_20;
      }
    }
  }
  if (v13 == (const void **)v87)
  {
LABEL_20:
    int v15 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(&v86);
    uint64_t v11 = (const void **)*((void *)&v86 + 1);
    unsigned int v12 = (const void **)v87;
  }
  else
  {
    if (!v14) {
      goto LABEL_125;
    }
    int v15 = v14 + 12;
  }
  *(_DWORD *)int v15 = 34;
  v82[0] = MEMORY[0x1E4F143A8];
  v82[1] = 0x40000000;
  long long v83 = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_2;
  long long v84 = &__block_descriptor_tmp_62_1;
  int v85 = a2;
  if (v11 != v12)
  {
    __int16 v20 = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_2;
    while (*((unsigned char *)*v11 + 8) != 16)
    {
      if (++v11 == v12) {
        goto LABEL_29;
      }
    }
    if (v11 != v12)
    {
      if (v21)
      {
        __int16 v22 = v21 + 9;
        goto LABEL_30;
      }
LABEL_125:
      __cxa_bad_cast();
    }
  }
LABEL_29:
  __int16 v22 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::RegionIndex>(&v86);
  __int16 v20 = v83;
LABEL_30:
  v20((uint64_t)v82, v22);
  if (a3)
  {
    int v23 = 0;
    uint64_t v60 = MEMORY[0x1E4F143A8];
    do
    {
      v78[0] = v60;
      v78[1] = 0x40000000;
      unint64_t v79 = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_3;
      uint64_t v80 = &__block_descriptor_tmp_64_1;
      int v81 = v23;
      CFTypeRef v25 = (char *)*((void *)&v86 + 1);
      uint64_t v24 = (char *)v87;
      dispatch_object_t v26 = (const void **)*((void *)&v86 + 1);
      if (*((void *)&v86 + 1) != (void)v87)
      {
        dispatch_object_t v26 = (const void **)*((void *)&v86 + 1);
        while (*((unsigned char *)*v26 + 8) != 17)
        {
          if (++v26 == (const void **)v87) {
            goto LABEL_41;
          }
        }
      }
      if (v26 != (const void **)v87)
      {
        if (!v27) {
          __cxa_bad_cast();
        }
        ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_3((uint64_t)v78, v27 + 3);
        goto LABEL_64;
      }
LABEL_41:
      uint64_t v28 = operator new(0x10uLL);
      uint64_t v29 = v28;
      v28[8] = 17;
      *(void *)uint64_t v28 = &unk_1F1265228;
      *((_DWORD *)v28 + 3) = 0;
      int v30 = v28 + 12;
      if ((unint64_t)v24 >= *((void *)&v87 + 1))
      {
        int64_t v32 = v24 - v25;
        uint64_t v33 = (v24 - v25) >> 3;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = *((void *)&v87 + 1) - (void)v25;
        if ((uint64_t)(*((void *)&v87 + 1) - (void)v25) >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          if (v36 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          CFMutableDictionaryRef v37 = operator new(8 * v36);
          uint64_t v38 = &v37[8 * v33];
          void *v38 = v29;
          uint64_t v31 = (uint64_t)(v38 + 1);
          if (v25 != v24)
          {
LABEL_52:
            if ((unint64_t)(v32 - 8) < 0x58) {
              goto LABEL_128;
            }
            if ((unint64_t)(v25 - v37) < 0x20) {
              goto LABEL_128;
            }
            unint64_t v39 = ((unint64_t)(v32 - 8) >> 3) + 1;
            uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v41 = &v24[-v40];
            uint64_t v38 = (void *)((char *)v38 - v40);
            long long v42 = &v37[8 * v33 - 16];
            uint64_t v43 = v24 - 16;
            uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v45 = *(_OWORD *)v43;
              *(v42 - 1) = *((_OWORD *)v43 - 1);
              _OWORD *v42 = v45;
              v42 -= 2;
              v43 -= 32;
              v44 -= 4;
            }
            while (v44);
            uint64_t v24 = v41;
            if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_128:
              do
              {
                uint64_t v46 = *((void *)v24 - 1);
                v24 -= 8;
                *--uint64_t v38 = v46;
              }
              while (v24 != v25);
            }
            CFTypeRef v25 = (char *)*((void *)&v86 + 1);
            *((void *)&v86 + 1) = v38;
            *(void *)&long long v87 = v31;
            *((void *)&v87 + 1) = &v37[8 * v36];
            if (!v25) {
              goto LABEL_63;
            }
LABEL_62:
            operator delete(v25);
            goto LABEL_63;
          }
        }
        else
        {
          CFMutableDictionaryRef v37 = 0;
          uint64_t v38 = (void *)(8 * v33);
          *(void *)(8 * v33) = v29;
          uint64_t v31 = 8 * v33 + 8;
          if (v25 != v24) {
            goto LABEL_52;
          }
        }
        *((void *)&v86 + 1) = v38;
        *(void *)&long long v87 = v31;
        *((void *)&v87 + 1) = &v37[8 * v36];
        if (v25) {
          goto LABEL_62;
        }
      }
      else
      {
        *(void *)uint64_t v24 = v28;
        uint64_t v31 = (uint64_t)(v24 + 8);
      }
LABEL_63:
      *(void *)&long long v87 = v31;
      int v7 = v59;
      v79((uint64_t)v78, v30);
LABEL_64:
      CFTypeRef v73 = (CFTypeRef)(a1 + 176);
      uint64_t v74 = QMIServiceMsg::create();
      int v75 = 25000;
      uint64_t v76 = 0;
      int v77 = 0;
      v67[0] = MEMORY[0x1E4F143A8];
      v67[1] = 1174405120;
      v67[2] = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_4;
      v67[3] = &unk_1F1265030;
      v67[5] = a1;
      dispatch_group_t group = v7;
      if (v7)
      {
        dispatch_retain(v7);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      int v70 = a2;
      int v71 = v23;
      int v72 = a4;
      v67[4] = &v101;
      CFTypeRef cf = v100;
      if (v100) {
        CFRetain(v100);
      }
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 0x40000000;
      *(void *)&long long v92 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      *((void *)&v92 + 1) = &unk_1E6195018;
      *(void *)&long long v93 = v67;
      long long v47 = _Block_copy(&aBlock);
      int v77 = v47;
      if (v74)
      {
        qmi::Client::send();
        long long v47 = v77;
      }
      if (v47) {
        _Block_release(v47);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      ++v23;
    }
    while (v23 != a3);
  }
  int v48 = *(NSObject **)(a1 + 88);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_69;
  block[3] = &unk_1F1265068;
  void block[4] = &v101;
  CFTypeRef v66 = v100;
  if (v100) {
    CFRetain(v100);
  }
  dispatch_group_notify(v7, v48, block);
  if (v66) {
    CFRelease(v66);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v86);
  CFMutableDataRef v49 = v100;
  if (v100) {
    goto LABEL_114;
  }
LABEL_115:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
  _Block_object_dispose(&v101, 8);
  if (v106) {
    _Block_release(v106);
  }
}

void sub_1B8BA7EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, NSObject *group, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,dispatch_group_t object,uint64_t a35,uint64_t a36,uint64_t a37,const void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,const void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,const void *a60,__int16 a61)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a53);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a38);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a60);
  std::ostringstream::~ostringstream((uint64_t)&a61);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v61 - 168));
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
    dispatch_release(group);
  }
  _Block_object_dispose((const void *)(v61 - 160), 8);
  unint64_t v63 = *(const void **)(v61 - 120);
  if (v63) {
    _Block_release(v63);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_49(uint64_t a1, std::string::size_type *a2, const void **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 40);
  std::string::size_type v5 = *a2;
  if (*a2) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(NSObject **)(v4 + 40);
  if (v6)
  {
    if (!os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      if (!v9) {
        return;
      }
      goto LABEL_7;
    }
    long long v16 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      long long v16 = (void *)*v16;
    }
    LODWORD(v18.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v18.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v5;
    _os_log_error_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_ERROR, "Failed capturing %s, err: %@", (uint8_t *)&v18, 0x16u);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (v9)
    {
LABEL_7:
      long long v10 = (const void *)*a2;
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      if (v10) {
        CFRetain(v10);
      }
      CFTypeRef cf = 0;
      (*(void (**)(uint64_t, std::string *, CFTypeRef *))(v9 + 16))(v9, &v18, &cf);
      if (cf) {
        CFRelease(cf);
      }
      if (v18.__r_.__value_.__r.__words[0]) {
        CFRelease(v18.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      unsigned int v12 = *(const void **)(v11 + 40);
      *(void *)(v11 + 40) = 0;
      if (v12) {
        _Block_release(v12);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (void *)(a1 + 64);
      if (*(char *)(a1 + 87) < 0) {
        int v14 = (void *)*v14;
      }
      LODWORD(v18.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEFAULT, "#I Captured %s", (uint8_t *)&v18, 0xCu);
    }
    int v15 = *a3;
    if (*(char *)(a1 + 87) < 0) {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
    }
    else {
      std::string v18 = *(std::string *)(a1 + 64);
    }
    ctu::cf::convert_copy();
    CFTypeRef cf = v15;
    if (v15)
    {
      CFRetain(v15);
      CFRelease(v15);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B8BA82A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BA8304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
}

CFTypeRef __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    std::string::size_type v5 = *(NSObject **)(a1 + 48);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v6 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 88);
  *(void *)(a1 + 88) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_1B8BA83AC(_Unwind_Exception *exception_object)
{
  int v3 = *(NSObject **)(v1 + 48);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(v1 + 48);
    if (v4) {
      dispatch_release(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    int v3 = *(NSObject **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    int v3 = *(NSObject **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  dispatch_group_leave(v3);
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_release(v4);
  }
}

CFTypeRef __copy_helper_block_e8_48c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE80c30_ZTSN8dispatch13group_sessionE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
    uint64_t v6 = *(NSObject **)(a2 + 80);
    *(void *)(a1 + 80) = v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t v6 = *(NSObject **)(a2 + 80);
    *(void *)(a1 + 80) = v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  dispatch_retain(v6);
  long long v7 = *(NSObject **)(a1 + 80);
  if (v7) {
    dispatch_group_enter(v7);
  }
LABEL_7:
  CFTypeRef result = *(CFTypeRef *)(a2 + 88);
  *(void *)(a1 + 88) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_48c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE80c30_ZTSN8dispatch13group_sessionE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(NSObject **)(a1 + 80);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 80);
    if (v4) {
      dispatch_release(v4);
    }
  }
  if (*(char *)(a1 + 79) < 0)
  {
    long long v5 = *(void **)(a1 + 56);
    operator delete(v5);
  }
}

void ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_53(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v1)
  {
    CFTypeRef v8 = 0;
    int v3 = *(const void **)(a1 + 40);
    if (v3 && (CFTypeID v4 = CFGetTypeID(*(CFTypeRef *)(a1 + 40)), v4 == CFDictionaryGetTypeID()))
    {
      CFTypeRef cf = v3;
      CFRetain(v3);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v1 + 16))(v1, &v8, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(const void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
    if (v6) {
      _Block_release(v6);
    }
  }
}

void sub_1B8BA8628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  int v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BA864C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  int v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__55_0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__56_0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_4(void *a1, qmi::MessageBase *a2)
{
  uint64_t v4 = a1[5];
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[7] = v5;
  v37[8] = v5;
  v37[5] = v5;
  void v37[6] = v5;
  v37[3] = v5;
  v37[4] = v5;
  v37[1] = v5;
  void v37[2] = v5;
  long long v36 = v5;
  v37[0] = v5;
  *(_OWORD *)std::string __p = v5;
  long long v35 = v5;
  long long v32 = v5;
  long long v33 = v5;
  long long v30 = v5;
  long long v31 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Getting Block for file ", 23);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", block ", 8);
  std::ostream::operator<<();
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if ((BYTE8(v36) & 0x10) != 0)
  {
    uint64_t v9 = v36;
    if ((unint64_t)v36 < *((void *)&v33 + 1))
    {
      *(void *)&long long v36 = *((void *)&v33 + 1);
      uint64_t v9 = *((void *)&v33 + 1);
    }
    long long v10 = (const void *)v33;
    size_t v7 = v9 - v33;
    if ((unint64_t)(v9 - v33) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_45;
    }
  }
  else
  {
    if ((BYTE8(v36) & 8) == 0)
    {
      size_t v7 = 0;
      HIBYTE(v42) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    long long v10 = (const void *)*((void *)&v31 + 1);
    size_t v7 = *((void *)&v32 + 1) - *((void *)&v31 + 1);
    if (*((void *)&v32 + 1) - *((void *)&v31 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_45:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v41 = v7;
    unint64_t v42 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v42) = v7;
  p_dst = (void **)&__dst;
  if (v7) {
LABEL_13:
  }
    memmove(p_dst, v10, v7);
LABEL_14:
  *((unsigned char *)p_dst + v7) = 0;
  radio::QMIDebugCommandDriver::checkError(v4, (uint64_t)a2, (uint64_t)&__dst, &cf);
  if (SHIBYTE(v42) < 0)
  {
    operator delete(__dst);
    long long v13 = (void **)cf;
    if (cf) {
      std::string v18 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      std::string v18 = 0;
    }
    if (v18)
    {
LABEL_19:
      uint64_t v15 = *(void *)(*(void *)(a1[4] + 8) + 40);
      if (v15)
      {
        uint64_t v28 = 0;
        std::string __dst = v13;
        if (v13) {
          CFRetain(v13);
        }
        CFTypeRef v39 = 0;
        uint64_t v28 = 0;
        (*(void (**)(uint64_t, void ***, CFTypeRef *))(v15 + 16))(v15, &__dst, &v39);
        if (v39) {
          CFRelease(v39);
        }
        if (__dst) {
          CFRelease(__dst);
        }
        uint64_t v16 = *(void *)(a1[4] + 8);
        long long v17 = *(const void **)(v16 + 40);
        *(void *)(v16 + 40) = 0;
        if (v17) {
          _Block_release(v17);
        }
      }
      goto LABEL_39;
    }
  }
  else
  {
    long long v13 = (void **)cf;
    if (cf) {
      int v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      int v14 = 0;
    }
    if (v14) {
      goto LABEL_19;
    }
  }
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  uint64_t v24 = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_5;
  CFTypeRef v25 = &__block_descriptor_tmp_67_1;
  uint64_t v27 = *(void *)((char *)a1 + 68);
  uint64_t v19 = (const void *)a1[7];
  CFTypeRef v26 = v19;
  if (v19) {
    CFRetain(v19);
  }
  uint64_t TlvValue = (char *)qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    std::string __dst = 0;
    size_t v41 = 0;
    unint64_t v42 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__dst, TlvValue, &TlvValue[v21], v21);
    v24((CFMutableDataRef *)v23, (uint64_t)&__dst);
    if (__dst)
    {
      size_t v41 = (size_t)__dst;
      operator delete(__dst);
    }
  }
  if (v26) {
    CFRelease(v26);
  }
LABEL_39:
  if (cf) {
    CFRelease(cf);
  }
  *(void *)&long long v30 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v30 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9C8300](v37);
}

void sub_1B8BA8AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, const void *);
  uint64_t v11 = *(void **)(v9 - 88);
  if (v11)
  {
    *(void *)(v9 - 80) = v11;
    operator delete(v11);
  }
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v8 + 32));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BA8B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (*(char *)(v9 - 65) < 0)
  {
    operator delete(*(void **)(v9 - 88));
    std::ostringstream::~ostringstream((uint64_t)va);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

CFMutableDataRef *___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_5(CFMutableDataRef *result, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)result + 11);
  if (*(void *)(a2 + 8) - *(void *)a2 == v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = (*((_DWORD *)result + 10) * v2);
    uint64_t v6 = &CFDataGetMutableBytePtr(result[4])[v5];
    size_t v7 = *(const void **)a2;
    size_t v8 = *((unsigned int *)v4 + 11);
    return (CFMutableDataRef *)memcpy(v6, v7, v8);
  }
  return result;
}

CFTypeRef __copy_helper_block_e8_32c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

CFTypeRef __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = *(NSObject **)(a1 + 48);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(NSObject **)(a1 + 48);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_69(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(v2 + 40);
  int v3 = (uint64_t *)(v2 + 40);
  if (v4)
  {
    CFTypeRef cf = 0;
    dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>(v3, &cf, (CFTypeRef *)(a1 + 40));
    if (cf) {
      CFRelease(cf);
    }
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(const void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
    if (v6) {
      _Block_release(v6);
    }
  }
}

void sub_1B8BA8DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::__split_buffer<radio::QMIDebugCommandDriver::RegionInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::shared_ptr<radio::QMIDebugCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriver,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12650C0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8BA8FA8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1}::operator() const(radio::QMIDebugCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8BA8FD0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriver *,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver *)#1},std::allocator<radio::QMIDebugCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriver *,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver *)#1},std::allocator<radio::QMIDebugCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::QMIDebugCommandDriver *,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver *)#1},std::allocator<radio::QMIDebugCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDebugCommandDr"
                     "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDeb"
                                "ugCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDebugCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDebugCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1}::operator() const(radio::QMIDebugCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)a2;
  size_t v7 = result;
  size_t v8 = (uint64_t **)(result + 1);
  if (result + 1 != (uint64_t *)a2)
  {
    int v9 = *((char *)a3 + 23);
    if (v9 >= 0) {
      long long v10 = a3;
    }
    else {
      long long v10 = *a3;
    }
    if (v9 >= 0) {
      size_t v11 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v11 = (size_t)a3[1];
    }
    int v12 = *(char *)(a2 + 55);
    if (v12 >= 0) {
      long long v13 = (const void *)(a2 + 32);
    }
    else {
      long long v13 = *(const void **)(a2 + 32);
    }
    if (v12 >= 0) {
      size_t v14 = *(unsigned __int8 *)(a2 + 55);
    }
    else {
      size_t v14 = *(void *)(a2 + 40);
    }
    if (v14 >= v11) {
      size_t v15 = v11;
    }
    else {
      size_t v15 = v14;
    }
    CFTypeRef result = (uint64_t *)memcmp(v10, v13, v15);
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
LABEL_19:
        CFTypeRef result = (uint64_t *)memcmp(v13, v10, v15);
        if (result)
        {
          if ((result & 0x80000000) == 0) {
            return result;
          }
        }
        else if (v14 >= v11)
        {
          return result;
        }
        uint64_t v29 = v6 + 1;
        CFTypeRef v39 = v6[1];
        if (v39)
        {
          do
          {
            uint64_t v29 = (uint64_t **)v39;
            CFTypeRef v39 = (uint64_t *)*v39;
            uint64_t v6 = v29;
            uint64_t v40 = v29;
          }
          while (v39);
        }
        else
        {
          uint64_t v40 = v6;
          do
          {
            size_t v41 = (uint64_t *)v40;
            uint64_t v40 = (uint64_t **)v40[2];
          }
          while (*v40 != v41);
        }
        if (v40 == v8) {
          goto LABEL_100;
        }
        uint64_t v44 = v40[4];
        unint64_t v42 = (uint64_t *)(v40 + 4);
        uint64_t v43 = v44;
        int v45 = *((char *)v42 + 23);
        if (v45 >= 0) {
          uint64_t v46 = v42;
        }
        else {
          uint64_t v46 = v43;
        }
        if (v45 >= 0) {
          size_t v47 = *((unsigned __int8 *)v42 + 23);
        }
        else {
          size_t v47 = v42[1];
        }
        if (v47 >= v11) {
          size_t v48 = v11;
        }
        else {
          size_t v48 = v47;
        }
        int v49 = memcmp(v10, v46, v48);
        if (v49)
        {
          if (v49 < 0) {
            goto LABEL_100;
          }
LABEL_99:
          uint64_t v50 = *v8;
          uint64_t v29 = v8;
          uint64_t v6 = v8;
          if (!*v8) {
            goto LABEL_100;
          }
          while (1)
          {
            uint64_t v6 = (uint64_t **)v50;
            CFTypeRef v55 = (const void *)v50[4];
            uint64_t v53 = v50 + 4;
            uint64_t v54 = v55;
            int v56 = *((char *)v53 + 23);
            if (v56 >= 0) {
              CFTypeID v57 = v53;
            }
            else {
              CFTypeID v57 = v54;
            }
            if (v56 >= 0) {
              size_t v58 = *((unsigned __int8 *)v53 + 23);
            }
            else {
              size_t v58 = v53[1];
            }
            if (v58 >= v11) {
              size_t v59 = v11;
            }
            else {
              size_t v59 = v58;
            }
            int v60 = memcmp(v10, v57, v59);
            if (v60)
            {
              if (v60 < 0) {
                goto LABEL_102;
              }
LABEL_116:
              CFTypeRef result = (uint64_t *)memcmp(v57, v10, v59);
              if (result)
              {
                if ((result & 0x80000000) == 0) {
                  return result;
                }
              }
              else if (v58 >= v11)
              {
                return result;
              }
              uint64_t v50 = v6[1];
              if (!v50) {
                goto LABEL_69;
              }
            }
            else
            {
              if (v11 >= v58) {
                goto LABEL_116;
              }
LABEL_102:
              uint64_t v50 = *v6;
              uint64_t v29 = v6;
              if (!*v6) {
                goto LABEL_100;
              }
            }
          }
        }
        if (v11 >= v47) {
          goto LABEL_99;
        }
LABEL_100:
        uint64_t v51 = (uint64_t *)operator new(0x38uLL);
        uint64_t v52 = (std::string *)(v51 + 4);
        if (*(char *)(a4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
        }
        else
        {
          *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
          v51[6] = *(void *)(a4 + 16);
        }
        *uint64_t v51 = 0;
        v51[1] = 0;
        void v51[2] = (uint64_t)v6;
        unsigned char *v29 = v51;
        uint64_t v61 = *(void *)*v7;
        if (v61)
        {
          *size_t v7 = v61;
          uint64_t v51 = *v29;
        }
        CFTypeRef result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v51);
        ++v7[2];
        return result;
      }
    }
    else if (v11 >= v14)
    {
      goto LABEL_19;
    }
  }
  uint64_t v16 = *v6;
  if ((uint64_t **)*v7 == v6)
  {
    std::string v18 = v6;
  }
  else
  {
    if (v16)
    {
      long long v17 = *v6;
      do
      {
        std::string v18 = (uint64_t **)v17;
        long long v17 = (uint64_t *)v17[1];
      }
      while (v17);
    }
    else
    {
      uint64_t v19 = v6;
      do
      {
        std::string v18 = (uint64_t **)v19[2];
        BOOL v20 = *v18 == (uint64_t *)v19;
        uint64_t v19 = v18;
      }
      while (v20);
    }
    int v21 = *((char *)v18 + 55);
    if (v21 >= 0) {
      __int16 v22 = (uint64_t *)(v18 + 4);
    }
    else {
      __int16 v22 = v18[4];
    }
    if (v21 >= 0) {
      size_t v23 = *((unsigned __int8 *)v18 + 55);
    }
    else {
      size_t v23 = (size_t)v18[5];
    }
    int v24 = *((char *)a3 + 23);
    if (v24 >= 0) {
      CFTypeRef v25 = a3;
    }
    else {
      CFTypeRef v25 = *a3;
    }
    if (v24 >= 0) {
      size_t v26 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v26 = (size_t)a3[1];
    }
    if (v26 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v26;
    }
    CFTypeRef result = (uint64_t *)memcmp(v22, v25, v27);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_48;
      }
    }
    else if (v23 >= v26)
    {
LABEL_48:
      uint64_t v28 = *v8;
      uint64_t v29 = v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_100;
      }
      while (1)
      {
        uint64_t v6 = (uint64_t **)v28;
        long long v32 = (const void *)v28[4];
        long long v30 = v28 + 4;
        long long v31 = v32;
        int v33 = *((char *)v30 + 23);
        if (v33 >= 0) {
          unint64_t v34 = v30;
        }
        else {
          unint64_t v34 = v31;
        }
        if (v33 >= 0) {
          size_t v35 = *((unsigned __int8 *)v30 + 23);
        }
        else {
          size_t v35 = v30[1];
        }
        if (v35 >= v26) {
          size_t v36 = v26;
        }
        else {
          size_t v36 = v35;
        }
        int v37 = memcmp(v25, v34, v36);
        if (v37)
        {
          if (v37 < 0) {
            goto LABEL_50;
          }
LABEL_64:
          CFTypeRef result = (uint64_t *)memcmp(v34, v25, v36);
          if (result)
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v35 >= v26)
          {
            return result;
          }
          uint64_t v28 = v6[1];
          if (!v28)
          {
LABEL_69:
            uint64_t v29 = v6 + 1;
            goto LABEL_100;
          }
        }
        else
        {
          if (v26 >= v35) {
            goto LABEL_64;
          }
LABEL_50:
          uint64_t v28 = *v6;
          uint64_t v29 = v6;
          if (!*v6) {
            goto LABEL_100;
          }
        }
      }
    }
  }
  if (v16) {
    unint64_t v38 = v18;
  }
  else {
    unint64_t v38 = v6;
  }
  if (v16) {
    uint64_t v29 = v18 + 1;
  }
  else {
    uint64_t v29 = v6;
  }
  if (!*v29)
  {
    uint64_t v6 = v38;
    goto LABEL_100;
  }
  return result;
}

void sub_1B8BA9490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0)
    {
      operator delete(*((void **)a1 + 4));
      uint64_t v2 = a1;
    }
    else
    {
      uint64_t v2 = a1;
    }
    operator delete(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  v18[0] = 0;
  v18[1] = 0;
  long long v17 = v18;
  uint64_t v4 = (uint64_t *)v2[1];
  if (v4 != v2 + 2)
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)&v17, (uint64_t)v18, (const void **)v4 + 4, (uint64_t)(v4 + 4));
      int v12 = (uint64_t *)v4[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          int v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (uint64_t *)v4[2];
          BOOL v14 = *v13 == (void)v4;
          uint64_t v4 = v13;
        }
        while (!v14);
      }
      uint64_t v4 = v13;
    }
    while (v13 != v2 + 2);
  }
  dispatch_time_t v6 = v2[4];
  uint64_t v5 = (const void *)v2[5];
  if (v5)
  {
    size_t v7 = _Block_copy(v5);
    size_t v8 = v2[6];
    size_t v15 = v7;
    uint64_t v16 = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  size_t v7 = 0;
  size_t v8 = v2[6];
  size_t v15 = 0;
  uint64_t v16 = v8;
  if (v8) {
LABEL_4:
  }
    dispatch_retain(v8);
LABEL_5:
  radio::QMIDebugCommandDriver::enable_sync(v3, (const void ***)&v17, v6, (uint64_t)&v15);
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  std::__tree<std::string>::destroy(v18[0]);
  int v9 = v2[6];
  if (v9) {
    dispatch_release(v9);
  }
  long long v10 = (const void *)v2[5];
  if (v10) {
    _Block_release(v10);
  }
  std::__tree<std::string>::destroy((char *)v2[2]);
  operator delete(v2);
  size_t v11 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_1B8BA96C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  if (v16) {
    dispatch_release(v16);
  }
  if (v15) {
    _Block_release(v15);
  }
  std::__tree<std::string>::destroy(a13);
  std::string v18 = *(NSObject **)(v14 + 48);
  if (v18) {
    dispatch_release(v18);
  }
  uint64_t v19 = *(const void **)(v14 + 40);
  if (v19) {
    _Block_release(v19);
  }
  std::__tree<std::string>::destroy(*(char **)(v14 + 16));
  operator delete((void *)v14);
  BOOL v20 = (std::__shared_weak_count *)v13[2];
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BA97D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(void *a1)
{
  uint64_t v2 = operator new(0x10uLL);
  uint64_t v3 = v2;
  v2[8] = 1;
  *(void *)uint64_t v2 = &unk_1F1265158;
  *((_DWORD *)v2 + 3) = 0;
  uint64_t v4 = v2 + 12;
  dispatch_time_t v6 = (char *)a1[2];
  unint64_t v5 = a1[3];
  size_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)dispatch_time_t v6 = v2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  int v9 = (char *)a1[1];
  uint64_t v10 = (v6 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(8 * v13);
    size_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)size_t v15 = v3;
    uint64_t v8 = (uint64_t)(v15 + 8);
    long long v17 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  size_t v15 = (char *)(8 * v10);
  uint64_t v16 = 0;
  *(void *)(8 * v10) = v3;
  uint64_t v8 = 8 * v10 + 8;
  long long v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    size_t v7 = &v6[-v20];
    v15 -= v20;
    int v21 = &v14[8 * v10 - 16];
    __int16 v22 = (long long *)(v6 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)int v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    size_t v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CommandCode>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CommandCode>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CommandCode>::clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)CFTypeRef result = &unk_1F1265158;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BA9AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BA9B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BA9B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::RegionIndex>(void *a1)
{
  uint64_t v2 = operator new(0x10uLL);
  uint64_t v3 = v2;
  v2[4] = 16;
  *(void *)uint64_t v2 = &unk_1F12651A8;
  unint64_t v5 = (char *)a1[2];
  unint64_t v4 = a1[3];
  dispatch_time_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)unint64_t v5 = v2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  uint64_t v8 = (char *)a1[1];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = (char *)operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = v3;
    uint64_t v7 = (uint64_t)(v14 + 8);
    uint64_t v16 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (char *)(8 * v9);
  size_t v15 = 0;
  *(void *)(8 * v9) = v3;
  uint64_t v7 = 8 * v9 + 8;
  uint64_t v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    dispatch_time_t v6 = &v5[-v19];
    v14 -= v19;
    uint64_t v20 = &v13[8 * v9 - 16];
    int v21 = (long long *)(v5 - 16);
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    dispatch_time_t v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  CFTypeRef result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RegionIndex>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RegionIndex>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RegionIndex>::clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)CFTypeRef result = &unk_1F12651A8;
  return result;
}

void ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_21QMIDebugCommandDriver12queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  dispatch_time_t v3 = **(void **)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  if (*(void *)v4)
  {
    unint64_t v5 = _Block_copy(*(const void **)v4);
    dispatch_time_t v6 = *(NSObject **)(v4 + 8);
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v5 = 0;
  dispatch_time_t v6 = *(NSObject **)(v4 + 8);
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  radio::QMIDebugCommandDriver::queryIPCLogs_sync(v2, v3, (uint64_t)&v7);
  if (v6) {
    dispatch_release(v6);
  }
  if (v5) {
    _Block_release(v5);
  }
}

void sub_1B8BA9E2C(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_2(uint64_t a1)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BlockIndex>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BlockIndex>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BlockIndex>::clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)CFTypeRef result = &unk_1F1265228;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t antenna::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = operator new(0x100uLL);
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = *a1;
  uint64_t v28 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *a2;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a3;
  unint64_t v12 = (std::__shared_weak_count *)a3[1];
  v25[0] = v11;
  v25[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  antenna::QMICommandDriver::QMICommandDriver((uint64_t)v8, (uint64_t)&v27, &object, (uint64_t)v25);
  *a4 = v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F12655E8;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v13;
  size_t v15 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (!v15)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v16 = (void *)*a4;
    if (!*(void *)(*a4 + 56)) {
      goto LABEL_22;
    }
    goto LABEL_14;
  }
  if (v15->__shared_owners_ != -1) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v8 + 9) = v8;
  *((void *)v8 + 10) = v13;
  std::__shared_weak_count::__release_weak(v15);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_13;
  }
LABEL_10:
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  uint64_t v16 = (void *)*a4;
  if (!*(void *)(*a4 + 56)) {
    goto LABEL_22;
  }
LABEL_14:
  unint64_t v17 = (std::__shared_weak_count *)v16[10];
  if (!v17 || (uint64_t v18 = v16[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v20 = v19;
  uint64_t v31 = v18;
  long long v32 = v19;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v16 + 1));
  uint64_t v29 = v18;
  long long v30 = v20;
  uint64_t v31 = 0;
  long long v32 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  int v21 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_22:
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  long long v23 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return (*(uint64_t (**)(void))(*(void *)*a4 + 72))();
}

void sub_1B8BAA230()
{
}

void sub_1B8BAA290()
{
}

void sub_1B8BAA2A0()
{
}

uint64_t antenna::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  dispatch_time_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  antenna::CommandDriver::CommandDriver();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)a1 = &unk_1F1265260;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  return a1;
}

void sub_1B8BAA44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::~QMICommandDriver(antenna::QMICommandDriver *this)
{
  *(void *)this = &unk_1F1265260;
  char v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v10, 2u);
  }
  uint64_t v3 = *((void *)this + 31);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 30);
  if (v4) {
    _Block_release(v4);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 28));
  qmi::Client::~Client((antenna::QMICommandDriver *)((char *)this + 184));
  *(void *)this = &unk_1F1265548;
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  dispatch_time_t v6 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 14));
  *(void *)this = &unk_1F12655A8;
  MEMORY[0x1BA9C75B0]((char *)this + 8);
  uint64_t v7 = *((void *)this + 12);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v1;
  uint64_t vars8;

  antenna::QMICommandDriver::~QMICommandDriver(this);

  operator delete(v1);
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void antenna::QMICommandDriver::init(antenna::QMICommandDriver *this)
{
  uint64_t v5 = *((void *)this + 9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v4 = (uint64_t *)((char *)this + 72);
  if (!v3 || (dispatch_time_t v6 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN7antenna16QMICommandDriver4initEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_21_3;
  v9[4] = this;
  v9[5] = v5;
  unint64_t v10 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped(v4, (uint64_t)v9);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v138 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v139 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v138, *(Registry **)(v2 + 128));
  if (!v138)
  {
    Name = (const char *)antenna::CommandDriver::getName((antenna::CommandDriver *)v2);
    size_t v12 = strlen(Name);
    if (v12 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = v12;
    if (v12 >= 0x17)
    {
      uint64_t v21 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v21 = v12 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (void **)operator new(v21 + 1);
      size_t v133 = v13;
      unint64_t v134 = v22 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v134) = v12;
      p_dst = (void **)&__dst;
      if (!v12)
      {
        LOBYTE(__dst) = 0;
        size_t v15 = *(NSObject **)(v2 + 88);
        v126 = v15;
        if (!v15) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    memmove(p_dst, Name, v13);
    *((unsigned char *)p_dst + v13) = 0;
    size_t v15 = *(NSObject **)(v2 + 88);
    v126 = v15;
    if (!v15)
    {
LABEL_16:
      char v130 = 7;
      strcpy((char *)v129, "antenna");
      v125 = 0;
      uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
      if (v16)
      {
        unint64_t v17 = std::__shared_weak_count::lock(v16);
        if (v17)
        {
          uint64_t v18 = v17;
          atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v125 = v17;
          if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v125 = 0;
        }
      }
      qmi::Client::createWithQueue();
      long long v118 = v137;
      long long v137 = 0uLL;
      v119 = *(std::__shared_weak_count **)(v2 + 208);
      *(_OWORD *)(v2 + 200) = v118;
      if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
      qmi::Client::~Client((qmi::Client *)&v135);
      if (v125) {
        std::__shared_weak_count::__release_weak(v125);
      }
      if (v130 < 0)
      {
        operator delete(v129[0]);
        uint64_t v25 = v126;
        if (!v126) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v25 = v126;
        if (!v126) {
          goto LABEL_45;
        }
      }
LABEL_44:
      dispatch_release(v25);
      goto LABEL_45;
    }
LABEL_15:
    dispatch_retain(v15);
    goto LABEL_16;
  }
  uint64_t v3 = (const char *)antenna::CommandDriver::getName((antenna::CommandDriver *)v2);
  size_t v4 = strlen(v3);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v19 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v19 = v4 | 7;
    }
    uint64_t v20 = v19 + 1;
    dispatch_time_t v6 = (void **)operator new(v19 + 1);
    size_t v133 = v5;
    unint64_t v134 = v20 | 0x8000000000000000;
    std::string __dst = v6;
  }
  else
  {
    HIBYTE(v134) = v4;
    dispatch_time_t v6 = (void **)&__dst;
    if (!v4)
    {
      LOBYTE(__dst) = 0;
      uint64_t v7 = *(NSObject **)(v2 + 88);
      v131 = v7;
      if (!v7) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  memmove(v6, v3, v5);
  *((unsigned char *)v6 + v5) = 0;
  uint64_t v7 = *(NSObject **)(v2 + 88);
  v131 = v7;
  if (v7) {
LABEL_6:
  }
    dispatch_retain(v7);
LABEL_7:
  char v130 = 7;
  strcpy((char *)v129, "antenna");
  v128 = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      unint64_t v10 = v9;
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v128 = v9;
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v128 = 0;
    }
  }
  v127 = (std::__shared_weak_count *)v139;
  if (v139) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v139 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v23 = v137;
  long long v137 = 0uLL;
  uint64_t v24 = *(std::__shared_weak_count **)(v2 + 208);
  *(_OWORD *)(v2 + 200) = v23;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  qmi::Client::~Client((qmi::Client *)&v135);
  if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
  if (v128) {
    std::__shared_weak_count::__release_weak(v128);
  }
  if (v130 < 0) {
    operator delete(v129[0]);
  }
  uint64_t v25 = v131;
  if (v131) {
    goto LABEL_44;
  }
LABEL_45:
  if (SHIBYTE(v134) < 0)
  {
    operator delete(__dst);
    uint64_t v27 = (uint64_t **)(v2 + 112);
    size_t v26 = *(uint64_t **)(v2 + 112);
    uint64_t v28 = "ptional_last_valueIvEEEE";
    uint64_t v29 = (uint64_t **)(v2 + 112);
    long long v30 = (uint64_t *)(v2 + 112);
    if (!v26) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v27 = (uint64_t **)(v2 + 112);
    size_t v26 = *(uint64_t **)(v2 + 112);
    uint64_t v28 = "N5boost6detail17sp_counted_impl_pINS_8signals219optional_last_valueIvEEEE" + 49;
    uint64_t v29 = (uint64_t **)(v2 + 112);
    long long v30 = (uint64_t *)(v2 + 112);
    if (!v26) {
      goto LABEL_55;
    }
  }
  uint64_t v31 = v26;
  do
  {
    while (1)
    {
      long long v30 = v31;
      unsigned int v32 = *((_DWORD *)v31 + 7);
      if (v32 < 2) {
        break;
      }
      uint64_t v31 = (uint64_t *)*v30;
      uint64_t v29 = (uint64_t **)v30;
      if (!*v30) {
        goto LABEL_55;
      }
    }
    if (v32)
    {
      *((_DWORD *)v30 + 8) = 1;
      size_t v36 = "N5boost6detail17sp_counted_impl_pINS_8signals219optional_last_valueIvEEEE" + 49;
      goto LABEL_61;
    }
    uint64_t v31 = (uint64_t *)v30[1];
  }
  while (v31);
  uint64_t v29 = (uint64_t **)(v30 + 1);
LABEL_55:
  int v33 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v33 + 28) = *((void *)v28 + 384);
  uint64_t *v33 = 0;
  v33[1] = 0;
  void v33[2] = (uint64_t)v30;
  unsigned char *v29 = v33;
  uint64_t v34 = **(void **)(v2 + 104);
  size_t v35 = v33;
  if (v34)
  {
    *(void *)(v2 + 104) = v34;
    size_t v35 = *v29;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v35);
  size_t v26 = *(uint64_t **)(v2 + 112);
  ++*(void *)(v2 + 120);
  *((_DWORD *)v33 + 8) = 1;
  size_t v36 = "ptional_last_valueIvEEEE";
  int v37 = v27;
  unint64_t v38 = v27;
  if (v26)
  {
    while (1)
    {
LABEL_61:
      while (1)
      {
        unint64_t v38 = (uint64_t **)v26;
        unsigned int v39 = *((_DWORD *)v26 + 7);
        if (v39 < 3) {
          break;
        }
        size_t v26 = *v38;
        int v37 = v38;
        if (!*v38) {
          goto LABEL_65;
        }
      }
      if (v39 == 2) {
        break;
      }
      size_t v26 = v38[1];
      if (!v26)
      {
        int v37 = v38 + 1;
        goto LABEL_65;
      }
    }
    uint64_t v40 = (uint64_t *)v38;
  }
  else
  {
LABEL_65:
    uint64_t v40 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v40 + 28) = *((void *)v36 + 385);
    uint64_t *v40 = 0;
    v40[1] = 0;
    void v40[2] = (uint64_t)v38;
    unsigned char *v37 = v40;
    uint64_t v41 = **(void **)(v2 + 104);
    unint64_t v42 = v40;
    if (v41)
    {
      *(void *)(v2 + 104) = v41;
      unint64_t v42 = *v37;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v42);
    ++*(void *)(v2 + 120);
  }
  *((_DWORD *)v40 + 8) = 2;
  uint64_t v43 = *v27;
  uint64_t v44 = v27;
  int v45 = v27;
  if (*v27)
  {
    uint64_t v46 = *v27;
    while (1)
    {
      while (1)
      {
        int v45 = (uint64_t **)v46;
        unsigned int v47 = *((_DWORD *)v46 + 7);
        if (v47 < 5) {
          break;
        }
        uint64_t v46 = *v45;
        uint64_t v44 = v45;
        if (!*v45) {
          goto LABEL_76;
        }
      }
      if (v47 == 4) {
        break;
      }
      uint64_t v46 = v45[1];
      if (!v46)
      {
        uint64_t v44 = v45 + 1;
        goto LABEL_76;
      }
    }
    *((_DWORD *)v45 + 8) = 4;
    uint64_t v51 = v27;
    uint64_t v52 = v27;
    if (v43) {
      goto LABEL_83;
    }
LABEL_87:
    uint64_t v54 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v54 + 28) = 32;
    *uint64_t v54 = 0;
    v54[1] = 0;
    v54[2] = (uint64_t)v52;
    *uint64_t v51 = v54;
    uint64_t v55 = **(void **)(v2 + 104);
    int v56 = v54;
    if (v55)
    {
      *(void *)(v2 + 104) = v55;
      int v56 = *v51;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v56);
    ++*(void *)(v2 + 120);
    *((_DWORD *)v54 + 8) = 8;
    CFTypeID v57 = *v27;
    size_t v58 = v27;
    size_t v59 = v27;
    if (!*v27) {
      goto LABEL_98;
    }
LABEL_92:
    int v60 = v57;
    while (1)
    {
      while (1)
      {
        size_t v59 = (uint64_t **)v60;
        unsigned int v61 = *((_DWORD *)v60 + 7);
        if (v61 < 0x11) {
          break;
        }
        int v60 = *v59;
        size_t v58 = v59;
        if (!*v59) {
          goto LABEL_98;
        }
      }
      if (v61 == 16) {
        break;
      }
      int v60 = v59[1];
      if (!v60)
      {
        size_t v58 = v59 + 1;
        goto LABEL_98;
      }
    }
    *((_DWORD *)v59 + 8) = 32;
    uint64_t v65 = v27;
    if (v57) {
      goto LABEL_105;
    }
    goto LABEL_109;
  }
LABEL_76:
  size_t v48 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v48 + 28) = 4;
  *size_t v48 = 0;
  v48[1] = 0;
  void v48[2] = (uint64_t)v45;
  *uint64_t v44 = v48;
  uint64_t v49 = **(void **)(v2 + 104);
  uint64_t v50 = v48;
  if (v49)
  {
    *(void *)(v2 + 104) = v49;
    uint64_t v50 = *v44;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v50);
  uint64_t v43 = *(uint64_t **)(v2 + 112);
  ++*(void *)(v2 + 120);
  *((_DWORD *)v48 + 8) = 4;
  uint64_t v51 = v27;
  uint64_t v52 = v27;
  if (!v43) {
    goto LABEL_87;
  }
  while (1)
  {
LABEL_83:
    while (1)
    {
      uint64_t v52 = (uint64_t **)v43;
      unsigned int v53 = *((_DWORD *)v43 + 7);
      if (v53 < 0x21) {
        break;
      }
      uint64_t v43 = *v52;
      uint64_t v51 = v52;
      if (!*v52) {
        goto LABEL_87;
      }
    }
    if (v53 == 32) {
      break;
    }
    uint64_t v43 = v52[1];
    if (!v43)
    {
      uint64_t v51 = v52 + 1;
      goto LABEL_87;
    }
  }
  *((_DWORD *)v52 + 8) = 8;
  CFTypeID v57 = *v27;
  size_t v58 = v27;
  size_t v59 = v27;
  if (*v27) {
    goto LABEL_92;
  }
LABEL_98:
  uint64_t v62 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v62 + 28) = 16;
  uint64_t *v62 = 0;
  v62[1] = 0;
  v62[2] = (uint64_t)v59;
  const void *v58 = v62;
  uint64_t v63 = **(void **)(v2 + 104);
  long long v64 = v62;
  if (v63)
  {
    *(void *)(v2 + 104) = v63;
    long long v64 = *v58;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v64);
  CFTypeID v57 = *(uint64_t **)(v2 + 112);
  ++*(void *)(v2 + 120);
  *((_DWORD *)v62 + 8) = 32;
  uint64_t v65 = v27;
  if (!v57)
  {
LABEL_109:
    int v67 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v67 + 28) = 8;
    *int v67 = 0;
    v67[1] = 0;
    v67[2] = (uint64_t)v65;
    _DWORD *v27 = v67;
    uint64_t v68 = **(void **)(v2 + 104);
    __int16 v69 = v67;
    if (v68)
    {
      *(void *)(v2 + 104) = v68;
      __int16 v69 = *v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v69);
    ++*(void *)(v2 + 120);
    goto LABEL_113;
  }
  while (1)
  {
LABEL_105:
    while (1)
    {
      uint64_t v65 = (uint64_t **)v57;
      unsigned int v66 = *((_DWORD *)v57 + 7);
      if (v66 < 9) {
        break;
      }
      CFTypeID v57 = *v65;
      uint64_t v27 = v65;
      if (!*v65) {
        goto LABEL_109;
      }
    }
    if (v66 == 8) {
      break;
    }
    CFTypeID v57 = v65[1];
    if (!v57)
    {
      uint64_t v27 = v65 + 1;
      goto LABEL_109;
    }
  }
  int v67 = (uint64_t *)v65;
LABEL_113:
  *((_DWORD *)v67 + 8) = 64;
  int v71 = (uint64_t **)(v2 + 224);
  int v70 = *(uint64_t **)(v2 + 224);
  int v72 = (uint64_t **)(v2 + 224);
  CFTypeRef v73 = (uint64_t *)(v2 + 224);
  if (v70)
  {
    uint64_t v74 = *(uint64_t **)(v2 + 224);
    do
    {
      while (1)
      {
        CFTypeRef v73 = v74;
        int v75 = *((_DWORD *)v74 + 7);
        if (v75 < 1) {
          break;
        }
        uint64_t v74 = (uint64_t *)*v73;
        int v72 = (uint64_t **)v73;
        if (!*v73) {
          goto LABEL_120;
        }
      }
      if ((v75 & 0x80000000) == 0)
      {
        *((_DWORD *)v73 + 8) = 3;
        goto LABEL_126;
      }
      uint64_t v74 = (uint64_t *)v73[1];
    }
    while (v74);
    int v72 = (uint64_t **)(v73 + 1);
  }
LABEL_120:
  uint64_t v76 = operator new(0x28uLL);
  v76[7] = 0;
  v76[8] = 0;
  *(void *)uint64_t v76 = 0;
  *((void *)v76 + 1) = 0;
  *((void *)v76 + 2) = v73;
  *int v72 = (uint64_t *)v76;
  uint64_t v77 = **(void **)(v2 + 216);
  uint64_t v78 = (uint64_t *)v76;
  if (v77)
  {
    *(void *)(v2 + 216) = v77;
    uint64_t v78 = *v72;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v78);
  int v70 = *(uint64_t **)(v2 + 224);
  ++*(void *)(v2 + 232);
  v76[8] = 3;
  unint64_t v79 = (uint64_t **)(v2 + 224);
  uint64_t v80 = (uint64_t *)(v2 + 224);
  if (!v70)
  {
LABEL_130:
    long long v82 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v82 + 28) = *((void *)v28 + 384);
    *long long v82 = 0;
    v82[1] = 0;
    void v82[2] = (uint64_t)v80;
    *unint64_t v79 = v82;
    uint64_t v83 = **(void **)(v2 + 216);
    long long v84 = v82;
    if (v83)
    {
      *(void *)(v2 + 216) = v83;
      long long v84 = *v79;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v84);
    ++*(void *)(v2 + 232);
    *((_DWORD *)v82 + 8) = 0;
    int v85 = *v71;
    long long v86 = (uint64_t **)(v2 + 224);
    long long v87 = (uint64_t *)(v2 + 224);
    if (!*v71) {
      goto LABEL_141;
    }
LABEL_135:
    long long v88 = v85;
    while (1)
    {
      while (1)
      {
        long long v87 = v88;
        int v89 = *((_DWORD *)v88 + 7);
        if (v89 < 3) {
          break;
        }
        long long v88 = (uint64_t *)*v87;
        long long v86 = (uint64_t **)v87;
        if (!*v87) {
          goto LABEL_141;
        }
      }
      if (v89 == 2) {
        break;
      }
      long long v88 = (uint64_t *)v87[1];
      if (!v88)
      {
        long long v86 = (uint64_t **)(v87 + 1);
        goto LABEL_141;
      }
    }
    *((_DWORD *)v87 + 8) = 1;
    long long v93 = (uint64_t **)(v2 + 224);
    long long v94 = (uint64_t *)(v2 + 224);
    if (v85) {
      goto LABEL_148;
    }
    goto LABEL_152;
  }
  while (1)
  {
LABEL_126:
    while (1)
    {
      uint64_t v80 = v70;
      int v81 = *((_DWORD *)v70 + 7);
      if (v81 < 2) {
        break;
      }
      int v70 = (uint64_t *)*v80;
      unint64_t v79 = (uint64_t **)v80;
      if (!*v80) {
        goto LABEL_130;
      }
    }
    if (v81 == 1) {
      break;
    }
    int v70 = (uint64_t *)v80[1];
    if (!v70)
    {
      unint64_t v79 = (uint64_t **)(v80 + 1);
      goto LABEL_130;
    }
  }
  *((_DWORD *)v80 + 8) = 0;
  int v85 = *v71;
  long long v86 = (uint64_t **)(v2 + 224);
  long long v87 = (uint64_t *)(v2 + 224);
  if (*v71) {
    goto LABEL_135;
  }
LABEL_141:
  CFTypeRef v90 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v90 + 28) = *((void *)v36 + 385);
  *CFTypeRef v90 = 0;
  v90[1] = 0;
  v90[2] = (uint64_t)v87;
  *long long v86 = v90;
  uint64_t v91 = **(void **)(v2 + 216);
  long long v92 = v90;
  if (v91)
  {
    *(void *)(v2 + 216) = v91;
    long long v92 = *v86;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v92);
  int v85 = *(uint64_t **)(v2 + 224);
  ++*(void *)(v2 + 232);
  *((_DWORD *)v90 + 8) = 1;
  long long v93 = (uint64_t **)(v2 + 224);
  long long v94 = (uint64_t *)(v2 + 224);
  if (v85)
  {
    while (1)
    {
LABEL_148:
      while (1)
      {
        long long v94 = v85;
        int v95 = *((_DWORD *)v85 + 7);
        if (v95 < 4) {
          break;
        }
        int v85 = (uint64_t *)*v94;
        long long v93 = (uint64_t **)v94;
        if (!*v94) {
          goto LABEL_152;
        }
      }
      if (v95 == 3) {
        break;
      }
      int v85 = (uint64_t *)v94[1];
      if (!v85)
      {
        long long v93 = (uint64_t **)(v94 + 1);
        goto LABEL_152;
      }
    }
    *((_DWORD *)v94 + 8) = 2;
    unint64_t v99 = *v71;
    CFMutableDataRef v100 = (uint64_t **)(v2 + 224);
    if (*v71) {
      goto LABEL_159;
    }
    goto LABEL_163;
  }
LABEL_152:
  long long v96 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v96 + 28) = 3;
  *long long v96 = 0;
  v96[1] = 0;
  v96[2] = (uint64_t)v94;
  *long long v93 = v96;
  uint64_t v97 = **(void **)(v2 + 216);
  uint64_t v98 = v96;
  if (v97)
  {
    *(void *)(v2 + 216) = v97;
    uint64_t v98 = *v93;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v98);
  ++*(void *)(v2 + 232);
  *((_DWORD *)v96 + 8) = 2;
  unint64_t v99 = *v71;
  CFMutableDataRef v100 = (uint64_t **)(v2 + 224);
  if (!*v71)
  {
LABEL_163:
    uint64_t v102 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v102 + 28) = 4;
    *uint64_t v102 = 0;
    v102[1] = 0;
    v102[2] = (uint64_t)v100;
    *int v71 = v102;
    uint64_t v103 = **(void **)(v2 + 216);
    v104 = v102;
    if (v103)
    {
      *(void *)(v2 + 216) = v103;
      v104 = *v71;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v104);
    ++*(void *)(v2 + 232);
    goto LABEL_167;
  }
  while (1)
  {
LABEL_159:
    while (1)
    {
      CFMutableDataRef v100 = (uint64_t **)v99;
      int v101 = *((_DWORD *)v99 + 7);
      if (v101 < 5) {
        break;
      }
      unint64_t v99 = *v100;
      int v71 = v100;
      if (!*v100) {
        goto LABEL_163;
      }
    }
    if (v101 == 4) {
      break;
    }
    unint64_t v99 = v100[1];
    if (!v99)
    {
      int v71 = v100 + 1;
      goto LABEL_163;
    }
  }
  uint64_t v102 = (uint64_t *)v100;
LABEL_167:
  *((_DWORD *)v102 + 8) = 255;
  v105 = (qmi::Client *)(v2 + 184);
  v106 = *(std::__shared_weak_count **)(a1 + 48);
  v124 = v106;
  if (v106) {
    atomic_fetch_add_explicit(&v106->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v107 = *(std::__shared_weak_count **)(a1 + 48);
  v123 = v107;
  if (v107) {
    atomic_fetch_add_explicit(&v107->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v108 = *(std::__shared_weak_count **)(a1 + 48);
  v122 = v108;
  if (v108) {
    atomic_fetch_add_explicit(&v108->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v109 = *(std::__shared_weak_count **)(a1 + 48);
  v121 = v109;
  if (v109) {
    atomic_fetch_add_explicit(&v109->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v110 = *(std::__shared_weak_count **)(a1 + 48);
  v120 = v110;
  if (v110) {
    atomic_fetch_add_explicit(&v110->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v111 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v111 || (uint64_t v112 = *(void *)(v2 + 72), (v113 = std::__shared_weak_count::lock(v111)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v114 = v113;
  atomic_fetch_add_explicit(&v113->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v135 = 0;
    v136 = 0;
    v115 = std::__shared_weak_count::lock(v113);
    if (v115) {
      goto LABEL_181;
    }
LABEL_203:
    v116 = v136;
    uint64_t v135 = 0;
    v136 = v115;
    if (!v116) {
      goto LABEL_183;
    }
    goto LABEL_182;
  }
  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
  std::__shared_weak_count::__release_weak(v114);
  uint64_t v135 = 0;
  v136 = 0;
  v115 = std::__shared_weak_count::lock(v114);
  if (!v115) {
    goto LABEL_203;
  }
LABEL_181:
  atomic_fetch_add_explicit(&v115->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v116 = v136;
  uint64_t v135 = v112;
  v136 = v115;
  if (v116) {
LABEL_182:
  }
    std::__shared_weak_count::__release_weak(v116);
LABEL_183:
  std::__shared_weak_count::__release_weak(v114);
  if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  qmi::Client::setClientHandle();
  if (v136) {
    std::__shared_weak_count::__release_weak(v136);
  }
  qmi::Client::start(v105);
  if (v120) {
    std::__shared_weak_count::__release_weak(v120);
  }
  if (v121) {
    std::__shared_weak_count::__release_weak(v121);
  }
  if (v122) {
    std::__shared_weak_count::__release_weak(v122);
  }
  if (v123) {
    std::__shared_weak_count::__release_weak(v123);
  }
  if (v124) {
    std::__shared_weak_count::__release_weak(v124);
  }
  v117 = (std::__shared_weak_count *)v139;
  if (v139)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v139 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
}

void sub_1B8BAB7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a42)
  {
    std::__shared_weak_count::__release_weak(a42);
    if ((*(char *)(v42 - 177) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v44 = *(NSObject **)(v42 - 240);
      if (!v44)
      {
LABEL_8:
        if (*(char *)(v42 - 145) < 0)
        {
          operator delete(*(void **)(v42 - 168));
          std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v42 - 112);
          _Unwind_Resume(a1);
        }
        std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v42 - 112);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v44);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v42 - 177) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v42 - 200));
  uint64_t v44 = *(NSObject **)(v42 - 240);
  if (!v44) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(void *)(v3 + 144);
        if (v6) {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 16))(v6, 0, 4);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B8BABB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_10(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_14(void *a1, xpc_object_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v19 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        uint64_t v9 = v6;
LABEL_12:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      uint64_t v7 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Server Error!", (uint8_t *)__p, 2u);
        if (a2)
        {
LABEL_6:
          xpc_retain(a2);
          uint64_t v8 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
            goto LABEL_11;
          }
          goto LABEL_15;
        }
      }
      else if (a2)
      {
        goto LABEL_6;
      }
      a2 = xpc_null_create();
      uint64_t v8 = *(NSObject **)(v5 + 40);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_11;
      }
LABEL_15:
      unint64_t v10 = (char *)MEMORY[0x1BA9C88A0](a2);
      memset(__p, 170, 24);
      size_t v11 = strlen(v10);
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v14 = v11 | 7;
        }
        uint64_t v15 = v14 + 1;
        size_t v13 = operator new(v14 + 1);
        __p[1] = v12;
        __p[2] = (void *)(v15 | 0x8000000000000000);
        __p[0] = v13;
      }
      else
      {
        HIBYTE(__p[2]) = v11;
        size_t v13 = __p;
        if (!v11) {
          goto LABEL_23;
        }
      }
      memcpy(v13, v10, (size_t)v12);
LABEL_23:
      *((unsigned char *)v12 + (void)v13) = 0;
      free(v10);
      uint64_t v16 = __p;
      if (SHIBYTE(__p[2]) < 0) {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v21 = v16;
      _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
LABEL_11:
      xpc_release(a2);
      uint64_t v9 = v19;
      if (!v19) {
        return;
      }
      goto LABEL_12;
    }
  }
}

void sub_1B8BABFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::QMICommandDriver::perform(void *a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v6 = *(const void **)a3;
    if (*(void *)a3) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v7 = 0;
    uint64_t v8 = *(NSObject **)(a3 + 8);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(const void **)a3;
  if (!*(void *)a3) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v7 = _Block_copy(v6);
  uint64_t v8 = *(NSObject **)(a3 + 8);
  if (v8) {
LABEL_4:
  }
    dispatch_retain(v8);
LABEL_5:
  uint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (v10 = a1[9], (size_t v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v12 = v11;
  size_t v13 = operator new(0x20uLL);
  *size_t v13 = v5;
  xpc_object_t v14 = xpc_null_create();
  v13[1] = a1;
  v13[2] = v7;
  v13[3] = v8;
  uint64_t v15 = a1[11];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  void *v16 = v13;
  v16[1] = v10;
  _OWORD v16[2] = v12;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_release(v14);
}

void antenna::QMICommandDriver::txPowerCappingEnable_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  memset(v61, 170, 24);
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9C68]);
  v66[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    v66[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(v66[0]);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D48]);
  v66[0] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    v66[0] = xpc_null_create();
  }
  char v8 = xpc::dyn_cast_or_default();
  xpc_release(v66[0]);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v9;
  long long v60 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v55[0] = MEMORY[0x1E4F143A8];
  v55[1] = 0x40000000;
  uint64_t v10 = ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  int v56 = ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  CFTypeID v57 = &__block_descriptor_tmp_24_2;
  char v58 = v8;
  size_t v11 = (char *)__p[1];
  size_t v12 = (char *)v60;
  size_t v13 = (const void **)__p[1];
  if (__p[1] != (void *)v60)
  {
    size_t v13 = (const void **)__p[1];
    while (*((unsigned char *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v60) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == (const void **)v60)
  {
LABEL_15:
    uint64_t v16 = operator new(0x10uLL);
    unint64_t v17 = v16;
    v16[4] = 1;
    *(void *)uint64_t v16 = &unk_1F1265688;
    if ((unint64_t)v12 < *((void *)&v60 + 1))
    {
      *(void *)size_t v12 = v16;
      uint64_t v18 = (uint64_t)(v12 + 8);
LABEL_37:
      uint64_t v15 = (char *)v17 + 9;
      *(void *)&long long v60 = v18;
      uint64_t v10 = v56;
      goto LABEL_38;
    }
    int64_t v19 = v12 - v11;
    uint64_t v20 = (v12 - v11) >> 3;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = *((void *)&v60 + 1) - (void)v11;
    if ((uint64_t)(*((void *)&v60 + 1) - (void)v11) >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v24 = operator new(8 * v23);
      uint64_t v25 = &v24[8 * v20];
      size_t v26 = &v24[8 * v23];
      *uint64_t v25 = v17;
      uint64_t v18 = (uint64_t)(v25 + 1);
      if (v11 != v12)
      {
LABEL_26:
        if ((unint64_t)(v19 - 8) < 0x58) {
          goto LABEL_84;
        }
        if ((unint64_t)(v11 - v24) < 0x20) {
          goto LABEL_84;
        }
        unint64_t v27 = ((unint64_t)(v19 - 8) >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v29 = &v12[-v28];
        uint64_t v25 = (void *)((char *)v25 - v28);
        long long v30 = &v24[8 * v20 - 16];
        uint64_t v31 = v12 - 16;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          _OWORD *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        size_t v12 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_84:
          do
          {
            uint64_t v34 = *((void *)v12 - 1);
            v12 -= 8;
            *--uint64_t v25 = v34;
          }
          while (v12 != v11);
        }
        size_t v11 = (char *)__p[1];
        __p[1] = v25;
        *(void *)&long long v60 = v18;
        *((void *)&v60 + 1) = v26;
        if (!v11) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (void *)(8 * v20);
      size_t v26 = 0;
      *(void *)(8 * v20) = v17;
      uint64_t v18 = 8 * v20 + 8;
      if (v11 != v12) {
        goto LABEL_26;
      }
    }
    __p[1] = v25;
    *(void *)&long long v60 = v18;
    *((void *)&v60 + 1) = v26;
    if (!v11) {
      goto LABEL_37;
    }
LABEL_36:
    operator delete(v11);
    goto LABEL_37;
  }
  if (!v14) {
    goto LABEL_79;
  }
  uint64_t v15 = v14 + 9;
LABEL_38:
  v10((uint64_t)v55, v15);
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D58])) {
    goto LABEL_48;
  }
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 0x40000000;
  size_t v35 = ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  uint64_t v52 = ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  unsigned int v53 = &__block_descriptor_tmp_26_0;
  uint64_t v54 = a2;
  size_t v36 = (const void **)__p[1];
  if (__p[1] != (void *)v60)
  {
    while (*((unsigned char *)*v36 + 8) != 16)
    {
      if (++v36 == (const void **)v60) {
        goto LABEL_46;
      }
    }
  }
  if (v36 == (const void **)v60)
  {
LABEL_46:
    unint64_t v38 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::SvcType>(__p);
    size_t v35 = v52;
    goto LABEL_47;
  }
  if (!v37) {
LABEL_79:
  }
    __cxa_bad_cast();
  unint64_t v38 = v37 + 9;
LABEL_47:
  v35((uint64_t)v51, v38);
LABEL_48:
  qmi::MutableMessageBase::MutableMessageBase();
  unsigned int v39 = *(void **)a3;
  if (*(void *)a3) {
    unsigned int v39 = _Block_copy(v39);
  }
  uint64_t v40 = *(NSObject **)(a3 + 8);
  long long aBlock = v39;
  dispatch_object_t object = v40;
  if (v40) {
    dispatch_retain(v40);
  }
  uint64_t v41 = (std::__shared_weak_count *)a1[10];
  if (!v41 || (v42 = (void *)a1[9], (uint64_t v43 = std::__shared_weak_count::lock(v41)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v44 = v43;
  p_shared_weak_owners = &v43->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v44);
  }
  v66[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
  v66[1] = (xpc_object_t)1174405120;
  void v66[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v66[3] = &__block_descriptor_tmp_137_0;
  v66[4] = a1;
  v66[5] = v42;
  int v67 = v44;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    uint64_t v46 = object;
    uint64_t v68 = _Block_copy(aBlock);
    dispatch_object_t v69 = object;
    if (!object) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  uint64_t v46 = object;
  uint64_t v68 = 0;
  dispatch_object_t v69 = object;
  if (object) {
LABEL_58:
  }
    dispatch_retain(v46);
LABEL_59:
  v61[3] = a1 + 23;
  uint64_t v62 = QMIServiceMsg::create();
  int v63 = 25000;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 0x40000000;
  void v70[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v70[3] = &unk_1E6195510;
  v70[4] = v66;
  unsigned int v47 = _Block_copy(v70);
  uint64_t v65 = v47;
  if (v62)
  {
    qmi::Client::send();
    unsigned int v47 = v65;
  }
  if (v47) {
    _Block_release(v47);
  }
  if (v69) {
    dispatch_release(v69);
  }
  if (v68) {
    _Block_release(v68);
  }
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  std::__shared_weak_count::__release_weak(v44);
  if (v46) {
    dispatch_release(v46);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v50);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
}

void sub_1B8BAC808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a36);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v37 + 56);
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 168);
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  std::__shared_weak_count::__release_weak(v36);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, unsigned char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9D58]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BAC948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::transmitIndicationRegister_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3 || (uint64_t v5 = *(void *)(a1 + 72), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  void v15[2] = ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_32_3;
  v15[4] = a1;
  v15[5] = v5;
  uint64_t v16 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v18 = 0x40000000;
  int64_t v19 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm20TxPwrLimitIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  uint64_t v20 = &unk_1E6195538;
  long long aBlock = v15;
  qmi::Client::setIndHandler();
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  v13[2] = ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_33;
  v13[3] = &__block_descriptor_tmp_41_2;
  void v13[4] = a1;
  v13[5] = v5;
  xpc_object_t v14 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v18 = 0x40000000;
  int64_t v19 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16TransmitStateInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  uint64_t v20 = &unk_1E6195560;
  long long aBlock = v13;
  qmi::Client::setIndHandler();
  xpc_object_t v9 = xpc_null_create();
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v10 = 0;
  }
  size_t v11 = *(NSObject **)(a2 + 8);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1174405120;
  int64_t v19 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  uint64_t v20 = &__block_descriptor_tmp_141;
  if (v10)
  {
    size_t v12 = _Block_copy(v10);
    char v23 = 1;
    long long aBlock = v12;
    xpc_object_t object = v9;
    if (v9)
    {
LABEL_10:
      xpc_retain(v9);
      goto LABEL_13;
    }
  }
  else
  {
    char v23 = 1;
    long long aBlock = 0;
    xpc_object_t object = v9;
    if (v9) {
      goto LABEL_10;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_13:
  dispatch_async(v11, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    _Block_release(v10);
  }
  xpc_release(v9);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1B8BACC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    uint64_t v25 = a23;
    if (!a23)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v25 = a23;
    if (!a23) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v16 = v6;
    if (v6)
    {
      xpc_object_t v7 = v6;
      if (a1[5])
      {
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        size_t v12 = ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_2;
        size_t v13 = &__block_descriptor_tmp_28_1;
        uint64_t v14 = v5;
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v10 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)1);
          char v17 = *(unsigned char *)v10;
          ((void (*)(void *, char *))v12)(v11, &v17);
        }
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BACE14(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 1, v2, v3);
  JUMPOUT(0x1B8BACDA4);
}

void sub_1B8BACE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = antenna::CommandDriver::convertModeToState();
  if ((int)result <= 1)
  {
    uint64_t result = *(void *)(v1 + 144);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v3();
    }
  }
  return result;
}

void ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_33(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    uint64_t v32 = v6;
    if (v6)
    {
      xpc_object_t v7 = v6;
      if (a1[5])
      {
        uint64_t v27 = 0;
        uint64_t v28 = &v27;
        uint64_t v29 = 0x2000000000;
        int v30 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = &v23;
        uint64_t v25 = 0x2000000000;
        int v26 = 4;
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 0x40000000;
        uint64_t v20 = ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_2_34;
        unint64_t v21 = &unk_1E61950C0;
        uint64_t v22 = &v27;
        uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        uint64_t v10 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)1);
          char v33 = *(unsigned char *)v10;
          v20((uint64_t)v19, (unsigned __int8 *)&v33);
        }
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 0x40000000;
        uint64_t v16 = ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_3;
        char v17 = &unk_1E61950E8;
        uint64_t v18 = &v23;
        size_t v11 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        size_t v13 = v11;
        if (v11)
        {
          tlv::throwIfNotEnoughBytes(v11, (const unsigned __int8 *)v11 + v12, (const unsigned __int8 *)1);
          char v33 = *(unsigned char *)v13;
          v16((uint64_t)v15, (unsigned __int8 *)&v33);
        }
        uint64_t v14 = *(void *)(v5 + 144);
        if (v14) {
          (*(void (**)(uint64_t, void, void))(*(void *)v14 + 16))(v14, *((unsigned int *)v28 + 6), *((unsigned int *)v24 + 6));
        }
        _Block_object_dispose(&v23, 8);
        _Block_object_dispose(&v27, 8);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B8BAD114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v12 - 104);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_2_34(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_3(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void antenna::QMICommandDriver::transmitIndicationEnable_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D80]);
  xpc_object_t aBlock = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t aBlock = xpc_null_create();
  }
  char v7 = xpc::dyn_cast_or_default();
  xpc_release(aBlock);
  memset(__p, 170, sizeof(__p));
  xpc_object_t v8 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D98]);
  xpc_object_t aBlock = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t aBlock = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(aBlock);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v9 = HIBYTE(__p[2]);
  }
  else {
    size_t v9 = (size_t)__p[1];
  }
  if (v9 == strlen((const char *)*MEMORY[0x1E4FB9DA0]))
  {
    uint64_t v10 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v10, (const void *)*MEMORY[0x1E4FB9DA0], v9))
    {
      *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v93 = v37;
      long long v94 = v37;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v93);
      v89[0] = MEMORY[0x1E4F143A8];
      v89[1] = 0x40000000;
      uint64_t v38 = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
      CFTypeRef v90 = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
      uint64_t v91 = &__block_descriptor_tmp_43_0;
      char v92 = v7;
      unsigned int v39 = (char *)*((void *)&v93 + 1);
      uint64_t v40 = (char *)v94;
      uint64_t v41 = (const void **)*((void *)&v93 + 1);
      if (*((void *)&v93 + 1) != (void)v94)
      {
        uint64_t v41 = (const void **)*((void *)&v93 + 1);
        while (*((unsigned char *)*v41 + 8) != 1)
        {
          if (++v41 == (const void **)v94) {
            goto LABEL_50;
          }
        }
      }
      if (v41 != (const void **)v94)
      {
        if (!v42) {
          goto LABEL_127;
        }
        uint64_t v43 = v42 + 9;
LABEL_84:
        v38((uint64_t)v89, v43);
        if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D58])) {
          goto LABEL_94;
        }
        v85[0] = MEMORY[0x1E4F143A8];
        v85[1] = 0x40000000;
        uint64_t v64 = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
        long long v86 = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
        long long v87 = &__block_descriptor_tmp_44_0;
        long long v88 = a2;
        uint64_t v65 = (const void **)*((void *)&v93 + 1);
        if (*((void *)&v93 + 1) != (void)v94)
        {
          while (*((unsigned char *)*v65 + 8) != 16)
          {
            if (++v65 == (const void **)v94) {
              goto LABEL_92;
            }
          }
        }
        if (v65 == (const void **)v94)
        {
LABEL_92:
          int v67 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::SvcType>(&v93);
          uint64_t v64 = v86;
          goto LABEL_93;
        }
        if (v66)
        {
          int v67 = v66 + 9;
LABEL_93:
          v64((uint64_t)v85, v67);
LABEL_94:
          qmi::MutableMessageBase::MutableMessageBase();
          uint64_t v68 = *(void **)a3;
          if (*(void *)a3) {
            uint64_t v68 = _Block_copy(v68);
          }
          dispatch_object_t v69 = *(NSObject **)(a3 + 8);
          long long v82 = v68;
          dispatch_object_t object = v69;
          if (v69) {
            dispatch_retain(v69);
          }
          int v70 = *(std::__shared_weak_count **)(a1 + 80);
          if (!v70 || (v71 = *(void *)(a1 + 72), (int v72 = std::__shared_weak_count::lock(v70)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          CFTypeRef v73 = v72;
          p_shared_weak_owners = &v72->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v72->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v73);
          }
          xpc_object_t aBlock = (xpc_object_t)MEMORY[0x1E4F143A8];
          uint64_t v100 = 1174405120;
          int v101 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
          uint64_t v102 = &__block_descriptor_tmp_145_0;
          uint64_t v103 = (void *)a1;
          uint64_t v104 = v71;
          v105 = v73;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          if (v82)
          {
            int v75 = object;
            v106 = _Block_copy(v82);
            dispatch_object_t v107 = object;
            if (!object) {
              goto LABEL_105;
            }
          }
          else
          {
            int v75 = object;
            v106 = 0;
            dispatch_object_t v107 = object;
            if (!object)
            {
LABEL_105:
              *(void *)&long long v96 = a1 + 184;
              *((void *)&v96 + 1) = QMIServiceMsg::create();
              LODWORD(v97) = 25000;
              *((void *)&v97 + 1) = 0;
              uint64_t v98 = 0;
              uint64_t v108 = MEMORY[0x1E4F143A8];
              uint64_t v109 = 0x40000000;
              v110 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
              v111 = &unk_1E6195510;
              p_xpc_object_t aBlock = &aBlock;
              uint64_t v76 = _Block_copy(&v108);
              uint64_t v98 = v76;
              if (*((void *)&v96 + 1))
              {
                qmi::Client::send();
                uint64_t v76 = v98;
              }
              if (v76) {
                _Block_release(v76);
              }
              if (v107) {
                dispatch_release(v107);
              }
              if (v106) {
                _Block_release(v106);
              }
              if (v105) {
                std::__shared_weak_count::__release_weak(v105);
              }
              std::__shared_weak_count::__release_weak(v73);
              if (v75) {
                dispatch_release(v75);
              }
              if (v82) {
                _Block_release(v82);
              }
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v84);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v93);
              if (SHIBYTE(__p[2]) < 0) {
                goto LABEL_61;
              }
              return;
            }
          }
          dispatch_retain(v75);
          goto LABEL_105;
        }
LABEL_127:
        __cxa_bad_cast();
      }
LABEL_50:
      uint64_t v44 = operator new(0x10uLL);
      int v45 = v44;
      v44[4] = 1;
      *(void *)uint64_t v44 = &unk_1F1265788;
      if ((unint64_t)v40 < *((void *)&v94 + 1))
      {
        *(void *)uint64_t v40 = v44;
        uint64_t v46 = (uint64_t)(v40 + 8);
LABEL_83:
        uint64_t v43 = (char *)v45 + 9;
        *(void *)&long long v94 = v46;
        uint64_t v38 = v90;
        goto LABEL_84;
      }
      int64_t v48 = v40 - v39;
      uint64_t v49 = (v40 - v39) >> 3;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v51 = *((void *)&v94 + 1) - (void)v39;
      if ((uint64_t)(*((void *)&v94 + 1) - (void)v39) >> 2 > v50) {
        unint64_t v50 = v51 >> 2;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        if (v52 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unsigned int v53 = operator new(8 * v52);
        uint64_t v54 = &v53[8 * v49];
        uint64_t v55 = &v53[8 * v52];
        *uint64_t v54 = v45;
        uint64_t v46 = (uint64_t)(v54 + 1);
        if (v39 == v40) {
          goto LABEL_81;
        }
      }
      else
      {
        unsigned int v53 = 0;
        uint64_t v54 = (void *)(8 * v49);
        uint64_t v55 = 0;
        *(void *)(8 * v49) = v45;
        uint64_t v46 = 8 * v49 + 8;
        if (v39 == v40)
        {
LABEL_81:
          *((void *)&v93 + 1) = v54;
          *(void *)&long long v94 = v46;
          *((void *)&v94 + 1) = v55;
          if (v39) {
            operator delete(v39);
          }
          goto LABEL_83;
        }
      }
      if ((unint64_t)(v48 - 8) < 0x58) {
        goto LABEL_132;
      }
      if ((unint64_t)(v39 - v53) < 0x20) {
        goto LABEL_132;
      }
      unint64_t v56 = ((unint64_t)(v48 - 8) >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      char v58 = &v40[-v57];
      uint64_t v54 = (void *)((char *)v54 - v57);
      size_t v59 = &v53[8 * v49 - 16];
      long long v60 = v40 - 16;
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        _OWORD *v59 = v62;
        v59 -= 2;
        v60 -= 32;
        v61 -= 4;
      }
      while (v61);
      uint64_t v40 = v58;
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_132:
        do
        {
          uint64_t v63 = *((void *)v40 - 1);
          v40 -= 8;
          *--uint64_t v54 = v63;
        }
        while (v40 != v39);
      }
      unsigned int v39 = (char *)*((void *)&v93 + 1);
      goto LABEL_81;
    }
  }
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v96 = v11;
  long long v97 = v11;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v96);
  v78[0] = MEMORY[0x1E4F143A8];
  v78[1] = 0x40000000;
  uint64_t v12 = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
  unint64_t v79 = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
  uint64_t v80 = &__block_descriptor_tmp_46;
  char v81 = v7;
  size_t v13 = (char *)*((void *)&v96 + 1);
  uint64_t v14 = (char *)v97;
  uint64_t v15 = (const void **)*((void *)&v96 + 1);
  if (*((void *)&v96 + 1) != (void)v97)
  {
    uint64_t v15 = (const void **)*((void *)&v96 + 1);
    while (*((unsigned char *)*v15 + 8) != 1)
    {
      if (++v15 == (const void **)v97) {
        goto LABEL_23;
      }
    }
  }
  if (v15 == (const void **)v97)
  {
LABEL_23:
    uint64_t v18 = operator new(0x10uLL);
    int64_t v19 = v18;
    v18[4] = 1;
    *(void *)uint64_t v18 = &unk_1F1265808;
    if ((unint64_t)v14 < *((void *)&v97 + 1))
    {
      *(void *)uint64_t v14 = v18;
      uint64_t v20 = (uint64_t)(v14 + 8);
LABEL_55:
      uint64_t v17 = (char *)v19 + 9;
      *(void *)&long long v97 = v20;
      uint64_t v12 = v79;
      goto LABEL_56;
    }
    int64_t v21 = v14 - v13;
    uint64_t v22 = (v14 - v13) >> 3;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = *((void *)&v97 + 1) - (void)v13;
    if ((uint64_t)(*((void *)&v97 + 1) - (void)v13) >> 2 > v23) {
      unint64_t v23 = v24 >> 2;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v26 = operator new(8 * v25);
      uint64_t v27 = &v26[8 * v22];
      uint64_t v28 = &v26[8 * v25];
      void *v27 = v19;
      uint64_t v20 = (uint64_t)(v27 + 1);
      if (v13 != v14)
      {
LABEL_34:
        if ((unint64_t)(v21 - 8) < 0x58) {
          goto LABEL_133;
        }
        if ((unint64_t)(v13 - v26) < 0x20) {
          goto LABEL_133;
        }
        unint64_t v29 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v31 = &v14[-v30];
        uint64_t v27 = (void *)((char *)v27 - v30);
        uint64_t v32 = &v26[8 * v22 - 16];
        char v33 = v14 - 16;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          _OWORD *v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 4;
        }
        while (v34);
        uint64_t v14 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_133:
          do
          {
            uint64_t v36 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v27 = v36;
          }
          while (v14 != v13);
        }
        size_t v13 = (char *)*((void *)&v96 + 1);
        *((void *)&v96 + 1) = v27;
        *(void *)&long long v97 = v20;
        *((void *)&v97 + 1) = v28;
        if (!v13) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }
    }
    else
    {
      int v26 = 0;
      uint64_t v27 = (void *)(8 * v22);
      uint64_t v28 = 0;
      *(void *)(8 * v22) = v19;
      uint64_t v20 = 8 * v22 + 8;
      if (v13 != v14) {
        goto LABEL_34;
      }
    }
    *((void *)&v96 + 1) = v27;
    *(void *)&long long v97 = v20;
    *((void *)&v97 + 1) = v28;
    if (!v13) {
      goto LABEL_55;
    }
LABEL_54:
    operator delete(v13);
    goto LABEL_55;
  }
  if (!v16) {
    __cxa_bad_cast();
  }
  uint64_t v17 = v16 + 9;
LABEL_56:
  v12((uint64_t)v78, v17);
  uint64_t v108 = a1 + 184;
  uint64_t v109 = QMIServiceMsg::create();
  LODWORD(v110) = 25000;
  v111 = 0;
  p_xpc_object_t aBlock = 0;
  v77[0] = MEMORY[0x1E4F143A8];
  v77[1] = 0x40000000;
  v77[2] = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
  v77[3] = &__block_descriptor_tmp_47_1;
  v77[4] = a1;
  xpc_object_t aBlock = (xpc_object_t)MEMORY[0x1E4F143A8];
  uint64_t v100 = 0x40000000;
  int v101 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22TransmitStateIndConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v102 = &unk_1E6195588;
  uint64_t v103 = v77;
  unsigned int v47 = (xpc_object_t *)_Block_copy(&aBlock);
  p_xpc_object_t aBlock = v47;
  if (v109)
  {
    qmi::Client::send();
    unsigned int v47 = p_aBlock;
  }
  if (v47) {
    _Block_release(v47);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v96);
  if (SHIBYTE(__p[2]) < 0) {
LABEL_61:
  }
    operator delete(__p[0]);
}

void sub_1B8BADC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)(v47 - 256));
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v46 + 56);
  uint64_t v49 = *(std::__shared_weak_count **)(v47 - 168);
  if (v49) {
    std::__shared_weak_count::__release_weak(v49);
  }
  std::__shared_weak_count::__release_weak(v45);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a35);
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, unsigned char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9D58]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BADD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_error_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_ERROR, "Error configuring transmit state indication", v3, 2u);
    }
  }
}

void antenna::QMICommandDriver::txPowerCapping_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v6 = (const char *)*MEMORY[0x1E4FB9C70];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9C70]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    xpc_object_t v102 = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t v102 = xpc_null_create();
    }
    int v8 = xpc::dyn_cast_or_default();
    xpc_release(v102);
  }
  else
  {
    int v8 = 0;
  }
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D20]))
  {
    if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D30])) {
      return;
    }
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v95 = v19;
    long long v96 = v19;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v95);
    if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9DC8]))
    {
LABEL_107:
      qmi::MutableMessageBase::MutableMessageBase();
      uint64_t v71 = *(void **)a3;
      if (*(void *)a3) {
        uint64_t v71 = _Block_copy(v71);
      }
      int v72 = *(NSObject **)(a3 + 8);
      uint64_t v80 = v71;
      char v81 = v72;
      if (v72) {
        dispatch_retain(v72);
      }
      CFTypeRef v73 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v73 || (uint64_t v74 = *(void *)(a1 + 72), (v75 = std::__shared_weak_count::lock(v73)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v76 = v75;
      p_shared_weak_owners = &v75->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v75->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v76);
      }
      xpc_object_t v102 = (xpc_object_t)MEMORY[0x1E4F143A8];
      uint64_t v103 = 1174405120;
      uint64_t v104 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      v105 = &__block_descriptor_tmp_154_1;
      uint64_t v106 = a1;
      uint64_t v107 = v74;
      uint64_t v108 = v76;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      if (v80)
      {
        uint64_t v78 = v81;
        uint64_t v109 = _Block_copy(v80);
        dispatch_object_t v110 = v81;
        if (!v81) {
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v78 = v81;
        uint64_t v109 = 0;
        dispatch_object_t v110 = v81;
        if (!v81)
        {
LABEL_118:
          if (v8)
          {
            uint64_t v97 = a1 + 184;
            uint64_t v98 = QMIServiceMsg::create();
            uint64_t v100 = 0;
            int v101 = 0;
            int v99 = v8;
            uint64_t v111 = MEMORY[0x1E4F143A8];
            uint64_t v112 = 0x40000000;
            v113 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
            v114 = &unk_1E6195510;
            v115 = &v102;
            unint64_t v79 = _Block_copy(&v111);
            int v101 = v79;
            if (v98)
            {
              qmi::Client::send();
              unint64_t v79 = v101;
            }
            if (!v79) {
              goto LABEL_129;
            }
          }
          else
          {
            uint64_t v97 = a1 + 184;
            uint64_t v98 = QMIServiceMsg::create();
            int v99 = 25000;
            uint64_t v100 = 0;
            int v101 = 0;
            uint64_t v111 = MEMORY[0x1E4F143A8];
            uint64_t v112 = 0x40000000;
            v113 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
            v114 = &unk_1E6195510;
            v115 = &v102;
            unint64_t v79 = _Block_copy(&v111);
            int v101 = v79;
            if (v98)
            {
              qmi::Client::send();
              unint64_t v79 = v101;
            }
            if (!v79) {
              goto LABEL_129;
            }
          }
          _Block_release(v79);
LABEL_129:
          if (v110) {
            dispatch_release(v110);
          }
          if (v109) {
            _Block_release(v109);
          }
          if (v108) {
            std::__shared_weak_count::__release_weak(v108);
          }
          std::__shared_weak_count::__release_weak(v76);
          if (v78) {
            dispatch_release(v78);
          }
          if (v80) {
            _Block_release(v80);
          }
          uint64_t v24 = (qmi::MutableMessageBase *)&v82;
          goto LABEL_140;
        }
      }
      dispatch_retain(v78);
      goto LABEL_118;
    }
    v87[0] = MEMORY[0x1E4F143A8];
    v87[1] = 0x40000000;
    uint64_t v20 = ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    long long v88 = ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    int v89 = &__block_descriptor_tmp_50;
    uint64_t v90 = a1;
    uint64_t v91 = a2;
    int64_t v21 = (char *)*((void *)&v95 + 1);
    uint64_t v22 = (char *)v96;
    unint64_t v23 = (const void **)*((void *)&v95 + 1);
    if (*((void *)&v95 + 1) != (void)v96)
    {
      unint64_t v23 = (const void **)*((void *)&v95 + 1);
      while (*((unsigned char *)*v23 + 8) != 17)
      {
        if (++v23 == (const void **)v96) {
          goto LABEL_51;
        }
      }
    }
    if (v23 == (const void **)v96)
    {
LABEL_51:
      uint64_t v27 = operator new(0x10uLL);
      uint64_t v28 = v27;
      v27[4] = 17;
      *(void *)uint64_t v27 = &unk_1F1265888;
      if ((unint64_t)v22 >= *((void *)&v96 + 1))
      {
        int64_t v30 = v22 - v21;
        uint64_t v31 = (v22 - v21) >> 3;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          goto LABEL_145;
        }
        uint64_t v33 = *((void *)&v96 + 1) - (void)v21;
        if ((uint64_t)(*((void *)&v96 + 1) - (void)v21) >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          if (v34 >> 61) {
            goto LABEL_146;
          }
          long long v35 = operator new(8 * v34);
          uint64_t v31 = (v22 - v21) >> 3;
        }
        else
        {
          long long v35 = 0;
        }
        uint64_t v36 = &v35[8 * v31];
        long long v37 = &v35[8 * v34];
        void *v36 = v28;
        unint64_t v29 = v36 + 1;
        if (v21 != v22)
        {
          if ((unint64_t)(v30 - 8) < 0x58) {
            goto LABEL_149;
          }
          if ((unint64_t)(v21 - v35) < 0x20) {
            goto LABEL_149;
          }
          unint64_t v38 = ((unint64_t)(v30 - 8) >> 3) + 1;
          uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v40 = &v22[-v39];
          uint64_t v36 = (void *)((char *)v36 - v39);
          uint64_t v41 = &v35[8 * v31 - 16];
          uint64_t v42 = v22 - 16;
          uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            _OWORD *v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 4;
          }
          while (v43);
          uint64_t v22 = v40;
          if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_149:
            do
            {
              uint64_t v45 = *((void *)v22 - 1);
              v22 -= 8;
              *--uint64_t v36 = v45;
            }
            while (v22 != v21);
          }
          int64_t v21 = (char *)*((void *)&v95 + 1);
        }
        *((void *)&v95 + 1) = v36;
        *(void *)&long long v96 = v29;
        *((void *)&v96 + 1) = v37;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)uint64_t v22 = v27;
        unint64_t v29 = v22 + 8;
      }
      int v26 = (char *)v28 + 9;
      *(void *)&long long v96 = v29;
      uint64_t v20 = v88;
    }
    else
    {
      if (!v25) {
        goto LABEL_144;
      }
      int v26 = v25 + 9;
    }
    v20((uint64_t)v87, v26);
    if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9DF8])) {
      goto LABEL_107;
    }
    v83[0] = MEMORY[0x1E4F143A8];
    v83[1] = 0x40000000;
    uint64_t v46 = ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
    long long v84 = ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
    int v85 = &__block_descriptor_tmp_52_1;
    long long v86 = a2;
    uint64_t v47 = (char *)*((void *)&v95 + 1);
    int64_t v48 = (char *)v96;
    uint64_t v49 = (const void **)*((void *)&v95 + 1);
    if (*((void *)&v95 + 1) != (void)v96)
    {
      uint64_t v49 = (const void **)*((void *)&v95 + 1);
      while (*((unsigned char *)*v49 + 8) != 18)
      {
        if (++v49 == (const void **)v96) {
          goto LABEL_83;
        }
      }
    }
    if (v49 != (const void **)v96)
    {
      if (v50)
      {
        uint64_t v51 = v50 + 9;
LABEL_106:
        v46((uint64_t)v83, v51);
        goto LABEL_107;
      }
LABEL_144:
      __cxa_bad_cast();
    }
LABEL_83:
    unint64_t v52 = operator new(0x10uLL);
    unsigned int v53 = v52;
    v52[4] = 18;
    *(void *)unint64_t v52 = &unk_1F12658D8;
    if ((unint64_t)v48 < *((void *)&v96 + 1))
    {
      *(void *)int64_t v48 = v52;
      uint64_t v54 = v48 + 8;
LABEL_105:
      uint64_t v51 = (char *)v53 + 9;
      *(void *)&long long v96 = v54;
      uint64_t v46 = v84;
      goto LABEL_106;
    }
    int64_t v55 = v48 - v47;
    uint64_t v56 = (v48 - v47) >> 3;
    unint64_t v57 = v56 + 1;
    if (!((unint64_t)(v56 + 1) >> 61))
    {
      uint64_t v58 = *((void *)&v96 + 1) - (void)v47;
      if ((uint64_t)(*((void *)&v96 + 1) - (void)v47) >> 2 > v57) {
        unint64_t v57 = v58 >> 2;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (!v59)
      {
        long long v60 = 0;
        goto LABEL_95;
      }
      if (!(v59 >> 61))
      {
        long long v60 = operator new(8 * v59);
LABEL_95:
        uint64_t v61 = &v60[8 * v56];
        long long v62 = &v60[8 * v59];
        *uint64_t v61 = v53;
        uint64_t v54 = v61 + 1;
        if (v47 != v48)
        {
          if ((unint64_t)(v55 - 8) < 0x58) {
            goto LABEL_150;
          }
          if ((unint64_t)(v47 - v60) < 0x20) {
            goto LABEL_150;
          }
          unint64_t v63 = ((unint64_t)(v55 - 8) >> 3) + 1;
          uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v65 = &v48[-v64];
          uint64_t v61 = (void *)((char *)v61 - v64);
          unsigned int v66 = &v60[8 * v56 - 16];
          int v67 = v48 - 16;
          uint64_t v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v69 = *(_OWORD *)v67;
            *(v66 - 1) = *((_OWORD *)v67 - 1);
            _OWORD *v66 = v69;
            v66 -= 2;
            v67 -= 32;
            v68 -= 4;
          }
          while (v68);
          int64_t v48 = v65;
          if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_150:
            do
            {
              uint64_t v70 = *((void *)v48 - 1);
              v48 -= 8;
              *--uint64_t v61 = v70;
            }
            while (v48 != v47);
          }
          uint64_t v47 = (char *)*((void *)&v95 + 1);
        }
        *((void *)&v95 + 1) = v61;
        *(void *)&long long v96 = v54;
        *((void *)&v96 + 1) = v62;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_105;
      }
LABEL_146:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_145:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v95 = v9;
  long long v96 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v95);
  qmi::MutableMessageBase::MutableMessageBase();
  uint64_t v10 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v10 = _Block_copy(v10);
  }
  long long v11 = *(NSObject **)(a3 + 8);
  xpc_object_t aBlock = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (uint64_t v13 = *(void *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  uint64_t v16 = &v14->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  xpc_object_t v102 = (xpc_object_t)MEMORY[0x1E4F143A8];
  uint64_t v103 = 1174405120;
  uint64_t v104 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v105 = &__block_descriptor_tmp_150;
  uint64_t v106 = a1;
  uint64_t v107 = v13;
  uint64_t v108 = v15;
  atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    uint64_t v17 = object;
    uint64_t v109 = _Block_copy(aBlock);
    dispatch_object_t v110 = object;
    if (!object) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v17 = object;
  uint64_t v109 = 0;
  dispatch_object_t v110 = object;
  if (object) {
LABEL_18:
  }
    dispatch_retain(v17);
LABEL_19:
  if (v8)
  {
    uint64_t v97 = a1 + 184;
    uint64_t v98 = QMIServiceMsg::create();
    uint64_t v100 = 0;
    int v101 = 0;
    int v99 = v8;
    uint64_t v111 = MEMORY[0x1E4F143A8];
    uint64_t v112 = 0x40000000;
    v113 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
    v114 = &unk_1E6195510;
    v115 = &v102;
    uint64_t v18 = _Block_copy(&v111);
    int v101 = v18;
    if (v98)
    {
      qmi::Client::send();
      uint64_t v18 = v101;
    }
    if (!v18) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v97 = a1 + 184;
    uint64_t v98 = QMIServiceMsg::create();
    int v99 = 25000;
    uint64_t v100 = 0;
    int v101 = 0;
    uint64_t v111 = MEMORY[0x1E4F143A8];
    uint64_t v112 = 0x40000000;
    v113 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
    v114 = &unk_1E6195510;
    v115 = &v102;
    uint64_t v18 = _Block_copy(&v111);
    int v101 = v18;
    if (v98)
    {
      qmi::Client::send();
      uint64_t v18 = v101;
    }
    if (!v18) {
      goto LABEL_37;
    }
  }
  _Block_release(v18);
LABEL_37:
  if (v110) {
    dispatch_release(v110);
  }
  if (v109) {
    _Block_release(v109);
  }
  if (v108) {
    std::__shared_weak_count::__release_weak(v108);
  }
  std::__shared_weak_count::__release_weak(v15);
  if (v17) {
    dispatch_release(v17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  uint64_t v24 = (qmi::MutableMessageBase *)&v94;
LABEL_140:
  qmi::MutableMessageBase::~MutableMessageBase(v24);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v95);
}

void sub_1B8BAE90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a38);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v39 + 56);
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 176);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  std::__shared_weak_count::__release_weak(v38);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), (const char *)*MEMORY[0x1E4FB9DC8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v5 = xpc::dyn_cast_or_default();
  xpc_release(object);
  char v7 = (uint64_t **)(v3 + 224);
  uint64_t v6 = *(uint64_t **)(v3 + 224);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v6;
        int v9 = *((_DWORD *)v6 + 7);
        if (v9 <= v5) {
          break;
        }
        uint64_t v6 = *v8;
        char v7 = v8;
        if (!*v8) {
          goto LABEL_11;
        }
      }
      if (v9 >= v5) {
        break;
      }
      uint64_t v6 = v8[1];
      if (!v6)
      {
        char v7 = v8 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    int v8 = (uint64_t **)(v3 + 224);
LABEL_11:
    uint64_t v10 = (uint64_t *)v8;
    int v8 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v8 + 7) = v5;
    *((_DWORD *)v8 + 8) = 0;
    NSObject *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *char v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(v3 + 216);
    uint64_t v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(v3 + 216) = v11;
      uint64_t v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 224), v12);
    ++*(void *)(v3 + 232);
  }
  *a2 = *((_DWORD *)v8 + 8);
}

void sub_1B8BAEB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, unsigned char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9DF8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BAEBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::txPowerConfiguration_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (const char *)*MEMORY[0x1E4FB9D58];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D58]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    block[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      block[0] = xpc_null_create();
    }
    int v11 = xpc::dyn_cast_or_default();
    xpc_release(block[0]);
    uint64_t v161 = a3;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v185 = v12;
    long long v186 = v12;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v185);
    v181[0] = MEMORY[0x1E4F143A8];
    v181[1] = 0x40000000;
    uint64_t v13 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v182 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v183 = &__block_descriptor_tmp_54;
    int v184 = v11;
    uint64_t v14 = (char *)*((void *)&v185 + 1);
    uint64_t v15 = (char *)v186;
    uint64_t v16 = (const void **)*((void *)&v185 + 1);
    v160 = (void *)a1;
    if (*((void *)&v185 + 1) != (void)v186)
    {
      uint64_t v16 = (const void **)*((void *)&v185 + 1);
      while (*((unsigned char *)*v16 + 8) != 1)
      {
        if (++v16 == (const void **)v186) {
          goto LABEL_16;
        }
      }
    }
    if (v16 != (const void **)v186)
    {
      if (!v17) {
        goto LABEL_239;
      }
      uint64_t v18 = v17 + 10;
LABEL_30:
      v13((uint64_t)v181, v18);
      switch(v11)
      {
        case 1:
          if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9DD0])) {
            goto LABEL_208;
          }
          v169[0] = MEMORY[0x1E4F143A8];
          v169[1] = 0x40000000;
          int64_t v30 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
          v170 = ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
          v171 = &__block_descriptor_tmp_60_0;
          v172 = a2;
          unint64_t v38 = (char *)*((void *)&v185 + 1);
          uint64_t v39 = (char *)v186;
          uint64_t v40 = (const void **)*((void *)&v185 + 1);
          if (*((void *)&v185 + 1) != (void)v186)
          {
            uint64_t v40 = (const void **)*((void *)&v185 + 1);
            while (*((unsigned char *)*v40 + 8) != 16)
            {
              if (++v40 == (const void **)v186) {
                goto LABEL_95;
              }
            }
          }
          if (v40 != (const void **)v186)
          {
            if (v47)
            {
              int64_t v48 = v47 + 10;
              uint64_t v49 = v169;
LABEL_207:
              v30((uint64_t)v49, v48);
LABEL_208:
              qmi::MutableMessageBase::MutableMessageBase();
              if (*(void *)v161)
              {
                v150 = _Block_copy(*(const void **)v161);
                v151 = v160;
                v152 = *(NSObject **)(v161 + 8);
                xpc_object_t aBlock = v150;
                xpc_object_t object = v152;
                if (!v152)
                {
LABEL_211:
                  v153 = (std::__shared_weak_count *)v151[10];
                  if (!v153 || (v154 = (void *)v151[9], (v155 = std::__shared_weak_count::lock(v153)) == 0)) {
                    std::__throw_bad_weak_ptr[abi:ne180100]();
                  }
                  v156 = v155;
                  p_shared_weak_owners = &v155->__shared_weak_owners_;
                  atomic_fetch_add_explicit(&v155->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  if (!atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                    std::__shared_weak_count::__release_weak(v156);
                  }
                  block[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
                  block[1] = (xpc_object_t)1174405120;
                  block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
                  v193 = &__block_descriptor_tmp_158;
                  v194 = v151;
                  xpc_object_t v195 = v154;
                  v196 = v156;
                  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
                  if (aBlock)
                  {
                    v158 = object;
                    v197 = _Block_copy(aBlock);
                    dispatch_object_t v198 = object;
                    if (!object)
                    {
LABEL_218:
                      v187 = v151 + 23;
                      uint64_t v188 = QMIServiceMsg::create();
                      int v189 = 25000;
                      uint64_t v190 = 0;
                      v191 = 0;
                      *(void *)&long long buf = MEMORY[0x1E4F143A8];
                      *((void *)&buf + 1) = 0x40000000;
                      v200 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
                      v201 = &unk_1E6195510;
                      v202 = block;
                      v159 = _Block_copy(&buf);
                      v191 = v159;
                      if (v188)
                      {
                        qmi::Client::send();
                        v159 = v191;
                      }
                      if (v159) {
                        _Block_release(v159);
                      }
                      if (v198) {
                        dispatch_release(v198);
                      }
                      if (v197) {
                        _Block_release(v197);
                      }
                      if (v196) {
                        std::__shared_weak_count::__release_weak(v196);
                      }
                      std::__shared_weak_count::__release_weak(v156);
                      if (v158) {
                        dispatch_release(v158);
                      }
                      if (aBlock) {
                        _Block_release(aBlock);
                      }
                      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v164);
LABEL_233:
                      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v185);
                      return;
                    }
                  }
                  else
                  {
                    v158 = object;
                    v197 = 0;
                    dispatch_object_t v198 = object;
                    if (!object) {
                      goto LABEL_218;
                    }
                  }
                  dispatch_retain(v158);
                  goto LABEL_218;
                }
              }
              else
              {
                v151 = v160;
                v152 = *(NSObject **)(v161 + 8);
                xpc_object_t aBlock = 0;
                xpc_object_t object = v152;
                if (!v152) {
                  goto LABEL_211;
                }
              }
              dispatch_retain(v152);
              goto LABEL_211;
            }
LABEL_239:
            __cxa_bad_cast();
          }
LABEL_95:
          uint64_t v64 = operator new(0x10uLL);
          uint64_t v65 = v64;
          v64[8] = 16;
          *(void *)uint64_t v64 = &unk_1F1265A48;
          *((_WORD *)v64 + 5) = 0;
          unsigned int v66 = v64 + 10;
          if ((unint64_t)v39 >= *((void *)&v186 + 1))
          {
            int64_t v78 = v39 - v38;
            uint64_t v79 = (v39 - v38) >> 3;
            unint64_t v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 61) {
              goto LABEL_241;
            }
            uint64_t v81 = *((void *)&v186 + 1) - (void)v38;
            if ((uint64_t)(*((void *)&v186 + 1) - (void)v38) >> 2 > v80) {
              unint64_t v80 = v81 >> 2;
            }
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v80;
            }
            if (v82)
            {
              if (v82 >> 61) {
                goto LABEL_242;
              }
              uint64_t v83 = operator new(8 * v82);
            }
            else
            {
              uint64_t v83 = 0;
            }
            v120 = &v83[8 * v79];
            v121 = &v83[8 * v82];
            void *v120 = v65;
            int v67 = v120 + 1;
            if (v38 != v39)
            {
              if ((unint64_t)(v78 - 8) < 0x58) {
                goto LABEL_245;
              }
              if ((unint64_t)(v38 - v83) < 0x20) {
                goto LABEL_245;
              }
              unint64_t v122 = ((unint64_t)(v78 - 8) >> 3) + 1;
              uint64_t v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
              v124 = &v39[-v123];
              v120 = (void *)((char *)v120 - v123);
              v125 = &v83[8 * v79 - 16];
              v126 = v39 - 16;
              uint64_t v127 = v122 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v128 = *(_OWORD *)v126;
                *(v125 - 1) = *((_OWORD *)v126 - 1);
                _OWORD *v125 = v128;
                v125 -= 2;
                v126 -= 32;
                v127 -= 4;
              }
              while (v127);
              uint64_t v39 = v124;
              if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_245:
                do
                {
                  uint64_t v129 = *((void *)v39 - 1);
                  v39 -= 8;
                  *--v120 = v129;
                }
                while (v39 != v38);
              }
              unint64_t v38 = (char *)*((void *)&v185 + 1);
            }
            *((void *)&v185 + 1) = v120;
            *(void *)&long long v186 = v67;
            *((void *)&v186 + 1) = v121;
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(void *)uint64_t v39 = v64;
            int v67 = v39 + 8;
          }
          *(void *)&long long v186 = v67;
          v170((uint64_t)v169, v66);
          goto LABEL_208;
        case 2:
          if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9DE0]))
          {
            v177[0] = MEMORY[0x1E4F143A8];
            v177[1] = 0x40000000;
            unint64_t v34 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
            v178 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
            v179 = &__block_descriptor_tmp_56_0;
            v180 = a2;
            long long v35 = (char *)*((void *)&v185 + 1);
            uint64_t v36 = (char *)v186;
            long long v37 = (const void **)*((void *)&v185 + 1);
            if (*((void *)&v185 + 1) != (void)v186)
            {
              long long v37 = (const void **)*((void *)&v185 + 1);
              while (*((unsigned char *)*v37 + 8) != 23)
              {
                if (++v37 == (const void **)v186) {
                  goto LABEL_93;
                }
              }
            }
            if (v37 == (const void **)v186)
            {
LABEL_93:
              uint64_t v61 = operator new(0x10uLL);
              long long v62 = v61;
              v61[8] = 23;
              *(void *)uint64_t v61 = &unk_1F12659A8;
              *((_WORD *)v61 + 5) = 0;
              uint64_t v46 = v61 + 10;
              if ((unint64_t)v36 >= *((void *)&v186 + 1))
              {
                int64_t v72 = v36 - v35;
                uint64_t v73 = (v36 - v35) >> 3;
                unint64_t v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 61) {
                  goto LABEL_241;
                }
                uint64_t v75 = *((void *)&v186 + 1) - (void)v35;
                if ((uint64_t)(*((void *)&v186 + 1) - (void)v35) >> 2 > v74) {
                  unint64_t v74 = v75 >> 2;
                }
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v76 = v74;
                }
                if (v76)
                {
                  if (v76 >> 61) {
                    goto LABEL_242;
                  }
                  uint64_t v77 = operator new(8 * v76);
                }
                else
                {
                  uint64_t v77 = 0;
                }
                uint64_t v97 = &v77[8 * v73];
                uint64_t v98 = &v77[8 * v76];
                void *v97 = v62;
                unint64_t v63 = v97 + 1;
                if (v35 != v36)
                {
                  if ((unint64_t)(v72 - 8) < 0x58) {
                    goto LABEL_246;
                  }
                  if ((unint64_t)(v35 - v77) < 0x20) {
                    goto LABEL_246;
                  }
                  unint64_t v99 = ((unint64_t)(v72 - 8) >> 3) + 1;
                  uint64_t v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                  int v101 = &v36[-v100];
                  uint64_t v97 = (void *)((char *)v97 - v100);
                  xpc_object_t v102 = &v77[8 * v73 - 16];
                  uint64_t v103 = v36 - 16;
                  uint64_t v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v105 = *(_OWORD *)v103;
                    *(v102 - 1) = *((_OWORD *)v103 - 1);
                    *xpc_object_t v102 = v105;
                    v102 -= 2;
                    v103 -= 32;
                    v104 -= 4;
                  }
                  while (v104);
                  uint64_t v36 = v101;
                  if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_246:
                    do
                    {
                      uint64_t v106 = *((void *)v36 - 1);
                      v36 -= 8;
                      *--uint64_t v97 = v106;
                    }
                    while (v36 != v35);
                  }
                  long long v35 = (char *)*((void *)&v185 + 1);
                }
                *((void *)&v185 + 1) = v97;
                *(void *)&long long v186 = v63;
                *((void *)&v186 + 1) = v98;
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                *(void *)uint64_t v36 = v61;
                unint64_t v63 = v36 + 8;
              }
              *(void *)&long long v186 = v63;
              unint64_t v34 = v178;
            }
            else
            {
              if (!v45) {
                goto LABEL_239;
              }
              uint64_t v46 = v45 + 10;
            }
            v34((uint64_t)v177, v46);
          }
          if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9DD8])) {
            goto LABEL_208;
          }
          v173[0] = MEMORY[0x1E4F143A8];
          v173[1] = 0x40000000;
          int64_t v30 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
          v174 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
          v175 = &__block_descriptor_tmp_58_1;
          v176 = a2;
          uint64_t v107 = (char *)*((void *)&v185 + 1);
          uint64_t v108 = (char *)v186;
          uint64_t v109 = (const void **)*((void *)&v185 + 1);
          if (*((void *)&v185 + 1) != (void)v186)
          {
            uint64_t v109 = (const void **)*((void *)&v185 + 1);
            while (*((unsigned char *)*v109 + 8) != 24)
            {
              if (++v109 == (const void **)v186) {
                goto LABEL_160;
              }
            }
          }
          if (v109 != (const void **)v186)
          {
            if (v110)
            {
              int64_t v48 = v110 + 10;
              uint64_t v49 = v173;
              goto LABEL_207;
            }
            goto LABEL_239;
          }
LABEL_160:
          uint64_t v111 = operator new(0x10uLL);
          uint64_t v112 = v111;
          v111[8] = 24;
          *(void *)uint64_t v111 = &unk_1F12659F8;
          *((_WORD *)v111 + 5) = 0;
          int64_t v48 = v111 + 10;
          if ((unint64_t)v108 >= *((void *)&v186 + 1))
          {
            int64_t v114 = v108 - v107;
            uint64_t v115 = (v108 - v107) >> 3;
            unint64_t v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 61) {
              goto LABEL_241;
            }
            uint64_t v117 = *((void *)&v186 + 1) - (void)v107;
            if ((uint64_t)(*((void *)&v186 + 1) - (void)v107) >> 2 > v116) {
              unint64_t v116 = v117 >> 2;
            }
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v116;
            }
            if (v118)
            {
              if (v118 >> 61) {
                goto LABEL_242;
              }
              v119 = operator new(8 * v118);
            }
            else
            {
              v119 = 0;
            }
            v140 = &v119[8 * v115];
            v141 = &v119[8 * v118];
            void *v140 = v112;
            v113 = v140 + 1;
            if (v107 != v108)
            {
              if ((unint64_t)(v114 - 8) < 0x58) {
                goto LABEL_247;
              }
              if ((unint64_t)(v107 - v119) < 0x20) {
                goto LABEL_247;
              }
              unint64_t v142 = ((unint64_t)(v114 - 8) >> 3) + 1;
              uint64_t v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
              v144 = &v108[-v143];
              v140 = (void *)((char *)v140 - v143);
              v145 = &v119[8 * v115 - 16];
              v146 = v108 - 16;
              uint64_t v147 = v142 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v148 = *(_OWORD *)v146;
                *(v145 - 1) = *((_OWORD *)v146 - 1);
                _OWORD *v145 = v148;
                v145 -= 2;
                v146 -= 32;
                v147 -= 4;
              }
              while (v147);
              uint64_t v108 = v144;
              if (v142 != (v142 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_247:
                do
                {
                  uint64_t v149 = *((void *)v108 - 1);
                  v108 -= 8;
                  *--v140 = v149;
                }
                while (v108 != v107);
              }
              uint64_t v107 = (char *)*((void *)&v185 + 1);
            }
            *((void *)&v185 + 1) = v140;
            *(void *)&long long v186 = v113;
            *((void *)&v186 + 1) = v141;
            if (v107) {
              operator delete(v107);
            }
          }
          else
          {
            *(void *)uint64_t v108 = v111;
            v113 = v108 + 8;
          }
          *(void *)&long long v186 = v113;
          uint64_t v49 = v173;
          int64_t v30 = v174;
          goto LABEL_207;
        case 3:
          if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9DD0])) {
            goto LABEL_208;
          }
          v165[0] = MEMORY[0x1E4F143A8];
          v165[1] = 0x40000000;
          int64_t v30 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_5;
          v166 = ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_5;
          v167 = &__block_descriptor_tmp_62_2;
          v168 = a2;
          uint64_t v31 = (char *)*((void *)&v185 + 1);
          unint64_t v32 = (char *)v186;
          uint64_t v33 = (const void **)*((void *)&v185 + 1);
          if (*((void *)&v185 + 1) != (void)v186)
          {
            uint64_t v33 = (const void **)*((void *)&v185 + 1);
            while (*((unsigned char *)*v33 + 8) != 25)
            {
              if (++v33 == (const void **)v186) {
                goto LABEL_97;
              }
            }
          }
          if (v33 != (const void **)v186)
          {
            if (v50)
            {
              int64_t v48 = v50 + 10;
              uint64_t v49 = v165;
              goto LABEL_207;
            }
            goto LABEL_239;
          }
LABEL_97:
          uint64_t v68 = operator new(0x10uLL);
          long long v69 = v68;
          v68[8] = 25;
          *(void *)uint64_t v68 = &unk_1F1265A98;
          *((_WORD *)v68 + 5) = 0;
          uint64_t v70 = v68 + 10;
          if ((unint64_t)v32 < *((void *)&v186 + 1))
          {
            *(void *)unint64_t v32 = v68;
            uint64_t v71 = v32 + 8;
LABEL_194:
            *(void *)&long long v186 = v71;
            v166((uint64_t)v165, v70);
            goto LABEL_208;
          }
          int64_t v84 = v32 - v31;
          uint64_t v85 = (v32 - v31) >> 3;
          unint64_t v86 = v85 + 1;
          if (!((unint64_t)(v85 + 1) >> 61))
          {
            uint64_t v87 = *((void *)&v186 + 1) - (void)v31;
            if ((uint64_t)(*((void *)&v186 + 1) - (void)v31) >> 2 > v86) {
              unint64_t v86 = v87 >> 2;
            }
            if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v88 = v86;
            }
            if (!v88)
            {
              int v89 = 0;
              goto LABEL_184;
            }
            if (!(v88 >> 61))
            {
              int v89 = operator new(8 * v88);
LABEL_184:
              char v130 = &v89[8 * v85];
              v131 = &v89[8 * v88];
              *char v130 = v69;
              uint64_t v71 = v130 + 1;
              if (v31 != v32)
              {
                if ((unint64_t)(v84 - 8) < 0x58) {
                  goto LABEL_248;
                }
                if ((unint64_t)(v31 - v89) < 0x20) {
                  goto LABEL_248;
                }
                unint64_t v132 = ((unint64_t)(v84 - 8) >> 3) + 1;
                uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v134 = &v32[-v133];
                char v130 = (void *)((char *)v130 - v133);
                uint64_t v135 = &v89[8 * v85 - 16];
                v136 = v32 - 16;
                uint64_t v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v138 = *(_OWORD *)v136;
                  *(v135 - 1) = *((_OWORD *)v136 - 1);
                  *uint64_t v135 = v138;
                  v135 -= 2;
                  v136 -= 32;
                  v137 -= 4;
                }
                while (v137);
                unint64_t v32 = v134;
                if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_248:
                  do
                  {
                    uint64_t v139 = *((void *)v32 - 1);
                    v32 -= 8;
                    *--char v130 = v139;
                  }
                  while (v32 != v31);
                }
                uint64_t v31 = (char *)*((void *)&v185 + 1);
              }
              *((void *)&v185 + 1) = v130;
              *(void *)&long long v186 = v71;
              *((void *)&v186 + 1) = v131;
              if (v31) {
                operator delete(v31);
              }
              goto LABEL_194;
            }
LABEL_242:
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
LABEL_241:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      xpc_object_t v41 = xpc_null_create();
      if (*(void *)v161) {
        uint64_t v42 = _Block_copy(*(const void **)v161);
      }
      else {
        uint64_t v42 = 0;
      }
      unint64_t v59 = *(NSObject **)(v161 + 8);
      block[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
      block[1] = (xpc_object_t)1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
      v193 = &__block_descriptor_tmp_141;
      if (v42)
      {
        long long v60 = _Block_copy(v42);
        LOBYTE(v196) = 0;
        v194 = v60;
        xpc_object_t v195 = v41;
        if (v41)
        {
LABEL_85:
          xpc_retain(v41);
LABEL_88:
          dispatch_async(v59, block);
          xpc_release(v195);
          xpc_object_t v195 = 0;
          if (v194) {
            _Block_release(v194);
          }
          if (v42) {
            _Block_release(v42);
          }
          xpc_release(v41);
          goto LABEL_233;
        }
      }
      else
      {
        LOBYTE(v196) = 0;
        v194 = 0;
        xpc_object_t v195 = v41;
        if (v41) {
          goto LABEL_85;
        }
      }
      xpc_object_t v195 = xpc_null_create();
      goto LABEL_88;
    }
LABEL_16:
    long long v19 = operator new(0x10uLL);
    uint64_t v20 = v19;
    v19[8] = 1;
    *(void *)long long v19 = &unk_1F1265958;
    *((_WORD *)v19 + 5) = 0;
    uint64_t v18 = v19 + 10;
    if ((unint64_t)v15 < *((void *)&v186 + 1))
    {
      *(void *)uint64_t v15 = v19;
      uint64_t v21 = (uint64_t)(v15 + 8);
LABEL_29:
      *(void *)&long long v186 = v21;
      uint64_t v13 = v182;
      goto LABEL_30;
    }
    int64_t v22 = v15 - v14;
    uint64_t v23 = (v15 - v14) >> 3;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      goto LABEL_241;
    }
    uint64_t v25 = *((void *)&v186 + 1) - (void)v14;
    if ((uint64_t)(*((void *)&v186 + 1) - (void)v14) >> 2 > v24) {
      unint64_t v24 = v25 >> 2;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 61) {
        goto LABEL_242;
      }
      uint64_t v27 = operator new(8 * v26);
      uint64_t v28 = &v27[8 * v23];
      unint64_t v29 = &v27[8 * v26];
      void *v28 = v20;
      uint64_t v21 = (uint64_t)(v28 + 1);
      if (v14 == v15)
      {
LABEL_27:
        *((void *)&v185 + 1) = v28;
        *(void *)&long long v186 = v21;
        *((void *)&v186 + 1) = v29;
        if (!v14) {
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v14);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (void *)(8 * v23);
      unint64_t v29 = 0;
      *(void *)(8 * v23) = v20;
      uint64_t v21 = 8 * v23 + 8;
      if (v14 == v15) {
        goto LABEL_27;
      }
    }
    if ((unint64_t)(v22 - 8) < 0x58) {
      goto LABEL_249;
    }
    if ((unint64_t)(v14 - v27) < 0x20) {
      goto LABEL_249;
    }
    unint64_t v51 = ((unint64_t)(v22 - 8) >> 3) + 1;
    uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v53 = &v15[-v52];
    uint64_t v28 = (void *)((char *)v28 - v52);
    uint64_t v54 = &v27[8 * v23 - 16];
    int64_t v55 = v15 - 16;
    uint64_t v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v57 = *(_OWORD *)v55;
      *(v54 - 1) = *((_OWORD *)v55 - 1);
      *uint64_t v54 = v57;
      v54 -= 2;
      v55 -= 32;
      v56 -= 4;
    }
    while (v56);
    uint64_t v15 = v53;
    if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_249:
      do
      {
        uint64_t v58 = *((void *)v15 - 1);
        v15 -= 8;
        *--uint64_t v28 = v58;
      }
      while (v15 != v14);
    }
    uint64_t v14 = (char *)*((void *)&v185 + 1);
    *((void *)&v185 + 1) = v28;
    *(void *)&long long v186 = v21;
    *((void *)&v186 + 1) = v29;
    if (!v14) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  int v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v90 = (char *)MEMORY[0x1BA9C88A0](*a2);
    memset(block, 170, sizeof(block));
    size_t v91 = strlen(v90);
    if (v91 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    char v92 = (void *)v91;
    if (v91 >= 0x17)
    {
      uint64_t v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v91 | 7) != 0x17) {
        uint64_t v94 = v91 | 7;
      }
      uint64_t v95 = v94 + 1;
      long long v93 = (xpc_object_t *)operator new(v94 + 1);
      block[1] = v92;
      block[2] = (xpc_object_t)(v95 | 0x8000000000000000);
      block[0] = v93;
    }
    else
    {
      HIBYTE(block[2]) = v91;
      long long v93 = block;
      if (!v91) {
        goto LABEL_134;
      }
    }
    memcpy(v93, v90, (size_t)v92);
LABEL_134:
    *((unsigned char *)v92 + (void)v93) = 0;
    free(v90);
    long long v96 = block;
    if (SHIBYTE(block[2]) < 0) {
      long long v96 = (xpc_object_t *)block[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v96;
    _os_log_error_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0) {
      operator delete(block[0]);
    }
  }
  xpc_object_t v9 = xpc_null_create();
  if (*(void *)a3) {
    uint64_t v10 = _Block_copy(*(const void **)a3);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v43 = *(NSObject **)(a3 + 8);
  block[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
  block[1] = (xpc_object_t)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v193 = &__block_descriptor_tmp_141;
  if (!v10)
  {
    LOBYTE(v196) = 0;
    v194 = 0;
    xpc_object_t v195 = v9;
    if (v9) {
      goto LABEL_56;
    }
LABEL_58:
    xpc_object_t v195 = xpc_null_create();
    goto LABEL_59;
  }
  long long v44 = _Block_copy(v10);
  LOBYTE(v196) = 0;
  v194 = v44;
  xpc_object_t v195 = v9;
  if (!v9) {
    goto LABEL_58;
  }
LABEL_56:
  xpc_retain(v9);
LABEL_59:
  dispatch_async(v43, block);
  xpc_release(v195);
  xpc_object_t v195 = 0;
  if (v194) {
    _Block_release(v194);
  }
  if (v10) {
    _Block_release(v10);
  }
  xpc_release(v9);
}

void sub_1B8BAFD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8BAFEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9DE0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BAFF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9DD8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BAFFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9DD0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB0064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_5(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9DD0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB00F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t antenna::QMICommandDriver::getAccessoryType(antenna::QMICommandDriver *this, int a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  size_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v49[0] = 67109120;
    v49[1] = a2;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Telephony IOKIT value: 0x%x\n", (uint8_t *)v49, 8u);
    if ((a2 & 2) == 0)
    {
LABEL_3:
      uint64_t v5 = 0;
      if ((a2 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_22:
      uint64_t v15 = (uint64_t **)((char *)this + 112);
      uint64_t v14 = (char *)*((void *)this + 14);
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v16 = (uint64_t **)v14;
            unsigned int v17 = *((_DWORD *)v14 + 7);
            if (v17 < 5) {
              break;
            }
            uint64_t v14 = (char *)*v16;
            uint64_t v15 = v16;
            if (!*v16) {
              goto LABEL_29;
            }
          }
          if (v17 == 4) {
            break;
          }
          uint64_t v14 = (char *)v16[1];
          if (!v14)
          {
            uint64_t v15 = v16 + 1;
            goto LABEL_29;
          }
        }
        uint64_t v5 = *((_DWORD *)v16 + 8) | v5;
        if ((a2 & 8) != 0) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v16 = (uint64_t **)((char *)this + 112);
LABEL_29:
        uint64_t v18 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v18 + 28) = 4;
        *uint64_t v18 = 0;
        v18[1] = 0;
        void v18[2] = (uint64_t)v16;
        *uint64_t v15 = v18;
        uint64_t v19 = **((void **)this + 13);
        uint64_t v20 = v18;
        if (v19)
        {
          *((void *)this + 13) = v19;
          uint64_t v20 = *v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v20);
        ++*((void *)this + 15);
        uint64_t v5 = *((_DWORD *)v18 + 8) | v5;
        if ((a2 & 8) != 0) {
          goto LABEL_34;
        }
      }
LABEL_5:
      if ((a2 & 0x10) == 0) {
        goto LABEL_6;
      }
LABEL_46:
      unint64_t v29 = (uint64_t **)((char *)this + 112);
      uint64_t v28 = (char *)*((void *)this + 14);
      if (v28)
      {
        while (1)
        {
          while (1)
          {
            int64_t v30 = (uint64_t **)v28;
            unsigned int v31 = *((_DWORD *)v28 + 7);
            if (v31 < 0x11) {
              break;
            }
            uint64_t v28 = (char *)*v30;
            unint64_t v29 = v30;
            if (!*v30) {
              goto LABEL_53;
            }
          }
          if (v31 == 16) {
            break;
          }
          uint64_t v28 = (char *)v30[1];
          if (!v28)
          {
            unint64_t v29 = v30 + 1;
            goto LABEL_53;
          }
        }
        uint64_t v5 = *((_DWORD *)v30 + 8) | v5;
        if ((a2 & 0x20) != 0) {
          goto LABEL_58;
        }
      }
      else
      {
        int64_t v30 = (uint64_t **)((char *)this + 112);
LABEL_53:
        unint64_t v32 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v32 + 28) = 16;
        uint64_t *v32 = 0;
        v32[1] = 0;
        v32[2] = (uint64_t)v30;
        char *v29 = v32;
        uint64_t v33 = **((void **)this + 13);
        unint64_t v34 = v32;
        if (v33)
        {
          *((void *)this + 13) = v33;
          unint64_t v34 = *v29;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v34);
        ++*((void *)this + 15);
        uint64_t v5 = *((_DWORD *)v32 + 8) | v5;
        if ((a2 & 0x20) != 0) {
          goto LABEL_58;
        }
      }
LABEL_7:
      if (v5) {
        return v5;
      }
      goto LABEL_70;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  int v8 = (uint64_t **)((char *)this + 112);
  char v7 = (char *)*((void *)this + 14);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        xpc_object_t v9 = (uint64_t **)v7;
        unsigned int v10 = *((_DWORD *)v7 + 7);
        if (v10 < 3) {
          break;
        }
        char v7 = (char *)*v9;
        int v8 = v9;
        if (!*v9) {
          goto LABEL_17;
        }
      }
      if (v10 == 2) {
        break;
      }
      char v7 = (char *)v9[1];
      if (!v7)
      {
        int v8 = v9 + 1;
        goto LABEL_17;
      }
    }
    uint64_t v5 = *((unsigned int *)v9 + 8);
    if ((a2 & 4) != 0) {
      goto LABEL_22;
    }
  }
  else
  {
    xpc_object_t v9 = (uint64_t **)((char *)this + 112);
LABEL_17:
    int v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = 2;
    *int v11 = 0;
    v11[1] = 0;
    void v11[2] = (uint64_t)v9;
    NSObject *v8 = v11;
    uint64_t v12 = **((void **)this + 13);
    uint64_t v13 = v11;
    if (v12)
    {
      *((void *)this + 13) = v12;
      uint64_t v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v13);
    ++*((void *)this + 15);
    uint64_t v5 = *((unsigned int *)v11 + 8);
    if ((a2 & 4) != 0) {
      goto LABEL_22;
    }
  }
LABEL_4:
  if ((a2 & 8) == 0) {
    goto LABEL_5;
  }
LABEL_34:
  int64_t v22 = (uint64_t **)((char *)this + 112);
  uint64_t v21 = (char *)*((void *)this + 14);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v23 = (uint64_t **)v21;
        unsigned int v24 = *((_DWORD *)v21 + 7);
        if (v24 < 9) {
          break;
        }
        uint64_t v21 = (char *)*v23;
        int64_t v22 = v23;
        if (!*v23) {
          goto LABEL_41;
        }
      }
      if (v24 == 8) {
        break;
      }
      uint64_t v21 = (char *)v23[1];
      if (!v21)
      {
        int64_t v22 = v23 + 1;
        goto LABEL_41;
      }
    }
    uint64_t v5 = *((_DWORD *)v23 + 8) | v5;
    if ((a2 & 0x10) != 0) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t **)((char *)this + 112);
LABEL_41:
    uint64_t v25 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v25 + 28) = 8;
    *uint64_t v25 = 0;
    v25[1] = 0;
    void v25[2] = (uint64_t)v23;
    char *v22 = v25;
    uint64_t v26 = **((void **)this + 13);
    uint64_t v27 = v25;
    if (v26)
    {
      *((void *)this + 13) = v26;
      uint64_t v27 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v27);
    ++*((void *)this + 15);
    uint64_t v5 = *((_DWORD *)v25 + 8) | v5;
    if ((a2 & 0x10) != 0) {
      goto LABEL_46;
    }
  }
LABEL_6:
  if ((a2 & 0x20) == 0) {
    goto LABEL_7;
  }
LABEL_58:
  uint64_t v36 = (uint64_t **)((char *)this + 112);
  long long v35 = (char *)*((void *)this + 14);
  if (v35)
  {
    while (1)
    {
      while (1)
      {
        long long v37 = (uint64_t **)v35;
        unsigned int v38 = *((_DWORD *)v35 + 7);
        if (v38 < 0x21) {
          break;
        }
        long long v35 = (char *)*v37;
        uint64_t v36 = v37;
        if (!*v37) {
          goto LABEL_65;
        }
      }
      if (v38 == 32) {
        break;
      }
      long long v35 = (char *)v37[1];
      if (!v35)
      {
        uint64_t v36 = v37 + 1;
        goto LABEL_65;
      }
    }
    uint64_t v5 = *((_DWORD *)v37 + 8) | v5;
    if (!v5) {
      goto LABEL_70;
    }
  }
  else
  {
    long long v37 = (uint64_t **)((char *)this + 112);
LABEL_65:
    uint64_t v39 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v39 + 28) = 32;
    uint64_t *v39 = 0;
    v39[1] = 0;
    v39[2] = (uint64_t)v37;
    char *v36 = v39;
    uint64_t v40 = **((void **)this + 13);
    xpc_object_t v41 = v39;
    if (v40)
    {
      *((void *)this + 13) = v40;
      xpc_object_t v41 = *v36;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v41);
    ++*((void *)this + 15);
    uint64_t v5 = *((_DWORD *)v39 + 8) | v5;
    if (!v5)
    {
LABEL_70:
      uint64_t v43 = (uint64_t **)((char *)this + 112);
      uint64_t v42 = (uint64_t *)*((void *)this + 14);
      if (v42)
      {
        while (1)
        {
          while (1)
          {
            long long v44 = (uint64_t **)v42;
            unsigned int v45 = *((_DWORD *)v42 + 7);
            if (v45 < 2) {
              break;
            }
            uint64_t v42 = *v44;
            uint64_t v43 = v44;
            if (!*v44) {
              goto LABEL_77;
            }
          }
          if (v45) {
            break;
          }
          uint64_t v42 = v44[1];
          if (!v42)
          {
            uint64_t v43 = v44 + 1;
            goto LABEL_77;
          }
        }
        uint64_t v46 = (uint64_t *)v44;
      }
      else
      {
        long long v44 = (uint64_t **)((char *)this + 112);
LABEL_77:
        uint64_t v46 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v46 + 28) = 1;
        *uint64_t v46 = 0;
        v46[1] = 0;
        v46[2] = (uint64_t)v44;
        *uint64_t v43 = v46;
        uint64_t v47 = **((void **)this + 13);
        int64_t v48 = v46;
        if (v47)
        {
          *((void *)this + 13) = v47;
          int64_t v48 = *v43;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v48);
        ++*((void *)this + 15);
      }
      return *((unsigned int *)v46 + 8);
    }
  }
  return v5;
}

void antenna::QMICommandDriver::e75AccessoryStatusRF_sync(antenna::QMICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v85 = v5;
  long long v86 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v85);
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 0x40000000;
  uint64_t v6 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  uint64_t v81 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  unint64_t v82 = &__block_descriptor_tmp_66_0;
  uint64_t v83 = a1;
  int64_t v84 = a2;
  char v7 = (char *)*((void *)&v85 + 1);
  int v8 = (char *)v86;
  xpc_object_t v9 = (const void **)*((void *)&v85 + 1);
  if (*((void *)&v85 + 1) != (void)v86)
  {
    xpc_object_t v9 = (const void **)*((void *)&v85 + 1);
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v86) {
        goto LABEL_9;
      }
    }
  }
  if (v9 == (const void **)v86)
  {
LABEL_9:
    uint64_t v12 = operator new(0x10uLL);
    uint64_t v13 = v12;
    v12[8] = 1;
    *(void *)uint64_t v12 = &unk_1F1265B18;
    *((_WORD *)v12 + 5) = 0;
    int v11 = v12 + 10;
    if ((unint64_t)v8 < *((void *)&v86 + 1))
    {
      *(void *)int v8 = v12;
      uint64_t v14 = (uint64_t)(v8 + 8);
LABEL_22:
      *(void *)&long long v86 = v14;
      uint64_t v6 = v81;
      goto LABEL_23;
    }
    int64_t v15 = v8 - v7;
    uint64_t v16 = (v8 - v7) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = *((void *)&v86 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v86 + 1) - (void)v7) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v20 = operator new(8 * v19);
      uint64_t v21 = &v20[8 * v16];
      int64_t v22 = &v20[8 * v19];
      void *v21 = v13;
      uint64_t v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_20:
        *((void *)&v85 + 1) = v21;
        *(void *)&long long v86 = v14;
        *((void *)&v86 + 1) = v22;
        if (!v7) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v7);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = (void *)(8 * v16);
      int64_t v22 = 0;
      *(void *)(8 * v16) = v13;
      uint64_t v14 = 8 * v16 + 8;
      if (v7 == v8) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v15 - 8) < 0x58) {
      goto LABEL_111;
    }
    if ((unint64_t)(v7 - v20) < 0x20) {
      goto LABEL_111;
    }
    unint64_t v47 = ((unint64_t)(v15 - 8) >> 3) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v49 = &v8[-v48];
    uint64_t v21 = (void *)((char *)v21 - v48);
    uint64_t v50 = &v20[8 * v16 - 16];
    unint64_t v51 = v8 - 16;
    uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      _OWORD *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    int v8 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_111:
      do
      {
        uint64_t v54 = *((void *)v8 - 1);
        v8 -= 8;
        *--uint64_t v21 = v54;
      }
      while (v8 != v7);
    }
    char v7 = (char *)*((void *)&v85 + 1);
    *((void *)&v85 + 1) = v21;
    *(void *)&long long v86 = v14;
    *((void *)&v86 + 1) = v22;
    if (!v7) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  int v11 = v10 + 10;
LABEL_23:
  v6((uint64_t)v80, v11);
  uint64_t v23 = (const char *)*MEMORY[0x1E4FB9CE0];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9CE0]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D10]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    __int16 v25 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    if (v25)
    {
      xpc_object_t v26 = xpc_dictionary_get_value(*a2, v23);
      *(void *)long long buf = v26;
      if (v26) {
        xpc_retain(v26);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      int v27 = xpc::dyn_cast_or_default();
      int AccessoryType = antenna::QMICommandDriver::getAccessoryType(a1, v27);
      xpc_release(*(xpc_object_t *)buf);
      unint64_t v29 = *((void *)a1 + 5);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = AccessoryType;
        LOWORD(v94) = 1024;
        *(_DWORD *)((char *)&v94 + 2) = AccessoryType;
        _os_log_debug_impl(&dword_1B8B00000, v29, OS_LOG_TYPE_DEBUG, "#D accessoryType for RF: 0x%08x(%d)\n", buf, 0xEu);
      }
      v76[0] = MEMORY[0x1E4F143A8];
      v76[1] = 0x40000000;
      int64_t v30 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_67;
      uint64_t v77 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_67;
      int64_t v78 = &__block_descriptor_tmp_69_0;
      int v79 = AccessoryType;
      unsigned int v31 = (char *)*((void *)&v85 + 1);
      unint64_t v32 = (char *)v86;
      uint64_t v33 = (const void **)*((void *)&v85 + 1);
      if (*((void *)&v85 + 1) != (void)v86)
      {
        uint64_t v33 = (const void **)*((void *)&v85 + 1);
        while (*((unsigned char *)*v33 + 8) != 16)
        {
          if (++v33 == (const void **)v86) {
            goto LABEL_41;
          }
        }
      }
      if (v33 != (const void **)v86)
      {
        if (!v34) {
          __cxa_bad_cast();
        }
        long long v35 = v34 + 12;
        goto LABEL_73;
      }
LABEL_41:
      uint64_t v36 = operator new(0x10uLL);
      long long v37 = v36;
      v36[8] = 16;
      *(void *)uint64_t v36 = &unk_1F1265B68;
      *((_DWORD *)v36 + 3) = 0;
      long long v35 = v36 + 12;
      if ((unint64_t)v32 < *((void *)&v86 + 1))
      {
        *(void *)unint64_t v32 = v36;
        uint64_t v38 = (uint64_t)(v32 + 8);
LABEL_72:
        *(void *)&long long v86 = v38;
        int64_t v30 = v77;
LABEL_73:
        v30((uint64_t)v76, v35);
        goto LABEL_74;
      }
      int64_t v39 = v32 - v31;
      uint64_t v40 = (v32 - v31) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = *((void *)&v86 + 1) - (void)v31;
      if ((uint64_t)(*((void *)&v86 + 1) - (void)v31) >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        if (v43 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v44 = operator new(8 * v43);
        unsigned int v45 = &v44[8 * v40];
        uint64_t v46 = &v44[8 * v43];
        void *v45 = v37;
        uint64_t v38 = (uint64_t)(v45 + 1);
        if (v31 == v32) {
          goto LABEL_70;
        }
      }
      else
      {
        long long v44 = 0;
        unsigned int v45 = (void *)(8 * v40);
        uint64_t v46 = 0;
        *(void *)(8 * v40) = v37;
        uint64_t v38 = 8 * v40 + 8;
        if (v31 == v32)
        {
LABEL_70:
          *((void *)&v85 + 1) = v45;
          *(void *)&long long v86 = v38;
          *((void *)&v86 + 1) = v46;
          if (v31) {
            operator delete(v31);
          }
          goto LABEL_72;
        }
      }
      if ((unint64_t)(v39 - 8) < 0x58) {
        goto LABEL_112;
      }
      if ((unint64_t)(v31 - v44) < 0x20) {
        goto LABEL_112;
      }
      unint64_t v55 = ((unint64_t)(v39 - 8) >> 3) + 1;
      uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      long long v57 = &v32[-v56];
      unsigned int v45 = (void *)((char *)v45 - v56);
      uint64_t v58 = &v44[8 * v40 - 16];
      unint64_t v59 = v32 - 16;
      uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        _OWORD *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 4;
      }
      while (v60);
      unint64_t v32 = v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_112:
        do
        {
          uint64_t v62 = *((void *)v32 - 1);
          v32 -= 8;
          *--unsigned int v45 = v62;
        }
        while (v32 != v31);
      }
      unsigned int v31 = (char *)*((void *)&v85 + 1);
      goto LABEL_70;
    }
  }
LABEL_74:
  qmi::MutableMessageBase::MutableMessageBase();
  unint64_t v63 = *(void **)a3;
  if (*(void *)a3) {
    unint64_t v63 = _Block_copy(v63);
  }
  uint64_t v64 = *(NSObject **)(a3 + 8);
  xpc_object_t aBlock = v63;
  xpc_object_t object = v64;
  if (v64) {
    dispatch_retain(v64);
  }
  uint64_t v65 = (std::__shared_weak_count *)*((void *)a1 + 10);
  if (!v65 || (v66 = *((void *)a1 + 9), (int v67 = std::__shared_weak_count::lock(v65)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v68 = v67;
  p_shared_weak_owners = &v67->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v67->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v68);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v94 = 1174405120;
  uint64_t v95 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  long long v96 = &__block_descriptor_tmp_162;
  uint64_t v97 = a1;
  uint64_t v98 = v66;
  unint64_t v99 = v68;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    uint64_t v70 = object;
    uint64_t v100 = _Block_copy(aBlock);
    dispatch_object_t v101 = object;
    if (!object) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  uint64_t v70 = object;
  uint64_t v100 = 0;
  dispatch_object_t v101 = object;
  if (object) {
LABEL_84:
  }
    dispatch_retain(v70);
LABEL_85:
  uint64_t v87 = (void *)((char *)a1 + 184);
  uint64_t v88 = QMIServiceMsg::create();
  int v89 = 25000;
  uint64_t v90 = 0;
  size_t v91 = 0;
  v92[0] = MEMORY[0x1E4F143A8];
  v92[1] = 0x40000000;
  v92[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v92[3] = &unk_1E6195510;
  v92[4] = buf;
  uint64_t v71 = _Block_copy(v92);
  size_t v91 = v71;
  if (v88)
  {
    qmi::Client::send();
    uint64_t v71 = v91;
  }
  if (v71) {
    _Block_release(v71);
  }
  if (v101) {
    dispatch_release(v101);
  }
  if (v100) {
    _Block_release(v100);
  }
  if (v99) {
    std::__shared_weak_count::__release_weak(v99);
  }
  std::__shared_weak_count::__release_weak(v68);
  if (v70) {
    dispatch_release(v70);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v75);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v85);
}

void sub_1B8BB0EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  dispatch_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = (const char *)*MEMORY[0x1E4FB9D10];
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), (const char *)*MEMORY[0x1E4FB9D10]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  char v7 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    xpc_object_t v8 = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), v5);
    xpc_object_t v11 = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t v11 = xpc_null_create();
    }
    int v9 = xpc::dyn_cast_or_default();
    unsigned int v10 = "detached";
    if (v9) {
      unsigned int v10 = "attached";
    }
    LODWORD(object[0]) = 136315138;
    *(xpc_object_t *)((char *)object + 4) = (xpc_object_t)v10;
    _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D accessory for RF: %s", (uint8_t *)object, 0xCu);
    xpc_release(v11);
  }
}

void sub_1B8BB111C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_67(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void antenna::QMICommandDriver::e75AccessoryStatusARTD_sync(antenna::QMICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v85 = v5;
  long long v86 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v85);
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 0x40000000;
  uint64_t v6 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  uint64_t v81 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  unint64_t v82 = &__block_descriptor_tmp_71_1;
  uint64_t v83 = a1;
  int64_t v84 = a2;
  char v7 = (char *)*((void *)&v85 + 1);
  xpc_object_t v8 = (char *)v86;
  int v9 = (const void **)*((void *)&v85 + 1);
  if (*((void *)&v85 + 1) != (void)v86)
  {
    int v9 = (const void **)*((void *)&v85 + 1);
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v86) {
        goto LABEL_9;
      }
    }
  }
  if (v9 == (const void **)v86)
  {
LABEL_9:
    uint64_t v12 = operator new(0x10uLL);
    uint64_t v13 = v12;
    v12[8] = 1;
    *(void *)uint64_t v12 = &unk_1F1265BE8;
    *((_WORD *)v12 + 5) = 0;
    xpc_object_t v11 = v12 + 10;
    if ((unint64_t)v8 < *((void *)&v86 + 1))
    {
      *(void *)xpc_object_t v8 = v12;
      uint64_t v14 = (uint64_t)(v8 + 8);
LABEL_22:
      *(void *)&long long v86 = v14;
      uint64_t v6 = v81;
      goto LABEL_23;
    }
    int64_t v15 = v8 - v7;
    uint64_t v16 = (v8 - v7) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = *((void *)&v86 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v86 + 1) - (void)v7) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v20 = operator new(8 * v19);
      uint64_t v21 = &v20[8 * v16];
      int64_t v22 = &v20[8 * v19];
      void *v21 = v13;
      uint64_t v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_20:
        *((void *)&v85 + 1) = v21;
        *(void *)&long long v86 = v14;
        *((void *)&v86 + 1) = v22;
        if (!v7) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v7);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = (void *)(8 * v16);
      int64_t v22 = 0;
      *(void *)(8 * v16) = v13;
      uint64_t v14 = 8 * v16 + 8;
      if (v7 == v8) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v15 - 8) < 0x58) {
      goto LABEL_111;
    }
    if ((unint64_t)(v7 - v20) < 0x20) {
      goto LABEL_111;
    }
    unint64_t v47 = ((unint64_t)(v15 - 8) >> 3) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v49 = &v8[-v48];
    uint64_t v21 = (void *)((char *)v21 - v48);
    uint64_t v50 = &v20[8 * v16 - 16];
    unint64_t v51 = v8 - 16;
    uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      _OWORD *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    xpc_object_t v8 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_111:
      do
      {
        uint64_t v54 = *((void *)v8 - 1);
        v8 -= 8;
        *--uint64_t v21 = v54;
      }
      while (v8 != v7);
    }
    char v7 = (char *)*((void *)&v85 + 1);
    *((void *)&v85 + 1) = v21;
    *(void *)&long long v86 = v14;
    *((void *)&v86 + 1) = v22;
    if (!v7) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  xpc_object_t v11 = v10 + 10;
LABEL_23:
  v6((uint64_t)v80, v11);
  uint64_t v23 = (const char *)*MEMORY[0x1E4FB9CE0];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9CE0]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D10]);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    __int16 v25 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    if (v25)
    {
      xpc_object_t v26 = xpc_dictionary_get_value(*a2, v23);
      *(void *)long long buf = v26;
      if (v26) {
        xpc_retain(v26);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      int v27 = xpc::dyn_cast_or_default();
      int AccessoryType = antenna::QMICommandDriver::getAccessoryType(a1, v27);
      xpc_release(*(xpc_object_t *)buf);
      unint64_t v29 = *((void *)a1 + 5);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = AccessoryType;
        LOWORD(v94) = 1024;
        *(_DWORD *)((char *)&v94 + 2) = AccessoryType;
        _os_log_debug_impl(&dword_1B8B00000, v29, OS_LOG_TYPE_DEBUG, "#D accessoryType for ARTD: 0x%08x(%d)\n", buf, 0xEu);
      }
      v76[0] = MEMORY[0x1E4F143A8];
      v76[1] = 0x40000000;
      int64_t v30 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_72;
      uint64_t v77 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_72;
      int64_t v78 = &__block_descriptor_tmp_74_1;
      int v79 = AccessoryType;
      unsigned int v31 = (char *)*((void *)&v85 + 1);
      unint64_t v32 = (char *)v86;
      uint64_t v33 = (const void **)*((void *)&v85 + 1);
      if (*((void *)&v85 + 1) != (void)v86)
      {
        uint64_t v33 = (const void **)*((void *)&v85 + 1);
        while (*((unsigned char *)*v33 + 8) != 16)
        {
          if (++v33 == (const void **)v86) {
            goto LABEL_41;
          }
        }
      }
      if (v33 != (const void **)v86)
      {
        if (!v34) {
          __cxa_bad_cast();
        }
        long long v35 = v34 + 12;
        goto LABEL_73;
      }
LABEL_41:
      uint64_t v36 = operator new(0x10uLL);
      long long v37 = v36;
      v36[8] = 16;
      *(void *)uint64_t v36 = &unk_1F1265C38;
      *((_DWORD *)v36 + 3) = 0;
      long long v35 = v36 + 12;
      if ((unint64_t)v32 < *((void *)&v86 + 1))
      {
        *(void *)unint64_t v32 = v36;
        uint64_t v38 = (uint64_t)(v32 + 8);
LABEL_72:
        *(void *)&long long v86 = v38;
        int64_t v30 = v77;
LABEL_73:
        v30((uint64_t)v76, v35);
        goto LABEL_74;
      }
      int64_t v39 = v32 - v31;
      uint64_t v40 = (v32 - v31) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = *((void *)&v86 + 1) - (void)v31;
      if ((uint64_t)(*((void *)&v86 + 1) - (void)v31) >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      if (v43)
      {
        if (v43 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v44 = operator new(8 * v43);
        unsigned int v45 = &v44[8 * v40];
        uint64_t v46 = &v44[8 * v43];
        void *v45 = v37;
        uint64_t v38 = (uint64_t)(v45 + 1);
        if (v31 == v32) {
          goto LABEL_70;
        }
      }
      else
      {
        long long v44 = 0;
        unsigned int v45 = (void *)(8 * v40);
        uint64_t v46 = 0;
        *(void *)(8 * v40) = v37;
        uint64_t v38 = 8 * v40 + 8;
        if (v31 == v32)
        {
LABEL_70:
          *((void *)&v85 + 1) = v45;
          *(void *)&long long v86 = v38;
          *((void *)&v86 + 1) = v46;
          if (v31) {
            operator delete(v31);
          }
          goto LABEL_72;
        }
      }
      if ((unint64_t)(v39 - 8) < 0x58) {
        goto LABEL_112;
      }
      if ((unint64_t)(v31 - v44) < 0x20) {
        goto LABEL_112;
      }
      unint64_t v55 = ((unint64_t)(v39 - 8) >> 3) + 1;
      uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      long long v57 = &v32[-v56];
      unsigned int v45 = (void *)((char *)v45 - v56);
      uint64_t v58 = &v44[8 * v40 - 16];
      unint64_t v59 = v32 - 16;
      uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        _OWORD *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 4;
      }
      while (v60);
      unint64_t v32 = v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_112:
        do
        {
          uint64_t v62 = *((void *)v32 - 1);
          v32 -= 8;
          *--unsigned int v45 = v62;
        }
        while (v32 != v31);
      }
      unsigned int v31 = (char *)*((void *)&v85 + 1);
      goto LABEL_70;
    }
  }
LABEL_74:
  qmi::MutableMessageBase::MutableMessageBase();
  unint64_t v63 = *(void **)a3;
  if (*(void *)a3) {
    unint64_t v63 = _Block_copy(v63);
  }
  uint64_t v64 = *(NSObject **)(a3 + 8);
  xpc_object_t aBlock = v63;
  xpc_object_t object = v64;
  if (v64) {
    dispatch_retain(v64);
  }
  uint64_t v65 = (std::__shared_weak_count *)*((void *)a1 + 10);
  if (!v65 || (v66 = *((void *)a1 + 9), (int v67 = std::__shared_weak_count::lock(v65)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v68 = v67;
  p_shared_weak_owners = &v67->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v67->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v68);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v94 = 1174405120;
  uint64_t v95 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  long long v96 = &__block_descriptor_tmp_166_0;
  uint64_t v97 = a1;
  uint64_t v98 = v66;
  unint64_t v99 = v68;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    uint64_t v70 = object;
    uint64_t v100 = _Block_copy(aBlock);
    dispatch_object_t v101 = object;
    if (!object) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  uint64_t v70 = object;
  uint64_t v100 = 0;
  dispatch_object_t v101 = object;
  if (object) {
LABEL_84:
  }
    dispatch_retain(v70);
LABEL_85:
  uint64_t v87 = (void *)((char *)a1 + 184);
  uint64_t v88 = QMIServiceMsg::create();
  int v89 = 25000;
  uint64_t v90 = 0;
  size_t v91 = 0;
  v92[0] = MEMORY[0x1E4F143A8];
  v92[1] = 0x40000000;
  v92[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v92[3] = &unk_1E6195510;
  v92[4] = buf;
  uint64_t v71 = _Block_copy(v92);
  size_t v91 = v71;
  if (v88)
  {
    qmi::Client::send();
    uint64_t v71 = v91;
  }
  if (v71) {
    _Block_release(v71);
  }
  if (v101) {
    dispatch_release(v101);
  }
  if (v100) {
    _Block_release(v100);
  }
  if (v99) {
    std::__shared_weak_count::__release_weak(v99);
  }
  std::__shared_weak_count::__release_weak(v68);
  if (v70) {
    dispatch_release(v70);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v75);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v85);
}

void sub_1B8BB1A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  dispatch_object_t object[3] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = (const char *)*MEMORY[0x1E4FB9D10];
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), (const char *)*MEMORY[0x1E4FB9D10]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  char v7 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    xpc_object_t v8 = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), v5);
    xpc_object_t v11 = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t v11 = xpc_null_create();
    }
    int v9 = xpc::dyn_cast_or_default();
    unsigned int v10 = "detached";
    if (v9) {
      unsigned int v10 = "attached";
    }
    LODWORD(object[0]) = 136315138;
    *(xpc_object_t *)((char *)object + 4) = (xpc_object_t)v10;
    _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D accessory for ARTD: %s", (uint8_t *)object, 0xCu);
    xpc_release(v11);
  }
}

void sub_1B8BB1C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_72(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void antenna::QMICommandDriver::antennaSwitch_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v77 = v5;
  long long v78 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v77);
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D28]))
  {
    v73[0] = MEMORY[0x1E4F143A8];
    v73[1] = 0x40000000;
    uint64_t v6 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    unint64_t v74 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    uint64_t v75 = &__block_descriptor_tmp_76_0;
    unint64_t v76 = a2;
    char v7 = (char *)*((void *)&v77 + 1);
    xpc_object_t v8 = (char *)v78;
    int v9 = (const void **)*((void *)&v77 + 1);
    if (*((void *)&v77 + 1) != (void)v78)
    {
      int v9 = (const void **)*((void *)&v77 + 1);
      while (*((unsigned char *)*v9 + 8) != 16)
      {
        if (++v9 == (const void **)v78) {
          goto LABEL_10;
        }
      }
    }
    if (v9 != (const void **)v78)
    {
      if (!v10) {
        goto LABEL_96;
      }
      xpc_object_t v11 = v10 + 10;
      goto LABEL_24;
    }
LABEL_10:
    uint64_t v12 = operator new(0x10uLL);
    uint64_t v13 = v12;
    v12[8] = 16;
    *(void *)uint64_t v12 = &unk_1F1265CB8;
    *((_WORD *)v12 + 5) = 0;
    xpc_object_t v11 = v12 + 10;
    if ((unint64_t)v8 < *((void *)&v78 + 1))
    {
      *(void *)xpc_object_t v8 = v12;
      uint64_t v14 = (uint64_t)(v8 + 8);
LABEL_23:
      *(void *)&long long v78 = v14;
      uint64_t v6 = v74;
LABEL_24:
      v6((uint64_t)v73, v11);
      goto LABEL_25;
    }
    int64_t v15 = v8 - v7;
    uint64_t v16 = (v8 - v7) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      goto LABEL_97;
    }
    uint64_t v18 = *((void *)&v78 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v78 + 1) - (void)v7) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        goto LABEL_98;
      }
      uint64_t v20 = operator new(8 * v19);
      uint64_t v21 = &v20[8 * v16];
      int64_t v22 = &v20[8 * v19];
      void *v21 = v13;
      uint64_t v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_21:
        *((void *)&v77 + 1) = v21;
        *(void *)&long long v78 = v14;
        *((void *)&v78 + 1) = v22;
        if (!v7) {
          goto LABEL_23;
        }
LABEL_22:
        operator delete(v7);
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = (void *)(8 * v16);
      int64_t v22 = 0;
      *(void *)(8 * v16) = v13;
      uint64_t v14 = 8 * v16 + 8;
      if (v7 == v8) {
        goto LABEL_21;
      }
    }
    if ((unint64_t)(v15 - 8) < 0x58) {
      goto LABEL_101;
    }
    if ((unint64_t)(v7 - v20) < 0x20) {
      goto LABEL_101;
    }
    unint64_t v49 = ((unint64_t)(v15 - 8) >> 3) + 1;
    uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v51 = &v8[-v50];
    uint64_t v21 = (void *)((char *)v21 - v50);
    uint64_t v52 = &v20[8 * v16 - 16];
    long long v53 = v8 - 16;
    uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *uint64_t v52 = v55;
      v52 -= 2;
      v53 -= 32;
      v54 -= 4;
    }
    while (v54);
    xpc_object_t v8 = v51;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_101:
      do
      {
        uint64_t v56 = *((void *)v8 - 1);
        v8 -= 8;
        *--uint64_t v21 = v56;
      }
      while (v8 != v7);
    }
    char v7 = (char *)*((void *)&v77 + 1);
    *((void *)&v77 + 1) = v21;
    *(void *)&long long v78 = v14;
    *((void *)&v78 + 1) = v22;
    if (!v7) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_25:
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D68])) {
    goto LABEL_49;
  }
  v69[0] = MEMORY[0x1E4F143A8];
  v69[1] = 0x40000000;
  uint64_t v23 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  uint64_t v70 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  uint64_t v71 = &__block_descriptor_tmp_78;
  int64_t v72 = a2;
  unsigned int v24 = (char *)*((void *)&v77 + 1);
  __int16 v25 = (char *)v78;
  xpc_object_t v26 = (const void **)*((void *)&v77 + 1);
  if (*((void *)&v77 + 1) != (void)v78)
  {
    xpc_object_t v26 = (const void **)*((void *)&v77 + 1);
    while (*((unsigned char *)*v26 + 8) != 17)
    {
      if (++v26 == (const void **)v78) {
        goto LABEL_34;
      }
    }
  }
  if (v26 == (const void **)v78)
  {
LABEL_34:
    unint64_t v29 = operator new(0x10uLL);
    int64_t v30 = v29;
    v29[8] = 17;
    *(void *)unint64_t v29 = &unk_1F1265D08;
    *((_WORD *)v29 + 5) = 0;
    uint64_t v28 = v29 + 10;
    if ((unint64_t)v25 < *((void *)&v78 + 1))
    {
      *(void *)__int16 v25 = v29;
      uint64_t v31 = (uint64_t)(v25 + 8);
LABEL_47:
      *(void *)&long long v78 = v31;
      uint64_t v23 = v70;
      goto LABEL_48;
    }
    int64_t v32 = v25 - v24;
    uint64_t v33 = (v25 - v24) >> 3;
    unint64_t v34 = v33 + 1;
    if (!((unint64_t)(v33 + 1) >> 61))
    {
      uint64_t v35 = *((void *)&v78 + 1) - (void)v24;
      if ((uint64_t)(*((void *)&v78 + 1) - (void)v24) >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (!v36)
      {
        long long v37 = 0;
        uint64_t v38 = (void *)(8 * v33);
        int64_t v39 = 0;
        *(void *)(8 * v33) = v30;
        uint64_t v31 = 8 * v33 + 8;
        if (v24 == v25)
        {
LABEL_45:
          *((void *)&v77 + 1) = v38;
          *(void *)&long long v78 = v31;
          *((void *)&v78 + 1) = v39;
          if (!v24) {
            goto LABEL_47;
          }
LABEL_46:
          operator delete(v24);
          goto LABEL_47;
        }
LABEL_87:
        if ((unint64_t)(v32 - 8) < 0x58) {
          goto LABEL_102;
        }
        if ((unint64_t)(v24 - v37) < 0x20) {
          goto LABEL_102;
        }
        unint64_t v57 = ((unint64_t)(v32 - 8) >> 3) + 1;
        uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v59 = &v25[-v58];
        uint64_t v38 = (void *)((char *)v38 - v58);
        uint64_t v60 = &v37[8 * v33 - 16];
        long long v61 = v25 - 16;
        uint64_t v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *uint64_t v60 = v63;
          v60 -= 2;
          v61 -= 32;
          v62 -= 4;
        }
        while (v62);
        __int16 v25 = v59;
        if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_102:
          do
          {
            uint64_t v64 = *((void *)v25 - 1);
            v25 -= 8;
            *--uint64_t v38 = v64;
          }
          while (v25 != v24);
        }
        unsigned int v24 = (char *)*((void *)&v77 + 1);
        *((void *)&v77 + 1) = v38;
        *(void *)&long long v78 = v31;
        *((void *)&v78 + 1) = v39;
        if (!v24) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }
      if (!(v36 >> 61))
      {
        long long v37 = operator new(8 * v36);
        uint64_t v38 = &v37[8 * v33];
        int64_t v39 = &v37[8 * v36];
        void *v38 = v30;
        uint64_t v31 = (uint64_t)(v38 + 1);
        if (v24 == v25) {
          goto LABEL_45;
        }
        goto LABEL_87;
      }
LABEL_98:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_97:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v27) {
LABEL_96:
  }
    __cxa_bad_cast();
  uint64_t v28 = v27 + 10;
LABEL_48:
  v23((uint64_t)v69, v28);
LABEL_49:
  qmi::MutableMessageBase::MutableMessageBase();
  uint64_t v40 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v40 = _Block_copy(v40);
  }
  unint64_t v41 = *(NSObject **)(a3 + 8);
  xpc_object_t aBlock = v40;
  xpc_object_t object = v41;
  if (v41) {
    dispatch_retain(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v42 || (uint64_t v43 = *(void *)(a1 + 72), (v44 = std::__shared_weak_count::lock(v42)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v45 = v44;
  p_shared_weak_owners = &v44->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v45);
  }
  v84[0] = MEMORY[0x1E4F143A8];
  v84[1] = 1174405120;
  v84[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v84[3] = &__block_descriptor_tmp_170_0;
  v84[4] = a1;
  v84[5] = v43;
  long long v85 = v45;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    unint64_t v47 = object;
    long long v86 = _Block_copy(aBlock);
    dispatch_object_t v87 = object;
    if (!object) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  unint64_t v47 = object;
  long long v86 = 0;
  dispatch_object_t v87 = object;
  if (object) {
LABEL_59:
  }
    dispatch_retain(v47);
LABEL_60:
  uint64_t v79 = a1 + 184;
  uint64_t v80 = QMIServiceMsg::create();
  int v81 = 25000;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  v88[0] = MEMORY[0x1E4F143A8];
  v88[1] = 0x40000000;
  v88[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v88[3] = &unk_1E6195510;
  v88[4] = v84;
  uint64_t v48 = _Block_copy(v88);
  uint64_t v83 = v48;
  if (v80)
  {
    qmi::Client::send();
    uint64_t v48 = v83;
  }
  if (v48) {
    _Block_release(v48);
  }
  if (v87) {
    dispatch_release(v87);
  }
  if (v86) {
    _Block_release(v86);
  }
  if (v85) {
    std::__shared_weak_count::__release_weak(v85);
  }
  std::__shared_weak_count::__release_weak(v45);
  if (v47) {
    dispatch_release(v47);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v68);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v77);
}

void sub_1B8BB2460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a31);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v32 + 56);
  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 152);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  std::__shared_weak_count::__release_weak(v31);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B8BB24E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9D28]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB256C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9D68]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB25FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::wiredPortNotification_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9C90]))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v60 = v6;
    long long v61 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v60);
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 0x40000000;
    char v7 = ___ZN7antenna16QMICommandDriver26wiredPortNotification_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    unint64_t v57 = ___ZN7antenna16QMICommandDriver26wiredPortNotification_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    uint64_t v58 = &__block_descriptor_tmp_80;
    unint64_t v59 = a2;
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    int v9 = (char *)v61;
    unsigned int v10 = (const void **)*((void *)&v60 + 1);
    if (*((void *)&v60 + 1) != (void)v61)
    {
      unsigned int v10 = (const void **)*((void *)&v60 + 1);
      while (*((unsigned char *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v61) {
          goto LABEL_13;
        }
      }
    }
    if (v10 != (const void **)v61)
    {
      if (!v11) {
        __cxa_bad_cast();
      }
      uint64_t v12 = v11 + 9;
LABEL_27:
      v7((uint64_t)v56, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      int v27 = *(void **)a3;
      if (*(void *)a3) {
        int v27 = _Block_copy(v27);
      }
      uint64_t v28 = *(NSObject **)(a3 + 8);
      xpc_object_t aBlock = v27;
      xpc_object_t object = v28;
      if (v28) {
        dispatch_retain(v28);
      }
      unint64_t v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (uint64_t v31 = std::__shared_weak_count::lock(v29)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v32 = v31;
      p_shared_weak_owners = &v31->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = (void *)MEMORY[0x1E4F143A8];
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      uint64_t v68 = &__block_descriptor_tmp_174_2;
      long long v69 = a1;
      xpc_object_t v70 = v30;
      uint64_t v71 = v32;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      if (aBlock)
      {
        unint64_t v34 = object;
        int64_t v72 = _Block_copy(aBlock);
        dispatch_object_t v73 = object;
        if (!object)
        {
LABEL_38:
          uint64_t v62 = a1 + 23;
          uint64_t v63 = QMIServiceMsg::create();
          int v64 = 25000;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 0x40000000;
          uint64_t v75 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          unint64_t v76 = &unk_1E6195510;
          long long v77 = block;
          uint64_t v35 = _Block_copy(&buf);
          uint64_t v66 = v35;
          if (v63)
          {
            qmi::Client::send();
            uint64_t v35 = v66;
          }
          if (v35) {
            _Block_release(v35);
          }
          if (v73) {
            dispatch_release(v73);
          }
          if (v72) {
            _Block_release(v72);
          }
          if (v71) {
            std::__shared_weak_count::__release_weak(v71);
          }
          std::__shared_weak_count::__release_weak(v32);
          if (v34) {
            dispatch_release(v34);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v55);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
          return;
        }
      }
      else
      {
        unint64_t v34 = object;
        int64_t v72 = 0;
        dispatch_object_t v73 = object;
        if (!object) {
          goto LABEL_38;
        }
      }
      dispatch_retain(v34);
      goto LABEL_38;
    }
LABEL_13:
    uint64_t v16 = operator new(0x10uLL);
    unint64_t v17 = v16;
    v16[4] = 1;
    *(void *)uint64_t v16 = &unk_1F1265D88;
    if ((unint64_t)v9 < *((void *)&v61 + 1))
    {
      *(void *)int v9 = v16;
      uint64_t v18 = (uint64_t)(v9 + 8);
LABEL_26:
      uint64_t v12 = (char *)v17 + 9;
      *(void *)&long long v61 = v18;
      char v7 = v57;
      goto LABEL_27;
    }
    int64_t v19 = v9 - v8;
    uint64_t v20 = (v9 - v8) >> 3;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = *((void *)&v61 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v61 + 1) - (void)v8) >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v24 = operator new(8 * v23);
      __int16 v25 = &v24[8 * v20];
      xpc_object_t v26 = &v24[8 * v23];
      *__int16 v25 = v17;
      uint64_t v18 = (uint64_t)(v25 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((void *)&v60 + 1) = v25;
        *(void *)&long long v61 = v18;
        *((void *)&v61 + 1) = v26;
        if (!v8) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v24 = 0;
      __int16 v25 = (void *)(8 * v20);
      xpc_object_t v26 = 0;
      *(void *)(8 * v20) = v17;
      uint64_t v18 = 8 * v20 + 8;
      if (v8 == v9) {
        goto LABEL_24;
      }
    }
    if ((unint64_t)(v19 - 8) < 0x58) {
      goto LABEL_94;
    }
    if ((unint64_t)(v8 - v24) < 0x20) {
      goto LABEL_94;
    }
    unint64_t v38 = ((unint64_t)(v19 - 8) >> 3) + 1;
    uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v40 = &v9[-v39];
    __int16 v25 = (void *)((char *)v25 - v39);
    unint64_t v41 = &v24[8 * v20 - 16];
    uint64_t v42 = v9 - 16;
    uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      _OWORD *v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    int v9 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        uint64_t v45 = *((void *)v9 - 1);
        v9 -= 8;
        *--__int16 v25 = v45;
      }
      while (v9 != v8);
    }
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    *((void *)&v60 + 1) = v25;
    *(void *)&long long v61 = v18;
    *((void *)&v61 + 1) = v26;
    if (!v8) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = (char *)MEMORY[0x1BA9C88A0](*a2);
    memset(block, 170, sizeof(block));
    size_t v47 = strlen(v46);
    if (v47 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v48 = (void *)v47;
    if (v47 >= 0x17)
    {
      uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17) {
        uint64_t v50 = v47 | 7;
      }
      uint64_t v51 = v50 + 1;
      unint64_t v49 = (void **)operator new(v50 + 1);
      block[1] = v48;
      block[2] = (void *)(v51 | 0x8000000000000000);
      block[0] = v49;
    }
    else
    {
      HIBYTE(block[2]) = v47;
      unint64_t v49 = block;
      if (!v47) {
        goto LABEL_83;
      }
    }
    memcpy(v49, v46, (size_t)v48);
LABEL_83:
    *((unsigned char *)v48 + (void)v49) = 0;
    free(v46);
    uint64_t v52 = block;
    if (SHIBYTE(block[2]) < 0) {
      uint64_t v52 = (void **)block[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v52;
    _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0) {
      operator delete(block[0]);
    }
  }
  xpc_object_t v14 = xpc_null_create();
  if (*(void *)a3) {
    int64_t v15 = _Block_copy(*(const void **)a3);
  }
  else {
    int64_t v15 = 0;
  }
  unint64_t v36 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E4F143A8];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  uint64_t v68 = &__block_descriptor_tmp_141;
  if (!v15)
  {
    LOBYTE(v71) = 0;
    long long v69 = 0;
    xpc_object_t v70 = v14;
    if (v14) {
      goto LABEL_58;
    }
LABEL_60:
    xpc_object_t v70 = xpc_null_create();
    goto LABEL_61;
  }
  long long v37 = _Block_copy(v15);
  LOBYTE(v71) = 0;
  long long v69 = v37;
  xpc_object_t v70 = v14;
  if (!v14) {
    goto LABEL_60;
  }
LABEL_58:
  xpc_retain(v14);
LABEL_61:
  dispatch_async(v36, block);
  xpc_release(v70);
  xpc_object_t v70 = 0;
  if (v69) {
    _Block_release(v69);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v14);
}

void sub_1B8BB2D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8BB2DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver26wiredPortNotification_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, unsigned char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9C90]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB2E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::speakerState_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9CB8]))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v60 = v6;
    long long v61 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v60);
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 0x40000000;
    char v7 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver17speakerState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    unint64_t v57 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver17speakerState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    uint64_t v58 = &__block_descriptor_tmp_82;
    unint64_t v59 = a2;
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    int v9 = (char *)v61;
    unsigned int v10 = (const void **)*((void *)&v60 + 1);
    if (*((void *)&v60 + 1) != (void)v61)
    {
      unsigned int v10 = (const void **)*((void *)&v60 + 1);
      while (*((unsigned char *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v61) {
          goto LABEL_13;
        }
      }
    }
    if (v10 != (const void **)v61)
    {
      if (!v11) {
        __cxa_bad_cast();
      }
      uint64_t v12 = v11 + 10;
LABEL_27:
      v7((uint64_t)v56, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      int v27 = *(void **)a3;
      if (*(void *)a3) {
        int v27 = _Block_copy(v27);
      }
      uint64_t v28 = *(NSObject **)(a3 + 8);
      xpc_object_t aBlock = v27;
      xpc_object_t object = v28;
      if (v28) {
        dispatch_retain(v28);
      }
      unint64_t v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (uint64_t v31 = std::__shared_weak_count::lock(v29)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v32 = v31;
      p_shared_weak_owners = &v31->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = (void *)MEMORY[0x1E4F143A8];
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      uint64_t v68 = &__block_descriptor_tmp_178;
      long long v69 = a1;
      xpc_object_t v70 = v30;
      uint64_t v71 = v32;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      if (aBlock)
      {
        unint64_t v34 = object;
        int64_t v72 = _Block_copy(aBlock);
        dispatch_object_t v73 = object;
        if (!object)
        {
LABEL_38:
          uint64_t v62 = a1 + 23;
          uint64_t v63 = QMIServiceMsg::create();
          int v64 = 25000;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 0x40000000;
          uint64_t v75 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          unint64_t v76 = &unk_1E6195510;
          long long v77 = block;
          uint64_t v35 = _Block_copy(&buf);
          uint64_t v66 = v35;
          if (v63)
          {
            qmi::Client::send();
            uint64_t v35 = v66;
          }
          if (v35) {
            _Block_release(v35);
          }
          if (v73) {
            dispatch_release(v73);
          }
          if (v72) {
            _Block_release(v72);
          }
          if (v71) {
            std::__shared_weak_count::__release_weak(v71);
          }
          std::__shared_weak_count::__release_weak(v32);
          if (v34) {
            dispatch_release(v34);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v55);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
          return;
        }
      }
      else
      {
        unint64_t v34 = object;
        int64_t v72 = 0;
        dispatch_object_t v73 = object;
        if (!object) {
          goto LABEL_38;
        }
      }
      dispatch_retain(v34);
      goto LABEL_38;
    }
LABEL_13:
    uint64_t v16 = operator new(0x10uLL);
    unint64_t v17 = v16;
    v16[8] = 1;
    *(void *)uint64_t v16 = &unk_1F1265E08;
    *((_WORD *)v16 + 5) = 0;
    uint64_t v12 = v16 + 10;
    if ((unint64_t)v9 < *((void *)&v61 + 1))
    {
      *(void *)int v9 = v16;
      uint64_t v18 = (uint64_t)(v9 + 8);
LABEL_26:
      *(void *)&long long v61 = v18;
      char v7 = v57;
      goto LABEL_27;
    }
    int64_t v19 = v9 - v8;
    uint64_t v20 = (v9 - v8) >> 3;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = *((void *)&v61 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v61 + 1) - (void)v8) >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v24 = operator new(8 * v23);
      __int16 v25 = &v24[8 * v20];
      xpc_object_t v26 = &v24[8 * v23];
      *__int16 v25 = v17;
      uint64_t v18 = (uint64_t)(v25 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((void *)&v60 + 1) = v25;
        *(void *)&long long v61 = v18;
        *((void *)&v61 + 1) = v26;
        if (!v8) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v24 = 0;
      __int16 v25 = (void *)(8 * v20);
      xpc_object_t v26 = 0;
      *(void *)(8 * v20) = v17;
      uint64_t v18 = 8 * v20 + 8;
      if (v8 == v9) {
        goto LABEL_24;
      }
    }
    if ((unint64_t)(v19 - 8) < 0x58) {
      goto LABEL_94;
    }
    if ((unint64_t)(v8 - v24) < 0x20) {
      goto LABEL_94;
    }
    unint64_t v38 = ((unint64_t)(v19 - 8) >> 3) + 1;
    uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v40 = &v9[-v39];
    __int16 v25 = (void *)((char *)v25 - v39);
    unint64_t v41 = &v24[8 * v20 - 16];
    uint64_t v42 = v9 - 16;
    uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      _OWORD *v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    int v9 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        uint64_t v45 = *((void *)v9 - 1);
        v9 -= 8;
        *--__int16 v25 = v45;
      }
      while (v9 != v8);
    }
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    *((void *)&v60 + 1) = v25;
    *(void *)&long long v61 = v18;
    *((void *)&v61 + 1) = v26;
    if (!v8) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = (char *)MEMORY[0x1BA9C88A0](*a2);
    memset(block, 170, sizeof(block));
    size_t v47 = strlen(v46);
    if (v47 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v48 = (void *)v47;
    if (v47 >= 0x17)
    {
      uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17) {
        uint64_t v50 = v47 | 7;
      }
      uint64_t v51 = v50 + 1;
      unint64_t v49 = (void **)operator new(v50 + 1);
      block[1] = v48;
      block[2] = (void *)(v51 | 0x8000000000000000);
      block[0] = v49;
    }
    else
    {
      HIBYTE(block[2]) = v47;
      unint64_t v49 = block;
      if (!v47) {
        goto LABEL_83;
      }
    }
    memcpy(v49, v46, (size_t)v48);
LABEL_83:
    *((unsigned char *)v48 + (void)v49) = 0;
    free(v46);
    uint64_t v52 = block;
    if (SHIBYTE(block[2]) < 0) {
      uint64_t v52 = (void **)block[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v52;
    _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0) {
      operator delete(block[0]);
    }
  }
  xpc_object_t v14 = xpc_null_create();
  if (*(void *)a3) {
    int64_t v15 = _Block_copy(*(const void **)a3);
  }
  else {
    int64_t v15 = 0;
  }
  unint64_t v36 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E4F143A8];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  uint64_t v68 = &__block_descriptor_tmp_141;
  if (!v15)
  {
    LOBYTE(v71) = 0;
    long long v69 = 0;
    xpc_object_t v70 = v14;
    if (v14) {
      goto LABEL_58;
    }
LABEL_60:
    xpc_object_t v70 = xpc_null_create();
    goto LABEL_61;
  }
  long long v37 = _Block_copy(v15);
  LOBYTE(v71) = 0;
  long long v69 = v37;
  xpc_object_t v70 = v14;
  if (!v14) {
    goto LABEL_60;
  }
LABEL_58:
  xpc_retain(v14);
LABEL_61:
  dispatch_async(v36, block);
  xpc_release(v70);
  xpc_object_t v70 = 0;
  if (v69) {
    _Block_release(v69);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v14);
}

void sub_1B8BB3590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8BB3634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver17speakerState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9CB8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB36BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::handDetectionState_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9D18]))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v60 = v6;
    long long v61 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v60);
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 0x40000000;
    char v7 = ___ZN7antenna16QMICommandDriver23handDetectionState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    unint64_t v57 = ___ZN7antenna16QMICommandDriver23handDetectionState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    uint64_t v58 = &__block_descriptor_tmp_84;
    unint64_t v59 = a2;
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    int v9 = (char *)v61;
    unsigned int v10 = (const void **)*((void *)&v60 + 1);
    if (*((void *)&v60 + 1) != (void)v61)
    {
      unsigned int v10 = (const void **)*((void *)&v60 + 1);
      while (*((unsigned char *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v61) {
          goto LABEL_13;
        }
      }
    }
    if (v10 != (const void **)v61)
    {
      if (!v11) {
        __cxa_bad_cast();
      }
      uint64_t v12 = v11 + 9;
LABEL_27:
      v7((uint64_t)v56, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      int v27 = *(void **)a3;
      if (*(void *)a3) {
        int v27 = _Block_copy(v27);
      }
      uint64_t v28 = *(NSObject **)(a3 + 8);
      xpc_object_t aBlock = v27;
      xpc_object_t object = v28;
      if (v28) {
        dispatch_retain(v28);
      }
      unint64_t v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (uint64_t v31 = std::__shared_weak_count::lock(v29)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v32 = v31;
      p_shared_weak_owners = &v31->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = (void *)MEMORY[0x1E4F143A8];
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      uint64_t v68 = &__block_descriptor_tmp_182_2;
      long long v69 = a1;
      xpc_object_t v70 = v30;
      uint64_t v71 = v32;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      if (aBlock)
      {
        unint64_t v34 = object;
        int64_t v72 = _Block_copy(aBlock);
        dispatch_object_t v73 = object;
        if (!object)
        {
LABEL_38:
          uint64_t v62 = a1 + 23;
          uint64_t v63 = QMIServiceMsg::create();
          int v64 = 25000;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 0x40000000;
          uint64_t v75 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          unint64_t v76 = &unk_1E6195510;
          long long v77 = block;
          uint64_t v35 = _Block_copy(&buf);
          uint64_t v66 = v35;
          if (v63)
          {
            qmi::Client::send();
            uint64_t v35 = v66;
          }
          if (v35) {
            _Block_release(v35);
          }
          if (v73) {
            dispatch_release(v73);
          }
          if (v72) {
            _Block_release(v72);
          }
          if (v71) {
            std::__shared_weak_count::__release_weak(v71);
          }
          std::__shared_weak_count::__release_weak(v32);
          if (v34) {
            dispatch_release(v34);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v55);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
          return;
        }
      }
      else
      {
        unint64_t v34 = object;
        int64_t v72 = 0;
        dispatch_object_t v73 = object;
        if (!object) {
          goto LABEL_38;
        }
      }
      dispatch_retain(v34);
      goto LABEL_38;
    }
LABEL_13:
    uint64_t v16 = operator new(0x10uLL);
    unint64_t v17 = v16;
    v16[4] = 1;
    *(void *)uint64_t v16 = &unk_1F1265E88;
    if ((unint64_t)v9 < *((void *)&v61 + 1))
    {
      *(void *)int v9 = v16;
      uint64_t v18 = (uint64_t)(v9 + 8);
LABEL_26:
      uint64_t v12 = (char *)v17 + 9;
      *(void *)&long long v61 = v18;
      char v7 = v57;
      goto LABEL_27;
    }
    int64_t v19 = v9 - v8;
    uint64_t v20 = (v9 - v8) >> 3;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = *((void *)&v61 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v61 + 1) - (void)v8) >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v24 = operator new(8 * v23);
      __int16 v25 = &v24[8 * v20];
      xpc_object_t v26 = &v24[8 * v23];
      *__int16 v25 = v17;
      uint64_t v18 = (uint64_t)(v25 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((void *)&v60 + 1) = v25;
        *(void *)&long long v61 = v18;
        *((void *)&v61 + 1) = v26;
        if (!v8) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v24 = 0;
      __int16 v25 = (void *)(8 * v20);
      xpc_object_t v26 = 0;
      *(void *)(8 * v20) = v17;
      uint64_t v18 = 8 * v20 + 8;
      if (v8 == v9) {
        goto LABEL_24;
      }
    }
    if ((unint64_t)(v19 - 8) < 0x58) {
      goto LABEL_94;
    }
    if ((unint64_t)(v8 - v24) < 0x20) {
      goto LABEL_94;
    }
    unint64_t v38 = ((unint64_t)(v19 - 8) >> 3) + 1;
    uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v40 = &v9[-v39];
    __int16 v25 = (void *)((char *)v25 - v39);
    unint64_t v41 = &v24[8 * v20 - 16];
    uint64_t v42 = v9 - 16;
    uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      _OWORD *v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    int v9 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        uint64_t v45 = *((void *)v9 - 1);
        v9 -= 8;
        *--__int16 v25 = v45;
      }
      while (v9 != v8);
    }
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    *((void *)&v60 + 1) = v25;
    *(void *)&long long v61 = v18;
    *((void *)&v61 + 1) = v26;
    if (!v8) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = (char *)MEMORY[0x1BA9C88A0](*a2);
    memset(block, 170, sizeof(block));
    size_t v47 = strlen(v46);
    if (v47 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v48 = (void *)v47;
    if (v47 >= 0x17)
    {
      uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17) {
        uint64_t v50 = v47 | 7;
      }
      uint64_t v51 = v50 + 1;
      unint64_t v49 = (void **)operator new(v50 + 1);
      block[1] = v48;
      block[2] = (void *)(v51 | 0x8000000000000000);
      block[0] = v49;
    }
    else
    {
      HIBYTE(block[2]) = v47;
      unint64_t v49 = block;
      if (!v47) {
        goto LABEL_83;
      }
    }
    memcpy(v49, v46, (size_t)v48);
LABEL_83:
    *((unsigned char *)v48 + (void)v49) = 0;
    free(v46);
    uint64_t v52 = block;
    if (SHIBYTE(block[2]) < 0) {
      uint64_t v52 = (void **)block[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v52;
    _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0) {
      operator delete(block[0]);
    }
  }
  xpc_object_t v14 = xpc_null_create();
  if (*(void *)a3) {
    int64_t v15 = _Block_copy(*(const void **)a3);
  }
  else {
    int64_t v15 = 0;
  }
  unint64_t v36 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E4F143A8];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  uint64_t v68 = &__block_descriptor_tmp_141;
  if (!v15)
  {
    LOBYTE(v71) = 0;
    long long v69 = 0;
    xpc_object_t v70 = v14;
    if (v14) {
      goto LABEL_58;
    }
LABEL_60:
    xpc_object_t v70 = xpc_null_create();
    goto LABEL_61;
  }
  long long v37 = _Block_copy(v15);
  LOBYTE(v71) = 0;
  long long v69 = v37;
  xpc_object_t v70 = v14;
  if (!v14) {
    goto LABEL_60;
  }
LABEL_58:
  xpc_retain(v14);
LABEL_61:
  dispatch_async(v36, block);
  xpc_release(v70);
  xpc_object_t v70 = 0;
  if (v69) {
    _Block_release(v69);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v14);
}

void sub_1B8BB3DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8BB3E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver23handDetectionState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, unsigned char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9D18]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB3F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::powerSourceState_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9CE8]))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v60 = v6;
    long long v61 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v60);
    v56[0] = MEMORY[0x1E4F143A8];
    v56[1] = 0x40000000;
    char v7 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver21powerSourceState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    unint64_t v57 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver21powerSourceState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    uint64_t v58 = &__block_descriptor_tmp_86;
    unint64_t v59 = a2;
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    int v9 = (char *)v61;
    unsigned int v10 = (const void **)*((void *)&v60 + 1);
    if (*((void *)&v60 + 1) != (void)v61)
    {
      unsigned int v10 = (const void **)*((void *)&v60 + 1);
      while (*((unsigned char *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v61) {
          goto LABEL_13;
        }
      }
    }
    if (v10 != (const void **)v61)
    {
      if (!v11) {
        __cxa_bad_cast();
      }
      uint64_t v12 = v11 + 12;
LABEL_27:
      v7((uint64_t)v56, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      int v27 = *(void **)a3;
      if (*(void *)a3) {
        int v27 = _Block_copy(v27);
      }
      uint64_t v28 = *(NSObject **)(a3 + 8);
      xpc_object_t aBlock = v27;
      xpc_object_t object = v28;
      if (v28) {
        dispatch_retain(v28);
      }
      unint64_t v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (uint64_t v31 = std::__shared_weak_count::lock(v29)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v32 = v31;
      p_shared_weak_owners = &v31->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = (void *)MEMORY[0x1E4F143A8];
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      uint64_t v68 = &__block_descriptor_tmp_186_0;
      long long v69 = a1;
      xpc_object_t v70 = v30;
      uint64_t v71 = v32;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      if (aBlock)
      {
        unint64_t v34 = object;
        int64_t v72 = _Block_copy(aBlock);
        dispatch_object_t v73 = object;
        if (!object)
        {
LABEL_38:
          uint64_t v62 = a1 + 23;
          uint64_t v63 = QMIServiceMsg::create();
          int v64 = 25000;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          *(void *)&long long buf = MEMORY[0x1E4F143A8];
          *((void *)&buf + 1) = 0x40000000;
          uint64_t v75 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          unint64_t v76 = &unk_1E6195510;
          long long v77 = block;
          uint64_t v35 = _Block_copy(&buf);
          uint64_t v66 = v35;
          if (v63)
          {
            qmi::Client::send();
            uint64_t v35 = v66;
          }
          if (v35) {
            _Block_release(v35);
          }
          if (v73) {
            dispatch_release(v73);
          }
          if (v72) {
            _Block_release(v72);
          }
          if (v71) {
            std::__shared_weak_count::__release_weak(v71);
          }
          std::__shared_weak_count::__release_weak(v32);
          if (v34) {
            dispatch_release(v34);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v55);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
          return;
        }
      }
      else
      {
        unint64_t v34 = object;
        int64_t v72 = 0;
        dispatch_object_t v73 = object;
        if (!object) {
          goto LABEL_38;
        }
      }
      dispatch_retain(v34);
      goto LABEL_38;
    }
LABEL_13:
    uint64_t v16 = operator new(0x10uLL);
    unint64_t v17 = v16;
    v16[8] = 1;
    *(void *)uint64_t v16 = &unk_1F1265F08;
    *((_DWORD *)v16 + 3) = 0;
    uint64_t v12 = v16 + 12;
    if ((unint64_t)v9 < *((void *)&v61 + 1))
    {
      *(void *)int v9 = v16;
      uint64_t v18 = (uint64_t)(v9 + 8);
LABEL_26:
      *(void *)&long long v61 = v18;
      char v7 = v57;
      goto LABEL_27;
    }
    int64_t v19 = v9 - v8;
    uint64_t v20 = (v9 - v8) >> 3;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = *((void *)&v61 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v61 + 1) - (void)v8) >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v24 = operator new(8 * v23);
      __int16 v25 = &v24[8 * v20];
      xpc_object_t v26 = &v24[8 * v23];
      *__int16 v25 = v17;
      uint64_t v18 = (uint64_t)(v25 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((void *)&v60 + 1) = v25;
        *(void *)&long long v61 = v18;
        *((void *)&v61 + 1) = v26;
        if (!v8) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      unsigned int v24 = 0;
      __int16 v25 = (void *)(8 * v20);
      xpc_object_t v26 = 0;
      *(void *)(8 * v20) = v17;
      uint64_t v18 = 8 * v20 + 8;
      if (v8 == v9) {
        goto LABEL_24;
      }
    }
    if ((unint64_t)(v19 - 8) < 0x58) {
      goto LABEL_94;
    }
    if ((unint64_t)(v8 - v24) < 0x20) {
      goto LABEL_94;
    }
    unint64_t v38 = ((unint64_t)(v19 - 8) >> 3) + 1;
    uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v40 = &v9[-v39];
    __int16 v25 = (void *)((char *)v25 - v39);
    unint64_t v41 = &v24[8 * v20 - 16];
    uint64_t v42 = v9 - 16;
    uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v44 = *(_OWORD *)v42;
      *(v41 - 1) = *((_OWORD *)v42 - 1);
      _OWORD *v41 = v44;
      v41 -= 2;
      v42 -= 32;
      v43 -= 4;
    }
    while (v43);
    int v9 = v40;
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_94:
      do
      {
        uint64_t v45 = *((void *)v9 - 1);
        v9 -= 8;
        *--__int16 v25 = v45;
      }
      while (v9 != v8);
    }
    xpc_object_t v8 = (char *)*((void *)&v60 + 1);
    *((void *)&v60 + 1) = v25;
    *(void *)&long long v61 = v18;
    *((void *)&v61 + 1) = v26;
    if (!v8) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = (char *)MEMORY[0x1BA9C88A0](*a2);
    memset(block, 170, sizeof(block));
    size_t v47 = strlen(v46);
    if (v47 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v48 = (void *)v47;
    if (v47 >= 0x17)
    {
      uint64_t v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v47 | 7) != 0x17) {
        uint64_t v50 = v47 | 7;
      }
      uint64_t v51 = v50 + 1;
      unint64_t v49 = (void **)operator new(v50 + 1);
      block[1] = v48;
      block[2] = (void *)(v51 | 0x8000000000000000);
      block[0] = v49;
    }
    else
    {
      HIBYTE(block[2]) = v47;
      unint64_t v49 = block;
      if (!v47) {
        goto LABEL_83;
      }
    }
    memcpy(v49, v46, (size_t)v48);
LABEL_83:
    *((unsigned char *)v48 + (void)v49) = 0;
    free(v46);
    uint64_t v52 = block;
    if (SHIBYTE(block[2]) < 0) {
      uint64_t v52 = (void **)block[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v52;
    _os_log_error_impl(&dword_1B8B00000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0) {
      operator delete(block[0]);
    }
  }
  xpc_object_t v14 = xpc_null_create();
  if (*(void *)a3) {
    int64_t v15 = _Block_copy(*(const void **)a3);
  }
  else {
    int64_t v15 = 0;
  }
  unint64_t v36 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E4F143A8];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  uint64_t v68 = &__block_descriptor_tmp_141;
  if (!v15)
  {
    LOBYTE(v71) = 0;
    long long v69 = 0;
    xpc_object_t v70 = v14;
    if (v14) {
      goto LABEL_58;
    }
LABEL_60:
    xpc_object_t v70 = xpc_null_create();
    goto LABEL_61;
  }
  long long v37 = _Block_copy(v15);
  LOBYTE(v71) = 0;
  long long v69 = v37;
  xpc_object_t v70 = v14;
  if (!v14) {
    goto LABEL_60;
  }
LABEL_58:
  xpc_retain(v14);
LABEL_61:
  dispatch_async(v36, block);
  xpc_release(v70);
  xpc_object_t v70 = 0;
  if (v69) {
    _Block_release(v69);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v14);
}

void sub_1B8BB4650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8BB46F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver21powerSourceState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _DWORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9CE8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = (unsigned __int16)xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB4780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::ppmEnable_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  long long v6 = (const char *)*MEMORY[0x1E4FB9C88];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E4FB9C88]))
  {
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v93 = v7;
    long long v94 = v7;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v93);
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    char v12 = xpc::dyn_cast_or_default();
    uint64_t v81 = a3;
    xpc_release(object[0]);
    v89[0] = MEMORY[0x1E4F143A8];
    v89[1] = 0x40000000;
    uint64_t v13 = ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    uint64_t v90 = ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    size_t v91 = &__block_descriptor_tmp_88;
    char v92 = v12;
    xpc_object_t v14 = (char *)*((void *)&v93 + 1);
    int64_t v15 = (char *)v94;
    uint64_t v16 = (const void **)*((void *)&v93 + 1);
    if (*((void *)&v93 + 1) != (void)v94)
    {
      uint64_t v16 = (const void **)*((void *)&v93 + 1);
      while (*((unsigned char *)*v16 + 8) != 1)
      {
        if (++v16 == (const void **)v94) {
          goto LABEL_16;
        }
      }
    }
    if (v16 != (const void **)v94)
    {
      if (!v17) {
        goto LABEL_124;
      }
      uint64_t v18 = v17 + 9;
LABEL_30:
      v13((uint64_t)v89, v18);
      if (!v12) {
        goto LABEL_83;
      }
      v85[0] = MEMORY[0x1E4F143A8];
      v85[1] = 0x40000000;
      int64_t v30 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
      long long v86 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
      dispatch_object_t v87 = &__block_descriptor_tmp_90;
      uint64_t v88 = a2;
      uint64_t v31 = (char *)*((void *)&v93 + 1);
      uint64_t v32 = (char *)v94;
      uint64_t v33 = (const void **)*((void *)&v93 + 1);
      if (*((void *)&v93 + 1) != (void)v94)
      {
        uint64_t v33 = (const void **)*((void *)&v93 + 1);
        while (*((unsigned char *)*v33 + 8) != 16)
        {
          if (++v33 == (const void **)v94) {
            goto LABEL_39;
          }
        }
      }
      if (v33 != (const void **)v94)
      {
        if (v34)
        {
          uint64_t v35 = v34 + 10;
LABEL_82:
          v30((uint64_t)v85, v35);
LABEL_83:
          qmi::MutableMessageBase::MutableMessageBase();
          uint64_t v65 = *(void **)v81;
          if (*(void *)v81) {
            uint64_t v65 = _Block_copy(v65);
          }
          uint64_t v66 = *(NSObject **)(v81 + 8);
          uint64_t v82 = v65;
          uint64_t v83 = v66;
          if (v66) {
            dispatch_retain(v66);
          }
          int v67 = (std::__shared_weak_count *)a1[10];
          if (!v67 || (v68 = (void *)a1[9], (long long v69 = std::__shared_weak_count::lock(v67)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          xpc_object_t v70 = v69;
          p_shared_weak_owners = &v69->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v69->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v70);
          }
          object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
          object[1] = (xpc_object_t)1174405120;
          object[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
          dispatch_object_t v101 = &__block_descriptor_tmp_190_0;
          xpc_object_t aBlock = a1;
          xpc_object_t v103 = v68;
          uint64_t v104 = v70;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          if (v82)
          {
            int64_t v72 = v83;
            long long v105 = _Block_copy(v82);
            dispatch_object_t v106 = v83;
            if (!v83)
            {
LABEL_94:
              uint64_t v95 = a1 + 23;
              uint64_t v96 = QMIServiceMsg::create();
              int v97 = 25000;
              uint64_t v98 = 0;
              unint64_t v99 = 0;
              *(void *)&long long buf = MEMORY[0x1E4F143A8];
              *((void *)&buf + 1) = 0x40000000;
              uint64_t v108 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
              uint64_t v109 = &unk_1E6195510;
              dispatch_object_t v110 = object;
              dispatch_object_t v73 = _Block_copy(&buf);
              unint64_t v99 = v73;
              if (v96)
              {
                qmi::Client::send();
                dispatch_object_t v73 = v99;
              }
              if (v73) {
                _Block_release(v73);
              }
              if (v106) {
                dispatch_release(v106);
              }
              if (v105) {
                _Block_release(v105);
              }
              if (v104) {
                std::__shared_weak_count::__release_weak(v104);
              }
              std::__shared_weak_count::__release_weak(v70);
              if (v72) {
                dispatch_release(v72);
              }
              if (v82) {
                _Block_release(v82);
              }
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v84);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v93);
              return;
            }
          }
          else
          {
            int64_t v72 = v83;
            long long v105 = 0;
            dispatch_object_t v106 = v83;
            if (!v83) {
              goto LABEL_94;
            }
          }
          dispatch_retain(v72);
          goto LABEL_94;
        }
LABEL_124:
        __cxa_bad_cast();
      }
LABEL_39:
      unint64_t v36 = operator new(0x10uLL);
      long long v37 = v36;
      v36[8] = 16;
      *(void *)unint64_t v36 = &unk_1F1265FD8;
      *((_WORD *)v36 + 5) = 0;
      uint64_t v35 = v36 + 10;
      if ((unint64_t)v32 < *((void *)&v94 + 1))
      {
        *(void *)uint64_t v32 = v36;
        uint64_t v38 = (uint64_t)(v32 + 8);
LABEL_81:
        *(void *)&long long v94 = v38;
        int64_t v30 = v86;
        goto LABEL_82;
      }
      int64_t v41 = v32 - v31;
      uint64_t v42 = (v32 - v31) >> 3;
      unint64_t v43 = v42 + 1;
      if (!((unint64_t)(v42 + 1) >> 61))
      {
        uint64_t v44 = *((void *)&v94 + 1) - (void)v31;
        if ((uint64_t)(*((void *)&v94 + 1) - (void)v31) >> 2 > v43) {
          unint64_t v43 = v44 >> 2;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (!v45)
        {
          uint64_t v46 = 0;
          size_t v47 = (void *)(8 * v42);
          uint64_t v48 = 0;
          *(void *)(8 * v42) = v37;
          uint64_t v38 = 8 * v42 + 8;
          if (v31 == v32) {
            goto LABEL_79;
          }
          goto LABEL_72;
        }
        if (!(v45 >> 61))
        {
          uint64_t v46 = operator new(8 * v45);
          size_t v47 = &v46[8 * v42];
          uint64_t v48 = &v46[8 * v45];
          void *v47 = v37;
          uint64_t v38 = (uint64_t)(v47 + 1);
          if (v31 == v32)
          {
LABEL_79:
            *((void *)&v93 + 1) = v47;
            *(void *)&long long v94 = v38;
            *((void *)&v94 + 1) = v48;
            if (v31) {
              operator delete(v31);
            }
            goto LABEL_81;
          }
LABEL_72:
          if ((unint64_t)(v41 - 8) < 0x58) {
            goto LABEL_130;
          }
          if ((unint64_t)(v31 - v46) < 0x20) {
            goto LABEL_130;
          }
          unint64_t v57 = ((unint64_t)(v41 - 8) >> 3) + 1;
          uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v59 = &v32[-v58];
          size_t v47 = (void *)((char *)v47 - v58);
          long long v60 = &v46[8 * v42 - 16];
          long long v61 = v32 - 16;
          uint64_t v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v63 = *(_OWORD *)v61;
            *(v60 - 1) = *((_OWORD *)v61 - 1);
            *long long v60 = v63;
            v60 -= 2;
            v61 -= 32;
            v62 -= 4;
          }
          while (v62);
          uint64_t v32 = v59;
          if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_130:
            do
            {
              uint64_t v64 = *((void *)v32 - 1);
              v32 -= 8;
              *--size_t v47 = v64;
            }
            while (v32 != v31);
          }
          uint64_t v31 = (char *)*((void *)&v93 + 1);
          goto LABEL_79;
        }
LABEL_127:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_126:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_16:
    int64_t v19 = operator new(0x10uLL);
    uint64_t v20 = v19;
    v19[4] = 1;
    *(void *)int64_t v19 = &unk_1F1265F88;
    if ((unint64_t)v15 < *((void *)&v94 + 1))
    {
      *(void *)int64_t v15 = v19;
      uint64_t v21 = (uint64_t)(v15 + 8);
LABEL_29:
      uint64_t v18 = (char *)v20 + 9;
      *(void *)&long long v94 = v21;
      uint64_t v13 = v90;
      goto LABEL_30;
    }
    int64_t v22 = v15 - v14;
    uint64_t v23 = (v15 - v14) >> 3;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      goto LABEL_126;
    }
    uint64_t v25 = *((void *)&v94 + 1) - (void)v14;
    if ((uint64_t)(*((void *)&v94 + 1) - (void)v14) >> 2 > v24) {
      unint64_t v24 = v25 >> 2;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 61) {
        goto LABEL_127;
      }
      int v27 = operator new(8 * v26);
      uint64_t v28 = &v27[8 * v23];
      unint64_t v29 = &v27[8 * v26];
      void *v28 = v20;
      uint64_t v21 = (uint64_t)(v28 + 1);
      if (v14 == v15)
      {
LABEL_27:
        *((void *)&v93 + 1) = v28;
        *(void *)&long long v94 = v21;
        *((void *)&v94 + 1) = v29;
        if (!v14) {
          goto LABEL_29;
        }
LABEL_28:
        operator delete(v14);
        goto LABEL_29;
      }
    }
    else
    {
      int v27 = 0;
      uint64_t v28 = (void *)(8 * v23);
      unint64_t v29 = 0;
      *(void *)(8 * v23) = v20;
      uint64_t v21 = 8 * v23 + 8;
      if (v14 == v15) {
        goto LABEL_27;
      }
    }
    if ((unint64_t)(v22 - 8) < 0x58) {
      goto LABEL_131;
    }
    if ((unint64_t)(v14 - v27) < 0x20) {
      goto LABEL_131;
    }
    unint64_t v49 = ((unint64_t)(v22 - 8) >> 3) + 1;
    uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v51 = &v15[-v50];
    uint64_t v28 = (void *)((char *)v28 - v50);
    uint64_t v52 = &v27[8 * v23 - 16];
    long long v53 = v15 - 16;
    uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *uint64_t v52 = v55;
      v52 -= 2;
      v53 -= 32;
      v54 -= 4;
    }
    while (v54);
    int64_t v15 = v51;
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_131:
      do
      {
        uint64_t v56 = *((void *)v15 - 1);
        v15 -= 8;
        *--uint64_t v28 = v56;
      }
      while (v15 != v14);
    }
    xpc_object_t v14 = (char *)*((void *)&v93 + 1);
    *((void *)&v93 + 1) = v28;
    *(void *)&long long v94 = v21;
    *((void *)&v94 + 1) = v29;
    if (!v14) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  int v9 = a1[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    unint64_t v74 = (char *)MEMORY[0x1BA9C88A0](*a2);
    memset(object, 170, sizeof(object));
    size_t v75 = strlen(v74);
    if (v75 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v76 = (void *)v75;
    if (v75 >= 0x17)
    {
      uint64_t v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v75 | 7) != 0x17) {
        uint64_t v78 = v75 | 7;
      }
      uint64_t v79 = v78 + 1;
      long long v77 = operator new(v78 + 1);
      object[1] = v76;
      object[2] = (xpc_object_t)(v79 | 0x8000000000000000);
      object[0] = v77;
    }
    else
    {
      HIBYTE(object[2]) = v75;
      long long v77 = object;
      if (!v75) {
        goto LABEL_119;
      }
    }
    memcpy(v77, v74, (size_t)v76);
LABEL_119:
    *((unsigned char *)v76 + (void)v77) = 0;
    free(v74);
    uint64_t v80 = object;
    if (SHIBYTE(object[2]) < 0) {
      uint64_t v80 = (xpc_object_t *)object[0];
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v80;
    _os_log_error_impl(&dword_1B8B00000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
  }
  xpc_object_t v10 = xpc_null_create();
  if (*(void *)a3) {
    xpc_object_t v11 = _Block_copy(*(const void **)a3);
  }
  else {
    xpc_object_t v11 = 0;
  }
  uint64_t v39 = *(NSObject **)(a3 + 8);
  object[0] = (xpc_object_t)MEMORY[0x1E4F143A8];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  dispatch_object_t v101 = &__block_descriptor_tmp_141;
  if (!v11)
  {
    LOBYTE(v104) = 0;
    xpc_object_t aBlock = 0;
    xpc_object_t v103 = v10;
    if (v10) {
      goto LABEL_44;
    }
LABEL_46:
    xpc_object_t v103 = xpc_null_create();
    goto LABEL_47;
  }
  uint64_t v40 = _Block_copy(v11);
  LOBYTE(v104) = 0;
  xpc_object_t aBlock = v40;
  xpc_object_t v103 = v10;
  if (!v10) {
    goto LABEL_46;
  }
LABEL_44:
  xpc_retain(v10);
LABEL_47:
  dispatch_async(v39, object);
  xpc_release(v103);
  xpc_object_t v103 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v11) {
    _Block_release(v11);
  }
  xpc_release(v10);
}

void sub_1B8BB5144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,xpc_object_t object,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9CA0]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB52AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::ppmRegisterIndication_sync(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    xpc_object_t v8 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_object_t v8 = *(void **)a2;
  if (*(void *)a2) {
LABEL_7:
  }
    xpc_object_t v8 = _Block_copy(v8);
LABEL_8:
  int v9 = (const void *)a1[30];
  a1[30] = v8;
  if (v9) {
    _Block_release(v9);
  }
  xpc_object_t v10 = *(NSObject **)(a2 + 8);
  if (v10) {
    dispatch_retain(v10);
  }
  xpc_object_t v11 = a1[31];
  a1[31] = v10;
  if (v11) {
    dispatch_release(v11);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  v12[2] = ___ZN7antenna16QMICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_93_1;
  void v12[4] = a1;
  void v12[5] = v5;
  uint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 0x40000000;
  uint64_t v16 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm13PPMIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  unint64_t v17 = &unk_1E61955B0;
  uint64_t v18 = v12;
  qmi::Client::setIndHandler();
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1B8BB547C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke(void *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  long long v6 = std::__shared_weak_count::lock(v3);
  uint64_t v56 = v6;
  if (!v6) {
    return;
  }
  if (!a1[5])
  {
    xpc_object_t v11 = v6;
LABEL_68:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  std::string __p = 0;
  long long v55 = 0;
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  int v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)1);
    char v10 = *(unsigned char *)v9;
  }
  else
  {
    char v10 = 0;
  }
  char v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v14 = v12;
  if (v12)
  {
    tlv::throwIfNotEnoughBytes(v12, (const unsigned __int8 *)v12 + v13, (const unsigned __int8 *)1);
    char v15 = *(unsigned char *)v14;
  }
  else
  {
    char v15 = 0;
  }
  uint64_t v16 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v18 = v16;
  if (v16)
  {
    tlv::throwIfNotEnoughBytes(v16, (const unsigned __int8 *)v16 + v17, (const unsigned __int8 *)4);
    int v19 = *(_DWORD *)v18;
  }
  else
  {
    int v19 = 0;
  }
  uint64_t v20 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  int64_t v22 = v20;
  if (v20)
  {
    uint64_t block = 0;
    uint64_t v58 = 0;
    unint64_t v59 = 0;
    uint64_t v23 = v21;
    if (tlv::parseUnboundedSequence<int>(v20, (unsigned __int8 *)v20 + v21, (uint64_t)&block))
    {
      int v52 = v19;
      uint64_t v53 = v5;
      char v24 = v15;
      char v25 = v10;
      unint64_t v26 = block;
      int v27 = (void *)v58;
      size_t v28 = v58 - (void)block;
      unint64_t v29 = 0;
      if ((v58 - (uint64_t)block) >> 2)
      {
        if ((v28 & 0x8000000000000000) != 0 || (unint64_t v30 = (v58 - (uint64_t)block) >> 2, v30 >> 62)) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v29 = (char *)operator new(4 * v30);
        std::string __p = (int *)v29;
      }
      if (v27 != v26) {
        memmove(v29, v26, v28);
      }
      char v10 = v25;
      char v15 = v24;
      int v19 = v52;
      uint64_t v5 = v53;
      int v31 = 0;
      long long v55 = (int *)&v29[v28];
      uint64_t v32 = block;
      if (!block) {
        goto LABEL_24;
      }
    }
    else
    {
      int v31 = 1;
      uint64_t v32 = block;
      if (!block)
      {
LABEL_24:
        if (v31) {
          ((void (*)(void, uint64_t, tlv *, uint64_t))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 4, v22, v23);
        }
        goto LABEL_26;
      }
    }
    uint64_t v58 = (uint64_t)v32;
    operator delete(v32);
    goto LABEL_24;
  }
LABEL_26:
  xpc_object_t v33 = xpc_dictionary_create(0, 0, 0);
  if (v33 || (xpc_object_t v33 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1BA9C88F0](v33) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v33);
      xpc_object_t v34 = v33;
    }
    else
    {
      xpc_object_t v34 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v34 = xpc_null_create();
    xpc_object_t v33 = 0;
  }
  xpc_release(v33);
  xpc_object_t v35 = xpc_int64_create(v10);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E4FB9C98], v35);
  xpc_object_t v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  xpc_object_t v37 = xpc_int64_create(v15);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E4FB9CB0], v37);
  xpc_object_t v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  xpc_object_t v39 = xpc_int64_create(v19);
  if (!v39) {
    xpc_object_t v39 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E4FB9D38], v39);
  xpc_object_t v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  xpc_object_t v41 = xpc_array_create(0, 0);
  if (v41 || (xpc_object_t v41 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1BA9C88F0](v41) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v41);
      xpc_object_t v42 = v41;
    }
    else
    {
      xpc_object_t v42 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v42 = xpc_null_create();
    xpc_object_t v41 = 0;
  }
  xpc_release(v41);
  for (uint64_t i = __p; i != v55; ++i)
  {
    xpc_object_t v44 = xpc_int64_create(*i);
    if (!v44) {
      xpc_object_t v44 = xpc_null_create();
    }
    xpc_array_append_value(v42, v44);
    xpc_release(v44);
  }
  if (v42)
  {
    xpc_retain(v42);
    xpc_object_t v45 = v42;
  }
  else
  {
    xpc_object_t v45 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E4FB9CA8], v45);
  xpc_object_t v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  if (v34)
  {
    xpc_retain(v34);
    xpc_object_t v47 = v34;
    uint64_t v48 = *(const void **)(v5 + 240);
    if (v48)
    {
LABEL_53:
      unint64_t v49 = _Block_copy(v48);
      goto LABEL_56;
    }
  }
  else
  {
    xpc_object_t v47 = xpc_null_create();
    uint64_t v48 = *(const void **)(v5 + 240);
    if (v48) {
      goto LABEL_53;
    }
  }
  unint64_t v49 = 0;
LABEL_56:
  uint64_t v50 = *(NSObject **)(v5 + 248);
  uint64_t block = (void *)MEMORY[0x1E4F143A8];
  uint64_t v58 = 1174405120;
  unint64_t v59 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  long long v60 = &__block_descriptor_tmp_141;
  if (v49)
  {
    uint64_t v51 = _Block_copy(v49);
    char v63 = 1;
    xpc_object_t aBlock = v51;
    xpc_object_t object = v47;
    if (v47)
    {
LABEL_58:
      xpc_retain(v47);
      goto LABEL_61;
    }
  }
  else
  {
    char v63 = 1;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v47;
    if (v47) {
      goto LABEL_58;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_61:
  dispatch_async(v50, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v49) {
    _Block_release(v49);
  }
  xpc_release(v47);
  xpc_release(v42);
  xpc_release(v34);
  if (__p) {
    operator delete(__p);
  }
  xpc_object_t v11 = v56;
  if (v56) {
    goto LABEL_68;
  }
}

void sub_1B8BB5B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16)
  {
    if (v17) {
      operator delete(v17);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](&v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B8BB5B64);
}

void sub_1B8BB5C20(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](&v3);
  _Unwind_Resume(a1);
}

void sub_1B8BB5C48()
{
  xpc_release(v2);
  xpc_release(v1);
  xpc_release(v0);
  JUMPOUT(0x1B8BB5C64);
}

void antenna::QMICommandDriver::deviceMaterial_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v136 = v6;
  long long v137 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v136);
  v132[0] = MEMORY[0x1E4F143A8];
  v132[1] = 0x40000000;
  long long v7 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  uint64_t v133 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  unint64_t v134 = &__block_descriptor_tmp_95_0;
  uint64_t v135 = a2;
  int v8 = (char *)*((void *)&v136 + 1);
  int v9 = (char *)v137;
  char v10 = (const void **)*((void *)&v136 + 1);
  uint64_t v116 = a3;
  if (*((void *)&v136 + 1) != (void)v137)
  {
    char v10 = (const void **)*((void *)&v136 + 1);
    while (*((unsigned char *)*v10 + 8) != 16)
    {
      if (++v10 == (const void **)v137) {
        goto LABEL_9;
      }
    }
  }
  if (v10 == (const void **)v137)
  {
LABEL_9:
    int v13 = operator new(0x10uLL);
    uint64_t v14 = v13;
    v13[8] = 16;
    *(void *)int v13 = &unk_1F1266058;
    *((_WORD *)v13 + 5) = 0;
    char v12 = v13 + 10;
    if ((unint64_t)v9 < *((void *)&v137 + 1))
    {
      *(void *)int v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_22:
      *(void *)&long long v137 = v15;
      long long v7 = v133;
      goto LABEL_23;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      goto LABEL_155;
    }
    uint64_t v19 = *((void *)&v137 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v137 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        goto LABEL_156;
      }
      int v21 = operator new(8 * v20);
      int64_t v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_20:
        *((void *)&v136 + 1) = v22;
        *(void *)&long long v137 = v15;
        *((void *)&v137 + 1) = v23;
        if (!v8) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v8);
        goto LABEL_22;
      }
    }
    else
    {
      int v21 = 0;
      int64_t v22 = (void *)(8 * v17);
      uint64_t v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 == v9) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v16 - 8) < 0x58) {
      goto LABEL_159;
    }
    if ((unint64_t)(v8 - v21) < 0x20) {
      goto LABEL_159;
    }
    unint64_t v84 = ((unint64_t)(v16 - 8) >> 3) + 1;
    uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
    long long v86 = &v9[-v85];
    int64_t v22 = (void *)((char *)v22 - v85);
    dispatch_object_t v87 = &v21[8 * v17 - 16];
    uint64_t v88 = v9 - 16;
    uint64_t v89 = v84 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v90 = *(_OWORD *)v88;
      *(v87 - 1) = *((_OWORD *)v88 - 1);
      *dispatch_object_t v87 = v90;
      v87 -= 2;
      v88 -= 32;
      v89 -= 4;
    }
    while (v89);
    int v9 = v86;
    if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_159:
      do
      {
        uint64_t v91 = *((void *)v9 - 1);
        v9 -= 8;
        *--int64_t v22 = v91;
      }
      while (v9 != v8);
    }
    int v8 = (char *)*((void *)&v136 + 1);
    *((void *)&v136 + 1) = v22;
    *(void *)&long long v137 = v15;
    *((void *)&v137 + 1) = v23;
    if (!v8) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v11) {
    goto LABEL_154;
  }
  char v12 = v11 + 10;
LABEL_23:
  v7((uint64_t)v132, v12);
  v128[0] = MEMORY[0x1E4F143A8];
  v128[1] = 0x40000000;
  char v24 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  uint64_t v129 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  char v130 = &__block_descriptor_tmp_97_0;
  uint64_t v131 = a2;
  char v25 = (char *)*((void *)&v136 + 1);
  unint64_t v26 = (char *)v137;
  int v27 = (const void **)*((void *)&v136 + 1);
  if (*((void *)&v136 + 1) != (void)v137)
  {
    int v27 = (const void **)*((void *)&v136 + 1);
    while (*((unsigned char *)*v27 + 8) != 17)
    {
      if (++v27 == (const void **)v137) {
        goto LABEL_31;
      }
    }
  }
  if (v27 == (const void **)v137)
  {
LABEL_31:
    unint64_t v30 = operator new(0x10uLL);
    int v31 = v30;
    v30[8] = 17;
    *(void *)unint64_t v30 = &unk_1F12660A8;
    *((_WORD *)v30 + 5) = 0;
    unint64_t v29 = v30 + 10;
    if ((unint64_t)v26 < *((void *)&v137 + 1))
    {
      *(void *)unint64_t v26 = v30;
      uint64_t v32 = (uint64_t)(v26 + 8);
LABEL_44:
      *(void *)&long long v137 = v32;
      char v24 = v129;
      goto LABEL_45;
    }
    int64_t v33 = v26 - v25;
    uint64_t v34 = (v26 - v25) >> 3;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61) {
      goto LABEL_155;
    }
    uint64_t v36 = *((void *)&v137 + 1) - (void)v25;
    if ((uint64_t)(*((void *)&v137 + 1) - (void)v25) >> 2 > v35) {
      unint64_t v35 = v36 >> 2;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      if (v37 >> 61) {
        goto LABEL_156;
      }
      xpc_object_t v38 = operator new(8 * v37);
      xpc_object_t v39 = &v38[8 * v34];
      xpc_object_t v40 = &v38[8 * v37];
      void *v39 = v31;
      uint64_t v32 = (uint64_t)(v39 + 1);
      if (v25 == v26)
      {
LABEL_42:
        *((void *)&v136 + 1) = v39;
        *(void *)&long long v137 = v32;
        *((void *)&v137 + 1) = v40;
        if (!v25) {
          goto LABEL_44;
        }
LABEL_43:
        operator delete(v25);
        goto LABEL_44;
      }
    }
    else
    {
      xpc_object_t v38 = 0;
      xpc_object_t v39 = (void *)(8 * v34);
      xpc_object_t v40 = 0;
      *(void *)(8 * v34) = v31;
      uint64_t v32 = 8 * v34 + 8;
      if (v25 == v26) {
        goto LABEL_42;
      }
    }
    if ((unint64_t)(v33 - 8) < 0x58) {
      goto LABEL_160;
    }
    if ((unint64_t)(v25 - v38) < 0x20) {
      goto LABEL_160;
    }
    unint64_t v92 = ((unint64_t)(v33 - 8) >> 3) + 1;
    uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
    long long v94 = &v26[-v93];
    xpc_object_t v39 = (void *)((char *)v39 - v93);
    uint64_t v95 = &v38[8 * v34 - 16];
    uint64_t v96 = v26 - 16;
    uint64_t v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v98 = *(_OWORD *)v96;
      *(v95 - 1) = *((_OWORD *)v96 - 1);
      *uint64_t v95 = v98;
      v95 -= 2;
      v96 -= 32;
      v97 -= 4;
    }
    while (v97);
    unint64_t v26 = v94;
    if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_160:
      do
      {
        uint64_t v99 = *((void *)v26 - 1);
        v26 -= 8;
        *--xpc_object_t v39 = v99;
      }
      while (v26 != v25);
    }
    char v25 = (char *)*((void *)&v136 + 1);
    *((void *)&v136 + 1) = v39;
    *(void *)&long long v137 = v32;
    *((void *)&v137 + 1) = v40;
    if (!v25) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (!v28) {
    goto LABEL_154;
  }
  unint64_t v29 = v28 + 10;
LABEL_45:
  v24((uint64_t)v128, v29);
  v124[0] = MEMORY[0x1E4F143A8];
  v124[1] = 0x40000000;
  xpc_object_t v41 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
  v125 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
  v126 = &__block_descriptor_tmp_99_0;
  uint64_t v127 = a2;
  xpc_object_t v42 = (char *)*((void *)&v136 + 1);
  unint64_t v43 = (char *)v137;
  xpc_object_t v44 = (const void **)*((void *)&v136 + 1);
  if (*((void *)&v136 + 1) != (void)v137)
  {
    xpc_object_t v44 = (const void **)*((void *)&v136 + 1);
    while (*((unsigned char *)*v44 + 8) != 18)
    {
      if (++v44 == (const void **)v137) {
        goto LABEL_53;
      }
    }
  }
  if (v44 == (const void **)v137)
  {
LABEL_53:
    xpc_object_t v47 = operator new(0x10uLL);
    uint64_t v48 = v47;
    v47[8] = 18;
    *(void *)xpc_object_t v47 = &unk_1F12660F8;
    *((_WORD *)v47 + 5) = 0;
    xpc_object_t v46 = v47 + 10;
    if ((unint64_t)v43 < *((void *)&v137 + 1))
    {
      *(void *)unint64_t v43 = v47;
      uint64_t v49 = (uint64_t)(v43 + 8);
LABEL_66:
      *(void *)&long long v137 = v49;
      xpc_object_t v41 = v125;
      goto LABEL_67;
    }
    int64_t v50 = v43 - v42;
    uint64_t v51 = (v43 - v42) >> 3;
    unint64_t v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 61) {
      goto LABEL_155;
    }
    uint64_t v53 = *((void *)&v137 + 1) - (void)v42;
    if ((uint64_t)(*((void *)&v137 + 1) - (void)v42) >> 2 > v52) {
      unint64_t v52 = v53 >> 2;
    }
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v52;
    }
    if (v54)
    {
      if (v54 >> 61) {
        goto LABEL_156;
      }
      long long v55 = operator new(8 * v54);
      uint64_t v56 = &v55[8 * v51];
      unint64_t v57 = &v55[8 * v54];
      void *v56 = v48;
      uint64_t v49 = (uint64_t)(v56 + 1);
      if (v42 == v43)
      {
LABEL_64:
        *((void *)&v136 + 1) = v56;
        *(void *)&long long v137 = v49;
        *((void *)&v137 + 1) = v57;
        if (!v42) {
          goto LABEL_66;
        }
LABEL_65:
        operator delete(v42);
        goto LABEL_66;
      }
    }
    else
    {
      long long v55 = 0;
      uint64_t v56 = (void *)(8 * v51);
      unint64_t v57 = 0;
      *(void *)(8 * v51) = v48;
      uint64_t v49 = 8 * v51 + 8;
      if (v42 == v43) {
        goto LABEL_64;
      }
    }
    if ((unint64_t)(v50 - 8) < 0x58) {
      goto LABEL_161;
    }
    if ((unint64_t)(v42 - v55) < 0x20) {
      goto LABEL_161;
    }
    unint64_t v100 = ((unint64_t)(v50 - 8) >> 3) + 1;
    uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v102 = &v43[-v101];
    uint64_t v56 = (void *)((char *)v56 - v101);
    xpc_object_t v103 = &v55[8 * v51 - 16];
    uint64_t v104 = v43 - 16;
    uint64_t v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v106 = *(_OWORD *)v104;
      *(v103 - 1) = *((_OWORD *)v104 - 1);
      *xpc_object_t v103 = v106;
      v103 -= 2;
      v104 -= 32;
      v105 -= 4;
    }
    while (v105);
    unint64_t v43 = v102;
    if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_161:
      do
      {
        uint64_t v107 = *((void *)v43 - 1);
        v43 -= 8;
        *--uint64_t v56 = v107;
      }
      while (v43 != v42);
    }
    xpc_object_t v42 = (char *)*((void *)&v136 + 1);
    *((void *)&v136 + 1) = v56;
    *(void *)&long long v137 = v49;
    *((void *)&v137 + 1) = v57;
    if (!v42) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (!v45) {
    goto LABEL_154;
  }
  xpc_object_t v46 = v45 + 10;
LABEL_67:
  v41((uint64_t)v124, v46);
  v120[0] = MEMORY[0x1E4F143A8];
  v120[1] = 0x40000000;
  uint64_t v58 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
  v121 = (void (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
  unint64_t v122 = &__block_descriptor_tmp_101_0;
  uint64_t v123 = a2;
  unint64_t v59 = (char *)*((void *)&v136 + 1);
  long long v60 = (char *)v137;
  long long v61 = (const void **)*((void *)&v136 + 1);
  if (*((void *)&v136 + 1) != (void)v137)
  {
    long long v61 = (const void **)*((void *)&v136 + 1);
    while (*((unsigned char *)*v61 + 8) != 19)
    {
      if (++v61 == (const void **)v137) {
        goto LABEL_75;
      }
    }
  }
  if (v61 != (const void **)v137)
  {
    if (v62)
    {
      char v63 = v62 + 10;
      goto LABEL_89;
    }
LABEL_154:
    __cxa_bad_cast();
  }
LABEL_75:
  uint64_t v64 = operator new(0x10uLL);
  uint64_t v65 = v64;
  v64[8] = 19;
  *(void *)uint64_t v64 = &unk_1F1266148;
  *((_WORD *)v64 + 5) = 0;
  char v63 = v64 + 10;
  if ((unint64_t)v60 >= *((void *)&v137 + 1))
  {
    int64_t v67 = v60 - v59;
    uint64_t v68 = (v60 - v59) >> 3;
    unint64_t v69 = v68 + 1;
    if (!((unint64_t)(v68 + 1) >> 61))
    {
      uint64_t v70 = *((void *)&v137 + 1) - (void)v59;
      if ((uint64_t)(*((void *)&v137 + 1) - (void)v59) >> 2 > v69) {
        unint64_t v69 = v70 >> 2;
      }
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v71 = v69;
      }
      if (!v71)
      {
        int64_t v72 = 0;
        dispatch_object_t v73 = (void *)(8 * v68);
        unint64_t v74 = 0;
        *(void *)(8 * v68) = v65;
        uint64_t v66 = 8 * v68 + 8;
        if (v59 == v60)
        {
LABEL_86:
          *((void *)&v136 + 1) = v73;
          *(void *)&long long v137 = v66;
          *((void *)&v137 + 1) = v74;
          if (!v59) {
            goto LABEL_88;
          }
LABEL_87:
          operator delete(v59);
          goto LABEL_88;
        }
LABEL_145:
        if ((unint64_t)(v67 - 8) < 0x58) {
          goto LABEL_162;
        }
        if ((unint64_t)(v59 - v72) < 0x20) {
          goto LABEL_162;
        }
        unint64_t v108 = ((unint64_t)(v67 - 8) >> 3) + 1;
        uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
        dispatch_object_t v110 = &v60[-v109];
        dispatch_object_t v73 = (void *)((char *)v73 - v109);
        uint64_t v111 = &v72[8 * v68 - 16];
        uint64_t v112 = v60 - 16;
        uint64_t v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v114 = *(_OWORD *)v112;
          *(v111 - 1) = *((_OWORD *)v112 - 1);
          _OWORD *v111 = v114;
          v111 -= 2;
          v112 -= 32;
          v113 -= 4;
        }
        while (v113);
        long long v60 = v110;
        if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_162:
          do
          {
            uint64_t v115 = *((void *)v60 - 1);
            v60 -= 8;
            *--dispatch_object_t v73 = v115;
          }
          while (v60 != v59);
        }
        unint64_t v59 = (char *)*((void *)&v136 + 1);
        *((void *)&v136 + 1) = v73;
        *(void *)&long long v137 = v66;
        *((void *)&v137 + 1) = v74;
        if (!v59) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
      if (!(v71 >> 61))
      {
        int64_t v72 = operator new(8 * v71);
        dispatch_object_t v73 = &v72[8 * v68];
        unint64_t v74 = &v72[8 * v71];
        *dispatch_object_t v73 = v65;
        uint64_t v66 = (uint64_t)(v73 + 1);
        if (v59 == v60) {
          goto LABEL_86;
        }
        goto LABEL_145;
      }
LABEL_156:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_155:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(void *)long long v60 = v64;
  uint64_t v66 = (uint64_t)(v60 + 8);
LABEL_88:
  *(void *)&long long v137 = v66;
  uint64_t v58 = v121;
LABEL_89:
  v58((uint64_t)v120, v63);
  qmi::MutableMessageBase::MutableMessageBase();
  size_t v75 = *(void **)v116;
  if (*(void *)v116) {
    size_t v75 = _Block_copy(v75);
  }
  unint64_t v76 = *(NSObject **)(v116 + 8);
  xpc_object_t aBlock = v75;
  xpc_object_t object = v76;
  if (v76) {
    dispatch_retain(v76);
  }
  long long v77 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v77 || (v78 = *(void *)(a1 + 72), (uint64_t v79 = std::__shared_weak_count::lock(v77)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v80 = v79;
  p_shared_weak_owners = &v79->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v79->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v80);
  }
  v143[0] = MEMORY[0x1E4F143A8];
  v143[1] = 1174405120;
  v143[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v143[3] = &__block_descriptor_tmp_195_0;
  v143[4] = a1;
  v143[5] = v78;
  v144 = v80;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    uint64_t v82 = object;
    v145 = _Block_copy(aBlock);
    dispatch_object_t v146 = object;
    if (!object) {
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  uint64_t v82 = object;
  v145 = 0;
  dispatch_object_t v146 = object;
  if (object) {
LABEL_99:
  }
    dispatch_retain(v82);
LABEL_100:
  uint64_t v138 = a1 + 184;
  uint64_t v139 = QMIServiceMsg::create();
  int v140 = 25000;
  uint64_t v141 = 0;
  unint64_t v142 = 0;
  v147[0] = MEMORY[0x1E4F143A8];
  v147[1] = 0x40000000;
  v147[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v147[3] = &unk_1E6195510;
  v147[4] = v143;
  uint64_t v83 = _Block_copy(v147);
  unint64_t v142 = v83;
  if (v139)
  {
    qmi::Client::send();
    uint64_t v83 = v142;
  }
  if (v83) {
    _Block_release(v83);
  }
  if (v146) {
    dispatch_release(v146);
  }
  if (v145) {
    _Block_release(v145);
  }
  if (v144) {
    std::__shared_weak_count::__release_weak(v144);
  }
  std::__shared_weak_count::__release_weak(v80);
  if (v82) {
    dispatch_release(v82);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v119);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v136);
}

void sub_1B8BB6884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a41);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v42 + 56);
  xpc_object_t v45 = *(std::__shared_weak_count **)(v43 - 168);
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  std::__shared_weak_count::__release_weak(v41);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a37);
  _Unwind_Resume(a1);
}

void sub_1B8BB68E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9CF8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB6968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9CC8]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB69F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9C80]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB6A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4(uint64_t a1, _WORD *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E4FB9C78]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B8BB6B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void antenna::QMICommandDriver::workoutInfo_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v144 = v4;
  long long v145 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v144);
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kKeyWorkoutType");
  *(void *)long long buf = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  __int16 v6 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v7 = xpc_dictionary_get_value(*a2, "kKeyWorkoutState");
  *(void *)long long buf = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  __int16 v8 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v9 = xpc_dictionary_get_value(*a2, "kKeyWorkoutLocation");
  *(void *)long long buf = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  __int16 v10 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v11 = xpc_dictionary_get_value(*a2, "kKeySwimLocation");
  *(void *)long long buf = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  __int16 v123 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  char v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v6;
    LOWORD(v153) = 1024;
    *(_DWORD *)((char *)&v153 + 2) = v8;
    HIWORD(v153) = 1024;
    LODWORD(v154) = v10;
    WORD2(v154) = 1024;
    *(_DWORD *)((char *)&v154 + 6) = v123;
    _os_log_impl(&dword_1B8B00000, v12, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d State=%d Loc=%d SwimLoc=%d", buf, 0x1Au);
  }
  v140[0] = MEMORY[0x1E4F143A8];
  v140[1] = 0x40000000;
  int v13 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  uint64_t v141 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  unint64_t v142 = &__block_descriptor_tmp_103;
  __int16 v143 = v6;
  uint64_t v14 = (char *)*((void *)&v144 + 1);
  uint64_t v15 = (char *)v145;
  int64_t v16 = (const void **)*((void *)&v144 + 1);
  if (*((void *)&v144 + 1) != (void)v145)
  {
    int64_t v16 = (const void **)*((void *)&v144 + 1);
    while (*((unsigned char *)*v16 + 8) != 16)
    {
      if (++v16 == (const void **)v145) {
        goto LABEL_23;
      }
    }
  }
  if (v16 == (const void **)v145)
  {
LABEL_23:
    uint64_t v19 = operator new(0x10uLL);
    unint64_t v20 = v19;
    v19[8] = 16;
    *(void *)uint64_t v19 = &unk_1F12661C8;
    *((_WORD *)v19 + 5) = 0;
    unint64_t v18 = v19 + 10;
    if ((unint64_t)v15 < *((void *)&v145 + 1))
    {
      *(void *)uint64_t v15 = v19;
      uint64_t v21 = (uint64_t)(v15 + 8);
LABEL_36:
      *(void *)&long long v145 = v21;
      int v13 = v141;
      goto LABEL_37;
    }
    int64_t v22 = v15 - v14;
    uint64_t v23 = (v15 - v14) >> 3;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      goto LABEL_173;
    }
    uint64_t v25 = *((void *)&v145 + 1) - (void)v14;
    if ((uint64_t)(*((void *)&v145 + 1) - (void)v14) >> 2 > v24) {
      unint64_t v24 = v25 >> 2;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 61) {
        goto LABEL_174;
      }
      int v27 = operator new(8 * v26);
      size_t v28 = &v27[8 * v23];
      unint64_t v29 = &v27[8 * v26];
      void *v28 = v20;
      uint64_t v21 = (uint64_t)(v28 + 1);
      if (v14 == v15)
      {
LABEL_34:
        *((void *)&v144 + 1) = v28;
        *(void *)&long long v145 = v21;
        *((void *)&v145 + 1) = v29;
        if (!v14) {
          goto LABEL_36;
        }
LABEL_35:
        operator delete(v14);
        goto LABEL_36;
      }
    }
    else
    {
      int v27 = 0;
      size_t v28 = (void *)(8 * v23);
      unint64_t v29 = 0;
      *(void *)(8 * v23) = v20;
      uint64_t v21 = 8 * v23 + 8;
      if (v14 == v15) {
        goto LABEL_34;
      }
    }
    if ((unint64_t)(v22 - 8) < 0x58) {
      goto LABEL_177;
    }
    if ((unint64_t)(v14 - v27) < 0x20) {
      goto LABEL_177;
    }
    unint64_t v90 = ((unint64_t)(v22 - 8) >> 3) + 1;
    uint64_t v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v92 = &v15[-v91];
    size_t v28 = (void *)((char *)v28 - v91);
    uint64_t v93 = &v27[8 * v23 - 16];
    long long v94 = v15 - 16;
    uint64_t v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v96 = *(_OWORD *)v94;
      *(v93 - 1) = *((_OWORD *)v94 - 1);
      *uint64_t v93 = v96;
      v93 -= 2;
      v94 -= 32;
      v95 -= 4;
    }
    while (v95);
    uint64_t v15 = v92;
    if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_177:
      do
      {
        uint64_t v97 = *((void *)v15 - 1);
        v15 -= 8;
        *--size_t v28 = v97;
      }
      while (v15 != v14);
    }
    uint64_t v14 = (char *)*((void *)&v144 + 1);
    *((void *)&v144 + 1) = v28;
    *(void *)&long long v145 = v21;
    *((void *)&v145 + 1) = v29;
    if (!v14) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!v17) {
    goto LABEL_172;
  }
  unint64_t v18 = v17 + 10;
LABEL_37:
  v13((uint64_t)v140, v18);
  v136[0] = MEMORY[0x1E4F143A8];
  v136[1] = 0x40000000;
  unint64_t v30 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  long long v137 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  uint64_t v138 = &__block_descriptor_tmp_105;
  __int16 v139 = v8;
  int v31 = (char *)*((void *)&v144 + 1);
  uint64_t v32 = (char *)v145;
  int64_t v33 = (const void **)*((void *)&v144 + 1);
  if (*((void *)&v144 + 1) != (void)v145)
  {
    int64_t v33 = (const void **)*((void *)&v144 + 1);
    while (*((unsigned char *)*v33 + 8) != 17)
    {
      if (++v33 == (const void **)v145) {
        goto LABEL_45;
      }
    }
  }
  if (v33 == (const void **)v145)
  {
LABEL_45:
    uint64_t v36 = operator new(0x10uLL);
    unint64_t v37 = v36;
    v36[8] = 17;
    *(void *)uint64_t v36 = &unk_1F1266218;
    *((_WORD *)v36 + 5) = 0;
    unint64_t v35 = v36 + 10;
    if ((unint64_t)v32 < *((void *)&v145 + 1))
    {
      *(void *)uint64_t v32 = v36;
      uint64_t v38 = (uint64_t)(v32 + 8);
LABEL_58:
      *(void *)&long long v145 = v38;
      unint64_t v30 = v137;
      goto LABEL_59;
    }
    int64_t v39 = v32 - v31;
    uint64_t v40 = (v32 - v31) >> 3;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      goto LABEL_173;
    }
    uint64_t v42 = *((void *)&v145 + 1) - (void)v31;
    if ((uint64_t)(*((void *)&v145 + 1) - (void)v31) >> 2 > v41) {
      unint64_t v41 = v42 >> 2;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43)
    {
      if (v43 >> 61) {
        goto LABEL_174;
      }
      xpc_object_t v44 = operator new(8 * v43);
      xpc_object_t v45 = &v44[8 * v40];
      xpc_object_t v46 = &v44[8 * v43];
      void *v45 = v37;
      uint64_t v38 = (uint64_t)(v45 + 1);
      if (v31 == v32)
      {
LABEL_56:
        *((void *)&v144 + 1) = v45;
        *(void *)&long long v145 = v38;
        *((void *)&v145 + 1) = v46;
        if (!v31) {
          goto LABEL_58;
        }
LABEL_57:
        operator delete(v31);
        goto LABEL_58;
      }
    }
    else
    {
      xpc_object_t v44 = 0;
      xpc_object_t v45 = (void *)(8 * v40);
      xpc_object_t v46 = 0;
      *(void *)(8 * v40) = v37;
      uint64_t v38 = 8 * v40 + 8;
      if (v31 == v32) {
        goto LABEL_56;
      }
    }
    if ((unint64_t)(v39 - 8) < 0x58) {
      goto LABEL_178;
    }
    if ((unint64_t)(v31 - v44) < 0x20) {
      goto LABEL_178;
    }
    unint64_t v98 = ((unint64_t)(v39 - 8) >> 3) + 1;
    uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v100 = &v32[-v99];
    xpc_object_t v45 = (void *)((char *)v45 - v99);
    uint64_t v101 = &v44[8 * v40 - 16];
    uint64_t v102 = v32 - 16;
    uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v104 = *(_OWORD *)v102;
      *(v101 - 1) = *((_OWORD *)v102 - 1);
      *uint64_t v101 = v104;
      v101 -= 2;
      v102 -= 32;
      v103 -= 4;
    }
    while (v103);
    uint64_t v32 = v100;
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_178:
      do
      {
        uint64_t v105 = *((void *)v32 - 1);
        v32 -= 8;
        *--xpc_object_t v45 = v105;
      }
      while (v32 != v31);
    }
    int v31 = (char *)*((void *)&v144 + 1);
    *((void *)&v144 + 1) = v45;
    *(void *)&long long v145 = v38;
    *((void *)&v145 + 1) = v46;
    if (!v31) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (!v34) {
    goto LABEL_172;
  }
  unint64_t v35 = v34 + 10;
LABEL_59:
  v30((uint64_t)v136, v35);
  if (!v10) {
    goto LABEL_83;
  }
  v132[0] = MEMORY[0x1E4F143A8];
  v132[1] = 0x40000000;
  xpc_object_t v47 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
  uint64_t v133 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
  unint64_t v134 = &__block_descriptor_tmp_107_0;
  __int16 v135 = v10;
  uint64_t v48 = (char *)*((void *)&v144 + 1);
  uint64_t v49 = (char *)v145;
  int64_t v50 = (const void **)*((void *)&v144 + 1);
  if (*((void *)&v144 + 1) != (void)v145)
  {
    int64_t v50 = (const void **)*((void *)&v144 + 1);
    while (*((unsigned char *)*v50 + 8) != 18)
    {
      if (++v50 == (const void **)v145) {
        goto LABEL_68;
      }
    }
  }
  if (v50 != (const void **)v145)
  {
    if (!v51) {
      goto LABEL_172;
    }
    unint64_t v52 = v51 + 10;
    goto LABEL_82;
  }
LABEL_68:
  uint64_t v53 = operator new(0x10uLL);
  unint64_t v54 = v53;
  v53[8] = 18;
  *(void *)uint64_t v53 = &unk_1F1266268;
  *((_WORD *)v53 + 5) = 0;
  unint64_t v52 = v53 + 10;
  if ((unint64_t)v49 >= *((void *)&v145 + 1))
  {
    int64_t v56 = v49 - v48;
    uint64_t v57 = (v49 - v48) >> 3;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 61) {
      goto LABEL_173;
    }
    uint64_t v59 = *((void *)&v145 + 1) - (void)v48;
    if ((uint64_t)(*((void *)&v145 + 1) - (void)v48) >> 2 > v58) {
      unint64_t v58 = v59 >> 2;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v58;
    }
    if (v60)
    {
      if (v60 >> 61) {
        goto LABEL_174;
      }
      long long v61 = operator new(8 * v60);
      uint64_t v62 = &v61[8 * v57];
      char v63 = &v61[8 * v60];
      void *v62 = v54;
      uint64_t v55 = (uint64_t)(v62 + 1);
      if (v48 == v49)
      {
LABEL_79:
        *((void *)&v144 + 1) = v62;
        *(void *)&long long v145 = v55;
        *((void *)&v145 + 1) = v63;
        if (!v48) {
          goto LABEL_81;
        }
LABEL_80:
        operator delete(v48);
        goto LABEL_81;
      }
    }
    else
    {
      long long v61 = 0;
      uint64_t v62 = (void *)(8 * v57);
      char v63 = 0;
      *(void *)(8 * v57) = v54;
      uint64_t v55 = 8 * v57 + 8;
      if (v48 == v49) {
        goto LABEL_79;
      }
    }
    if ((unint64_t)(v56 - 8) < 0x58) {
      goto LABEL_179;
    }
    if ((unint64_t)(v48 - v61) < 0x20) {
      goto LABEL_179;
    }
    unint64_t v106 = ((unint64_t)(v56 - 8) >> 3) + 1;
    uint64_t v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v108 = &v49[-v107];
    uint64_t v62 = (void *)((char *)v62 - v107);
    uint64_t v109 = &v61[8 * v57 - 16];
    dispatch_object_t v110 = v49 - 16;
    uint64_t v111 = v106 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v112 = *(_OWORD *)v110;
      *(v109 - 1) = *((_OWORD *)v110 - 1);
      _OWORD *v109 = v112;
      v109 -= 2;
      v110 -= 32;
      v111 -= 4;
    }
    while (v111);
    uint64_t v49 = v108;
    if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_179:
      do
      {
        uint64_t v113 = *((void *)v49 - 1);
        v49 -= 8;
        *--uint64_t v62 = v113;
      }
      while (v49 != v48);
    }
    uint64_t v48 = (char *)*((void *)&v144 + 1);
    *((void *)&v144 + 1) = v62;
    *(void *)&long long v145 = v55;
    *((void *)&v145 + 1) = v63;
    if (!v48) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  *(void *)uint64_t v49 = v53;
  uint64_t v55 = (uint64_t)(v49 + 8);
LABEL_81:
  *(void *)&long long v145 = v55;
  xpc_object_t v47 = v133;
LABEL_82:
  v47((uint64_t)v132, v52);
LABEL_83:
  if (!v123) {
    goto LABEL_107;
  }
  v128[0] = MEMORY[0x1E4F143A8];
  v128[1] = 0x40000000;
  uint64_t v64 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
  uint64_t v129 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
  char v130 = &__block_descriptor_tmp_109_0;
  __int16 v131 = v123;
  uint64_t v65 = (char *)*((void *)&v144 + 1);
  uint64_t v66 = (char *)v145;
  int64_t v67 = (const void **)*((void *)&v144 + 1);
  if (*((void *)&v144 + 1) != (void)v145)
  {
    int64_t v67 = (const void **)*((void *)&v144 + 1);
    while (*((unsigned char *)*v67 + 8) != 19)
    {
      if (++v67 == (const void **)v145) {
        goto LABEL_92;
      }
    }
  }
  if (v67 == (const void **)v145)
  {
LABEL_92:
    uint64_t v70 = operator new(0x10uLL);
    unint64_t v71 = v70;
    v70[8] = 19;
    *(void *)uint64_t v70 = &unk_1F12662B8;
    *((_WORD *)v70 + 5) = 0;
    unint64_t v69 = v70 + 10;
    if ((unint64_t)v66 < *((void *)&v145 + 1))
    {
      *(void *)uint64_t v66 = v70;
      uint64_t v72 = (uint64_t)(v66 + 8);
LABEL_105:
      *(void *)&long long v145 = v72;
      uint64_t v64 = v129;
      goto LABEL_106;
    }
    int64_t v73 = v66 - v65;
    uint64_t v74 = (v66 - v65) >> 3;
    unint64_t v75 = v74 + 1;
    if (!((unint64_t)(v74 + 1) >> 61))
    {
      uint64_t v76 = *((void *)&v145 + 1) - (void)v65;
      if ((uint64_t)(*((void *)&v145 + 1) - (void)v65) >> 2 > v75) {
        unint64_t v75 = v76 >> 2;
      }
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v77 = v75;
      }
      if (!v77)
      {
        uint64_t v78 = 0;
        uint64_t v79 = (void *)(8 * v74);
        uint64_t v80 = 0;
        *(void *)(8 * v74) = v71;
        uint64_t v72 = 8 * v74 + 8;
        if (v65 == v66)
        {
LABEL_103:
          *((void *)&v144 + 1) = v79;
          *(void *)&long long v145 = v72;
          *((void *)&v145 + 1) = v80;
          if (!v65) {
            goto LABEL_105;
          }
LABEL_104:
          operator delete(v65);
          goto LABEL_105;
        }
LABEL_163:
        if ((unint64_t)(v73 - 8) < 0x58) {
          goto LABEL_180;
        }
        if ((unint64_t)(v65 - v78) < 0x20) {
          goto LABEL_180;
        }
        unint64_t v114 = ((unint64_t)(v73 - 8) >> 3) + 1;
        uint64_t v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v116 = &v66[-v115];
        uint64_t v79 = (void *)((char *)v79 - v115);
        uint64_t v117 = &v78[8 * v74 - 16];
        unint64_t v118 = v66 - 16;
        uint64_t v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v120 = *(_OWORD *)v118;
          *(v117 - 1) = *((_OWORD *)v118 - 1);
          _OWORD *v117 = v120;
          v117 -= 2;
          v118 -= 32;
          v119 -= 4;
        }
        while (v119);
        uint64_t v66 = v116;
        if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_180:
          do
          {
            uint64_t v121 = *((void *)v66 - 1);
            v66 -= 8;
            *--uint64_t v79 = v121;
          }
          while (v66 != v65);
        }
        uint64_t v65 = (char *)*((void *)&v144 + 1);
        *((void *)&v144 + 1) = v79;
        *(void *)&long long v145 = v72;
        *((void *)&v145 + 1) = v80;
        if (!v65) {
          goto LABEL_105;
        }
        goto LABEL_104;
      }
      if (!(v77 >> 61))
      {
        uint64_t v78 = operator new(8 * v77);
        uint64_t v79 = &v78[8 * v74];
        uint64_t v80 = &v78[8 * v77];
        *uint64_t v79 = v71;
        uint64_t v72 = (uint64_t)(v79 + 1);
        if (v65 == v66) {
          goto LABEL_103;
        }
        goto LABEL_163;
      }
LABEL_174:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_173:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v68) {
LABEL_172:
  }
    __cxa_bad_cast();
  unint64_t v69 = v68 + 10;
LABEL_106:
  v64((uint64_t)v128, v69);
LABEL_107:
  qmi::MutableMessageBase::MutableMessageBase();
  uint64_t v81 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v81 = _Block_copy(v81);
  }
  uint64_t v82 = *(NSObject **)(a3 + 8);
  xpc_object_t aBlock = v81;
  xpc_object_t object = v82;
  if (v82) {
    dispatch_retain(v82);
  }
  uint64_t v83 = (std::__shared_weak_count *)a1[10];
  if (!v83 || (uint64_t v84 = a1[9], (v85 = std::__shared_weak_count::lock(v83)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v86 = v85;
  p_shared_weak_owners = &v85->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v86);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v153 = 1174405120;
  *(void *)&long long v154 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  *((void *)&v154 + 1) = &__block_descriptor_tmp_199;
  v155 = a1;
  uint64_t v156 = v84;
  v157 = v86;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    uint64_t v88 = object;
    v158 = _Block_copy(aBlock);
    dispatch_object_t v159 = object;
    if (!object) {
      goto LABEL_118;
    }
    goto LABEL_117;
  }
  uint64_t v88 = object;
  v158 = 0;
  dispatch_object_t v159 = object;
  if (object) {
LABEL_117:
  }
    dispatch_retain(v88);
LABEL_118:
  dispatch_object_t v146 = a1 + 23;
  uint64_t v147 = QMIServiceMsg::create();
  int v148 = 25000;
  uint64_t v149 = 0;
  v150 = 0;
  v151[0] = MEMORY[0x1E4F143A8];
  v151[1] = 0x40000000;
  v151[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v151[3] = &unk_1E6195510;
  v151[4] = buf;
  uint64_t v89 = _Block_copy(v151);
  v150 = v89;
  if (v147)
  {
    qmi::Client::send();
    uint64_t v89 = v150;
  }
  if (v89) {
    _Block_release(v89);
  }
  if (v159) {
    dispatch_release(v159);
  }
  if (v158) {
    _Block_release(v158);
  }
  if (v157) {
    std::__shared_weak_count::__release_weak(v157);
  }
  std::__shared_weak_count::__release_weak(v86);
  if (v88) {
    dispatch_release(v88);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v127);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v144);
}

void sub_1B8BB78E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

uint64_t ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

uint64_t ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

uint64_t ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void antenna::QMICommandDriver::sendSensorID(uint64_t a1, int a2, uint64_t a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  v8[2] = ___ZN7antenna16QMICommandDriver12sendSensorIDEjN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_112_0;
  v8[4] = a1;
  int v11 = a2;
  uint64_t v5 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v5 = _Block_copy(v5);
  }
  __int16 v6 = (uint64_t *)(a1 + 72);
  xpc_object_t v7 = *(NSObject **)(a3 + 8);
  xpc_object_t aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN7antenna16QMICommandDriver12sendSensorIDEjN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v3;
  long long v46 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v45);
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 0x40000000;
  long long v4 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver12sendSensorIDEjN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_2;
  uint64_t v42 = (uint64_t (*)(uint64_t, char *))___ZN7antenna16QMICommandDriver12sendSensorIDEjN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_2;
  unint64_t v43 = &__block_descriptor_tmp_111;
  int v44 = *(_DWORD *)(a1 + 56);
  uint64_t v5 = (char *)*((void *)&v45 + 1);
  __int16 v6 = (char *)v46;
  xpc_object_t v7 = (const void **)*((void *)&v45 + 1);
  if (*((void *)&v45 + 1) != (void)v46)
  {
    xpc_object_t v7 = (const void **)*((void *)&v45 + 1);
    while (*((unsigned char *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v46) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == (const void **)v46)
  {
LABEL_9:
    __int16 v10 = operator new(0x10uLL);
    int v11 = v10;
    v10[8] = 16;
    *(void *)__int16 v10 = &unk_1F1266338;
    *((_DWORD *)v10 + 3) = 0;
    xpc_object_t v9 = v10 + 12;
    if ((unint64_t)v6 < *((void *)&v46 + 1))
    {
      *(void *)__int16 v6 = v10;
      uint64_t v12 = (uint64_t)(v6 + 8);
LABEL_22:
      *(void *)&long long v46 = v12;
      long long v4 = v42;
      goto LABEL_23;
    }
    int64_t v13 = v6 - v5;
    uint64_t v14 = (v6 - v5) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = *((void *)&v46 + 1) - (void)v5;
    if ((uint64_t)(*((void *)&v46 + 1) - (void)v5) >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v18 = operator new(8 * v17);
      uint64_t v19 = &v18[8 * v14];
      unint64_t v20 = &v18[8 * v17];
      *uint64_t v19 = v11;
      uint64_t v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((void *)&v45 + 1) = v19;
        *(void *)&long long v46 = v12;
        *((void *)&v46 + 1) = v20;
        if (!v5) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = (void *)(8 * v14);
      unint64_t v20 = 0;
      *(void *)(8 * v14) = v11;
      uint64_t v12 = 8 * v14 + 8;
      if (v5 == v6) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58) {
      goto LABEL_66;
    }
    if ((unint64_t)(v5 - v18) < 0x20) {
      goto LABEL_66;
    }
    unint64_t v30 = ((unint64_t)(v13 - 8) >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v32 = &v6[-v31];
    uint64_t v19 = (void *)((char *)v19 - v31);
    int64_t v33 = &v18[8 * v14 - 16];
    uint64_t v34 = v6 - 16;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      _OWORD *v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 4;
    }
    while (v35);
    __int16 v6 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_66:
      do
      {
        uint64_t v37 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v19 = v37;
      }
      while (v6 != v5);
    }
    uint64_t v5 = (char *)*((void *)&v45 + 1);
    *((void *)&v45 + 1) = v19;
    *(void *)&long long v46 = v12;
    *((void *)&v46 + 1) = v20;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v8) {
    __cxa_bad_cast();
  }
  xpc_object_t v9 = v8 + 12;
LABEL_23:
  v4((uint64_t)v41, v9);
  qmi::MutableMessageBase::MutableMessageBase();
  uint64_t v21 = *(void **)(a1 + 40);
  if (v21) {
    uint64_t v21 = _Block_copy(v21);
  }
  int64_t v22 = *(NSObject **)(a1 + 48);
  xpc_object_t aBlock = v21;
  dispatch_object_t object = v22;
  if (v22) {
    dispatch_retain(v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v23 || (uint64_t v24 = *(void *)(v2 + 72), (v25 = std::__shared_weak_count::lock(v23)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v26 = v25;
  p_shared_weak_owners = &v25->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 1174405120;
  void v52[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v52[3] = &__block_descriptor_tmp_203;
  v52[4] = v2;
  v52[5] = v24;
  uint64_t v53 = v26;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (aBlock)
  {
    size_t v28 = object;
    unint64_t v54 = _Block_copy(aBlock);
    dispatch_object_t v55 = object;
    if (!object) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  size_t v28 = object;
  unint64_t v54 = 0;
  dispatch_object_t v55 = object;
  if (object) {
LABEL_33:
  }
    dispatch_retain(v28);
LABEL_34:
  uint64_t v47 = v2 + 184;
  uint64_t v48 = QMIServiceMsg::create();
  int v49 = 25000;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  v56[0] = MEMORY[0x1E4F143A8];
  v56[1] = 0x40000000;
  void v56[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v56[3] = &unk_1E6195510;
  v56[4] = v52;
  unint64_t v29 = _Block_copy(v56);
  uint64_t v51 = v29;
  if (v48)
  {
    qmi::Client::send();
    unint64_t v29 = v51;
  }
  if (v29) {
    _Block_release(v29);
  }
  if (v55) {
    dispatch_release(v55);
  }
  if (v54) {
    _Block_release(v54);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v26);
  if (v28) {
    dispatch_release(v28);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v40);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v45);
}

void sub_1B8BB8030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a25);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v37 + 56);
  if (a36) {
    std::__shared_weak_count::__release_weak(a36);
  }
  std::__shared_weak_count::__release_weak(v36);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B8BB808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver12sendSensorIDEjN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void __copy_helper_block_e8_40c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a2 + 40);
  if (v4) {
    long long v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void antenna::QMICommandDriver::stewieSARWaitTime(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_ERROR, "Not implemented stewie SAR wait time in this product", v2, 2u);
  }
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(antenna::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)antenna::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    __int16 v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12655A8;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12655A8;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<antenna::QMICommandDriver *,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver *)#1},std::allocator<antenna::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::QMICommandDriver *,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver *)#1},std::allocator<antenna::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<antenna::QMICommandDriver *,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver *)#1},std::allocator<antenna::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver*)#1}::operator() const(antenna::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  __int16 v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  xpc_object_t block[3] = &unk_1F1265630;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  __int16 v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(antenna::QMICommandDriver **)(*a1 + 8);
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E4FB9C68]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(object);
  size_t v5 = strlen((const char *)*MEMORY[0x1E4FB9D70]);
  uint64_t v6 = (const void *)v5;
  uint64_t v7 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v5 != -1)
    {
      __int16 v8 = __s1;
      xpc_object_t v9 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_9;
    }
LABEL_309:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v5 == -1) {
    goto LABEL_309;
  }
  __int16 v8 = (const void **)__s1[0];
  xpc_object_t v9 = __s1[1];
LABEL_9:
  if (v9 >= v6) {
    size_t v10 = (size_t)v6;
  }
  else {
    size_t v10 = (size_t)v9;
  }
  if (!memcmp(v8, (const void *)*MEMORY[0x1E4FB9D70], v10) && v9 == v6)
  {
    unint64_t v17 = *(const void **)(v2 + 16);
    if (v17)
    {
      unint64_t v18 = _Block_copy(v17);
      uint64_t v19 = *(NSObject **)(v2 + 24);
      xpc_object_t object = v18;
      uint64_t v119 = v19;
      if (!v19) {
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v18 = 0;
      uint64_t v19 = *(NSObject **)(v2 + 24);
      xpc_object_t object = 0;
      uint64_t v119 = v19;
      if (!v19)
      {
LABEL_26:
        antenna::QMICommandDriver::txPowerCappingEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
        if (v19) {
          dispatch_release(v19);
        }
        if (v18) {
          goto LABEL_298;
        }
        goto LABEL_299;
      }
    }
    dispatch_retain(v19);
    goto LABEL_26;
  }
  uint64_t v12 = (const void *)*MEMORY[0x1E4FB9DE8];
  int64_t v13 = (const void *)strlen((const char *)*MEMORY[0x1E4FB9DE8]);
  uint64_t v14 = v13;
  if ((v7 & 0x80) == 0)
  {
    if (v13 != (const void *)-1)
    {
      unint64_t v15 = v7;
      if (v7 >= v13) {
        size_t v16 = (size_t)v13;
      }
      else {
        size_t v16 = (size_t)v7;
      }
      if (memcmp(__s1, v12, v16)) {
        goto LABEL_43;
      }
LABEL_35:
      if (v15 != v14) {
        goto LABEL_43;
      }
      uint64_t v21 = *(const void **)(v2 + 16);
      if (v21)
      {
        unint64_t v18 = _Block_copy(v21);
        int64_t v22 = *(NSObject **)(v2 + 24);
        xpc_object_t object = v18;
        uint64_t v119 = v22;
        if (!v22) {
          goto LABEL_39;
        }
      }
      else
      {
        unint64_t v18 = 0;
        int64_t v22 = *(NSObject **)(v2 + 24);
        xpc_object_t object = 0;
        uint64_t v119 = v22;
        if (!v22)
        {
LABEL_39:
          antenna::QMICommandDriver::transmitIndicationRegister_sync((uint64_t)v3, (uint64_t)&object);
          if (v22) {
            dispatch_release(v22);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
      }
      dispatch_retain(v22);
      goto LABEL_39;
    }
LABEL_310:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 == (const void *)-1) {
    goto LABEL_310;
  }
  unint64_t v15 = __s1[1];
  if (__s1[1] >= v13) {
    unint64_t v20 = v13;
  }
  else {
    unint64_t v20 = __s1[1];
  }
  if (!memcmp(__s1[0], v12, (size_t)v20)) {
    goto LABEL_35;
  }
LABEL_43:
  uint64_t v23 = (const void *)*MEMORY[0x1E4FB9DB8];
  uint64_t v24 = (const void *)strlen((const char *)*MEMORY[0x1E4FB9DB8]);
  uint64_t v25 = v24;
  if ((v7 & 0x80) == 0)
  {
    if (v24 != (const void *)-1)
    {
      unint64_t v26 = v7;
      if (v7 >= v24) {
        size_t v27 = (size_t)v24;
      }
      else {
        size_t v27 = (size_t)v7;
      }
      if (memcmp(__s1, v23, v27)) {
        goto LABEL_65;
      }
LABEL_57:
      if (v26 != v25) {
        goto LABEL_65;
      }
      unint64_t v29 = *(const void **)(v2 + 16);
      if (v29)
      {
        unint64_t v18 = _Block_copy(v29);
        unint64_t v30 = *(NSObject **)(v2 + 24);
        xpc_object_t object = v18;
        uint64_t v119 = v30;
        if (!v30) {
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v18 = 0;
        unint64_t v30 = *(NSObject **)(v2 + 24);
        xpc_object_t object = 0;
        uint64_t v119 = v30;
        if (!v30)
        {
LABEL_61:
          antenna::QMICommandDriver::transmitIndicationEnable_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v30) {
            dispatch_release(v30);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
      }
      dispatch_retain(v30);
      goto LABEL_61;
    }
LABEL_311:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 == (const void *)-1) {
    goto LABEL_311;
  }
  unint64_t v26 = __s1[1];
  if (__s1[1] >= v24) {
    size_t v28 = v24;
  }
  else {
    size_t v28 = __s1[1];
  }
  if (!memcmp(__s1[0], v23, (size_t)v28)) {
    goto LABEL_57;
  }
LABEL_65:
  uint64_t v31 = (const void *)*MEMORY[0x1E4FB9D08];
  uint64_t v32 = (const void *)strlen((const char *)*MEMORY[0x1E4FB9D08]);
  int64_t v33 = v32;
  if ((v7 & 0x80) == 0)
  {
    if (v32 != (const void *)-1)
    {
      uint64_t v34 = v7;
      if (v7 >= v32) {
        size_t v35 = (size_t)v32;
      }
      else {
        size_t v35 = (size_t)v7;
      }
      if (memcmp(__s1, v31, v35)) {
        goto LABEL_87;
      }
LABEL_79:
      if (v34 != v33) {
        goto LABEL_87;
      }
      uint64_t v37 = *(const void **)(v2 + 16);
      if (v37)
      {
        unint64_t v18 = _Block_copy(v37);
        uint64_t v38 = *(NSObject **)(v2 + 24);
        xpc_object_t object = v18;
        uint64_t v119 = v38;
        if (!v38) {
          goto LABEL_83;
        }
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v38 = *(NSObject **)(v2 + 24);
        xpc_object_t object = 0;
        uint64_t v119 = v38;
        if (!v38)
        {
LABEL_83:
          antenna::QMICommandDriver::txPowerCapping_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v38) {
            dispatch_release(v38);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
      }
      dispatch_retain(v38);
      goto LABEL_83;
    }
LABEL_312:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v32 == (const void *)-1) {
    goto LABEL_312;
  }
  uint64_t v34 = __s1[1];
  if (__s1[1] >= v32) {
    long long v36 = v32;
  }
  else {
    long long v36 = __s1[1];
  }
  if (!memcmp(__s1[0], v31, (size_t)v36)) {
    goto LABEL_79;
  }
LABEL_87:
  int64_t v39 = (const void *)*MEMORY[0x1E4FB9D78];
  uint64_t v40 = (const void *)strlen((const char *)*MEMORY[0x1E4FB9D78]);
  unint64_t v41 = v40;
  if ((v7 & 0x80) != 0)
  {
    if (v40 != (const void *)-1)
    {
      uint64_t v42 = __s1[1];
      if (__s1[1] >= v40) {
        int v44 = v40;
      }
      else {
        int v44 = __s1[1];
      }
      if (memcmp(__s1[0], v39, (size_t)v44)) {
        goto LABEL_104;
      }
      goto LABEL_101;
    }
LABEL_313:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == (const void *)-1) {
    goto LABEL_313;
  }
  uint64_t v42 = v7;
  if (v7 >= v40) {
    size_t v43 = (size_t)v40;
  }
  else {
    size_t v43 = (size_t)v7;
  }
  if (memcmp(__s1, v39, v43)) {
    goto LABEL_104;
  }
LABEL_101:
  if (v42 == v41)
  {
    long long v45 = *(const void **)(v2 + 16);
    if (v45) {
      unint64_t v18 = _Block_copy(v45);
    }
    else {
      unint64_t v18 = 0;
    }
    int64_t v56 = *(NSObject **)(v2 + 24);
    xpc_object_t object = v18;
    uint64_t v119 = v56;
    if (v56) {
      dispatch_retain(v56);
    }
    antenna::QMICommandDriver::txPowerConfiguration_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
    if (v56) {
      dispatch_release(v56);
    }
    if (v18) {
      goto LABEL_298;
    }
    goto LABEL_299;
  }
LABEL_104:
  size_t v46 = strlen((const char *)*MEMORY[0x1E4FB9DB0]);
  uint64_t v47 = (const void *)v46;
  if ((v7 & 0x80) == 0)
  {
    if (v46 != -1)
    {
      uint64_t v48 = __s1;
      int v49 = v7;
      goto LABEL_111;
    }
LABEL_314:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v46 == -1) {
    goto LABEL_314;
  }
  uint64_t v48 = (const void **)__s1[0];
  int v49 = __s1[1];
LABEL_111:
  if (v49 >= v47) {
    size_t v50 = (size_t)v47;
  }
  else {
    size_t v50 = (size_t)v49;
  }
  if (memcmp(v48, (const void *)*MEMORY[0x1E4FB9DB0], v50) || v49 != v47)
  {
    size_t v52 = strlen((const char *)*MEMORY[0x1E4FB9DC0]);
    uint64_t v53 = (const void *)v52;
    if ((v7 & 0x80) != 0)
    {
      if (v52 != -1)
      {
        unint64_t v54 = (const void **)__s1[0];
        dispatch_object_t v55 = __s1[1];
LABEL_130:
        if (v55 >= v53) {
          size_t v57 = (size_t)v53;
        }
        else {
          size_t v57 = (size_t)v55;
        }
        if (!memcmp(v54, (const void *)*MEMORY[0x1E4FB9DC0], v57) && v55 == v53)
        {
          unint64_t v58 = *(const void **)(v2 + 16);
          if (v58) {
            unint64_t v18 = _Block_copy(v58);
          }
          else {
            unint64_t v18 = 0;
          }
          uint64_t v70 = *(NSObject **)(v2 + 24);
          xpc_object_t object = v18;
          uint64_t v119 = v70;
          if (v70) {
            dispatch_retain(v70);
          }
          antenna::QMICommandDriver::e75AccessoryStatusARTD_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v70) {
            dispatch_release(v70);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
        size_t v59 = strlen((const char *)*MEMORY[0x1E4FB9CF0]);
        unint64_t v60 = (const void *)v59;
        if ((v7 & 0x80) != 0)
        {
          if (v59 != -1)
          {
            long long v61 = (const void **)__s1[0];
            uint64_t v62 = __s1[1];
LABEL_149:
            if (v62 >= v60) {
              size_t v64 = (size_t)v60;
            }
            else {
              size_t v64 = (size_t)v62;
            }
            if (!memcmp(v61, (const void *)*MEMORY[0x1E4FB9CF0], v64) && v62 == v60)
            {
              uint64_t v65 = *(const void **)(v2 + 16);
              if (v65) {
                unint64_t v18 = _Block_copy(v65);
              }
              else {
                unint64_t v18 = 0;
              }
              unint64_t v77 = *(NSObject **)(v2 + 24);
              xpc_object_t object = v18;
              uint64_t v119 = v77;
              if (v77) {
                dispatch_retain(v77);
              }
              antenna::QMICommandDriver::antennaSwitch_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
              goto LABEL_295;
            }
            size_t v66 = strlen((const char *)*MEMORY[0x1E4FB9D90]);
            int64_t v67 = (const void *)v66;
            if ((v7 & 0x80) != 0)
            {
              if (v66 != -1)
              {
                uint64_t v68 = (const void **)__s1[0];
                unint64_t v69 = __s1[1];
LABEL_168:
                if (v69 >= v67) {
                  size_t v71 = (size_t)v67;
                }
                else {
                  size_t v71 = (size_t)v69;
                }
                if (!memcmp(v68, (const void *)*MEMORY[0x1E4FB9D90], v71) && v69 == v67)
                {
                  uint64_t v72 = *(const void **)(v2 + 16);
                  if (v72) {
                    unint64_t v18 = _Block_copy(v72);
                  }
                  else {
                    unint64_t v18 = 0;
                  }
                  unint64_t v77 = *(NSObject **)(v2 + 24);
                  xpc_object_t object = v18;
                  uint64_t v119 = v77;
                  if (v77) {
                    dispatch_retain(v77);
                  }
                  antenna::QMICommandDriver::wiredPortNotification_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                  goto LABEL_295;
                }
                size_t v73 = strlen((const char *)*MEMORY[0x1E4FB9CD8]);
                uint64_t v74 = (const void *)v73;
                if ((v7 & 0x80) != 0)
                {
                  if (v73 != -1)
                  {
                    unint64_t v75 = (const void **)__s1[0];
                    uint64_t v76 = __s1[1];
LABEL_184:
                    if (v76 >= v74) {
                      size_t v78 = (size_t)v74;
                    }
                    else {
                      size_t v78 = (size_t)v76;
                    }
                    if (!memcmp(v75, (const void *)*MEMORY[0x1E4FB9CD8], v78) && v76 == v74)
                    {
                      uint64_t v79 = *(const void **)(v2 + 16);
                      if (v79) {
                        unint64_t v18 = _Block_copy(v79);
                      }
                      else {
                        unint64_t v18 = 0;
                      }
                      unint64_t v77 = *(NSObject **)(v2 + 24);
                      xpc_object_t object = v18;
                      uint64_t v119 = v77;
                      if (v77) {
                        dispatch_retain(v77);
                      }
                      antenna::QMICommandDriver::speakerState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                      goto LABEL_295;
                    }
                    size_t v80 = strlen((const char *)*MEMORY[0x1E4FB9D60]);
                    uint64_t v81 = (const void *)v80;
                    if ((v7 & 0x80) != 0)
                    {
                      if (v80 != -1)
                      {
                        uint64_t v82 = (const void **)__s1[0];
                        uint64_t v83 = __s1[1];
LABEL_200:
                        if (v83 >= v81) {
                          size_t v84 = (size_t)v81;
                        }
                        else {
                          size_t v84 = (size_t)v83;
                        }
                        if (!memcmp(v82, (const void *)*MEMORY[0x1E4FB9D60], v84) && v83 == v81)
                        {
                          uint64_t v85 = *(const void **)(v2 + 16);
                          if (v85) {
                            unint64_t v18 = _Block_copy(v85);
                          }
                          else {
                            unint64_t v18 = 0;
                          }
                          unint64_t v77 = *(NSObject **)(v2 + 24);
                          xpc_object_t object = v18;
                          uint64_t v119 = v77;
                          if (v77) {
                            dispatch_retain(v77);
                          }
                          antenna::QMICommandDriver::handDetectionState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                          goto LABEL_295;
                        }
                        size_t v86 = strlen((const char *)*MEMORY[0x1E4FB9D40]);
                        dispatch_object_t v87 = (const void *)v86;
                        if ((v7 & 0x80) != 0)
                        {
                          if (v86 != -1)
                          {
                            uint64_t v88 = (const void **)__s1[0];
                            uint64_t v89 = __s1[1];
LABEL_216:
                            if (v89 >= v87) {
                              size_t v90 = (size_t)v87;
                            }
                            else {
                              size_t v90 = (size_t)v89;
                            }
                            if (!memcmp(v88, (const void *)*MEMORY[0x1E4FB9D40], v90) && v89 == v87)
                            {
                              uint64_t v91 = *(const void **)(v2 + 16);
                              if (v91) {
                                unint64_t v18 = _Block_copy(v91);
                              }
                              else {
                                unint64_t v18 = 0;
                              }
                              unint64_t v77 = *(NSObject **)(v2 + 24);
                              xpc_object_t object = v18;
                              uint64_t v119 = v77;
                              if (v77) {
                                dispatch_retain(v77);
                              }
                              antenna::QMICommandDriver::powerSourceState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                              goto LABEL_295;
                            }
                            size_t v92 = strlen((const char *)*MEMORY[0x1E4FB9CC0]);
                            uint64_t v93 = (const void *)v92;
                            if ((v7 & 0x80) != 0)
                            {
                              if (v92 != -1)
                              {
                                long long v94 = (const void **)__s1[0];
                                uint64_t v95 = __s1[1];
LABEL_232:
                                if (v95 >= v93) {
                                  size_t v96 = (size_t)v93;
                                }
                                else {
                                  size_t v96 = (size_t)v95;
                                }
                                if (!memcmp(v94, (const void *)*MEMORY[0x1E4FB9CC0], v96) && v95 == v93)
                                {
                                  uint64_t v97 = *(const void **)(v2 + 16);
                                  if (v97) {
                                    unint64_t v18 = _Block_copy(v97);
                                  }
                                  else {
                                    unint64_t v18 = 0;
                                  }
                                  unint64_t v77 = *(NSObject **)(v2 + 24);
                                  xpc_object_t object = v18;
                                  uint64_t v119 = v77;
                                  if (v77) {
                                    dispatch_retain(v77);
                                  }
                                  antenna::QMICommandDriver::ppmEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                  goto LABEL_295;
                                }
                                size_t v98 = strlen((const char *)*MEMORY[0x1E4FB9D88]);
                                uint64_t v99 = (const void *)v98;
                                if ((v7 & 0x80) != 0)
                                {
                                  if (v98 != -1)
                                  {
                                    unint64_t v100 = (const void **)__s1[0];
                                    uint64_t v101 = __s1[1];
LABEL_248:
                                    if (v101 >= v99) {
                                      size_t v102 = (size_t)v99;
                                    }
                                    else {
                                      size_t v102 = (size_t)v101;
                                    }
                                    if (!memcmp(v100, (const void *)*MEMORY[0x1E4FB9D88], v102) && v101 == v99)
                                    {
                                      uint64_t v103 = *(const void **)(v2 + 16);
                                      if (v103) {
                                        unint64_t v18 = _Block_copy(v103);
                                      }
                                      else {
                                        unint64_t v18 = 0;
                                      }
                                      unint64_t v77 = *(NSObject **)(v2 + 24);
                                      xpc_object_t object = v18;
                                      uint64_t v119 = v77;
                                      if (v77) {
                                        dispatch_retain(v77);
                                      }
                                      antenna::QMICommandDriver::ppmRegisterIndication_sync(v3, (uint64_t)&object);
                                      goto LABEL_295;
                                    }
                                    size_t v104 = strlen((const char *)*MEMORY[0x1E4FB9D00]);
                                    uint64_t v105 = (const void *)v104;
                                    if ((v7 & 0x80) != 0)
                                    {
                                      if (v104 != -1)
                                      {
                                        unint64_t v106 = (const void **)__s1[0];
                                        uint64_t v107 = __s1[1];
LABEL_264:
                                        if (v107 >= v105) {
                                          size_t v108 = (size_t)v105;
                                        }
                                        else {
                                          size_t v108 = (size_t)v107;
                                        }
                                        if (!memcmp(v106, (const void *)*MEMORY[0x1E4FB9D00], v108) && v107 == v105)
                                        {
                                          uint64_t v109 = *(const void **)(v2 + 16);
                                          if (v109) {
                                            unint64_t v18 = _Block_copy(v109);
                                          }
                                          else {
                                            unint64_t v18 = 0;
                                          }
                                          unint64_t v77 = *(NSObject **)(v2 + 24);
                                          xpc_object_t object = v18;
                                          uint64_t v119 = v77;
                                          if (v77) {
                                            dispatch_retain(v77);
                                          }
                                          antenna::QMICommandDriver::deviceMaterial_sync((uint64_t)v3, v2, (uint64_t)&object);
LABEL_295:
                                          if (v77)
                                          {
                                            dispatch_release(v77);
                                            unint64_t v18 = object;
                                          }
                                          if (v18) {
                                            goto LABEL_298;
                                          }
                                          goto LABEL_299;
                                        }
                                        size_t v110 = strlen((const char *)*MEMORY[0x1E4FB9CD0]);
                                        uint64_t v111 = (const void *)v110;
                                        if ((v7 & 0x80) != 0)
                                        {
                                          if (v110 != -1)
                                          {
                                            long long v112 = (const void **)__s1[0];
                                            uint64_t v7 = __s1[1];
                                            goto LABEL_280;
                                          }
                                        }
                                        else if (v110 != -1)
                                        {
                                          long long v112 = __s1;
LABEL_280:
                                          if (v7 >= v111) {
                                            size_t v113 = (size_t)v111;
                                          }
                                          else {
                                            size_t v113 = (size_t)v7;
                                          }
                                          if (memcmp(v112, (const void *)*MEMORY[0x1E4FB9CD0], v113) || v7 != v111) {
                                            goto LABEL_299;
                                          }
                                          unint64_t v114 = *(const void **)(v2 + 16);
                                          if (v114) {
                                            unint64_t v18 = _Block_copy(v114);
                                          }
                                          else {
                                            unint64_t v18 = 0;
                                          }
                                          unint64_t v77 = *(NSObject **)(v2 + 24);
                                          xpc_object_t object = v18;
                                          uint64_t v119 = v77;
                                          if (v77) {
                                            dispatch_retain(v77);
                                          }
                                          antenna::QMICommandDriver::workoutInfo_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                          goto LABEL_295;
                                        }
                                        std::string::__throw_out_of_range[abi:ne180100]();
                                      }
                                    }
                                    else if (v104 != -1)
                                    {
                                      unint64_t v106 = __s1;
                                      uint64_t v107 = v7;
                                      goto LABEL_264;
                                    }
                                    std::string::__throw_out_of_range[abi:ne180100]();
                                  }
                                }
                                else if (v98 != -1)
                                {
                                  unint64_t v100 = __s1;
                                  uint64_t v101 = v7;
                                  goto LABEL_248;
                                }
                                std::string::__throw_out_of_range[abi:ne180100]();
                              }
                            }
                            else if (v92 != -1)
                            {
                              long long v94 = __s1;
                              uint64_t v95 = v7;
                              goto LABEL_232;
                            }
                            std::string::__throw_out_of_range[abi:ne180100]();
                          }
                        }
                        else if (v86 != -1)
                        {
                          uint64_t v88 = __s1;
                          uint64_t v89 = v7;
                          goto LABEL_216;
                        }
                        std::string::__throw_out_of_range[abi:ne180100]();
                      }
                    }
                    else if (v80 != -1)
                    {
                      uint64_t v82 = __s1;
                      uint64_t v83 = v7;
                      goto LABEL_200;
                    }
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
                }
                else if (v73 != -1)
                {
                  unint64_t v75 = __s1;
                  uint64_t v76 = v7;
                  goto LABEL_184;
                }
                std::string::__throw_out_of_range[abi:ne180100]();
              }
            }
            else if (v66 != -1)
            {
              uint64_t v68 = __s1;
              unint64_t v69 = v7;
              goto LABEL_168;
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        else if (v59 != -1)
        {
          long long v61 = __s1;
          uint64_t v62 = v7;
          goto LABEL_149;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v52 != -1)
    {
      unint64_t v54 = __s1;
      dispatch_object_t v55 = v7;
      goto LABEL_130;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v51 = *(const void **)(v2 + 16);
  if (v51) {
    unint64_t v18 = _Block_copy(v51);
  }
  else {
    unint64_t v18 = 0;
  }
  char v63 = *(NSObject **)(v2 + 24);
  xpc_object_t object = v18;
  uint64_t v119 = v63;
  if (v63) {
    dispatch_retain(v63);
  }
  antenna::QMICommandDriver::e75AccessoryStatusRF_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
  if (v63) {
    dispatch_release(v63);
  }
  if (v18) {
LABEL_298:
  }
    _Block_release(v18);
LABEL_299:
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
  uint64_t v115 = *(NSObject **)(v2 + 24);
  if (v115) {
    dispatch_release(v115);
  }
  uint64_t v116 = *(const void **)(v2 + 16);
  if (v116) {
    _Block_release(v116);
  }
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  uint64_t v117 = (std::__shared_weak_count *)a1[2];
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  operator delete(a1);
}

void sub_1B8BB9298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v20)
  {
    dispatch_release(v20);
    xpc_object_t v19 = object;
  }
  if (v19) {
    _Block_release(v19);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  int64_t v22 = *(NSObject **)(v18 + 24);
  if (v22) {
    dispatch_release(v22);
  }
  uint64_t v23 = *(const void **)(v18 + 16);
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(*(xpc_object_t *)v18);
  operator delete((void *)v18);
  uint64_t v24 = (std::__shared_weak_count *)v17[2];
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitEnable>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1265688;
  return result;
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::SvcType>(void *a1)
{
  char v2 = operator new(0x10uLL);
  uint64_t v3 = v2;
  v2[4] = 16;
  *(void *)char v2 = &unk_1F12656D8;
  size_t v5 = (char *)a1[2];
  unint64_t v4 = a1[3];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)size_t v5 = v2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  __int16 v8 = (char *)a1[1];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64_t v13 = (char *)operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = v3;
    uint64_t v7 = (uint64_t)(v14 + 8);
    size_t v16 = (char *)(v5 - v8);
    if (v5 == v8) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int64_t v13 = 0;
  uint64_t v14 = (char *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = v3;
  uint64_t v7 = 8 * v9 + 8;
  size_t v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    v14 -= v19;
    unint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = (long long *)(v5 - 16);
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)unint64_t v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    uint64_t v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6) {
    operator delete(v6);
  }
LABEL_23:
  size_t result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SvcType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SvcType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SvcType>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F12656D8;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            unint64_t v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BB9990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BB99A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE56c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v5 = (void *)a2[7];
  if (v5) {
    size_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE56c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(void *a1)
{
  char v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B8BB9CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm20TxPwrLimitIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BB9D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BB9DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BB9DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16TransmitStateInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BB9EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BB9EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BB9EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, BOOL, xpc_object_t *))(v3 + 16))(v3, v1 != 0, &object);
  xpc_release(object);
}

void sub_1B8BB9F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    size_t v5 = _Block_copy(v4);
    uint64_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    uint64_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NotificationEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NotificationEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NotificationEnable>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265788;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBA334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBA348(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TransmitEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TransmitEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TransmitEnable>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265808;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22TransmitStateIndConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BBA67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBA690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BBA6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBA948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBA95C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PhoneBackoffLevel>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PhoneBackoffLevel>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PhoneBackoffLevel>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265888;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F12658D8;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBAEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBAED8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TechType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TechType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TechType>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265958;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMPercentile>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMPercentile>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMPercentile>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F12659A8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMDutyCycle>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMDutyCycle>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMDutyCycle>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F12659F8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeout>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeout>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeout>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265A48;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeoutPhone>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeoutPhone>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeoutPhone>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265A98;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBB5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBB608(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatus>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatus>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatus>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265B18;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryType>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265B68;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBBB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBBB94(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatusARTD>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatusARTD>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatusARTD>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265BE8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryTypeARTD>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryTypeARTD>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryTypeARTD>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265C38;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBC10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBC120(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfigInfo>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfigInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfigInfo>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265CB8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigInfo>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigInfo>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265D08;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBC698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBC6AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WiredPortStatus>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WiredPortStatus>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WiredPortStatus>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265D88;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBCB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBCBA4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SpeakerState>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SpeakerState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SpeakerState>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265E08;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBD090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBD0A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::HandState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::HandState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::HandState>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265E88;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBD588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBD59C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerSourceState>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerSourceState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerSourceState>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265F08;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBDA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBDA9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PPMEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PPMEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PPMEnable>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265F88;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Duration>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Duration>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Duration>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1265FD8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBE00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBE020(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm13PPMIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BBE2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBE2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BBE310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BottomEnclosure>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BottomEnclosure>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BottomEnclosure>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1266058;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TopEnclosure>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TopEnclosure>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TopEnclosure>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F12660A8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::FCMType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::FCMType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::FCMType>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F12660F8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BCMType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BCMType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BCMType>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1266148;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBE7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBE7E0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutType>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F12661C8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutState>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutState>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1266218;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutLocation>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutLocation>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutLocation>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1266268;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SwimLocation>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SwimLocation>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SwimLocation>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F12662B8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBEE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBEE84(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SensorID>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SensorID>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SensorID>::clone(uint64_t a1)
{
  xpc_object_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)xpc_object_t result = &unk_1F1266338;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  unint64_t v20 = 0;
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    unint64_t v20 = std::__shared_weak_count::lock(v4);
    if (!v20) {
      return;
    }
    uint64_t v6 = (void *)a1[5];
    if (v6)
    {
      uint64_t v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          int v8 = *(_DWORD *)(a2 + 4);
          BOOL v9 = v8 == 0;
          if (!v8
            || (unint64_t v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)long long buf = 67109378,
                int v22 = v8,
                __int16 v23 = 2080,
                uint64_t v24 = qmi::asString(),
                _os_log_error_impl(&dword_1B8B00000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (uint64_t v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            uint64_t v11 = _Block_copy(v7);
            char v12 = a1[8];
            if (v12) {
              dispatch_retain(v12);
            }
            int64_t v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (uint64_t v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            size_t v16 = v15;
            unint64_t v17 = operator new(0x18uLL);
            if (v11)
            {
              void *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((unsigned char *)v17 + 16) = v9;
                uint64_t v18 = v6[11];
                atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v19 = operator new(0x18uLL);
                *uint64_t v19 = v17;
                v19[1] = v14;
                void v19[2] = v16;
                dispatch_async_f(v18, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12) {
                  dispatch_release(v12);
                }
                if (v11) {
                  _Block_release(v11);
                }
                goto LABEL_21;
              }
            }
            else
            {
              void *v17 = 0;
              v17[1] = v12;
              if (!v12) {
                goto LABEL_15;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_21:
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B8BBF370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BBF384(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(void *a1)
{
  char v2 = (void *)*a1;
  if (!*(void *)*a1 || !v2[1]) {
    goto LABEL_16;
  }
  char v3 = *((unsigned char *)v2 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*v2) {
    size_t v5 = _Block_copy((const void *)*v2);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = v2[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_141;
  if (!v5)
  {
    char v12 = v3;
    xpc_object_t aBlock = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_8;
    }
LABEL_10:
    xpc_object_t object = xpc_null_create();
    goto LABEL_11;
  }
  char v12 = v3;
  xpc_object_t aBlock = _Block_copy(v5);
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_10;
  }
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
LABEL_16:
  uint64_t v7 = v2[1];
  if (v7) {
    dispatch_release(v7);
  }
  if (*v2) {
    _Block_release((const void *)*v2);
  }
  operator delete(v2);
  int v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t coex::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xF8uLL);
  uint64_t v7 = (uint64_t)v6;
  int v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  unint64_t v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  unint64_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coex::QMICommandDriver::QMICommandDriver((uint64_t)v6, (uint64_t)&v16, (uint64_t)v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coex::QMICommandDriver>::shared_ptr[abi:ne180100]<coex::QMICommandDriver,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 80))(*a3, v11, v12);
}

void sub_1B8BBF6D0(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B8BBF6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  int64_t v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coex::CommandDriver::CommandDriver();
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v6 = (const void **)(a1 + 240);
  *(void *)a1 = &unk_1F12663A0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 224) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC05B9D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC05B9D8))
  {
    _MergedGlobals_2 = 0;
    __cxa_atexit((void (*)(void *))ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef, &_MergedGlobals_2, &dword_1B8B00000);
    __cxa_guard_release(&qword_1EC05B9D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC05B9E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC05B9E0))
  {
    uint64_t v11 = *MEMORY[0x1E4FB9668];
    qword_1EC05B9F0 = *MEMORY[0x1E4FB9670];
    unk_1EC05B9F8 = v11;
    qword_1EC05BA00 = *MEMORY[0x1E4FB9720];
    __cxa_guard_release(&qword_1EC05B9E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC05B9E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC05B9E8))
  {
    qword_1EC05BA08 = *MEMORY[0x1E4F1CFC8];
    unk_1EC05BA10 = qword_1EC05BA08;
    qword_1EC05BA18 = qword_1EC05BA08;
    __cxa_guard_release(&qword_1EC05B9E8);
  }
  CFDictionaryRef v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&qword_1EC05B9F0, (const void **)&qword_1EC05BA08, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v7)
  {
LABEL_17:
    CFDictionaryRef v7 = (CFDictionaryRef)_MergedGlobals_2;
    if (!_MergedGlobals_2) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  int v8 = (const void *)_MergedGlobals_2;
  _MergedGlobals_2 = (uint64_t)v7;
  if (v8)
  {
    CFRelease(v8);
    goto LABEL_17;
  }
LABEL_18:
  CFRetain(v7);
LABEL_19:
  uint64_t v9 = *v6;
  void *v6 = v7;
  if (v9) {
    CFRelease(v9);
  }
  return a1;
}

void sub_1B8BBF9E0(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v4);
  qmi::Client::~Client(v3);
  coex::CommandDriver::~CommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_1B8BBFA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void coex::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_1F1266F88;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    this[18] = &unk_1F1266FF0;
    char v2 = (atomic_uint *)this[20];
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    this[18] = &unk_1F1266FF0;
    char v2 = (atomic_uint *)this[20];
    if (!v2) {
      goto LABEL_8;
    }
  }
  if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
    }
  }
LABEL_8:
  this[15] = &unk_1F1267060;
  char v3 = (atomic_uint *)this[17];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  xpc_object_t v4 = (std::__shared_weak_count *)this[14];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *this = &unk_1F12670D0;
  MEMORY[0x1BA9C75B0](this + 1);
  size_t v5 = this[12];
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = this[11];
  if (v6) {
    dispatch_release(v6);
  }
  CFDictionaryRef v7 = (std::__shared_weak_count *)this[10];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void coex::QMICommandDriver::~QMICommandDriver(coex::QMICommandDriver *this)
{
  *(void *)this = &unk_1F12663A0;
  char v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v5 = 0;
    _os_log_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v5, 2u);
  }
  char v3 = (const void *)*((void *)this + 30);
  if (v3) {
    CFRelease(v3);
  }
  xpc_object_t v4 = (const void *)*((void *)this + 29);
  if (v4) {
    CFRelease(v4);
  }
  qmi::Client::~Client((coex::QMICommandDriver *)((char *)this + 192));
  coex::CommandDriver::~CommandDriver((void **)this);
}

{
  void *v1;
  uint64_t vars8;

  coex::QMICommandDriver::~QMICommandDriver(this);

  operator delete(v1);
}

void coex::QMICommandDriver::init(coex::QMICommandDriver *this)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_20_1;
  v3[4] = this;
  xpc_object_t v4 = v3;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  xpc_object_t block[3] = &__block_descriptor_tmp_457;
  void block[4] = (char *)this + 72;
  void block[5] = &v4;
  char v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(&v57, *(Registry **)(v1 + 104));
  if (!v57)
  {
    Name = (const char *)coex::CommandDriver::getName((coex::CommandDriver *)v1);
    size_t v24 = strlen(Name);
    if (v24 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v25 = v24;
    if (v24 >= 0x17)
    {
      uint64_t v38 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v38 = v24 | 7;
      }
      uint64_t v39 = v38 + 1;
      p_dst = (void **)operator new(v38 + 1);
      size_t v55 = v25;
      unint64_t v56 = v39 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v56) = v24;
      p_dst = (void **)&__dst;
      if (!v24)
      {
        LOBYTE(__dst) = 0;
        size_t v27 = *(NSObject **)(v1 + 88);
        size_t v46 = v27;
        if (!v27)
        {
LABEL_44:
          char v52 = 4;
          strcpy((char *)v51, "coex");
          size_t v28 = *(std::__shared_weak_count **)(v1 + 80);
          if (!v28 || (uint64_t v29 = *(void *)(v1 + 72), (v30 = std::__shared_weak_count::lock(v28)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v31 = v30;
          atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v44 = 0;
            long long v45 = 0;
            uint64_t v32 = std::__shared_weak_count::lock(v30);
            if (v32)
            {
LABEL_48:
              atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              uint64_t v44 = v29;
              long long v45 = v32;
LABEL_49:
              std::__shared_weak_count::__release_weak(v31);
              if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
              qmi::Client::createWithQueue();
              long long v33 = v61;
              long long v61 = 0uLL;
              uint64_t v34 = *(std::__shared_weak_count **)(v1 + 216);
              *(_OWORD *)(v1 + 208) = v33;
              if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
              qmi::Client::~Client((qmi::Client *)buf);
              if (v45) {
                std::__shared_weak_count::__release_weak(v45);
              }
              if (v52 < 0)
              {
                operator delete(v51[0]);
                uint64_t v14 = v46;
                if (!v46) {
                  goto LABEL_29;
                }
              }
              else
              {
                uint64_t v14 = v46;
                if (!v46) {
                  goto LABEL_29;
                }
              }
LABEL_28:
              dispatch_release(v14);
              goto LABEL_29;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v31);
            uint64_t v44 = 0;
            long long v45 = 0;
            uint64_t v32 = std::__shared_weak_count::lock(v31);
            if (v32) {
              goto LABEL_48;
            }
          }
          uint64_t v44 = 0;
          long long v45 = v32;
          goto LABEL_49;
        }
LABEL_43:
        dispatch_retain(v27);
        goto LABEL_44;
      }
    }
    memmove(p_dst, Name, v25);
    *((unsigned char *)p_dst + v25) = 0;
    size_t v27 = *(NSObject **)(v1 + 88);
    size_t v46 = v27;
    if (!v27) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  char v2 = (const char *)coex::CommandDriver::getName((coex::CommandDriver *)v1);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v36 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v36 = v3 | 7;
    }
    uint64_t v37 = v36 + 1;
    size_t v5 = (void **)operator new(v36 + 1);
    size_t v55 = v4;
    unint64_t v56 = v37 | 0x8000000000000000;
    std::string __dst = v5;
LABEL_72:
    memmove(v5, v2, v4);
    *((unsigned char *)v5 + v4) = 0;
    uint64_t v6 = *(NSObject **)(v1 + 88);
    uint64_t v53 = v6;
    if (!v6) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  HIBYTE(v56) = v3;
  size_t v5 = (void **)&__dst;
  if (v3) {
    goto LABEL_72;
  }
  LOBYTE(__dst) = 0;
  uint64_t v6 = *(NSObject **)(v1 + 88);
  uint64_t v53 = v6;
  if (v6) {
LABEL_6:
  }
    dispatch_retain(v6);
LABEL_7:
  char v52 = 4;
  strcpy((char *)v51, "coex");
  CFDictionaryRef v7 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v7 || (uint64_t v8 = *(void *)(v1 + 72), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v49 = 0;
    size_t v50 = 0;
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11) {
      goto LABEL_11;
    }
LABEL_75:
    uint64_t v49 = 0;
    size_t v50 = v11;
    goto LABEL_12;
  }
  uint64_t v49 = 0;
  size_t v50 = 0;
  uint64_t v11 = std::__shared_weak_count::lock(v9);
  if (!v11) {
    goto LABEL_75;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v49 = v8;
  size_t v50 = v11;
LABEL_12:
  std::__shared_weak_count::__release_weak(v10);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v47 = v57;
  uint64_t v48 = v58;
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::createWithQueueLocal();
  long long v12 = v61;
  long long v61 = 0uLL;
  int64_t v13 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  if (v50) {
    std::__shared_weak_count::__release_weak(v50);
  }
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  uint64_t v14 = v53;
  if (v53) {
    goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(v56) < 0) {
    operator delete(__dst);
  }
  unint64_t v15 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1B8B00000, v15, OS_LOG_TYPE_DEBUG, "#D initializing", buf, 2u);
  }
  uint64_t v16 = (qmi::Client *)(v1 + 192);
  v43[25] = MEMORY[0x1E4F143A8];
  v43[26] = 0x40000000;
  v43[27] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_4;
  v43[28] = &__block_descriptor_tmp_6;
  v43[29] = v1;
  qmi::Client::setHandler();
  v43[20] = MEMORY[0x1E4F143A8];
  v43[21] = 0x40000000;
  v43[22] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_6;
  v43[23] = &__block_descriptor_tmp_7_1;
  v43[24] = v1;
  qmi::Client::setHandler();
  v43[15] = MEMORY[0x1E4F143A8];
  v43[16] = 0x40000000;
  v43[17] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_8;
  v43[18] = &__block_descriptor_tmp_10_2;
  v43[19] = v1;
  qmi::Client::setHandler();
  v43[10] = MEMORY[0x1E4F143A8];
  v43[11] = 0x40000000;
  v43[12] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_11;
  v43[13] = &__block_descriptor_tmp_13_2;
  v43[14] = v1;
  qmi::Client::setHandler();
  v43[5] = MEMORY[0x1E4F143A8];
  v43[6] = 0x40000000;
  v43[7] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_2;
  v43[8] = &__block_descriptor_tmp_14_4;
  _OWORD v43[9] = v1;
  qmi::Client::setHandler();
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 0x40000000;
  void v43[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_3;
  v43[3] = &__block_descriptor_tmp_16_1;
  v43[4] = v1;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v60 = 0x40000000;
  *(void *)&long long v61 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9BLERStats10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v61 + 1) = &unk_1E6195C40;
  uint64_t v62 = v43;
  qmi::Client::setIndHandler();
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 0x40000000;
  void v42[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_4;
  v42[3] = &__block_descriptor_tmp_17_0;
  v42[4] = v1;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v60 = 0x40000000;
  *(void *)&long long v61 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9WWANState10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v61 + 1) = &unk_1E6195C68;
  uint64_t v62 = v42;
  qmi::Client::setIndHandler();
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 0x40000000;
  void v41[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_5;
  v41[3] = &__block_descriptor_tmp_18_0;
  v41[4] = v1;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v60 = 0x40000000;
  *(void *)&long long v61 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm13ConditionFail10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v61 + 1) = &unk_1E6195C90;
  uint64_t v62 = v41;
  qmi::Client::setIndHandler();
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 0x40000000;
  void v40[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_6;
  v40[3] = &__block_descriptor_tmp_19_1;
  v40[4] = v1;
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  uint64_t v60 = 0x40000000;
  *(void *)&long long v61 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm16ConditionSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v61 + 1) = &unk_1E6195CB8;
  uint64_t v62 = v40;
  qmi::Client::setIndHandler();
  unint64_t v17 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v17 || (uint64_t v18 = *(void *)(v1 + 72), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v20 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
    uint64_t v21 = std::__shared_weak_count::lock(v20);
    if (v21) {
      goto LABEL_37;
    }
LABEL_61:
    *(void *)long long buf = 0;
    uint64_t v60 = 0;
    goto LABEL_62;
  }
  uint64_t v21 = std::__shared_weak_count::lock(v19);
  if (!v21) {
    goto LABEL_61;
  }
LABEL_37:
  int v22 = (atomic_ullong *)v21;
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)long long buf = v18;
  uint64_t v60 = (uint64_t)v21;
  std::__shared_weak_count::__release_weak(v20);
  if (atomic_fetch_add(v22 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_63;
  }
  (*(void (**)(atomic_ullong *))(*v22 + 16))(v22);
  unint64_t v20 = (std::__shared_weak_count *)v22;
LABEL_62:
  std::__shared_weak_count::__release_weak(v20);
LABEL_63:
  qmi::Client::setClientHandle();
  if (v60) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v60);
  }
  qmi::Client::start(v16);
  size_t v35 = v58;
  if (v58)
  {
    if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1B8BC0950(_Unwind_Exception *a1)
{
  size_t v3 = *(std::__shared_weak_count **)(v1 - 248);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    if ((*(char *)(v1 - 177) & 0x80000000) == 0)
    {
LABEL_3:
      size_t v4 = *(NSObject **)(v1 - 240);
      if (!v4) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 - 177) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 - 200));
  size_t v4 = *(NSObject **)(v1 - 240);
  if (!v4)
  {
LABEL_8:
    if (*(char *)(v1 - 145) < 0)
    {
      operator delete(*(void **)(v1 - 168));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 144);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 144);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v4);
  goto LABEL_8;
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)char v2 = 0;
    _os_log_debug_impl(&dword_1B8B00000, v1, OS_LOG_TYPE_DEBUG, "#D stopped", v2, 2u);
  }
}

uint64_t ___ZN4coex16QMICommandDriver4initEv_block_invoke_6(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  char v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEBUG, "#D started", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 128);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v4;
  long long v50 = v4;
  long long v47 = v4;
  long long v48 = v4;
  long long v45 = v4;
  long long v46 = v4;
  long long v43 = v4;
  long long v44 = v4;
  long long buf = v4;
  long long v42 = v4;
  size_t v5 = *(pthread_mutex_t **)(v3 + 24);
  *(void *)&long long v51 = 10;
  *((void *)&v51 + 1) = &buf;
  *(void *)&long long v52 = 0;
  *((void *)&v52 + 1) = v5;
  pthread_mutex_lock(v5);
  uint64_t v6 = *(atomic_uint **)(v3 + 8);
  if (!v6)
  {
    uint64_t v8 = *(uint64_t ***)v3;
    goto LABEL_15;
  }
  unsigned int explicit = atomic_load_explicit(v6 + 2, memory_order_acquire);
  uint64_t v8 = *(uint64_t ***)v3;
  if (explicit == 1)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = *(void *)(v3 + 16);
    if ((uint64_t *)v10 == *v8)
    {
      uint64_t v10 = v9[1];
      *(void *)&long long v38 = v10;
      if (v9 == (uint64_t *)v10)
      {
LABEL_12:
        *(void *)(v3 + 16) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      *(void *)&long long v38 = *(void *)(v3 + 16);
    }
    uint64_t v11 = *(void *)(v10 + 16);
    if (*(unsigned char *)(v11 + 24))
    {
      uint64_t v10 = *(void *)(v10 + 8);
    }
    else
    {
      uint64_t v10 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v11 + 64), (uint64_t **)&v38);
      uint64_t v8 = *(uint64_t ***)v3;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v6 = *(atomic_uint **)(v3 + 8);
  if (v6) {
    atomic_fetch_add_explicit(v6 + 2, 1u, memory_order_relaxed);
  }
LABEL_15:
  long long v12 = v37;
  uint64_t v36 = v8;
  uint64_t v37 = v6;
  if (v12)
  {
    if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v52 + 1));
  unint64_t v13 = *((void *)&v51 + 1);
  if (*((void *)&v51 + 1))
  {
    if ((uint64_t)v52 - 1 >= 0)
    {
      unint64_t v14 = *((void *)&v51 + 1) + 16 * v52;
      do
      {
        unint64_t v15 = *(atomic_uint **)(v14 - 8);
        if (v15)
        {
          if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
            if (atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
            }
          }
        }
        v14 -= 16;
      }
      while (v14 > v13);
    }
    if ((unint64_t)v51 >= 0xB) {
      operator delete(*((void **)&v51 + 1));
    }
  }
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v60 = v16;
  long long v55 = v16;
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v16;
  long long v54 = v16;
  long long v51 = v16;
  long long v52 = v16;
  long long v49 = v16;
  long long v50 = v16;
  long long v47 = v16;
  long long v48 = v16;
  long long v45 = v16;
  long long v46 = v16;
  long long v43 = v16;
  long long v44 = v16;
  long long buf = v16;
  long long v42 = v16;
  LOBYTE(buf) = 0;
  uint64_t v57 = 10;
  unint64_t v58 = (char *)&buf + 8;
  *(void *)((char *)&v60 + 4) = 0;
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  unint64_t v17 = v36;
  uint64_t v18 = (uint64_t)*v36;
  p_long long buf = &buf;
  uint64_t v34 = v3;
  uint64_t v35 = v18;
  *(void *)&long long v31 = *(void *)(v18 + 8);
  *((void *)&v31 + 1) = v18;
  *(void *)&long long v32 = &buf;
  *((void *)&v32 + 1) = v18;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v31);
  v30[0] = *v17;
  v30[1] = v30[0];
  v30[2] = &buf;
  v30[3] = v30[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(v30);
  long long v38 = v31;
  long long v39 = v32;
  uint64_t v19 = v30[0];
  uint64_t v20 = v31;
  if ((void)v31 == v30[0])
  {
    if (DWORD2(v60) <= DWORD1(v60)) {
      goto LABEL_49;
    }
LABEL_48:
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(v34, v35);
    goto LABEL_49;
  }
  uint64_t v21 = (unsigned char *)v39;
  if (!*(unsigned char *)v39)
  {
    uint64_t v22 = *(void *)(*(void *)(v31 + 16) + 32);
    uint64_t v23 = *(void *)(v22 + 24);
    if (!v23)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFFELL) + 8))(v22 + 32);
    if (!*v21) {
      unsigned char *v21 = 1;
    }
  }
  *(void *)&long long v38 = *(void *)(v20 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
  size_t v24 = (unsigned char *)v39;
  if (*(unsigned char *)v39) {
    *(unsigned char *)long long v39 = 0;
  }
  for (uint64_t i = v38; (void)v38 != v19; uint64_t i = v38)
  {
    uint64_t v26 = *(void *)(*(void *)(i + 16) + 32);
    uint64_t v27 = *(void *)(v26 + 24);
    if (!v27)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_1F1260350;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFFELL) + 8))(v26 + 32);
    if (!*v24) {
      *size_t v24 = 1;
    }
    *(void *)&long long v38 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
    size_t v24 = (unsigned char *)v39;
    if (*(unsigned char *)v39) {
      *(unsigned char *)long long v39 = 0;
    }
  }
  if (*((_DWORD *)p_buf + 70) > *((_DWORD *)p_buf + 69)) {
    goto LABEL_48;
  }
LABEL_49:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&buf);
  uint64_t v29 = v37;
  if (v37 && atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v29 + 16))(v29);
    if (atomic_fetch_add(v29 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v29 + 24))(v29);
    }
  }
  return result;
}

void sub_1B8BC10F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1B8BC1104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_1B8BC1164(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B8BC1134);
}

void sub_1B8BC119C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      long long v51 = &__p[16 * a51];
      do
      {
        long long v52 = (atomic_uint *)*((void *)v51 - 1);
        if (v52)
        {
          if (atomic_fetch_add(v52 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v52 + 16))(v52);
            if (atomic_fetch_add(v52 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v52 + 24))(v52);
            }
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x1B8BC128CLL);
}

void sub_1B8BC1268(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B8BC1294);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_8(uint64_t a1, xpc_object_t object)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (char *)MEMORY[0x1BA9C88A0](v3);
  memset(__dst, 170, sizeof(__dst));
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  CFDictionaryRef v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    std::string __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(__dst[2]) = v6;
    uint64_t v8 = __dst;
    if (!v6) {
      goto LABEL_14;
    }
  }
  memcpy(v8, v5, (size_t)v7);
LABEL_14:
  *((unsigned char *)v7 + (void)v8) = 0;
  free(v5);
  uint64_t v11 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    uint64_t v11 = (void **)__dst[0];
  }
  *(_DWORD *)long long buf = 136315138;
  unint64_t v14 = v11;
  _os_log_error_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_ERROR, "server error %s", buf, 0xCu);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
LABEL_5:
  xpc_release(v3);
}

void sub_1B8BC1444(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_11(uint64_t a1, char *object)
{
  xpc_object_t v3 = *(coex::QMICommandDriver **)(a1 + 32);
  *((unsigned char *)v3 + 224) = 1;
  var18.gr_name = object;
  if (object) {
    dispatch_retain((dispatch_object_t)object);
  }
  coex::QMICommandDriver::updateIndications_sync(v3, &var18);
  if (object)
  {
    dispatch_release((dispatch_object_t)object);
  }
}

void sub_1B8BC14EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void coex::QMICommandDriver::updateIndications_sync(coex::QMICommandDriver *this, group *a2)
{
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex16QMICommandDriver22updateIndications_syncEN8dispatch5groupE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_45_3;
  dispatch_group_t group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(group);
  }
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  if (v4)
  {
    size_t v6 = _Block_copy(v4);
    unint64_t v12 = (unint64_t)v6;
    unint64_t v13 = (unint64_t)v5;
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  size_t v6 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = (unint64_t)v5;
  if (v5)
  {
LABEL_9:
    dispatch_retain(v5);
    dispatch_release(v5);
  }
LABEL_10:
  if (v4) {
    _Block_release(v4);
  }
  if (v6)
  {
    CFDictionaryRef v7 = _Block_copy(v6);
    uint64_t v8 = v7;
    uint64_t v9 = v5;
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  CFDictionaryRef v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v5;
  if (v5) {
LABEL_14:
  }
    dispatch_retain(v5);
LABEL_15:
  coex::QMICommandDriver::setIndications_sync((uint64_t)this, (uint64_t)&v8);
  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v5) {
    dispatch_release(v5);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void sub_1B8BC16C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, char a17)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a10);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
  }
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(coex::QMICommandDriver **)(a1 + 32);
  *((unsigned char *)v1 + 224) = 0;
  uint64_t v2 = (char *)dispatch_group_create();
  xpc_object_t v3 = v2;
  var18.gr_name = v2;
  if (v2) {
    dispatch_retain((dispatch_object_t)v2);
  }
  coex::QMICommandDriver::updateIndications_sync(v1, &var18);
  if (v3)
  {
    dispatch_release(v3);
    dispatch_release(v3);
  }
}

void sub_1B8BC1794(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_release(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_3(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef v19 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v6 = Mutable;
  if (Mutable)
  {
    CFMutableDictionaryRef v18 = Mutable;
    CFTypeRef v19 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    CFMutableDictionaryRef v18 = 0;
  }
  uint64_t v26 = 0;
  uint64_t v20 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v21 = 1174405120;
  uint64_t v22 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTETransportBlockCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_363;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v25 = *MEMORY[0x1E4FB9578];
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)4);
    int v27 = *(_DWORD *)v9;
    v22((uint64_t)&v20, (unsigned int *)&v27);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  v17[1] = v19;
  if (v19) {
    CFRetain(v19);
  }
  uint64_t v26 = 0;
  uint64_t v20 = (__CFDictionary *)MEMORY[0x1E4F143A8];
  uint64_t v21 = 1174405120;
  uint64_t v22 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm32LTETransportBlockCountErrorCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v23 = &__block_descriptor_tmp_367;
  CFTypeRef cf = v19;
  if (v19) {
    CFRetain(v19);
  }
  uint64_t v25 = *MEMORY[0x1E4FB9860];
  uint64_t v10 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  unint64_t v12 = v10;
  if (v10)
  {
    tlv::throwIfNotEnoughBytes(v10, (const unsigned __int8 *)v10 + v11, (const unsigned __int8 *)4);
    int v27 = *(_DWORD *)v12;
    v22((uint64_t)&v20, (unsigned int *)&v27);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = 0;
  unint64_t v13 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v14 = v13;
  if (v13) {
    uint64_t v20 = v13;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v13, (CFTypeRef)*MEMORY[0x1E4FB9668], v19);
  if (v14 && (CFTypeID v15 = CFGetTypeID(v14), v15 == CFDictionaryGetTypeID()))
  {
    v17[0] = v14;
    CFRetain(v14);
    long long v16 = v14;
  }
  else
  {
    long long v16 = 0;
    v17[0] = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, v17, 0);
  if (v16) {
    CFRelease(v16);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v19) {
    CFRelease(v19);
  }
}

void sub_1B8BC1AA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 17, v2, v3);
  JUMPOUT(0x1B8BC19A4);
}

void sub_1B8BC1AE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(void, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E4FBA118])(*v1, 16, v2, v3);
  JUMPOUT(0x1B8BC18D4);
}

void sub_1B8BC1B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13)
{
}

void sub_1B8BC1B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_6(uint64_t a1, qmi::MessageBase *a2)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef v19 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v6 = Mutable;
  if (Mutable)
  {
    CFMutableDictionaryRef v18 = Mutable;
    CFTypeRef v19 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    CFMutableDictionaryRef v18 = 0;
  }
  uint64_t v25 = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 1174405120;
  uint64_t v21 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm26TxPowerLimitEnforceSuccessENS_3abm16ConditionSuccess10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  uint64_t v22 = &__block_descriptor_tmp_455;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v24 = *MEMORY[0x1E4FB9728];
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v9 = TlvValue;
  if (TlvValue)
  {
    int v10 = v8;
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)8);
    if ((v10 & 0xFFFFFFF8) != 0) {
      uint64_t v11 = *(void *)v9;
    }
    else {
      uint64_t v11 = 0;
    }
    v26[0] = v11;
    v21((uint64_t)v20, v26);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  v20[0] = 0;
  unint64_t v12 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unint64_t v13 = v12;
  if (v12) {
    v20[0] = v12;
  }
  CFTypeRef v14 = v19;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v12, (CFTypeRef)*MEMORY[0x1E4FB9720], v19);
  if (v13 && (CFTypeID v15 = CFGetTypeID(v13), v15 == CFDictionaryGetTypeID()))
  {
    unint64_t v17 = v13;
    CFRetain(v13);
    long long v16 = v13;
  }
  else
  {
    long long v16 = 0;
    unint64_t v17 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, (const void **)&v17, 0);
  if (v16) {
    CFRelease(v16);
  }
  if (v13)
  {
    CFRelease(v13);
    CFTypeRef v14 = v19;
  }
  if (v14) {
    CFRelease(v14);
  }
}

void sub_1B8BC1E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)this) {
    _Block_release(*(const void **)this);
  }
}

void coex::QMICommandDriver::get(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  void v11[2] = ___ZN4coex16QMICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_24_6;
  CFDictionaryRef v7 = *a2;
  void v11[4] = a1;
  CFTypeRef cf = v7;
  if (v7) {
    CFRetain(v7);
  }
  int v15 = a3;
  int v8 = *(void **)a4;
  if (*(void *)a4) {
    int v8 = _Block_copy(v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + 72);
  int v10 = *(NSObject **)(a4 + 8);
  xpc_object_t aBlock = v8;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN4coex16QMICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v10 = v2;
  if (v2) {
    CFRetain(v2);
  }
  int v4 = *(_DWORD *)(a1 + 64);
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFMutableDictionaryRef v6 = _Block_copy(v5);
    CFDictionaryRef v7 = *(NSObject **)(a1 + 56);
    int v8 = v6;
    uint64_t v9 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  CFMutableDictionaryRef v6 = 0;
  CFDictionaryRef v7 = *(NSObject **)(a1 + 56);
  int v8 = 0;
  uint64_t v9 = v7;
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  coex::QMICommandDriver::get_sync(v3, &v10, v4, (uint64_t)&v8);
  if (v7) {
    dispatch_release(v7);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1B8BC20D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::get_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, *a2);
  if (!ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v12, (const __CFString *)*MEMORY[0x1E4FB9798]))return MEMORY[0x1BA9C7760](v12); {
  if (!*(void *)a4)
  }
  {
    CFDictionaryRef v7 = 0;
    int v8 = *(NSObject **)(a4 + 8);
    CFDictionaryRef v10 = 0;
    uint64_t v11 = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CFDictionaryRef v7 = _Block_copy(*(const void **)a4);
  int v8 = *(NSObject **)(a4 + 8);
  CFDictionaryRef v10 = v7;
  uint64_t v11 = v8;
  if (v8) {
LABEL_4:
  }
    dispatch_retain(v8);
LABEL_5:
  coex::QMICommandDriver::getScanFreqBandFilter_sync(a1, a3, (uint64_t)&v10);
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  return MEMORY[0x1BA9C7760](v12);
}

void sub_1B8BC21C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void coex::QMICommandDriver::poll(uint64_t a1, const void **a2, int a3)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN4coex16QMICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke;
  v6[3] = &__block_descriptor_tmp_25_1;
  uint64_t v5 = *a2;
  v6[4] = a1;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  int v8 = a3;
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN4coex16QMICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = *(coex::QMICommandDriver **)(a1 + 32);
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v3 = v1;
  if (v1) {
    CFRetain(v1);
  }
  coex::QMICommandDriver::poll_sync(v2, &v3);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_1B8BC22F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::poll_sync(coex::QMICommandDriver *a1, const __CFDictionary **a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v4 = *((void *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v16 = *a2;
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Polling for: %@", buf, 0xCu);
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, *a2);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9608]))coex::QMICommandDriver::pollWWANState_sync(a1); {
  unsigned int v18 = -1431655766;
  }
  uint64_t v5 = (unsigned int *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB96B8]);
  CFMutableDictionaryRef v6 = v5;
  if (v5)
  {
    CFTypeID v7 = CFGetTypeID(v5);
    int v9 = v7 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v18, v6, v8) : 0;
    CFRelease(v6);
    if (v9) {
      coex::QMICommandDriver::pollWLANScanState_sync(a1, v18);
    }
  }
  unsigned int v17 = -1431655766;
  CFDictionaryRef v10 = (unsigned int *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x1E4FB9830]);
  uint64_t v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    int v14 = v12 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v17, v11, v13) : 0;
    CFRelease(v11);
    if (v14) {
      coex::QMICommandDriver::pollWLANConnState_sync(a1, v17);
    }
  }
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9598]))coex::QMICommandDriver::pollPolicy_sync(a1); {
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E4FB9660]))coex::QMICommandDriver::pollLinkQuality_sync(a1);
  }
  return MEMORY[0x1BA9C7760](buf);
}

void coex::QMICommandDriver::setIndications(uint64_t a1, const void **a2, uint64_t a3)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZN4coex16QMICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v9[3] = &__block_descriptor_tmp_28_4;
  uint64_t v5 = *a2;
  v9[4] = a1;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFMutableDictionaryRef v6 = *(void **)a3;
  if (*(void *)a3) {
    CFMutableDictionaryRef v6 = _Block_copy(v6);
  }
  CFTypeID v7 = (uint64_t *)(a1 + 72);
  CFNumberRef v8 = *(NSObject **)(a3 + 8);
  xpc_object_t aBlock = v6;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v7, (uint64_t)v9);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN4coex16QMICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  CFDictionaryRef v3 = (CFTypeRef *)(a1 + 5);
  int v4 = (const void **)(v2 + 232);
  if ((void *)(v2 + 232) != a1 + 5)
  {
    CFTypeRef v5 = *v3;
    if (*v3) {
      CFRetain(*v3);
    }
    CFMutableDictionaryRef v6 = *v4;
    *int v4 = v5;
    if (v6) {
      CFRelease(v6);
    }
  }
  if (!*(unsigned char *)(v2 + 224))
  {
    CFTypeID v7 = (const void *)a1[6];
    if (v7)
    {
      CFNumberRef v8 = _Block_copy(v7);
      int v9 = a1[7];
      CFDictionaryRef v10 = v8;
      uint64_t v11 = v9;
      if (!v9)
      {
LABEL_10:
        coex::QMICommandDriver::setIndications_sync(v2, (uint64_t)&v10);
        if (v9) {
          dispatch_release(v9);
        }
        if (v8) {
          _Block_release(v8);
        }
        return;
      }
    }
    else
    {
      CFNumberRef v8 = 0;
      int v9 = a1[7];
      CFDictionaryRef v10 = 0;
      uint64_t v11 = v9;
      if (!v9) {
        goto LABEL_10;
      }
    }
    dispatch_retain(v9);
    goto LABEL_10;
  }
}

void sub_1B8BC2754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void coex::QMICommandDriver::setIndications_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v236 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 240;
  if (!*(unsigned char *)(a1 + 224)) {
    uint64_t v4 = 232;
  }
  CFTypeRef v5 = *(const void **)(a1 + v4);
  v231[2] = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFMutableDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEFAULT, "#I Setting indications with: %@", (uint8_t *)&buf, 0xCu);
  }
  v231[0] = 0xAAAAAAAAAAAAAAAALL;
  v231[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v231, (const __CFDictionary *)v5);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v229 = v7;
  long long v230 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v229);
  uint64_t v192 = a2;
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E4FB9670]))
  {
    v225[0] = MEMORY[0x1E4F143A8];
    v225[1] = 1174405120;
    v226 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke;
    v227 = &__block_descriptor_tmp_47_2;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v228, (const ctu::cf::dict_adapter *)v231);
    CFNumberRef v8 = (char *)*((void *)&v229 + 1);
    int v9 = (char *)v230;
    CFDictionaryRef v10 = (const void **)*((void *)&v229 + 1);
    if (*((void *)&v229 + 1) != (void)v230)
    {
      CFDictionaryRef v10 = (const void **)*((void *)&v229 + 1);
      while (*((unsigned char *)*v10 + 8) != 16)
      {
        if (++v10 == (const void **)v230) {
          goto LABEL_16;
        }
      }
    }
    if (v10 != (const void **)v230)
    {
      if (!v11) {
        __cxa_bad_cast();
      }
      CFTypeID v12 = v11 + 9;
      goto LABEL_39;
    }
LABEL_16:
    CFNumberRef v13 = operator new(0x10uLL);
    int v14 = v13;
    void v13[4] = 16;
    *(void *)CFNumberRef v13 = &unk_1F1267C40;
    if ((unint64_t)v9 < *((void *)&v230 + 1))
    {
      *(void *)int v9 = v13;
      uint64_t v15 = (uint64_t)(v9 + 8);
LABEL_38:
      CFTypeID v12 = (char *)v14 + 9;
      *(void *)&long long v230 = v15;
LABEL_39:
      v226((uint64_t)v225, v12);
      MEMORY[0x1BA9C7760](v228);
      goto LABEL_40;
    }
    int64_t v16 = v9 - v8;
    uint64_t v17 = (v9 - v8) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = *((void *)&v230 + 1) - (void)v8;
    if ((uint64_t)(*((void *)&v230 + 1) - (void)v8) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = operator new(8 * v20);
      uint64_t v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      void *v22 = v14;
      uint64_t v15 = (uint64_t)(v22 + 1);
      if (v8 != v9)
      {
LABEL_27:
        if ((unint64_t)(v16 - 8) < 0x58) {
          goto LABEL_271;
        }
        if ((unint64_t)(v8 - v21) < 0x20) {
          goto LABEL_271;
        }
        unint64_t v24 = ((unint64_t)(v16 - 8) >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = &v9[-v25];
        uint64_t v22 = (void *)((char *)v22 - v25);
        int v27 = &v21[8 * v17 - 16];
        size_t v28 = v9 - 16;
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          _OWORD *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        int v9 = v26;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_271:
          do
          {
            uint64_t v31 = *((void *)v9 - 1);
            v9 -= 8;
            *--uint64_t v22 = v31;
          }
          while (v9 != v8);
        }
        CFNumberRef v8 = (char *)*((void *)&v229 + 1);
        *((void *)&v229 + 1) = v22;
        *(void *)&long long v230 = v15;
        *((void *)&v230 + 1) = v23;
        if (!v8) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = (void *)(8 * v17);
      uint64_t v23 = 0;
      *(void *)(8 * v17) = v14;
      uint64_t v15 = 8 * v17 + 8;
      if (v8 != v9) {
        goto LABEL_27;
      }
    }
    *((void *)&v229 + 1) = v22;
    *(void *)&long long v230 = v15;
    *((void *)&v230 + 1) = v23;
    if (!v8) {
      goto LABEL_38;
    }
LABEL_37:
    operator delete(v8);
    goto LABEL_38;
  }
LABEL_40:
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E4FB9668])) {
    goto LABEL_73;
  }
  v221[0] = MEMORY[0x1E4F143A8];
  v221[1] = 1174405120;
  v222 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_48;
  v223 = &__block_descriptor_tmp_52_4;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v224, (const ctu::cf::dict_adapter *)v231);
  long long v32 = (char *)*((void *)&v229 + 1);
  long long v33 = (char *)v230;
  uint64_t v34 = (const void **)*((void *)&v229 + 1);
  if (*((void *)&v229 + 1) != (void)v230)
  {
    uint64_t v34 = (const void **)*((void *)&v229 + 1);
    while (*((unsigned char *)*v34 + 8) != 17)
    {
      if (++v34 == (const void **)v230) {
        goto LABEL_49;
      }
    }
  }
  if (v34 != (const void **)v230)
  {
    if (!v35) {
      __cxa_bad_cast();
    }
    uint64_t v36 = v35 + 9;
    goto LABEL_72;
  }
LABEL_49:
  uint64_t v37 = operator new(0x10uLL);
  long long v38 = v37;
  v37[4] = 17;
  *(void *)uint64_t v37 = &unk_1F1267C90;
  if ((unint64_t)v33 >= *((void *)&v230 + 1))
  {
    int64_t v40 = v33 - v32;
    uint64_t v41 = (v33 - v32) >> 3;
    unint64_t v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v43 = *((void *)&v230 + 1) - (void)v32;
    if ((uint64_t)(*((void *)&v230 + 1) - (void)v32) >> 2 > v42) {
      unint64_t v42 = v43 >> 2;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      if (v44 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v45 = operator new(8 * v44);
      long long v46 = &v45[8 * v41];
      long long v47 = &v45[8 * v44];
      *long long v46 = v38;
      uint64_t v39 = (uint64_t)(v46 + 1);
      if (v32 != v33)
      {
LABEL_60:
        if ((unint64_t)(v40 - 8) < 0x58) {
          goto LABEL_272;
        }
        if ((unint64_t)(v32 - v45) < 0x20) {
          goto LABEL_272;
        }
        unint64_t v48 = ((unint64_t)(v40 - 8) >> 3) + 1;
        uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        long long v50 = &v33[-v49];
        long long v46 = (void *)((char *)v46 - v49);
        long long v51 = &v45[8 * v41 - 16];
        long long v52 = v33 - 16;
        uint64_t v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *long long v51 = v54;
          v51 -= 2;
          v52 -= 32;
          v53 -= 4;
        }
        while (v53);
        long long v33 = v50;
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_272:
          do
          {
            uint64_t v55 = *((void *)v33 - 1);
            v33 -= 8;
            *--long long v46 = v55;
          }
          while (v33 != v32);
        }
        long long v32 = (char *)*((void *)&v229 + 1);
        *((void *)&v229 + 1) = v46;
        *(void *)&long long v230 = v39;
        *((void *)&v230 + 1) = v47;
        if (!v32) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
    }
    else
    {
      long long v45 = 0;
      long long v46 = (void *)(8 * v41);
      long long v47 = 0;
      *(void *)(8 * v41) = v38;
      uint64_t v39 = 8 * v41 + 8;
      if (v32 != v33) {
        goto LABEL_60;
      }
    }
    *((void *)&v229 + 1) = v46;
    *(void *)&long long v230 = v39;
    *((void *)&v230 + 1) = v47;
    if (!v32) {
      goto LABEL_71;
    }
LABEL_70:
    operator delete(v32);
    goto LABEL_71;
  }
  *(void *)long long v33 = v37;
  uint64_t v39 = (uint64_t)(v33 + 8);
LABEL_71:
  uint64_t v36 = (char *)v38 + 9;
  *(void *)&long long v230 = v39;
LABEL_72:
  v222((uint64_t)v221, v36);
  MEMORY[0x1BA9C7760](v224);
LABEL_73:
  CFStringRef v56 = (const __CFString *)*MEMORY[0x1E4FB9720];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E4FB9720])) {
    goto LABEL_137;
  }
  char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v231, v56);
  v217[0] = MEMORY[0x1E4F143A8];
  v217[1] = 0x40000000;
  unint64_t v58 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_53;
  v218 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_53;
  v219 = &__block_descriptor_tmp_55;
  char v220 = Bool;
  uint64_t v59 = (char *)*((void *)&v229 + 1);
  long long v60 = (char *)v230;
  uint64_t v61 = (const void **)*((void *)&v229 + 1);
  if (*((void *)&v229 + 1) != (void)v230)
  {
    uint64_t v61 = (const void **)*((void *)&v229 + 1);
    while (*((unsigned char *)*v61 + 8) != 18)
    {
      if (++v61 == (const void **)v230) {
        goto LABEL_82;
      }
    }
  }
  if (v61 == (const void **)v230)
  {
LABEL_82:
    size_t v64 = operator new(0x10uLL);
    uint64_t v65 = v64;
    v64[4] = 18;
    *(void *)size_t v64 = &unk_1F1267CE0;
    if ((unint64_t)v60 < *((void *)&v230 + 1))
    {
      *(void *)long long v60 = v64;
      uint64_t v66 = (uint64_t)(v60 + 8);
LABEL_104:
      char v63 = (char *)v65 + 9;
      *(void *)&long long v230 = v66;
      unint64_t v58 = v218;
      goto LABEL_105;
    }
    int64_t v67 = v60 - v59;
    uint64_t v68 = (v60 - v59) >> 3;
    unint64_t v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 61) {
      goto LABEL_252;
    }
    uint64_t v70 = *((void *)&v230 + 1) - (void)v59;
    if ((uint64_t)(*((void *)&v230 + 1) - (void)v59) >> 2 > v69) {
      unint64_t v69 = v70 >> 2;
    }
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v71 = v69;
    }
    if (v71)
    {
      if (v71 >> 61) {
        goto LABEL_258;
      }
      uint64_t v72 = operator new(8 * v71);
      size_t v73 = &v72[8 * v68];
      uint64_t v74 = &v72[8 * v71];
      *size_t v73 = v65;
      uint64_t v66 = (uint64_t)(v73 + 1);
      if (v59 != v60)
      {
LABEL_93:
        if ((unint64_t)(v67 - 8) < 0x58) {
          goto LABEL_273;
        }
        if ((unint64_t)(v59 - v72) < 0x20) {
          goto LABEL_273;
        }
        unint64_t v75 = ((unint64_t)(v67 - 8) >> 3) + 1;
        uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v77 = &v60[-v76];
        size_t v73 = (void *)((char *)v73 - v76);
        size_t v78 = &v72[8 * v68 - 16];
        uint64_t v79 = v60 - 16;
        uint64_t v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v81 = *(_OWORD *)v79;
          *(v78 - 1) = *((_OWORD *)v79 - 1);
          *size_t v78 = v81;
          v78 -= 2;
          v79 -= 32;
          v80 -= 4;
        }
        while (v80);
        long long v60 = v77;
        if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_273:
          do
          {
            uint64_t v82 = *((void *)v60 - 1);
            v60 -= 8;
            *--size_t v73 = v82;
          }
          while (v60 != v59);
        }
        uint64_t v59 = (char *)*((void *)&v229 + 1);
        *((void *)&v229 + 1) = v73;
        *(void *)&long long v230 = v66;
        *((void *)&v230 + 1) = v74;
        if (!v59) {
          goto LABEL_104;
        }
        goto LABEL_103;
      }
    }
    else
    {
      uint64_t v72 = 0;
      size_t v73 = (void *)(8 * v68);
      uint64_t v74 = 0;
      *(void *)(8 * v68) = v65;
      uint64_t v66 = 8 * v68 + 8;
      if (v59 != v60) {
        goto LABEL_93;
      }
    }
    *((void *)&v229 + 1) = v73;
    *(void *)&long long v230 = v66;
    *((void *)&v230 + 1) = v74;
    if (!v59) {
      goto LABEL_104;
    }
LABEL_103:
    operator delete(v59);
    goto LABEL_104;
  }
  if (!v62) {
    goto LABEL_251;
  }
  char v63 = v62 + 9;
LABEL_105:
  v58((uint64_t)v217, v63);
  v213[0] = MEMORY[0x1E4F143A8];
  v213[1] = 0x40000000;
  uint64_t v83 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_2;
  v214 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_2;
  v215 = &__block_descriptor_tmp_57;
  char v216 = Bool;
  size_t v84 = (char *)*((void *)&v229 + 1);
  uint64_t v85 = (char *)v230;
  size_t v86 = (const void **)*((void *)&v229 + 1);
  if (*((void *)&v229 + 1) != (void)v230)
  {
    size_t v86 = (const void **)*((void *)&v229 + 1);
    while (*((unsigned char *)*v86 + 8) != 19)
    {
      if (++v86 == (const void **)v230) {
        goto LABEL_113;
      }
    }
  }
  if (v86 == (const void **)v230)
  {
LABEL_113:
    uint64_t v89 = operator new(0x10uLL);
    size_t v90 = v89;
    v89[4] = 19;
    *(void *)uint64_t v89 = &unk_1F1267D30;
    if ((unint64_t)v85 < *((void *)&v230 + 1))
    {
      *(void *)uint64_t v85 = v89;
      uint64_t v91 = (uint64_t)(v85 + 8);
LABEL_135:
      uint64_t v88 = (char *)v90 + 9;
      *(void *)&long long v230 = v91;
      uint64_t v83 = v214;
      goto LABEL_136;
    }
    int64_t v92 = v85 - v84;
    uint64_t v93 = (v85 - v84) >> 3;
    unint64_t v94 = v93 + 1;
    if (!((unint64_t)(v93 + 1) >> 61))
    {
      uint64_t v95 = *((void *)&v230 + 1) - (void)v84;
      if ((uint64_t)(*((void *)&v230 + 1) - (void)v84) >> 2 > v94) {
        unint64_t v94 = v95 >> 2;
      }
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v96 = v94;
      }
      if (!v96)
      {
        uint64_t v97 = 0;
        size_t v98 = (void *)(8 * v93);
        uint64_t v99 = 0;
        *(void *)(8 * v93) = v90;
        uint64_t v91 = 8 * v93 + 8;
        if (v84 != v85) {
          goto LABEL_124;
        }
        goto LABEL_133;
      }
      if (!(v96 >> 61))
      {
        uint64_t v97 = operator new(8 * v96);
        size_t v98 = &v97[8 * v93];
        uint64_t v99 = &v97[8 * v96];
        *size_t v98 = v90;
        uint64_t v91 = (uint64_t)(v98 + 1);
        if (v84 != v85)
        {
LABEL_124:
          if ((unint64_t)(v92 - 8) < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v84 - v97) < 0x20) {
            goto LABEL_274;
          }
          unint64_t v100 = ((unint64_t)(v92 - 8) >> 3) + 1;
          uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
          size_t v102 = &v85[-v101];
          size_t v98 = (void *)((char *)v98 - v101);
          uint64_t v103 = &v97[8 * v93 - 16];
          size_t v104 = v85 - 16;
          uint64_t v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v106 = *(_OWORD *)v104;
            *(v103 - 1) = *((_OWORD *)v104 - 1);
            *uint64_t v103 = v106;
            v103 -= 2;
            v104 -= 32;
            v105 -= 4;
          }
          while (v105);
          uint64_t v85 = v102;
          if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v107 = *((void *)v85 - 1);
              v85 -= 8;
              *--size_t v98 = v107;
            }
            while (v85 != v84);
          }
          size_t v84 = (char *)*((void *)&v229 + 1);
          *((void *)&v229 + 1) = v98;
          *(void *)&long long v230 = v91;
          *((void *)&v230 + 1) = v99;
          if (!v84) {
            goto LABEL_135;
          }
          goto LABEL_134;
        }
LABEL_133:
        *((void *)&v229 + 1) = v98;
        *(void *)&long long v230 = v91;
        *((void *)&v230 + 1) = v99;
        if (!v84) {
          goto LABEL_135;
        }
LABEL_134:
        operator delete(v84);
        goto LABEL_135;
      }
LABEL_258:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_252:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v87) {
LABEL_251:
  }
    __cxa_bad_cast();
  uint64_t v88 = v87 + 9;
LABEL_136:
  v83((uint64_t)v213, v88);
LABEL_137:
  CFStringRef v108 = (const __CFString *)*MEMORY[0x1E4FB9758];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E4FB9758])) {
    goto LABEL_170;
  }
  char v109 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v231, v108);
  v209[0] = MEMORY[0x1E4F143A8];
  v209[1] = 0x40000000;
  size_t v110 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_3;
  v210 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_3;
  v211 = &__block_descriptor_tmp_59_1;
  char v212 = v109;
  uint64_t v111 = (char *)*((void *)&v229 + 1);
  long long v112 = (char *)v230;
  size_t v113 = (const void **)*((void *)&v229 + 1);
  if (*((void *)&v229 + 1) != (void)v230)
  {
    size_t v113 = (const void **)*((void *)&v229 + 1);
    while (*((unsigned char *)*v113 + 8) != 24)
    {
      if (++v113 == (const void **)v230) {
        goto LABEL_146;
      }
    }
  }
  if (v113 != (const void **)v230)
  {
    if (!v114) {
      __cxa_bad_cast();
    }
    uint64_t v115 = v114 + 9;
    goto LABEL_169;
  }
LABEL_146:
  uint64_t v116 = operator new(0x10uLL);
  uint64_t v117 = v116;
  v116[4] = 24;
  *(void *)uint64_t v116 = &unk_1F1267D80;
  if ((unint64_t)v112 >= *((void *)&v230 + 1))
  {
    int64_t v119 = v112 - v111;
    uint64_t v120 = (v112 - v111) >> 3;
    unint64_t v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v122 = *((void *)&v230 + 1) - (void)v111;
    if ((uint64_t)(*((void *)&v230 + 1) - (void)v111) >> 2 > v121) {
      unint64_t v121 = v122 >> 2;
    }
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v123 = v121;
    }
    if (v123)
    {
      if (v123 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v124 = operator new(8 * v123);
      v125 = &v124[8 * v120];
      v126 = &v124[8 * v123];
      void *v125 = v117;
      uint64_t v118 = (uint64_t)(v125 + 1);
      if (v111 != v112)
      {
LABEL_157:
        if ((unint64_t)(v119 - 8) < 0x58) {
          goto LABEL_275;
        }
        if ((unint64_t)(v111 - v124) < 0x20) {
          goto LABEL_275;
        }
        unint64_t v127 = ((unint64_t)(v119 - 8) >> 3) + 1;
        uint64_t v128 = 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v129 = &v112[-v128];
        v125 = (void *)((char *)v125 - v128);
        char v130 = &v124[8 * v120 - 16];
        __int16 v131 = v112 - 16;
        uint64_t v132 = v127 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v133 = *(_OWORD *)v131;
          *(v130 - 1) = *((_OWORD *)v131 - 1);
          *char v130 = v133;
          v130 -= 2;
          v131 -= 32;
          v132 -= 4;
        }
        while (v132);
        long long v112 = v129;
        if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_275:
          do
          {
            uint64_t v134 = *((void *)v112 - 1);
            v112 -= 8;
            *--v125 = v134;
          }
          while (v112 != v111);
        }
        uint64_t v111 = (char *)*((void *)&v229 + 1);
        *((void *)&v229 + 1) = v125;
        *(void *)&long long v230 = v118;
        *((void *)&v230 + 1) = v126;
        if (!v111) {
          goto LABEL_168;
        }
        goto LABEL_167;
      }
    }
    else
    {
      v124 = 0;
      v125 = (void *)(8 * v120);
      v126 = 0;
      *(void *)(8 * v120) = v117;
      uint64_t v118 = 8 * v120 + 8;
      if (v111 != v112) {
        goto LABEL_157;
      }
    }
    *((void *)&v229 + 1) = v125;
    *(void *)&long long v230 = v118;
    *((void *)&v230 + 1) = v126;
    if (!v111) {
      goto LABEL_168;
    }
LABEL_167:
    operator delete(v111);
    goto LABEL_168;
  }
  *(void *)long long v112 = v116;
  uint64_t v118 = (uint64_t)(v112 + 8);
LABEL_168:
  uint64_t v115 = (char *)v117 + 9;
  *(void *)&long long v230 = v118;
  size_t v110 = v210;
LABEL_169:
  v110((uint64_t)v209, v115);
LABEL_170:
  CFStringRef v135 = (const __CFString *)*MEMORY[0x1E4FB9618];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E4FB9618])) {
    goto LABEL_203;
  }
  char v136 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v231, v135);
  v205[0] = MEMORY[0x1E4F143A8];
  v205[1] = 0x40000000;
  long long v137 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_4;
  v206 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_4;
  v207 = &__block_descriptor_tmp_61_3;
  char v208 = v136;
  uint64_t v138 = (char *)*((void *)&v229 + 1);
  __int16 v139 = (char *)v230;
  int v140 = (const void **)*((void *)&v229 + 1);
  if (*((void *)&v229 + 1) != (void)v230)
  {
    int v140 = (const void **)*((void *)&v229 + 1);
    while (*((unsigned char *)*v140 + 8) != 25)
    {
      if (++v140 == (const void **)v230) {
        goto LABEL_179;
      }
    }
  }
  if (v140 != (const void **)v230)
  {
    if (!v141) {
      __cxa_bad_cast();
    }
    unint64_t v142 = v141 + 9;
    goto LABEL_202;
  }
LABEL_179:
  __int16 v143 = operator new(0x10uLL);
  long long v144 = v143;
  v143[4] = 25;
  *(void *)__int16 v143 = &unk_1F1267DD0;
  if ((unint64_t)v139 >= *((void *)&v230 + 1))
  {
    int64_t v146 = v139 - v138;
    uint64_t v147 = (v139 - v138) >> 3;
    unint64_t v148 = v147 + 1;
    if ((unint64_t)(v147 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v149 = *((void *)&v230 + 1) - (void)v138;
    if ((uint64_t)(*((void *)&v230 + 1) - (void)v138) >> 2 > v148) {
      unint64_t v148 = v149 >> 2;
    }
    if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v150 = v148;
    }
    if (v150)
    {
      if (v150 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v151 = operator new(8 * v150);
      v152 = &v151[8 * v147];
      uint64_t v153 = &v151[8 * v150];
      void *v152 = v144;
      uint64_t v145 = (uint64_t)(v152 + 1);
      if (v138 != v139)
      {
LABEL_190:
        if ((unint64_t)(v146 - 8) < 0x58) {
          goto LABEL_276;
        }
        if ((unint64_t)(v138 - v151) < 0x20) {
          goto LABEL_276;
        }
        unint64_t v154 = ((unint64_t)(v146 - 8) >> 3) + 1;
        uint64_t v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v156 = &v139[-v155];
        v152 = (void *)((char *)v152 - v155);
        v157 = &v151[8 * v147 - 16];
        v158 = v139 - 16;
        uint64_t v159 = v154 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v160 = *(_OWORD *)v158;
          *(v157 - 1) = *((_OWORD *)v158 - 1);
          _OWORD *v157 = v160;
          v157 -= 2;
          v158 -= 32;
          v159 -= 4;
        }
        while (v159);
        __int16 v139 = v156;
        if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_276:
          do
          {
            uint64_t v161 = *((void *)v139 - 1);
            v139 -= 8;
            *--v152 = v161;
          }
          while (v139 != v138);
        }
        uint64_t v138 = (char *)*((void *)&v229 + 1);
        *((void *)&v229 + 1) = v152;
        *(void *)&long long v230 = v145;
        *((void *)&v230 + 1) = v153;
        if (!v138) {
          goto LABEL_201;
        }
        goto LABEL_200;
      }
    }
    else
    {
      v151 = 0;
      v152 = (void *)(8 * v147);
      uint64_t v153 = 0;
      *(void *)(8 * v147) = v144;
      uint64_t v145 = 8 * v147 + 8;
      if (v138 != v139) {
        goto LABEL_190;
      }
    }
    *((void *)&v229 + 1) = v152;
    *(void *)&long long v230 = v145;
    *((void *)&v230 + 1) = v153;
    if (!v138) {
      goto LABEL_201;
    }
LABEL_200:
    operator delete(v138);
    goto LABEL_201;
  }
  *(void *)__int16 v139 = v143;
  uint64_t v145 = (uint64_t)(v139 + 8);
LABEL_201:
  unint64_t v142 = (char *)v144 + 9;
  *(void *)&long long v230 = v145;
  long long v137 = v206;
LABEL_202:
  v137((uint64_t)v205, v142);
LABEL_203:
  CFStringRef v162 = (const __CFString *)*MEMORY[0x1E4FB96D0];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E4FB96D0])) {
    goto LABEL_236;
  }
  char v163 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v231, v162);
  v201[0] = MEMORY[0x1E4F143A8];
  v201[1] = 0x40000000;
  v164 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_5;
  v202 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_5;
  uint64_t v203 = &__block_descriptor_tmp_63_1;
  char v204 = v163;
  v165 = (char *)*((void *)&v229 + 1);
  v166 = (char *)v230;
  v167 = (const void **)*((void *)&v229 + 1);
  if (*((void *)&v229 + 1) != (void)v230)
  {
    v167 = (const void **)*((void *)&v229 + 1);
    while (*((unsigned char *)*v167 + 8) != 26)
    {
      if (++v167 == (const void **)v230) {
        goto LABEL_212;
      }
    }
  }
  if (v167 != (const void **)v230)
  {
    if (!v168) {
      __cxa_bad_cast();
    }
    v169 = v168 + 9;
    goto LABEL_235;
  }
LABEL_212:
  v170 = operator new(0x10uLL);
  v171 = v170;
  v170[4] = 26;
  *(void *)v170 = &unk_1F1267E20;
  if ((unint64_t)v166 >= *((void *)&v230 + 1))
  {
    int64_t v173 = v166 - v165;
    uint64_t v174 = (v166 - v165) >> 3;
    unint64_t v175 = v174 + 1;
    if ((unint64_t)(v174 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v176 = *((void *)&v230 + 1) - (void)v165;
    if ((uint64_t)(*((void *)&v230 + 1) - (void)v165) >> 2 > v175) {
      unint64_t v175 = v176 >> 2;
    }
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v177 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v177 = v175;
    }
    if (v177)
    {
      if (v177 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v178 = operator new(8 * v177);
      v179 = &v178[8 * v174];
      v180 = &v178[8 * v177];
      void *v179 = v171;
      uint64_t v172 = (uint64_t)(v179 + 1);
      if (v165 != v166)
      {
LABEL_223:
        if ((unint64_t)(v173 - 8) < 0x58) {
          goto LABEL_277;
        }
        if ((unint64_t)(v165 - v178) < 0x20) {
          goto LABEL_277;
        }
        unint64_t v181 = ((unint64_t)(v173 - 8) >> 3) + 1;
        uint64_t v182 = 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
        v183 = &v166[-v182];
        v179 = (void *)((char *)v179 - v182);
        int v184 = &v178[8 * v174 - 16];
        long long v185 = v166 - 16;
        uint64_t v186 = v181 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v187 = *(_OWORD *)v185;
          *(v184 - 1) = *((_OWORD *)v185 - 1);
          *int v184 = v187;
          v184 -= 2;
          v185 -= 32;
          v186 -= 4;
        }
        while (v186);
        v166 = v183;
        if (v181 != (v181 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_277:
          do
          {
            uint64_t v188 = *((void *)v166 - 1);
            v166 -= 8;
            *--v179 = v188;
          }
          while (v166 != v165);
        }
        v165 = (char *)*((void *)&v229 + 1);
        *((void *)&v229 + 1) = v179;
        *(void *)&long long v230 = v172;
        *((void *)&v230 + 1) = v180;
        if (!v165) {
          goto LABEL_234;
        }
        goto LABEL_233;
      }
    }
    else
    {
      v178 = 0;
      v179 = (void *)(8 * v174);
      v180 = 0;
      *(void *)(8 * v174) = v171;
      uint64_t v172 = 8 * v174 + 8;
      if (v165 != v166) {
        goto LABEL_223;
      }
    }
    *((void *)&v229 + 1) = v179;
    *(void *)&long long v230 = v172;
    *((void *)&v230 + 1) = v180;
    if (!v165) {
      goto LABEL_234;
    }
LABEL_233:
    operator delete(v165);
    goto LABEL_234;
  }
  *(void *)v166 = v170;
  uint64_t v172 = (uint64_t)(v166 + 8);
LABEL_234:
  v169 = (char *)v171 + 9;
  *(void *)&long long v230 = v172;
  v164 = v202;
LABEL_235:
  v164((uint64_t)v201, v169);
LABEL_236:
  uint64_t v196 = a1 + 192;
  uint64_t v197 = QMIServiceMsg::create();
  int v198 = 25000;
  uint64_t v199 = 0;
  xpc_object_t aBlock = 0;
  v193[0] = MEMORY[0x1E4F143A8];
  v193[1] = 1174405120;
  v193[2] = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_6;
  v193[3] = &__block_descriptor_tmp_65_0;
  v193[4] = a1;
  int v189 = *(void **)v192;
  if (*(void *)v192) {
    int v189 = _Block_copy(v189);
  }
  uint64_t v190 = *(NSObject **)(v192 + 8);
  v194 = v189;
  dispatch_object_t object = v190;
  if (v190) {
    dispatch_retain(v190);
  }
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 0x40000000;
  v233 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_2;
  v234 = &unk_1E6195DA0;
  v235 = v193;
  v191 = _Block_copy(&buf);
  xpc_object_t aBlock = v191;
  if (v197)
  {
    qmi::Client::send();
    v191 = aBlock;
  }
  if (v191) {
    _Block_release(v191);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v194) {
    _Block_release(v194);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v229);
  MEMORY[0x1BA9C7760](v231);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8BC3BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setWLANState_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v28 = *a2;
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting WLAN state with: %@", buf, 0xCu);
  }
  v87[0] = 0xAAAAAAAAAAAAAAAALL;
  v87[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v87, *a2);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v85 = v7;
  long long v86 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v85);
  CFNumberRef v8 = (const void *)(*(uint64_t (**)(void *, void))v87[0])(v87, *MEMORY[0x1E4FB9690]);
  int v9 = v8;
  if (v8)
  {
    CFTypeID v10 = CFGetTypeID(v8);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFRelease(v9);
    if (v10 == TypeID)
    {
      memset(buf, 170, sizeof(buf));
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v9);
      v81[0] = MEMORY[0x1E4F143A8];
      v81[1] = 1174405120;
      uint64_t v82 = ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
      uint64_t v83 = &__block_descriptor_tmp_69_4;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v84, (const ctu::cf::dict_adapter *)buf);
      CFTypeID v12 = (char *)*((void *)&v85 + 1);
      CFNumberRef v13 = (char *)v86;
      int v14 = (const void **)*((void *)&v85 + 1);
      if (*((void *)&v85 + 1) != (void)v86)
      {
        int v14 = (const void **)*((void *)&v85 + 1);
        while (*((unsigned char *)*v14 + 8) != 16)
        {
          if (++v14 == (const void **)v86) {
            goto LABEL_13;
          }
        }
      }
      if (v14 != (const void **)v86)
      {
        if (!v15) {
          __cxa_bad_cast();
        }
        int64_t v16 = v15 + 12;
        goto LABEL_36;
      }
LABEL_13:
      uint64_t v17 = (char *)operator new(0x20uLL);
      unint64_t v18 = v17;
      v17[8] = 16;
      *(void *)uint64_t v17 = &unk_1F1267E70;
      *(void *)(v17 + 12) = 0;
      int64_t v16 = v17 + 12;
      *(void *)(v17 + 20) = 0;
      if ((unint64_t)v13 < *((void *)&v86 + 1))
      {
        *(void *)CFNumberRef v13 = v17;
        *(void *)&long long v86 = v13 + 8;
LABEL_36:
        v82((uint64_t)v81, (uint64_t)v16);
        MEMORY[0x1BA9C7760](v84);
        MEMORY[0x1BA9C7760](buf);
        goto LABEL_37;
      }
      int64_t v19 = v13 - v12;
      uint64_t v20 = (v13 - v12) >> 3;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = *((void *)&v86 + 1) - (void)v12;
      if ((uint64_t)(*((void *)&v86 + 1) - (void)v12) >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v24 = operator new(8 * v23);
        uint64_t v25 = &v24[8 * v20];
        uint64_t v26 = &v24[8 * v23];
        *uint64_t v25 = v18;
        uint64_t v27 = (uint64_t)(v25 + 1);
        if (v12 == v13) {
          goto LABEL_33;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = (void *)(8 * v20);
        uint64_t v26 = 0;
        *(void *)(8 * v20) = v18;
        uint64_t v27 = 8 * v20 + 8;
        if (v12 == v13)
        {
LABEL_33:
          *((void *)&v85 + 1) = v25;
          *(void *)&long long v86 = v27;
          *((void *)&v86 + 1) = v26;
          if (v12) {
            operator delete(v12);
          }
          *(void *)&long long v86 = v27;
          goto LABEL_36;
        }
      }
      if ((unint64_t)(v19 - 8) < 0x58) {
        goto LABEL_92;
      }
      if ((unint64_t)(v12 - v24) < 0x20) {
        goto LABEL_92;
      }
      unint64_t v29 = ((unint64_t)(v19 - 8) >> 3) + 1;
      uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v31 = &v13[-v30];
      uint64_t v25 = (void *)((char *)v25 - v30);
      long long v32 = &v24[8 * v20 - 16];
      long long v33 = v13 - 16;
      uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *(_OWORD *)v33;
        *(v32 - 1) = *((_OWORD *)v33 - 1);
        _OWORD *v32 = v35;
        v32 -= 2;
        v33 -= 32;
        v34 -= 4;
      }
      while (v34);
      CFNumberRef v13 = v31;
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_92:
        do
        {
          uint64_t v36 = *((void *)v13 - 1);
          v13 -= 8;
          *--uint64_t v25 = v36;
        }
        while (v13 != v12);
      }
      CFTypeID v12 = (char *)*((void *)&v85 + 1);
      goto LABEL_33;
    }
  }
LABEL_37:
  uint64_t v37 = (const void *)(*(uint64_t (**)(void *, void))v87[0])(v87, *MEMORY[0x1E4FB9800]);
  long long v38 = v37;
  if (v37)
  {
    CFTypeID v39 = CFGetTypeID(v37);
    CFTypeID v40 = CFDictionaryGetTypeID();
    CFRelease(v38);
    if (v39 == v40)
    {
      memset(buf, 170, sizeof(buf));
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v38);
      v77[0] = MEMORY[0x1E4F143A8];
      v77[1] = 1174405120;
      size_t v78 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_70;
      uint64_t v79 = &__block_descriptor_tmp_73_5;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v80, (const ctu::cf::dict_adapter *)buf);
      uint64_t v41 = (char *)*((void *)&v85 + 1);
      unint64_t v42 = (char *)v86;
      uint64_t v43 = (const void **)*((void *)&v85 + 1);
      if (*((void *)&v85 + 1) != (void)v86)
      {
        uint64_t v43 = (const void **)*((void *)&v85 + 1);
        while (*((unsigned char *)*v43 + 8) != 17)
        {
          if (++v43 == (const void **)v86) {
            goto LABEL_47;
          }
        }
      }
      if (v43 != (const void **)v86)
      {
        if (!v44) {
          __cxa_bad_cast();
        }
        long long v45 = v44 + 16;
        goto LABEL_70;
      }
LABEL_47:
      long long v46 = (char *)operator new(0x38uLL);
      long long v47 = v46;
      v46[8] = 17;
      *((_DWORD *)v46 + 4) = 0;
      long long v45 = v46 + 16;
      *(void *)long long v46 = &unk_1F1267EC0;
      *(_OWORD *)(v46 + 24) = 0u;
      *(_OWORD *)(v46 + 40) = 0u;
      if ((unint64_t)v42 < *((void *)&v86 + 1))
      {
        *(void *)unint64_t v42 = v46;
        *(void *)&long long v86 = v42 + 8;
LABEL_70:
        v78((uint64_t)v77, v45);
        MEMORY[0x1BA9C7760](v80);
        MEMORY[0x1BA9C7760](buf);
        goto LABEL_71;
      }
      int64_t v48 = v42 - v41;
      uint64_t v49 = (v42 - v41) >> 3;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v51 = *((void *)&v86 + 1) - (void)v41;
      if ((uint64_t)(*((void *)&v86 + 1) - (void)v41) >> 2 > v50) {
        unint64_t v50 = v51 >> 2;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        if (v52 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v53 = operator new(8 * v52);
        long long v54 = &v53[8 * v49];
        uint64_t v55 = &v53[8 * v52];
        *long long v54 = v47;
        uint64_t v56 = (uint64_t)(v54 + 1);
        if (v41 == v42) {
          goto LABEL_67;
        }
      }
      else
      {
        uint64_t v53 = 0;
        long long v54 = (void *)(8 * v49);
        uint64_t v55 = 0;
        *(void *)(8 * v49) = v47;
        uint64_t v56 = 8 * v49 + 8;
        if (v41 == v42)
        {
LABEL_67:
          *((void *)&v85 + 1) = v54;
          *(void *)&long long v86 = v56;
          *((void *)&v86 + 1) = v55;
          if (v41) {
            operator delete(v41);
          }
          *(void *)&long long v86 = v56;
          goto LABEL_70;
        }
      }
      if ((unint64_t)(v48 - 8) < 0x58) {
        goto LABEL_93;
      }
      if ((unint64_t)(v41 - v53) < 0x20) {
        goto LABEL_93;
      }
      unint64_t v57 = ((unint64_t)(v48 - 8) >> 3) + 1;
      uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v59 = &v42[-v58];
      long long v54 = (void *)((char *)v54 - v58);
      long long v60 = &v53[8 * v49 - 16];
      uint64_t v61 = v42 - 16;
      uint64_t v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v63 = *(_OWORD *)v61;
        *(v60 - 1) = *((_OWORD *)v61 - 1);
        *long long v60 = v63;
        v60 -= 2;
        v61 -= 32;
        v62 -= 4;
      }
      while (v62);
      unint64_t v42 = v59;
      if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        do
        {
          uint64_t v64 = *((void *)v42 - 1);
          v42 -= 8;
          *--long long v54 = v64;
        }
        while (v42 != v41);
      }
      uint64_t v41 = (char *)*((void *)&v85 + 1);
      goto LABEL_67;
    }
  }
LABEL_71:
  uint64_t v72 = a1 + 192;
  uint64_t v73 = QMIServiceMsg::create();
  int v74 = 25000;
  uint64_t v75 = 0;
  xpc_object_t aBlock = 0;
  v69[0] = MEMORY[0x1E4F143A8];
  v69[1] = 1174405120;
  void v69[2] = ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_74;
  v69[3] = &__block_descriptor_tmp_78_0;
  v69[4] = a1;
  uint64_t v65 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v65 = _Block_copy(v65);
  }
  uint64_t v66 = *(NSObject **)(a3 + 8);
  uint64_t v70 = v65;
  dispatch_object_t object = v66;
  if (v66) {
    dispatch_retain(v66);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 0x40000000;
  uint64_t v89 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12SetWLANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  size_t v90 = &unk_1E6195DC8;
  uint64_t v91 = v69;
  int64_t v67 = _Block_copy(buf);
  xpc_object_t aBlock = v67;
  if (v73)
  {
    qmi::Client::send();
    int64_t v67 = aBlock;
  }
  if (v67) {
    _Block_release(v67);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v70) {
    _Block_release(v70);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v85);
  return MEMORY[0x1BA9C7760](v87);
}

void sub_1B8BC448C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9C7760](v1 - 144);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 192));
  MEMORY[0x1BA9C7760](v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1B8BC44DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  coex::CommandDriver::Callback::~Callback(v18);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v19 - 192));
  MEMORY[0x1BA9C7760](v19 - 160);
  _Unwind_Resume(a1);
}

void sub_1B8BC453C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 192));
  MEMORY[0x1BA9C7760](v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::setBLER_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v29 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v29;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting BLER with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v87[0] = 0xAAAAAAAAAAAAAAAALL;
  v87[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v87, *a2);
  int Bool = ctu::cf::map_adapter::getBool(v7, (const __CFString *)*MEMORY[0x1E4FB99C0]);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (Bool)
  {
    long long v85 = v9;
    long long v86 = v9;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v85);
    v81[0] = MEMORY[0x1E4F143A8];
    v81[1] = 1174405120;
    uint64_t v82 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
    uint64_t v83 = &__block_descriptor_tmp_227_0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v84, (const ctu::cf::dict_adapter *)v87);
    CFTypeID v10 = (char *)*((void *)&v85 + 1);
    uint64_t v11 = (char *)v86;
    CFTypeID v12 = (const void **)*((void *)&v85 + 1);
    if (*((void *)&v85 + 1) != (void)v86)
    {
      CFTypeID v12 = (const void **)*((void *)&v85 + 1);
      while (*((unsigned char *)*v12 + 8) != 1)
      {
        if (++v12 == (const void **)v86) {
          goto LABEL_24;
        }
      }
    }
    if (v12 != (const void **)v86)
    {
      if (!v16) {
        __cxa_bad_cast();
      }
      uint64_t v17 = v16 + 12;
LABEL_47:
      v82((uint64_t)v81, v17);
      v77[0] = MEMORY[0x1E4F143A8];
      v77[1] = 1174405120;
      size_t v78 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_228;
      uint64_t v79 = &__block_descriptor_tmp_232;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v80, (const ctu::cf::dict_adapter *)v87);
      long long v38 = (char *)*((void *)&v85 + 1);
      CFTypeID v39 = (char *)v86;
      CFTypeID v40 = (const void **)*((void *)&v85 + 1);
      if (*((void *)&v85 + 1) != (void)v86)
      {
        CFTypeID v40 = (const void **)*((void *)&v85 + 1);
        while (*((unsigned char *)*v40 + 8) != 2)
        {
          if (++v40 == (const void **)v86) {
            goto LABEL_55;
          }
        }
      }
      if (v40 != (const void **)v86)
      {
        if (!v41) {
          __cxa_bad_cast();
        }
        unint64_t v42 = v41 + 12;
        goto LABEL_78;
      }
LABEL_55:
      uint64_t v43 = operator new(0x10uLL);
      unint64_t v44 = v43;
      v43[8] = 2;
      *(void *)uint64_t v43 = &unk_1F12685A0;
      *((_DWORD *)v43 + 3) = 0;
      unint64_t v42 = v43 + 12;
      if ((unint64_t)v39 < *((void *)&v86 + 1))
      {
        *(void *)CFTypeID v39 = v43;
        *(void *)&long long v86 = v39 + 8;
LABEL_78:
        v78((uint64_t)v77, v42);
        uint64_t v72 = a1 + 192;
        uint64_t v73 = QMIServiceMsg::create();
        int v74 = 25000;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        v69[0] = MEMORY[0x1E4F143A8];
        v69[1] = 1174405120;
        void v69[2] = ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_233;
        v69[3] = &__block_descriptor_tmp_237;
        v69[4] = a1;
        uint64_t v62 = *(void **)a3;
        if (*(void *)a3) {
          uint64_t v62 = _Block_copy(v62);
        }
        long long v63 = *(NSObject **)(a3 + 8);
        uint64_t v70 = v62;
        dispatch_object_t v71 = v63;
        if (v63) {
          dispatch_retain(v63);
        }
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 0x40000000;
        uint64_t v89 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9BLERStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        size_t v90 = &unk_1E6195E18;
        uint64_t v91 = v69;
        uint64_t v64 = _Block_copy(&aBlock);
        uint64_t v76 = v64;
        if (v73)
        {
          qmi::Client::send();
          uint64_t v64 = v76;
        }
        if (v64) {
          _Block_release(v64);
        }
        if (v71) {
          dispatch_release(v71);
        }
        if (v70) {
          _Block_release(v70);
        }
        MEMORY[0x1BA9C7760](v80);
        MEMORY[0x1BA9C7760](v84);
        goto LABEL_91;
      }
      int64_t v45 = v39 - v38;
      uint64_t v46 = (v39 - v38) >> 3;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v48 = *((void *)&v86 + 1) - (void)v38;
      if ((uint64_t)(*((void *)&v86 + 1) - (void)v38) >> 2 > v47) {
        unint64_t v47 = v48 >> 2;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        if (v49 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v50 = operator new(8 * v49);
        uint64_t v51 = &v50[8 * v46];
        unint64_t v52 = &v50[8 * v49];
        *uint64_t v51 = v44;
        uint64_t v53 = (uint64_t)(v51 + 1);
        if (v38 == v39) {
          goto LABEL_75;
        }
      }
      else
      {
        unint64_t v50 = 0;
        uint64_t v51 = (void *)(8 * v46);
        unint64_t v52 = 0;
        *(void *)(8 * v46) = v44;
        uint64_t v53 = 8 * v46 + 8;
        if (v38 == v39)
        {
LABEL_75:
          *((void *)&v85 + 1) = v51;
          *(void *)&long long v86 = v53;
          *((void *)&v86 + 1) = v52;
          if (v38) {
            operator delete(v38);
          }
          *(void *)&long long v86 = v53;
          goto LABEL_78;
        }
      }
      if ((unint64_t)(v45 - 8) < 0x58) {
        goto LABEL_100;
      }
      if ((unint64_t)(v38 - v50) < 0x20) {
        goto LABEL_100;
      }
      unint64_t v54 = ((unint64_t)(v45 - 8) >> 3) + 1;
      uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v56 = &v39[-v55];
      uint64_t v51 = (void *)((char *)v51 - v55);
      unint64_t v57 = &v50[8 * v46 - 16];
      uint64_t v58 = v39 - 16;
      uint64_t v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v60 = *(_OWORD *)v58;
        *(v57 - 1) = *((_OWORD *)v58 - 1);
        *unint64_t v57 = v60;
        v57 -= 2;
        v58 -= 32;
        v59 -= 4;
      }
      while (v59);
      CFTypeID v39 = v56;
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_100:
        do
        {
          uint64_t v61 = *((void *)v39 - 1);
          v39 -= 8;
          *--uint64_t v51 = v61;
        }
        while (v39 != v38);
      }
      long long v38 = (char *)*((void *)&v85 + 1);
      goto LABEL_75;
    }
LABEL_24:
    unint64_t v18 = operator new(0x10uLL);
    uint64_t v19 = v18;
    v18[8] = 1;
    *(void *)unint64_t v18 = &unk_1F1268550;
    *((_DWORD *)v18 + 3) = 0;
    uint64_t v17 = v18 + 12;
    if ((unint64_t)v11 < *((void *)&v86 + 1))
    {
      *(void *)uint64_t v11 = v18;
      *(void *)&long long v86 = v11 + 8;
      goto LABEL_47;
    }
    int64_t v20 = v11 - v10;
    uint64_t v21 = (v11 - v10) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = *((void *)&v86 + 1) - (void)v10;
    if ((uint64_t)(*((void *)&v86 + 1) - (void)v10) >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v25 = operator new(8 * v24);
      uint64_t v26 = &v25[8 * v21];
      uint64_t v27 = &v25[8 * v24];
      *uint64_t v26 = v19;
      uint64_t v28 = (uint64_t)(v26 + 1);
      if (v10 == v11) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (void *)(8 * v21);
      uint64_t v27 = 0;
      *(void *)(8 * v21) = v19;
      uint64_t v28 = 8 * v21 + 8;
      if (v10 == v11)
      {
LABEL_44:
        *((void *)&v85 + 1) = v26;
        *(void *)&long long v86 = v28;
        *((void *)&v86 + 1) = v27;
        if (v10) {
          operator delete(v10);
        }
        *(void *)&long long v86 = v28;
        goto LABEL_47;
      }
    }
    if ((unint64_t)(v20 - 8) < 0x58) {
      goto LABEL_101;
    }
    if ((unint64_t)(v10 - v25) < 0x20) {
      goto LABEL_101;
    }
    unint64_t v30 = ((unint64_t)(v20 - 8) >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    long long v32 = &v11[-v31];
    uint64_t v26 = (void *)((char *)v26 - v31);
    long long v33 = &v25[8 * v21 - 16];
    uint64_t v34 = v11 - 16;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      _OWORD *v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 4;
    }
    while (v35);
    uint64_t v11 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_101:
      do
      {
        uint64_t v37 = *((void *)v11 - 1);
        v11 -= 8;
        *--uint64_t v26 = v37;
      }
      while (v11 != v10);
    }
    CFTypeID v10 = (char *)*((void *)&v85 + 1);
    goto LABEL_44;
  }
  long long v85 = v9;
  long long v86 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v85);
  uint64_t v72 = a1 + 192;
  uint64_t v73 = QMIServiceMsg::create();
  int v74 = 25000;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  v66[0] = MEMORY[0x1E4F143A8];
  v66[1] = 1174405120;
  void v66[2] = ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_239;
  v66[3] = &__block_descriptor_tmp_243;
  v66[4] = a1;
  CFNumberRef v13 = *(void **)a3;
  if (*(void *)a3) {
    CFNumberRef v13 = _Block_copy(v13);
  }
  int v14 = *(NSObject **)(a3 + 8);
  int64_t v67 = v13;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  uint64_t v89 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8BLERStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  size_t v90 = &unk_1E6195E40;
  uint64_t v91 = v66;
  uint64_t v15 = _Block_copy(&aBlock);
  uint64_t v76 = v15;
  if (v73)
  {
    qmi::Client::send();
    uint64_t v15 = v76;
  }
  if (v15) {
    _Block_release(v15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v67) {
    _Block_release(v67);
  }
LABEL_91:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v85);
  return MEMORY[0x1BA9C7760](v87);
}

void sub_1B8BC4DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setSINR_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v29 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v29;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting SINR with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v59[0] = 0xAAAAAAAAAAAAAAAALL;
  v59[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v59, *a2);
  int Bool = ctu::cf::map_adapter::getBool(v7, (const __CFString *)*MEMORY[0x1E4FB99C0]);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (Bool)
  {
    long long v57 = v9;
    long long v58 = v9;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v57);
    v53[0] = MEMORY[0x1E4F143A8];
    v53[1] = 1174405120;
    unint64_t v54 = ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
    uint64_t v55 = &__block_descriptor_tmp_247;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v56, (const ctu::cf::dict_adapter *)v59);
    CFTypeID v10 = (char *)*((void *)&v57 + 1);
    uint64_t v11 = (char *)v58;
    CFTypeID v12 = (const void **)*((void *)&v57 + 1);
    if (*((void *)&v57 + 1) != (void)v58)
    {
      CFTypeID v12 = (const void **)*((void *)&v57 + 1);
      while (*((unsigned char *)*v12 + 8) != 1)
      {
        if (++v12 == (const void **)v58) {
          goto LABEL_24;
        }
      }
    }
    if (v12 != (const void **)v58)
    {
      if (!v16) {
        __cxa_bad_cast();
      }
      uint64_t v17 = (float *)(v16 + 12);
      goto LABEL_47;
    }
LABEL_24:
    unint64_t v18 = operator new(0x10uLL);
    uint64_t v19 = v18;
    v18[8] = 1;
    *(void *)unint64_t v18 = &unk_1F12685F0;
    *((_DWORD *)v18 + 3) = 0;
    uint64_t v17 = (float *)(v18 + 12);
    if ((unint64_t)v11 < *((void *)&v58 + 1))
    {
      *(void *)uint64_t v11 = v18;
      *(void *)&long long v58 = v11 + 8;
LABEL_47:
      v54((uint64_t)v53, v17);
      uint64_t v48 = a1 + 192;
      uint64_t v49 = QMIServiceMsg::create();
      int v50 = 25000;
      uint64_t v51 = 0;
      unint64_t v52 = 0;
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 1174405120;
      void v45[2] = ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_248;
      v45[3] = &__block_descriptor_tmp_252;
      v45[4] = a1;
      long long v38 = *(void **)a3;
      if (*(void *)a3) {
        long long v38 = _Block_copy(v38);
      }
      CFTypeID v39 = *(NSObject **)(a3 + 8);
      uint64_t v46 = v38;
      dispatch_object_t v47 = v39;
      if (v39) {
        dispatch_retain(v39);
      }
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 0x40000000;
      uint64_t v61 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SINRStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      uint64_t v62 = &unk_1E6195E68;
      long long v63 = v45;
      CFTypeID v40 = _Block_copy(&aBlock);
      unint64_t v52 = v40;
      if (v49)
      {
        qmi::Client::send();
        CFTypeID v40 = v52;
      }
      if (v40) {
        _Block_release(v40);
      }
      if (v47) {
        dispatch_release(v47);
      }
      if (v46) {
        _Block_release(v46);
      }
      MEMORY[0x1BA9C7760](v56);
      goto LABEL_60;
    }
    int64_t v20 = v11 - v10;
    uint64_t v21 = (v11 - v10) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = *((void *)&v58 + 1) - (void)v10;
    if ((uint64_t)(*((void *)&v58 + 1) - (void)v10) >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v25 = operator new(8 * v24);
      uint64_t v26 = &v25[8 * v21];
      uint64_t v27 = &v25[8 * v24];
      *uint64_t v26 = v19;
      uint64_t v28 = (uint64_t)(v26 + 1);
      if (v10 == v11) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (void *)(8 * v21);
      uint64_t v27 = 0;
      *(void *)(8 * v21) = v19;
      uint64_t v28 = 8 * v21 + 8;
      if (v10 == v11)
      {
LABEL_44:
        *((void *)&v57 + 1) = v26;
        *(void *)&long long v58 = v28;
        *((void *)&v58 + 1) = v27;
        if (v10) {
          operator delete(v10);
        }
        *(void *)&long long v58 = v28;
        goto LABEL_47;
      }
    }
    if ((unint64_t)(v20 - 8) < 0x58) {
      goto LABEL_66;
    }
    if ((unint64_t)(v10 - v25) < 0x20) {
      goto LABEL_66;
    }
    unint64_t v30 = ((unint64_t)(v20 - 8) >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    long long v32 = &v11[-v31];
    uint64_t v26 = (void *)((char *)v26 - v31);
    long long v33 = &v25[8 * v21 - 16];
    uint64_t v34 = v11 - 16;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      _OWORD *v33 = v36;
      v33 -= 2;
      v34 -= 32;
      v35 -= 4;
    }
    while (v35);
    uint64_t v11 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_66:
      do
      {
        uint64_t v37 = *((void *)v11 - 1);
        v11 -= 8;
        *--uint64_t v26 = v37;
      }
      while (v11 != v10);
    }
    CFTypeID v10 = (char *)*((void *)&v57 + 1);
    goto LABEL_44;
  }
  long long v57 = v9;
  long long v58 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v57);
  uint64_t v48 = a1 + 192;
  uint64_t v49 = QMIServiceMsg::create();
  int v50 = 25000;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 1174405120;
  void v42[2] = ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_254;
  v42[3] = &__block_descriptor_tmp_258;
  v42[4] = a1;
  CFNumberRef v13 = *(void **)a3;
  if (*(void *)a3) {
    CFNumberRef v13 = _Block_copy(v13);
  }
  int v14 = *(NSObject **)(a3 + 8);
  uint64_t v43 = v13;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  uint64_t v61 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v62 = &unk_1E6195E90;
  long long v63 = v42;
  uint64_t v15 = _Block_copy(&aBlock);
  unint64_t v52 = v15;
  if (v49)
  {
    qmi::Client::send();
    uint64_t v15 = v52;
  }
  if (v15) {
    _Block_release(v15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v43) {
    _Block_release(v43);
  }
LABEL_60:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v57);
  return MEMORY[0x1BA9C7760](v59);
}

void sub_1B8BC54BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setBandFilterInfo_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  CFNumberRef v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v46 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v46;
    _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Setting Band filter info with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v68[0] = 0xAAAAAAAAAAAAAAAALL;
  v68[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v68, *a2);
  uint64_t v10 = ctu::cf::map_adapter::copyCFArrayRef(v9, (const __CFString *)*MEMORY[0x1E4FB95A8]);
  uint64_t v11 = (const void *)v10;
  if (!v10) {
    return MEMORY[0x1BA9C7760](v68);
  }
  uint64_t v67 = v10;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v12;
  long long v66 = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v61[0] = MEMORY[0x1E4F143A8];
  v61[1] = 1174405120;
  uint64_t v62 = ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  long long v63 = &__block_descriptor_tmp_264;
  CFTypeRef cf = v11;
  CFRetain(v11);
  uint64_t v48 = a4;
  CFNumberRef v13 = (char *)__p[1];
  int v14 = (char *)v66;
  uint64_t v15 = (const void **)__p[1];
  int v47 = a3;
  if (__p[1] != (void *)v66)
  {
    uint64_t v15 = (const void **)__p[1];
    while (*((unsigned char *)*v15 + 8) != 16)
    {
      if (++v15 == (const void **)v66) {
        goto LABEL_12;
      }
    }
  }
  if (v15 != (const void **)v66)
  {
    if (!v16) {
      __cxa_bad_cast();
    }
    uint64_t v17 = (void **)(v16 + 16);
    goto LABEL_35;
  }
LABEL_12:
  unint64_t v18 = operator new(0x28uLL);
  uint64_t v19 = v18;
  v18[8] = 16;
  *(void *)unint64_t v18 = &unk_1F1268780;
  *((void *)v18 + 2) = 0;
  uint64_t v17 = (void **)(v18 + 16);
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = 0;
  if ((unint64_t)v14 >= *((void *)&v66 + 1))
  {
    int64_t v20 = v14 - v13;
    uint64_t v21 = (v14 - v13) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = *((void *)&v66 + 1) - (void)v13;
    if ((uint64_t)(*((void *)&v66 + 1) - (void)v13) >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v25 = operator new(8 * v24);
      uint64_t v26 = &v25[8 * v21];
      uint64_t v27 = &v25[8 * v24];
      *uint64_t v26 = v19;
      uint64_t v28 = (uint64_t)(v26 + 1);
      if (v13 != v14)
      {
LABEL_23:
        if ((unint64_t)(v20 - 8) < 0x58) {
          goto LABEL_67;
        }
        if ((unint64_t)(v13 - v25) < 0x20) {
          goto LABEL_67;
        }
        unint64_t v29 = ((unint64_t)(v20 - 8) >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v31 = &v14[-v30];
        uint64_t v26 = (void *)((char *)v26 - v30);
        long long v32 = &v25[8 * v21 - 16];
        long long v33 = v14 - 16;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          _OWORD *v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 4;
        }
        while (v34);
        int v14 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_67:
          do
          {
            uint64_t v36 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v26 = v36;
          }
          while (v14 != v13);
        }
        CFNumberRef v13 = (char *)__p[1];
        __p[1] = v26;
        *(void *)&long long v66 = v28;
        *((void *)&v66 + 1) = v27;
        if (!v13) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (void *)(8 * v21);
      uint64_t v27 = 0;
      *(void *)(8 * v21) = v19;
      uint64_t v28 = 8 * v21 + 8;
      if (v13 != v14) {
        goto LABEL_23;
      }
    }
    __p[1] = v26;
    *(void *)&long long v66 = v28;
    *((void *)&v66 + 1) = v27;
    if (!v13)
    {
LABEL_34:
      *(void *)&long long v66 = v28;
      goto LABEL_35;
    }
LABEL_33:
    operator delete(v13);
    goto LABEL_34;
  }
  *(void *)int v14 = v18;
  *(void *)&long long v66 = v14 + 8;
LABEL_35:
  v62((uint64_t)v61, v17);
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 0x40000000;
  uint64_t v37 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_265;
  long long v58 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_265;
  uint64_t v59 = &__block_descriptor_tmp_266;
  int v60 = v47;
  long long v38 = (const void **)__p[1];
  if (__p[1] == (void *)v66)
  {
    uint64_t v39 = v48;
  }
  else
  {
    uint64_t v39 = v48;
    while (*((unsigned char *)*v38 + 8) != 17)
    {
      if (++v38 == (const void **)v66) {
        goto LABEL_44;
      }
    }
  }
  if (v38 == (const void **)v66)
  {
LABEL_44:
    uint64_t v41 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(__p, 17);
    uint64_t v37 = v58;
  }
  else
  {
    if (!v40) {
      __cxa_bad_cast();
    }
    uint64_t v41 = v40 + 12;
  }
  v37((uint64_t)v57, v41);
  uint64_t v52 = a1 + 192;
  uint64_t v53 = QMIServiceMsg::create();
  int v54 = 25000;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 1174405120;
  _DWORD v49[2] = ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2;
  _OWORD v49[3] = &__block_descriptor_tmp_270;
  v49[4] = a1;
  unint64_t v42 = *(void **)v39;
  if (*(void *)v39) {
    unint64_t v42 = _Block_copy(v42);
  }
  uint64_t v43 = *(NSObject **)(v39 + 8);
  int v50 = v42;
  dispatch_object_t object = v43;
  if (v43) {
    dispatch_retain(v43);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  uint64_t v70 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetBandFilterInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  dispatch_object_t v71 = &unk_1E6195EE0;
  uint64_t v72 = v49;
  unint64_t v44 = _Block_copy(&aBlock);
  uint64_t v56 = v44;
  if (v53)
  {
    qmi::Client::send();
    unint64_t v44 = v56;
  }
  if (v44) {
    _Block_release(v44);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (cf) {
    CFRelease(cf);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  CFRelease(v11);
  return MEMORY[0x1BA9C7760](v68);
}

void sub_1B8BC5B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8BC5C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a32);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(v33 - 184);
  MEMORY[0x1BA9C7760](v33 - 176);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::setScanFreqBandFilter_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  CFNumberRef v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v46 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v46;
    _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Setting Scan Frequency Band filter info with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v68[0] = 0xAAAAAAAAAAAAAAAALL;
  v68[1] = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v68, *a2);
  uint64_t v10 = (const void *)ctu::cf::map_adapter::copyCFArrayRef(v9, (const __CFString *)*MEMORY[0x1E4FB96D8]);
  uint64_t v67 = v10;
  if (v10) {
    uint64_t v11 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v11) {
    goto LABEL_65;
  }
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v12;
  long long v66 = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v61[0] = MEMORY[0x1E4F143A8];
  v61[1] = 1174405120;
  uint64_t v62 = ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  long long v63 = &__block_descriptor_tmp_273;
  CFTypeRef cf = v10;
  if (v10) {
    CFRetain(v10);
  }
  uint64_t v48 = a4;
  CFNumberRef v13 = (char *)__p[1];
  int v14 = (char *)v66;
  uint64_t v15 = (const void **)__p[1];
  int v47 = a3;
  if (__p[1] != (void *)v66)
  {
    uint64_t v15 = (const void **)__p[1];
    while (*((unsigned char *)*v15 + 8) != 16)
    {
      if (++v15 == (const void **)v66) {
        goto LABEL_17;
      }
    }
  }
  if (v15 != (const void **)v66)
  {
    if (!v16) {
      __cxa_bad_cast();
    }
    uint64_t v17 = v16 + 16;
    goto LABEL_40;
  }
LABEL_17:
  unint64_t v18 = operator new(0x28uLL);
  uint64_t v19 = v18;
  v18[8] = 16;
  *(void *)unint64_t v18 = &unk_1F12687D0;
  *((void *)v18 + 2) = 0;
  uint64_t v17 = v18 + 16;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = 0;
  if ((unint64_t)v14 >= *((void *)&v66 + 1))
  {
    int64_t v20 = v14 - v13;
    uint64_t v21 = (v14 - v13) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = *((void *)&v66 + 1) - (void)v13;
    if ((uint64_t)(*((void *)&v66 + 1) - (void)v13) >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v25 = operator new(8 * v24);
      uint64_t v26 = &v25[8 * v21];
      uint64_t v27 = &v25[8 * v24];
      *uint64_t v26 = v19;
      uint64_t v28 = (uint64_t)(v26 + 1);
      if (v13 != v14)
      {
LABEL_28:
        if ((unint64_t)(v20 - 8) < 0x58) {
          goto LABEL_74;
        }
        if ((unint64_t)(v13 - v25) < 0x20) {
          goto LABEL_74;
        }
        unint64_t v29 = ((unint64_t)(v20 - 8) >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v31 = &v14[-v30];
        uint64_t v26 = (void *)((char *)v26 - v30);
        long long v32 = &v25[8 * v21 - 16];
        uint64_t v33 = v14 - 16;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          _OWORD *v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 4;
        }
        while (v34);
        int v14 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_74:
          do
          {
            uint64_t v36 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v26 = v36;
          }
          while (v14 != v13);
        }
        CFNumberRef v13 = (char *)__p[1];
        __p[1] = v26;
        *(void *)&long long v66 = v28;
        *((void *)&v66 + 1) = v27;
        if (!v13) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (void *)(8 * v21);
      uint64_t v27 = 0;
      *(void *)(8 * v21) = v19;
      uint64_t v28 = 8 * v21 + 8;
      if (v13 != v14) {
        goto LABEL_28;
      }
    }
    __p[1] = v26;
    *(void *)&long long v66 = v28;
    *((void *)&v66 + 1) = v27;
    if (!v13)
    {
LABEL_39:
      *(void *)&long long v66 = v28;
      goto LABEL_40;
    }
LABEL_38:
    operator delete(v13);
    goto LABEL_39;
  }
  *(void *)int v14 = v18;
  *(void *)&long long v66 = v14 + 8;
LABEL_40:
  v62((uint64_t)v61, (uint64_t)v17);
  v57[0] = MEMORY[0x1E4F143A8];
  v57[1] = 0x40000000;
  uint64_t v37 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_274;
  long long v58 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_274;
  uint64_t v59 = &__block_descriptor_tmp_275;
  int v60 = v47;
  long long v38 = (const void **)__p[1];
  if (__p[1] == (void *)v66)
  {
    uint64_t v39 = v48;
  }
  else
  {
    uint64_t v39 = v48;
    while (*((unsigned char *)*v38 + 8) != 17)
    {
      if (++v38 == (const void **)v66) {
        goto LABEL_49;
      }
    }
  }
  if (v38 == (const void **)v66)
  {
LABEL_49:
    uint64_t v41 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(__p, 17);
    uint64_t v37 = v58;
  }
  else
  {
    if (!v40) {
      __cxa_bad_cast();
    }
    uint64_t v41 = v40 + 12;
  }
  v37((uint64_t)v57, v41);
  uint64_t v52 = a1 + 192;
  uint64_t v53 = QMIServiceMsg::create();
  int v54 = 25000;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 1174405120;
  _DWORD v49[2] = ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2;
  _OWORD v49[3] = &__block_descriptor_tmp_279;
  v49[4] = a1;
  unint64_t v42 = *(void **)v39;
  if (*(void *)v39) {
    unint64_t v42 = _Block_copy(v42);
  }
  uint64_t v43 = *(NSObject **)(v39 + 8);
  int v50 = v42;
  dispatch_object_t object = v43;
  if (v43) {
    dispatch_retain(v43);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  uint64_t v70 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  dispatch_object_t v71 = &unk_1E6195F08;
  uint64_t v72 = v49;
  unint64_t v44 = _Block_copy(&aBlock);
  uint64_t v56 = v44;
  if (v53)
  {
    qmi::Client::send();
    unint64_t v44 = v56;
  }
  if (v44) {
    _Block_release(v44);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v50) {
    _Block_release(v50);
  }
  if (cf) {
    CFRelease(cf);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
LABEL_65:
  if (v10) {
    CFRelease(v10);
  }
  return MEMORY[0x1BA9C7760](v68);
}

void sub_1B8BC623C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B8BC62B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a32);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(v33 - 184);
  MEMORY[0x1BA9C7760](v33 - 176);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::setWiFiStatus_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = operator new(0x28uLL);
  long long v7 = xmmword_1B8C347C0;
  strcpy((char *)__p, "Setting WiFi status is not supported");
  CreateError();
  operator delete(__p);
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  uint64_t v4 = 0;
  coex::CommandDriver::Callback::operator()(a3, (const void **)&v5, &v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1B8BC63E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setLAAConfig_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  long long v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v109 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v109;
    _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Setting LAA config with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v120[0] = 0xAAAAAAAAAAAAAAAALL;
  v120[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v120, *a2);
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v8;
  long long v119 = v8;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  long long v9 = (char *)__p[1];
  uint64_t v10 = (char *)v119;
  uint64_t v11 = (const void **)__p[1];
  if (__p[1] != (void *)v119)
  {
    uint64_t v11 = (const void **)__p[1];
    while (*((unsigned char *)*v11 + 8) != 1)
    {
      if (++v11 == (const void **)v119) {
        goto LABEL_11;
      }
    }
  }
  if (v11 == (const void **)v119)
  {
LABEL_11:
    int v14 = operator new(0x10uLL);
    uint64_t v15 = v14;
    v14[4] = 1;
    *(void *)int v14 = &unk_1F1268640;
    if ((unint64_t)v10 < *((void *)&v119 + 1))
    {
      *(void *)uint64_t v10 = v14;
      uint64_t v16 = (uint64_t)(v10 + 8);
LABEL_33:
      CFNumberRef v13 = (char *)v15 + 9;
      *(void *)&long long v119 = v16;
      goto LABEL_34;
    }
    int64_t v17 = v10 - v9;
    uint64_t v18 = (v10 - v9) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = *((void *)&v119 + 1) - (void)v9;
    if ((uint64_t)(*((void *)&v119 + 1) - (void)v9) >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v22 = operator new(8 * v21);
      uint64_t v23 = &v22[8 * v18];
      unint64_t v24 = &v22[8 * v21];
      void *v23 = v15;
      uint64_t v16 = (uint64_t)(v23 + 1);
      if (v9 != v10)
      {
LABEL_22:
        if ((unint64_t)(v17 - 8) < 0x58) {
          goto LABEL_154;
        }
        if ((unint64_t)(v9 - v22) < 0x20) {
          goto LABEL_154;
        }
        unint64_t v25 = ((unint64_t)(v17 - 8) >> 3) + 1;
        uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v27 = &v10[-v26];
        uint64_t v23 = (void *)((char *)v23 - v26);
        uint64_t v28 = &v22[8 * v18 - 16];
        unint64_t v29 = v10 - 16;
        uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          _OWORD *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        uint64_t v10 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_154:
          do
          {
            uint64_t v32 = *((void *)v10 - 1);
            v10 -= 8;
            *--uint64_t v23 = v32;
          }
          while (v10 != v9);
        }
        long long v9 = (char *)__p[1];
        __p[1] = v23;
        *(void *)&long long v119 = v16;
        *((void *)&v119 + 1) = v24;
        if (!v9) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v23 = (void *)(8 * v18);
      unint64_t v24 = 0;
      *(void *)(8 * v18) = v15;
      uint64_t v16 = 8 * v18 + 8;
      if (v9 != v10) {
        goto LABEL_22;
      }
    }
    __p[1] = v23;
    *(void *)&long long v119 = v16;
    *((void *)&v119 + 1) = v24;
    if (!v9) {
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v9);
    goto LABEL_33;
  }
  if (!v12) {
    __cxa_bad_cast();
  }
  CFNumberRef v13 = v12 + 9;
LABEL_34:
  *CFNumberRef v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v120, (const __CFString *)*MEMORY[0x1E4FB9750]);
  uint64_t v33 = (char *)__p[1];
  uint64_t v34 = (char *)v119;
  long long v35 = (const void **)__p[1];
  if (__p[1] != (void *)v119)
  {
    long long v35 = (const void **)__p[1];
    while (*((unsigned char *)*v35 + 8) != 2)
    {
      if (++v35 == (const void **)v119) {
        goto LABEL_42;
      }
    }
  }
  if (v35 == (const void **)v119)
  {
LABEL_42:
    long long v38 = operator new(0x10uLL);
    uint64_t v39 = v38;
    v38[4] = 2;
    *(void *)long long v38 = &unk_1F1268690;
    if ((unint64_t)v34 < *((void *)&v119 + 1))
    {
      *(void *)uint64_t v34 = v38;
      uint64_t v40 = (uint64_t)(v34 + 8);
LABEL_64:
      uint64_t v37 = (char *)v39 + 9;
      *(void *)&long long v119 = v40;
      goto LABEL_65;
    }
    int64_t v41 = v34 - v33;
    uint64_t v42 = (v34 - v33) >> 3;
    unint64_t v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v44 = *((void *)&v119 + 1) - (void)v33;
    if ((uint64_t)(*((void *)&v119 + 1) - (void)v33) >> 2 > v43) {
      unint64_t v43 = v44 >> 2;
    }
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v43;
    }
    if (v45)
    {
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFDictionaryRef v46 = operator new(8 * v45);
      int v47 = &v46[8 * v42];
      uint64_t v48 = &v46[8 * v45];
      void *v47 = v39;
      uint64_t v40 = (uint64_t)(v47 + 1);
      if (v33 != v34)
      {
LABEL_53:
        if ((unint64_t)(v41 - 8) < 0x58) {
          goto LABEL_155;
        }
        if ((unint64_t)(v33 - v46) < 0x20) {
          goto LABEL_155;
        }
        unint64_t v49 = ((unint64_t)(v41 - 8) >> 3) + 1;
        uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v51 = &v34[-v50];
        int v47 = (void *)((char *)v47 - v50);
        uint64_t v52 = &v46[8 * v42 - 16];
        uint64_t v53 = v34 - 16;
        uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *uint64_t v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        uint64_t v34 = v51;
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_155:
          do
          {
            uint64_t v56 = *((void *)v34 - 1);
            v34 -= 8;
            *--int v47 = v56;
          }
          while (v34 != v33);
        }
        uint64_t v33 = (char *)__p[1];
        __p[1] = v47;
        *(void *)&long long v119 = v40;
        *((void *)&v119 + 1) = v48;
        if (!v33) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
    }
    else
    {
      CFDictionaryRef v46 = 0;
      int v47 = (void *)(8 * v42);
      uint64_t v48 = 0;
      *(void *)(8 * v42) = v39;
      uint64_t v40 = 8 * v42 + 8;
      if (v33 != v34) {
        goto LABEL_53;
      }
    }
    __p[1] = v47;
    *(void *)&long long v119 = v40;
    *((void *)&v119 + 1) = v48;
    if (!v33) {
      goto LABEL_64;
    }
LABEL_63:
    operator delete(v33);
    goto LABEL_64;
  }
  if (!v36) {
    __cxa_bad_cast();
  }
  uint64_t v37 = v36 + 9;
LABEL_65:
  unsigned char *v37 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v120, (const __CFString *)*MEMORY[0x1E4FB97A8]);
  long long v57 = (char *)__p[1];
  long long v58 = (char *)v119;
  uint64_t v59 = (const void **)__p[1];
  if (__p[1] != (void *)v119)
  {
    uint64_t v59 = (const void **)__p[1];
    while (*((unsigned char *)*v59 + 8) != 3)
    {
      if (++v59 == (const void **)v119) {
        goto LABEL_73;
      }
    }
  }
  if (v59 == (const void **)v119)
  {
LABEL_73:
    uint64_t v62 = (char *)operator new(0x10uLL);
    long long v63 = v62;
    v62[8] = 3;
    *(void *)uint64_t v62 = &unk_1F12686E0;
    *((_DWORD *)v62 + 3) = 0;
    uint64_t v61 = v62 + 12;
    if ((unint64_t)v58 < *((void *)&v119 + 1))
    {
      *(void *)long long v58 = v62;
      *(void *)&long long v119 = v58 + 8;
      goto LABEL_96;
    }
    int64_t v64 = v58 - v57;
    uint64_t v65 = (v58 - v57) >> 3;
    unint64_t v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v67 = *((void *)&v119 + 1) - (void)v57;
    if ((uint64_t)(*((void *)&v119 + 1) - (void)v57) >> 2 > v66) {
      unint64_t v66 = v67 >> 2;
    }
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v68)
    {
      if (v68 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v69 = operator new(8 * v68);
      uint64_t v70 = &v69[8 * v65];
      dispatch_object_t v71 = &v69[8 * v68];
      *uint64_t v70 = v63;
      uint64_t v72 = (uint64_t)(v70 + 1);
      if (v57 != v58)
      {
LABEL_84:
        if ((unint64_t)(v64 - 8) < 0x58) {
          goto LABEL_156;
        }
        if ((unint64_t)(v57 - v69) < 0x20) {
          goto LABEL_156;
        }
        unint64_t v73 = ((unint64_t)(v64 - 8) >> 3) + 1;
        uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v75 = &v58[-v74];
        uint64_t v70 = (void *)((char *)v70 - v74);
        uint64_t v76 = &v69[8 * v65 - 16];
        unint64_t v77 = v58 - 16;
        uint64_t v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *uint64_t v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        long long v58 = v75;
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_156:
          do
          {
            uint64_t v80 = *((void *)v58 - 1);
            v58 -= 8;
            *--uint64_t v70 = v80;
          }
          while (v58 != v57);
        }
        long long v57 = (char *)__p[1];
        __p[1] = v70;
        *(void *)&long long v119 = v72;
        *((void *)&v119 + 1) = v71;
        if (!v57) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    else
    {
      unint64_t v69 = 0;
      uint64_t v70 = (void *)(8 * v65);
      dispatch_object_t v71 = 0;
      *(void *)(8 * v65) = v63;
      uint64_t v72 = 8 * v65 + 8;
      if (v57 != v58) {
        goto LABEL_84;
      }
    }
    __p[1] = v70;
    *(void *)&long long v119 = v72;
    *((void *)&v119 + 1) = v71;
    if (!v57)
    {
LABEL_95:
      *(void *)&long long v119 = v72;
      goto LABEL_96;
    }
LABEL_94:
    operator delete(v57);
    goto LABEL_95;
  }
  if (!v60) {
    __cxa_bad_cast();
  }
  uint64_t v61 = v60 + 12;
LABEL_96:
  *uint64_t v61 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v120, (const __CFString *)*MEMORY[0x1E4FB9718]);
  long long v81 = (char *)__p[1];
  uint64_t v82 = (char *)v119;
  uint64_t v83 = (const void **)__p[1];
  if (__p[1] != (void *)v119)
  {
    uint64_t v83 = (const void **)__p[1];
    while (*((unsigned char *)*v83 + 8) != 4)
    {
      if (++v83 == (const void **)v119) {
        goto LABEL_104;
      }
    }
  }
  if (v83 == (const void **)v119)
  {
LABEL_104:
    long long v86 = (char *)operator new(0x10uLL);
    dispatch_object_t v87 = v86;
    v86[8] = 4;
    *(void *)long long v86 = &unk_1F1268730;
    *((_DWORD *)v86 + 3) = 0;
    long long v85 = v86 + 12;
    if ((unint64_t)v82 < *((void *)&v119 + 1))
    {
      *(void *)uint64_t v82 = v86;
      *(void *)&long long v119 = v82 + 8;
      goto LABEL_127;
    }
    int64_t v88 = v82 - v81;
    uint64_t v89 = (v82 - v81) >> 3;
    unint64_t v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v91 = *((void *)&v119 + 1) - (void)v81;
    if ((uint64_t)(*((void *)&v119 + 1) - (void)v81) >> 2 > v90) {
      unint64_t v90 = v91 >> 2;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v90;
    }
    if (v92)
    {
      if (v92 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v93 = operator new(8 * v92);
      unint64_t v94 = &v93[8 * v89];
      uint64_t v95 = &v93[8 * v92];
      *unint64_t v94 = v87;
      uint64_t v96 = (uint64_t)(v94 + 1);
      if (v81 != v82)
      {
LABEL_115:
        if ((unint64_t)(v88 - 8) < 0x58) {
          goto LABEL_157;
        }
        if ((unint64_t)(v81 - v93) < 0x20) {
          goto LABEL_157;
        }
        unint64_t v97 = ((unint64_t)(v88 - 8) >> 3) + 1;
        uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v99 = &v82[-v98];
        unint64_t v94 = (void *)((char *)v94 - v98);
        unint64_t v100 = &v93[8 * v89 - 16];
        uint64_t v101 = v82 - 16;
        uint64_t v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v103 = *(_OWORD *)v101;
          *(v100 - 1) = *((_OWORD *)v101 - 1);
          *unint64_t v100 = v103;
          v100 -= 2;
          v101 -= 32;
          v102 -= 4;
        }
        while (v102);
        uint64_t v82 = v99;
        if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_157:
          do
          {
            uint64_t v104 = *((void *)v82 - 1);
            v82 -= 8;
            *--unint64_t v94 = v104;
          }
          while (v82 != v81);
        }
        long long v81 = (char *)__p[1];
        __p[1] = v94;
        *(void *)&long long v119 = v96;
        *((void *)&v119 + 1) = v95;
        if (!v81) {
          goto LABEL_126;
        }
        goto LABEL_125;
      }
    }
    else
    {
      uint64_t v93 = 0;
      unint64_t v94 = (void *)(8 * v89);
      uint64_t v95 = 0;
      *(void *)(8 * v89) = v87;
      uint64_t v96 = 8 * v89 + 8;
      if (v81 != v82) {
        goto LABEL_115;
      }
    }
    __p[1] = v94;
    *(void *)&long long v119 = v96;
    *((void *)&v119 + 1) = v95;
    if (!v81)
    {
LABEL_126:
      *(void *)&long long v119 = v96;
      goto LABEL_127;
    }
LABEL_125:
    operator delete(v81);
    goto LABEL_126;
  }
  if (!v84) {
    __cxa_bad_cast();
  }
  long long v85 = v84 + 12;
LABEL_127:
  *long long v85 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v120, (const __CFString *)*MEMORY[0x1E4FB9828]);
  uint64_t v113 = a1 + 192;
  uint64_t v114 = QMIServiceMsg::create();
  int v115 = 25000;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  v110[0] = MEMORY[0x1E4F143A8];
  v110[1] = 1174405120;
  v110[2] = ___ZN4coex16QMICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v110[3] = &__block_descriptor_tmp_263;
  v110[4] = a1;
  uint64_t v105 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v105 = _Block_copy(v105);
  }
  long long v106 = *(NSObject **)(a4 + 8);
  uint64_t v111 = v105;
  dispatch_object_t object = v106;
  if (v106) {
    dispatch_retain(v106);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  uint64_t v122 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetLaaParamsReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  unint64_t v123 = &unk_1E6195EB8;
  v124 = v110;
  uint64_t v107 = _Block_copy(&aBlock);
  uint64_t v117 = v107;
  if (v114)
  {
    qmi::Client::send();
    uint64_t v107 = v117;
  }
  if (v107) {
    _Block_release(v107);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v111) {
    _Block_release(v111);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v120);
}

void sub_1B8BC6F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setTimeShareConfig_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v159 = *a2;
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v159;
    _os_log_debug_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Time share config with: %@", buf, 0xCu);
  }
  v204[0] = 0xAAAAAAAAAAAAAAAALL;
  v204[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v204, *a2);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v6;
  long long v203 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  long long v7 = (const void **)__p[1];
  if (__p[1] != (void *)v203)
  {
    while (*((unsigned char *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v203) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == (const void **)v203)
  {
LABEL_10:
    long long v9 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v8) {
      __cxa_bad_cast();
    }
    long long v9 = v8 + 9;
  }
  char *v9 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v204, (const __CFString *)*MEMORY[0x1E4FB9808]);
  uint64_t v10 = (const void **)__p[1];
  if (__p[1] != (void *)v203)
  {
    while (*((unsigned char *)*v10 + 8) != 16)
    {
      if (++v10 == (const void **)v203) {
        goto LABEL_18;
      }
    }
  }
  if (v10 == (const void **)v203)
  {
LABEL_18:
    long long v12 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(__p, 16);
  }
  else
  {
    if (!v11) {
      __cxa_bad_cast();
    }
    long long v12 = v11 + 12;
  }
  *(_DWORD *)long long v12 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v204, (const __CFString *)*MEMORY[0x1E4FB9840]);
  int v14 = (char *)__p[1];
  CFNumberRef v13 = (char *)v203;
  uint64_t v15 = (const void **)__p[1];
  uint64_t v188 = a1;
  if (__p[1] != (void *)v203)
  {
    uint64_t v15 = (const void **)__p[1];
    while (*((unsigned char *)*v15 + 8) != 18)
    {
      if (++v15 == (const void **)v203) {
        goto LABEL_27;
      }
    }
  }
  if (v15 == (const void **)v203)
  {
LABEL_27:
    uint64_t v18 = (char *)operator new(0x18uLL);
    unint64_t v19 = v18;
    v18[8] = 18;
    *(void *)uint64_t v18 = &unk_1F12688A0;
    *((void *)v18 + 2) = 0;
    int64_t v17 = v18 + 16;
    if ((unint64_t)v13 < *((void *)&v203 + 1))
    {
      *(void *)CFNumberRef v13 = v18;
      *(void *)&long long v203 = v13 + 8;
      goto LABEL_50;
    }
    int64_t v20 = v13 - v14;
    uint64_t v21 = (v13 - v14) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = *((void *)&v203 + 1) - (void)v14;
    if ((uint64_t)(*((void *)&v203 + 1) - (void)v14) >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v25 = operator new(8 * v24);
      uint64_t v26 = &v25[8 * v21];
      uint64_t v27 = &v25[8 * v24];
      *uint64_t v26 = v19;
      uint64_t v28 = (uint64_t)(v26 + 1);
      if (v14 != v13)
      {
LABEL_38:
        if ((unint64_t)(v20 - 8) < 0x58) {
          goto LABEL_277;
        }
        if ((unint64_t)(v14 - v25) < 0x20) {
          goto LABEL_277;
        }
        unint64_t v29 = ((unint64_t)(v20 - 8) >> 3) + 1;
        uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        long long v31 = &v13[-v30];
        uint64_t v26 = (void *)((char *)v26 - v30);
        uint64_t v32 = &v25[8 * v21 - 16];
        uint64_t v33 = v13 - 16;
        uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          _OWORD *v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 4;
        }
        while (v34);
        CFNumberRef v13 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_277:
          do
          {
            uint64_t v36 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v26 = v36;
          }
          while (v13 != v14);
        }
        int v14 = (char *)__p[1];
        __p[1] = v26;
        *(void *)&long long v203 = v28;
        *((void *)&v203 + 1) = v27;
        if (!v14) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v26 = (void *)(8 * v21);
      uint64_t v27 = 0;
      *(void *)(8 * v21) = v19;
      uint64_t v28 = 8 * v21 + 8;
      if (v14 != v13) {
        goto LABEL_38;
      }
    }
    __p[1] = v26;
    *(void *)&long long v203 = v28;
    *((void *)&v203 + 1) = v27;
    if (!v14)
    {
LABEL_49:
      *(void *)&long long v203 = v28;
      goto LABEL_50;
    }
LABEL_48:
    operator delete(v14);
    goto LABEL_49;
  }
  if (!v16) {
    __cxa_bad_cast();
  }
  int64_t v17 = v16 + 16;
LABEL_50:
  void *v17 = (int)ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v204, (const __CFString *)*MEMORY[0x1E4FB9838]);
  long long v38 = (char *)__p[1];
  uint64_t v37 = (char *)v203;
  uint64_t v39 = (const void **)__p[1];
  if (__p[1] != (void *)v203)
  {
    uint64_t v39 = (const void **)__p[1];
    while (*((unsigned char *)*v39 + 8) != 19)
    {
      if (++v39 == (const void **)v203) {
        goto LABEL_58;
      }
    }
  }
  if (v39 == (const void **)v203)
  {
LABEL_58:
    uint64_t v42 = (char *)operator new(0x10uLL);
    unint64_t v43 = v42;
    v42[8] = 19;
    *(void *)uint64_t v42 = &unk_1F12688F0;
    *((_WORD *)v42 + 5) = 0;
    int64_t v41 = v42 + 10;
    if ((unint64_t)v37 < *((void *)&v203 + 1))
    {
      *(void *)uint64_t v37 = v42;
      *(void *)&long long v203 = v37 + 8;
      goto LABEL_81;
    }
    int64_t v44 = v37 - v38;
    uint64_t v45 = (v37 - v38) >> 3;
    unint64_t v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v47 = *((void *)&v203 + 1) - (void)v38;
    if ((uint64_t)(*((void *)&v203 + 1) - (void)v38) >> 2 > v46) {
      unint64_t v46 = v47 >> 2;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v46;
    }
    if (v48)
    {
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v49 = operator new(8 * v48);
      uint64_t v50 = &v49[8 * v45];
      uint64_t v51 = &v49[8 * v48];
      void *v50 = v43;
      uint64_t v52 = (uint64_t)(v50 + 1);
      if (v38 != v37)
      {
LABEL_69:
        if ((unint64_t)(v44 - 8) < 0x58) {
          goto LABEL_278;
        }
        if ((unint64_t)(v38 - v49) < 0x20) {
          goto LABEL_278;
        }
        unint64_t v53 = ((unint64_t)(v44 - 8) >> 3) + 1;
        uint64_t v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
        long long v55 = &v37[-v54];
        uint64_t v50 = (void *)((char *)v50 - v54);
        uint64_t v56 = &v49[8 * v45 - 16];
        long long v57 = v37 - 16;
        uint64_t v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          _OWORD *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 4;
        }
        while (v58);
        uint64_t v37 = v55;
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_278:
          do
          {
            uint64_t v60 = *((void *)v37 - 1);
            v37 -= 8;
            *--uint64_t v50 = v60;
          }
          while (v37 != v38);
        }
        long long v38 = (char *)__p[1];
        __p[1] = v50;
        *(void *)&long long v203 = v52;
        *((void *)&v203 + 1) = v51;
        if (!v38) {
          goto LABEL_80;
        }
        goto LABEL_79;
      }
    }
    else
    {
      unint64_t v49 = 0;
      uint64_t v50 = (void *)(8 * v45);
      uint64_t v51 = 0;
      *(void *)(8 * v45) = v43;
      uint64_t v52 = 8 * v45 + 8;
      if (v38 != v37) {
        goto LABEL_69;
      }
    }
    __p[1] = v50;
    *(void *)&long long v203 = v52;
    *((void *)&v203 + 1) = v51;
    if (!v38)
    {
LABEL_80:
      *(void *)&long long v203 = v52;
      goto LABEL_81;
    }
LABEL_79:
    operator delete(v38);
    goto LABEL_80;
  }
  if (!v40) {
    __cxa_bad_cast();
  }
  int64_t v41 = v40 + 10;
LABEL_81:
  _WORD *v41 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v204, (const __CFString *)*MEMORY[0x1E4FB9920]);
  uint64_t v62 = (char *)__p[1];
  uint64_t v61 = (char *)v203;
  long long v63 = (const void **)__p[1];
  if (__p[1] != (void *)v203)
  {
    long long v63 = (const void **)__p[1];
    while (*((unsigned char *)*v63 + 8) != 20)
    {
      if (++v63 == (const void **)v203) {
        goto LABEL_89;
      }
    }
  }
  if (v63 == (const void **)v203)
  {
LABEL_89:
    unint64_t v66 = (char *)operator new(0x10uLL);
    uint64_t v67 = v66;
    v66[8] = 20;
    *(void *)unint64_t v66 = &unk_1F1268940;
    *((_WORD *)v66 + 5) = 0;
    uint64_t v65 = v66 + 10;
    if ((unint64_t)v61 < *((void *)&v203 + 1))
    {
      *(void *)uint64_t v61 = v66;
      *(void *)&long long v203 = v61 + 8;
      goto LABEL_112;
    }
    int64_t v68 = v61 - v62;
    uint64_t v69 = (v61 - v62) >> 3;
    unint64_t v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = *((void *)&v203 + 1) - (void)v62;
    if ((uint64_t)(*((void *)&v203 + 1) - (void)v62) >> 2 > v70) {
      unint64_t v70 = v71 >> 2;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v72 = v70;
    }
    if (v72)
    {
      if (v72 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v73 = operator new(8 * v72);
      uint64_t v74 = &v73[8 * v69];
      uint64_t v75 = &v73[8 * v72];
      *uint64_t v74 = v67;
      uint64_t v76 = (uint64_t)(v74 + 1);
      if (v62 != v61)
      {
LABEL_100:
        if ((unint64_t)(v68 - 8) < 0x58) {
          goto LABEL_279;
        }
        if ((unint64_t)(v62 - v73) < 0x20) {
          goto LABEL_279;
        }
        unint64_t v77 = ((unint64_t)(v68 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        long long v79 = &v61[-v78];
        uint64_t v74 = (void *)((char *)v74 - v78);
        uint64_t v80 = &v73[8 * v69 - 16];
        long long v81 = v61 - 16;
        uint64_t v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v83 = *(_OWORD *)v81;
          *(v80 - 1) = *((_OWORD *)v81 - 1);
          *uint64_t v80 = v83;
          v80 -= 2;
          v81 -= 32;
          v82 -= 4;
        }
        while (v82);
        uint64_t v61 = v79;
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_279:
          do
          {
            uint64_t v84 = *((void *)v61 - 1);
            v61 -= 8;
            *--uint64_t v74 = v84;
          }
          while (v61 != v62);
        }
        uint64_t v62 = (char *)__p[1];
        __p[1] = v74;
        *(void *)&long long v203 = v76;
        *((void *)&v203 + 1) = v75;
        if (!v62) {
          goto LABEL_111;
        }
        goto LABEL_110;
      }
    }
    else
    {
      unint64_t v73 = 0;
      uint64_t v74 = (void *)(8 * v69);
      uint64_t v75 = 0;
      *(void *)(8 * v69) = v67;
      uint64_t v76 = 8 * v69 + 8;
      if (v62 != v61) {
        goto LABEL_100;
      }
    }
    __p[1] = v74;
    *(void *)&long long v203 = v76;
    *((void *)&v203 + 1) = v75;
    if (!v62)
    {
LABEL_111:
      *(void *)&long long v203 = v76;
      goto LABEL_112;
    }
LABEL_110:
    operator delete(v62);
    goto LABEL_111;
  }
  if (!v64) {
    __cxa_bad_cast();
  }
  uint64_t v65 = v64 + 10;
LABEL_112:
  _WORD *v65 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v204, (const __CFString *)*MEMORY[0x1E4FB9940]);
  long long v86 = (char *)__p[1];
  long long v85 = (char *)v203;
  dispatch_object_t v87 = (const void **)__p[1];
  uint64_t v88 = v188;
  if (__p[1] != (void *)v203)
  {
    dispatch_object_t v87 = (const void **)__p[1];
    while (*((unsigned char *)*v87 + 8) != 21)
    {
      if (++v87 == (const void **)v203) {
        goto LABEL_120;
      }
    }
  }
  if (v87 == (const void **)v203)
  {
LABEL_120:
    uint64_t v91 = operator new(0x10uLL);
    unint64_t v92 = v91;
    v91[4] = 21;
    *(void *)uint64_t v91 = &unk_1F1268990;
    if ((unint64_t)v85 < *((void *)&v203 + 1))
    {
      *(void *)long long v85 = v91;
      uint64_t v93 = (uint64_t)(v85 + 8);
LABEL_142:
      unint64_t v90 = (char *)v92 + 9;
      *(void *)&long long v203 = v93;
      goto LABEL_143;
    }
    int64_t v94 = v85 - v86;
    uint64_t v95 = (v85 - v86) >> 3;
    unint64_t v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v97 = *((void *)&v203 + 1) - (void)v86;
    if ((uint64_t)(*((void *)&v203 + 1) - (void)v86) >> 2 > v96) {
      unint64_t v96 = v97 >> 2;
    }
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v98 = v96;
    }
    if (v98)
    {
      if (v98 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v99 = operator new(8 * v98);
      unint64_t v100 = &v99[8 * v95];
      uint64_t v101 = &v99[8 * v98];
      *unint64_t v100 = v92;
      uint64_t v93 = (uint64_t)(v100 + 1);
      if (v86 != v85)
      {
LABEL_131:
        if ((unint64_t)(v94 - 8) < 0x58) {
          goto LABEL_280;
        }
        if ((unint64_t)(v86 - v99) < 0x20) {
          goto LABEL_280;
        }
        unint64_t v102 = ((unint64_t)(v94 - 8) >> 3) + 1;
        uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v104 = &v85[-v103];
        unint64_t v100 = (void *)((char *)v100 - v103);
        uint64_t v105 = &v99[8 * v95 - 16];
        long long v106 = v85 - 16;
        uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v108 = *(_OWORD *)v106;
          *(v105 - 1) = *((_OWORD *)v106 - 1);
          _OWORD *v105 = v108;
          v105 -= 2;
          v106 -= 32;
          v107 -= 4;
        }
        while (v107);
        long long v85 = v104;
        if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_280:
          do
          {
            uint64_t v109 = *((void *)v85 - 1);
            v85 -= 8;
            *--unint64_t v100 = v109;
          }
          while (v85 != v86);
        }
        long long v86 = (char *)__p[1];
        __p[1] = v100;
        *(void *)&long long v203 = v93;
        *((void *)&v203 + 1) = v101;
        if (!v86) {
          goto LABEL_142;
        }
        goto LABEL_141;
      }
    }
    else
    {
      uint64_t v99 = 0;
      unint64_t v100 = (void *)(8 * v95);
      uint64_t v101 = 0;
      *(void *)(8 * v95) = v92;
      uint64_t v93 = 8 * v95 + 8;
      if (v86 != v85) {
        goto LABEL_131;
      }
    }
    __p[1] = v100;
    *(void *)&long long v203 = v93;
    *((void *)&v203 + 1) = v101;
    if (!v86) {
      goto LABEL_142;
    }
LABEL_141:
    operator delete(v86);
    goto LABEL_142;
  }
  if (!v89) {
    __cxa_bad_cast();
  }
  unint64_t v90 = v89 + 9;
LABEL_143:
  *unint64_t v90 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v204, (const __CFString *)*MEMORY[0x1E4FB9990]);
  uint64_t v199 = 0;
  v200 = 0;
  v201 = 0;
  CFArrayRef v110 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v204, (const __CFString *)*MEMORY[0x1E4FB99A8]);
  CFArrayRef theArray = v110;
  if (v110) {
    uint64_t v111 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    uint64_t v111 = 0;
  }
  if (!v111) {
    goto LABEL_236;
  }
  CFIndex Count = CFArrayGetCount(v110);
  if (Count >= 1)
  {
    CFIndex v113 = 0;
    int v189 = (__CFString *)*MEMORY[0x1E4FB9658];
    CFStringRef v114 = (const __CFString *)*MEMORY[0x1E4FB9538];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v113);
      uint64_t v116 = ValueAtIndex;
      if (!ValueAtIndex) {
        break;
      }
      CFTypeID v117 = CFGetTypeID(ValueAtIndex);
      if (v117 != CFDictionaryGetTypeID()) {
        break;
      }
      v193 = v116;
      CFRetain(v116);
      if (v116) {
        uint64_t v118 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v118 = 0;
      }
      if (!v118) {
        goto LABEL_159;
      }
      memset(buf, 170, sizeof(buf));
      long long v119 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v116);
      unsigned int Int = ctu::cf::map_adapter::getInt(v119, v189);
      uint64_t v121 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, v114);
      uint64_t v122 = v121;
      unint64_t v123 = v200;
      if (v200 >= v201)
      {
        uint64_t v125 = v199;
        int64_t v126 = (char *)v200 - (unsigned char *)v199;
        uint64_t v127 = ((char *)v200 - (unsigned char *)v199) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v129 = (char *)v201 - (unsigned char *)v199;
        if (((char *)v201 - (unsigned char *)v199) >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v128;
        }
        if (v130)
        {
          if (v130 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v131 = operator new(8 * v130);
        }
        else
        {
          __int16 v131 = 0;
        }
        uint64_t v132 = (unint64_t *)&v131[8 * v127];
        *uint64_t v132 = Int | (unint64_t)(v122 << 32);
        v124 = v132 + 1;
        if (v123 != v125)
        {
          unint64_t v133 = v123 - v125 - 8;
          if (v133 < 0x58) {
            goto LABEL_281;
          }
          if ((unint64_t)(v123 - v131 - v126) < 0x20) {
            goto LABEL_281;
          }
          uint64_t v134 = (v133 >> 3) + 1;
          uint64_t v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
          char v136 = &v123[-v135];
          uint64_t v132 = (unint64_t *)((char *)v132 - v135);
          long long v137 = &v131[8 * v127 - 16];
          uint64_t v138 = (long long *)(v123 - 16);
          uint64_t v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v140 = *v138;
            *(v137 - 1) = *(v138 - 1);
            *long long v137 = v140;
            v137 -= 2;
            v138 -= 2;
            v139 -= 4;
          }
          while (v139);
          unint64_t v123 = v136;
          if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_281:
            do
            {
              unint64_t v141 = *((void *)v123 - 1);
              v123 -= 8;
              *--uint64_t v132 = v141;
            }
            while (v123 != v125);
          }
          unint64_t v123 = v199;
        }
        uint64_t v199 = v132;
        v200 = v124;
        v201 = (unint64_t *)&v131[8 * v130];
        if (v123) {
          operator delete(v123);
        }
      }
      else
      {
        unint64_t *v200 = Int | (unint64_t)(v121 << 32);
        v124 = (unint64_t *)(v123 + 8);
      }
      v200 = v124;
      MEMORY[0x1BA9C7760](buf);
      uint64_t v116 = v193;
      if (!v193) {
        goto LABEL_149;
      }
LABEL_182:
      CFRelease(v116);
LABEL_149:
      if (++v113 == Count) {
        goto LABEL_183;
      }
    }
    uint64_t v116 = 0;
    v193 = 0;
LABEL_159:
    if (!v116) {
      goto LABEL_149;
    }
    goto LABEL_182;
  }
LABEL_183:
  __int16 v143 = (char *)__p[1];
  unint64_t v142 = (char *)v203;
  long long v144 = (const void **)__p[1];
  uint64_t v88 = v188;
  if (__p[1] != (void *)v203)
  {
    long long v144 = (const void **)__p[1];
    while (*((unsigned char *)*v144 + 8) != 17)
    {
      if (++v144 == (const void **)v203) {
        goto LABEL_192;
      }
    }
  }
  if (v144 == (const void **)v203)
  {
LABEL_192:
    uint64_t v147 = operator new(0x28uLL);
    unint64_t v148 = v147;
    v147[8] = 17;
    *(void *)uint64_t v147 = &unk_1F12689E0;
    *((void *)v147 + 2) = 0;
    int64_t v146 = v147 + 16;
    *((void *)v147 + 3) = 0;
    *((void *)v147 + 4) = 0;
    if ((unint64_t)v142 < *((void *)&v203 + 1))
    {
      *(void *)unint64_t v142 = v147;
      uint64_t v88 = v188;
      *(void *)&long long v203 = v142 + 8;
      goto LABEL_216;
    }
    int64_t v149 = v142 - v143;
    uint64_t v150 = (v142 - v143) >> 3;
    unint64_t v151 = v150 + 1;
    if ((unint64_t)(v150 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v152 = *((void *)&v203 + 1) - (void)v143;
    if ((uint64_t)(*((void *)&v203 + 1) - (void)v143) >> 2 > v151) {
      unint64_t v151 = v152 >> 2;
    }
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v153 = v151;
    }
    if (v153)
    {
      if (v153 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v154 = operator new(8 * v153);
      uint64_t v155 = &v154[8 * v150];
      uint64_t v156 = &v154[8 * v153];
      void *v155 = v148;
      uint64_t v157 = (uint64_t)(v155 + 1);
      if (v143 != v142)
      {
LABEL_203:
        unint64_t v158 = v149 - 8;
        if ((unint64_t)(v149 - 8) >= 0x58)
        {
          uint64_t v88 = v188;
          if ((unint64_t)(v143 - v154) >= 0x20)
          {
            uint64_t v160 = (v158 >> 3) + 1;
            uint64_t v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
            CFStringRef v162 = &v142[-v161];
            uint64_t v155 = (void *)((char *)v155 - v161);
            char v163 = &v154[8 * v150 - 16];
            v164 = v142 - 16;
            uint64_t v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              *char v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 4;
            }
            while (v165);
            unint64_t v142 = v162;
            if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_213:
              __int16 v143 = (char *)__p[1];
              __p[1] = v155;
              *(void *)&long long v203 = v157;
              *((void *)&v203 + 1) = v156;
              if (!v143)
              {
LABEL_215:
                *(void *)&long long v203 = v157;
                goto LABEL_216;
              }
LABEL_214:
              operator delete(v143);
              goto LABEL_215;
            }
          }
        }
        else
        {
          uint64_t v88 = v188;
        }
        do
        {
          uint64_t v167 = *((void *)v142 - 1);
          v142 -= 8;
          *--uint64_t v155 = v167;
        }
        while (v142 != v143);
        goto LABEL_213;
      }
    }
    else
    {
      unint64_t v154 = 0;
      uint64_t v155 = (void *)(8 * v150);
      uint64_t v156 = 0;
      *(void *)(8 * v150) = v148;
      uint64_t v157 = 8 * v150 + 8;
      if (v143 != v142) {
        goto LABEL_203;
      }
    }
    uint64_t v88 = v188;
    __p[1] = v155;
    *(void *)&long long v203 = v157;
    *((void *)&v203 + 1) = v156;
    if (!v143) {
      goto LABEL_215;
    }
    goto LABEL_214;
  }
  if (!v145) {
    __cxa_bad_cast();
  }
  int64_t v146 = v145 + 16;
  if (v145 + 16 != (char *)&v199)
  {
LABEL_216:
    v169 = (char *)v199;
    v168 = (char *)v200;
    size_t v170 = (char *)v200 - (unsigned char *)v199;
    unint64_t v171 = ((char *)v200 - (unsigned char *)v199) >> 3;
    uint64_t v172 = *((void *)v146 + 2);
    int64_t v173 = *(char **)v146;
    if (v171 <= (v172 - *(void *)v146) >> 3)
    {
      v179 = (char *)*((void *)v146 + 1);
      unint64_t v177 = (void **)(v146 + 8);
      v178 = v179;
      size_t v180 = v179 - v173;
      unint64_t v181 = (v179 - v173) >> 3;
      if (v181 >= v171)
      {
        if (v200 != v199) {
          memmove(v173, v199, (char *)v200 - (unsigned char *)v199);
        }
        goto LABEL_235;
      }
      uint64_t v182 = (char *)v199 + 8 * v181;
      if (v178 != v173)
      {
        memmove(v173, v199, v180);
        int64_t v173 = (char *)*v177;
      }
      size_t v170 = v168 - v182;
      if (v168 != v182) {
        memmove(v173, v182, v168 - v182);
      }
    }
    else
    {
      if (v173)
      {
        *((void *)v146 + 1) = v173;
        operator delete(v173);
        uint64_t v172 = 0;
        *(void *)int64_t v146 = 0;
        *((void *)v146 + 1) = 0;
        *((void *)v146 + 2) = 0;
      }
      if ((v170 & 0x8000000000000000) != 0) {
        goto LABEL_257;
      }
      uint64_t v174 = v172 >> 2;
      if (v172 >> 2 <= v171) {
        uint64_t v174 = v171;
      }
      unint64_t v175 = (unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v174;
      if (v175 >> 61) {
LABEL_257:
      }
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      uint64_t v176 = (char *)operator new(8 * v175);
      int64_t v173 = v176;
      *(void *)int64_t v146 = v176;
      *((void *)v146 + 1) = v176;
      *((void *)v146 + 2) = &v176[8 * v175];
      if (v168 != v169) {
        memcpy(v176, v169, v170);
      }
      unint64_t v177 = (void **)(v146 + 8);
    }
    uint64_t v88 = v188;
LABEL_235:
    *unint64_t v177 = &v173[v170];
  }
LABEL_236:
  v193 = (const void *)(v88 + 192);
  uint64_t v194 = QMIServiceMsg::create();
  int v195 = 25000;
  uint64_t v196 = 0;
  long long aBlock = 0;
  v190[0] = MEMORY[0x1E4F143A8];
  v190[1] = 1174405120;
  v190[2] = ___ZN4coex16QMICommandDriver23setTimeShareConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v190[3] = &__block_descriptor_tmp_288;
  v190[4] = v88;
  v183 = *(void **)a3;
  if (*(void *)a3) {
    v183 = _Block_copy(v183);
  }
  int v184 = *(NSObject **)(a3 + 8);
  v191 = v183;
  dispatch_object_t object = v184;
  if (v184) {
    dispatch_retain(v184);
  }
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 0x40000000;
  v206 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm18ConfigTimeShareReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v207 = &unk_1E6195F58;
  char v208 = v190;
  long long v185 = _Block_copy(buf);
  long long aBlock = v185;
  if (v194)
  {
    qmi::Client::send();
    long long v185 = aBlock;
  }
  if (v185) {
    _Block_release(v185);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v191) {
    _Block_release(v191);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v199)
  {
    v200 = (unint64_t *)v199;
    operator delete(v199);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v204);
}

void sub_1B8BC8224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setWCI2TxAntMap_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v119 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v119;
    _os_log_debug_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Tx antenna map with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  uint64_t v121 = a1;
  v135[0] = 0xAAAAAAAAAAAAAAAALL;
  v135[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v135, *a2);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v6;
  long long v134 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  long long v7 = (const void **)__p[1];
  if (__p[1] != (void *)v134)
  {
    while (*((unsigned char *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v134) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == (const void **)v134)
  {
LABEL_10:
    long long v9 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v8) {
      __cxa_bad_cast();
    }
    long long v9 = v8 + 9;
  }
  char *v9 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v135, (const __CFString *)*MEMORY[0x1E4FB9730]);
  uint64_t v11 = (char *)__p[1];
  uint64_t v10 = (char *)v134;
  long long v12 = (const void **)__p[1];
  uint64_t v120 = a2;
  if (__p[1] != (void *)v134)
  {
    long long v12 = (const void **)__p[1];
    while (*((unsigned char *)*v12 + 8) != 17)
    {
      if (++v12 == (const void **)v134) {
        goto LABEL_19;
      }
    }
  }
  if (v12 == (const void **)v134)
  {
LABEL_19:
    uint64_t v15 = operator new(0x10uLL);
    uint64_t v16 = v15;
    v15[4] = 17;
    *(void *)uint64_t v15 = &unk_1F1268A30;
    if ((unint64_t)v10 < *((void *)&v134 + 1))
    {
      *(void *)uint64_t v10 = v15;
      uint64_t v17 = (uint64_t)(v10 + 8);
LABEL_41:
      int v14 = (char *)v16 + 9;
      *(void *)&long long v134 = v17;
      goto LABEL_42;
    }
    int64_t v18 = v10 - v11;
    uint64_t v19 = (v10 - v11) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = *((void *)&v134 + 1) - (void)v11;
    if ((uint64_t)(*((void *)&v134 + 1) - (void)v11) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = operator new(8 * v22);
      unint64_t v24 = &v23[8 * v19];
      unint64_t v25 = &v23[8 * v22];
      *unint64_t v24 = v16;
      uint64_t v17 = (uint64_t)(v24 + 1);
      if (v11 != v10)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58) {
          goto LABEL_183;
        }
        if ((unint64_t)(v11 - v23) < 0x20) {
          goto LABEL_183;
        }
        unint64_t v26 = ((unint64_t)(v18 - 8) >> 3) + 1;
        uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v28 = &v10[-v27];
        unint64_t v24 = (void *)((char *)v24 - v27);
        unint64_t v29 = &v23[8 * v19 - 16];
        uint64_t v30 = v10 - 16;
        uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          _OWORD *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        uint64_t v10 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_183:
          do
          {
            uint64_t v33 = *((void *)v10 - 1);
            v10 -= 8;
            *--unint64_t v24 = v33;
          }
          while (v10 != v11);
        }
        uint64_t v11 = (char *)__p[1];
        __p[1] = v24;
        *(void *)&long long v134 = v17;
        *((void *)&v134 + 1) = v25;
        if (!v11) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v23 = 0;
      unint64_t v24 = (void *)(8 * v19);
      unint64_t v25 = 0;
      *(void *)(8 * v19) = v16;
      uint64_t v17 = 8 * v19 + 8;
      if (v11 != v10) {
        goto LABEL_30;
      }
    }
    __p[1] = v24;
    *(void *)&long long v134 = v17;
    *((void *)&v134 + 1) = v25;
    if (!v11) {
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v13) {
    __cxa_bad_cast();
  }
  int v14 = v13 + 9;
LABEL_42:
  *int v14 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v135, (const __CFString *)*MEMORY[0x1E4FB9818]);
  CFArrayRef v34 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v135, (const __CFString *)*MEMORY[0x1E4FB9900]);
  CFArrayRef theArray = v34;
  if (v34) {
    long long v35 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    long long v35 = 0;
  }
  if (!v35) {
    goto LABEL_122;
  }
  uint64_t v37 = (char *)__p[1];
  uint64_t v36 = (char *)v134;
  long long v38 = (const void **)__p[1];
  if (__p[1] != (void *)v134)
  {
    long long v38 = (const void **)__p[1];
    while (*((unsigned char *)*v38 + 8) != 16)
    {
      if (++v38 == (const void **)v134) {
        goto LABEL_54;
      }
    }
  }
  if (v38 == (const void **)v134)
  {
LABEL_54:
    int64_t v41 = (char *)operator new(0x28uLL);
    uint64_t v42 = v41;
    v41[8] = 16;
    *(void *)int64_t v41 = &unk_1F1268A80;
    *((void *)v41 + 2) = 0;
    uint64_t v40 = v41 + 16;
    *((void *)v41 + 3) = 0;
    *((void *)v41 + 4) = 0;
    if ((unint64_t)v36 < *((void *)&v134 + 1))
    {
      *(void *)uint64_t v36 = v41;
      *(void *)&long long v134 = v36 + 8;
      goto LABEL_77;
    }
    int64_t v43 = v36 - v37;
    uint64_t v44 = (v36 - v37) >> 3;
    unint64_t v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v46 = *((void *)&v134 + 1) - (void)v37;
    if ((uint64_t)(*((void *)&v134 + 1) - (void)v37) >> 2 > v45) {
      unint64_t v45 = v46 >> 2;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    if (v47)
    {
      if (v47 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v48 = operator new(8 * v47);
      unint64_t v49 = &v48[8 * v44];
      uint64_t v50 = &v48[8 * v47];
      void *v49 = v42;
      uint64_t v51 = (uint64_t)(v49 + 1);
      if (v37 != v36)
      {
LABEL_65:
        if ((unint64_t)(v43 - 8) < 0x58) {
          goto LABEL_184;
        }
        if ((unint64_t)(v37 - v48) < 0x20) {
          goto LABEL_184;
        }
        unint64_t v52 = ((unint64_t)(v43 - 8) >> 3) + 1;
        uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v54 = &v36[-v53];
        unint64_t v49 = (void *)((char *)v49 - v53);
        long long v55 = &v48[8 * v44 - 16];
        uint64_t v56 = v36 - 16;
        uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          *long long v55 = v58;
          v55 -= 2;
          v56 -= 32;
          v57 -= 4;
        }
        while (v57);
        uint64_t v36 = v54;
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_184:
          do
          {
            uint64_t v59 = *((void *)v36 - 1);
            v36 -= 8;
            *--unint64_t v49 = v59;
          }
          while (v36 != v37);
        }
        uint64_t v37 = (char *)__p[1];
        __p[1] = v49;
        *(void *)&long long v134 = v51;
        *((void *)&v134 + 1) = v50;
        if (!v37) {
          goto LABEL_76;
        }
        goto LABEL_75;
      }
    }
    else
    {
      unint64_t v48 = 0;
      unint64_t v49 = (void *)(8 * v44);
      uint64_t v50 = 0;
      *(void *)(8 * v44) = v42;
      uint64_t v51 = 8 * v44 + 8;
      if (v37 != v36) {
        goto LABEL_65;
      }
    }
    __p[1] = v49;
    *(void *)&long long v134 = v51;
    *((void *)&v134 + 1) = v50;
    if (!v37)
    {
LABEL_76:
      *(void *)&long long v134 = v51;
      goto LABEL_77;
    }
LABEL_75:
    operator delete(v37);
    goto LABEL_76;
  }
  if (!v39) {
    __cxa_bad_cast();
  }
  uint64_t v40 = v39 + 16;
LABEL_77:
  CFIndex Count = CFArrayGetCount(v34);
  if (Count >= 1)
  {
    CFIndex v61 = 0;
    unint64_t v123 = (__CFString *)*MEMORY[0x1E4FB98F8];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v61);
      long long v63 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v64 = CFGetTypeID(ValueAtIndex);
        if (v64 != CFDictionaryGetTypeID())
        {
          long long v63 = 0;
LABEL_90:
          if (!v63) {
            goto LABEL_79;
          }
LABEL_108:
          CFRelease(v63);
          goto LABEL_79;
        }
        CFRetain(v63);
      }
      if (v63) {
        uint64_t v65 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v65 = 0;
      }
      if (!v65) {
        goto LABEL_90;
      }
      *(void *)&long long aBlock = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&aBlock + 1) = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v66 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&aBlock, (const __CFDictionary *)v63);
      char Int = ctu::cf::map_adapter::getInt(v66, v123);
      char v68 = Int;
      unint64_t v70 = (unsigned char *)v40[1];
      unint64_t v69 = v40[2];
      if ((unint64_t)v70 < v69)
      {
        *unint64_t v70 = Int;
        uint64_t v71 = (uint64_t)(v70 + 1);
        goto LABEL_107;
      }
      unint64_t v72 = (unsigned char *)*v40;
      unint64_t v73 = (unint64_t)&v70[-*v40];
      unint64_t v74 = v73 + 1;
      if ((uint64_t)(v73 + 1) < 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v75 = v69 - (void)v72;
      if (2 * v75 > v74) {
        unint64_t v74 = 2 * v75;
      }
      if (v75 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v76 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v76 = v74;
      }
      if (v76)
      {
        unint64_t v77 = operator new(v76);
        uint64_t v78 = &v77[v73];
        v77[v73] = v68;
        uint64_t v71 = (uint64_t)&v77[v73 + 1];
        if (v70 == v72) {
          goto LABEL_105;
        }
      }
      else
      {
        unint64_t v77 = 0;
        uint64_t v78 = &v70[-*v40];
        *(unsigned char *)unint64_t v73 = v68;
        uint64_t v71 = v73 + 1;
        if (v70 == v72)
        {
LABEL_105:
          void *v40 = v78;
          v40[1] = v71;
          void v40[2] = &v77[v76];
          if (!v70) {
            goto LABEL_107;
          }
LABEL_106:
          operator delete(v70);
          goto LABEL_107;
        }
      }
      if (v73 < 8 || (unint64_t)(v72 - v77) < 0x20) {
        goto LABEL_118;
      }
      if (v73 >= 0x20)
      {
        unint64_t v79 = v73 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v80 = &v77[v73 - 16];
        long long v81 = (long long *)(v70 - 16);
        unint64_t v82 = v73 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v83 = *v81;
          *(v80 - 1) = *(v81 - 1);
          *uint64_t v80 = v83;
          v80 -= 2;
          v81 -= 2;
          v82 -= 32;
        }
        while (v82);
        if (v73 == v79) {
          goto LABEL_120;
        }
        if ((v73 & 0x18) == 0)
        {
          v78 -= v79;
          v70 -= v79;
LABEL_118:
          uint64_t v88 = v78 - 1;
          do
          {
            char v89 = *--v70;
            *v88-- = v89;
          }
          while (v70 != v72);
          goto LABEL_120;
        }
      }
      else
      {
        unint64_t v79 = 0;
      }
      v78 -= v73 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v84 = &v77[&v70[-v79] - v72 - 8];
      long long v85 = (uint64_t *)&v70[-v79 - 8];
      unint64_t v86 = v79 - (v73 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v87 = *v85--;
        *v84-- = v87;
        v86 += 8;
      }
      while (v86);
      v70 -= v73 & 0xFFFFFFFFFFFFFFF8;
      if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_118;
      }
LABEL_120:
      unint64_t v70 = (unsigned char *)*v40;
      void *v40 = v77;
      v40[1] = v71;
      void v40[2] = &v77[v76];
      if (v70) {
        goto LABEL_106;
      }
LABEL_107:
      v40[1] = v71;
      MEMORY[0x1BA9C7760](&aBlock);
      if (v63) {
        goto LABEL_108;
      }
LABEL_79:
      ++v61;
    }
    while (v61 != Count);
  }
LABEL_122:
  CFStringRef v90 = (const __CFString *)*MEMORY[0x1E4FB9930];
  if (!CFDictionaryContainsKey(*v120, (const void *)*MEMORY[0x1E4FB9930])) {
    goto LABEL_155;
  }
  unint64_t v92 = (char *)__p[1];
  uint64_t v91 = (char *)v134;
  uint64_t v93 = (const void **)__p[1];
  if (__p[1] != (void *)v134)
  {
    uint64_t v93 = (const void **)__p[1];
    while (*((unsigned char *)*v93 + 8) != 18)
    {
      if (++v93 == (const void **)v134) {
        goto LABEL_131;
      }
    }
  }
  if (v93 != (const void **)v134)
  {
    if (!v94) {
      __cxa_bad_cast();
    }
    uint64_t v95 = v94 + 9;
    goto LABEL_154;
  }
LABEL_131:
  unint64_t v96 = operator new(0x10uLL);
  uint64_t v97 = v96;
  v96[4] = 18;
  *(void *)unint64_t v96 = &unk_1F1268AD0;
  if ((unint64_t)v91 >= *((void *)&v134 + 1))
  {
    int64_t v99 = v91 - v92;
    uint64_t v100 = (v91 - v92) >> 3;
    unint64_t v101 = v100 + 1;
    if ((unint64_t)(v100 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v102 = *((void *)&v134 + 1) - (void)v92;
    if ((uint64_t)(*((void *)&v134 + 1) - (void)v92) >> 2 > v101) {
      unint64_t v101 = v102 >> 2;
    }
    if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v103 = v101;
    }
    if (v103)
    {
      if (v103 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v104 = operator new(8 * v103);
      uint64_t v105 = &v104[8 * v100];
      long long v106 = &v104[8 * v103];
      void *v105 = v97;
      uint64_t v98 = (uint64_t)(v105 + 1);
      if (v92 != v91)
      {
LABEL_142:
        if ((unint64_t)(v99 - 8) < 0x58) {
          goto LABEL_185;
        }
        if ((unint64_t)(v92 - v104) < 0x20) {
          goto LABEL_185;
        }
        unint64_t v107 = ((unint64_t)(v99 - 8) >> 3) + 1;
        uint64_t v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v109 = &v91[-v108];
        uint64_t v105 = (void *)((char *)v105 - v108);
        CFArrayRef v110 = &v104[8 * v100 - 16];
        uint64_t v111 = v91 - 16;
        uint64_t v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v113 = *(_OWORD *)v111;
          *(v110 - 1) = *((_OWORD *)v111 - 1);
          _OWORD *v110 = v113;
          v110 -= 2;
          v111 -= 32;
          v112 -= 4;
        }
        while (v112);
        uint64_t v91 = v109;
        if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_185:
          do
          {
            uint64_t v114 = *((void *)v91 - 1);
            v91 -= 8;
            *--uint64_t v105 = v114;
          }
          while (v91 != v92);
        }
        unint64_t v92 = (char *)__p[1];
        __p[1] = v105;
        *(void *)&long long v134 = v98;
        *((void *)&v134 + 1) = v106;
        if (!v92) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
    else
    {
      uint64_t v104 = 0;
      uint64_t v105 = (void *)(8 * v100);
      long long v106 = 0;
      *(void *)(8 * v100) = v97;
      uint64_t v98 = 8 * v100 + 8;
      if (v92 != v91) {
        goto LABEL_142;
      }
    }
    __p[1] = v105;
    *(void *)&long long v134 = v98;
    *((void *)&v134 + 1) = v106;
    if (!v92) {
      goto LABEL_153;
    }
LABEL_152:
    operator delete(v92);
    goto LABEL_153;
  }
  *(void *)uint64_t v91 = v96;
  uint64_t v98 = (uint64_t)(v91 + 8);
LABEL_153:
  uint64_t v95 = (char *)v97 + 9;
  *(void *)&long long v134 = v98;
LABEL_154:
  *uint64_t v95 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v135, v90);
LABEL_155:
  uint64_t v127 = v121 + 192;
  uint64_t v128 = QMIServiceMsg::create();
  int v129 = 25000;
  uint64_t v130 = 0;
  __int16 v131 = 0;
  v124[0] = MEMORY[0x1E4F143A8];
  v124[1] = 1174405120;
  void v124[2] = ___ZN4coex16QMICommandDriver20setWCI2TxAntMap_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v124[3] = &__block_descriptor_tmp_292;
  v124[4] = v121;
  int v115 = *(void **)a3;
  if (*(void *)a3) {
    int v115 = _Block_copy(v115);
  }
  uint64_t v116 = *(NSObject **)(a3 + 8);
  uint64_t v125 = v115;
  dispatch_object_t object = v116;
  if (v116) {
    dispatch_retain(v116);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  long long v137 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetWCI2TxAntMap8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v138 = &unk_1E6195F80;
  uint64_t v139 = v124;
  CFTypeID v117 = _Block_copy(&aBlock);
  __int16 v131 = v117;
  if (v128)
  {
    qmi::Client::send();
    CFTypeID v117 = v131;
  }
  if (v117) {
    _Block_release(v117);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v125) {
    _Block_release(v125);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v135);
}

void sub_1B8BC8F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setAntBlocking_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v79 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v79;
    _os_log_debug_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Ant blocking with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v100[0] = 0xAAAAAAAAAAAAAAAALL;
  v100[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v100, *a2);
  uint64_t v80 = a1;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v6;
  long long v99 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  CFArrayRef v7 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v100, (const __CFString *)*MEMORY[0x1E4FB9888]);
  CFArrayRef v97 = v7;
  if (v7) {
    long long v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    long long v8 = 0;
  }
  if (!v8) {
    goto LABEL_105;
  }
  uint64_t v10 = (char *)__p[1];
  long long v9 = (char *)v99;
  uint64_t v11 = (const void **)__p[1];
  if (__p[1] != (void *)v99)
  {
    uint64_t v11 = (const void **)__p[1];
    while (*((unsigned char *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v99) {
        goto LABEL_15;
      }
    }
  }
  if (v11 == (const void **)v99)
  {
LABEL_15:
    int v14 = (char *)operator new(0x28uLL);
    uint64_t v15 = v14;
    v14[8] = 16;
    *(void *)int v14 = &unk_1F1268B20;
    *((void *)v14 + 2) = 0;
    CFNumberRef v13 = v14 + 16;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = 0;
    if ((unint64_t)v9 < *((void *)&v99 + 1))
    {
      *(void *)long long v9 = v14;
      *(void *)&long long v99 = v9 + 8;
      goto LABEL_38;
    }
    int64_t v16 = v9 - v10;
    uint64_t v17 = (v9 - v10) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = *((void *)&v99 + 1) - (void)v10;
    if ((uint64_t)(*((void *)&v99 + 1) - (void)v10) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v21 = operator new(8 * v20);
      unint64_t v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      void *v22 = v15;
      uint64_t v24 = (uint64_t)(v22 + 1);
      if (v10 != v9)
      {
LABEL_26:
        if ((unint64_t)(v16 - 8) < 0x58) {
          goto LABEL_128;
        }
        if ((unint64_t)(v10 - v21) < 0x20) {
          goto LABEL_128;
        }
        unint64_t v25 = ((unint64_t)(v16 - 8) >> 3) + 1;
        uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v27 = &v9[-v26];
        unint64_t v22 = (void *)((char *)v22 - v26);
        uint64_t v28 = &v21[8 * v17 - 16];
        unint64_t v29 = v9 - 16;
        uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          _OWORD *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        long long v9 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_128:
          do
          {
            uint64_t v32 = *((void *)v9 - 1);
            v9 -= 8;
            *--unint64_t v22 = v32;
          }
          while (v9 != v10);
        }
        uint64_t v10 = (char *)__p[1];
        __p[1] = v22;
        *(void *)&long long v99 = v24;
        *((void *)&v99 + 1) = v23;
        if (!v10) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = (void *)(8 * v17);
      uint64_t v23 = 0;
      *(void *)(8 * v17) = v15;
      uint64_t v24 = 8 * v17 + 8;
      if (v10 != v9) {
        goto LABEL_26;
      }
    }
    __p[1] = v22;
    *(void *)&long long v99 = v24;
    *((void *)&v99 + 1) = v23;
    if (!v10)
    {
LABEL_37:
      *(void *)&long long v99 = v24;
      goto LABEL_38;
    }
LABEL_36:
    operator delete(v10);
    goto LABEL_37;
  }
  if (!v12) {
    __cxa_bad_cast();
  }
  CFNumberRef v13 = v12 + 16;
LABEL_38:
  CFIndex Count = CFArrayGetCount(v7);
  CFIndex v34 = Count;
  if (Count >= 1)
  {
    CFIndex v35 = 0;
    long long v85 = (__CFString *)*MEMORY[0x1E4FB96F8];
    CFStringRef v86 = (const __CFString *)*MEMORY[0x1E4FB96A0];
    CFArrayRef v82 = v7;
    long long v83 = v13;
    CFIndex v84 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v35);
      uint64_t v37 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v38 = CFGetTypeID(ValueAtIndex);
        if (v38 != CFDictionaryGetTypeID())
        {
          uint64_t v37 = 0;
LABEL_89:
          if (!v37) {
            goto LABEL_40;
          }
          goto LABEL_104;
        }
        CFRetain(v37);
      }
      if (v37) {
        uint64_t v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v39 = 0;
      }
      if (!v39) {
        goto LABEL_89;
      }
      unint64_t v92 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v93 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v92, (const __CFDictionary *)v37);
      long long aBlock = 0xAAAAAAAAAAAAAA00;
      unint64_t v103 = 0;
      uint64_t v104 = 0;
      LOBYTE(aBlock) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v92, v86);
      CFArrayRef v40 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)&v92, v85);
      CFArrayRef v41 = v40;
      if (v40) {
        uint64_t v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      }
      else {
        uint64_t v42 = 0;
      }
      CFIndex v87 = v35;
      uint64_t v88 = v37;
      if (v42)
      {
        CFIndex v43 = CFArrayGetCount(v40);
        if (v43 >= 1)
        {
          uint64_t v44 = 0;
          unint64_t v45 = 0;
          uint64_t v46 = 0;
          CFIndex v47 = 0;
          while (2)
          {
            int v101 = 0;
            unint64_t v49 = (int *)CFArrayGetValueAtIndex(v41, v47);
            uint64_t v50 = v49;
            if (!v49) {
              goto LABEL_56;
            }
            CFTypeID v51 = CFGetTypeID(v49);
            if (v51 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&v101, v50, v52)) {
              goto LABEL_56;
            }
            if (v46 >= v45)
            {
              uint64_t v53 = (v46 - v44) >> 2;
              unint64_t v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 62) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              if ((v45 - v44) >> 1 > v54) {
                unint64_t v54 = (v45 - v44) >> 1;
              }
              if ((unint64_t)(v45 - v44) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v55 = v54;
              }
              if (v55)
              {
                if (v55 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v56 = operator new(4 * v55);
                uint64_t v57 = &v56[4 * v53];
                *(_DWORD *)uint64_t v57 = v101;
                uint64_t v48 = (uint64_t)(v57 + 4);
                int64_t v58 = v46 - v44;
                if (v46 == v44)
                {
LABEL_75:
                  unint64_t v45 = &v56[4 * v55];
                  *((void *)&aBlock + 1) = v57;
                  unint64_t v103 = (void (*)(uint64_t, QMIServiceMsg *))v48;
                  uint64_t v104 = v45;
                  if (v44) {
                    operator delete(v44);
                  }
                  uint64_t v44 = v57;
                  CFArrayRef v7 = v82;
                  CFNumberRef v13 = v83;
LABEL_55:
                  unint64_t v103 = (void (*)(uint64_t, QMIServiceMsg *))v48;
                  uint64_t v46 = (char *)v48;
LABEL_56:
                  if (++v47 == v43) {
                    goto LABEL_92;
                  }
                  continue;
                }
              }
              else
              {
                uint64_t v56 = 0;
                uint64_t v57 = (char *)(4 * v53);
                *(_DWORD *)(4 * v53) = v101;
                uint64_t v48 = 4 * v53 + 4;
                int64_t v58 = v46 - v44;
                if (v46 == v44) {
                  goto LABEL_75;
                }
              }
              unint64_t v59 = v58 - 4;
              if (v59 >= 0xBC)
              {
                unint64_t v62 = (v46 - 4 - v44) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v56[v46 - v44 - 4 - v62] > &v56[v46 - v44 - 4])
                {
                  uint64_t v60 = v46;
                }
                else if (&v46[-v62 - 4] > v46 - 4)
                {
                  uint64_t v60 = v46;
                }
                else if ((unint64_t)(v44 - v56) >= 0x20)
                {
                  uint64_t v63 = (v59 >> 2) + 1;
                  uint64_t v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v60 = &v46[-v64];
                  v57 -= v64;
                  uint64_t v65 = &v56[4 * v53 - 16];
                  unint64_t v66 = v46 - 16;
                  uint64_t v67 = v63 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v68 = *(_OWORD *)v66;
                    *(v65 - 1) = *((_OWORD *)v66 - 1);
                    _OWORD *v65 = v68;
                    v65 -= 2;
                    v66 -= 32;
                    v67 -= 8;
                  }
                  while (v67);
                  if (v63 == (v63 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_75;
                  }
                }
                else
                {
                  uint64_t v60 = v46;
                }
              }
              else
              {
                uint64_t v60 = v46;
              }
              do
              {
                int v61 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v57 - 1) = v61;
                v57 -= 4;
              }
              while (v60 != v44);
              goto LABEL_75;
            }
            break;
          }
          *(_DWORD *)uint64_t v46 = v101;
          uint64_t v48 = (uint64_t)(v46 + 4);
          goto LABEL_55;
        }
        uint64_t v46 = 0;
        unint64_t v69 = v13[1];
        if (v69 >= v13[2])
        {
LABEL_98:
          uint64_t v37 = v88;
          unint64_t v74 = std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(v13, (char *)&aBlock);
          goto LABEL_99;
        }
      }
      else
      {
        uint64_t v46 = 0;
LABEL_92:
        unint64_t v69 = v13[1];
        if (v69 >= v13[2]) {
          goto LABEL_98;
        }
      }
      *(unsigned char *)unint64_t v69 = aBlock;
      *(void *)(v69 + 8) = 0;
      *(void *)(v69 + 16) = 0;
      *(void *)(v69 + 24) = 0;
      unint64_t v70 = (const void *)*((void *)&aBlock + 1);
      uint64_t v71 = (uint64_t)&v46[-*((void *)&aBlock + 1)];
      if (v46 != *((char **)&aBlock + 1))
      {
        if (v71 < 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v72 = (char *)operator new((size_t)&v46[-*((void *)&aBlock + 1)]);
        *(void *)(v69 + 8) = v72;
        *(void *)(v69 + 16) = v72;
        unint64_t v73 = &v72[4 * (v71 >> 2)];
        *(void *)(v69 + 24) = v73;
        memcpy(v72, v70, v46 - (unsigned char *)v70);
        *(void *)(v69 + 16) = v73;
      }
      unint64_t v74 = (char *)(v69 + 32);
      v13[1] = v69 + 32;
      uint64_t v37 = v88;
LABEL_99:
      CFIndex v34 = v84;
      CFIndex v35 = v87;
      v13[1] = v74;
      if (v41) {
        CFRelease(v41);
      }
      if (*((void *)&aBlock + 1)) {
        operator delete(*((void **)&aBlock + 1));
      }
      MEMORY[0x1BA9C7760](&v92);
      if (!v37) {
        goto LABEL_40;
      }
LABEL_104:
      CFRelease(v37);
LABEL_40:
      ++v35;
    }
    while (v35 != v34);
  }
LABEL_105:
  unint64_t v92 = v80 + 192;
  uint64_t v93 = QMIServiceMsg::create();
  int v94 = 25000;
  uint64_t v95 = 0;
  unint64_t v96 = 0;
  v89[0] = MEMORY[0x1E4F143A8];
  v89[1] = 1174405120;
  void v89[2] = ___ZN4coex16QMICommandDriver19setAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v89[3] = &__block_descriptor_tmp_296;
  v89[4] = v80;
  unint64_t v75 = *(void **)a3;
  if (*(void *)a3) {
    unint64_t v75 = _Block_copy(v75);
  }
  size_t v76 = *(NSObject **)(a3 + 8);
  CFStringRef v90 = v75;
  dispatch_object_t object = v76;
  if (v76) {
    dispatch_retain(v76);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  unint64_t v103 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v104 = (char *)&unk_1E6195FA8;
  uint64_t v105 = v89;
  unint64_t v77 = _Block_copy(&aBlock);
  unint64_t v96 = v77;
  if (v93)
  {
    qmi::Client::send();
    unint64_t v77 = v96;
  }
  if (v77) {
    _Block_release(v77);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v90) {
    _Block_release(v90);
  }
  if (v7) {
    CFRelease(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v100);
}

void sub_1B8BC98E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t coex::QMICommandDriver::setClientAntBlocking_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v26 = *a2;
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v26;
    _os_log_debug_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Ant blocking with: %@", (uint8_t *)&buf, 0xCu);
  }
  v124[0] = 0xAAAAAAAAAAAAAAAALL;
  v124[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v124, *a2);
  uint64_t v96 = a1;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v122 = v6;
  long long v123 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v122);
  uint64_t v7 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v124, (const __CFString *)*MEMORY[0x1E4FB9980]);
  CFArrayRef v8 = (const __CFArray *)v7;
  uint64_t v121 = v7;
  if (v7) {
    long long v9 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    long long v9 = 0;
  }
  if (!v9) {
    goto LABEL_138;
  }
  CFArrayRef theArray = (CFArrayRef)v7;
  uint64_t v10 = (char *)*((void *)&v122 + 1);
  uint64_t v11 = (char *)v123;
  long long v12 = (const void **)*((void *)&v122 + 1);
  if (*((void *)&v122 + 1) != (void)v123)
  {
    long long v12 = (const void **)*((void *)&v122 + 1);
    while (*((unsigned char *)*v12 + 8) != 16)
    {
      if (++v12 == (const void **)v123) {
        goto LABEL_15;
      }
    }
  }
  if (v12 == (const void **)v123)
  {
LABEL_15:
    uint64_t v15 = operator new(0x28uLL);
    int64_t v16 = v15;
    void v15[8] = 16;
    *(void *)uint64_t v15 = &unk_1F1268BC0;
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = 0;
    *((void *)v15 + 4) = 0;
    unint64_t v103 = v15 + 16;
    if ((unint64_t)v11 < *((void *)&v123 + 1))
    {
      *(void *)uint64_t v11 = v15;
      CFArrayRef v14 = theArray;
      *(void *)&long long v123 = v11 + 8;
      goto LABEL_39;
    }
    int64_t v17 = v11 - v10;
    uint64_t v18 = (v11 - v10) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = *((void *)&v123 + 1) - (void)v10;
    if ((uint64_t)(*((void *)&v123 + 1) - (void)v10) >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v22 = operator new(8 * v21);
      uint64_t v23 = &v22[8 * v18];
      uint64_t v24 = &v22[8 * v21];
      void *v23 = v16;
      uint64_t v25 = (uint64_t)(v23 + 1);
      if (v10 != v11)
      {
LABEL_26:
        if ((unint64_t)(v17 - 8) >= 0x58)
        {
          CFArrayRef v14 = theArray;
          if ((unint64_t)(v10 - v22) >= 0x20)
          {
            unint64_t v27 = ((unint64_t)(v17 - 8) >> 3) + 1;
            uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v29 = &v11[-v28];
            uint64_t v23 = (void *)((char *)v23 - v28);
            uint64_t v30 = &v22[8 * v18 - 16];
            long long v31 = v11 - 16;
            uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v33 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              _OWORD *v30 = v33;
              v30 -= 2;
              v31 -= 32;
              v32 -= 4;
            }
            while (v32);
            uint64_t v11 = v29;
            if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_36:
              uint64_t v10 = (char *)*((void *)&v122 + 1);
              *((void *)&v122 + 1) = v23;
              *(void *)&long long v123 = v25;
              *((void *)&v123 + 1) = v24;
              if (!v10)
              {
LABEL_38:
                *(void *)&long long v123 = v25;
                goto LABEL_39;
              }
LABEL_37:
              operator delete(v10);
              goto LABEL_38;
            }
          }
        }
        else
        {
          CFArrayRef v14 = theArray;
        }
        do
        {
          uint64_t v34 = *((void *)v11 - 1);
          v11 -= 8;
          *--uint64_t v23 = v34;
        }
        while (v11 != v10);
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v22 = 0;
      uint64_t v23 = (void *)(8 * v18);
      uint64_t v24 = 0;
      *(void *)(8 * v18) = v16;
      uint64_t v25 = 8 * v18 + 8;
      if (v10 != v11) {
        goto LABEL_26;
      }
    }
    CFArrayRef v14 = theArray;
    *((void *)&v122 + 1) = v23;
    *(void *)&long long v123 = v25;
    *((void *)&v123 + 1) = v24;
    if (!v10) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (!v13) {
    __cxa_bad_cast();
  }
  unint64_t v103 = v13 + 16;
  CFArrayRef v14 = theArray;
LABEL_39:
  CFIndex Count = CFArrayGetCount(v14);
  CFArrayRef v8 = theArray;
  if (Count >= 1)
  {
    CFIndex v35 = 0;
    int v101 = (__CFString *)*MEMORY[0x1E4FB9700];
    uint64_t v100 = (__CFString *)*MEMORY[0x1E4FB9778];
    long long v99 = (__CFString *)*MEMORY[0x1E4FB9890];
    uint64_t v98 = (__CFString *)*MEMORY[0x1E4FB9888];
    uint64_t v104 = (__CFString *)*MEMORY[0x1E4FB96F8];
    CFStringRef v105 = (const __CFString *)*MEMORY[0x1E4FB96A0];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v35);
      uint64_t v37 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v38 = CFGetTypeID(ValueAtIndex);
        if (v38 != CFDictionaryGetTypeID())
        {
          uint64_t v37 = 0;
LABEL_124:
          if (!v37) {
            goto LABEL_41;
          }
          goto LABEL_137;
        }
        CFRetain(v37);
      }
      if (v37) {
        uint64_t v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v39 = 0;
      }
      if (!v39) {
        goto LABEL_124;
      }
      v127[0] = 0xAAAAAAAAAAAAAAAALL;
      v127[1] = 0xAAAAAAAAAAAAAAAALL;
      CFArrayRef v40 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v127, (const __CFDictionary *)v37);
      uint64_t v130 = 0;
      __int16 v131 = 0;
      int v129 = 0;
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = 0xAAAAAAAAAAAAAA00;
      uint64_t v108 = v37;
      LODWORD(buf) = ctu::cf::map_adapter::getInt(v40, v101);
      BYTE8(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v127, v100) != 0;
      DWORD1(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v127, v99);
      CFArrayRef v41 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v127, v98);
      CFArrayRef v42 = v41;
      if (v41) {
        CFIndex v43 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      }
      else {
        CFIndex v43 = 0;
      }
      if (v43)
      {
        CFIndex v110 = CFArrayGetCount(v41);
        if (v110 >= 1)
        {
          CFIndex v44 = 0;
          CFIndex v107 = v35;
          CFArrayRef v109 = v42;
          do
          {
            CFIndex v112 = v44;
            unint64_t v45 = CFArrayGetValueAtIndex(v42, v44);
            uint64_t v46 = v45;
            if (v45)
            {
              CFTypeID v47 = CFGetTypeID(v45);
              if (v47 != CFDictionaryGetTypeID())
              {
                uint64_t v46 = 0;
LABEL_104:
                if (!v46) {
                  goto LABEL_55;
                }
                goto LABEL_119;
              }
              CFRetain(v46);
            }
            if (v46) {
              uint64_t v48 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            }
            else {
              uint64_t v48 = 0;
            }
            if (!v48) {
              goto LABEL_104;
            }
            v126[0] = 0xAAAAAAAAAAAAAAAALL;
            v126[1] = 0xAAAAAAAAAAAAAAAALL;
            unint64_t v49 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v126, (const __CFDictionary *)v46);
            unint64_t v116 = 0xAAAAAAAAAAAAAA00;
            uint64_t v118 = 0;
            CFDictionaryRef v119 = 0;
            std::string __p = 0;
            LOBYTE(v116) = ctu::cf::map_adapter::getInt(v49, v105);
            CFArrayRef v50 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v126, v104);
            CFArrayRef v51 = v50;
            if (v50) {
              CFNumberRef v52 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
            }
            else {
              CFNumberRef v52 = 0;
            }
            uint64_t v111 = v46;
            if (v52)
            {
              CFIndex v53 = CFArrayGetCount(v50);
              if (v53 >= 1)
              {
                unint64_t v54 = 0;
                unint64_t v55 = 0;
                uint64_t v56 = 0;
                CFIndex v57 = 0;
                while (2)
                {
                  int v125 = 0;
                  unint64_t v59 = (int *)CFArrayGetValueAtIndex(v51, v57);
                  uint64_t v60 = v59;
                  if (!v59) {
                    goto LABEL_71;
                  }
                  CFTypeID v61 = CFGetTypeID(v59);
                  if (v61 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&v125, v60, v62)) {
                    goto LABEL_71;
                  }
                  if (v56 >= v55)
                  {
                    uint64_t v63 = (v56 - v54) >> 2;
                    unint64_t v64 = v63 + 1;
                    if ((unint64_t)(v63 + 1) >> 62) {
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    }
                    if ((v55 - v54) >> 1 > v64) {
                      unint64_t v64 = (v55 - v54) >> 1;
                    }
                    if ((unint64_t)(v55 - v54) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v65 = v64;
                    }
                    if (v65)
                    {
                      if (v65 >> 62) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      unint64_t v66 = operator new(4 * v65);
                      uint64_t v67 = &v66[4 * v63];
                      *uint64_t v67 = v125;
                      uint64_t v58 = (uint64_t)(v67 + 1);
                      int64_t v68 = v56 - v54;
                      if (v56 == v54)
                      {
LABEL_90:
                        unint64_t v55 = &v66[4 * v65];
                        std::string __p = v67;
                        uint64_t v118 = v58;
                        CFDictionaryRef v119 = v55;
                        if (v54) {
                          operator delete(v54);
                        }
                        unint64_t v54 = (char *)v67;
                        CFArrayRef v42 = v109;
LABEL_70:
                        uint64_t v118 = v58;
                        uint64_t v56 = (char *)v58;
LABEL_71:
                        if (++v57 == v53) {
                          goto LABEL_107;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v66 = 0;
                      uint64_t v67 = (_DWORD *)(4 * v63);
                      *(_DWORD *)(4 * v63) = v125;
                      uint64_t v58 = 4 * v63 + 4;
                      int64_t v68 = v56 - v54;
                      if (v56 == v54) {
                        goto LABEL_90;
                      }
                    }
                    unint64_t v69 = v68 - 4;
                    if (v69 >= 0xBC)
                    {
                      unint64_t v72 = (v56 - 4 - v54) & 0xFFFFFFFFFFFFFFFCLL;
                      if (&v66[v56 - v54 - 4 - v72] > &v66[v56 - v54 - 4])
                      {
                        unint64_t v70 = v56;
                      }
                      else if (&v56[-v72 - 4] > v56 - 4)
                      {
                        unint64_t v70 = v56;
                      }
                      else if ((unint64_t)(v54 - v66) >= 0x20)
                      {
                        uint64_t v73 = (v69 >> 2) + 1;
                        uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                        unint64_t v70 = &v56[-v74];
                        uint64_t v67 = (_DWORD *)((char *)v67 - v74);
                        unint64_t v75 = &v66[4 * v63 - 16];
                        size_t v76 = v56 - 16;
                        uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          long long v78 = *(_OWORD *)v76;
                          *(v75 - 1) = *((_OWORD *)v76 - 1);
                          _OWORD *v75 = v78;
                          v75 -= 2;
                          v76 -= 32;
                          v77 -= 8;
                        }
                        while (v77);
                        if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8)) {
                          goto LABEL_90;
                        }
                      }
                      else
                      {
                        unint64_t v70 = v56;
                      }
                    }
                    else
                    {
                      unint64_t v70 = v56;
                    }
                    do
                    {
                      int v71 = *((_DWORD *)v70 - 1);
                      v70 -= 4;
                      *--uint64_t v67 = v71;
                    }
                    while (v70 != v54);
                    goto LABEL_90;
                  }
                  break;
                }
                *(_DWORD *)uint64_t v56 = v125;
                uint64_t v58 = (uint64_t)(v56 + 4);
                goto LABEL_70;
              }
              uint64_t v56 = 0;
              CFDictionaryRef v79 = v130;
              if (v130 >= v131)
              {
LABEL_113:
                uint64_t v37 = v108;
                uint64_t v46 = v111;
                long long v85 = std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(&v129, (char *)&v116);
                CFArrayRef v8 = theArray;
                CFIndex v35 = v107;
                goto LABEL_114;
              }
            }
            else
            {
              uint64_t v56 = 0;
LABEL_107:
              CFDictionaryRef v79 = v130;
              if (v130 >= v131) {
                goto LABEL_113;
              }
            }
            *CFDictionaryRef v79 = v116;
            *((void *)v79 + 1) = 0;
            *((void *)v79 + 2) = 0;
            *((void *)v79 + 3) = 0;
            uint64_t v80 = __p;
            int64_t v82 = v56 - (unsigned char *)__p;
            BOOL v81 = v56 == __p;
            CFArrayRef v8 = theArray;
            CFIndex v35 = v107;
            uint64_t v37 = v108;
            if (!v81)
            {
              if (v82 < 0) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              long long v83 = (char *)operator new(v82);
              *((void *)v79 + 1) = v83;
              *((void *)v79 + 2) = v83;
              CFIndex v84 = &v83[4 * (v82 >> 2)];
              *((void *)v79 + 3) = v84;
              memcpy(v83, v80, v82);
              *((void *)v79 + 2) = v84;
              uint64_t v37 = v108;
            }
            long long v85 = v79 + 32;
            CFArrayRef v42 = v109;
            uint64_t v46 = v111;
LABEL_114:
            uint64_t v130 = v85;
            if (v51) {
              CFRelease(v51);
            }
            if (__p) {
              operator delete(__p);
            }
            MEMORY[0x1BA9C7760](v126);
            if (!v46) {
              goto LABEL_55;
            }
LABEL_119:
            CFRelease(v46);
LABEL_55:
            CFIndex v44 = v112 + 1;
          }
          while (v112 + 1 != v110);
        }
      }
      unint64_t v86 = *((void *)v103 + 1);
      if (v86 >= *((void *)v103 + 2)) {
        break;
      }
      uint64_t v87 = buf;
      *(unsigned char *)(v86 + 8) = BYTE8(buf);
      *(void *)unint64_t v86 = v87;
      std::vector<coex::tlv::abm::AntBandInfoSet>::vector((void *)(v86 + 16), (uint64_t *)&v129);
      *((void *)v103 + 1) = v86 + 40;
      *((void *)v103 + 1) = v86 + 40;
      if (v42) {
        goto LABEL_127;
      }
LABEL_128:
      uint64_t v88 = v129;
      if (v129)
      {
        char v89 = (void (*)(uint64_t, QMIServiceMsg *))v130;
        CFStringRef v90 = v129;
        if (v130 != (char *)v129)
        {
          do
          {
            uint64_t v91 = (void *)*((void *)v89 - 3);
            if (v91)
            {
              *((void *)v89 - 2) = v91;
              operator delete(v91);
            }
            char v89 = (void (*)(uint64_t, QMIServiceMsg *))((char *)v89 - 32);
          }
          while (v89 != v88);
          CFStringRef v90 = v129;
        }
        uint64_t v130 = (char *)v88;
        operator delete(v90);
      }
      MEMORY[0x1BA9C7760](v127);
      if (!v37) {
        goto LABEL_41;
      }
LABEL_137:
      CFRelease(v37);
LABEL_41:
      if (++v35 == Count) {
        goto LABEL_138;
      }
    }
    *((void *)v103 + 1) = std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBlockClientInfoSet&>((char **)v103, (uint64_t)&buf);
    if (!v42) {
      goto LABEL_128;
    }
LABEL_127:
    CFRelease(v42);
    goto LABEL_128;
  }
LABEL_138:
  unint64_t v116 = v96 + 192;
  std::string __p = (void *)QMIServiceMsg::create();
  LODWORD(v118) = 25000;
  CFDictionaryRef v119 = 0;
  long long aBlock = 0;
  v113[0] = MEMORY[0x1E4F143A8];
  v113[1] = 1174405120;
  v113[2] = ___ZN4coex16QMICommandDriver25setClientAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v113[3] = &__block_descriptor_tmp_304;
  v113[4] = v96;
  unint64_t v92 = *(void **)a3;
  if (*(void *)a3) {
    unint64_t v92 = _Block_copy(v92);
  }
  uint64_t v93 = *(NSObject **)(a3 + 8);
  uint64_t v114 = v92;
  dispatch_object_t object = v93;
  if (v93) {
    dispatch_retain(v93);
  }
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 0x40000000;
  int v129 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm23SetClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v130 = (char *)&unk_1E6195FF8;
  __int16 v131 = (char *)v113;
  int v94 = _Block_copy(&buf);
  long long aBlock = v94;
  if (__p)
  {
    qmi::Client::send();
    int v94 = aBlock;
  }
  if (v94) {
    _Block_release(v94);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v114) {
    _Block_release(v114);
  }
  if (v8) {
    CFRelease(v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v122);
  return MEMORY[0x1BA9C7760](v124);
}

void sub_1B8BCA560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t coex::QMICommandDriver::setClientAntBlockingExtended_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v6 = *a2;
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1B8B00000, v5, OS_LOG_TYPE_DEFAULT, "#I Setting Extended Ant blocking with: %@", (uint8_t *)&buf, 0xCu);
  }
  v124[0] = 0xAAAAAAAAAAAAAAAALL;
  v124[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v124, *a2);
  uint64_t v96 = a1;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v122 = v7;
  long long v123 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v122);
  uint64_t v8 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v124, (const __CFString *)*MEMORY[0x1E4FB9980]);
  CFArrayRef v9 = (const __CFArray *)v8;
  uint64_t v121 = v8;
  if (v8) {
    uint64_t v10 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v10) {
    goto LABEL_138;
  }
  CFArrayRef theArray = (CFArrayRef)v8;
  uint64_t v11 = (char *)*((void *)&v122 + 1);
  long long v12 = (char *)v123;
  CFNumberRef v13 = (const void **)*((void *)&v122 + 1);
  if (*((void *)&v122 + 1) != (void)v123)
  {
    CFNumberRef v13 = (const void **)*((void *)&v122 + 1);
    while (*((unsigned char *)*v13 + 8) != 17)
    {
      if (++v13 == (const void **)v123) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == (const void **)v123)
  {
LABEL_15:
    int64_t v16 = operator new(0x28uLL);
    int64_t v17 = v16;
    v16[8] = 17;
    *(void *)int64_t v16 = &unk_1F1268C10;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0;
    *((void *)v16 + 4) = 0;
    unint64_t v103 = v16 + 16;
    if ((unint64_t)v12 < *((void *)&v123 + 1))
    {
      *(void *)long long v12 = v16;
      CFArrayRef v15 = theArray;
      *(void *)&long long v123 = v12 + 8;
      goto LABEL_39;
    }
    int64_t v18 = v12 - v11;
    uint64_t v19 = (v12 - v11) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = *((void *)&v123 + 1) - (void)v11;
    if ((uint64_t)(*((void *)&v123 + 1) - (void)v11) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = operator new(8 * v22);
      uint64_t v24 = &v23[8 * v19];
      uint64_t v25 = &v23[8 * v22];
      *uint64_t v24 = v17;
      uint64_t v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_26:
        if ((unint64_t)(v18 - 8) >= 0x58)
        {
          CFArrayRef v15 = theArray;
          if ((unint64_t)(v11 - v23) >= 0x20)
          {
            unint64_t v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
            uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v29 = &v12[-v28];
            uint64_t v24 = (void *)((char *)v24 - v28);
            uint64_t v30 = &v23[8 * v19 - 16];
            long long v31 = v12 - 16;
            uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v33 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              _OWORD *v30 = v33;
              v30 -= 2;
              v31 -= 32;
              v32 -= 4;
            }
            while (v32);
            long long v12 = v29;
            if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_36:
              uint64_t v11 = (char *)*((void *)&v122 + 1);
              *((void *)&v122 + 1) = v24;
              *(void *)&long long v123 = v26;
              *((void *)&v123 + 1) = v25;
              if (!v11)
              {
LABEL_38:
                *(void *)&long long v123 = v26;
                goto LABEL_39;
              }
LABEL_37:
              operator delete(v11);
              goto LABEL_38;
            }
          }
        }
        else
        {
          CFArrayRef v15 = theArray;
        }
        do
        {
          uint64_t v34 = *((void *)v12 - 1);
          v12 -= 8;
          *--uint64_t v24 = v34;
        }
        while (v12 != v11);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (void *)(8 * v19);
      uint64_t v25 = 0;
      *(void *)(8 * v19) = v17;
      uint64_t v26 = 8 * v19 + 8;
      if (v11 != v12) {
        goto LABEL_26;
      }
    }
    CFArrayRef v15 = theArray;
    *((void *)&v122 + 1) = v24;
    *(void *)&long long v123 = v26;
    *((void *)&v123 + 1) = v25;
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (!v14) {
    __cxa_bad_cast();
  }
  unint64_t v103 = v14 + 16;
  CFArrayRef v15 = theArray;
LABEL_39:
  CFIndex Count = CFArrayGetCount(v15);
  CFArrayRef v9 = theArray;
  if (Count >= 1)
  {
    CFIndex v35 = 0;
    int v101 = (__CFString *)*MEMORY[0x1E4FB9700];
    uint64_t v100 = (__CFString *)*MEMORY[0x1E4FB9778];
    long long v99 = (__CFString *)*MEMORY[0x1E4FB9890];
    uint64_t v98 = (__CFString *)*MEMORY[0x1E4FB9888];
    uint64_t v104 = (__CFString *)*MEMORY[0x1E4FB96F8];
    CFStringRef v105 = (const __CFString *)*MEMORY[0x1E4FB96A0];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v9, v35);
      uint64_t v37 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v38 = CFGetTypeID(ValueAtIndex);
        if (v38 != CFDictionaryGetTypeID())
        {
          uint64_t v37 = 0;
LABEL_124:
          if (!v37) {
            goto LABEL_41;
          }
          goto LABEL_137;
        }
        CFRetain(v37);
      }
      if (v37) {
        uint64_t v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v39 = 0;
      }
      if (!v39) {
        goto LABEL_124;
      }
      v127[0] = 0xAAAAAAAAAAAAAAAALL;
      v127[1] = 0xAAAAAAAAAAAAAAAALL;
      CFArrayRef v40 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v127, (const __CFDictionary *)v37);
      uint64_t v130 = 0;
      __int16 v131 = 0;
      int v129 = 0;
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = 0xAAAAAAAAAAAAAA00;
      uint64_t v108 = v37;
      LODWORD(buf) = ctu::cf::map_adapter::getInt(v40, v101);
      BYTE8(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v127, v100) != 0;
      DWORD1(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v127, v99);
      CFArrayRef v41 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v127, v98);
      CFArrayRef v42 = v41;
      if (v41) {
        CFIndex v43 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      }
      else {
        CFIndex v43 = 0;
      }
      if (v43)
      {
        CFIndex v110 = CFArrayGetCount(v41);
        if (v110 >= 1)
        {
          CFIndex v44 = 0;
          CFIndex v107 = v35;
          CFArrayRef v109 = v42;
          do
          {
            CFIndex v112 = v44;
            unint64_t v45 = CFArrayGetValueAtIndex(v42, v44);
            uint64_t v46 = v45;
            if (v45)
            {
              CFTypeID v47 = CFGetTypeID(v45);
              if (v47 != CFDictionaryGetTypeID())
              {
                uint64_t v46 = 0;
LABEL_104:
                if (!v46) {
                  goto LABEL_55;
                }
                goto LABEL_119;
              }
              CFRetain(v46);
            }
            if (v46) {
              uint64_t v48 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            }
            else {
              uint64_t v48 = 0;
            }
            if (!v48) {
              goto LABEL_104;
            }
            v126[0] = 0xAAAAAAAAAAAAAAAALL;
            v126[1] = 0xAAAAAAAAAAAAAAAALL;
            unint64_t v49 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v126, (const __CFDictionary *)v46);
            unint64_t v116 = 0xAAAAAAAAAAAAAA00;
            uint64_t v118 = 0;
            CFDictionaryRef v119 = 0;
            std::string __p = 0;
            LOBYTE(v116) = ctu::cf::map_adapter::getInt(v49, v105);
            CFArrayRef v50 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v126, v104);
            CFArrayRef v51 = v50;
            if (v50) {
              CFNumberRef v52 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
            }
            else {
              CFNumberRef v52 = 0;
            }
            uint64_t v111 = v46;
            if (v52)
            {
              CFIndex v53 = CFArrayGetCount(v50);
              if (v53 >= 1)
              {
                unint64_t v54 = 0;
                unint64_t v55 = 0;
                uint64_t v56 = 0;
                CFIndex v57 = 0;
                while (2)
                {
                  int v125 = 0;
                  unint64_t v59 = (int *)CFArrayGetValueAtIndex(v51, v57);
                  uint64_t v60 = v59;
                  if (!v59) {
                    goto LABEL_71;
                  }
                  CFTypeID v61 = CFGetTypeID(v59);
                  if (v61 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&v125, v60, v62)) {
                    goto LABEL_71;
                  }
                  if (v56 >= v55)
                  {
                    uint64_t v63 = (v56 - v54) >> 2;
                    unint64_t v64 = v63 + 1;
                    if ((unint64_t)(v63 + 1) >> 62) {
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    }
                    if ((v55 - v54) >> 1 > v64) {
                      unint64_t v64 = (v55 - v54) >> 1;
                    }
                    if ((unint64_t)(v55 - v54) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v65 = v64;
                    }
                    if (v65)
                    {
                      if (v65 >> 62) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      unint64_t v66 = operator new(4 * v65);
                      uint64_t v67 = &v66[4 * v63];
                      *uint64_t v67 = v125;
                      uint64_t v58 = (uint64_t)(v67 + 1);
                      int64_t v68 = v56 - v54;
                      if (v56 == v54)
                      {
LABEL_90:
                        unint64_t v55 = &v66[4 * v65];
                        std::string __p = v67;
                        uint64_t v118 = v58;
                        CFDictionaryRef v119 = v55;
                        if (v54) {
                          operator delete(v54);
                        }
                        unint64_t v54 = (char *)v67;
                        CFArrayRef v42 = v109;
LABEL_70:
                        uint64_t v118 = v58;
                        uint64_t v56 = (char *)v58;
LABEL_71:
                        if (++v57 == v53) {
                          goto LABEL_107;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v66 = 0;
                      uint64_t v67 = (_DWORD *)(4 * v63);
                      *(_DWORD *)(4 * v63) = v125;
                      uint64_t v58 = 4 * v63 + 4;
                      int64_t v68 = v56 - v54;
                      if (v56 == v54) {
                        goto LABEL_90;
                      }
                    }
                    unint64_t v69 = v68 - 4;
                    if (v69 >= 0xBC)
                    {
                      unint64_t v72 = (v56 - 4 - v54) & 0xFFFFFFFFFFFFFFFCLL;
                      if (&v66[v56 - v54 - 4 - v72] > &v66[v56 - v54 - 4])
                      {
                        unint64_t v70 = v56;
                      }
                      else if (&v56[-v72 - 4] > v56 - 4)
                      {
                        unint64_t v70 = v56;
                      }
                      else if ((unint64_t)(v54 - v66) >= 0x20)
                      {
                        uint64_t v73 = (v69 >> 2) + 1;
                        uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                        unint64_t v70 = &v56[-v74];
                        uint64_t v67 = (_DWORD *)((char *)v67 - v74);
                        unint64_t v75 = &v66[4 * v63 - 16];
                        size_t v76 = v56 - 16;
                        uint64_t v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          long long v78 = *(_OWORD *)v76;
                          *(v75 - 1) = *((_OWORD *)v76 - 1);
                          _OWORD *v75 = v78;
                          v75 -= 2;
                          v76 -= 32;
                          v77 -= 8;
                        }
                        while (v77);
                        if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8)) {
                          goto LABEL_90;
                        }
                      }
                      else
                      {
                        unint64_t v70 = v56;
                      }
                    }
                    else
                    {
                      unint64_t v70 = v56;
                    }
                    do
                    {
                      int v71 = *((_DWORD *)v70 - 1);
                      v70 -= 4;
                      *--uint64_t v67 = v71;
                    }
                    while (v70 != v54);
                    goto LABEL_90;
                  }
                  break;
                }
                *(_DWORD *)uint64_t v56 = v125;
                uint64_t v58 = (uint64_t)(v56 + 4);
                goto LABEL_70;
              }
              uint64_t v56 = 0;
              CFDictionaryRef v79 = v130;
              if (v130 >= v131)
              {
LABEL_113:
                uint64_t v37 = v108;
                uint64_t v46 = v111;
                long long v85 = std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(&v129, (char *)&v116);
                CFArrayRef v9 = theArray;
                CFIndex v35 = v107;
                goto LABEL_114;
              }
            }
            else
            {
              uint64_t v56 = 0;
LABEL_107:
              CFDictionaryRef v79 = v130;
              if (v130 >= v131) {
                goto LABEL_113;
              }
            }
            *CFDictionaryRef v79 = v116;
            *((void *)v79 + 1) = 0;
            *((void *)v79 + 2) = 0;
            *((void *)v79 + 3) = 0;
            uint64_t v80 = __p;
            int64_t v82 = v56 - (unsigned char *)__p;
            BOOL v81 = v56 == __p;
            CFArrayRef v9 = theArray;
            CFIndex v35 = v107;
            uint64_t v37 = v108;
            if (!v81)
            {
              if (v82 < 0) {
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              }
              long long v83 = (char *)operator new(v82);
              *((void *)v79 + 1) = v83;
              *((void *)v79 + 2) = v83;
              CFIndex v84 = &v83[4 * (v82 >> 2)];
              *((void *)v79 + 3) = v84;
              memcpy(v83, v80, v82);
              *((void *)v79 + 2) = v84;
              uint64_t v37 = v108;
            }
            long long v85 = v79 + 32;
            CFArrayRef v42 = v109;
            uint64_t v46 = v111;
LABEL_114:
            uint64_t v130 = v85;
            if (v51) {
              CFRelease(v51);
            }
            if (__p) {
              operator delete(__p);
            }
            MEMORY[0x1BA9C7760](v126);
            if (!v46) {
              goto LABEL_55;
            }
LABEL_119:
            CFRelease(v46);
LABEL_55:
            CFIndex v44 = v112 + 1;
          }
          while (v112 + 1 != v110);
        }
      }
      unint64_t v86 = *((void *)v103 + 1);
      if (v86 >= *((void *)v103 + 2)) {
        break;
      }
      uint64_t v87 = buf;
      *(unsigned char *)(v86 + 8) = BYTE8(buf);
      *(void *)unint64_t v86 = v87;
      std::vector<coex::tlv::abm::AntBandInfoSet>::vector((void *)(v86 + 16), (uint64_t *)&v129);
      *((void *)v103 + 1) = v86 + 40;
      *((void *)v103 + 1) = v86 + 40;
      if (v42) {
        goto LABEL_127;
      }
LABEL_128:
      uint64_t v88 = v129;
      if (v129)
      {
        char v89 = (void (*)(uint64_t, QMIServiceMsg *))v130;
        CFStringRef v90 = v129;
        if (v130 != (char *)v129)
        {
          do
          {
            uint64_t v91 = (void *)*((void *)v89 - 3);
            if (v91)
            {
              *((void *)v89 - 2) = v91;
              operator delete(v91);
            }
            char v89 = (void (*)(uint64_t, QMIServiceMsg *))((char *)v89 - 32);
          }
          while (v89 != v88);
          CFStringRef v90 = v129;
        }
        uint64_t v130 = (char *)v88;
        operator delete(v90);
      }
      MEMORY[0x1BA9C7760](v127);
      if (!v37) {
        goto LABEL_41;
      }
LABEL_137:
      CFRelease(v37);
LABEL_41:
      if (++v35 == Count) {
        goto LABEL_138;
      }
    }
    *((void *)v103 + 1) = std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBlockClientInfoSet&>((char **)v103, (uint64_t)&buf);
    if (!v42) {
      goto LABEL_128;
    }
LABEL_127:
    CFRelease(v42);
    goto LABEL_128;
  }
LABEL_138:
  unint64_t v116 = v96 + 192;
  std::string __p = (void *)QMIServiceMsg::create();
  LODWORD(v118) = 25000;
  CFDictionaryRef v119 = 0;
  long long aBlock = 0;
  v113[0] = MEMORY[0x1E4F143A8];
  v113[1] = 1174405120;
  v113[2] = ___ZN4coex16QMICommandDriver33setClientAntBlockingExtended_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v113[3] = &__block_descriptor_tmp_308_0;
  v113[4] = v96;
  unint64_t v92 = *(void **)a3;
  if (*(void *)a3) {
    unint64_t v92 = _Block_copy(v92);
  }
  uint64_t v93 = *(NSObject **)(a3 + 8);
  uint64_t v114 = v92;
  dispatch_object_t object = v93;
  if (v93) {
    dispatch_retain(v93);
  }
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 0x40000000;
  int v129 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm23SetClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v130 = (char *)&unk_1E6195FF8;
  __int16 v131 = (char *)v113;
  int v94 = _Block_copy(&buf);
  long long aBlock = v94;
  if (__p)
  {
    qmi::Client::send();
    int v94 = aBlock;
  }
  if (v94) {
    _Block_release(v94);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v114) {
    _Block_release(v114);
  }
  if (v9) {
    CFRelease(v9);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v122);
  return MEMORY[0x1BA9C7760](v124);
}

void sub_1B8BCB28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t coex::QMICommandDriver::setTriggerAntennaBlocking_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v65 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v65;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting trigger antenna block with  params: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v76[0] = 0xAAAAAAAAAAAAAAAALL;
  v76[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v76, *a2);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v7;
  long long v75 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v8 = (const void **)__p[1];
  if (__p[1] != (void *)v75)
  {
    while (*((unsigned char *)*v8 + 8) != 2)
    {
      if (++v8 == (const void **)v75) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == (const void **)v75)
  {
LABEL_10:
    uint64_t v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 2);
  }
  else
  {
    if (!v9) {
      __cxa_bad_cast();
    }
    uint64_t v10 = v9 + 9;
  }
  char *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v76, (const __CFString *)*MEMORY[0x1E4FB9878]);
  uint64_t v11 = (char *)__p[1];
  long long v12 = (char *)v75;
  CFNumberRef v13 = (const void **)__p[1];
  if (__p[1] != (void *)v75)
  {
    CFNumberRef v13 = (const void **)__p[1];
    while (*((unsigned char *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v75) {
        goto LABEL_19;
      }
    }
  }
  if (v13 == (const void **)v75)
  {
LABEL_19:
    int64_t v16 = (char *)operator new(0x10uLL);
    int64_t v17 = v16;
    v16[8] = 1;
    *(void *)int64_t v16 = &unk_1F1268C60;
    *((_DWORD *)v16 + 3) = 0;
    CFArrayRef v15 = v16 + 12;
    if ((unint64_t)v12 < *((void *)&v75 + 1))
    {
      *(void *)long long v12 = v16;
      *(void *)&long long v75 = v12 + 8;
      goto LABEL_42;
    }
    int64_t v18 = v12 - v11;
    uint64_t v19 = (v12 - v11) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = *((void *)&v75 + 1) - (void)v11;
    if ((uint64_t)(*((void *)&v75 + 1) - (void)v11) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = operator new(8 * v22);
      uint64_t v24 = &v23[8 * v19];
      uint64_t v25 = &v23[8 * v22];
      *uint64_t v24 = v17;
      uint64_t v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58) {
          goto LABEL_97;
        }
        if ((unint64_t)(v11 - v23) < 0x20) {
          goto LABEL_97;
        }
        unint64_t v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v29 = &v12[-v28];
        uint64_t v24 = (void *)((char *)v24 - v28);
        uint64_t v30 = &v23[8 * v19 - 16];
        long long v31 = v12 - 16;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          _OWORD *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        long long v12 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_97:
          do
          {
            uint64_t v34 = *((void *)v12 - 1);
            v12 -= 8;
            *--uint64_t v24 = v34;
          }
          while (v12 != v11);
        }
        uint64_t v11 = (char *)__p[1];
        __p[1] = v24;
        *(void *)&long long v75 = v26;
        *((void *)&v75 + 1) = v25;
        if (!v11) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (void *)(8 * v19);
      uint64_t v25 = 0;
      *(void *)(8 * v19) = v17;
      uint64_t v26 = 8 * v19 + 8;
      if (v11 != v12) {
        goto LABEL_30;
      }
    }
    __p[1] = v24;
    *(void *)&long long v75 = v26;
    *((void *)&v75 + 1) = v25;
    if (!v11)
    {
LABEL_41:
      *(void *)&long long v75 = v26;
      goto LABEL_42;
    }
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v14) {
    __cxa_bad_cast();
  }
  CFArrayRef v15 = v14 + 12;
LABEL_42:
  *CFArrayRef v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v76, (const __CFString *)*MEMORY[0x1E4FB98E8]);
  CFDictionaryRef v35 = *a2;
  CFStringRef v36 = (const __CFString *)*MEMORY[0x1E4FB98F0];
  if (!CFDictionaryContainsKey(v35, (const void *)*MEMORY[0x1E4FB98F0])) {
    goto LABEL_75;
  }
  uint64_t v37 = (char *)__p[1];
  CFTypeID v38 = (char *)v75;
  uint64_t v39 = (const void **)__p[1];
  if (__p[1] != (void *)v75)
  {
    uint64_t v39 = (const void **)__p[1];
    while (*((unsigned char *)*v39 + 8) != 16)
    {
      if (++v39 == (const void **)v75) {
        goto LABEL_51;
      }
    }
  }
  if (v39 != (const void **)v75)
  {
    if (!v40) {
      __cxa_bad_cast();
    }
    CFArrayRef v41 = v40 + 12;
    goto LABEL_74;
  }
LABEL_51:
  CFArrayRef v42 = (char *)operator new(0x10uLL);
  CFIndex v43 = v42;
  v42[8] = 16;
  *(void *)CFArrayRef v42 = &unk_1F1268CB0;
  *((_DWORD *)v42 + 3) = 0;
  CFArrayRef v41 = v42 + 12;
  if ((unint64_t)v38 >= *((void *)&v75 + 1))
  {
    int64_t v44 = v38 - v37;
    uint64_t v45 = (v38 - v37) >> 3;
    unint64_t v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v47 = *((void *)&v75 + 1) - (void)v37;
    if ((uint64_t)(*((void *)&v75 + 1) - (void)v37) >> 2 > v46) {
      unint64_t v46 = v47 >> 2;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v46;
    }
    if (v48)
    {
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v49 = operator new(8 * v48);
      CFArrayRef v50 = &v49[8 * v45];
      CFArrayRef v51 = &v49[8 * v48];
      void *v50 = v43;
      uint64_t v52 = (uint64_t)(v50 + 1);
      if (v37 != v38)
      {
LABEL_62:
        if ((unint64_t)(v44 - 8) < 0x58) {
          goto LABEL_98;
        }
        if ((unint64_t)(v37 - v49) < 0x20) {
          goto LABEL_98;
        }
        unint64_t v53 = ((unint64_t)(v44 - 8) >> 3) + 1;
        uint64_t v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v55 = &v38[-v54];
        CFArrayRef v50 = (void *)((char *)v50 - v54);
        uint64_t v56 = &v49[8 * v45 - 16];
        CFIndex v57 = v38 - 16;
        uint64_t v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          _OWORD *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 4;
        }
        while (v58);
        CFTypeID v38 = v55;
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_98:
          do
          {
            uint64_t v60 = *((void *)v38 - 1);
            v38 -= 8;
            *--CFArrayRef v50 = v60;
          }
          while (v38 != v37);
        }
        uint64_t v37 = (char *)__p[1];
        __p[1] = v50;
        *(void *)&long long v75 = v52;
        *((void *)&v75 + 1) = v51;
        if (!v37) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
    }
    else
    {
      unint64_t v49 = 0;
      CFArrayRef v50 = (void *)(8 * v45);
      CFArrayRef v51 = 0;
      *(void *)(8 * v45) = v43;
      uint64_t v52 = 8 * v45 + 8;
      if (v37 != v38) {
        goto LABEL_62;
      }
    }
    __p[1] = v50;
    *(void *)&long long v75 = v52;
    *((void *)&v75 + 1) = v51;
    if (!v37)
    {
LABEL_73:
      *(void *)&long long v75 = v52;
      goto LABEL_74;
    }
LABEL_72:
    operator delete(v37);
    goto LABEL_73;
  }
  *(void *)CFTypeID v38 = v42;
  *(void *)&long long v75 = v38 + 8;
LABEL_74:
  _DWORD *v41 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v76, v36);
LABEL_75:
  uint64_t v69 = a1 + 192;
  uint64_t v70 = QMIServiceMsg::create();
  int v71 = 25000;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  v66[0] = MEMORY[0x1E4F143A8];
  v66[1] = 1174405120;
  void v66[2] = ___ZN4coex16QMICommandDriver30setTriggerAntennaBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v66[3] = &__block_descriptor_tmp_312;
  v66[4] = a1;
  CFTypeID v61 = *(void **)a3;
  if (*(void *)a3) {
    CFTypeID v61 = _Block_copy(v61);
  }
  CFNumberRef v62 = *(NSObject **)(a3 + 8);
  uint64_t v67 = v61;
  dispatch_object_t object = v62;
  if (v62) {
    dispatch_retain(v62);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  long long v78 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm27TriggerClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  CFDictionaryRef v79 = &unk_1E6196020;
  uint64_t v80 = v66;
  uint64_t v63 = _Block_copy(&aBlock);
  uint64_t v73 = v63;
  if (v70)
  {
    qmi::Client::send();
    uint64_t v63 = v73;
  }
  if (v63) {
    _Block_release(v63);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v67) {
    _Block_release(v67);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v76);
}

void sub_1B8BCBBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BCBC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t coex::QMICommandDriver::setCC1_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v30 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v30;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting CC1 with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v41[0] = 0xAAAAAAAAAAAAAAAALL;
  v41[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, *a2);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v7;
  long long v40 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v39);
  uint64_t v8 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v40) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == (const void **)v40)
  {
LABEL_10:
    uint64_t v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(&v39, 1);
  }
  else
  {
    if (!v9) {
      __cxa_bad_cast();
    }
    uint64_t v10 = v9 + 9;
  }
  char *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB9540]);
  uint64_t v11 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v40) {
        goto LABEL_18;
      }
    }
  }
  if (v11 == (const void **)v40)
  {
LABEL_18:
    CFNumberRef v13 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(&v39, 16);
  }
  else
  {
    if (!v12) {
      __cxa_bad_cast();
    }
    CFNumberRef v13 = v12 + 12;
  }
  *(_DWORD *)CFNumberRef v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB9518]);
  CFArrayRef v14 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v14 + 8) != 17)
    {
      if (++v14 == (const void **)v40) {
        goto LABEL_26;
      }
    }
  }
  if (v14 == (const void **)v40)
  {
LABEL_26:
    int64_t v16 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(&v39, 17);
  }
  else
  {
    if (!v15) {
      __cxa_bad_cast();
    }
    int64_t v16 = v15 + 12;
  }
  *(_DWORD *)int64_t v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB95F0]);
  int64_t v17 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v17 + 8) != 18)
    {
      if (++v17 == (const void **)v40) {
        goto LABEL_34;
      }
    }
  }
  if (v17 == (const void **)v40)
  {
LABEL_34:
    uint64_t v19 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CriticalCarrierId>(&v39);
  }
  else
  {
    if (!v18) {
      __cxa_bad_cast();
    }
    uint64_t v19 = v18 + 12;
  }
  *(_DWORD *)uint64_t v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB9548]);
  CFStringRef v20 = (const __CFString *)*MEMORY[0x1E4FB9658];
  if (CFDictionaryContainsKey(*a2, (const void *)*MEMORY[0x1E4FB9658]))
  {
    CFDictionaryRef v21 = *a2;
    CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4FB9538];
    if (CFDictionaryContainsKey(v21, (const void *)*MEMORY[0x1E4FB9538]))
    {
      uint64_t v23 = (const void **)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) != (void)v40)
      {
        while (*((unsigned char *)*v23 + 8) != 19)
        {
          if (++v23 == (const void **)v40) {
            goto LABEL_44;
          }
        }
      }
      if (v23 == (const void **)v40)
      {
LABEL_44:
        uint64_t v25 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::BandInfo>(&v39);
      }
      else
      {
        if (!v24) {
          __cxa_bad_cast();
        }
        uint64_t v25 = v24 + 12;
      }
      *(_DWORD *)uint64_t v25 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v20);
      *((_DWORD *)v25 + 1) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v22);
    }
  }
  uint64_t v34 = a1 + 192;
  uint64_t v35 = QMIServiceMsg::create();
  int v36 = 25000;
  uint64_t v37 = 0;
  CFTypeID v38 = 0;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 1174405120;
  v31[2] = ___ZN4coex16QMICommandDriver11setCC1_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v31[3] = &__block_descriptor_tmp_316;
  v31[4] = a1;
  uint64_t v26 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v26 = _Block_copy(v26);
  }
  unint64_t v27 = *(NSObject **)(a3 + 8);
  uint64_t v32 = v26;
  dispatch_object_t object = v27;
  if (v27) {
    dispatch_retain(v27);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  CFIndex v43 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC1Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  int64_t v44 = &unk_1E6196048;
  uint64_t v45 = v31;
  uint64_t v28 = _Block_copy(&aBlock);
  CFTypeID v38 = v28;
  if (v35)
  {
    qmi::Client::send();
    uint64_t v28 = v38;
  }
  if (v28) {
    _Block_release(v28);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v32) {
    _Block_release(v32);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v39);
  return MEMORY[0x1BA9C7760](v41);
}

void sub_1B8BCC264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setCC2_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v30 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v30;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting CC2 with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v41[0] = 0xAAAAAAAAAAAAAAAALL;
  v41[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, *a2);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v7;
  long long v40 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v39);
  uint64_t v8 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v40) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == (const void **)v40)
  {
LABEL_10:
    uint64_t v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(&v39, 1);
  }
  else
  {
    if (!v9) {
      __cxa_bad_cast();
    }
    uint64_t v10 = v9 + 9;
  }
  char *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB9540]);
  uint64_t v11 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v40) {
        goto LABEL_18;
      }
    }
  }
  if (v11 == (const void **)v40)
  {
LABEL_18:
    CFNumberRef v13 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(&v39, 16);
  }
  else
  {
    if (!v12) {
      __cxa_bad_cast();
    }
    CFNumberRef v13 = v12 + 12;
  }
  *(_DWORD *)CFNumberRef v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB9518]);
  CFArrayRef v14 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v14 + 8) != 17)
    {
      if (++v14 == (const void **)v40) {
        goto LABEL_26;
      }
    }
  }
  if (v14 == (const void **)v40)
  {
LABEL_26:
    int64_t v16 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(&v39, 17);
  }
  else
  {
    if (!v15) {
      __cxa_bad_cast();
    }
    int64_t v16 = v15 + 12;
  }
  *(_DWORD *)int64_t v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB95F0]);
  int64_t v17 = (const void **)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1) != (void)v40)
  {
    while (*((unsigned char *)*v17 + 8) != 18)
    {
      if (++v17 == (const void **)v40) {
        goto LABEL_34;
      }
    }
  }
  if (v17 == (const void **)v40)
  {
LABEL_34:
    uint64_t v19 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CriticalCarrierId>(&v39);
  }
  else
  {
    if (!v18) {
      __cxa_bad_cast();
    }
    uint64_t v19 = v18 + 12;
  }
  *(_DWORD *)uint64_t v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x1E4FB9548]);
  CFStringRef v20 = (const __CFString *)*MEMORY[0x1E4FB9658];
  if (CFDictionaryContainsKey(*a2, (const void *)*MEMORY[0x1E4FB9658]))
  {
    CFDictionaryRef v21 = *a2;
    CFStringRef v22 = (const __CFString *)*MEMORY[0x1E4FB9538];
    if (CFDictionaryContainsKey(v21, (const void *)*MEMORY[0x1E4FB9538]))
    {
      uint64_t v23 = (const void **)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) != (void)v40)
      {
        while (*((unsigned char *)*v23 + 8) != 19)
        {
          if (++v23 == (const void **)v40) {
            goto LABEL_44;
          }
        }
      }
      if (v23 == (const void **)v40)
      {
LABEL_44:
        uint64_t v25 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::BandInfo>(&v39);
      }
      else
      {
        if (!v24) {
          __cxa_bad_cast();
        }
        uint64_t v25 = v24 + 12;
      }
      *(_DWORD *)uint64_t v25 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v20);
      *((_DWORD *)v25 + 1) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v22);
    }
  }
  uint64_t v34 = a1 + 192;
  uint64_t v35 = QMIServiceMsg::create();
  int v36 = 25000;
  uint64_t v37 = 0;
  CFTypeID v38 = 0;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 1174405120;
  v31[2] = ___ZN4coex16QMICommandDriver11setCC2_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v31[3] = &__block_descriptor_tmp_320;
  v31[4] = a1;
  uint64_t v26 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v26 = _Block_copy(v26);
  }
  unint64_t v27 = *(NSObject **)(a3 + 8);
  uint64_t v32 = v26;
  dispatch_object_t object = v27;
  if (v27) {
    dispatch_retain(v27);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  CFIndex v43 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC2Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  int64_t v44 = &unk_1E6196070;
  uint64_t v45 = v31;
  uint64_t v28 = _Block_copy(&aBlock);
  CFTypeID v38 = v28;
  if (v35)
  {
    qmi::Client::send();
    uint64_t v28 = v38;
  }
  if (v28) {
    _Block_release(v28);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v32) {
    _Block_release(v32);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v39);
  return MEMORY[0x1BA9C7760](v41);
}

void sub_1B8BCC8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setLaaGpioThrottle_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v39 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v39;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting LAA GPIO throttle with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v50[0] = 0xAAAAAAAAAAAAAAAALL;
  v50[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v50, *a2);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v7;
  long long v49 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v8 = (const void **)__p[1];
  if (__p[1] != (void *)v49)
  {
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v49) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == (const void **)v49)
  {
LABEL_10:
    uint64_t v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v9) {
      __cxa_bad_cast();
    }
    uint64_t v10 = v9 + 9;
  }
  char *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v50, (const __CFString *)*MEMORY[0x1E4FB97E8]);
  uint64_t v11 = (char *)__p[1];
  long long v12 = (char *)v49;
  CFNumberRef v13 = (const void **)__p[1];
  if (__p[1] != (void *)v49)
  {
    CFNumberRef v13 = (const void **)__p[1];
    while (*((unsigned char *)*v13 + 8) != 16)
    {
      if (++v13 == (const void **)v49) {
        goto LABEL_19;
      }
    }
  }
  if (v13 == (const void **)v49)
  {
LABEL_19:
    int64_t v16 = (char *)operator new(0x10uLL);
    int64_t v17 = v16;
    v16[8] = 16;
    *(void *)int64_t v16 = &unk_1F1268DA0;
    *((_DWORD *)v16 + 3) = 0;
    CFArrayRef v15 = v16 + 12;
    if ((unint64_t)v12 < *((void *)&v49 + 1))
    {
      *(void *)long long v12 = v16;
      *(void *)&long long v49 = v12 + 8;
      goto LABEL_42;
    }
    int64_t v18 = v12 - v11;
    uint64_t v19 = (v12 - v11) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = *((void *)&v49 + 1) - (void)v11;
    if ((uint64_t)(*((void *)&v49 + 1) - (void)v11) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = operator new(8 * v22);
      uint64_t v24 = &v23[8 * v19];
      uint64_t v25 = &v23[8 * v22];
      *uint64_t v24 = v17;
      uint64_t v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58) {
          goto LABEL_61;
        }
        if ((unint64_t)(v11 - v23) < 0x20) {
          goto LABEL_61;
        }
        unint64_t v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v29 = &v12[-v28];
        uint64_t v24 = (void *)((char *)v24 - v28);
        CFDictionaryRef v30 = &v23[8 * v19 - 16];
        long long v31 = v12 - 16;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          _OWORD *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        long long v12 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_61:
          do
          {
            uint64_t v34 = *((void *)v12 - 1);
            v12 -= 8;
            *--uint64_t v24 = v34;
          }
          while (v12 != v11);
        }
        uint64_t v11 = (char *)__p[1];
        __p[1] = v24;
        *(void *)&long long v49 = v26;
        *((void *)&v49 + 1) = v25;
        if (!v11) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (void *)(8 * v19);
      uint64_t v25 = 0;
      *(void *)(8 * v19) = v17;
      uint64_t v26 = 8 * v19 + 8;
      if (v11 != v12) {
        goto LABEL_30;
      }
    }
    __p[1] = v24;
    *(void *)&long long v49 = v26;
    *((void *)&v49 + 1) = v25;
    if (!v11)
    {
LABEL_41:
      *(void *)&long long v49 = v26;
      goto LABEL_42;
    }
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v14) {
    __cxa_bad_cast();
  }
  CFArrayRef v15 = v14 + 12;
LABEL_42:
  *CFArrayRef v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v50, (const __CFString *)*MEMORY[0x1E4FB98E0]);
  uint64_t v43 = a1 + 192;
  uint64_t v44 = QMIServiceMsg::create();
  int v45 = 25000;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  void v40[2] = ___ZN4coex16QMICommandDriver23setLaaGpioThrottle_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v40[3] = &__block_descriptor_tmp_324;
  v40[4] = a1;
  uint64_t v35 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v35 = _Block_copy(v35);
  }
  int v36 = *(NSObject **)(a3 + 8);
  CFArrayRef v41 = v35;
  dispatch_object_t object = v36;
  if (v36) {
    dispatch_retain(v36);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  uint64_t v52 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetLaaGpioThrottleReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  unint64_t v53 = &unk_1E6196098;
  uint64_t v54 = v40;
  uint64_t v37 = _Block_copy(&aBlock);
  uint64_t v47 = v37;
  if (v44)
  {
    qmi::Client::send();
    uint64_t v37 = v47;
  }
  if (v37) {
    _Block_release(v37);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v41) {
    _Block_release(v41);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v50);
}

void sub_1B8BCCE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BCCEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  MEMORY[0x1BA9C7760](va1);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::setGnssParams_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v63 = *a2;
    LODWORD(aBlock) = 138412290;
    *(void *)((char *)&aBlock + 4) = v63;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Setting Gnss params with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v74[0] = 0xAAAAAAAAAAAAAAAALL;
  v74[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v74, *a2);
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v7;
  long long v73 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v8 = (const void **)__p[1];
  if (__p[1] != (void *)v73)
  {
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v73) {
        goto LABEL_10;
      }
    }
  }
  if (v8 == (const void **)v73)
  {
LABEL_10:
    uint64_t v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v9) {
      __cxa_bad_cast();
    }
    uint64_t v10 = v9 + 9;
  }
  char *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E4FB9580]);
  uint64_t v11 = (char *)__p[1];
  long long v12 = (char *)v73;
  CFNumberRef v13 = (const void **)__p[1];
  if (__p[1] != (void *)v73)
  {
    CFNumberRef v13 = (const void **)__p[1];
    while (*((unsigned char *)*v13 + 8) != 16)
    {
      if (++v13 == (const void **)v73) {
        goto LABEL_19;
      }
    }
  }
  if (v13 == (const void **)v73)
  {
LABEL_19:
    uint64_t v16 = (char *)operator new(0x10uLL);
    uint64_t v17 = v16;
    v16[8] = 16;
    *(void *)uint64_t v16 = &unk_1F1268DF0;
    *((_DWORD *)v16 + 3) = 0;
    CFArrayRef v15 = v16 + 12;
    if ((unint64_t)v12 < *((void *)&v73 + 1))
    {
      *(void *)long long v12 = v16;
      *(void *)&long long v73 = v12 + 8;
      goto LABEL_42;
    }
    int64_t v18 = v12 - v11;
    uint64_t v19 = (v12 - v11) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = *((void *)&v73 + 1) - (void)v11;
    if ((uint64_t)(*((void *)&v73 + 1) - (void)v11) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = operator new(8 * v22);
      uint64_t v24 = &v23[8 * v19];
      uint64_t v25 = &v23[8 * v22];
      *uint64_t v24 = v17;
      uint64_t v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58) {
          goto LABEL_95;
        }
        if ((unint64_t)(v11 - v23) < 0x20) {
          goto LABEL_95;
        }
        unint64_t v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v29 = &v12[-v28];
        uint64_t v24 = (void *)((char *)v24 - v28);
        CFDictionaryRef v30 = &v23[8 * v19 - 16];
        long long v31 = v12 - 16;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          _OWORD *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        long long v12 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_95:
          do
          {
            uint64_t v34 = *((void *)v12 - 1);
            v12 -= 8;
            *--uint64_t v24 = v34;
          }
          while (v12 != v11);
        }
        uint64_t v11 = (char *)__p[1];
        __p[1] = v24;
        *(void *)&long long v73 = v26;
        *((void *)&v73 + 1) = v25;
        if (!v11) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = (void *)(8 * v19);
      uint64_t v25 = 0;
      *(void *)(8 * v19) = v17;
      uint64_t v26 = 8 * v19 + 8;
      if (v11 != v12) {
        goto LABEL_30;
      }
    }
    __p[1] = v24;
    *(void *)&long long v73 = v26;
    *((void *)&v73 + 1) = v25;
    if (!v11)
    {
LABEL_41:
      *(void *)&long long v73 = v26;
      goto LABEL_42;
    }
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v14) {
    __cxa_bad_cast();
  }
  CFArrayRef v15 = v14 + 12;
LABEL_42:
  *CFArrayRef v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E4FB94F8]);
  uint64_t v35 = (char *)__p[1];
  int v36 = (char *)v73;
  uint64_t v37 = (const void **)__p[1];
  if (__p[1] != (void *)v73)
  {
    uint64_t v37 = (const void **)__p[1];
    while (*((unsigned char *)*v37 + 8) != 17)
    {
      if (++v37 == (const void **)v73) {
        goto LABEL_50;
      }
    }
  }
  if (v37 == (const void **)v73)
  {
LABEL_50:
    long long v40 = (char *)operator new(0x10uLL);
    CFArrayRef v41 = v40;
    v40[8] = 17;
    *(void *)long long v40 = &unk_1F1268E40;
    *((_DWORD *)v40 + 3) = 0;
    CFDictionaryRef v39 = v40 + 12;
    if ((unint64_t)v36 < *((void *)&v73 + 1))
    {
      *(void *)int v36 = v40;
      *(void *)&long long v73 = v36 + 8;
      goto LABEL_73;
    }
    int64_t v42 = v36 - v35;
    uint64_t v43 = (v36 - v35) >> 3;
    unint64_t v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v45 = *((void *)&v73 + 1) - (void)v35;
    if ((uint64_t)(*((void *)&v73 + 1) - (void)v35) >> 2 > v44) {
      unint64_t v44 = v45 >> 2;
    }
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46)
    {
      if (v46 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v47 = operator new(8 * v46);
      unint64_t v48 = &v47[8 * v43];
      long long v49 = &v47[8 * v46];
      *unint64_t v48 = v41;
      uint64_t v50 = (uint64_t)(v48 + 1);
      if (v35 != v36)
      {
LABEL_61:
        if ((unint64_t)(v42 - 8) < 0x58) {
          goto LABEL_96;
        }
        if ((unint64_t)(v35 - v47) < 0x20) {
          goto LABEL_96;
        }
        unint64_t v51 = ((unint64_t)(v42 - 8) >> 3) + 1;
        uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v53 = &v36[-v52];
        unint64_t v48 = (void *)((char *)v48 - v52);
        uint64_t v54 = &v47[8 * v43 - 16];
        uint64_t v55 = v36 - 16;
        uint64_t v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *uint64_t v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 4;
        }
        while (v56);
        int v36 = v53;
        if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_96:
          do
          {
            uint64_t v58 = *((void *)v36 - 1);
            v36 -= 8;
            *--unint64_t v48 = v58;
          }
          while (v36 != v35);
        }
        uint64_t v35 = (char *)__p[1];
        __p[1] = v48;
        *(void *)&long long v73 = v50;
        *((void *)&v73 + 1) = v49;
        if (!v35) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v47 = 0;
      unint64_t v48 = (void *)(8 * v43);
      long long v49 = 0;
      *(void *)(8 * v43) = v41;
      uint64_t v50 = 8 * v43 + 8;
      if (v35 != v36) {
        goto LABEL_61;
      }
    }
    __p[1] = v48;
    *(void *)&long long v73 = v50;
    *((void *)&v73 + 1) = v49;
    if (!v35)
    {
LABEL_72:
      *(void *)&long long v73 = v50;
      goto LABEL_73;
    }
LABEL_71:
    operator delete(v35);
    goto LABEL_72;
  }
  if (!v38) {
    __cxa_bad_cast();
  }
  CFDictionaryRef v39 = v38 + 12;
LABEL_73:
  _DWORD *v39 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E4FB9588]);
  uint64_t v67 = a1 + 192;
  uint64_t v68 = QMIServiceMsg::create();
  int v69 = 25000;
  uint64_t v70 = 0;
  int v71 = 0;
  v64[0] = MEMORY[0x1E4F143A8];
  v64[1] = 1174405120;
  v64[2] = ___ZN4coex16QMICommandDriver18setGnssParams_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v64[3] = &__block_descriptor_tmp_328_0;
  v64[4] = a1;
  long long v59 = *(void **)a3;
  if (*(void *)a3) {
    long long v59 = _Block_copy(v59);
  }
  uint64_t v60 = *(NSObject **)(a3 + 8);
  CFDictionaryRef v65 = v59;
  dispatch_object_t object = v60;
  if (v60) {
    dispatch_retain(v60);
  }
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 0x40000000;
  size_t v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm13SetGnssBandId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v77 = &unk_1E61960C0;
  long long v78 = v64;
  CFTypeID v61 = _Block_copy(&aBlock);
  int v71 = v61;
  if (v68)
  {
    qmi::Client::send();
    CFTypeID v61 = v71;
  }
  if (v61) {
    _Block_release(v61);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v65) {
    _Block_release(v65);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1BA9C7760](v74);
}

void sub_1B8BCD660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BCD6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  MEMORY[0x1BA9C7760](va1);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::getScanFreqBandFilter_sync(uint64_t a1, int a2, uint64_t a3)
{
  CFDictionaryRef v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_debug_impl(&dword_1B8B00000, v6, OS_LOG_TYPE_DEBUG, "#D Getting Scan Frequency Band filter info", (uint8_t *)aBlock, 2u);
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v7;
  long long v28 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v27);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  uint64_t v8 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver26getScanFreqBandFilter_syncENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  uint64_t v24 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver26getScanFreqBandFilter_syncENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  uint64_t v25 = &__block_descriptor_tmp_280;
  int v26 = a2;
  CFArrayRef v9 = (const void **)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1) != (void)v28)
  {
    while (*((unsigned char *)*v9 + 8) != 16)
    {
      if (++v9 == (const void **)v28) {
        goto LABEL_10;
      }
    }
  }
  if (v9 == (const void **)v28)
  {
LABEL_10:
    uint64_t v11 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(&v27, 16);
    uint64_t v8 = v24;
  }
  else
  {
    if (!v10) {
      __cxa_bad_cast();
    }
    uint64_t v11 = v10 + 12;
  }
  v8((uint64_t)v23, v11);
  uint64_t v18 = a1 + 192;
  uint64_t v19 = QMIServiceMsg::create();
  int v20 = 25000;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1174405120;
  void v15[2] = ___ZN4coex16QMICommandDriver26getScanFreqBandFilter_syncENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2;
  v15[3] = &__block_descriptor_tmp_284;
  v15[4] = a1;
  long long v12 = *(void **)a3;
  if (*(void *)a3) {
    long long v12 = _Block_copy(v12);
  }
  CFNumberRef v13 = *(NSObject **)(a3 + 8);
  uint64_t v16 = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21GetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6195F30;
  void aBlock[4] = v15;
  uint64_t v14 = _Block_copy(aBlock);
  unint64_t v22 = v14;
  if (v19)
  {
    qmi::Client::send();
    uint64_t v14 = v22;
  }
  if (v14) {
    _Block_release(v14);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    _Block_release(v16);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v27);
}

void sub_1B8BCD9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  coex::CommandDriver::Callback::~Callback(v27);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B8BCD9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1B8BCD9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void coex::QMICommandDriver::pollWWANState_sync(coex::QMICommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_debug_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEBUG, "#D Polling WWAN state", (uint8_t *)aBlock, 2u);
  }
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v3;
  v10[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  void v5[5] = (char *)this + 192;
  uint64_t v6 = QMIServiceMsg::create();
  int v7 = 25000;
  uint64_t v8 = 0;
  CFArrayRef v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN4coex16QMICommandDriver18pollWWANState_syncEv_block_invoke;
  void v5[3] = &__block_descriptor_tmp_34;
  v5[4] = this;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12GetWWANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6195D00;
  void aBlock[4] = v5;
  uint64_t v4 = _Block_copy(aBlock);
  CFArrayRef v9 = v4;
  if (v6)
  {
    qmi::Client::send();
    uint64_t v4 = v9;
  }
  if (v4) {
    _Block_release(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_1B8BCDB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BCDB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollWLANScanState_sync(coex::QMICommandDriver *this, int a2)
{
  void aBlock[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(aBlock[0]) = 67109120;
    HIDWORD(aBlock[0]) = a2;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Polling WLAN Scan State on scan %u", (uint8_t *)aBlock, 8u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v41 = v5;
  long long v42 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v41);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 0x40000000;
  uint64_t v6 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver22pollWLANScanState_syncEj_block_invoke;
  CFTypeID v38 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver22pollWLANScanState_syncEj_block_invoke;
  CFDictionaryRef v39 = &__block_descriptor_tmp_36_0;
  int v40 = a2;
  uint64_t v7 = (char *)*((void *)&v41 + 1);
  uint64_t v8 = (char *)v42;
  uint64_t v9 = (const void **)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1) != (void)v42)
  {
    uint64_t v9 = (const void **)*((void *)&v41 + 1);
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v42) {
        goto LABEL_11;
      }
    }
  }
  if (v9 == (const void **)v42)
  {
LABEL_11:
    uint64_t v12 = operator new(0x10uLL);
    CFNumberRef v13 = v12;
    v12[8] = 1;
    *(void *)uint64_t v12 = &unk_1F1267B10;
    *((_DWORD *)v12 + 3) = 0;
    uint64_t v11 = v12 + 12;
    if ((unint64_t)v8 < *((void *)&v42 + 1))
    {
      *(void *)uint64_t v8 = v12;
      uint64_t v14 = (uint64_t)(v8 + 8);
LABEL_24:
      *(void *)&long long v42 = v14;
      uint64_t v6 = v38;
      goto LABEL_25;
    }
    int64_t v15 = v8 - v7;
    uint64_t v16 = (v8 - v7) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = *((void *)&v42 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v42 + 1) - (void)v7) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v20 = operator new(8 * v19);
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v13;
      uint64_t v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_22:
        *((void *)&v41 + 1) = v21;
        *(void *)&long long v42 = v14;
        *((void *)&v42 + 1) = v22;
        if (!v7) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v7);
        goto LABEL_24;
      }
    }
    else
    {
      int v20 = 0;
      uint64_t v21 = (void *)(8 * v16);
      unint64_t v22 = 0;
      *(void *)(8 * v16) = v13;
      uint64_t v14 = 8 * v16 + 8;
      if (v7 == v8) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v15 - 8) < 0x58) {
      goto LABEL_44;
    }
    if ((unint64_t)(v7 - v20) < 0x20) {
      goto LABEL_44;
    }
    unint64_t v24 = ((unint64_t)(v15 - 8) >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    int v26 = &v8[-v25];
    uint64_t v21 = (void *)((char *)v21 - v25);
    long long v27 = &v20[8 * v16 - 16];
    long long v28 = v8 - 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      _OWORD *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    uint64_t v8 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        uint64_t v31 = *((void *)v8 - 1);
        v8 -= 8;
        *--uint64_t v21 = v31;
      }
      while (v8 != v7);
    }
    uint64_t v7 = (char *)*((void *)&v41 + 1);
    *((void *)&v41 + 1) = v21;
    *(void *)&long long v42 = v14;
    *((void *)&v42 + 1) = v22;
    if (!v7) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  uint64_t v11 = v10 + 12;
LABEL_25:
  v6((uint64_t)v37, v11);
  v32[5] = (char *)this + 192;
  uint64_t v33 = QMIServiceMsg::create();
  int v34 = 25000;
  uint64_t v35 = 0;
  int v36 = 0;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN4coex16QMICommandDriver22pollWLANScanState_syncEj_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_38_0;
  v32[4] = this;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANScanState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6195D28;
  void aBlock[4] = v32;
  uint64_t v23 = _Block_copy(aBlock);
  int v36 = v23;
  if (v33)
  {
    qmi::Client::send();
    uint64_t v23 = v36;
  }
  if (v23) {
    _Block_release(v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v41);
}

void sub_1B8BCDFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BCDFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BCDFE0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BCDFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollWLANConnState_sync(coex::QMICommandDriver *this, int a2)
{
  void aBlock[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(aBlock[0]) = 67109120;
    HIDWORD(aBlock[0]) = a2;
    _os_log_debug_impl(&dword_1B8B00000, v4, OS_LOG_TYPE_DEBUG, "#D Polling WLAN Connection State on connection %u", (uint8_t *)aBlock, 8u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v41 = v5;
  long long v42 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v41);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 0x40000000;
  uint64_t v6 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver22pollWLANConnState_syncEj_block_invoke;
  CFTypeID v38 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver22pollWLANConnState_syncEj_block_invoke;
  CFDictionaryRef v39 = &__block_descriptor_tmp_40_0;
  int v40 = a2;
  uint64_t v7 = (char *)*((void *)&v41 + 1);
  uint64_t v8 = (char *)v42;
  uint64_t v9 = (const void **)*((void *)&v41 + 1);
  if (*((void *)&v41 + 1) != (void)v42)
  {
    uint64_t v9 = (const void **)*((void *)&v41 + 1);
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v42) {
        goto LABEL_11;
      }
    }
  }
  if (v9 == (const void **)v42)
  {
LABEL_11:
    uint64_t v12 = operator new(0x10uLL);
    uint64_t v13 = v12;
    v12[8] = 1;
    *(void *)uint64_t v12 = &unk_1F1267B90;
    *((_DWORD *)v12 + 3) = 0;
    uint64_t v11 = v12 + 12;
    if ((unint64_t)v8 < *((void *)&v42 + 1))
    {
      *(void *)uint64_t v8 = v12;
      uint64_t v14 = (uint64_t)(v8 + 8);
LABEL_24:
      *(void *)&long long v42 = v14;
      uint64_t v6 = v38;
      goto LABEL_25;
    }
    int64_t v15 = v8 - v7;
    uint64_t v16 = (v8 - v7) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = *((void *)&v42 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v42 + 1) - (void)v7) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v20 = operator new(8 * v19);
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v13;
      uint64_t v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_22:
        *((void *)&v41 + 1) = v21;
        *(void *)&long long v42 = v14;
        *((void *)&v42 + 1) = v22;
        if (!v7) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v7);
        goto LABEL_24;
      }
    }
    else
    {
      int v20 = 0;
      uint64_t v21 = (void *)(8 * v16);
      unint64_t v22 = 0;
      *(void *)(8 * v16) = v13;
      uint64_t v14 = 8 * v16 + 8;
      if (v7 == v8) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)(v15 - 8) < 0x58) {
      goto LABEL_44;
    }
    if ((unint64_t)(v7 - v20) < 0x20) {
      goto LABEL_44;
    }
    unint64_t v24 = ((unint64_t)(v15 - 8) >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    int v26 = &v8[-v25];
    uint64_t v21 = (void *)((char *)v21 - v25);
    long long v27 = &v20[8 * v16 - 16];
    long long v28 = v8 - 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      _OWORD *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    uint64_t v8 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        uint64_t v31 = *((void *)v8 - 1);
        v8 -= 8;
        *--uint64_t v21 = v31;
      }
      while (v8 != v7);
    }
    uint64_t v7 = (char *)*((void *)&v41 + 1);
    *((void *)&v41 + 1) = v21;
    *(void *)&long long v42 = v14;
    *((void *)&v42 + 1) = v22;
    if (!v7) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  uint64_t v11 = v10 + 12;
LABEL_25:
  v6((uint64_t)v37, v11);
  v32[5] = (char *)this + 192;
  uint64_t v33 = QMIServiceMsg::create();
  int v34 = 25000;
  uint64_t v35 = 0;
  int v36 = 0;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN4coex16QMICommandDriver22pollWLANConnState_syncEj_block_invoke_2;
  v32[3] = &__block_descriptor_tmp_42_0;
  v32[4] = this;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANConnState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6195D50;
  void aBlock[4] = v32;
  uint64_t v23 = _Block_copy(aBlock);
  int v36 = v23;
  if (v33)
  {
    qmi::Client::send();
    uint64_t v23 = v36;
  }
  if (v23) {
    _Block_release(v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v41);
}

void sub_1B8BCE438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BCE454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B8BCE46C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BCE484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollPolicy_sync(coex::QMICommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEBUG, "#D Polling policy", buf, 2u);
  }
  *(void *)long long buf = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v5 = Mutable;
  if (Mutable) {
    *(void *)long long buf = Mutable;
  }
  CFMutableDictionaryRef v11 = 0;
  CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v7 = v6;
  if (v6) {
    CFMutableDictionaryRef v11 = v6;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v5, (CFTypeRef)*MEMORY[0x1E4FB9598], v6);
  if (v5 && (CFTypeID v8 = CFGetTypeID(v5), v8 == CFDictionaryGetTypeID()))
  {
    uint64_t v10 = v5;
    CFRetain(v5);
    uint64_t v9 = v5;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync((uint64_t)this, (const void **)&v10, 0);
  if (v9) {
    CFRelease(v9);
  }
  if (v7)
  {
    CFRelease(v7);
    long long v5 = *(__CFDictionary **)buf;
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8BCE604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
}

void sub_1B8BCE628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFAllocatorRef v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollLinkQuality_sync(coex::QMICommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_debug_impl(&dword_1B8B00000, v2, OS_LOG_TYPE_DEBUG, "#D Polling Link Quality", (uint8_t *)aBlock, 2u);
  }
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v3;
  v10[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  void v5[5] = (char *)this + 192;
  uint64_t v6 = QMIServiceMsg::create();
  int v7 = 25000;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN4coex16QMICommandDriver20pollLinkQuality_syncEv_block_invoke;
  void v5[3] = &__block_descriptor_tmp_44_1;
  v5[4] = this;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRRead8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E6195D78;
  void aBlock[4] = v5;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v9 = v4;
  if (v6)
  {
    qmi::Client::send();
    uint64_t v4 = v9;
  }
  if (v4) {
    _Block_release(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_1B8BCE7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BCE7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver18pollWWANState_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v166 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = Mutable;
  if (Mutable) {
    long long v166 = Mutable;
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v170) = 14;
  strcpy((char *)v169, "Get WWAN State");
  coex::QMICommandDriver::checkError(v3, (uint64_t)a2, (uint64_t)v169, &cf);
  if (SHIBYTE(v170) < 0)
  {
    operator delete(v169[0]);
    CFTypeRef v7 = cf;
    if (cf) {
      uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11) {
      goto LABEL_8;
    }
  }
  else
  {
    CFTypeRef v7 = cf;
    if (cf) {
      uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8)
    {
LABEL_8:
      ctu::cf::insert<__CFString const*,__CFError *>(v6, (CFTypeRef)*MEMORY[0x1E4FB9550], v7);
      if (v6 && (CFTypeID v9 = CFGetTypeID(v6), v9 == CFDictionaryGetTypeID()))
      {
        v164 = v6;
        CFRetain(v6);
        uint64_t v10 = v6;
      }
      else
      {
        uint64_t v10 = 0;
        v164 = 0;
      }
      coex::QMICommandDriver::sendStateUpdate_sync(v3, (const void **)&v164, 0);
      if (v10) {
        CFRelease(v10);
      }
      goto LABEL_178;
    }
  }
  CFMutableDictionaryRef v163 = 0;
  CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v13 = v12;
  if (v12)
  {
    CFMutableDictionaryRef v162 = v12;
    CFMutableDictionaryRef v163 = v12;
    CFRetain(v12);
  }
  else
  {
    CFMutableDictionaryRef v162 = 0;
  }
  CFMutableDictionaryRef v167 = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_461;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v173 = *MEMORY[0x1E4FB96C8];
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v16 = TlvValue;
  if (TlvValue)
  {
    int v17 = v15;
    v174[0] = TlvValue;
    v168[0] = tlv::parseV<coex::tlv::abm::LTEBandInformation>(v174, v15);
    v168[1] = v18;
    if (v174[0]) {
      v170(v169, (tlv **)v168);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 16, v16, v17);
    }
  }
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v161 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v161 = 0;
  }
  CFMutableDictionaryRef v167 = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_464;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v173 = *MEMORY[0x1E4FB96B0];
  unint64_t v19 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v21 = v19;
  if (v19)
  {
    int v22 = v20;
    v174[0] = v19;
    memset(v168, 170, 20);
    tlv::parseV<coex::tlv::abm::LTETDDInformation>(v174, v20, (uint64_t)v168);
    if (v174[0]) {
      v170(v169, (tlv **)v168);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 17, v21, v22);
    }
  }
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v160 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v160 = 0;
  }
  v168[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_467;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v173 = *MEMORY[0x1E4FB95D0];
  uint64_t v23 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v31 = v23;
  if (v23)
  {
    tlv::throwIfNotEnoughBytes(v23, (const unsigned __int8 *)v23 + v24, (const unsigned __int8 *)4);
    LODWORD(v174[0]) = *(_DWORD *)v31;
    v170(v169, v174);
  }
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v159 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v159 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_470;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v32 = *MEMORY[0x1E4FB97B0];
  uint64_t v173 = *MEMORY[0x1E4FB97B0];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTEBandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTEBandInformationSet const&)>(a2, (uint64_t)v168, v25, v26, v27, v28, v29, v30, v109, v120, v131);
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v158 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v158 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_473;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v173 = *MEMORY[0x1E4FB98B8];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::TDSCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::TDSCDMABandInformationSet const&)>(a2, (uint64_t)v168, v33, v34, v35, v36, v37, v38, v110, v121, v132);
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v157 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v157 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_476;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v45 = *MEMORY[0x1E4FB9790];
  uint64_t v173 = *MEMORY[0x1E4FB9790];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSMBandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSMBandInformationSet const&)>(a2, (uint64_t)v168, v39, v40, v41, v42, v43, v44, v111, v122, v133);
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v156 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v156 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_479;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v173 = *MEMORY[0x1E4FB97F0];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::ONEXBandInformationSet,void({block_pointer}&)(coex::tlv::abm::ONEXBandInformationSet const&)>(a2, (uint64_t)v168, v46, v47, v48, v49, v50, v51, v112, v123, v134);
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v155 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v155 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_482;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v173 = *MEMORY[0x1E4FB97A0];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::HDRBandInformationSet,void({block_pointer}&)(coex::tlv::abm::HDRBandInformationSet const&)>(a2, (uint64_t)v168, v52, v53, v54, v55, v56, v57, v113, v124, v135);
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v154 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v154 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_485;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  uint64_t v64 = *MEMORY[0x1E4FB9848];
  uint64_t v173 = *MEMORY[0x1E4FB9848];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMABandInformationSet const&)>(a2, (uint64_t)v168, v58, v59, v60, v61, v62, v63, v114, v125, v136);
  if (v172) {
    CFRelease(v172);
  }
  if (v13)
  {
    CFRelease(v13);
    CFMutableDictionaryRef v153 = v13;
    CFRetain(v13);
  }
  else
  {
    CFMutableDictionaryRef v153 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_488;
  uint64_t v172 = v13;
  if (v13) {
    CFRetain(v13);
  }
  int v71 = (void *)*MEMORY[0x1E4FB97C0];
  uint64_t v173 = *MEMORY[0x1E4FB97C0];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCBandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCBandInformationSet const&)>(a2, (uint64_t)v168, v65, v66, v67, v68, v69, v70, v115, v126, v137);
  if (v172) {
    CFRelease(v172);
  }
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v142 = v64;
  uint64_t v127 = v71;
  uint64_t v72 = v45;
  uint64_t v6 = v166;
  uint64_t v152 = v166;
  if (v166) {
    CFRetain(v166);
  }
  uint64_t v138 = v32;
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_491;
  uint64_t v172 = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v73 = *MEMORY[0x1E4FB9868];
  uint64_t v173 = *MEMORY[0x1E4FB9868];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTECarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTECarrierInformationSet const&)>(a2, (uint64_t)v168);
  if (v172) {
    CFRelease(v172);
  }
  if (v6)
  {
    CFRelease(v6);
    uint64_t v74 = v3;
    unint64_t v151 = v6;
    CFRetain(v6);
  }
  else
  {
    uint64_t v74 = v3;
    unint64_t v151 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_494;
  uint64_t v172 = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v75 = *MEMORY[0x1E4FB9870];
  uint64_t v173 = *MEMORY[0x1E4FB9870];
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCCarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCCarrierInformationSet const&)>(a2, (uint64_t)v168);
  uint64_t v76 = v74;
  if (v172) {
    CFRelease(v172);
  }
  if (v6) {
    CFRelease(v6);
  }
  CFIndex Count = CFDictionaryGetCount(v13);
  long long v78 = (CFTypeRef *)MEMORY[0x1E4FB9608];
  if (Count)
  {
    ctu::cf::update<__CFString const*,__CFDictionary *>(v6, (CFTypeRef)*MEMORY[0x1E4FB9608], v13);
    if (v6 && (CFTypeID v79 = CFGetTypeID(v6), v79 == CFDictionaryGetTypeID()))
    {
      uint64_t v150 = v6;
      CFRetain(v6);
      uint64_t v80 = v6;
    }
    else
    {
      uint64_t v80 = 0;
      uint64_t v150 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v76, (const void **)&v150, 0);
    if (v80) {
      CFRelease(v80);
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  CFMutableDictionaryRef v167 = 0;
  CFMutableDictionaryRef v81 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v88 = v81;
  if (v81)
  {
    CFMutableDictionaryRef v167 = v81;
    CFMutableDictionaryRef v149 = v81;
    CFRetain(v81);
  }
  else
  {
    CFMutableDictionaryRef v149 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_497;
  uint64_t v172 = v88;
  if (v88) {
    CFRetain(v88);
  }
  uint64_t v173 = v72;
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSM2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSM2BandInformationSet const&)>(a2, (uint64_t)v168, v82, v83, v84, v85, v86, v87, v116, v127, v138);
  if (v172) {
    CFRelease(v172);
  }
  if (v88)
  {
    CFRelease(v88);
    CFMutableDictionaryRef v148 = v88;
    CFRetain(v88);
  }
  else
  {
    CFMutableDictionaryRef v148 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_500;
  uint64_t v172 = v88;
  if (v88) {
    CFRetain(v88);
  }
  uint64_t v173 = v142;
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMA2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMA2BandInformationSet const&)>(a2, (uint64_t)v168, v89, v90, v91, v92, v93, v94, v117, v128, v139);
  if (v172) {
    CFRelease(v172);
  }
  if (v88)
  {
    CFRelease(v88);
    CFMutableDictionaryRef v147 = v88;
    CFRetain(v88);
  }
  else
  {
    CFMutableDictionaryRef v147 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_503;
  uint64_t v172 = v88;
  if (v88) {
    CFRetain(v88);
  }
  uint64_t v173 = v140;
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2BandInformationSet const&)>(a2, (uint64_t)v168, v95, v96, v97, v98, v99, v100, v118, v129, v140);
  if (v172) {
    CFRelease(v172);
  }
  if (v88) {
    CFRelease(v88);
  }
  int64_t v146 = v6;
  if (v6) {
    CFRetain(v6);
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_506;
  uint64_t v172 = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v173 = v73;
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2CarrierInformationSet const&)>(a2, (uint64_t)v168);
  if (v172) {
    CFRelease(v172);
  }
  if (v6)
  {
    CFRelease(v6);
    uint64_t v145 = v6;
    CFRetain(v6);
  }
  else
  {
    uint64_t v145 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_509;
  uint64_t v172 = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v173 = (uint64_t)v130;
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2BandInformationSet const&)>(a2, (uint64_t)v168, v101, v102, v103, v104, v105, v106, v119, v130, v141);
  if (v172) {
    CFRelease(v172);
  }
  if (v6)
  {
    CFRelease(v6);
    long long v144 = v6;
    CFRetain(v6);
  }
  else
  {
    long long v144 = 0;
  }
  v174[0] = 0;
  v169[0] = (void *)MEMORY[0x1E4F143A8];
  v169[1] = (void *)1174405120;
  size_t v170 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v171 = &__block_descriptor_tmp_512;
  uint64_t v172 = v6;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v173 = v75;
  v168[0] = v169;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2CarrierInformationSet const&)>(a2, (uint64_t)v168);
  if (v172) {
    CFRelease(v172);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (CFDictionaryGetCount(v88))
  {
    ctu::cf::update<__CFString const*,__CFDictionary *>(v6, *v78, v88);
    if (v6 && (CFTypeID v107 = CFGetTypeID(v6), v107 == CFDictionaryGetTypeID()))
    {
      __int16 v143 = v6;
      CFRetain(v6);
      uint64_t v108 = v6;
    }
    else
    {
      uint64_t v108 = 0;
      __int16 v143 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v76, (const void **)&v143, 1);
    if (v108) {
      CFRelease(v108);
    }
  }
  if (v88) {
    CFRelease(v88);
  }
LABEL_178:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1B8BCF6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 192));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a35);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 200));
  _Unwind_Resume(a1);
}

uint64_t ___ZN4coex16QMICommandDriver22pollWLANScanState_syncEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver22pollWLANScanState_syncEj_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFMutableDictionaryRef v18 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v5 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef v18 = Mutable;
  }
  CFTypeRef v17 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "Get WLAN Scan State");
  coex::QMICommandDriver::checkError(v3, (uint64_t)a2, (uint64_t)__p, &v17);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    CFTypeRef v6 = v17;
    if (v17) {
      uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8) {
      goto LABEL_8;
    }
  }
  else
  {
    CFTypeRef v6 = v17;
    if (v17) {
      CFTypeRef v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v7 = 0;
    }
    if (v7)
    {
LABEL_8:
      ctu::cf::insert<__CFString const*,__CFError *>(v5, (CFTypeRef)*MEMORY[0x1E4FB9550], v6);
      goto LABEL_25;
    }
  }
  v16[1] = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v22 = 0;
  __p[0] = (void *)MEMORY[0x1E4F143A8];
  __p[1] = (void *)1174405120;
  __p[2] = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12WLANScanInfoENS_3abm16GetWLANScanState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  __p[3] = &__block_descriptor_tmp_520;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v21 = *MEMORY[0x1E4FB96B8];
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  uint64_t v11 = TlvValue;
  if (TlvValue)
  {
    int v12 = v10;
    int v24 = TlvValue;
    v23[0] = tlv::parseV<coex::tlv::abm::WLANScanInfo>(&v24, v10);
    v23[1] = v13;
    if (v24) {
      ((void (*)(void **, void *))__p[2])(__p, v23);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 16, v11, v12);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!v5) {
    goto LABEL_28;
  }
  CFRelease(v5);
LABEL_25:
  if (v5)
  {
    CFTypeID v14 = CFGetTypeID(v5);
    if (v14 == CFDictionaryGetTypeID())
    {
      v16[0] = v5;
      CFRetain(v5);
      int v15 = v5;
      goto LABEL_29;
    }
  }
LABEL_28:
  int v15 = 0;
  v16[0] = 0;
LABEL_29:
  coex::QMICommandDriver::sendStateUpdate_sync(v3, v16, 0);
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8BCFD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

uint64_t ___ZN4coex16QMICommandDriver22pollWLANConnState_syncEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver22pollWLANConnState_syncEj_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef v17 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v5 = Mutable;
  if (Mutable) {
    CFTypeRef v17 = Mutable;
  }
  CFTypeRef v16 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  std::string __p = operator new(0x20uLL);
  long long v19 = xmmword_1B8C328A0;
  strcpy((char *)__p, "Get WLAN Connection State");
  coex::QMICommandDriver::checkError(v3, (uint64_t)a2, (uint64_t)&__p, &v16);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p);
    CFTypeRef v6 = v16;
    if (v16) {
      uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8) {
      goto LABEL_8;
    }
  }
  else
  {
    CFTypeRef v6 = v16;
    if (v16) {
      CFTypeRef v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v7 = 0;
    }
    if (v7)
    {
LABEL_8:
      ctu::cf::insert<__CFString const*,__CFError *>(v5, (CFTypeRef)*MEMORY[0x1E4FB9550], v6);
      goto LABEL_24;
    }
  }
  CFTypeRef v15 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v23 = 0;
  std::string __p = (void *)MEMORY[0x1E4F143A8];
  *(void *)&long long v19 = 1174405120;
  *((void *)&v19 + 1) = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18WLANConnectionInfoENS_3abm16GetWLANConnState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  int v20 = &__block_descriptor_tmp_524;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v22 = *MEMORY[0x1E4FB9830];
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    unint64_t v24 = 0xAAAAAAAA00000000;
    *(_OWORD *)int v25 = 0u;
    long long v26 = 0u;
    coex::tlv::abm::parseField(TlvValue, &TlvValue[v10], (uint64_t)&v24);
    (*((void (**)(void **, unint64_t *))&v19 + 1))(&__p, &v24);
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_24:
  CFTypeRef v11 = v17;
  if (v17 && (CFTypeID v12 = CFGetTypeID(v17), v12 == CFDictionaryGetTypeID()))
  {
    CFTypeID v14 = v11;
    CFRetain(v11);
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v13 = 0;
    CFTypeID v14 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, &v14, 0);
  if (v13) {
    CFRelease(v13);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v11) {
    CFRelease(v11);
  }
}

void sub_1B8BD00D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, const void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v25 + 32));
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a22);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver20pollLinkQuality_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef v21 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v6 = Mutable;
  if (Mutable) {
    CFTypeRef v21 = Mutable;
  }
  CFTypeRef v20 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v23) = 8;
  strcpy((char *)&__p, "Get SINR");
  coex::QMICommandDriver::checkError(v3, (uint64_t)a2, (uint64_t)&__p, &v20);
  if (SHIBYTE(v23) < 0)
  {
    operator delete((void *)__p);
    CFTypeRef v7 = v20;
    if (v20) {
      CFTypeID v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeID v9 = 0;
    }
    if (v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFTypeRef v7 = v20;
    if (v20) {
      uint64_t v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8)
    {
LABEL_8:
      ctu::cf::insert<__CFString const*,__CFError *>(v6, (CFTypeRef)*MEMORY[0x1E4FB9550], v7);
      goto LABEL_28;
    }
  }
  CFMutableDictionaryRef v19 = 0;
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v11 = v10;
  if (v10)
  {
    CFMutableDictionaryRef v18 = v10;
    CFMutableDictionaryRef v19 = v10;
    CFRetain(v10);
  }
  else
  {
    CFMutableDictionaryRef v18 = 0;
  }
  uint64_t v27 = 0;
  *(void *)&long long __p = MEMORY[0x1E4F143A8];
  *((void *)&__p + 1) = 1174405120;
  uint64_t v23 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTESINRFilteredOutputENS_3abm8SINRRead8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v24 = &__block_descriptor_tmp_529;
  CFTypeRef cf = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v26 = *MEMORY[0x1E4FB99C8];
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  CFTypeID v14 = TlvValue;
  if (TlvValue)
  {
    int v15 = v13;
    int v29 = TlvValue;
    float v28 = tlv::parseV<coex::tlv::abm::LTESINRFilteredOutput>(&v29, v13);
    if (v29) {
      v23((uint64_t)&__p, (int *)&v28);
    }
    else {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 16, v14, v15);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v6, (CFTypeRef)*MEMORY[0x1E4FB9660], v11);
  if (v11) {
    CFRelease(v11);
  }
LABEL_28:
  if (v6 && (CFTypeID v16 = CFGetTypeID(v6), v16 == CFDictionaryGetTypeID()))
  {
    CFTypeRef v17 = v6;
    CFRetain(v6);
  }
  else
  {
    CFTypeRef v17 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, &v17, 0);
  if (v17) {
    CFRelease(v17);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
}

void sub_1B8BD04B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, const void *a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t result = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9670]);
  *a2 = result;
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_48(uint64_t a1, unsigned char *a2)
{
  uint64_t result = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9668]);
  *a2 = result;
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_53(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_4(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_5(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_1B8C328A0;
  strcpy((char *)__p, "set reporting indications");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    CFTypeRef v5 = cf;
    if (cf) {
      CFTypeRef v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v6 = 0;
    }
    if (!v6) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v11 = v5;
    if (v5) {
      goto LABEL_13;
    }
LABEL_16:
    CFMutableDictionaryRef v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    CFTypeRef v9 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p);
  CFTypeRef v5 = cf;
  if (cf) {
    CFTypeRef v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    CFTypeRef v7 = 0;
  }
  if (v7) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Setting reporting indications completed", (uint8_t *)&__p, 2u);
  CFTypeRef v5 = cf;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v5);
  CFMutableDictionaryRef v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  CFTypeRef v9 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v9);
}

void sub_1B8BD079C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *(_DWORD *)a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB95A0]);
  CFDictionaryRef v4 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v3, (const __CFString *)*MEMORY[0x1E4FB95F8]);
  if (v4) {
    CFTypeRef v5 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (v5)
  {
    v9[0] = 0xAAAAAAAAAAAAAAAALL;
    v9[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v9, v4);
    unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v9, (const __CFString *)*MEMORY[0x1E4FB9658]);
    uint64_t v7 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v9, (const __CFString *)*MEMORY[0x1E4FB9538]);
    MEMORY[0x1BA9C7760](v9);
    CFTypeRef v5 = (uint64_t (*)(uint64_t))(Int | (unint64_t)(v7 << 32));
  }
  *(void *)(a2 + 4) = v5;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E4FB9628]);
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void sub_1B8BD08D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_70(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9770]);
  CFArrayRef v4 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef(v3, (const __CFString *)*MEMORY[0x1E4FB95F8]);
  unint64_t Count = CFArrayGetCount(v4);
  unint64_t v6 = Count;
  unint64_t v24 = v3;
  uint64_t v25 = a2;
  if ((Count & 0x8000000000000000) != 0)
  {
    unint64_t v6 = 0;
LABEL_20:
    CFMutableDictionaryRef v18 = 0;
    uint64_t v8 = 0;
    CFMutableDictionaryRef v19 = a2;
    CFTypeRef v21 = a2 + 2;
    CFTypeRef v20 = (void *)*((void *)v25 + 1);
    if (!v20) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!Count) {
    goto LABEL_20;
  }
  if (Count >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = 8 * Count;
  uint64_t v8 = (char *)operator new(8 * Count);
  bzero(v8, 8 * v6);
  CFIndex v9 = 0;
  uint64_t v23 = &v8[v7];
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4FB9658];
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4FB9538];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, v9);
    long long v13 = ValueAtIndex;
    if (ValueAtIndex && (CFTypeID v14 = CFGetTypeID(ValueAtIndex), v14 == CFDictionaryGetTypeID()))
    {
      CFRetain(v13);
      CFRetain(v13);
      if (v13) {
        int v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        int v15 = 0;
      }
      if (v15)
      {
        v26[0] = 0xAAAAAAAAAAAAAAAALL;
        v26[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, (const __CFDictionary *)v13);
        unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v26, v10);
        uint64_t v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v26, v11);
        MEMORY[0x1BA9C7760](v26);
        *(void *)&v8[8 * v9] = Int | (unint64_t)(v17 << 32);
        if (!v13) {
          goto LABEL_5;
        }
LABEL_16:
        CFRelease(v13);
        CFRelease(v13);
        goto LABEL_5;
      }
    }
    else
    {
      long long v13 = 0;
      int v15 = 0;
    }
    *(void *)&v8[8 * v9] = v15;
    if (v13) {
      goto LABEL_16;
    }
LABEL_5:
    ++v9;
  }
  while (v6 != v9);
  CFMutableDictionaryRef v18 = v23;
  unint64_t v6 = (unint64_t)&v8[8 * v6];
  CFMutableDictionaryRef v19 = a2;
  CFTypeRef v21 = a2 + 2;
  CFTypeRef v20 = (void *)*((void *)v25 + 1);
  if (v20)
  {
LABEL_21:
    *((void *)v19 + 2) = v20;
    operator delete(v20);
    void *v21 = 0;
    v21[1] = 0;
    void v21[2] = 0;
  }
LABEL_22:
  *((void *)v19 + 1) = v8;
  *((void *)v19 + 2) = v18;
  *((void *)v19 + 3) = v6;
  if (v4) {
    CFRelease(v4);
  }
  v19[8] = ctu::cf::map_adapter::getInt(v24, (const __CFString *)*MEMORY[0x1E4FB9740]);
  uint64_t result = ctu::cf::map_adapter::getInt(v24, (const __CFString *)*MEMORY[0x1E4FB96F0]);
  v19[9] = result;
  return result;
}

void sub_1B8BD0BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 14;
  strcpy((char *)__p, "set WLAN state");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFIndex v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    unint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Setting WLAN completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFIndex v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD0DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFTypeRef __copy_helper_block_e8_32c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9578]);
  *a2 = result;
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_228(uint64_t a1, _DWORD *a2)
{
  uint64_t result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB9860]);
  *a2 = result;
  return result;
}

void ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_233(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 16;
  strcpy(__p, "Start BLER stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFIndex v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)__p);
  CFTypeRef v4 = cf;
  if (cf) {
    unint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  *(_WORD *)long long __p = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Start BLER completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFIndex v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD10A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_239(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 15;
  strcpy((char *)__p, "Stop BLER stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFIndex v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    unint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Stop BLER completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFIndex v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD122C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, float *a2)
{
  uint64_t result = ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E4FB99D0], 0.0);
  float v5 = v4;
  float v6 = 0.0;
  if (v5 >= 0.0)
  {
    float v6 = v5;
    if (v5 > 1.0) {
      float v6 = 1.0;
    }
  }
  *a2 = v6;
  return result;
}

void ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_248(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 16;
  strcpy(__p, "Start SINR stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      float v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      float v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFIndex v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)__p);
  CFTypeRef v4 = cf;
  if (cf) {
    float v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    float v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  *(_WORD *)long long __p = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Start SINR completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFIndex v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD1410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_254(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 15;
  strcpy((char *)__p, "Stop SINR stats");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      float v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      float v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFIndex v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    float v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    float v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Stop SINR completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFIndex v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD159C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 14;
  strcpy((char *)__p, "Set LAA config");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      float v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      float v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFIndex v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    float v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    float v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set LAA config completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFIndex v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD1728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, void **a2)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRetain(v3);
  }
  unint64_t Count = CFArrayGetCount((CFArrayRef)v3);
  unint64_t v5 = Count;
  int v49 = a2;
  if ((Count & 0x8000000000000000) != 0 || !Count)
  {
    int v48 = 0;
    uint64_t v45 = 0;
    int v44 = 0;
    int v46 = *a2;
    if (!*a2) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (Count >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  int v62 = (char *)operator new(24 * Count);
  int v48 = &v62[24 * v5];
  bzero(v62, 24 * ((24 * v5 - 24) / 0x18) + 24);
  CFIndex v6 = 0;
  int v47 = &v62[24 * ((24 * v5 - 24) / 0x18) + 24];
  int v54 = (__CFString *)*MEMORY[0x1E4FB94E8];
  int v56 = (__CFString *)*MEMORY[0x1E4FB9658];
  int v55 = (__CFString *)*MEMORY[0x1E4FB9538];
  int v53 = (__CFString *)*MEMORY[0x1E4FB9528];
  int v51 = v3;
  int v52 = (__CFString *)*MEMORY[0x1E4FB9510];
  uint64_t v7 = (unint64_t *)(v62 + 16);
  unint64_t v50 = v5;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, v6);
    CFIndex v9 = ValueAtIndex;
    if (ValueAtIndex && (CFTypeID v10 = CFGetTypeID(ValueAtIndex), v10 == CFDictionaryGetTypeID()))
    {
      CFRetain(v9);
      CFRetain(v9);
    }
    else
    {
      CFIndex v9 = 0;
    }
    v63[0] = 0xAAAAAAAAAAAAAAAALL;
    v63[1] = 0xAAAAAAAAAAAAAAAALL;
    CFStringRef v11 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v63, (const __CFDictionary *)v9);
    CFDictionaryRef v12 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v11, v54);
    CFDictionaryRef v13 = v12;
    if (v12) {
      CFTypeID v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      CFTypeID v14 = 0;
    }
    if (!v14)
    {
      unint64_t v18 = 0;
      if (!v12) {
        goto LABEL_20;
      }
LABEL_19:
      CFRelease(v13);
      goto LABEL_20;
    }
    uint64_t v64 = (char *)0xAAAAAAAAAAAAAAAALL;
    int v65 = (char *)0xAAAAAAAAAAAAAAAALL;
    int v15 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v64, v12);
    unsigned int Int = ctu::cf::map_adapter::getInt(v15, v56);
    uint64_t v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v64, v55);
    MEMORY[0x1BA9C7760](&v64);
    unint64_t v18 = Int | (unint64_t)(v17 << 32);
    if (v13) {
      goto LABEL_19;
    }
LABEL_20:
    CFDictionaryRef v19 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v63, v53);
    CFDictionaryRef v20 = v19;
    if (v19) {
      CFTypeRef v21 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      CFTypeRef v21 = 0;
    }
    if (!v21)
    {
      unint64_t v25 = 0;
      if (!v19) {
        goto LABEL_28;
      }
LABEL_27:
      CFRelease(v20);
      goto LABEL_28;
    }
    uint64_t v64 = (char *)0xAAAAAAAAAAAAAAAALL;
    int v65 = (char *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v22 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v64, v19);
    unsigned int v23 = ctu::cf::map_adapter::getInt(v22, v56);
    uint64_t v24 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v64, v55);
    MEMORY[0x1BA9C7760](&v64);
    unint64_t v25 = v23 | (unint64_t)(v24 << 32);
    if (v20) {
      goto LABEL_27;
    }
LABEL_28:
    uint64_t v26 = (const void *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v63, v52);
    uint64_t v27 = v26;
    void v63[2] = v26;
    if (v26) {
      CFRetain(v26);
    }
    uint64_t v64 = 0;
    int v65 = 0;
    uint64_t v66 = 0;
    ctu::cf::assign();
    if (v27) {
      CFRelease(v27);
    }
    unint64_t v57 = v25;
    unint64_t v58 = v18;
    int v59 = v9;
    int v60 = v7;
    CFIndex v61 = v6;
    if ((unint64_t)(v65 - v64) >= 8)
    {
      uint64_t v28 = *(void *)v64;
      unint64_t v29 = *(void *)v64 & 0xFFFFFFFFFFFFFF00;
      unint64_t v30 = *(void *)v64 & 0xFFFFFFFFFFFF0000;
      unint64_t v31 = *(void *)v64 & 0xFFFFFFFFFF000000;
      unint64_t v32 = *(void *)v64 & 0xFFFFFFFF00000000;
      unint64_t v33 = *(void *)v64 & 0xFFFFFF0000000000;
      unint64_t v34 = *(void *)v64 & 0xFFFF000000000000;
      unint64_t v35 = *(void *)v64 & 0xFF00000000000000;
LABEL_37:
      int v65 = v64;
      unsigned __int16 v37 = v29;
      int v38 = v30;
      int v39 = v31;
      unint64_t v40 = v32;
      unint64_t v41 = v33;
      unint64_t v42 = v34;
      unint64_t v43 = v35;
      operator delete(v64);
      unsigned __int8 v36 = v28;
      if (!v27) {
        goto LABEL_39;
      }
LABEL_38:
      CFRelease(v27);
      goto LABEL_39;
    }
    LOBYTE(v28) = 0;
    LOWORD(v29) = 0;
    LODWORD(v30) = 0;
    LODWORD(v31) = 0;
    unint64_t v32 = 0;
    unint64_t v33 = 0;
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    unsigned __int8 v36 = 0;
    unsigned __int16 v37 = 0;
    int v38 = 0;
    int v39 = 0;
    unint64_t v40 = 0;
    unint64_t v41 = 0;
    unint64_t v42 = 0;
    unint64_t v43 = 0;
    if (v64) {
      goto LABEL_37;
    }
    if (v27) {
      goto LABEL_38;
    }
LABEL_39:
    MEMORY[0x1BA9C7760](v63);
    *(v60 - 2) = v58;
    *(v60 - 1) = v57;
    *int v60 = v37 & 0xFF00 | (unint64_t)v36 | *(void *)&v38 & 0xFF0000 | v39 & 0xFF000000 | v40 & 0xFF00000000 | v41 & 0xFF0000000000 | v42 & 0xFF000000000000 | v43 & 0xFF00000000000000;
    int v44 = v62;
    uint64_t v3 = v51;
    if (v59)
    {
      CFRelease(v59);
      CFRelease(v59);
    }
    CFIndex v6 = v61 + 1;
    uint64_t v7 = v60 + 3;
  }
  while (v50 != v61 + 1);
  uint64_t v45 = v47;
  a2 = v49;
  int v46 = *v49;
  if (*v49)
  {
LABEL_42:
    a2[1] = v46;
    operator delete(v46);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
LABEL_43:
  *a2 = v44;
  a2[1] = v45;
  a2[2] = v48;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD1C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,void *__p,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a25);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a25);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_265(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 19;
  strcpy(__p, "Set BandFilter info");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      unint64_t v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      unint64_t v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFIndex v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)__p);
  CFTypeRef v4 = cf;
  if (cf) {
    CFIndex v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    CFIndex v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  *(_WORD *)long long __p = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set BandFilter info completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFIndex v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD1EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRetain(v3);
  }
  unint64_t Count = CFArrayGetCount((CFArrayRef)v3);
  unint64_t v5 = Count;
  if ((Count & 0x8000000000000000) != 0)
  {
    unint64_t v5 = 0;
LABEL_22:
    uint64_t v17 = 0;
    uint64_t v7 = 0;
    unint64_t v18 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (!Count) {
    goto LABEL_22;
  }
  if (Count >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = 8 * Count;
  uint64_t v7 = (char *)operator new(8 * Count);
  bzero(v7, 8 * v5);
  CFIndex v8 = 0;
  CFDictionaryRef v19 = &v7[v6];
  CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4FB9658];
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4FB9538];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v3, v8);
    char v12 = ValueAtIndex;
    if (ValueAtIndex && (CFTypeID v13 = CFGetTypeID(ValueAtIndex), v13 == CFDictionaryGetTypeID()))
    {
      CFRetain(v12);
      CFRetain(v12);
      if (v12) {
        CFTypeID v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        CFTypeID v14 = 0;
      }
      if (v14)
      {
        v20[0] = 0xAAAAAAAAAAAAAAAALL;
        v20[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v20, (const __CFDictionary *)v12);
        unsigned int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v20, v9);
        uint64_t v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v20, v10);
        MEMORY[0x1BA9C7760](v20);
        *(void *)&v7[8 * v8] = Int | (unint64_t)(v16 << 32);
        if (!v12) {
          goto LABEL_7;
        }
LABEL_18:
        CFRelease(v12);
        CFRelease(v12);
        goto LABEL_7;
      }
    }
    else
    {
      char v12 = 0;
      CFTypeID v14 = 0;
    }
    *(void *)&v7[8 * v8] = v14;
    if (v12) {
      goto LABEL_18;
    }
LABEL_7:
    ++v8;
  }
  while (v5 != v8);
  uint64_t v17 = v19;
  unint64_t v5 = (unint64_t)&v7[8 * v5];
  unint64_t v18 = *(void **)a2;
  if (*(void *)a2)
  {
LABEL_23:
    *(void *)(a2 + 8) = v18;
    operator delete(v18);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
LABEL_24:
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 16) = v5;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD2158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_274(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long __p = operator new(0x20uLL);
  long long v13 = xmmword_1B8C31F50;
  strcpy((char *)__p, "Set Scan Freq Band Filter info");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    CFTypeRef v5 = cf;
    if (cf) {
      uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!v6) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v11 = v5;
    if (v5) {
      goto LABEL_13;
    }
LABEL_16:
    CFStringRef v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    CFTypeRef v9 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p);
  CFTypeRef v5 = cf;
  if (cf) {
    uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    goto LABEL_12;
  }
LABEL_11:
  CFIndex v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Set Scan Freq Band Filter info completed", (uint8_t *)&__p, 2u);
  CFTypeRef v5 = cf;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v5);
  CFStringRef v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  CFTypeRef v9 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v9);
}

void sub_1B8BD237C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4coex16QMICommandDriver26getScanFreqBandFilter_syncENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver26getScanFreqBandFilter_syncENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef v21 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFMutableDictionaryRef v22 = 0;
  long long __p = operator new(0x20uLL);
  long long v24 = xmmword_1B8C31F50;
  strcpy((char *)__p, "Get Scan Freq Band Filter info");
  coex::QMICommandDriver::checkError(v4, (uint64_t)a2, (uint64_t)&__p, &v21);
  if (SHIBYTE(v24) < 0)
  {
    operator delete(__p);
    CFMutableDictionaryRef v5 = 0;
    if (v21) {
      uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v7) {
      goto LABEL_28;
    }
  }
  else
  {
    CFMutableDictionaryRef v5 = 0;
    if (v21) {
      uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6) {
      goto LABEL_28;
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v5 = Mutable;
  if (Mutable)
  {
    CFMutableDictionaryRef v22 = Mutable;
    CFMutableDictionaryRef v20 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    CFMutableDictionaryRef v20 = 0;
  }
  uint64_t v28 = 0;
  long long __p = (void *)MEMORY[0x1E4F143A8];
  *(void *)&long long v24 = 1174405120;
  *((void *)&v24 + 1) = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18ScanFreqBandFilterENS_3abm21GetScanFreqBandFilter8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  unint64_t v25 = &__block_descriptor_tmp_543;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v27 = *MEMORY[0x1E4FB96D8];
  uint64_t TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  CFTypeRef v11 = TlvValue;
  if (TlvValue)
  {
    int v12 = v10;
    unint64_t v30 = TlvValue;
    memset(v29, 170, sizeof(v29));
    tlv::parseV<coex::tlv::abm::ScanFreqBandFilter>(&v30, v10, (uint64_t)v29);
    long long v13 = v30;
    if (v30) {
      (*((void (**)(void **, void **))&v24 + 1))(&__p, v29);
    }
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
    if (!v13) {
      ((void (*)(void, uint64_t, tlv *, void))*MEMORY[0x1E4FBA118])(*(unsigned __int16 *)a2, 16, v11, v12);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  CFTypeID v14 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p) = 0;
    _os_log_debug_impl(&dword_1B8B00000, v14, OS_LOG_TYPE_DEBUG, "#D Get Scan Freq Band Filter info completed", (uint8_t *)&__p, 2u);
    CFTypeRef v15 = v21;
    CFTypeRef v19 = v21;
    if (!v21) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_28:
  CFTypeRef v15 = v21;
  CFTypeRef v19 = v21;
  if (v21) {
LABEL_29:
  }
    CFRetain(v15);
LABEL_30:
  if (!v5 || (CFTypeID v16 = CFGetTypeID(v5), v16 != CFDictionaryGetTypeID()))
  {
    CFMutableDictionaryRef v18 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v19, (const void **)&v18);
    CFTypeRef v17 = v19;
    if (!v19) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  CFMutableDictionaryRef v18 = v5;
  CFRetain(v5);
  coex::CommandDriver::Callback::operator()(a1 + 40, &v19, (const void **)&v18);
  CFRelease(v5);
  CFTypeRef v17 = v19;
  if (v19) {
LABEL_35:
  }
    CFRelease(v17);
LABEL_36:
  if (v21) {
    CFRelease(v21);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8BD26CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, const void *a14, const void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,void *__p,uint64_t a28)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v28 + 32));
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a26);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a15);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver23setTimeShareConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 21;
  strcpy(__p, "Set Time share config");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFMutableDictionaryRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFMutableDictionaryRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)__p);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  *(_WORD *)long long __p = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set Time share config completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD2900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver20setWCI2TxAntMap_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 18;
  strcpy(__p, "Set Tx antenna map");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFMutableDictionaryRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFMutableDictionaryRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)__p);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  *(_WORD *)long long __p = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set Tx antenna map completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD2A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver19setAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 16;
  strcpy(__p, "Set Ant blocking");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFMutableDictionaryRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFMutableDictionaryRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)__p);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  *(_WORD *)long long __p = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set Ant blocking completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD2C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver25setClientAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long __p = operator new(0x19uLL);
  long long v13 = xmmword_1B8C34810;
  strcpy((char *)__p, "Set client Ant blocking");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    CFTypeRef v5 = cf;
    if (cf) {
      uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!v6) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v11 = v5;
    if (v5) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    CFTypeRef v9 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p);
  CFTypeRef v5 = cf;
  if (cf) {
    uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    goto LABEL_12;
  }
LABEL_11:
  CFTypeRef v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Set client Ant blocking completed", (uint8_t *)&__p, 2u);
  CFTypeRef v5 = cf;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v5);
  CFTypeRef v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  CFTypeRef v9 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v9);
}

void sub_1B8BD2DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver33setClientAntBlockingExtended_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_1B8C2EF30;
  strcpy((char *)__p, "Set client Ant blocking extended");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    CFTypeRef v5 = cf;
    if (cf) {
      uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!v6) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v11 = v5;
    if (v5) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    CFTypeRef v9 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p);
  CFTypeRef v5 = cf;
  if (cf) {
    uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    goto LABEL_12;
  }
LABEL_11:
  CFTypeRef v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Set client Ant blocking extended completed", (uint8_t *)&__p, 2u);
  CFTypeRef v5 = cf;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v5);
  CFTypeRef v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  CFTypeRef v9 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v9);
}

void sub_1B8BD2F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver30setTriggerAntennaBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long __p = operator new(0x28uLL);
  long long v13 = xmmword_1B8C34820;
  strcpy((char *)__p, "Set trigger antenna blocking params");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    CFTypeRef v5 = cf;
    if (cf) {
      uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!v6) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v11 = v5;
    if (v5) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    CFTypeRef v9 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p);
  CFTypeRef v5 = cf;
  if (cf) {
    uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    goto LABEL_12;
  }
LABEL_11:
  CFTypeRef v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v8, OS_LOG_TYPE_DEBUG, "#D Set triggering antenna blocking completed", (uint8_t *)&__p, 2u);
  CFTypeRef v5 = cf;
  CFTypeRef v11 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v5);
  CFTypeRef v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  CFTypeRef v9 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v9);
}

void sub_1B8BD30F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver11setCC1_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 7;
  strcpy((char *)__p, "Set CC1");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set CC1 completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD3284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver11setCC2_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 7;
  strcpy((char *)__p, "Set CC2");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set CC2 completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD3410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver23setLaaGpioThrottle_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 21;
  strcpy(__p, "Set LAA GPIO throttle");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)__p);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  *(_WORD *)long long __p = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set LAA GPIO throttle completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD359C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver18setGnssParams_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v12 = 15;
  strcpy((char *)__p, "Set Gnss params");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    CFTypeRef v4 = cf;
    if (cf) {
      CFTypeRef v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    }
    else {
      CFTypeRef v5 = 0;
    }
    if (!v5) {
      goto LABEL_11;
    }
LABEL_12:
    CFTypeRef v10 = v4;
    if (v4) {
      goto LABEL_13;
    }
LABEL_16:
    CFTypeRef v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    CFTypeRef v8 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(__p[0]);
  CFTypeRef v4 = cf;
  if (cf) {
    uint64_t v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_12;
  }
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B8B00000, v7, OS_LOG_TYPE_DEBUG, "#D Set Gnss params completed", (uint8_t *)__p, 2u);
  CFTypeRef v4 = cf;
  CFTypeRef v10 = cf;
  if (!cf) {
    goto LABEL_16;
  }
LABEL_13:
  CFRetain(v4);
  CFTypeRef v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_17:
  }
    CFRelease(v8);
}

void sub_1B8BD3728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x1F417DA50](a1 + 8);
}

size_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(coex::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)coex::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    CFTypeRef v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x1F417DD10](a1 + 8);
}

void *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F1266FF0;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_1F1267060;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F1266FF0;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(void *__p)
{
  void *__p = &unk_1F1267060;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12670D0;
  MEMORY[0x1BA9C75B0](a1 + 1);
  return a1;
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1F12670D0;
  MEMORY[0x1BA9C75B0](a1 + 1);

  operator delete(a1);
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B8BD3D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1B8BD3D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<coex::QMICommandDriver>::shared_ptr[abi:ne180100]<coex::QMICommandDriver,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  CFTypeRef v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1267140;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B8BD3E84(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1}::operator() const(coex::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B8BD3EAC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<coex::QMICommandDriver *,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver *)#1},std::allocator<coex::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::QMICommandDriver *,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver *)#1},std::allocator<coex::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coex::QMICommandDriver *,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver *)#1},std::allocator<coex::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1}::operator() const(coex::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 280) > *(_DWORD *)(*a1 + 276)) {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    unsigned int v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    long long v24 = (uint64_t *)v23[1];
    unint64_t v25 = (uint64_t **)(a1 + 4);
    CFTypeRef v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  CFTypeRef v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      CFTypeRef v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        CFTypeRef v15 = (uint64_t *)v11;
      }
      else {
        CFTypeRef v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        CFTypeID v16 = v10;
      }
      else {
        CFTypeID v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        CFTypeRef v15 = (uint64_t *)v11;
        CFTypeRef v10 = (uint64_t *)v11;
      }
      else
      {
        CFTypeRef v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  CFTypeRef v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  CFMutableDictionaryRef v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    CFTypeRef v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        CFTypeRef v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        CFMutableDictionaryRef v20 = (uint64_t **)v21;
        CFTypeRef v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    uint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      unint64_t v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      unint64_t v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      uint64_t v26 = v20;
    }
    if (v29) {
      unint64_t v31 = v28;
    }
    else {
      CFMutableDictionaryRef v20 = v26;
    }
    uint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  long long v24 = (uint64_t *)v19[1];
  unint64_t v32 = a1;
  if (v20 != v7) {
    unint64_t v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    unsigned __int16 v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        int v38 = v37;
        unsigned __int16 v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      unint64_t v41 = v10;
      do
      {
        int v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        unint64_t v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      unint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          uint64_t v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          uint64_t v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      uint64_t v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  uint64_t v7 = (uint64_t **)v6;
LABEL_75:
  unint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  *uint64_t v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  unint64_t v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    unint64_t v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  int v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  int v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    int v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        CFTypeRef v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 276);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 288);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 288) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 288);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 288) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 280);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          CFTypeRef v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        uint64_t v28 = *(_DWORD **)(v27 + 288);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 288) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              unint64_t v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_1B8BD49FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD4A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1B8BD4BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  void v68[4] = v4;
  v68[5] = v4;
  void v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  long long __p = v68;
  uint64_t v71 = 0;
  uint64_t v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    uint64_t v66 = v7;
    CFTypeRef v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    void *v10 = v10;
    v10[1] = v10;
    _OWORD v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        void v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        *int v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *uint64_t v11 = v15;
        void v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    uint64_t v64 = v3;
    int v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    void v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      CFTypeRef v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              uint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              unint64_t v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              unint64_t v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              CFTypeRef v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          CFTypeRef v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      uint64_t *v66 = (uint64_t)v11;
      v66[1] = 0;
      int v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      void *v53 = &unk_1F12671F0;
      void v53[2] = v11;
      v66[1] = (uint64_t)v53;
      void v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      int v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      *int v55 = (uint64_t)&unk_1F1267190;
      void v55[2] = (uint64_t)v66;
      int v56 = (atomic_uint *)v64[1];
      *uint64_t v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            int v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            void v47[2] = v43;
            void *v42 = v47;
            int v49 = (void *)**v17;
            if (v49)
            {
              _DWORD *v17 = v49;
              int v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      unint64_t v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          int v51 = v50;
          unint64_t v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          int v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  unint64_t v57 = (uint64_t **)*v3;
  unint64_t v58 = (uint64_t *)**v3;
  int v59 = (uint64_t *)v58[1];
  int v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        int v59 = (uint64_t *)v59[1];
        int v67 = v59;
        unint64_t v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      int v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      unint64_t v57 = (uint64_t **)*v3;
      int v67 = v59;
      unint64_t v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  CFIndex v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      int v62 = (char *)__p + 16 * v71;
      do
      {
        int v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_1B8BD52A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    long long __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1B8BD5CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTETransportBlockCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BD5E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm32LTETransportBlockCountErrorCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BD5ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9BLERStats10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD5FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD5FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD5FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  coex::convert((__CFDictionary **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD61BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD61D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD61E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BD6264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD62FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD63C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD648C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD64F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD66A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD66BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFTypeRef v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD66D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD673C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD67A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm19LTE2BandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFMutableDictionaryRef cf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = Mutable;
  if (Mutable) {
    CFMutableDictionaryRef cf = Mutable;
  }
  coex::convert((__CFDictionary **)&v9, a2);
  CFTypeRef v6 = v9;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E4FB96C0], v9);
  if (v6) {
    CFRelease(v6);
  }
  coex::convert((__CFDictionary **)&v9, a2 + 2);
  CFTypeRef v7 = v9;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E4FB96A8], v9);
  if (v7) {
    CFRelease(v7);
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BD68A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_1B8BD68BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1B8BD68F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_1B8BD6904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTE2TDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB95B0], *a2, v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9570], a2[1], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9650], a2[2], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9530], a2[3], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB9520], a2[4], v4);
  if (Mutable)
  {
    CFTypeID v6 = CFGetTypeID(Mutable);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFMutableDictionaryRef cf = Mutable;
      CFRetain(Mutable);
      CFTypeRef v7 = Mutable;
    }
    else
    {
      CFTypeRef v7 = 0;
      CFMutableDictionaryRef cf = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
    CFTypeRef v7 = 0;
    CFMutableDictionaryRef cf = 0;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v7);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BD6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_1B8BD6A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD6AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD6ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm13LTE2OffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BD6B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD6CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm33ContinuousTxSubframeDenialsStatusENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  CFTypeRef v4 = (UInt8 *)operator new(8uLL);
  *(void *)CFTypeRef v4 = v3;
  CFDataRef v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8BD6D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD6D84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm30WCI2TxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  CFTypeRef v4 = (UInt8 *)operator new(8uLL);
  *(void *)CFTypeRef v4 = v3;
  CFDataRef v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8BD6E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD6E3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm26TxPowerLimitEnforceSuccessENS_3abm16ConditionSuccess10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  CFTypeRef v4 = (UInt8 *)operator new(8uLL);
  *(void *)CFTypeRef v4 = v3;
  CFDataRef v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1B8BD6EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD6EF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm16ConditionSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD6FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD6FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD7010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void ctu::cf::insert<__CFString const*,__CFError *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BD70B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1B8BD70DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  coex::convert((CFMutableDictionaryRef *)&cf, a2);
  ctu::cf::insert<__CFString const*,__CFDictionary *>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BD713C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  coex::convert((__CFDictionary **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD71A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(v3, kCFNumberLongLongType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BD7220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD7284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD72E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD734C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD73B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD7414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD7478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD74DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD7540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD75A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionarySetValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BD7638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_1B8BD765C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD76C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD7724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD7788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD77EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD7850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  coex::convert((__CFArray **)&v4, a2);
  CFTypeRef v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1B8BD78B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12GetWWANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD7990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD79A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD79D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanID>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanID>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanID>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267B10;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12WLANScanInfoENS_3abm16GetWLANScanState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v12 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeID v6 = Mutable;
  if (Mutable) {
    uint64_t v12 = Mutable;
  }
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E4FB95A0], *a2, v4);
  coex::convert((__CFDictionary **)&v11, a2 + 1);
  CFTypeRef v7 = v11;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v6, (CFTypeRef)*MEMORY[0x1E4FB95F8], v11);
  if (v7) {
    CFRelease(v7);
  }
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E4FB9628], a2[3], v4);
  if (v6)
  {
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFDictionaryGetTypeID())
    {
      CFTypeRef cf = v6;
      CFRetain(v6);
      CFTypeRef v9 = v6;
    }
    else
    {
      CFTypeRef v9 = 0;
      CFTypeRef cf = 0;
    }
    CFRelease(v6);
  }
  else
  {
    CFTypeRef v9 = 0;
    CFTypeRef cf = 0;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v9);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BD7BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD7BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD7BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFAllocatorRef v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BD7C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B8BD7C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANScanState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD7CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD7D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD7D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionHandle>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionHandle>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionHandle>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267B90;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18WLANConnectionInfoENS_3abm16GetWLANConnState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v6 = Mutable;
  if (Mutable)
  {
    CFTypeRef v7 = (unsigned int **)(a2 + 8);
    CFTypeID v8 = (unsigned int **)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
    if (v9 < 0)
    {
      CFTypeID v10 = CFGetTypeID(Mutable);
      if (v10 == CFDictionaryGetTypeID())
      {
        CFMutableDictionaryRef cf = v6;
        CFRetain(v6);
        CFMutableDictionaryRef v11 = v6;
LABEL_28:
        CFRelease(v6);
        goto LABEL_29;
      }
LABEL_27:
      CFMutableDictionaryRef v11 = 0;
      CFMutableDictionaryRef cf = 0;
      if (!v6) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  else
  {
    CFTypeRef v7 = (unsigned int **)(a2 + 8);
    CFTypeID v8 = (unsigned int **)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 16) - *(void *)(a2 + 8);
    if (v9 < 0) {
      goto LABEL_27;
    }
  }
  uint64_t v12 = CFArrayCreateMutable(v4, (unint64_t)v9 >> 3, MEMORY[0x1E4F1D510]);
  uint64_t v13 = *v7;
  for (uint64_t i = *v8; v13 != i; v13 += 2)
  {
    xpc_object_t value = (void *)0xAAAAAAAAAAAAAAAALL;
    coex::convert((__CFDictionary **)&value, v13);
    int v15 = value;
    CFArrayAppendValue(v12, value);
    if (v15) {
      CFRelease(v15);
    }
  }
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E4FB9770], *(_DWORD *)a2, v4);
  uint64_t v16 = (void *)*MEMORY[0x1E4FB9738];
  xpc_object_t value = v16;
  if (v16) {
    CFRetain(v16);
  }
  if (v12)
  {
    CFRetain(v12);
    if (v16) {
      CFDictionaryAddValue(v6, v16, v12);
    }
    CFRelease(v12);
  }
  if (v16) {
    CFRelease(v16);
  }
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E4FB9740], *(_DWORD *)(a2 + 32), v4);
  ctu::cf::insert<__CFString const*,unsigned int>(v6, (CFTypeRef)*MEMORY[0x1E4FB96F0], *(_DWORD *)(a2 + 36), v4);
  if (!v6 || (CFTypeID v17 = CFGetTypeID(v6), v17 != CFDictionaryGetTypeID()))
  {
    CFMutableDictionaryRef v11 = 0;
    CFMutableDictionaryRef cf = 0;
    if (!v12) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  CFMutableDictionaryRef cf = v6;
  CFRetain(v6);
  CFMutableDictionaryRef v11 = v6;
  if (v12) {
LABEL_24:
  }
    CFRelease(v12);
LABEL_25:
  if (v6) {
    goto LABEL_28;
  }
LABEL_29:
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v11);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BD805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  CFAllocatorRef v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFMutableDictionaryRef v6 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFTypeID v8 = va_arg(va3, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va3);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B8BD809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFAllocatorRef v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANConnState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD81EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD8200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTESINRFilteredOutputENS_3abm8SINRRead8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, int *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(v3, kCFNumberFloatType, &valuePtr);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1B8BD82AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRRead8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD8388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD839C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD83C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWWANState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWWANState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWWANState>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267C40;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportBLERStats>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportBLERStats>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportBLERStats>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267C90;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportFailCondition>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportFailCondition>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportFailCondition>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267CE0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportSuccessCondition>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportSuccessCondition>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportSuccessCondition>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267D30;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportTxAntennaState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportTxAntennaState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportTxAntennaState>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267D80;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportNRState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportNRState>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportNRState>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267DD0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWCI2TxAntMap>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWCI2TxAntMap>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ReportWCI2TxAntMap>::clone(uint64_t a1)
{
  size_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)size_t result = &unk_1F1267E20;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B8BD87C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanInfo>::getSize()
{
  return 19;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(_DWORD *)(v3 + 11) = *(_DWORD *)(result + 20);
  *(_DWORD *)(v3 + 15) = *(_DWORD *)(result + 24);
  *a2 = v3 + 19;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 16;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANScanInfo>::clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F1267E70;
  __n128 result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1267EC0;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1267EC0;
  char v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::getSize(uint64_t a1)
{
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    return 10;
  }
  else {
    return ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) | 7) + 3;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 16);
  unint64_t v4 = v3 + 8;
  *(unsigned char *)(v3 + 7) = (*(_DWORD *)(result + 32) - *(_DWORD *)(result + 24)) >> 3;
  CFMutableDictionaryRef v6 = *(char **)(result + 24);
  CFDataRef v5 = *(char **)(result + 32);
  if (v6 != v5)
  {
    unint64_t v7 = v5 - v6 - 8;
    if (v7 < 0x58) {
      goto LABEL_15;
    }
    if (v4 < (unint64_t)&v6[(v7 & 0xFFFFFFFFFFFFFFF8) + 8]
      && (unint64_t)v6 < (v7 & 0xFFFFFFFFFFFFFFF8) + v3 + 16)
    {
      goto LABEL_15;
    }
    uint64_t v9 = (v7 >> 3) + 1;
    uint64_t v10 = 8 * (v9 & 0x3FFFFFFFFFFFFFF8);
    v4 += v10;
    CFMutableDictionaryRef v11 = &v6[v10];
    uint64_t v12 = (long long *)(v6 + 32);
    uint64_t v13 = (_OWORD *)(v3 + 40);
    uint64_t v14 = v9 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *(v12 - 2);
      long long v15 = *(v12 - 1);
      long long v18 = *v12;
      long long v17 = v12[1];
      v12 += 4;
      *(v13 - 2) = v16;
      *(v13 - 1) = v15;
      *uint64_t v13 = v18;
      v13[1] = v17;
      v13 += 4;
      v14 -= 8;
    }
    while (v14);
    CFMutableDictionaryRef v6 = v11;
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)unint64_t v4 = *(_DWORD *)v6;
        *(_DWORD *)(v4 + 4) = *((_DWORD *)v6 + 1);
        v4 += 8;
        v6 += 8;
      }
      while (v6 != v5);
    }
  }
  *(unsigned char *)unint64_t v4 = *(_DWORD *)(result + 48);
  *(unsigned char *)(v4 + 1) = *(_DWORD *)(result + 52);
  *a2 = v4 + 2;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v4 + 2 - (v3 + 3);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WLANConnectionInfo>::clone(uint64_t a1)
{
  char v2 = operator new(0x38uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F1267EC0;
  int v3 = *(_DWORD *)(a1 + 16);
  *((void *)v2 + 3) = 0;
  *((_DWORD *)v2 + 4) = v3;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  CFDataRef v5 = *(unsigned char **)(a1 + 24);
  unint64_t v4 = *(unsigned char **)(a1 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(v4 - v5);
    *((void *)v2 + 3) = v7;
    *((void *)v2 + 4) = v7;
    CFTypeID v8 = &v7[8 * (v6 >> 3)];
    *((void *)v2 + 5) = v8;
    memcpy(v7, v5, v6);
    *((void *)v2 + 4) = v8;
  }
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  return v2;
}

void sub_1B8BD8B14(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12SetWLANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD8C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD8C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD8C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Policy>::clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1267F10;
  *(void *)(result + 9) = *(void *)(a1 + 9);
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::PowerThreshold>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1267F60;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBThreshold>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1267FB0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268000;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxFrameDenialsParameters>::clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268050;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::APTTable>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12680A0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimit>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12680F0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimit>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268140;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LinkPathLossThreshold>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268190;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBFilterAlpha>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12681E0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::FilteredRBThreshold>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268230;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimitTimeout>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268280;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimitTimeout>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12682D0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268320;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RbThresholdForAdvTxNotice>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268370;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTEInstance>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12683C0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CoexTech>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268410;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TechInstance>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268460;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12684B0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCTxFrameDenialsParameters>::clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268500;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCount>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCount>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCount>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F1268550;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCountErrorThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCountErrorThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTETransportBlockCountErrorThreshold>::clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)__n128 result = &unk_1F12685A0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9BLERStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD9504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD9518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD9544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8BLERStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD9620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD9634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD9660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTESINRMetricParameters>::getSize()
{
  return 7;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTESINRMetricParameters>::write(uint64_t a1, uint64_t *a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *a2;
  float result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTESINRMetricParameters>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F12685F0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SINRStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD97C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD97DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD9808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD98E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD98F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD9924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdInPercentage>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdInPercentage>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdInPercentage>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)float result = &unk_1F1268640;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdOutPercentage>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdOutPercentage>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ThresholdOutPercentage>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)float result = &unk_1F1268690;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DeactivationTimerMs>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DeactivationTimerMs>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DeactivationTimerMs>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F12686E0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::StopDeactivationTimerMs>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::StopDeactivationTimerMs>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::StopDeactivationTimerMs>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F1268730;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetLaaParamsReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD9C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD9C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD9C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1268780;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1268780;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  else {
    return 24 * ((v2 - v1 - 24) / 0x18uLL) + 28;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  uint64_t v5 = v3 + 4;
  *(unsigned char *)(v3 + 3) = -85 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3);
  uint64_t v6 = *(void *)(result + 16);
  for (uint64_t i = *(void *)(result + 24); v6 != i; v6 += 24)
  {
    *(_DWORD *)uint64_t v5 = *(_DWORD *)v6;
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(v6 + 4);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(v6 + 8);
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(v6 + 12);
    *(void *)(v5 + 16) = *(void *)(v6 + 16);
    v5 += 24;
  }
  *a2 = v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::BandFilters>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_1F1268780;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v5);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B8BD9EC8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetBandFilterInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BD9FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BD9FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BD9FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F12687D0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F12687D0;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::getSize(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
    return 4;
  }
  else {
    return (*(void *)(a1 + 24) - *(void *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8 | 4;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  int64_t v5 = (char *)(v3 + 4);
  *(unsigned char *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  unint64_t v7 = *(char **)(result + 16);
  uint64_t v6 = *(char **)(result + 24);
  if (v7 != v6)
  {
    unint64_t v8 = v6 - v7 - 8;
    if (v8 < 0x58) {
      goto LABEL_15;
    }
    if (v5 < &v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8] && (unint64_t)v7 < (v8 & 0xFFFFFFFFFFFFFFF8) + v3 + 12) {
      goto LABEL_15;
    }
    uint64_t v10 = (v8 >> 3) + 1;
    uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFF8);
    v5 += v11;
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (long long *)(v7 + 32);
    uint64_t v14 = (_OWORD *)(v3 + 36);
    float result = v10 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *(v13 - 2);
      long long v15 = *(v13 - 1);
      long long v18 = *v13;
      long long v17 = v13[1];
      v13 += 4;
      *(v14 - 2) = v16;
      *(v14 - 1) = v15;
      *uint64_t v14 = v18;
      v14[1] = v17;
      v14 += 4;
      result -= 8;
    }
    while (result);
    unint64_t v7 = v12;
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)int64_t v5 = *(_DWORD *)v7;
        *((_DWORD *)v5 + 1) = *((_DWORD *)v7 + 1);
        v5 += 8;
        v7 += 8;
      }
      while (v7 != v6);
    }
  }
  *a2 = (uint64_t)v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ScanFreqBandFilter>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_1F12687D0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B8BDA268(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDA354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDA368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDA394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18ScanFreqBandFilterENS_3abm21GetScanFreqBandFilter8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0) {
    goto LABEL_10;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (unint64_t)v3 >> 3, MEMORY[0x1E4F1D510]);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  while (v6 != v7)
  {
    coex::convert((__CFDictionary **)&value, v6);
    unint64_t v8 = value;
    CFArrayAppendValue(Mutable, value);
    if (v8) {
      CFRelease(v8);
    }
    v6 += 2;
  }
  if (Mutable)
  {
    CFTypeID v9 = CFGetTypeID(Mutable);
    if (v9 == CFArrayGetTypeID())
    {
      CFMutableDictionaryRef cf = Mutable;
      CFRetain(Mutable);
      uint64_t v10 = Mutable;
    }
    else
    {
      uint64_t v10 = 0;
      CFMutableDictionaryRef cf = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_10:
    uint64_t v10 = 0;
    CFMutableDictionaryRef cf = 0;
  }
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v10);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1B8BDA4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_1B8BDA4E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21GetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDA5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDA600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDA62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(void *a1, char a2)
{
  uint64_t v4 = operator new(0x10uLL);
  int64_t v5 = v4;
  v4[8] = a2;
  *(void *)uint64_t v4 = &unk_1F1268850;
  v4[9] = 0;
  uint64_t v6 = v4 + 9;
  unint64_t v8 = (char *)a1[2];
  unint64_t v7 = a1[3];
  CFTypeID v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(void *)unint64_t v8 = v4;
    uint64_t v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  uint64_t v11 = (char *)a1[1];
  uint64_t v12 = (v8 - v11) >> 3;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v7 - (void)v11;
  if (v14 >> 2 > v13) {
    unint64_t v13 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v16 = (char *)operator new(8 * v15);
    long long v17 = &v16[8 * v12];
    long long v18 = &v16[8 * v15];
    *(void *)long long v17 = v5;
    uint64_t v10 = (uint64_t)(v17 + 8);
    unint64_t v19 = (char *)(v8 - v11);
    if (v8 == v11) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  long long v16 = 0;
  long long v17 = (char *)(8 * v12);
  long long v18 = 0;
  *(void *)(8 * v12) = v5;
  uint64_t v10 = 8 * v12 + 8;
  unint64_t v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    unint64_t v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v11 - v16) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    CFTypeID v9 = &v8[-v22];
    v17 -= v22;
    uint64_t v23 = &v16[8 * v12 - 16];
    uint64_t v24 = (long long *)(v8 - 16);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)uint64_t v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v27 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    CFTypeID v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9) {
    operator delete(v9);
  }
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Enabled>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Enabled>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Enabled>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)float result = &unk_1F1268850;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CallType>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CallType>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 3) = *(void *)(result + 16);
  *a2 = v3 + 11;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CallType>::clone(uint64_t a1)
{
  float result = operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F12688A0;
  *((void *)result + 2) = *(void *)(a1 + 16);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LongDrxCycle>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LongDrxCycle>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LongDrxCycle>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F12688F0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ShortDrxTimer>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ShortDrxTimer>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ShortDrxTimer>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F1268940;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::SleepWakeDurScale>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::SleepWakeDurScale>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::SleepWakeDurScale>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)float result = &unk_1F1268990;
  return result;
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F12689E0;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F12689E0;
  char v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::getSize(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
    return 4;
  }
  else {
    return (*(void *)(a1 + 24) - *(void *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8 | 4;
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  int64_t v5 = (char *)(v3 + 4);
  *(unsigned char *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  unint64_t v7 = *(char **)(result + 16);
  uint64_t v6 = *(char **)(result + 24);
  if (v7 != v6)
  {
    unint64_t v8 = v6 - v7 - 8;
    if (v8 < 0x58) {
      goto LABEL_15;
    }
    if (v5 < &v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8] && (unint64_t)v7 < (v8 & 0xFFFFFFFFFFFFFFF8) + v3 + 12) {
      goto LABEL_15;
    }
    uint64_t v10 = (v8 >> 3) + 1;
    uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFF8);
    v5 += v11;
    uint64_t v12 = &v7[v11];
    unint64_t v13 = (long long *)(v7 + 32);
    uint64_t v14 = (_OWORD *)(v3 + 36);
    float result = v10 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *(v13 - 2);
      long long v15 = *(v13 - 1);
      long long v18 = *v13;
      long long v17 = v13[1];
      v13 += 4;
      *(v14 - 2) = v16;
      *(v14 - 1) = v15;
      *uint64_t v14 = v18;
      v14[1] = v17;
      v14 += 4;
      result -= 8;
    }
    while (result);
    unint64_t v7 = v12;
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_15:
      do
      {
        *(_DWORD *)int64_t v5 = *(_DWORD *)v7;
        *((_DWORD *)v5 + 1) = *((_DWORD *)v7 + 1);
        v5 += 8;
        v7 += 8;
      }
      while (v7 != v6);
    }
  }
  *a2 = (uint64_t)v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TimeShareReqBandInformationSet>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_1F12689E0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    *((void *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B8BDAD08(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm18ConfigTimeShareReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDADF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDAE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDAE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DefaultIdx>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DefaultIdx>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::DefaultIdx>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)float result = &unk_1F1268A30;
  return result;
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1268A80;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1268A80;
  char v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::getSize(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
    return 4;
  }
  else {
    return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 4;
  }
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::write(unint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  int64_t v5 = (unsigned char *)(v3 + 4);
  *(unsigned char *)(v3 + 3) = *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  unint64_t v7 = *(char **)(result + 16);
  uint64_t v6 = *(char **)(result + 24);
  if (v7 != v6)
  {
    uint64_t v8 = v6 - v7;
    if ((unint64_t)(v6 - v7) < 0x20) {
      goto LABEL_11;
    }
    if ((unint64_t)(v3 - (void)v7 + 4) < 0x20) {
      goto LABEL_11;
    }
    v5 += v8 & 0xFFFFFFFFFFFFFFE0;
    CFTypeID v9 = &v7[v8 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v10 = (long long *)(v7 + 16);
    uint64_t v11 = (_OWORD *)(v3 + 20);
    float result = v8 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v12 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *uint64_t v11 = v12;
      v10 += 2;
      v11 += 2;
      result -= 32;
    }
    while (result);
    unint64_t v7 = v9;
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_11:
      do
      {
        char v13 = *v7++;
        *v5++ = v13;
      }
      while (v7 != v6);
    }
  }
  *a2 = (uint64_t)v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntMapInformationSet>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_1F1268A80;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  uint64_t v3 = *(unsigned char **)(a1 + 24);
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    unint64_t v7 = &v6[v5];
    *((void *)v2 + 4) = &v6[v5];
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B8BDB0EC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::EnableMmwTxInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::EnableMmwTxInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::EnableMmwTxInfo>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)float result = &unk_1F1268AD0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetWCI2TxAntMap8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDB25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDB270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDB29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1268B20;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        size_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1268B20;
  uint64_t v2 = __p[2];
  if (v2)
  {
    uint64_t v3 = __p[3];
    uint64_t v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        size_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::getSize(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  if (v2 == v1) {
    return 4;
  }
  unint64_t v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    uint64_t v7 = (v3 >> 5) + 1;
    uint64_t v8 = v7 & 3;
    if ((v7 & 3) == 0) {
      uint64_t v8 = 4;
    }
    uint64_t v9 = v7 - v8;
    uint64_t v5 = v2 + 32 * v9;
    uint64_t v10 = (const double *)(v2 + 72);
    int64x2_t v11 = 0uLL;
    int8x16_t v12 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
    int8x16_t v13 = (int8x16_t)vdupq_n_s64(2uLL);
    int64x2_t v14 = 0uLL;
    do
    {
      long long v15 = v10 - 8;
      float64x2x4_t v17 = vld4q_f64(v15);
      float64x2x4_t v18 = vld4q_f64(v10);
      int64x2_t v11 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v17.val[1], (int64x2_t)v17.val[0]), v12), v13)), v11);
      int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v13, vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v18.val[1], (int64x2_t)v18.val[0]), v12), v13)), v14);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    uint64_t v4 = vaddvq_s64(vaddq_s64(v14, v11));
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 16);
  }
  do
  {
    unint64_t v16 = (*(void *)(v5 + 16) - *(void *)(v5 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
    if (*(void *)(v5 + 16) == *(void *)(v5 + 8)) {
      unint64_t v16 = 2;
    }
    v4 += v16;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

unint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::write(unint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  uint64_t v5 = (unsigned char *)(v3 + 4);
  *(unsigned char *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 5;
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(void *)(result + 24);
  if (v6 == v7)
  {
    uint64_t v8 = (_DWORD *)(v3 + 4);
  }
  else
  {
    do
    {
      *uint64_t v5 = *(unsigned char *)v6;
      uint64_t v8 = v5 + 2;
      v5[1] = (*(_DWORD *)(v6 + 16) - *(_DWORD *)(v6 + 8)) >> 2;
      uint64_t v10 = *(char **)(v6 + 8);
      uint64_t v9 = *(char **)(v6 + 16);
      if (v10 != v9)
      {
        unint64_t v11 = v9 - v10 - 4;
        if (v11 < 0x1C) {
          goto LABEL_15;
        }
        float result = v5 - v10 + 2;
        if (result < 0x20) {
          goto LABEL_15;
        }
        uint64_t v12 = (v11 >> 2) + 1;
        float result = v12 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v8 = (_DWORD *)((char *)v8 + v13);
        int64x2_t v14 = &v10[v13];
        long long v15 = (long long *)(v10 + 16);
        unint64_t v16 = v5 + 18;
        uint64_t v17 = v12 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          _OWORD *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 8;
        }
        while (v17);
        uint64_t v10 = v14;
        if (v12 != result)
        {
LABEL_15:
          do
          {
            int v19 = *(_DWORD *)v10;
            v10 += 4;
            *v8++ = v19;
          }
          while (v10 != v9);
        }
      }
      v6 += 32;
      uint64_t v5 = v8;
    }
    while (v6 != v7);
  }
  *a2 = (uint64_t)v8;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v8 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::AntBlockBandInformationSet>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F1268B20;
  std::vector<coex::tlv::abm::AntBandInfoSet>::vector((void *)v2 + 2, (uint64_t *)(a1 + 16));
  return v2;
}

void sub_1B8BDB634(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<coex::tlv::abm::AntBandInfoSet>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[32 * (v5 >> 5)];
    do
    {
      uint64_t v9 = v3 + v7;
      uint64_t v10 = &v6[v7];
      char v11 = *(unsigned char *)(v3 + v7);
      *(void *)&v6[v7 + 8] = 0;
      char *v10 = v11;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0;
      uint64_t v13 = *(unsigned char **)(v3 + v7 + 8);
      uint64_t v12 = *(unsigned char **)(v3 + v7 + 16);
      int64_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        long long v15 = (char *)operator new(v12 - v13);
        *(void *)&v6[v7 + 8] = v15;
        uint64_t v8 = &v15[4 * (v14 >> 2)];
        *((void *)v10 + 2) = v15;
        *((void *)v10 + 3) = v8;
        memcpy(v15, v13, v14);
        *((void *)v10 + 2) = v8;
      }
      v7 += 32;
    }
    while (v9 + 32 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1B8BDB784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<coex::tlv::abm::AntBandInfoSet>,coex::tlv::abm::AntBandInfoSet*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

char *std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(void *a1, char *a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (uint64_t)&v3[-*a1] >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - (void)v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  char v11 = &v10[32 * v5];
  uint64_t v12 = &v10[32 * v9];
  *((void *)&v26 + 1) = v12;
  *char v11 = *a2;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  uint64_t v13 = (char **)(v11 + 16);
  *((void *)v11 + 3) = 0;
  long long v15 = (unsigned char *)*((void *)a2 + 1);
  int64_t v14 = (unsigned char *)*((void *)a2 + 2);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (char *)operator new(v14 - v15);
    *((void *)v11 + 1) = v17;
    *uint64_t v13 = v17;
    long long v18 = &v17[4 * (v16 >> 2)];
    *((void *)v11 + 3) = v18;
    memcpy(v17, v15, v16);
    *uint64_t v13 = v18;
  }
  int v19 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v12;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = &v11[v20];
      uint64_t v22 = &v3[v20];
      *(v21 - 32) = v3[v20 - 32];
      *((void *)v21 - 2) = 0;
      *((void *)v21 - 1) = 0;
      *(_OWORD *)(v21 - 24) = *(_OWORD *)&v3[v20 - 24];
      *((void *)v21 - 1) = *(void *)&v3[v20 - 8];
      *((void *)v22 - 3) = 0;
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      v20 -= 32;
    }
    while (&v3[v20] != v4);
    uint64_t v3 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    *a1 = &v11[v20];
    *(void *)&long long v26 = v11 + 32;
    *(_OWORD *)(a1 + 1) = v26;
    int v19 = v11 + 32;
    while (v23 != v3)
    {
      uint64_t v24 = (void *)*((void *)v23 - 3);
      if (v24)
      {
        *((void *)v23 - 2) = v24;
        operator delete(v24);
      }
      v23 -= 32;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v19;
}

void sub_1B8BDBA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v2;
  if (*v2)
  {
    *uint64_t v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<coex::tlv::abm::AntBandInfoSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<coex::tlv::abm::AntBandInfoSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 32;
        *(void *)(a1 + 16) = v2 - 32;
        uint64_t v5 = *(void **)(v2 - 24);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDBB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDBBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDBBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1268B70;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1F1268B70;
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = v4 - v3;
  if (v4 != v3)
  {
    if (v5 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v4 - v3);
    uint64_t v7 = 0;
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    *((void *)v2 + 4) = &v6[32 * (v5 >> 5)];
    do
    {
      uint64_t v9 = v3 + v7;
      uint64_t v10 = &v6[v7];
      int v11 = *(_DWORD *)(v3 + v7);
      *(void *)&v6[v7 + 8] = 0;
      *(_DWORD *)uint64_t v10 = v11;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0;
      uint64_t v13 = *(unsigned char **)(v3 + v7 + 8);
      uint64_t v12 = *(unsigned char **)(v3 + v7 + 16);
      size_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if ((v14 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        long long v15 = (char *)operator new(v12 - v13);
        *(void *)&v6[v7 + 8] = v15;
        uint64_t v8 = &v15[v14];
        *((void *)v10 + 2) = v15;
        *((void *)v10 + 3) = &v15[v14];
        memcpy(v15, v13, v14);
        *((void *)v10 + 2) = v8;
      }
      v7 += 32;
    }
    while (v9 + 32 != v4);
    *((void *)v2 + 3) = &v6[v7];
  }
  return v2;
}

void sub_1B8BDBDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11)
{
  uint64_t v13 = (char *)*a10;
  if (*a10)
  {
    size_t v14 = (char *)v11[3];
    long long v15 = *a10;
    if (v14 != v13)
    {
      do
      {
        int64_t v16 = (void *)*((void *)v14 - 3);
        if (v16)
        {
          *((void *)v14 - 2) = v16;
          operator delete(v16);
        }
        v14 -= 32;
      }
      while (v14 != v13);
      long long v15 = *a10;
    }
    v11[3] = v13;
    operator delete(v15);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1268BC0;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 16);
          uint64_t v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              uint64_t v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(void *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            uint64_t v5 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1268BC0;
  uint64_t v2 = __p[2];
  if (v2)
  {
    uint64_t v3 = __p[3];
    uint64_t v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 16);
          uint64_t v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              uint64_t v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(void *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            uint64_t v5 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  uint64_t v3 = 0;
  int8x16_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      if (v6 != v5) {
        break;
      }
      v3 += 10;
      v1 += 40;
      if (v1 == v2) {
        return v3 + 4;
      }
    }
    unint64_t v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      uint64_t v10 = (v7 >> 5) + 1;
      uint64_t v11 = v10 & 3;
      if ((v10 & 3) == 0) {
        uint64_t v11 = 4;
      }
      uint64_t v12 = v10 - v11;
      uint64_t v9 = v6 + 32 * v12;
      uint64_t v13 = (const double *)(v6 + 72);
      int64x2_t v14 = 0uLL;
      int64x2_t v15 = 0uLL;
      do
      {
        int64_t v16 = v13 - 8;
        float64x2x4_t v19 = vld4q_f64(v16);
        float64x2x4_t v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        int64x2_t v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v1 + 16);
    }
    do
    {
      unint64_t v17 = (*(void *)(v9 + 16) - *(void *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(void *)(v9 + 16) == *(void *)(v9 + 8)) {
        unint64_t v17 = 2;
      }
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  uint64_t v5 = (unsigned char *)(v3 + 4);
  *(unsigned char *)(v3 + 3) = -51 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3);
  uint64_t v6 = *(void *)(result + 16);
  for (uint64_t i = *(void *)(result + 24); v6 != i; v6 += 40)
  {
    while (1)
    {
      *(_DWORD *)uint64_t v5 = *(_DWORD *)v6;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(v6 + 4);
      v5[8] = *(unsigned char *)(v6 + 8);
      uint64_t v8 = v5 + 10;
      v5[9] = (*(_DWORD *)(v6 + 24) - *(_DWORD *)(v6 + 16)) >> 5;
      uint64_t v9 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      if (v9 != v10) {
        break;
      }
      v5 += 10;
      v6 += 40;
      if (v6 == i) {
        goto LABEL_2;
      }
    }
    do
    {
      unsigned char *v8 = *(unsigned char *)v9;
      uint64_t v5 = v8 + 2;
      v8[1] = (*(_DWORD *)(v9 + 16) - *(_DWORD *)(v9 + 8)) >> 2;
      float result = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 16);
      if (result != v11)
      {
        unint64_t v12 = v11 - result - 4;
        if (v12 < 0x1C) {
          goto LABEL_18;
        }
        if ((unint64_t)&v8[-result + 2] < 0x20) {
          goto LABEL_18;
        }
        uint64_t v13 = (v12 >> 2) + 1;
        uint64_t v14 = 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
        v5 += v14;
        uint64_t v15 = result + v14;
        int64_t v16 = (long long *)(result + 16);
        unint64_t v17 = v8 + 18;
        uint64_t v18 = v13 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          _OWORD *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        float result = v15;
        if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_18:
          do
          {
            int v20 = *(_DWORD *)result;
            result += 4;
            *(_DWORD *)uint64_t v5 = v20;
            v5 += 4;
          }
          while (result != v11);
        }
      }
      v9 += 32;
      uint64_t v8 = v5;
    }
    while (v9 != v10);
  }
LABEL_2:
  *a2 = (uint64_t)v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSet>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F1268BC0;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__init_with_size[abi:ne180100]<coex::tlv::abm::AntBlockClientInfoSet*,coex::tlv::abm::AntBlockClientInfoSet*>((void *)v2 + 2, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
  return v2;
}

void sub_1B8BDC32C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__init_with_size[abi:ne180100]<coex::tlv::abm::AntBlockClientInfoSet*,coex::tlv::abm::AntBlockClientInfoSet*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x666666666666667) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    float result = operator new(40 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9 / 8];
        void *v10 = *(void *)(a2 + v9);
        *((unsigned char *)v10 + 8) = *(unsigned char *)(a2 + v9 + 8);
        float result = std::vector<coex::tlv::abm::AntBandInfoSet>::vector(&v8[v9 / 8 + 2], (uint64_t *)(a2 + v9 + 16));
        v9 += 40;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1B8BDC41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1B8BDC430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v12)
  {
    do
    {
      uint64_t v15 = *(void *)(v11 - 24);
      if (v15)
      {
        uint64_t v16 = *(void *)(v11 - 16);
        uint64_t v14 = *(void **)(v11 - 24);
        if (v16 != v15)
        {
          do
          {
            unint64_t v17 = *(void **)(v16 - 24);
            if (v17)
            {
              *(void *)(v16 - 16) = v17;
              operator delete(v17);
            }
            v16 -= 32;
          }
          while (v16 != v15);
          uint64_t v14 = *(void **)(v11 - 24);
        }
        *(void *)(v11 - 16) = v15;
        operator delete(v14);
      }
      v11 -= 40;
    }
    while (v11 != v10);
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    char v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = *((void *)v4 - 3);
          if (v7)
          {
            uint64_t v8 = *((void *)v4 - 2);
            uint64_t v6 = (void *)*((void *)v4 - 3);
            if (v8 != v7)
            {
              do
              {
                uint64_t v9 = *(void **)(v8 - 24);
                if (v9)
                {
                  *(void *)(v8 - 16) = v9;
                  operator delete(v9);
                }
                v8 -= 32;
              }
              while (v8 != v7);
              uint64_t v6 = (void *)*((void *)v4 - 3);
            }
            *((void *)v4 - 2) = v7;
            operator delete(v6);
          }
          v4 -= 40;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBlockClientInfoSet&>(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v20 = &v7[40 * v3];
  uint64_t v21 = &v7[40 * v6];
  *(void *)int v20 = *(void *)a2;
  v20[8] = *(unsigned char *)(a2 + 8);
  std::vector<coex::tlv::abm::AntBandInfoSet>::vector((void *)v20 + 2, (uint64_t *)(a2 + 16));
  uint64_t v8 = v20;
  uint64_t v9 = v20 + 40;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v20;
    a1[1] = v9;
    a1[2] = v21;
  }
  else
  {
    do
    {
      uint64_t v12 = *((void *)v11 - 5);
      v11 -= 40;
      char v13 = v11[8];
      *((void *)v8 - 5) = v12;
      v8 -= 40;
      v8[8] = v13;
      *((void *)v8 + 3) = 0;
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 2) = 0;
      *((_OWORD *)v8 + 1) = *((_OWORD *)v11 + 1);
      *((void *)v8 + 4) = *((void *)v11 + 4);
      *((void *)v11 + 2) = 0;
      *((void *)v11 + 3) = 0;
      *((void *)v11 + 4) = 0;
    }
    while (v11 != v10);
    uint64_t v11 = *a1;
    uint64_t v14 = a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = v21;
    while (v14 != v11)
    {
      uint64_t v16 = *((void *)v14 - 3);
      if (v16)
      {
        uint64_t v17 = *((void *)v14 - 2);
        uint64_t v15 = (void *)*((void *)v14 - 3);
        if (v17 != v16)
        {
          do
          {
            uint64_t v18 = *(void **)(v17 - 24);
            if (v18)
            {
              *(void *)(v17 - 16) = v18;
              operator delete(v18);
            }
            v17 -= 32;
          }
          while (v17 != v16);
          uint64_t v15 = (void *)*((void *)v14 - 3);
        }
        *((void *)v14 - 2) = v16;
        operator delete(v15);
      }
      v14 -= 40;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v20 + 40;
}

void sub_1B8BDC740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<coex::tlv::abm::AntBlockClientInfoSet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<coex::tlv::abm::AntBlockClientInfoSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = i - 40;
        *(void *)(a1 + 16) = i - 40;
        uint64_t v5 = *(void *)(i - 24);
        if (v5) {
          break;
        }
        i -= 40;
        if (v4 == v2) {
          goto LABEL_12;
        }
      }
      uint64_t v6 = *(void *)(i - 16);
      uint64_t v7 = *(void **)(i - 24);
      if (v6 != v5) {
        break;
      }
      *(void *)(i - 16) = v5;
      operator delete(v7);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v2) {
        goto LABEL_12;
      }
    }
    do
    {
      uint64_t v8 = *(void **)(v6 - 24);
      if (v8)
      {
        *(void *)(v6 - 16) = v8;
        operator delete(v8);
      }
      v6 -= 32;
    }
    while (v6 != v5);
    uint64_t v9 = *(void **)(i - 24);
    *(void *)(i - 16) = v5;
    operator delete(v9);
  }
LABEL_12:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm23SetClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDC8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDC8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDC928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1F1268C10;
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 16);
          uint64_t v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              uint64_t v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(void *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            uint64_t v5 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1F1268C10;
  uint64_t v2 = __p[2];
  if (v2)
  {
    uint64_t v3 = __p[3];
    uint64_t v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *(void *)(v3 - 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v3 - 16);
          uint64_t v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              uint64_t v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(void *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            uint64_t v5 = *(void **)(v3 - 24);
          }
          *(void *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::getSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 4;
  }
  uint64_t v3 = 0;
  int8x16_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  do
  {
    while (1)
    {
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      if (v6 != v5) {
        break;
      }
      v3 += 10;
      v1 += 40;
      if (v1 == v2) {
        return v3 + 4;
      }
    }
    unint64_t v7 = v5 - v6 - 32;
    if (v7 >= 0x80)
    {
      uint64_t v10 = (v7 >> 5) + 1;
      uint64_t v11 = v10 & 3;
      if ((v10 & 3) == 0) {
        uint64_t v11 = 4;
      }
      uint64_t v12 = v10 - v11;
      uint64_t v9 = v6 + 32 * v12;
      char v13 = (const double *)(v6 + 72);
      int64x2_t v14 = 0uLL;
      int64x2_t v15 = 0uLL;
      do
      {
        uint64_t v16 = v13 - 8;
        float64x2x4_t v19 = vld4q_f64(v16);
        float64x2x4_t v20 = vld4q_f64(v13);
        v19.val[2] = (float64x2_t)vdupq_n_s64(2uLL);
        int64x2_t v14 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v19.val[1], (int64x2_t)v19.val[0]), v4), (int8x16_t)v19.val[2])), v14);
        int64x2_t v15 = vaddq_s64((int64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), (int8x16_t)v19.val[2], vorrq_s8(vandq_s8((int8x16_t)vsubq_s64((int64x2_t)v20.val[1], (int64x2_t)v20.val[0]), v4), (int8x16_t)v19.val[2])), v15);
        v13 += 16;
        v12 -= 4;
      }
      while (v12);
      uint64_t v8 = vaddvq_s64(vaddq_s64(v15, v14));
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(v1 + 16);
    }
    do
    {
      unint64_t v17 = (*(void *)(v9 + 16) - *(void *)(v9 + 8)) & 0xFFFFFFFFFFFFFFFCLL | 2;
      if (*(void *)(v9 + 16) == *(void *)(v9 + 8)) {
        unint64_t v17 = 2;
      }
      v8 += v17;
      v9 += 32;
    }
    while (v9 != v5);
    v3 += v8 + 10;
    v1 += 40;
  }
  while (v1 != v2);
  return v3 + 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 3;
  *a2 = v4;
  uint64_t v5 = (unsigned char *)(v3 + 4);
  *(unsigned char *)(v3 + 3) = -51 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3);
  uint64_t v6 = *(void *)(result + 16);
  for (uint64_t i = *(void *)(result + 24); v6 != i; v6 += 40)
  {
    while (1)
    {
      *(_DWORD *)uint64_t v5 = *(_DWORD *)v6;
      *((_DWORD *)v5 + 1) = *(_DWORD *)(v6 + 4);
      v5[8] = *(unsigned char *)(v6 + 8);
      uint64_t v8 = v5 + 10;
      v5[9] = (*(_DWORD *)(v6 + 24) - *(_DWORD *)(v6 + 16)) >> 5;
      uint64_t v9 = *(void *)(v6 + 16);
      uint64_t v10 = *(void *)(v6 + 24);
      if (v9 != v10) {
        break;
      }
      v5 += 10;
      v6 += 40;
      if (v6 == i) {
        goto LABEL_2;
      }
    }
    do
    {
      unsigned char *v8 = *(unsigned char *)v9;
      uint64_t v5 = v8 + 2;
      v8[1] = (*(_DWORD *)(v9 + 16) - *(_DWORD *)(v9 + 8)) >> 2;
      float result = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 16);
      if (result != v11)
      {
        unint64_t v12 = v11 - result - 4;
        if (v12 < 0x1C) {
          goto LABEL_18;
        }
        if ((unint64_t)&v8[-result + 2] < 0x20) {
          goto LABEL_18;
        }
        uint64_t v13 = (v12 >> 2) + 1;
        uint64_t v14 = 4 * (v13 & 0x7FFFFFFFFFFFFFF8);
        v5 += v14;
        uint64_t v15 = result + v14;
        uint64_t v16 = (long long *)(result + 16);
        unint64_t v17 = v8 + 18;
        uint64_t v18 = v13 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          _OWORD *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 8;
        }
        while (v18);
        float result = v15;
        if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_18:
          do
          {
            int v20 = *(_DWORD *)result;
            result += 4;
            *(_DWORD *)uint64_t v5 = v20;
            v5 += 4;
          }
          while (result != v11);
        }
      }
      v9 += 32;
      uint64_t v8 = v5;
    }
    while (v9 != v10);
  }
LABEL_2:
  *a2 = (uint64_t)v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v5 - v4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientAntBlockInformationSetExtended>::clone(uint64_t a1)
{
  char v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *(void *)char v2 = &unk_1F1268C10;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__init_with_size[abi:ne180100]<coex::tlv::abm::AntBlockClientInfoSet*,coex::tlv::abm::AntBlockClientInfoSet*>((void *)v2 + 2, *(void *)(a1 + 16), *(void *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
  return v2;
}

void sub_1B8BDCDF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientId>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientId>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ClientId>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F1268C60;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Duration>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Duration>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Duration>::clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)float result = &unk_1F1268CB0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm27TriggerClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((uint64_t *)__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B8BDCFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B8BDCFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B8BDD024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::CriticalCarrierId>(void *a1)
{
  uint64_t v2 = operator new(0x10uLL);
  uint64_t v3 = v2;
  v2[8] = 18;
  *(void *)uint64_t v2 = &unk_1F1268D00;
  *((_DWORD *)v2 + 3) = 0;
  uint64_t v4 = v2 + 12;
  uint64_t v6 = (char *)a1[2];
  unint64_t v5 = a1[3];
  unint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)uint64_t v6 = v2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  uint64_t v9 = (char *)a1[1];
  uint64_t v10 = (v6 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = v3;
    uint64_t v8 = (uint64_t)(v15 + 8);
    unint64_t v17 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  uint64_t v15 = (char *)(8 * v10);
  uint64_t v16 = 0;
  *(void *)(8 * v10) = v3;
  uint64_t v8 = 8 * v10 + 8;
  unint64_t v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = &v6[-v20];
    v15 -= v20;
    uint64_t v21 = &v14[8 * v10 - 16];
    uint64_t v22 = (long long *)(v6 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)uint64_t v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    unint64_t v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  a1[2] = v8;
  return v4;
}