uint64_t sub_2229A5E0C(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(void, uint64_t);

  v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    v2 = *(uint64_t (**)(void, uint64_t))(v1 + 8);
    if (v2) {
      return v2(*(void *)(v1 + 264), 1);
    }
  }
  return result;
}

uint64_t sub_2229A5E34(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    v2 = *(uint64_t (**)(void, void))(v1 + 8);
    if (v2) {
      return v2(*(void *)(v1 + 264), 0);
    }
  }
  return result;
}

uint64_t NFDriverRestartDiscovery(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 && !sub_2229C699C(a1, 0, 0, 0, 0, 0, 0))
  {
    v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(4, "%s:%i Failed to stop discovery", "NFDriverRestartDiscovery", 5217);
    }
    dispatch_get_specific(*v10);
    v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446466;
    v14 = "NFDriverRestartDiscovery";
    __int16 v15 = 1024;
    int v16 = 5217;
    v9 = "%{public}s:%i Failed to stop discovery";
    goto LABEL_15;
  }
  uint64_t v4 = 1;
  if (*(unsigned char *)(a1 + 62)) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  if (!sub_2229C699C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), a2 ^ 1, *(unsigned __int8 *)(a1 + 61), v5))
  {
    v6 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7) {
      v7(3, "%s:%i Failed to update discovery", "NFDriverRestartDiscovery", 5228);
    }
    dispatch_get_specific(*v6);
    v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446466;
    v14 = "NFDriverRestartDiscovery";
    __int16 v15 = 1024;
    int v16 = 5228;
    v9 = "%{public}s:%i Failed to update discovery";
LABEL_15:
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
    return 0;
  }
  return v4;
}

void NFDriverSetTemporaryPollingPeriod(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Setting polling period to %u", "NFDriverSetTemporaryPollingPeriod", 9656, a2);
    }
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverSetTemporaryPollingPeriod";
      __int16 v9 = 1024;
      int v10 = 9656;
      __int16 v11 = 1024;
      int v12 = a2;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting polling period to %u", buf, 0x18u);
    }
    *(_DWORD *)(*(void *)(a1 + 24) + 712) = a2;
  }
}

void sub_2229A615C(double a1, double a2, uint64_t a3, uint64_t a4, int a5, unsigned int *a6)
{
  uint64_t v8 = a4;
  uint64_t v420 = *MEMORY[0x263EF8340];
  if (a5 > 122)
  {
    if (a5 > 158)
    {
      if (a5 > 215)
      {
        if (a5 == 216)
        {
          v283 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger) {
            Logger(6, "%s:%i eSE Restricted Event %d %d", "_Callback_NFDriverNotifyGeneral", 2280, *a6, a6[1]);
          }
          dispatch_get_specific(*v283);
          v217 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          unsigned int v285 = *a6;
          unsigned int v286 = a6[1];
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2280;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v285;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v286;
          v209 = "%{public}s:%i eSE Restricted Event %d %d";
LABEL_302:
          v287 = v217;
          os_log_type_t v288 = OS_LOG_TYPE_DEFAULT;
          uint32_t v289 = 30;
LABEL_343:
          _os_log_impl(&dword_2229A5000, v287, v288, v209, buf, v289);
          return;
        }
        if (a5 == 304)
        {
          v83 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v84 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v84) {
            v84(3, "%s:%i MW requested VEN reset.", "_Callback_NFDriverNotifyGeneral", 2259);
          }
          dispatch_get_specific(*v83);
          v85 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2259;
            _os_log_impl(&dword_2229A5000, v85, OS_LOG_TYPE_ERROR, "%{public}s:%i MW requested VEN reset.", buf, 0x12u);
          }
          int v86 = phTmlNfc_IoCtl();
          if (v86 || (int v86 = phTmlNfc_IoCtl()) != 0)
          {
            dispatch_get_specific(*v83);
            v87 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v87) {
              v87(3, "%s:%i Failed to VEN reset !!!!! : 0x%04X", "_Callback_NFDriverNotifyGeneral", 2271, v86);
            }
            dispatch_get_specific(*v83);
            v88 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2271;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v86;
              _os_log_impl(&dword_2229A5000, v88, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to VEN reset !!!!! : 0x%04X", buf, 0x18u);
            }
          }
          else
          {
            dispatch_get_specific(*v83);
            v333 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v333) {
              v333(6, "%s:%i Success!", "_Callback_NFDriverNotifyGeneral", 2269);
            }
            dispatch_get_specific(*v83);
            v334 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2269;
              _os_log_impl(&dword_2229A5000, v334, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Success!", buf, 0x12u);
            }
          }
          phLibNfc_Mgt_VenResetStatus();
          return;
        }
      }
      else
      {
        if (a5 == 159)
        {
          if (*(unsigned char *)(a4 + 57))
          {
            LODWORD(a1) = a6[2];
            float v268 = (double)*(unint64_t *)&a1 * 0.07374;
            v269 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v270 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v270) {
              v270(6, "%s:%i Response time : %f us (%d), PICC Response: 0x%04X, PCD response = 0x%04X", "_Callback_NFDriverNotifyGeneral", 2228, v268, a6[2], a6[1], *a6);
            }
            dispatch_get_specific(*v269);
            v271 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v273 = a6[1];
              unsigned int v272 = a6[2];
              unsigned int v274 = *a6;
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2228;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v268;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v272;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v273;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v274;
              _os_log_impl(&dword_2229A5000, v271, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Response time : %f us (%d), PICC Response: 0x%04X, PCD response = 0x%04X", buf, 0x2Eu);
            }
            v275 = NFSharedSignpostLog();
            if (os_signpost_enabled(v275))
            {
              *(_DWORD *)buf = 134217984;
              *(double *)&uint8_t buf[4] = v268;
              _os_signpost_emit_with_name_impl(&dword_2229A5000, v275, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ANTI_RELAY", "%f", buf, 0xCu);
            }
          }
          return;
        }
        if (a5 == 209)
        {
          v18 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v19) {
            v19(6, "%s:%i ==== NFCC/SE TEMPERATURE CONDITION EXITED ====", "_Callback_NFDriverNotifyGeneral", 2085);
          }
          dispatch_get_specific(*v18);
          v20 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2085;
            _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ==== NFCC/SE TEMPERATURE CONDITION EXITED ====", buf, 0x12u);
          }
          uint64_t v21 = *(void *)(v8 + 24);
          unsigned int v22 = 0xBE24Fu >> sub_2229C8060(*(_DWORD *)(v21 + 604), *(unsigned __int8 *)(v21 + 608));
          v23 = *(NSObject **)(v21 + 552);
          v385[0] = MEMORY[0x263EF8330];
          v385[1] = 0x40000000;
          v385[2] = sub_2229C8128;
          v385[3] = &unk_26463B018;
          v385[4] = v8;
          char v386 = v22 & 1;
          v24 = v385;
          goto LABEL_381;
        }
      }
    }
    else if (a5 > 133)
    {
      if (a5 == 134)
      {
        if (!a6 || !*(void *)a6 || !a6[2])
        {
          v293 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v294 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v294) {
            v294(3, "%s:%i Chipscope buffer empty", "_Callback_NFDriverNotifyGeneral", 2125);
          }
          dispatch_get_specific(*v293);
          v264 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v264, OS_LOG_TYPE_ERROR)) {
            return;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2125;
          v209 = "%{public}s:%i Chipscope buffer empty";
LABEL_330:
          v287 = v264;
          os_log_type_t v288 = OS_LOG_TYPE_ERROR;
LABEL_342:
          uint32_t v289 = 18;
          goto LABEL_343;
        }
        uint64_t v281 = NFDataCreateWithBytes();
        v282 = *(NSObject **)(*(void *)(v8 + 24) + 552);
        v384[0] = MEMORY[0x263EF8330];
        v384[1] = 0x40000000;
        v384[2] = sub_2229C8158;
        v384[3] = &unk_26463B038;
        v384[4] = v8;
        v384[5] = v281;
        v24 = v384;
        goto LABEL_380;
      }
      if (a5 == 155)
      {
        if (a6)
        {
          v28 = (char *)malloc_type_calloc(1uLL, 0x300uLL, 0x1080040DD2123E5uLL);
          v29 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v30) {
            v30(6, "%s:%i Num Tags Added=%d, Detected=%d, Removed=%d, Not Interested=%d", "_Callback_NFDriverNotifyGeneral", 2140, *(unsigned __int8 *)a6, *((unsigned __int8 *)a6 + 32), *((unsigned __int8 *)a6 + 16), *((unsigned __int8 *)a6 + 48));
          }
          dispatch_get_specific(*v29);
          v31 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            int v32 = *(unsigned __int8 *)a6;
            int v33 = *((unsigned __int8 *)a6 + 32);
            int v34 = *((unsigned __int8 *)a6 + 16);
            int v35 = *((unsigned __int8 *)a6 + 48);
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2140;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v32;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v33;
            *(_WORD *)&buf[30] = 1024;
            *(_DWORD *)&buf[32] = v34;
            *(_WORD *)&buf[36] = 1024;
            *(_DWORD *)&buf[38] = v35;
            _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Num Tags Added=%d, Detected=%d, Removed=%d, Not Interested=%d", buf, 0x2Au);
          }
          if (*(unsigned char *)a6)
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            v38 = v28 + 88;
            do
            {
              dispatch_get_specific(*v29);
              v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v39)
              {
                v40 = (unsigned __int8 *)(*((void *)a6 + 1) + v36);
                v39(6, "%s:%i Added Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "_Callback_NFDriverNotifyGeneral", 2150, v37, *v40, v40[1], v40[2], v40[3], v40[4]);
              }
              dispatch_get_specific(*v29);
              v41 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                v42 = (unsigned __int8 *)(*((void *)a6 + 1) + v36);
                int v43 = *v42;
                int v44 = v42[1];
                int v45 = v42[2];
                int v46 = v42[3];
                LODWORD(v42) = v42[4];
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2150;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v37;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v43;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v44;
                *(_WORD *)&buf[36] = 1024;
                *(_DWORD *)&buf[38] = v45;
                *(_WORD *)&buf[42] = 1024;
                *(_DWORD *)&buf[44] = v46;
                *(_WORD *)&buf[48] = 1024;
                *(_DWORD *)&buf[50] = v42;
                _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Added Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
              }
              if (v37 <= 1)
              {
                v47 = (unsigned __int8 *)(*((void *)a6 + 1) + v36);
                *((_DWORD *)v38 - 20) = sub_2229C796C(*v47);
                unsigned char *v38 = 4;
                *((_DWORD *)v38 - 4) = *(_DWORD *)(v47 + 1);
              }
              ++v37;
              v36 += 5;
              v38 += 96;
            }
            while (v37 < *(unsigned __int8 *)a6);
          }
          if (*((unsigned char *)a6 + 32))
          {
            uint64_t v48 = 0;
            unint64_t v49 = 0;
            v50 = v28 + 280;
            do
            {
              dispatch_get_specific(*v29);
              v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v51)
              {
                v52 = (unsigned __int8 *)(*((void *)a6 + 5) + v48);
                v51(6, "%s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "_Callback_NFDriverNotifyGeneral", 2164, v49, *v52, v52[1], v52[2], v52[3], v52[4]);
              }
              dispatch_get_specific(*v29);
              v53 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              {
                v54 = (unsigned __int8 *)(*((void *)a6 + 5) + v48);
                int v55 = *v54;
                int v56 = v54[1];
                int v57 = v54[2];
                int v58 = v54[3];
                LODWORD(v54) = v54[4];
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2164;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v49;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v55;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v56;
                *(_WORD *)&buf[36] = 1024;
                *(_DWORD *)&buf[38] = v57;
                *(_WORD *)&buf[42] = 1024;
                *(_DWORD *)&buf[44] = v58;
                *(_WORD *)&buf[48] = 1024;
                *(_DWORD *)&buf[50] = v54;
                _os_log_impl(&dword_2229A5000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
              }
              if (v49 <= 1)
              {
                v59 = (unsigned __int8 *)(*((void *)a6 + 5) + v48);
                *((_DWORD *)v50 - 20) = sub_2229C796C(*v59);
                unsigned char *v50 = 4;
                *((_DWORD *)v50 - 4) = *(_DWORD *)(v59 + 1);
              }
              ++v49;
              v48 += 5;
              v50 += 96;
            }
            while (v49 < *((unsigned __int8 *)a6 + 32));
          }
          if (*((unsigned char *)a6 + 16))
          {
            uint64_t v60 = 0;
            unint64_t v61 = 0;
            v62 = v28 + 472;
            do
            {
              dispatch_get_specific(*v29);
              v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v63)
              {
                v64 = (unsigned __int8 *)(*((void *)a6 + 3) + v60);
                v63(6, "%s:%i Removed Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "_Callback_NFDriverNotifyGeneral", 2178, v61, *v64, v64[1], v64[2], v64[3], v64[4]);
              }
              dispatch_get_specific(*v29);
              v65 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
              {
                v66 = (unsigned __int8 *)(*((void *)a6 + 3) + v60);
                int v67 = *v66;
                int v68 = v66[1];
                int v69 = v66[2];
                int v70 = v66[3];
                LODWORD(v66) = v66[4];
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2178;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v61;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v67;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v68;
                *(_WORD *)&buf[36] = 1024;
                *(_DWORD *)&buf[38] = v69;
                *(_WORD *)&buf[42] = 1024;
                *(_DWORD *)&buf[44] = v70;
                *(_WORD *)&buf[48] = 1024;
                *(_DWORD *)&buf[50] = v66;
                _os_log_impl(&dword_2229A5000, v65, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Removed Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
              }
              if (v61 <= 1)
              {
                v71 = (unsigned __int8 *)(*((void *)a6 + 3) + v60);
                *((_DWORD *)v62 - 20) = sub_2229C796C(*v71);
                unsigned char *v62 = 4;
                *((_DWORD *)v62 - 4) = *(_DWORD *)(v71 + 1);
              }
              ++v61;
              v60 += 5;
              v62 += 96;
            }
            while (v61 < *((unsigned __int8 *)a6 + 16));
          }
          if (*((unsigned char *)a6 + 48))
          {
            uint64_t v72 = 0;
            unint64_t v73 = 0;
            char v74 = 0;
            v75 = v28 + 584;
            do
            {
              dispatch_get_specific(*v29);
              v76 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v76) {
                v76(6, "%s:%i Not interested Tag (%d) rfTech = %d, rfError = %d, numTagsDet = %d", "_Callback_NFDriverNotifyGeneral", 2190, v73, *(unsigned __int8 *)(*((void *)a6 + 7) + v72), *(unsigned __int8 *)(*((void *)a6 + 7) + v72 + 1), *(unsigned __int8 *)(*((void *)a6 + 7) + v72 + 2));
              }
              dispatch_get_specific(*v29);
              v77 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              {
                v78 = (unsigned __int8 *)(*((void *)a6 + 7) + v72);
                int v79 = *v78;
                int v80 = v78[1];
                LODWORD(v78) = v78[2];
                *(_DWORD *)buf = 136447490;
                *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2190;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v73;
                *(_WORD *)&buf[24] = 1024;
                *(_DWORD *)&buf[26] = v79;
                *(_WORD *)&buf[30] = 1024;
                *(_DWORD *)&buf[32] = v80;
                *(_WORD *)&buf[36] = 1024;
                *(_DWORD *)&buf[38] = v78;
                _os_log_impl(&dword_2229A5000, v77, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not interested Tag (%d) rfTech = %d, rfError = %d, numTagsDet = %d", buf, 0x2Au);
              }
              uint64_t v81 = *((void *)a6 + 7);
              BOOL v82 = *(unsigned char *)(v81 + v72 + 1) != 0;
              if (v73 <= 1) {
                _DWORD *v75 = sub_2229C796C(*(unsigned __int8 *)(v81 + v72));
              }
              v74 |= v82;
              ++v73;
              v72 += 3;
              v75 += 24;
            }
            while (v73 < *((unsigned __int8 *)a6 + 48));
          }
          else
          {
            char v74 = 0;
          }
          v304 = *(NSObject **)(*(void *)(a4 + 24) + 552);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 0x40000000;
          block[2] = sub_2229C81B0;
          block[3] = &unk_26463B058;
          block[4] = a4;
          block[5] = v28;
          char v383 = v74 & 1;
          dispatch_async(v304, block);
        }
        else
        {
          v297 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v298 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v298) {
            v298(3, "%s:%i Multitag structure is missing", "_Callback_NFDriverNotifyGeneral", 2213);
          }
          dispatch_get_specific(*v297);
          v299 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2213;
            _os_log_impl(&dword_2229A5000, v299, OS_LOG_TYPE_ERROR, "%{public}s:%i Multitag structure is missing", buf, 0x12u);
          }
        }
        v305 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v306 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v306) {
          v306(6, "%s:%i Multi tag status notification received", "_Callback_NFDriverNotifyGeneral", 2215);
        }
        dispatch_get_specific(*v305);
        v208 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2215;
        v209 = "%{public}s:%i Multi tag status notification received";
LABEL_341:
        v287 = v208;
        os_log_type_t v288 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_342;
      }
    }
    else
    {
      if (a5 == 123)
      {
        v265 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v266 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v266) {
          v266(5, "%s:%i EMVCO field collision detected", "_Callback_NFDriverNotifyGeneral", 2339);
        }
        dispatch_get_specific(*v265);
        v267 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2339;
          _os_log_impl(&dword_2229A5000, v267, OS_LOG_TYPE_DEFAULT, "%{public}s:%i EMVCO field collision detected", buf, 0x12u);
        }
        v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
        v379[0] = MEMORY[0x263EF8330];
        v379[1] = 0x40000000;
        v379[2] = sub_2229C8264;
        v379[3] = &unk_26463B0B8;
        v379[4] = v8;
        v24 = v379;
        goto LABEL_381;
      }
      if (a5 == 133)
      {
        int v12 = *a6;
        uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v14) {
          v14(3, "%s:%i Generic error : 0x%04X", "_Callback_NFDriverNotifyGeneral", 2008, v12);
        }
        dispatch_get_specific(*v13);
        __int16 v15 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2008;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v12;
          _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Generic error : 0x%04X", buf, 0x18u);
        }
        if (v12 > 226)
        {
          if (v12 <= 234)
          {
            if (v12 == 227)
            {
              dispatch_get_specific(*v13);
              v335 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v335) {
                v335(3, "%s:%i TxLDO OverCurrent Error", "_Callback_NFDriverNotifyGeneral", 2054);
              }
              dispatch_get_specific(*v13);
              v336 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v336, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2054;
                _os_log_impl(&dword_2229A5000, v336, OS_LOG_TYPE_ERROR, "%{public}s:%i TxLDO OverCurrent Error", buf, 0x12u);
              }
              if (*(unsigned char *)(*(void *)(v8 + 24) + 740)) {
                postAnalyticsTxLdoOverCurrentErrorEvent();
              }
              return;
            }
            if (v12 != 234) {
              return;
            }
            v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
            v392[0] = MEMORY[0x263EF8330];
            v392[1] = 0x40000000;
            v392[2] = sub_2229C7ED4;
            v392[3] = &unk_26463AFB8;
            v392[4] = v8;
            int v393 = 234;
            v24 = v392;
LABEL_381:
            dispatch_async(v23, v24);
            return;
          }
          if (v12 == 235)
          {
            int v16 = 1;
            uint64_t v17 = "ADC LOW";
          }
          else
          {
            if (v12 != 250) {
              return;
            }
            int v16 = 2;
            uint64_t v17 = "ADC HIGH";
          }
        }
        else if ((v12 - 204) < 2)
        {
          if (v12 == 205) {
            uint64_t v17 = "ESE LOW";
          }
          else {
            uint64_t v17 = "ESE HIGH";
          }
          if (v12 == 205) {
            int v16 = 6;
          }
          else {
            int v16 = 7;
          }
        }
        else if (v12 == 202)
        {
          int v16 = 5;
          uint64_t v17 = "NFCC HIGH";
        }
        else
        {
          if (v12 != 203) {
            return;
          }
          int v16 = 4;
          uint64_t v17 = "NFCC LOW";
        }
        uint64_t v337 = *(void *)(v8 + 24);
        char v338 = sub_2229C8060(*(_DWORD *)(v337 + 604), *(unsigned __int8 *)(v337 + 608));
        v282 = *(NSObject **)(v337 + 552);
        v389[0] = MEMORY[0x263EF8330];
        v389[1] = 0x40000000;
        v389[2] = sub_2229C7F00;
        v389[3] = &unk_26463AFD8;
        v389[4] = v17;
        v389[5] = v8;
        int v390 = v16;
        char v391 = (0xBE24Fu >> v338) & 1;
        v24 = v389;
LABEL_380:
        v23 = v282;
        goto LABEL_381;
      }
    }
LABEL_303:
    v290 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    v291 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v291) {
      v291(3, "%s:%i Unknown notification: 0x%x", "_Callback_NFDriverNotifyGeneral", 2353, a5);
    }
    dispatch_get_specific(*v290);
    v292 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v292, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2353;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a5;
    v209 = "%{public}s:%i Unknown notification: 0x%x";
    v287 = v292;
    os_log_type_t v288 = OS_LOG_TYPE_ERROR;
    uint32_t v289 = 24;
    goto LABEL_343;
  }
  if (a5 <= 61)
  {
    if (a5 != 15)
    {
      if (a5 == 34)
      {
        v278 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v279 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v279) {
          v279(3, "%s:%i CRC error", "_Callback_NFDriverNotifyGeneral", 1995);
        }
        dispatch_get_specific(*v278);
        v280 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v280, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1995;
          _os_log_impl(&dword_2229A5000, v280, OS_LOG_TYPE_ERROR, "%{public}s:%i CRC error", buf, 0x12u);
        }
        v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
        v394[0] = MEMORY[0x263EF8330];
        v394[1] = 0x40000000;
        v394[2] = sub_2229C7E28;
        v394[3] = &unk_26463AF98;
        v394[4] = v8;
        v24 = v394;
        goto LABEL_381;
      }
      if (a5 == 48)
      {
        v25 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v26) {
          v26(3, "%s:%i ==== HARDWARE RESET ====", "_Callback_NFDriverNotifyGeneral", 1846);
        }
        dispatch_get_specific(*v25);
        v27 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1846;
          _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i ==== HARDWARE RESET ====", buf, 0x12u);
        }
        if (a6) {
          sub_2229C4DE0((int *)a6);
        }
        v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
        v405[0] = MEMORY[0x263EF8330];
        v405[1] = 0x40000000;
        v405[2] = sub_2229C7BB0;
        v405[3] = &unk_26463AEF0;
        v405[4] = v8;
        v24 = v405;
        goto LABEL_381;
      }
      goto LABEL_303;
    }
    v276 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    v277 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v277) {
      v277(3, "%s:%i ==== COMM ERROR ====", "_Callback_NFDriverNotifyGeneral", 1922);
    }
    dispatch_get_specific(*v276);
    v264 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v264, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1922;
    v209 = "%{public}s:%i ==== COMM ERROR ====";
    goto LABEL_330;
  }
  switch(a5)
  {
    case '>':
      if (!a6) {
        return;
      }
      uint64_t v9 = *((void *)a6 + 1);
      if (!v9)
      {
        v300 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v301 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v301) {
          v301(4, "%s:%i Invalid logging value", "_NFDriverLogLevel1Updated", 1125);
        }
        dispatch_get_specific(*v300);
        v264 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_NFDriverLogLevel1Updated";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1125;
          v209 = "%{public}s:%i Invalid logging value";
          goto LABEL_330;
        }
        return;
      }
      if (*(unsigned char *)v9)
      {
        LOWORD(a1) = *(_WORD *)(v9 + 16);
        unint64_t v307 = 0x408F400000000000;
        LOWORD(v307) = *(_WORD *)(v9 + 18);
        double v308 = (double)*(unint64_t *)&a1 / 1000.0 + (double)v307 / 1000000.0;
        int v309 = *(_DWORD *)(v9 + 24);
        if ((v309 - 8) < 6 || v309 == 1)
        {
          v310 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v311 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v311) {
            v311(5, "%s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRegValue=0x%x vpp=%f ALMPhase=%.3f fs=0x%x RMRobustness=0x%04x", "_NFDriverLogLevel1Updated", 1140, v308, *(_DWORD *)(v9 + 24), *(_DWORD *)(v9 + 28), *(unsigned __int16 *)(v9 + 36), *(_DWORD *)(v9 + 44), *(_DWORD *)(v9 + 32), *(unsigned __int8 *)(v9 + 20), *(float *)(v9 + 52), *(float *)(v9 + 56), *(_DWORD *)(v9 + 40), *(_DWORD *)(v9 + 60));
          }
          dispatch_get_specific(*v310);
          v312 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v312, OS_LOG_TYPE_DEFAULT))
          {
            int v313 = *(_DWORD *)(v9 + 24);
            int v314 = *(_DWORD *)(v9 + 28);
            int v315 = *(unsigned __int16 *)(v9 + 36);
            int v316 = *(_DWORD *)(v9 + 32);
            int v317 = *(unsigned __int8 *)(v9 + 20);
            double v318 = *(float *)(v9 + 52);
            double v319 = *(float *)(v9 + 56);
            int v321 = *(_DWORD *)(v9 + 40);
            int v320 = *(_DWORD *)(v9 + 44);
            int v322 = *(_DWORD *)(v9 + 60);
            *(_DWORD *)buf = 136449282;
            *(void *)&uint8_t buf[4] = "_NFDriverLogLevel1Updated";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1140;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = v308;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v313;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v314;
            *(_WORD *)&buf[40] = 1024;
            *(_DWORD *)&buf[42] = v315;
            *(_WORD *)&buf[46] = 1024;
            *(_DWORD *)&buf[48] = v320;
            *(_WORD *)&buf[52] = 1024;
            *(_DWORD *)&buf[54] = v316;
            LOWORD(v411) = 1024;
            *(_DWORD *)((char *)&v411 + 2) = v317;
            WORD3(v411) = 2048;
            *((double *)&v411 + 1) = v318;
            __int16 v412 = 2048;
            *(double *)v413 = v319;
            *(_WORD *)&v413[8] = 1024;
            int v414 = v321;
            __int16 v415 = 1024;
            int v416 = v322;
            v209 = "%{public}s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRe"
                   "gValue=0x%x vpp=%f ALMPhase=%.3f fs=0x%x RMRobustness=0x%04x";
            v287 = v312;
            os_log_type_t v288 = OS_LOG_TYPE_DEFAULT;
            uint32_t v289 = 96;
            goto LABEL_343;
          }
        }
        else
        {
          v350 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v351 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v351) {
            v351(5, "%s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRegValue=0x%x vpp=%f fs=0x%x RMRobustness=0x%04x", "_NFDriverLogLevel1Updated", 1147, v308, *(_DWORD *)(v9 + 24), *(_DWORD *)(v9 + 28), *(unsigned __int16 *)(v9 + 36), *(_DWORD *)(v9 + 44), *(_DWORD *)(v9 + 32), *(unsigned __int8 *)(v9 + 20), *(float *)(v9 + 52), *(_DWORD *)(v9 + 40), *(_DWORD *)(v9 + 60));
          }
          dispatch_get_specific(*v350);
          v352 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v352, OS_LOG_TYPE_DEFAULT))
          {
            int v353 = *(_DWORD *)(v9 + 24);
            int v354 = *(_DWORD *)(v9 + 28);
            int v355 = *(unsigned __int16 *)(v9 + 36);
            int v356 = *(_DWORD *)(v9 + 32);
            int v357 = *(unsigned __int8 *)(v9 + 20);
            double v358 = *(float *)(v9 + 52);
            int v360 = *(_DWORD *)(v9 + 40);
            int v359 = *(_DWORD *)(v9 + 44);
            int v361 = *(_DWORD *)(v9 + 60);
            *(_DWORD *)buf = 136449026;
            *(void *)&uint8_t buf[4] = "_NFDriverLogLevel1Updated";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1147;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = v308;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v353;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v354;
            *(_WORD *)&buf[40] = 1024;
            *(_DWORD *)&buf[42] = v355;
            *(_WORD *)&buf[46] = 1024;
            *(_DWORD *)&buf[48] = v359;
            *(_WORD *)&buf[52] = 1024;
            *(_DWORD *)&buf[54] = v356;
            LOWORD(v411) = 1024;
            *(_DWORD *)((char *)&v411 + 2) = v357;
            WORD3(v411) = 2048;
            *((double *)&v411 + 1) = v358;
            __int16 v412 = 1024;
            *(_DWORD *)v413 = v360;
            *(_WORD *)&v413[4] = 1024;
            *(_DWORD *)&v413[6] = v361;
            v209 = "%{public}s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRe"
                   "gValue=0x%x vpp=%f fs=0x%x RMRobustness=0x%04x";
            v287 = v352;
            os_log_type_t v288 = OS_LOG_TYPE_DEFAULT;
            uint32_t v289 = 86;
            goto LABEL_343;
          }
        }
        return;
      }
      if ((*(unsigned char *)v9 & 2) != 0)
      {
        LOWORD(a1) = *(_WORD *)(v9 + 16);
        unint64_t v339 = 0x408F400000000000;
        LOWORD(v339) = *(_WORD *)(v9 + 18);
        double v340 = (double)*(unint64_t *)&a1 / 1000.0 + (double)v339 / 1000000.0;
        v341 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v342 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v342) {
          v342(5, "%s:%i [L1] %0.6f APCInfo=0x%x tech=0x%x retCode=0x%x vpp=%f ALMPhase=%.3f RMRobustness=0x%04x", "_NFDriverLogLevel1Updated", 1156, v340, *(unsigned __int16 *)(v9 + 20), *(_DWORD *)(v9 + 24), *(unsigned __int16 *)(v9 + 28), *(float *)(v9 + 52), *(float *)(v9 + 56), *(_DWORD *)(v9 + 60));
        }
        dispatch_get_specific(*v341);
        v343 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v343, OS_LOG_TYPE_DEFAULT))
        {
          int v344 = *(unsigned __int16 *)(v9 + 20);
          int v345 = *(_DWORD *)(v9 + 24);
          int v346 = *(unsigned __int16 *)(v9 + 28);
          double v347 = *(float *)(v9 + 52);
          double v348 = *(float *)(v9 + 56);
          int v349 = *(_DWORD *)(v9 + 60);
          *(_DWORD *)buf = 136448258;
          *(void *)&uint8_t buf[4] = "_NFDriverLogLevel1Updated";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1156;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v340;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v344;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v345;
          *(_WORD *)&buf[40] = 1024;
          *(_DWORD *)&buf[42] = v346;
          *(_WORD *)&buf[46] = 2048;
          *(double *)&buf[48] = v347;
          *(_WORD *)&buf[56] = 2048;
          *(double *)&long long v411 = v348;
          WORD4(v411) = 1024;
          *(_DWORD *)((char *)&v411 + 10) = v349;
          v209 = "%{public}s:%i [L1] %0.6f APCInfo=0x%x tech=0x%x retCode=0x%x vpp=%f ALMPhase=%.3f RMRobustness=0x%04x";
          v287 = v343;
          os_log_type_t v288 = OS_LOG_TYPE_DEFAULT;
          uint32_t v289 = 72;
          goto LABEL_343;
        }
        return;
      }
      if (!*(_DWORD *)(v9 + 8)) {
        return;
      }
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      int v11 = 255;
      if (v10 <= 1)
      {
        if (v10 >= 2) {
          goto LABEL_399;
        }
        goto LABEL_398;
      }
      if (v10 == 2)
      {
LABEL_398:
        int v11 = *(_DWORD *)(v9 + 20);
        goto LABEL_399;
      }
      if (v10 == 255)
      {
        v362 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v363 = NFLogGetLogger();
        if (v363)
        {
          v364 = (void (*)(uint64_t, const char *, ...))v363;
          v365 = __error();
          v366 = strerror(*v365);
          v367 = __error();
          v364(3, "%s:%i \"%s\" errno=%d Invalid L1 standby wake event 0x%x", "_NFDriverLogLevel1Updated", 1172, v366, *v367, 255);
        }
        dispatch_get_specific(*v362);
        v368 = NFSharedLogGetLogger();
        int v11 = 255;
        if (os_log_type_enabled(v368, OS_LOG_TYPE_ERROR))
        {
          v369 = __error();
          v370 = strerror(*v369);
          int v371 = *__error();
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "_NFDriverLogLevel1Updated";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1172;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v370;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v371;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 255;
          _os_log_impl(&dword_2229A5000, v368, OS_LOG_TYPE_ERROR, "%{public}s:%i \"%s\" errno=%d Invalid L1 standby wake event 0x%x", buf, 0x28u);
        }
      }
LABEL_399:
      v372 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v373 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v373) {
        v373(5, "%s:%i [L1] StandbyEventType=0x%x RegValue=0x%x", "_NFDriverLogLevel1Updated", 1176, v10, v11);
      }
      dispatch_get_specific(*v372);
      v217 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "_NFDriverLogLevel1Updated";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1176;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v10;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v11;
        v209 = "%{public}s:%i [L1] StandbyEventType=0x%x RegValue=0x%x";
        goto LABEL_302;
      }
      return;
    case '?':
      if (a6)
      {
        v89 = (unsigned __int8 *)*((void *)a6 + 1);
        if (*v89)
        {
          unint64_t v90 = 0;
          uint64_t v91 = 48;
          v92 = (const void **)MEMORY[0x263F8C6C0];
          unint64_t v93 = 136448002;
          do
          {
            uint64_t v94 = *((void *)v89 + 1);
            uint64_t v95 = v94 + v91;
            LOWORD(v93) = *(_WORD *)(v94 + v91 - 48);
            LOWORD(a2) = *(_WORD *)(v94 + v91 - 46);
            double v96 = (double)v93 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            switch(*(_DWORD *)(v94 + v91 - 44))
            {
              case 7:
              case 0xB:
                dispatch_get_specific(*v92);
                v97 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v97) {
                  v97(5, "%s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, ALMPhase=%.3f fs=0x%04x RMRobustness=0x%04x", "_NFDriverLogLevel2Updated", 1193, v96, *(_DWORD *)(v95 - 44), *(_DWORD *)(v94 + v91 - 32), *(unsigned __int16 *)(v94 + v91 - 24), *(float *)(v94 + v91 - 4), *(_DWORD *)(v94 + v91 - 20), *(_DWORD *)(v94 + v91));
                }
                dispatch_get_specific(*v92);
                v98 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                {
                  int v99 = *(_DWORD *)(v95 - 44);
                  int v100 = *(_DWORD *)(v94 + v91 - 32);
                  int v101 = *(unsigned __int16 *)(v94 + v91 - 24);
                  double v102 = *(float *)(v94 + v91 - 4);
                  int v103 = *(_DWORD *)(v94 + v91 - 20);
                  int v104 = *(_DWORD *)(v94 + v91);
                  *(_DWORD *)buf = 136448258;
                  *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1193;
                  *(_WORD *)&buf[18] = 2048;
                  *(double *)&buf[20] = v96;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v99;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v100;
                  *(_WORD *)&buf[40] = 1024;
                  *(_DWORD *)&buf[42] = v101;
                  *(_WORD *)&buf[46] = 2048;
                  *(double *)&buf[48] = v102;
                  *(_WORD *)&buf[56] = 1024;
                  LODWORD(v411) = v103;
                  WORD2(v411) = 1024;
                  *(_DWORD *)((char *)&v411 + 6) = v104;
                  v105 = v98;
                  v106 = "%{public}s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, ALMPhase=%.3f fs=0x%04x RMRobustness=0x%04x";
                  uint32_t v107 = 68;
                  break;
                }
                goto LABEL_125;
              case 0xE:
                if (*(unsigned char *)(v94 + v91 - 12) == 8) {
                  goto LABEL_120;
                }
                goto LABEL_109;
              case 0xF:
                if ((*(unsigned char *)(v94 + v91 - 12) & 0xFE) != 6) {
                  goto LABEL_109;
                }
LABEL_120:
                dispatch_get_specific(*v92);
                v118 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v118) {
                  v118(5, "%s:%i [L2] %0.6f state=0x%02x mod=0x%02x sc=0x%04x, extraInfo=0x%0x RMRobustness=0x%04x", "_NFDriverLogLevel2Updated", 1203, v96, *(_DWORD *)(v95 - 44), *(_DWORD *)(v94 + v91 - 32), *(_DWORD *)(v94 + v91 - 16), *(unsigned __int8 *)(v94 + v91 - 12), *(_DWORD *)(v94 + v91));
                }
                dispatch_get_specific(*v92);
                v119 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_125;
                }
                int v120 = *(_DWORD *)(v95 - 44);
                int v121 = *(_DWORD *)(v94 + v91 - 32);
                int v122 = *(_DWORD *)(v94 + v91 - 16);
                int v123 = *(unsigned __int8 *)(v94 + v91 - 12);
                int v124 = *(_DWORD *)(v94 + v91);
                *(_DWORD *)buf = 136448002;
                *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1203;
                *(_WORD *)&buf[18] = 2048;
                *(double *)&buf[20] = v96;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v120;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v121;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v122;
                *(_WORD *)&buf[46] = 1024;
                *(_DWORD *)&buf[48] = v123;
                *(_WORD *)&buf[52] = 1024;
                *(_DWORD *)&buf[54] = v124;
                v105 = v119;
                v106 = "%{public}s:%i [L2] %0.6f state=0x%02x mod=0x%02x sc=0x%04x, extraInfo=0x%0x RMRobustness=0x%04x";
                uint32_t v107 = 58;
                break;
              default:
LABEL_109:
                dispatch_get_specific(*v92);
                v108 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v108)
                {
                  int v109 = 0;
                  unsigned int v110 = *(_DWORD *)(v95 - 44);
                  if (v110 <= 0xF && ((1 << v110) & 0xE020) != 0) {
                    int v109 = *(unsigned __int8 *)(v94 + v91 - 12);
                  }
                  v108(5, "%s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, extraInfo=0x%0x fs=0x%04x RMRobustness=0x%04x", "_NFDriverLogLevel2Updated", 1216, v96, v110, *(_DWORD *)(v94 + v91 - 32), *(unsigned __int16 *)(v94 + v91 - 24), v109, *(_DWORD *)(v94 + v91 - 20), *(_DWORD *)(v94 + v91));
                }
                dispatch_get_specific(*v92);
                v111 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_125;
                }
                int v112 = 0;
                unsigned int v113 = *(_DWORD *)(v95 - 44);
                if (v113 <= 0xF && ((1 << v113) & 0xE020) != 0) {
                  int v112 = *(unsigned __int8 *)(v94 + v91 - 12);
                }
                int v114 = *(_DWORD *)(v94 + v91 - 32);
                int v115 = *(unsigned __int16 *)(v94 + v91 - 24);
                int v116 = *(_DWORD *)(v94 + v91 - 20);
                int v117 = *(_DWORD *)(v94 + v91);
                *(_DWORD *)buf = 136448258;
                *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1216;
                *(_WORD *)&buf[18] = 2048;
                *(double *)&buf[20] = v96;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v113;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v114;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v115;
                *(_WORD *)&buf[46] = 1024;
                *(_DWORD *)&buf[48] = v112;
                *(_WORD *)&buf[52] = 1024;
                *(_DWORD *)&buf[54] = v116;
                LOWORD(v411) = 1024;
                *(_DWORD *)((char *)&v411 + 2) = v117;
                v105 = v111;
                v106 = "%{public}s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, extraInfo=0x%0x fs=0x%04x RMRobustness=0x%04x";
                uint32_t v107 = 64;
                break;
            }
            _os_log_impl(&dword_2229A5000, v105, OS_LOG_TYPE_DEFAULT, v106, buf, v107);
LABEL_125:
            ++v90;
            v91 += 52;
          }
          while (v90 < *v89);
        }
        if (v89[1])
        {
          uint64_t v125 = 0;
          unint64_t v126 = 0;
          v127 = (const void **)MEMORY[0x263F8C6C0];
          unint64_t v128 = 136447490;
          do
          {
            uint64_t v129 = *((void *)v89 + 2);
            LOWORD(v128) = *(_WORD *)(v129 + v125);
            LOWORD(a2) = *(_WORD *)(v129 + v125 + 2);
            double v130 = (double)v128 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v127);
            v131 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v131) {
              v131(5, "%s:%i [L2] %0.6f command=0x%02x debug=0x%02x rssi=0x%04x", "_NFDriverLogLevel2Updated", 1227, v130, *(unsigned __int8 *)(v129 + v125 + 12), *(unsigned __int8 *)(v129 + v125 + 13), *(unsigned __int16 *)(v129 + v125 + 4));
            }
            dispatch_get_specific(*v127);
            v132 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
            {
              int v133 = *(unsigned __int8 *)(v129 + v125 + 12);
              int v134 = *(unsigned __int8 *)(v129 + v125 + 13);
              int v135 = *(unsigned __int16 *)(v129 + v125 + 4);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1227;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v130;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v133;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v134;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v135;
              _os_log_impl(&dword_2229A5000, v132, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f command=0x%02x debug=0x%02x rssi=0x%04x", buf, 0x2Eu);
            }
            ++v126;
            v125 += 16;
          }
          while (v126 < v89[1]);
        }
        if (v89[2])
        {
          uint64_t v136 = 0;
          unint64_t v137 = 0;
          v138 = (const void **)MEMORY[0x263F8C6C0];
          unint64_t v139 = 136446978;
          do
          {
            uint64_t v140 = *((void *)v89 + 4);
            LOWORD(v139) = *(_WORD *)(v140 + v136);
            LOWORD(a2) = *(_WORD *)(v140 + v136 + 2);
            double v141 = (double)v139 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v138);
            v142 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v142) {
              v142(5, "%s:%i [L2] %0.6f code=0x%04x", "_NFDriverLogLevel2Updated", 1235, v141, *(unsigned __int16 *)(v140 + v136 + 4));
            }
            dispatch_get_specific(*v138);
            v143 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
            {
              int v144 = *(unsigned __int16 *)(v140 + v136 + 4);
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1235;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v141;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v144;
              _os_log_impl(&dword_2229A5000, v143, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f code=0x%04x", buf, 0x22u);
            }
            ++v137;
            v136 += 6;
          }
          while (v137 < v89[2]);
        }
        if (v89[3])
        {
          uint64_t v145 = 0;
          unint64_t v146 = 0;
          v147 = (const void **)MEMORY[0x263F8C6C0];
          unint64_t v148 = 136448002;
          do
          {
            uint64_t v149 = *((void *)v89 + 3);
            LOWORD(v148) = *(_WORD *)(v149 + v145);
            LOWORD(a2) = *(_WORD *)(v149 + v145 + 2);
            double v150 = (double)v148 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v147);
            v151 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v151) {
              v151(5, "%s:%i [L2] %0.6f response=0x%02x status=0x%04x debug=0x%02x vpp=%f ALMPhase=%.3f", "_NFDriverLogLevel2Updated", 1247, v150, *(unsigned __int8 *)(v149 + v145 + 4), *(unsigned __int16 *)(v149 + v145 + 6), *(unsigned __int8 *)(v149 + v145 + 8), *(float *)(v149 + v145 + 12), *(float *)(v149 + v145 + 16));
            }
            dispatch_get_specific(*v147);
            v152 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
            {
              int v153 = *(unsigned __int8 *)(v149 + v145 + 4);
              int v154 = *(unsigned __int16 *)(v149 + v145 + 6);
              int v155 = *(unsigned __int8 *)(v149 + v145 + 8);
              double v156 = *(float *)(v149 + v145 + 12);
              double v157 = *(float *)(v149 + v145 + 16);
              *(_DWORD *)buf = 136448002;
              *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1247;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v150;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v153;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v154;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v155;
              *(_WORD *)&buf[46] = 2048;
              *(double *)&buf[48] = v156;
              *(_WORD *)&buf[56] = 2048;
              *(double *)&long long v411 = v157;
              _os_log_impl(&dword_2229A5000, v152, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f response=0x%02x status=0x%04x debug=0x%02x vpp=%f ALMPhase=%.3f", buf, 0x42u);
            }
            ++v146;
            v145 += 20;
          }
          while (v146 < v89[3]);
        }
        if (v89[4])
        {
          uint64_t v158 = 0;
          unint64_t v159 = 0;
          v160 = (const void **)MEMORY[0x263F8C6C0];
          unint64_t v161 = 136447234;
          do
          {
            uint64_t v162 = *((void *)v89 + 5);
            LOWORD(v161) = *(_WORD *)(v162 + v158);
            LOWORD(a2) = *(_WORD *)(v162 + v158 + 2);
            double v163 = (double)v161 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v160);
            v164 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v164) {
              v164(5, "%s:%i [L2] %0.6f event=0x%02x debug=0x%02x", "_NFDriverLogLevel2Updated", 1256, v163, *(_DWORD *)(v162 + v158 + 4), *(unsigned __int8 *)(v162 + v158 + 8));
            }
            dispatch_get_specific(*v160);
            v165 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
            {
              int v166 = *(_DWORD *)(v162 + v158 + 4);
              int v167 = *(unsigned __int8 *)(v162 + v158 + 8);
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1256;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v163;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v166;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v167;
              _os_log_impl(&dword_2229A5000, v165, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f event=0x%02x debug=0x%02x", buf, 0x28u);
            }
            ++v159;
            v158 += 12;
          }
          while (v159 < v89[4]);
        }
        if (v89[6])
        {
          uint64_t v168 = 0;
          unint64_t v169 = 0;
          v170 = (const void **)MEMORY[0x263F8C6C0];
          do
          {
            uint64_t v171 = *((void *)v89 + 7);
            if (!v171) {
              break;
            }
            dispatch_get_specific(*v170);
            v172 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v172) {
              v172(5, "%s:%i [L2] phase1Abrt=0x%02x phase2Abrt=0x%02x maxRfPulseAbrt=0x%02x successDetect=0x%02x", "_NFDriverLogLevel2Updated", 1265, *(_DWORD *)(v171 + v168), *(_DWORD *)(v171 + v168 + 4), *(_DWORD *)(v171 + v168 + 8), *(_DWORD *)(v171 + v168 + 12));
            }
            dispatch_get_specific(*v170);
            v173 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
            {
              int v174 = *(_DWORD *)(v171 + v168);
              int v175 = *(_DWORD *)(v171 + v168 + 4);
              int v177 = *(_DWORD *)(v171 + v168 + 8);
              int v176 = *(_DWORD *)(v171 + v168 + 12);
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1265;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v174;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = v175;
              *(_WORD *)&buf[30] = 1024;
              *(_DWORD *)&buf[32] = v177;
              *(_WORD *)&buf[36] = 1024;
              *(_DWORD *)&buf[38] = v176;
              _os_log_impl(&dword_2229A5000, v173, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] phase1Abrt=0x%02x phase2Abrt=0x%02x maxRfPulseAbrt=0x%02x successDetect=0x%02x", buf, 0x2Au);
            }
            ++v169;
            v168 += 16;
          }
          while (v169 < v89[6]);
        }
      }
      return;
    case 'E':
      if (a6)
      {
        *(void *)&buf[16] = 0x3800000000;
        *(void *)&v417[16] = 0x2000000000;
        long long v178 = *((_OWORD *)a6 + 1);
        *(_OWORD *)&buf[24] = *(_OWORD *)a6;
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)v417 = 0;
        *(void *)&v417[8] = v417;
        *(_DWORD *)&v417[24] = 0;
        *(_OWORD *)&buf[40] = v178;
        *(void *)&buf[32] = 0;
        *(_DWORD *)&buf[40] = 0;
        size_t v179 = a6[4];
        if (v179)
        {
          v180 = malloc_type_calloc(1uLL, v179, 0xAED65257uLL);
          uint64_t v181 = *(void *)&buf[8];
          *(void *)(*(void *)&buf[8] + 32) = v180;
          if (v180)
          {
            size_t v182 = a6[4];
            *(_DWORD *)(v181 + 40) = v182;
            memcpy(v180, *((const void **)a6 + 1), v182);
          }
          else
          {
            v329 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v330 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v330) {
              v330(3, "%s:%i No memory available", "_Callback_NFDriverNotifyGeneral", 1889);
            }
            dispatch_get_specific(*v329);
            v331 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v331, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v406 = 136446466;
              v407 = "_Callback_NFDriverNotifyGeneral";
              __int16 v408 = 1024;
              int v409 = 1889;
              _os_log_impl(&dword_2229A5000, v331, OS_LOG_TYPE_ERROR, "%{public}s:%i No memory available", v406, 0x12u);
            }
          }
        }
        v332 = *(NSObject **)(*(void *)(v8 + 24) + 552);
        v404[0] = MEMORY[0x263EF8330];
        v404[1] = 0x40000000;
        v404[2] = sub_2229C7C5C;
        v404[3] = &unk_26463AF18;
        v404[6] = v8;
        v404[4] = v417;
        v404[5] = buf;
        dispatch_async(v332, v404);
        _Block_object_dispose(v417, 8);
        _Block_object_dispose(buf, 8);
      }
      return;
    case 'F':
      v183 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v184 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v184) {
        v184(3, "%s:%i ==== PLL UNLOCKED ====", "_Callback_NFDriverNotifyGeneral", 1927);
      }
      dispatch_get_specific(*v183);
      v185 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1927;
        _os_log_impl(&dword_2229A5000, v185, OS_LOG_TYPE_ERROR, "%{public}s:%i ==== PLL UNLOCKED ====", buf, 0x12u);
      }
      v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
      v403[0] = MEMORY[0x263EF8330];
      v403[1] = 0x40000000;
      v403[2] = sub_2229C7DA0;
      v403[3] = &unk_26463AF38;
      v403[4] = v8;
      v24 = v403;
      goto LABEL_381;
    case 'K':
      if (a6)
      {
        memset(buf, 0, 48);
        unint64_t v186 = a6[2];
        uint64_t v376 = *(void *)a6;
        v187 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v188 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v187);
        v189 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v190 = a6[2];
          *(_DWORD *)v417 = 136315906;
          *(void *)&v417[4] = "_NFDriverLogLPCDDebug";
          *(_WORD *)&v417[12] = 1024;
          *(_DWORD *)&v417[14] = 1271;
          *(_WORD *)&v417[18] = 2082;
          *(void *)&v417[20] = "[lpcd]";
          __int16 v418 = 2048;
          uint64_t v419 = v190;
          _os_log_impl(&dword_2229A5000, v189, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v417, 0x26u);
        }
        if (v188) {
          v188(5, "%s:%i %s %lu bytes :", "_NFDriverLogLPCDDebug", 1271, "[lpcd]", a6[2]);
        }
        if (v186)
        {
          uint64_t v191 = 0;
          do
          {
            unint64_t v192 = 0;
            v193 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v191)];
            do
            {
              unint64_t v194 = v192 + 1;
              unint64_t v195 = v192 + 1 + v191;
              int v196 = sprintf(v193, "0x%02X ", *(unsigned __int8 *)(v376 + v191 + v192));
              if (v192 > 6) {
                break;
              }
              v193 += v196;
              ++v192;
            }
            while (v195 < v186);
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v197 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v197, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v417 = 136446210;
              *(void *)&v417[4] = buf;
              _os_log_impl(&dword_2229A5000, v197, OS_LOG_TYPE_DEFAULT, "%{public}s", v417, 0xCu);
            }
            if (v188) {
              v188(5, "%s", (const char *)buf);
            }
            v191 += v194;
          }
          while (v195 < v186);
        }
      }
      return;
    case 'L':
      if (*(unsigned char *)(a4 + 57))
      {
        if (!a6) {
          return;
        }
        LOWORD(a1) = *((_WORD *)a6 + 2);
        double v198 = (double)*(unint64_t *)&a1 / 1000.0;
        if (*a6 == 2)
        {
          double v199 = v198 * -69.25 + 150.2;
          v200 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v201 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v201) {
            v201(6, "%s:%i Got temperature notification SWIO2 / AIO2: %d, 0x%x -> %lf", "_Callback_NFDriverNotifyGeneral", 2242, *a6, *((unsigned __int16 *)a6 + 2), *(void *)&v199);
          }
          dispatch_get_specific(*v200);
          v202 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_360;
          }
          int v203 = *a6;
          int v204 = *((unsigned __int16 *)a6 + 2);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2242;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v203;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v204;
          *(_WORD *)&buf[30] = 2048;
          *(double *)&buf[32] = v199;
          v205 = "%{public}s:%i Got temperature notification SWIO2 / AIO2: %d, 0x%x -> %lf";
        }
        else
        {
          double v199 = 4250.0 / (log(v198 * 2838800000.0 / (v198 * -107400.0 + 108720.0)) + 2.7416) + -273.15;
          v323 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v324 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v324) {
            v324(6, "%s:%i Got temperature notification SWIO1 / AIO3: %d, 0x%x -> %lf", "_Callback_NFDriverNotifyGeneral", 2246, *a6, *((unsigned __int16 *)a6 + 2), *(void *)&v199);
          }
          dispatch_get_specific(*v323);
          v202 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_360;
          }
          int v325 = *a6;
          int v326 = *((unsigned __int16 *)a6 + 2);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2246;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v325;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v326;
          *(_WORD *)&buf[30] = 2048;
          *(double *)&buf[32] = v199;
          v205 = "%{public}s:%i Got temperature notification SWIO1 / AIO3: %d, 0x%x -> %lf";
        }
        _os_log_impl(&dword_2229A5000, v202, OS_LOG_TYPE_DEFAULT, v205, buf, 0x28u);
LABEL_360:
        uint64_t v327 = *(void *)(v8 + 24);
        v328 = *(void (**)(void, double))(v327 + 176);
        if (v328) {
          v328(*(void *)(v327 + 432), v199);
        }
        return;
      }
      v295 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v296 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v296) {
        v296(6, "%s:%i Dropping temperature notification", "_Callback_NFDriverNotifyGeneral", 2254);
      }
      dispatch_get_specific(*v295);
      v208 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2254;
        v209 = "%{public}s:%i Dropping temperature notification";
        goto LABEL_341;
      }
      break;
    case 'N':
      v206 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v207 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v207) {
        v207(6, "%s:%i CW detected!", "_Callback_NFDriverNotifyGeneral", 2286);
      }
      dispatch_get_specific(*v206);
      v208 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2286;
      v209 = "%{public}s:%i CW detected!";
      goto LABEL_341;
    case 'O':
      v210 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v211 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v211) {
        v211(5, "%s:%i LPCD assist completed successfully", "_Callback_NFDriverNotifyGeneral", 2333);
      }
      dispatch_get_specific(*v210);
      v208 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2333;
      v209 = "%{public}s:%i LPCD assist completed successfully";
      goto LABEL_341;
    case 'P':
      if (*(_DWORD *)(a4 + 32)) {
        return;
      }
      v212 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v213 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v213) {
        v213(3, "%s:%i ==== UART ERROR ====", "_Callback_NFDriverNotifyGeneral", 1942);
      }
      dispatch_get_specific(*v212);
      v214 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1942;
        _os_log_impl(&dword_2229A5000, v214, OS_LOG_TYPE_ERROR, "%{public}s:%i ==== UART ERROR ====", buf, 0x12u);
      }
      v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
      v402[0] = MEMORY[0x263EF8330];
      v402[1] = 0x40000000;
      v402[2] = sub_2229C7DC4;
      v402[3] = &unk_26463AF58;
      v402[4] = v8;
      v24 = v402;
      goto LABEL_381;
    case 'R':
      if (!a6) {
        return;
      }
      v215 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v216 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v216) {
        v216(6, "%s:%i LPCD Reference:0x%X, AGC Measured:0x%X", "_Callback_NFDriverNotifyGeneral", 1981, *(unsigned __int16 *)a6, *((unsigned __int16 *)a6 + 1));
      }
      dispatch_get_specific(*v215);
      v217 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v218 = *(unsigned __int16 *)a6;
      int v219 = *((unsigned __int16 *)a6 + 1);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1981;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v218;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v219;
      v209 = "%{public}s:%i LPCD Reference:0x%X, AGC Measured:0x%X";
      goto LABEL_302;
    case 'S':
      if (!a6) {
        return;
      }
      unsigned int v220 = *(unsigned __int16 *)a6;
      if (*(_WORD *)a6)
      {
        __int16 v221 = *((_WORD *)a6 + 1);
        unsigned int v222 = a6[1];
        int v223 = *((unsigned __int16 *)a6 + 4);
        int v224 = *((unsigned __int16 *)a6 + 5);
        v225 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v226 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v226) {
          v226(6, "%s:%i RSSI stats count %d, min=%d, max=%d, average=%d", "_Callback_NFDriverNotifyGeneral", 1964, v220, v224, v223, v222 / v220);
        }
        dispatch_get_specific(*v225);
        v227 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1964;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v220;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v224;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&buf[32] = v223;
          *(_WORD *)&buf[36] = 1024;
          *(_DWORD *)&buf[38] = v222 / v220;
          _os_log_impl(&dword_2229A5000, v227, OS_LOG_TYPE_DEFAULT, "%{public}s:%i RSSI stats count %d, min=%d, max=%d, average=%d", buf, 0x2Au);
        }
        v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
        v395[0] = MEMORY[0x263EF8330];
        v395[1] = 0x40000000;
        v395[2] = sub_2229C7DF0;
        v395[3] = &unk_26463AF78;
        v395[4] = v8;
        __int16 v396 = v220;
        __int16 v397 = v221;
        unsigned int v398 = v222;
        __int16 v399 = v223;
        __int16 v400 = v224;
        int v401 = v222 / v220;
        v24 = v395;
        goto LABEL_381;
      }
      v302 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v303 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v303) {
        v303(6, "%s:%i RSSI stats with no sample", "_Callback_NFDriverNotifyGeneral", 1972);
      }
      dispatch_get_specific(*v302);
      v208 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1972;
        v209 = "%{public}s:%i RSSI stats with no sample";
        goto LABEL_341;
      }
      return;
    case 'V':
      v228 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v229 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v229) {
        v229(3, "%s:%i Flash counter exceeded notification. This is NOT expected unless you live in the 22nd century or later. File a radar and get a new device.", "_Callback_NFDriverNotifyGeneral", 2314);
      }
      dispatch_get_specific(*v228);
      v230 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2314;
        _os_log_impl(&dword_2229A5000, v230, OS_LOG_TYPE_ERROR, "%{public}s:%i Flash counter exceeded notification. This is NOT expected unless you live in the 22nd century or later. File a radar and get a new device.", buf, 0x12u);
      }
      v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
      v380[0] = MEMORY[0x263EF8330];
      v380[1] = 0x40000000;
      v380[2] = sub_2229C8240;
      v380[3] = &unk_26463B098;
      v380[4] = v8;
      v24 = v380;
      goto LABEL_381;
    case 'W':
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v231 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v231) {
        v231(3, "%s:%i TXLDO error!", "_Callback_NFDriverNotifyGeneral", 2290);
      }
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v232 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2290;
        _os_log_impl(&dword_2229A5000, v232, OS_LOG_TYPE_ERROR, "%{public}s:%i TXLDO error!", buf, 0x12u);
      }
      if (a6)
      {
        unint64_t v233 = a6[2];
        if (v233)
        {
          memset(buf, 0, 48);
          uint64_t v377 = *(void *)a6;
          v234 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v235 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v234);
          v236 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v237 = a6[2];
            *(_DWORD *)v417 = 136315906;
            *(void *)&v417[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&v417[12] = 1024;
            *(_DWORD *)&v417[14] = 2294;
            *(_WORD *)&v417[18] = 2082;
            *(void *)&v417[20] = "[TXLDO]";
            __int16 v418 = 2048;
            uint64_t v419 = v237;
            _os_log_impl(&dword_2229A5000, v236, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v417, 0x26u);
          }
          uint64_t v375 = v8;
          if (v235) {
            v235(5, "%s:%i %s %lu bytes :", "_Callback_NFDriverNotifyGeneral", 2294, "[TXLDO]", a6[2]);
          }
          uint64_t v238 = 0;
          do
          {
            unint64_t v239 = 0;
            v240 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v238)];
            do
            {
              unint64_t v241 = v239 + 1;
              unint64_t v242 = v239 + 1 + v238;
              int v243 = sprintf(v240, "0x%02X ", *(unsigned __int8 *)(v377 + v238 + v239));
              if (v239 > 6) {
                break;
              }
              v240 += v243;
              ++v239;
            }
            while (v242 < v233);
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v244 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v417 = 136446210;
              *(void *)&v417[4] = buf;
              _os_log_impl(&dword_2229A5000, v244, OS_LOG_TYPE_DEFAULT, "%{public}s", v417, 0xCu);
            }
            if (v235) {
              v235(5, "%s", (const char *)buf);
            }
            v238 += v241;
          }
          while (v242 < v233);
          uint64_t v8 = v375;
          if (*(unsigned char *)(*(void *)(v375 + 24) + 740)) {
            postAnalyticsTxLdoErrorEvent();
          }
        }
      }
      v23 = *(NSObject **)(*(void *)(v8 + 24) + 552);
      v381[0] = MEMORY[0x263EF8330];
      v381[1] = 0x40000000;
      v381[2] = sub_2229C821C;
      v381[3] = &unk_26463B078;
      v381[4] = v8;
      v24 = v381;
      goto LABEL_381;
    case 'X':
      v245 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v246 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v246) {
        v246(6, "%s:%i ==== GPADC TEMPERATURE CONDITION NORMAL ====", "_Callback_NFDriverNotifyGeneral", 2068);
      }
      dispatch_get_specific(*v245);
      v247 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2068;
        _os_log_impl(&dword_2229A5000, v247, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ==== GPADC TEMPERATURE CONDITION NORMAL ====", buf, 0x12u);
      }
      uint64_t v248 = *(void *)(v8 + 24);
      unsigned int v249 = 0xBE24Fu >> sub_2229C8060(*(_DWORD *)(v248 + 604), *(unsigned __int8 *)(v248 + 608));
      v23 = *(NSObject **)(v248 + 552);
      v387[0] = MEMORY[0x263EF8330];
      v387[1] = 0x40000000;
      v387[2] = sub_2229C8030;
      v387[3] = &unk_26463AFF8;
      v387[4] = v8;
      char v388 = v249 & 1;
      v24 = v387;
      goto LABEL_381;
    case 'Y':
      if (a6)
      {
        unint64_t v250 = a6[2];
        if (v250)
        {
          memset(buf, 0, 48);
          uint64_t v378 = *(void *)a6;
          v251 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v252 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v251);
          v253 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v254 = a6[2];
            *(_DWORD *)v417 = 136315906;
            *(void *)&v417[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&v417[12] = 1024;
            *(_DWORD *)&v417[14] = 2327;
            *(_WORD *)&v417[18] = 2082;
            *(void *)&v417[20] = "[FLC_TRIMMING failed]";
            __int16 v418 = 2048;
            uint64_t v419 = v254;
            _os_log_impl(&dword_2229A5000, v253, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v417, 0x26u);
          }
          if (v252) {
            v252(5, "%s:%i %s %lu bytes :", "_Callback_NFDriverNotifyGeneral", 2327, "[FLC_TRIMMING failed]", a6[2]);
          }
          uint64_t v255 = 0;
          do
          {
            unint64_t v256 = 0;
            v257 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v255)];
            do
            {
              unint64_t v258 = v256 + 1;
              unint64_t v259 = v256 + 1 + v255;
              int v260 = sprintf(v257, "0x%02X ", *(unsigned __int8 *)(v378 + v255 + v256));
              if (v256 > 6) {
                break;
              }
              v257 += v260;
              ++v256;
            }
            while (v259 < v250);
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v261 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v417 = 136446210;
              *(void *)&v417[4] = buf;
              _os_log_impl(&dword_2229A5000, v261, OS_LOG_TYPE_DEFAULT, "%{public}s", v417, 0xCu);
            }
            if (v252) {
              v252(5, "%s", (const char *)buf);
            }
            v255 += v258;
          }
          while (v259 < v250);
          postAnalyticsFlcTrimmingErrorEvent();
        }
      }
      return;
    case 'Z':
      v262 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v263 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v263) {
        v263(3, "%s:%i XTAL start error received", "_Callback_NFDriverNotifyGeneral", 2310);
      }
      dispatch_get_specific(*v262);
      v264 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v264, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2310;
      v209 = "%{public}s:%i XTAL start error received";
      goto LABEL_330;
    default:
      goto LABEL_303;
  }
}

void sub_2229A9E84(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, int a6)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  if (!a6 || a3 == 16 || a3 == 27)
  {
    switch(a3)
    {
      case 2:
        if (a5[6] != 2) {
          goto LABEL_133;
        }
        int v11 = (unsigned __int8 *)*((void *)a5 + 2);
        if (!v11) {
          goto LABEL_133;
        }
        int v12 = *v11;
        int v13 = v11[1];
        v14 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v12 == 3)
        {
          if (v13 == 11)
          {
            if (Logger) {
              Logger(5, "%s:%i ProhibitTimer.Host.Start", "_NFDriverLogHostProhibitTimerSignpost", 2709);
            }
            dispatch_get_specific(*v14);
            int v16 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_133;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2709;
            uint64_t v17 = "%{public}s:%i ProhibitTimer.Host.Start";
          }
          else
          {
            if (Logger) {
              Logger(5, "%s:%i ProhibitTimer.SE.Start", "_NFDriverLogHostProhibitTimerSignpost", 2711);
            }
            dispatch_get_specific(*v14);
            int v16 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_133;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2711;
            uint64_t v17 = "%{public}s:%i ProhibitTimer.SE.Start";
          }
        }
        else if (v13 == 11)
        {
          if (Logger) {
            Logger(5, "%s:%i ProhibitTimer.Host.End", "_NFDriverLogHostProhibitTimerSignpost", 2715);
          }
          dispatch_get_specific(*v14);
          int v16 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_133;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2715;
          uint64_t v17 = "%{public}s:%i ProhibitTimer.Host.End";
        }
        else
        {
          if (Logger) {
            Logger(5, "%s:%i ProhibitTimer.SE.End", "_NFDriverLogHostProhibitTimerSignpost", 2717);
          }
          dispatch_get_specific(*v14);
          int v16 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_133;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2717;
          uint64_t v17 = "%{public}s:%i ProhibitTimer.SE.End";
        }
        _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
LABEL_133:
        if (a5[2]) {
          uint64_t v81 = NFDataCreateWithBytes();
        }
        else {
          uint64_t v81 = 0;
        }
        if (a5[6]) {
          uint64_t v82 = NFDataCreateWithBytes();
        }
        else {
          uint64_t v82 = 0;
        }
        int v43 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 0x40000000;
        block[2] = sub_2229C94FC;
        block[3] = &unk_26463B198;
        block[4] = a2;
        block[5] = v81;
        void block[6] = v82;
        int v33 = block;
        goto LABEL_140;
      case 4:
        v28 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v29) {
          v29(6, "%s:%i SE Restricted Mode Enable! OS_ID = %d", "_Callback_NFDriverNotifySE", 2797, a5[8]);
        }
        dispatch_get_specific(*v28);
        v30 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = a5[8];
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2797;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v31;
          _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE Restricted Mode Enable! OS_ID = %d", buf, 0x18u);
        }
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v124[0] = MEMORY[0x263EF8330];
        v124[1] = 0x40000000;
        v124[2] = sub_2229C955C;
        v124[3] = &unk_26463B1B8;
        v124[4] = a2;
        v124[5] = a4;
        v124[6] = a5;
        int v33 = v124;
        goto LABEL_141;
      case 5:
        kdebug_trace();
        int v34 = NFSharedSignpostLog();
        if (os_signpost_enabled(v34))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_2229A5000, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FIELD_ON", (const char *)&unk_2229F5F33, buf, 2u);
        }
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v128[0] = MEMORY[0x263EF8330];
        v128[1] = 0x40000000;
        v128[2] = sub_2229A5E0C;
        v128[3] = &unk_26463B138;
        v128[4] = a2;
        int v33 = v128;
        goto LABEL_141;
      case 6:
        kdebug_trace();
        int v35 = NFSharedSignpostLog();
        if (os_signpost_enabled(v35))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_2229A5000, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FIELD_OFF", (const char *)&unk_2229F5F33, buf, 2u);
        }
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v127[0] = MEMORY[0x263EF8330];
        v127[1] = 0x40000000;
        v127[2] = sub_2229A5E34;
        v127[3] = &unk_26463B158;
        v127[4] = a2;
        int v33 = v127;
        goto LABEL_141;
      case 10:
      case 11:
      case 15:
        return;
      case 14:
        if (a5[2]) {
          uint64_t v36 = NFDataCreateWithBytes();
        }
        else {
          uint64_t v36 = 0;
        }
        int v43 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v126[0] = MEMORY[0x263EF8330];
        v126[1] = 0x40000000;
        v126[2] = sub_2229C94A4;
        v126[3] = &unk_26463B178;
        v126[4] = a2;
        v126[5] = v36;
        int v33 = v126;
        goto LABEL_140;
      case 16:
        if (a5)
        {
          int v37 = *a5;
          int v38 = *((unsigned __int8 *)a5 + 4);
        }
        else
        {
          int v37 = 0;
          int v38 = 0;
        }
        int v67 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v68 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v68) {
          v68(6, "%s:%i Got SE Removed with status %d", "_Callback_NFDriverNotifySE", 2852, a6);
        }
        dispatch_get_specific(*v67);
        int v69 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2852;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a6;
          _os_log_impl(&dword_2229A5000, v69, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Got SE Removed with status %d", buf, 0x18u);
        }
        uint64_t v70 = *(void *)(*(void *)(a2 + 24) + 512);
        if (v70) {
          uint64_t v71 = *(void *)(v70 + 8);
        }
        else {
          uint64_t v71 = 0;
        }
        dispatch_get_specific(*v67);
        uint64_t v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v71 == a4)
        {
          if (v72) {
            v72(3, "%s:%i Embedded SE removed: reason=0x%02x, other=0x%02x", "_Callback_NFDriverNotifySE", 2857, v37, v38);
          }
          dispatch_get_specific(*v67);
          v75 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2857;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v37;
            *(_WORD *)int v134 = 1024;
            *(_DWORD *)&v134[2] = v38;
            _os_log_impl(&dword_2229A5000, v75, OS_LOG_TYPE_ERROR, "%{public}s:%i Embedded SE removed: reason=0x%02x, other=0x%02x", buf, 0x1Eu);
          }
          int v74 = 1;
        }
        else
        {
          if (v72) {
            v72(3, "%s:%i Unknown SE removed: reason=0x%02x, other=0x%02x", "_Callback_NFDriverNotifySE", 2860, v37, v38);
          }
          dispatch_get_specific(*v67);
          unint64_t v73 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2860;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v37;
            *(_WORD *)int v134 = 1024;
            *(_DWORD *)&v134[2] = v38;
            _os_log_impl(&dword_2229A5000, v73, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown SE removed: reason=0x%02x, other=0x%02x", buf, 0x1Eu);
          }
          int v74 = 0;
        }
        if (a6 > 130)
        {
          if (a6 != 255)
          {
            if (a6 == 131)
            {
              uint64_t v76 = *(void *)(a2 + 24);
              *(unsigned char *)(v76 + 739) = 1;
              if (*(unsigned char *)(v76 + 740))
              {
                sub_2229C5AD0(a2);
                postAnalyticsMainSERemovedEvent();
              }
              return;
            }
            goto LABEL_153;
          }
        }
        else
        {
          if (!a6)
          {
            if (*(unsigned char *)(*(void *)(a2 + 24) + 740))
            {
              sub_2229C5AD0(a2);
              postAnalyticsMainSERemovedEvent();
            }
LABEL_153:
            NFDriverDumpUART(a2);
            int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
            v118[0] = MEMORY[0x263EF8330];
            v118[1] = 0x40000000;
            v118[2] = sub_2229C97E0;
            v118[3] = &unk_26463B238;
            v118[4] = a2;
            int v119 = v74;
            int v120 = v37;
            int v33 = v118;
LABEL_141:
            dispatch_async(v32, v33);
            return;
          }
          if (a6 != 66) {
            goto LABEL_153;
          }
        }
        NFDriverDumpUART(a2);
        NFDriverSimulateCrash(a2, 57005, (uint64_t)"SE Recovery Failed");
        return;
      case 17:
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v122[0] = MEMORY[0x263EF8330];
        v122[1] = 0x40000000;
        v122[2] = sub_2229C9730;
        v122[3] = &unk_26463B1F8;
        v122[4] = a2;
        int v33 = v122;
        goto LABEL_141;
      case 18:
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v121[0] = MEMORY[0x263EF8330];
        v121[1] = 0x40000000;
        v121[2] = sub_2229C9754;
        v121[3] = &unk_26463B218;
        v121[4] = a2;
        int v33 = v121;
        goto LABEL_141;
      case 19:
        v39 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v40) {
          v40(6, "%s:%i NFCEE powered off", "_Callback_NFDriverNotifySE", 2845);
        }
        dispatch_get_specific(*v39);
        v41 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2845;
        uint64_t v21 = "%{public}s:%i NFCEE powered off";
        unsigned int v22 = v41;
        os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_69;
      case 20:
        if (!a5[2]) {
          return;
        }
        uint64_t v42 = NFDataCreateWithBytes();
        if (!v42) {
          return;
        }
        int v43 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v113[0] = MEMORY[0x263EF8330];
        v113[1] = 0x40000000;
        v113[2] = sub_2229C9A24;
        v113[3] = &unk_26463B298;
        v113[4] = a2;
        v113[5] = v42;
        int v33 = v113;
LABEL_140:
        int v32 = v43;
        goto LABEL_141;
      case 21:
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v114[0] = MEMORY[0x263EF8330];
        v114[1] = 0x40000000;
        v114[2] = sub_2229C9A00;
        v114[3] = &unk_26463B278;
        v114[4] = a2;
        int v33 = v114;
        goto LABEL_141;
      case 23:
        int v44 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v45) {
          v45(6, "%s:%i SE Restricted Mode Exit! OS_ID = %d", "_Callback_NFDriverNotifySE", 2813, a5[8]);
        }
        dispatch_get_specific(*v44);
        int v46 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          int v47 = a5[8];
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2813;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v47;
          _os_log_impl(&dword_2229A5000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE Restricted Mode Exit! OS_ID = %d", buf, 0x18u);
        }
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v123[0] = MEMORY[0x263EF8330];
        v123[1] = 0x40000000;
        v123[2] = sub_2229C96D0;
        v123[3] = &unk_26463B1D8;
        v123[4] = a2;
        v123[5] = a5;
        int v33 = v123;
        goto LABEL_141;
      case 24:
        uint64_t v109 = 0;
        unsigned int v110 = &v109;
        uint64_t v111 = 0x2000000000;
        int v112 = 0;
        switch(*a5)
        {
          case 1:
            int v48 = 1;
            goto LABEL_144;
          case 2:
          case 4:
          case 5:
            int v48 = 2;
            goto LABEL_144;
          case 3:
            if ((*(unsigned char *)(*(void *)(a2 + 24) + 676) & 8) != 0) {
              int v48 = 32;
            }
            else {
              int v48 = 4;
            }
LABEL_144:
            int v112 = v48;
            break;
          case 6:
            v77 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v78) {
              v78(6, "%s:%i unknown express mode type (%d)", "_Callback_NFDriverNotifySE", 3037, *a5);
            }
            dispatch_get_specific(*v77);
            int v79 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              int v80 = *a5;
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3037;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v80;
              _os_log_impl(&dword_2229A5000, v79, OS_LOG_TYPE_DEFAULT, "%{public}s:%i unknown express mode type (%d)", buf, 0x18u);
            }
            *((_DWORD *)v110 + 6) = 0;
            break;
          default:
            break;
        }
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3800000000;
        uint64_t v105 = 0;
        v106 = &v105;
        uint64_t v107 = 0x2000000000;
        int v108 = 0;
        *(_OWORD *)int v134 = *(_OWORD *)(a5 + 2);
        *(_OWORD *)&v134[16] = *(_OWORD *)(a5 + 6);
        *(void *)&v134[8] = 0;
        *(_DWORD *)&v134[16] = 0;
        size_t v83 = a5[6];
        if (v83)
        {
          v84 = malloc_type_calloc(1uLL, v83, 0xB6650EDDuLL);
          uint64_t v85 = *(void *)&buf[8];
          *(void *)(*(void *)&buf[8] + 32) = v84;
          if (v84)
          {
            size_t v86 = a5[6];
            *(_DWORD *)(v85 + 40) = v86;
            memcpy(v84, *((const void **)a5 + 2), v86);
          }
          else
          {
            v87 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v88 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v88) {
              v88(3, "%s:%i No memory available", "_Callback_NFDriverNotifySE", 3064);
            }
            dispatch_get_specific(*v87);
            v89 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v129 = 136446466;
              double v130 = "_Callback_NFDriverNotifySE";
              __int16 v131 = 1024;
              int v132 = 3064;
              _os_log_impl(&dword_2229A5000, v89, OS_LOG_TYPE_ERROR, "%{public}s:%i No memory available", v129, 0x12u);
            }
          }
        }
        uint64_t v90 = *(void *)&buf[8];
        uint64_t v91 = v106;
        int v92 = v106[3] & 0xFE | (*(unsigned __int8 *)(*(void *)&buf[8] + 24) >> 1) & 1;
        *((unsigned char *)v106 + 24) = v92;
        unsigned int v93 = v92 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(v90 + 24) >> 2) & 1));
        *((unsigned char *)v91 + 24) = v93;
        unsigned int v94 = v93 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v90 + 24) >> 3) & 1));
        *((unsigned char *)v91 + 24) = v94;
        LOBYTE(v94) = v94 & 0xF7 | (8 * (*(unsigned char *)(v90 + 24) & 1));
        *((unsigned char *)v91 + 24) = v94;
        *((unsigned char *)v91 + 24) = v94 & 0xEF | (*(unsigned char *)(v90 + 24) >> 3) & 0x10;
        *((_WORD *)v91 + 13) = *(_WORD *)(v90 + 48);
        uint64_t v95 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v104[0] = MEMORY[0x263EF8330];
        v104[1] = 0x40000000;
        v104[2] = sub_2229C9A84;
        v104[3] = &unk_26463B2C0;
        v104[4] = &v109;
        v104[5] = &v105;
        v104[6] = buf;
        v104[7] = a2;
        dispatch_async(v95, v104);
        _Block_object_dispose(&v105, 8);
        _Block_object_dispose(buf, 8);
        _Block_object_dispose(&v109, 8);
        return;
      case 25:
        int v49 = *a5;
        int v50 = *((unsigned __int8 *)a5 + 4);
        LOWORD(v109) = *(_WORD *)((char *)a5 + 5);
        BYTE2(v109) = *((unsigned char *)a5 + 7);
        if (v49 != 255)
        {
          int v62 = a5[2];
          int v61 = a5[3];
          if (v62 == 1) {
            int v63 = 2;
          }
          else {
            int v63 = v62 == 0;
          }
          v64 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v65) {
            v65(6, "%s:%i SE reader mode event : {se=0x%x, startEnd=%d, poll=0x%x, protocol=0x%x}", "_Callback_NFDriverNotifySE", 3105, v50, v49, v62, v61);
          }
          dispatch_get_specific(*v64);
          v66 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136447490;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3105;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v50;
            *(_WORD *)int v134 = 1024;
            *(_DWORD *)&v134[2] = v49;
            *(_WORD *)&v134[6] = 1024;
            *(_DWORD *)&v134[8] = v62;
            *(_WORD *)&v134[12] = 1024;
            *(_DWORD *)&v134[14] = v61;
            _os_log_impl(&dword_2229A5000, v66, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE reader mode event : {se=0x%x, startEnd=%d, poll=0x%x, protocol=0x%x}", buf, 0x2Au);
          }
          int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
          v96[0] = MEMORY[0x263EF8330];
          v96[1] = 0x40000000;
          v96[2] = sub_2229C9B08;
          v96[3] = &unk_26463B2E0;
          v96[4] = a2;
          int v97 = v49;
          char v98 = v50;
          __int16 v99 = v109;
          char v100 = BYTE2(v109);
          int v101 = v62;
          int v102 = v61;
          int v103 = v63;
          int v33 = v96;
          goto LABEL_141;
        }
        v51 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v52) {
          v52(3, "%s:%i Error : invalid reader event", "_Callback_NFDriverNotifySE", 3099);
        }
        dispatch_get_specific(*v51);
        v53 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3099;
        uint64_t v21 = "%{public}s:%i Error : invalid reader event";
LABEL_68:
        unsigned int v22 = v53;
        os_log_type_t v23 = OS_LOG_TYPE_ERROR;
LABEL_69:
        uint32_t v24 = 18;
        goto LABEL_70;
      case 27:
        unsigned int v54 = *a5;
        int v55 = *((unsigned __int8 *)a5 + 4);
        int v56 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v57) {
          v57(3, "%s:%i OS %d removed for reason 0x%x", "_Callback_NFDriverNotifySE", 2920, v54, v55);
        }
        dispatch_get_specific(*v56);
        int v58 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2920;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v54;
          *(_WORD *)int v134 = 1024;
          *(_DWORD *)&v134[2] = v55;
          _os_log_impl(&dword_2229A5000, v58, OS_LOG_TYPE_ERROR, "%{public}s:%i OS %d removed for reason 0x%x", buf, 0x1Eu);
        }
        if (v54 > 2) {
          return;
        }
        int v32 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        v115[0] = MEMORY[0x263EF8330];
        v115[1] = 0x40000000;
        v115[2] = sub_2229C99D0;
        v115[3] = &unk_26463B258;
        v115[4] = a2;
        unsigned int v116 = v54;
        char v117 = v55;
        int v33 = v115;
        goto LABEL_141;
      case 28:
        v59 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v60 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v60) {
          v60(3, "%s:%i SMB Tx Blocked!", "_Callback_NFDriverNotifySE", 2943);
        }
        dispatch_get_specific(*v59);
        v53 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2943;
        uint64_t v21 = "%{public}s:%i SMB Tx Blocked!";
        goto LABEL_68;
      default:
        v25 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v26) {
          v26(5, "%s:%i Unexpected event: %x", "_Callback_NFDriverNotifySE", 3123, a3);
        }
        dispatch_get_specific(*v25);
        v27 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3123;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        uint64_t v21 = "%{public}s:%i Unexpected event: %x";
        unsigned int v22 = v27;
        os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
        uint32_t v24 = 24;
        goto LABEL_70;
    }
  }
  v18 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v19) {
    v19(5, "%s:%i status=0x%04X for event %d", "_Callback_NFDriverNotifySE", 2727, a6, a3);
  }
  dispatch_get_specific(*v18);
  v20 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifySE";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2727;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a6;
    *(_WORD *)int v134 = 1024;
    *(_DWORD *)&v134[2] = a3;
    uint64_t v21 = "%{public}s:%i status=0x%04X for event %d";
    unsigned int v22 = v20;
    os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
    uint32_t v24 = 30;
LABEL_70:
    _os_log_impl(&dword_2229A5000, v22, v23, v21, buf, v24);
  }
}

BOOL NFDriverSetConfiguration(uint64_t a1, unsigned __int8 *a2, unint64_t *a3)
{
  uint64_t v4 = a1;
  uint64_t v133 = *MEMORY[0x263EF8340];
  int v5 = *a2;
  unsigned int v6 = *((_DWORD *)a2 + 1);
  int v7 = a2[8];
  unsigned __int8 v8 = a2[16];
  int v110 = 0;
  uint64_t v109 = 0;
  int v108 = 0;
  unint64_t v107 = 0;
  if (a3)
  {
    unint64_t v9 = *a3;
    unint64_t v107 = v9;
    int v108 = *((_DWORD *)a3 + 2);
    unint64_t v10 = HIDWORD(v9);
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v9) = 0;
  }
  int v12 = v9 == 2 || v10 == 2;
  if (!*(unsigned char *)(a1 + 57))
  {
    char v19 = v12;
    v20 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d", "NFDriverSetConfiguration", 5024, v5 & 1, v6, v7 & 1, v9, v10);
    }
    dispatch_get_specific(*v20);
    unsigned int v22 = NFSharedLogGetLogger();
    int v23 = v5 & 1;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447746;
      int v112 = "NFDriverSetConfiguration";
      __int16 v113 = 1024;
      int v114 = 5024;
      __int16 v115 = 1024;
      int v116 = v23;
      __int16 v117 = 1024;
      unsigned int v118 = v6;
      __int16 v119 = 1024;
      int v120 = v7 & 1;
      __int16 v121 = 1024;
      int v122 = v9;
      __int16 v123 = 1024;
      int v124 = v10;
      _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d", buf, 0x30u);
    }
    if (v23) {
      char v39 = 1;
    }
    else {
      char v39 = v19;
    }
    if (v39 & 1) != 0 || (v8 & 1) != 0 || v6 || (v7)
    {
      dispatch_get_specific(*v20);
      v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v40) {
        v40(3, "%s:%i Unable to do any RF operations. Returning false.", "NFDriverSetConfiguration", 5027);
      }
      dispatch_get_specific(*v20);
      int v16 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        int v112 = "NFDriverSetConfiguration";
        __int16 v113 = 1024;
        int v114 = 5027;
        v18 = "%{public}s:%i Unable to do any RF operations. Returning false.";
        goto LABEL_46;
      }
      return result;
    }
    *(_DWORD *)(a1 + 44) = *(_DWORD *)a3;
    return 1;
  }
  if (v12)
  {
    unsigned int v13 = *((_DWORD *)a2 + 3);
    if (!v13)
    {
      v14 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v15) {
        v15(3, "%s:%i Missing CE interface type", "NFDriverSetConfiguration", 5039);
      }
      dispatch_get_specific(*v14);
      int v16 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        int v112 = "NFDriverSetConfiguration";
        __int16 v113 = 1024;
        int v114 = 5039;
        v18 = "%{public}s:%i Missing CE interface type";
LABEL_46:
        _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
        return 0;
      }
      return result;
    }
  }
  else
  {
    unsigned int v13 = 0;
  }
  int v24 = v8 & 1;
  int v25 = v24 == 0;
  int v26 = v12 ^ 1;
  if (v8 & 1) == 0 || (unsigned int v6 = 1, (v26))
  {
    int v29 = v25 & v7;
    int v30 = v25 & v7 | v26;
    if (v8) {
      int v30 = 0;
    }
    int v31 = v30 & (v7 | v5);
    BOOL v32 = *(unsigned __int8 *)(a1 + 60) != v31;
    int v33 = *(_DWORD *)(a1 + 32);
    int v106 = v29;
    if (v33 != v6)
    {
      if (v6 == 2)
      {
        unsigned int v101 = v13;
        int v34 = v31;
        int v35 = v24;
        int v37 = v12;
        int v38 = NFSharedSignpostLog();
        if (os_signpost_enabled(v38))
        {
          *(_WORD *)buf = 0;
          BOOL v32 = 1;
          _os_signpost_emit_with_name_impl(&dword_2229A5000, v38, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LPCDPolling", (const char *)&unk_2229F5F33, buf, 2u);
        }
        else
        {
          BOOL v32 = 1;
        }
        int v12 = v37;
        uint64_t v4 = a1;
        int v24 = v35;
        int v31 = v34;
LABEL_54:
        unsigned int v13 = v101;
        int v29 = v106;
        goto LABEL_56;
      }
      if (v33 == 2)
      {
        unsigned int v101 = v13;
        unsigned int v41 = v6;
        int v42 = v31;
        int v43 = v24;
        int v45 = v12;
        int v46 = NFSharedSignpostLog();
        if (os_signpost_enabled(v46))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_2229A5000, v46, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LPCDPolling", (const char *)&unk_2229F5F33, buf, 2u);
        }
        BOOL v32 = 1;
        int v12 = v45;
        uint64_t v4 = a1;
        int v24 = v43;
        int v31 = v42;
        unsigned int v6 = v41;
        goto LABEL_54;
      }
      BOOL v32 = 1;
    }
LABEL_56:
    int v48 = *(unsigned __int8 *)(v4 + 61) != v29 || *(_DWORD *)(v4 + 36) != v12 || v32;
    int v104 = v24;
    if (*(unsigned __int8 *)(v4 + 62) == v24)
    {
      int v25 = 0;
    }
    else
    {
      uint64_t v49 = v4;
      int v50 = v12;
      v51 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v52) {
        v52(6, "%s:%i ESE reader discovery change requested %d -> %d!", "NFDriverSetConfiguration", 5090, *(unsigned __int8 *)(v49 + 62), v104);
      }
      dispatch_get_specific(*v51);
      v53 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        int v54 = *(unsigned __int8 *)(v49 + 62);
        *(_DWORD *)buf = 136446978;
        int v112 = "NFDriverSetConfiguration";
        __int16 v113 = 1024;
        int v114 = 5090;
        __int16 v115 = 1024;
        int v116 = v54;
        __int16 v117 = 1024;
        unsigned int v118 = v104;
        _os_log_impl(&dword_2229A5000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader discovery change requested %d -> %d!", buf, 0x1Eu);
      }
      int v48 = 1;
      int v12 = v50;
      uint64_t v4 = v49;
    }
    int v55 = *(_DWORD *)(v4 + 44);
    int v102 = (int *)(v4 + 44);
    int v103 = v12;
    if (v55 == v9 && *(_DWORD *)(v4 + 48) == v10)
    {
      int v56 = 0;
    }
    else
    {
      if (v55 == 2) {
        char v57 = 1;
      }
      else {
        char v57 = v12;
      }
      if ((v57 & 1) != 0 || *(_DWORD *)(v4 + 48) == 2) {
        int v48 = 1;
      }
      int v56 = 1;
    }
    int v58 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v59) {
      v59(6, "%s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d ceType=%d, hasDiscoveryChanges=%d hasRoutingChanges=%d fullHCE=%d", "NFDriverSetConfiguration", 5114, v31, v6, v106, v9, v10, v13, v48, v56, BYTE1(v108));
    }
    dispatch_get_specific(*v58);
    uint64_t v60 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448770;
      int v112 = "NFDriverSetConfiguration";
      __int16 v113 = 1024;
      int v114 = 5114;
      __int16 v115 = 1024;
      int v116 = v31;
      __int16 v117 = 1024;
      unsigned int v118 = v6;
      __int16 v119 = 1024;
      int v120 = v106;
      __int16 v121 = 1024;
      int v122 = v9;
      __int16 v123 = 1024;
      int v124 = v10;
      __int16 v125 = 1024;
      unsigned int v126 = v13;
      __int16 v127 = 1024;
      int v128 = v48;
      __int16 v129 = 1024;
      int v130 = v56;
      __int16 v131 = 1024;
      int v132 = BYTE1(v108);
      _os_log_impl(&dword_2229A5000, v60, OS_LOG_TYPE_DEFAULT, "%{public}s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d ceType=%d, hasDiscoveryChanges=%d hasRoutingChanges=%d fullHCE=%d", buf, 0x48u);
    }
    if ((v25 | v56) == 1)
    {
      if (*(unsigned char *)(v4 + 60)
        || *(_DWORD *)(v4 + 32)
        || *(unsigned char *)(v4 + 62)
        || *v102 == 2
        || ((*(_DWORD *)(v4 + 48) != 2) & ~v25) == 0)
      {
        if (sub_2229C699C(v4, 0, 0, 0, 0, 0, 0))
        {
          int v61 = (const void **)MEMORY[0x263F8C6C0];
          if (*(unsigned char *)(v4 + 62))
          {
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            int v62 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v62) {
              v62(6, "%s:%i ESE Reader config %d -> %d", "NFDriverSetConfiguration", 5128, *(unsigned __int8 *)(v4 + 62), 0);
            }
            dispatch_get_specific(*v61);
            int v63 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              int v64 = *(unsigned __int8 *)(v4 + 62);
              *(_DWORD *)buf = 136446978;
              int v112 = "NFDriverSetConfiguration";
              __int16 v113 = 1024;
              int v114 = 5128;
              __int16 v115 = 1024;
              int v116 = v64;
              __int16 v117 = 1024;
              unsigned int v118 = 0;
              _os_log_impl(&dword_2229A5000, v63, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE Reader config %d -> %d", buf, 0x1Eu);
            }
            *(unsigned char *)(v4 + 62) = 0;
          }
        }
        else
        {
          int v68 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          int v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v69) {
            v69(4, "%s:%i Failed to stop discovery", "NFDriverSetConfiguration", 5125);
          }
          dispatch_get_specific(*v68);
          uint64_t v70 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            int v112 = "NFDriverSetConfiguration";
            __int16 v113 = 1024;
            int v114 = 5125;
            _os_log_impl(&dword_2229A5000, v70, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
          }
        }
        LOBYTE(v48) = 1;
      }
      if (BYTE1(v108)) {
        int v67 = v103;
      }
      else {
        int v67 = 0;
      }
      if (v67 == 1)
      {
        uint64_t v71 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v72) {
          v72(6, "%s:%i Enabling full HCE routing", "NFDriverSetConfiguration", 5135);
        }
        dispatch_get_specific(*v71);
        unint64_t v73 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          int v112 = "NFDriverSetConfiguration";
          __int16 v113 = 1024;
          int v114 = 5135;
          _os_log_impl(&dword_2229A5000, v73, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling full HCE routing", buf, 0x12u);
        }
      }
      if (!sub_2229CD6C4(v4, (int *)&v107))
      {
        v65 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        v84 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v84) {
          v84(3, "%s:%i Failed to set routing", "NFDriverSetConfiguration", 5140);
        }
        dispatch_get_specific(*v65);
        uint64_t v85 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          int v112 = "NFDriverSetConfiguration";
          __int16 v113 = 1024;
          int v114 = 5140;
          _os_log_impl(&dword_2229A5000, v85, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set routing", buf, 0x12u);
        }
        goto LABEL_152;
      }
      *(void *)int v102 = v107;
      *(_DWORD *)(v4 + 52) = v108;
      v65 = (const void **)MEMORY[0x263F8C6C0];
      int v66 = v104;
      if ((v48 & 1) == 0) {
        goto LABEL_126;
      }
    }
    else
    {
      v65 = (const void **)MEMORY[0x263F8C6C0];
      int v66 = v104;
      if (!v48) {
        goto LABEL_126;
      }
      LOBYTE(v67) = 0;
    }
    if (v66) {
      int v74 = 1;
    }
    else {
      int v74 = 2;
    }
    *(unsigned char *)(v4 + 65) = v67;
    if ((*(void *)(*(void *)(v4 + 24) + 568) & 0x20000000) != 0) {
      int v75 = 0;
    }
    else {
      int v75 = v31;
    }
    unsigned int v76 = v66;
    if (sub_2229C699C(v4, v6, v13, v75, 0, v106, v74))
    {
      *(unsigned char *)(v4 + 60) = v31;
      *(_DWORD *)(v4 + 32) = v6;
      *(_DWORD *)(v4 + 36) = v13;
      *(unsigned char *)(v4 + 61) = v106;
      if (*(unsigned __int8 *)(v4 + 62) != v76)
      {
        unsigned int v77 = v76;
        dispatch_get_specific(*v65);
        v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v78) {
          v78(6, "%s:%i ESE reader config %d -> %d", "NFDriverSetConfiguration", 5176, *(unsigned __int8 *)(v4 + 62), v76);
        }
        dispatch_get_specific(*v65);
        int v79 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          int v80 = *(unsigned __int8 *)(v4 + 62);
          *(_DWORD *)buf = 136446978;
          int v112 = "NFDriverSetConfiguration";
          __int16 v113 = 1024;
          int v114 = 5176;
          __int16 v115 = 1024;
          int v116 = v80;
          __int16 v117 = 1024;
          unsigned int v118 = v77;
          _os_log_impl(&dword_2229A5000, v79, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader config %d -> %d", buf, 0x1Eu);
        }
        *(unsigned char *)(v4 + 62) = v77;
      }
LABEL_126:
      uint64_t v81 = *(void **)(v4 + 24);
      uint64_t v82 = v81[85];
      if (*(unsigned char *)(v4 + 60))
      {
        if (v82) {
          goto LABEL_136;
        }
        uint64_t v83 = mach_continuous_time();
        uint64_t v81 = *(void **)(v4 + 24);
      }
      else
      {
        if (!v82) {
          goto LABEL_136;
        }
        mach_continuous_time();
        uint64_t ElapsedTimeInMillisecondsFromMachTime = GetElapsedTimeInMillisecondsFromMachTime();
        uint64_t v83 = 0;
        uint64_t v81 = *(void **)(v4 + 24);
        v81[86] += ElapsedTimeInMillisecondsFromMachTime;
      }
      v81[85] = v83;
LABEL_136:
      uint64_t v87 = v81[87];
      if (*(unsigned char *)(v4 + 61))
      {
        if (!v87)
        {
          uint64_t v88 = mach_continuous_time();
          uint64_t v89 = *(void *)(v4 + 24);
LABEL_141:
          *(void *)(v89 + 696) = v88;
        }
      }
      else if (v87)
      {
        mach_continuous_time();
        uint64_t v90 = GetElapsedTimeInMillisecondsFromMachTime();
        uint64_t v88 = 0;
        uint64_t v89 = *(void *)(v4 + 24);
        *(void *)(v89 + 704) += v90;
        goto LABEL_141;
      }
      return 1;
    }
    char v91 = v31;
    dispatch_get_specific(*v65);
    int v92 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v92) {
      v92(3, "%s:%i Failed to update discovery", "NFDriverSetConfiguration", 5165);
    }
    dispatch_get_specific(*v65);
    unsigned int v93 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v112 = "NFDriverSetConfiguration";
      __int16 v113 = 1024;
      int v114 = 5165;
      _os_log_impl(&dword_2229A5000, v93, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to update discovery", buf, 0x12u);
    }
    char v94 = v103;
    if (v6) {
      char v94 = 1;
    }
    if ((v94 & 1) == 0 && (v91 & 1) == 0) {
      return 0;
    }
LABEL_152:
    if (sub_2229C699C(v4, 0, 0, 0, 0, 0, 0))
    {
      *(unsigned char *)(v4 + 60) = 0;
      *(void *)(v4 + 32) = 0;
      *(unsigned char *)(v4 + 65) = 0;
      dispatch_get_specific(*v65);
      uint64_t v95 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v95) {
        v95(6, "%s:%i ESE reader config %d -> %d", "NFDriverSetConfiguration", 5197, *(unsigned __int8 *)(v4 + 62), 0);
      }
      dispatch_get_specific(*v65);
      double v96 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        int v97 = *(unsigned __int8 *)(v4 + 62);
        *(_DWORD *)buf = 136446978;
        int v112 = "NFDriverSetConfiguration";
        __int16 v113 = 1024;
        int v114 = 5197;
        __int16 v115 = 1024;
        int v116 = v97;
        __int16 v117 = 1024;
        unsigned int v118 = 0;
        _os_log_impl(&dword_2229A5000, v96, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader config %d -> %d", buf, 0x1Eu);
      }
      *(unsigned char *)(v4 + 62) = 0;
    }
    else
    {
      dispatch_get_specific(*v65);
      char v98 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v98) {
        v98(4, "%s:%i Failed to stop discovery", "NFDriverSetConfiguration", 5190);
      }
      dispatch_get_specific(*v65);
      __int16 v99 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v112 = "NFDriverSetConfiguration";
        __int16 v113 = 1024;
        int v114 = 5190;
        _os_log_impl(&dword_2229A5000, v99, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    if (sub_2229CD6C4(v4, v102))
    {
      BOOL result = 0;
      *(void *)int v102 = v109;
      *(_DWORD *)(v4 + 52) = v110;
    }
    else
    {
      dispatch_get_specific(*v65);
      char v100 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v100) {
        v100(4, "%s:%i Failed to stop routing", "NFDriverSetConfiguration", 5203);
      }
      dispatch_get_specific(*v65);
      int v16 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        int v112 = "NFDriverSetConfiguration";
        __int16 v113 = 1024;
        int v114 = 5203;
        v18 = "%{public}s:%i Failed to stop routing";
        goto LABEL_46;
      }
    }
    return result;
  }
  v27 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v28) {
    v28(3, "%s:%i CE and Reader not allowed at the same time", "NFDriverSetConfiguration", 5051);
  }
  dispatch_get_specific(*v27);
  int v16 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    int v112 = "NFDriverSetConfiguration";
    __int16 v113 = 1024;
    int v114 = 5051;
    v18 = "%{public}s:%i CE and Reader not allowed at the same time";
    goto LABEL_46;
  }
  return result;
}

BOOL sub_2229AC454(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 32) = sub_2229AC4D8;
    *(void *)(a1 + 40) = sub_2229AC5C8;
    *(void *)(a1 + 48) = sub_2229AC6B8;
    *(void *)(a1 + 56) = sub_2229AC7A8;
    *(void *)(a1 + 64) = sub_2229AC8B0;
    *(void *)(a1 + 72) = sub_2229AC9A0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(void *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 20) = 4;
  }
  return a1 != 0;
}

uint64_t sub_2229AC4D8()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for UICC!", "SetPower_UICC", 23);
  }
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "SetPower_UICC";
    __int16 v6 = 1024;
    int v7 = 23;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229AC5C8()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for UICC!", "GetATR_UICC", 29);
  }
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "GetATR_UICC";
    __int16 v6 = 1024;
    int v7 = 29;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229AC6B8()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for UICC!", "GetOSInfo_UICC", 35);
  }
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "GetOSInfo_UICC";
    __int16 v6 = 1024;
    int v7 = 35;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229AC7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for UICC!", "GetOSMode_UICC", 41);
  }
  dispatch_get_specific(*v4);
  __int16 v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    unint64_t v9 = "GetOSMode_UICC";
    __int16 v10 = 1024;
    int v11 = 41;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  return 0;
}

uint64_t sub_2229AC8B0()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for UICC!", "GetOSUpdateLog_UICC", 48);
  }
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "GetOSUpdateLog_UICC";
    __int16 v6 = 1024;
    int v7 = 48;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229AC9A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v5 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for UICC!", "GetAttackCounterLog_UICC", 54);
  }
  dispatch_get_specific(*v5);
  int v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v10 = "GetAttackCounterLog_UICC";
    __int16 v11 = 1024;
    int v12 = 54;
    _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  if (a3) {
    *a3 = 0;
  }
  if (a2) {
    *a2 = 0;
  }
  return 0;
}

uint64_t sub_2229ACAB0(uint64_t a1, uint64_t a2, int a3, int a4, _WORD *a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v10 = NFDataCreateWithBytes();
  __int16 v11 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), a2, 0x80u, 0xCAu, BYTE1(a3), a3, 0, v10);
  NFDataRelease();
  if (v11)
  {
    unint64_t v12 = v11[1];
    if (v12 >= 2)
    {
      unsigned int v13 = __rev16(*(unsigned __int16 *)(v12 + *v11 - 2));
      if (!a5)
      {
LABEL_13:
        if (v13 == 36864)
        {
          uint64_t v17 = NFDataCreateWithBytes();
          NFDataRelease();
          return v17;
        }
        v18 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(4, "%s:%i Returned error: 0x%04x for (0x%x/0x%x)", "NFDriverSecureElementGetDataWithOS", 63, v13, a3, a4);
        }
        dispatch_get_specific(*v18);
        v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447234;
          int v23 = "NFDriverSecureElementGetDataWithOS";
          __int16 v24 = 1024;
          int v25 = 63;
          __int16 v26 = 1024;
          unsigned int v27 = v13;
          __int16 v28 = 1024;
          int v29 = a3;
          __int16 v30 = 1024;
          int v31 = a4;
          _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x for (0x%x/0x%x)", buf, 0x24u);
        }
        NFDataRelease();
        return 0;
      }
    }
    else
    {
      unsigned int v13 = 0;
      if (!a5) {
        goto LABEL_13;
      }
    }
    *a5 = v13;
    goto LABEL_13;
  }
  v14 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  __int16 v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15) {
    v15(3, "%s:%i Failed to get data", "NFDriverSecureElementGetDataWithOS", 49);
  }
  dispatch_get_specific(*v14);
  int v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v23 = "NFDriverSecureElementGetDataWithOS";
    __int16 v24 = 1024;
    int v25 = 49;
    _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
  }
  if (!a5) {
    return 0;
  }
  uint64_t v17 = 0;
  *a5 = 0;
  return v17;
}

unsigned __int8 **sub_2229ACD64(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  BOOL result = (unsigned __int8 **)sub_2229ACAB0(a1, 2, 254, 57123, 0);
  if (result)
  {
    if ((unint64_t)result[1] >= 4)
    {
      uint64_t v4 = *result;
      int v5 = **result << 24;
      *(_DWORD *)(a2 + 3564) = v5;
      int v6 = v5 | (v4[1] << 16);
      *(_DWORD *)(a2 + 3564) = v6;
      int v7 = v6 | (v4[2] << 8);
      *(_DWORD *)(a2 + 3564) = v7;
      int v8 = v7 | v4[3];
      *(_DWORD *)(a2 + 3564) = v8;
      if (*(_DWORD *)(a2 + 3536))
      {
        unsigned int v9 = *(unsigned __int8 *)(a2 + 3580);
        if (v9 > 0xC7)
        {
          if (v9 != 210 && v9 != 200) {
            return (unsigned __int8 **)NFDataRelease();
          }
        }
        else if (v9 != 100 && v9 != 115)
        {
          return (unsigned __int8 **)NFDataRelease();
        }
      }
      uint64_t v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Resolve key type from config", "_NFDriverUpdateKeyWithConfigID", 91);
      }
      dispatch_get_specific(*v10);
      unint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v20 = "_NFDriverUpdateKeyWithConfigID";
        __int16 v21 = 1024;
        int v22 = 91;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Resolve key type from config", buf, 0x12u);
      }
      if (v8 >= 3)
      {
        int v13 = v8 & 0xFFFFFF;
        if ((v8 & 0xFFFFFF) == 0x535443)
        {
LABEL_19:
          char v16 = 1;
          *(_DWORD *)(a2 + 3536) = 1;
        }
        else
        {
          uint64_t v14 = 4u;
          while (v14 != 32)
          {
            int v15 = *(_DWORD *)&aCts[v14];
            v14 += 4;
            if (v13 == v15) {
              goto LABEL_19;
            }
          }
          char v16 = 0;
        }
        for (uint64_t i = 0; i != 4; ++i)
        {
          if (v13 == dword_2229E7D9C[i])
          {
            int v18 = 2;
            goto LABEL_29;
          }
        }
        if (v16) {
          return (unsigned __int8 **)NFDataRelease();
        }
        if (v8 < 0) {
          int v18 = 1;
        }
        else {
          int v18 = 2;
        }
LABEL_29:
        *(_DWORD *)(a2 + 3536) = v18;
      }
    }
    return (unsigned __int8 **)NFDataRelease();
  }
  return result;
}

BOOL sub_2229ACF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  v2 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0x7Fu, 0x21u, 0, 0);
  v3 = (const void **)MEMORY[0x263F8C6C0];
  if (v2)
  {
    int v6 = v2;
    uint64_t v4 = *v2;
    unint64_t v5 = v6[1];
    if (v5 >= 2) {
      unsigned int v7 = bswap32(*(unsigned __int16 *)(v4 + v5 - 2)) >> 16;
    }
    else {
      LOWORD(v7) = 0;
    }
    uint64_t v48 = NFDataCreateWithBytes();
    NFDataRelease();
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    while (1)
    {
      if (BYTE1(v7) == 97)
      {
        uint64_t v14 = NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xC0u, 0, 0, v7, 0);
      }
      else
      {
        if ((unsigned __int16)v7 != 25360) {
          goto LABEL_15;
        }
        uint64_t v14 = NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCCu, 0x7Fu, 0x21u, 0, 0);
      }
      uint64_t v12 = v14;
LABEL_15:
      if (!v12)
      {
        dispatch_get_specific(*v3);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(3, "%s:%i Transceive failure", "NFDriverSecureElementGetCertificates", 314);
        }
        dispatch_get_specific(*v3);
        int v45 = NFSharedLogGetLogger();
        BOOL result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "NFDriverSecureElementGetCertificates";
          __int16 v52 = 1024;
          int v53 = 314;
          __int16 v11 = v45;
          goto LABEL_59;
        }
        return result;
      }
      unint64_t v15 = *(void *)(v12 + 8);
      BOOL v16 = v15 >= 2;
      unint64_t v17 = v15 - 2;
      if (v16)
      {
        unsigned int v19 = *(unsigned __int16 *)(*(void *)v12 + v17);
        if (v17)
        {
          v20 = (void **)NFDataCreateWithLength();
          if (v20)
          {
            __int16 v21 = v20;
            memcpy(*v20, *(const void **)v48, *(void *)(v48 + 8));
            memcpy((char *)*v21 + *(void *)(v48 + 8), *(const void **)v12, *(void *)(v12 + 8) - 2);
            NFDataRelease();
            uint64_t v48 = (uint64_t)v21;
          }
          NFDataRelease();
          uint64_t v12 = 0;
        }
        unsigned int v7 = __rev16(v19);
        BOOL v18 = v7 == 25360;
        if (v7 != 36864 && v7 != 25360) {
          goto LABEL_50;
        }
        uint64_t v23 = TLVCreateWithDataMixed();
        uint64_t v49 = v23;
        if (v23)
        {
          uint64_t v24 = v23;
          if (*(_DWORD *)(a1 + 20) != 6 || *(_DWORD *)(v23 + 32) != 32545 || (uint64_t v24 = *(void *)(v23 + 16)) != 0)
          {
            do
            {
              if (v13 > 2)
              {
                dispatch_get_specific(*v3);
                uint64_t v29 = NFLogGetLogger();
                if (v29)
                {
                  __int16 v30 = (void (*)(uint64_t, const char *, ...))v29;
                  uint64_t v31 = *(void *)(*(void *)(v24 + 40) + 8);
                  int v32 = *(_DWORD *)(v24 + 32);
                  int v33 = sub_2229AD590(*(void *)(v24 + 16));
                  v30(3, "%s:%i Not enough storage for cert %d (tag 0x%x). Len = %lu, type = %d !", "NFDriverSecureElementGetCertificates", 357, v13, v32, v31, v33);
                }
                dispatch_get_specific(*v3);
                int v34 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_44;
                }
                int v35 = *(_DWORD *)(v24 + 32);
                uint64_t v36 = *(void *)(*(void *)(v24 + 40) + 8);
                int v37 = sub_2229AD590(*(void *)(v24 + 16));
                *(_DWORD *)buf = 136447490;
                v51 = "NFDriverSecureElementGetCertificates";
                __int16 v52 = 1024;
                int v53 = 357;
                __int16 v54 = 1024;
                *(_DWORD *)int v55 = v13;
                *(_WORD *)&v55[4] = 1024;
                *(_DWORD *)&v55[6] = v35;
                __int16 v56 = 2048;
                uint64_t v57 = v36;
                __int16 v58 = 1024;
                int v59 = v37;
                int v38 = v34;
                char v39 = "%{public}s:%i Not enough storage for cert %d (tag 0x%x). Len = %lu, type = %d !";
                uint32_t v40 = 46;
              }
              else
              {
                if (*(void *)(*(void *)(v24 + 40) + 8) <= 0x400uLL)
                {
                  int v25 = sub_2229AD590(*(void *)(v24 + 16));
                  if ((v25 - 1) <= 2)
                  {
                    uint64_t v26 = a2 + 1040 * v13;
                    *(unsigned char *)(v26 + 1032) = v25;
                    uint64_t v27 = *(void *)(v24 + 40);
                    size_t v28 = *(void *)(v27 + 8);
                    *(void *)(v26 + 1024) = v28;
                    memcpy((void *)v26, *(const void **)v27, v28);
                    ++v13;
                  }
                  goto LABEL_44;
                }
                dispatch_get_specific(*v3);
                unsigned int v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v41) {
                  v41(4, "%s:%i Certificate too long: %zu", "NFDriverSecureElementGetCertificates", 354, *(void *)(*(void *)(v24 + 40) + 8));
                }
                dispatch_get_specific(*v3);
                int v42 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_44;
                }
                uint64_t v43 = *(void *)(*(void *)(v24 + 40) + 8);
                *(_DWORD *)buf = 136446722;
                v51 = "NFDriverSecureElementGetCertificates";
                __int16 v52 = 1024;
                int v53 = 354;
                __int16 v54 = 2048;
                *(void *)int v55 = v43;
                int v38 = v42;
                char v39 = "%{public}s:%i Certificate too long: %zu";
                uint32_t v40 = 28;
              }
              _os_log_impl(&dword_2229A5000, v38, OS_LOG_TYPE_ERROR, v39, buf, v40);
LABEL_44:
              uint64_t v24 = *(void *)(v24 + 24);
            }
            while (v24);
          }
        }
        else
        {
          NFDataPrintAsHexString();
        }
        if (v49) {
          TLVRelease();
        }
        NFDataRelease();
        uint64_t v48 = NFDataCreateWithLength();
        goto LABEL_50;
      }
      BOOL v18 = 0;
      LOWORD(v7) = 0;
LABEL_50:
      if (!v18 && (v7 & 0xFF00) != 0x6100)
      {
        if (v48) {
          NFDataRelease();
        }
        return 1;
      }
    }
  }
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8) {
    v8(3, "%s:%i Transceive failure", "NFDriverSecureElementGetCertificates", 267);
  }
  dispatch_get_specific(*v3);
  unsigned int v9 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    v51 = "NFDriverSecureElementGetCertificates";
    __int16 v52 = 1024;
    int v53 = 267;
    __int16 v11 = v9;
LABEL_59:
    _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Transceive failure", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_2229AD590(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    int v2 = 0;
LABEL_29:
    uint64_t v12 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Unknow Key Usage 0x%x", "_getCertificateType", 243, v2);
    }
    dispatch_get_specific(*v12);
    uint64_t v14 = NFSharedLogGetLogger();
    uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446722;
      unint64_t v17 = "_getCertificateType";
      __int16 v18 = 1024;
      int v19 = 243;
      __int16 v20 = 1024;
      int v21 = v2;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknow Key Usage 0x%x", buf, 0x18u);
      return 0;
    }
    return result;
  }
  LODWORD(v1) = 0;
  int v2 = 0;
  do
  {
    int v3 = *(_DWORD *)(a1 + 32);
    if (v3 == 32585)
    {
      uint64_t v1 = *(void *)(a1 + 16);
      if (!v1) {
        goto LABEL_21;
      }
      while (1)
      {
        if (*(_DWORD *)(v1 + 32) == 240)
        {
          unsigned int v7 = *(unsigned __int8 ***)(v1 + 40);
          if (!v7 || !v7[1])
          {
            LODWORD(v1) = 0;
            goto LABEL_21;
          }
          int v8 = **v7;
          if (!v8)
          {
            LODWORD(v1) = 32;
            goto LABEL_19;
          }
          if (v8 == 1) {
            break;
          }
        }
        uint64_t v1 = *(void *)(v1 + 24);
        if (!v1) {
          goto LABEL_21;
        }
      }
      LODWORD(v1) = 48;
    }
    else if (v3 == 149 {
           && (uint64_t v4 = *(unsigned __int8 ***)(a1 + 40), (v5 = v4[1]) != 0)
    }
           && (int v6 = *v4, v2 = *v6, v5 != (unsigned __int8 *)1))
    {
      int v2 = v6[1] | (v2 << 8);
      if (!v1) {
        goto LABEL_21;
      }
    }
    else
    {
LABEL_19:
      if (!v1) {
        goto LABEL_21;
      }
    }
    if (v2) {
      break;
    }
LABEL_21:
    a1 = *(void *)(a1 + 24);
  }
  while (a1);
  if (v2 == 33280)
  {
    BOOL v9 = v1 == 48;
    unsigned int v10 = 2;
    unsigned int v11 = 4;
    goto LABEL_34;
  }
  if (v2 == 130) {
    return 1;
  }
  if (v2 != 128) {
    goto LABEL_29;
  }
  BOOL v9 = v1 == 48;
  unsigned int v10 = 3;
  unsigned int v11 = 5;
LABEL_34:
  if (v9) {
    return v11;
  }
  else {
    return v10;
  }
}

void sub_2229AD7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), a2, 0x80u, 0xAAu, 3u, 0, 0, 0);
  if (v4)
  {
    unint64_t v5 = v4[1];
    if (v5 < 2)
    {
      unsigned int v6 = 0;
LABEL_85:
      int v64 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(4, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetMigrationInfoJCOP", 407, v6);
      }
      dispatch_get_specific(*v64);
      int v66 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
        __int16 v75 = 1024;
        int v76 = 407;
        __int16 v77 = 1024;
        *(_DWORD *)v78 = v6;
        _os_log_impl(&dword_2229A5000, v66, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
      }
      NFDataRelease();
      return;
    }
    unsigned int v6 = __rev16(*(unsigned __int16 *)(*v4 + v5 - 2));
    if (v6 != 36864) {
      goto LABEL_85;
    }
    NFDataCreateWithBytes();
    NFDataRelease();
    uint64_t v11 = TLVCreateWithData();
    NFDataRelease();
    if (v11)
    {
      if (*(_DWORD *)(v11 + 32) == 192)
      {
        uint64_t v12 = TLVCreateWithData();
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = (const void **)MEMORY[0x263F8C6C0];
          unint64_t v15 = &dword_2229A5000;
          BOOL v16 = "%{public}s:%i Unexpected element found in status container: 0x%04x";
          unint64_t v17 = "%s:%i Unexpected element found in status container: 0x%04x";
          while (1)
          {
            switch(*(_DWORD *)(v13 + 32))
            {
              case 0xC8:
                __int16 v18 = *(unsigned __int16 ***)(v13 + 40);
                if (v18[1] == (unsigned __int16 *)4)
                {
                  int v19 = *v18;
                  unsigned int v20 = __rev16(*v19);
                  if (v20 == *(unsigned __int16 *)(a3 + 3570))
                  {
                    *(_WORD *)(a3 + 3572) = bswap32(v19[1]) >> 16;
                  }
                  else
                  {
                    dispatch_get_specific(*v14);
                    int v44 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                    if (v44) {
                      v44(4, "%s:%i ISD sequence counter %d does not match migration update counter %d", "NFDriverSecureElementGetMigrationInfoJCOP", 432, *(unsigned __int16 *)(a3 + 3570), v20);
                    }
                    dispatch_get_specific(*v14);
                    int v45 = NFSharedLogGetLogger();
                    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                    {
                      int v46 = *(unsigned __int16 *)(a3 + 3570);
                      *(_DWORD *)buf = 136446978;
                      int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                      __int16 v75 = 1024;
                      int v76 = 432;
                      __int16 v77 = 1024;
                      *(_DWORD *)v78 = v46;
                      *(_WORD *)&v78[4] = 1024;
                      *(_DWORD *)&v78[6] = v20;
                      int v32 = v15;
                      int v33 = v45;
                      int v34 = "%{public}s:%i ISD sequence counter %d does not match migration update counter %d";
                      uint32_t v35 = 30;
                      goto LABEL_54;
                    }
                  }
                }
                else
                {
                  dispatch_get_specific(*v14);
                  uint64_t v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v36) {
                    v36(4, "%s:%i Invalid length for 0xC8", "NFDriverSecureElementGetMigrationInfoJCOP", 425);
                  }
                  dispatch_get_specific(*v14);
                  int v37 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    __int16 v75 = 1024;
                    int v76 = 425;
                    int v32 = v15;
                    int v33 = v37;
                    int v34 = "%{public}s:%i Invalid length for 0xC8";
                    goto LABEL_53;
                  }
                }
                goto LABEL_79;
              case 0xC9:
                int v21 = *(unsigned __int16 ***)(v13 + 40);
                if (v21[1] == (unsigned __int16 *)2)
                {
                  int v22 = __rev16(**v21);
                  if (v22 > 39834)
                  {
                    switch(v22)
                    {
                      case 39835:
                        int v23 = 3;
                        break;
                      case 42356:
                        int v23 = 5;
                        break;
                      case 47545:
                        int v23 = 4;
                        break;
                      default:
LABEL_81:
                        dispatch_get_specific(*v14);
                        uint64_t v49 = NFLogGetLogger();
                        if (v49)
                        {
                          int v50 = (void (*)(uint64_t, const char *, ...))v49;
                          v51 = __error();
                          __int16 v52 = v15;
                          int v53 = v17;
                          __int16 v54 = v16;
                          int v55 = strerror(*v51);
                          __int16 v56 = __error();
                          uint64_t v72 = v55;
                          BOOL v16 = v54;
                          unint64_t v17 = v53;
                          unint64_t v15 = v52;
                          v50(3, "%s:%i \"%s\" errno=%d Unknown migration state: 0x%04x", "NFDriverSecureElementGetMigrationInfoJCOP", 454, v72, *v56, v22);
                        }
                        dispatch_get_specific(*v14);
                        uint64_t v57 = NFSharedLogGetLogger();
                        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
                        {
                          __int16 v58 = __error();
                          int v59 = v15;
                          uint64_t v60 = v17;
                          int v61 = v16;
                          int v62 = strerror(*v58);
                          int v63 = *__error();
                          *(_DWORD *)buf = 136447234;
                          int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                          __int16 v75 = 1024;
                          int v76 = 454;
                          __int16 v77 = 2080;
                          *(void *)v78 = v62;
                          BOOL v16 = v61;
                          unint64_t v17 = v60;
                          unint64_t v15 = v59;
                          *(_WORD *)&v78[8] = 1024;
                          int v79 = v63;
                          __int16 v80 = 1024;
                          int v81 = v22;
                          int v32 = v59;
                          int v33 = v57;
                          int v34 = "%{public}s:%i \"%s\" errno=%d Unknown migration state: 0x%04x";
                          uint32_t v35 = 40;
                          goto LABEL_54;
                        }
                        goto LABEL_79;
                    }
                  }
                  else
                  {
                    switch(v22)
                    {
                      case 13107:
                        int v23 = 6;
                        break;
                      case 23130:
                        int v23 = 1;
                        break;
                      case 34695:
                        int v23 = 2;
                        break;
                      default:
                        goto LABEL_81;
                    }
                  }
                  *(_DWORD *)(a3 + 3540) = v23;
                }
                else
                {
                  dispatch_get_specific(*v14);
                  int v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v38) {
                    v38(4, "%s:%i Invalid length for 0xC9", "NFDriverSecureElementGetMigrationInfoJCOP", 442);
                  }
                  dispatch_get_specific(*v14);
                  char v39 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    __int16 v75 = 1024;
                    int v76 = 442;
                    int v32 = v15;
                    int v33 = v39;
                    int v34 = "%{public}s:%i Invalid length for 0xC9";
                    goto LABEL_53;
                  }
                }
LABEL_79:
                uint64_t v13 = *(void *)(v13 + 24);
                if (!v13) {
                  goto LABEL_99;
                }
                break;
              case 0xCA:
                uint64_t v24 = *(unsigned __int16 ***)(v13 + 40);
                if (v24[1] == (unsigned __int16 *)4)
                {
                  int v25 = *v24;
                  *(_WORD *)(a3 + 3574) = bswap32(*v25) >> 16;
                  *(_WORD *)(a3 + 3576) = bswap32(v25[1]) >> 16;
                }
                else
                {
                  dispatch_get_specific(*v14);
                  uint32_t v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v40) {
                    v40(4, "%s:%i Invalid length for 0xCA", "NFDriverSecureElementGetMigrationInfoJCOP", 461);
                  }
                  dispatch_get_specific(*v14);
                  unsigned int v41 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    __int16 v75 = 1024;
                    int v76 = 461;
                    int v32 = v15;
                    int v33 = v41;
                    int v34 = "%{public}s:%i Invalid length for 0xCA";
                    goto LABEL_53;
                  }
                }
                goto LABEL_79;
              case 0xCB:
                uint64_t v26 = *(unsigned __int16 ***)(v13 + 40);
                if (v26[1] != (unsigned __int16 *)2)
                {
                  dispatch_get_specific(*v14);
                  int v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v42) {
                    v42(4, "%s:%i Invalid length for 0xCB", "NFDriverSecureElementGetMigrationInfoJCOP", 472);
                  }
                  dispatch_get_specific(*v14);
                  uint64_t v43 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    __int16 v75 = 1024;
                    int v76 = 472;
                    int v32 = v15;
                    int v33 = v43;
                    int v34 = "%{public}s:%i Invalid length for 0xCB";
LABEL_53:
                    uint32_t v35 = 18;
                    goto LABEL_54;
                  }
                  goto LABEL_79;
                }
                int v27 = __rev16(**v26);
                if (v27 <= 23129)
                {
                  if (v27)
                  {
                    if (v27 != 13260)
                    {
LABEL_70:
                      dispatch_get_specific(*v14);
                      int v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      if (v47) {
                        v47(4, "%s:%i Invalid context 0x%02x", "NFDriverSecureElementGetMigrationInfoJCOP", 492, v27);
                      }
                      dispatch_get_specific(*v14);
                      uint64_t v48 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136446722;
                        int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                        __int16 v75 = 1024;
                        int v76 = 492;
                        __int16 v77 = 1024;
                        *(_DWORD *)v78 = v27;
                        int v32 = v15;
                        int v33 = v48;
                        int v34 = "%{public}s:%i Invalid context 0x%02x";
                        goto LABEL_36;
                      }
                      goto LABEL_79;
                    }
                    int v28 = 4;
                  }
                  else
                  {
                    int v28 = 1;
                  }
                }
                else
                {
                  switch(v27)
                  {
                    case 23130:
                      int v28 = 3;
                      break;
                    case 42405:
                      int v28 = 2;
                      break;
                    case 52275:
                      int v28 = 5;
                      break;
                    default:
                      goto LABEL_70;
                  }
                }
                *(_DWORD *)(a3 + 3544) = v28;
                goto LABEL_79;
              default:
                dispatch_get_specific(*v14);
                uint64_t v29 = (void (*)(uint64_t, const char *))NFLogGetLogger();
                if (v29) {
                  v29(4, v17);
                }
                dispatch_get_specific(*v14);
                __int16 v30 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  int v31 = *(_DWORD *)(v13 + 32);
                  *(_DWORD *)buf = 136446722;
                  int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
                  __int16 v75 = 1024;
                  int v76 = 498;
                  __int16 v77 = 1024;
                  *(_DWORD *)v78 = v31;
                  int v32 = v15;
                  int v33 = v30;
                  int v34 = v16;
LABEL_36:
                  uint32_t v35 = 24;
LABEL_54:
                  _os_log_impl(v32, v33, OS_LOG_TYPE_ERROR, v34, buf, v35);
                }
                goto LABEL_79;
            }
          }
        }
LABEL_99:
        TLVRelease();
      }
      else
      {
        int v69 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v70 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v70) {
          v70(4, "%s:%i Could not find status container", "NFDriverSecureElementGetMigrationInfoJCOP", 507);
        }
        dispatch_get_specific(*v69);
        uint64_t v71 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
          __int16 v75 = 1024;
          int v76 = 507;
          _os_log_impl(&dword_2229A5000, v71, OS_LOG_TYPE_ERROR, "%{public}s:%i Could not find status container", buf, 0x12u);
        }
      }
      TLVRelease();
      return;
    }
    int v67 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v68 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v68) {
      v68(3, "%s:%i Failed to parse TLV", "NFDriverSecureElementGetMigrationInfoJCOP", 512);
    }
    dispatch_get_specific(*v67);
    BOOL v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
      __int16 v75 = 1024;
      int v76 = 512;
      unsigned int v10 = "%{public}s:%i Failed to parse TLV";
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v7 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8) {
      v8(4, "%s:%i Transceive failure", "NFDriverSecureElementGetMigrationInfoJCOP", 401);
    }
    dispatch_get_specific(*v7);
    BOOL v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v74 = "NFDriverSecureElementGetMigrationInfoJCOP";
      __int16 v75 = 1024;
      int v76 = 401;
      unsigned int v10 = "%{public}s:%i Transceive failure";
LABEL_8:
      _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
    }
  }
}

BOOL sub_2229AE260(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  unsigned __int16 v85 = 0;
  uint64_t v8 = NFDataCreateWithBytes();
  NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v8, &v85);
  NFDataRelease();
  switch(v85)
  {
    case 0x6614u:
      uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(5, "%s:%i JCOP OS Update Mode detected", "NFDriverSecureElementGetOSInfoJCOP", 571);
      }
      dispatch_get_specific(*v13);
      unint64_t v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
        __int16 v88 = 1024;
        int v89 = 571;
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i JCOP OS Update Mode detected", buf, 0x12u);
      }
      *(unsigned char *)(a2 + 3584) = 1;
      uint64_t v12 = (unsigned char *)(a2 + 3583);
      if (*(unsigned char *)(a2 + 3583)) {
        goto LABEL_27;
      }
LABEL_16:
      sub_2229ACD64(a1, a2);
      if (!*(unsigned char *)(a2 + 3583))
      {
        if (!*(unsigned char *)(a2 + 3584))
        {
          if (a3) {
            a3(a1, a2);
          }
          else {
            sub_2229ACF8C(a1, a2);
          }
        }
        if (!*v12 && !*(unsigned char *)(a2 + 3584)) {
          goto LABEL_29;
        }
      }
      goto LABEL_27;
    case 0x9000u:
      uint64_t v12 = (unsigned char *)(a2 + 3583);
      *(_WORD *)(a2 + 3583) = 0;
      goto LABEL_16;
    case 0x66A5u:
      BOOL v9 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unsigned int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10) {
        v10(5, "%s:%i Restricted Mode detected", "NFDriverSecureElementGetOSInfoJCOP", 567);
      }
      dispatch_get_specific(*v9);
      uint64_t v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
        __int16 v88 = 1024;
        int v89 = 567;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restricted Mode detected", buf, 0x12u);
      }
      uint64_t v12 = (unsigned char *)(a2 + 3583);
      *(unsigned char *)(a2 + 3583) = 1;
LABEL_27:
      uint64_t v20 = NFDataCreateWithBytes();
      if (!NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v20, &v85))
      {
        uint64_t v26 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27) {
          v27(3, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetOSInfoJCOP", 602, v85);
        }
        dispatch_get_specific(*v26);
        int v28 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
        __int16 v88 = 1024;
        int v89 = 602;
        __int16 v90 = 1024;
        *(_DWORD *)char v91 = v85;
LABEL_39:
        _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
LABEL_40:
        NFDataRelease();
        return 0;
      }
      NFDataRelease();
      sub_2229ACD64(a1, a2);
LABEL_29:
      uint64_t v21 = sub_2229ACAB0(a1, 0, 254, 57120, 0);
      if (v21)
      {
        size_t v22 = *(void *)(v21 + 8);
        if (v22 - 48 > 0xFFFFFFFFFFFFFFCELL)
        {
          memcpy((void *)(a2 + 3376), *(const void **)v21, v22);
          *(unsigned char *)(a2 + 3376 + v22) = 0;
        }
        else
        {
          int v23 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v24) {
            v24(4, "%s:%i Platform id too long: %ld", "NFDriverSecureElementGetOSInfoJCOP", 622, v22);
          }
          dispatch_get_specific(*v23);
          int v25 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
            __int16 v88 = 1024;
            int v89 = 622;
            __int16 v90 = 2048;
            *(void *)char v91 = v22;
            _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Platform id too long: %ld", buf, 0x1Cu);
          }
        }
        NFDataRelease();
      }
      else
      {
        uint64_t v29 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        __int16 v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v30) {
          v30(4, "%s:%i Failed to get platform identifier", "NFDriverSecureElementGetOSInfoJCOP", 617);
        }
        dispatch_get_specific(*v29);
        int v31 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
          __int16 v88 = 1024;
          int v89 = 617;
          _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get platform identifier", buf, 0x12u);
        }
      }
      int v32 = (uint64_t *)sub_2229ACAB0(a1, 0, 254, 57164, 0);
      if (!v32)
      {
        int v46 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v47) {
          v47(4, "%s:%i Failed to get JCOP Version", "NFDriverSecureElementGetOSInfoJCOP", 638);
        }
        dispatch_get_specific(*v46);
        uint64_t v48 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
          __int16 v88 = 1024;
          int v89 = 638;
          _os_log_impl(&dword_2229A5000, v48, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get JCOP Version", buf, 0x12u);
        }
LABEL_63:
        uint64_t v49 = sub_2229ACAB0(a1, 0, 254, 57121, 0);
        if (v49)
        {
          int v50 = (const void **)v49;
          size_t v51 = *(void *)(v49 + 8);
          if (v51 < 0x19)
          {
            memcpy((void *)(a2 + 3456), *(const void **)v49, v51);
            memcpy((void *)(a2 + 3480), *v50, v51);
          }
          else
          {
            __int16 v52 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            int v53 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v53) {
              v53(4, "%s:%i serial number too long: %ld", "NFDriverSecureElementGetOSInfoJCOP", 659, v51);
            }
            dispatch_get_specific(*v52);
            __int16 v54 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
              __int16 v88 = 1024;
              int v89 = 659;
              __int16 v90 = 2048;
              *(void *)char v91 = v51;
              _os_log_impl(&dword_2229A5000, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i serial number too long: %ld", buf, 0x1Cu);
            }
          }
          NFDataRelease();
        }
        else
        {
          int v55 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          __int16 v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v56) {
            v56(4, "%s:%i Failed to get serial number", "NFDriverSecureElementGetOSInfoJCOP", 654);
          }
          dispatch_get_specific(*v55);
          uint64_t v57 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
            __int16 v88 = 1024;
            int v89 = 654;
            _os_log_impl(&dword_2229A5000, v57, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get serial number", buf, 0x12u);
          }
        }
        uint64_t v58 = sub_2229ACAB0(a1, 0, 254, 57137, 0);
        if (!v58)
        {
          int v63 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          int v64 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v64) {
            v64(4, "%s:%i Failed to get update info", "NFDriverSecureElementGetOSInfoJCOP", 674);
          }
          dispatch_get_specific(*v63);
          v65 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
            __int16 v88 = 1024;
            int v89 = 674;
            _os_log_impl(&dword_2229A5000, v65, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get update info", buf, 0x12u);
          }
          goto LABEL_100;
        }
        int v59 = (unsigned __int16 **)v58;
        NFDataPrintAsHexString();
        unint64_t v60 = (unint64_t)v59[1];
        if (v60 < 2)
        {
          int v66 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          int v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v67) {
            v67(3, "%s:%i Invalid update info length: %zu", "NFDriverSecureElementGetOSInfoJCOP", 699, (size_t)v59[1]);
          }
          dispatch_get_specific(*v66);
          int v68 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            int v69 = v59[1];
            *(_DWORD *)buf = 136446722;
            uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
            __int16 v88 = 1024;
            int v89 = 699;
            __int16 v90 = 2048;
            *(void *)char v91 = v69;
            _os_log_impl(&dword_2229A5000, v68, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid update info length: %zu", buf, 0x1Cu);
          }
          goto LABEL_99;
        }
        uint64_t v61 = (uint64_t)*v59;
        *(_WORD *)(a2 + 3570) = bswap32(**v59) >> 16;
        if (v60 < 8)
        {
          if (v60 < 6)
          {
LABEL_99:
            NFDataRelease();
LABEL_100:
            if (*v12 || *(unsigned char *)(a2 + 3584)) {
              return 1;
            }
            uint64_t v74 = NFDataCreateWithBytes();
            if (NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v74, &v85))
            {
              NFDataRelease();
              if (a4) {
                a4(a1, a2);
              }
              else {
                sub_2229AD7A0(a1, 0, a2);
              }
              uint64_t v84 = NFDataCreateWithBytes();
              NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v84, &v85);
              NFDataRelease();
              return 1;
            }
            uint64_t v82 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            uint64_t v83 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v83) {
              v83(3, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetOSInfoJCOP", 711, v85);
            }
            dispatch_get_specific(*v82);
            int v28 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              goto LABEL_40;
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
            __int16 v88 = 1024;
            int v89 = 711;
            __int16 v90 = 1024;
            *(_DWORD *)char v91 = v85;
            goto LABEL_39;
          }
          *(_DWORD *)(a2 + 3556) = __rev16(*(unsigned __int16 *)(v61 + 2));
          *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v61 + 4);
          char v62 = *(unsigned char *)(v61 + 5);
        }
        else
        {
          *(_DWORD *)(a2 + 3556) = __rev16(*(unsigned __int16 *)(v61 + 2));
          *(_WORD *)(a2 + 3568) = bswap32(*(unsigned __int16 *)(v61 + 4)) >> 16;
          *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v61 + 6);
          char v62 = *(unsigned char *)(v61 + 7);
        }
        *(unsigned char *)(a2 + 3580) = v62;
        goto LABEL_99;
      }
      unint64_t v33 = v32[1];
      if (v33 < 2)
      {
LABEL_53:
        char v39 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint32_t v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v40) {
          v40(3, "%s:%i Did not find version tag!", "NFDriverUpdateJCOPVersion", 530);
        }
        dispatch_get_specific(*v39);
        unsigned int v41 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
          goto LABEL_58;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v87 = "NFDriverUpdateJCOPVersion";
        __int16 v88 = 1024;
        int v89 = 530;
        int v42 = "%{public}s:%i Did not find version tag!";
        uint64_t v43 = v41;
        os_log_type_t v44 = OS_LOG_TYPE_ERROR;
        uint32_t v45 = 18;
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = *v32;
        uint64_t v36 = 1;
        while (1)
        {
          uint64_t v37 = *(unsigned __int8 *)(v35 + v36);
          unint64_t v38 = v34 + 2 + v37;
          if (*(unsigned __int8 *)(v35 + v34) == 133) {
            break;
          }
          uint64_t v36 = v38 + 1;
          v34 += 2 + v37;
          if (v38 + 1 >= v33) {
            goto LABEL_53;
          }
        }
        if (v37 != 3 || v38 > v33)
        {
          uint64_t v71 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v72) {
            v72(3, "%s:%i Invalid version tag length %d", "NFDriverUpdateJCOPVersion", 537, v37);
          }
          dispatch_get_specific(*v71);
          unint64_t v73 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
            goto LABEL_58;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v87 = "NFDriverUpdateJCOPVersion";
          __int16 v88 = 1024;
          int v89 = 537;
          __int16 v90 = 1024;
          *(_DWORD *)char v91 = v37;
          int v42 = "%{public}s:%i Invalid version tag length %d";
          uint64_t v43 = v73;
          os_log_type_t v44 = OS_LOG_TYPE_ERROR;
          uint32_t v45 = 24;
        }
        else
        {
          *(unsigned char *)(a2 + 3528) = *(unsigned char *)(v35 + v34 + 2);
          uint64_t v75 = v34 + v35;
          *(unsigned char *)(a2 + 3529) = *(unsigned char *)(v75 + 3);
          *(unsigned char *)(a2 + 3530) = *(unsigned char *)(v75 + 4);
          int v76 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          __int16 v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v77) {
            v77(6, "%s:%i major = %d, minor %d, build = %d", "NFDriverUpdateJCOPVersion", 546, *(unsigned __int8 *)(a2 + 3528), *(unsigned __int8 *)(a2 + 3529), *(unsigned __int8 *)(a2 + 3530));
          }
          dispatch_get_specific(*v76);
          v78 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_58;
          }
          int v79 = *(unsigned __int8 *)(a2 + 3528);
          int v80 = *(unsigned __int8 *)(a2 + 3529);
          int v81 = *(unsigned __int8 *)(a2 + 3530);
          *(_DWORD *)buf = 136447234;
          uint64_t v87 = "NFDriverUpdateJCOPVersion";
          __int16 v88 = 1024;
          int v89 = 546;
          __int16 v90 = 1024;
          *(_DWORD *)char v91 = v79;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v80;
          __int16 v92 = 1024;
          int v93 = v81;
          int v42 = "%{public}s:%i major = %d, minor %d, build = %d";
          uint64_t v43 = v78;
          os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
          uint32_t v45 = 36;
        }
      }
      _os_log_impl(&dword_2229A5000, v43, v44, v42, buf, v45);
LABEL_58:
      NFDataRelease();
      goto LABEL_63;
  }
  BOOL v16 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v17) {
    v17(3, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetOSInfoJCOP", 575, v85);
  }
  dispatch_get_specific(*v16);
  __int16 v18 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v87 = "NFDriverSecureElementGetOSInfoJCOP";
    __int16 v88 = 1024;
    int v89 = 575;
    __int16 v90 = 1024;
    *(_DWORD *)char v91 = v85;
    _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
    return 0;
  }
  return result;
}

uint64_t sub_2229AF0D8(uint64_t a1, unsigned char *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  size_t v20 = 1023;
  if (NFDriverSecureElementGetCometATR(*(void *)a1, *(unsigned int *)(a1 + 16), v4, &v20))
  {
    uint64_t v19 = 0;
    int v18 = 0;
    unint64_t v5 = v20 - 4;
    if (v20 > 4)
    {
      v4[v20] = 0;
      if (v5 >= 0x17) {
        size_t v14 = 23;
      }
      else {
        size_t v14 = v5;
      }
      memcpy(a2 + 3504, v4 + 4, v14);
      if (sscanf(v4 + 4, "JCOP3 %d.%d", &v19, &v18) == 2
        || sscanf(v4 + 4, "JCOP3.1 R%d.%d", &v19, &v18) == 2
        || sscanf(v4 + 4, "JCOP3.4 R%d.%d", &v19, &v18) == 2
        || sscanf(v4 + 4, "JCOP%f R%d.%d", (char *)&v19 + 4, &v19, &v18) == 3)
      {
        a2[3528] = v19;
        a2[3529] = v18;
        uint64_t v12 = 1;
        if (!v4) {
          return v12;
        }
        goto LABEL_9;
      }
      unint64_t v15 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(4, "%s:%i Failed to parse ATR", "NFDriverSecureElementGetATRJCOP", 788);
      }
      dispatch_get_specific(*v15);
      unint64_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        size_t v22 = "NFDriverSecureElementGetATRJCOP";
        __int16 v23 = 1024;
        int v24 = 788;
        BOOL v9 = "%{public}s:%i Failed to parse ATR";
        unsigned int v10 = v17;
        uint32_t v11 = 18;
        goto LABEL_7;
      }
    }
    else
    {
      unsigned int v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unsigned int v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v7) {
        v7(4, "%s:%i Invalid ATR length: %zu", "NFDriverSecureElementGetATRJCOP", 763, v20);
      }
      dispatch_get_specific(*v6);
      uint64_t v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        size_t v22 = "NFDriverSecureElementGetATRJCOP";
        __int16 v23 = 1024;
        int v24 = 763;
        __int16 v25 = 2048;
        size_t v26 = v20;
        BOOL v9 = "%{public}s:%i Invalid ATR length: %zu";
        unsigned int v10 = v8;
        uint32_t v11 = 28;
LABEL_7:
        _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
      }
    }
  }
  uint64_t v12 = 0;
  if (v4) {
LABEL_9:
  }
    free(v4);
  return v12;
}

uint64_t sub_2229AF3C4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned __int16 v7 = 0;
  uint64_t result = sub_2229ACAB0(a1, 0, 254, 57129, &v7);
  if (v7 == 26277)
  {
    uint64_t v3 = NFDataCreateWithBytes();
    if (NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v3, &v7))
    {
      NFDataRelease();
      return sub_2229ACAB0(a1, 0, 254, 57129, &v7);
    }
    else
    {
      uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i SELECT returned error: 0x%04x", "NFDriverSecureElementGetOSUpdateLog", 806, v7);
      }
      dispatch_get_specific(*v4);
      unsigned int v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v9 = "NFDriverSecureElementGetOSUpdateLog";
        __int16 v10 = 1024;
        int v11 = 806;
        __int16 v12 = 1024;
        int v13 = v7;
        _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i SELECT returned error: 0x%04x", buf, 0x18u);
      }
      NFDataRelease();
      return 0;
    }
  }
  return result;
}

BOOL sub_2229AF558(uint64_t a1, unsigned char *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned __int16 v30 = -1;
  if (a2) {
    *a2 = 0;
  }
  uint64_t v4 = NFDataCreateWithBytes();
  if (v4)
  {
    BOOL v5 = NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v4, &v30);
    NFDataRelease();
    if (v5)
    {
      uint64_t v6 = sub_2229ACAB0(a1, 0, 254, 57148, 0);
      if (v6)
      {
        uint64_t v7 = v6;
        if (*(void *)(v6 + 8) == 1)
        {
          if (**(unsigned char **)v6 != 90)
          {
LABEL_29:
            NFDataRelease();
            return 1;
          }
          if (a2)
          {
            *a2 = 1;
            goto LABEL_29;
          }
          uint64_t v27 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger) {
            Logger(3, "%s:%i AC log exists, but supplied output parameter is NULL.", "GetPresenceOfAttackLog", 858);
          }
          dispatch_get_specific(*v27);
          uint64_t v29 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            goto LABEL_29;
          }
          *(_DWORD *)buf = 136446466;
          int v32 = "GetPresenceOfAttackLog";
          __int16 v33 = 1024;
          int v34 = 858;
          int v24 = "%{public}s:%i AC log exists, but supplied output parameter is NULL.";
          __int16 v25 = v29;
          uint32_t v26 = 18;
        }
        else
        {
          size_t v20 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v21) {
            v21(3, "%s:%i Bad response APDU length %d", "GetPresenceOfAttackLog", 864, *(unsigned __int16 *)(v7 + 8));
          }
          dispatch_get_specific(*v20);
          size_t v22 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            goto LABEL_29;
          }
          int v23 = *(unsigned __int16 *)(v7 + 8);
          *(_DWORD *)buf = 136446722;
          int v32 = "GetPresenceOfAttackLog";
          __int16 v33 = 1024;
          int v34 = 864;
          __int16 v35 = 1024;
          int v36 = v23;
          int v24 = "%{public}s:%i Bad response APDU length %d";
          __int16 v25 = v22;
          uint32_t v26 = 24;
        }
        _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
        goto LABEL_29;
      }
      int v18 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19) {
        v19(3, "%s:%i Unable to get presence of AC log", "GetPresenceOfAttackLog", 846);
      }
      dispatch_get_specific(*v18);
      __int16 v10 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        int v32 = "GetPresenceOfAttackLog";
        __int16 v33 = 1024;
        int v34 = 846;
        __int16 v12 = "%{public}s:%i Unable to get presence of AC log";
        goto LABEL_22;
      }
    }
    else
    {
      int v13 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14) {
        v14(3, "%s:%i SELECT returned error: 0x%04x. Cannot query presence of attack log without selecting ISD", "GetPresenceOfAttackLog", 839, v30);
      }
      dispatch_get_specific(*v13);
      unint64_t v15 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446722;
        int v32 = "GetPresenceOfAttackLog";
        __int16 v33 = 1024;
        int v34 = 839;
        __int16 v35 = 1024;
        int v36 = v30;
        __int16 v12 = "%{public}s:%i SELECT returned error: 0x%04x. Cannot query presence of attack log without selecting ISD";
        BOOL v16 = v15;
        uint32_t v17 = 24;
LABEL_23:
        _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, v12, buf, v17);
        return 0;
      }
    }
  }
  else
  {
    uint64_t v8 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    BOOL v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9) {
      v9(3, "%s:%i Unable to create aid needed for selecting ISD", "GetPresenceOfAttackLog", 832);
    }
    dispatch_get_specific(*v8);
    __int16 v10 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      int v32 = "GetPresenceOfAttackLog";
      __int16 v33 = 1024;
      int v34 = 832;
      __int16 v12 = "%{public}s:%i Unable to create aid needed for selecting ISD";
LABEL_22:
      BOOL v16 = v10;
      uint32_t v17 = 18;
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t sub_2229AF9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = NFDataCreateWithBytes();
  BOOL v5 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), a2, 0x80u, 0xCAu, 0, 0xFEu, 0, v4);
  NFDataRelease();
  unsigned int v6 = 0;
  unint64_t v7 = v5[1];
  if (v7 < 2 || (unsigned int v6 = __rev16(*(unsigned __int16 *)(v7 + *v5 - 2)), v6 != 36864))
  {
    int v13 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Returned error: 0x%04x", "UnlockRequestInfo", 895, v6);
    }
    dispatch_get_specific(*v13);
    __int16 v10 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)buf = 136446722;
    int v18 = "UnlockRequestInfo";
    __int16 v19 = 1024;
    int v20 = 895;
    __int16 v21 = 1024;
    unsigned int v22 = v6;
    __int16 v12 = "%{public}s:%i Returned error: 0x%04x";
    goto LABEL_12;
  }
  if (v7 > 6)
  {
    uint64_t v15 = NFDataCreateWithBytes();
    goto LABEL_14;
  }
  uint64_t v8 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  BOOL v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v9) {
    v9(3, "%s:%i rapdu length too short %d", "UnlockRequestInfo", 903, *((unsigned __int16 *)v5 + 4));
  }
  dispatch_get_specific(*v8);
  __int16 v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    unsigned int v11 = *((unsigned __int16 *)v5 + 4);
    *(_DWORD *)buf = 136446722;
    int v18 = "UnlockRequestInfo";
    __int16 v19 = 1024;
    int v20 = 903;
    __int16 v21 = 1024;
    unsigned int v22 = v11;
    __int16 v12 = "%{public}s:%i rapdu length too short %d";
LABEL_12:
    _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, v12, buf, 0x18u);
  }
LABEL_13:
  uint64_t v15 = 0;
LABEL_14:
  NFDataRelease();
  return v15;
}

void NFDriverUnloadStackAndLeaveHWEnabled(uint64_t a1, char a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i isLoaded=%d", "NFDriverUnloadStackAndLeaveHWEnabled", 90, *(unsigned __int8 *)(a1 + 57));
  }
  dispatch_get_specific(*v4);
  unsigned int v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 57);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "NFDriverUnloadStackAndLeaveHWEnabled";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 90;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v7;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i isLoaded=%d", buf, 0x18u);
  }
  if (!*(unsigned char *)(a1 + 56) && (*(unsigned char *)(*(void *)(a1 + 24) + 576) & 6) != 0)
  {
    v30[0] = -16192608;
    *(_DWORD *)((char *)v30 + 7) = -1;
    memset(buf, 0, 28);
    NFDriverGetControllerInfo(a1, (uint64_t)buf);
    if (*(_DWORD *)&buf[4] <= 0xDu)
    {
      uint64_t v23 = (void **)sub_2229C3DD8(0xBu, v30);
      __int16 v19 = sub_2229C39B8(a1, 37025, (uint64_t)v23, 0);
      uint64_t v20 = sub_2229BFAD8(v19);
      dispatch_get_specific(*v4);
      __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(6, "%s:%i Nuked SE gate info : %llu", "_NFDriverNukeSEGateInfo", 81, v20);
      }
      dispatch_get_specific(*v4);
      unsigned int v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v24 = 136446722;
        __int16 v25 = "_NFDriverNukeSEGateInfo";
        __int16 v26 = 1024;
        int v27 = 81;
        __int16 v28 = 2048;
        uint64_t v29 = v20;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Nuked SE gate info : %llu", v24, 0x1Cu);
      }
      sub_2229BF93C((void **)v19);
      sub_2229C3E74(&v23);
    }
  }
  sub_2229C382C(a1);
  if (*(unsigned char *)(a1 + 57))
  {
    *(unsigned char *)(a1 + 57) = 0;
    uint64_t v8 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v8[2] + 8));
    uint64_t v9 = v8[2];
    ++*(void *)v9;
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
    __int16 v10 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229B007C;
    *(void *)&unsigned char buf[24] = &unk_26463A590;
    char v34 = a2;
    uint64_t v32 = a1;
    __int16 v33 = v8;
    dispatch_async_and_wait(v10, buf);
    if (sub_2229BFAD8(v8))
    {
      dispatch_get_specific(*v4);
      unsigned int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11) {
        v11(3, "%s:%i status=0x%04llX", "NFDriverUnloadStackAndLeaveHWEnabled", 116, *v8);
      }
      dispatch_get_specific(*v4);
      __int16 v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *v8;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverUnloadStackAndLeaveHWEnabled";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 116;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v13;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      uint64_t v14 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229C31BC;
      *(void *)&unsigned char buf[24] = &unk_26463ADD8;
      uint64_t v32 = a1;
      dispatch_async(v14, buf);
    }
    sub_2229BF93C((void **)v8);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536));
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    uint64_t v15 = *(void *)(a1 + 24);
    *(unsigned char *)(v15 + 739) = 0;
    BOOL v16 = *(void **)(v15 + 512);
    if (v16)
    {
      free(v16);
      uint64_t v15 = *(void *)(a1 + 24);
    }
    *(void *)(v15 + 512) = 0;
    uint32_t v17 = *(void **)(v15 + 520);
    if (v17)
    {
      free(v17);
      uint64_t v15 = *(void *)(a1 + 24);
    }
    *(void *)(v15 + 520) = 0;
    int v18 = *(void **)(v15 + 528);
    if (v18)
    {
      free(v18);
      uint64_t v15 = *(void *)(a1 + 24);
    }
    *(void *)(v15 + 528) = 0;
  }
  else
  {
    sub_2229B1938(a1, 0);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536));
  }
}

void sub_2229B007C(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v2 = phLibNfc_RemoteDev_NtfUnregister();
  uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
  if (v2)
  {
    int v4 = v2;
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(4, "%s:%i status=0x%04X", "_Async_NFDriverUnloadStack_block_invoke", 41, v4);
    }
    dispatch_get_specific(*v3);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v16 = "_Async_NFDriverUnloadStack_block_invoke";
      __int16 v17 = 1024;
      int v18 = 41;
      __int16 v19 = 1024;
      unsigned int v20 = v4;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  int v7 = phLibNfc_SE_NtfUnregister();
  if (v7)
  {
    int v8 = v7;
    dispatch_get_specific(*v3);
    uint64_t v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9) {
      v9(4, "%s:%i status=0x%04X", "_Async_NFDriverUnloadStack_block_invoke", 45, v8);
    }
    dispatch_get_specific(*v3);
    __int16 v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v16 = "_Async_NFDriverUnloadStack_block_invoke";
      __int16 v17 = 1024;
      int v18 = 45;
      __int16 v19 = 1024;
      unsigned int v20 = v8;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  unsigned int v11 = phLibNfc_Mgt_DeInitialize();
  if (v11 != 13)
  {
    unsigned int v12 = v11;
    dispatch_get_specific(*v3);
    uint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i status=0x%04X", "_Async_NFDriverUnloadStack_block_invoke", 54, v12);
    }
    dispatch_get_specific(*v3);
    uint64_t v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      BOOL v16 = "_Async_NFDriverUnloadStack_block_invoke";
      __int16 v17 = 1024;
      int v18 = 54;
      __int16 v19 = 1024;
      unsigned int v20 = v12;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v12);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229B032C(uint64_t a1, void **a2, unsigned int a3)
{
  phTmlNfc_IoCtl();
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

uint64_t NFDriverLoadStack(uint64_t a1, unsigned int a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v4 = NFProductAllowsWiredInDLMode();
  BOOL v5 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i isLoaded=%d flags = 0x%x", "NFDriverLoadStack", 409, *(unsigned __int8 *)(a1 + 57), a2);
  }
  dispatch_get_specific(*v5);
  int v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 57);
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "NFDriverLoadStack";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 409;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v8;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = a2;
    _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i isLoaded=%d flags = 0x%x", buf, 0x1Eu);
  }
  if (*(unsigned char *)(a1 + 57)) {
    return 0;
  }
  if (qword_26ABD8420 != -1) {
    dispatch_once(&qword_26ABD8420, &unk_26D522F30);
  }
  uint64_t v10 = *(void *)(a1 + 24);
  *(_DWORD *)(v10 + 576) = a2;
  uint64_t v11 = *(void *)(v10 + 568);
  unsigned int v12 = *(NSObject **)(v10 + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229B0F8C;
  block[3] = &unk_26463A5D0;
  block[4] = v11;
  block[5] = a1;
  dispatch_async_and_wait(v12, block);
  int v13 = v4 & (a2 >> 4);
  if (v13 == 1)
  {
    dispatch_get_specific(*v5);
    uint64_t v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14) {
      v14(6, "%s:%i Flags requested DL mode only.", "NFDriverLoadStack", 452);
    }
    char v53 = 1;
    dispatch_get_specific(*v5);
    uint64_t v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverLoadStack";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 452;
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Flags requested DL mode only.", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v16 = sub_2229B10F8(a1);
    if (!v16)
    {
      unsigned int v52 = 1;
      char v53 = v13;
      goto LABEL_28;
    }
    uint64_t v17 = v16;
    if (!v4 || v16 != 14 && v16 != 2)
    {
      dispatch_get_specific(*v5);
      unsigned int v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v20) {
        v20(3, "%s:%i Stack load failed with 0x%x", "NFDriverLoadStack", 462, v17);
      }
      dispatch_get_specific(*v5);
      uint64_t v21 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverLoadStack";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 462;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v17;
        _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Stack load failed with 0x%x", buf, 0x18u);
      }
      goto LABEL_86;
    }
    char v53 = v13;
    dispatch_get_specific(*v5);
    int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v18) {
      v18(3, "%s:%i Stack load failed with 0x%x, continuing in DL mode.", "NFDriverLoadStack", 459, v17);
    }
    dispatch_get_specific(*v5);
    __int16 v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverLoadStack";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 459;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v17;
      unsigned int v52 = 24;
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Stack load failed with 0x%x, continuing in DL mode.", buf, 0x18u);
      goto LABEL_28;
    }
  }
  unsigned int v52 = 24;
LABEL_28:
  int v22 = 0;
  int v23 = 0;
  int v54 = *(unsigned __int8 *)(a1 + 57);
  while (v23 < 7)
  {
    int v24 = *((_DWORD *)&unk_26D522F50 + 6 * v22);
    if ((v24 & 1) != 0 && *(unsigned char *)(a1 + 58)
      || (v24 & 8) != 0 && !NFProductHasNFCRadio()
      || (v24 & 0x10) != 0 && (*(unsigned char *)(*(void *)(a1 + 24) + 576) & 4) != 0
      || (v24 & 0x20) != 0 && (*(unsigned char *)(*(void *)(a1 + 24) + 576) & 2) != 0
      || !v54 && (v24 & 0x100) == 0)
    {
      dispatch_get_specific(*v5);
      __int16 v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v25) {
        v25(6, "%s:%i Skipping step %d", "_NFDriverLoadStackSteps", 342, v22);
      }
      dispatch_get_specific(*v5);
      __int16 v26 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 342;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v22;
      int v27 = v26;
      goto LABEL_44;
    }
    if ((v24 & 6) == 0)
    {
      dispatch_get_specific(*v5);
      uint64_t v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29) {
        v29(3, "%s:%i Error : function at index %d will never run", "_NFDriverLoadStackSteps", 346, v22);
      }
      dispatch_get_specific(*v5);
      unsigned __int16 v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 346;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v22;
        _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i Error : function at index %d will never run", buf, 0x18u);
      }
    }
    if (*(unsigned char *)(a1 + 56))
    {
      if ((v24 & 4) == 0) {
        goto LABEL_54;
      }
    }
    else if ((v24 & 2) == 0)
    {
LABEL_54:
      dispatch_get_specific(*v5);
      int v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v31) {
        v31(6, "%s:%i Skipping step %d", "_NFDriverLoadStackSteps", 351, v22);
      }
      dispatch_get_specific(*v5);
      uint64_t v32 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 351;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v22;
      int v27 = v32;
LABEL_44:
      _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Skipping step %d", buf, 0x18u);
      goto LABEL_45;
    }
    uint64_t v33 = (*((uint64_t (**)(uint64_t))&unk_26D522F50 + 3 * v22 + 1))(a1);
    if (!v33) {
      goto LABEL_45;
    }
    uint64_t v17 = v33;
    dispatch_get_specific(*v5);
    char v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22 == 21)
    {
      if (v34) {
        v34(3, "%s:%i %s : 0x%x", "_NFDriverLoadStackSteps", 369, unk_26D523158, v17);
      }
      dispatch_get_specific(*v5);
      uint64_t v35 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 369;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = unk_26D523158;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v17;
        int v36 = v35;
        uint64_t v37 = "%{public}s:%i %s : 0x%x";
        uint32_t v38 = 34;
LABEL_69:
        _os_log_impl(&dword_2229A5000, v36, OS_LOG_TYPE_ERROR, v37, buf, v38);
      }
    }
    else
    {
      if (v34) {
        v34(3, "%s:%i Step %d error : 0x%x", "_NFDriverLoadStackSteps", 371, v22, v17);
      }
      dispatch_get_specific(*v5);
      char v39 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 371;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v22;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = v17;
        int v36 = v39;
        uint64_t v37 = "%{public}s:%i Step %d error : 0x%x";
        uint32_t v38 = 30;
        goto LABEL_69;
      }
    }
    if ((v24 & 0x80) != 0 && v17 == 13)
    {
      dispatch_get_specific(*v5);
      uint32_t v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v40) {
        v40(3, "%s:%i Error at step %d, re-initializing", "_NFDriverLoadStackSteps", 374, v22);
      }
      dispatch_get_specific(*v5);
      unsigned int v41 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 374;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v22;
        _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Error at step %d, re-initializing", buf, 0x18u);
      }
      NFDriverUnloadStackAndLeaveHWEnabled(a1, 0);
      uint64_t v42 = sub_2229B10F8(a1);
      if (v42)
      {
        uint64_t v17 = v42;
        dispatch_get_specific(*v5);
        size_t v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v51) {
          v51(3, "%s:%i Re-init failed. Bailing.", "_NFDriverLoadStackSteps", 378);
        }
        dispatch_get_specific(*v5);
        os_log_type_t v44 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 378;
          uint32_t v45 = "%{public}s:%i Re-init failed. Bailing.";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      int v22 = 0;
      ++v23;
    }
    else if ((v24 & 0x40) == 0)
    {
      goto LABEL_85;
    }
LABEL_45:
    if (v22++ >= 22)
    {
      uint64_t v9 = v52;
      if (*(unsigned char *)(a1 + 57)) {
        char v47 = 1;
      }
      else {
        char v47 = v53;
      }
      if (*(unsigned char *)(a1 + 57)) {
        uint64_t v48 = 0;
      }
      else {
        uint64_t v48 = v52;
      }
      if (v47) {
        return v48;
      }
      uint64_t v49 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229C31BC;
      *(void *)&unsigned char buf[24] = &unk_26463ADD8;
      *(void *)&unsigned char buf[32] = a1;
      dispatch_async(v49, buf);
      return v9;
    }
  }
  dispatch_get_specific(*v5);
  uint64_t v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v43) {
    v43(3, "%s:%i Max retries reached.", "_NFDriverLoadStackSteps", 330);
  }
  dispatch_get_specific(*v5);
  os_log_type_t v44 = NFSharedLogGetLogger();
  uint64_t v17 = 16;
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverLoadStackSteps";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 330;
    uint32_t v45 = "%{public}s:%i Max retries reached.";
    uint64_t v17 = 16;
LABEL_84:
    _os_log_impl(&dword_2229A5000, v44, OS_LOG_TYPE_ERROR, v45, buf, 0x12u);
  }
LABEL_85:
  uint64_t v9 = v17;
  if (v53) {
    goto LABEL_87;
  }
LABEL_86:
  int v46 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229C31BC;
  *(void *)&unsigned char buf[24] = &unk_26463ADD8;
  *(void *)&unsigned char buf[32] = a1;
  dispatch_async(v46, buf);
  uint64_t v9 = v17;
LABEL_87:
  if (*(unsigned char *)(a1 + 56)) {
    NFDriverNFCCPowerOff(a1);
  }
  NFDriverUnloadStackAndLeaveHWEnabled(a1, 0);
  return v9;
}

void sub_2229B0EA0()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Running build from (B&I) Stockholm_Base-352.12", "NFDriverLoadStack_block_invoke", 421);
  }
  dispatch_get_specific(*v0);
  int v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    int v4 = "NFDriverLoadStack_block_invoke";
    __int16 v5 = 1024;
    int v6 = 421;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Running build from (B&I) Stockholm_Base-352.12", buf, 0x12u);
  }
}

void sub_2229B0F8C()
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v0 = phLibNfc_Mgt_ConfigureMwLogging();
  if (v0)
  {
    int v1 = v0;
    int v2 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Stack logging failed with 0x%x", "NFDriverLoadStack_block_invoke", 447, v1);
    }
    dispatch_get_specific(*v2);
    int v4 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v6 = "NFDriverLoadStack_block_invoke";
      __int16 v7 = 1024;
      int v8 = 447;
      __int16 v9 = 1024;
      int v10 = v1;
      _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i Stack logging failed with 0x%x", buf, 0x18u);
    }
  }
}

uint64_t sub_2229B10F8(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int v2 = 1;
  uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
  while (1)
  {
    int v4 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
    uint64_t v5 = v4[2];
    ++*(void *)v5;
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
    int v6 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)block = MEMORY[0x263EF8330];
    *(void *)&block[8] = 0x40000000;
    *(void *)&block[16] = sub_2229B1E9C;
    *(void *)&block[24] = &unk_26463A610;
    uint64_t v37 = a1;
    uint32_t v38 = v4;
    dispatch_async_and_wait(v6, block);
    uint64_t v7 = sub_2229BFAD8(v4);
    if (!v7)
    {
      int v11 = 0;
      uint64_t v19 = 0;
      goto LABEL_58;
    }
    if (*(unsigned char *)(*(void *)(a1 + 24) + 740))
    {
      NFDriverGetStackBreadcrumb(a1);
      postAnalyticsMiddlewareExceptionEvent();
    }
    uint64_t v8 = *v4;
    if (*v4 != 67) {
      break;
    }
    dispatch_get_specific(*v3);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i eSE power-on failed! (%d/%d)", "_NFDriverLoadMW", 239, v2, 3);
    }
    dispatch_get_specific(*v3);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)block = 136446978;
      *(void *)&block[4] = "_NFDriverLoadMW";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 239;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v2;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = 3;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i eSE power-on failed! (%d/%d)", block, 0x1Eu);
    }
    if (++v2 == 4)
    {
      int v11 = 0;
LABEL_57:
      uint64_t v19 = 1;
      goto LABEL_58;
    }
  }
  if (v8 <= 136)
  {
    if ((unint64_t)(v8 - 128) < 2)
    {
      dispatch_get_specific(*v3);
      unsigned int v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12) {
        v12(3, "%s:%i Incompatible firmware !", "_NFDriverLoadMW", 244);
      }
      dispatch_get_specific(*v3);
      int v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(void *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 244;
        uint64_t v14 = "%{public}s:%i Incompatible firmware !";
        uint64_t v15 = v13;
        uint32_t v16 = 18;
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v8 == 136)
    {
      unsigned __int16 v35 = 0;
      int v34 = 136;
      sub_2229C8D00(a1, 0, 0, 0, &v35, &v34);
      dispatch_get_specific(*v3);
      unsigned int v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v20) {
        v20(3, "%s:%i Error 0x%x using API %d - requires a new firmware !", "_NFDriverLoadMW", 270, v35, v34);
      }
      dispatch_get_specific(*v3);
      uint64_t v21 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446978;
        *(void *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 270;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v35;
        *(_WORD *)&block[24] = 1024;
        *(_DWORD *)&block[26] = v34;
        uint64_t v14 = "%{public}s:%i Error 0x%x using API %d - requires a new firmware !";
        uint64_t v15 = v21;
        uint32_t v16 = 30;
LABEL_33:
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, v14, block, v16);
      }
LABEL_34:
      int v11 = 0;
      uint64_t v19 = 2;
      goto LABEL_58;
    }
    goto LABEL_52;
  }
  switch(v8)
  {
    case 137:
      unsigned __int16 v35 = 0;
      int v34 = 136;
      sub_2229C8D00(a1, 0, 0, 0, &v35, &v34);
      dispatch_get_specific(*v3);
      int v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22) {
        v22(3, "%s:%i Error 0x%x using API %d - requires a reboot !", "_NFDriverLoadMW", 278, v35, v34);
      }
      dispatch_get_specific(*v3);
      int v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446978;
        *(void *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 278;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v35;
        *(_WORD *)&block[24] = 1024;
        *(_DWORD *)&block[26] = v34;
        _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Error 0x%x using API %d - requires a reboot !", block, 0x1Eu);
      }
      int v24 = phTmlNfc_IoCtl();
      unsigned __int16 v35 = v24;
      if (v24)
      {
        dispatch_get_specific(*v3);
        __int16 v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v25) {
          v25(3, "%s:%i Error 0x%x powering off !", "_NFDriverLoadMW", 284, v35);
        }
        dispatch_get_specific(*v3);
        __int16 v26 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)block = 136446722;
          *(void *)&block[4] = "_NFDriverLoadMW";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 284;
          *(_WORD *)&block[18] = 1024;
          *(_DWORD *)&block[20] = v35;
          _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Error 0x%x powering off !", block, 0x18u);
        }
        if (v35) {
          __assert_rtn("_NFDriverLoadMW", "NFDriverStackInit.c", 285, "NFCSTATUS_OK == lastStatus");
        }
      }
      int v11 = 0;
      uint64_t v19 = 16;
      break;
    case 153:
      dispatch_get_specific(*v3);
      int v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27) {
        v27(3, "%s:%i DL session already open.", "_NFDriverLoadMW", 248);
      }
      dispatch_get_specific(*v3);
      __int16 v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(void *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 248;
        _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i DL session already open.", block, 0x12u);
      }
      int v11 = 0;
      uint64_t v19 = 14;
      break;
    case 180:
      dispatch_get_specific(*v3);
      uint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v17) {
        v17(3, "%s:%i Follower ID unresponsive!", "_NFDriverLoadMW", 259);
      }
      dispatch_get_specific(*v3);
      int v18 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(void *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 259;
        _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i Follower ID unresponsive!", block, 0x12u);
      }
      if (NFIsInternalBuild() && !*(unsigned char *)(a1 + 56))
      {
        uint64_t v19 = 17;
        if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)block = 0;
          _os_log_fault_impl(&dword_2229A5000, MEMORY[0x263EF8438], OS_LOG_TYPE_FAULT, "Stockholm SPMI unresponsive", block, 2u);
        }
        int v11 = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v19 = 17;
      }
      break;
    default:
LABEL_52:
      dispatch_get_specific(*v3);
      uint64_t v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29) {
        v29(3, "%s:%i status=0x%04llX", "_NFDriverLoadMW", 289, *v4);
      }
      dispatch_get_specific(*v3);
      unsigned __int16 v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = *v4;
        *(_DWORD *)block = 136446722;
        *(void *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 289;
        *(_WORD *)&block[18] = 2048;
        *(void *)&block[20] = v31;
        _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", block, 0x1Cu);
      }
      int v11 = 1;
      goto LABEL_57;
  }
LABEL_58:
  sub_2229BF93C((void **)v4);
  if (*(unsigned char *)(*(void *)(a1 + 24) + 740)) {
    resetCALoadStackExceptionCount();
  }
  if (!v11)
  {
    if (v7) {
      return v19;
    }
    goto LABEL_66;
  }
  int v32 = sub_2229C35F0(a1);
  if (v32) {
    uint64_t v19 = 16;
  }
  else {
    uint64_t v19 = v19;
  }
  if (!v7 && !v32)
  {
LABEL_66:
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 57) = 1;
  }
  return v19;
}

uint64_t sub_2229B1938(uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v4 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  uint64_t v5 = v4[2];
  ++*(void *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  int v6 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    if (a2) {
      uint64_t v8 = "Enabling";
    }
    else {
      uint64_t v8 = "Deactivating";
    }
    Logger(6, "%s:%i %s SE in DL mode", "_NFDriverConfigureSEInDownload", 923, v8);
  }
  dispatch_get_specific(*v6);
  __int16 v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      int v10 = "Enabling";
    }
    else {
      int v10 = "Deactivating";
    }
    *(_DWORD *)buf = 136446722;
    __int16 v25 = "_NFDriverConfigureSEInDownload";
    __int16 v26 = 1024;
    int v27 = 923;
    __int16 v28 = 2080;
    uint64_t v29 = v10;
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s SE in DL mode", buf, 0x1Cu);
  }
  int v11 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229B1C8C;
  block[3] = &unk_26463A5F0;
  char v23 = a2;
  block[4] = a1;
  block[5] = v4;
  dispatch_async_and_wait(v11, block);
  uint64_t v12 = sub_2229BFAD8(v4);
  dispatch_get_specific(*v6);
  int v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v12)
  {
    if (v13)
    {
      if (a2) {
        uint64_t v14 = "enable";
      }
      else {
        uint64_t v14 = "deactivate";
      }
      v13(3, "%s:%i Failed to %s SE in DL mode.", "_NFDriverConfigureSEInDownload", 943, v14);
    }
    dispatch_get_specific(*v6);
    uint64_t v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (a2) {
        uint32_t v16 = "enable";
      }
      else {
        uint32_t v16 = "deactivate";
      }
      *(_DWORD *)buf = 136446722;
      __int16 v25 = "_NFDriverConfigureSEInDownload";
      __int16 v26 = 1024;
      int v27 = 943;
      __int16 v28 = 2080;
      uint64_t v29 = v16;
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to %s SE in DL mode.", buf, 0x1Cu);
    }
    uint64_t v17 = 1;
  }
  else
  {
    if (v13)
    {
      if (a2) {
        int v18 = "Enabled";
      }
      else {
        int v18 = "deactivated";
      }
      v13(6, "%s:%i SE %s in download mode", "_NFDriverConfigureSEInDownload", 946, v18);
    }
    dispatch_get_specific(*v6);
    uint64_t v19 = NFSharedLogGetLogger();
    uint64_t v17 = 0;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        unsigned int v20 = "Enabled";
      }
      else {
        unsigned int v20 = "deactivated";
      }
      *(_DWORD *)buf = 136446722;
      __int16 v25 = "_NFDriverConfigureSEInDownload";
      __int16 v26 = 1024;
      int v27 = 946;
      __int16 v28 = 2080;
      uint64_t v29 = v20;
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE %s in download mode", buf, 0x1Cu);
      uint64_t v17 = 0;
    }
  }
  sub_2229BF93C((void **)v4);
  return v17;
}

void sub_2229B1C8C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_eSeCfgDnldMode();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_NFDriverConfigureSEInDownload_block_invoke", 936, v3);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v8 = "_NFDriverConfigureSEInDownload_block_invoke";
      __int16 v9 = 1024;
      int v10 = 936;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229B1DF0(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

uint64_t sub_2229B1E38(uint64_t a1)
{
  v2[4] = xmmword_2229E7E28;
  v2[5] = unk_2229E7E38;
  v2[6] = xmmword_2229E7E48;
  memset(&v2[7], 0, 80);
  v2[0] = *(_OWORD *)"\nOSE.VAS.01";
  v2[1] = unk_2229E7DF8;
  v2[2] = xmmword_2229E7E08;
  v2[3] = unk_2229E7E18;
  uint64_t v3 = 6;
  return sub_2229CAA68(a1, (uint64_t)v2);
}

void sub_2229B1E9C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  NFIsRestoreOS();
  NFGetProductType();
  unsigned int v2 = phLibNfc_Mgt_Initialize();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverLoadMW_block_invoke", 204, v3);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v8 = "_Async_NFDriverLoadMW_block_invoke";
      __int16 v9 = 1024;
      int v10 = 204;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229B2068(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

BOOL sub_2229B20A8(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 57))
  {
    unsigned int v2 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v2[2] + 8));
    uint64_t v3 = v2[2];
    ++*(void *)v3;
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
    int v4 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v19 = 0x40000000;
    unsigned int v20 = sub_2229B53BC;
    uint64_t v21 = &unk_26463A630;
    uint64_t v22 = a1;
    char v23 = v2;
    dispatch_async_and_wait(v4, &block);
    if (sub_2229BFAD8(v2))
    {
      uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i failed to register for notifications: 0x%04llX", "_NFDriverRegisterNCINotifications", 897, *v2);
      }
      dispatch_get_specific(*v5);
      uint64_t v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *v2;
        *(_DWORD *)buf = 136446722;
        __int16 v25 = "_NFDriverRegisterNCINotifications";
        __int16 v26 = 1024;
        int v27 = 897;
        __int16 v28 = 2048;
        uint64_t v29 = v8;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to register for notifications: 0x%04llX", buf, 0x1Cu);
      }
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    sub_2229BF93C((void **)v2);
  }
  else
  {
    int v10 = (void **)sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)((char *)v10[2] + 8));
    __int16 v11 = (char *)v10[2];
    ++*(void *)v11;
    pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
    unsigned int v12 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v19 = 0x40000000;
    unsigned int v20 = sub_2229B5794;
    uint64_t v21 = &unk_26463A650;
    uint64_t v22 = a1;
    char v23 = v10;
    dispatch_async_and_wait(v12, &block);
    if (sub_2229BFAD8((uint64_t *)v10))
    {
      uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14) {
        v14(3, "%s:%i failed to register for notifications: 0x%04llX", "_NFDriverRegisterFWDLNotifications", 978, *v10);
      }
      dispatch_get_specific(*v13);
      uint64_t v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint32_t v16 = *v10;
        *(_DWORD *)buf = 136446722;
        __int16 v25 = "_NFDriverRegisterFWDLNotifications";
        __int16 v26 = 1024;
        int v27 = 978;
        __int16 v28 = 2048;
        uint64_t v29 = (uint64_t)v16;
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to register for notifications: 0x%04llX", buf, 0x1Cu);
      }
      sub_2229BF93C(v10);
      return 1;
    }
    else
    {
      sub_2229BF93C(v10);
      return sub_2229B1938(a1, 1) != 0;
    }
  }
  return v9;
}

uint64_t sub_2229B23D8(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  if (*(unsigned char *)(a1 + 57))
  {
    unsigned int v2 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_2229B58D4;
    block[3] = &unk_26463A678;
    block[4] = &v14;
    block[5] = a1;
    dispatch_async_and_wait(v2, block);
  }
  else
  {
    uint64_t v18 = 0;
    long long v19 = 0uLL;
    int v20 = 0;
    if (NFDriverGetControllerInfo(a1, (uint64_t)&v18))
    {
      uint64_t v3 = *(void *)(a1 + 24);
      char v4 = v19;
      *(_DWORD *)(v3 + 604) = v18;
      *(unsigned char *)(v3 + 608) = v20;
      *(unsigned char *)(v3 + 641) = v4;
      *(void *)(v3 + 596) = *(void *)((char *)&v19 + 4);
    }
    else
    {
      uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(4, "%s:%i failed to get stack info", "_NFDriverSetControllerInfo", 560);
      }
      dispatch_get_specific(*v5);
      uint64_t v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "_NFDriverSetControllerInfo";
        __int16 v23 = 1024;
        int v24 = 560;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to get stack info", buf, 0x12u);
      }
      *((_DWORD *)v15 + 6) = 1;
    }
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(_DWORD *)(v8 + 732) = sub_2229C8060(*(_DWORD *)(v8 + 604), *(unsigned __int8 *)(v8 + 608));
  int v9 = *(_DWORD *)(v8 + 668);
  if (v9 == 2)
  {
    LOBYTE(ControllerInfo) = 1;
  }
  else if (v9 == 1 {
         || (v18 = 0, long long v19 = 0uLL, v20 = 0, (ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)&v18)) != 0)
  }
         && ((HIDWORD(v18) & 0xFFFFFFFE) != 4 || (BYTE4(v19) & 0xE0u) - 160 > 0x3F))
  {
    LOBYTE(ControllerInfo) = 0;
  }
  *(unsigned char *)(a1 + 58) = ControllerInfo;
  sub_2229C5AD0(a1);
  phOsalNfc_setHardwareType();
  uint64_t v11 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v11;
}

uint64_t sub_2229B2640(uint64_t a1)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  int v28 = *(_DWORD *)(*(void *)(a1 + 24) + 576);
  *(_DWORD *)&buf[16] = -232427879;
  *(_OWORD *)buf = xmmword_2229E7EB0;
  char v27 = MGIsDeviceOneOfType();
  int v62 = -427474227;
  long long v61 = xmmword_2229E7EC4;
  char v26 = MGIsDeviceOneOfType();
  int v60 = 1477534141;
  long long v59 = xmmword_2229E7ED8;
  char v25 = MGIsDeviceOneOfType();
  int v58 = -1843102369;
  long long v57 = xmmword_2229E7EEC;
  char v24 = MGIsDeviceOneOfType();
  int v56 = 710807826;
  long long v55 = xmmword_2229E7F00;
  char v23 = MGIsDeviceOneOfType();
  int v54 = 470738981;
  long long v53 = xmmword_2229E7F14;
  char v22 = MGIsDeviceOneOfType();
  int v52 = -2085056298;
  long long v51 = xmmword_2229E7F28;
  char v2 = MGIsDeviceOneOfType();
  int v50 = 1860682089;
  long long v49 = xmmword_2229E7F3C;
  char v3 = MGIsDeviceOneOfType();
  int v48 = 2030516999;
  long long v47 = xmmword_2229E7F50;
  char v4 = MGIsDeviceOneOfType();
  int v46 = -762483149;
  long long v45 = xmmword_2229E7F64;
  char v5 = MGIsDeviceOneOfType();
  int v44 = -1276010597;
  long long v43 = xmmword_2229E7F78;
  char v6 = MGIsDeviceOneOfType();
  int v42 = -1926937532;
  long long v41 = xmmword_2229E7F8C;
  char v7 = MGIsDeviceOneOfType();
  int v40 = -1902732724;
  long long v39 = xmmword_2229E7FA0;
  char v8 = MGIsDeviceOneOfType();
  int v38 = 300442574;
  long long v37 = xmmword_2229E7FB4;
  char v9 = MGIsDeviceOneOfType();
  int v36 = -342357580;
  long long v35 = xmmword_2229E7FC8;
  char v10 = MGIsDeviceOneOfType();
  int v34 = -1294188889;
  long long v33 = xmmword_2229E7FDC;
  char v11 = MGIsDeviceOneOfType();
  if (*(_DWORD *)a1 != 3)
  {
    if ((v28 & 2) != 0) {
      int v12 = 6;
    }
    else {
      int v12 = 5;
    }
    if (((v11 | v10 | v9 | v8 | v7 | v6 | v5 | v4 | v3 | v2 | v22) | (v23 | v24 | v25 | v26 | v27))) {
      int v13 = v12;
    }
    else {
      int v13 = 5;
    }
    uint64_t v14 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v14[2] + 8));
    uint64_t v15 = v14[2];
    ++*(void *)v15;
    pthread_mutex_unlock((pthread_mutex_t *)(v15 + 8));
    uint64_t v16 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_2229B5A08;
    block[3] = &unk_26463A698;
    int v30 = v13;
    block[4] = a1;
    block[5] = v14;
    dispatch_async_and_wait(v16, block);
    if (sub_2229BFAD8(v14))
    {
      int v17 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i failed to set baud rate: 0x%04llX", "_NFDriverConfigureBaudRate", 716, *v14);
      }
      dispatch_get_specific(*v17);
      long long v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *v14;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverConfigureBaudRate";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 716;
        *(_WORD *)&buf[18] = 2048;
        uint64_t v32 = v20;
        _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to set baud rate: 0x%04llX", buf, 0x1Cu);
      }
    }
    sub_2229BF93C((void **)v14);
  }
  return 0;
}

uint64_t sub_2229B2B44(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v14 = 1;
  memset(v11, 0, sizeof(v11));
  int v12 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v11);
  uint64_t v2 = 0;
  if (HIDWORD(v11[0]) >= 5)
  {
    if (HIDWORD(v11[0]) == 5 && *(unsigned char *)(a1 + 58))
    {
      return 0;
    }
    else
    {
      char v3 = sub_2229C3DD8(1u, &v14);
      int v13 = (void **)v3;
      char v4 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i %s CRC", "_NFDriverEnableCRC", 745, "Enabling");
      }
      dispatch_get_specific(*v4);
      char v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v16 = "_NFDriverEnableCRC";
        __int16 v17 = 1024;
        int v18 = 745;
        __int16 v19 = 2080;
        uint64_t v20 = "Enabling";
        _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s CRC", buf, 0x1Cu);
      }
      char v7 = sub_2229C39B8(a1, 226, (uint64_t)v3, 0);
      if (sub_2229BFAD8(v7))
      {
        dispatch_get_specific(*v4);
        char v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v8) {
          v8(3, "%s:%i Failed to %s NFCC CRC", "_NFDriverEnableCRC", 749, "enable");
        }
        dispatch_get_specific(*v4);
        char v9 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v16 = "_NFDriverEnableCRC";
          __int16 v17 = 1024;
          int v18 = 749;
          __int16 v19 = 2080;
          uint64_t v20 = "enable";
          _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to %s NFCC CRC", buf, 0x1Cu);
        }
        if (*v7 == 137) {
          uint64_t v2 = 13;
        }
        else {
          uint64_t v2 = 1;
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      sub_2229BF93C((void **)v7);
      sub_2229C3E74(&v13);
    }
  }
  return v2;
}

uint64_t sub_2229B2DA0(uint64_t a1)
{
  int v2 = 1;
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v3 = (const void **)MEMORY[0x263F8C6C0];
  while (1)
  {
    char v4 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
    uint64_t v5 = v4[2];
    ++*(void *)v5;
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
    char v6 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)uint64_t block = MEMORY[0x263EF8330];
    *(void *)&block[8] = 0x40000000;
    *(void *)&block[16] = sub_2229B5B98;
    *(void *)&block[24] = &unk_26463A6B8;
    uint64_t v19 = a1;
    uint64_t v20 = v4;
    dispatch_async_and_wait(v6, block);
    if (!sub_2229BFAD8(v4))
    {
      uint64_t v13 = 0;
      goto LABEL_24;
    }
    if (*v4 == 67)
    {
      dispatch_get_specific(*v3);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i eSE power-on failed! (%d/%d)", "_NFDriverValidateEEPROM", 808, v2, 3);
      }
      dispatch_get_specific(*v3);
      int v12 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
      *(_DWORD *)uint64_t block = 136446978;
      *(void *)&block[4] = "_NFDriverValidateEEPROM";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 808;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v2;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = 3;
      char v9 = v12;
      char v10 = "%{public}s:%i eSE power-on failed! (%d/%d)";
      goto LABEL_13;
    }
    if (*v4 != 255) {
      break;
    }
    dispatch_get_specific(*v3);
    char v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7) {
      v7(3, "%s:%i EEPROM validation failed (%d/%d)", "_NFDriverValidateEEPROM", 806, v2, 3);
    }
    dispatch_get_specific(*v3);
    char v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    *(_DWORD *)uint64_t block = 136446978;
    *(void *)&block[4] = "_NFDriverValidateEEPROM";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 806;
    *(_WORD *)&block[18] = 1024;
    *(_DWORD *)&block[20] = v2;
    *(_WORD *)&block[24] = 1024;
    *(_DWORD *)&block[26] = 3;
    char v9 = v8;
    char v10 = "%{public}s:%i EEPROM validation failed (%d/%d)";
LABEL_13:
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, v10, block, 0x1Eu);
LABEL_14:
    sub_2229BF93C((void **)v4);
    if (++v2 == 4) {
      return 1;
    }
  }
  dispatch_get_specific(*v3);
  char v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v14) {
    v14(3, "%s:%i failed to validate EEPROM: 0x%04llX", "_NFDriverValidateEEPROM", 818, *v4);
  }
  dispatch_get_specific(*v3);
  uint64_t v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = *v4;
    *(_DWORD *)uint64_t block = 136446722;
    *(void *)&block[4] = "_NFDriverValidateEEPROM";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 818;
    *(_WORD *)&block[18] = 2048;
    *(void *)&block[20] = v16;
    _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to validate EEPROM: 0x%04llX", block, 0x1Cu);
  }
  if (*v4 == 137) {
    uint64_t v13 = 13;
  }
  else {
    uint64_t v13 = 1;
  }
LABEL_24:
  sub_2229BF93C((void **)v4);
  return v13;
}

uint64_t sub_2229B3124(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v14 = 16864417;
  memset(v11, 0, sizeof(v11));
  int v12 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v11)) {
    return 8;
  }
  if (HIDWORD(v11[0]) < 8 || (*(unsigned char *)(*(void *)(a1 + 24) + 571) & 0x10) == 0) {
    return 0;
  }
  char v3 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Enabling write counters", "_NFDriverEnableWriteCounters", 1687);
  }
  dispatch_get_specific(*v3);
  uint64_t v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v16 = "_NFDriverEnableWriteCounters";
    __int16 v17 = 1024;
    int v18 = 1687;
    _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling write counters", buf, 0x12u);
  }
  uint64_t v13 = (void **)sub_2229C3DD8(4u, &v14);
  char v6 = sub_2229C39B8(a1, 37025, (uint64_t)v13, 0);
  if (sub_2229BFAD8(v6))
  {
    dispatch_get_specific(*v3);
    char v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7) {
      v7(3, "%s:%i Failed to enable write counters status:0x%08llx", "_NFDriverEnableWriteCounters", 1695, *v6);
    }
    dispatch_get_specific(*v3);
    char v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *v6;
      *(_DWORD *)buf = 136446722;
      uint64_t v16 = "_NFDriverEnableWriteCounters";
      __int16 v17 = 1024;
      int v18 = 1695;
      __int16 v19 = 2048;
      uint64_t v20 = v9;
      _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to enable write counters status:0x%08llx", buf, 0x1Cu);
    }
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_2229BF93C((void **)v6);
  sub_2229C3E74(&v13);
  return v2;
}

uint64_t sub_2229B335C(uint64_t a1)
{
  uint64_t result = sub_2229C9E80(a1);
  if (!*(unsigned char *)(a1 + 57)) {
    *(_DWORD *)(a1 + 44) = 1;
  }
  return result;
}

uint64_t sub_2229B3390(uint64_t a1)
{
  return sub_2229E0DDC(a1, (uint64_t)&unk_2229E7FF0);
}

uint64_t sub_2229B339C(uint64_t a1)
{
  return sub_2229E1134(a1, (uint64_t)&unk_2229E8048);
}

uint64_t sub_2229B33A8(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  memset(v12, 0, sizeof(v12));
  int v13 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v12)) {
    return 8;
  }
  if (HIDWORD(v12[0]) > 6)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 24) + 568);
    char v8 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if ((v7 & 0x2000000) != 0)
    {
      if (Logger) {
        Logger(4, "%s:%i LPCD assist disabled!", "_NFDriverEnableLpcdAssist", 1637);
      }
      dispatch_get_specific(*v8);
      char v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v15 = "_NFDriverEnableLpcdAssist";
        __int16 v16 = 1024;
        int v17 = 1637;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i LPCD assist disabled!", buf, 0x12u);
      }
      uint64_t result = 0;
      *(_DWORD *)(*(void *)(a1 + 24) + 580) = 0;
    }
    else
    {
      if (Logger) {
        Logger(6, "%s:%i enabling LPCD assist", "_NFDriverEnableLpcdAssist", 1655);
      }
      dispatch_get_specific(*v8);
      char v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v15 = "_NFDriverEnableLpcdAssist";
        __int16 v16 = 1024;
        int v17 = 1655;
        _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enabling LPCD assist", buf, 0x12u);
      }
      uint64_t result = 0;
      *(_DWORD *)(*(void *)(a1 + 24) + 580) = 1;
    }
  }
  else
  {
    uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    char v3 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v3) {
      v3(6, "%s:%i Device does not support this feature", "_NFDriverEnableLpcdAssist", 1632);
    }
    dispatch_get_specific(*v2);
    char v4 = NFSharedLogGetLogger();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v15 = "_NFDriverEnableLpcdAssist";
      __int16 v16 = 1024;
      int v17 = 1632;
      _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_2229B3638(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unsigned int v2 = NFGetProductType();
  if (v2 <= 0xA && ((1 << v2) & 0x554) != 0)
  {
    __int16 v3 = sub_2229C5B30(a1, 2);
    v10[0] = HIBYTE(v3);
    v10[1] = v3;
    __int16 v11 = 1793;
    uint64_t v9 = (void **)sub_2229C3DD8(4u, v10);
    char v4 = sub_2229C39B8(a1, 37025, (uint64_t)v9, 0);
    if (sub_2229BFAD8(v4))
    {
      BOOL v5 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to setup CLK timeout config", "_NFDriverSetupRFClockTimeout", 1118);
      }
      dispatch_get_specific(*v5);
      uint64_t v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v13 = "_NFDriverSetupRFClockTimeout";
        __int16 v14 = 1024;
        int v15 = 1118;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup CLK timeout config", buf, 0x12u);
      }
    }
    sub_2229BF93C((void **)v4);
    sub_2229C3E74(&v9);
  }
  return 0;
}

uint64_t sub_2229B37B4(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 568);
  if (v2) {
    int v3 = 2050;
  }
  else {
    int v3 = 0;
  }
  if ((v2 & 2) != 0) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  if ((~*(_DWORD *)(*(void *)(a1 + 24) + 568) & 3) != 0) {
    int v5 = v4;
  }
  else {
    int v5 = 2175;
  }
  unsigned int v6 = (v2 >> 4) & 0x200 | (v2 >> 10) & 0x1400 | (v2 >> 6) & 0x100 | v5;
  uint64_t v7 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v7[2] + 8));
  uint64_t v8 = v7[2];
  ++*(void *)v8;
  pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
  uint64_t v9 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)uint64_t block = MEMORY[0x263EF8330];
  *(void *)&block[8] = 0x40000000;
  *(void *)&block[16] = sub_2229B5D1C;
  *(void *)&block[24] = &unk_26463A6D8;
  unsigned int v19 = v6;
  uint64_t v17 = a1;
  uint64_t v18 = v7;
  dispatch_async_and_wait(v9, block);
  if (sub_2229BFAD8(v7))
  {
    char v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to configure RF logging : 0x%04llX", "_NFDriverConfigureRFLogging", 1186, *v7);
    }
    dispatch_get_specific(*v10);
    int v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *v7;
      *(_DWORD *)uint64_t block = 136446722;
      *(void *)&block[4] = "_NFDriverConfigureRFLogging";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 1186;
      *(_WORD *)&block[18] = 2048;
      *(void *)&block[20] = v13;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure RF logging : 0x%04llX", block, 0x1Cu);
    }
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_2229BF93C((void **)v7);
  return v14;
}

uint64_t sub_2229B39C0(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v15 = 0;
  __int16 v14 = 900;
  if (*(unsigned char *)(*(void *)(a1 + 24) + 571))
  {
    if ((NFIsRestoreOS() & 1) != 0 || !NFProductHasThermistor() || *(unsigned char *)(a1 + 56))
    {
      return 0;
    }
    else
    {
      memset(v11, 0, sizeof(v11));
      int v12 = 0;
      NFDriverGetControllerInfo(a1, (uint64_t)v11);
      uint64_t v1 = 0;
      if (HIDWORD(v11[0]) >= 0xC)
      {
        if (HIDWORD(v11[0]) == 16) {
          char v15 = 1;
        }
        uint64_t v13 = (void **)sub_2229C3DD8(3u, &v14);
        int v4 = sub_2229C39B8(a1, 242, (uint64_t)v13, 0);
        uint64_t v5 = sub_2229BFAD8(v4);
        unsigned int v6 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v5)
        {
          if (Logger) {
            Logger(3, "%s:%i Failed to configure Temperature monitoring : 0x%04llX", "_NFDriverConfigureTemperatureNotifications", 1232, *v4);
          }
          dispatch_get_specific(*v6);
          uint64_t v8 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = *v4;
            *(_DWORD *)buf = 136446722;
            uint64_t v17 = "_NFDriverConfigureTemperatureNotifications";
            __int16 v18 = 1024;
            int v19 = 1232;
            __int16 v20 = 2048;
            uint64_t v21 = v9;
            _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure Temperature monitoring : 0x%04llX", buf, 0x1Cu);
          }
          if (*v4 == 137) {
            uint64_t v1 = 13;
          }
          else {
            uint64_t v1 = 1;
          }
        }
        else
        {
          if (Logger) {
            Logger(6, "%s:%i Temperature monitoring configured", "_NFDriverConfigureTemperatureNotifications", 1235);
          }
          dispatch_get_specific(*v6);
          char v10 = NFSharedLogGetLogger();
          uint64_t v1 = 0;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v17 = "_NFDriverConfigureTemperatureNotifications";
            __int16 v18 = 1024;
            int v19 = 1235;
            _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Temperature monitoring configured", buf, 0x12u);
            uint64_t v1 = 0;
          }
        }
        sub_2229BF93C((void **)v4);
        sub_2229C3E74(&v13);
      }
    }
  }
  return v1;
}

uint64_t sub_2229B3C34(uint64_t a1)
{
  v53[2] = *MEMORY[0x263EF8340];
  long long v41 = 0;
  int v42 = 0;
  char v40 = 11;
  __int16 v39 = -24319;
  *(void *)((char *)v53 + 5) = 0x294A0000000;
  v53[0] = 0x64010A0BA1;
  if ((NFProductIsWatch() & 1) != 0
    || (NFIsRestoreOS() & 1) != 0
    || !NFProductHasThermistor()
    || *(unsigned char *)(a1 + 56))
  {
    return 0;
  }
  memset(v37, 0, sizeof(v37));
  int v38 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v37);
  uint64_t v2 = 0;
  if (HIDWORD(v37[0]) != 16) {
    return v2;
  }
  int v42 = (void **)sub_2229C3DD8(3u, &v39);
  long long v41 = (void **)sub_2229C3DD8(v39 << 8, 0);
  int v4 = sub_2229C39B8(a1, 37026, (uint64_t)v42, (uint64_t)v41);
  uint64_t v5 = sub_2229BFAD8(v4);
  unsigned int v6 = (const void **)MEMORY[0x263F8C6C0];
  if (v5)
  {
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to get RF settings.", "_NFDriverConfigureAIOTemperatureRestriction", 1278);
    }
    dispatch_get_specific(*v6);
    uint64_t v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1278;
      _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings.", buf, 0x12u);
    }
    sub_2229C3E74(&v42);
    sub_2229C3E74(&v41);
    sub_2229BF93C((void **)v4);
    return 1;
  }
  sub_2229BF93C((void **)v4);
  sub_2229C3E74(&v42);
  long long v52 = 0u;
  memset(buf, 0, sizeof(buf));
  unint64_t v9 = *((unsigned int *)v41 + 2);
  int v36 = *v41;
  dispatch_get_specific(*v6);
  char v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  dispatch_get_specific(*v6);
  __int16 v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *((unsigned int *)v41 + 2);
    *(_DWORD *)long long v43 = 136315906;
    int v44 = (uint8_t *)"_NFDriverConfigureAIOTemperatureRestriction";
    __int16 v45 = 1024;
    int v46 = 1287;
    __int16 v47 = 2082;
    int v48 = "Thresholds are :";
    __int16 v49 = 2048;
    uint64_t v50 = v12;
    _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v43, 0x26u);
  }
  if (v10) {
    v10(6, "%s:%i %s %lu bytes :", "_NFDriverConfigureAIOTemperatureRestriction", 1287, "Thresholds are :", *((unsigned int *)v41 + 2));
  }
  if (v9)
  {
    uint64_t v13 = 0;
    do
    {
      unint64_t v14 = 0;
      char v15 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v13)];
      do
      {
        unint64_t v16 = v14 + 1;
        unint64_t v17 = v14 + 1 + v13;
        int v18 = sprintf(v15, "0x%02X ", v36[v13 + v14]);
        if (v14 > 6) {
          break;
        }
        v15 += v18;
        ++v14;
      }
      while (v17 < v9);
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v43 = 136446210;
        int v44 = buf;
        _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", v43, 0xCu);
      }
      if (v10) {
        v10(6, "%s", (const char *)buf);
      }
      v13 += v16;
    }
    while (v17 < v9);
  }
  if (*((_DWORD *)v41 + 2) > 0xDu)
  {
    char v23 = *v41;
    __int16 v20 = (const void **)MEMORY[0x263F8C6C0];
    if (*((unsigned char *)*v41 + 4))
    {
      if (!*((unsigned char *)*v41 + 5) && !v23[6])
      {
LABEL_41:
        if (v23[10] || v23[11])
        {
          dispatch_get_specific(*v20);
          char v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v26) {
            v26(6, "%s:%i Re-using exit threhold", "_NFDriverConfigureAIOTemperatureRestriction", 1309);
          }
          dispatch_get_specific(*v20);
          char v27 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1309;
            _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Re-using exit threhold", buf, 0x12u);
          }
          *(_WORD *)((char *)&v53[1] + 1) = *((_WORD *)*v41 + 5);
        }
        goto LABEL_48;
      }
      if (v23[10] || v23[11])
      {
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v34) {
          v34(6, "%s:%i Setting already present - not updating", "_NFDriverConfigureAIOTemperatureRestriction", 1297);
        }
        dispatch_get_specific(*v20);
        long long v35 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1297;
          _os_log_impl(&dword_2229A5000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting already present - not updating", buf, 0x12u);
        }
        sub_2229C3E74(&v41);
        return 0;
      }
    }
    if (*((unsigned char *)*v41 + 5) || v23[6])
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      char v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24) {
        v24(6, "%s:%i Re-using entry threhold", "_NFDriverConfigureAIOTemperatureRestriction", 1303);
      }
      dispatch_get_specific(*v20);
      char v25 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1303;
        _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Re-using entry threhold", buf, 0x12u);
      }
      char v23 = *v41;
      WORD2(v53[0]) = *(_WORD *)((char *)*v41 + 5);
    }
    goto LABEL_41;
  }
  __int16 v20 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21) {
    v21(3, "%s:%i Unexpected length, using custom settings...", "_NFDriverConfigureAIOTemperatureRestriction", 1293);
  }
  dispatch_get_specific(*v20);
  uint64_t v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1293;
    _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length, using custom settings...", buf, 0x12u);
  }
LABEL_48:
  sub_2229C3E74(&v41);
  int v42 = (void **)sub_2229C3DD8(0xDu, v53);
  int v28 = sub_2229C39B8(a1, 37025, (uint64_t)v42, 0);
  uint64_t v29 = sub_2229BFAD8(v28);
  dispatch_get_specific(*v20);
  int v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v29)
  {
    if (v30) {
      v30(3, "%s:%i Failed to configure Temperature restrictor : 0x%04llX", "_NFDriverConfigureAIOTemperatureRestriction", 1321, *v28);
    }
    dispatch_get_specific(*v20);
    uint64_t v31 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *v28;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1321;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v32;
      _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure Temperature restrictor : 0x%04llX", buf, 0x1Cu);
    }
    if (*v28 == 137) {
      uint64_t v2 = 13;
    }
    else {
      uint64_t v2 = 1;
    }
  }
  else
  {
    if (v30) {
      v30(6, "%s:%i Temperature restrictor configured", "_NFDriverConfigureAIOTemperatureRestriction", 1324);
    }
    dispatch_get_specific(*v20);
    long long v33 = NFSharedLogGetLogger();
    uint64_t v2 = 0;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1324;
      _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Temperature restrictor configured", buf, 0x12u);
      uint64_t v2 = 0;
    }
  }
  sub_2229BF93C((void **)v28);
  sub_2229C3E74(&v42);
  return v2;
}

uint64_t sub_2229B44E4(uint64_t a1)
{
  *(void *)&v37[5] = *MEMORY[0x263EF8340];
  unsigned int v1 = *(_DWORD *)(*(void *)(a1 + 24) + 728);
  if (v1 >= 0xA00)
  {
    uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i timeout must be < %d", "_NFDriverSetGenericATxHappenedTimeout", 1343, 2550);
    }
    dispatch_get_specific(*v2);
    int v4 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return 5;
    }
    *(_DWORD *)buf = 136446722;
    long long v33 = "_NFDriverSetGenericATxHappenedTimeout";
    __int16 v34 = 1024;
    int v35 = 1343;
    __int16 v36 = 1024;
    v37[0] = 2550;
    uint64_t v5 = "%{public}s:%i timeout must be < %d";
LABEL_6:
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x18u);
    return 5;
  }
  __int16 v8 = sub_2229C5B30(a1, 4);
  v31[0] = 1;
  v31[1] = HIBYTE(v8);
  v31[2] = v8;
  int v30 = (void **)sub_2229C3DD8(3u, v31);
  uint64_t v29 = (void **)sub_2229C3DD8(v31[0] << 8, 0);
  unint64_t v9 = (void **)sub_2229C39B8(a1, 37026, (uint64_t)v30, (uint64_t)v29);
  if (sub_2229BFAD8((uint64_t *)v9))
  {
    char v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(3, "%s:%i Failed to get TO_BEFORE_STDBY_CFG.", "_NFDriverSetGenericATxHappenedTimeout", 1356);
    }
    dispatch_get_specific(*v10);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      long long v33 = "_NFDriverSetGenericATxHappenedTimeout";
      __int16 v34 = 1024;
      int v35 = 1356;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get TO_BEFORE_STDBY_CFG.", buf, 0x12u);
    }
    sub_2229BF93C(v9);
    sub_2229C3E74(&v30);
    sub_2229C3E74(&v29);
    return 1;
  }
  else
  {
    sub_2229BF93C(v9);
    sub_2229C3E74(&v30);
    if (*((_DWORD *)v29 + 2) > 5u)
    {
      unsigned int v17 = *((unsigned __int16 *)*v29 + 2);
      int v18 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19) {
        v19(6, "%s:%i toBeforeStdbyCfg=%d ms, requesting %d", "_NFDriverSetGenericATxHappenedTimeout", 1372, v17, v1);
      }
      dispatch_get_specific(*v18);
      __int16 v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        long long v33 = "_NFDriverSetGenericATxHappenedTimeout";
        __int16 v34 = 1024;
        int v35 = 1372;
        __int16 v36 = 1024;
        v37[0] = v17;
        LOWORD(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 2) = v1;
        _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i toBeforeStdbyCfg=%d ms, requesting %d", buf, 0x1Eu);
      }
      sub_2229C3E74(&v29);
      if (v1 >= v17)
      {
        dispatch_get_specific(*v18);
        char v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v26) {
          v26(3, "%s:%i timeout must be < %dms", "_NFDriverSetGenericATxHappenedTimeout", 1378, v17);
        }
        dispatch_get_specific(*v18);
        int v4 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          return 5;
        }
        *(_DWORD *)buf = 136446722;
        long long v33 = "_NFDriverSetGenericATxHappenedTimeout";
        __int16 v34 = 1024;
        int v35 = 1378;
        __int16 v36 = 1024;
        v37[0] = v17;
        uint64_t v5 = "%{public}s:%i timeout must be < %dms";
        goto LABEL_6;
      }
      __int16 v21 = sub_2229C5B30(a1, 39);
      v28[0] = HIBYTE(v21);
      v28[1] = v21;
      v28[2] = 1;
      v28[3] = v1 / 0xA;
      int v30 = (void **)sub_2229C3DD8(4u, v28);
      uint64_t v22 = sub_2229C39B8(a1, 37025, (uint64_t)v30, 0);
      if (sub_2229BFAD8(v22))
      {
        dispatch_get_specific(*v18);
        char v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v23) {
          v23(3, "%s:%i status=0x%04llX", "_NFDriverSetGenericATxHappenedTimeout", 1393, *v22);
        }
        dispatch_get_specific(*v18);
        char v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = *v22;
          *(_DWORD *)buf = 136446722;
          long long v33 = "_NFDriverSetGenericATxHappenedTimeout";
          __int16 v34 = 1024;
          int v35 = 1393;
          __int16 v36 = 2048;
          *(void *)long long v37 = v25;
          _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
        }
        uint64_t v6 = 1;
      }
      else
      {
        uint64_t v6 = 0;
      }
      sub_2229BF93C((void **)v22);
      sub_2229C3E74(&v30);
    }
    else
    {
      uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unint64_t v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14) {
        v14(3, "%s:%i Unexpected length for TO_BEFORE_STDBY_CFG : %d", "_NFDriverSetGenericATxHappenedTimeout", 1366, *((_DWORD *)v29 + 2));
      }
      dispatch_get_specific(*v13);
      char v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = *((_DWORD *)v29 + 2);
        *(_DWORD *)buf = 136446722;
        long long v33 = "_NFDriverSetGenericATxHappenedTimeout";
        __int16 v34 = 1024;
        int v35 = 1366;
        __int16 v36 = 1024;
        v37[0] = v16;
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length for TO_BEFORE_STDBY_CFG : %d", buf, 0x18u);
      }
      sub_2229C3E74(&v29);
      return 8;
    }
  }
  return v6;
}

uint64_t sub_2229B4AC8()
{
  return 0;
}

uint64_t sub_2229B4AD0(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v16 = xmmword_2229E8053;
  uint64_t v17 = 0;
  unint64_t v9 = (void **)sub_2229C3DD8(0x18u, &v16);
  uint64_t v2 = sub_2229C39B8(a1, 37025, (uint64_t)v9, 0);
  if (sub_2229BFAD8(v2))
  {
    int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to set ECP VAS polling: 0x%08llx", "_NFDriverConfigureECPPolling", 1437, *v2);
    }
    dispatch_get_specific(*v3);
    uint64_t v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *v2;
      *(_DWORD *)buf = 136446722;
      __int16 v11 = "_NFDriverConfigureECPPolling";
      __int16 v12 = 1024;
      int v13 = 1437;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set ECP VAS polling: 0x%08llx", buf, 0x1Cu);
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_2229BF93C((void **)v2);
  sub_2229C3E74(&v9);
  return v7;
}

uint64_t sub_2229B4C44(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v13);
  if (HIDWORD(v13[0]) > 6)
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 0x40000000;
    v12[2] = sub_2229B5E64;
    void v12[3] = &unk_26463A6F8;
    v12[4] = a1;
    uint64_t v6 = sub_2229D1CA4(a1, (uint64_t)v12);
    if (sub_2229BFAD8(v6))
    {
      uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(4, "%s:%i failed to enable VAS CODES: 0x%04llX", "_NFDriverConfigureVASFieldDetectShortcuts", 1528, *v6);
      }
      dispatch_get_specific(*v7);
      unint64_t v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *v6;
        *(_DWORD *)buf = 136446722;
        long long v16 = "_NFDriverConfigureVASFieldDetectShortcuts";
        __int16 v17 = 1024;
        int v18 = 1528;
        __int16 v19 = 2048;
        uint64_t v20 = v10;
        _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to enable VAS CODES: 0x%04llX", buf, 0x1Cu);
      }
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v5 = 0;
    }
    sub_2229BF93C((void **)v6);
  }
  else
  {
    uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v3 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v3) {
      v3(6, "%s:%i Device does not support this feature", "_NFDriverConfigureVASFieldDetectShortcuts", 1457);
    }
    dispatch_get_specific(*v2);
    int v4 = NFSharedLogGetLogger();
    uint64_t v5 = 0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      long long v16 = "_NFDriverConfigureVASFieldDetectShortcuts";
      __int16 v17 = 1024;
      int v18 = 1457;
      _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_2229B4E9C(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  __int16 v2 = sub_2229C5B30(a1, 24);
  char v24 = 0;
  uint64_t v25 = 0;
  v23[0] = 1;
  v23[1] = HIBYTE(v2);
  v23[2] = v2;
  int v3 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i %d%% ASK modulation requested.", "_NFDriverChangeISO15693Modulation", 1550, 100);
  }
  dispatch_get_specific(*v3);
  uint64_t v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    char v27 = "_NFDriverChangeISO15693Modulation";
    __int16 v28 = 1024;
    int v29 = 1550;
    __int16 v30 = 1024;
    int v31 = 100;
    _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %d%% ASK modulation requested.", buf, 0x18u);
  }
  uint64_t v6 = sub_2229C3DD8(3u, v23);
  uint64_t v25 = (void **)v6;
  char v24 = (void **)sub_2229C3DD8(0x100u, 0);
  uint64_t v7 = (void **)sub_2229C39B8(a1, 37026, (uint64_t)v6, (uint64_t)v24);
  if (sub_2229BFAD8((uint64_t *)v7))
  {
    dispatch_get_specific(*v3);
    __int16 v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8) {
      v8(3, "%s:%i Failed to get RF settings.", "_NFDriverChangeISO15693Modulation", 1558);
    }
    dispatch_get_specific(*v3);
    unint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      char v27 = "_NFDriverChangeISO15693Modulation";
      __int16 v28 = 1024;
      int v29 = 1558;
      _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings.", buf, 0x12u);
    }
    sub_2229C3E74(&v25);
    sub_2229C3E74(&v24);
    sub_2229BF93C(v7);
    return 1;
  }
  else
  {
    sub_2229BF93C(v7);
    int v11 = (*((unsigned char *)v24 + 8) - 1);
    if (*((unsigned char *)v24 + 8) == 5)
    {
      int v12 = *((char *)*v24 + 4);
      if (v12 < 0)
      {
        *((unsigned char *)*v24 + 4) = v12 & 0x7F;
        sub_2229C3E74(&v25);
        dispatch_get_specific(*v3);
        uint64_t v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v15) {
          v15(6, "%s:%i Setting polling modulation limit to 100%%", "_NFDriverChangeISO15693Modulation", 1599);
        }
        dispatch_get_specific(*v3);
        long long v16 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          char v27 = "_NFDriverChangeISO15693Modulation";
          __int16 v28 = 1024;
          int v29 = 1599;
          _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting polling modulation limit to 100%%", buf, 0x12u);
        }
        uint64_t v25 = (void **)sub_2229C3DD8(v11 + 12, 0);
        *(_DWORD *)*uint64_t v25 = *(_DWORD *)((char *)*v24 + 1);
        __int16 v17 = v25;
        int v18 = *v25;
        *(void *)(v18 + 1) = 0x37AF7632080002F0;
        v18[3] = -1051982618;
        __int16 v19 = sub_2229C39B8(a1, 224, (uint64_t)v17, 0);
        if (sub_2229BFAD8(v19))
        {
          dispatch_get_specific(*v3);
          uint64_t v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v20) {
            v20(3, "%s:%i Failed to set RF settings.", "_NFDriverChangeISO15693Modulation", 1613);
          }
          dispatch_get_specific(*v3);
          uint64_t v21 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            char v27 = "_NFDriverChangeISO15693Modulation";
            __int16 v28 = 1024;
            int v29 = 1613;
            _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF settings.", buf, 0x12u);
          }
          uint64_t v10 = 1;
        }
        else
        {
          uint64_t v10 = 0;
        }
        sub_2229BF93C((void **)v19);
        sub_2229C3E74(&v25);
        sub_2229C3E74(&v24);
      }
      else
      {
        sub_2229C3E74(&v25);
        sub_2229C3E74(&v24);
        return 0;
      }
    }
    else
    {
      dispatch_get_specific(*v3);
      int v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v13) {
        v13(3, "%s:%i Unexpected length for ISO modulation : %d, expected %d", "_NFDriverChangeISO15693Modulation", 1568, v11, 4);
      }
      dispatch_get_specific(*v3);
      int v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        char v27 = "_NFDriverChangeISO15693Modulation";
        __int16 v28 = 1024;
        int v29 = 1568;
        __int16 v30 = 1024;
        int v31 = v11;
        __int16 v32 = 1024;
        int v33 = 4;
        _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length for ISO modulation : %d, expected %d", buf, 0x1Eu);
      }
      sub_2229C3E74(&v25);
      sub_2229C3E74(&v24);
      return 8;
    }
  }
  return v10;
}

uint64_t sub_2229B5378(uint64_t a1)
{
  char v3 = 88;
  int v2 = 134217888;
  return NFDriverEnableAntiRelay(a1, (uint64_t)&v2, 5);
}

uint64_t sub_2229B53B4()
{
  return 0;
}

void sub_2229B53BC(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_GeneralNtfRegister();
  if (v2)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_NFDriverRegisterNCINotifications_block_invoke", 862, v3);
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v21 = "_NFDriverRegisterNCINotifications_block_invoke";
    __int16 v22 = 1024;
    int v23 = 862;
    __int16 v24 = 1024;
    unsigned int v25 = v3;
    uint64_t v7 = "%{public}s:%i status=0x%04X";
    goto LABEL_6;
  }
  unsigned int v8 = phLibNfc_SE_NtfRegister();
  if (v8)
  {
    unsigned int v3 = v8;
    unint64_t v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10) {
      v10(3, "%s:%i status=0x%04X", "_NFDriverRegisterNCINotifications_block_invoke", 869, v3);
    }
    dispatch_get_specific(*v9);
    int v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v21 = "_NFDriverRegisterNCINotifications_block_invoke";
      __int16 v22 = 1024;
      int v23 = 869;
      __int16 v24 = 1024;
      unsigned int v25 = v3;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    phLibNfc_RemoteDev_NtfUnregister();
    goto LABEL_13;
  }
  unsigned int v14 = phLibNfc_RemoteDev_NtfRegister();
  if (v14)
  {
    unsigned int v3 = v14;
    uint64_t v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    long long v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(3, "%s:%i status=0x%04X", "_NFDriverRegisterNCINotifications_block_invoke", 879, v3);
    }
    dispatch_get_specific(*v15);
    uint64_t v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)buf = 136446722;
    uint64_t v21 = "_NFDriverRegisterNCINotifications_block_invoke";
    __int16 v22 = 1024;
    int v23 = 879;
    __int16 v24 = 1024;
    unsigned int v25 = v3;
    uint64_t v7 = "%{public}s:%i status=0x%04X";
    goto LABEL_6;
  }
  unsigned int v17 = phLibNfc_CardEmulation_NtfRegister();
  if (!v17)
  {
    int v12 = *(void **)(a1 + 40);
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  unsigned int v3 = v17;
  int v18 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v19) {
    v19(3, "%s:%i HCE Register error = 0x%04x", "_NFDriverRegisterNCINotifications_block_invoke", 886, v3);
  }
  dispatch_get_specific(*v18);
  uint64_t v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v21 = "_NFDriverRegisterNCINotifications_block_invoke";
    __int16 v22 = 1024;
    int v23 = 886;
    __int16 v24 = 1024;
    unsigned int v25 = v3;
    uint64_t v7 = "%{public}s:%i HCE Register error = 0x%04x";
LABEL_6:
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, v7, buf, 0x18u);
  }
LABEL_13:
  int v12 = *(void **)(a1 + 40);
  uint64_t v13 = v3;
LABEL_14:
  sub_2229BF9CC(v12, v13);
  sub_2229BF93C(*(void ***)(a1 + 40));
}

void sub_2229B5794(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_DnldGeneralNtfRegister();
  if (v2)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to register notification callback.", "_NFDriverRegisterFWDLNotifications_block_invoke", 969);
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v8 = "_NFDriverRegisterFWDLNotifications_block_invoke";
      __int16 v9 = 1024;
      int v10 = 969;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to register notification callback.", buf, 0x12u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
  }
  sub_2229BF9CC(*(void **)(a1 + 40), 0);
  sub_2229BF93C(*(void ***)(a1 + 40));
}

void sub_2229B58D4(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v2 = phLibNfc_Mgt_GetstackCapabilities();
  if (v2)
  {
    int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_NFDriverSetControllerInfo_block_invoke", 551, v3);
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v8 = "_NFDriverSetControllerInfo_block_invoke";
      __int16 v9 = 1024;
      int v10 = 551;
      __int16 v11 = 1024;
      int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_2229B5A08(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_ConfigureHsuParams();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_NFDriverConfigureBaudRate_block_invoke", 709, v3);
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v8 = "_NFDriverConfigureBaudRate_block_invoke";
      __int16 v9 = 1024;
      int v10 = 709;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229B5B58(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

void sub_2229B5B98(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_ValidateEepromSettings();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverValidateEEPROM_block_invoke", 785, v3);
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v8 = "_Async_NFDriverValidateEEPROM_block_invoke";
      __int16 v9 = 1024;
      int v10 = 785;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229B5CDC(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

void sub_2229B5D1C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_ConfigureLogging();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverConfigureRFLogging_block_invoke", 1144, v3);
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v8 = "_Async_NFDriverConfigureRFLogging_block_invoke";
      __int16 v9 = 1024;
      int v10 = 1144;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

uint64_t sub_2229B5E64()
{
  v15[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = 3;
  long long v9 = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, 24);
  int v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Enabling VAS CODES", "_NFDriverConfigureVASFieldDetectShortcuts_block_invoke", 1471);
  }
  dispatch_get_specific(*v0);
  unsigned int v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v5 = "_NFDriverConfigureVASFieldDetectShortcuts_block_invoke";
    __int16 v6 = 1024;
    int v7 = 1471;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling VAS CODES", buf, 0x12u);
  }
  BYTE2(v9) = 6;
  *(_DWORD *)((char *)&v9 + 3) = 16958210;
  *(_WORD *)((char *)&v9 + 7) = 1;
  BYTE8(v10) = 4;
  *(_DWORD *)((char *)&v10 + 9) = 180994;
  *(_WORD *)((char *)&v11[1] + 5) = 1025;
  *(_DWORD *)((char *)&v11[1] + 7) = 364290;
  *(_WORD *)((char *)&v12 + 3) = 1025;
  *(_DWORD *)((char *)&v12 + 5) = 362754;
  BYTE10(v13) = 4;
  *(_DWORD *)((char *)&v13 + 11) = 311554;
  return phLibNfc_Mgt_SetNfccParams();
}

_DWORD *sub_2229B6038(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    __int16 v24 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementCreate", 80, "driver");
    }
    dispatch_get_specific(*v24);
    uint64_t v26 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v28 = "NFDriverSecureElementCreate";
      __int16 v29 = 1024;
      int v30 = 80;
      __int16 v31 = 2080;
      __int16 v32 = "driver";
      _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  int v5 = a2 - 2;
  if ((a2 - 2) >= 5 || ((0x1Du >> v5) & 1) == 0)
  {
    __int16 v6 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7) {
      v7(3, "%s:%i Unknown SE type %d", "_seTypeToID", 53, a2);
    }
    dispatch_get_specific(*v6);
    uint64_t v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446722;
    __int16 v28 = "_seTypeToID";
    __int16 v29 = 1024;
    int v30 = 53;
    __int16 v31 = 1024;
    LODWORD(v32) = a2;
    long long v9 = "%{public}s:%i Unknown SE type %d";
LABEL_8:
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x18u);
    return 0;
  }
  int v15 = dword_2229E8078[v5];
  long long v16 = malloc_type_calloc(1uLL, 0x80uLL, 0x10A004065E1CA33uLL);
  if (!v16)
  {
    __int16 v22 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v23) {
      v23(3, "%s:%i Failed to allocate se of type %d", "NFDriverSecureElementCreate", 88, a2);
    }
    dispatch_get_specific(*v22);
    uint64_t v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446722;
    __int16 v28 = "NFDriverSecureElementCreate";
    __int16 v29 = 1024;
    int v30 = 88;
    __int16 v31 = 1024;
    LODWORD(v32) = a2;
    long long v9 = "%{public}s:%i Failed to allocate se of type %d";
    goto LABEL_8;
  }
  long long v10 = v16;
  uint64_t v17 = 0;
  v16[4] = v15;
  *(void *)long long v16 = a1;
  *((void *)v16 + 1) = a4;
  int v18 = 2;
  v16[6] = a3;
  do
  {
    if (v18 == a2)
    {
      (*(void (**)(_DWORD *))((char *)&unk_26D523178 + v17 + 8))(v16);
      return v10;
    }
    int v18 = *(_DWORD *)((char *)&unk_26D523178 + v17 + 16);
    v17 += 16;
  }
  while (v17 != 64);
  __int16 v19 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20) {
    v20(3, "%s:%i Unknown SE type %d", "_createSE", 74, a2);
  }
  dispatch_get_specific(*v19);
  uint64_t v21 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    __int16 v28 = "_createSE";
    __int16 v29 = 1024;
    int v30 = 74;
    __int16 v31 = 1024;
    LODWORD(v32) = a2;
    _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown SE type %d", buf, 0x18u);
  }
  return v10;
}

uint64_t sub_2229B649C(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_SetPower", 114, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_SetPower";
      __int16 v8 = 1024;
      int v9 = 114;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 32);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B65F8(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetATR", 124, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_GetATR";
      __int16 v8 = 1024;
      int v9 = 124;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 40);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B6754(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetOSInfo", 134, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_GetOSInfo";
      __int16 v8 = 1024;
      int v9 = 134;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 48);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B68B0(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetOSMode", 144, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_GetOSMode";
      __int16 v8 = 1024;
      int v9 = 144;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 56);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B6A0C(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetOSUpdateLog", 154, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_GetOSUpdateLog";
      __int16 v8 = 1024;
      int v9 = 154;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 64);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B6B68(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetAttackCounterLog", 164, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_GetAttackCounterLog";
      __int16 v8 = 1024;
      int v9 = 164;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 72);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B6CC4(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetPresenceOfAttackLog", 174, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_GetPresenceOfAttackLog";
      __int16 v8 = 1024;
      int v9 = 174;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 80);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B6E20(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_UnlockRequestInfo", 184, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_UnlockRequestInfo";
      __int16 v8 = 1024;
      int v9 = 184;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 88);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B6F7C(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetManifestQuery", 194, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_GetManifestQuery";
      __int16 v8 = 1024;
      int v9 = 194;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 96);
  if (!v1) {
    return 0;
  }

  return v1();
}

uint64_t sub_2229B70D8(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_IsOSReady", 215, "se");
    }
    dispatch_get_specific(*v3);
    int v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v7 = "NFDriverSecureElement_IsOSReady";
      __int16 v8 = 1024;
      int v9 = 215;
      __int16 v10 = 2080;
      __int16 v11 = "se";
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 112);
  if (!v1) {
    return 1;
  }

  return v1();
}

BOOL sub_2229B7234(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = NFDataCreateWithBytes();
  uint64_t v5 = NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v4);
  NFDataRelease();
  if (v5)
  {
    unint64_t v6 = *(void *)(v5 + 8);
    unint64_t v7 = v6 - 2;
    if (v6 < 2)
    {
      unsigned int v8 = 0;
LABEL_14:
      int v15 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i AID_MANIFESTQUERY returned error: 0x%04x", "GetManifestQuery_Eos", 53, v8);
      }
      dispatch_get_specific(*v15);
      uint64_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v23 = "GetManifestQuery_Eos";
        __int16 v24 = 1024;
        int v25 = 53;
        __int16 v26 = 1024;
        LODWORD(v27) = v8;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i AID_MANIFESTQUERY returned error: 0x%04x", buf, 0x18u);
      }
      NFDataRelease();
      return 0;
    }
    long long v13 = *(const void **)v5;
    unsigned int v8 = __rev16(*(unsigned __int16 *)(*(void *)v5 + v7));
    if (v8 != 36864) {
      goto LABEL_14;
    }
    if (v6 < 3)
    {
      int v18 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19) {
        v19(3, "%s:%i Incorrect manifest query length: %zu", "GetManifestQuery_Eos", 63, *(void *)(v5 + 8));
      }
      dispatch_get_specific(*v18);
      uint64_t v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(v5 + 8);
        *(_DWORD *)buf = 136446722;
        int v23 = "GetManifestQuery_Eos";
        __int16 v24 = 1024;
        int v25 = 63;
        __int16 v26 = 2048;
        uint64_t v27 = v21;
        _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Incorrect manifest query length: %zu", buf, 0x1Cu);
      }
    }
    else
    {
      if (v7 >= 0x100) {
        size_t v14 = 256;
      }
      else {
        size_t v14 = v6 - 2;
      }
      *(_WORD *)(a2 + 3578) = v14;
      memcpy((void *)(a2 + 3120), v13, v14);
    }
    NFDataRelease();
    return 1;
  }
  else
  {
    int v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10) {
      v10(3, "%s:%i Failed to get ManifestQuery", "GetManifestQuery_Eos", 48);
    }
    dispatch_get_specific(*v9);
    __int16 v11 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      int v23 = "GetManifestQuery_Eos";
      __int16 v24 = 1024;
      int v25 = 48;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get ManifestQuery", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

BOOL sub_2229B7558(uint64_t a1)
{
  if (a1)
  {
    dword_26ABD8418 = 0;
    *(void *)(a1 + 32) = sub_2229B7628;
    *(void *)(a1 + 40) = sub_2229B7730;
    *(void *)(a1 + 48) = sub_2229B7910;
    *(void *)(a1 + 56) = sub_2229B87DC;
    *(void *)(a1 + 64) = sub_2229B8D8C;
    *(void *)(a1 + 72) = sub_2229B91B4;
    *(void *)(a1 + 80) = sub_2229B9664;
    *(void *)(a1 + 96) = sub_2229B7234;
    *(void *)(a1 + 88) = sub_2229B9E14;
    *(void *)(a1 + 104) = sub_2229B9E1C;
    *(void *)(a1 + 112) = sub_2229B9E24;
    *(_DWORD *)(a1 + 20) = 6;
  }
  return a1 != 0;
}

uint64_t sub_2229B7628(uint64_t *a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(3, "%s:%i WARNING : power cycling SE", "SetPower_Eos", 76);
  }
  dispatch_get_specific(*v4);
  unint64_t v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v9 = "SetPower_Eos";
    __int16 v10 = 1024;
    int v11 = 76;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i WARNING : power cycling SE", buf, 0x12u);
  }
  return NFDriverSetEmbeddedSecureElementPower(*a1, a2);
}

BOOL sub_2229B7730(uint64_t a1, unsigned char *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  uint64_t v16 = 1023;
  BOOL result = NFDriverSecureElementGetCometATR(*(void *)a1, *(unsigned int *)(a1 + 16), v4, &v16);
  if (result)
  {
    uint64_t v15 = 0;
    int v14 = 0;
    uint64_t v6 = v16;
    v4[v16] = 0;
    unint64_t v7 = v6 - 1;
    if (v7 >= 0x17) {
      size_t v8 = 23;
    }
    else {
      size_t v8 = v7;
    }
    memcpy(a2 + 3504, v4 + 1, v8);
    int v9 = sscanf(v4 + 1, "JCOP%f R%d.%d", (char *)&v15 + 4, &v15, &v14);
    BOOL v10 = v9 == 3;
    if (v9 == 3)
    {
      a2[3528] = v15;
      a2[3529] = v14;
    }
    else
    {
      int v11 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(4, "%s:%i Failed to parse ATR %s", "GetATR_Eos", 111, v4 + 1);
      }
      dispatch_get_specific(*v11);
      long long v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v18 = "GetATR_Eos";
        __int16 v19 = 1024;
        int v20 = 111;
        __int16 v21 = 2080;
        __int16 v22 = v4 + 1;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to parse ATR %s", buf, 0x1Cu);
      }
    }
    goto LABEL_14;
  }
  BOOL v10 = 0;
  if (v4)
  {
LABEL_14:
    free(v4);
    return v10;
  }
  return result;
}

BOOL sub_2229B7910(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  BOOL result = sub_2229B7234(a1, a2);
  if (result)
  {
    unsigned __int16 v72 = 0;
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    if (*(unsigned __int16 *)(a2 + 3578) <= 0xA4uLL)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Invalid manifest length", "_EosParseManifestQuery", 137);
      }
      dispatch_get_specific(*v5);
      unint64_t v7 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v75 = "_EosParseManifestQuery";
      __int16 v76 = 1024;
      int v77 = 137;
      size_t v8 = "%{public}s:%i Invalid manifest length";
      goto LABEL_44;
    }
    if (!NFDataCreateWithBytes())
    {
      dispatch_get_specific(*v5);
      __int16 v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24) {
        v24(3, "%s:%i Failed to allocate manifest query data", "_EosParseManifestQuery", 143);
      }
      dispatch_get_specific(*v5);
      unint64_t v7 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v75 = "_EosParseManifestQuery";
      __int16 v76 = 1024;
      int v77 = 143;
      size_t v8 = "%{public}s:%i Failed to allocate manifest query data";
LABEL_44:
      int v25 = v7;
      uint32_t v26 = 18;
LABEL_45:
      _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, v8, buf, v26);
      return 0;
    }
    uint64_t v9 = TLVCreateWithData();
    uint64_t v73 = v9;
    if (v9)
    {
      uint64_t v10 = v9;
      int v11 = v5;
      do
      {
        int v12 = *(_DWORD *)(v10 + 32);
        if (v12 == 134)
        {
          uint64_t v13 = *(void *)(v10 + 40);
          size_t v14 = *(void *)(v13 + 8);
          if (v14 >= 0x19)
          {
            dispatch_get_specific(*v5);
            uint64_t v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v15) {
              v15(3, "%s:%i Error ! Unexpected serial number length ", "_EosParseManifestQuery", 155);
            }
            dispatch_get_specific(*v5);
            uint64_t v16 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v75 = "_EosParseManifestQuery";
              __int16 v76 = 1024;
              int v77 = 155;
              _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Error ! Unexpected serial number length ", buf, 0x12u);
            }
            uint64_t v13 = *(void *)(v10 + 40);
            size_t v14 = 24;
            uint64_t v5 = v11;
          }
          memcpy((void *)(a2 + 3480), *(const void **)v13, v14);
          int v12 = *(_DWORD *)(v10 + 32);
        }
        if (v12 == 137)
        {
          uint64_t v17 = *(void **)(v10 + 40);
          if (v17[1] == 32)
          {
            if (*(void *)*v17 ^ 0x75A5ACE19525D904 | *(void *)(*v17 + 8) ^ 0x16F1101E35C189A6 | *(void *)(*v17 + 16) ^ 0xA4EEF336B936CDD0 | *(void *)(*v17 + 24) ^ 0xBDD1D60286D53B67) {
              int v18 = 1;
            }
            else {
              int v18 = 2;
            }
          }
          else
          {
            dispatch_get_specific(*v5);
            __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v19) {
              v19(3, "%s:%i Error ! Unexpected cert length ", "_EosParseManifestQuery", 162);
            }
            dispatch_get_specific(*v5);
            int v20 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v75 = "_EosParseManifestQuery";
              __int16 v76 = 1024;
              int v77 = 162;
              _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Error ! Unexpected cert length ", buf, 0x12u);
            }
            int v18 = 0;
            uint64_t v5 = v11;
          }
          *(_DWORD *)(a2 + 3536) = v18;
        }
        uint64_t v10 = *(void *)(v10 + 24);
      }
      while (v10);
      TLVRelease();
    }
    NFDataRelease();
    sub_2229ACD64(a1, a2);
    if (*(_DWORD *)(a2 + 3532) != 2)
    {
      dispatch_get_specific(*v5);
      uint64_t v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27) {
        v27(6, "%s:%i Not updating the rest of OS Info : JCOP is not available", "GetOSInfo_Eos", 267);
      }
      dispatch_get_specific(*v5);
      uint64_t v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v75 = "GetOSInfo_Eos";
        __int16 v76 = 1024;
        int v77 = 267;
        _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not updating the rest of OS Info : JCOP is not available", buf, 0x12u);
      }
      return 1;
    }
    uint64_t v21 = NFDataCreateWithBytes();
    NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v21, &v72);
    NFDataRelease();
    switch(v72)
    {
      case 0x6614u:
        dispatch_get_specific(*v5);
        __int16 v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v29) {
          v29(5, "%s:%i JCOP OS Update Mode detected", "GetOSInfo_Eos", 284);
        }
        dispatch_get_specific(*v5);
        int v30 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v75 = "GetOSInfo_Eos";
          __int16 v76 = 1024;
          int v77 = 284;
          _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s:%i JCOP OS Update Mode detected", buf, 0x12u);
        }
        *(unsigned char *)(a2 + 3584) = 1;
LABEL_57:
        if (*(_DWORD *)(a2 + 3532) == 3) {
          *(unsigned char *)(a2 + 3584) = 1;
        }
        if (!*(unsigned char *)(a2 + 3583) && !*(unsigned char *)(a2 + 3584)) {
          sub_2229ACF8C(a1, a2);
        }
        uint64_t v31 = NFDataCreateWithBytes();
        if (!NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v31, &v72))
        {
          dispatch_get_specific(*v5);
          __int16 v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v36) {
            v36(3, "%s:%i Returned error: 0x%04x", "GetOSInfo_Eos", 312, v72);
          }
          dispatch_get_specific(*v5);
          long long v37 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v75 = "GetOSInfo_Eos";
            __int16 v76 = 1024;
            int v77 = 312;
            __int16 v78 = 1024;
            *(_DWORD *)int v79 = v72;
            _os_log_impl(&dword_2229A5000, v37, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
          }
          NFDataRelease();
          return 0;
        }
        NFDataRelease();
        sub_2229ACD64(a1, a2);
        uint64_t v32 = sub_2229ACAB0(a1, 0, 254, 57120, 0);
        if (v32)
        {
          size_t v33 = *(void *)(v32 + 8);
          if (v33 - 48 > 0xFFFFFFFFFFFFFFCELL)
          {
            memcpy((void *)(a2 + 3376), *(const void **)v32, v33);
            *(unsigned char *)(a2 + 3376 + v33) = 0;
          }
          else
          {
            dispatch_get_specific(*v5);
            uint64_t v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v34) {
              v34(4, "%s:%i Platform id too long: %ld", "GetOSInfo_Eos", 331, v33);
            }
            dispatch_get_specific(*v5);
            int v35 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v75 = "GetOSInfo_Eos";
              __int16 v76 = 1024;
              int v77 = 331;
              __int16 v78 = 2048;
              *(void *)int v79 = v33;
              _os_log_impl(&dword_2229A5000, v35, OS_LOG_TYPE_ERROR, "%{public}s:%i Platform id too long: %ld", buf, 0x1Cu);
            }
          }
          NFDataRelease();
        }
        else
        {
          dispatch_get_specific(*v5);
          char v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v40) {
            v40(4, "%s:%i Failed to get platform identifier", "GetOSInfo_Eos", 326);
          }
          dispatch_get_specific(*v5);
          long long v41 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v75 = "GetOSInfo_Eos";
            __int16 v76 = 1024;
            int v77 = 326;
            _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get platform identifier", buf, 0x12u);
          }
        }
        int v42 = (uint64_t *)sub_2229ACAB0(a1, 0, 254, 57164, 0);
        if (!v42)
        {
          dispatch_get_specific(*v5);
          long long v55 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v55) {
            v55(4, "%s:%i Failed to get JCOP Version", "GetOSInfo_Eos", 347);
          }
          dispatch_get_specific(*v5);
          int v56 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v75 = "GetOSInfo_Eos";
            __int16 v76 = 1024;
            int v77 = 347;
            _os_log_impl(&dword_2229A5000, v56, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get JCOP Version", buf, 0x12u);
          }
          goto LABEL_99;
        }
        unint64_t v43 = v42[1];
        if (v43 < 2)
        {
LABEL_89:
          dispatch_get_specific(*v5);
          __int16 v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v49) {
            v49(3, "%s:%i Did not find version tag!", "_NFDriverEosUpdateJCOPVersion", 194);
          }
          dispatch_get_specific(*v5);
          uint64_t v50 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
            goto LABEL_94;
          }
          *(_DWORD *)buf = 136446466;
          uint64_t v75 = "_NFDriverEosUpdateJCOPVersion";
          __int16 v76 = 1024;
          int v77 = 194;
          long long v51 = "%{public}s:%i Did not find version tag!";
          long long v52 = v50;
          os_log_type_t v53 = OS_LOG_TYPE_ERROR;
          uint32_t v54 = 18;
        }
        else
        {
          uint64_t v44 = 0;
          uint64_t v45 = *v42;
          uint64_t v46 = 1;
          while (1)
          {
            uint64_t v47 = *(unsigned __int8 *)(v45 + v46);
            unint64_t v48 = v44 + 2 + v47;
            if (*(unsigned __int8 *)(v45 + v44) == 133) {
              break;
            }
            uint64_t v46 = v48 + 1;
            v44 += 2 + v47;
            if (v48 + 1 >= v43) {
              goto LABEL_89;
            }
          }
          if (v47 != 4 || v48 > v43)
          {
            dispatch_get_specific(*v5);
            int v64 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v64) {
              v64(3, "%s:%i Invalid version tag length %d", "_NFDriverEosUpdateJCOPVersion", 201, v47);
            }
            dispatch_get_specific(*v5);
            v65 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v65, OS_LOG_TYPE_ERROR)) {
              goto LABEL_94;
            }
            *(_DWORD *)buf = 136446722;
            uint64_t v75 = "_NFDriverEosUpdateJCOPVersion";
            __int16 v76 = 1024;
            int v77 = 201;
            __int16 v78 = 1024;
            *(_DWORD *)int v79 = v47;
            long long v51 = "%{public}s:%i Invalid version tag length %d";
            long long v52 = v65;
            os_log_type_t v53 = OS_LOG_TYPE_ERROR;
            uint32_t v54 = 24;
          }
          else
          {
            *(unsigned char *)(a2 + 3528) = *(unsigned char *)(v45 + v44 + 2);
            uint64_t v66 = v44 + v45;
            *(unsigned char *)(a2 + 3529) = *(unsigned char *)(v66 + 3);
            *(unsigned char *)(a2 + 3530) = *(unsigned char *)(v66 + 5);
            dispatch_get_specific(*v5);
            int v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v67) {
              v67(6, "%s:%i major = %d, minor %d, build = %d", "_NFDriverEosUpdateJCOPVersion", 210, *(unsigned __int8 *)(a2 + 3528), *(unsigned __int8 *)(a2 + 3529), *(unsigned __int8 *)(a2 + 3530));
            }
            dispatch_get_specific(*v5);
            int v68 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_94;
            }
            int v69 = *(unsigned __int8 *)(a2 + 3528);
            int v70 = *(unsigned __int8 *)(a2 + 3529);
            int v71 = *(unsigned __int8 *)(a2 + 3530);
            *(_DWORD *)buf = 136447234;
            uint64_t v75 = "_NFDriverEosUpdateJCOPVersion";
            __int16 v76 = 1024;
            int v77 = 210;
            __int16 v78 = 1024;
            *(_DWORD *)int v79 = v69;
            *(_WORD *)&v79[4] = 1024;
            *(_DWORD *)&v79[6] = v70;
            __int16 v80 = 1024;
            int v81 = v71;
            long long v51 = "%{public}s:%i major = %d, minor %d, build = %d";
            long long v52 = v68;
            os_log_type_t v53 = OS_LOG_TYPE_DEFAULT;
            uint32_t v54 = 36;
          }
        }
        _os_log_impl(&dword_2229A5000, v52, v53, v51, buf, v54);
LABEL_94:
        NFDataRelease();
LABEL_99:
        uint64_t v57 = sub_2229ACAB0(a1, 0, 254, 57121, 0);
        if (v57)
        {
          size_t v58 = *(void *)(v57 + 8);
          if (v58 < 0x19)
          {
            memcpy((void *)(a2 + 3456), *(const void **)v57, v58);
          }
          else
          {
            dispatch_get_specific(*v5);
            long long v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v59) {
              v59(4, "%s:%i serial number too long: %ld", "GetJCOPOSSerialNumber", 227, v58);
            }
            dispatch_get_specific(*v5);
            int v60 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v75 = "GetJCOPOSSerialNumber";
              __int16 v76 = 1024;
              int v77 = 227;
              __int16 v78 = 2048;
              *(void *)int v79 = v58;
              _os_log_impl(&dword_2229A5000, v60, OS_LOG_TYPE_ERROR, "%{public}s:%i serial number too long: %ld", buf, 0x1Cu);
            }
          }
          NFDataRelease();
        }
        else
        {
          dispatch_get_specific(*v5);
          long long v61 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v61) {
            v61(4, "%s:%i Failed to get serial number", "GetJCOPOSSerialNumber", 222);
          }
          dispatch_get_specific(*v5);
          int v62 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v75 = "GetJCOPOSSerialNumber";
            __int16 v76 = 1024;
            int v77 = 222;
            _os_log_impl(&dword_2229A5000, v62, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get serial number", buf, 0x12u);
          }
        }
        if (!*(unsigned char *)(a2 + 3583) && !*(unsigned char *)(a2 + 3584)) {
          sub_2229AD7A0(a1, 0, a2);
        }
        return 1;
      case 0x9000u:
        *(_WORD *)(a2 + 3583) = 0;
        goto LABEL_57;
      case 0x66A5u:
        dispatch_get_specific(*v5);
        __int16 v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v22) {
          v22(5, "%s:%i Restricted Mode detected", "GetOSInfo_Eos", 280);
        }
        dispatch_get_specific(*v5);
        uint64_t v23 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v75 = "GetOSInfo_Eos";
          __int16 v76 = 1024;
          int v77 = 280;
          _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restricted Mode detected", buf, 0x12u);
        }
        *(unsigned char *)(a2 + 3583) = 1;
        goto LABEL_57;
    }
    dispatch_get_specific(*v5);
    int v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v38) {
      v38(3, "%s:%i Returned error: 0x%04x", "GetOSInfo_Eos", 288, v72);
    }
    dispatch_get_specific(*v5);
    __int16 v39 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v75 = "GetOSInfo_Eos";
      __int16 v76 = 1024;
      int v77 = 288;
      __int16 v78 = 1024;
      *(_DWORD *)int v79 = v72;
      size_t v8 = "%{public}s:%i Returned error: 0x%04x";
      int v25 = v39;
      uint32_t v26 = 24;
      goto LABEL_45;
    }
  }
  return result;
}

BOOL sub_2229B87DC(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    int v25 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "GetOSMode_Eos", 386, "se");
    }
    dispatch_get_specific(*v25);
    uint64_t v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v29 = "GetOSMode_Eos";
      __int16 v30 = 1024;
      int v31 = 386;
      __int16 v32 = 2080;
      size_t v33 = "se";
      _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  *(_DWORD *)(a2 + 3548) = 7;
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v5 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v5) {
    v5(6, "%s:%i SELECT OS Update AID", "GetOSMode_Eos", 391);
  }
  dispatch_get_specific(*v4);
  uint64_t v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v29 = "GetOSMode_Eos";
    __int16 v30 = 1024;
    int v31 = 391;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SELECT OS Update AID", buf, 0x12u);
  }
  uint64_t v7 = NFDataCreateWithBytes();
  size_t v8 = (uint64_t *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 2, 0, 0xA4u, 4u, 0, 0, v7);
  NFDataRelease();
  if (v8)
  {
    unint64_t v9 = v8[1];
    if (v9 < 2)
    {
      unsigned int v10 = 0;
LABEL_22:
      dispatch_get_specific(*v4);
      __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19) {
        v19(3, "%s:%i Unexpected status: 0x%X", "GetOSMode_Eos", 442, v10);
      }
      dispatch_get_specific(*v4);
      int v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v29 = "GetOSMode_Eos";
        __int16 v30 = 1024;
        int v31 = 442;
        __int16 v32 = 1024;
        LODWORD(v33) = v10;
        _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected status: 0x%X", buf, 0x18u);
      }
      int v18 = 0;
LABEL_27:
      *(_DWORD *)(a2 + 3532) = v18;
      NFDataRelease();
      dword_26ABD8418 = *(_DWORD *)(a2 + 3532);
      return v8 != 0;
    }
    uint64_t v13 = *v8;
    unsigned int v10 = __rev16(*(unsigned __int16 *)(v9 + *v8 - 2));
    if (v10 != 36864) {
      goto LABEL_22;
    }
    if (v9 <= 0x24)
    {
      if (*(unsigned char *)(a2 + 3581))
      {
LABEL_16:
        char v15 = *(unsigned char *)(a2 + 3582);
        dispatch_get_specific(*v4);
        uint64_t v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v15)
        {
          if (v16) {
            v16(6, "%s:%i Note : OS mode is JCOP", "GetOSMode_Eos", 437);
          }
          dispatch_get_specific(*v4);
          __int16 v24 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            __int16 v29 = "GetOSMode_Eos";
            __int16 v30 = 1024;
            int v31 = 437;
            _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Note : OS mode is JCOP", buf, 0x12u);
          }
          int v18 = 2;
        }
        else
        {
          if (v16) {
            v16(6, "%s:%i Note : OS mode is System only", "GetOSMode_Eos", 434);
          }
          dispatch_get_specific(*v4);
          uint64_t v17 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            __int16 v29 = "GetOSMode_Eos";
            __int16 v30 = 1024;
            int v31 = 434;
            _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Note : OS mode is System only", buf, 0x12u);
          }
          int v18 = 3;
        }
        goto LABEL_27;
      }
    }
    else
    {
      int v14 = *(unsigned __int8 *)(v13 + 9);
      *(unsigned char *)(a2 + 3581) = v14;
      *(_WORD *)(a2 + 3570) = bswap32(*(unsigned __int16 *)(v13 + 10)) >> 16;
      *(unsigned char *)(a2 + 3582) = *(unsigned char *)(v13 + 12);
      *(_WORD *)(a2 + 3572) = bswap32(*(unsigned __int16 *)(v13 + 13)) >> 16;
      *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v13 + 17);
      *(unsigned char *)(a2 + 3580) = *(unsigned char *)(v13 + 18);
      *(_DWORD *)(a2 + 3556) = bswap32(*(_DWORD *)(v13 + 19));
      if (v14) {
        goto LABEL_16;
      }
    }
    dispatch_get_specific(*v4);
    __int16 v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22) {
      v22(6, "%s:%i Note : OS mode is Boot Loader", "GetOSMode_Eos", 431);
    }
    dispatch_get_specific(*v4);
    uint64_t v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v29 = "GetOSMode_Eos";
      __int16 v30 = 1024;
      int v31 = 431;
      _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Note : OS mode is Boot Loader", buf, 0x12u);
    }
    int v18 = 1;
    goto LABEL_27;
  }
  dispatch_get_specific(*v4);
  int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v11) {
    v11(3, "%s:%i Failed to select", "GetOSMode_Eos", 406);
  }
  dispatch_get_specific(*v4);
  int v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v29 = "GetOSMode_Eos";
    __int16 v30 = 1024;
    int v31 = 406;
    _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to select", buf, 0x12u);
  }
  return v8 != 0;
}

uint64_t sub_2229B8D8C(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = NFDataCreateWithBytes();
  if (!v2)
  {
    int v12 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Allocation failure", "GetOSUpdateLog_Eos", 466);
    }
    dispatch_get_specific(*v12);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint32_t v26 = "GetOSUpdateLog_Eos";
      __int16 v27 = 1024;
      int v28 = 466;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (1)
  {
    uint64_t v6 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v3);
    uint64_t v7 = v6;
    if (!v6 || (unint64_t v8 = v6[1], v8 <= 1))
    {
      char v15 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16) {
        v16(3, "%s:%i Failed to get data", "GetOSUpdateLog_Eos", 478);
      }
      dispatch_get_specific(*v15);
      uint64_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v26 = "GetOSUpdateLog_Eos";
        __int16 v27 = 1024;
        int v28 = 478;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
      }
      if (v7) {
LABEL_22:
      }
        NFDataRelease();
      NFDataRelease();
      if (!v4) {
        return 0;
      }
      return NFDataCreateWithBytesNoCopy();
    }
    unsigned int v9 = __rev16(*(unsigned __int16 *)(v8 + *v6 - 2));
    if (v9 != 36864 && v9 != 25360)
    {
      __int16 v22 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23) {
        v23(4, "%s:%i Got error 0x%2X", "GetOSUpdateLog_Eos", 497, v9);
      }
      dispatch_get_specific(*v22);
      __int16 v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint32_t v26 = "GetOSUpdateLog_Eos";
        __int16 v27 = 1024;
        int v28 = 497;
        __int16 v29 = 1024;
        unsigned int v30 = v9;
        _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i Got error 0x%2X", buf, 0x18u);
      }
      goto LABEL_22;
    }
    int v11 = (char *)reallocf(v4, v8 + v5 - 2);
    if (!v11) {
      break;
    }
    uint64_t v4 = v11;
    memcpy(&v11[v5], (const void *)*v7, v7[1] - 2);
    unsigned int v5 = v5 + *((_DWORD *)v7 + 2) - 2;
    NFDataRelease();
    if (v9 != 25360)
    {
      NFDataRelease();
      return NFDataCreateWithBytesNoCopy();
    }
  }
  __int16 v19 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20) {
    v20(3, "%s:%i Allocation failure", "GetOSUpdateLog_Eos", 488);
  }
  dispatch_get_specific(*v19);
  uint64_t v21 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint32_t v26 = "GetOSUpdateLog_Eos";
    __int16 v27 = 1024;
    int v28 = 488;
    _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
  }
  NFDataRelease();
  NFDataRelease();
  return 0;
}

BOOL sub_2229B91B4(uint64_t a1, void *a2, uint64_t *a3)
{
  BOOL result = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (a2 && a3)
  {
    *a3 = 0;
    uint64_t v7 = NFDataCreateWithBytes();
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = 0;
      unsigned int v10 = 0;
      while (1)
      {
        int v11 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v8);
        int v12 = v11;
        if (!v11) {
          break;
        }
        unint64_t v13 = v11[1];
        if (v13 <= 1) {
          break;
        }
        unsigned int v14 = __rev16(*(unsigned __int16 *)(v13 + *v11 - 2));
        if (v14 != 36864 && v14 != 25360)
        {
          unsigned int v30 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger) {
            Logger(4, "%s:%i Got error 0x%2X", "GetAttackCounterLog_Eos", 600, v14);
          }
          dispatch_get_specific(*v30);
          __int16 v32 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            uint64_t v34 = "GetAttackCounterLog_Eos";
            __int16 v35 = 1024;
            int v36 = 600;
            __int16 v37 = 1024;
            unsigned int v38 = v14;
            _os_log_impl(&dword_2229A5000, v32, OS_LOG_TYPE_ERROR, "%{public}s:%i Got error 0x%2X", buf, 0x18u);
          }
LABEL_24:
          NFDataRelease();
          goto LABEL_25;
        }
        uint64_t v16 = (char *)reallocf(v9, v13 + v10 - 2);
        if (!v16)
        {
          __int16 v27 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          int v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v28) {
            v28(3, "%s:%i Allocation failure", "GetAttackCounterLog_Eos", 591);
          }
          dispatch_get_specific(*v27);
          __int16 v29 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v34 = "GetAttackCounterLog_Eos";
            __int16 v35 = 1024;
            int v36 = 591;
            _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
          }
          NFDataRelease();
          NFDataRelease();
          return 0;
        }
        unsigned int v9 = v16;
        memcpy(&v16[v10], (const void *)*v12, v12[1] - 2);
        unsigned int v10 = v10 + *((_DWORD *)v12 + 2) - 2;
        NFDataRelease();
        if (v14 != 25360)
        {
          NFDataRelease();
          goto LABEL_26;
        }
      }
      int v20 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(3, "%s:%i Failed to get data", "GetAttackCounterLog_Eos", 581);
      }
      dispatch_get_specific(*v20);
      __int16 v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v34 = "GetAttackCounterLog_Eos";
        __int16 v35 = 1024;
        int v36 = 581;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
      }
      if (v12) {
        goto LABEL_24;
      }
LABEL_25:
      NFDataRelease();
      if (!v9) {
        return 0;
      }
LABEL_26:
      uint64_t v23 = malloc_type_calloc(2uLL, 0x10uLL, 0x10200403A5D3213uLL);
      if (!v23)
      {
        free(v9);
        return 0;
      }
      __int16 v24 = v23;
      v23[2] = 57126;
      uint64_t v25 = 1;
      *(void *)uint64_t v23 = NFDataCreateWithBytesNoCopy();
      uint64_t v26 = sub_2229B9F44(a1);
      if (v26)
      {
        v24[6] = 57162;
        *((void *)v24 + 2) = v26;
        uint64_t v25 = 2;
      }
      *a2 = v24;
      *a3 = v25;
      return 1;
    }
    else
    {
      uint64_t v17 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18) {
        v18(3, "%s:%i Allocation failure", "GetAttackCounterLog_Eos", 569);
      }
      dispatch_get_specific(*v17);
      __int16 v19 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v34 = "GetAttackCounterLog_Eos";
        __int16 v35 = 1024;
        int v36 = 569;
        _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_2229B9664(uint64_t a1, unsigned char *a2)
{
  *(void *)((char *)&v85[3] + 4) = *MEMORY[0x263EF8340];
  if (a2) {
    *a2 = 0;
  }
  if (!sub_2229B9F44(a1))
  {
    uint64_t v4 = 0;
    char v78 = 0;
    if (!a2) {
      return v4;
    }
    goto LABEL_110;
  }
  uint64_t v3 = TLVCreateWithData();
  uint64_t v4 = v3 != 0;
  if (v3)
  {
    uint64_t v5 = v3;
    char v6 = 0;
    uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
    while (1)
    {
      int v8 = *(_DWORD *)(v5 + 32);
      if (v8 != 128) {
        goto LABEL_31;
      }
      unsigned int v9 = *(unsigned __int8 ***)(v5 + 40);
      if (v9 && v9[1])
      {
        int v10 = **v9;
        dispatch_get_specific(*v7);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
        {
          if (v10 == 90) {
            int v12 = "YES";
          }
          else {
            int v12 = "NO";
          }
          Logger(6, "%s:%i Primary = %s", "GetPresenceOfAttackLog_Eos", 660, v12);
        }
        char v6 = v6 & 1 | (v10 == 90);
        dispatch_get_specific(*v7);
        unint64_t v13 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446722;
        if (v10 == 90) {
          unsigned int v14 = "YES";
        }
        else {
          unsigned int v14 = "NO";
        }
        int v81 = "GetPresenceOfAttackLog_Eos";
        __int16 v82 = 1024;
        int v83 = 660;
        __int16 v84 = 2080;
        v85[0] = v14;
        char v15 = v13;
        os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
        uint64_t v17 = "%{public}s:%i Primary = %s";
        uint32_t v18 = 28;
      }
      else
      {
        dispatch_get_specific(*v7);
        __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v19)
        {
          uint64_t v20 = *(void *)(v5 + 40);
          if (v20) {
            uint64_t v21 = *(void *)(v20 + 8);
          }
          else {
            uint64_t v21 = -1;
          }
          v19(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 662, *(_DWORD *)(v5 + 32), v21);
        }
        dispatch_get_specific(*v7);
        __int16 v22 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          goto LABEL_30;
        }
        uint64_t v23 = *(void *)(v5 + 40);
        if (v23) {
          uint64_t v24 = *(void *)(v23 + 8);
        }
        else {
          uint64_t v24 = -1;
        }
        int v25 = *(_DWORD *)(v5 + 32);
        *(_DWORD *)buf = 136446978;
        int v81 = "GetPresenceOfAttackLog_Eos";
        __int16 v82 = 1024;
        int v83 = 662;
        __int16 v84 = 1024;
        LODWORD(v85[0]) = v25;
        WORD2(v85[0]) = 2048;
        *(void *)((char *)v85 + 6) = v24;
        char v15 = v22;
        os_log_type_t v16 = OS_LOG_TYPE_ERROR;
        uint64_t v17 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
        uint32_t v18 = 34;
      }
      _os_log_impl(&dword_2229A5000, v15, v16, v17, buf, v18);
LABEL_30:
      int v8 = *(_DWORD *)(v5 + 32);
LABEL_31:
      if (v8 != 144) {
        goto LABEL_55;
      }
      uint64_t v26 = *(unsigned __int8 ***)(v5 + 40);
      if (v26 && v26[1])
      {
        int v27 = **v26;
        dispatch_get_specific(*v7);
        int v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v28)
        {
          if (v27 == 90) {
            __int16 v29 = "YES";
          }
          else {
            __int16 v29 = "NO";
          }
          v28(6, "%s:%i JCOP1 = %s", "GetPresenceOfAttackLog_Eos", 670, v29);
        }
        char v6 = v6 & 1 | (v27 == 90);
        dispatch_get_specific(*v7);
        unsigned int v30 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          if (v27 == 90) {
            uint64_t v31 = "YES";
          }
          else {
            uint64_t v31 = "NO";
          }
          int v81 = "GetPresenceOfAttackLog_Eos";
          __int16 v82 = 1024;
          int v83 = 670;
          __int16 v84 = 2080;
          v85[0] = v31;
          __int16 v32 = v30;
          os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
          uint64_t v34 = "%{public}s:%i JCOP1 = %s";
          uint32_t v35 = 28;
LABEL_54:
          _os_log_impl(&dword_2229A5000, v32, v33, v34, buf, v35);
        }
      }
      else
      {
        dispatch_get_specific(*v7);
        int v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v36)
        {
          uint64_t v37 = *(void *)(v5 + 40);
          if (v37) {
            uint64_t v38 = *(void *)(v37 + 8);
          }
          else {
            uint64_t v38 = -1;
          }
          v36(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 672, *(_DWORD *)(v5 + 32), v38);
        }
        dispatch_get_specific(*v7);
        uint64_t v39 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          uint64_t v40 = *(void *)(v5 + 40);
          if (v40) {
            uint64_t v41 = *(void *)(v40 + 8);
          }
          else {
            uint64_t v41 = -1;
          }
          int v42 = *(_DWORD *)(v5 + 32);
          *(_DWORD *)buf = 136446978;
          int v81 = "GetPresenceOfAttackLog_Eos";
          __int16 v82 = 1024;
          int v83 = 672;
          __int16 v84 = 1024;
          LODWORD(v85[0]) = v42;
          WORD2(v85[0]) = 2048;
          *(void *)((char *)v85 + 6) = v41;
          __int16 v32 = v39;
          os_log_type_t v33 = OS_LOG_TYPE_ERROR;
          uint64_t v34 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
          uint32_t v35 = 34;
          goto LABEL_54;
        }
      }
LABEL_55:
      int v43 = *(_DWORD *)(v5 + 32);
      if (v43 != 160) {
        goto LABEL_80;
      }
      uint64_t v44 = *(unsigned __int8 ***)(v5 + 40);
      if (v44 && v44[1])
      {
        int v45 = **v44;
        dispatch_get_specific(*v7);
        uint64_t v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v46)
        {
          if (v45 == 90) {
            uint64_t v47 = "YES";
          }
          else {
            uint64_t v47 = "NO";
          }
          v46(6, "%s:%i EUICC = %s", "GetPresenceOfAttackLog_Eos", 680, v47);
        }
        char v6 = v6 & 1 | (v45 == 90);
        dispatch_get_specific(*v7);
        unint64_t v48 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_79;
        }
        *(_DWORD *)buf = 136446722;
        if (v45 == 90) {
          __int16 v49 = "YES";
        }
        else {
          __int16 v49 = "NO";
        }
        int v81 = "GetPresenceOfAttackLog_Eos";
        __int16 v82 = 1024;
        int v83 = 680;
        __int16 v84 = 2080;
        v85[0] = v49;
        uint64_t v50 = v48;
        os_log_type_t v51 = OS_LOG_TYPE_DEFAULT;
        long long v52 = "%{public}s:%i EUICC = %s";
        uint32_t v53 = 28;
      }
      else
      {
        dispatch_get_specific(*v7);
        uint32_t v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v54)
        {
          uint64_t v55 = *(void *)(v5 + 40);
          if (v55) {
            uint64_t v56 = *(void *)(v55 + 8);
          }
          else {
            uint64_t v56 = -1;
          }
          v54(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 682, *(_DWORD *)(v5 + 32), v56);
        }
        dispatch_get_specific(*v7);
        uint64_t v57 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
          goto LABEL_79;
        }
        uint64_t v58 = *(void *)(v5 + 40);
        if (v58) {
          uint64_t v59 = *(void *)(v58 + 8);
        }
        else {
          uint64_t v59 = -1;
        }
        int v60 = *(_DWORD *)(v5 + 32);
        *(_DWORD *)buf = 136446978;
        int v81 = "GetPresenceOfAttackLog_Eos";
        __int16 v82 = 1024;
        int v83 = 682;
        __int16 v84 = 1024;
        LODWORD(v85[0]) = v60;
        WORD2(v85[0]) = 2048;
        *(void *)((char *)v85 + 6) = v59;
        uint64_t v50 = v57;
        os_log_type_t v51 = OS_LOG_TYPE_ERROR;
        long long v52 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
        uint32_t v53 = 34;
      }
      _os_log_impl(&dword_2229A5000, v50, v51, v52, buf, v53);
LABEL_79:
      int v43 = *(_DWORD *)(v5 + 32);
LABEL_80:
      if (v43 == 129)
      {
        long long v61 = *(unsigned __int8 ***)(v5 + 40);
        if (v61 && v61[1])
        {
          int v62 = **v61;
          dispatch_get_specific(*v7);
          uint64_t v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v63)
          {
            if (v62 == 90) {
              int v64 = "YES";
            }
            else {
              int v64 = "NO";
            }
            v63(6, "%s:%i Secondary = %s", "GetPresenceOfAttackLog_Eos", 690, v64);
          }
          char v6 = v6 & 1 | (v62 == 90);
          dispatch_get_specific(*v7);
          v65 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_104;
          }
          *(_DWORD *)buf = 136446722;
          if (v62 == 90) {
            uint64_t v66 = "YES";
          }
          else {
            uint64_t v66 = "NO";
          }
          int v81 = "GetPresenceOfAttackLog_Eos";
          __int16 v82 = 1024;
          int v83 = 690;
          __int16 v84 = 2080;
          v85[0] = v66;
          int v67 = v65;
          os_log_type_t v68 = OS_LOG_TYPE_DEFAULT;
          int v69 = "%{public}s:%i Secondary = %s";
          uint32_t v70 = 28;
        }
        else
        {
          dispatch_get_specific(*v7);
          int v71 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v71)
          {
            uint64_t v72 = *(void *)(v5 + 40);
            if (v72) {
              uint64_t v73 = *(void *)(v72 + 8);
            }
            else {
              uint64_t v73 = -1;
            }
            v71(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 692, *(_DWORD *)(v5 + 32), v73);
          }
          dispatch_get_specific(*v7);
          uint64_t v74 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR)) {
            goto LABEL_104;
          }
          uint64_t v75 = *(void *)(v5 + 40);
          if (v75) {
            uint64_t v76 = *(void *)(v75 + 8);
          }
          else {
            uint64_t v76 = -1;
          }
          int v77 = *(_DWORD *)(v5 + 32);
          *(_DWORD *)buf = 136446978;
          int v81 = "GetPresenceOfAttackLog_Eos";
          __int16 v82 = 1024;
          int v83 = 692;
          __int16 v84 = 1024;
          LODWORD(v85[0]) = v77;
          WORD2(v85[0]) = 2048;
          *(void *)((char *)v85 + 6) = v76;
          int v67 = v74;
          os_log_type_t v68 = OS_LOG_TYPE_ERROR;
          int v69 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
          uint32_t v70 = 34;
        }
        _os_log_impl(&dword_2229A5000, v67, v68, v69, buf, v70);
      }
LABEL_104:
      uint64_t v5 = *(void *)(v5 + 24);
      if (!v5)
      {
        TLVRelease();
        uint64_t v4 = v4;
        goto LABEL_109;
      }
    }
  }
  char v6 = 0;
LABEL_109:
  NFDataRelease();
  char v78 = v6 & 1;
  if (a2) {
LABEL_110:
  }
    *a2 = v78;
  return v4;
}

uint64_t sub_2229B9E14(uint64_t a1)
{
  return sub_2229AF9AC(a1, 2);
}

uint64_t sub_2229B9E1C()
{
  return 0;
}

BOOL sub_2229B9E24(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  BOOL v2 = (dword_26ABD8418 & 0xFFFFFFFD) == 1 && a2 == 0;
  if ((a2 == 0) != v2 && dword_26ABD8418 == 0)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i WARNING ! Do not send data to JCOP in unknown state !!!!!", "IsOSReady_Eos", 736);
    }
    dispatch_get_specific(*v4);
    char v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v9 = "IsOSReady_Eos";
      __int16 v10 = 1024;
      int v11 = 736;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i WARNING ! Do not send data to JCOP in unknown state !!!!!", buf, 0x12u);
    }
  }
  return !v2;
}

uint64_t sub_2229B9F44(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = NFDataCreateWithBytes();
  if (v2)
  {
    uint64_t v3 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v2);
    uint64_t v4 = v3;
    if (v3)
    {
      unint64_t v5 = v3[1];
      if (v5 >= 8 && __rev16(*(unsigned __int16 *)(v5 + *v3 - 2)) == 36864)
      {
        uint64_t v13 = NFDataCreateWithBytes();
LABEL_27:
        NFDataRelease();
        NFDataRelease();
        return v13;
      }
      char v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        unint64_t v8 = v4[1];
        if (v8 >= 2) {
          unsigned int v9 = __rev16(*(unsigned __int16 *)(v8 + *v4 - 2));
        }
        else {
          unsigned int v9 = 0;
        }
        Logger(3, "%s:%i Query AC log presence failed with 0x%02X", "_getACLogPresence", 541, v9);
      }
      dispatch_get_specific(*v6);
      uint64_t v20 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
LABEL_26:
        uint64_t v13 = 0;
        goto LABEL_27;
      }
      unint64_t v21 = v4[1];
      if (v21 >= 2) {
        unsigned int v22 = __rev16(*(unsigned __int16 *)(v21 + *v4 - 2));
      }
      else {
        unsigned int v22 = 0;
      }
      *(_DWORD *)buf = 136446722;
      int v25 = "_getACLogPresence";
      __int16 v26 = 1024;
      int v27 = 541;
      __int16 v28 = 1024;
      unsigned int v29 = v22;
      uint64_t v17 = "%{public}s:%i Query AC log presence failed with 0x%02X";
      uint32_t v18 = v20;
      uint32_t v19 = 24;
    }
    else
    {
      unsigned int v14 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      char v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v15) {
        v15(3, "%s:%i Unable to get presence of AC log", "_getACLogPresence", 534);
      }
      dispatch_get_specific(*v14);
      os_log_type_t v16 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136446466;
      int v25 = "_getACLogPresence";
      __int16 v26 = 1024;
      int v27 = 534;
      uint64_t v17 = "%{public}s:%i Unable to get presence of AC log";
      uint32_t v18 = v16;
      uint32_t v19 = 18;
    }
    _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_ERROR, v17, buf, v19);
    goto LABEL_26;
  }
  __int16 v10 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v11) {
    v11(3, "%s:%i Allocation failure", "_getACLogPresence", 524);
  }
  dispatch_get_specific(*v10);
  uint64_t v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v25 = "_getACLogPresence";
    __int16 v26 = 1024;
    int v27 = 524;
    _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
  }
  return 0;
}

BOOL sub_2229BA284(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unsigned __int16 v38 = 0;
  if (*(_DWORD *)(a1 + 20) == 2 && *(unsigned __int16 *)(a2 + 3570) <= 0x117u)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Manifest Query is not supported on this OS version (sequence counter: %d)", "GetManifestQuery_P73", 37, *(unsigned __int16 *)(a2 + 3570));
    }
    dispatch_get_specific(*v4);
    char v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int16 *)(a2 + 3570);
      *(_DWORD *)buf = 136446722;
      uint64_t v40 = "GetManifestQuery_P73";
      __int16 v41 = 1024;
      int v42 = 37;
      __int16 v43 = 1024;
      LODWORD(v44) = v7;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Manifest Query is not supported on this OS version (sequence counter: %d)", buf, 0x18u);
    }
    return 1;
  }
  if (*(_DWORD *)(a2 + 3532) == 1)
  {
    unint64_t v8 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unsigned int v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9) {
      v9(6, "%s:%i Selecting OSU", "GetManifestQuery_P73", 44);
    }
    dispatch_get_specific(*v8);
    __int16 v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v40 = "GetManifestQuery_P73";
      __int16 v41 = 1024;
      int v42 = 44;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Selecting OSU", buf, 0x12u);
    }
  }
  uint64_t v11 = NFDataCreateWithBytes();
  if (v11)
  {
    BOOL v12 = NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v11, &v38);
    NFDataRelease();
    if (v12)
    {
      uint64_t v13 = NFDataCreateWithBytes();
      uint64_t v14 = NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0, 0xFEu, 0, v13);
      NFDataRelease();
      if (v14)
      {
        unint64_t v15 = *(void *)(v14 + 8);
        if (v15 > 1)
        {
          __int16 v28 = *(const void **)v14;
          unsigned int v29 = __rev16(*(unsigned __int16 *)(*(void *)v14 + v15 - 2));
          unsigned __int16 v38 = v29;
          if (v29 == 36864)
          {
            if (v15 < 3)
            {
              uint64_t v34 = (const void **)MEMORY[0x263F8C6C0];
              dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
              uint32_t v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v35) {
                v35(3, "%s:%i Incorrect manifest query length: %zu", "GetManifestQuery_P73", 90, *(void *)(v14 + 8));
              }
              dispatch_get_specific(*v34);
              int v36 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              {
                uint64_t v37 = *(void *)(v14 + 8);
                *(_DWORD *)buf = 136446722;
                uint64_t v40 = "GetManifestQuery_P73";
                __int16 v41 = 1024;
                int v42 = 90;
                __int16 v43 = 2048;
                uint64_t v44 = v37;
                _os_log_impl(&dword_2229A5000, v36, OS_LOG_TYPE_ERROR, "%{public}s:%i Incorrect manifest query length: %zu", buf, 0x1Cu);
              }
            }
            else
            {
              if (v15 - 2 >= 0x100) {
                size_t v30 = 256;
              }
              else {
                size_t v30 = v15 - 2;
              }
              *(_WORD *)(a2 + 3578) = v30;
              memcpy((void *)(a2 + 3120), v28, v30);
            }
            NFDataRelease();
            return 1;
          }
        }
        else
        {
          unsigned __int16 v38 = 0;
        }
        uint64_t v31 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        __int16 v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v32) {
          v32(3, "%s:%i AID_P73_MANIFESTQUERY returned error: 0x%04x", "GetManifestQuery_P73", 80, v38);
        }
        dispatch_get_specific(*v31);
        os_log_type_t v33 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v40 = "GetManifestQuery_P73";
          __int16 v41 = 1024;
          int v42 = 80;
          __int16 v43 = 1024;
          LODWORD(v44) = v38;
          _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i AID_P73_MANIFESTQUERY returned error: 0x%04x", buf, 0x18u);
        }
        NFDataRelease();
        return 0;
      }
      __int16 v26 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27) {
        v27(3, "%s:%i Failed to get ManifestQuery", "GetManifestQuery_P73", 75);
      }
      dispatch_get_specific(*v26);
      uint32_t v18 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v40 = "GetManifestQuery_P73";
        __int16 v41 = 1024;
        int v42 = 75;
        uint64_t v20 = "%{public}s:%i Failed to get ManifestQuery";
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v21 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unsigned int v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22) {
        v22(3, "%s:%i select returned error: 0x%04x", "GetManifestQuery_P73", 59, v38);
      }
      dispatch_get_specific(*v21);
      uint64_t v23 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v40 = "GetManifestQuery_P73";
        __int16 v41 = 1024;
        int v42 = 59;
        __int16 v43 = 1024;
        LODWORD(v44) = v38;
        uint64_t v20 = "%{public}s:%i select returned error: 0x%04x";
        uint64_t v24 = v23;
        uint32_t v25 = 24;
LABEL_30:
        _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_ERROR, v20, buf, v25);
        return 0;
      }
    }
  }
  else
  {
    os_log_type_t v16 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v17) {
      v17(3, "%s:%i Failed to get ManifestQuery", "GetManifestQuery_P73", 52);
    }
    dispatch_get_specific(*v16);
    uint32_t v18 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v40 = "GetManifestQuery_P73";
      __int16 v41 = 1024;
      int v42 = 52;
      uint64_t v20 = "%{public}s:%i Failed to get ManifestQuery";
LABEL_29:
      uint64_t v24 = v18;
      uint32_t v25 = 18;
      goto LABEL_30;
    }
  }
  return result;
}

BOOL sub_2229BA8DC(uint64_t a1)
{
  if (a1)
  {
    dword_26ABD8428 = 0;
    *(void *)(a1 + 32) = sub_2229BA99C;
    *(void *)(a1 + 40) = sub_2229BA9A4;
    *(void *)(a1 + 48) = sub_2229BA9A8;
    *(void *)(a1 + 56) = sub_2229BAA00;
    *(void *)(a1 + 64) = sub_2229BAEDC;
    *(void *)(a1 + 72) = sub_2229BAEE0;
    *(void *)(a1 + 80) = sub_2229BB4E0;
    *(void *)(a1 + 96) = sub_2229BA284;
    *(void *)(a1 + 88) = sub_2229BB680;
    *(void *)(a1 + 104) = sub_2229BB688;
    *(void *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 20) = 2;
  }
  return a1 != 0;
}

uint64_t sub_2229BA99C(uint64_t *a1, int a2)
{
  return NFDriverSetEmbeddedSecureElementPower(*a1, a2);
}

BOOL sub_2229BA9A8(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_2229AE260(a1, a2, 0, 0);
  if (result)
  {
    return sub_2229BA284(a1, a2);
  }
  return result;
}

BOOL sub_2229BAA00(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a2 + 3548) = 7;
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  unsigned __int16 v24 = 0;
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  if (dword_26ABD8428 == 2)
  {
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i SELECT: ISD", "GetOSMode_P73", 132);
    }
    dispatch_get_specific(*v4);
    char v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v26 = "GetOSMode_P73";
      __int16 v27 = 1024;
      int v28 = 132;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SELECT: ISD", buf, 0x12u);
    }
    uint64_t v7 = NFDataCreateWithBytes();
    if (!NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v7, &v24))
    {
      dispatch_get_specific(*v4);
      os_log_type_t v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16) {
        v16(3, "%s:%i Returned error: 0x%04x", "GetOSMode_P73", 135, v24);
      }
      dispatch_get_specific(*v4);
      uint64_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v26 = "GetOSMode_P73";
        __int16 v27 = 1024;
        int v28 = 135;
        __int16 v29 = 1024;
        LODWORD(v30) = v24;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
      }
LABEL_23:
      NFDataRelease();
      return 0;
    }
    NFDataRelease();
  }
  dispatch_get_specific(*v4);
  unint64_t v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8) {
    v8(6, "%s:%i GET OS MODE", "GetOSMode_P73", 142);
  }
  dispatch_get_specific(*v4);
  unsigned int v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "GetOSMode_P73";
    __int16 v27 = 1024;
    int v28 = 142;
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i GET OS MODE", buf, 0x12u);
  }
  uint64_t v10 = NFDataCreateWithBytes();
  uint64_t v11 = (uint64_t *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, 0, 0xA4u, 4u, 0, 0, v10);
  NFDataRelease();
  if (v11)
  {
    unint64_t v12 = v11[1];
    if (v12 <= 1)
    {
      unsigned __int16 v24 = 0;
LABEL_31:
      int v20 = 2;
LABEL_32:
      *(_DWORD *)(a2 + 3532) = v20;
      NFDataRelease();
      dword_26ABD8428 = *(_DWORD *)(a2 + 3532);
      return 1;
    }
    uint64_t v18 = *v11;
    unsigned int v19 = __rev16(*(unsigned __int16 *)(v12 + *v11 - 2));
    unsigned __int16 v24 = v19;
    if (v19 != 36864) {
      goto LABEL_31;
    }
    if (v12 >= 0xF)
    {
      *(unsigned char *)(a2 + 3581) = *(unsigned char *)(v18 + 9);
      *(_WORD *)(a2 + 3570) = bswap32(*(unsigned __int16 *)(v18 + 10)) >> 16;
      *(unsigned char *)(a2 + 3582) = *(unsigned char *)(v18 + 12);
      if (v12 >= 0x11)
      {
        *(_WORD *)(a2 + 3572) = bswap32(*(unsigned __int16 *)(v18 + 13)) >> 16;
        if (v12 >= 0x15)
        {
          *(_DWORD *)(a2 + 3556) = __rev16(*(unsigned __int16 *)(v18 + 15));
          *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v18 + 17);
          *(unsigned char *)(a2 + 3580) = *(unsigned char *)(v18 + 18);
        }
      }
      int v20 = 1;
      goto LABEL_32;
    }
    dispatch_get_specific(*v4);
    unint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21) {
      v21(3, "%s:%i Unexpected length: %zu", "GetOSMode_P73", 183, v11[1]);
    }
    dispatch_get_specific(*v4);
    unsigned int v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = v11[1];
      *(_DWORD *)buf = 136446722;
      __int16 v26 = "GetOSMode_P73";
      __int16 v27 = 1024;
      int v28 = 183;
      __int16 v29 = 2048;
      uint64_t v30 = v23;
      _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length: %zu", buf, 0x1Cu);
    }
    goto LABEL_23;
  }
  dispatch_get_specific(*v4);
  uint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13) {
    v13(3, "%s:%i Failed to select", "GetOSMode_P73", 156);
  }
  dispatch_get_specific(*v4);
  uint64_t v14 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "GetOSMode_P73";
    __int16 v27 = 1024;
    int v28 = 156;
    _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to select", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_2229BAEE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = 0;
  uint64_t v46 = *MEMORY[0x263EF8340];
  unsigned __int16 v37 = -1;
  if (a2 && a3)
  {
    *a3 = 0;
    memset(v44, 0, 512);
    if (sub_2229BAA00(a1, (uint64_t)v44))
    {
      if (v45 == 2)
      {
        uint64_t v7 = NFDataCreateWithBytes();
        if (!NFDriverSecureElementSelectWithOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, v7, &v37))
        {
          uint64_t v31 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger) {
            Logger(4, "%s:%i SELECT returned error: 0x%04x", "GetAttackCounterLog_P73", 224, v37);
          }
          dispatch_get_specific(*v31);
          os_log_type_t v33 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
          *(_DWORD *)buf = 136446722;
          uint64_t v39 = "GetAttackCounterLog_P73";
          __int16 v40 = 1024;
          int v41 = 224;
          __int16 v42 = 1024;
          int v43 = v37;
          unsigned __int16 v24 = "%{public}s:%i SELECT returned error: 0x%04x";
          uint32_t v25 = v33;
          uint32_t v26 = 24;
          goto LABEL_41;
        }
        NFDataRelease();
      }
      uint64_t v8 = NFDataCreateWithBytes();
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = (const void **)MEMORY[0x263F8C6C0];
        while (1)
        {
          uint64_t v13 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0, 0xFEu, 0, v9);
          uint64_t v14 = v13;
          if (!v13) {
            break;
          }
          unint64_t v15 = v13[1];
          if (v15 <= 1) {
            break;
          }
          unsigned int v16 = __rev16(*(unsigned __int16 *)(v15 + *v13 - 2));
          unsigned __int16 v37 = v16;
          if (v16 == 36864 || v16 == 25360)
          {
            uint64_t v18 = (char *)reallocf(v10, v15 + v11 - 2);
            if (!v18)
            {
              dispatch_get_specific(*v12);
              uint64_t v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v34) {
                v34(3, "%s:%i Allocation failure", "GetAttackCounterLog_P73", 258);
              }
              dispatch_get_specific(*v12);
              uint32_t v35 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                uint64_t v39 = "GetAttackCounterLog_P73";
                __int16 v40 = 1024;
                int v41 = 258;
                _os_log_impl(&dword_2229A5000, v35, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
              }
              NFDataRelease();
              NFDataRelease();
              return 0;
            }
            uint64_t v10 = v18;
            memcpy(&v18[v11], (const void *)*v14, v14[1] - 2);
            unsigned int v11 = v11 + *((_DWORD *)v14 + 2) - 2;
          }
          else
          {
            dispatch_get_specific(*v12);
            unsigned int v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v19) {
              v19(4, "%s:%i Got error 0x%2X", "GetAttackCounterLog_P73", 267, v37);
            }
            dispatch_get_specific(*v12);
            int v20 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              uint64_t v39 = "GetAttackCounterLog_P73";
              __int16 v40 = 1024;
              int v41 = 267;
              __int16 v42 = 1024;
              int v43 = v37;
              _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Got error 0x%2X", buf, 0x18u);
            }
          }
          NFDataRelease();
          if (v37 != 25360) {
            goto LABEL_34;
          }
        }
        dispatch_get_specific(*v12);
        __int16 v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27) {
          v27(3, "%s:%i Failed to get data", "GetAttackCounterLog_P73", 248);
        }
        dispatch_get_specific(*v12);
        int v28 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v39 = "GetAttackCounterLog_P73";
          __int16 v40 = 1024;
          int v41 = 248;
          _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
        }
        if (v14) {
          NFDataRelease();
        }
LABEL_34:
        NFDataRelease();
        if (!v10) {
          return 0;
        }
        __int16 v29 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
        if (v29)
        {
          uint64_t v30 = v29;
          v29[2] = 57126;
          uint64_t v3 = 1;
          *(void *)__int16 v29 = NFDataCreateWithBytesNoCopy();
          *a2 = v30;
          *a3 = 1;
          return v3;
        }
        free(v10);
        return 0;
      }
      unint64_t v21 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unsigned int v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22) {
        v22(3, "%s:%i Allocation failure", "GetAttackCounterLog_P73", 237);
      }
      dispatch_get_specific(*v21);
      uint64_t v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v39 = "GetAttackCounterLog_P73";
        __int16 v40 = 1024;
        int v41 = 237;
        unsigned __int16 v24 = "%{public}s:%i Allocation failure";
        uint32_t v25 = v23;
        uint32_t v26 = 18;
LABEL_41:
        _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
      }
    }
    return 0;
  }
  return v3;
}

BOOL sub_2229BB4E0(uint64_t a1, unsigned char *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  memset(v12, 0, 512);
  if (!sub_2229BAA00(a1, (uint64_t)v12)) {
    return 0;
  }
  if (v13 != 2)
  {
    unint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i GetPresenseOfAttackLog will only work in JCOP mode", "GetPresenseOfAttackLog_P73", 303);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v9 = "GetPresenseOfAttackLog_P73";
      __int16 v10 = 1024;
      int v11 = 303;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i GetPresenseOfAttackLog will only work in JCOP mode", buf, 0x12u);
    }
    return 0;
  }

  return sub_2229AF558(a1, a2);
}

uint64_t sub_2229BB680(uint64_t a1)
{
  return sub_2229AF9AC(a1, 0);
}

unint64_t sub_2229BB688(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = NFDataCreateWithBytes();
  uint64_t v3 = (void *)NFDriverSecureElementSendCommandToOS(*(void *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0, 0xFEu, 0, v2);
  NFDataRelease();
  if (v3 && v3[1] == 15)
  {
    unint64_t v4 = bswap64(*(void *)(*v3 + 5));
    unint64_t v5 = v4 / 0x3E8;
    char v6 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i uptimne is %llu", "GetUptime_P73", 329, v4 / 0x3E8);
    }
    dispatch_get_specific(*v6);
    uint64_t v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v16 = "GetUptime_P73";
      __int16 v17 = 1024;
      int v18 = 329;
      __int16 v19 = 2048;
      unint64_t v20 = v4 / 0x3E8;
      _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i uptimne is %llu", buf, 0x1Cu);
    }
  }
  else
  {
    uint64_t v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
    {
      if (v3) {
        uint64_t v11 = v3[1];
      }
      else {
        uint64_t v11 = -1;
      }
      v10(3, "%s:%i Data length is %ld", "GetUptime_P73", 331, v11);
    }
    dispatch_get_specific(*v9);
    unint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (v3) {
        uint64_t v13 = v3[1];
      }
      else {
        uint64_t v13 = -1;
      }
      *(_DWORD *)buf = 136446722;
      unsigned int v16 = "GetUptime_P73";
      __int16 v17 = 1024;
      int v18 = 331;
      __int16 v19 = 2048;
      unint64_t v20 = v13;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Data length is %ld", buf, 0x1Cu);
    }
    unint64_t v5 = 0;
  }
  NFDataRelease();
  return v5;
}

void NFDriverRFSettingsStoreValueForTagAtOffset(uint64_t a1, unsigned int a2, int a3, unsigned int a4, char a5, char a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v9 = v8 + 2;
      unsigned int v10 = bswap32(*(unsigned __int16 *)(a1 + v8));
      unsigned int v11 = v8 + 3;
      unsigned int v12 = *(unsigned __int8 *)(a1 + v9);
      if (a3 == HIWORD(v10)) {
        break;
      }
      unsigned int v8 = v11 + v12;
      if (v8 >= a2) {
        goto LABEL_5;
      }
    }
    unsigned int v19 = v11 + a4;
    if (v19 < a2 && v12 > a4)
    {
      *(unsigned char *)(a1 + v19) = (*(unsigned char *)(a1 + v19) | a6) & (a5 | ~a6);
      return;
    }
    unint64_t v20 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Invalid offset %d for tag 0x%04x", "NFDriverRFSettingsStoreValueForTagAtOffset", 87, a4, a3);
    }
    dispatch_get_specific(*v20);
    unsigned int v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      unsigned __int16 v24 = "NFDriverRFSettingsStoreValueForTagAtOffset";
      __int16 v25 = 1024;
      int v26 = 87;
      __int16 v27 = 1024;
      unsigned int v28 = a4;
      __int16 v29 = 1024;
      int v30 = a3;
      unsigned int v16 = "%{public}s:%i Invalid offset %d for tag 0x%04x";
      __int16 v17 = v22;
      uint32_t v18 = 30;
      goto LABEL_9;
    }
  }
  else
  {
LABEL_5:
    uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14) {
      v14(3, "%s:%i Failed to find tag 0x%04x", "NFDriverRFSettingsStoreValueForTagAtOffset", 93, a3);
    }
    dispatch_get_specific(*v13);
    unint64_t v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned __int16 v24 = "NFDriverRFSettingsStoreValueForTagAtOffset";
      __int16 v25 = 1024;
      int v26 = 93;
      __int16 v27 = 1024;
      unsigned int v28 = a3;
      unsigned int v16 = "%{public}s:%i Failed to find tag 0x%04x";
      __int16 v17 = v15;
      uint32_t v18 = 24;
LABEL_9:
      _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    }
  }
}

UInt8 *NFDriverRFSettingsGetVendorParameters(unsigned int *a1, unsigned int *a2, const char *a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  CFDataRef v7 = CFDataCreate(0, *(const UInt8 **)a4, *(void *)(a4 + 8));
  CFPropertyListRef v8 = CFPropertyListCreateWithData(0, v7, 0, 0, 0);
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%02X.%02X", a1[2], a1[3] >> 8);
  CFStringRef v10 = CFStringCreateWithCString(0, a3, 0x8000100u);
  CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"%02X", *a1);
  *a2 = 0;
  CFRelease(v7);
  if (!v8)
  {
    __int16 v27 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to decode plist", "NFDriverRFSettingsGetVendorParameters", 109);
    }
    dispatch_get_specific(*v27);
    __int16 v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "NFDriverRFSettingsGetVendorParameters";
    __int16 v40 = 1024;
    int v41 = 109;
    int v30 = "%{public}s:%i Failed to decode plist";
LABEL_29:
    _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, v30, buf, 0x12u);
    goto LABEL_30;
  }
  CFTypeID v12 = CFGetTypeID(v8);
  if (v12 != CFDictionaryGetTypeID())
  {
    uint64_t v31 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v32) {
      v32(3, "%s:%i Invalid format", "NFDriverRFSettingsGetVendorParameters", 114);
    }
    dispatch_get_specific(*v31);
    __int16 v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "NFDriverRFSettingsGetVendorParameters";
    __int16 v40 = 1024;
    int v41 = 114;
    int v30 = "%{public}s:%i Invalid format";
    goto LABEL_29;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v8, @"Config");
  if (!Value || (v14 = Value, CFTypeID v15 = CFGetTypeID(Value), v15 != CFArrayGetTypeID()))
  {
    os_log_type_t v33 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v34) {
      v34(3, "%s:%i Invalid format", "NFDriverRFSettingsGetVendorParameters", 120);
    }
    dispatch_get_specific(*v33);
    __int16 v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v39 = "NFDriverRFSettingsGetVendorParameters";
    __int16 v40 = 1024;
    int v41 = 120;
    int v30 = "%{public}s:%i Invalid format";
    goto LABEL_29;
  }
  if (CFArrayGetCount(v14) < 1)
  {
LABEL_30:
    uint32_t v35 = 0;
    goto LABEL_31;
  }
  CFIndex v16 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v16);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(ValueAtIndex))
    {
      CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"HW");
      CFTypeID v20 = CFArrayGetTypeID();
      if (v20 == CFGetTypeID(v19))
      {
        v43.length = CFArrayGetCount(v19);
        v43.location = 0;
        if (CFArrayContainsValue(v19, v43, v11))
        {
          CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"antenna");
          CFTypeID v22 = CFStringGetTypeID();
          if (v22 == CFGetTypeID(v21) && CFStringCompare(v21, v10, 1uLL) == kCFCompareEqualTo)
          {
            CFStringRef v23 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"fwVersion");
            CFTypeID v24 = CFStringGetTypeID();
            if (v24 == CFGetTypeID(v23))
            {
              v45.location = 0;
              v45.length = 5;
              if (CFStringCompareWithOptions(v23, v9, v45, 1uLL) == kCFCompareEqualTo)
              {
                __int16 v25 = CFDictionaryGetValue(ValueAtIndex, @"settings");
                CFTypeID v26 = CFDataGetTypeID();
                if (v26 == CFGetTypeID(v25)) {
                  break;
                }
              }
            }
          }
        }
      }
    }
    if (CFArrayGetCount(v14) <= ++v16) {
      goto LABEL_30;
    }
  }
  unsigned int Length = CFDataGetLength((CFDataRef)v25);
  uint32_t v35 = (UInt8 *)malloc_type_calloc(1uLL, Length, 0x100004077774924uLL);
  if (v35)
  {
    v44.location = 0;
    v44.length = Length;
    CFDataGetBytes((CFDataRef)v25, v44, v35);
    *a2 = Length;
  }
LABEL_31:
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v35;
}

uint64_t NFDriverConfigurRSTNDelay(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v16 = 103329;
  int v15 = 33658017;
  uint64_t v13 = &v16;
  uint64_t v14 = 4;
  uint64_t v2 = sub_2229C3D4C((uint64_t)&v13);
  CFTypeID v12 = (void **)v2;
  if (!v2) {
    return 3;
  }
  uint64_t v3 = sub_2229C39B8(a1, 37025, (uint64_t)v2, 0);
  if (sub_2229BFAD8(v3))
  {
    unint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to write IRQ", "NFDriverConfigurRSTNDelay", 915);
    }
    dispatch_get_specific(*v4);
    char v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    *(_DWORD *)buf = 136446466;
    uint32_t v18 = "NFDriverConfigurRSTNDelay";
    __int16 v19 = 1024;
    int v20 = 915;
    goto LABEL_7;
  }
  sub_2229BF93C((void **)v3);
  sub_2229C3E74(&v12);
  uint64_t v13 = &v15;
  LODWORD(v14) = 4;
  CFPropertyListRef v8 = sub_2229C3D4C((uint64_t)&v13);
  CFTypeID v12 = (void **)v8;
  if (!v8) {
    return 3;
  }
  uint64_t v3 = sub_2229C39B8(a1, 37025, (uint64_t)v8, 0);
  if (!sub_2229BFAD8(v3))
  {
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  CFStringRef v9 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  CFStringRef v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v10) {
    v10(3, "%s:%i Failed to write IRQ", "NFDriverConfigurRSTNDelay", 931);
  }
  dispatch_get_specific(*v9);
  char v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint32_t v18 = "NFDriverConfigurRSTNDelay";
    __int16 v19 = 1024;
    int v20 = 931;
LABEL_7:
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write IRQ", buf, 0x12u);
  }
LABEL_8:
  uint64_t v7 = 1;
LABEL_9:
  sub_2229BF93C((void **)v3);
  sub_2229C3E74(&v12);
  return v7;
}

uint64_t NFDriverConfigureSPMIIRQ(uint64_t a1, int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a2 == 3) {
    char v3 = 1;
  }
  else {
    char v3 = 3;
  }
  __int16 v16 = 2721;
  char v17 = 1;
  char v18 = v3;
  v15[0] = &v16;
  if (a2 && a2 != 3)
  {
    CFStringRef v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Invalid I/O selected", "NFDriverConfigureSPMIIRQ", 956);
    }
    dispatch_get_specific(*v10);
    CFTypeID v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v20 = "NFDriverConfigureSPMIIRQ";
      __int16 v21 = 1024;
      int v22 = 956;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid I/O selected", buf, 0x12u);
    }
    return 5;
  }
  else
  {
    v15[1] = 4;
    unint64_t v4 = sub_2229C3D4C((uint64_t)v15);
    uint64_t v14 = (void **)v4;
    if (v4)
    {
      unint64_t v5 = sub_2229C39B8(a1, 37025, (uint64_t)v4, 0);
      if (sub_2229BFAD8(v5))
      {
        char v6 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v7) {
          v7(3, "%s:%i Failed to write IRQ", "NFDriverConfigureSPMIIRQ", 967);
        }
        dispatch_get_specific(*v6);
        CFPropertyListRef v8 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          int v20 = "NFDriverConfigureSPMIIRQ";
          __int16 v21 = 1024;
          int v22 = 967;
          _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write IRQ", buf, 0x12u);
        }
        uint64_t v9 = 1;
      }
      else
      {
        uint64_t v9 = 0;
      }
      sub_2229BF93C((void **)v5);
      sub_2229C3E74(&v14);
    }
    else
    {
      return 3;
    }
  }
  return v9;
}

uint64_t NFDriverConfigureI2CForLPM(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  char v12 = 1;
  int v11 = 587340192;
  v10[0] = &v11;
  v10[1] = 5;
  uint64_t v2 = sub_2229C3D4C((uint64_t)v10);
  uint64_t v9 = (void **)v2;
  if (!v2) {
    return 3;
  }
  char v3 = sub_2229C39B8(a1, 37025, (uint64_t)v2, 0);
  if (sub_2229BFAD8(v3))
  {
    unint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to write I2C config", "NFDriverConfigureI2CForLPM", 990);
    }
    dispatch_get_specific(*v4);
    char v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = "NFDriverConfigureI2CForLPM";
      __int16 v15 = 1024;
      int v16 = 990;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write I2C config", buf, 0x12u);
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_2229BF93C((void **)v3);
  sub_2229C3E74(&v9);
  return v7;
}

uint64_t NFDriverRFSettingsSetup(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  memset(v88, 0, sizeof(v88));
  int v89 = 0;
  if (!a3)
  {
    uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i No RF settings.", "NFDriverRFSettingsSetup", 1210);
    }
    dispatch_get_specific(*v13);
    __int16 v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetup";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1210;
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i No RF settings.", buf, 0x12u);
    }
    return 5;
  }
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v88)) {
    return 1;
  }
  if (HIDWORD(v88[0]) < 5) {
    return 0;
  }
  int v87 = 0;
  CFStringRef v6 = (const __CFString *)NFCalibrationCopyAntennaName();
  uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
  if (v6)
  {
    CFStringRef v8 = v6;
    int CString = CFStringGetCString(v6, byte_267F84C38, 31, 0x600u);
    dispatch_get_specific(*v7);
    CFStringRef v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (CString)
    {
      if (v10) {
        v10(6, "%s:%i EDT antenna name: %s", "_NFDriverRFSettingsGetAntennaName", 1021, byte_267F84C38);
      }
      dispatch_get_specific(*v7);
      int v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsGetAntennaName";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1021;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = byte_267F84C38;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i EDT antenna name: %s", buf, 0x1Cu);
      }
      CFRelease(v8);
      char v12 = byte_267F84C38;
      goto LABEL_45;
    }
    if (v10) {
      v10(3, "%s:%i Failed to get antenna name from EDT : %s", "_NFDriverRFSettingsGetAntennaName", 1026, byte_267F84C38);
    }
    dispatch_get_specific(*v7);
    uint64_t v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsGetAntennaName";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1026;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&unsigned char buf[20] = byte_267F84C38;
      _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get antenna name from EDT : %s", buf, 0x1Cu);
    }
    CFRelease(v8);
  }
  if (NFProductIsWatch()) {
    char v12 = "Bermuda";
  }
  else {
    char v12 = "RTM";
  }
  switch(NFGetProductType())
  {
    case ':':
    case '<':
      char v12 = "BMA7A_2";
      break;
    case ';':
    case '=':
      char v12 = "BMA7A_1";
      break;
    case '>':
      char v12 = "BMA7A_3";
      break;
    case '?':
    case '@':
      char v12 = "BMA7B_1";
      break;
    case 'A':
    case 'B':
      char v12 = "BMA7B_2";
      break;
    case 'M':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7A_xS";
      int v20 = "RTM7A_3_2";
      goto LABEL_38;
    case 'N':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7A_xS";
      int v20 = "RTM7A_4_2";
      goto LABEL_38;
    case 'O':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7A_xS";
      int v20 = "RTM7A_1";
      goto LABEL_38;
    case 'P':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7A_xS";
      int v20 = "RTM7A_2";
      goto LABEL_38;
    case 'Q':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7B_xS";
      int v20 = "RTM7B_3";
      goto LABEL_38;
    case 'R':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7B_xS";
      int v20 = "RTM7B_4";
      goto LABEL_38;
    case 'S':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7B_xS";
      int v20 = "RTM7B_1";
      goto LABEL_38;
    case 'T':
      int v18 = *(unsigned __int8 *)(a1 + 56);
      __int16 v19 = "RTM7B_xS";
      int v20 = "RTM7B_2";
LABEL_38:
      if (v18) {
        char v12 = v19;
      }
      else {
        char v12 = v20;
      }
      break;
    default:
      break;
  }
  dispatch_get_specific(*v7);
  __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21) {
    v21(6, "%s:%i Using default antenna name %s", "_NFDriverRFSettingsGetAntennaName", 1200, v12);
  }
  dispatch_get_specific(*v7);
  int v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsGetAntennaName";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1200;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v12;
    _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Using default antenna name %s", buf, 0x1Cu);
  }
LABEL_45:
  VendorParameters = NFDriverRFSettingsGetVendorParameters((unsigned int *)v88, (unsigned int *)&v87, v12, a3);
  int v24 = v87;
  dispatch_get_specific(*v7);
  __int16 v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (VendorParameters && v24)
  {
    if (v25) {
      v25(6, "%s:%i Pushing vendor RF settings for %s", "NFDriverRFSettingsSetup", 1230, v12);
    }
    dispatch_get_specific(*v7);
    CFTypeID v26 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetup";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1230;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v12;
      _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Pushing vendor RF settings for %s", buf, 0x1Cu);
    }
    if (sub_2229C44C8(a1, (uint64_t)VendorParameters, v87, 1))
    {
      dispatch_get_specific(*v7);
      __int16 v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27) {
        v27(3, "%s:%i Failed to push builtin RF settings.", "NFDriverRFSettingsSetup", 1232);
      }
      dispatch_get_specific(*v7);
      unsigned int v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetup";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1232;
        _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to push builtin RF settings.", buf, 0x12u);
      }
      free(VendorParameters);
      return 1;
    }
    free(VendorParameters);
  }
  else
  {
    if (v25) {
      v25(4, "%s:%i No vendor RF settings found for %s!", "NFDriverRFSettingsSetup", 1238, v12);
    }
    dispatch_get_specific(*v7);
    __int16 v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetup";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1238;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v12;
      _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i No vendor RF settings found for %s!", buf, 0x1Cu);
    }
  }
  unsigned int v30 = sub_2229C02E0(a1, (uint64_t)v88, a2);
  uint64_t v16 = 8;
  if (v30 <= 0xB && ((1 << v30) & 0xE01) != 0)
  {
    if (*(unsigned char *)(a1 + 56)) {
      return 0;
    }
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(buffer, 0, sizeof(buffer));
    *(_OWORD *)theString = 0u;
    *(_OWORD *)char v91 = 0u;
    int v32 = NFGetProductType();
    uint64_t v33 = 0;
    while (dword_26463A718[v33] != v32)
    {
      v33 += 12;
      if (v33 == 432) {
        goto LABEL_78;
      }
    }
    if (v32)
    {
      dispatch_get_specific(*v7);
      uint64_t v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v34) {
        v34(6, "%s:%i Using local RF settings", "_NFDriverRFSettingsSetup", 713);
      }
      dispatch_get_specific(*v7);
      uint32_t v35 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v98 = 136446466;
        *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
        *(_WORD *)&v98[12] = 1024;
        *(_DWORD *)&v98[14] = 713;
        _os_log_impl(&dword_2229A5000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Using local RF settings", v98, 0x12u);
      }
      CStringPtr = *(const char **)&dword_26463A718[v33 + 8];
      int v36 = *(const char **)&dword_26463A718[v33 + 10];
      goto LABEL_123;
    }
LABEL_78:
    int RFConfigTLVs = NFCalibrationGetRFConfigTLVs();
    dispatch_get_specific(*v7);
    uint64_t v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (!RFConfigTLVs)
    {
      if (v39) {
        v39(4, "%s:%i No custom RF settings found!", "_NFDriverRFSettingsSetup", 788);
      }
      dispatch_get_specific(*v7);
      CFRange v45 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        goto LABEL_95;
      }
      *(_DWORD *)char v98 = 136446466;
      *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 788;
      uint64_t v46 = "%{public}s:%i No custom RF settings found!";
      uint64_t v47 = v98;
      goto LABEL_94;
    }
    if (v39) {
      v39(6, "%s:%i Using EDT RF settings", "_NFDriverRFSettingsSetup", 719);
    }
    dispatch_get_specific(*v7);
    __int16 v40 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)char v98 = 136446466;
      *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 719;
      _os_log_impl(&dword_2229A5000, v40, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Using EDT RF settings", v98, 0x12u);
    }
    if (theString[0])
    {
      CStringPtr = CFStringGetCStringPtr(theString[0], 0x600u);
      if (!CStringPtr)
      {
        CStringPtr = (const char *)buf;
        if (!CFStringGetCString(theString[0], (char *)buf, 256, 0x600u))
        {
          dispatch_get_specific(*v7);
          int v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v41) {
            v41(3, "%s:%i failed to get clock TLV", "_NFDriverRFSettingsSetup", 732);
          }
          dispatch_get_specific(*v7);
          uint64_t v42 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
            goto LABEL_154;
          }
          *(_DWORD *)char v98 = 136446466;
          *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
          *(_WORD *)&v98[12] = 1024;
          *(_DWORD *)&v98[14] = 732;
          CFRange v43 = "%{public}s:%i failed to get clock TLV";
          CFRange v44 = v98;
LABEL_151:
          long long v52 = v42;
          os_log_type_t v53 = OS_LOG_TYPE_ERROR;
          goto LABEL_152;
        }
      }
    }
    else
    {
      CStringPtr = (const char *)buf;
    }
    if (theString[1])
    {
      unint64_t v48 = CFStringGetCStringPtr(theString[1], 0x600u);
      if (v48)
      {
LABEL_99:
        int v36 = v48;
LABEL_123:
        if (NFProductIsDevBoard())
        {
          BOOL v55 = *CStringPtr == 0;
          if (*CStringPtr && NFGetProductType() - 5 <= 5)
          {
            dispatch_get_specific(*v7);
            uint64_t v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v56) {
              v56(6, "%s:%i overriding clock setting to 26MHz ", "_NFDriverRFSettingsSetup", 805);
            }
            dispatch_get_specific(*v7);
            uint64_t v57 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)char v98 = 136446466;
              *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
              *(_WORD *)&v98[12] = 1024;
              *(_DWORD *)&v98[14] = 805;
              _os_log_impl(&dword_2229A5000, v57, OS_LOG_TYPE_DEFAULT, "%{public}s:%i overriding clock setting to 26MHz ", v98, 0x12u);
            }
            CStringPtr = "A0030103";
          }
          memset(v98, 0, sizeof(v98));
          int v99 = 0;
          if (NFDriverGetControllerInfo(a1, (uint64_t)v98))
          {
            if ((*(_DWORD *)&v98[4] - 7) <= 1)
            {
              dispatch_get_specific(*v7);
              uint64_t v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v58) {
                v58(3, "%s:%i Not supported on SN100V dev boards - skipping..", "_NFDriverRFSettingsSetup", 820);
              }
              dispatch_get_specific(*v7);
              CFRange v45 = NFSharedLogGetLogger();
              if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
                goto LABEL_95;
              }
              *(_DWORD *)__int16 v92 = 136446466;
              int v93 = "_NFDriverRFSettingsSetup";
              __int16 v94 = 1024;
              int v95 = 820;
              uint64_t v46 = "%{public}s:%i Not supported on SN100V dev boards - skipping..";
              uint64_t v47 = v92;
LABEL_94:
              _os_log_impl(&dword_2229A5000, v45, OS_LOG_TYPE_ERROR, v46, v47, 0x12u);
LABEL_95:
              uint64_t v16 = 0;
              goto LABEL_155;
            }
            goto LABEL_139;
          }
        }
        else
        {
          memset(v98, 0, sizeof(v98));
          int v99 = 0;
          if (NFDriverGetControllerInfo(a1, (uint64_t)v98))
          {
            BOOL v55 = 1;
LABEL_139:
            uint64_t v59 = NFDataCreateWithHexString();
            if (v59)
            {
              uint64_t v60 = v59;
              if (v36) {
                BOOL v61 = v55;
              }
              else {
                BOOL v61 = 0;
              }
              if (!v61)
              {
                uint64_t v16 = 8;
LABEL_168:
                if (*(void *)(v60 + 8) > 3uLL)
                {
                  uint64_t v73 = NFDataAsHexString();
                  if (v73)
                  {
                    uint64_t v74 = (char *)v73;
                    dispatch_get_specific(*v7);
                    uint64_t v75 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                    if (v75) {
                      v75(6, "%s:%i RF config to set: %s", "_NFDriverRFSettingsSetup", 857, v74);
                    }
                    dispatch_get_specific(*v7);
                    uint64_t v76 = NFSharedLogGetLogger();
                    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__int16 v92 = 136446722;
                      int v93 = "_NFDriverRFSettingsSetup";
                      __int16 v94 = 1024;
                      int v95 = 857;
                      __int16 v96 = 2080;
                      int v97 = v74;
                      _os_log_impl(&dword_2229A5000, v76, OS_LOG_TYPE_DEFAULT, "%{public}s:%i RF config to set: %s", v92, 0x1Cu);
                    }
                    free(v74);
                  }
                  uint64_t v77 = sub_2229C44C8(a1, *(void *)v60, *(_DWORD *)(v60 + 8), 0);
                  if (!v77)
                  {
                    if (sub_2229BEAAC(a1, *(void *)v60, *(void *)(v60 + 8))) {
                      uint64_t v16 = 0;
                    }
                    else {
                      uint64_t v16 = 8;
                    }
                    goto LABEL_198;
                  }
                  uint64_t v16 = v77;
                  dispatch_get_specific(*v7);
                  char v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v78) {
                    v78(3, "%s:%i Failed to set RF settings.", "_NFDriverRFSettingsSetup", 866);
                  }
                  dispatch_get_specific(*v7);
                  int v79 = NFSharedLogGetLogger();
                  if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_198;
                  }
                  *(_DWORD *)__int16 v92 = 136446466;
                  int v93 = "_NFDriverRFSettingsSetup";
                  __int16 v94 = 1024;
                  int v95 = 866;
                  uint32_t v70 = "%{public}s:%i Failed to set RF settings.";
                  int v71 = v79;
                  uint32_t v72 = 18;
                }
                else
                {
                  dispatch_get_specific(*v7);
                  int v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v67) {
                    v67(3, "%s:%i RF settings is too short: length=%zu", "_NFDriverRFSettingsSetup", 850, *(void *)(v60 + 8));
                  }
                  dispatch_get_specific(*v7);
                  os_log_type_t v68 = NFSharedLogGetLogger();
                  if (!os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_198;
                  }
                  int v69 = *(void **)(v60 + 8);
                  *(_DWORD *)__int16 v92 = 136446722;
                  int v93 = "_NFDriverRFSettingsSetup";
                  __int16 v94 = 1024;
                  int v95 = 850;
                  __int16 v96 = 2048;
                  int v97 = v69;
                  uint32_t v70 = "%{public}s:%i RF settings is too short: length=%zu";
                  int v71 = v68;
                  uint32_t v72 = 28;
                }
                _os_log_impl(&dword_2229A5000, v71, OS_LOG_TYPE_ERROR, v70, v92, v72);
LABEL_198:
                NFDataRelease();
                goto LABEL_155;
              }
              if (NFDataCreateWithHexString())
              {
                char v62 = NFDataAppend();
                NFDataRelease();
                if (v62)
                {
                  uint64_t v16 = 0;
                  goto LABEL_168;
                }
                dispatch_get_specific(*v7);
                unsigned __int16 v85 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v85) {
                  v85(3, "%s:%i Failed to merge RF settings", "_NFDriverRFSettingsSetup", 843);
                }
                dispatch_get_specific(*v7);
                size_t v86 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_194;
                }
                *(_DWORD *)__int16 v92 = 136446466;
                int v93 = "_NFDriverRFSettingsSetup";
                __int16 v94 = 1024;
                int v95 = 843;
                __int16 v82 = "%{public}s:%i Failed to merge RF settings";
                int v83 = v86;
                uint32_t v84 = 18;
              }
              else
              {
                dispatch_get_specific(*v7);
                __int16 v80 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v80) {
                  v80(3, "%s:%i Failed to create RF settings from TLV string %s", "_NFDriverRFSettingsSetup", 835, v36);
                }
                dispatch_get_specific(*v7);
                int v81 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_194;
                }
                *(_DWORD *)__int16 v92 = 136446722;
                int v93 = "_NFDriverRFSettingsSetup";
                __int16 v94 = 1024;
                int v95 = 835;
                __int16 v96 = 2080;
                int v97 = (void *)v36;
                __int16 v82 = "%{public}s:%i Failed to create RF settings from TLV string %s";
                int v83 = v81;
                uint32_t v84 = 28;
              }
              _os_log_impl(&dword_2229A5000, v83, OS_LOG_TYPE_ERROR, v82, v92, v84);
LABEL_194:
              NFDataRelease();
              goto LABEL_154;
            }
            dispatch_get_specific(*v7);
            v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v65) {
              v65(3, "%s:%i Failed to create RF settings from clock TLV string %s", "_NFDriverRFSettingsSetup", 828, CStringPtr);
            }
            dispatch_get_specific(*v7);
            uint64_t v66 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
              goto LABEL_154;
            }
            *(_DWORD *)__int16 v92 = 136446722;
            int v93 = "_NFDriverRFSettingsSetup";
            __int16 v94 = 1024;
            int v95 = 828;
            __int16 v96 = 2080;
            int v97 = (void *)CStringPtr;
            CFRange v43 = "%{public}s:%i Failed to create RF settings from clock TLV string %s";
            CFRange v44 = v92;
            long long v52 = v66;
            os_log_type_t v53 = OS_LOG_TYPE_ERROR;
            uint32_t v64 = 28;
LABEL_153:
            _os_log_impl(&dword_2229A5000, v52, v53, v43, v44, v64);
LABEL_154:
            uint64_t v16 = 8;
LABEL_155:
            if (theString[0]) {
              CFRelease(theString[0]);
            }
            if (theString[1]) {
              CFRelease(theString[1]);
            }
            if (v91[1]) {
              CFRelease(v91[1]);
            }
            if (v91[0]) {
              CFRelease(v91[0]);
            }
            return v16;
          }
        }
        dispatch_get_specific(*v7);
        uint64_t v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v63) {
          v63(3, "%s:%i Failed to get controller info", "_NFDriverRFSettingsSetup", 814);
        }
        dispatch_get_specific(*v7);
        uint64_t v42 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
          goto LABEL_154;
        }
        *(_DWORD *)__int16 v92 = 136446466;
        int v93 = "_NFDriverRFSettingsSetup";
        __int16 v94 = 1024;
        int v95 = 814;
        CFRange v43 = "%{public}s:%i Failed to get controller info";
        CFRange v44 = v92;
        goto LABEL_151;
      }
      int v36 = (const char *)buffer;
      if (CFStringGetCString(theString[1], (char *)buffer, 256, 0x600u)) {
        goto LABEL_123;
      }
      dispatch_get_specific(*v7);
      os_log_type_t v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v51) {
        v51(6, "%s:%i failed to get config TLV", "_NFDriverRFSettingsSetup", 748);
      }
      dispatch_get_specific(*v7);
      uint64_t v50 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_154;
      }
      *(_DWORD *)char v98 = 136446466;
      *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 748;
      CFRange v43 = "%{public}s:%i failed to get config TLV";
    }
    else if (sub_2229BE874("JDI"))
    {
      if (!v91[1])
      {
        int v36 = (const char *)buffer;
        goto LABEL_123;
      }
      unint64_t v48 = CFStringGetCStringPtr(v91[1], 0x600u);
      if (v48) {
        goto LABEL_99;
      }
      int v36 = (const char *)buffer;
      if (CFStringGetCString(v91[1], (char *)buffer, 256, 0x600u)) {
        goto LABEL_123;
      }
      dispatch_get_specific(*v7);
      __int16 v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v49) {
        v49(6, "%s:%i failed to get config TLV JDI", "_NFDriverRFSettingsSetup", 764);
      }
      dispatch_get_specific(*v7);
      uint64_t v50 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_154;
      }
      *(_DWORD *)char v98 = 136446466;
      *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 764;
      CFRange v43 = "%{public}s:%i failed to get config TLV JDI";
    }
    else
    {
      int v36 = (const char *)buffer;
      if (!sub_2229BE874("LGD") || !v91[0]) {
        goto LABEL_123;
      }
      unint64_t v48 = CFStringGetCStringPtr(v91[0], 0x600u);
      if (v48) {
        goto LABEL_99;
      }
      int v36 = (const char *)buffer;
      if (CFStringGetCString(v91[0], (char *)buffer, 256, 0x600u)) {
        goto LABEL_123;
      }
      dispatch_get_specific(*v7);
      uint32_t v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v54) {
        v54(6, "%s:%i failed to get config TLV LGD", "_NFDriverRFSettingsSetup", 781);
      }
      dispatch_get_specific(*v7);
      uint64_t v50 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_154;
      }
      *(_DWORD *)char v98 = 136446466;
      *(void *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 781;
      CFRange v43 = "%{public}s:%i failed to get config TLV LGD";
    }
    CFRange v44 = v98;
    long long v52 = v50;
    os_log_type_t v53 = OS_LOG_TYPE_DEFAULT;
LABEL_152:
    uint32_t v64 = 18;
    goto LABEL_153;
  }
  return v16;
}

BOOL NFDriverRFSettingsCopy(uint64_t a1, uint64_t a2, void **a3, _WORD *a4)
{
  memset(v16, 0, sizeof(v16));
  int v17 = 0;
  int ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)v16);
  BOOL result = 0;
  if (ControllerInfo)
  {
    if (HIDWORD(v16[0]) >= 5)
    {
      BOOL result = sub_2229C2268(a1, a2, a3, a4);
      if (!result) {
        return result;
      }
      __src = 0;
      unsigned __int16 v14 = 0;
      if (sub_2229BDBC4(a1, &__src, &v14))
      {
        size_t v10 = v14;
        int v11 = (char *)malloc_type_calloc(1uLL, v14 + (unint64_t)(unsigned __int16)*a4, 0x355FB4AFuLL);
        char v12 = __src;
        if (v11)
        {
          uint64_t v13 = v11;
          memcpy(v11, __src, v10);
          memcpy(&v13[v10], *a3, (unsigned __int16)*a4);
          *a4 += v10;
          free(*a3);
          *a3 = v13;
        }
        free(v12);
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_2229BDBC4(uint64_t a1, void *a2, _WORD *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v42 = 0;
  CFRange v43 = 0;
  __int16 v41 = 2401;
  v50[0] = 12;
  v50[1] = (unsigned __int16)sub_2229C5B30(a1, 1) >> 8;
  v50[2] = sub_2229C5B30(a1, 1);
  v50[3] = (unsigned __int16)sub_2229C5B30(a1, 7) >> 8;
  v50[4] = sub_2229C5B30(a1, 7);
  v50[5] = (unsigned __int16)sub_2229C5B30(a1, 35) >> 8;
  v50[6] = sub_2229C5B30(a1, 35);
  v50[7] = (unsigned __int16)sub_2229C5B30(a1, 25) >> 8;
  v50[8] = sub_2229C5B30(a1, 25);
  v50[9] = (unsigned __int16)sub_2229C5B30(a1, 30) >> 8;
  v50[10] = sub_2229C5B30(a1, 30);
  v50[11] = (unsigned __int16)sub_2229C5B30(a1, 23) >> 8;
  v50[12] = sub_2229C5B30(a1, 23);
  uint64_t v51 = 0x13A09EA098A094A0;
  int v52 = 178325664;
  memset(v39, 0, sizeof(v39));
  int v40 = 0;
  if ((NFDriverGetControllerInfo(a1, (uint64_t)v39) & 1) == 0)
  {
    size_t v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(4, "%s:%i Failed to query controller info.", "_NFDriverRFSettingsGetRFProp", 201);
    }
    dispatch_get_specific(*v10);
    char v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      CFRange v45 = "_NFDriverRFSettingsGetRFProp";
      __int16 v46 = 1024;
      int v47 = 201;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to query controller info.", buf, 0x12u);
    }
    return 1;
  }
  if (HIDWORD(v39[0]) > 6)
  {
    *a2 = 0;
    *a3 = 0;
    uint64_t v13 = sub_2229C3DD8(0x19u, v50);
    CFRange v43 = (void **)v13;
    unsigned __int16 v14 = sub_2229C3DD8(v50[0] << 8, 0);
    uint64_t v42 = (const void **)v14;
    if (!v14 || !v13)
    {
      int v20 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(4, "%s:%i Failed to allocate buffer.", "_NFDriverRFSettingsGetRFProp", 216);
      }
      dispatch_get_specific(*v20);
      int v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        CFRange v45 = "_NFDriverRFSettingsGetRFProp";
        __int16 v46 = 1024;
        int v47 = 216;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer.", buf, 0x12u);
      }
      sub_2229C3E74(&v43);
      sub_2229C3E74((void ***)&v42);
      return 0;
    }
    __int16 v15 = sub_2229C39B8(a1, 37026, (uint64_t)v13, (uint64_t)v14);
    uint64_t v16 = sub_2229BFAD8(v15);
    if (v16 != 18 && v16)
    {
      uint64_t v23 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24) {
        v24(3, "%s:%i Failed to get RF settings; status=0x%04llX", "_NFDriverRFSettingsGetRFProp", 234, *v15);
      }
      dispatch_get_specific(*v23);
      __int16 v25 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = *v15;
        *(_DWORD *)buf = 136446722;
        CFRange v45 = "_NFDriverRFSettingsGetRFProp";
        __int16 v46 = 1024;
        int v47 = 234;
        __int16 v48 = 2048;
        uint64_t v49 = v26;
        _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings; status=0x%04llX",
          buf,
          0x1Cu);
      }
      int v18 = 0;
    }
    else
    {
      int v17 = malloc_type_calloc(1uLL, *((unsigned int *)v42 + 2), 0x100004077774924uLL);
      int v18 = v17;
      if (v17)
      {
        memcpy(v17, *v42, *((unsigned int *)v42 + 2));
        int v19 = *((_DWORD *)v42 + 2);
LABEL_29:
        sub_2229BF93C((void **)v15);
        sub_2229C3E74(&v43);
        sub_2229C3E74((void ***)&v42);
        CFRange v43 = (void **)sub_2229C3DD8(2u, &v41);
        __int16 v27 = sub_2229C3DD8(0x100u, 0);
        uint64_t v42 = (const void **)v27;
        if (v43 && v27)
        {
          unsigned int v28 = sub_2229C39B8(a1, 37027, (uint64_t)v43, (uint64_t)v27);
          if (sub_2229BFAD8(v28))
          {
            __int16 v29 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            unsigned int v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v30) {
              v30(3, "%s:%i Failed to get RF settings registers.", "_NFDriverRFSettingsGetRFProp", 270);
            }
            dispatch_get_specific(*v29);
            uint64_t v31 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              CFRange v45 = "_NFDriverRFSettingsGetRFProp";
              __int16 v46 = 1024;
              int v47 = 270;
              _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings registers.", buf, 0x12u);
            }
          }
          else
          {
            uint32_t v35 = (char *)malloc_type_realloc(v18, *((_DWORD *)v42 + 2) + (unsigned __int16)v19 + 5, 0xD66F05E7uLL);
            if (v35)
            {
              int v36 = v35;
              unsigned __int16 v37 = &v35[(unsigned __int16)v19];
              __int16 v38 = sub_2229C5B30(a1, 6);
              v36[(unsigned __int16)v19] = HIBYTE(v38);
              v37[1] = v38;
              v37[2] = *((unsigned char *)v42 + 8) + 2;
              *(_WORD *)&v36[(unsigned __int16)(v19 + 3)] = v41;
              memcpy(&v36[(unsigned __int16)(v19 + 5)], *v42, *((unsigned int *)v42 + 2));
              LOWORD(v19) = v19 + 5 + *((_WORD *)v42 + 4);
              int v18 = v36;
            }
          }
          sub_2229C3E74(&v43);
          sub_2229C3E74((void ***)&v42);
          sub_2229BF93C((void **)v28);
          if (v18 && (_WORD)v19)
          {
            *a2 = v18;
            *a3 = v19;
            return 1;
          }
          if (!v18) {
            return 0;
          }
        }
        else
        {
          int v32 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v33) {
            v33(4, "%s:%i Failed to allocate outParams buffer.", "_NFDriverRFSettingsGetRFProp", 243);
          }
          dispatch_get_specific(*v32);
          uint64_t v34 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            CFRange v45 = "_NFDriverRFSettingsGetRFProp";
            __int16 v46 = 1024;
            int v47 = 243;
            _os_log_impl(&dword_2229A5000, v34, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate outParams buffer.", buf, 0x12u);
          }
          sub_2229C3E74(&v43);
          sub_2229C3E74((void ***)&v42);
        }
        free(v18);
        return 0;
      }
    }
    LOWORD(v19) = 0;
    goto LABEL_29;
  }
  CFStringRef v6 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7) {
    v7(4, "%s:%i Unsupported hardware.", "_NFDriverRFSettingsGetRFProp", 205);
  }
  dispatch_get_specific(*v6);
  CFStringRef v8 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    CFRange v45 = "_NFDriverRFSettingsGetRFProp";
    __int16 v46 = 1024;
    int v47 = 205;
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Unsupported hardware.", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t NFDriverDisableBoost(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  int v14 = -520024159;
  if (!*(unsigned char *)(a1 + 58)) {
    return 0;
  }
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v15)) {
    return 8;
  }
  if ((HIDWORD(v15[0]) - 13) < 0xFFFFFFFD) {
    return 0;
  }
  char v3 = sub_2229C3DD8(4u, &v14);
  uint64_t v13 = (void **)v3;
  if (!v3) {
    return 3;
  }
  uint64_t v4 = (uint64_t)v3;
  unint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Disabling boost", "NFDriverDisableBoost", 1322);
  }
  dispatch_get_specific(*v5);
  uint64_t v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    int v18 = "NFDriverDisableBoost";
    __int16 v19 = 1024;
    int v20 = 1322;
    _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling boost", buf, 0x12u);
  }
  CFStringRef v8 = sub_2229C39B8(a1, 37025, v4, 0);
  if (sub_2229BFAD8(v8))
  {
    dispatch_get_specific(*v5);
    uint64_t v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9) {
      v9(3, "%s:%i status=0x%04llX", "NFDriverDisableBoost", 1325, *v8);
    }
    dispatch_get_specific(*v5);
    size_t v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *v8;
      *(_DWORD *)buf = 136446722;
      int v18 = "NFDriverDisableBoost";
      __int16 v19 = 1024;
      int v20 = 1325;
      __int16 v21 = 2048;
      uint64_t v22 = v11;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_2229BF93C((void **)v8);
  sub_2229C3E74(&v13);
  return v2;
}

uint64_t NFDriverDisableLPCDAssist(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_2229C3DD8(4u, &unk_2229E80D0);
  uint64_t v9 = (void **)v2;
  if (!v2) {
    return 3;
  }
  char v3 = sub_2229C39B8(a1, 37025, (uint64_t)v2, 0);
  if (sub_2229BFAD8(v3))
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to setup LPCD_CFG", "NFDriverDisableLPCDAssist", 1348);
    }
    dispatch_get_specific(*v4);
    CFStringRef v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v11 = "NFDriverDisableLPCDAssist";
      __int16 v12 = 1024;
      int v13 = 1348;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup LPCD_CFG", buf, 0x12u);
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_2229BF93C((void **)v3);
  sub_2229C3E74(&v9);
  return v7;
}

uint64_t NFDriverEnableSERMPowerSave(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  __int16 v11 = 12;
  int v10 = 33776289;
  uint64_t v2 = sub_2229C3DD8(6u, &v10);
  uint64_t v9 = (void **)v2;
  if (!v2) {
    return 3;
  }
  char v3 = sub_2229C39B8(a1, 37025, (uint64_t)v2, 0);
  if (sub_2229BFAD8(v3))
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to setup SERM power save", "NFDriverEnableSERMPowerSave", 1372);
    }
    dispatch_get_specific(*v4);
    CFStringRef v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v13 = "NFDriverEnableSERMPowerSave";
      __int16 v14 = 1024;
      int v15 = 1372;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup SERM power save", buf, 0x12u);
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_2229BF93C((void **)v3);
  sub_2229C3E74(&v9);
  return v7;
}

uint64_t sub_2229BE874(const char *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 1;
  }
  mach_port_t v2 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v3 = IOServiceNameMatching("disp0");
  io_service_t MatchingService = IOServiceGetMatchingService(v2, v3);
  if (MatchingService)
  {
    io_object_t v5 = MatchingService;
    CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(MatchingService, @"bics-param-set", 0, 0);
    if (!CFProperty)
    {
      uint64_t v13 = 0;
      goto LABEL_17;
    }
    CFDataRef v7 = CFProperty;
    CFTypeID v8 = CFGetTypeID(CFProperty);
    if (v8 == CFDataGetTypeID() && CFDataGetLength(v7) >= 4)
    {
      BytePtr = CFDataGetBytePtr(v7);
      if (!strcmp("LGD", a1))
      {
        unsigned int v15 = *BytePtr;
        uint64_t v13 = 1;
        BOOL v16 = v15 > 0x2D || ((1 << v15) & 0x200340000500) == 0;
        if (!v16 || v15 == 93) {
          goto LABEL_13;
        }
      }
      else if (!strcmp("JDI", a1))
      {
        int v17 = *BytePtr;
        if ((v17 - 31) <= 0x3F && ((1 << (v17 - 31)) & 0x8000000000000009) != 0
          || v17 == 12)
        {
          uint64_t v13 = 1;
          goto LABEL_13;
        }
      }
      else
      {
        int v10 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(3, "%s:%i Unknown parameter !", "watchDisplayCheck", 521);
        }
        dispatch_get_specific(*v10);
        __int16 v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v21 = "watchDisplayCheck";
          __int16 v22 = 1024;
          int v23 = 521;
          _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown parameter !", buf, 0x12u);
        }
      }
    }
    uint64_t v13 = 0;
LABEL_13:
    CFRelease(v7);
LABEL_17:
    IOObjectRelease(v5);
    return v13;
  }
  return 0;
}

uint64_t sub_2229BEAAC(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint32_t v70 = 0;
  __int16 v69 = 0;
  if (!sub_2229BDBC4(a1, &v70, &v69)) {
    return 1;
  }
  io_object_t v5 = v70;
  __int16 v6 = v69;
  if (NFDataCreateWithBytes())
  {
    NFDataPrintAsHexString();
    NFDataRelease();
  }
  if (!v5)
  {
    BOOL v55 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "_NFDriverRFSettingsValidate", 432, "actualRfConfig");
    }
    dispatch_get_specific(*v55);
    uint64_t v57 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsValidate";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 432;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&unsigned char buf[20] = "actualRfConfig";
      _os_log_impl(&dword_2229A5000, v57, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  unsigned int v59 = a3;
  uint64_t v58 = v5;
  if (a3 >= 3u)
  {
    unsigned int v9 = 0;
    int v10 = v5 + 1;
    unsigned int v11 = (unsigned __int16)(v6 - 1);
    uint64_t v7 = 1;
    unsigned int v12 = 3;
    uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
    unsigned int v14 = v59;
    uint64_t v60 = v10;
    unsigned int v61 = v11;
    uint64_t v62 = a2;
    while (1)
    {
      size_t v15 = *(unsigned __int8 *)(a2 + v9 + 2);
      if (v12 + v15 > v14) {
        goto LABEL_97;
      }
      int v16 = *(unsigned __int8 *)(a2 + v9 + 1) | (*(unsigned __int8 *)(a2 + v9) << 8);
      if (v16 > 41065)
      {
        if (v16 > 41117)
        {
          if (v16 > 41134)
          {
            if (v16 == 41135)
            {
              int v17 = "APC_CONTROL_TAG";
LABEL_51:
              int v25 = 0;
              uint64_t v65 = v12;
              uint64_t v26 = (const void *)(a2 + v12);
              unsigned int v63 = v12 + v15;
              do
              {
                int v27 = v25 + 3;
                if (v25 + 3 > v11 || (unsigned int v28 = v10[v25 + 2], v27 + v28 > v11))
                {
                  unsigned int v30 = 0;
                  unsigned int v28 = 0;
                  goto LABEL_63;
                }
                int v29 = v10[v25 + 1] | (v10[v25] << 8);
                int v25 = v27 + v28;
              }
              while (v29 != v16);
              unsigned int v67 = v7;
              unsigned int v30 = &v10[v27];
              if (v28 == v15)
              {
                int v31 = memcmp(v26, &v10[v27], v15);
                unsigned int v28 = v15;
                if (!v31)
                {
                  dispatch_get_specific(*v13);
                  int v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v32) {
                    v32(6, "%s:%i %s(%04X) is OK", "_NFDriverRFSettingsValidateTag", 338, v17, v16);
                  }
                  dispatch_get_specific(*v13);
                  uint64_t v33 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsValidateTag";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 338;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&unsigned char buf[20] = v17;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v16;
                    _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s(%04X) is OK", buf, 0x22u);
                  }
                  unsigned int v11 = v61;
                  unsigned int v9 = v63;
                  uint64_t v7 = v67;
                  goto LABEL_96;
                }
              }
LABEL_63:
              unsigned int v64 = v28;
              os_log_type_t v68 = v30;
              dispatch_get_specific(*v13);
              uint64_t v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v34) {
                v34(3, "%s:%i Failed to verify %s(%04X)", "_NFDriverRFSettingsValidateTag", 332, v17, v16);
              }
              dispatch_get_specific(*v13);
              uint32_t v35 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsValidateTag";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 332;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&unsigned char buf[20] = v17;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v16;
                _os_log_impl(&dword_2229A5000, v35, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to verify %s(%04X)", buf, 0x22u);
              }
              memset(buf, 0, sizeof(buf));
              dispatch_get_specific(*v13);
              int v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              dispatch_get_specific(*v13);
              unsigned __int16 v37 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v71 = 136315906;
                uint32_t v72 = (uint8_t *)"_NFDriverRFSettingsValidateTag";
                __int16 v73 = 1024;
                int v74 = 333;
                __int16 v75 = 2082;
                uint64_t v76 = "Expected tag value : ";
                __int16 v77 = 2048;
                size_t v78 = v15;
                _os_log_impl(&dword_2229A5000, v37, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v71, 0x26u);
              }
              if (v36) {
                v36(3, "%s:%i %s %lu bytes :", "_NFDriverRFSettingsValidateTag", 333, "Expected tag value : ", v15);
              }
              if (v15)
              {
                uint64_t v38 = 0;
                uint64_t v66 = v62 + v65;
                do
                {
                  uint64_t v39 = v13;
                  unint64_t v40 = 0;
                  __int16 v41 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v38)];
                  do
                  {
                    unint64_t v42 = v40 + 1;
                    size_t v43 = v40 + 1 + v38;
                    int v44 = sprintf(v41, "0x%02X ", *(unsigned __int8 *)(v66 + v38 + v40));
                    if (v40 > 6) {
                      break;
                    }
                    v41 += v44;
                    ++v40;
                  }
                  while (v43 < v15);
                  uint64_t v13 = v39;
                  dispatch_get_specific(*v39);
                  CFRange v45 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int v71 = 136446210;
                    uint32_t v72 = buf;
                    _os_log_impl(&dword_2229A5000, v45, OS_LOG_TYPE_ERROR, "%{public}s", v71, 0xCu);
                  }
                  if (v36) {
                    v36(3, "%s", (const char *)buf);
                  }
                  v38 += v42;
                }
                while (v43 < v15);
              }
              memset(buf, 0, sizeof(buf));
              dispatch_get_specific(*v13);
              __int16 v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              dispatch_get_specific(*v13);
              int v47 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v71 = 136315906;
                uint32_t v72 = (uint8_t *)"_NFDriverRFSettingsValidateTag";
                __int16 v73 = 1024;
                int v74 = 334;
                __int16 v75 = 2082;
                uint64_t v76 = "Received tag value : ";
                __int16 v77 = 2048;
                size_t v78 = v64;
                _os_log_impl(&dword_2229A5000, v47, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v71, 0x26u);
              }
              if (v46) {
                v46(3, "%s:%i %s %lu bytes :", "_NFDriverRFSettingsValidateTag", 334, "Received tag value : ", v64);
              }
              if (v64)
              {
                uint64_t v48 = 0;
                do
                {
                  unint64_t v49 = 0;
                  uint64_t v50 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v48)];
                  do
                  {
                    unint64_t v51 = v49 + 1;
                    unint64_t v52 = v49 + 1 + v48;
                    int v53 = sprintf(v50, "0x%02X ", v68[v48 + v49]);
                    if (v49 > 6) {
                      break;
                    }
                    v50 += v53;
                    ++v49;
                  }
                  while (v52 < v64);
                  dispatch_get_specific(*v13);
                  uint32_t v54 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int v71 = 136446210;
                    uint32_t v72 = buf;
                    _os_log_impl(&dword_2229A5000, v54, OS_LOG_TYPE_ERROR, "%{public}s", v71, 0xCu);
                  }
                  if (v46) {
                    v46(3, "%s", (const char *)buf);
                  }
                  v48 += v51;
                }
                while (v52 < v64);
              }
              uint64_t v7 = 0;
              a2 = v62;
              unsigned int v14 = v59;
              int v10 = v60;
              unsigned int v11 = v61;
              unsigned int v9 = v63;
              goto LABEL_96;
            }
            if (v16 == 41226)
            {
              int v17 = "VGPIO_CONFIG_TAG";
              goto LABEL_51;
            }
          }
          else
          {
            if (v16 == 41118)
            {
              int v17 = "RX_CTRL";
              goto LABEL_51;
            }
            if (v16 == 41133)
            {
              int v18 = "FELICA_HIGHZ_RX_TAG";
              goto LABEL_40;
            }
          }
        }
        else if (v16 > 41111)
        {
          if (v16 == 41112)
          {
            int v17 = "LMA_RSSI";
            goto LABEL_51;
          }
          if (v16 == 41114)
          {
            int v17 = "GC_RSSI_THRESHOLD_TAG";
            goto LABEL_51;
          }
        }
        else
        {
          if (v16 == 41066)
          {
            int v17 = "PHASE_OFFSET_TAG";
            goto LABEL_51;
          }
          if (v16 == 41108)
          {
            int v18 = "CEF_FILTERING_CONFIG_TAG";
LABEL_40:
            uint64_t v19 = v7;
            unsigned int v20 = v12 + v15;
            dispatch_get_specific(*v13);
            int v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v23) {
              v23(6, "%s:%i %s(%04X) skipped", "_NFDriverRFSettingsValidate", 459, v18, v16);
            }
            dispatch_get_specific(*v13);
            uint64_t v24 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsValidate";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 459;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&unsigned char buf[20] = v18;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v16;
              _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s(%04X) skipped", buf, 0x22u);
            }
            int v10 = v60;
            goto LABEL_45;
          }
        }
      }
      else
      {
        if (v16 <= 41015)
        {
          switch(v16)
          {
            case 40968:
              int v17 = "SPMI_CONFIG_TAG";
              goto LABEL_51;
            case 40969:
            case 40970:
            case 40971:
            case 40972:
            case 40975:
            case 40976:
            case 40978:
              goto LABEL_33;
            case 40973:
              int v17 = "RF_REGISTER_SETTINGS/FDT";
              goto LABEL_51;
            case 40974:
              int v17 = "PMU_CFG_TAG";
              goto LABEL_51;
            case 40977:
              int v18 = "CLOCK_SEL_CFG_SN100v";
              goto LABEL_40;
            case 40979:
              int v17 = "PMU_CONFIG_TAG";
              goto LABEL_51;
            default:
              int v17 = "CLOCK_SEL_CFG";
              if (v16 != 40963) {
                goto LABEL_33;
              }
              goto LABEL_51;
          }
        }
        int v18 = "NFCLD_THRESHOLD_TAG";
        if (v16 == 41016) {
          goto LABEL_40;
        }
        int v10 = v60;
        if (v16 == 41064)
        {
          int v17 = "LPCD_CONFIG_TAG";
          goto LABEL_51;
        }
      }
LABEL_33:
      uint64_t v19 = v7;
      unsigned int v20 = v12 + v15;
      dispatch_get_specific(*v13);
      __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(6, "%s:%i Unmatched tag 0x%04x", "_NFDriverRFSettingsNameForTag", 408, v16);
      }
      dispatch_get_specific(*v13);
      __int16 v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsNameForTag";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 408;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v16;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Unmatched tag 0x%04x", buf, 0x18u);
      }
LABEL_45:
      unsigned int v11 = v61;
      unsigned int v9 = v20;
      uint64_t v7 = v19;
LABEL_96:
      unsigned int v12 = v9 + 3;
      if (v9 + 3 > v14) {
        goto LABEL_97;
      }
    }
  }
  LOBYTE(v7) = 1;
LABEL_97:
  free(v58);
  return v7 & 1;
}

void *sub_2229BF5F0()
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x1080040D2F62047uLL);
  if (v0)
  {
    unsigned int v1 = (char *)malloc_type_calloc(1uLL, 0xC8uLL, 0x1000040BEF03554uLL);
    if (!v1)
    {
      free(v0);
      return 0;
    }
    mach_port_t v2 = v1;
    *int v0 = 0xBADCAFEF00DLL;
    v0[2] = v1;
    *(void *)unsigned int v1 = 1;
    CFDictionaryRef v3 = (pthread_mutex_t *)(v1 + 136);
    int v4 = pthread_mutex_init((pthread_mutex_t *)(v1 + 136), 0);
    if (v4)
    {
      int v5 = v4;
      free(v2);
      free(v0);
      __int16 v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Mutex init failed : %d", "NFCallbackMutexCreate", 65, v5);
      }
      dispatch_get_specific(*v6);
      CFTypeID v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446722;
      unsigned int v20 = "NFCallbackMutexCreate";
      __int16 v21 = 1024;
      int v22 = 65;
      __int16 v23 = 1024;
      int v24 = v5;
      unsigned int v9 = "%{public}s:%i Mutex init failed : %d";
      goto LABEL_19;
    }
    int v10 = pthread_mutex_init((pthread_mutex_t *)(v2 + 8), 0);
    if (v10)
    {
      int v11 = v10;
      pthread_mutex_destroy(v3);
      free(v2);
      free(v0);
      unsigned int v12 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v13) {
        v13(3, "%s:%i Mutex init failed : %d", "NFCallbackMutexCreate", 73, v11);
      }
      dispatch_get_specific(*v12);
      CFTypeID v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446722;
      unsigned int v20 = "NFCallbackMutexCreate";
      __int16 v21 = 1024;
      int v22 = 73;
      __int16 v23 = 1024;
      int v24 = v11;
      unsigned int v9 = "%{public}s:%i Mutex init failed : %d";
      goto LABEL_19;
    }
    int v14 = pthread_cond_init((pthread_cond_t *)(v2 + 72), 0);
    if (v14)
    {
      int v15 = v14;
      pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
      pthread_mutex_destroy(v3);
      free(v2);
      free(v0);
      int v16 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v17) {
        v17(3, "%s:%i Cond init failed : %d", "NFCallbackMutexCreate", 82, v15);
      }
      dispatch_get_specific(*v16);
      CFTypeID v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446722;
      unsigned int v20 = "NFCallbackMutexCreate";
      __int16 v21 = 1024;
      int v22 = 82;
      __int16 v23 = 1024;
      int v24 = v15;
      unsigned int v9 = "%{public}s:%i Cond init failed : %d";
LABEL_19:
      _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x18u);
      return 0;
    }
  }
  return v0;
}

void sub_2229BF93C(void **a1)
{
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1[2] + 8));
  mach_port_t v2 = (char *)a1[2];
  uint64_t v3 = *(void *)v2 - 1;
  *(void *)mach_port_t v2 = v3;
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (!v3)
  {
    pthread_cond_destroy((pthread_cond_t *)((char *)a1[2] + 72));
    pthread_mutex_destroy((pthread_mutex_t *)((char *)a1[2] + 8));
    pthread_mutex_destroy((pthread_mutex_t *)((char *)a1[2] + 136));
    free(a1[2]);
    free(a1);
  }
}

uint64_t sub_2229BF9CC(void *a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(a1[2] + 8));
  *a1 = a2;
  nfc_err = a2;
  pthread_cond_signal((pthread_cond_t *)(a1[2] + 72));
  int v4 = (pthread_mutex_t *)(a1[2] + 8);

  return pthread_mutex_unlock(v4);
}

uint64_t sub_2229BFA30(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 136));
  clock_gettime(_CLOCK_MONOTONIC_RAW, (timespec *)(v4 + 120));
  uint64_t v5 = (uint64_t)((double)*(uint64_t *)(v4 + 128) + (a2 - (double)(uint64_t)floor(a2)) * 1000.0 * 1000.0 * 1000.0);
  *(void *)(v4 + 120) += vcvtmd_s64_f64(a2);
  *(void *)(v4 + 128) = v5;
  __int16 v6 = (pthread_mutex_t *)(*(void *)(a1 + 16) + 136);

  return pthread_mutex_unlock(v6);
}

uint64_t sub_2229BFAD8(uint64_t *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = 0xBADCAFEF00DLL;
  sub_2229BFA30((uint64_t)a1, 60.0);
  pthread_mutex_lock((pthread_mutex_t *)(a1[2] + 8));
  uint64_t v3 = *a1;
  if (*a1 != 0xBADCAFEF00DLL) {
    goto LABEL_34;
  }
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  while (1)
  {
    do
    {
      __tp.tv_sec = 0;
      __tp.tv_nsec = 0;
      v20.tv_sec = 0;
      v20.tv_nsec = 0;
      pthread_mutex_lock((pthread_mutex_t *)(a1[2] + 136));
      clock_gettime(_CLOCK_MONOTONIC_RAW, &__tp);
      uint64_t v5 = a1[2];
      uint64_t v7 = *(void *)(v5 + 120);
      uint64_t v6 = *(void *)(v5 + 128);
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 136));
      __darwin_time_t v8 = v7 - __tp.tv_sec;
      uint64_t v9 = v6 - __tp.tv_nsec;
      v20.tv_sec = v7 - __tp.tv_sec;
      v20.tv_nsec = v6 - __tp.tv_nsec;
      if (v6 - __tp.tv_nsec < 0)
      {
        --v8;
        v9 += 1000000000;
        v20.tv_sec = v8;
        v20.tv_nsec = v9;
        if ((v8 & 0x8000000000000000) == 0)
        {
LABEL_7:
          if (v8 | v9) {
            goto LABEL_21;
          }
        }
      }
      else if ((v8 & 0x8000000000000000) == 0)
      {
        goto LABEL_7;
      }
      dispatch_get_specific(*v4);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i TIMEOUT!", "NFCallbackMutexWait", 169);
      }
      dispatch_get_specific(*v4);
      int v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v23 = "NFCallbackMutexWait";
        __int16 v24 = 1024;
        int v25 = 169;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i TIMEOUT!", buf, 0x12u);
      }
      if ((byte_267F84C58 & 1) == 0)
      {
        MEMORY[0x223CA2640]();
        byte_267F84C58 = 1;
      }
      if (NFIsRestoreOS()) {
        goto LABEL_33;
      }
      NFSimulateCrash();
      if (!byte_26ABD8431) {
        exit(1);
      }
      dispatch_get_specific(*v4);
      unsigned int v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12) {
        v12(4, "%s:%i Extending timeout 10 seconds. User has requested us to avoid crashing.", "NFCallbackMutexWait", 184);
      }
      dispatch_get_specific(*v4);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v23 = "NFCallbackMutexWait";
        __int16 v24 = 1024;
        int v25 = 184;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Extending timeout 10 seconds. User has requested us to avoid crashing.", buf, 0x12u);
      }
      timespec v20 = (timespec)xmmword_2229E80E0;
LABEL_21:
      int v14 = pthread_cond_timedwait_relative_np((pthread_cond_t *)(a1[2] + 72), (pthread_mutex_t *)(a1[2] + 8), &v20);
    }
    while (v14 == 60);
    if (v14 == 22) {
      break;
    }
    if (*a1 != 0xBADCAFEF00DLL)
    {
      uint64_t v2 = *a1;
      goto LABEL_33;
    }
    dispatch_get_specific(*v4);
    int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(3, "%s:%i semaphore released without signal!", "NFCallbackMutexWait", 210);
    }
    dispatch_get_specific(*v4);
    int v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v23 = "NFCallbackMutexWait";
      __int16 v24 = 1024;
      int v25 = 210;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i semaphore released without signal!", buf, 0x12u);
    }
  }
  dispatch_get_specific(*v4);
  int v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v17) {
    v17(3, "%s:%i Invalid parameter", "NFCallbackMutexWait", 203);
  }
  dispatch_get_specific(*v4);
  int v18 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v23 = "NFCallbackMutexWait";
    __int16 v24 = 1024;
    int v25 = 203;
    _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid parameter", buf, 0x12u);
  }
LABEL_33:
  uint64_t v3 = v2;
LABEL_34:
  pthread_mutex_unlock((pthread_mutex_t *)(a1[2] + 8));
  return v3;
}

CFStringRef NFDriverCopySEIDFromFDR()
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v0 = AMFDRCreateTypeWithOptions();
  if (v0)
  {
    unsigned int v1 = (const void *)v0;
    CFDictionaryRef v2 = (const __CFDictionary *)AMFDRSealingMapCopyManifestProperties();
    if (v2)
    {
      CFDictionaryRef v3 = v2;
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, @"seid");
      if (Value)
      {
        CFStringRef v5 = Value;
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v5))
        {
          CFStringRef Copy = CFStringCreateCopy(0, v5);
          __darwin_time_t v8 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger) {
            Logger(6, "%s:%i SEID in manifest is %@", "NFDriverCopySEIDFromFDR", 516, Copy);
          }
          dispatch_get_specific(*v8);
          int v10 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446722;
            int v25 = "NFDriverCopySEIDFromFDR";
            __int16 v26 = 1024;
            int v27 = 516;
            __int16 v28 = 2112;
            CFStringRef v29 = Copy;
            _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SEID in manifest is %@", buf, 0x1Cu);
          }
          goto LABEL_29;
        }
        __int16 v21 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v22) {
          v22(3, "%s:%i Unexpected type", "NFDriverCopySEIDFromFDR", 510);
        }
        dispatch_get_specific(*v21);
        uint64_t v19 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
LABEL_28:
          CFStringRef Copy = 0;
LABEL_29:
          CFRelease(v1);
          CFRelease(v3);
          return Copy;
        }
        *(_DWORD *)buf = 136446466;
        int v25 = "NFDriverCopySEIDFromFDR";
        __int16 v26 = 1024;
        int v27 = 510;
        timespec v20 = "%{public}s:%i Unexpected type";
      }
      else
      {
        int v17 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v18) {
          v18(3, "%s:%i No SEID in manifest", "NFDriverCopySEIDFromFDR", 505);
        }
        dispatch_get_specific(*v17);
        uint64_t v19 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          goto LABEL_28;
        }
        *(_DWORD *)buf = 136446466;
        int v25 = "NFDriverCopySEIDFromFDR";
        __int16 v26 = 1024;
        int v27 = 505;
        timespec v20 = "%{public}s:%i No SEID in manifest";
      }
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
      goto LABEL_28;
    }
    int v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(3, "%s:%i No sealing manifest", "NFDriverCopySEIDFromFDR", 498);
    }
    dispatch_get_specific(*v14);
    int v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v25 = "NFDriverCopySEIDFromFDR";
      __int16 v26 = 1024;
      int v27 = 498;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i No sealing manifest", buf, 0x12u);
    }
    CFRelease(v1);
  }
  else
  {
    int v11 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unsigned int v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12) {
      v12(3, "%s:%i amfdr is NULL", "NFDriverCopySEIDFromFDR", 492);
    }
    dispatch_get_specific(*v11);
    uint64_t v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v25 = "NFDriverCopySEIDFromFDR";
      __int16 v26 = 1024;
      int v27 = 492;
      _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i amfdr is NULL", buf, 0x12u);
    }
  }
  return 0;
}

uint64_t sub_2229C02E0(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 56)) {
    return 10;
  }
  uint64_t v6 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Restoring RF", "NFDriverRFSettingsSetupSigned", 639);
  }
  dispatch_get_specific(*v6);
  __darwin_time_t v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 639;
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restoring RF", buf, 0x12u);
  }
  memset(buf, 0, 28);
  if ((NFDriverGetControllerInfo(a1, (uint64_t)buf) & 1) == 0)
  {
    dispatch_get_specific(*v6);
    uint64_t v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19) {
      v19(3, "%s:%i Failed to get controller info", "_NFDriverRFSettingsHWSupportsSignedSyscfgCal", 161);
    }
    dispatch_get_specific(*v6);
    timespec v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v83 = 136446466;
      uint32_t v84 = "_NFDriverRFSettingsHWSupportsSignedSyscfgCal";
      __int16 v85 = 1024;
      int v86 = 161;
      _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get controller info", v83, 0x12u);
    }
LABEL_22:
    memset(buf, 0, 28);
    if (NFDriverGetControllerInfo(a1, (uint64_t)buf))
    {
      if (*(_DWORD *)&buf[4] >= 7u)
      {
        dispatch_get_specific(*v6);
        __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v21) {
          v21(6, "%s:%i Restoring RF using FDR Cal data", "NFDriverRFSettingsSetupSigned", 660);
        }
        dispatch_get_specific(*v6);
        int v22 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 660;
          _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restoring RF using FDR Cal data", buf, 0x12u);
        }
        __int16 v23 = sub_2229C15BC(a1, @"ShMC", a3);
        if (v23)
        {
          BOOL v24 = sub_2229C13A4(a1, (uint64_t)v23);
          NFDataRelease();
          if (!v24)
          {
            dispatch_get_specific(*v6);
            int v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v25) {
              v25(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsSetupSigned", 669);
            }
            dispatch_get_specific(*v6);
            __int16 v26 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              return 1;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 669;
            goto LABEL_59;
          }
        }
        else if (NFProductHasModuleCal())
        {
          dispatch_get_specific(*v6);
          uint64_t v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v33) {
            v33(3, "%s:%i Failed to read Module cal data from FDR.", "NFDriverRFSettingsSetupSigned", 674);
          }
          dispatch_get_specific(*v6);
          uint64_t v34 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 674;
            _os_log_impl(&dword_2229A5000, v34, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read Module cal data from FDR.", buf, 0x12u);
          }
          BOOL v35 = sub_2229C206C() == 0;
          unsigned int v36 = 10;
          goto LABEL_83;
        }
        unsigned __int16 v37 = sub_2229C15BC(a1, @"ShSC", a3);
        if (v37)
        {
          BOOL v38 = sub_2229C13A4(a1, (uint64_t)v37);
          NFDataRelease();
          if (!v38)
          {
            dispatch_get_specific(*v6);
            uint64_t v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v39) {
              v39(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsSetupSigned", 689);
            }
            dispatch_get_specific(*v6);
            __int16 v26 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
              return 1;
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 689;
            goto LABEL_59;
          }
          return 0;
        }
        dispatch_get_specific(*v6);
        int v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v47) {
          v47(3, "%s:%i Failed to read RF cal data from FDR.", "NFDriverRFSettingsSetupSigned", 682);
        }
        dispatch_get_specific(*v6);
        uint64_t v48 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 682;
          _os_log_impl(&dword_2229A5000, v48, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read RF cal data from FDR.", buf, 0x12u);
        }
        BOOL v35 = sub_2229C206C() == 0;
        unsigned int v36 = 11;
LABEL_83:
        if (v35) {
          return 0;
        }
        else {
          return v36;
        }
      }
    }
    else
    {
      dispatch_get_specific(*v6);
      int v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27) {
        v27(3, "%s:%i Failed to get controller info", "_NFDriverRFSettingsHWSupportsSignedFDRCal", 172);
      }
      dispatch_get_specific(*v6);
      __int16 v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v83 = 136446466;
        uint32_t v84 = "_NFDriverRFSettingsHWSupportsSignedFDRCal";
        __int16 v85 = 1024;
        int v86 = 172;
        _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get controller info", v83, 0x12u);
      }
    }
    dispatch_get_specific(*v6);
    CFStringRef v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v29) {
      v29(3, "%s:%i Cal not supported with this HW.", "NFDriverRFSettingsSetupSigned", 694);
    }
    dispatch_get_specific(*v6);
    uint64_t v30 = NFSharedLogGetLogger();
    uint64_t result = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 694;
    _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i Cal not supported with this HW.", buf, 0x12u);
    return 0;
  }
  if (*(_DWORD *)&buf[4] != 5) {
    goto LABEL_22;
  }
  mach_port_t v9 = *MEMORY[0x263F0EC88];
  CFDictionaryRef v10 = IOServiceMatching("AppleDiagnosticDataAccess");
  io_service_t MatchingService = IOServiceGetMatchingService(v9, v10);
  if (!MatchingService)
  {
    dispatch_get_specific(*v6);
    int v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v31) {
      v31(3, "%s:%i Failed to get syscfg service", "_NFDriverRFSettingsReadCalDataFromSyscfg", 211);
    }
    dispatch_get_specific(*v6);
    int v32 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 211;
      _os_log_impl(&dword_2229A5000, v32, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get syscfg service", buf, 0x12u);
    }
    goto LABEL_73;
  }
  io_object_t v12 = MatchingService;
  CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(MatchingService, @"AppleDiagnosticDataSysCfg", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  if (!CFProperty)
  {
    dispatch_get_specific(*v6);
    unint64_t v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v40) {
      v40(3, "%s:%i Failed to get syscfg data", "_NFDriverRFSettingsReadCalDataFromSyscfg", 220);
    }
    dispatch_get_specific(*v6);
    __int16 v41 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 220;
      _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get syscfg data", buf, 0x12u);
    }
    goto LABEL_72;
  }
  CFDataRef v14 = CFProperty;
  CFTypeID v15 = CFGetTypeID(CFProperty);
  if (v15 != CFDataGetTypeID())
  {
    dispatch_get_specific(*v6);
    unint64_t v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v42) {
      v42(3, "%s:%i Invalid syscfg type", "_NFDriverRFSettingsReadCalDataFromSyscfg", 226);
    }
    dispatch_get_specific(*v6);
    int v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_71;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 226;
    int v18 = "%{public}s:%i Invalid syscfg type";
LABEL_69:
    size_t v43 = v17;
    os_log_type_t v44 = OS_LOG_TYPE_ERROR;
    goto LABEL_70;
  }
  if ((unint64_t)CFDataGetLength(v14) <= 0x17)
  {
    dispatch_get_specific(*v6);
    int v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(3, "%s:%i Invalid syscfg length", "_NFDriverRFSettingsReadCalDataFromSyscfg", 233);
    }
    dispatch_get_specific(*v6);
    int v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_71;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 233;
    int v18 = "%{public}s:%i Invalid syscfg length";
    goto LABEL_69;
  }
  BytePtr = CFDataGetBytePtr(v14);
  if (*(_DWORD *)BytePtr != 1396926055)
  {
    dispatch_get_specific(*v6);
    uint64_t v66 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v66) {
      v66(3, "%s:%i Invalid syscfg magic", "_NFDriverRFSettingsReadCalDataFromSyscfg", 245);
    }
    dispatch_get_specific(*v6);
    int v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_71;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 245;
    int v18 = "%{public}s:%i Invalid syscfg magic";
    goto LABEL_69;
  }
  uint64_t v50 = BytePtr;
  if (!*((_DWORD *)BytePtr + 5))
  {
LABEL_97:
    uint64_t v56 = 0;
    goto LABEL_98;
  }
  unint64_t v51 = 0;
  unint64_t v52 = (unsigned int *)(BytePtr + 36);
  while (1)
  {
    int v53 = *(v52 - 3);
    if (v53 != 1129206850)
    {
      if (v53 == 1313227628)
      {
        dispatch_get_specific(*v6);
        uint32_t v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v54) {
          v54(3, "%s:%i Invalid syscfg key : NFCl, expecting jumbo", "_NFDriverRFSettingsReadCalDataFromSyscfg", 253);
        }
        dispatch_get_specific(*v6);
        BOOL v55 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 253;
          _os_log_impl(&dword_2229A5000, v55, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid syscfg key : NFCl, expecting jumbo", buf, 0x12u);
        }
      }
      goto LABEL_96;
    }
    if (*(v52 - 2) == 1313227628) {
      break;
    }
LABEL_96:
    ++v51;
    v52 += 5;
    if (v51 >= *((unsigned int *)v50 + 5)) {
      goto LABEL_97;
    }
  }
  uint64_t v72 = *v52;
  __int16 v73 = &v50[v72];
  if (*(_DWORD *)&v50[v72] == -272716322)
  {
    dispatch_get_specific(*v6);
    __int16 v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v77) {
      v77(3, "%s:%i Unintialized NFCl entry!", "_NFDriverRFSettingsReadCalDataFromSyscfg", 266);
    }
    dispatch_get_specific(*v6);
    int v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_71;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 266;
    int v18 = "%{public}s:%i Unintialized NFCl entry!";
    goto LABEL_69;
  }
  int v74 = *v73 | (v50[(v72 + 1)] << 8);
  if (v74 == 9)
  {
    *((_WORD *)v73 + 3) = bswap32((v73[7] | (v73[6] << 8)) - 6) >> 16;
    uint64_t v56 = NFDataCreateWithBytes();
LABEL_98:
    CFRelease(v14);
    IOObjectRelease(v12);
    if (!v56) {
      goto LABEL_73;
    }
    uint64_t v57 = (char *)NFDataAsHexString();
    uint64_t v58 = sub_2229C25AC(*(void *)v56, *(void *)(v56 + 8));
    dispatch_get_specific(*v6);
    unsigned int v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v58)
    {
      if (v59)
      {
        if (v57) {
          uint64_t v60 = v57;
        }
        else {
          uint64_t v60 = "INVALID HEX STRING";
        }
        v59(3, "%s:%i Invalid TLV format for calData = %s", "_NFDriverRFSettingsReadCalDataFromSyscfg", 317, v60);
      }
      dispatch_get_specific(*v6);
      unsigned int v61 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        if (v57) {
          uint64_t v62 = v57;
        }
        else {
          uint64_t v62 = "INVALID HEX STRING";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 317;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = v62;
        unsigned int v63 = "%{public}s:%i Invalid TLV format for calData = %s";
        unsigned int v64 = v61;
        os_log_type_t v65 = OS_LOG_TYPE_ERROR;
LABEL_122:
        _os_log_impl(&dword_2229A5000, v64, v65, v63, buf, 0x1Cu);
      }
    }
    else
    {
      if (v59)
      {
        unsigned int v67 = "INVALID HEX STRING";
        if (v57) {
          unsigned int v67 = v57;
        }
        v59(6, "%s:%i calData = %s", "_NFDriverRFSettingsReadCalDataFromSyscfg", 319, v67);
      }
      dispatch_get_specific(*v6);
      os_log_type_t v68 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v69 = "INVALID HEX STRING";
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
        if (v57) {
          __int16 v69 = v57;
        }
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 319;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&unsigned char buf[20] = v69;
        unsigned int v63 = "%{public}s:%i calData = %s";
        unsigned int v64 = v68;
        os_log_type_t v65 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_122;
      }
    }
    if (v57) {
      free(v57);
    }
    BOOL v70 = sub_2229C13A4(a1, v56);
    NFDataRelease();
    if (!v70)
    {
      dispatch_get_specific(*v6);
      int v71 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v71) {
        v71(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsSetupSigned", 654);
      }
      dispatch_get_specific(*v6);
      __int16 v26 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        return 1;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 654;
LABEL_59:
      _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write RF cal data to NFCC", buf, 0x12u);
      return 1;
    }
    return 0;
  }
  if (v74 == 8)
  {
    dispatch_get_specific(*v6);
    __int16 v75 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v75) {
      v75(6, "%s:%i Version 8 lacks signature and isn't supported anymore, returning NULL", "_NFDriverRFSettingsReadCalDataFromSyscfg", 279);
    }
    dispatch_get_specific(*v6);
    uint64_t v76 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 279;
      int v18 = "%{public}s:%i Version 8 lacks signature and isn't supported anymore, returning NULL";
      size_t v43 = v76;
      os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
LABEL_70:
      _os_log_impl(&dword_2229A5000, v43, v44, v18, buf, 0x12u);
    }
  }
  else
  {
    dispatch_get_specific(*v6);
    size_t v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v78) {
      v78(3, "%s:%i Invalid syscfg version : 0x%x, expecting 0x%x or 0x%x", "_NFDriverRFSettingsReadCalDataFromSyscfg", 286, v74, 8, 9);
    }
    dispatch_get_specific(*v6);
    int v79 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447234;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 286;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v74;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = 8;
      __int16 v81 = 1024;
      int v82 = 9;
      _os_log_impl(&dword_2229A5000, v79, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid syscfg version : 0x%x, expecting 0x%x or 0x%x", buf, 0x24u);
    }
    NFDataCreateWithBytes();
    NFDataPrintAsHexString();
    NFDataRelease();
  }
LABEL_71:
  CFRelease(v14);
LABEL_72:
  IOObjectRelease(v12);
LABEL_73:
  dispatch_get_specific(*v6);
  CFRange v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v45) {
    v45(3, "%s:%i Failed to read RF cal data from syscfg, and no data in Applet, bailing with success.", "NFDriverRFSettingsSetupSigned", 646);
  }
  dispatch_get_specific(*v6);
  __int16 v46 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverRFSettingsSetupSigned";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 646;
    _os_log_impl(&dword_2229A5000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read RF cal data from syscfg, and no data in Applet, bailing with success.", buf, 0x12u);
  }
  return 9;
}

BOOL sub_2229C13A4(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (sub_2229C25AC(*(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to parse TLVs, is the format correct ?", "_NFDriverRFSettingsWriteSignedData", 185);
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v17 = "_NFDriverRFSettingsWriteSignedData";
      __int16 v18 = 1024;
      int v19 = 185;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to parse TLVs, is the format correct ?", buf, 0x12u);
    }
    return 0;
  }
  else
  {
    CFTypeID v15 = (void **)sub_2229C3DD8(*(_DWORD *)(a2 + 8), *(const void **)a2);
    __darwin_time_t v8 = sub_2229C39B8(a1, 222, (uint64_t)v15, 0);
    uint64_t v9 = sub_2229BFAD8(v8);
    BOOL v7 = v9 == 0;
    if (v9)
    {
      CFDictionaryRef v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11) {
        v11(3, "%s:%i Failed to push Cal to NFCC : 0x%4llx", "_NFDriverRFSettingsWriteSignedData", 194, *v8);
      }
      dispatch_get_specific(*v10);
      io_object_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *v8;
        *(_DWORD *)buf = 136446722;
        int v17 = "_NFDriverRFSettingsWriteSignedData";
        __int16 v18 = 1024;
        int v19 = 194;
        __int16 v20 = 2048;
        uint64_t v21 = v13;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to push Cal to NFCC : 0x%4llx", buf, 0x1Cu);
      }
    }
    sub_2229BF93C((void **)v8);
    sub_2229C3E74(&v15);
  }
  return v7;
}

uint64_t *sub_2229C15BC(uint64_t a1, const __CFString *a2, const char *a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  CFTypeRef cf = 0;
  *(_DWORD *)unsigned int v63 = 0;
  UniqueFDRKey = NFDriverGetUniqueFDRKey(a1, v63);
  if (!UniqueFDRKey)
  {
    BOOL v7 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to get FDR key : %d", "_NFDriverCreateInstanceNameForClassData", 532, *(_DWORD *)v63);
    }
    dispatch_get_specific(*v7);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverCreateInstanceNameForClassData";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 532;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = *(_DWORD *)v63;
      _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get FDR key : %d", buf, 0x18u);
    }
    goto LABEL_71;
  }
  uint64_t v6 = UniqueFDRKey;
  if (CFEqual(a2, @"ShMC"))
  {
    CFStringRef v10 = CFStringCreateWithCString(0, v6, 0x600u);
    goto LABEL_34;
  }
  if (CFStringCompare(a2, @"ShSC", 0))
  {
LABEL_4:
    free(v6);
LABEL_71:
    unint64_t v52 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v53 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v53) {
      v53(3, "%s:%i Failed to get instance name", "_NFDriverRFSettingsReadCalDataFromFDR", 584);
    }
    dispatch_get_specific(*v52);
    uint32_t v54 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromFDR";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 584;
      _os_log_impl(&dword_2229A5000, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get instance name", buf, 0x12u);
    }
    return 0;
  }
  int v11 = (const void *)MGCopyAnswer();
  io_object_t v12 = (const void *)MGCopyAnswer();
  if (!v12 || !v11)
  {
    __int16 v18 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19) {
      v19(3, "%s:%i Failed to get MG types", "_NFDriverCreateInstanceNameForClassData", 569);
    }
    dispatch_get_specific(*v18);
    __int16 v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverCreateInstanceNameForClassData";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 569;
      _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get MG types", buf, 0x12u);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v12) {
      CFRelease(v12);
    }
    goto LABEL_4;
  }
  CFStringRef v13 = (const __CFString *)AMFDRCreateInstanceString();
  uint64_t v14 = AMFDRCreateInstanceString();
  CFStringRef v15 = (const __CFString *)v14;
  if (v13 && v14)
  {
    Mutable = CFStringCreateMutable(0, 0);
    int v17 = Mutable;
    if (Mutable)
    {
      CFStringAppendCString(Mutable, v6, 0x600u);
      CFStringAppend(v17, @"-");
      CFStringAppend(v17, v13);
      CFStringAppend(v17, @"-");
      CFStringAppend(v17, v15);
    }
    CFRelease(v13);
  }
  else
  {
    uint64_t v21 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22) {
      v22(3, "%s:%i Failed to get CF types", "_NFDriverCreateInstanceNameForClassData", 561);
    }
    dispatch_get_specific(*v21);
    __int16 v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverCreateInstanceNameForClassData";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 561;
      _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get CF types", buf, 0x12u);
    }
    if (v13) {
      CFRelease(v13);
    }
    int v17 = 0;
    CFStringRef v10 = 0;
    if (!v15) {
      goto LABEL_33;
    }
  }
  CFRelease(v15);
  CFStringRef v10 = v17;
LABEL_33:
  CFRelease(v11);
  CFRelease(v12);
LABEL_34:
  free(v6);
  if (!v10) {
    goto LABEL_71;
  }
  CFDataRef v24 = (const __CFData *)sub_2229C2894((uint64_t)a2, (uint64_t)v10, (CFErrorRef *)&cf, @"Local", a3);
  if (!v24)
  {
    int v25 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26) {
      v26(6, "%s:%i Failed to get FDR data from local store, trying memory", "_NFDriverRFSettingsReadCalDataFromFDR", 591);
    }
    dispatch_get_specific(*v25);
    int v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromFDR";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 591;
      _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Failed to get FDR data from local store, trying memory", buf, 0x12u);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    CFDataRef v24 = (const __CFData *)sub_2229C2894((uint64_t)a2, (uint64_t)v10, (CFErrorRef *)&cf, @"Memory", a3);
    if (!v24)
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v72 = 0u;
      memset(buf, 0, sizeof(buf));
      CFStringRef v55 = CFErrorCopyDescription((CFErrorRef)cf);
      CFStringGetCString(v55, (char *)buf, 255, 0x8000100u);
      dispatch_get_specific(*v25);
      uint64_t v56 = NFLogGetLogger();
      if (v56)
      {
        uint64_t v57 = (void (*)(uint64_t, const char *, ...))v56;
        CFIndex Code = CFErrorGetCode((CFErrorRef)cf);
        v57(3, "%s:%i Failed to get FDR data : %ld - %s", "_NFDriverRFSettingsReadCalDataFromFDR", 602, Code, (const char *)buf);
      }
      dispatch_get_specific(*v25);
      unsigned int v59 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        CFIndex v60 = CFErrorGetCode((CFErrorRef)cf);
        *(_DWORD *)unsigned int v63 = 136446978;
        unsigned int v64 = (uint8_t *)"_NFDriverRFSettingsReadCalDataFromFDR";
        __int16 v65 = 1024;
        int v66 = 602;
        __int16 v67 = 2048;
        os_log_type_t v68 = (const char *)v60;
        __int16 v69 = 2080;
        BOOL v70 = buf;
        _os_log_impl(&dword_2229A5000, v59, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get FDR data : %ld - %s", v63, 0x26u);
      }
      CFRelease(v10);
      if (v55) {
        CFRelease(v55);
      }
      if (cf) {
        CFRelease(cf);
      }
      return 0;
    }
  }
  if (cf)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v75 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v72 = 0u;
    memset(buf, 0, sizeof(buf));
    CFStringRef v28 = CFErrorCopyDescription((CFErrorRef)cf);
    CFStringGetCString(v28, (char *)buf, 255, 0x8000100u);
    CFStringRef v29 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v30 = NFLogGetLogger();
    if (v30)
    {
      int v31 = (void (*)(uint64_t, const char *, ...))v30;
      CFIndex v32 = CFErrorGetCode((CFErrorRef)cf);
      v31(4, "%s:%i Got FDR data but an error is set : %ld - %s", "_NFDriverRFSettingsReadCalDataFromFDR", 612, v32, (const char *)buf);
    }
    dispatch_get_specific(*v29);
    uint64_t v33 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      CFIndex v34 = CFErrorGetCode((CFErrorRef)cf);
      *(_DWORD *)unsigned int v63 = 136446978;
      unsigned int v64 = (uint8_t *)"_NFDriverRFSettingsReadCalDataFromFDR";
      __int16 v65 = 1024;
      int v66 = 612;
      __int16 v67 = 2048;
      os_log_type_t v68 = (const char *)v34;
      __int16 v69 = 2080;
      BOOL v70 = buf;
      _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Got FDR data but an error is set : %ld - %s", v63, 0x26u);
    }
    if (v28) {
      CFRelease(v28);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  CFDataGetBytePtr(v24);
  CFDataGetLength(v24);
  BOOL v35 = (uint64_t *)NFDataCreateWithBytes();
  CFRelease(v24);
  CFRelease(v10);
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unsigned int v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v36) {
    v36(6, "%s:%i Found FDR data, %ld bytes", "_NFDriverRFSettingsReadCalDataFromFDR", 621, v35[1]);
  }
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unsigned __int16 v37 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v38 = v35[1];
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_NFDriverRFSettingsReadCalDataFromFDR";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 621;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&unsigned char buf[20] = v38;
    _os_log_impl(&dword_2229A5000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found FDR data, %ld bytes", buf, 0x1Cu);
  }
  long long v72 = 0u;
  memset(buf, 0, sizeof(buf));
  unint64_t v39 = v35[1];
  uint64_t v61 = *v35;
  unint64_t v40 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  __int16 v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  dispatch_get_specific(*v40);
  unint64_t v42 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    size_t v43 = (uint8_t *)v35[1];
    *(_DWORD *)unsigned int v63 = 136315906;
    unsigned int v64 = (uint8_t *)"_NFDriverRFSettingsReadCalDataFromFDR";
    __int16 v65 = 1024;
    int v66 = 622;
    __int16 v67 = 2082;
    os_log_type_t v68 = "FDR: ";
    __int16 v69 = 2048;
    BOOL v70 = v43;
    _os_log_impl(&dword_2229A5000, v42, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v63, 0x26u);
  }
  if (v41) {
    v41(6, "%s:%i %s %lu bytes :", "_NFDriverRFSettingsReadCalDataFromFDR", 622, "FDR: ", v35[1]);
  }
  if (v39)
  {
    uint64_t v44 = 0;
    do
    {
      unint64_t v45 = 0;
      __int16 v46 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v44)];
      do
      {
        unint64_t v47 = v45 + 1;
        unint64_t v48 = v45 + 1 + v44;
        int v49 = sprintf(v46, "0x%02X ", *(unsigned __int8 *)(v61 + v44 + v45));
        if (v45 > 6) {
          break;
        }
        v46 += v49;
        ++v45;
      }
      while (v48 < v39);
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v50 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unsigned int v63 = 136446210;
        unsigned int v64 = buf;
        _os_log_impl(&dword_2229A5000, v50, OS_LOG_TYPE_DEFAULT, "%{public}s", v63, 0xCu);
      }
      if (v41) {
        v41(6, "%s", (const char *)buf);
      }
      v44 += v47;
    }
    while (v48 < v39);
  }
  return v35;
}

uint64_t sub_2229C206C()
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v0 = AMFDRCreateWithOptions();
  unsigned int v1 = (const void **)MEMORY[0x263F8C6C0];
  if (v0)
  {
    CFDictionaryRef v2 = (const void *)v0;
    uint64_t v3 = AMFDRSealingMapVerifySealing();
    CFRelease(v2);
  }
  else
  {
    uint64_t v3 = 1;
  }
  dispatch_get_specific(*v1);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Sealing status is %d", "_NFDriverRFSettingsFDRSealed", 347, v3);
  }
  dispatch_get_specific(*v1);
  CFStringRef v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    __darwin_time_t v8 = "_NFDriverRFSettingsFDRSealed";
    __int16 v9 = 1024;
    int v10 = 347;
    __int16 v11 = 1024;
    LODWORD(v12) = v3;
    _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Sealing status is %d", buf, 0x18u);
  }
  return v3;
}

BOOL sub_2229C2268(uint64_t a1, uint64_t a2, void **a3, _WORD *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  BOOL v7 = sub_2229C3DD8(0x400u, 0);
  uint64_t v21 = (void **)v7;
  *a3 = 0;
  *a4 = 0;
  __darwin_time_t v8 = sub_2229C39B8(a1, 223, 0, (uint64_t)v7);
  uint64_t v9 = sub_2229BFAD8(v8);
  if (v9)
  {
    int v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to get RF settings; status=0x%04llX.", "NFDriverRFSettingsCopySigned", 751, *v8);
    }
    dispatch_get_specific(*v10);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *v8;
      *(_DWORD *)buf = 136446722;
      __int16 v23 = "NFDriverRFSettingsCopySigned";
      __int16 v24 = 1024;
      int v25 = 751;
      __int16 v26 = 2048;
      uint64_t v27 = v13;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings; status=0x%04llX.",
        buf,
        0x1Cu);
    }
  }
  else
  {
    *a3 = malloc_type_calloc(1uLL, v7[2], 0x100004077774924uLL);
    unsigned int v14 = v7[2];
    if (v14 >= 4)
    {
      unsigned int v15 = 0;
      unsigned int v16 = 0;
      unsigned int v17 = 4;
      do
      {
        size_t v18 = *(unsigned __int8 *)(*(void *)v7 + v16 + 3);
        if (v14 - v16 - 4 < v18) {
          break;
        }
        *(_WORD *)((char *)*a3 + v15) = *(_WORD *)(*(void *)v7 + v16);
        *((unsigned char *)*a3 + v15 + 2) = *(unsigned char *)(*(void *)v7 + v16 + 2 + 1);
        uint64_t v19 = v15 + 3;
        memcpy((char *)*a3 + v19, (const void *)(*(void *)v7 + v17), v18);
        unsigned int v15 = v19 + v18;
        unsigned int v16 = v17 + v18;
        v17 += v18 + 4;
        unsigned int v14 = v7[2];
      }
      while (v17 <= v14);
    }
    *a4 = v14 - 1;
  }
  sub_2229C3E74(&v21);
  sub_2229BF93C((void **)v8);
  return v9 == 0;
}

BOOL NFDriverRFSettingsPushSignedSetting(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  BOOL v2 = sub_2229C13A4(a1, a2);
  if (!v2)
  {
    uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsPushSignedSetting", 765);
    }
    dispatch_get_specific(*v3);
    CFStringRef v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __darwin_time_t v8 = "NFDriverRFSettingsPushSignedSetting";
      __int16 v9 = 1024;
      int v10 = 765;
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write RF cal data to NFCC", buf, 0x12u);
    }
  }
  return v2;
}

uint64_t sub_2229C25AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  while (1)
  {
    if (a2 - v4 <= 1)
    {
      uint64_t v11 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Invalid length : no room for tag", "_NFDriverRFSettingsTLVParser", 119);
      }
      dispatch_get_specific(*v11);
      uint64_t v13 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        return -1;
      }
      *(_DWORD *)buf = 136446466;
      int v25 = "_NFDriverRFSettingsTLVParser";
      __int16 v26 = 1024;
      int v27 = 119;
      unsigned int v14 = "%{public}s:%i Invalid length : no room for tag";
      unsigned int v15 = v13;
      uint32_t v16 = 18;
      goto LABEL_18;
    }
    unsigned int v5 = __rev16(*(unsigned __int16 *)(a1 + v4));
    if (a2 - (v4 + 2) <= 1)
    {
      unsigned int v17 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      size_t v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18) {
        v18(3, "%s:%i Invalid length for tag 0x%x", "_NFDriverRFSettingsTLVParser", 126, v5);
      }
      dispatch_get_specific(*v17);
      uint64_t v19 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        return -1;
      }
      *(_DWORD *)buf = 136446722;
      int v25 = "_NFDriverRFSettingsTLVParser";
      __int16 v26 = 1024;
      int v27 = 126;
      __int16 v28 = 1024;
      unsigned int v29 = v5;
      unsigned int v14 = "%{public}s:%i Invalid length for tag 0x%x";
      unsigned int v15 = v19;
      uint32_t v16 = 24;
LABEL_18:
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      return -1;
    }
    unint64_t v6 = v4 + 4;
    unint64_t v7 = *(unsigned __int8 *)(v4 + a1 + 3) | ((unint64_t)*(unsigned __int8 *)(a1 + v4 + 2) << 8);
    if ((v5 & 0xFFFE) != 0xF000)
    {
      unint64_t v10 = v7;
      goto LABEL_8;
    }
    uint64_t v8 = sub_2229C25AC(a1 + v6, v7);
    uint64_t v9 = v8;
    if (v8 < 0) {
      break;
    }
    unint64_t v10 = v7 - v8;
LABEL_8:
    unint64_t v4 = v10 + v6;
    uint64_t v9 = a2 - v4;
    if (a2 <= v4) {
      return v9;
    }
  }
  uint64_t v21 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v22) {
    v22(3, "%s:%i Failure for tag 0x%x", "_NFDriverRFSettingsTLVParser", 138, v5);
  }
  dispatch_get_specific(*v21);
  __int16 v23 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    int v25 = "_NFDriverRFSettingsTLVParser";
    __int16 v26 = 1024;
    int v27 = 138;
    __int16 v28 = 1024;
    unsigned int v29 = v5;
    _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Failure for tag 0x%x", buf, 0x18u);
  }
  return v9;
}

uint64_t sub_2229C2894(uint64_t a1, uint64_t a2, CFErrorRef *a3, uint64_t a4, const char *a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    if (a3) {
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x263EFFC58], 1, 0);
    }
    uint64_t v11 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i dataClass is NULL", "_NF_AMFDRSealingMapCopyLocalDataForClass", 406);
    }
    dispatch_get_specific(*v11);
    uint64_t v13 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    __int16 v45 = 1024;
    int v46 = 406;
    unsigned int v14 = "%{public}s:%i dataClass is NULL";
LABEL_18:
    _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    return 0;
  }
  uint64_t v7 = AMFDRCreateTypeWithOptions();
  if (!v7)
  {
    if (a3) {
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x263EFFC58], 1, 0);
    }
    unsigned int v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint32_t v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(3, "%s:%i amfdr is NULL", "_NF_AMFDRSealingMapCopyLocalDataForClass", 408);
    }
    dispatch_get_specific(*v15);
    uint64_t v13 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    __int16 v45 = 1024;
    int v46 = 408;
    unsigned int v14 = "%{public}s:%i amfdr is NULL";
    goto LABEL_18;
  }
  uint64_t v8 = (const void *)v7;
  if (AMFDRDataApTicketPopulate())
  {
    uint64_t v9 = AMFDRDataApTicketCopyObjectProperty();
    if (v9)
    {
      unint64_t v10 = (const void *)v9;
      AMFDRSetOption();
      goto LABEL_27;
    }
    if (a3) {
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x263EFFC58], 199, 0);
    }
    unint64_t v39 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unint64_t v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v40) {
      v40(3, "%s:%i Unable to extract trust object digest from AP Ticket", "_NF_AMFDRSealingMapCopyLocalDataForClass", 419);
    }
    dispatch_get_specific(*v39);
    __int16 v41 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
      __int16 v45 = 1024;
      int v46 = 419;
      _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Unable to extract trust object digest from AP Ticket", buf, 0x12u);
    }
    CFRelease(v8);
    return 0;
  }
  if (a3) {
    *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x263EFFC58], 1, 0);
  }
  size_t v18 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v19) {
    v19(3, "%s:%i Unable to read AP Ticket", "_NF_AMFDRSealingMapCopyLocalDataForClass", 425);
  }
  dispatch_get_specific(*v18);
  __int16 v20 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    __int16 v45 = 1024;
    int v46 = 425;
    _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Unable to read AP Ticket", buf, 0x12u);
  }
  unint64_t v10 = 0;
LABEL_27:
  uint64_t v21 = AMFDRSealingMapCopyInstanceForClass();
  if (!v21)
  {
    if (a3) {
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x263EFFC58], 199, 0);
    }
    __int16 v23 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v24) {
      v24(3, "%s:%i Could not get Sealed Data Instance", "_NF_AMFDRSealingMapCopyLocalDataForClass", 434);
    }
    dispatch_get_specific(*v23);
    int v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
      __int16 v45 = 1024;
      int v46 = 434;
      _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Could not get Sealed Data Instance", buf, 0x12u);
    }
    uint64_t v17 = 0;
    __int16 v26 = 0;
    goto LABEL_68;
  }
  uint64_t v22 = (const void *)v21;
  AMFDRSetOption();
  AMFDRSetOption();
  AMFDRSetOption();
  AMFDRDataCopyTrustObject();
  int v27 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  __int16 v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v28) {
    v28(3, "%s:%i AMFDRDataCopyTrustObject failed", "_NF_AMFDRSealingMapCopyLocalDataForClass", 446);
  }
  dispatch_get_specific(*v27);
  unsigned int v29 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    __int16 v45 = 1024;
    int v46 = 446;
    _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i AMFDRDataCopyTrustObject failed", buf, 0x12u);
  }
  __int16 v26 = (const void *)AMFDRDataCopy();
  if (v26)
  {
    AMFDRSetOption();
  }
  else
  {
    uint64_t v30 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v31) {
      v31(3, "%s:%i sealingManifestData DataCopy failed", "_NF_AMFDRSealingMapCopyLocalDataForClass", 455);
    }
    dispatch_get_specific(*v30);
    CFIndex v32 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
      __int16 v45 = 1024;
      int v46 = 455;
      _os_log_impl(&dword_2229A5000, v32, OS_LOG_TYPE_ERROR, "%{public}s:%i sealingManifestData DataCopy failed", buf, 0x12u);
    }
  }
  AMFDRSetOption();
  AMFDRSetOption();
  Mutable = CFStringCreateMutable(0, 0);
  if (Mutable)
  {
    CFIndex v34 = Mutable;
    if (a5 && *a5)
    {
      CFStringAppendCString(Mutable, a5, 0x8000100u);
    }
    else
    {
      if (!NFIsRestoreOS())
      {
        CFURLRef v35 = (CFURLRef)v34;
LABEL_66:
        CFRelease(v35);
        goto LABEL_67;
      }
      CFStringAppend(v34, @"/mnt1");
    }
    CFStringAppend(v34, @"/System/Library/Caches/com.apple.factorydata");
    CFURLRef v35 = CFURLCreateWithString(0, v34, 0);
    CFRelease(v34);
    if (v35)
    {
      unsigned int v36 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unsigned __int16 v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v37) {
        v37(6, "%s:%i Forcing FDR path.", "_NF_AMFDRSealingMapCopyLocalDataForClass", 465);
      }
      dispatch_get_specific(*v36);
      uint64_t v38 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
        __int16 v45 = 1024;
        int v46 = 465;
        _os_log_impl(&dword_2229A5000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Forcing FDR path.", buf, 0x12u);
      }
      AMFDRSetOption();
      goto LABEL_66;
    }
  }
LABEL_67:
  uint64_t v17 = AMFDRDataCopy();
  CFRelease(v22);
LABEL_68:
  CFRelease(v8);
  if (v10) {
    CFRelease(v10);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v17;
}

void NFDriverDumpUART(uint64_t a1)
{
  unsigned int v1 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229C31BC;
  block[3] = &unk_26463ADD8;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_2229C31BC(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 560))
  {
    int v1 = phTmlNfc_IoCtl();
    if (v1)
    {
      int v2 = v1;
      uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i status=0x%04X", "NFDriverDumpUART_block_invoke", 139, v2);
      }
      dispatch_get_specific(*v3);
      unsigned int v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v7 = "NFDriverDumpUART_block_invoke";
        __int16 v8 = 1024;
        int v9 = 139;
        __int16 v10 = 1024;
        int v11 = v2;
        _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
    }
  }
}

void sub_2229C32DC()
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v0 = phTmlNfc_IoCtl();
  if (v0)
  {
    int v1 = v0;
    int v2 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "NFDriverQuerySPMIErrors_block_invoke", 150, v1);
    }
    dispatch_get_specific(*v2);
    unint64_t v4 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unint64_t v6 = "NFDriverQuerySPMIErrors_block_invoke";
      __int16 v7 = 1024;
      int v8 = 150;
      __int16 v9 = 1024;
      int v10 = v1;
      _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
}

BOOL NFDriverNFCCPowerOff(uint64_t a1)
{
  uint64_t v5 = 0;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  __int16 v8 = 0;
  int v1 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  v4[2] = sub_2229C34B0;
  v4[3] = &unk_26463AE20;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_async_and_wait(v1, v4);
  BOOL v2 = *((_WORD *)v6 + 12) == 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_2229C34B0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v2 = phTmlNfc_IoCtl();
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  if (v2)
  {
    uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "NFDriverNFCCPowerOff_block_invoke", 160, *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
    dispatch_get_specific(*v3);
    uint64_t v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *(_DWORD *)buf = 136446722;
      __int16 v8 = "NFDriverNFCCPowerOff_block_invoke";
      __int16 v9 = 1024;
      int v10 = 160;
      __int16 v11 = 1024;
      int v12 = v6;
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
}

uint64_t sub_2229C35F0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*(void *)(*(void *)(a1 + 24) + 560)) {
    return 0;
  }
  if (*(_DWORD *)a1 == 3) {
    return 16;
  }
  int v1 = phTmlNfc_IoCtl();
  if (!v1) {
    return 0;
  }
  int v2 = v1;
  uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(3, "%s:%i status=0x%04X", "_NFDriverDebugFailedHW", 178, v2);
  }
  dispatch_get_specific(*v3);
  uint64_t v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    __int16 v8 = "_NFDriverDebugFailedHW";
    __int16 v9 = 1024;
    int v10 = 178;
    __int16 v11 = 1024;
    int v12 = v2;
    _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
  }
  if (v2 == 11) {
    return 16;
  }
  else {
    return 0;
  }
}

uint64_t NFDriverIsHostWakeCapable(uint64_t a1)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  int v1 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  v4[2] = sub_2229C37E0;
  v4[3] = &unk_26463AE48;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_async_and_wait(v1, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_2229C37E0(uint64_t a1)
{
  uint64_t result = phTmlNfc_IoCtl();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result == 0;
  return result;
}

uint64_t NFDriverSupportsSecureTimersInOFF()
{
  return MEMORY[0x270F96388]();
}

BOOL sub_2229C382C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*(void *)(a1 + 24) + 743)) {
    int64_t v2 = 666000000000;
  }
  else {
    int64_t v2 = 20000000000;
  }
  dispatch_time_t v3 = dispatch_time(0, v2);
  intptr_t v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536), v3);
  if (v4)
  {
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Error : timeout occured !!!", "_NFDriverAcquireSE", 252);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v10 = "_NFDriverAcquireSE";
      __int16 v11 = 1024;
      int v12 = 252;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Error : timeout occured !!!", buf, 0x12u);
    }
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_2229A5000, MEMORY[0x263EF8438], OS_LOG_TYPE_FAULT, "Error : timeout occured !!!", buf, 2u);
    }
  }
  return v4 == 0;
}

void *sub_2229C39B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char v8 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v8[2] + 8));
  uint64_t v9 = v8[2];
  ++*(void *)v9;
  pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
  v8[1] = a4;
  int v10 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229C3A8C;
  block[3] = &unk_26463AE68;
  int v13 = a2;
  block[4] = a1;
  void block[5] = a3;
  void block[6] = a4;
  void block[7] = v8;
  dispatch_async_and_wait(v10, block);
  return v8;
}

void sub_2229C3A8C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_IoCtl();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    intptr_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverIoCtl_block_invoke", 460, v3);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      char v8 = "_Async_NFDriverIoCtl_block_invoke";
      __int16 v9 = 1024;
      int v10 = 460;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 56), v3);
    sub_2229BF93C(*(void ***)(a1 + 56));
  }
}

void sub_2229C3BD8(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a4)
  {
    int v6 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Callback_NFDriverIoCtl", 435, a4);
    }
    dispatch_get_specific(*v6);
    char v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v14 = "_Callback_NFDriverIoCtl";
      __int16 v15 = 1024;
      int v16 = 435;
      __int16 v17 = 1024;
      unsigned int v18 = a4;
      _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  else if (a3)
  {
    int v10 = (void **)a2[1];
    if (v10)
    {
      if (*v10 != *(void **)a3)
      {
        free(*v10);
        size_t v11 = *(unsigned int *)(a3 + 8);
        *((_DWORD *)v10 + 2) = v11;
        unsigned int v12 = malloc_type_calloc(1uLL, v11, 0x94CA1A17uLL);
        *int v10 = v12;
        if (v12) {
          memcpy(v12, *(const void **)a3, *((unsigned int *)v10 + 2));
        }
      }
    }
  }
  sub_2229BF9CC(a2, a4);
  sub_2229BF93C(a2);
}

unsigned int *sub_2229C3D4C(uint64_t a1)
{
  unsigned int v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  unsigned int v3 = v2;
  if (v2)
  {
    size_t v4 = *(unsigned int *)(a1 + 8);
    v2[2] = v4;
    uint64_t v5 = malloc_type_calloc(1uLL, v4, 0x100004077774924uLL);
    *(void *)unsigned int v3 = v5;
    if (v5)
    {
      memcpy(v5, *(const void **)a1, v3[2]);
    }
    else
    {
      free(v3);
      return 0;
    }
  }
  return v3;
}

unsigned int *sub_2229C3DD8(unsigned int a1, const void *a2)
{
  size_t v4 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  uint64_t v5 = v4;
  if (v4)
  {
    v4[2] = a1;
    int v6 = malloc_type_calloc(1uLL, a1, 0x100004077774924uLL);
    *(void *)uint64_t v5 = v6;
    if (v6)
    {
      if (a2) {
        memcpy(v6, a2, v5[2]);
      }
    }
    else
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

void sub_2229C3E74(void ***a1)
{
  if (a1)
  {
    unsigned int v2 = *a1;
    if (*a1)
    {
      if (*v2) {
        free(*v2);
      }
      free(v2);
      *a1 = 0;
    }
  }
}

void *sub_2229C3EBC(uint64_t a1, uint64_t a2)
{
  size_t v4 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  uint64_t v5 = v4[2];
  ++*(void *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  int v6 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229C3F78;
  block[3] = &unk_26463AE88;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = v4;
  dispatch_async_and_wait(v6, block);
  return v4;
}

void sub_2229C3F78(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_SetNfccParams();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    size_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetNfccParams_block_invoke", 550, v3);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      char v8 = "_Async_NFDriverSetNfccParams_block_invoke";
      __int16 v9 = 1024;
      int v10 = 550;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 48), v3);
    sub_2229BF93C(*(void ***)(a1 + 48));
  }
}

void sub_2229C40C0(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

BOOL NFDriverRunIntegrityDebug(uint64_t a1)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  unsigned int v2 = sub_2229C3DD8(0x30u, 0);
  unsigned __int16 v37 = (void **)v2;
  if (!*(unsigned char *)(a1 + 57))
  {
    uint64_t v7 = v2;
    char v8 = sub_2229C39B8(a1, 241, 0, (uint64_t)v2);
    uint64_t v9 = sub_2229BFAD8(v8);
    BOOL v6 = v9 == 0;
    if (v9)
    {
      int v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to get integrity check", "NFDriverRunIntegrityDebug", 572);
      }
      dispatch_get_specific(*v10);
      unsigned int v12 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      *(_DWORD *)buf = 136446466;
      unint64_t v39 = "NFDriverRunIntegrityDebug";
      __int16 v40 = 1024;
      int v41 = 572;
      uint64_t v13 = "%{public}s:%i Failed to get integrity check";
      unsigned int v14 = v12;
      os_log_type_t v15 = OS_LOG_TYPE_ERROR;
      uint32_t v16 = 18;
    }
    else
    {
      __int16 v17 = *(unsigned __int8 **)v7;
      unsigned int v18 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19) {
        v19(6, "%s:%i Session State=%d,                     HW Version=0x%x,                     ROM=0x%x,                     Model=0x%x,                     FW=%x.%x,                     MW=%x.%x r%llx,                     Chip=%x                     Life cycle=%x,                     Data section count=%d,                     Code section count=%d,                     CRC=0x%x,                     status=0x%x", "NFDriverRunIntegrityDebug", 603, *v17, v17[8], v17[9], v17[10], v17[11], v17[12], v17[13], v17[14], *((void *)v17 + 2), *((unsigned __int16 *)v17 + 12), *((unsigned __int16 *)v17 + 13), v17[32],
      }
          v17[33],
          *((_DWORD *)v17 + 9),
          *((unsigned __int16 *)v17 + 20));
      dispatch_get_specific(*v18);
      __int16 v20 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      int v21 = *v17;
      int v22 = v17[8];
      int v23 = v17[9];
      int v24 = v17[10];
      int v25 = v17[11];
      int v26 = v17[12];
      int v27 = v17[13];
      int v28 = v17[14];
      uint64_t v29 = *((void *)v17 + 2);
      int v30 = *((unsigned __int16 *)v17 + 12);
      int v31 = *((unsigned __int16 *)v17 + 13);
      int v32 = v17[32];
      int v33 = v17[33];
      int v34 = *((_DWORD *)v17 + 9);
      int v35 = *((unsigned __int16 *)v17 + 20);
      *(_DWORD *)buf = 136450306;
      unint64_t v39 = "NFDriverRunIntegrityDebug";
      __int16 v40 = 1024;
      int v41 = 603;
      __int16 v42 = 1024;
      int v43 = v21;
      __int16 v44 = 1024;
      int v45 = v22;
      __int16 v46 = 1024;
      int v47 = v23;
      __int16 v48 = 1024;
      int v49 = v24;
      __int16 v50 = 1024;
      int v51 = v25;
      __int16 v52 = 1024;
      int v53 = v26;
      __int16 v54 = 1024;
      int v55 = v27;
      __int16 v56 = 1024;
      int v57 = v28;
      __int16 v58 = 2048;
      uint64_t v59 = v29;
      __int16 v60 = 1024;
      int v61 = v30;
      __int16 v62 = 1024;
      int v63 = v31;
      __int16 v64 = 1024;
      int v65 = v32;
      __int16 v66 = 1024;
      int v67 = v33;
      __int16 v68 = 1024;
      int v69 = v34;
      __int16 v70 = 1024;
      int v71 = v35;
      uint64_t v13 = "%{public}s:%i Session State=%d,                     HW Version=0x%x,                     ROM=0x%x,          "
            "           Model=0x%x,                     FW=%x.%x,                     MW=%x.%x r%llx,                    "
            " Chip=%x                     Life cycle=%x,                     Data section count=%d,                     C"
            "ode section count=%d,                     CRC=0x%x,                     status=0x%x";
      unsigned int v14 = v20;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
      uint32_t v16 = 112;
    }
    _os_log_impl(&dword_2229A5000, v14, v15, v13, buf, v16);
LABEL_17:
    sub_2229BF93C((void **)v8);
    goto LABEL_18;
  }
  unsigned int v3 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  size_t v4 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v4) {
    v4(3, "%s:%i This API is available in DL mode only", "NFDriverRunIntegrityDebug", 565);
  }
  dispatch_get_specific(*v3);
  uint64_t v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    unint64_t v39 = "NFDriverRunIntegrityDebug";
    __int16 v40 = 1024;
    int v41 = 565;
    _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i This API is available in DL mode only", buf, 0x12u);
  }
  BOOL v6 = 0;
LABEL_18:
  sub_2229C3E74(&v37);
  return v6;
}

uint64_t sub_2229C44C8(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    void *v8 = a2;
    *((_DWORD *)v8 + 2) = a3;
    int v10 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v10[2] + 8));
    uint64_t v11 = v10[2];
    ++*(void *)v11;
    pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
    unsigned int v12 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_2229C47DC;
    block[3] = &unk_26463AEA8;
    char v24 = a4;
    block[4] = a1;
    void block[5] = v9;
    void block[6] = v10;
    dispatch_async_and_wait(v12, block);
    if (sub_2229BFAD8(v10))
    {
      uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i status=0x%04llX", "_NFDriverSetRFSettings", 1066, *v10);
      }
      dispatch_get_specific(*v13);
      os_log_type_t v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *v10;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverSetRFSettings";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1066;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v16;
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      if (*v10 == 137) {
        uint64_t v17 = 13;
      }
      else {
        uint64_t v17 = 1;
      }
      unsigned int v18 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229C31BC;
      *(void *)&unsigned char buf[24] = &unk_26463ADD8;
      uint64_t v26 = a1;
      dispatch_async(v18, buf);
    }
    else
    {
      uint64_t v17 = 0;
    }
    sub_2229BF93C((void **)v10);
    free(v9);
  }
  else
  {
    uint64_t v19 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20) {
      v20(3, "%s:%i Allocation failure", "_NFDriverSetRFSettings", 1041);
    }
    dispatch_get_specific(*v19);
    int v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverSetRFSettings";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1041;
      _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  return v17;
}

void sub_2229C47DC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_SetRfSettings();
  if (v2) {
    BOOL v3 = v2 == 13;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    unsigned int v4 = v2;
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to set RF settings : status=0x%04X", "_NFDriverSetRFSettings_block_invoke", 1059, v4);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v9 = "_NFDriverSetRFSettings_block_invoke";
      __int16 v10 = 1024;
      int v11 = 1059;
      __int16 v12 = 1024;
      unsigned int v13 = v4;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF settings : status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 48), v4);
    sub_2229BF93C(*(void ***)(a1 + 48));
  }
}

void sub_2229C492C(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

__CFDictionary *NFDriverCopyAndClearAssertion(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unsigned int v2 = (unsigned int *)malloc_type_calloc(1uLL, 0xC0uLL, 0x10100405E15A40BuLL);
  if (v2)
  {
    BOOL v3 = v2;
    unsigned int v4 = sub_2229C4D1C(a1, 1, (uint64_t)v2);
    uint64_t v5 = sub_2229BFAD8(v4);
    BOOL v6 = (const void **)MEMORY[0x263F8C6C0];
    if (v5)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i status=0x%04llX", "NFDriverCopyAndClearAssertion", 1402, *v4);
      }
      dispatch_get_specific(*v6);
      char v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *v4;
        *(_DWORD *)buf = 136446722;
        uint64_t v26 = "NFDriverCopyAndClearAssertion";
        __int16 v27 = 1024;
        int v28 = 1402;
        __int16 v29 = 2048;
        uint64_t v30 = v9;
        _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
    }
    else
    {
      sub_2229C4DE0((int *)v3);
      if (*(unsigned char *)(*(void *)(a1 + 24) + 740))
      {
        sub_2229C5AD0(a1);
        postAnalyticsHardwareExceptionEvent();
      }
    }
    sub_2229BF93C((void **)v4);
    Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (Mutable)
    {
      CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, v3);
      if (v14)
      {
        CFNumberRef v15 = v14;
        CFDictionaryAddValue(Mutable, @"PC", v14);
        CFRelease(v15);
      }
      CFIndex v16 = v3[46];
      if (v16)
      {
        uint64_t v17 = (const UInt8 *)*((void *)v3 + 22);
        if (v17)
        {
          CFDataRef v18 = CFDataCreate(0, v17, v16);
          if (v18)
          {
            CFDataRef v19 = v18;
            CFDictionaryAddValue(Mutable, @"Assert", v18);
            CFRelease(v19);
          }
        }
      }
    }
    free(v3);
    __int16 v20 = sub_2229C4D1C(a1, 0, 0);
    if (sub_2229BFAD8(v20))
    {
      dispatch_get_specific(*v6);
      int v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(3, "%s:%i status=0x%04llX", "NFDriverCopyAndClearAssertion", 1426, *v20);
      }
      dispatch_get_specific(*v6);
      int v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *v20;
        *(_DWORD *)buf = 136446722;
        uint64_t v26 = "NFDriverCopyAndClearAssertion";
        __int16 v27 = 1024;
        int v28 = 1426;
        __int16 v29 = 2048;
        uint64_t v30 = v23;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
    }
    sub_2229BF93C((void **)v20);
  }
  else
  {
    __int16 v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(3, "%s:%i Allocation failed", "NFDriverCopyAndClearAssertion", 1395);
    }
    dispatch_get_specific(*v10);
    __int16 v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v26 = "NFDriverCopyAndClearAssertion";
      __int16 v27 = 1024;
      int v28 = 1395;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failed", buf, 0x12u);
    }
    return 0;
  }
  return Mutable;
}

void *sub_2229C4D1C(uint64_t a1, int a2, uint64_t a3)
{
  BOOL v6 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v6[2] + 8));
  uint64_t v7 = v6[2];
  ++*(void *)v7;
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
  char v8 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  void v10[2] = sub_2229E1398;
  v10[3] = &unk_26463B6E8;
  int v11 = a2;
  v10[4] = a1;
  v10[5] = a3;
  v10[6] = v6;
  dispatch_async_and_wait(v8, v10);
  return v6;
}

void sub_2229C4DE0(int *a1)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  unsigned int v2 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(3, "%s:%i PC: %d", "_NFDriverLogAssert", 1081, *a1);
  }
  dispatch_get_specific(*v2);
  unsigned int v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = *a1;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1081;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v5;
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i PC: %d", buf, 0x18u);
  }
  dispatch_get_specific(*v2);
  BOOL v6 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v6) {
    v6(3, "%s:%i ---- HARD FAULT ----", "_NFDriverLogAssert", 1082);
  }
  dispatch_get_specific(*v2);
  uint64_t v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1082;
    _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- HARD FAULT ----", buf, 0x12u);
  }
  dispatch_get_specific(*v2);
  char v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8) {
    v8(3, "%s:%i R0=0x%04x R1=0x%04x R2=0x%04x R3=0x%04x R12=0x%04x", "_NFDriverLogAssert", 1086, a1[25], a1[26], a1[27], a1[28], a1[29]);
  }
  dispatch_get_specific(*v2);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = a1[25];
    int v11 = a1[26];
    int v12 = a1[27];
    int v13 = a1[28];
    int v14 = a1[29];
    *(_DWORD *)buf = 136447746;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1086;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v10;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v11;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v12;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v13;
    WORD5(v97) = 1024;
    HIDWORD(v97) = v14;
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i R0=0x%04x R1=0x%04x R2=0x%04x R3=0x%04x R12=0x%04x", buf, 0x30u);
  }
  dispatch_get_specific(*v2);
  CFNumberRef v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15) {
    v15(3, "%s:%i LR=0x%04x PC=0x%04x XPSR=0x%04x", "_NFDriverLogAssert", 1089, a1[30], a1[31], a1[32]);
  }
  dispatch_get_specific(*v2);
  CFIndex v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    int v17 = a1[30];
    int v18 = a1[31];
    int v19 = a1[32];
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1089;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v17;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v18;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v19;
    _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i LR=0x%04x PC=0x%04x XPSR=0x%04x", buf, 0x24u);
  }
  dispatch_get_specific(*v2);
  __int16 v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20) {
    v20(3, "%s:%i HFLR=0x%04x PSP=0x%04x MSP=0x%04x", "_NFDriverLogAssert", 1092, a1[33], a1[34], a1[35]);
  }
  dispatch_get_specific(*v2);
  int v21 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    int v22 = a1[33];
    int v23 = a1[34];
    int v24 = a1[35];
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1092;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v22;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v23;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v24;
    _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i HFLR=0x%04x PSP=0x%04x MSP=0x%04x", buf, 0x24u);
  }
  dispatch_get_specific(*v2);
  int v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v25) {
    v25(3, "%s:%i ---- WATCHDOG ----", "_NFDriverLogAssert", 1093);
  }
  dispatch_get_specific(*v2);
  uint64_t v26 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1093;
    _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- WATCHDOG ----", buf, 0x12u);
  }
  dispatch_get_specific(*v2);
  __int16 v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v27) {
    v27(3, "%s:%i RF-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1096, a1[1], a1[2], a1[3], a1[4]);
  }
  dispatch_get_specific(*v2);
  int v28 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    int v29 = a1[1];
    int v30 = a1[2];
    int v31 = a1[3];
    int v32 = a1[4];
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1096;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v29;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v30;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v31;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v32;
    _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i RF-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  int v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v33) {
    v33(3, "%s:%i SWP-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1099, a1[5], a1[6], a1[7], a1[8]);
  }
  dispatch_get_specific(*v2);
  int v34 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    int v35 = a1[5];
    int v36 = a1[6];
    int v37 = a1[7];
    int v38 = a1[8];
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1099;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v35;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v36;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v37;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v38;
    _os_log_impl(&dword_2229A5000, v34, OS_LOG_TYPE_ERROR, "%{public}s:%i SWP-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  unint64_t v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v39) {
    v39(3, "%s:%i kernel: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1102, a1[9], a1[10], a1[11], a1[12]);
  }
  dispatch_get_specific(*v2);
  __int16 v40 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    int v41 = a1[9];
    int v42 = a1[10];
    int v43 = a1[11];
    int v44 = a1[12];
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1102;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v41;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v42;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v43;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v44;
    _os_log_impl(&dword_2229A5000, v40, OS_LOG_TYPE_ERROR, "%{public}s:%i kernel: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  int v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v45) {
    v45(3, "%s:%i host: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1105, a1[13], a1[14], a1[15], a1[16]);
  }
  dispatch_get_specific(*v2);
  __int16 v46 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    int v47 = a1[13];
    int v48 = a1[14];
    int v49 = a1[15];
    int v50 = a1[16];
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1105;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v47;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v48;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v49;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v50;
    _os_log_impl(&dword_2229A5000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i host: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  int v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v51) {
    v51(3, "%s:%i mailbox: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1108, a1[17], a1[18], a1[19], a1[20]);
  }
  dispatch_get_specific(*v2);
  __int16 v52 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    int v53 = a1[17];
    int v54 = a1[18];
    int v55 = a1[19];
    int v56 = a1[20];
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1108;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v53;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v54;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v55;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v56;
    _os_log_impl(&dword_2229A5000, v52, OS_LOG_TYPE_ERROR, "%{public}s:%i mailbox: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  int v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v57) {
    v57(3, "%s:%i host-LP: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1111, a1[21], a1[22], a1[23], a1[24]);
  }
  dispatch_get_specific(*v2);
  __int16 v58 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    int v59 = a1[21];
    int v60 = a1[22];
    int v61 = a1[23];
    int v62 = a1[24];
    *(_DWORD *)buf = 136447490;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1111;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v59;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v60;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v61;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v62;
    _os_log_impl(&dword_2229A5000, v58, OS_LOG_TYPE_ERROR, "%{public}s:%i host-LP: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  int v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v63) {
    v63(3, "%s:%i ---- TICKS ----", "_NFDriverLogAssert", 1113);
  }
  dispatch_get_specific(*v2);
  __int16 v64 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1113;
    _os_log_impl(&dword_2229A5000, v64, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- TICKS ----", buf, 0x12u);
  }
  dispatch_get_specific(*v2);
  int v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v65) {
    v65(3, "%s:%i RF=0x%04x, SWP=0x%04x, Kernel=0x%04x, Host=0x%04x, SMB=0x%04x, LowPwr=0x%04x, sys=0x%04x", "_NFDriverLogAssert", 1114, a1[36], a1[37], a1[38], a1[39], a1[40], a1[41], a1[42]);
  }
  dispatch_get_specific(*v2);
  __int16 v66 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
  {
    int v67 = a1[36];
    int v68 = a1[37];
    int v69 = a1[38];
    int v70 = a1[39];
    int v71 = a1[40];
    int v72 = a1[41];
    int v73 = a1[42];
    *(_DWORD *)buf = 136448258;
    *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1114;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v67;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v68;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v97) = v69;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v70;
    WORD5(v97) = 1024;
    HIDWORD(v97) = v71;
    __int16 v98 = 1024;
    int v99 = v72;
    __int16 v100 = 1024;
    int v101 = v73;
    _os_log_impl(&dword_2229A5000, v66, OS_LOG_TYPE_ERROR, "%{public}s:%i RF=0x%04x, SWP=0x%04x, Kernel=0x%04x, Host=0x%04x, SMB=0x%04x, LowPwr=0x%04x, sys=0x%04x", buf, 0x3Cu);
  }
  if (a1[46] && *((void *)a1 + 22))
  {
    dispatch_get_specific(*v2);
    long long v74 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v74) {
      v74(3, "%s:%i ---- ASSERT ----", "_NFDriverLogAssert", 1117);
    }
    dispatch_get_specific(*v2);
    long long v75 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverLogAssert";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1117;
      _os_log_impl(&dword_2229A5000, v75, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- ASSERT ----", buf, 0x12u);
    }
    long long v97 = 0u;
    memset(buf, 0, sizeof(buf));
    unint64_t v76 = a1[46];
    uint64_t v87 = *((void *)a1 + 22);
    dispatch_get_specific(*v2);
    long long v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v2);
    long long v78 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v79 = a1[46];
      *(_DWORD *)__int16 v88 = 136315906;
      int v89 = (uint8_t *)"_NFDriverLogAssert";
      __int16 v90 = 1024;
      int v91 = 1118;
      __int16 v92 = 2082;
      int v93 = "Assert info";
      __int16 v94 = 2048;
      uint64_t v95 = v79;
      _os_log_impl(&dword_2229A5000, v78, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v88, 0x26u);
    }
    if (v77) {
      v77(3, "%s:%i %s %lu bytes :", "_NFDriverLogAssert", 1118, "Assert info", a1[46]);
    }
    if (v76)
    {
      uint64_t v80 = 0;
      do
      {
        unint64_t v81 = 0;
        long long v82 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v80)];
        do
        {
          unint64_t v83 = v81 + 1;
          unint64_t v84 = v81 + 1 + v80;
          int v85 = sprintf(v82, "0x%02X ", *(unsigned __int8 *)(v87 + v80 + v81));
          if (v81 > 6) {
            break;
          }
          v82 += v85;
          ++v81;
        }
        while (v84 < v76);
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v86 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int16 v88 = 136446210;
          int v89 = buf;
          _os_log_impl(&dword_2229A5000, v86, OS_LOG_TYPE_ERROR, "%{public}s", v88, 0xCu);
        }
        if (v77) {
          v77(3, "%s", (const char *)buf);
        }
        v80 += v83;
      }
      while (v84 < v76);
    }
  }
}

uint64_t sub_2229C5AD0(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  int v4 = 0;
  int ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)v3);
  uint64_t result = 0;
  if (ControllerInfo)
  {
    if ((HIDWORD(v3[0]) - 5) > 0xD) {
      return 0;
    }
    else {
      return dword_2229E82A0[HIDWORD(v3[0]) - 5];
    }
  }
  return result;
}

uint64_t sub_2229C5B30(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x2000000000;
  __int16 v10 = 0;
  unsigned int v2 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229C5BE4;
  block[3] = &unk_26463AED0;
  block[4] = &v7;
  void block[5] = a1;
  int v6 = a2;
  dispatch_async_and_wait(v2, block);
  uint64_t v3 = *((unsigned __int16 *)v8 + 12);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t sub_2229C5BE4(uint64_t a1)
{
  uint64_t result = phLibNfc_Mgt_GetTagID();
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t NFDriverDisableHeadlessModeMiniNV(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v2 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i WARNING !!!\nWARNING !!!\nWriting to Mini NV to disable headless. This is not expected outside factory.\nWARNING !!!", "NFDriverDisableHeadlessModeMiniNV", 1627);
  }
  dispatch_get_specific(*v2);
  int v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v7 = "NFDriverDisableHeadlessModeMiniNV";
    __int16 v8 = 1024;
    int v9 = 1627;
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i WARNING !!!\nWARNING !!!\nWriting to Mini NV to disable headless. This is not expected outside factory.\nWARNING !!!", buf, 0x12u);
  }
  return sub_2229C5D28(a1, 0);
}

uint64_t sub_2229C5D28(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  BOOL v4 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v22)) {
    return v4;
  }
  if (HIDWORD(v22[0]) <= 6)
  {
    int v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Device does not support this feature", "_NFDriverConfigMiniNVForHeadless", 1589);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    BOOL v4 = 0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v25 = "_NFDriverConfigMiniNVForHeadless";
      __int16 v26 = 1024;
      int v27 = 1589;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
      return 0;
    }
    return v4;
  }
  if (HIDWORD(v22[0]) == 18) {
    return 1;
  }
  int v8 = sub_2229C7414(a1, (int *)&v23 + 1);
  if (HIDWORD(v23)) {
    int v9 = a2 ^ 1;
  }
  else {
    int v9 = v8;
  }
  uint64_t v10 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if ((a2 ^ 1) != v9)
  {
    if (v11) {
      v11(6, "%s:%i Headless mini NV already set", "_NFDriverConfigMiniNVForHeadless", 1619);
    }
    dispatch_get_specific(*v10);
    int v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v25 = "_NFDriverConfigMiniNVForHeadless";
      __int16 v26 = 1024;
      int v27 = 1619;
      _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Headless mini NV already set", buf, 0x12u);
    }
    return 1;
  }
  if (v11) {
    v11(6, "%s:%i Writing headless mini NV ", "_NFDriverConfigMiniNVForHeadless", 1605);
  }
  dispatch_get_specific(*v10);
  int v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    int v25 = "_NFDriverConfigMiniNVForHeadless";
    __int16 v26 = 1024;
    int v27 = 1605;
    _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Writing headless mini NV ", buf, 0x12u);
  }
  __int16 v13 = sub_2229C5B30(a1, 3);
  v21[0] = HIBYTE(v13);
  v21[1] = v13;
  v21[2] = 1;
  v21[3] = a2;
  __int16 v20 = (void **)sub_2229C3DD8(4u, v21);
  int v14 = sub_2229C39B8(a1, 37025, (uint64_t)v20, 0);
  uint64_t v15 = sub_2229BFAD8(v14);
  BOOL v4 = v15 == 0;
  if (v15)
  {
    dispatch_get_specific(*v10);
    CFIndex v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(3, "%s:%i Failed to write miniNV", "_NFDriverConfigMiniNVForHeadless", 1613);
    }
    dispatch_get_specific(*v10);
    int v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v25 = "_NFDriverConfigMiniNVForHeadless";
      __int16 v26 = 1024;
      int v27 = 1613;
      _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write miniNV", buf, 0x12u);
    }
  }
  sub_2229BF93C((void **)v14);
  sub_2229C3E74(&v20);
  return v4;
}

uint64_t NFDriverEnableHeadlessModeMiniNV(uint64_t a1)
{
  return sub_2229C5D28(a1, 1);
}

uint64_t NFDriverSetHeadlessMode(uint64_t a1, int a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  memset(v30, 0, sizeof(v30));
  int v31 = 0;
  BOOL v4 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v30)) {
    return v4;
  }
  if (HIDWORD(v30[0]) <= 6)
  {
    int v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Device does not support this feature", "NFDriverSetHeadlessMode", 1646);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverSetHeadlessMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1646;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
    }
    return 1;
  }
  if (HIDWORD(v30[0]) == 18) {
    return 1;
  }
  int v9 = (const void **)MEMORY[0x263F8C6C0];
  if (*(unsigned char *)(a1 + 60) || *(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 36))
  {
    if (!sub_2229C699C(a1, 0, 0, 0, 0, 0, 0))
    {
      dispatch_get_specific(*v9);
      uint64_t v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10) {
        v10(4, "%s:%i Failed to stop discovery", "NFDriverSetHeadlessMode", 1659);
      }
      dispatch_get_specific(*v9);
      int v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverSetHeadlessMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1659;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    int v12 = 1;
    if (a2)
    {
LABEL_19:
      if (!sub_2229C5D28(a1, 1)) {
        return 0;
      }
    }
  }
  else
  {
    int v12 = 0;
    if (a2) {
      goto LABEL_19;
    }
  }
  dispatch_get_specific(*v9);
  __int16 v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13)
  {
    if (a2) {
      int v14 = "En";
    }
    else {
      int v14 = "Dis";
    }
    v13(6, "%s:%i %sabling headless mode", "NFDriverSetHeadlessMode", 1667, v14);
  }
  dispatch_get_specific(*v9);
  uint64_t v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      CFIndex v16 = "En";
    }
    else {
      CFIndex v16 = "Dis";
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "NFDriverSetHeadlessMode";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1667;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v16;
    _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %sabling headless mode", buf, 0x1Cu);
  }
  int v17 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v17[2] + 8));
  uint64_t v18 = v17[2];
  ++*(void *)v18;
  pthread_mutex_unlock((pthread_mutex_t *)(v18 + 8));
  int v19 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E1524;
  *(void *)&unsigned char buf[24] = &unk_26463B708;
  char v34 = a2;
  *(void *)&uint8_t buf[32] = a1;
  int v33 = v17;
  dispatch_async_and_wait(v19, buf);
  uint64_t v20 = sub_2229BFAD8(v17);
  BOOL v4 = v20 == 0;
  if (v20)
  {
    dispatch_get_specific(*v9);
    int v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21)
    {
      if (a2) {
        int v22 = "en";
      }
      else {
        int v22 = "dis";
      }
      v21(4, "%s:%i failed to %sable headless mode: 0x%04llX", "NFDriverSetHeadlessMode", 1671, v22, *v17);
    }
    dispatch_get_specific(*v9);
    uint64_t v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      if (a2) {
        int v24 = "en";
      }
      else {
        int v24 = "dis";
      }
      uint64_t v25 = *v17;
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "NFDriverSetHeadlessMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1671;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v24;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&unsigned char buf[30] = v25;
      _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to %sable headless mode: 0x%04llX", buf, 0x26u);
    }
    __int16 v26 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229C31BC;
    *(void *)&unsigned char buf[24] = &unk_26463ADD8;
    *(void *)&uint8_t buf[32] = a1;
    dispatch_async(v26, buf);
  }
  sub_2229BF93C((void **)v17);
  if (v12)
  {
    int v27 = *(unsigned char *)(a1 + 62) ? 1 : 2;
    if (!sub_2229C699C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v27))
    {
      dispatch_get_specific(*v9);
      uint64_t v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v28) {
        v28(3, "%s:%i Failed to update discovery", "NFDriverSetHeadlessMode", 1679);
      }
      dispatch_get_specific(*v9);
      int v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverSetHeadlessMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1679;
        _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to update discovery", buf, 0x12u);
      }
      return 0;
    }
  }
  return v4;
}

uint64_t NFDriverGetControllerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 20) = 83952416;
  *(_DWORD *)(a2 + 24) = 0;
  if (*(unsigned char *)(a1 + 57))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    int v5 = *(_DWORD *)(v4 + 604);
    *(_DWORD *)a2 = v5;
    int v6 = *(unsigned __int8 *)(v4 + 608);
    *(unsigned char *)(a2 + 24) = v6;
    *(_DWORD *)(a2 + 4) = sub_2229C8060(v5, v6);
    *(_DWORD *)(a2 + 8) = *(unsigned __int8 *)(v4 + 641);
    *(void *)(a2 + 12) = *(void *)(v4 + 596);
    *(unsigned char *)(a1 + 63) = (*(unsigned char *)(v4 + 664) & 8) != 0;
    *(unsigned char *)(a1 + 64) = (*(unsigned char *)(v4 + 664) & 0x20) != 0;
    return 1;
  }
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0x1000040C460F39EuLL);
  if (result)
  {
    int v8 = (unsigned __int8 *)result;
    int v9 = (void **)sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)((char *)v9[2] + 8));
    uint64_t v10 = (char *)v9[2];
    ++*(void *)v10;
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
    int v11 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)uint64_t block = MEMORY[0x263EF8330];
    *(void *)&void block[8] = 0x40000000;
    *(void *)&block[16] = sub_2229E4688;
    *(void *)&block[24] = &unk_26463B7D0;
    uint64_t v20 = a1;
    int v21 = v8;
    int v22 = v9;
    dispatch_async_and_wait(v11, block);
    if (!sub_2229BFAD8((uint64_t *)v9))
    {
      int v17 = *v8;
      *(_DWORD *)a2 = v17;
      int v18 = v8[2];
      *(unsigned char *)(a2 + 24) = v18;
      *(_DWORD *)(a2 + 4) = sub_2229C8060(v17, v18);
      *(_DWORD *)(a2 + 8) = v8[1];
      *(_DWORD *)(a2 + 12) = __rev16(*(unsigned __int16 *)(v8 + 3));
      *(_DWORD *)(a2 + 16) = *((void *)v8 + 1);
      *(_WORD *)(a1 + 63) = 0;
      sub_2229BF93C(v9);
      free(v8);
      return 1;
    }
    int v12 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04llX", "NFDriverGetControllerInfo", 4887, *v9);
    }
    dispatch_get_specific(*v12);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *v9;
      *(_DWORD *)uint64_t block = 136446722;
      *(void *)&block[4] = "NFDriverGetControllerInfo";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 4887;
      *(_WORD *)&block[18] = 2048;
      *(void *)&block[20] = v15;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", block, 0x1Cu);
    }
    sub_2229BF93C(v9);
    CFIndex v16 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)uint64_t block = MEMORY[0x263EF8330];
    *(void *)&void block[8] = 0x40000000;
    *(void *)&block[16] = sub_2229C31BC;
    *(void *)&block[24] = &unk_26463ADD8;
    uint64_t v20 = a1;
    dispatch_async(v16, block);
    sub_2229C35F0(a1);
    free(v8);
    return 0;
  }
  return result;
}

BOOL sub_2229C699C(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v14 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i polling=%d emulation=%d field=%d express=%d resume=%d reader config=%d", "_Async_NFDriverConfigureDiscovery", 939, a2, a3, a4, a6, a5, a7);
  }
  dispatch_get_specific(*v14);
  CFIndex v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448002;
    *(void *)&uint8_t buf[4] = "_Async_NFDriverConfigureDiscovery";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 939;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = a2;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = a3;
    *(_WORD *)&unsigned char buf[30] = 1024;
    LODWORD(v31) = a4;
    WORD2(v31) = 1024;
    *(_DWORD *)((char *)&v31 + 6) = a6;
    WORD5(v31) = 1024;
    HIDWORD(v31) = a5;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = a7;
    _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i polling=%d emulation=%d field=%d express=%d resume=%d reader config=%d", buf, 0x36u);
  }
  int v17 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v17[2] + 8));
  uint64_t v18 = v17[2];
  ++*(void *)v18;
  pthread_mutex_unlock((pthread_mutex_t *)(v18 + 8));
  int v19 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E29C0;
  *(void *)&unsigned char buf[24] = &unk_26463B750;
  *(void *)&long long v31 = a1;
  *((void *)&v31 + 1) = v17;
  unint64_t v32 = __PAIR64__(a3, a2);
  char v34 = a4;
  char v35 = a5;
  char v36 = a6;
  int v33 = a7;
  dispatch_async_and_wait(v19, buf);
  uint64_t v20 = sub_2229BFAD8(v17);
  if (v20)
  {
    dispatch_get_specific(*v14);
    int v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21) {
      v21(3, "%s:%i status=0x%04llX", "_NFDriverConfigureDiscovery", 3996, *v17);
    }
    dispatch_get_specific(*v14);
    int v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *v17;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverConfigureDiscovery";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3996;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v23;
      _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_2229BF93C((void **)v17);
    __int16 v29 = 0;
    BOOL v24 = sub_2229C8D00(a1, 0, 0, 0, &v29, 0);
    uint64_t v25 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229C31BC;
    *(void *)&unsigned char buf[24] = &unk_26463ADD8;
    *(void *)&long long v31 = a1;
    dispatch_async(v25, buf);
    if (v24)
    {
      if (v29 == 44 || v29 == 34) {
        NFDriverSimulateCrash(a1, 57005, (uint64_t)"_NFDriverConfigureDiscovery: CRC error or response timeout");
      }
    }
    else
    {
      dispatch_get_specific(*v14);
      __int16 v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v26) {
        v26(5, "%s:%i Get stack breadcrumb failed", "_NFDriverConfigureDiscovery", 4003);
      }
      dispatch_get_specific(*v14);
      int v27 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverConfigureDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4003;
        _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
      }
    }
  }
  else
  {
    sub_2229BF93C((void **)v17);
  }
  return v20 == 0;
}

uint64_t NFDriverGetHeadlessModeFlags(uint64_t a1, int *a2)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  memset(v46, 0, sizeof(v46));
  int v47 = 0;
  int ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)v46);
  uint64_t result = 0;
  if (!ControllerInfo) {
    return result;
  }
  if (HIDWORD(v46[0]) > 6)
  {
    if (HIDWORD(v46[0]) == 18) {
      return 0;
    }
    unsigned int v10 = sub_2229C7414(a1, a2);
    char v51 = -114;
    __int16 v50 = -24575;
    int v11 = sub_2229C3DD8(3u, &v50);
    int v49 = (void **)v11;
    int v12 = sub_2229C3DD8(0x10u, 0);
    int v48 = (void **)v12;
    __int16 v13 = sub_2229C39B8(a1, 37026, (uint64_t)v11, (uint64_t)v12);
    if (sub_2229BFAD8(v13))
    {
      int v14 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to read headless", "_NFDriverReadHeadless", 1557);
      }
      dispatch_get_specific(*v14);
      CFIndex v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverReadHeadless";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1557;
        _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read headless", buf, 0x12u);
      }
      if (a2)
      {
        int v17 = 0;
        int v18 = 1;
LABEL_16:
        *a2 = v18;
        goto LABEL_49;
      }
    }
    else
    {
      if (v12)
      {
        unint64_t v19 = v12[2];
        uint64_t v20 = *(char **)v12;
        if (v19 >= 5 && v20)
        {
          int v21 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          int v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v22) {
            v22(6, "%s:%i Headless is 0x%x (length = %d)", "_NFDriverReadHeadless", 1563, *(unsigned __int8 *)(*(void *)v12 + 4), v12[2]);
          }
          dispatch_get_specific(*v21);
          uint64_t v23 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            int v24 = *(unsigned __int8 *)(*(void *)v12 + 4);
            unsigned int v25 = v12[2];
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "_NFDriverReadHeadless";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1563;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v24;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = v25;
            _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Headless is 0x%x (length = %d)", buf, 0x1Eu);
          }
          int v17 = *(unsigned char *)(*(void *)v12 + 4) & 1;
        }
        else
        {
          unsigned int v45 = v10;
          long long v61 = 0u;
          memset(buf, 0, sizeof(buf));
          __int16 v29 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          int v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v29);
          long long v31 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = v12[2];
            *(_DWORD *)__int16 v52 = 136315906;
            int v53 = (uint8_t *)"_NFDriverReadHeadless";
            __int16 v54 = 1024;
            int v55 = 1566;
            __int16 v56 = 2082;
            int v57 = "Unexpected headless reply";
            __int16 v58 = 2048;
            uint64_t v59 = v32;
            _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v52, 0x26u);
          }
          int v43 = a2;
          int v44 = v13;
          if (v30) {
            v30(3, "%s:%i %s %lu bytes :", "_NFDriverReadHeadless", 1566, "Unexpected headless reply", v12[2]);
          }
          if (v19)
          {
            uint64_t v33 = 0;
            do
            {
              char v34 = v30;
              unint64_t v35 = 0;
              char v36 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v33)];
              uint64_t v37 = v20;
              int v38 = &v20[v33];
              do
              {
                unint64_t v39 = v35 + 1;
                unint64_t v40 = v35 + 1 + v33;
                int v41 = sprintf(v36, "0x%02X ", v38[v35]);
                if (v35 > 6) {
                  break;
                }
                v36 += v41;
                ++v35;
              }
              while (v40 < v19);
              dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
              int v42 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int16 v52 = 136446210;
                int v53 = buf;
                _os_log_impl(&dword_2229A5000, v42, OS_LOG_TYPE_ERROR, "%{public}s", v52, 0xCu);
              }
              uint64_t v20 = v37;
              int v30 = v34;
              if (v34) {
                v34(3, "%s", (const char *)buf);
              }
              v33 += v39;
            }
            while (v40 < v19);
          }
          int v17 = 0;
          if (v43) {
            *int v43 = 8;
          }
          unsigned int v10 = v45;
          __int16 v13 = v44;
        }
        goto LABEL_49;
      }
      __int16 v26 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27) {
        v27(3, "%s:%i Failed to read headless", "_NFDriverReadHeadless", 1560);
      }
      dispatch_get_specific(*v26);
      uint64_t v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverReadHeadless";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1560;
        _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read headless", buf, 0x12u);
      }
      if (a2)
      {
        int v17 = 0;
        int v18 = 8;
        goto LABEL_16;
      }
    }
    int v17 = 0;
LABEL_49:
    sub_2229BF93C((void **)v13);
    sub_2229C3E74(&v49);
    sub_2229C3E74(&v48);
    if (v17) {
      return v10 | 2;
    }
    else {
      return v10;
    }
  }
  int v6 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7) {
    v7(6, "%s:%i Device does not support this feature", "NFDriverGetHeadlessModeFlags", 1698);
  }
  dispatch_get_specific(*v6);
  int v8 = NFSharedLogGetLogger();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverGetHeadlessModeFlags";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1698;
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_2229C7414(uint64_t a1, int *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  __int16 v4 = sub_2229C5B30(a1, 3);
  v39[0] = 1;
  v39[1] = HIBYTE(v4);
  v39[2] = v4;
  int v38 = (void **)sub_2229C3DD8(3u, v39);
  int v5 = sub_2229C3DD8(0x10u, 0);
  uint64_t v37 = (void **)v5;
  int v6 = sub_2229C39B8(a1, 37026, (uint64_t)v38, (uint64_t)v5);
  if (sub_2229BFAD8(v6))
  {
    uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to read miniNV", "_NFDriverReadMiniNVForHeadless", 1527);
    }
    dispatch_get_specific(*v7);
    BOOL v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverReadMiniNVForHeadless";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1527;
      _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read miniNV", buf, 0x12u);
    }
    if (a2)
    {
      uint64_t v10 = 0;
      int v11 = 1;
LABEL_8:
      *a2 = v11;
      goto LABEL_44;
    }
    goto LABEL_37;
  }
  if (!v5)
  {
    unsigned int v25 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26) {
      v26(3, "%s:%i Failed to read miniNV", "_NFDriverReadMiniNVForHeadless", 1530);
    }
    dispatch_get_specific(*v25);
    int v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverReadMiniNVForHeadless";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1530;
      _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read miniNV", buf, 0x12u);
    }
    if (a2)
    {
      uint64_t v10 = 0;
      int v11 = 3;
      goto LABEL_8;
    }
LABEL_37:
    uint64_t v10 = 0;
    goto LABEL_44;
  }
  unint64_t v12 = v5[2];
  char v36 = *(unsigned __int8 **)v5;
  if (v12 < 5 || *(void *)v5 == 0)
  {
    char v34 = a2;
    unint64_t v35 = v6;
    long long v49 = 0u;
    memset(buf, 0, sizeof(buf));
    int v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v14);
    CFIndex v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = v5[2];
      *(_DWORD *)unint64_t v40 = 136315906;
      int v41 = (uint8_t *)"_NFDriverReadMiniNVForHeadless";
      __int16 v42 = 1024;
      int v43 = 1536;
      __int16 v44 = 2082;
      unsigned int v45 = "Unexpected mini NV reply";
      __int16 v46 = 2048;
      uint64_t v47 = v17;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v40, 0x26u);
    }
    if (v15) {
      v15(3, "%s:%i %s %lu bytes :", "_NFDriverReadMiniNVForHeadless", 1536, "Unexpected mini NV reply", v5[2]);
    }
    if (v12)
    {
      uint64_t v18 = 0;
      do
      {
        unint64_t v19 = 0;
        uint64_t v20 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v18)];
        do
        {
          unint64_t v21 = v19 + 1;
          unint64_t v22 = v19 + 1 + v18;
          int v23 = sprintf(v20, "0x%02X ", v36[v18 + v19]);
          if (v19 > 6) {
            break;
          }
          v20 += v23;
          ++v19;
        }
        while (v22 < v12);
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v40 = 136446210;
          int v41 = buf;
          _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_ERROR, "%{public}s", v40, 0xCu);
        }
        if (v15) {
          v15(3, "%s", (const char *)buf);
        }
        v18 += v21;
      }
      while (v22 < v12);
    }
    uint64_t v10 = 0;
    if (v34) {
      *char v34 = 8;
    }
    int v6 = v35;
  }
  else
  {
    uint64_t v28 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v29) {
      v29(6, "%s:%i Mini NV headless is 0x%x (length = %d)", "_NFDriverReadMiniNVForHeadless", 1533, *(unsigned __int8 *)(*(void *)v5 + 4), v5[2]);
    }
    dispatch_get_specific(*v28);
    int v30 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *(unsigned __int8 *)(*(void *)v5 + 4);
      unsigned int v32 = v5[2];
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "_NFDriverReadMiniNVForHeadless";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1533;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v31;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v32;
      _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Mini NV headless is 0x%x (length = %d)", buf, 0x1Eu);
    }
    uint64_t v10 = *(unsigned char *)(*(void *)v5 + 4) & 1;
  }
LABEL_44:
  sub_2229BF93C((void **)v6);
  sub_2229C3E74(&v38);
  sub_2229C3E74(&v37);
  return v10;
}

uint64_t sub_2229C796C(int a1)
{
  uint64_t result = 0;
  uint64_t v10 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 10:
    case 11:
    case 12:
      uint64_t result = 1;
      break;
    case 13:
      uint64_t result = 9;
      break;
    case 14:
      uint64_t result = 10;
      break;
    case 15:
      uint64_t result = 11;
      break;
    case 16:
      uint64_t result = 4;
      break;
    case 17:
    case 18:
    case 19:
      uint64_t result = 2;
      break;
    case 21:
      uint64_t result = 3;
      break;
    case 22:
      uint64_t result = 6;
      break;
    case 23:
      uint64_t result = 5;
      break;
    case 25:
      uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Found Kovio tag", "_NFDriverRFTechToTagType", 1767);
      }
      dispatch_get_specific(*v3);
      int v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v7 = "_NFDriverRFTechToTagType";
        __int16 v8 = 1024;
        int v9 = 1767;
        _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found Kovio tag", buf, 0x12u);
      }
      uint64_t result = 7;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2229C7BB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  if (*(unsigned char *)(v2 + 738))
  {
    __int16 v4 = *(NSObject **)(v2 + 544);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_2229C31BC;
    block[3] = &unk_26463ADD8;
    block[4] = v1;
    dispatch_async(v4, block);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
    if (*(void *)v5) {
      (*(void (**)(void, const char *))v5)(*(void *)(v5 + 256), "HW Reset");
    }
  }
}

void sub_2229C7C5C(void *a1)
{
  uint64_t v2 = *(void *)(a1[6] + 24);
  if (*(unsigned char *)(v2 + 738))
  {
    uint64_t v3 = *(void (**)(uint64_t, void, void, void))(v2 + 56);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 312);
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(unsigned char *)(*(void *)(a1[4] + 8) + 24) & 0xFE | ((*(unsigned char *)(*(void *)(a1[5] + 8) + 24) & 2) != 0);
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(unsigned char *)(*(void *)(a1[4] + 8) + 24) & 0xFD | (*(unsigned char *)(*(void *)(a1[5] + 8) + 24) >> 1) & 2;
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(unsigned char *)(*(void *)(a1[4] + 8) + 24) & 0xFB | (*(unsigned char *)(*(void *)(a1[5] + 8) + 24) >> 1) & 4;
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(unsigned char *)(*(void *)(a1[4] + 8) + 24) & 0xF7 | (8 * (*(unsigned char *)(*(void *)(a1[5] + 8) + 24) & 1));
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = *(unsigned char *)(*(void *)(a1[4] + 8) + 24) & 0xEF | (*(unsigned char *)(*(void *)(a1[5] + 8) + 24) >> 3) & 0x10;
      *(_WORD *)(*(void *)(a1[4] + 8) + 26) = *(_WORD *)(*(void *)(a1[5] + 8) + 48);
      v3(v4, *(unsigned int *)(*(void *)(a1[4] + 8) + 24), *(void *)(*(void *)(a1[5] + 8) + 32), *(unsigned int *)(*(void *)(a1[5] + 8) + 40));
    }
  }
  uint64_t v5 = *(void *)(a1[5] + 8);
  int v6 = *(void **)(v5 + 32);
  if (v6)
  {
    free(v6);
    uint64_t v5 = *(void *)(a1[5] + 8);
  }
  *(void *)(v5 + 32) = 0;
}

uint64_t sub_2229C7DA0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 80);
    if (v2) {
      return v2(*(void *)(v1 + 336));
    }
  }
  return result;
}

uint64_t sub_2229C7DC4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    if (*(void *)v1) {
      return (*(uint64_t (**)(void, const char *))v1)(*(void *)(v1 + 256), "UART Error");
    }
  }
  return result;
}

uint64_t sub_2229C7DF0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void, void, void, void, void))(v1 + 144);
    if (v2) {
      return v2(*(void *)(v1 + 400), *(unsigned __int16 *)(result + 40), *(unsigned int *)(result + 52), *(unsigned __int16 *)(result + 48), *(unsigned __int16 *)(result + 50));
    }
  }
  return result;
}

void sub_2229C7E28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  if (*(unsigned char *)(v2 + 738))
  {
    uint64_t v4 = *(NSObject **)(v2 + 544);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_2229C31BC;
    block[3] = &unk_26463ADD8;
    block[4] = v1;
    dispatch_async(v4, block);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
    if (*(void *)v5) {
      (*(void (**)(void, const char *))v5)(*(void *)(v5 + 256), "CRC Error");
    }
  }
}

uint64_t sub_2229C7ED4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void, void))(v1 + 152);
    if (v2) {
      return v2(*(void *)(v1 + 408), *(unsigned int *)(result + 40));
    }
  }
  return result;
}

void sub_2229C7F00(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(3, "%s:%i %s TEMPERATURE WARNING RECEIVED", "_Callback_NFDriverNotifyGeneral_block_invoke_2", 2045, *(const char **)(a1 + 32));
  }
  dispatch_get_specific(*v2);
  uint64_t v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    int v9 = "_Callback_NFDriverNotifyGeneral_block_invoke_2";
    __int16 v10 = 1024;
    int v11 = 2045;
    __int16 v12 = 2080;
    uint64_t v13 = v5;
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i %s TEMPERATURE WARNING RECEIVED", buf, 0x1Cu);
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 24);
  uint64_t v7 = *(void (**)(void, void, void))(v6 + 216);
  if (v7) {
    v7(*(void *)(v6 + 472), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
  }
}

uint64_t sub_2229C8030(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void, uint64_t, void))(v1 + 216);
    if (v2) {
      return v2(*(void *)(v1 + 472), 3, *(unsigned __int8 *)(result + 40));
    }
  }
  return result;
}

uint64_t sub_2229C8060(int a1, int a2)
{
  if (a1 <= 177)
  {
    if (a1 <= 162)
    {
      if (a1 == 66) {
        return 5;
      }
      if (a1 == 96) {
        return 18;
      }
    }
    else
    {
      switch(a1)
      {
        case 163:
          return 7;
        case 164:
          return 8;
        case 177:
          return 10;
      }
    }
    return 0;
  }
  if (a1 > 208)
  {
    switch(a1)
    {
      case 209:
        return 14;
      case 210:
        return 15;
      case 211:
        return 16;
    }
    return 0;
  }
  if (a1 != 178)
  {
    if (a1 == 186) {
      return 20;
    }
    return 0;
  }
  if (a2) {
    return 12;
  }
  else {
    return 11;
  }
}

uint64_t sub_2229C8128(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void, void, void))(v1 + 216);
    if (v2) {
      return v2(*(void *)(v1 + 472), 0, *(unsigned __int8 *)(result + 40));
    }
  }
  return result;
}

uint64_t sub_2229C8158(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(void (**)(void, void))(v1 + 224);
    if (v2) {
      v2(*(void *)(v1 + 480), *(void *)(a1 + 40));
    }
  }

  return NFDataRelease();
}

void sub_2229C81B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24);
  if (*(unsigned char *)(v2 + 738))
  {
    uint64_t v3 = *(void (**)(void, void, void))(v2 + 168);
    if (v3) {
      v3(*(void *)(v2 + 424), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
    }
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    free(v4);
  }
}

uint64_t sub_2229C821C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 232);
    if (v2) {
      return v2(*(void *)(v1 + 488));
    }
  }
  return result;
}

uint64_t sub_2229C8240(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 240);
    if (v2) {
      return v2(*(void *)(v1 + 496));
    }
  }
  return result;
}

uint64_t sub_2229C8264(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 248);
    if (v2) {
      return v2(*(void *)(v1 + 504));
    }
  }
  return result;
}

void sub_2229C8288(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v9 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(5, "%s:%i num_dev=%d, status=%d", "_Callback_NFDriverNotifyDiscovery", 2548, a4, a5);
  }
  dispatch_get_specific(*v9);
  int v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2548;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = a4;
    LOWORD(v52) = 1024;
    *(_DWORD *)((char *)&v52 + 2) = a5;
    _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i num_dev=%d, status=%d", buf, 0x1Eu);
  }
  if (a5 <= 119)
  {
    if (a5 <= 53)
    {
      if (a5)
      {
        if (a5 != 7) {
          goto LABEL_73;
        }
        dispatch_get_specific(*v9);
        unint64_t v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v19) {
          v19(5, "%s:%i halted", "_Callback_NFDriverNotifyDiscovery", 2658);
        }
        dispatch_get_specific(*v9);
        uint64_t v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2658;
        uint64_t v18 = "%{public}s:%i halted";
LABEL_71:
        char v36 = v17;
        uint32_t v37 = 18;
LABEL_72:
        _os_log_impl(&dword_2229A5000, v36, OS_LOG_TYPE_DEFAULT, v18, buf, v37);
        return;
      }
    }
    else if (a5 != 54)
    {
      if (a5 == 56)
      {
        dispatch_get_specific(*v9);
        uint64_t v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v33) {
          v33(5, "%s:%i deselected", "_Callback_NFDriverNotifyDiscovery", 2624);
        }
        dispatch_get_specific(*v9);
        uint64_t v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2624;
        uint64_t v18 = "%{public}s:%i deselected";
        goto LABEL_71;
      }
      if (a5 != 119) {
        goto LABEL_73;
      }
    }
    if (a4)
    {
      uint64_t v20 = (char *)malloc_type_calloc(a4, 0x60uLL, 0x108004063299CC8uLL);
      if (!v20) {
        return;
      }
      unint64_t v21 = v20;
      if (a3)
      {
        uint64_t v22 = 0;
        int v23 = (uint64_t *)(a3 + 8);
        while (*(v23 - 1) && *v23)
        {
          unsigned int v24 = *(_DWORD *)(*v23 + 4);
          BOOL v25 = v24 > 0x1B;
          int v26 = (1 << v24) & 0xEEFFC00;
          if (v25 || v26 == 0)
          {
            dispatch_get_specific(*v9);
            uint64_t v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v28) {
              v28(6, "%s:%i Unhandled tag type 0x%04x", "_Callback_NFDriverNotifyDiscovery", 2598, *(_DWORD *)(*v23 + 4));
            }
            dispatch_get_specific(*v9);
            log = NFSharedLogGetLogger();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              int v29 = *(_DWORD *)(*v23 + 4);
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2598;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v29;
              _os_log_impl(&dword_2229A5000, log, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Unhandled tag type 0x%04x", buf, 0x18u);
            }
          }
          sub_2229C8F68(&v21[v22], *(v23 - 1), *v23);
          v22 += 96;
          v23 += 2;
          if (96 * a4 == v22) {
            goto LABEL_89;
          }
        }
      }
      dispatch_get_specific(*v9);
      unint64_t v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v40) {
        v40(3, "%s:%i remote dev list is invalid", "_Callback_NFDriverNotifyDiscovery", 2565);
      }
      dispatch_get_specific(*v9);
      int v41 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2565;
        _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i remote dev list is invalid", buf, 0x12u);
      }
      if (NFIsInternalBuild())
      {
        if (!sub_2229C8D00(a2, 0, 0, 0, 0, 0))
        {
          dispatch_get_specific(*v9);
          __int16 v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v42) {
            v42(5, "%s:%i Get stack breadcrumb failed", "_Callback_NFDriverNotifyDiscovery", 2570);
          }
          dispatch_get_specific(*v9);
          int v43 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2570;
            _os_log_impl(&dword_2229A5000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
          }
        }
        __int16 v44 = *(NSObject **)(*(void *)(a2 + 24) + 544);
        *(void *)buf = MEMORY[0x263EF8330];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = sub_2229C31BC;
        __int16 v52 = &unk_26463ADD8;
        uint64_t v53 = a2;
        dispatch_async(v44, buf);
      }
      LOBYTE(a4) = 0;
    }
    else
    {
      unint64_t v21 = 0;
    }
LABEL_89:
    uint64_t v14 = *(NSObject **)(*(void *)(a2 + 24) + 552);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_2229C9350;
    block[3] = &unk_26463B0D8;
    char v50 = a4;
    block[4] = a2;
    void block[5] = v21;
    __int16 v49 = a5;
    uint64_t v15 = block;
    goto LABEL_90;
  }
  if (a5 > 185)
  {
    switch(a5)
    {
      case 186:
        dispatch_get_specific(*v9);
        char v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v34) {
          v34(5, "%s:%i RM prohibit timer activated", "_Callback_NFDriverNotifyDiscovery", 2668);
        }
        dispatch_get_specific(*v9);
        uint64_t v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2668;
        uint64_t v18 = "%{public}s:%i RM prohibit timer activated";
        break;
      case 187:
        dispatch_get_specific(*v9);
        unint64_t v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v35) {
          v35(5, "%s:%i RM SE init required", "_Callback_NFDriverNotifyDiscovery", 2671);
        }
        dispatch_get_specific(*v9);
        uint64_t v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2671;
        uint64_t v18 = "%{public}s:%i RM SE init required";
        break;
      case 188:
        dispatch_get_specific(*v9);
        CFIndex v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v16) {
          v16(5, "%s:%i Intf activation ntf error", "_Callback_NFDriverNotifyDiscovery", 2665);
        }
        dispatch_get_specific(*v9);
        uint64_t v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2665;
        uint64_t v18 = "%{public}s:%i Intf activation ntf error";
        break;
      default:
        goto LABEL_73;
    }
    goto LABEL_71;
  }
  switch(a5)
  {
    case 120:
      dispatch_get_specific(*v9);
      int v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30) {
        v30(5, "%s:%i tag removed", "_Callback_NFDriverNotifyDiscovery", 2645);
      }
      dispatch_get_specific(*v9);
      int v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2645;
        _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s:%i tag removed", buf, 0x12u);
      }
      uint64_t v14 = *(NSObject **)(*(void *)(a2 + 24) + 552);
      v46[0] = MEMORY[0x263EF8330];
      v46[1] = 0x40000000;
      v46[2] = sub_2229C93FC;
      void v46[3] = &unk_26463B118;
      v46[4] = a2;
      uint64_t v15 = v46;
      goto LABEL_90;
    case 121:
      dispatch_get_specific(*v9);
      unsigned int v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32) {
        v32(5, "%s:%i deactivated", "_Callback_NFDriverNotifyDiscovery", 2662);
      }
      dispatch_get_specific(*v9);
      uint64_t v17 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2662;
      uint64_t v18 = "%{public}s:%i deactivated";
      goto LABEL_71;
    case 146:
      dispatch_get_specific(*v9);
      __int16 v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12) {
        v12(5, "%s:%i target lost", "_Callback_NFDriverNotifyDiscovery", 2629);
      }
      dispatch_get_specific(*v9);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2629;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i target lost", buf, 0x12u);
      }
      uint64_t v14 = *(NSObject **)(*(void *)(a2 + 24) + 552);
      v47[0] = MEMORY[0x263EF8330];
      v47[1] = 0x40000000;
      v47[2] = sub_2229C93D8;
      v47[3] = &unk_26463B0F8;
      v47[4] = a2;
      uint64_t v15 = v47;
LABEL_90:
      dispatch_async(v14, v15);
      return;
  }
LABEL_73:
  dispatch_get_specific(*v9);
  int v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v38) {
    v38(5, "%s:%i status=0x%04X", "_Callback_NFDriverNotifyDiscovery", 2675, a5);
  }
  dispatch_get_specific(*v9);
  unint64_t v39 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_Callback_NFDriverNotifyDiscovery";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2675;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = a5;
    uint64_t v18 = "%{public}s:%i status=0x%04X";
    char v36 = v39;
    uint32_t v37 = 24;
    goto LABEL_72;
  }
}

BOOL sub_2229C8D00(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _WORD *a5, _DWORD *a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a1 && *(unsigned char *)(a1 + 57))
  {
    int DebugInfo = phLibNfc_Mgt_GetDebugInfo();
    BOOL v10 = DebugInfo == 0;
    if (!DebugInfo)
    {
      if (a6) {
        *a6 = 0;
      }
      if (a5) {
        *a5 = 0;
      }
      if (a2) {
        *a2 = 0;
      }
      int v11 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i LastAPI=0x%02X, LastAPIStatus=0x%04X DebugInfo=0x%016llX", "_NFDriverGetStackDebugInfo", 5688, 0, 0, 0);
      }
      dispatch_get_specific(*v11);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        unint64_t v19 = "_NFDriverGetStackDebugInfo";
        __int16 v20 = 1024;
        int v21 = 5688;
        __int16 v22 = 1024;
        int v23 = 0;
        __int16 v24 = 1024;
        int v25 = 0;
        __int16 v26 = 2048;
        uint64_t v27 = 0;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i LastAPI=0x%02X, LastAPIStatus=0x%04X DebugInfo=0x%016llX", buf, 0x28u);
      }
    }
  }
  else
  {
    uint64_t v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(3, "%s:%i Not loaded", "_NFDriverGetStackDebugInfo", 5670);
    }
    dispatch_get_specific(*v14);
    CFIndex v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v19 = "_NFDriverGetStackDebugInfo";
      __int16 v20 = 1024;
      int v21 = 5670;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Not loaded", buf, 0x12u);
    }
    return 0;
  }
  return v10;
}

char *sub_2229C8F68(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)uint64_t result = a2;
  int v4 = *(_DWORD *)(a3 + 4);
  unsigned int v5 = v4 - 10;
  uint64_t v7 = (_WORD *)(a3 + 8);
  switch(v4)
  {
    case 10:
    case 11:
    case 12:
      *((_DWORD *)result + 2) = 1;
      if (v5 <= 2) {
        *((_DWORD *)result + 3) = dword_2229E82D8[v5];
      }
      result[16] = *(unsigned char *)(a3 + 68);
      *(_WORD *)(result + 17) = *(_WORD *)(a3 + 69);
      if (*(unsigned __int8 *)(a3 + 67) >= 0x30u) {
        size_t v8 = 48;
      }
      else {
        size_t v8 = *(unsigned __int8 *)(a3 + 67);
      }
      result[67] = v8;
      memcpy(result + 19, (const void *)(a3 + 19), v8);
      if (*(unsigned __int8 *)(a3 + 18) >= 0x10u) {
        size_t v9 = 16;
      }
      else {
        size_t v9 = *(unsigned __int8 *)(a3 + 18);
      }
      uint64_t result = (char *)memcpy(v3 + 72, v7, v9);
      v3[88] = v9;
      v3[68] = *(unsigned char *)(a3 + 72) & 0xF;
      return result;
    case 13:
      int v11 = 9;
      goto LABEL_18;
    case 14:
      int v11 = 10;
      goto LABEL_18;
    case 15:
      int v11 = 11;
      goto LABEL_18;
    case 16:
      *((_DWORD *)result + 2) = 4;
      result[16] = *(unsigned char *)(a3 + 68);
      *(_WORD *)(result + 17) = *(_WORD *)(a3 + 69);
      if (*(unsigned __int8 *)(a3 + 67) >= 0x30u) {
        size_t v12 = 48;
      }
      else {
        size_t v12 = *(unsigned __int8 *)(a3 + 67);
      }
      result[67] = v12;
      uint64_t v13 = result + 19;
      uint64_t v14 = (const void *)(a3 + 19);
      goto LABEL_32;
    case 17:
    case 18:
    case 19:
      *((_DWORD *)result + 2) = 2;
      if ((v4 - 17) <= 2) {
        *((_DWORD *)result + 3) = v4 - 17;
      }
      uint64_t v10 = *(void *)v7;
      *((_DWORD *)result + 20) = *(_DWORD *)(a3 + 16);
      *((void *)result + 9) = v10;
      result[88] = 12;
      result[16] = *(unsigned char *)(a3 + 72) & 0xF;
      return result;
    case 21:
      *((_DWORD *)result + 2) = 3;
      if (*(unsigned __int8 *)(a3 + 18) >= 0x10u) {
        size_t v15 = 16;
      }
      else {
        size_t v15 = *(unsigned __int8 *)(a3 + 18);
      }
      uint64_t result = (char *)memcpy(result + 72, (const void *)(a3 + 8), v15);
      v3[88] = v15;
      uint64_t v16 = *(void *)v7;
      *(_WORD *)(v3 + 21) = v7[4];
      *(void *)(v3 + 13) = v16;
      v3[12] = *(unsigned char *)(a3 + 18);
      *(void *)(v3 + 23) = *(void *)(a3 + 19);
      *(_WORD *)(v3 + 31) = *(_WORD *)(a3 + 27);
      return result;
    case 22:
      *((_DWORD *)result + 2) = 6;
      uint64_t v13 = result + 12;
      v3[23] = *(unsigned char *)(a3 + 19);
      v3[24] = *(unsigned char *)(a3 + 20);
      if (*(unsigned __int8 *)(a3 + 18) >= 0xAu) {
        size_t v12 = 10;
      }
      else {
        size_t v12 = *(unsigned __int8 *)(a3 + 18);
      }
      v3[22] = v12;
      uint64_t v14 = v7;
LABEL_32:
      memcpy(v13, v14, v12);
      goto LABEL_33;
    case 23:
      *((_DWORD *)result + 2) = 5;
      result[21] = *(unsigned char *)(a3 + 17);
      result[23] = *(unsigned char *)(a3 + 19);
      result[22] = *(unsigned char *)(a3 + 18);
      if (*(unsigned __int8 *)(a3 + 16) >= 8u) {
        size_t v20 = 8;
      }
      else {
        size_t v20 = *(unsigned __int8 *)(a3 + 16);
      }
      result[20] = v20;
      memcpy(result + 12, v7, v20);
      uint64_t v18 = v3 + 72;
      size_t v17 = v3[20];
      unint64_t v19 = v3 + 12;
      goto LABEL_38;
    case 24:
      return result;
    case 25:
      int v21 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Found Kovio tag", "_copyTagInfoFromDevice", 2518);
      }
      dispatch_get_specific(*v21);
      int v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v26 = "_copyTagInfoFromDevice";
        __int16 v27 = 1024;
        int v28 = 2518;
        _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found Kovio tag", buf, 0x12u);
      }
      *((_DWORD *)v3 + 2) = 7;
      if (*(unsigned __int8 *)(a3 + 8) >= 0x10u) {
        size_t v24 = 16;
      }
      else {
        size_t v24 = *(unsigned __int8 *)(a3 + 8);
      }
      uint64_t v7 = v3 + 12;
      v3[28] = v24;
      memcpy(v3 + 12, (const void *)(a3 + 9), v24);
      uint64_t v18 = v3 + 72;
      size_t v17 = v3[28];
      goto LABEL_37;
    case 26:
    case 27:
      int v11 = 8;
LABEL_18:
      *((_DWORD *)result + 2) = v11;
LABEL_33:
      if (*(unsigned __int8 *)(a3 + 18) >= 0x10u) {
        size_t v17 = 16;
      }
      else {
        size_t v17 = *(unsigned __int8 *)(a3 + 18);
      }
      uint64_t v18 = v3 + 72;
LABEL_37:
      unint64_t v19 = v7;
LABEL_38:
      uint64_t result = (char *)memcpy(v18, v19, v17);
      v3[88] = v17;
      break;
    default:
      *((_DWORD *)result + 2) = 0;
      break;
  }
  return result;
}

void sub_2229C9350(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24);
  if (*(unsigned char *)(v2 + 738))
  {
    uint64_t v3 = *(void (**)(void, uint64_t))(v2 + 88);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 50)) {
        uint64_t v4 = *(void *)(a1 + 40);
      }
      else {
        uint64_t v4 = 0;
      }
      v3(*(void *)(v2 + 344), v4);
    }
  }
  unsigned int v5 = *(void **)(a1 + 40);
  if (v5)
  {
    free(v5);
  }
}

uint64_t sub_2229C93D8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 208);
    if (v2) {
      return v2(*(void *)(v1 + 464));
    }
  }
  return result;
}

uint64_t sub_2229C93FC(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 192);
    if (v2) {
      return v2(*(void *)(v1 + 448));
    }
  }
  return result;
}

uint64_t sub_2229C94A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(void (**)(void, void))(v1 + 16);
    if (v2) {
      v2(*(void *)(v1 + 272), *(void *)(a1 + 40));
    }
  }

  return NFDataRelease();
}

uint64_t sub_2229C94FC(void *a1)
{
  uint64_t v1 = *(void *)(a1[4] + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(void (**)(void, void, void))(v1 + 24);
    if (v2) {
      v2(*(void *)(v1 + 280), a1[5], a1[6]);
    }
  }
  NFDataRelease();

  return NFDataRelease();
}

void sub_2229C955C(void *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1[4] + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = *(void *)(v1 + 512);
    if (v4) {
      uint64_t v4 = *(void *)(v4 + 8);
    }
    BOOL v5 = v3 == v4;
    if (v3 == v4)
    {
      uint64_t v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Embedded SE EVT_RESTRICTED!", "_Callback_NFDriverNotifySE_block_invoke", 2802);
      }
      dispatch_get_specific(*v6);
      size_t v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        size_t v17 = "_Callback_NFDriverNotifySE_block_invoke";
        __int16 v18 = 1024;
        int v19 = 2802;
        _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Embedded SE EVT_RESTRICTED!", buf, 0x12u);
      }
    }
    uint64_t v9 = *(void *)(a1[4] + 24);
    uint64_t v10 = *(void (**)(uint64_t, BOOL, uint64_t))(v9 + 32);
    if (v10)
    {
      uint64_t v11 = *(void *)(v9 + 288);
      int v12 = *(_DWORD *)(a1[6] + 32);
      if (v12 == 255) {
        unsigned int v13 = 4;
      }
      else {
        unsigned int v13 = 0;
      }
      if (v12 == 3) {
        unsigned int v13 = 3;
      }
      if (v12 == 2) {
        unsigned int v14 = 2;
      }
      else {
        unsigned int v14 = 0;
      }
      if (v12 == 1) {
        unsigned int v14 = 1;
      }
      if (v12 <= 2) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = v13;
      }
      v10(v11, v5, v15);
    }
  }
}

uint64_t sub_2229C96D0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 40);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 296);
      int v4 = *(_DWORD *)(*(void *)(result + 40) + 32);
      if (v4 == 255) {
        unsigned int v5 = 4;
      }
      else {
        unsigned int v5 = 0;
      }
      if (v4 == 3) {
        unsigned int v5 = 3;
      }
      if (v4 == 2) {
        unsigned int v6 = 2;
      }
      else {
        unsigned int v6 = 0;
      }
      if (v4 == 1) {
        unsigned int v6 = 1;
      }
      if (v4 <= 2) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = v5;
      }
      return v2(v3, 1, v7);
    }
  }
  return result;
}

uint64_t sub_2229C9730(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 64);
    if (v2) {
      return v2(*(void *)(v1 + 320));
    }
  }
  return result;
}

uint64_t sub_2229C9754(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 72);
    if (v2) {
      return v2(*(void *)(v1 + 328));
    }
  }
  return result;
}

uint64_t NFDriverSimulateCrash(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && (uint64_t v5 = *(void *)(result + 24), *(unsigned char *)(v5 + 744)))
  {
    *(_WORD *)(v5 + 736) = a2;
  }
  else
  {
    uint64_t StackBreadcrumb = NFDriverGetStackBreadcrumb(result);
    return MEMORY[0x270F96420](2, a2, StackBreadcrumb, a3);
  }
  return result;
}

void sub_2229C97E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 24);
  if (!*(unsigned char *)(v3 + 743))
  {
    sub_2229C9850(v2);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
  }
  if (*(unsigned char *)(v3 + 738))
  {
    int v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 96);
    if (v4)
    {
      uint64_t v5 = *(void *)(v3 + 352);
      uint64_t v6 = *(unsigned int *)(a1 + 40);
      uint64_t v7 = *(unsigned int *)(a1 + 44);
      v4(v5, v6, v7);
    }
  }
}

void sub_2229C9850(uint64_t a1)
{
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t v7 = 0;
  size_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  uint64_t v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
  uint64_t v2 = (void **)sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v2[2] + 8));
  uint64_t v3 = (char *)v2[2];
  ++*(void *)v3;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
  *(void *)v8[3] = v2;
  *(void *)(v8[3] + 16) = a1;
  sub_2229C382C(a1);
  int v4 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = sub_2229E1B18;
  v6[3] = &unk_26463B730;
  v6[4] = &v11;
  v6[5] = &v7;
  v6[6] = a1;
  v6[7] = v2;
  dispatch_async(v4, v6);
  if (sub_2229BFAD8((uint64_t *)v2))
  {
    *((_DWORD *)v12 + 6) = *v2;
    sub_2229BF93C(v2);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 512) + 24) = 0;
  }
  uint64_t v5 = (void *)v8[3];
  if (v5) {
    free(v5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536));
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
}

uint64_t sub_2229C99D0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void, void, void))(v1 + 200);
    if (v2) {
      return v2(*(void *)(v1 + 456), *(unsigned int *)(result + 40), *(unsigned __int8 *)(result + 44));
    }
  }
  return result;
}

uint64_t sub_2229C9A00(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 104);
    if (v2) {
      return v2(*(void *)(v1 + 360));
    }
  }
  return result;
}

uint64_t sub_2229C9A24(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(void (**)(void, void, void))(v1 + 120);
    if (v2) {
      v2(*(void *)(v1 + 376), **(void **)(a1 + 40), *(unsigned int *)(*(void *)(a1 + 40) + 8));
    }
  }

  return NFDataRelease();
}

void sub_2229C9A84(void *a1)
{
  uint64_t v2 = *(void *)(a1[7] + 24);
  if (*(unsigned char *)(v2 + 738))
  {
    uint64_t v3 = *(void (**)(void, void, void, void, void))(v2 + 160);
    if (v3) {
      v3(*(void *)(v2 + 416), *(unsigned int *)(*(void *)(a1[4] + 8) + 24), *(unsigned int *)(*(void *)(a1[5] + 8) + 24), *(void *)(*(void *)(a1[6] + 8) + 32), *(unsigned int *)(*(void *)(a1[6] + 8) + 40));
    }
  }
  uint64_t v4 = *(void *)(a1[6] + 8);
  uint64_t v5 = *(void **)(v4 + 32);
  if (v5)
  {
    free(v5);
    uint64_t v4 = *(void *)(a1[6] + 8);
  }
  *(void *)(v4 + 32) = 0;
}

uint64_t sub_2229C9B08(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void, BOOL, void, BOOL))(v1 + 184);
    if (v2) {
      return v2(*(void *)(v1 + 440), *(_DWORD *)(result + 40) == 0, *(unsigned int *)(result + 56), *(_DWORD *)(result + 52) == 4);
    }
  }
  return result;
}

void sub_2229C9B48(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a5 <= 53)
  {
    if (a5)
    {
      if (a5 == 7)
      {
        uint64_t v9 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(5, "%s:%i halted", "_Callback_NFDriverNotifyHCE", 3189);
        }
        dispatch_get_specific(*v9);
        uint64_t v11 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "_Callback_NFDriverNotifyHCE";
          __int16 v27 = 1024;
          int v28 = 3189;
          int v12 = "%{public}s:%i halted";
LABEL_18:
          __int16 v18 = v11;
          uint32_t v19 = 18;
LABEL_23:
          _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_DEFAULT, v12, buf, v19);
          return;
        }
        return;
      }
LABEL_19:
      uint64_t v20 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(5, "%s:%i status=0x%04X", "_Callback_NFDriverNotifyHCE", 3194, a5);
      }
      dispatch_get_specific(*v20);
      __int16 v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v26 = "_Callback_NFDriverNotifyHCE";
        __int16 v27 = 1024;
        int v28 = 3194;
        __int16 v29 = 1024;
        int v30 = a5;
        int v12 = "%{public}s:%i status=0x%04X";
        __int16 v18 = v22;
        uint32_t v19 = 24;
        goto LABEL_23;
      }
      return;
    }
LABEL_10:
    if (a4)
    {
      unsigned int v13 = 0;
      uint64_t v14 = MEMORY[0x263EF8330];
      do
      {
        uint64_t v15 = *(NSObject **)(*(void *)(a2 + 24) + 552);
        block[0] = v14;
        block[1] = 0x40000000;
        block[2] = sub_2229C9E48;
        block[3] = &unk_26463B300;
        block[4] = a2;
        void block[5] = a3;
        char v24 = v13;
        dispatch_async(v15, block);
        ++v13;
      }
      while (v13 < a4);
    }
    return;
  }
  if (a5 != 56)
  {
    if (a5 != 54) {
      goto LABEL_19;
    }
    goto LABEL_10;
  }
  uint64_t v16 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  size_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v17) {
    v17(5, "%s:%i deselected", "_Callback_NFDriverNotifyHCE", 3184);
  }
  dispatch_get_specific(*v16);
  uint64_t v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "_Callback_NFDriverNotifyHCE";
    __int16 v27 = 1024;
    int v28 = 3184;
    int v12 = "%{public}s:%i deselected";
    goto LABEL_18;
  }
}

uint64_t sub_2229C9E48(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 24);
  if (*(unsigned char *)(v1 + 738))
  {
    uint64_t v2 = *(uint64_t (**)(void, void))(v1 + 48);
    if (v2) {
      return v2(*(void *)(v1 + 304), *(void *)(*(void *)(result + 40) + 16 * *(unsigned __int8 *)(result + 48)));
    }
  }
  return result;
}

uint64_t sub_2229C9E80(uint64_t a1)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void **)(v2 + 512);
  if (v3)
  {
    free(v3);
    uint64_t v2 = *(void *)(a1 + 24);
  }
  *(void *)(v2 + 512) = 0;
  uint64_t v4 = *(void **)(v2 + 520);
  if (v4)
  {
    free(v4);
    uint64_t v2 = *(void *)(a1 + 24);
  }
  *(void *)(v2 + 520) = 0;
  uint64_t v5 = *(void **)(v2 + 528);
  if (v5)
  {
    free(v5);
    uint64_t v2 = *(void *)(a1 + 24);
  }
  *(void *)(v2 + 528) = 0;
  *(unsigned char *)(v2 + 739) = 0;
  uint64_t v68 = 0;
  int v69 = &v68;
  uint64_t v70 = 0x2000000000;
  char v71 = 3;
  uint64_t v6 = malloc_type_calloc(1uLL, 0x30uLL, 0x1080040FC6463CFuLL);
  uint64_t v64 = 0;
  int v65 = &v64;
  uint64_t v66 = 0x2000000000;
  __int16 v67 = 0;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229CAA20;
  block[3] = &unk_26463B328;
  void block[6] = a1;
  void block[7] = v6;
  block[4] = &v64;
  void block[5] = &v68;
  dispatch_async_and_wait(v7, block);
  if (*((_WORD *)v65 + 12))
  {
    size_t v8 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_NFDriverEnumerateSecureElements", 3826, *((unsigned __int16 *)v65 + 12));
    }
    dispatch_get_specific(*v8);
    uint64_t v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *((unsigned __int16 *)v65 + 12);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3826;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v11;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    int v12 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229C31BC;
    int v73 = &unk_26463ADD8;
    uint64_t v74 = a1;
    dispatch_async(v12, buf);
    free(v6);
    uint64_t v13 = 1;
    goto LABEL_87;
  }
  if (*((unsigned __int8 *)v69 + 24) > 3u)
  {
    uint64_t v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(3, "%s:%i Unexpected count of SEs : %d", "_NFDriverEnumerateSecureElements", 3832, *((unsigned __int8 *)v69 + 24));
    }
    dispatch_get_specific(*v14);
    uint64_t v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = *((unsigned __int8 *)v69 + 24);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3832;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v17;
      __int16 v18 = "%{public}s:%i Unexpected count of SEs : %d";
      uint32_t v19 = buf;
      uint64_t v20 = v16;
      uint32_t v21 = 24;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (!*((unsigned char *)v69 + 24))
  {
LABEL_86:
    free(v6);
    uint64_t v13 = 0;
    goto LABEL_87;
  }
  unint64_t v22 = 0;
  int v23 = v6 + 3;
  char v24 = (const void **)MEMORY[0x263F8C6C0];
  while (1)
  {
    int v25 = *(v23 - 1);
    if (v25 == 5)
    {
      uint64_t v32 = *(void *)(*(void *)(a1 + 24) + 528);
      dispatch_get_specific(*v24);
      uint64_t v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (!v32)
      {
        if (v33) {
          v33(6, "%s:%i Found Host state=%d", "_NFDriverEnumerateSecureElements", 3879, *v23);
        }
        dispatch_get_specific(*v24);
        __int16 v46 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          int v47 = *v23;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3879;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = v47;
          _os_log_impl(&dword_2229A5000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found Host state=%d", buf, 0x18u);
        }
        *(void *)(*(void *)(a1 + 24) + 528) = sub_2229B6038(a1, 5, 0, *(void *)(v23 - 3));
        goto LABEL_85;
      }
      if (v33) {
        v33(4, "%s:%i Host already found", "_NFDriverEnumerateSecureElements", 3876);
      }
      dispatch_get_specific(*v24);
      char v34 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3876;
        __int16 v29 = buf;
        int v30 = v34;
        uint64_t v31 = "%{public}s:%i Host already found";
        goto LABEL_40;
      }
      goto LABEL_85;
    }
    if (v25 == 2)
    {
      uint64_t v35 = *(void *)(*(void *)(a1 + 24) + 520);
      dispatch_get_specific(*v24);
      char v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (!v35)
      {
        if (v36) {
          v36(6, "%s:%i Found UICC state=%d", "_NFDriverEnumerateSecureElements", 3869, *v23);
        }
        dispatch_get_specific(*v24);
        int v48 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          int v49 = *v23;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3869;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = v49;
          _os_log_impl(&dword_2229A5000, v48, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found UICC state=%d", buf, 0x18u);
        }
        *(void *)(*(void *)(a1 + 24) + 520) = sub_2229B6038(a1, 4, 0, *(void *)(v23 - 3));
        goto LABEL_85;
      }
      if (v36) {
        v36(4, "%s:%i UICC already found", "_NFDriverEnumerateSecureElements", 3866);
      }
      dispatch_get_specific(*v24);
      uint32_t v37 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3866;
        __int16 v29 = buf;
        int v30 = v37;
        uint64_t v31 = "%{public}s:%i UICC already found";
        goto LABEL_40;
      }
      goto LABEL_85;
    }
    if (v25 != 1)
    {
      dispatch_get_specific(*v24);
      unint64_t v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v39) {
        v39(4, "%s:%i Unknown SE: %d", "_NFDriverEnumerateSecureElements", 3885, *(v23 - 1));
      }
      dispatch_get_specific(*v24);
      unint64_t v40 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      int v41 = *(v23 - 1);
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3885;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v41;
      __int16 v29 = buf;
      int v30 = v40;
      uint64_t v31 = "%{public}s:%i Unknown SE: %d";
      uint32_t v38 = 24;
      goto LABEL_45;
    }
    uint64_t v26 = *(void *)(*(void *)(a1 + 24) + 512);
    dispatch_get_specific(*v24);
    __int16 v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26)
    {
      if (v27) {
        v27(4, "%s:%i eSE already found", "_NFDriverEnumerateSecureElements", 3841);
      }
      dispatch_get_specific(*v24);
      int v28 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3841;
      __int16 v29 = buf;
      int v30 = v28;
      uint64_t v31 = "%{public}s:%i eSE already found";
LABEL_40:
      uint32_t v38 = 18;
LABEL_45:
      _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_ERROR, v31, v29, v38);
      goto LABEL_85;
    }
    if (v27) {
      v27(6, "%s:%i Found eSE state=%d", "_NFDriverEnumerateSecureElements", 3844, *v23);
    }
    dispatch_get_specific(*v24);
    __int16 v42 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      int v43 = *v23;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3844;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v43;
      _os_log_impl(&dword_2229A5000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found eSE state=%d", buf, 0x18u);
    }
    memset(buf, 0, sizeof(buf));
    LODWORD(v73) = 0;
    if ((NFDriverGetControllerInfo(a1, (uint64_t)buf) & 1) == 0) {
      break;
    }
    uint64_t v44 = (int)sub_2229C8060(*(_DWORD *)(*(void *)(a1 + 24) + 604), *(unsigned __int8 *)(*(void *)(a1 + 24) + 608))- 5;
    if (v44 > 7) {
      int v45 = 6;
    }
    else {
      int v45 = dword_2229E83D4[v44];
    }
    char v50 = sub_2229B6038(a1, v45, *v23 == 4, *(void *)(v23 - 3));
    *(void *)(*(void *)(a1 + 24) + 512) = v50;
    if (v50)
    {
      char v51 = v50;
      if (v50[6] == 1)
      {
        dispatch_get_specific(*v24);
        __int16 v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v52) {
          v52(3, "%s:%i Error, trying to power cycle the SE.", "_NFDriverRebootRemovedSE", 3507);
        }
        dispatch_get_specific(*v24);
        uint64_t v53 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v75 = 136446466;
          unint64_t v76 = "_NFDriverRebootRemovedSE";
          __int16 v77 = 1024;
          int v78 = 3507;
          _os_log_impl(&dword_2229A5000, v53, OS_LOG_TYPE_ERROR, "%{public}s:%i Error, trying to power cycle the SE.", v75, 0x12u);
        }
        if ((NFDriverSetSecureElementPower(a1, 1) & 1) == 0 && (NFDriverSetSecureElementPower(a1, 1) & 1) == 0)
        {
          dispatch_get_specific(*v24);
          __int16 v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v58) {
            v58(6, "%s:%i Power cycling SE success.", "_NFDriverRebootRemovedSE", 3514);
          }
          dispatch_get_specific(*v24);
          uint64_t v59 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long v75 = 136446466;
            unint64_t v76 = "_NFDriverRebootRemovedSE";
            __int16 v77 = 1024;
            int v78 = 3514;
            _os_log_impl(&dword_2229A5000, v59, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Power cycling SE success.", v75, 0x12u);
          }
          v51[6] = 0;
          goto LABEL_85;
        }
        dispatch_get_specific(*v24);
        uint64_t v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v54) {
          v54(3, "%s:%i Error: Failed to power cycle the SE.", "_NFDriverRebootRemovedSE", 3517);
        }
        dispatch_get_specific(*v24);
        int v55 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v75 = 136446466;
          unint64_t v76 = "_NFDriverRebootRemovedSE";
          __int16 v77 = 1024;
          int v78 = 3517;
          _os_log_impl(&dword_2229A5000, v55, OS_LOG_TYPE_ERROR, "%{public}s:%i Error: Failed to power cycle the SE.", v75, 0x12u);
        }
        dispatch_get_specific(*v24);
        __int16 v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v56) {
          v56(3, "%s:%i Failed to recover SE", "_NFDriverEnumerateSecureElements", 3858);
        }
        dispatch_get_specific(*v24);
        int v57 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v75 = 136446466;
          unint64_t v76 = "_NFDriverEnumerateSecureElements";
          __int16 v77 = 1024;
          int v78 = 3858;
          __int16 v29 = v75;
          int v30 = v57;
          uint64_t v31 = "%{public}s:%i Failed to recover SE";
          goto LABEL_40;
        }
      }
    }
LABEL_85:
    ++v22;
    v23 += 4;
    if (v22 >= *((unsigned __int8 *)v69 + 24)) {
      goto LABEL_86;
    }
  }
  dispatch_get_specific(*v24);
  long long v61 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v61) {
    v61(3, "%s:%i Failed to get controller info", "_NFDriverEnumerateSecureElements", 3847);
  }
  dispatch_get_specific(*v24);
  uint64_t v62 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long v75 = 136446466;
    unint64_t v76 = "_NFDriverEnumerateSecureElements";
    __int16 v77 = 1024;
    int v78 = 3847;
    __int16 v18 = "%{public}s:%i Failed to get controller info";
    uint32_t v19 = v75;
    uint64_t v20 = v62;
    uint32_t v21 = 18;
LABEL_18:
    _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, v18, v19, v21);
  }
LABEL_19:
  free(v6);
  uint64_t v13 = 8;
LABEL_87:
  _Block_object_dispose(&v64, 8);
  _Block_object_dispose(&v68, 8);
  return v13;
}

uint64_t sub_2229CAA20(uint64_t a1)
{
  uint64_t result = phLibNfc_SE_GetSecureElementList();
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_2229CAA68(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  memset(v33, 0, sizeof(v33));
  int v34 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v33);
  uint64_t v5 = *(void *)(a2 + 192);
  if (v5)
  {
    unsigned __int8 v6 = 0;
    uint64_t v7 = (char *)(a2 + 1);
    do
    {
      size_t v8 = *(v7 - 1);
      if (*(v7 - 1))
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 528);
        if (v9) {
          uint64_t v9 = *(void *)(v9 + 8);
        }
        uint64_t v10 = (char *)v35 + 40 * v6;
        *(void *)uint64_t v10 = v9;
        *((_DWORD *)v10 + 2) = 2;
        v10[12] |= 1u;
        v10[32] = v8;
        memcpy(v10 + 16, v7, v8);
        if (++v6 >= 0xCu) {
          __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4078, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
        }
      }
      v7 += 17;
      --v5;
    }
    while (v5);
  }
  else
  {
    unsigned __int8 v6 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(v11 + 512);
  if (v12) {
    uint64_t v12 = *(void *)(v12 + 8);
  }
  uint64_t v13 = (char *)v35 + 40 * v6;
  *(void *)uint64_t v13 = v12;
  *((_DWORD *)v13 + 2) = 1;
  v13[12] |= 1u;
  *((_DWORD *)v13 + 4) = 4;
  if ((v6 + 1) >= 0xCu) {
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4088, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  }
  uint64_t v14 = *(void *)(v11 + 512);
  if (v14) {
    uint64_t v14 = *(void *)(v14 + 8);
  }
  uint64_t v15 = (char *)v35 + 40 * (v6 + 1);
  *(void *)uint64_t v15 = v14;
  *((_DWORD *)v15 + 2) = 0;
  *((_DWORD *)v15 + 4) = 2;
  char v18 = v15[12];
  uint64_t v16 = v15 + 12;
  char v17 = v18;
  *uint64_t v16 = v18 | 1;
  if (HIDWORD(v33[0]) >= 7) {
    *uint64_t v16 = v17 | 3;
  }
  if ((v6 + 2) >= 0xCu) {
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4099, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  }
  uint64_t v19 = *(void *)(v11 + 528);
  if (v19) {
    uint64_t v19 = *(void *)(v19 + 8);
  }
  uint64_t v20 = (char *)v35 + 40 * (v6 + 2);
  *(void *)uint64_t v20 = v19;
  *((_DWORD *)v20 + 2) = 1;
  v20[12] |= 1u;
  *((_DWORD *)v20 + 4) = 4;
  if ((v6 + 3) >= 0xCu) {
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4108, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  }
  uint64_t v21 = *(void *)(v11 + 512);
  if (v21) {
    uint64_t v21 = *(void *)(v21 + 8);
  }
  unint64_t v22 = (char *)v35 + 40 * (v6 + 3);
  *(void *)unint64_t v22 = v21;
  *((_DWORD *)v22 + 2) = 1;
  v22[12] |= 2u;
  *((_DWORD *)v22 + 4) = 4;
  if ((v6 + 4) >= 0xCu) {
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4118, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  }
  int v23 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Routing changed", "_NFDriverConfigureRoutingTable", 4120);
  }
  dispatch_get_specific(*v23);
  int v25 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverConfigureRoutingTable";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4120;
    _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Routing changed", buf, 0x12u);
  }
  uint64_t v26 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v26[2] + 8));
  uint64_t v27 = v26[2];
  ++*(void *)v27;
  pthread_mutex_unlock((pthread_mutex_t *)(v27 + 8));
  int v28 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E4024;
  *(void *)&uint8_t buf[24] = &unk_26463B770;
  char v41 = v6 + 4;
  uint64_t v38 = a1;
  unint64_t v39 = v35;
  unint64_t v40 = v26;
  dispatch_async_and_wait(v28, buf);
  if (sub_2229BFAD8(v26))
  {
    dispatch_get_specific(*v23);
    __int16 v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v29) {
      v29(3, "%s:%i Failed to setup routing 0x%04llx", "_NFDriverConfigureRoutingTable", 4123, *v26);
    }
    dispatch_get_specific(*v23);
    int v30 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *v26;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverConfigureRoutingTable";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4123;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v31;
      _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup routing 0x%04llx", buf, 0x1Cu);
    }
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
  sub_2229BF93C((void **)v26);
  return v2;
}

uint64_t NFDriverConfigureVASPolling(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset(v18, 0, sizeof(v18));
  int v19 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v18);
  if (HIDWORD(v18[0]) < 7) {
    return 1;
  }
  uint64_t v27 = 0;
  long long v26 = xmmword_2229E81C8;
  unsigned __int8 v6 = (const void **)MEMORY[0x263F8C6C0];
  if (a3 <= 21 && a2 && a3)
  {
    BYTE3(v26) = a3;
    uint64_t v7 = &v26;
    __memcpy_chk();
  }
  else
  {
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Use default ECP value", "NFDriverConfigureVASPolling", 4206);
    }
    dispatch_get_specific(*v6);
    uint64_t v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v21 = "NFDriverConfigureVASPolling";
      __int16 v22 = 1024;
      int v23 = 4206;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Use default ECP value", buf, 0x12u);
    }
    uint64_t v7 = (long long *)&unk_267F84C20;
  }
  char v17 = (void **)sub_2229C3DD8(0x18u, v7);
  uint64_t v11 = sub_2229C39B8(a1, 37025, (uint64_t)v17, 0);
  uint64_t v12 = sub_2229BFAD8(v11);
  BOOL v8 = v12 == 0;
  if (v12)
  {
    dispatch_get_specific(*v6);
    uint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i Failed to set ECP VAS polling: 0x%08llx", "NFDriverConfigureVASPolling", 4217, *v11);
    }
    dispatch_get_specific(*v6);
    uint64_t v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *v11;
      *(_DWORD *)buf = 136446722;
      uint64_t v21 = "NFDriverConfigureVASPolling";
      __int16 v22 = 1024;
      int v23 = 4217;
      __int16 v24 = 2048;
      uint64_t v25 = v15;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set ECP VAS polling: 0x%08llx", buf, 0x1Cu);
    }
  }
  sub_2229BF93C((void **)v11);
  sub_2229C3E74(&v17);
  return v8;
}

uint64_t NFDriverEnableAntiRelay(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v25[0] = 17210017;
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  if (a3 == 5)
  {
    memset(v23, 0, sizeof(v23));
    int v24 = 0;
    NFDriverGetControllerInfo(a1, (uint64_t)v23);
    uint64_t v3 = 0;
    if (*(_DWORD *)&v23[4] >= 7u)
    {
      v25[1] = *(_DWORD *)a2;
      char v26 = *(unsigned char *)(a2 + 4);
      uint64_t v16 = (void **)sub_2229C3DD8(9u, v25);
      uint64_t v7 = sub_2229C39B8(a1, 37025, (uint64_t)v16, 0);
      if (sub_2229BFAD8(v7))
      {
        BOOL v8 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(3, "%s:%i Failed to set Prox config : 0x%08llx", "NFDriverEnableAntiRelay", 4258, *v7);
        }
        dispatch_get_specific(*v8);
        uint64_t v10 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *v7;
          *(_DWORD *)buf = 136446722;
          char v18 = "NFDriverEnableAntiRelay";
          __int16 v19 = 1024;
          int v20 = 4258;
          __int16 v21 = 2048;
          uint64_t v22 = v11;
          _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set Prox config : 0x%08llx", buf, 0x1Cu);
        }
        uint64_t v3 = 1;
      }
      else
      {
        uint64_t v3 = 0;
      }
      sub_2229BF93C((void **)v7);
      sub_2229C3E74(&v16);
    }
  }
  else
  {
    uint64_t v12 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i Unexpected size of AID prefix : %d.", "NFDriverEnableAntiRelay", 4244, a3);
    }
    dispatch_get_specific(*v12);
    uint64_t v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v23 = 136446722;
      *(void *)&v23[4] = "NFDriverEnableAntiRelay";
      *(_WORD *)&v23[12] = 1024;
      *(_DWORD *)&v23[14] = 4244;
      *(_WORD *)&v23[18] = 1024;
      *(_DWORD *)&v23[20] = a3;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected size of AID prefix : %d.", v23, 0x18u);
    }
    return 5;
  }
  return v3;
}

_DWORD *NFDriverOpen(uint64_t a1, unsigned char *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (a2) {
    *a2 = 1;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 0x48uLL, 0x10D00401727F4BCuLL);
  if (!v4) {
    return v4;
  }
  uint64_t v5 = malloc_type_calloc(1uLL, 0x2F0uLL, 0x10A0040DD14B905uLL);
  if (!v5)
  {
LABEL_73:
    free(v4);
    return 0;
  }
  unsigned __int8 v6 = v5;
  *((void *)v4 + 3) = v5;
  if (a1)
  {
    unint64_t v7 = *(void *)(a1 + 24);
    v5[740] = (v7 & 0x80) != 0;
    *((unsigned char *)v4 + 56) = (v7 & 0x80000) != 0;
    if ((v7 & 0x80000) != 0) {
      v5[740] = 0;
    }
    BOOL v8 = *(const char **)(a1 + 8);
    if (*(void *)a1)
    {
      *((void *)v4 + 1) = strdup(*(const char **)a1);
      if (v8) {
        *((void *)v4 + 2) = strdup(v8);
      }
    }
    else if (v8)
    {
      *((void *)v4 + 1) = strdup(*(const char **)(a1 + 8));
    }
    *((void *)v6 + 71) = v7;
    *((_DWORD *)v6 + 178) = 0;
    int v10 = *(_DWORD *)(a1 + 32);
    if (!v10) {
      int v10 = 300;
    }
    *((_DWORD *)v6 + 179) = v10;
    *((void *)v6 + 90) = *(void *)(a1 + 40);
    int v11 = *(_DWORD *)(a1 + 36);
    if (!v11) {
      int v11 = 750;
    }
    *((_DWORD *)v6 + 182) = v11;
    *((unsigned char *)v6 + 744) = 0;
    *((_WORD *)v6 + 368) = 0;
    if ((v7 >> 19)) {
      goto LABEL_20;
    }
LABEL_12:
    int v9 = MEMORY[0x223CA2610]();
    goto LABEL_21;
  }
  if (!*((unsigned char *)v4 + 56)) {
    goto LABEL_12;
  }
LABEL_20:
  int v9 = 3;
LABEL_21:
  if (!*((void *)v4 + 1))
  {
    switch(v9)
    {
      case 0:
        uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(6, "%s:%i HW is not supported", "NFDriverOpen", 4483);
        }
        dispatch_get_specific(*v13);
        uint64_t v15 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_70;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverOpen";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4483;
        uint64_t v16 = "%{public}s:%i HW is not supported";
        char v17 = v15;
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
        uint32_t v19 = 18;
        goto LABEL_69;
      case 1:
      case 2:
        uint64_t v12 = "com.apple.uart.stockholm";
        goto LABEL_29;
      case 3:
        if (*((unsigned char *)v4 + 56))
        {
          *((void *)v4 + 1) = strdup("com.apple.spmi.nfc.hammerfest");
          *((void *)v4 + 2) = strdup("com.apple.spmi.nfc");
        }
        else
        {
          *((void *)v4 + 1) = strdup("com.apple.spmi.nfc");
          *((void *)v4 + 2) = 0;
        }
        goto LABEL_30;
      case 4:
        uint64_t v12 = "relay";
LABEL_29:
        *((void *)v4 + 1) = strdup(v12);
        goto LABEL_30;
      default:
        char v51 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        __int16 v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v52) {
          v52(3, "%s:%i Wrong interfaceType %d - cannot continue!", "NFDriverOpen", 4490, v9);
        }
        dispatch_get_specific(*v51);
        uint64_t v53 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
          goto LABEL_70;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverOpen";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4490;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v9;
        uint64_t v16 = "%{public}s:%i Wrong interfaceType %d - cannot continue!";
        char v17 = v53;
        os_log_type_t v18 = OS_LOG_TYPE_ERROR;
        uint32_t v19 = 24;
LABEL_69:
        _os_log_impl(&dword_2229A5000, v17, v18, v16, buf, v19);
LABEL_70:
        if (a2) {
          *a2 = 0;
        }
        free(v6);
        break;
    }
    goto LABEL_73;
  }
LABEL_30:
  *uint64_t v4 = v9;
  if (*((unsigned char *)v4 + 56)) {
    int v20 = "com.apple.stockholm.driverQueue.secondary";
  }
  else {
    int v20 = "com.apple.stockholm.driverQueue.primary";
  }
  if (*((unsigned char *)v4 + 56)) {
    __int16 v21 = "com.apple.stockholm.callbackQueue.secondary";
  }
  else {
    __int16 v21 = "com.apple.stockholm.callbackQueue.primary";
  }
  *((void *)v6 + 68) = dispatch_workloop_create_inactive(v20);
  *((void *)v6 + 69) = dispatch_workloop_create_inactive(v21);
  dispatch_workloop_set_scheduler_priority();
  dispatch_workloop_set_scheduler_priority();
  uint64_t v22 = *((void *)v6 + 68);
  int v23 = (const void **)MEMORY[0x263F8C6C0];
  int v24 = (const void *)*MEMORY[0x263F8C6C0];
  if (*((unsigned char *)v4 + 56))
  {
    dispatch_queue_set_specific(v22, v24, (void *)3, 0);
    uint64_t v25 = *((void *)v6 + 69);
    char v26 = *v23;
    uint64_t v27 = 3;
  }
  else
  {
    dispatch_queue_set_specific(v22, v24, 0, 0);
    uint64_t v25 = *((void *)v6 + 69);
    char v26 = *v23;
    uint64_t v27 = 0;
  }
  dispatch_queue_set_specific(v25, v26, (void *)v27, 0);
  dispatch_activate(*((dispatch_object_t *)v6 + 68));
  dispatch_activate(*((dispatch_object_t *)v6 + 69));
  if (*((unsigned char *)v4 + 56))
  {
    *(unsigned char *)(*((void *)v4 + 3) + 742) = MEMORY[0x223CA2620]();
    dispatch_get_specific(*v23);
    uint64_t v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v28) {
      v28(6, "%s:%i interfaceType:%d path:%s flags:0x%llx  aux path:%s  warmBoot:%d", "NFDriverOpen", 4522, *v4, *((const char **)v4 + 1), *((void *)v6 + 71), *((const char **)v4 + 2), *(unsigned __int8 *)(*((void *)v4 + 3) + 742));
    }
    dispatch_get_specific(*v23);
    __int16 v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    int v30 = *v4;
    uint64_t v31 = *((void *)v6 + 71);
    uint64_t v32 = *((void *)v4 + 1);
    uint64_t v33 = *((void *)v4 + 2);
    int v34 = *(unsigned __int8 *)(*((void *)v4 + 3) + 742);
    *(_DWORD *)buf = 136447746;
    *(void *)&uint8_t buf[4] = "NFDriverOpen";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4522;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v30;
    *(_WORD *)&uint8_t buf[24] = 2080;
    *(void *)&buf[26] = v32;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = v31;
    *(_WORD *)&buf[44] = 2080;
    *(void *)&buf[46] = v33;
    __int16 v56 = 1024;
    int v57 = v34;
    uint64_t v35 = "%{public}s:%i interfaceType:%d path:%s flags:0x%llx  aux path:%s  warmBoot:%d";
    uint64_t v36 = v29;
    uint32_t v37 = 60;
  }
  else
  {
    dispatch_get_specific(*v23);
    uint64_t v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v38) {
      v38(6, "%s:%i interfaceType:%d path:%s flags:0x%llx", "NFDriverOpen", 4527, *v4, *((const char **)v4 + 1), *((void *)v6 + 71));
    }
    dispatch_get_specific(*v23);
    unint64_t v39 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_49;
    }
    int v40 = *v4;
    uint64_t v41 = *((void *)v4 + 1);
    uint64_t v42 = *((void *)v6 + 71);
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "NFDriverOpen";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4527;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v40;
    *(_WORD *)&uint8_t buf[24] = 2080;
    *(void *)&buf[26] = v41;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = v42;
    uint64_t v35 = "%{public}s:%i interfaceType:%d path:%s flags:0x%llx";
    uint64_t v36 = v39;
    uint32_t v37 = 44;
  }
  _os_log_impl(&dword_2229A5000, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
LABEL_49:
  NFDriverSetPollingConfig((uint64_t)v4, 0, 0);
  *((void *)v6 + 67) = dispatch_semaphore_create(1);
  *((unsigned char *)v6 + 738) = 1;
  byte_26ABD841C = 0;
  int v43 = (void **)sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v43[2] + 8));
  uint64_t v44 = (char *)v43[2];
  ++*(void *)v44;
  pthread_mutex_unlock((pthread_mutex_t *)(v44 + 8));
  int v45 = *(NSObject **)(*((void *)v4 + 3) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E41B0;
  *(void *)&uint8_t buf[24] = &unk_26463B790;
  *(void *)&unsigned char buf[32] = v4;
  *(void *)&unsigned char buf[40] = v43;
  dispatch_async_and_wait(v45, buf);
  if (sub_2229BFAD8((uint64_t *)v43))
  {
    if (*((unsigned char *)v6 + 740))
    {
      NFDriverGetStackBreadcrumb((uint64_t)v4);
      postAnalyticsMiddlewareExceptionEvent();
    }
    dispatch_get_specific(*v23);
    __int16 v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v46) {
      v46(3, "%s:%i status=0x%04llX", "NFDriverOpen", 4552, *v43);
    }
    dispatch_get_specific(*v23);
    int v47 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      int v48 = *v43;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverOpen";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4552;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v48;
      _os_log_impl(&dword_2229A5000, v47, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    if (*v43 == (void *)51)
    {
      dispatch_get_specific(*v23);
      int v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v49) {
        v49(6, "%s:%i Hardware not supported", "NFDriverOpen", 4556);
      }
      dispatch_get_specific(*v23);
      char v50 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverOpen";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4556;
        _os_log_impl(&dword_2229A5000, v50, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", buf, 0x12u);
      }
      if (a2) {
        *a2 = 0;
      }
    }
    sub_2229BF93C(v43);
    NFDriverClose((uint64_t)v4);
    return 0;
  }
  sub_2229BF93C(v43);
  return v4;
}

void NFDriverSetPollingConfig(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    int v32 = (a2 >> 2) & 1;
    int v6 = (a2 >> 3) & 1;
    unsigned int v7 = (16 * v6) & 0xFFFDFFFE | (((a2 >> 7) & 1) << 17) | ((4 * v32) | (2 * ((a2 >> 1) & 1))) & 0xFFFE7FF6 | (8 * v32) & 0xFFFE7FFE | (((a2 >> 5) & 1) << 15) & 0xFFFEFFFE | (((a2 >> 6) & 1) << 16) | a2 & 1;
    *(_DWORD *)(v5 + 672) = v7;
    BOOL v8 = (const void **)MEMORY[0x263F8C6C0];
    if ((a2 & 0x10) != 0)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Polling config is using VAS ECP", "NFDriverSetPollingConfig", 4665);
      }
      int v10 = v8;
      dispatch_get_specific(*v8);
      __int16 v21 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        int v34 = "NFDriverSetPollingConfig";
        __int16 v35 = 1024;
        int v36 = 4665;
        _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Polling config is using VAS ECP", buf, 0x12u);
      }
      *(_DWORD *)(v5 + 672) |= 0x1000u;
    }
    else if ((a2 & 3) != 0 && (*(_DWORD *)(a1 + 40) - 1) >= 4)
    {
      *(_DWORD *)(v5 + 672) = v7 | 0x800;
      dispatch_get_specific(*v8);
      uint64_t v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22) {
        v22(6, "%s:%i Polling config is using Custom ECP", "NFDriverSetPollingConfig", 4675);
      }
      int v10 = v8;
      dispatch_get_specific(*v8);
      int v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        int v34 = "NFDriverSetPollingConfig";
        __int16 v35 = 1024;
        int v36 = 4675;
        uint64_t v12 = "%{public}s:%i Polling config is using Custom ECP";
        goto LABEL_22;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 672) = (16 * v6) & 0xFFFDF7FE | (((a2 >> 7) & 1) << 17) | ((4 * v32) | (2 * ((a2 >> 1) & 1))) & 0xFFFE77F6 | (8 * ((a2 >> 2) & 1)) & 0xFFFE77FE | (((a2 >> 5) & 1) << 15) & 0xFFFEF7FE | (((a2 >> 6) & 1) << 16) | a2 & 1;
      dispatch_get_specific(*v8);
      int v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v9) {
        v9(6, "%s:%i Polling config is not using ECP", "NFDriverSetPollingConfig", 4678);
      }
      int v10 = v8;
      dispatch_get_specific(*v8);
      int v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        int v34 = "NFDriverSetPollingConfig";
        __int16 v35 = 1024;
        int v36 = 4678;
        uint64_t v12 = "%{public}s:%i Polling config is not using ECP";
LABEL_22:
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0x12u);
      }
    }
    int v23 = a2 & 1;
    int v24 = (a2 >> 1) & 1;
    int v25 = (a2 >> 5) & 1;
    int v26 = (a2 >> 6) & 1;
    *(_DWORD *)(v5 + 584) = a3;
    *(unsigned char *)(v5 + 741) = (a2 & 0x1000) != 0;
    int v27 = (a2 >> 7) & 1;
    dispatch_get_specific(*v10);
    uint64_t v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v28) {
      v28(6, "%s:%i Polling cfg: A:%d B:%d F:%d 15693:%d S:%d S2:%d S3:%d CustomECP:%d VAS_ECP:%d frameRF:%d", "NFDriverSetPollingConfig", 4696, a2 & 1, (a2 >> 1) & 1, v32, v6, (a2 >> 5) & 1, (a2 >> 6) & 1, (a2 >> 7) & 1, (*(_DWORD *)(v5 + 672) >> 11) & 1, (*(_DWORD *)(v5 + 672) >> 12) & 1, *(unsigned __int8 *)(v5 + 741));
    }
    dispatch_get_specific(*v10);
    __int16 v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v30 = *(_DWORD *)(v5 + 672);
      int v31 = *(unsigned __int8 *)(v5 + 741);
      *(_DWORD *)buf = 136449026;
      int v34 = "NFDriverSetPollingConfig";
      __int16 v35 = 1024;
      int v36 = 4696;
      __int16 v37 = 1024;
      int v38 = v23;
      __int16 v39 = 1024;
      int v40 = v24;
      __int16 v41 = 1024;
      int v42 = v32;
      __int16 v43 = 1024;
      int v44 = v6;
      __int16 v45 = 1024;
      int v46 = v25;
      __int16 v47 = 1024;
      int v48 = v26;
      __int16 v49 = 1024;
      int v50 = v27;
      __int16 v51 = 1024;
      int v52 = (v30 >> 11) & 1;
      __int16 v53 = 1024;
      int v54 = (v30 >> 12) & 1;
      __int16 v55 = 1024;
      int v56 = v31;
      uint64_t v16 = "%{public}s:%i Polling cfg: A:%d B:%d F:%d 15693:%d S:%d S2:%d S3:%d CustomECP:%d VAS_ECP:%d frameRF:%d";
      char v17 = v29;
      os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
      uint32_t v19 = 78;
      goto LABEL_27;
    }
    return;
  }
  uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v14) {
    v14(3, "%s:%i Invalid param", "NFDriverSetPollingConfig", 4649);
  }
  dispatch_get_specific(*v13);
  uint64_t v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v34 = "NFDriverSetPollingConfig";
    __int16 v35 = 1024;
    int v36 = 4649;
    uint64_t v16 = "%{public}s:%i Invalid param";
    char v17 = v15;
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    uint32_t v19 = 18;
LABEL_27:
    _os_log_impl(&dword_2229A5000, v17, v18, v16, buf, v19);
  }
}

uint64_t NFDriverGetStackBreadcrumb(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  if (a1 && !sub_2229C8D00(a1, &v5, 0, 0, 0, 0))
  {
    uint64_t v1 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(5, "%s:%i Get stack breadcrumb failed", "NFDriverGetStackBreadcrumb", 5700);
    }
    dispatch_get_specific(*v1);
    uint64_t v3 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v7 = "NFDriverGetStackBreadcrumb";
      __int16 v8 = 1024;
      int v9 = 5700;
      _os_log_impl(&dword_2229A5000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
    }
  }
  return v5;
}

void NFDriverClose(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i ", "NFDriverClose", 4572);
  }
  dispatch_get_specific(*v2);
  uint64_t v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverClose";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4572;
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ", buf, 0x12u);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  *(unsigned char *)(v5 + 738) = 0;
  if (*(unsigned char *)(a1 + 57)) {
    NFDriverUnloadStackAndLeaveHWEnabled(a1, 0);
  }
  if (*(void *)(v5 + 560))
  {
    int v6 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v6[2] + 8));
    uint64_t v7 = v6[2];
    ++*(void *)v7;
    pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
    __int16 v8 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229E4558;
    *(void *)&uint8_t buf[24] = &unk_26463B7B0;
    uint64_t v17 = a1;
    os_log_type_t v18 = v6;
    dispatch_async_and_wait(v8, buf);
    if (sub_2229BFAD8(v6))
    {
      dispatch_get_specific(*v2);
      int v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v9) {
        v9(3, "%s:%i status=0x%04llX", "NFDriverClose", 4583, *v6);
      }
      dispatch_get_specific(*v2);
      uint64_t v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *v6;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverClose";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4583;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v11;
        _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      uint64_t v12 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229C31BC;
      *(void *)&uint8_t buf[24] = &unk_26463ADD8;
      uint64_t v17 = a1;
      dispatch_async(v12, buf);
    }
    sub_2229BF93C((void **)v6);
    *(void *)(v5 + 560) = 0;
  }
  byte_26ABD8431 = 0;
  dispatch_release(*(dispatch_object_t *)(v5 + 536));
  *(void *)(v5 + 536) = 0;
  uint64_t v13 = sub_2229BF5F0();
  uint64_t v14 = *(NSObject **)(v5 + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229CC60C;
  block[3] = &unk_26463B348;
  block[4] = v5;
  void block[5] = a1;
  void block[6] = v13;
  dispatch_barrier_async(v14, block);
  sub_2229BFAD8(v13);
  sub_2229BF93C((void **)v13);
}

uint64_t sub_2229CC60C(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 544));
  *(void *)(*(void *)(a1 + 32) + 544) = 0;
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 552));
  *(void *)(*(void *)(a1 + 32) + 552) = 0;
  *(void *)(*(void *)(a1 + 40) + 24) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 512);
  if (v3)
  {
    free(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(v2 + 512) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 520);
  if (v5)
  {
    free(v5);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  *(void *)(v4 + 520) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 528);
  if (v7)
  {
    free(v7);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  *(void *)(v6 + 528) = 0;
  free(*(void **)(a1 + 32));
  uint64_t v8 = *(void *)(a1 + 40);
  int v9 = *(void **)(v8 + 8);
  if (v9)
  {
    free(v9);
    uint64_t v8 = *(void *)(a1 + 40);
  }
  *(void *)(v8 + 8) = 0;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 16);
  if (v11)
  {
    free(v11);
    uint64_t v10 = *(void *)(a1 + 40);
  }
  *(void *)(v10 + 16) = 0;
  free(*(void **)(a1 + 40));
  uint64_t v12 = *(void **)(a1 + 48);

  return sub_2229BF9CC(v12, 0);
}

void NFDriverPreventReset(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Setting prevent reset to %d", "NFDriverPreventReset", 4632, a2);
  }
  dispatch_get_specific(*v4);
  uint64_t v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v11 = "NFDriverPreventReset";
    __int16 v12 = 1024;
    int v13 = 4632;
    __int16 v14 = 1024;
    int v15 = a2;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting prevent reset to %d", buf, 0x18u);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  *(unsigned char *)(v7 + 744) = a2;
  byte_26ABD8431 = a2;
  if ((a2 & 1) == 0)
  {
    if (*(_WORD *)(v7 + 736))
    {
      uint64_t v8 = *(NSObject **)(v7 + 544);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = sub_2229CC878;
      block[3] = &unk_26463B368;
      block[4] = a1;
      dispatch_async(v8, block);
    }
  }
}

uint64_t sub_2229CC878(uint64_t a1)
{
  return NFDriverSimulateCrash(*(void *)(a1 + 32), *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 24) + 736), (uint64_t)"Delayed crashing");
}

uint64_t NFDriverSetPollingProfile(uint64_t a1, unsigned int a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i profile: %d", "NFDriverSetPollingProfile", 4701, a2);
  }
  dispatch_get_specific(*v4);
  uint64_t v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    int v26 = "NFDriverSetPollingProfile";
    __int16 v27 = 1024;
    int v28 = 4701;
    __int16 v29 = 1024;
    LODWORD(v30) = a2;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i profile: %d", buf, 0x18u);
  }
  if (a2 >= 5)
  {
    dispatch_get_specific(*v4);
    uint64_t v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8) {
      v8(3, "%s:%i Unknown poll mode profile 0x%0x, using default", "NFDriverSetPollingProfile", 4718, 0);
    }
    dispatch_get_specific(*v4);
    int v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v26 = "NFDriverSetPollingProfile";
      __int16 v27 = 1024;
      int v28 = 4718;
      __int16 v29 = 1024;
      LODWORD(v30) = 0;
      _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown poll mode profile 0x%0x, using default", buf, 0x18u);
    }
    LOBYTE(v7) = 0;
  }
  else
  {
    unint64_t v7 = 0x63430100uLL >> (8 * a2);
  }
  if (*(unsigned char *)(a1 + 60) || *(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 36))
  {
    if (!sub_2229C699C(a1, 0, 0, 0, 0, 0, 0))
    {
      dispatch_get_specific(*v4);
      uint64_t v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10) {
        v10(3, "%s:%i Failed to stop discovery", "NFDriverSetPollingProfile", 4727);
      }
      dispatch_get_specific(*v4);
      uint64_t v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v26 = "NFDriverSetPollingProfile";
        __int16 v27 = 1024;
        int v28 = 4727;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    int v12 = 1;
  }
  else
  {
    int v12 = 0;
  }
  __int16 v13 = sub_2229C5B30(a1, 18);
  v24[0] = HIBYTE(v13);
  v24[1] = v13;
  v24[2] = 1;
  v24[3] = v7;
  int v23 = (void **)sub_2229C3DD8(4u, v24);
  __int16 v14 = (void **)sub_2229C39B8(a1, 37025, (uint64_t)v23, 0);
  if (sub_2229BFAD8((uint64_t *)v14))
  {
    dispatch_get_specific(*v4);
    int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(3, "%s:%i status=0x%04llX", "NFDriverSetPollingProfile", 4738, *v14);
    }
    dispatch_get_specific(*v4);
    uint64_t v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *v14;
      *(_DWORD *)buf = 136446722;
      int v26 = "NFDriverSetPollingProfile";
      __int16 v27 = 1024;
      int v28 = 4738;
      __int16 v29 = 2048;
      unsigned int v30 = v17;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_2229BF93C(v14);
    sub_2229C3E74(&v23);
    return 0;
  }
  sub_2229BF93C(v14);
  sub_2229C3E74(&v23);
  *(_DWORD *)(a1 + 40) = a2;
  uint64_t v18 = 1;
  if (v12)
  {
    int v19 = *(unsigned char *)(a1 + 62) ? 1 : 2;
    if (!sub_2229C699C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v19))
    {
      dispatch_get_specific(*v4);
      __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(3, "%s:%i Failed to update discovery", "NFDriverSetPollingProfile", 4750);
      }
      dispatch_get_specific(*v4);
      uint64_t v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v26 = "NFDriverSetPollingProfile";
        __int16 v27 = 1024;
        int v28 = 4750;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to update discovery", buf, 0x12u);
      }
      return 0;
    }
  }
  return v18;
}

void NFDriverSetExpressConfig(uint64_t a1, unsigned int a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (NF_isFeatureSupported())
  {
    if (a1)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      *(_DWORD *)(v4 + 676) = 0;
      int v5 = a2 & 7 | (8 * ((a2 >> 5) & 1)) | (a2 >> 1) & 0x20 | (a2 >> 3) & 0x10;
      if ((a2 & 0x10) != 0) {
        LOBYTE(v5) = v5 | 6;
      }
      *(unsigned char *)(v4 + 676) = v5;
      uint64_t v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        unsigned int v8 = *(unsigned __int8 *)(v4 + 676);
        Logger(6, "%s:%i Express cfg: Transit:%d Access:%d Generic-A:%d SinglePoll:%d Block:%d Debug:%d", "NFDriverSetExpressConfig", 4788, v8 & 1, (v8 >> 1) & 1, (v8 >> 2) & 1, (v8 >> 3) & 1, (v8 >> 5) & 1, (v8 >> 4) & 1);
      }
      dispatch_get_specific(*v6);
      int v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v10 = *(unsigned __int8 *)(v4 + 676);
        *(_DWORD *)buf = 136448002;
        int v19 = "NFDriverSetExpressConfig";
        __int16 v20 = 1024;
        int v21 = 4788;
        __int16 v22 = 1024;
        int v23 = v10 & 1;
        __int16 v24 = 1024;
        int v25 = (v10 >> 1) & 1;
        __int16 v26 = 1024;
        int v27 = (v10 >> 2) & 1;
        __int16 v28 = 1024;
        int v29 = (v10 >> 3) & 1;
        __int16 v30 = 1024;
        int v31 = (v10 >> 5) & 1;
        __int16 v32 = 1024;
        int v33 = (v10 >> 4) & 1;
        uint64_t v11 = "%{public}s:%i Express cfg: Transit:%d Access:%d Generic-A:%d SinglePoll:%d Block:%d Debug:%d";
        int v12 = v9;
        os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
        uint32_t v14 = 54;
LABEL_13:
        _os_log_impl(&dword_2229A5000, v12, v13, v11, buf, v14);
      }
    }
    else
    {
      int v15 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16) {
        v16(3, "%s:%i Invalid param", "NFDriverSetExpressConfig", 4764);
      }
      dispatch_get_specific(*v15);
      uint64_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v19 = "NFDriverSetExpressConfig";
        __int16 v20 = 1024;
        int v21 = 4764;
        uint64_t v11 = "%{public}s:%i Invalid param";
        int v12 = v17;
        os_log_type_t v13 = OS_LOG_TYPE_ERROR;
        uint32_t v14 = 18;
        goto LABEL_13;
      }
    }
  }
}

uint64_t NFDriverSetCallback(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  *(void *)(*(void *)(result + 24) + 8 * a2) = a3;
  *(void *)(*(void *)(result + 24) + 8 * a2 + 256) = a4;
  return result;
}

void sub_2229CCF98(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverUpdateFirmware(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v29 = (void **)sub_2229C3DD8(*(_DWORD *)(a2 + 8), *(const void **)a2);
  unsigned int v7 = 0;
  __int16 v28 = (unsigned __int8 **)sub_2229C3DD8(2u, 0);
  unsigned int v8 = (const void **)MEMORY[0x263F8C6C0];
  while (1)
  {
    if (v7 > 1) {
      int v9 = 1;
    }
    else {
      int v9 = a4;
    }
    if (v9) {
      int v10 = 2556;
    }
    else {
      int v10 = 2559;
    }
    dispatch_get_specific(*v8);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Attempt %d of %d", "NFDriverUpdateFirmware", 4834, v7, a3);
    }
    dispatch_get_specific(*v8);
    int v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "NFDriverUpdateFirmware";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4834;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v7;
      *(_WORD *)&uint8_t buf[24] = 1024;
      *(_DWORD *)&buf[26] = a3;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Attempt %d of %d", buf, 0x1Eu);
    }
    os_log_type_t v13 = sub_2229C39B8(a1, v10, (uint64_t)v29, (uint64_t)v28);
    if (!sub_2229BFAD8(v13)) {
      break;
    }
    uint64_t v14 = *v13;
    dispatch_get_specific(*v8);
    int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14 == 60)
    {
      if (v15) {
        v15(6, "%s:%i Already up-to-date", "NFDriverUpdateFirmware", 4845);
      }
      dispatch_get_specific(*v8);
      int v27 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverUpdateFirmware";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4845;
        __int16 v24 = "%{public}s:%i Already up-to-date";
        int v25 = v27;
        uint32_t v26 = 18;
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    if (v15) {
      v15(3, "%s:%i status=0x%04llX, previous state %d", "NFDriverUpdateFirmware", 4853, *v13, **v28);
    }
    dispatch_get_specific(*v8);
    uint64_t v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *v13;
      int v18 = **v28;
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "NFDriverUpdateFirmware";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4853;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v17;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = v18;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX, previous state %d", buf, 0x22u);
    }
    sub_2229BF93C((void **)v13);
    NFDriverRunIntegrityDebug(a1);
    int v19 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229C31BC;
    *(void *)&uint8_t buf[24] = &unk_26463ADD8;
    *(void *)&unsigned char buf[32] = a1;
    dispatch_async(v19, buf);
    if ((a3 & ~(a3 >> 31)) + 1 == ++v7)
    {
      sub_2229C35F0(a1);
      sub_2229C3E74((void ***)&v28);
      sub_2229C3E74(&v29);
      return 1;
    }
  }
  dispatch_get_specific(*v8);
  int v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21) {
    v21(6, "%s:%i Update successful, previous session state was %d", "NFDriverUpdateFirmware", 4838, **v28);
  }
  dispatch_get_specific(*v8);
  __int16 v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = **v28;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "NFDriverUpdateFirmware";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4838;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v23;
    __int16 v24 = "%{public}s:%i Update successful, previous session state was %d";
    int v25 = v22;
    uint32_t v26 = 24;
LABEL_28:
    _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_DEFAULT, v24, buf, v26);
  }
LABEL_29:
  sub_2229BF93C((void **)v13);
  sub_2229C3E74((void ***)&v28);
  sub_2229C3E74(&v29);
  sub_2229CD474(a1);
  return 0;
}

void sub_2229CD474(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unsigned int v2 = NFGetProductType();
  if (v2 <= 0x18)
  {
    int HasVirtualGPIO = 1;
    if (((1 << v2) & 0x100C000) != 0)
    {
      int HasVirtualGPIO = NFHardwareHasVirtualGPIO();
    }
    else if (((1 << v2) & 0x300000) == 0)
    {
      return;
    }
    __int16 v14 = 2208;
    char v15 = 1;
    char v16 = HasVirtualGPIO;
    os_log_type_t v13 = (void **)sub_2229C3DD8(4u, &v14);
    uint64_t v4 = sub_2229C39B8(a1, 240, (uint64_t)v13, 0);
    uint64_t v5 = sub_2229BFAD8(v4);
    uint64_t v6 = (const void **)MEMORY[0x263F8C6C0];
    if (v5)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i failed to set vGPIO tag (0xA008)", "_NFDriverConfigureHardware", 4363);
      }
      dispatch_get_specific(*v6);
      unsigned int v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v18 = "_NFDriverConfigureHardware";
        __int16 v19 = 1024;
        int v20 = 4363;
        _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to set vGPIO tag (0xA008)", buf, 0x12u);
      }
    }
    sub_2229BF93C((void **)v4);
    sub_2229C3E74(&v13);
    dispatch_get_specific(*v6);
    int v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
    {
      if (HasVirtualGPIO) {
        int v10 = "vGPIO";
      }
      else {
        int v10 = "physical GPIO";
      }
      v9(6, "%s:%i %s configured successfully", "_NFDriverConfigureHardware", 4368, v10);
    }
    dispatch_get_specific(*v6);
    uint64_t v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (HasVirtualGPIO) {
        int v12 = "vGPIO";
      }
      else {
        int v12 = "physical GPIO";
      }
      *(_DWORD *)buf = 136446722;
      int v18 = "_NFDriverConfigureHardware";
      __int16 v19 = 1024;
      int v20 = 4368;
      __int16 v21 = 2080;
      __int16 v22 = v12;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s configured successfully", buf, 0x1Cu);
    }
  }
}

BOOL sub_2229CD6C4(uint64_t a1, int *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  int v5 = *(_DWORD *)(a1 + 44);
  if (*a2) {
    goto LABEL_2;
  }
  if (v5) {
    BOOL v12 = v5 == 6;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (!sub_2229E4810(a1, 1, 1u))
    {
      __int16 v21 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to power off eSE", "_NFDriverSetSecureElementRouting", 4935);
      }
      dispatch_get_specific(*v21);
      int v9 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v26 = "_NFDriverSetSecureElementRouting";
        __int16 v27 = 1024;
        int v28 = 4935;
        uint64_t v11 = "%{public}s:%i Failed to power off eSE";
        goto LABEL_52;
      }
      return result;
    }
    int v5 = *(_DWORD *)(a1 + 44);
    int v4 = *a2;
LABEL_2:
    BOOL v6 = v4 != 6 || v5 == 6;
    if (!v6 && !sub_2229E4810(a1, 1, 3u))
    {
      unsigned int v7 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unsigned int v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v8) {
        v8(3, "%s:%i Failed to fully power off eSE", "_NFDriverSetSecureElementRouting", 4944);
      }
      dispatch_get_specific(*v7);
      int v9 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v26 = "_NFDriverSetSecureElementRouting";
        __int16 v27 = 1024;
        int v28 = 4944;
        uint64_t v11 = "%{public}s:%i Failed to fully power off eSE";
LABEL_52:
        _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
        return 0;
      }
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 48)) {
    BOOL v13 = a2[1] == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13 && !sub_2229E4810(a1, 4, 1u))
  {
    char v16 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v17) {
      v17(3, "%s:%i Failed to power off Host", "_NFDriverSetSecureElementRouting", 4953);
    }
    dispatch_get_specific(*v16);
    int v9 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      uint32_t v26 = "_NFDriverSetSecureElementRouting";
      __int16 v27 = 1024;
      int v28 = 4953;
      uint64_t v11 = "%{public}s:%i Failed to power off Host";
      goto LABEL_52;
    }
    return result;
  }
  if (!*(void *)(*(void *)(a1 + 24) + 512)) {
    goto LABEL_37;
  }
  if (*a2 == 2)
  {
    if (!sub_2229E4810(a1, 1, 0))
    {
      uint64_t v23 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24) {
        v24(3, "%s:%i Failed to set eSE to virtual mode", "_NFDriverSetSecureElementRouting", 4971);
      }
      dispatch_get_specific(*v23);
      int v9 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        uint32_t v26 = "_NFDriverSetSecureElementRouting";
        __int16 v27 = 1024;
        int v28 = 4971;
        uint64_t v11 = "%{public}s:%i Failed to set eSE to virtual mode";
        goto LABEL_52;
      }
      return result;
    }
    goto LABEL_37;
  }
  if (*a2 != 1 || sub_2229E4810(a1, 1, 2u))
  {
LABEL_37:
    if (a2[1] != 2 || sub_2229E4810(a1, 4, 0)) {
      return 1;
    }
    __int16 v19 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20) {
      v20(3, "%s:%i Failed to set HOST to virtual mode", "_NFDriverSetSecureElementRouting", 4986);
    }
    dispatch_get_specific(*v19);
    int v9 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      uint32_t v26 = "_NFDriverSetSecureElementRouting";
      __int16 v27 = 1024;
      int v28 = 4986;
      uint64_t v11 = "%{public}s:%i Failed to set HOST to virtual mode";
      goto LABEL_52;
    }
    return result;
  }
  __int16 v14 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  char v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15) {
    v15(3, "%s:%i Failed to set eSE to wired mode", "_NFDriverSetSecureElementRouting", 4964);
  }
  dispatch_get_specific(*v14);
  int v9 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    uint32_t v26 = "_NFDriverSetSecureElementRouting";
    __int16 v27 = 1024;
    int v28 = 4964;
    uint64_t v11 = "%{public}s:%i Failed to set eSE to wired mode";
    goto LABEL_52;
  }
  return result;
}

BOOL NFDriverIsSecureElementEnumerated(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  BOOL result = 0;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 512);
      goto LABEL_9;
    case 2:
      uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 520);
      goto LABEL_9;
    case 4:
      uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 528);
LABEL_9:
      BOOL result = v5 != 0;
      break;
    default:
      BOOL v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Unknown value: %d", "NFDriverIsSecureElementEnumerated", 5256, a2);
      }
      dispatch_get_specific(*v6);
      unsigned int v8 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446722;
        int v10 = "NFDriverIsSecureElementEnumerated";
        __int16 v11 = 1024;
        int v12 = 5256;
        __int16 v13 = 1024;
        int v14 = a2;
        _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown value: %d", buf, 0x18u);
        BOOL result = 0;
      }
      break;
  }
  return result;
}

BOOL NFDriverSetSecureElementAlwaysOn(uint64_t a1, int a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v4 = (const void **)MEMORY[0x263F8C6C0];
  if (a2 && !*(unsigned char *)(a1 + 60))
  {
    int v7 = 0;
  }
  else
  {
    if (!sub_2229C699C(a1, 0, 0, 0, 0, 0, 0))
    {
      dispatch_get_specific(*v4);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(4, "%s:%i Failed to stop polling", "NFDriverSetSecureElementAlwaysOn", 5272);
      }
      dispatch_get_specific(*v4);
      BOOL v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverSetSecureElementAlwaysOn";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5272;
        _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop polling", buf, 0x12u);
      }
    }
    int v7 = 1;
  }
  dispatch_get_specific(*v4);
  unsigned int v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8) {
    v8(6, "%s:%i type=0x%x", "_Async_NFDriverSetSEAlwaysOn", 3315, a2);
  }
  dispatch_get_specific(*v4);
  int v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_Async_NFDriverSetSEAlwaysOn";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3315;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = a2;
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i type=0x%x", buf, 0x18u);
  }
  int v10 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v10[2] + 8));
  uint64_t v11 = v10[2];
  ++*(void *)v11;
  pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
  int v12 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E519C;
  *(void *)&uint8_t buf[24] = &unk_26463B810;
  int v34 = a2;
  uint64_t v32 = a1;
  int v33 = v10;
  dispatch_async_and_wait(v12, buf);
  uint64_t v13 = sub_2229BFAD8(v10);
  if (v13)
  {
    dispatch_get_specific(*v4);
    int v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14) {
      v14(3, "%s:%i status=0x%04llX", "NFDriverSetSecureElementAlwaysOn", 5278, *v10);
    }
    dispatch_get_specific(*v4);
    uint64_t v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *v10;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverSetSecureElementAlwaysOn";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5278;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v16;
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_2229BF93C((void **)v10);
    __int16 v30 = 0;
    BOOL v17 = sub_2229C8D00(a1, 0, 0, 0, &v30, 0);
    int v18 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229C31BC;
    *(void *)&uint8_t buf[24] = &unk_26463ADD8;
    uint64_t v32 = a1;
    dispatch_async(v18, buf);
    if (v17)
    {
      if (v30 == 44 || v30 == 34) {
        NFDriverSimulateCrash(a1, 57005, (uint64_t)"NFDriverSetSecureElementAlwaysOn: CRC error or response timeout");
      }
      return v13 == 0;
    }
    dispatch_get_specific(*v4);
    __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21) {
      v21(5, "%s:%i Get stack breadcrumb failed", "NFDriverSetSecureElementAlwaysOn", 5285);
    }
    dispatch_get_specific(*v4);
    __int16 v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverSetSecureElementAlwaysOn";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5285;
      uint64_t v23 = "%{public}s:%i Get stack breadcrumb failed";
      __int16 v24 = v22;
      os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
LABEL_43:
      _os_log_impl(&dword_2229A5000, v24, v25, v23, buf, 0x12u);
    }
  }
  else
  {
    sub_2229BF93C((void **)v10);
    if ((a2 & 1) == 0) {
      sub_2229CE298(a1, 1);
    }
    if (v7)
    {
      unsigned int v19 = *(_DWORD *)(a1 + 36);
      int v20 = *(unsigned __int8 *)(a1 + 60);
      if (!v19)
      {
        if (*(unsigned char *)(a1 + 60))
        {
          int v20 = 1;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 32)) {
            return v13 == 0;
          }
          int v20 = 0;
        }
      }
      int v26 = *(unsigned char *)(a1 + 62) ? 1 : 2;
      if (!sub_2229C699C(a1, *(_DWORD *)(a1 + 32), v19, v20 != 0, 0, *(unsigned __int8 *)(a1 + 61), v26))
      {
        dispatch_get_specific(*v4);
        __int16 v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27) {
          v27(4, "%s:%i Failed to restore discoverty configuration", "NFDriverSetSecureElementAlwaysOn", 5307);
        }
        dispatch_get_specific(*v4);
        int v28 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "NFDriverSetSecureElementAlwaysOn";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5307;
          uint64_t v23 = "%{public}s:%i Failed to restore discoverty configuration";
          __int16 v24 = v28;
          os_log_type_t v25 = OS_LOG_TYPE_ERROR;
          goto LABEL_43;
        }
      }
    }
  }
  return v13 == 0;
}

BOOL sub_2229CE298(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i enable=%d", "_NFDriverSetStandbyMode", 4019, a2);
  }
  dispatch_get_specific(*v4);
  BOOL v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_NFDriverSetStandbyMode";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4019;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = a2;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable=%d", buf, 0x18u);
  }
  dispatch_get_specific(*v4);
  int v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7) {
    v7(6, "%s:%i mode=0x%x", "_Async_NFDriverSetStandbyMode", 970, a2);
  }
  dispatch_get_specific(*v4);
  unsigned int v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_Async_NFDriverSetStandbyMode";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 970;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = a2;
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i mode=0x%x", buf, 0x18u);
  }
  int v9 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v9[2] + 8));
  uint64_t v10 = v9[2];
  ++*(void *)v10;
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
  uint64_t v11 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E5324;
  *(void *)&uint8_t buf[24] = &unk_26463B830;
  int v25 = a2;
  uint64_t v23 = a1;
  __int16 v24 = v9;
  dispatch_async_and_wait(v11, buf);
  uint64_t v12 = sub_2229BFAD8(v9);
  if (v12)
  {
    dispatch_get_specific(*v4);
    uint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i status=0x%04llX", "_NFDriverSetStandbyMode", 4024, *v9);
    }
    dispatch_get_specific(*v4);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *v9;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverSetStandbyMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4024;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v15;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_2229BF93C((void **)v9);
    __int16 v21 = 0;
    BOOL v16 = sub_2229C8D00(a1, 0, 0, 0, &v21, 0);
    BOOL v17 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_2229C31BC;
    *(void *)&uint8_t buf[24] = &unk_26463ADD8;
    uint64_t v23 = a1;
    dispatch_async(v17, buf);
    if (v16)
    {
      if (v21 == 44 || v21 == 34) {
        NFDriverSimulateCrash(a1, 57005, (uint64_t)"_NFDriverSetStandbyMode: CRC error or response timeout");
      }
    }
    else
    {
      dispatch_get_specific(*v4);
      int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18) {
        v18(5, "%s:%i Get stack breadcrumb failed", "_NFDriverSetStandbyMode", 4031);
      }
      dispatch_get_specific(*v4);
      unsigned int v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverSetStandbyMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4031;
        _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
      }
    }
  }
  else
  {
    sub_2229BF93C((void **)v9);
  }
  return v12 == 0;
}

uint64_t NFDriverSetEmbeddedSecureElementPower(uint64_t a1, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v10[0] = 0;
  v10[1] = 0;
  int v11 = 0;
  int v9 = 0;
  unint64_t v8 = 6;
  int v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i eSE, enabled=%d", "NFDriverSetEmbeddedSecureElementPower", 5324, a2);
  }
  dispatch_get_specific(*v4);
  BOOL v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v13 = "NFDriverSetEmbeddedSecureElementPower";
    __int16 v14 = 1024;
    int v15 = 5324;
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i eSE, enabled=%d", buf, 0x18u);
  }
  if (!a2) {
    return NFDriverSetConfiguration(a1, (unsigned __int8 *)v10, &v8);
  }
  LODWORD(v8) = 1;
  uint64_t result = NFDriverSetConfiguration(a1, (unsigned __int8 *)v10, &v8);
  if (result)
  {
    usleep(0x7D0u);
    return 1;
  }
  return result;
}

uint64_t NFDriverSecureElementGetResponseStatus(void *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >= 2) {
    return bswap32(*(unsigned __int16 *)(v1 + *a1 - 2)) >> 16;
  }
  else {
    return 0;
  }
}

uint64_t NFDriverSecureElementSendCommand(uint64_t a1, unsigned int a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, uint64_t a8)
{
  return NFDriverSecureElementSendCommandToOS(a1, a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t NFDriverSecureElementSendCommandToOS(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, uint64_t a9)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (a9)
  {
    unint64_t v16 = *(void *)(a9 + 8);
    if (v16 > 0xFF)
    {
      if (v16 >> 16)
      {
        int v38 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          int v40 = (void (*)(uint64_t, const char *, ...))Logger;
          __int16 v41 = __error();
          int v42 = strerror(*v41);
          __int16 v43 = __error();
          v40(3, "%s:%i \"%s\" errno=%d Payload length overflow error. ", "NFDriverSecureElementSendCommandToOS", 5381, v42, *v43);
        }
        dispatch_get_specific(*v38);
        uint64_t v31 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        int v44 = __error();
        __int16 v45 = strerror(*v44);
        int v46 = *__error();
        *(_DWORD *)buf = 136446978;
        int v50 = "NFDriverSecureElementSendCommandToOS";
        __int16 v51 = 1024;
        int v52 = 5381;
        __int16 v53 = 2080;
        int v54 = v45;
        __int16 v55 = 1024;
        int v56 = v46;
        uint64_t v35 = "%{public}s:%i \"%s\" errno=%d Payload length overflow error. ";
        goto LABEL_23;
      }
      uint64_t v48 = a1;
      int v17 = v16 + 8;
    }
    else
    {
      uint64_t v48 = a1;
      int v17 = v16 + 6;
    }
  }
  else
  {
    uint64_t v48 = a1;
    int v17 = 5;
  }
  uint64_t v18 = (unsigned __int8 **)NFDataCreateWithLength();
  if (v18)
  {
    unsigned int v19 = v18;
    unsigned int v47 = a2;
    unsigned __int8 v20 = a8;
    __int16 v21 = *v18;
    *__int16 v21 = a4;
    v21[1] = a5;
    v21[2] = a6;
    v21[3] = a7;
    if (a9)
    {
      unint64_t v22 = *(void *)(a9 + 8);
      if (v22 < 0x100)
      {
        uint64_t v23 = 5;
        uint64_t v24 = 4;
LABEL_17:
        v21[v24] = v22;
        memcpy(&v21[v23], *(const void **)a9, *(void *)(a9 + 8));
        goto LABEL_18;
      }
      if (!(v22 >> 16))
      {
        unsigned char v21[4] = 0;
        v21[5] = BYTE1(v22);
        uint64_t v23 = 7;
        uint64_t v24 = 6;
        goto LABEL_17;
      }
    }
LABEL_18:
    v21[v17 - 1] = v20;
    uint64_t v36 = NFDriverSecureElementTransceive(v48, v47, a3, v19, 0, 0);
    NFDataRelease();
    return v36;
  }
  int v25 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v26 = NFLogGetLogger();
  if (v26)
  {
    __int16 v27 = (void (*)(uint64_t, const char *, ...))v26;
    int v28 = __error();
    uint64_t v29 = strerror(*v28);
    __int16 v30 = __error();
    v27(3, "%s:%i \"%s\" errno=%d Unable to allocate memory for capdu. ", "NFDriverSecureElementSendCommandToOS", 5388, v29, *v30);
  }
  dispatch_get_specific(*v25);
  uint64_t v31 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    uint64_t v32 = __error();
    int v33 = strerror(*v32);
    int v34 = *__error();
    *(_DWORD *)buf = 136446978;
    int v50 = "NFDriverSecureElementSendCommandToOS";
    __int16 v51 = 1024;
    int v52 = 5388;
    __int16 v53 = 2080;
    int v54 = v33;
    __int16 v55 = 1024;
    int v56 = v34;
    uint64_t v35 = "%{public}s:%i \"%s\" errno=%d Unable to allocate memory for capdu. ";
LABEL_23:
    _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, v35, buf, 0x22u);
  }
  return 0;
}

uint64_t NFDriverSecureElementTransceive(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, int *a5, char a6)
{
  uint64_t v203 = *MEMORY[0x263EF8340];
  memset(v189, 0, sizeof(v189));
  int v190 = 0;
  if (*(unsigned char *)(*(void *)(a1 + 24) + 739))
  {
    int v7 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i SE in recovery", "NFDriverSecureElementTransceive", 7170);
    }
    dispatch_get_specific(*v7);
    int v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7170;
      uint64_t v10 = "%{public}s:%i SE in recovery";
LABEL_6:
      int v11 = v9;
      uint32_t v12 = 18;
LABEL_7:
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if ((NFDriverGetControllerInfo(a1, (uint64_t)v189) & 1) == 0)
  {
LABEL_163:
    if (a5)
    {
      uint64_t v13 = 0;
      int v14 = 1;
      goto LABEL_165;
    }
    return 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 24) + 576) & 2) == 0)
  {
    uint64_t v20 = sub_2229D6CD0(a1, a2);
    if ((sub_2229B70D8(v20) & 1) == 0)
    {
      uint64_t v29 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30) {
        v30(3, "%s:%i Can't send to OS %d. Not available.", "NFDriverSecureElementTransceive", 7183, a3);
      }
      dispatch_get_specific(*v29);
      uint64_t v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7183;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = a3;
        uint64_t v10 = "%{public}s:%i Can't send to OS %d. Not available.";
        int v11 = v31;
        uint32_t v12 = 24;
        goto LABEL_7;
      }
      goto LABEL_8;
    }
  }
  uint64_t v21 = sub_2229D6CD0(a1, a2);
  if (v21 && *(void *)(v21 + 8))
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 24) + 568);
    if ((v22 & 0x10) != 0)
    {
      if (byte_26ABD841C)
      {
        uint64_t v23 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v24) {
          v24(6, "%s:%i [C-APDU>] REDACTED %ld bytes", "NFDriverSecureElementTransceive", 7208, a4[1]);
        }
        dispatch_get_specific(*v23);
        int v25 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = a4[1];
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7208;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&unsigned char buf[20] = v26;
          _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [C-APDU>] REDACTED %ld bytes", buf, 0x1Cu);
        }
      }
      else
      {
        char v174 = *(void *)(*(void *)(a1 + 24) + 568);
        uint64_t v176 = a3;
        v173 = a5;
        char v172 = a6;
        switch((int)a3)
        {
          case 0:
            long long v200 = 0u;
            memset(buf, 0, sizeof(buf));
            unint64_t v32 = (unint64_t)a4[1];
            size_t v179 = *a4;
            int v33 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v184 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v33);
            int v34 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v35 = a4[1];
              *(_DWORD *)uint64_t v191 = 136315906;
              unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              __int16 v193 = 1024;
              int v194 = 7199;
              __int16 v195 = 2082;
              int v196 = "[C-APDU>]";
              __int16 v197 = 2048;
              double v198 = v35;
              _os_log_impl(&dword_2229A5000, v34, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v184) {
              v184(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7199, "[C-APDU>]", a4[1]);
            }
            if (v32)
            {
              uint64_t v36 = 0;
              do
              {
                unint64_t v37 = 0;
                int v38 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v36)];
                do
                {
                  unint64_t v39 = v37 + 1;
                  unint64_t v40 = v37 + 1 + v36;
                  int v41 = sprintf(v38, "0x%02X ", v179[v36 + v37]);
                  if (v37 > 6) {
                    break;
                  }
                  v38 += v41;
                  ++v37;
                }
                while (v40 < v32);
                dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                int v42 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v191 = 136446210;
                  unint64_t v192 = buf;
                  _os_log_impl(&dword_2229A5000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v184) {
                  v184(6, "%s", (const char *)buf);
                }
                v36 += v39;
              }
              while (v40 < v32);
            }
            goto LABEL_89;
          case 1:
            long long v200 = 0u;
            memset(buf, 0, sizeof(buf));
            unint64_t v43 = (unint64_t)a4[1];
            v180 = *a4;
            int v44 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v185 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v44);
            __int16 v45 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              int v46 = a4[1];
              *(_DWORD *)uint64_t v191 = 136315906;
              unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              __int16 v193 = 1024;
              int v194 = 7205;
              __int16 v195 = 2082;
              int v196 = "[C-APDU UICC>]";
              __int16 v197 = 2048;
              double v198 = v46;
              _os_log_impl(&dword_2229A5000, v45, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v185) {
              v185(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7205, "[C-APDU UICC>]", a4[1]);
            }
            if (v43)
            {
              uint64_t v47 = 0;
              do
              {
                unint64_t v48 = 0;
                __int16 v49 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v47)];
                do
                {
                  unint64_t v50 = v48 + 1;
                  unint64_t v51 = v48 + 1 + v47;
                  int v52 = sprintf(v49, "0x%02X ", v180[v47 + v48]);
                  if (v48 > 6) {
                    break;
                  }
                  v49 += v52;
                  ++v48;
                }
                while (v51 < v43);
                dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                __int16 v53 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v191 = 136446210;
                  unint64_t v192 = buf;
                  _os_log_impl(&dword_2229A5000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v185) {
                  v185(6, "%s", (const char *)buf);
                }
                v47 += v50;
              }
              while (v51 < v43);
            }
            goto LABEL_89;
          case 2:
            long long v200 = 0u;
            memset(buf, 0, sizeof(buf));
            unint64_t v54 = (unint64_t)a4[1];
            uint64_t v181 = *a4;
            __int16 v55 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            unint64_t v186 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v55);
            int v56 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v57 = a4[1];
              *(_DWORD *)uint64_t v191 = 136315906;
              unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              __int16 v193 = 1024;
              int v194 = 7201;
              __int16 v195 = 2082;
              int v196 = "[C-APDU System>]";
              __int16 v197 = 2048;
              double v198 = v57;
              _os_log_impl(&dword_2229A5000, v56, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v186) {
              v186(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7201, "[C-APDU System>]", a4[1]);
            }
            if (v54)
            {
              uint64_t v58 = 0;
              do
              {
                unint64_t v59 = 0;
                int v60 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v58)];
                do
                {
                  unint64_t v61 = v59 + 1;
                  unint64_t v62 = v59 + 1 + v58;
                  int v63 = sprintf(v60, "0x%02X ", v181[v58 + v59]);
                  if (v59 > 6) {
                    break;
                  }
                  v60 += v63;
                  ++v59;
                }
                while (v62 < v54);
                dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                uint64_t v64 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v191 = 136446210;
                  unint64_t v192 = buf;
                  _os_log_impl(&dword_2229A5000, v64, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v186) {
                  v186(6, "%s", (const char *)buf);
                }
                v58 += v61;
              }
              while (v62 < v54);
            }
            goto LABEL_89;
          case 3:
            long long v200 = 0u;
            memset(buf, 0, sizeof(buf));
            unint64_t v65 = (unint64_t)a4[1];
            size_t v182 = *a4;
            uint64_t v66 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            v187 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v66);
            __int16 v67 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v68 = a4[1];
              *(_DWORD *)uint64_t v191 = 136315906;
              unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              __int16 v193 = 1024;
              int v194 = 7203;
              __int16 v195 = 2082;
              int v196 = "[C-APDU Guest>]";
              __int16 v197 = 2048;
              double v198 = v68;
              _os_log_impl(&dword_2229A5000, v67, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v187) {
              v187(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7203, "[C-APDU Guest>]", a4[1]);
            }
            if (v65)
            {
              uint64_t v69 = 0;
              do
              {
                unint64_t v70 = 0;
                char v71 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v69)];
                do
                {
                  unint64_t v72 = v70 + 1;
                  unint64_t v73 = v70 + 1 + v69;
                  int v74 = sprintf(v71, "0x%02X ", v182[v69 + v70]);
                  if (v70 > 6) {
                    break;
                  }
                  v71 += v74;
                  ++v70;
                }
                while (v73 < v65);
                dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                long long v75 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v191 = 136446210;
                  unint64_t v192 = buf;
                  _os_log_impl(&dword_2229A5000, v75, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v187) {
                  v187(6, "%s", (const char *)buf);
                }
                v69 += v72;
              }
              while (v73 < v65);
            }
LABEL_89:
            a5 = v173;
            LOBYTE(v22) = v174;
            a3 = v176;
            a6 = v172;
            break;
          default:
            break;
        }
      }
    }
    unint64_t v76 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200406E52F545uLL);
    if (v76)
    {
      __int16 v77 = v76;
      *unint64_t v76 = 11319;
      *((_DWORD *)v76 + 2) = 666;
      v76[2] = a1;
      int v78 = (unsigned __int8 *)malloc_type_calloc(0x2C37uLL, 1uLL, 0x100004077774924uLL);
      if (v78)
      {
        uint64_t v79 = v78;
        uint64_t v80 = *v77;
        unint64_t v81 = malloc_type_calloc(1uLL, 0x30uLL, 0x101004089CF3E64uLL);
        if (v81)
        {
          char v175 = v22;
          v188 = v77;
          v81[40] = a6;
          *((_DWORD *)v81 + 2) = a4[1];
          *(void *)unint64_t v81 = *a4;
          *((_DWORD *)v81 + 6) = v80;
          long long v178 = (char *)v79;
          *((void *)v81 + 2) = v79;
          if (a3 <= 4) {
            *((_DWORD *)v81 + 9) = dword_2229E82E4[(int)a3];
          }
          uint64_t v177 = a3;
          v183 = v81;
          int v82 = 1;
          while (1)
          {
            sub_2229C382C(a1);
            unint64_t v83 = sub_2229BF5F0();
            pthread_mutex_lock((pthread_mutex_t *)(v83[2] + 8));
            uint64_t v84 = v83[2];
            ++*(void *)v84;
            pthread_mutex_unlock((pthread_mutex_t *)(v84 + 8));
            v83[1] = (uint64_t)v188;
            int v85 = *(NSObject **)(*(void *)(a1 + 24) + 544);
            *(void *)buf = MEMORY[0x263EF8330];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = sub_2229E5ADC;
            *(void *)&uint8_t buf[24] = &unk_26463B8B0;
            int v202 = a2;
            *(void *)&long long v200 = a1;
            *((void *)&v200 + 1) = v183;
            v201 = v83;
            dispatch_async_and_wait(v85, buf);
            uint64_t v86 = sub_2229BFAD8(v83);
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536));
            if (!v86)
            {
              sub_2229BF93C((void **)v83);
              int v101 = v188;
              uint64_t v102 = v178;
              if ((v175 & 0x10) != 0)
              {
                if (byte_26ABD841C)
                {
                  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                  long long v103 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v103) {
                    v103(6, "%s:%i [R-APDU<] REDACTED %ld bytes", "NFDriverSecureElementTransceive", 7356, *v188);
                  }
                  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                  long long v104 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v105 = *v188;
                    *(_DWORD *)buf = 136446722;
                    *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 7356;
                    *(_WORD *)&buf[18] = 2048;
                    *(void *)&unsigned char buf[20] = v105;
                    _os_log_impl(&dword_2229A5000, v104, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [R-APDU<] REDACTED %ld bytes", buf, 0x1Cu);
                  }
                }
                else
                {
                  switch((int)a3)
                  {
                    case 0:
                      long long v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      unint64_t v115 = *v188;
                      uint64_t v116 = (const void **)MEMORY[0x263F8C6C0];
                      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                      __int16 v117 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v116);
                      unsigned int v118 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                      {
                        __int16 v119 = (unsigned __int8 *)*v188;
                        *(_DWORD *)uint64_t v191 = 136315906;
                        unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        __int16 v193 = 1024;
                        int v194 = 7347;
                        __int16 v195 = 2082;
                        int v196 = "[R-APDU<]";
                        __int16 v197 = 2048;
                        double v198 = v119;
                        _os_log_impl(&dword_2229A5000, v118, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v117) {
                        v117(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7347, "[R-APDU<]", *v188);
                      }
                      if (v115)
                      {
                        uint64_t v120 = 0;
                        do
                        {
                          unint64_t v121 = 0;
                          int v122 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v120)];
                          __int16 v123 = &v102[v120];
                          do
                          {
                            unint64_t v124 = v121 + 1;
                            unint64_t v125 = v121 + 1 + v120;
                            int v126 = sprintf(v122, "0x%02X ", v123[v121]);
                            if (v121 > 6) {
                              break;
                            }
                            v122 += v126;
                            ++v121;
                          }
                          while (v125 < v115);
                          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                          __int16 v127 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint64_t v191 = 136446210;
                            unint64_t v192 = buf;
                            _os_log_impl(&dword_2229A5000, v127, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v117) {
                            v117(6, "%s", (const char *)buf);
                          }
                          v120 += v124;
                          uint64_t v102 = v178;
                        }
                        while (v125 < v115);
                      }
                      goto LABEL_226;
                    case 1:
                      long long v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      unint64_t v128 = *v188;
                      __int16 v129 = (const void **)MEMORY[0x263F8C6C0];
                      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                      int v130 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v129);
                      __int16 v131 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                      {
                        int v132 = (unsigned __int8 *)*v188;
                        *(_DWORD *)uint64_t v191 = 136315906;
                        unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        __int16 v193 = 1024;
                        int v194 = 7353;
                        __int16 v195 = 2082;
                        int v196 = "[R-APDU UICC<]";
                        __int16 v197 = 2048;
                        double v198 = v132;
                        _os_log_impl(&dword_2229A5000, v131, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v130) {
                        v130(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7353, "[R-APDU UICC<]", *v188);
                      }
                      if (v128)
                      {
                        uint64_t v133 = 0;
                        do
                        {
                          unint64_t v134 = 0;
                          uint64_t v135 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v133)];
                          uint64_t v136 = &v102[v133];
                          do
                          {
                            unint64_t v137 = v134 + 1;
                            unint64_t v138 = v134 + 1 + v133;
                            int v139 = sprintf(v135, "0x%02X ", v136[v134]);
                            if (v134 > 6) {
                              break;
                            }
                            v135 += v139;
                            ++v134;
                          }
                          while (v138 < v128);
                          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                          uint64_t v140 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint64_t v191 = 136446210;
                            unint64_t v192 = buf;
                            _os_log_impl(&dword_2229A5000, v140, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v130) {
                            v130(6, "%s", (const char *)buf);
                          }
                          v133 += v137;
                          uint64_t v102 = v178;
                        }
                        while (v138 < v128);
                      }
                      goto LABEL_226;
                    case 2:
                      long long v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      unint64_t v141 = *v188;
                      v142 = (const void **)MEMORY[0x263F8C6C0];
                      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                      v143 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v142);
                      int v144 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                      {
                        uint64_t v145 = (unsigned __int8 *)*v188;
                        *(_DWORD *)uint64_t v191 = 136315906;
                        unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        __int16 v193 = 1024;
                        int v194 = 7349;
                        __int16 v195 = 2082;
                        int v196 = "[R-APDU System<]";
                        __int16 v197 = 2048;
                        double v198 = v145;
                        _os_log_impl(&dword_2229A5000, v144, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v143) {
                        v143(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7349, "[R-APDU System<]", *v188);
                      }
                      if (v141)
                      {
                        uint64_t v146 = 0;
                        do
                        {
                          unint64_t v147 = 0;
                          unint64_t v148 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v146)];
                          uint64_t v149 = &v102[v146];
                          do
                          {
                            unint64_t v150 = v147 + 1;
                            unint64_t v151 = v147 + 1 + v146;
                            int v152 = sprintf(v148, "0x%02X ", v149[v147]);
                            if (v147 > 6) {
                              break;
                            }
                            v148 += v152;
                            ++v147;
                          }
                          while (v151 < v141);
                          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                          int v153 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint64_t v191 = 136446210;
                            unint64_t v192 = buf;
                            _os_log_impl(&dword_2229A5000, v153, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v143) {
                            v143(6, "%s", (const char *)buf);
                          }
                          v146 += v150;
                          uint64_t v102 = v178;
                        }
                        while (v151 < v141);
                      }
                      goto LABEL_226;
                    case 3:
                      long long v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      unint64_t v154 = *v188;
                      int v155 = (const void **)MEMORY[0x263F8C6C0];
                      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                      double v156 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v155);
                      double v157 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
                      {
                        uint64_t v158 = (unsigned __int8 *)*v188;
                        *(_DWORD *)uint64_t v191 = 136315906;
                        unint64_t v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        __int16 v193 = 1024;
                        int v194 = 7351;
                        __int16 v195 = 2082;
                        int v196 = "[R-APDU Guest<]";
                        __int16 v197 = 2048;
                        double v198 = v158;
                        _os_log_impl(&dword_2229A5000, v157, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v156) {
                        v156(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7351, "[R-APDU Guest<]", *v188);
                      }
                      if (v154)
                      {
                        uint64_t v159 = 0;
                        do
                        {
                          unint64_t v160 = 0;
                          unint64_t v161 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v159)];
                          uint64_t v162 = &v102[v159];
                          do
                          {
                            unint64_t v163 = v160 + 1;
                            unint64_t v164 = v160 + 1 + v159;
                            int v165 = sprintf(v161, "0x%02X ", v162[v160]);
                            if (v160 > 6) {
                              break;
                            }
                            v161 += v165;
                            ++v160;
                          }
                          while (v164 < v154);
                          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                          int v166 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)uint64_t v191 = 136446210;
                            unint64_t v192 = buf;
                            _os_log_impl(&dword_2229A5000, v166, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v156) {
                            v156(6, "%s", (const char *)buf);
                          }
                          v159 += v163;
                          uint64_t v102 = v178;
                        }
                        while (v164 < v154);
                      }
LABEL_226:
                      int v101 = v188;
                      break;
                    default:
                      break;
                  }
                }
              }
              uint64_t v13 = NFDataCreateWithBytesNoCopy();
              if (v13)
              {
                if (a5) {
                  *a5 = 0;
                }
              }
              else
              {
                dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                int v167 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v167) {
                  v167(3, "%s:%i Failed to create data (%lu bytes) with result", "NFDriverSecureElementTransceive", 7362, *v101);
                }
                dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
                uint64_t v168 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v169 = *v101;
                  *(_DWORD *)buf = 136446722;
                  *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 7362;
                  *(_WORD *)&buf[18] = 2048;
                  *(void *)&unsigned char buf[20] = v169;
                  _os_log_impl(&dword_2229A5000, v168, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to create data (%lu bytes) with result", buf, 0x1Cu);
                }
                if (a5) {
                  *a5 = 3;
                }
                free(v102);
              }
              free(v183);
              free(v101);
              return v13;
            }
            uint64_t v87 = *(NSObject **)(*(void *)(a1 + 24) + 544);
            *(void *)buf = MEMORY[0x263EF8330];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = sub_2229C32DC;
            *(void *)&uint8_t buf[24] = &unk_26463ADF8;
            *(void *)&long long v200 = a1;
            dispatch_async(v87, buf);
            uint64_t v88 = *v83;
            if (*v83 == 65)
            {
              *(unsigned char *)(*(void *)(a1 + 24) + 739) = 0;
              sub_2229C9E80(a1);
              uint64_t v88 = *v83;
            }
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            int v89 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v88 != 67) {
              break;
            }
            if (v89) {
              v89(3, "%s:%i eSE power-on failed! (%d/%d)", "NFDriverSecureElementTransceive", 7258, v82, 3);
            }
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            __int16 v90 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 7258;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v82;
              *(_WORD *)&uint8_t buf[24] = 1024;
              *(_DWORD *)&buf[26] = 3;
              _os_log_impl(&dword_2229A5000, v90, OS_LOG_TYPE_ERROR, "%{public}s:%i eSE power-on failed! (%d/%d)", buf, 0x1Eu);
            }
            sub_2229BF93C((void **)v83);
            if (++v82 == 4)
            {
              free(v183);
              free(v188);
              free(v178);
              if (a5) {
                goto LABEL_9;
              }
              return 0;
            }
          }
          if (v89) {
            v89(3, "%s:%i status=0x%04llX", "NFDriverSecureElementTransceive", 7272, *v83);
          }
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          long long v106 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
          {
            uint64_t v107 = *v83;
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7272;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&unsigned char buf[20] = v107;
            _os_log_impl(&dword_2229A5000, v106, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
          }
          NFDriverDumpUART(a1);
          uint64_t v108 = *v83;
          if (*v83 == 65)
          {
            uint64_t v109 = *(void *)(a1 + 24);
            if (*(unsigned char *)(v109 + 738))
            {
              long long v110 = *(void (**)(void, uint64_t, void))(v109 + 96);
              if (v110)
              {
                v110(*(void *)(v109 + 352), a2, 0);
                uint64_t v108 = *v83;
                goto LABEL_142;
              }
            }
            goto LABEL_162;
          }
LABEL_142:
          if (v108 == 214)
          {
            if ((*(_DWORD *)(*(void *)(a1 + 24) + 732) - 14) > 4) {
              goto LABEL_162;
            }
            sub_2229C9850(a1);
            uint64_t v108 = *v83;
          }
          if ((unint64_t)(v108 - 36) <= 0x1E && ((1 << (v108 - 36)) & 0x40000101) != 0
            || v108 == 218)
          {
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            long long v113 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v113) {
              v113(3, "%s:%i Simulating HW Reset", "NFDriverSecureElementTransceive", 7320);
            }
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            long long v114 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 7320;
              _os_log_impl(&dword_2229A5000, v114, OS_LOG_TYPE_ERROR, "%{public}s:%i Simulating HW Reset", buf, 0x12u);
            }
            if (NFIsInternalBuild()
              && *v83 == 44
              && *(unsigned char *)(*(void *)(a1 + 24) + 745)
              && NFDriverCopySMBLog(a1))
            {
              NFDataRelease();
            }
            sleep(1u);
            NFDriverSimulateCrash(a1, 57005, (uint64_t)"Transceive Failure");
            goto LABEL_162;
          }
          if (v108 != 217)
          {
LABEL_162:
            sub_2229BF93C((void **)v83);
            free(v178);
            free(v183);
            free(v188);
            goto LABEL_163;
          }
          uint64_t v111 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v111 + 738))
          {
            uint64_t v112 = *v188 ? *v178 : 0;
            v170 = *(void (**)(void, uint64_t, uint64_t))(v111 + 200);
            if (v170) {
              v170(*(void *)(v111 + 456), v177, v112);
            }
          }
          sub_2229BF93C((void **)v83);
          free(v188);
          free(v183);
          free(v178);
          if (a5)
          {
            uint64_t v13 = 0;
            int v14 = 22;
            goto LABEL_165;
          }
          return 0;
        }
        __int16 v98 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v99 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v99) {
          v99(3, "%s:%i failed to allocate Tx data struct", "NFDriverSecureElementTransceive", 7234);
        }
        dispatch_get_specific(*v98);
        __int16 v100 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7234;
          _os_log_impl(&dword_2229A5000, v100, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate Tx data struct", buf, 0x12u);
        }
        if (a5) {
          *a5 = 3;
        }
        free(v77);
        long long v97 = v79;
      }
      else
      {
        __int16 v94 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v95 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v95) {
          v95(3, "%s:%i failed to allocate buffer", "NFDriverSecureElementTransceive", 7226);
        }
        dispatch_get_specific(*v94);
        __int16 v96 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7226;
          _os_log_impl(&dword_2229A5000, v96, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate buffer", buf, 0x12u);
        }
        if (a5) {
          *a5 = 3;
        }
        long long v97 = v77;
      }
      free(v97);
    }
    else
    {
      int v91 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v92 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v92) {
        v92(3, "%s:%i failed to allocate Tx context", "NFDriverSecureElementTransceive", 7216);
      }
      dispatch_get_specific(*v91);
      int v93 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7216;
        _os_log_impl(&dword_2229A5000, v93, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate Tx context", buf, 0x12u);
      }
      if (a5)
      {
        uint64_t v13 = 0;
        int v14 = 3;
        goto LABEL_165;
      }
    }
    return 0;
  }
  __int16 v27 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v28) {
    v28(3, "%s:%i No SE for transceive", "NFDriverSecureElementTransceive", 7189);
  }
  dispatch_get_specific(*v27);
  int v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverSecureElementTransceive";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7189;
    uint64_t v10 = "%{public}s:%i No SE for transceive";
    goto LABEL_6;
  }
LABEL_8:
  if (!a5) {
    return 0;
  }
LABEL_9:
  uint64_t v13 = 0;
  int v14 = 4;
LABEL_165:
  *a5 = v14;
  return v13;
}

BOOL NFDriverSecureElementSelect(uint64_t a1, unsigned int a2, uint64_t a3, _WORD *a4)
{
  return NFDriverSecureElementSelectWithOS(a1, a2, 0, a3, a4);
}

BOOL NFDriverSecureElementSelectWithOS(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  BOOL v6 = (void *)NFDriverSecureElementSendCommandToOS(a1, a2, a3, 0, 0xA4u, 4u, 0, 0, a4);
  if (v6)
  {
    unint64_t v7 = v6[1];
    if (v7 >= 2) {
      unsigned int v8 = __rev16(*(unsigned __int16 *)(v7 + *v6 - 2));
    }
    else {
      unsigned int v8 = 0;
    }
    NFDataRelease();
    if (a5) {
      *a5 = v8;
    }
    return v8 == 36864;
  }
  else
  {
    int v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to select", "NFDriverSecureElementSelectWithOS", 5438);
    }
    dispatch_get_specific(*v9);
    int v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v14 = "NFDriverSecureElementSelectWithOS";
      __int16 v15 = 1024;
      int v16 = 5438;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to select", buf, 0x12u);
    }
    BOOL result = 0;
    if (a5) {
      *a5 = 0;
    }
  }
  return result;
}

BOOL NFDriverSecureElementGetCometATR(uint64_t a1, uint64_t a2, const char *a3, void *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v8 = sub_2229D6CD0(a1, a2);
  if (!v8 || (uint64_t v9 = *(void *)(v8 + 8)) == 0)
  {
    uint64_t v29 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(4, "%s:%i Could not locate SE", "NFDriverSecureElementGetCometATR", 5457);
    }
    dispatch_get_specific(*v29);
    uint64_t v31 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)uint64_t block = 136446466;
    *(void *)&block[4] = "NFDriverSecureElementGetCometATR";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 5457;
    unint64_t v32 = "%{public}s:%i Could not locate SE";
    goto LABEL_31;
  }
  uint64_t v10 = (const char **)malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A08D555BuLL);
  if (v10)
  {
    int v11 = v10;
    *((_DWORD *)v10 + 2) = *a4;
    *uint64_t v10 = a3;
    sub_2229C382C(a1);
    uint32_t v12 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v12[2] + 8));
    uint64_t v13 = v12[2];
    ++*(void *)v13;
    pthread_mutex_unlock((pthread_mutex_t *)(v13 + 8));
    int v14 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)uint64_t block = MEMORY[0x263EF8330];
    *(void *)&void block[8] = 0x40000000;
    *(void *)&block[16] = sub_2229E54AC;
    *(void *)&block[24] = &unk_26463B850;
    *(void *)&unsigned char block[32] = a1;
    uint64_t v42 = v9;
    unint64_t v43 = v11;
    int v44 = v12;
    dispatch_async_and_wait(v14, block);
    uint64_t v15 = sub_2229BFAD8(v12);
    BOOL v16 = v15 == 0;
    if (!v15)
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536));
      *a4 = *((unsigned int *)v11 + 2);
      uint64_t v35 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v36) {
        v36(6, "%s:%i ATR is %d bytes long : %s", "NFDriverSecureElementGetCometATR", 5522, *((_DWORD *)v11 + 2), *v11);
      }
      dispatch_get_specific(*v35);
      unint64_t v37 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        int v38 = *((_DWORD *)v11 + 2);
        unint64_t v39 = *v11;
        *(_DWORD *)uint64_t block = 136446978;
        *(void *)&block[4] = "NFDriverSecureElementGetCometATR";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 5522;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v38;
        *(_WORD *)&block[24] = 2080;
        *(void *)&block[26] = v39;
        _os_log_impl(&dword_2229A5000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ATR is %d bytes long : %s", block, 0x22u);
      }
      goto LABEL_41;
    }
    uint64_t v17 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v18) {
      v18(4, "%s:%i status=0x%04llX", "NFDriverSecureElementGetCometATR", 5474, *v12);
    }
    dispatch_get_specific(*v17);
    unsigned int v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *v12;
      *(_DWORD *)uint64_t block = 136446722;
      *(void *)&block[4] = "NFDriverSecureElementGetCometATR";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 5474;
      *(_WORD *)&block[18] = 2048;
      *(void *)&block[20] = v20;
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", block, 0x1Cu);
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536));
    uint64_t v21 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)uint64_t block = MEMORY[0x263EF8330];
    *(void *)&void block[8] = 0x40000000;
    *(void *)&block[16] = sub_2229C31BC;
    *(void *)&block[24] = &unk_26463ADD8;
    *(void *)&unsigned char block[32] = a1;
    dispatch_async(v21, block);
    uint64_t v22 = *v12;
    if (*v12 == 65)
    {
      *(unsigned char *)(*(void *)(a1 + 24) + 739) = 0;
      sub_2229C9E80(a1);
      uint64_t v23 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v23 + 738))
      {
        uint64_t v24 = *(void (**)(void, uint64_t, void))(v23 + 96);
        if (v24) {
          v24(*(void *)(v23 + 352), a2, 0);
        }
      }
      uint64_t v22 = *v12;
    }
    if (v22 == 217)
    {
      uint64_t v25 = *(void *)(a1 + 24);
      if (!*(unsigned char *)(v25 + 738)) {
        goto LABEL_41;
      }
      uint64_t v26 = *(void (**)(void, void, void))(v25 + 200);
      if (!v26) {
        goto LABEL_41;
      }
      v26(*(void *)(v25 + 456), 0, *((unsigned __int8 *)v12 + 8));
      uint64_t v22 = *v12;
    }
    if (v22 != 214) {
      goto LABEL_21;
    }
    if ((*(_DWORD *)(*(void *)(a1 + 24) + 732) - 14) <= 4)
    {
      sub_2229C9850(a1);
      uint64_t v22 = *v12;
LABEL_21:
      if (v22 == 66)
      {
        dispatch_get_specific(*v17);
        __int16 v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27) {
          v27(3, "%s:%i Simulating HW Reset", "NFDriverSecureElementGetCometATR", 5516);
        }
        dispatch_get_specific(*v17);
        int v28 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t block = 136446466;
          *(void *)&block[4] = "NFDriverSecureElementGetCometATR";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 5516;
          _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Simulating HW Reset", block, 0x12u);
        }
        NFDriverSimulateCrash(a1, 57005, (uint64_t)"Transceive Failure");
      }
    }
LABEL_41:
    free(v11);
    sub_2229BF93C((void **)v12);
    return v16;
  }
  int v33 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v34) {
    v34(3, "%s:%i Allocation failure", "NFDriverSecureElementGetCometATR", 5463);
  }
  dispatch_get_specific(*v33);
  uint64_t v31 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t block = 136446466;
    *(void *)&block[4] = "NFDriverSecureElementGetCometATR";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 5463;
    unint64_t v32 = "%{public}s:%i Allocation failure";
LABEL_31:
    _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, v32, block, 0x12u);
  }
  return 0;
}

uint64_t NFDriverTriggerDelayedWake(uint64_t a1, char a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 60) || *(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 36))
  {
    if (!sub_2229C699C(a1, 0, 0, 0, 0, 0, 0))
    {
      int v4 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to stop discovery", "NFDriverTriggerDelayedWake", 5542);
      }
      dispatch_get_specific(*v4);
      BOOL v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverTriggerDelayedWake";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5542;
        _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }
  if (!sub_2229CE298(a1, 0))
  {
    uint64_t v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    BOOL v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(3, "%s:%i Failed to disable standby mode.", "NFDriverTriggerDelayedWake", 5548);
    }
    dispatch_get_specific(*v15);
    uint64_t v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverTriggerDelayedWake";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5548;
    uint64_t v18 = "%{public}s:%i Failed to disable standby mode.";
LABEL_21:
    _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
    return 0;
  }
  uint64_t v8 = (void **)sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v8[2] + 8));
  uint64_t v9 = (char *)v8[2];
  ++*(void *)v9;
  pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
  uint64_t v10 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E5634;
  *(void *)&uint8_t buf[24] = &unk_26463B870;
  char v27 = a2;
  uint64_t v25 = a1;
  uint64_t v26 = v8;
  dispatch_async_and_wait(v10, buf);
  if (sub_2229BFAD8((uint64_t *)v8))
  {
    int v11 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint32_t v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12) {
      v12(3, "%s:%i status=0x%04llX", "NFDriverTriggerDelayedWake", 5554, *v8);
    }
    dispatch_get_specific(*v11);
    uint64_t v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = *v8;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverTriggerDelayedWake";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5554;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v14;
      _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_2229BF93C(v8);
    return 0;
  }
  sub_2229BF93C(v8);
  uint64_t v19 = 1;
  if (v7)
  {
    int v21 = *(unsigned char *)(a1 + 62) ? 1 : 2;
    if (!sub_2229C699C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v21))
    {
      uint64_t v22 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23) {
        v23(3, "%s:%i Failed to update discovery", "NFDriverTriggerDelayedWake", 5562);
      }
      dispatch_get_specific(*v22);
      uint64_t v17 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverTriggerDelayedWake";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5562;
      uint64_t v18 = "%{public}s:%i Failed to update discovery";
      goto LABEL_21;
    }
  }
  return v19;
}

BOOL NFDriverCrashNFCC(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  uint64_t v5 = v4[2];
  ++*(void *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  int v16 = 84083105;
  __int16 v17 = a2;
  uint64_t v15 = 0;
  BOOL v6 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Crashing in %d ms", "NFDriverCrashNFCC", 5578, a2);
  }
  dispatch_get_specific(*v6);
  uint64_t v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v19 = "NFDriverCrashNFCC";
    __int16 v20 = 1024;
    int v21 = 5578;
    __int16 v22 = 1024;
    LODWORD(v23) = a2;
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Crashing in %d ms", buf, 0x18u);
  }
  uint64_t v15 = (void **)sub_2229C3DD8(6u, &v16);
  uint64_t v9 = sub_2229C39B8(a1, 37025, (uint64_t)v15, 0);
  uint64_t v10 = sub_2229BFAD8(v9);
  if (v10)
  {
    dispatch_get_specific(*v6);
    int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(3, "%s:%i status=0x%04llX", "NFDriverCrashNFCC", 5583, *v9);
    }
    dispatch_get_specific(*v6);
    uint32_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *v9;
      *(_DWORD *)buf = 136446722;
      uint64_t v19 = "NFDriverCrashNFCC";
      __int16 v20 = 1024;
      int v21 = 5583;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_2229C3E74(&v15);
    sub_2229BF93C((void **)v9);
  }
  else
  {
    sub_2229BF93C((void **)v9);
    sub_2229C3E74(&v15);
  }
  return v10 == 0;
}

BOOL NFDriverEnableHeadlessTestMode(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  __int16 v6 = sub_2229C5B30(a1, 27);
  v15[0] = HIBYTE(v6);
  v15[1] = v6;
  __int16 v16 = 1;
  if (a2)
  {
    uint64_t v7 = 429496730 * a3;
    if (BYTE4(v7) >= 0x5Bu)
    {
      int v11 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Interval must be < 900 ms", "NFDriverEnableHeadlessTestMode", 5612);
      }
      dispatch_get_specific(*v11);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverEnableHeadlessTestMode";
        __int16 v18 = 1024;
        int v19 = 5612;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Interval must be < 900 ms", buf, 0x12u);
      }
      return 0;
    }
    HIBYTE(v16) = BYTE4(v7) | 0x80;
  }
  uint64_t v8 = sub_2229C3DD8(4u, v15);
  *(void *)buf = v8;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = sub_2229C39B8(a1, 37025, (uint64_t)v8, 0);
  BOOL v10 = sub_2229BFAD8(v9) == 0;
  sub_2229BF93C((void **)v9);
  sub_2229C3E74((void ***)buf);
  return v10;
}

BOOL NFDriverToggleGPIO(uint64_t a1, char a2)
{
  __int16 v4 = sub_2229C5B30(a1, 28);
  v10[0] = HIBYTE(v4);
  v10[1] = v4;
  void v10[2] = 1;
  v10[3] = ((a2 & 4) != 0) | (16 * a2) & 0x8F;
  uint64_t v5 = sub_2229C3DD8(4u, v10);
  uint64_t v9 = (void **)v5;
  if (!v5) {
    return 0;
  }
  __int16 v6 = sub_2229C39B8(a1, 37025, (uint64_t)v5, 0);
  BOOL v7 = sub_2229BFAD8(v6) == 0;
  sub_2229BF93C((void **)v6);
  sub_2229C3E74(&v9);
  return v7;
}

uint64_t NFDriverSerialDebugLastMessage()
{
  return NFHardwareSerialDebugLastMessage();
}

uint64_t NFDriverDebugDumpMemory(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
  if (a2)
  {
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Unknown type: %d", "NFDriverDebugDumpMemory", 5735, a2);
    }
    dispatch_get_specific(*v3);
    __int16 v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverDebugDumpMemory";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5735;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = a2;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown type: %d", buf, 0x18u);
    }
    int v7 = 0;
  }
  else
  {
    int v7 = 1;
  }
  uint64_t v8 = (void **)sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v8[2] + 8));
  uint64_t v9 = (char *)v8[2];
  ++*(void *)v9;
  pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
  v8[1] = &v16;
  BOOL v10 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229E58A0;
  *(void *)&uint8_t buf[24] = &unk_26463B890;
  __int16 v18 = v8;
  uint64_t v19 = a1;
  int v20 = v7;
  dispatch_async_and_wait(v10, buf);
  if (sub_2229BFAD8((uint64_t *)v8))
  {
    dispatch_get_specific(*v3);
    int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(3, "%s:%i status=0x%04llX", "NFDriverDebugDumpMemory", 5741, *v8);
    }
    dispatch_get_specific(*v3);
    uint32_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *v8;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverDebugDumpMemory";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5741;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v13;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_2229BF93C(v8);
    if (*v8 != (void *)30)
    {
      int v14 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229C31BC;
      *(void *)&uint8_t buf[24] = &unk_26463ADD8;
      __int16 v18 = (void **)a1;
      dispatch_async(v14, buf);
    }
    return 0;
  }
  else
  {
    sub_2229BF93C(v8);
    return v16;
  }
}

void *sub_2229D1CA4(uint64_t a1, uint64_t a2)
{
  __int16 v4 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  uint64_t v5 = v4[2];
  ++*(void *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  __int16 v6 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  v8[2] = sub_2229D1D5C;
  v8[3] = &unk_26463B390;
  v8[4] = a2;
  v8[5] = v4;
  dispatch_async_and_wait(v6, v8);
  return v4;
}

void sub_2229D1D5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unsigned int v3 = (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(a1 + 40));
    if (v3 == 13) {
      return;
    }
  }
  else
  {
    unsigned int v3 = 1;
  }
  sub_2229BF9CC(*(void **)(a1 + 40), v3);
  __int16 v4 = *(void ***)(a1 + 40);

  sub_2229BF93C(v4);
}

uint64_t sub_2229D1DD0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = a3;
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 568);
  if ((v6 & 0x10) != 0)
  {
    uint64_t v39 = a2;
    uint64_t v40 = a1;
    long long v55 = 0u;
    memset(v54, 0, sizeof(v54));
    unint64_t v7 = *(unsigned int *)(a3 + 40);
    uint64_t v43 = *(void *)(a3 + 32);
    uint64_t v8 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v8);
    BOOL v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(unsigned int *)(v5 + 40);
      *(_DWORD *)buf = 136315906;
      uint64_t v47 = (uint8_t *)"NFDriverRemoteDevTransceive";
      __int16 v48 = 1024;
      int v49 = 5797;
      __int16 v50 = 2082;
      unint64_t v51 = "[Reader C-APDU>]";
      __int16 v52 = 2048;
      uint64_t v53 = v11;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
    }
    char v41 = v6;
    if (Logger) {
      Logger(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevTransceive", 5797, "[Reader C-APDU>]", *(unsigned int *)(v5 + 40));
    }
    uint64_t v42 = v5;
    if (v7)
    {
      uint64_t v12 = 0;
      do
      {
        unint64_t v13 = 0;
        int v14 = (char *)&v54[__sprintf_chk((char *)v54, 0, 0x30uLL, "%04lX: ", v12)];
        do
        {
          unint64_t v15 = v13 + 1;
          unint64_t v16 = v13 + 1 + v12;
          int v17 = sprintf(v14, "0x%02X ", *(unsigned __int8 *)(v43 + v12 + v13));
          if (v13 > 6) {
            break;
          }
          v14 += v17;
          ++v13;
        }
        while (v16 < v7);
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        __int16 v18 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v47 = v54;
          _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
        if (Logger) {
          Logger(6, "%s", (const char *)v54);
        }
        v12 += v15;
      }
      while (v16 < v7);
    }
    LOBYTE(v6) = v41;
    uint64_t v5 = v42;
    a2 = v39;
    a1 = v40;
  }
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 0x40000000;
  v45[2] = sub_2229D2400;
  v45[3] = &unk_26463B3B0;
  v45[4] = v5;
  *(double *)&v45[5] = a4;
  v45[6] = a1;
  v45[7] = a2;
  uint64_t v19 = sub_2229D1CA4(a1, (uint64_t)v45);
  uint64_t v20 = sub_2229BFAD8(v19);
  if (v20 > 147)
  {
    if ((unint64_t)(v20 - 150) > 0x24) {
      goto LABEL_28;
    }
    if (((1 << (v20 + 106)) & 0x590000000) == 0)
    {
      if (v20 != 150)
      {
        if (v20 == 186)
        {
          uint64_t v21 = 23;
          goto LABEL_55;
        }
LABEL_28:
        uint64_t v21 = 6;
        if (v20 == 148 || v20 == 255) {
          goto LABEL_55;
        }
        goto LABEL_30;
      }
LABEL_26:
      uint64_t v21 = 7;
      goto LABEL_55;
    }
LABEL_27:
    uint64_t v21 = 20;
    goto LABEL_55;
  }
  switch(v20)
  {
    case 12:
      uint64_t v21 = 3;
      goto LABEL_55;
    case 44:
      goto LABEL_27;
    case 145:
      goto LABEL_26;
  }
LABEL_30:
  if (*v19 == 187)
  {
    uint64_t v21 = 4;
  }
  else if (v20)
  {
    __int16 v22 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v23) {
      v23(3, "%s:%i phLibNfc_RemoteDev_Transceive failed 0x%04llx", "NFDriverRemoteDevTransceive", 5830, *v19);
    }
    dispatch_get_specific(*v22);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *v19;
      *(_DWORD *)unint64_t v54 = 136446722;
      *(void *)&v54[4] = "NFDriverRemoteDevTransceive";
      *(_WORD *)&v54[12] = 1024;
      *(_DWORD *)&v54[14] = 5830;
      *(_WORD *)&v54[18] = 2048;
      *(void *)&v54[20] = v25;
      _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Transceive failed 0x%04llx", v54, 0x1Cu);
    }
    uint64_t v21 = 1;
  }
  else
  {
    if ((v6 & 0x10) != 0)
    {
      long long v55 = 0u;
      memset(v54, 0, sizeof(v54));
      unint64_t v26 = *(unsigned int *)(v5 + 56);
      uint64_t v44 = *(void *)(v5 + 48);
      char v27 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      dispatch_get_specific(*v27);
      uint64_t v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *(unsigned int *)(v5 + 56);
        *(_DWORD *)buf = 136315906;
        uint64_t v47 = (uint8_t *)"NFDriverRemoteDevTransceive";
        __int16 v48 = 1024;
        int v49 = 5837;
        __int16 v50 = 2082;
        unint64_t v51 = "[Reader R-APDU<]";
        __int16 v52 = 2048;
        uint64_t v53 = v30;
        _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
      }
      if (v28) {
        v28(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevTransceive", 5837, "[Reader R-APDU<]", *(unsigned int *)(v5 + 56));
      }
      if (v26)
      {
        uint64_t v31 = 0;
        do
        {
          unint64_t v32 = 0;
          int v33 = (char *)&v54[__sprintf_chk((char *)v54, 0, 0x30uLL, "%04lX: ", v31)];
          do
          {
            unint64_t v34 = v32 + 1;
            unint64_t v35 = v32 + 1 + v31;
            int v36 = sprintf(v33, "0x%02X ", *(unsigned __int8 *)(v44 + v31 + v32));
            if (v32 > 6) {
              break;
            }
            v33 += v36;
            ++v32;
          }
          while (v35 < v26);
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          unint64_t v37 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v47 = v54;
            _os_log_impl(&dword_2229A5000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          }
          if (v28) {
            v28(6, "%s", (const char *)v54);
          }
          v31 += v34;
        }
        while (v35 < v26);
      }
    }
    uint64_t v21 = 0;
  }
LABEL_55:
  sub_2229BF93C((void **)v19);
  return v21;
}

uint64_t sub_2229D2400(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 32);
  sub_2229BFA30(a2, *(double *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 560);
  uint64_t v6 = *(void *)(a1 + 32);

  return MEMORY[0x270F96300](v5, v4, v6, sub_2229D246C, a2);
}

void sub_2229D246C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a2)
  {
    unint64_t v7 = a2[1];
    if (a5)
    {
      v7[14] = 0;
    }
    else if (a4)
    {
      uint64_t v8 = (void *)*((void *)v7 + 6);
      if (v8)
      {
        unsigned int v9 = *(_DWORD *)(a4 + 8);
        unsigned int v10 = v7[14];
        if (v9 >= v10) {
          size_t v11 = v10;
        }
        else {
          size_t v11 = v9;
        }
        memcpy(v8, *(const void **)a4, v11);
        v7[14] = v11;
      }
    }
    sub_2229BF9CC(a2, a5);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDeviceFelicaTransceive(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, double a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 5;
  }
  *a4 = 0;
  unsigned int v10 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (!v10)
  {
    int v17 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDeviceFelicaTransceive", 5857);
    }
    dispatch_get_specific(*v17);
    uint64_t v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "NFDriverRemoteDeviceFelicaTransceive";
      __int16 v29 = 1024;
      int v30 = 5857;
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
    }
    return 3;
  }
  size_t v11 = v10;
  if (!a3)
  {
    uint64_t v20 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21) {
      v21(3, "%s:%i No command APDU provided", "NFDriverRemoteDeviceFelicaTransceive", 5862);
    }
    dispatch_get_specific(*v20);
    __int16 v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "NFDriverRemoteDeviceFelicaTransceive";
      __int16 v29 = 1024;
      int v30 = 5862;
      _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i No command APDU provided", buf, 0x12u);
    }
    free(v11);
    return 5;
  }
  if (a3[1] <= 0x10000uLL)
  {
    uint64_t v23 = malloc_type_calloc(1uLL, 0x48uLL, 0x1010040DB589B7BuLL);
    if (v23)
    {
      uint64_t v24 = v23;
      _DWORD *v23 = 240;
      *((void *)v23 + 4) = *a3;
      v23[10] = a3[1];
      *((void *)v23 + 6) = v11;
      v23[14] = 0x10000;
      uint64_t v16 = sub_2229D1DD0(a1, a2, (uint64_t)v23, a5);
      if (v16 || (uint64_t v25 = NFDataCreateWithBytesNoCopy()) == 0) {
        free(v11);
      }
      else {
        *a4 = v25;
      }
      free(v24);
      return v16;
    }
    free(v11);
    return 3;
  }
  uint64_t v12 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13) {
    v13(3, "%s:%i Felica command is too large: %ld bytes", "NFDriverRemoteDeviceFelicaTransceive", 5868, a3[1]);
  }
  dispatch_get_specific(*v12);
  int v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = a3[1];
    *(_DWORD *)buf = 136446722;
    uint64_t v28 = "NFDriverRemoteDeviceFelicaTransceive";
    __int16 v29 = 1024;
    int v30 = 5868;
    __int16 v31 = 2048;
    uint64_t v32 = v15;
    _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Felica command is too large: %ld bytes", buf, 0x1Cu);
  }
  free(v11);
  return 8;
}

uint64_t NFDriverRemoteDeviceIso15693Transceive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 5;
  }
  *a4 = 0;
  unsigned int v10 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (!v10)
  {
    int v17 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDeviceIso15693Transceive", 5914);
    }
    dispatch_get_specific(*v17);
    uint64_t v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v29 = "NFDriverRemoteDeviceIso15693Transceive";
      __int16 v30 = 1024;
      int v31 = 5914;
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
    }
    return 3;
  }
  size_t v11 = v10;
  if (!a3)
  {
    uint64_t v20 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21) {
      v21(3, "%s:%i No command APDU provided", "NFDriverRemoteDeviceIso15693Transceive", 5919);
    }
    dispatch_get_specific(*v20);
    __int16 v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v29 = "NFDriverRemoteDeviceIso15693Transceive";
      __int16 v30 = 1024;
      int v31 = 5919;
      _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i No command APDU provided", buf, 0x12u);
    }
    free(v11);
    return 5;
  }
  if (*(void *)(a3 + 8) <= 0x10000uLL)
  {
    uint64_t v23 = malloc_type_calloc(1uLL, 0x48uLL, 0x1010040DB589B7BuLL);
    if (v23)
    {
      uint64_t v24 = v23;
      if ((**(unsigned char **)a3 & 0x40) != 0)
      {
        *((_WORD *)v23 + 4) = 0;
        int v25 = 1;
      }
      else
      {
        int v25 = 0;
      }
      _DWORD *v23 = v25;
      *((void *)v23 + 4) = *(void *)a3;
      v23[10] = *(void *)(a3 + 8);
      *((void *)v23 + 6) = v11;
      v23[14] = 0x10000;
      uint64_t v16 = sub_2229D1DD0(a1, a2, (uint64_t)v23, a5);
      if (v16 || (uint64_t v26 = NFDataCreateWithBytesNoCopy()) == 0) {
        free(v11);
      }
      else {
        *a4 = v26;
      }
      free(v24);
      return v16;
    }
    free(v11);
    return 3;
  }
  uint64_t v12 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13) {
    v13(3, "%s:%i Command is too large: %ld bytes", "NFDriverRemoteDeviceIso15693Transceive", 5925, *(void *)(a3 + 8));
  }
  dispatch_get_specific(*v12);
  int v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = *(void *)(a3 + 8);
    *(_DWORD *)buf = 136446722;
    __int16 v29 = "NFDriverRemoteDeviceIso15693Transceive";
    __int16 v30 = 1024;
    int v31 = 5925;
    __int16 v32 = 2048;
    uint64_t v33 = v15;
    _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Command is too large: %ld bytes", buf, 0x1Cu);
  }
  free(v11);
  return 8;
}

uint64_t NFDriverRemoteDeviceIso14443Transceive(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, double a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!a4) {
    return 5;
  }
  *a4 = 0;
  unsigned int v10 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (!v10)
  {
    int v17 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDeviceIso14443Transceive", 5979);
    }
    dispatch_get_specific(*v17);
    uint64_t v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "NFDriverRemoteDeviceIso14443Transceive";
      __int16 v29 = 1024;
      int v30 = 5979;
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
    }
    return 3;
  }
  size_t v11 = v10;
  if (!a3)
  {
    uint64_t v20 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21) {
      v21(3, "%s:%i No command APDU provided", "NFDriverRemoteDeviceIso14443Transceive", 5984);
    }
    dispatch_get_specific(*v20);
    __int16 v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v28 = "NFDriverRemoteDeviceIso14443Transceive";
      __int16 v29 = 1024;
      int v30 = 5984;
      _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i No command APDU provided", buf, 0x12u);
    }
    free(v11);
    return 5;
  }
  if (a3[1] <= 0x10000uLL)
  {
    uint64_t v23 = malloc_type_calloc(1uLL, 0x48uLL, 0x1010040DB589B7BuLL);
    if (v23)
    {
      uint64_t v24 = v23;
      _DWORD *v23 = 0;
      *((void *)v23 + 4) = *a3;
      v23[10] = a3[1];
      *((void *)v23 + 6) = v11;
      v23[14] = 0x10000;
      uint64_t v16 = sub_2229D1DD0(a1, a2, (uint64_t)v23, a5);
      if (v16 || (uint64_t v25 = NFDataCreateWithBytesNoCopy()) == 0) {
        free(v11);
      }
      else {
        *a4 = v25;
      }
      free(v24);
      return v16;
    }
    free(v11);
    return 3;
  }
  uint64_t v12 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13) {
    v13(3, "%s:%i Command is too large: %ld bytes", "NFDriverRemoteDeviceIso14443Transceive", 5990, a3[1]);
  }
  dispatch_get_specific(*v12);
  int v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = a3[1];
    *(_DWORD *)buf = 136446722;
    uint64_t v28 = "NFDriverRemoteDeviceIso14443Transceive";
    __int16 v29 = 1024;
    int v30 = 5990;
    __int16 v31 = 2048;
    uint64_t v32 = v15;
    _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Command is too large: %ld bytes", buf, 0x1Cu);
  }
  free(v11);
  return 8;
}

uint64_t NFDriverRemoteDevConnect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2)
  {
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 0x40000000;
    v14[2] = sub_2229D3204;
    v14[3] = &unk_26463B3D0;
    v14[4] = a3;
    v14[5] = a1;
    v14[6] = a2;
    unsigned int v3 = (void **)sub_2229D1CA4(a1, (uint64_t)v14);
    if (sub_2229BFAD8((uint64_t *)v3))
    {
      uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i phLibNfc_RemoteDev_Connect failed: 0x%04llx", "NFDriverRemoteDevConnect", 6078, *v3);
      }
      dispatch_get_specific(*v4);
      uint64_t v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        unint64_t v7 = *v3;
        *(_DWORD *)buf = 136446722;
        uint64_t v16 = "NFDriverRemoteDevConnect";
        __int16 v17 = 1024;
        int v18 = 6078;
        __int16 v19 = 2048;
        uint64_t v20 = v7;
        _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Connect failed: 0x%04llx", buf, 0x1Cu);
      }
      uint64_t v8 = *v3;
      if ((uint64_t)*v3 > 185)
      {
        if (v8 == (void *)186)
        {
          uint64_t v9 = 23;
          goto LABEL_23;
        }
        if (v8 == (void *)187)
        {
          uint64_t v9 = 4;
          goto LABEL_23;
        }
      }
      else
      {
        if (v8 == (void *)51)
        {
          uint64_t v9 = 19;
          goto LABEL_23;
        }
        if (v8 == (void *)121)
        {
          uint64_t v9 = 18;
LABEL_23:
          sub_2229BF93C(v3);
          return v9;
        }
      }
      uint64_t v9 = 1;
      goto LABEL_23;
    }
    uint64_t v9 = 0;
    goto LABEL_23;
  }
  unsigned int v10 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  size_t v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v11) {
    v11(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevConnect", 6067);
  }
  dispatch_get_specific(*v10);
  uint64_t v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v16 = "NFDriverRemoteDevConnect";
    __int16 v17 = 1024;
    int v18 = 6067;
    _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
  }
  return 5;
}

uint64_t sub_2229D3204(void *a1, uint64_t a2)
{
  *(void *)(a2 + 8) = a1[4];
  return MEMORY[0x270F962C8](*(void *)(*(void *)(a1[5] + 24) + 560), a1[6], sub_2229D3230, a2);
}

void sub_2229D3230(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a2)
  {
    if (a4 && !a5)
    {
      unint64_t v7 = (char *)a2[1];
      if ((*(_DWORD *)(a4 + 4) & 0xFFFFFFFE) == 0xA && v7 != 0) {
        sub_2229C8F68(v7, a3, a4);
      }
    }
    sub_2229BF9CC(a2, a5);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevDisconnect(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3)
    {
      int v3 = *(_DWORD *)(a1 + 40);
      unsigned int v4 = v3 - 1;
      if (v3 == 3) {
        int v5 = 7;
      }
      else {
        int v5 = 6;
      }
      if (v4 < 2) {
        int v5 = 7;
      }
    }
    else
    {
      int v5 = 5;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = sub_2229D3554;
    v17[3] = &unk_26463B3F0;
    v17[4] = a1;
    v17[5] = a2;
    int v18 = v5;
    unsigned int v10 = sub_2229D1CA4(a1, (uint64_t)v17);
    if (!sub_2229BFAD8(v10))
    {
      uint64_t v9 = 0;
      goto LABEL_31;
    }
    size_t v11 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i phLibNfc_RemoteDev_Disconnect failed: 0x%04llx", "NFDriverRemoteDevDisconnect", 6130, *v10);
    }
    dispatch_get_specific(*v11);
    unint64_t v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *v10;
      *(_DWORD *)buf = 136446722;
      uint64_t v20 = "NFDriverRemoteDevDisconnect";
      __int16 v21 = 1024;
      int v22 = 6130;
      __int16 v23 = 2048;
      uint64_t v24 = v14;
      _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Disconnect failed: 0x%04llx", buf, 0x1Cu);
    }
    uint64_t v15 = *v10;
    if (*v10 <= 120)
    {
      if (v15 == 51)
      {
        uint64_t v9 = 19;
        goto LABEL_31;
      }
      if (v15 == 58)
      {
LABEL_24:
        uint64_t v9 = 6;
LABEL_31:
        sub_2229BF93C((void **)v10);
        return v9;
      }
    }
    else
    {
      if (v15 == 121)
      {
        uint64_t v9 = 18;
        goto LABEL_31;
      }
      if (v15 == 146 || v15 == 148) {
        goto LABEL_24;
      }
    }
    uint64_t v9 = 1;
    goto LABEL_31;
  }
  uint64_t v6 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unint64_t v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7) {
    v7(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevDisconnect", 6113);
  }
  dispatch_get_specific(*v6);
  uint64_t v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "NFDriverRemoteDevDisconnect";
    __int16 v21 = 1024;
    int v22 = 6113;
    _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
  }
  return 5;
}

uint64_t sub_2229D3554(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F962D0](*(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 560), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), sub_2229D3580, a2);
}

void sub_2229D3580(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a4);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevCheckNdef(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v6 = NFSharedSignpostLog();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_2229A5000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevCheckNdef", (const char *)&unk_2229F5F33, buf, 2u);
  }
  *(void *)buf = 0;
  uint64_t v28 = buf;
  uint64_t v29 = 0x2800000000;
  uint64_t v30 = 0;
  int v31 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (a2)
  {
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 0x40000000;
    v26[2] = sub_2229D3A0C;
    v26[3] = &unk_26463B418;
    v26[4] = buf;
    v26[5] = a1;
    v26[6] = a2;
    unint64_t v7 = sub_2229D1CA4(a1, (uint64_t)v26);
    if (sub_2229BFAD8(v7))
    {
      uint64_t v8 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i phLibNfc_RemoteDev_CheckNdef failed: 0x%04llx", "NFDriverRemoteDevCheckNdef", 6194, *v7);
      }
      dispatch_get_specific(*v8);
      unsigned int v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *v7;
        *(_DWORD *)uint64_t v32 = 136446722;
        uint64_t v33 = "NFDriverRemoteDevCheckNdef";
        __int16 v34 = 1024;
        int v35 = 6194;
        __int16 v36 = 2048;
        uint64_t v37 = v11;
        _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_CheckNdef failed: 0x%04llx", v32, 0x1Cu);
      }
      uint64_t v12 = *v7;
      if (*v7 > 185)
      {
        if (v12 == 186)
        {
          uint64_t v13 = 23;
        }
        else if (v12 == 187)
        {
          uint64_t v13 = 4;
        }
        else
        {
LABEL_30:
          uint64_t v13 = 1;
        }
      }
      else
      {
        uint64_t v13 = 12;
        switch(v12)
        {
          case 146:
          case 148:
          case 150:
            uint64_t v13 = 6;
            break;
          case 147:
          case 151:
            goto LABEL_30;
          case 149:
            uint64_t v13 = 5;
            break;
          case 152:
            goto LABEL_33;
          default:
            if (v12 != 121) {
              goto LABEL_30;
            }
            uint64_t v13 = 18;
            break;
        }
      }
      goto LABEL_33;
    }
    int v18 = v28;
    uint64_t v19 = *(void *)(v28 + 28);
    *(void *)&long long v20 = v19;
    *((void *)&v20 + 1) = HIDWORD(v19);
    *(_OWORD *)a3 = v20;
    int v21 = v18[24];
    if ((v21 - 1) >= 2)
    {
      if (v21 != 3)
      {
        uint64_t v13 = 0;
        goto LABEL_33;
      }
      uint64_t v13 = 0;
      __int16 v22 = 1;
    }
    else
    {
      uint64_t v13 = 0;
      __int16 v22 = 257;
    }
    *((_WORD *)a3 + 8) = v22;
LABEL_33:
    __int16 v23 = NFSharedSignpostLog();
    if (os_signpost_enabled(v23))
    {
      uint64_t v24 = *v7;
      *(_DWORD *)uint64_t v32 = 134349056;
      uint64_t v33 = (const char *)v24;
      _os_signpost_emit_with_name_impl(&dword_2229A5000, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevCheckNdef", " mutexStatus=%{public, signpost.description:attribute}llu ", v32, 0xCu);
    }
    sub_2229BF93C((void **)v7);
    goto LABEL_36;
  }
  uint64_t v14 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15) {
    v15(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevCheckNdef", 6170);
  }
  dispatch_get_specific(*v14);
  uint64_t v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v32 = 136446466;
    uint64_t v33 = "NFDriverRemoteDevCheckNdef";
    __int16 v34 = 1024;
    int v35 = 6170;
    _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", v32, 0x12u);
  }
  __int16 v17 = NFSharedSignpostLog();
  if (os_signpost_enabled(v17))
  {
    *(_WORD *)uint64_t v32 = 0;
    _os_signpost_emit_with_name_impl(&dword_2229A5000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevCheckNdef", (const char *)&unk_2229F5F33, v32, 2u);
  }
  uint64_t v13 = 5;
LABEL_36:
  _Block_object_dispose(buf, 8);
  return v13;
}

uint64_t sub_2229D3A0C(void *a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1[4] + 8) + 24;
  return MEMORY[0x270F962A8](*(void *)(*(void *)(a1[5] + 24) + 560), a1[6], sub_2229D3A40, a2);
}

void sub_2229D3A40(uint64_t a1, void **a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a2)
  {
    uint64_t v6 = a2[1];
    *(void *)uint64_t v6 = a3;
    v6[2] = a4;
    sub_2229BF9CC(a2, a5);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevWriteNdef(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v8 = NFSharedSignpostLog();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_2229A5000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", (const char *)&unk_2229F5F33, buf, 2u);
  }
  if (!a2)
  {
    __int16 v17 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevWriteNdef", 6238);
    }
    dispatch_get_specific(*v17);
    uint64_t v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v35 = "NFDriverRemoteDevWriteNdef";
      __int16 v36 = 1024;
      int v37 = 6238;
      _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    long long v20 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v20)) {
      return 5;
    }
    *(_WORD *)buf = 0;
    goto LABEL_28;
  }
  if (!a3)
  {
    int v21 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22) {
      v22(3, "%s:%i No NDEF write data provided", "NFDriverRemoteDevWriteNdef", 6245);
    }
    dispatch_get_specific(*v21);
    __int16 v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v35 = "NFDriverRemoteDevWriteNdef";
      __int16 v36 = 1024;
      int v37 = 6245;
      _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i No NDEF write data provided", buf, 0x12u);
    }
    long long v20 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v20)) {
      return 5;
    }
    *(_WORD *)buf = 0;
LABEL_28:
    _os_signpost_emit_with_name_impl(&dword_2229A5000, v20, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", (const char *)&unk_2229F5F33, buf, 2u);
    return 5;
  }
  uint64_t v9 = sub_2229C3DD8(*(_DWORD *)(a3 + 8), *(const void **)a3);
  uint64_t v33 = (void **)v9;
  if (v9)
  {
    v31[0] = MEMORY[0x263EF8330];
    v31[1] = 0x40000000;
    v31[2] = sub_2229D402C;
    unsigned char v31[3] = &unk_26463B438;
    v31[4] = a1;
    v31[5] = a2;
    v31[6] = v9;
    char v32 = a4;
    unsigned int v10 = sub_2229D1CA4(a1, (uint64_t)v31);
    if (sub_2229BFAD8(v10))
    {
      uint64_t v11 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12) {
        v12(3, "%s:%i phLibNfc_Ndef_Write failed: 0x%04llx", "NFDriverRemoteDevWriteNdef", 6264, *v10);
      }
      dispatch_get_specific(*v11);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *v10;
        *(_DWORD *)buf = 136446722;
        int v35 = "NFDriverRemoteDevWriteNdef";
        __int16 v36 = 1024;
        int v37 = 6264;
        __int16 v38 = 2048;
        uint64_t v39 = v14;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Ndef_Write failed: 0x%04llx", buf, 0x1Cu);
      }
      uint64_t v15 = *v10;
      uint64_t v16 = 6;
      if (*v10 > 148)
      {
        if (v15 == 149)
        {
          uint64_t v16 = 5;
        }
        else if (v15 != 255)
        {
          if (v15 != 152)
          {
LABEL_49:
            uint64_t v16 = 1;
            goto LABEL_38;
          }
          uint64_t v16 = 12;
        }
      }
      else
      {
        switch(v15)
        {
          case 31:
            uint64_t v16 = 15;
            break;
          case 121:
            uint64_t v16 = 18;
            break;
          case 148:
            break;
          default:
            goto LABEL_49;
        }
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
LABEL_38:
    uint64_t v28 = NFSharedSignpostLog();
    if (os_signpost_enabled(v28))
    {
      uint64_t v29 = *v10;
      *(_DWORD *)buf = 134349056;
      int v35 = (const char *)v29;
      _os_signpost_emit_with_name_impl(&dword_2229A5000, v28, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", " mutexStatus=%{public, signpost.description:attribute}llu ", buf, 0xCu);
    }
    sub_2229BF93C((void **)v10);
    sub_2229C3E74(&v33);
    return v16;
  }
  uint64_t v24 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v25) {
    v25(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDevWriteNdef", 6253);
  }
  dispatch_get_specific(*v24);
  uint64_t v26 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v35 = "NFDriverRemoteDevWriteNdef";
    __int16 v36 = 1024;
    int v37 = 6253;
    _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
  }
  char v27 = NFSharedSignpostLog();
  if (os_signpost_enabled(v27))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_2229A5000, v27, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", (const char *)&unk_2229F5F33, buf, 2u);
  }
  return 3;
}

uint64_t sub_2229D402C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F962B8](*(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 560), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56) == 0, sub_2229D4064, a2);
}

void sub_2229D4064(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevFormatNdef(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2800000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (a2)
  {
    if (a3)
    {
      uint64_t v3 = *a3;
      int v4 = *((_DWORD *)a3 + 2);
    }
    else
    {
      uint64_t v3 = 0;
      int v4 = 0;
    }
    uint64_t v17 = v3;
    LODWORD(v18) = v4;
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    unsigned char v15[2] = sub_2229D4334;
    void v15[3] = &unk_26463B460;
    v15[4] = v16;
    void v15[5] = a1;
    v15[6] = a2;
    uint64_t v9 = sub_2229D1CA4(a1, (uint64_t)v15);
    if (sub_2229BFAD8(v9))
    {
      unsigned int v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i phLibNfc_RemoteDev_FormatNdef failed: 0x%04llx", "NFDriverRemoteDevFormatNdef", 6320, *v9);
      }
      dispatch_get_specific(*v10);
      uint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *v9;
        *(_DWORD *)buf = 136446722;
        long long v20 = "NFDriverRemoteDevFormatNdef";
        __int16 v21 = 1024;
        int v22 = 6320;
        __int16 v23 = 2048;
        uint64_t v24 = v13;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_FormatNdef failed: 0x%04llx", buf, 0x1Cu);
      }
      if (*v9 == 121) {
        uint64_t v8 = 18;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    sub_2229BF93C((void **)v9);
  }
  else
  {
    int v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v6 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v6) {
      v6(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevFormatNdef", 6308);
    }
    dispatch_get_specific(*v5);
    unint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      long long v20 = "NFDriverRemoteDevFormatNdef";
      __int16 v21 = 1024;
      int v22 = 6308;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    uint64_t v8 = 5;
  }
  _Block_object_dispose(v16, 8);
  return v8;
}

uint64_t sub_2229D4334(void *a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1[4] + 8) + 24;
  return MEMORY[0x270F962D8](*(void *)(*(void *)(a1[5] + 24) + 560), a1[6], *(void *)(a1[4] + 8) + 24, sub_2229D4378, a2);
}

void sub_2229D4378(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevWriteLockNdef(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2)
  {
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 0x40000000;
    v13[2] = sub_2229D4624;
    void v13[3] = &unk_26463B480;
    v13[4] = a1;
    v13[5] = a2;
    uint64_t v2 = sub_2229D1CA4(a1, (uint64_t)v13);
    if (sub_2229BFAD8(v2))
    {
      uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", "NFDriverRemoteDevWriteLockNdef", 6355, *v2);
      }
      dispatch_get_specific(*v3);
      int v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *v2;
        *(_DWORD *)buf = 136446722;
        uint64_t v15 = "NFDriverRemoteDevWriteLockNdef";
        __int16 v16 = 1024;
        int v17 = 6355;
        __int16 v18 = 2048;
        uint64_t v19 = v6;
        _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", buf, 0x1Cu);
      }
      uint64_t v7 = *v2;
      if (*v2 == 121)
      {
        uint64_t v8 = 18;
      }
      else if (v7 == 150)
      {
        uint64_t v8 = 6;
      }
      else if (v7 == 152)
      {
        uint64_t v8 = 12;
      }
      else
      {
        uint64_t v8 = 1;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    sub_2229BF93C((void **)v2);
  }
  else
  {
    uint64_t v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unsigned int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10) {
      v10(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevWriteLockNdef", 6347);
    }
    dispatch_get_specific(*v9);
    uint64_t v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v15 = "NFDriverRemoteDevWriteLockNdef";
      __int16 v16 = 1024;
      int v17 = 6347;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    return 5;
  }
  return v8;
}

uint64_t sub_2229D4624(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F961B8](*(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 560), *(void *)(a1 + 40), 0, sub_2229D464C, a2);
}

void sub_2229D464C(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevCheckPresence(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2)
  {
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 0x40000000;
    v13[2] = sub_2229D48F8;
    void v13[3] = &unk_26463B4A0;
    v13[4] = a1;
    v13[5] = a2;
    uint64_t v2 = sub_2229D1CA4(a1, (uint64_t)v13);
    if (sub_2229BFAD8(v2))
    {
      uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", "NFDriverRemoteDevCheckPresence", 6396, *v2);
      }
      dispatch_get_specific(*v3);
      int v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = *v2;
        *(_DWORD *)buf = 136446722;
        uint64_t v15 = "NFDriverRemoteDevCheckPresence";
        __int16 v16 = 1024;
        int v17 = 6396;
        __int16 v18 = 2048;
        uint64_t v19 = v6;
        _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", buf, 0x1Cu);
      }
      uint64_t v7 = *v2;
      if (*v2 == 121)
      {
        uint64_t v8 = 18;
      }
      else if (v7 == 187)
      {
        uint64_t v8 = 4;
      }
      else if (v7 == 186)
      {
        uint64_t v8 = 23;
      }
      else
      {
        uint64_t v8 = 6;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    sub_2229BF93C((void **)v2);
  }
  else
  {
    uint64_t v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unsigned int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10) {
      v10(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevCheckPresence", 6388);
    }
    dispatch_get_specific(*v9);
    uint64_t v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v15 = "NFDriverRemoteDevCheckPresence";
      __int16 v16 = 1024;
      int v17 = 6388;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    return 5;
  }
  return v8;
}

uint64_t sub_2229D48F8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F962C0](*(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 560), *(void *)(a1 + 40), sub_2229D491C, a2);
}

void sub_2229D491C(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevReadNdef(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v8 = NFSharedSignpostLog();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_2229A5000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_2229F5F33, buf, 2u);
  }
  if (!a2)
  {
    uint64_t v19 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevReadNdef", 6431);
    }
    dispatch_get_specific(*v19);
    __int16 v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "NFDriverRemoteDevReadNdef";
      __int16 v40 = 1024;
      int v41 = 6431;
      _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    __int16 v18 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v18)) {
      return 5;
    }
    *(_WORD *)buf = 0;
    goto LABEL_26;
  }
  if (!a3 || (unint64_t v9 = a3[1]) == 0)
  {
    uint64_t v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(3, "%s:%i Invalid buffer", "NFDriverRemoteDevReadNdef", 6437);
    }
    dispatch_get_specific(*v15);
    int v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "NFDriverRemoteDevReadNdef";
      __int16 v40 = 1024;
      int v41 = 6437;
      _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid buffer", buf, 0x12u);
    }
    __int16 v18 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v18)) {
      return 5;
    }
    *(_WORD *)buf = 0;
LABEL_26:
    _os_signpost_emit_with_name_impl(&dword_2229A5000, v18, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_2229F5F33, buf, 2u);
    return 5;
  }
  if (v9 <= 0x8000)
  {
    __int16 v23 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
    if (v23)
    {
      uint64_t v24 = v23;
      *(void *)__int16 v23 = *a3;
      v23[2] = a3[1];
      v37[0] = MEMORY[0x263EF8330];
      v37[1] = 0x40000000;
      v37[2] = sub_2229D5054;
      void v37[3] = &unk_26463B4C0;
      v37[4] = a1;
      v37[5] = a2;
      v37[6] = v23;
      uint64_t v25 = sub_2229D1CA4(a1, (uint64_t)v37);
      if (sub_2229BFAD8(v25))
      {
        uint64_t v26 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        char v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27) {
          v27(3, "%s:%i phLibNfc_Ndef_Read failed: 0x%04llx", "NFDriverRemoteDevReadNdef", 6463, *v25);
        }
        dispatch_get_specific(*v26);
        uint64_t v28 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *v25;
          *(_DWORD *)buf = 136446722;
          uint64_t v39 = "NFDriverRemoteDevReadNdef";
          __int16 v40 = 1024;
          int v41 = 6463;
          __int16 v42 = 2048;
          uint64_t v43 = v29;
          _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Ndef_Read failed: 0x%04llx", buf, 0x1Cu);
        }
        uint64_t v30 = *v25;
        uint64_t v14 = 12;
        switch(*v25)
        {
          case 148:
            uint64_t v14 = 6;
            break;
          case 149:
            uint64_t v14 = 5;
            break;
          case 150:
          case 151:
          case 153:
          case 154:
          case 155:
          case 156:
            goto LABEL_47;
          case 152:
            break;
          case 157:
            uint64_t v14 = 0;
            *a4 = 0;
            break;
          default:
            if (v30 == 121)
            {
              uint64_t v14 = 18;
            }
            else if (v30 != 255)
            {
LABEL_47:
              uint64_t v14 = 1;
            }
            break;
        }
      }
      else
      {
        uint64_t v14 = 0;
        *a4 = v24[2];
      }
      int v35 = NFSharedSignpostLog();
      if (os_signpost_enabled(v35))
      {
        uint64_t v36 = *v25;
        *(_DWORD *)buf = 134349056;
        uint64_t v39 = (const char *)v36;
        _os_signpost_emit_with_name_impl(&dword_2229A5000, v35, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", " mutexStatus=%{public, signpost.description:attribute}llu ", buf, 0xCu);
      }
      sub_2229BF93C((void **)v25);
      free(v24);
    }
    else
    {
      int v31 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      char v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32) {
        v32(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDevReadNdef", 6448);
      }
      dispatch_get_specific(*v31);
      uint64_t v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v39 = "NFDriverRemoteDevReadNdef";
        __int16 v40 = 1024;
        int v41 = 6448;
        _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
      }
      __int16 v34 = NFSharedSignpostLog();
      if (os_signpost_enabled(v34))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_2229A5000, v34, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_2229F5F33, buf, 2u);
      }
      return 3;
    }
  }
  else
  {
    unsigned int v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(3, "%s:%i Requested read size is over the limit", "NFDriverRemoteDevReadNdef", 6441);
    }
    dispatch_get_specific(*v10);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v39 = "NFDriverRemoteDevReadNdef";
      __int16 v40 = 1024;
      int v41 = 6441;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Requested read size is over the limit", buf, 0x12u);
    }
    uint64_t v13 = NFSharedSignpostLog();
    if (os_signpost_enabled(v13))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_2229A5000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_2229F5F33, buf, 2u);
    }
    return 15;
  }
  return v14;
}

uint64_t sub_2229D5054(void *a1, uint64_t a2)
{
  sub_2229BFA30(a2, 5.0);
  uint64_t v4 = a1[5];
  uint64_t v5 = *(void *)(*(void *)(a1[4] + 24) + 560);
  uint64_t v6 = a1[6];

  return MEMORY[0x270F962B0](v5, v4, v6, 1, sub_2229D50BC, a2);
}

void sub_2229D50BC(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

BOOL NFDriverRemoteDevSend(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  if (!v8) {
    return 0;
  }
  unint64_t v9 = v8;
  void *v8 = a3;
  *((_DWORD *)v8 + 2) = a4;
  if (!a2)
  {
    uint64_t v29 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevSend", 6516);
    }
    dispatch_get_specific(*v29);
    int v31 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v45 = 136446466;
      *(void *)&v45[4] = "NFDriverRemoteDevSend";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 6516;
      _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", v45, 0x12u);
    }
    free(v9);
    return 0;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 24) + 568) & 0x10) != 0)
  {
    uint64_t v33 = a2;
    uint64_t v34 = a1;
    int v35 = v8;
    long long v46 = 0u;
    memset(v45, 0, sizeof(v45));
    unint64_t v10 = a4;
    uint64_t v11 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v11);
    uint64_t v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v38 = (uint8_t *)"NFDriverRemoteDevSend";
      __int16 v39 = 1024;
      int v40 = 6523;
      __int16 v41 = 2082;
      __int16 v42 = "[HCE C-APDU>]";
      __int16 v43 = 2048;
      uint64_t v44 = a4;
      _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
    }
    if (v12) {
      v12(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevSend", 6523, "[HCE C-APDU>]", a4);
    }
    if (a4)
    {
      uint64_t v14 = 0;
      do
      {
        unint64_t v15 = 0;
        __int16 v16 = (char *)&v45[__sprintf_chk((char *)v45, 0, 0x30uLL, "%04lX: ", v14)];
        uint64_t v17 = a3;
        uint64_t v18 = a3 + v14;
        do
        {
          unint64_t v19 = v15 + 1;
          unint64_t v20 = v15 + 1 + v14;
          int v21 = sprintf(v16, "0x%02X ", *(unsigned __int8 *)(v18 + v15));
          if (v15 > 6) {
            break;
          }
          v16 += v21;
          ++v15;
        }
        while (v20 < v10);
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v22 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v38 = v45;
          _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
        if (v12) {
          v12(6, "%s", (const char *)v45);
        }
        v14 += v19;
        a3 = v17;
      }
      while (v20 < v10);
    }
    a1 = v34;
    unint64_t v9 = v35;
    a2 = v33;
  }
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 0x40000000;
  v36[2] = sub_2229D5598;
  v36[3] = &unk_26463B4E0;
  v36[4] = a1;
  v36[5] = a2;
  v36[6] = v9;
  __int16 v23 = sub_2229D1CA4(a1, (uint64_t)v36);
  uint64_t v24 = sub_2229BFAD8(v23);
  BOOL v25 = v24 == 0;
  if (v24)
  {
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26) {
      v26(3, "%s:%i phLibNfc_RemoteDev_Send failed 0x%04llx", "NFDriverRemoteDevSend", 6531, *v23);
    }
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    char v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *v23;
      *(_DWORD *)uint64_t v45 = 136446722;
      *(void *)&v45[4] = "NFDriverRemoteDevSend";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 6531;
      *(_WORD *)&v45[18] = 2048;
      *(void *)&v45[20] = v28;
      _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Send failed 0x%04llx", v45, 0x1Cu);
    }
  }
  sub_2229BF93C((void **)v23);
  free(v9);
  return v25;
}

uint64_t sub_2229D5598(void *a1, uint64_t a2)
{
  return MEMORY[0x270F962F8](*(void *)(*(void *)(a1[4] + 24) + 560), a1[5], a1[6], sub_2229D55C4, a2);
}

void sub_2229D55C4(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a3);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverRemoteDevReceive(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v6 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v41 = 0;
    __int16 v42 = &v41;
    uint64_t v43 = 0x2800000000;
    uint64_t v44 = v6;
    uint64_t v45 = 0x10000;
    if (!a2)
    {
      unint64_t v15 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevReceive", 6581);
      }
      dispatch_get_specific(*v15);
      uint64_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverRemoteDevReceive";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6581;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
      }
      free(v7);
      if (a3)
      {
        uint64_t v14 = 0;
        *a3 = 5;
LABEL_52:
        _Block_object_dispose(&v41, 8);
        return v14;
      }
LABEL_51:
      uint64_t v14 = 0;
      goto LABEL_52;
    }
    v40[0] = MEMORY[0x263EF8330];
    v40[1] = 0x40000000;
    v40[2] = sub_2229D5BF4;
    v40[3] = &unk_26463B508;
    uint8_t v40[4] = &v41;
    v40[5] = a1;
    v40[6] = a2;
    uint64_t v8 = sub_2229D1CA4(a1, (uint64_t)v40);
    uint64_t v9 = sub_2229BFAD8(v8);
    if (!v9)
    {
      uint64_t v18 = NFDataCreateWithBytesNoCopy();
      uint64_t v14 = v18;
      if ((*(unsigned char *)(*(void *)(a1 + 24) + 568) & 0x10) != 0)
      {
        uint64_t v36 = v18;
        long long v55 = 0u;
        memset(buf, 0, sizeof(buf));
        unint64_t v19 = *((unsigned int *)v42 + 8);
        uint64_t v39 = v42[3];
        unint64_t v20 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v20);
        int v22 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = *((unsigned int *)v42 + 8);
          *(_DWORD *)long long v46 = 136315906;
          uint64_t v47 = (uint8_t *)"NFDriverRemoteDevReceive";
          __int16 v48 = 1024;
          int v49 = 6610;
          __int16 v50 = 2082;
          unint64_t v51 = "[HCE R-APDU<]";
          __int16 v52 = 2048;
          uint64_t v53 = v23;
          _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v46, 0x26u);
        }
        int v37 = v8;
        __int16 v38 = v7;
        if (v21) {
          v21(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevReceive", 6610, "[HCE R-APDU<]", *((unsigned int *)v42 + 8));
        }
        if (v19)
        {
          uint64_t v24 = 0;
          do
          {
            unint64_t v25 = 0;
            uint64_t v26 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v24)];
            do
            {
              unint64_t v27 = v25 + 1;
              unint64_t v28 = v25 + 1 + v24;
              int v29 = sprintf(v26, "0x%02X ", *(unsigned __int8 *)(v39 + v24 + v25));
              if (v25 > 6) {
                break;
              }
              v26 += v29;
              ++v25;
            }
            while (v28 < v19);
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            uint64_t v30 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long v46 = 136446210;
              uint64_t v47 = buf;
              _os_log_impl(&dword_2229A5000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", v46, 0xCu);
            }
            if (v21) {
              v21(6, "%s", (const char *)buf);
            }
            v24 += v27;
          }
          while (v28 < v19);
        }
        uint64_t v7 = v38;
        uint64_t v14 = v36;
        uint64_t v8 = v37;
      }
      if (a3) {
        *a3 = 0;
      }
      sub_2229BF93C((void **)v8);
      if (v14) {
        goto LABEL_52;
      }
      goto LABEL_50;
    }
    if (v9 == 146 || v9 == 56)
    {
      if (!a3)
      {
LABEL_49:
        sub_2229BF93C((void **)v8);
LABEL_50:
        free(v7);
        goto LABEL_51;
      }
      int v10 = 6;
    }
    else
    {
      int v31 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      char v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32) {
        v32(3, "%s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", "NFDriverRemoteDevReceive", 6599, *v8);
      }
      dispatch_get_specific(*v31);
      uint64_t v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = *v8;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverRemoteDevReceive";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6599;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v34;
        _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", buf, 0x1Cu);
      }
      if (!a3) {
        goto LABEL_49;
      }
      if (*v8 == 7) {
        int v10 = 21;
      }
      else {
        int v10 = 1;
      }
    }
    *a3 = v10;
    goto LABEL_49;
  }
  uint64_t v11 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v12) {
    v12(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDevReceive", 6571);
  }
  dispatch_get_specific(*v11);
  uint64_t v13 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverRemoteDevReceive";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6571;
    _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
  }
  uint64_t v14 = 0;
  if (a3) {
    *a3 = 3;
  }
  return v14;
}

uint64_t sub_2229D5BF4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  sub_2229BFA30(a2, 80.0);

  return phLibNfc_RemoteDev_Receive();
}

void sub_2229D5C68(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  if (a2)
  {
    uint64_t v5 = (void **)a2[1];
    if (v5)
    {
      if (*v5)
      {
        if (a3)
        {
          if (!a4)
          {
            unsigned int v7 = *(_DWORD *)(a3 + 8);
            if (v7)
            {
              unsigned int v8 = *((_DWORD *)v5 + 2);
              if (v8 >= v7) {
                size_t v9 = v7;
              }
              else {
                size_t v9 = v8;
              }
              memcpy(*v5, *(const void **)a3, v9);
              *((_DWORD *)v5 + 2) = v9;
            }
          }
        }
        sub_2229BF9CC(a2, a4);
        sub_2229BF93C(a2);
      }
    }
  }
}

void NFDriverRemoteDevReceiveAsync(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v6 = (BOOL *)malloc_type_calloc(1uLL, 0x10uLL, 0x10800403DA8C3A5uLL);
    if (v6)
    {
      unsigned int v7 = v6;
      *((void *)v6 + 1) = _Block_copy(a3);
      uint64_t v8 = *(void *)(a1 + 24);
      *unsigned int v7 = (*(unsigned char *)(v8 + 568) & 0x10) != 0;
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      __int16 v16 = 0;
      size_t v9 = *(NSObject **)(v8 + 544);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 0x40000000;
      block[2] = sub_2229D5F58;
      block[3] = &unk_26463B530;
      block[4] = buf;
      void block[5] = a1;
      void block[6] = a2;
      void block[7] = v7;
      dispatch_async_and_wait(v9, block);
      if (*(_WORD *)(*(void *)&buf[8] + 24) != 13) {
        a3[2](a3, 1, 0);
      }
      _Block_object_dispose(buf, 8);
    }
    else
    {
      uint64_t v13 = a3[2];
      v13(a3, 3, 0);
    }
  }
  else
  {
    int v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevReceiveAsync", 6680);
    }
    dispatch_get_specific(*v10);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "NFDriverRemoteDevReceiveAsync";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6680;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    a3[2](a3, 5, 0);
  }
}

uint64_t sub_2229D5F58(uint64_t a1)
{
  uint64_t result = phLibNfc_RemoteDev_Receive();
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_2229D5FA8(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v23 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "_Callback_NFDriverRemoteDevReceiveAsync", 6631, "ctx");
    }
    dispatch_get_specific(*v23);
    unint64_t v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v35 = 136446722;
      *(void *)&v35[4] = "_Callback_NFDriverRemoteDevReceiveAsync";
      *(_WORD *)&v35[12] = 1024;
      *(_DWORD *)&v35[14] = 6631;
      *(_WORD *)&v35[18] = 2080;
      *(void *)&v35[20] = "ctx";
      _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", v35, 0x1Cu);
    }
    abort();
  }
  if (a4 != 146 && a4 != 56)
  {
    if (a4)
    {
      unint64_t v20 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(3, "%s:%i phLibNfc_RemoteDev_Receive failed 0x%04hx", "_Callback_NFDriverRemoteDevReceiveAsync", 6665, a4);
      }
      dispatch_get_specific(*v20);
      int v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v35 = 136446722;
        *(void *)&v35[4] = "_Callback_NFDriverRemoteDevReceiveAsync";
        *(_WORD *)&v35[12] = 1024;
        *(_DWORD *)&v35[14] = 6665;
        *(_WORD *)&v35[18] = 1024;
        *(_DWORD *)&v35[20] = a4;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Receive failed 0x%04hx", v35, 0x18u);
      }
    }
    else if (a3)
    {
      if (*(_DWORD *)(a3 + 8))
      {
        uint64_t v6 = (void *)NFDataCreateWithBytes();
        unsigned int v7 = v6;
        if (*(unsigned char *)a2)
        {
          long long v36 = 0u;
          memset(v35, 0, sizeof(v35));
          unint64_t v8 = v6[1];
          uint64_t v26 = *v6;
          size_t v9 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v9);
          uint64_t v11 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = v7[1];
            *(_DWORD *)buf = 136315906;
            unint64_t v28 = (uint8_t *)"_Callback_NFDriverRemoteDevReceiveAsync";
            __int16 v29 = 1024;
            int v30 = 6652;
            __int16 v31 = 2082;
            char v32 = "[HCE R-APDU<]";
            __int16 v33 = 2048;
            uint64_t v34 = v12;
            _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
          }
          if (v10) {
            v10(6, "%s:%i %s %lu bytes :", "_Callback_NFDriverRemoteDevReceiveAsync", 6652, "[HCE R-APDU<]", v7[1]);
          }
          if (v8)
          {
            uint64_t v13 = 0;
            do
            {
              unint64_t v14 = 0;
              unint64_t v15 = (char *)&v35[__sprintf_chk((char *)v35, 0, 0x30uLL, "%04lX: ", v13)];
              do
              {
                unint64_t v16 = v14 + 1;
                unint64_t v17 = v14 + 1 + v13;
                int v18 = sprintf(v15, "0x%02X ", *(unsigned __int8 *)(v26 + v13 + v14));
                if (v14 > 6) {
                  break;
                }
                v15 += v18;
                ++v14;
              }
              while (v17 < v8);
              dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
              unint64_t v19 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446210;
                unint64_t v28 = v35;
                _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
              if (v10) {
                v10(6, "%s", (const char *)v35);
              }
              v13 += v16;
            }
            while (v17 < v8);
          }
        }
      }
    }
  }
  (*(void (**)(void))(*((void *)a2 + 1) + 16))();
  _Block_release(*((const void **)a2 + 1));
  free(a2);
}

void sub_2229D640C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a4)
  {
    if (!a5)
    {
      uint64_t v6 = a2[1];
      if (v6)
      {
        if (*(_DWORD *)a4 == 16 || *(_DWORD *)a4 == 11)
        {
          unint64_t v8 = *(_DWORD **)(a4 + 8);
          if (v8)
          {
            int v9 = *v8 - 1;
            if (v9 <= 0x36) {
              _DWORD *v6 = dword_2229E82F8[v9];
            }
          }
        }
      }
    }
  }
  sub_2229BF9CC(a2, a5);

  sub_2229BF93C(a2);
}

uint64_t NFDriverRemoteDevGetMiFareInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    unint64_t v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevGetMiFareInfo", 6973);
    }
    dispatch_get_specific(*v15);
    unint64_t v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return 5;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v31 = "NFDriverRemoteDevGetMiFareInfo";
    __int16 v32 = 1024;
    int v33 = 6973;
    int v18 = "%{public}s:%i No remote tag handle provided";
    goto LABEL_21;
  }
  if (!a3)
  {
    unint64_t v19 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unint64_t v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20) {
      v20(3, "%s:%i Missing input tagInfo", "NFDriverRemoteDevGetMiFareInfo", 6976);
    }
    dispatch_get_specific(*v19);
    unint64_t v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return 5;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v31 = "NFDriverRemoteDevGetMiFareInfo";
    __int16 v32 = 1024;
    int v33 = 6976;
    int v18 = "%{public}s:%i Missing input tagInfo";
LABEL_21:
    _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
    return 5;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x10800407411B482uLL);
  if (!v6)
  {
    int v21 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22) {
      v22(3, "%s:%i Allocation failure", "NFDriverRemoteDevGetMiFareInfo", 6982);
    }
    dispatch_get_specific(*v21);
    uint64_t v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v31 = "NFDriverRemoteDevGetMiFareInfo";
      __int16 v32 = 1024;
      int v33 = 6982;
      _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  unsigned int v7 = v6;
  unint64_t v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x10800407411B482uLL);
  v7[1] = v8;
  if (!v8)
  {
    uint64_t v24 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unint64_t v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v25) {
      v25(3, "%s:%i Allocation failure", "NFDriverRemoteDevGetMiFareInfo", 6988);
    }
    dispatch_get_specific(*v24);
    uint64_t v26 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v31 = "NFDriverRemoteDevGetMiFareInfo";
      __int16 v32 = 1024;
      int v33 = 6988;
      _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    free(v7);
    return 3;
  }
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 0x40000000;
  v29[2] = sub_2229D6934;
  v29[3] = &unk_26463B550;
  v29[4] = a3;
  v29[5] = a1;
  v29[6] = a2;
  v29[7] = v7;
  int v9 = sub_2229D1CA4(a1, (uint64_t)v29);
  if (sub_2229BFAD8(v9))
  {
    int v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(3, "%s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", "NFDriverRemoteDevGetMiFareInfo", 7000, *v9);
    }
    dispatch_get_specific(*v10);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *v9;
      *(_DWORD *)buf = 136446722;
      __int16 v31 = "NFDriverRemoteDevGetMiFareInfo";
      __int16 v32 = 1024;
      int v33 = 7000;
      __int16 v34 = 2048;
      uint64_t v35 = v13;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", buf, 0x1Cu);
    }
    if (*v9 == 121) {
      uint64_t v14 = 18;
    }
    else {
      uint64_t v14 = 1;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_2229BF93C((void **)v9);
  unint64_t v27 = (void *)v7[1];
  if (v27) {
    free(v27);
  }
  free(v7);
  return v14;
}

uint64_t sub_2229D6934(void *a1, uint64_t a2)
{
  *(void *)(a2 + 8) = a1[4];
  sub_2229BFA30(a2, 80.0);
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(*(void *)(a1[5] + 24) + 560);
  uint64_t v6 = a1[7];

  return MEMORY[0x270F961C8](v5, v4, v6, sub_2229D640C, a2);
}

BOOL NFDriverGPIOSetPMUStandbyPowerEnabled()
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v0 = phTmlNfc_IoCtl();
  if (v0)
  {
    unint64_t v1 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to set GPIO : %u", "NFDriverGPIOSetPMUStandbyPowerEnabled", 7025, v0);
    }
    dispatch_get_specific(*v1);
    uint64_t v3 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v6 = "NFDriverGPIOSetPMUStandbyPowerEnabled";
      __int16 v7 = 1024;
      int v8 = 7025;
      __int16 v9 = 1024;
      int v10 = v0;
      _os_log_impl(&dword_2229A5000, v3, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set GPIO : %u", buf, 0x18u);
    }
  }
  return v0 == 0;
}

uint64_t NFDriverSetSecureElementPower(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    __int16 v7 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSetSecureElementPower", 7039, "driver");
    }
    dispatch_get_specific(*v7);
    __int16 v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v11 = "NFDriverSetSecureElementPower";
      __int16 v12 = 1024;
      int v13 = 7039;
      __int16 v14 = 2080;
      unint64_t v15 = "driver";
      _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  if (*(unsigned char *)(*(void *)(a1 + 24) + 744))
  {
    uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v3) {
      v3(3, "%s:%i Cannot power cycle, request denied", "NFDriverSetSecureElementPower", 7042);
    }
    dispatch_get_specific(*v2);
    uint64_t v4 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v11 = "NFDriverSetSecureElementPower";
      __int16 v12 = 1024;
      int v13 = 7042;
      _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i Cannot power cycle, request denied", buf, 0x12u);
    }
    return 0;
  }
  else
  {
    uint64_t v6 = sub_2229D6CD0(a1, a2);
    return sub_2229B649C(v6);
  }
}

uint64_t sub_2229D6CD0(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = *(void *)(*(void *)(a1 + 24) + 512);
      break;
    case 2:
      uint64_t result = *(void *)(*(void *)(a1 + 24) + 520);
      break;
    case 4:
      uint64_t result = *(void *)(*(void *)(a1 + 24) + 528);
      break;
    default:
      uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Unknown se ID: %d", "_NFDriverGetSecureElement", 3218, a2);
      }
      dispatch_get_specific(*v5);
      __int16 v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v9 = "_NFDriverGetSecureElement";
        __int16 v10 = 1024;
        int v11 = 3218;
        __int16 v12 = 1024;
        int v13 = a2;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown se ID: %d", buf, 0x18u);
      }
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t NFDriverSecureElementGetOSInfo(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1 || !a3)
  {
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetOSInfo", 7051, "driver && info");
    }
    dispatch_get_specific(*v5);
    __int16 v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v9 = "NFDriverSecureElementGetOSInfo";
      __int16 v10 = 1024;
      int v11 = 7051;
      __int16 v12 = 2080;
      int v13 = "driver && info";
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  uint64_t v3 = sub_2229D6CD0(a1, a2);
  if (!v3) {
    return 0;
  }

  return sub_2229B6754(v3);
}

uint64_t NFDriverSecureElementGetOSMode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1 || !a3)
  {
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetOSMode", 7061, "driver && info");
    }
    dispatch_get_specific(*v5);
    __int16 v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v9 = "NFDriverSecureElementGetOSMode";
      __int16 v10 = 1024;
      int v11 = 7061;
      __int16 v12 = 2080;
      int v13 = "driver && info";
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  uint64_t v3 = sub_2229D6CD0(a1, a2);
  if (!v3) {
    return 0;
  }

  return sub_2229B68B0(v3);
}

uint64_t NFDriverGetOSUpdateLog(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverGetOSUpdateLog", 7072, "driver");
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v8 = "NFDriverGetOSUpdateLog";
      __int16 v9 = 1024;
      int v10 = 7072;
      __int16 v11 = 2080;
      __int16 v12 = "driver";
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  uint64_t v2 = sub_2229D6CD0(a1, a2);

  return sub_2229B6A0C(v2);
}

uint64_t NFDriverSecureElementGetAttackCounterLog(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetAttackCounterLog", 7079, "driver");
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v8 = "NFDriverSecureElementGetAttackCounterLog";
      __int16 v9 = 1024;
      int v10 = 7079;
      __int16 v11 = 2080;
      __int16 v12 = "driver";
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  uint64_t v2 = sub_2229D6CD0(a1, a2);

  return sub_2229B6B68(v2);
}

uint64_t NFDriverSecureElementGetPresenceOfAttackLog(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetPresenceOfAttackLog", 7086, "driver");
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v8 = "NFDriverSecureElementGetPresenceOfAttackLog";
      __int16 v9 = 1024;
      int v10 = 7086;
      __int16 v11 = 2080;
      __int16 v12 = "driver";
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  uint64_t v2 = sub_2229D6CD0(a1, a2);

  return sub_2229B6CC4(v2);
}

uint64_t NFDriverGetUnlockRequestInfo(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverGetUnlockRequestInfo", 7093, "driver");
    }
    dispatch_get_specific(*v4);
    uint64_t v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v8 = "NFDriverGetUnlockRequestInfo";
      __int16 v9 = 1024;
      int v10 = 7093;
      __int16 v11 = 2080;
      __int16 v12 = "driver";
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  uint64_t v2 = sub_2229D6CD0(a1, a2);

  return sub_2229B6E20(v2);
}

BOOL NFDriverGetSecureElementInfo(uint64_t a1, int a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!a1 || !a3)
  {
    uint64_t v23 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i FAILED: %s", "NFDriverGetSecureElementInfo", 7100, "driver && info");
    }
    dispatch_get_specific(*v23);
    unint64_t v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unint64_t v27 = "NFDriverGetSecureElementInfo";
      __int16 v28 = 1024;
      int v29 = 7100;
      __int16 v30 = 2080;
      __int16 v31 = "driver && info";
      _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  if (a2 != 1)
  {
    __int16 v7 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8) {
      v8(3, "%s:%i SE %d does not support wired mode", "NFDriverGetSecureElementInfo", 7112, a2);
    }
    dispatch_get_specific(*v7);
    __int16 v9 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v27 = "NFDriverGetSecureElementInfo";
    __int16 v28 = 1024;
    int v29 = 7112;
    __int16 v30 = 1024;
    LODWORD(v31) = a2;
    __int16 v11 = "%{public}s:%i SE %d does not support wired mode";
LABEL_13:
    __int16 v12 = v9;
LABEL_14:
    uint32_t v13 = 24;
LABEL_19:
    _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return 0;
  }
  if (*(_DWORD *)(a1 + 44) != 1)
  {
    uint64_t v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unint64_t v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(3, "%s:%i eSE not in wired mode", "NFDriverGetSecureElementInfo", 7106);
    }
    dispatch_get_specific(*v14);
    uint64_t v16 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      unint64_t v27 = "NFDriverGetSecureElementInfo";
      __int16 v28 = 1024;
      int v29 = 7106;
      __int16 v11 = "%{public}s:%i eSE not in wired mode";
      __int16 v12 = v16;
      uint32_t v13 = 18;
      goto LABEL_19;
    }
    return result;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 512);
  if (!v5)
  {
    unint64_t v17 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v18) {
      v18(3, "%s:%i No SE of type %d.", "NFDriverGetSecureElementInfo", 7118, 1);
    }
    dispatch_get_specific(*v17);
    __int16 v9 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136446722;
    unint64_t v27 = "NFDriverGetSecureElementInfo";
    __int16 v28 = 1024;
    int v29 = 7118;
    __int16 v30 = 1024;
    LODWORD(v31) = 1;
    __int16 v11 = "%{public}s:%i No SE of type %d.";
    goto LABEL_13;
  }
  bzero(a3, 0xE08uLL);
  if (!sub_2229B68B0(v5)) {
    return 1;
  }
  int v6 = *((_DWORD *)a3 + 883);
  if ((v6 - 2) < 2)
  {
    sub_2229B65F8(v5);
    sub_2229B6754(v5);
    return 1;
  }
  if (v6 == 1)
  {
    sub_2229B6F7C(v5);
    sub_2229ACD64(v5, (uint64_t)a3);
    return 1;
  }
  unint64_t v19 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  unint64_t v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20) {
    v20(3, "%s:%i Unknown OS mode %d", "NFDriverGetSecureElementInfo", 7146, *((_DWORD *)a3 + 883));
  }
  dispatch_get_specific(*v19);
  int v21 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v22 = *((_DWORD *)a3 + 883);
    *(_DWORD *)buf = 136446722;
    unint64_t v27 = "NFDriverGetSecureElementInfo";
    __int16 v28 = 1024;
    int v29 = 7146;
    __int16 v30 = 1024;
    LODWORD(v31) = v22;
    __int16 v11 = "%{public}s:%i Unknown OS mode %d";
    __int16 v12 = v21;
    goto LABEL_14;
  }
  return result;
}

uint64_t NFDriverCopySMBLog(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Getting SMB log..", "NFDriverCopySMBLog", 9691);
  }
  dispatch_get_specific(*v2);
  uint64_t v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverCopySMBLog";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 9691;
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Getting SMB log..", buf, 0x12u);
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  uint64_t v19 = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = sub_2229E0A84;
  void v11[3] = &unk_26463B6A0;
  void v11[4] = buf;
  v11[5] = a1;
  uint64_t v5 = sub_2229D1CA4(a1, (uint64_t)v11);
  uint64_t v6 = sub_2229BFAD8(v5);
  sub_2229BF93C((void **)v5);
  if (v6)
  {
    uint64_t v7 = 0;
    if (v6 != 51)
    {
      dispatch_get_specific(*v2);
      int v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v8) {
        v8(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverCopySMBLog", 9709, v6);
      }
      dispatch_get_specific(*v2);
      __int16 v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 v12 = 136446722;
        uint32_t v13 = "NFDriverCopySMBLog";
        __int16 v14 = 1024;
        int v15 = 9709;
        __int16 v16 = 2048;
        uint64_t v17 = v6;
        _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", v12, 0x1Cu);
      }
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)&buf[8] + 24);
  }
  _Block_object_dispose(buf, 8);
  return v7;
}

uint64_t NFDriverSetReaderModeRFGain(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3 - 0xFFFF >= 0xFFFF0002)
    {
      signed int v6 = a3 + 5;
      uint64_t v7 = (char *)malloc_type_calloc(1uLL, (int)(a3 + 5), 0x100004077774924uLL);
      if (v7)
      {
        int v8 = v7;
        uint64_t v26 = a1;
        *(_WORD *)uint64_t v7 = 3488;
        v7[2] = a3 + 2;
        *(_WORD *)(v7 + 3) = 17460;
        memcpy(v7 + 5, a2, a3);
        long long v35 = 0u;
        memset(v34, 0, sizeof(v34));
        __int16 v9 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v9);
        __int16 v11 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "NFDriverSetReaderModeRFGain";
          __int16 v28 = 1024;
          int v29 = 7396;
          __int16 v30 = 2082;
          __int16 v31 = "REGISTER UPDATE";
          __int16 v32 = 2048;
          uint64_t v33 = v6;
          _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
        }
        if (Logger) {
          Logger(5, "%s:%i %s %lu bytes :", "NFDriverSetReaderModeRFGain", 7396, "REGISTER UPDATE", v6);
        }
        if (v6)
        {
          uint64_t v12 = 0;
          do
          {
            unint64_t v13 = 0;
            __int16 v14 = (char *)&v34[__sprintf_chk((char *)v34, 0, 0x30uLL, "%04lX: ", v12)];
            int v15 = v8;
            __int16 v16 = &v8[v12];
            do
            {
              unint64_t v17 = v13 + 1;
              unint64_t v18 = v13 + 1 + v12;
              int v19 = sprintf(v14, "0x%02X ", v16[v13]);
              if (v13 > 6) {
                break;
              }
              v14 += v19;
              ++v13;
            }
            while (v18 < v6);
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            uint64_t v20 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = v34;
              _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
            if (Logger) {
              Logger(5, "%s", (const char *)v34);
            }
            v12 += v17;
            int v8 = v15;
          }
          while (v18 < v6);
        }
        int v21 = sub_2229C3DD8(v6, v8);
        *(void *)buf = v21;
        if (v21)
        {
          int v22 = sub_2229C39B8(v26, 37025, (uint64_t)v21, 0);
          if (sub_2229BFAD8(v22))
          {
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            uint64_t v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v23) {
              v23(3, "%s:%i Failed to get RF settings.", "NFDriverSetReaderModeRFGain", 7405);
            }
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            uint64_t v24 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int16 v34 = 136446466;
              *(void *)&v34[4] = "NFDriverSetReaderModeRFGain";
              *(_WORD *)&v34[12] = 1024;
              *(_DWORD *)&v34[14] = 7405;
              _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings.", v34, 0x12u);
            }
          }
          sub_2229BF93C((void **)v22);
          sub_2229C3E74((void ***)buf);
          free(v8);
        }
      }
    }
  }
  return 0;
}

BOOL sub_2229D8020(uint64_t a1, char a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = NFGetProductType();
  if ((v4 - 11) > 0x38 || ((1 << (v4 - 11)) & 0x100000000000007) == 0)
  {
    int v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Device does not require RF settings changes", "NFDriverConfigureReaderModeRFForCathaySigned", 7600);
    }
    dispatch_get_specific(*v15);
    unint64_t v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v23 = 136446466;
      *(void *)&v23[4] = "NFDriverConfigureReaderModeRFForCathaySigned";
      *(_WORD *)&v23[12] = 1024;
      *(_DWORD *)&v23[14] = 7600;
      _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not require RF settings changes", v23, 0x12u);
    }
    return 1;
  }
  else
  {
    if (a2)
    {
      uint64_t v6 = 0;
      while (1)
      {
        __int16 v18 = *(_WORD *)((char *)&unk_2229E81E0 + v6 + 1);
        *(_OWORD *)uint64_t v23 = *(_OWORD *)((char *)&unk_2229E81E0 + v6);
        *(_DWORD *)&v23[15] = *(_DWORD *)((char *)&unk_2229E81E0 + v6 + 15);
        if ((sub_2229D8340(a1, &v18, (long long *)v23) & 1) == 0) {
          break;
        }
        v6 += 19;
        if (v6 == 76) {
          return 1;
        }
      }
      int v8 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v9) {
        v9(4, "%s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", "NFDriverConfigureReaderModeRFForCathaySigned", 7616);
      }
      dispatch_get_specific(*v8);
      int v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "NFDriverConfigureReaderModeRFForCathaySigned";
        __int16 v21 = 1024;
        int v22 = 7616;
        _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", buf, 0x12u);
      }
      sub_2229D8020(a1, 0);
      return 0;
    }
    uint64_t v7 = 0;
    while (1)
    {
      __int16 v18 = *(_WORD *)((char *)&unk_2229E822C + v7 + 1);
      *(_OWORD *)uint64_t v23 = *(_OWORD *)((char *)&unk_2229E822C + v7);
      *(_DWORD *)&v23[15] = *(_DWORD *)((char *)&unk_2229E822C + v7 + 15);
      if ((sub_2229D8340(a1, &v18, (long long *)v23) & 1) == 0) {
        break;
      }
      v7 += 19;
      if (v7 == 76) {
        return 1;
      }
    }
    __int16 v11 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12) {
      v12(4, "%s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Default RF settings", "NFDriverConfigureReaderModeRFForCathaySigned", 7631);
    }
    dispatch_get_specific(*v11);
    unint64_t v13 = NFSharedLogGetLogger();
    BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v20 = "NFDriverConfigureReaderModeRFForCathaySigned";
      __int16 v21 = 1024;
      int v22 = 7631;
      _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Default RF settings", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_2229D8340(uint64_t a1, const void *a2, long long *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v35 = (void **)sub_2229C3DD8(2u, a2);
  uint64_t v5 = sub_2229C3DD8(0x100u, 0);
  __int16 v34 = (void **)v5;
  uint64_t v6 = sub_2229C39B8(a1, 37027, (uint64_t)v35, (uint64_t)v5);
  uint64_t v7 = sub_2229BFAD8(v6);
  int v8 = (const void **)MEMORY[0x263F8C6C0];
  if (v7)
  {
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to get RF conf settings.", "_NFDriverGetReaderModeRFConfigRegs", 7509);
    }
    dispatch_get_specific(*v8);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v37 = "_NFDriverGetReaderModeRFConfigRegs";
      __int16 v38 = 1024;
      int v39 = 7509;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF conf settings.", buf, 0x12u);
    }
    sub_2229BF93C((void **)v6);
    __int16 v11 = 0;
    int v12 = 0;
  }
  else
  {
    sub_2229BF93C((void **)v6);
    __int16 v11 = malloc_type_calloc(1uLL, v5[2] - 1, 0x100004077774924uLL);
    memcpy(v11, (const void *)(*(void *)v5 + 1), v5[2] - 1);
    int v12 = v5[2] - 1;
  }
  sub_2229C3E74(&v35);
  sub_2229C3E74(&v34);
  if (v7)
  {
    dispatch_get_specific(*v8);
    unint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i Unable to get RF Conf register values", "_NFDriverApplyRFConfig", 7573);
    }
    dispatch_get_specific(*v8);
    __int16 v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v37 = "_NFDriverApplyRFConfig";
      __int16 v38 = 1024;
      int v39 = 7573;
      int v15 = "%{public}s:%i Unable to get RF Conf register values";
LABEL_22:
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (v11) {
    BOOL v16 = v12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    dispatch_get_specific(*v8);
    unint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v17) {
      v17(3, "%s:%i Set output read buffer empty. Not applying new values", "_NFDriverApplyRFConfig", 7568);
    }
    dispatch_get_specific(*v8);
    __int16 v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v37 = "_NFDriverApplyRFConfig";
      __int16 v38 = 1024;
      int v39 = 7568;
      int v15 = "%{public}s:%i Set output read buffer empty. Not applying new values";
      goto LABEL_22;
    }
LABEL_23:
    uint64_t v18 = 0;
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    goto LABEL_24;
  }
  if (*v11 != *(_DWORD *)((char *)a3 + 3))
  {
    dispatch_get_specific(*v8);
    uint64_t v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20) {
      v20(6, "%s:%i Values different. Will apply new values", "_NFDriverApplyRFConfig", 7551);
    }
    dispatch_get_specific(*v8);
    __int16 v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v37 = "_NFDriverApplyRFConfig";
      __int16 v38 = 1024;
      int v39 = 7551;
      _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Values different. Will apply new values", buf, 0x12u);
    }
    unsigned int v22 = sub_2229C5B30(a1, 6);
    uint64_t v23 = (char *)malloc_type_calloc(1uLL, 0x15uLL, 0x100004077774924uLL);
    if (!v23)
    {
      dispatch_get_specific(*v8);
      __int16 v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30) {
        v30(3, "%s:%i Unable to alloc memory ", "_NFDriverSetReaderModeRFConfigRegsSigned", 7427);
      }
      dispatch_get_specific(*v8);
      __int16 v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v37 = "_NFDriverSetReaderModeRFConfigRegsSigned";
        __int16 v38 = 1024;
        int v39 = 7427;
        _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Unable to alloc memory ", buf, 0x12u);
      }
      goto LABEL_42;
    }
    uint64_t v24 = v23;
    *(_WORD *)uint64_t v23 = __rev16(v22);
    long long v25 = *a3;
    *(_DWORD *)(v23 + 17) = *(_DWORD *)((char *)a3 + 15);
    *(_OWORD *)(v23 + 2) = v25;
    uint64_t v26 = sub_2229C3DD8(0x15u, v23);
    long long v35 = (void **)v26;
    free(v24);
    unint64_t v27 = (void **)sub_2229C39B8(a1, 224, (uint64_t)v26, 0);
    if (sub_2229BFAD8((uint64_t *)v27))
    {
      dispatch_get_specific(*v8);
      __int16 v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v28) {
        v28(3, "%s:%i Failed to set RF conf settings.", "_NFDriverSetReaderModeRFConfigRegsSigned", 7441);
      }
      dispatch_get_specific(*v8);
      int v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v37 = "_NFDriverSetReaderModeRFConfigRegsSigned";
        __int16 v38 = 1024;
        int v39 = 7441;
        _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF conf settings.", buf, 0x12u);
      }
      sub_2229BF93C(v27);
      sub_2229C3E74(&v35);
LABEL_42:
      dispatch_get_specific(*v8);
      __int16 v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32) {
        v32(3, "%s:%i Failed to set RF config set1.", "_NFDriverApplyRFConfig", 7563);
      }
      dispatch_get_specific(*v8);
      uint64_t v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v37 = "_NFDriverApplyRFConfig";
        __int16 v38 = 1024;
        int v39 = 7563;
        _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF config set1.", buf, 0x12u);
      }
      uint64_t v18 = 0;
      goto LABEL_24;
    }
    sub_2229BF93C(v27);
    sub_2229C3E74(&v35);
  }
  uint64_t v18 = 1;
LABEL_24:
  free(v11);
  return v18;
}

BOOL sub_2229D897C(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unsigned int v4 = NFGetProductType();
  if (v4 > 0x18 || ((1 << v4) & 0x100C000) == 0)
  {
    BOOL v16 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Device does not require RF settings changes", "NFDriverConfigureReaderModeRFForMercurySigned", 7656);
    }
    dispatch_get_specific(*v16);
    uint64_t v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v24 = 136446466;
      *(void *)&unsigned char v24[4] = "NFDriverConfigureReaderModeRFForMercurySigned";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 7656;
      _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not require RF settings changes", v24, 0x12u);
    }
    return 1;
  }
  if (!a2)
  {
    __int16 v19 = 16450;
    *(_DWORD *)&v24[15] = 2041531977;
    *(_OWORD *)uint64_t v24 = xmmword_2229E828B;
    if ((sub_2229D8340(a1, &v19, (long long *)v24) & 1) == 0)
    {
      unint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14) {
        v14(4, "%s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Default RF settings", "NFDriverConfigureReaderModeRFForMercurySigned", 7687);
      }
      dispatch_get_specific(*v13);
      int v15 = NFSharedLogGetLogger();
      BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        __int16 v21 = "NFDriverConfigureReaderModeRFForMercurySigned";
        __int16 v22 = 1024;
        int v23 = 7687;
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Default RF settings", buf, 0x12u);
        return 0;
      }
      return result;
    }
    return 1;
  }
  uint64_t v5 = 0;
  for (char i = 1; (i & 1) != 0; char i = 0)
  {
    uint64_t v7 = (char *)&unk_2229E8278 + 19 * v5;
    __int16 v19 = 16450;
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v7;
    *(_DWORD *)&v24[15] = *(_DWORD *)(v7 + 15);
    char v8 = sub_2229D8340(a1, &v19, (long long *)v24);
    uint64_t v5 = 1;
    if ((v8 & 1) == 0)
    {
      __int16 v9 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10) {
        v10(4, "%s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", "NFDriverConfigureReaderModeRFForMercurySigned", 7672);
      }
      dispatch_get_specific(*v9);
      __int16 v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v21 = "NFDriverConfigureReaderModeRFForMercurySigned";
        __int16 v22 = 1024;
        int v23 = 7672;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", buf, 0x12u);
      }
      sub_2229D897C(a1, 0);
      uint64_t v5 = 0;
      return v5 != 0;
    }
  }
  return v5 != 0;
}

uint64_t NFDriverConfigureReaderModeRFForTransitPartner(uint64_t a1, char a2, int a3)
{
  if (a3 == 1)
  {
    return sub_2229D897C(a1, a2);
  }
  else if (a3 == 2)
  {
    return sub_2229D8020(a1, a2);
  }
  else
  {
    uint64_t result = 0;
    if (a3 == 3 && (a2 & 1) == 0)
    {
      sub_2229D8020(a1, 0);
      sub_2229D897C(a1, 0);
      return 1;
    }
  }
  return result;
}

uint64_t NFDriverEnableReaderModeDynamicBBAControl(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)(a1 + 24) + 732) <= 9u)
  {
    uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Not supported - skipping on this hardware", "NFDriverEnableReaderModeDynamicBBAControl", 7720);
    }
    dispatch_get_specific(*v2);
    unsigned int v4 = NFSharedLogGetLogger();
    uint64_t v5 = 0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v19 = "NFDriverEnableReaderModeDynamicBBAControl";
      __int16 v20 = 1024;
      int v21 = 7720;
      _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not supported - skipping on this hardware", buf, 0x12u);
      return 0;
    }
    return v5;
  }
  BOOL v8 = sub_2229C699C(a1, 0, 0, 0, 0, 0, 0);
  __int16 v9 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (!v8)
  {
    if (v10) {
      v10(4, "%s:%i Failed to stop discovery", "NFDriverEnableReaderModeDynamicBBAControl", 7725);
    }
    dispatch_get_specific(*v9);
    __int16 v14 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v19 = "NFDriverEnableReaderModeDynamicBBAControl";
    __int16 v20 = 1024;
    int v21 = 7725;
    int v15 = "%{public}s:%i Failed to stop discovery";
    goto LABEL_23;
  }
  if (v10) {
    v10(6, "%s:%i enable: %d", "NFDriverEnableReaderModeDynamicBBAControl", 7729, a2);
  }
  dispatch_get_specific(*v9);
  __int16 v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    __int16 v19 = "NFDriverEnableReaderModeDynamicBBAControl";
    __int16 v20 = 1024;
    int v21 = 7729;
    __int16 v22 = 1024;
    int v23 = a2;
    _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable: %d", buf, 0x18u);
  }
  char v17 = a2;
  uint64_t v5 = sub_2229D9088(a1, 41244, &v17);
  if (*(unsigned char *)(a1 + 62)) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
  if (!sub_2229C699C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v12))
  {
    dispatch_get_specific(*v9);
    unint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i Failed to update discovery", "NFDriverEnableReaderModeDynamicBBAControl", 7735);
    }
    dispatch_get_specific(*v9);
    __int16 v14 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v19 = "NFDriverEnableReaderModeDynamicBBAControl";
    __int16 v20 = 1024;
    int v21 = 7735;
    int v15 = "%{public}s:%i Failed to update discovery";
LABEL_23:
    _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
    return 1;
  }
  return v5;
}

uint64_t sub_2229D9088(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_2229C3DD8(4u, 0);
  char v17 = (void **)v6;
  if (v6 && *(void *)v6)
  {
    **(unsigned char **)uint64_t v6 = -95;
    *(unsigned char *)(*(void *)v6 + 1) = a2;
    *(unsigned char *)(*(void *)v6 + 2) = 1;
    *(unsigned char *)(*(void *)v6 + 3) = *a3;
    uint64_t v7 = sub_2229C39B8(a1, 37025, (uint64_t)v6, 0);
    if (sub_2229BFAD8(v7))
    {
      BOOL v8 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to set rf property:0x%02x status:0x%08llx", "_NFDriverSetRFProperty", 7910, a2, *v7);
      }
      dispatch_get_specific(*v8);
      int v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *v7;
        *(_DWORD *)buf = 136446978;
        __int16 v19 = "_NFDriverSetRFProperty";
        __int16 v20 = 1024;
        int v21 = 7910;
        __int16 v22 = 1024;
        int v23 = a2;
        __int16 v24 = 2048;
        uint64_t v25 = v11;
        _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set rf property:0x%02x status:0x%08llx", buf, 0x22u);
      }
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v12 = 0;
    }
    sub_2229BF93C((void **)v7);
  }
  else
  {
    unint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14) {
      v14(3, "%s:%i Memory error trying to update property: 0x%02x", "_NFDriverSetRFProperty", 7893, a2);
    }
    dispatch_get_specific(*v13);
    int v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v19 = "_NFDriverSetRFProperty";
      __int16 v20 = 1024;
      int v21 = 7893;
      __int16 v22 = 1024;
      int v23 = a2;
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Memory error trying to update property: 0x%02x", buf, 0x18u);
    }
    uint64_t v12 = 3;
  }
  sub_2229C3E74(&v17);
  return v12;
}

uint64_t NFDriverEnableAutomaticRFOverride(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  BOOL v4 = sub_2229C699C(a1, 0, 0, 0, 0, 0, 0);
  uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (!v4)
  {
    if (Logger) {
      Logger(4, "%s:%i Failed to stop discovery", "NFDriverEnableAutomaticRFOverride", 7750);
    }
    dispatch_get_specific(*v5);
    uint64_t v11 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v16 = "NFDriverEnableAutomaticRFOverride";
    __int16 v17 = 1024;
    int v18 = 7750;
    uint64_t v12 = "%{public}s:%i Failed to stop discovery";
    goto LABEL_18;
  }
  if (Logger) {
    Logger(6, "%s:%i enable: %d", "NFDriverEnableAutomaticRFOverride", 7757, a2);
  }
  dispatch_get_specific(*v5);
  uint64_t v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    BOOL v16 = "NFDriverEnableAutomaticRFOverride";
    __int16 v17 = 1024;
    int v18 = 7757;
    __int16 v19 = 1024;
    int v20 = a2;
    _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable: %d", buf, 0x18u);
  }
  char v14 = a2;
  uint64_t v8 = sub_2229D9088(a1, 41241, &v14);
  if (*(unsigned char *)(a1 + 62)) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  if (!sub_2229C699C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v9))
  {
    dispatch_get_specific(*v5);
    int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10) {
      v10(3, "%s:%i Failed to update discovery", "NFDriverEnableAutomaticRFOverride", 7763);
    }
    dispatch_get_specific(*v5);
    uint64_t v11 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v16 = "NFDriverEnableAutomaticRFOverride";
    __int16 v17 = 1024;
    int v18 = 7763;
    uint64_t v12 = "%{public}s:%i Failed to update discovery";
LABEL_18:
    _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
    return 1;
  }
  return v8;
}

uint64_t NFDriverEnableGreenCarThreshold()
{
  return 1;
}

uint64_t NFDriverISO15693SetDataRate(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  char v34 = 0;
  int v33 = 315650;
  char v7 = 0;
  int v8 = 0;
  switch(a3)
  {
    case 1:
      goto LABEL_14;
    case 2:
      int v8 = 1;
      char v7 = 17;
      goto LABEL_14;
    case 3:
      int v8 = 2;
      char v7 = 34;
      goto LABEL_14;
    case 4:
      char v14 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(4, "%s:%i 212kbps not supported?", "NFDriverISO15693SetDataRate", 7806);
      }
      dispatch_get_specific(*v14);
      BOOL v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverISO15693SetDataRate";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7806;
        _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i 212kbps not supported?", buf, 0x12u);
      }
      int v8 = 3;
      char v7 = 68;
LABEL_14:
      char v17 = 0;
      HIBYTE(v33) = v7;
      if (a4 && a4 != 320)
      {
        if (a4 == 160)
        {
          char v17 = 1;
        }
        else
        {
          int v18 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v19) {
            v19(4, "%s:%i Incorrect T1 %ud, using 320usec!", "NFDriverISO15693SetDataRate", 7819, a4);
          }
          dispatch_get_specific(*v18);
          int v20 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "NFDriverISO15693SetDataRate";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7819;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = a4;
            _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Incorrect T1 %ud, using 320usec!", buf, 0x18u);
          }
          char v17 = 0;
        }
      }
      char v34 = v17;
      uint64_t v21 = NFDataCreateWithBytesNoCopy();
      uint64_t v32 = 0;
      uint64_t v22 = NFDriverRemoteDeviceIso15693Transceive(a1, a2, v21, &v32, 5.0);
      if (v22)
      {
        uint64_t v13 = v22;
        int v23 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        __int16 v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v24) {
          v24(3, "%s:%i Failed to set data rate for NTAG5 %d", "NFDriverISO15693SetDataRate", 7827, v13);
        }
        dispatch_get_specific(*v23);
        uint64_t v25 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "NFDriverISO15693SetDataRate";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7827;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = v13;
          _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set data rate for NTAG5 %d", buf, 0x18u);
        }
      }
      else
      {
        *(void *)buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&buf[16] = sub_2229E61AC;
        __int16 v42 = &unk_26463B8D0;
        int v44 = v8;
        uint64_t v43 = a1;
        uint64_t v26 = sub_2229D1CA4(a1, (uint64_t)buf);
        if (sub_2229BFAD8(v26))
        {
          unint64_t v27 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          __int16 v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v28) {
            v28(4, "%s:%i failed to set NTAG5 local rate: 0x%04llX", "_NFDriverSetISO15693LocalDataRate", 4394, *v26);
          }
          dispatch_get_specific(*v27);
          int v29 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            uint64_t v30 = *v26;
            *(_DWORD *)long long v35 = 136446722;
            uint64_t v36 = "_NFDriverSetISO15693LocalDataRate";
            __int16 v37 = 1024;
            int v38 = 4394;
            __int16 v39 = 2048;
            uint64_t v40 = v30;
            _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to set NTAG5 local rate: 0x%04llX", v35, 0x1Cu);
          }
          uint64_t v13 = 1;
        }
        else
        {
          uint64_t v13 = 0;
        }
        sub_2229BF93C((void **)v26);
      }
      break;
    default:
      int v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11) {
        v11(3, "%s:%i Unknown rate %d", "NFDriverISO15693SetDataRate", 7810, a3);
      }
      dispatch_get_specific(*v10);
      uint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverISO15693SetDataRate";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7810;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = a3;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown rate %d", buf, 0x18u);
      }
      uint64_t v13 = 5;
      break;
  }
  return v13;
}

uint64_t NFDriverSetTypeATagDataRate(uint64_t a1, int a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  char v32 = 0;
  __int16 v31 = 289;
  uint64_t v30 = (void **)sub_2229C3DD8(3u, &v31);
  BOOL v4 = (unsigned __int8 **)v30;
  switch(a2)
  {
    case 1:
      uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i setting 106", "NFDriverSetTypeATagDataRate", 7851);
      }
      dispatch_get_specific(*v5);
      char v7 = NFSharedLogGetLogger();
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      char v9 = 0;
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        char v34 = "NFDriverSetTypeATagDataRate";
        __int16 v35 = 1024;
        int v36 = 7851;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 106", buf, 0x12u);
        char v9 = 0;
      }
      goto LABEL_26;
    case 2:
      char v14 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v15) {
        v15(6, "%s:%i setting 212", "NFDriverSetTypeATagDataRate", 7855);
      }
      dispatch_get_specific(*v14);
      BOOL v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        char v34 = "NFDriverSetTypeATagDataRate";
        __int16 v35 = 1024;
        int v36 = 7855;
        _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 212", buf, 0x12u);
      }
      char v9 = 1;
      goto LABEL_26;
    case 3:
      char v17 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18) {
        v18(6, "%s:%i setting 424", "NFDriverSetTypeATagDataRate", 7859);
      }
      dispatch_get_specific(*v17);
      __int16 v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        char v34 = "NFDriverSetTypeATagDataRate";
        __int16 v35 = 1024;
        int v36 = 7859;
        _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 424", buf, 0x12u);
      }
      char v9 = 2;
      goto LABEL_26;
    case 4:
      int v20 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21) {
        v21(6, "%s:%i setting 848", "NFDriverSetTypeATagDataRate", 7863);
      }
      dispatch_get_specific(*v20);
      uint64_t v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        char v34 = "NFDriverSetTypeATagDataRate";
        __int16 v35 = 1024;
        int v36 = 7863;
        _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 848", buf, 0x12u);
      }
      char v9 = 3;
LABEL_26:
      *((unsigned char *)*v30 + 2) = v9;
      int v23 = sub_2229C39B8(a1, 36902, (uint64_t)v4, 0);
      if (sub_2229BFAD8(v23))
      {
        __int16 v24 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v25) {
          v25(3, "%s:%i Failed to set rf property:0x%02x status:0x%08llx", "NFDriverSetTypeATagDataRate", 7874, **v4, *v23);
        }
        dispatch_get_specific(*v24);
        uint64_t v26 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          int v27 = **v4;
          uint64_t v28 = *v23;
          *(_DWORD *)buf = 136446978;
          char v34 = "NFDriverSetTypeATagDataRate";
          __int16 v35 = 1024;
          int v36 = 7874;
          __int16 v37 = 1024;
          int v38 = v27;
          __int16 v39 = 2048;
          uint64_t v40 = v28;
          _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set rf property:0x%02x status:0x%08llx", buf, 0x22u);
        }
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v13 = 0;
      }
      sub_2229BF93C((void **)v23);
      break;
    default:
      int v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11) {
        v11(3, "%s:%i Unknown rate %d", "NFDriverSetTypeATagDataRate", 7867, a2);
      }
      dispatch_get_specific(*v10);
      uint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        char v34 = "NFDriverSetTypeATagDataRate";
        __int16 v35 = 1024;
        int v36 = 7867;
        __int16 v37 = 1024;
        int v38 = a2;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown rate %d", buf, 0x18u);
      }
      uint64_t v13 = 5;
      break;
  }
  sub_2229C3E74(&v30);
  return v13;
}

uint64_t NFDriverReadDieID(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  __int16 v6 = sub_2229C5B30(a1, 0);
  v71[0] = 1;
  v71[1] = HIBYTE(v6);
  v71[2] = v6;
  char v7 = sub_2229C3DD8(3u, v71);
  unint64_t v70 = (void **)v7;
  BOOL v8 = sub_2229C3DD8(0x100u, 0);
  uint64_t v69 = (void **)v8;
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Reading Die ID ...", "NFDriverReadDieID", 7929);
  }
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverReadDieID";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7929;
    _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Reading Die ID ...", buf, 0x12u);
  }
  if (*(unsigned char *)(a1 + 57))
  {
    uint64_t v11 = sub_2229C39B8(a1, 37026, (uint64_t)v7, (uint64_t)v8);
    if (sub_2229BFAD8(v11))
    {
      uint64_t v12 = 0;
    }
    else
    {
      unsigned int v15 = v8[2];
      if (v15 < 5)
      {
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v58) {
          v58(3, "%s:%i Unexpected length : %d", "NFDriverReadDieID", 7971, v8[2]);
        }
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        unint64_t v59 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          unsigned int v60 = v8[2];
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "NFDriverReadDieID";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7971;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = v60;
          _os_log_impl(&dword_2229A5000, v59, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length : %d", buf, 0x18u);
        }
        uint64_t v12 = 0;
        if (a2 && a3)
        {
          uint64_t v12 = 0;
          *a3 = 0;
          *a2 = 0;
        }
      }
      else
      {
        unint64_t v61 = v11;
        uint64_t v64 = a2;
        long long v81 = 0u;
        memset(buf, 0, sizeof(buf));
        unint64_t v16 = v15 - 4;
        char v17 = *(char **)v8;
        int v18 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v18);
        int v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = v8[2] - 4;
          *(_DWORD *)unint64_t v72 = 136315906;
          unint64_t v73 = (uint8_t *)"NFDriverReadDieID";
          __int16 v74 = 1024;
          int v75 = 7957;
          __int16 v76 = 2082;
          __int16 v77 = "Die ID :";
          __int16 v78 = 2048;
          uint64_t v79 = v21;
          _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v72, 0x26u);
        }
        int v63 = a3;
        if (v19) {
          v19(6, "%s:%i %s %lu bytes :", "NFDriverReadDieID", 7957, "Die ID :", v8[2] - 4);
        }
        uint64_t v22 = 0;
        uint64_t v66 = v17 + 4;
        do
        {
          unint64_t v23 = 0;
          __int16 v24 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v22)];
          do
          {
            unint64_t v25 = v23 + 1;
            unint64_t v26 = v23 + 1 + v22;
            int v27 = sprintf(v24, "0x%02X ", v66[v22 + v23]);
            if (v23 > 6) {
              break;
            }
            v24 += v27;
            ++v23;
          }
          while (v26 < v16);
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v28 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)unint64_t v72 = 136446210;
            unint64_t v73 = buf;
            _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s", v72, 0xCu);
          }
          if (v19) {
            v19(6, "%s", (const char *)buf);
          }
          v22 += v25;
        }
        while (v26 < v16);
        uint64_t v12 = 0;
        uint64_t v11 = v61;
        if (v64 && v63)
        {
          long long v81 = 0u;
          memset(buf, 0, sizeof(buf));
          unint64_t v29 = v8[2] - 4;
          uint64_t v30 = *(char **)v8;
          __int16 v31 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          char v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v31);
          int v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v34 = v8[2] - 4;
            *(_DWORD *)unint64_t v72 = 136315906;
            unint64_t v73 = (uint8_t *)"NFDriverReadDieID";
            __int16 v74 = 1024;
            int v75 = 7959;
            __int16 v76 = 2082;
            __int16 v77 = "Die ID :";
            __int16 v78 = 2048;
            uint64_t v79 = v34;
            _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v72, 0x26u);
          }
          if (v32) {
            v32(6, "%s:%i %s %lu bytes :", "NFDriverReadDieID", 7959, "Die ID :", v8[2] - 4);
          }
          if (v29)
          {
            uint64_t v35 = 0;
            __int16 v67 = v30 + 4;
            do
            {
              unint64_t v36 = 0;
              __int16 v37 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v35)];
              do
              {
                unint64_t v38 = v36 + 1;
                unint64_t v39 = v36 + 1 + v35;
                int v40 = sprintf(v37, "0x%02X ", v67[v35 + v36]);
                if (v36 > 6) {
                  break;
                }
                v37 += v40;
                ++v36;
              }
              while (v39 < v29);
              dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
              uint64_t v41 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)unint64_t v72 = 136446210;
                unint64_t v73 = buf;
                _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_DEFAULT, "%{public}s", v72, 0xCu);
              }
              if (v32) {
                v32(6, "%s", (const char *)buf);
              }
              v35 += v38;
            }
            while (v39 < v29);
          }
          size_t v42 = v8[2] - 4;
          *int v63 = v42;
          uint64_t v43 = malloc_type_calloc(1uLL, v42, 0x100004077774924uLL);
          void *v64 = v43;
          if (v43)
          {
            memcpy(v43, (const void *)(*(void *)v8 + 4), *v63);
            uint64_t v12 = 1;
          }
          else
          {
            uint64_t v12 = 0;
            *int v63 = 0;
          }
          uint64_t v11 = v61;
        }
      }
    }
    sub_2229BF93C((void **)v11);
  }
  else
  {
    uint64_t v13 = sub_2229C39B8(a1, 2558, 0, (uint64_t)v8);
    if (sub_2229BFAD8(v13))
    {
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v65 = a2;
      long long v81 = 0u;
      memset(buf, 0, sizeof(buf));
      unint64_t v44 = v8[2];
      uint64_t v68 = *(unsigned __int8 **)v8;
      uint64_t v45 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      long long v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      dispatch_get_specific(*v45);
      uint64_t v47 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v48 = v8[2];
        *(_DWORD *)unint64_t v72 = 136315906;
        unint64_t v73 = (uint8_t *)"NFDriverReadDieID";
        __int16 v74 = 1024;
        int v75 = 7935;
        __int16 v76 = 2082;
        __int16 v77 = "Die ID :";
        __int16 v78 = 2048;
        uint64_t v79 = v48;
        _os_log_impl(&dword_2229A5000, v47, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v72, 0x26u);
      }
      if (v46) {
        v46(6, "%s:%i %s %lu bytes :", "NFDriverReadDieID", 7935, "Die ID :", v8[2]);
      }
      unint64_t v62 = v8;
      if (v44)
      {
        uint64_t v49 = 0;
        do
        {
          unint64_t v50 = 0;
          unint64_t v51 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v49)];
          do
          {
            unint64_t v52 = v50 + 1;
            unint64_t v53 = v50 + 1 + v49;
            int v54 = sprintf(v51, "0x%02X ", v68[v49 + v50]);
            if (v50 > 6) {
              break;
            }
            v51 += v54;
            ++v50;
          }
          while (v53 < v44);
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          long long v55 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)unint64_t v72 = 136446210;
            unint64_t v73 = buf;
            _os_log_impl(&dword_2229A5000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", v72, 0xCu);
          }
          if (v46) {
            v46(6, "%s", (const char *)buf);
          }
          v49 += v52;
        }
        while (v53 < v44);
      }
      uint64_t v12 = 0;
      if (v65 && a3)
      {
        size_t v56 = v62[2];
        if (v56)
        {
          *a3 = v56;
          uint64_t v57 = malloc_type_calloc(1uLL, v56, 0x100004077774924uLL);
          void *v65 = v57;
          if (v57)
          {
            memcpy(v57, *(const void **)v62, *a3);
            uint64_t v12 = 1;
          }
          else
          {
            uint64_t v12 = 0;
            *a3 = 0;
          }
        }
        else
        {
          uint64_t v12 = 0;
          *a3 = 0;
          void *v65 = 0;
        }
      }
    }
  }
  sub_2229C3E74(&v69);
  sub_2229C3E74(&v70);
  return v12;
}

uint64_t NFDriverRedactLogging(uint64_t result)
{
  byte_26ABD841C = result;
  return result;
}

CFErrorRef NFDriverCreateErrorCode(CFIndex code)
{
  userInfoKeys[1] = *(void **)MEMORY[0x263EF8340];
  CFIndex v1 = code;
  switch((int)code)
  {
    case 0:
      uint64_t v2 = @"Success";
      break;
    case 1:
      uint64_t v2 = @"Stack error";
      break;
    case 2:
      uint64_t v2 = @"Firmware error";
      break;
    case 3:
      uint64_t v2 = @"Insufficient resource";
      break;
    case 4:
      uint64_t v2 = @"SE communication error";
      break;
    case 5:
      uint64_t v2 = @"Invalid parameter";
      break;
    case 6:
      uint64_t v2 = @"Target connection lost";
      break;
    case 7:
      uint64_t v2 = @"Aborted";
      break;
    case 8:
      uint64_t v2 = @"Unexpected result";
      break;
    case 9:
      uint64_t v2 = @"No syscfg cal";
      break;
    case 10:
      uint64_t v2 = @"No module cal";
      break;
    case 11:
      uint64_t v2 = @"No system cal";
      break;
    case 12:
      uint64_t v2 = @"Tag is non NDEF compliant";
      break;
    case 13:
      uint64_t v2 = @"Reboot required";
      break;
    case 14:
      uint64_t v2 = @"FW DL pending";
      break;
    case 15:
      uint64_t v2 = @"NDEF message size is over the limit";
      break;
    case 16:
      uint64_t v2 = @"Hardware is unresponsive";
      break;
    case 17:
      uint64_t v2 = @"FollowerID is unresponsive";
      break;
    case 18:
      uint64_t v2 = @"RF deactivated";
      break;
    case 19:
      uint64_t v2 = @"Feature not supported";
      break;
    case 20:
      uint64_t v2 = @"No response from tag";
      break;
    case 21:
      uint64_t v2 = @"Tag is halted";
      break;
    case 22:
      uint64_t v2 = @"SE OS reset";
      break;
    case 23:
      uint64_t v2 = @"Reader mode prohibit timer";
      break;
    case 24:
      uint64_t v2 = (__CFString *)CFStringCreateWithCString(0, "NFCC is in DL mode", 0x8000100u);
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  uint64_t v3 = (void *)*MEMORY[0x263EFFC70];
  userInfoValues = v2;
  userInfoKeys[0] = v3;
  CFErrorRef v4 = CFErrorCreateWithUserInfoKeysAndValues(0, @"com.apple.nfstack", v1, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
  CFRelease(v2);
  CFRelease(@"com.apple.nfstack");
  return v4;
}

char *NFDriverGetUniqueFDRKey(uint64_t a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v20 = 0;
  uint64_t v19 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)&v17))
  {
    int v16 = 0;
    unsigned int v15 = 0;
    if (!NFDriverReadDieID(a1, &v15, &v16) || (v16 == 16 ? (BOOL v4 = v15 == 0) : (BOOL v4 = 1), v4))
    {
      uint64_t v11 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to get DieID", "NFDriverGetUniqueFDRKey", 8104);
      }
      dispatch_get_specific(*v11);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v22 = "NFDriverGetUniqueFDRKey";
        __int16 v23 = 1024;
        int v24 = 8104;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get DieID", buf, 0x12u);
      }
      if (a2) {
        *a2 = 1;
      }
      if (v15) {
        free(v15);
      }
      return 0;
    }
    else
    {
      uint64_t v5 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0x100004077774924uLL);
      if (v5)
      {
        __int16 v6 = "%04X.%04X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
        char v7 = "%02X.%04X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
        if (v18 < 0x100)
        {
          __int16 v6 = "%04X.%02X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
          char v7 = "%02X.%02X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
        }
        if (v17 < 0x100) {
          __int16 v6 = v7;
        }
        snprintf(v5, 0x80uLL, v6, v17, v18, *v15, v15[1], v15[2], v15[3], v15[4], v15[5], v15[6], v15[7], v15[8], v15[9], v15[10], v15[11], v15[12], v15[13],
          v15[14],
          v15[15]);
      }
      free(v15);
    }
  }
  else
  {
    BOOL v8 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    char v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9) {
      v9(3, "%s:%i Failed to get driver info", "NFDriverGetUniqueFDRKey", 8096);
    }
    dispatch_get_specific(*v8);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = "NFDriverGetUniqueFDRKey";
      __int16 v23 = 1024;
      int v24 = 8096;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get driver info", buf, 0x12u);
    }
    uint64_t v5 = 0;
    if (a2) {
      *a2 = 1;
    }
  }
  return v5;
}

uint64_t NFDriverResetFWFlags(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  int v7 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v6))
  {
    if (HIDWORD(v6[0]) < 7) {
      return 0;
    }
    else {
      return NFDriverSetHeadlessMode(a1, 0) ^ 1;
    }
  }
  else
  {
    uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Fail to get controller info", "NFDriverResetFWFlags", 8262);
    }
    dispatch_get_specific(*v3);
    uint64_t v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      char v9 = "NFDriverResetFWFlags";
      __int16 v10 = 1024;
      int v11 = 8262;
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i Fail to get controller info", buf, 0x12u);
    }
    return 8;
  }
}

uint64_t NFDriverGetMultiTagState(uint64_t a1, unsigned char *a2, BOOL *a3, _DWORD *a4)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v52 = 0;
  unint64_t v53 = &v52;
  uint64_t v54 = 0x3800000000;
  long long v55 = 0u;
  long long v56 = 0u;
  int v8 = *(unsigned __int8 *)(a1 + 58);
  char v9 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8)
  {
    if (Logger) {
      Logger(6, "%s:%i Not supported on MWF", "NFDriverGetMultiTagState", 8280);
    }
    dispatch_get_specific(*v9);
    int v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v58 = "NFDriverGetMultiTagState";
      __int16 v59 = 1024;
      int v60 = 8280;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not supported on MWF", buf, 0x12u);
    }
    uint64_t v12 = 19;
  }
  else
  {
    if (Logger) {
      Logger(6, "%s:%i Multitag state query", "NFDriverGetMultiTagState", 8284);
    }
    dispatch_get_specific(*v9);
    uint64_t v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v58 = "NFDriverGetMultiTagState";
      __int16 v59 = 1024;
      int v60 = 8284;
      _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Multitag state query", buf, 0x12u);
    }
    v51[0] = MEMORY[0x263EF8330];
    v51[1] = 0x40000000;
    v51[2] = sub_2229DB7A0;
    v51[3] = &unk_26463B578;
    v51[4] = &v52;
    v51[5] = a1;
    char v14 = sub_2229D1CA4(a1, (uint64_t)v51);
    uint64_t v15 = sub_2229BFAD8(v14);
    if (v15)
    {
      uint64_t v16 = v15;
      if (v15 != 51)
      {
        dispatch_get_specific(*v9);
        uint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v17) {
          v17(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetMultiTagState", 8299, v16);
        }
        dispatch_get_specific(*v9);
        uint64_t v18 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          uint64_t v58 = "NFDriverGetMultiTagState";
          __int16 v59 = 1024;
          int v60 = 8299;
          __int16 v61 = 2048;
          *(void *)unint64_t v62 = v16;
          _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
        }
      }
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v12 = 0;
    }
    sub_2229BF93C((void **)v14);
    dispatch_get_specific(*v9);
    uint64_t v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19) {
      v19(6, "%s:%i MultiTag Enabled: %d, Running: %d", "NFDriverGetMultiTagState", 8309, v53[3] & 1, (*((unsigned __int8 *)v53 + 24) >> 1) & 1);
    }
    dispatch_get_specific(*v9);
    int v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v21 = *((unsigned __int8 *)v53 + 24);
      *(_DWORD *)buf = 136446978;
      uint64_t v58 = "NFDriverGetMultiTagState";
      __int16 v59 = 1024;
      int v60 = 8309;
      __int16 v61 = 1024;
      *(_DWORD *)unint64_t v62 = v21 & 1;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = (v21 >> 1) & 1;
      _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i MultiTag Enabled: %d, Running: %d", buf, 0x1Eu);
    }
    if (a2) {
      *a2 = v53[3] & 1;
    }
    if (a3) {
      *a3 = (v53[3] & 2) != 0;
    }
    if (a4)
    {
      bzero(a4, 0x300uLL);
      dispatch_get_specific(*v9);
      uint64_t v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22) {
        v22(6, "%s:%i Num Tags Detected=%d, Num Tags Not Interested=%d", "NFDriverGetMultiTagState", 8322, *((unsigned __int8 *)v53 + 25), *((unsigned __int8 *)v53 + 40));
      }
      dispatch_get_specific(*v9);
      __int16 v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *((unsigned __int8 *)v53 + 25);
        int v25 = *((unsigned __int8 *)v53 + 40);
        *(_DWORD *)buf = 136446978;
        uint64_t v58 = "NFDriverGetMultiTagState";
        __int16 v59 = 1024;
        int v60 = 8322;
        __int16 v61 = 1024;
        *(_DWORD *)unint64_t v62 = v24;
        *(_WORD *)&v62[4] = 1024;
        *(_DWORD *)&v62[6] = v25;
        _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Num Tags Detected=%d, Num Tags Not Interested=%d", buf, 0x1Eu);
      }
      unint64_t v26 = v53;
      unsigned int v50 = v12;
      if (*((unsigned char *)v53 + 25))
      {
        uint64_t v27 = 0;
        uint64_t v28 = a4;
        unint64_t v29 = 0;
        uint64_t v49 = v28;
        uint64_t v30 = v28 + 70;
        do
        {
          dispatch_get_specific(*v9);
          __int16 v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v31)
          {
            char v32 = (unsigned __int8 *)(v53[4] + v27);
            v31(6, "%s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "NFDriverGetMultiTagState", 8331, v29, *v32, v32[1], v32[2], v32[3], v32[4]);
          }
          dispatch_get_specific(*v9);
          int v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v34 = (unsigned __int8 *)(v53[4] + v27);
            int v35 = *v34;
            int v36 = v34[1];
            int v37 = v34[2];
            int v38 = v34[3];
            LODWORD(v34) = v34[4];
            *(_DWORD *)buf = 136448002;
            uint64_t v58 = "NFDriverGetMultiTagState";
            __int16 v59 = 1024;
            int v60 = 8331;
            __int16 v61 = 1024;
            *(_DWORD *)unint64_t v62 = v29;
            *(_WORD *)&v62[4] = 1024;
            *(_DWORD *)&v62[6] = v35;
            __int16 v63 = 1024;
            int v64 = v36;
            __int16 v65 = 1024;
            int v66 = v37;
            __int16 v67 = 1024;
            int v68 = v38;
            __int16 v69 = 1024;
            int v70 = (int)v34;
            _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
          }
          if (v29 <= 1)
          {
            unint64_t v39 = (unsigned __int8 *)(v53[4] + v27);
            *((_DWORD *)v30 - 20) = sub_2229C796C(*v39);
            unsigned char *v30 = 4;
            *((_DWORD *)v30 - 4) = *(_DWORD *)(v39 + 1);
          }
          ++v29;
          unint64_t v26 = v53;
          v27 += 5;
          v30 += 96;
        }
        while (v29 < *((unsigned __int8 *)v53 + 25));
        a4 = v49;
        uint64_t v12 = v50;
      }
      if (*((unsigned char *)v26 + 40))
      {
        uint64_t v40 = 0;
        unint64_t v41 = 0;
        size_t v42 = a4 + 146;
        do
        {
          dispatch_get_specific(*v9);
          uint64_t v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v43) {
            v43(6, "%s:%i Not interested Tag (%d) rfTech = %d", "NFDriverGetMultiTagState", 8340, v41, *(unsigned __int8 *)(v53[6] + v40));
          }
          dispatch_get_specific(*v9);
          unint64_t v44 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            int v45 = *(unsigned __int8 *)(v53[6] + v40);
            *(_DWORD *)buf = 136446978;
            uint64_t v58 = "NFDriverGetMultiTagState";
            __int16 v59 = 1024;
            int v60 = 8340;
            __int16 v61 = 1024;
            *(_DWORD *)unint64_t v62 = v41;
            *(_WORD *)&v62[4] = 1024;
            *(_DWORD *)&v62[6] = v45;
            _os_log_impl(&dword_2229A5000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not interested Tag (%d) rfTech = %d", buf, 0x1Eu);
          }
          if (v41 <= 1) {
            _DWORD *v42 = sub_2229C796C(*(unsigned __int8 *)(v53[6] + v40));
          }
          ++v41;
          unint64_t v26 = v53;
          v40 += 3;
          v42 += 24;
        }
        while (v41 < *((unsigned __int8 *)v53 + 40));
        uint64_t v12 = v50;
      }
    }
    else
    {
      unint64_t v26 = v53;
    }
    long long v46 = (void *)v26[4];
    if (v46)
    {
      free(v46);
      unint64_t v26 = v53;
      void v53[4] = 0;
    }
    uint64_t v47 = (void *)v26[6];
    if (v47)
    {
      free(v47);
      v53[6] = 0;
    }
  }
  _Block_object_dispose(&v52, 8);
  return v12;
}

uint64_t sub_2229DB7A0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

void sub_2229DB7D8(uint64_t a1, void **a2, int *a3, unsigned int a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  int v7 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    int v9 = 0;
    if (a3 && !a4) {
      int v9 = *a3;
    }
    Logger(6, "%s:%i Status = 0x%x, param=%d", "_Callback_phLibNfc_Mgt_GetNfccParams", 8145, a4, v9);
  }
  dispatch_get_specific(*v7);
  __int16 v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 0;
    if (a3 && !a4) {
      int v11 = *a3;
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 8145;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = a4;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v11;
    _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Status = 0x%x, param=%d", buf, 0x1Eu);
  }
  if (a2)
  {
    if (!a3 || a4) {
      goto LABEL_70;
    }
    switch(*a3)
    {
      case 0:
        uint64_t v13 = a2[1];
        if (v13)
        {
          long long v14 = *(_OWORD *)(a3 + 2);
          long long v15 = *(_OWORD *)(a3 + 6);
          v13[8] = a3[10];
          *(_OWORD *)uint64_t v13 = v14;
          *((_OWORD *)v13 + 1) = v15;
        }
        goto LABEL_70;
      case 1:
        if (a2[1])
        {
          int v45 = (uint64_t *)a2[1];
          long long v57 = 0u;
          memset(buf, 0, sizeof(buf));
          unint64_t v16 = a3[4];
          uint64_t v47 = *((void *)a3 + 1);
          dispatch_get_specific(*v7);
          uint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v7);
          uint64_t v18 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = a3[4];
            *(_DWORD *)uint64_t v48 = 136315906;
            uint64_t v49 = (uint8_t *)"_Callback_phLibNfc_Mgt_GetNfccParams";
            __int16 v50 = 1024;
            int v51 = 8232;
            __int16 v52 = 2082;
            unint64_t v53 = "SMB log: ";
            __int16 v54 = 2048;
            uint64_t v55 = v19;
            _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v48, 0x26u);
          }
          long long v46 = a2;
          if (v17) {
            v17(6, "%s:%i %s %lu bytes :", "_Callback_phLibNfc_Mgt_GetNfccParams", 8232, "SMB log: ", a3[4]);
          }
          if (v16)
          {
            uint64_t v20 = 0;
            do
            {
              unint64_t v21 = 0;
              uint64_t v22 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v20)];
              do
              {
                unint64_t v23 = v21 + 1;
                unint64_t v24 = v21 + 1 + v20;
                int v25 = sprintf(v22, "0x%02X ", *(unsigned __int8 *)(v47 + v20 + v21));
                if (v21 > 6) {
                  break;
                }
                v22 += v25;
                ++v21;
              }
              while (v24 < v16);
              dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
              unint64_t v26 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t v48 = 136446210;
                uint64_t v49 = buf;
                _os_log_impl(&dword_2229A5000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", v48, 0xCu);
              }
              if (v17) {
                v17(6, "%s", (const char *)buf);
              }
              v20 += v23;
            }
            while (v24 < v16);
          }
          a2 = v46;
          *int v45 = NFDataCreateWithBytes();
        }
        goto LABEL_70;
      case 3:
      case 11:
        uint64_t v12 = a2[1];
        if (v12) {
          *uint64_t v12 = *((void *)a3 + 1);
        }
        goto LABEL_70;
      case 6:
        uint64_t v27 = a2[1];
        if (v27)
        {
          int v28 = a3[2];
          v27[2] = *((_WORD *)a3 + 6);
          goto LABEL_53;
        }
        goto LABEL_70;
      case 7:
        uint64_t v34 = a2[1];
        if (v34)
        {
          long long v35 = *(_OWORD *)(a3 + 6);
          *uint64_t v34 = *(_OWORD *)(a3 + 2);
          v34[1] = v35;
          if (*((unsigned char *)a3 + 9) && *((void *)a3 + 2))
          {
            int v36 = malloc_type_calloc(*((unsigned __int8 *)a3 + 9), 5uLL, 0x1000040957D8CC4uLL);
            *((void *)v34 + 1) = v36;
            if (v36)
            {
              memcpy(v36, *((const void **)a3 + 2), 5 * *((unsigned __int8 *)a3 + 9));
            }
            else
            {
              dispatch_get_specific(*v7);
              uint64_t v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v40) {
                v40(3, "%s:%i Resource error", "_Callback_phLibNfc_Mgt_GetNfccParams", 8182);
              }
              dispatch_get_specific(*v7);
              unint64_t v41 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 8182;
                _os_log_impl(&dword_2229A5000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Resource error", buf, 0x12u);
              }
            }
          }
          if (*((unsigned char *)a3 + 24) && *((void *)a3 + 4))
          {
            size_t v42 = malloc_type_calloc(*((unsigned __int8 *)a3 + 24), 3uLL, 0x100004033FC2DF1uLL);
            *((void *)v34 + 3) = v42;
            if (v42)
            {
              memcpy(v42, *((const void **)a3 + 4), 3 * *((unsigned __int8 *)a3 + 24));
            }
            else
            {
              dispatch_get_specific(*v7);
              uint64_t v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v43) {
                v43(3, "%s:%i Resource error", "_Callback_phLibNfc_Mgt_GetNfccParams", 0x2000);
              }
              dispatch_get_specific(*v7);
              unint64_t v44 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 0x2000;
                _os_log_impl(&dword_2229A5000, v44, OS_LOG_TYPE_ERROR, "%{public}s:%i Resource error", buf, 0x12u);
              }
            }
          }
        }
        goto LABEL_70;
      case 8:
        uint64_t v27 = a2[1];
        if (v27)
        {
          int v28 = a3[2];
LABEL_53:
          *(_DWORD *)uint64_t v27 = v28;
        }
        goto LABEL_70;
      case 9:
        unint64_t v29 = a2[1];
        if (v29) {
          *unint64_t v29 = *((_WORD *)a3 + 4);
        }
        goto LABEL_70;
      case 10:
        uint64_t v30 = a2[1];
        if (!v30) {
          goto LABEL_70;
        }
        LODWORD(v31) = *((unsigned __int16 *)a3 + 4);
        _WORD *v30 = v31;
        if (v31 < 0x41)
        {
          if (!v31)
          {
LABEL_70:
            sub_2229BF9CC(a2, a4);
            sub_2229BF93C(a2);
            return;
          }
        }
        else
        {
          dispatch_get_specific(*v7);
          char v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v32) {
            v32(3, "%s:%i Not enough space allocated to store all page counters", "_Callback_phLibNfc_Mgt_GetNfccParams", 8219);
          }
          dispatch_get_specific(*v7);
          int v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 8219;
            _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Not enough space allocated to store all page counters", buf, 0x12u);
          }
          LODWORD(v31) = 64;
          _WORD *v30 = 64;
        }
        int v37 = a3 + 3;
        uint64_t v31 = v31;
        int v38 = v30 + 2;
        do
        {
          int v39 = *v37++;
          *v38++ = v39;
          --v31;
        }
        while (v31);
        goto LABEL_70;
      default:
        goto LABEL_70;
    }
  }
}

uint64_t NFDriverGetPowerCounter(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  BOOL v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Power state tracking query", "NFDriverGetPowerCounter", 8361);
  }
  dispatch_get_specific(*v4);
  __int16 v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "NFDriverGetPowerCounter";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 8361;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Power state tracking query", buf, 0x12u);
  }
  if (a2)
  {
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x4000000000;
    long long v87 = 0u;
    long long v88 = 0u;
    int v89 = 0;
    v81[0] = MEMORY[0x263EF8330];
    v81[1] = 0x40000000;
    v81[2] = sub_2229DCE34;
    v81[3] = &unk_26463B5A0;
    v81[4] = buf;
    v81[5] = a1;
    int v7 = sub_2229D1CA4(a1, (uint64_t)v81);
    uint64_t v8 = sub_2229BFAD8(v7);
    if (v8)
    {
      uint64_t v9 = v8;
      if (v8 == 51)
      {
        dispatch_get_specific(*v4);
        __int16 v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v10) {
          v10(3, "%s:%i Not supported", "NFDriverGetPowerCounter", 8383);
        }
        dispatch_get_specific(*v4);
        int v11 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_47;
        }
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8383;
        uint64_t v12 = "%{public}s:%i Not supported";
        uint64_t v13 = v11;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      }
      else
      {
        dispatch_get_specific(*v4);
        uint64_t v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v20) {
          v20(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetPowerCounter", 8386, v9);
        }
        dispatch_get_specific(*v4);
        unint64_t v21 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t block = 136446722;
          *(void *)&block[4] = "NFDriverGetPowerCounter";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 8386;
          *(_WORD *)&block[18] = 2048;
          *(void *)&block[20] = v9;
          _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", block, 0x1Cu);
        }
        LOWORD(v79[0]) = 0;
        if (sub_2229C8D00(a1, 0, 0, 0, v79, 0))
        {
          if (LOWORD(v79[0]) == 44 || LOWORD(v79[0]) == 34)
          {
            dispatch_get_specific(*v4);
            uint64_t v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v22) {
              v22(3, "%s:%i CRC error or response timeout - 0x%04llx", "NFDriverGetPowerCounter", 8395, v9);
            }
            dispatch_get_specific(*v4);
            unint64_t v23 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t block = 136446722;
              *(void *)&block[4] = "NFDriverGetPowerCounter";
              *(_WORD *)&block[12] = 1024;
              *(_DWORD *)&block[14] = 8395;
              *(_WORD *)&block[18] = 2048;
              *(void *)&block[20] = v9;
              _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i CRC error or response timeout - 0x%04llx", block, 0x1Cu);
            }
            unint64_t v24 = *(NSObject **)(*(void *)(a1 + 24) + 544);
            *(void *)uint64_t block = MEMORY[0x263EF8330];
            *(void *)&void block[8] = 0x40000000;
            *(void *)&block[16] = sub_2229C31BC;
            *(void *)&block[24] = &unk_26463ADD8;
            *(void *)unint64_t v83 = a1;
            dispatch_async(v24, block);
            NFDriverSimulateCrash(a1, 57005, (uint64_t)"NFDriverGetPowerCounter: CRC error or response timeout");
          }
          goto LABEL_47;
        }
        dispatch_get_specific(*v4);
        uint64_t v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v31) {
          v31(5, "%s:%i Get stack breadcrumb failed", "NFDriverGetPowerCounter", 8391);
        }
        dispatch_get_specific(*v4);
        char v32 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_47;
        }
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8391;
        uint64_t v12 = "%{public}s:%i Get stack breadcrumb failed";
        uint64_t v13 = v32;
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      }
      _os_log_impl(&dword_2229A5000, v13, v14, v12, block, 0x12u);
LABEL_47:
      uint64_t v15 = 1;
LABEL_118:
      sub_2229BF93C((void **)v7);
      _Block_object_dispose(buf, 8);
      return v15;
    }
    unsigned int v16 = *(_DWORD *)(*(void *)&buf[8] + 24);
    dispatch_get_specific(*v4);
    uint64_t v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16 < 0x3FFFF)
    {
      if (v17) {
        v17(6, "%s:%i Idle=%d", "NFDriverGetPowerCounter", 8405, *(_DWORD *)(*(void *)&buf[8] + 24));
      }
      dispatch_get_specific(*v4);
      int v25 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = *(_DWORD *)(*(void *)&buf[8] + 24);
        *(_DWORD *)uint64_t block = 136446722;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8405;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v26;
        _os_log_impl(&dword_2229A5000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Idle=%d", block, 0x18u);
      }
      uint64_t v15 = 0;
      int v19 = 100 * *(_DWORD *)(*(void *)&buf[8] + 24);
    }
    else
    {
      if (v17) {
        v17(4, "%s:%i Idle counter overflown", "NFDriverGetPowerCounter", 8401);
      }
      dispatch_get_specific(*v4);
      uint64_t v18 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8401;
        _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i Idle counter overflown", block, 0x12u);
      }
      uint64_t v15 = 15;
      int v19 = -1;
    }
    *(_DWORD *)a2 = v19;
    unsigned int v27 = *(_DWORD *)(*(void *)&buf[8] + 28);
    dispatch_get_specific(*v4);
    int v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v27 < 0x3FFF)
    {
      if (v28) {
        v28(6, "%s:%i RF=%d", "NFDriverGetPowerCounter", 8414, *(_DWORD *)(*(void *)&buf[8] + 28));
      }
      dispatch_get_specific(*v4);
      int v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = *(_DWORD *)(*(void *)&buf[8] + 28);
        *(_DWORD *)uint64_t block = 136446722;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8414;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v34;
        _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i RF=%d", block, 0x18u);
      }
      int v30 = 100 * *(_DWORD *)(*(void *)&buf[8] + 28);
    }
    else
    {
      if (v28) {
        v28(4, "%s:%i RF counter overflown", "NFDriverGetPowerCounter", 8410);
      }
      dispatch_get_specific(*v4);
      unint64_t v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8410;
        _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i RF counter overflown", block, 0x12u);
      }
      uint64_t v15 = 15;
      int v30 = -1;
    }
    *(_DWORD *)(a2 + 4) = v30;
    if (*(unsigned char *)(a1 + 56))
    {
      unsigned int v35 = *(_DWORD *)(*(void *)&buf[8] + 32);
      dispatch_get_specific(*v4);
      int v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v35 >= 0xFFFF)
      {
        if (v36) {
          v36(4, "%s:%i MultiTag false detect counter overflown", "NFDriverGetPowerCounter", 8421);
        }
        dispatch_get_specific(*v4);
        int v37 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_69;
        }
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8421;
        int v38 = "%{public}s:%i MultiTag false detect counter overflown";
LABEL_68:
        _os_log_impl(&dword_2229A5000, v37, OS_LOG_TYPE_ERROR, v38, block, 0x12u);
LABEL_69:
        uint64_t v15 = 15;
        int v45 = -1;
        goto LABEL_80;
      }
      if (v36) {
        v36(6, "%s:%i MultiTag-FC=%d", "NFDriverGetPowerCounter", 8425, *(_DWORD *)(*(void *)&buf[8] + 32));
      }
      dispatch_get_specific(*v4);
      long long v46 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        int v47 = *(_DWORD *)(*(void *)&buf[8] + 32);
        *(_DWORD *)uint64_t block = 136446722;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8425;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v47;
        uint64_t v48 = "%{public}s:%i MultiTag-FC=%d";
LABEL_78:
        _os_log_impl(&dword_2229A5000, v46, OS_LOG_TYPE_DEFAULT, v48, block, 0x18u);
      }
    }
    else
    {
      uint64_t v39 = *(void *)(a1 + 24);
      if (*(void *)(v39 + 680))
      {
        mach_continuous_time();
        *(void *)(*(void *)(a1 + 24) + 688) += GetElapsedTimeInMillisecondsFromMachTime();
        uint64_t v40 = mach_continuous_time();
        uint64_t v39 = *(void *)(a1 + 24);
        *(void *)(v39 + 680) = v40;
      }
      *(void *)(a2 + 40) = *(void *)(v39 + 688) / 0x3E8uLL;
      unint64_t v41 = *(void **)(a1 + 24);
      v41[86] = 0;
      if (v41[87])
      {
        mach_continuous_time();
        *(void *)(*(void *)(a1 + 24) + 704) += GetElapsedTimeInMillisecondsFromMachTime();
        uint64_t v42 = mach_continuous_time();
        unint64_t v41 = *(void **)(a1 + 24);
        v41[87] = v42;
      }
      *(void *)(a2 + 32) = v41[88] / 0x3E8uLL;
      *(void *)(*(void *)(a1 + 24) + 704) = 0;
      unsigned int v43 = *(_DWORD *)(*(void *)&buf[8] + 32);
      dispatch_get_specific(*v4);
      unint64_t v44 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v43 >= 0xFFFF)
      {
        if (v44) {
          v44(4, "%s:%i LPCD false detect counter overflown", "NFDriverGetPowerCounter", 8455);
        }
        dispatch_get_specific(*v4);
        int v37 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_69;
        }
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8455;
        int v38 = "%{public}s:%i LPCD false detect counter overflown";
        goto LABEL_68;
      }
      if (v44) {
        v44(6, "%s:%i LPCD-FC=%d", "NFDriverGetPowerCounter", 8459, *(_DWORD *)(*(void *)&buf[8] + 32));
      }
      dispatch_get_specific(*v4);
      long long v46 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        int v49 = *(_DWORD *)(*(void *)&buf[8] + 32);
        *(_DWORD *)uint64_t block = 136446722;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8459;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v49;
        uint64_t v48 = "%{public}s:%i LPCD-FC=%d";
        goto LABEL_78;
      }
    }
    int v45 = *(_DWORD *)(*(void *)&buf[8] + 32);
LABEL_80:
    *(_DWORD *)(a2 + 24) = v45;
    if (*(_DWORD *)(*(void *)&buf[8] + 40) == -1)
    {
      dispatch_get_specific(*v4);
      __int16 v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v54) {
        v54(4, "%s:%i SE uptime counter overflown", "NFDriverGetPowerCounter", 8468);
      }
      dispatch_get_specific(*v4);
      uint64_t v55 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8468;
        _os_log_impl(&dword_2229A5000, v55, OS_LOG_TYPE_ERROR, "%{public}s:%i SE uptime counter overflown", block, 0x12u);
      }
      *(_DWORD *)(a2 + 8) = -1;
      uint64_t v15 = 15;
      goto LABEL_103;
    }
    if (*(unsigned char *)(*(void *)&buf[8] + 38))
    {
      dispatch_get_specific(*v4);
      __int16 v50 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v50) {
        v50(4, "%s:%i SE uptime failed to be queried, power=%d, mailbox=%d", "NFDriverGetPowerCounter", 8472, *(unsigned __int8 *)(*(void *)&buf[8] + 36), *(unsigned __int8 *)(*(void *)&buf[8] + 37));
      }
      dispatch_get_specific(*v4);
      int v51 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        int v52 = *(unsigned __int8 *)(*(void *)&buf[8] + 36);
        int v53 = *(unsigned __int8 *)(*(void *)&buf[8] + 37);
        *(_DWORD *)uint64_t block = 136446978;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8472;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v52;
        *(_WORD *)&block[24] = 1024;
        *(_DWORD *)&block[26] = v53;
        _os_log_impl(&dword_2229A5000, v51, OS_LOG_TYPE_ERROR, "%{public}s:%i SE uptime failed to be queried, power=%d, mailbox=%d", block, 0x1Eu);
      }
      *(_DWORD *)(a2 + 8) = -1;
      uint64_t v15 = 4;
      goto LABEL_103;
    }
    memset(v79, 0, sizeof(v79));
    int v80 = 0;
    NFDriverGetControllerInfo(a1, (uint64_t)v79);
    unsigned int v56 = HIDWORD(v79[0]) - 14;
    dispatch_get_specific(*v4);
    long long v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v56 > 4)
    {
      if (v57) {
        v57(6, "%s:%i SE=%d, power=%d, mailbox=%d", "NFDriverGetPowerCounter", 8491, *(_DWORD *)(*(void *)&buf[8] + 40), *(unsigned __int8 *)(*(void *)&buf[8] + 36), *(unsigned __int8 *)(*(void *)&buf[8] + 37));
      }
      dispatch_get_specific(*v4);
      __int16 v67 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_102;
      }
      int v68 = *(_DWORD *)(*(void *)&buf[8] + 40);
      int v69 = *(unsigned __int8 *)(*(void *)&buf[8] + 36);
      int v70 = *(unsigned __int8 *)(*(void *)&buf[8] + 37);
      *(_DWORD *)uint64_t block = 136447234;
      *(void *)&block[4] = "NFDriverGetPowerCounter";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 8491;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v68;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = v69;
      *(_WORD *)&block[30] = 1024;
      *(_DWORD *)unint64_t v83 = v70;
      int v64 = "%{public}s:%i SE=%d, power=%d, mailbox=%d";
      __int16 v65 = v67;
      uint32_t v66 = 36;
    }
    else
    {
      if (v57) {
        v57(6, "%s:%i SE=%d, JCOP=%d eUICC=%d power=%d, mailbox=%d", "NFDriverGetPowerCounter", 8488, *(_DWORD *)(*(void *)&buf[8] + 40), *(_DWORD *)(*(void *)&buf[8] + 44), *(_DWORD *)(*(void *)&buf[8] + 48), *(unsigned __int8 *)(*(void *)&buf[8] + 36), *(unsigned __int8 *)(*(void *)&buf[8] + 37));
      }
      dispatch_get_specific(*v4);
      uint64_t v58 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_102;
      }
      int v59 = *(_DWORD *)(*(void *)&buf[8] + 40);
      int v60 = *(_DWORD *)(*(void *)&buf[8] + 44);
      int v61 = *(_DWORD *)(*(void *)&buf[8] + 48);
      int v62 = *(unsigned __int8 *)(*(void *)&buf[8] + 36);
      int v63 = *(unsigned __int8 *)(*(void *)&buf[8] + 37);
      *(_DWORD *)uint64_t block = 136447746;
      *(void *)&block[4] = "NFDriverGetPowerCounter";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 8488;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v59;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = v60;
      *(_WORD *)&block[30] = 1024;
      *(_DWORD *)unint64_t v83 = v61;
      *(_WORD *)&uint8_t v83[4] = 1024;
      *(_DWORD *)&v83[6] = v62;
      __int16 v84 = 1024;
      int v85 = v63;
      int v64 = "%{public}s:%i SE=%d, JCOP=%d eUICC=%d power=%d, mailbox=%d";
      __int16 v65 = v58;
      uint32_t v66 = 48;
    }
    _os_log_impl(&dword_2229A5000, v65, OS_LOG_TYPE_DEFAULT, v64, block, v66);
LABEL_102:
    *(_DWORD *)(a2 + 8) = 100 * *(_DWORD *)(*(void *)&buf[8] + 40);
LABEL_103:
    uint64_t v71 = *(void *)&buf[8];
    int v72 = *(_DWORD *)(*(void *)&buf[8] + 44);
    if (v72 == -1)
    {
      dispatch_get_specific(*v4);
      unint64_t v73 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v73) {
        v73(4, "%s:%i JCOP uptime counter overflown", "NFDriverGetPowerCounter", 8498);
      }
      dispatch_get_specific(*v4);
      __int16 v74 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8498;
        _os_log_impl(&dword_2229A5000, v74, OS_LOG_TYPE_ERROR, "%{public}s:%i JCOP uptime counter overflown", block, 0x12u);
      }
      *(_DWORD *)(a2 + 12) = -1;
      uint64_t v15 = 15;
      uint64_t v71 = *(void *)&buf[8];
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 100 * v72;
    }
    int v75 = *(_DWORD *)(v71 + 48);
    if (v75 == -1)
    {
      dispatch_get_specific(*v4);
      __int16 v76 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v76) {
        v76(4, "%s:%i JCOP uptime counter overflown", "NFDriverGetPowerCounter", 8506);
      }
      dispatch_get_specific(*v4);
      __int16 v77 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8506;
        _os_log_impl(&dword_2229A5000, v77, OS_LOG_TYPE_ERROR, "%{public}s:%i JCOP uptime counter overflown", block, 0x12u);
      }
      *(_DWORD *)(a2 + 16) = -1;
      uint64_t v15 = 15;
      uint64_t v71 = *(void *)&buf[8];
    }
    else
    {
      *(_DWORD *)(a2 + 16) = 100 * v75;
    }
    *(unsigned char *)(a2 + 20) = *(unsigned char *)(v71 + 36) != 0;
    *(unsigned char *)(a2 + 21) = *(unsigned char *)(v71 + 37) != 0;
    goto LABEL_118;
  }
  return 5;
}

uint64_t sub_2229DCE34(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverGetFlashWriteCounter(uint64_t a1, int *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  char v36 = 24;
  __int16 v35 = -24319;
  uint64_t v4 = 3;
  uint64_t v5 = sub_2229C3DD8(3u, &v35);
  int v34 = (void **)v5;
  __int16 v6 = sub_2229C3DD8(0x10u, 0);
  int v33 = (void **)v6;
  if (v5)
  {
    uint64_t v7 = (uint64_t)v6;
    if (v6)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i NFCC flash write query", "NFDriverGetFlashWriteCounter", 8537);
      }
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverGetFlashWriteCounter";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 8537;
        _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i NFCC flash write query", buf, 0x12u);
      }
      __int16 v10 = sub_2229C39B8(a1, 37026, (uint64_t)v5, v7);
      if (sub_2229BFAD8(v10))
      {
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v11) {
          v11(3, "%s:%i Failed to read write counter", "NFDriverGetFlashWriteCounter", 8541);
        }
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "NFDriverGetFlashWriteCounter";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 8541;
          _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read write counter", buf, 0x12u);
        }
        uint64_t v4 = 1;
      }
      else
      {
        unint64_t v13 = *(unsigned int *)(v7 + 8);
        uint64_t v14 = *(void *)v7;
        if (v13 >= 8 && v14)
        {
          int v15 = *(_DWORD *)(v14 + 4);
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          unsigned int v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v16) {
            v16(6, "%s:%i Write counter is 0x%x (length = %d)", "NFDriverGetFlashWriteCounter", 8550, v15, *(_DWORD *)(v7 + 8));
          }
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v17 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = *(_DWORD *)(v7 + 8);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = "NFDriverGetFlashWriteCounter";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 8550;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v15;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = v18;
            _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Write counter is 0x%x (length = %d)", buf, 0x1Eu);
          }
          uint64_t v4 = 0;
          if (a2) {
            *a2 = v15;
          }
        }
        else
        {
          uint64_t v32 = *(void *)v7;
          long long v46 = 0u;
          memset(buf, 0, sizeof(buf));
          int v19 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v19);
          unint64_t v21 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v22 = *(unsigned int *)(v7 + 8);
            *(_DWORD *)int v37 = 136315906;
            int v38 = (uint8_t *)"NFDriverGetFlashWriteCounter";
            __int16 v39 = 1024;
            int v40 = 8555;
            __int16 v41 = 2082;
            uint64_t v42 = "Unexpected write counter reply";
            __int16 v43 = 2048;
            uint64_t v44 = v22;
            _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v37, 0x26u);
          }
          uint64_t v31 = v10;
          if (v20) {
            v20(3, "%s:%i %s %lu bytes :", "NFDriverGetFlashWriteCounter", 8555, "Unexpected write counter reply", *(unsigned int *)(v7 + 8));
          }
          if (v13)
          {
            uint64_t v23 = 0;
            do
            {
              unint64_t v24 = 0;
              int v25 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v23)];
              do
              {
                unint64_t v26 = v24 + 1;
                unint64_t v27 = v24 + 1 + v23;
                int v28 = sprintf(v25, "0x%02X ", *(unsigned __int8 *)(v32 + v23 + v24));
                if (v24 > 6) {
                  break;
                }
                v25 += v28;
                ++v24;
              }
              while (v27 < v13);
              dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
              unint64_t v29 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v37 = 136446210;
                int v38 = buf;
                _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s", v37, 0xCu);
              }
              if (v20) {
                v20(3, "%s", (const char *)buf);
              }
              v23 += v26;
            }
            while (v27 < v13);
          }
          uint64_t v4 = 8;
          __int16 v10 = v31;
        }
      }
      sub_2229BF93C((void **)v10);
    }
  }
  sub_2229C3E74(&v34);
  sub_2229C3E74(&v33);
  return v4;
}

void NFDriverDumpLPMDebugLog(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v2[2] + 8));
  uint64_t v3 = v2[2];
  ++*(void *)v3;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229DD4EC;
  block[3] = &unk_26463B5C0;
  block[4] = a1;
  void block[5] = v2;
  dispatch_async_and_wait(v4, block);
  if (sub_2229BFAD8(v2))
  {
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i > phLibNfc_Mgt_GetNfccParams FAILED", "NFDriverDumpLPMDebugLog", 9006);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v10 = "NFDriverDumpLPMDebugLog";
      __int16 v11 = 1024;
      int v12 = 9006;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i > phLibNfc_Mgt_GetNfccParams FAILED", buf, 0x12u);
    }
  }
  sub_2229BF93C((void **)v2);
}

void sub_2229DD4EC(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i > phLibNfc_Mgt_GetNfccParams", "NFDriverDumpLPMDebugLog_block_invoke", 8994);
  }
  dispatch_get_specific(*v2);
  uint64_t v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v10 = "NFDriverDumpLPMDebugLog_block_invoke";
    __int16 v11 = 1024;
    int v12 = 8994;
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i > phLibNfc_Mgt_GetNfccParams", buf, 0x12u);
  }
  unsigned int NfccParams = phLibNfc_Mgt_GetNfccParams();
  if (NfccParams != 13)
  {
    unsigned int v6 = NfccParams;
    dispatch_get_specific(*v2);
    uint64_t v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7) {
      v7(3, "%s:%i Failed : 0x%x", "NFDriverDumpLPMDebugLog_block_invoke", 8998, v6);
    }
    dispatch_get_specific(*v2);
    uint64_t v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v10 = "NFDriverDumpLPMDebugLog_block_invoke";
      __int16 v11 = 1024;
      int v12 = 8998;
      __int16 v13 = 1024;
      unsigned int v14 = v6;
      _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed : 0x%x", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v6);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229DD6C0(uint64_t a1, void **a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i **** getNfccParamsCb: STATUS = 0x%02X ****", "_Callback_GetNfccParamsCb", 8919, a4);
  }
  dispatch_get_specific(*v7);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    int v49 = "_Callback_GetNfccParamsCb";
    __int16 v50 = 1024;
    int v51 = 8919;
    __int16 v52 = 1024;
    unsigned int v53 = a4;
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i **** getNfccParamsCb: STATUS = 0x%02X ****", buf, 0x18u);
  }
  if (a3 && !a4)
  {
    dispatch_get_specific(*v7);
    __int16 v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10) {
      v10(6, "%s:%i > eNfccParam: %d", "_Callback_GetNfccParamsCb", 8922, *a3);
    }
    dispatch_get_specific(*v7);
    __int16 v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v12 = *a3;
      *(_DWORD *)buf = 136446722;
      int v49 = "_Callback_GetNfccParamsCb";
      __int16 v50 = 1024;
      int v51 = 8922;
      __int16 v52 = 1024;
      unsigned int v53 = v12;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i > eNfccParam: %d", buf, 0x18u);
    }
    unsigned int v13 = *a3;
    dispatch_get_specific(*v7);
    unsigned int v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13 == 5)
    {
      if (v14) {
        v14(6, "%s:%i \t ### HLM debug Log ###", "_Callback_GetNfccParamsCb", 8925);
      }
      dispatch_get_specific(*v7);
      uint64_t v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        int v49 = "_Callback_GetNfccParamsCb";
        __int16 v50 = 1024;
        int v51 = 8925;
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t ### HLM debug Log ###", buf, 0x12u);
      }
      dispatch_get_specific(*v7);
      unsigned int v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16) {
        v16(6, "%s:%i \t RAM buffer overflow status  : %d", "_Callback_GetNfccParamsCb", 8926, *((unsigned __int8 *)a3 + 9));
      }
      dispatch_get_specific(*v7);
      uint64_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = *((unsigned __int8 *)a3 + 9);
        *(_DWORD *)buf = 136446722;
        int v49 = "_Callback_GetNfccParamsCb";
        __int16 v50 = 1024;
        int v51 = 8926;
        __int16 v52 = 1024;
        unsigned int v53 = v18;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t RAM buffer overflow status  : %d", buf, 0x18u);
      }
      dispatch_get_specific(*v7);
      int v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19) {
        v19(6, "%s:%i \t FLASH buffer overflow status: %d", "_Callback_GetNfccParamsCb", 8927, *((unsigned __int8 *)a3 + 8));
      }
      dispatch_get_specific(*v7);
      uint64_t v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v21 = *((unsigned __int8 *)a3 + 8);
        *(_DWORD *)buf = 136446722;
        int v49 = "_Callback_GetNfccParamsCb";
        __int16 v50 = 1024;
        int v51 = 8927;
        __int16 v52 = 1024;
        unsigned int v53 = v21;
        _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t FLASH buffer overflow status: %d", buf, 0x18u);
      }
      dispatch_get_specific(*v7);
      uint64_t v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22) {
        v22(6, "%s:%i \t Log is empty!", "_Callback_GetNfccParamsCb", 8928);
      }
      dispatch_get_specific(*v7);
      uint64_t v23 = NFSharedLogGetLogger();
      a4 = 0;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        int v49 = "_Callback_GetNfccParamsCb";
        __int16 v50 = 1024;
        int v51 = 8928;
        unint64_t v24 = "%{public}s:%i \t Log is empty!";
LABEL_71:
        uint64_t v42 = v23;
        uint32_t v43 = 18;
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (v14) {
      v14(6, "%s:%i Wrong 'eNfccParam' received!", "_Callback_GetNfccParamsCb", 8932);
    }
    dispatch_get_specific(*v7);
    uint64_t v44 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v49 = "_Callback_GetNfccParamsCb";
      __int16 v50 = 1024;
      int v51 = 8932;
      _os_log_impl(&dword_2229A5000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Wrong 'eNfccParam' received!", buf, 0x12u);
    }
    a4 = 255;
LABEL_59:
    dispatch_get_specific(*v7);
    int v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v45) {
      v45(3, "%s:%i Failed : 0x%x", "_Callback_GetNfccParamsCb", 8979, a4);
    }
    dispatch_get_specific(*v7);
    long long v46 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v49 = "_Callback_GetNfccParamsCb";
      __int16 v50 = 1024;
      int v51 = 8979;
      __int16 v52 = 1024;
      unsigned int v53 = a4;
      _os_log_impl(&dword_2229A5000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed : 0x%x", buf, 0x18u);
    }
    goto LABEL_73;
  }
  if (!a3 || a4 != 63)
  {
    if (!a4) {
      goto LABEL_73;
    }
    goto LABEL_59;
  }
  unsigned int v25 = *a3;
  dispatch_get_specific(*v7);
  unint64_t v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v25 == 5)
  {
    if (v26) {
      v26(6, "%s:%i \t ### HLM debug Log ###", "_Callback_GetNfccParamsCb", 8942);
    }
    dispatch_get_specific(*v7);
    unint64_t v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v49 = "_Callback_GetNfccParamsCb";
      __int16 v50 = 1024;
      int v51 = 8942;
      _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t ### HLM debug Log ###", buf, 0x12u);
    }
    dispatch_get_specific(*v7);
    int v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v28) {
      v28(6, "%s:%i \t RAM buffer overflow status  : %d", "_Callback_GetNfccParamsCb", 8943, *((unsigned __int8 *)a3 + 9));
    }
    dispatch_get_specific(*v7);
    unint64_t v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v30 = *((unsigned __int8 *)a3 + 9);
      *(_DWORD *)buf = 136446722;
      int v49 = "_Callback_GetNfccParamsCb";
      __int16 v50 = 1024;
      int v51 = 8943;
      __int16 v52 = 1024;
      unsigned int v53 = v30;
      _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t RAM buffer overflow status  : %d", buf, 0x18u);
    }
    dispatch_get_specific(*v7);
    uint64_t v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v31) {
      v31(6, "%s:%i \t FLASH buffer overflow status: %d", "_Callback_GetNfccParamsCb", 8944, *((unsigned __int8 *)a3 + 8));
    }
    dispatch_get_specific(*v7);
    uint64_t v32 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v33 = *((unsigned __int8 *)a3 + 8);
      *(_DWORD *)buf = 136446722;
      int v49 = "_Callback_GetNfccParamsCb";
      __int16 v50 = 1024;
      int v51 = 8944;
      __int16 v52 = 1024;
      unsigned int v53 = v33;
      _os_log_impl(&dword_2229A5000, v32, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t FLASH buffer overflow status: %d", buf, 0x18u);
    }
    uint64_t v34 = *((void *)a3 + 2);
    if (v34)
    {
      __int16 v35 = *(unsigned __int8 **)(v34 + 8);
      dispatch_get_specific(*v7);
      char v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v36) {
        v36(6, "%s:%i \t Number of HLM debug msgs: %d", "_Callback_GetNfccParamsCb", 8950, v35[5]);
      }
      dispatch_get_specific(*v7);
      int v37 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v38 = v35[5];
        *(_DWORD *)buf = 136446722;
        int v49 = "_Callback_GetNfccParamsCb";
        __int16 v50 = 1024;
        int v51 = 8950;
        __int16 v52 = 1024;
        unsigned int v53 = v38;
        _os_log_impl(&dword_2229A5000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t Number of HLM debug msgs: %d", buf, 0x18u);
      }
      dispatch_get_specific(*v7);
      __int16 v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v39) {
        v39(6, "%s:%i \t Number of L2 debug msgs: %d", "_Callback_GetNfccParamsCb", 8959, *v35);
      }
      dispatch_get_specific(*v7);
      int v40 = NFSharedLogGetLogger();
      a4 = 0;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v41 = *v35;
        *(_DWORD *)buf = 136446722;
        int v49 = "_Callback_GetNfccParamsCb";
        __int16 v50 = 1024;
        int v51 = 8959;
        __int16 v52 = 1024;
        unsigned int v53 = v41;
        unint64_t v24 = "%{public}s:%i \t Number of L2 debug msgs: %d";
        uint64_t v42 = v40;
        uint32_t v43 = 24;
LABEL_72:
        _os_log_impl(&dword_2229A5000, v42, OS_LOG_TYPE_DEFAULT, v24, buf, v43);
        a4 = 0;
      }
    }
    else
    {
      dispatch_get_specific(*v7);
      uint64_t v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v47) {
        v47(6, "%s:%i \t pInfo (pointer to L2Debug Info) is NULL!", "_Callback_GetNfccParamsCb", 8969);
      }
      dispatch_get_specific(*v7);
      uint64_t v23 = NFSharedLogGetLogger();
      a4 = 0;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        int v49 = "_Callback_GetNfccParamsCb";
        __int16 v50 = 1024;
        int v51 = 8969;
        unint64_t v24 = "%{public}s:%i \t pInfo (pointer to L2Debug Info) is NULL!";
        goto LABEL_71;
      }
    }
  }
  else
  {
    if (v26) {
      v26(6, "%s:%i \t Invalid 'eNfccParam' returned", "_Callback_GetNfccParamsCb", 8974);
    }
    dispatch_get_specific(*v7);
    uint64_t v23 = NFSharedLogGetLogger();
    a4 = 0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v49 = "_Callback_GetNfccParamsCb";
      __int16 v50 = 1024;
      int v51 = 8974;
      unint64_t v24 = "%{public}s:%i \t Invalid 'eNfccParam' returned";
      goto LABEL_71;
    }
  }
LABEL_73:
  sub_2229BF9CC(a2, a4);
  sub_2229BF93C(a2);
}

BOOL NFDriverEnableFelicaTxEndPatternV2(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  __int16 v2 = sub_2229C5B30(a1, 41);
  v14[0] = HIBYTE(v2);
  v14[1] = v2;
  int v15 = 118554628;
  char v16 = 1;
  __int16 v3 = sub_2229C5B30(a1, 40);
  v12[0] = HIBYTE(v3);
  v12[1] = v3;
  int v13 = -1040129789;
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i configuring Felica transaction end pattern for applet ver 2.0", "NFDriverEnableFelicaTxEndPatternV2", 9043);
  }
  dispatch_get_specific(*v4);
  unsigned int v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    int v19 = "NFDriverEnableFelicaTxEndPatternV2";
    __int16 v20 = 1024;
    int v21 = 9043;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i configuring Felica transaction end pattern for applet ver 2.0", buf, 0x12u);
  }
  uint64_t v17 = (void **)sub_2229C3DD8(7u, v14);
  uint64_t v7 = sub_2229C39B8(a1, 37025, (uint64_t)v17, 0);
  uint64_t v8 = sub_2229BFAD8(v7);
  sub_2229C3E74(&v17);
  sub_2229BF93C((void **)v7);
  if (v8) {
    return 0;
  }
  uint64_t v17 = (void **)sub_2229C3DD8(6u, v12);
  __int16 v10 = sub_2229C39B8(a1, 37025, (uint64_t)v17, 0);
  BOOL v9 = sub_2229BFAD8(v10) == 0;
  sub_2229C3E74(&v17);
  sub_2229BF93C((void **)v10);
  return v9;
}

uint64_t NFDriverConfigureExpressFelicaEntry(uint64_t a1, int a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  memset(v38, 0, sizeof(v38));
  int v39 = 0;
  uint64_t v4 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v38))
  {
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i enable %02X", "NFDriverConfigureExpressFelicaEntry", 9079, a2);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "NFDriverConfigureExpressFelicaEntry";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 9079;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = a2;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable %02X", buf, 0x18u);
    }
    uint64_t v33 = 0;
    uint64_t v34 = &v33;
    uint64_t v35 = 0x2000000000;
    int v36 = 0;
    __int16 v37 = 0;
    v32[0] = MEMORY[0x263EF8330];
    v32[1] = 0x40000000;
    v32[2] = sub_2229DE774;
    v32[3] = &unk_26463B5E8;
    uint8_t v32[4] = &v33;
    v32[5] = a1;
    uint64_t v8 = sub_2229D1CA4(a1, (uint64_t)v32);
    uint64_t v9 = sub_2229BFAD8(v8);
    sub_2229BF93C((void **)v8);
    if (v9)
    {
      uint64_t v4 = 0;
      if (v9 == 51)
      {
LABEL_38:
        _Block_object_dispose(&v33, 8);
        return v4;
      }
      dispatch_get_specific(*v5);
      __int16 v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10) {
        v10(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverConfigureExpressFelicaEntry", 9098, v9);
      }
      dispatch_get_specific(*v5);
      __int16 v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "NFDriverConfigureExpressFelicaEntry";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 9098;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v9;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
      }
LABEL_27:
      uint64_t v4 = 0;
      goto LABEL_38;
    }
    unsigned int v12 = v34;
    dispatch_get_specific(*v5);
    int v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(6, "%s:%i old SuicaSystemCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X",
    }
        "NFDriverConfigureExpressFelicaEntry",
        9105,
        *((unsigned __int8 *)v12 + 24),
        *((unsigned __int16 *)v12 + 13),
        *((unsigned __int8 *)v12 + 25),
        *((unsigned __int16 *)v12 + 14));
    dispatch_get_specific(*v5);
    unsigned int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *((unsigned __int8 *)v12 + 24);
      int v16 = *((unsigned __int16 *)v12 + 13);
      int v17 = *((unsigned __int8 *)v12 + 25);
      int v18 = *((unsigned __int16 *)v12 + 14);
      *(_DWORD *)buf = 136447490;
      *(void *)&uint8_t buf[4] = "NFDriverConfigureExpressFelicaEntry";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 9105;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v15;
      unsigned char buf[24] = 0;
      buf[25] = 4;
      *(_DWORD *)&buf[26] = v16;
      *(_WORD *)&unsigned char buf[30] = 1024;
      LODWORD(v53) = v17;
      WORD2(v53) = 1024;
      *(_DWORD *)((char *)&v53 + 6) = v18;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s:%i old SuicaSystemCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X",
        buf,
        0x2Au);
    }
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v53 = 0u;
    memset(buf, 0, sizeof(buf));
    *(_DWORD *)buf = 4;
    *(_WORD *)&buf[10] = 3;
    uint8_t buf[8] = a2 & 1;
    if ((a2 & 2) != 0) {
      __int16 v19 = -32760;
    }
    else {
      __int16 v19 = 3;
    }
    buf[9] = (a2 & 2) >> 1;
    *(_WORD *)&unsigned char buf[12] = v19;
    if ((a2 & 2) != 0) {
      int v20 = 32776;
    }
    else {
      int v20 = 3;
    }
    if (*((_DWORD *)v12 + 6) == *(_DWORD *)&buf[8] && *((unsigned __int16 *)v12 + 14) == v20)
    {
      dispatch_get_specific(*v5);
      unint64_t v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24) {
        v24(6, "%s:%i configs are identical - skipping.", "NFDriverConfigureExpressFelicaEntry", 9134);
      }
      dispatch_get_specific(*v5);
      unsigned int v25 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      *(_DWORD *)int v40 = 136446466;
      unsigned int v41 = "NFDriverConfigureExpressFelicaEntry";
      __int16 v42 = 1024;
      int v43 = 9134;
      unint64_t v26 = "%{public}s:%i configs are identical - skipping.";
      unint64_t v27 = v25;
      uint32_t v28 = 18;
    }
    else
    {
      uint64_t v22 = sub_2229C3EBC(a1, (uint64_t)buf);
      uint64_t v23 = sub_2229BFAD8(v22);
      sub_2229BF93C((void **)v22);
      if (v23) {
        goto LABEL_27;
      }
      dispatch_get_specific(*v5);
      unint64_t v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29) {
        v29(6, "%s:%i new SuicaEntrySysCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X",
      }
          "NFDriverConfigureExpressFelicaEntry",
          9148,
          buf[8],
          *(unsigned __int16 *)&buf[10],
          buf[9],
          *(unsigned __int16 *)&buf[12]);
      dispatch_get_specific(*v5);
      unsigned int v30 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
LABEL_37:
        uint64_t v4 = 1;
        goto LABEL_38;
      }
      *(_DWORD *)int v40 = 136447490;
      unsigned int v41 = "NFDriverConfigureExpressFelicaEntry";
      __int16 v42 = 1024;
      int v43 = 9148;
      __int16 v44 = 1024;
      int v45 = buf[8];
      __int16 v46 = 1024;
      int v47 = *(unsigned __int16 *)&buf[10];
      __int16 v48 = 1024;
      int v49 = buf[9];
      __int16 v50 = 1024;
      int v51 = *(unsigned __int16 *)&buf[12];
      unint64_t v26 = "%{public}s:%i new SuicaEntrySysCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X";
      unint64_t v27 = v30;
      uint32_t v28 = 42;
    }
    _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_DEFAULT, v26, v40, v28);
    goto LABEL_37;
  }
  return v4;
}

uint64_t sub_2229DE774(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverSetChipscope(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (*(unsigned char *)(a1 + 58) && (*(unsigned char *)(*(void *)(a1 + 24) + 570) & 2) != 0)
  {
    uint64_t v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (a2)
    {
      if (Logger) {
        Logger(6, "%s:%i Disabling standby for debugging", "NFDriverSetChipscope", 9163);
      }
      dispatch_get_specific(*v9);
      __int16 v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v24 = "NFDriverSetChipscope";
        __int16 v25 = 1024;
        int v26 = 9163;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling standby for debugging", buf, 0x12u);
      }
      sub_2229CE298(a1, 0);
      LODWORD(v22) = a4;
      uint64_t v21 = a3;
      LODWORD(v27) = 5;
      DWORD2(v27) = 2;
      *(void *)&long long v28 = &v21;
      dispatch_get_specific(*v9);
      unsigned int v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12) {
        v12(6, "%s:%i Configuring chipscope", "NFDriverSetChipscope", 9174);
      }
      dispatch_get_specific(*v9);
      int v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        unint64_t v24 = "NFDriverSetChipscope";
        __int16 v25 = 1024;
        int v26 = 9174;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Configuring chipscope", buf, 0x12u);
      }
      unsigned int v14 = sub_2229C3EBC(a1, (uint64_t)&v27);
      uint64_t v15 = sub_2229BFAD8(v14);
      sub_2229BF93C((void **)v14);
      if (v15) {
        return 1;
      }
      dispatch_get_specific(*v9);
      int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18) {
        v18(6, "%s:%i Enabling chipscope", "NFDriverSetChipscope", 9184);
      }
      dispatch_get_specific(*v9);
      int v16 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
LABEL_24:
        LODWORD(v27) = 5;
        DWORD2(v27) = a2;
        *(void *)&long long v28 = 0;
        __int16 v19 = sub_2229C3EBC(a1, (uint64_t)&v27);
        BOOL v5 = sub_2229BFAD8(v19) != 0;
        sub_2229BF93C((void **)v19);
        return v5;
      }
      *(_DWORD *)buf = 136446466;
      unint64_t v24 = "NFDriverSetChipscope";
      __int16 v25 = 1024;
      int v26 = 9184;
      int v17 = "%{public}s:%i Enabling chipscope";
    }
    else
    {
      if (Logger) {
        Logger(6, "%s:%i Disabling chipscope", "NFDriverSetChipscope", 9186);
      }
      dispatch_get_specific(*v9);
      int v16 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446466;
      unint64_t v24 = "NFDriverSetChipscope";
      __int16 v25 = 1024;
      int v26 = 9186;
      int v17 = "%{public}s:%i Disabling chipscope";
    }
    _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
    goto LABEL_24;
  }
  return 0;
}

uint64_t NFDriverContinuousWave(uint64_t a1, int a2, int a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unsigned int v6 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    if (a2) {
      uint64_t v8 = "Enabling";
    }
    else {
      uint64_t v8 = "Disabling";
    }
    Logger(6, "%s:%i %s Continuous Wave", "NFDriverContinuousWave", 9213, v8);
  }
  dispatch_get_specific(*v6);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      __int16 v10 = "Enabling";
    }
    else {
      __int16 v10 = "Disabling";
    }
    LODWORD(buf[0]) = 136446722;
    *(void *)((char *)buf + 4) = "NFDriverContinuousWave";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 9213;
    WORD1(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 4) = v10;
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s Continuous Wave", (uint8_t *)buf, 0x1Cu);
  }
  memset(v24, 0, sizeof(v24));
  int v25 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v24))
  {
    if (HIDWORD(v24[0]) > 6)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(buf[0]) = 9;
      DWORD2(buf[0]) = a2;
      if (a3) {
        char v16 = 2;
      }
      else {
        char v16 = 1;
      }
      BYTE12(buf[0]) = v16;
      int v17 = (void **)sub_2229C3EBC(a1, (uint64_t)buf);
      if (sub_2229BFAD8((uint64_t *)v17))
      {
        dispatch_get_specific(*v6);
        int v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v18)
        {
          if (a2) {
            __int16 v19 = "enable";
          }
          else {
            __int16 v19 = "disable";
          }
          v18(3, "%s:%i Failed to %s continuous wave", "NFDriverContinuousWave", 9231, v19);
        }
        dispatch_get_specific(*v6);
        int v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          if (a2) {
            uint64_t v21 = "enable";
          }
          else {
            uint64_t v21 = "disable";
          }
          *(_DWORD *)int v26 = 136446722;
          long long v27 = "NFDriverContinuousWave";
          __int16 v28 = 1024;
          int v29 = 9231;
          __int16 v30 = 2080;
          long long v31 = v21;
          _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to %s continuous wave", v26, 0x1Cu);
        }
        sub_2229BF93C(v17);
        return 1;
      }
      else
      {
        sub_2229BF93C(v17);
        if (a2)
        {
          usleep(0x3A98u);
          uint64_t v22 = a1;
          int v23 = 0;
        }
        else
        {
          uint64_t v22 = a1;
          int v23 = 1;
        }
        sub_2229CE298(v22, v23);
        return 0;
      }
    }
    else
    {
      dispatch_get_specific(*v6);
      __int16 v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11) {
        v11(6, "%s:%i NFCC does not support Continuous Wave", "NFDriverContinuousWave", 9220);
      }
      dispatch_get_specific(*v6);
      unsigned int v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "NFDriverContinuousWave";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 9220;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i NFCC does not support Continuous Wave", (uint8_t *)buf, 0x12u);
      }
      return 19;
    }
  }
  else
  {
    dispatch_get_specific(*v6);
    unsigned int v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14) {
      v14(6, "%s:%i Failed to get driver info", "NFDriverContinuousWave", 9217);
    }
    dispatch_get_specific(*v6);
    uint64_t v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136446466;
      *(void *)((char *)buf + 4) = "NFDriverContinuousWave";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 9217;
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Failed to get driver info", (uint8_t *)buf, 0x12u);
    }
    return 8;
  }
}

BOOL NFDriverConfigureAutomaticMultiTagPolling(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  BOOL v2 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v15))
  {
    if (HIDWORD(v15[0]) > 0xB)
    {
      memset(buf, 0, sizeof(buf));
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v42 = 0u;
      *(_DWORD *)buf = 6;
      uint8_t buf[8] = -105;
      *(_WORD *)&unsigned char buf[12] = 3843;
      unsigned int v6 = *(_DWORD **)(a1 + 24);
      int v7 = (unsigned __int16)v6[180];
      *(_WORD *)&buf[22] = v6[180];
      int v8 = v6[181];
      unsigned char buf[20] = v6[181];
      LODWORD(v6) = v6[142];
      unsigned int v9 = (v6 >> 23) & 1;
      buf[19] = (v6 & 0x800000) != 0;
      __int16 v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Setting MultiTag Config. A=%d S=%d S2=%d S3=%d V=%d Retries=%d TlvId=%d, debugMode=%d pollDuration=%d pollRetries=%d", "NFDriverConfigureAutomaticMultiTagPolling", 9291, 1, 1, 1, 1, 1, 3, 15, v9, v7, v8);
      }
      dispatch_get_specific(*v10);
      unsigned int v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v17 = 136449026;
        int v18 = "NFDriverConfigureAutomaticMultiTagPolling";
        __int16 v19 = 1024;
        int v20 = 9291;
        __int16 v21 = 1024;
        int v22 = 1;
        __int16 v23 = 1024;
        int v24 = 1;
        __int16 v25 = 1024;
        int v26 = 1;
        __int16 v27 = 1024;
        int v28 = 1;
        __int16 v29 = 1024;
        int v30 = 1;
        __int16 v31 = 1024;
        int v32 = 3;
        __int16 v33 = 1024;
        int v34 = 15;
        __int16 v35 = 1024;
        unsigned int v36 = v9;
        __int16 v37 = 1024;
        int v38 = v7;
        __int16 v39 = 1024;
        int v40 = v8;
        _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting MultiTag Config. A=%d S=%d S2=%d S3=%d V=%d Retries=%d TlvId=%d, debugMode=%d pollDuration=%d pollRetries=%d", v17, 0x4Eu);
      }
      int v13 = sub_2229C3EBC(a1, (uint64_t)buf);
      BOOL v2 = sub_2229BFAD8(v13) == 0;
      sub_2229BF93C((void **)v13);
    }
    else
    {
      __int16 v3 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v4 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v4) {
        v4(6, "%s:%i Hardware not supported", "NFDriverConfigureAutomaticMultiTagPolling", 9259);
      }
      dispatch_get_specific(*v3);
      BOOL v5 = NFSharedLogGetLogger();
      BOOL v2 = 0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "NFDriverConfigureAutomaticMultiTagPolling";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 9259;
        _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", buf, 0x12u);
        return 0;
      }
    }
  }
  return v2;
}

BOOL NFDriverClearAutomaticMultiTagPollingState(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  memset(v11, 0, sizeof(v11));
  int v12 = 0;
  BOOL v2 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v11))
  {
    if (HIDWORD(v11[0]) > 0xB)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(buf[0]) = 7;
      unsigned int v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Clearing Multitag info state", "NFDriverClearAutomaticMultiTagPollingState", 9322);
      }
      dispatch_get_specific(*v6);
      int v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v13 = 136446466;
        unsigned int v14 = "NFDriverClearAutomaticMultiTagPollingState";
        __int16 v15 = 1024;
        int v16 = 9322;
        _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Clearing Multitag info state", v13, 0x12u);
      }
      unsigned int v9 = sub_2229C3EBC(a1, (uint64_t)buf);
      BOOL v2 = sub_2229BFAD8(v9) == 0;
      sub_2229BF93C((void **)v9);
    }
    else
    {
      __int16 v3 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v4 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v4) {
        v4(6, "%s:%i Hardware not supported", "NFDriverClearAutomaticMultiTagPollingState", 9313);
      }
      dispatch_get_specific(*v3);
      BOOL v5 = NFSharedLogGetLogger();
      BOOL v2 = 0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = "NFDriverClearAutomaticMultiTagPollingState";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 9313;
        _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", (uint8_t *)buf, 0x12u);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t NFDriverGetSWIOTemperature(uint64_t a1, double *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  __int16 v27 = &v26;
  uint64_t v28 = 0x2000000000;
  int v29 = 0;
  memset(v24, 0, sizeof(v24));
  int v25 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v24)) {
    goto LABEL_25;
  }
  if (HIDWORD(v24[0]) <= 0xB)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Hardware not supported", "NFDriverGetSWIOTemperature", 9346);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v31 = "NFDriverGetSWIOTemperature";
    __int16 v32 = 1024;
    int v33 = 9346;
    int v7 = "%{public}s:%i Hardware not supported";
LABEL_13:
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0x12u);
LABEL_14:
    uint64_t v12 = 19;
    goto LABEL_26;
  }
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 0x40000000;
  v23[2] = sub_2229DF8A0;
  unsigned char v23[3] = &unk_26463B610;
  v23[4] = &v26;
  v23[5] = a1;
  int v8 = sub_2229D1CA4(a1, (uint64_t)v23);
  uint64_t v9 = sub_2229BFAD8(v8);
  sub_2229BF93C((void **)v8);
  if (v9)
  {
    __int16 v10 = (const void **)MEMORY[0x263F8C6C0];
    if (v9 == 51)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11) {
        v11(6, "%s:%i Not supported", "NFDriverGetSWIOTemperature", 9362);
      }
      dispatch_get_specific(*v10);
      unsigned int v6 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v31 = "NFDriverGetSWIOTemperature";
      __int16 v32 = 1024;
      int v33 = 9362;
      int v7 = "%{public}s:%i Not supported";
      goto LABEL_13;
    }
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetSWIOTemperature", 9365, v9);
    }
    dispatch_get_specific(*v10);
    int v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v31 = "NFDriverGetSWIOTemperature";
      __int16 v32 = 1024;
      int v33 = 9365;
      __int16 v34 = 2048;
      *(void *)__int16 v35 = v9;
      _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
    }
LABEL_25:
    uint64_t v12 = 1;
    goto LABEL_26;
  }
  if (HIDWORD(v24[0]) == 16) {
    uint64_t v13 = 24;
  }
  else {
    uint64_t v13 = 26;
  }
  uint64_t v14 = *(unsigned __int16 *)((char *)v27 + v13);
  double v15 = (double)v14 / 1000.0;
  if (HIDWORD(v24[0]) == 16) {
    double v19 = 4250.0 / (log(v15 * 2838800000.0 / (v15 * -107400.0 + 108720.0)) + 2.7416) + -273.15;
  }
  else {
    double v19 = v15 * -69.25 + 150.2;
  }
  int v20 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  __int16 v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21) {
    v21(6, "%s:%i Got %x (%d), returning %lf", "NFDriverGetSWIOTemperature", 9374, v14, v14, *(void *)&v19);
  }
  dispatch_get_specific(*v20);
  int v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136447234;
    __int16 v31 = "NFDriverGetSWIOTemperature";
    __int16 v32 = 1024;
    int v33 = 9374;
    __int16 v34 = 1024;
    *(_DWORD *)__int16 v35 = v14;
    *(_WORD *)&uint8_t v35[4] = 1024;
    *(_DWORD *)&v35[6] = v14;
    __int16 v36 = 2048;
    double v37 = v19;
    _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Got %x (%d), returning %lf", buf, 0x28u);
  }
  uint64_t v12 = 0;
  if (a2) {
    *a2 = v19;
  }
LABEL_26:
  _Block_object_dispose(&v26, 8);
  return v12;
}

uint64_t sub_2229DF8A0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverHCISoftReset(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = malloc_type_calloc(0x100uLL, 1uLL, 0x100004077774924uLL);
  if (v4)
  {
    BOOL v5 = v4;
    unsigned int v6 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v6[2] + 8));
    uint64_t v7 = v6[2];
    ++*(void *)v7;
    pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
    int v8 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    *(void *)uint64_t block = MEMORY[0x263EF8330];
    *(void *)&void block[8] = 0x40000000;
    *(void *)&block[16] = sub_2229E630C;
    uint64_t v18 = &unk_26463B8F0;
    double v19 = v6;
    int v20 = v5;
    uint64_t v21 = a1;
    int v22 = 256;
    int v23 = a2;
    dispatch_async_and_wait(v8, block);
    if (sub_2229BFAD8(v6))
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i [R-RAW<] Soft Reset", "NFDriverHCISoftReset", 9488);
      }
      dispatch_get_specific(*v13);
      double v15 = NFSharedLogGetLogger();
      uint64_t v9 = 0;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t block = 136446466;
        *(void *)&block[4] = "NFDriverHCISoftReset";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 9488;
        _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [R-RAW<] Soft Reset", block, 0x12u);
        uint64_t v9 = 0;
      }
    }
    sub_2229BF93C((void **)v6);
    free(v5);
  }
  else
  {
    __int16 v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(3, "%s:%i failed to allocate buffer", "NFDriverHCISoftReset", 9480);
    }
    dispatch_get_specific(*v10);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t block = 136446466;
      *(void *)&block[4] = "NFDriverHCISoftReset";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 9480;
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate buffer", block, 0x12u);
    }
    return 3;
  }
  return v9;
}

uint64_t NFDriverAntennaSelfTest(uint64_t a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v17)) {
    return 1;
  }
  if (HIDWORD(v17[0]) > 6)
  {
    int v8 = sub_2229BF5F0();
    pthread_mutex_lock((pthread_mutex_t *)(v8[2] + 8));
    uint64_t v9 = v8[2];
    ++*(void *)v9;
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
    v8[1] = 0;
    __int16 v10 = *(NSObject **)(*(void *)(a1 + 24) + 544);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_2229DFE10;
    block[3] = &unk_26463B630;
    void block[5] = v8;
    void block[6] = 1;
    block[4] = a1;
    dispatch_async(v10, block);
    if (sub_2229BFAD8(v8))
    {
      __int16 v11 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i phLibNfc_AntennaSelfTest FAILED : 0x%llx", "NFDriverAntennaSelfTest", 9552, *v8);
      }
      dispatch_get_specific(*v11);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *v8;
        *(_DWORD *)buf = 136446722;
        int v20 = "NFDriverAntennaSelfTest";
        __int16 v21 = 1024;
        int v22 = 9552;
        __int16 v23 = 2048;
        uint64_t v24 = v14;
        _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i phLibNfc_AntennaSelfTest FAILED : 0x%llx", buf, 0x1Cu);
      }
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      if (a2) {
        *a2 = v8[1];
      }
    }
    sub_2229BF93C((void **)v8);
  }
  else
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    BOOL v5 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v5) {
      v5(6, "%s:%i Hardware not supported", "NFDriverAntennaSelfTest", 9529);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      int v20 = "NFDriverAntennaSelfTest";
      __int16 v21 = 1024;
      int v22 = 9529;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", buf, 0x12u);
    }
    return 19;
  }
  return v7;
}

void sub_2229DFE10(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_AntennaSelfTest();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed : 0x%x", "NFDriverAntennaSelfTest_block_invoke", 9545, v3);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v8 = "NFDriverAntennaSelfTest_block_invoke";
      __int16 v9 = 1024;
      int v10 = 9545;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed : 0x%x", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229DFF58(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3 && (*(unsigned char *)a3 & 1) != 0)
    {
      a2[1] = (void *)*(unsigned int *)(a3 + 4);
      uint64_t v8 = a4;
    }
    else
    {
      BOOL v5 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Missing TX LDO data", "_Callback_NFDriverAntennaSelfTest", 9507);
      }
      dispatch_get_specific(*v5);
      uint64_t v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        int v10 = "_Callback_NFDriverAntennaSelfTest";
        __int16 v11 = 1024;
        int v12 = 9507;
        uint64_t v8 = 18;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Missing TX LDO data", buf, 0x12u);
      }
      else
      {
        uint64_t v8 = 18;
      }
    }
    sub_2229BF9CC(a2, v8);
    sub_2229BF93C(a2);
  }
}

uint64_t NFDriverReadATETrimVersion(uint64_t a1, _WORD *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  __int16 v21 = &v20;
  uint64_t v22 = 0x2000000000;
  __int16 v23 = 0;
  memset(v18, 0, sizeof(v18));
  int v19 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v18);
  if (HIDWORD(v18[0]) < 0xE || HIDWORD(v18[0]) == 20)
  {
    int v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Hardware not supported", "NFDriverReadATETrimVersion", 9573);
    }
    dispatch_get_specific(*v10);
    uint64_t v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v25 = "NFDriverReadATETrimVersion";
    __int16 v26 = 1024;
    int v27 = 9573;
    __int16 v9 = "%{public}s:%i Hardware not supported";
    goto LABEL_13;
  }
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = sub_2229E03C0;
  void v17[3] = &unk_26463B658;
  uint8_t v17[4] = &v20;
  v17[5] = a1;
  uint64_t v4 = sub_2229D1CA4(a1, (uint64_t)v17);
  uint64_t v5 = sub_2229BFAD8(v4);
  sub_2229BF93C((void **)v4);
  if (v5)
  {
    if (v5 == 51)
    {
      unsigned int v6 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v7) {
        v7(6, "%s:%i Not supported", "NFDriverReadATETrimVersion", 9589);
      }
      dispatch_get_specific(*v6);
      uint64_t v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v25 = "NFDriverReadATETrimVersion";
      __int16 v26 = 1024;
      int v27 = 9589;
      __int16 v9 = "%{public}s:%i Not supported";
LABEL_13:
      _os_log_impl(&dword_2229A5000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x12u);
LABEL_14:
      uint64_t v12 = 19;
      goto LABEL_15;
    }
    uint64_t v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    double v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverReadATETrimVersion", 9592, v5);
    }
    dispatch_get_specific(*v14);
    int v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v25 = "NFDriverReadATETrimVersion";
      __int16 v26 = 1024;
      int v27 = 9592;
      __int16 v28 = 2048;
      uint64_t v29 = v5;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
    }
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
    if (a2) {
      *a2 = *((_WORD *)v21 + 12);
    }
  }
LABEL_15:
  _Block_object_dispose(&v20, 8);
  return v12;
}

uint64_t sub_2229E03C0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverReadPageEraseCounter(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v17);
  if (HIDWORD(v17[0]) <= 0xD)
  {
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Hardware not supported", "NFDriverReadPageEraseCounter", 9609);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return 19;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "NFDriverReadPageEraseCounter";
    __int16 v21 = 1024;
    int v22 = 9609;
    uint64_t v7 = "%{public}s:%i Hardware not supported";
LABEL_12:
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0x12u);
    return 19;
  }
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  v16[2] = sub_2229E06E4;
  void v16[3] = &unk_26463B678;
  v16[4] = a2;
  v16[5] = a1;
  uint64_t v8 = sub_2229D1CA4(a1, (uint64_t)v16);
  uint64_t v9 = sub_2229BFAD8(v8);
  sub_2229BF93C((void **)v8);
  if (!v9) {
    return 0;
  }
  if (v9 == 51)
  {
    int v10 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11) {
      v11(6, "%s:%i Not supported", "NFDriverReadPageEraseCounter", 9625);
    }
    dispatch_get_specific(*v10);
    unsigned int v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      return 19;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "NFDriverReadPageEraseCounter";
    __int16 v21 = 1024;
    int v22 = 9625;
    uint64_t v7 = "%{public}s:%i Not supported";
    goto LABEL_12;
  }
  uint64_t v13 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v14) {
    v14(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverReadPageEraseCounter", 9628, v9);
  }
  dispatch_get_specific(*v13);
  double v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    uint64_t v20 = "NFDriverReadPageEraseCounter";
    __int16 v21 = 1024;
    int v22 = 9628;
    __int16 v23 = 2048;
    uint64_t v24 = v9;
    _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
  }
  return 1;
}

uint64_t sub_2229E06E4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 32);
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverPrintPageEraseCounter(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 5;
  }
  if (*a2 >= 8u)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2 + 8;
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    do
    {
      dispatch_get_specific(*v5);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i %02d: %04d %04d %04d %04d %04d %04d %04d %04d", "NFDriverPrintPageEraseCounter", 9647, v3, *(v4 - 3), *(v4 - 2), *(v4 - 1), *v4, v4[1], v4[2], v4[3], v4[4]);
      }
      dispatch_get_specific(*v5);
      uint64_t v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(v4 - 3);
        int v9 = *(v4 - 2);
        int v10 = *(v4 - 1);
        int v11 = *v4;
        int v12 = v4[1];
        int v13 = v4[2];
        int v14 = v4[3];
        int v15 = v4[4];
        *(_DWORD *)buf = 136448770;
        int v19 = "NFDriverPrintPageEraseCounter";
        __int16 v20 = 1024;
        int v21 = 9647;
        __int16 v22 = 1024;
        int v23 = v3;
        __int16 v24 = 1024;
        int v25 = v8;
        __int16 v26 = 1024;
        int v27 = v9;
        __int16 v28 = 1024;
        int v29 = v10;
        __int16 v30 = 1024;
        int v31 = v11;
        __int16 v32 = 1024;
        int v33 = v12;
        __int16 v34 = 1024;
        int v35 = v13;
        __int16 v36 = 1024;
        int v37 = v14;
        __int16 v38 = 1024;
        int v39 = v15;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %02d: %04d %04d %04d %04d %04d %04d %04d %04d", buf, 0x48u);
      }
      unint64_t v16 = v3 + 15;
      v3 += 8;
      v4 += 8;
    }
    while (v16 < *a2);
  }
  return 0;
}

uint64_t NFDriverGetTemporaryPollingPeriod(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(*(void *)(result + 24) + 712);
  }
  return result;
}

BOOL NFDriverEnableSMBLogging(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(v19, 0, sizeof(v19));
  DWORD2(v19[0]) = a2;
  uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    if (a2) {
      unsigned int v6 = "Enabling";
    }
    else {
      unsigned int v6 = "Disabling";
    }
    Logger(6, "%s:%i %s SMB log", "NFDriverEnableSMBLogging", 9677, v6);
  }
  dispatch_get_specific(*v4);
  uint64_t v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      int v8 = "Enabling";
    }
    else {
      int v8 = "Disabling";
    }
    *(_DWORD *)buf = 136446722;
    int v14 = "NFDriverEnableSMBLogging";
    __int16 v15 = 1024;
    int v16 = 9677;
    __int16 v17 = 2080;
    int v18 = v8;
    _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s SMB log", buf, 0x1Cu);
  }
  int v9 = sub_2229C3EBC(a1, (uint64_t)v19);
  uint64_t v10 = sub_2229BFAD8(v9);
  if (!v10) {
    *(unsigned char *)(*(void *)(a1 + 24) + 745) = a2;
  }
  BOOL v11 = v10 == 0;
  sub_2229BF93C((void **)v9);
  return v11;
}

uint64_t sub_2229E0A84(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverGetReaderProhibitTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = sub_2229E0DA4;
  void v17[3] = &unk_26463B6C8;
  uint8_t v17[4] = &v18;
  v17[5] = a1;
  uint64_t v3 = sub_2229D1CA4(a1, (uint64_t)v17);
  uint64_t v4 = sub_2229BFAD8(v3);
  sub_2229BF93C((void **)v3);
  if (v4)
  {
    if (v4 != 51)
    {
      uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetReaderProhibitTimer", 9735, v4);
      }
      dispatch_get_specific(*v5);
      uint64_t v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        int v23 = "NFDriverGetReaderProhibitTimer";
        __int16 v24 = 1024;
        int v25 = 9735;
        __int16 v26 = 2048;
        uint64_t v27 = v4;
        _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
      }
    }
    uint64_t v8 = 1;
  }
  else
  {
    int v9 = *((_DWORD *)v19 + 6);
    if (v9 == 11)
    {
      uint64_t v10 = "HRMST";
    }
    else if (v9 == 10)
    {
      uint64_t v10 = "SERMST";
    }
    else if (v9)
    {
      uint64_t v10 = "Unknown";
    }
    else
    {
      uint64_t v10 = "None";
    }
    int v11 = *((unsigned __int16 *)v19 + 15) + 1000 * *((unsigned __int16 *)v19 + 14);
    int v12 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(6, "%s:%i timerID=%s, remaning=%dms", "NFDriverGetReaderProhibitTimer", 9753, v10, v11);
    }
    dispatch_get_specific(*v12);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      int v23 = "NFDriverGetReaderProhibitTimer";
      __int16 v24 = 1024;
      int v25 = 9753;
      __int16 v26 = 2080;
      uint64_t v27 = (uint64_t)v10;
      __int16 v28 = 1024;
      int v29 = v11;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s:%i timerID=%s, remaning=%dms", buf, 0x22u);
    }
    uint64_t v8 = 0;
    if (a2)
    {
      int v15 = *((_DWORD *)v19 + 6);
      *(unsigned char *)(a2 + 1) = v15 == 11;
      *(unsigned char *)a2 = v15 == 10;
      *(_DWORD *)(a2 + 4) = v11;
    }
  }
  _Block_object_dispose(&v18, 8);
  return v8;
}

uint64_t sub_2229E0DA4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(*(void *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t sub_2229E0DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = malloc_type_calloc(1uLL, 0x4CuLL, 0x1000040E9AD63BBuLL);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    *(void *)uint64_t v4 = 0x100000000;
    v4[8] = 1;
    v4[68] = *(void *)(a2 + 16);
    if ((unint64_t)(*(void *)(a2 + 16) - 1) <= 0x2F) {
      __memcpy_chk();
    }
    *(unsigned char *)(v5 + 19) = *(void *)(a2 + 8);
    if ((unint64_t)(*(void *)(a2 + 8) - 1) <= 9) {
      __memcpy_chk();
    }
    *(unsigned char *)(v5 + 69) = *(unsigned char *)a2;
    *(unsigned char *)(v5 + 72) = 0;
    *(_WORD *)(v5 + 70) = *(_WORD *)(a2 + 82);
    *(unsigned char *)(v5 + 73) = *(unsigned char *)(a2 + 1);
    unsigned int v6 = sub_2229E1078(a1, v5);
    if (sub_2229BFAD8(v6))
    {
      uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Failed to configure Type A emulation : 0x%04llx", "NFDriverSetHCETypeAConfig", 9818, *v6);
      }
      dispatch_get_specific(*v7);
      int v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *v6;
        *(_DWORD *)buf = 136446722;
        __int16 v17 = "NFDriverSetHCETypeAConfig";
        __int16 v18 = 1024;
        int v19 = 9818;
        __int16 v20 = 2048;
        uint64_t v21 = v10;
        _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure Type A emulation : 0x%04llx", buf, 0x1Cu);
      }
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
    }
    sub_2229BF93C((void **)v6);
    free((void *)v5);
  }
  else
  {
    int v12 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i Allocation failure", "NFDriverSetHCETypeAConfig", 9792);
    }
    dispatch_get_specific(*v12);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v17 = "NFDriverSetHCETypeAConfig";
      __int16 v18 = 1024;
      int v19 = 9792;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  return v11;
}

void *sub_2229E1078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2229BF5F0();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  uint64_t v5 = v4[2];
  ++*(void *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  unsigned int v6 = *(NSObject **)(*(void *)(a1 + 24) + 544);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_2229E68BC;
  block[3] = &unk_26463B910;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = v4;
  dispatch_async_and_wait(v6, block);
  return v4;
}

uint64_t sub_2229E1134(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x4CuLL, 0x1000040E9AD63BBuLL);
  if (v4)
  {
    uint64_t v5 = v4;
    *(void *)uint64_t v4 = 0x200000000;
    v4[8] = 1;
    v4[22] = 0;
    v4[17] = 1;
    *(_DWORD *)(v4 + 9) = *(_DWORD *)(a2 + 3);
    *(_DWORD *)(v4 + 13) = *(_DWORD *)(a2 + 7);
    v4[18] = *(unsigned char *)a2;
    v4[19] = *(unsigned char *)(a2 + 2);
    v4[20] = 0;
    v4[21] = *(unsigned char *)(a2 + 1);
    unsigned int v6 = sub_2229E1078(a1, (uint64_t)v4);
    if (sub_2229BFAD8(v6))
    {
      uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i Faled to configure Type B emulation : 0x%04llx", "NFDriverSetHCETypeBConfig", 9860, *v6);
      }
      dispatch_get_specific(*v7);
      int v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *v6;
        *(_DWORD *)buf = 136446722;
        __int16 v17 = "NFDriverSetHCETypeBConfig";
        __int16 v18 = 1024;
        int v19 = 9860;
        __int16 v20 = 2048;
        uint64_t v21 = v10;
        _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Faled to configure Type B emulation : 0x%04llx", buf, 0x1Cu);
      }
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
    }
    sub_2229BF93C((void **)v6);
    free(v5);
  }
  else
  {
    int v12 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13) {
      v13(3, "%s:%i Allocation failure", "NFDriverSetHCETypeBConfig", 9836);
    }
    dispatch_get_specific(*v12);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      __int16 v17 = "NFDriverSetHCETypeBConfig";
      __int16 v18 = 1024;
      int v19 = 9836;
      _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  return v11;
}

void sub_2229E1398(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int ClrAssertRegs = phLibNfc_Mgt_GetClrAssertRegs();
  if (ClrAssertRegs != 13)
  {
    unsigned int v3 = ClrAssertRegs;
    uint64_t v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverGetClrAssertRegs_block_invoke", 1349, v3);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v8 = "_Async_NFDriverGetClrAssertRegs_block_invoke";
      __int16 v9 = 1024;
      int v10 = 1349;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 48), v3);
    sub_2229BF93C(*(void ***)(a1 + 48));
  }
}

void sub_2229E14E4(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  sub_2229BF9CC(a2, a4);

  sub_2229BF93C(a2);
}

void sub_2229E1524(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24);
  LODWORD(v35) = 1;
  if (*(unsigned char *)(a1 + 48))
  {
    char v3 = *(unsigned char *)(v2 + 676);
    if ((v3 & 8) != 0)
    {
      unsigned int v12 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(6, "%s:%i Enabling single poll headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1465);
      }
      dispatch_get_specific(*v12);
      int v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
        __int16 v31 = 1024;
        int v32 = 1465;
        _os_log_impl(&dword_2229A5000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling single poll headless mode", buf, 0x12u);
      }
      int v8 = 16;
      goto LABEL_37;
    }
    if (*(unsigned char *)(v2 + 676))
    {
      int v15 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16) {
        v16(6, "%s:%i Enabling TypeF headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1470);
      }
      dispatch_get_specific(*v15);
      __int16 v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
        __int16 v31 = 1024;
        int v32 = 1470;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling TypeF headless mode", buf, 0x12u);
      }
      int v4 = 2;
      DWORD2(v35) = 2;
      char v3 = *(unsigned char *)(v2 + 676);
      if ((v3 & 2) == 0)
      {
LABEL_5:
        if ((v3 & 4) == 0)
        {
LABEL_6:
          if (v4) {
            goto LABEL_38;
          }
          uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          unsigned int v6 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v6) {
            v6(6, "%s:%i Enabling ECP mode since no other is selected.", "_Async_NFDriverSetHeadlessMode_block_invoke", 1484);
          }
          dispatch_get_specific(*v5);
          uint64_t v7 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
            __int16 v31 = 1024;
            int v32 = 1484;
            _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling ECP mode since no other is selected.", buf, 0x12u);
          }
          int v8 = 4;
          goto LABEL_37;
        }
        goto LABEL_32;
      }
    }
    else
    {
      int v4 = 0;
      if ((*(unsigned char *)(v2 + 676) & 2) == 0) {
        goto LABEL_5;
      }
    }
    __int16 v18 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19) {
      v19(6, "%s:%i Enabling ECP headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1474);
    }
    dispatch_get_specific(*v18);
    __int16 v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
      __int16 v31 = 1024;
      int v32 = 1474;
      _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling ECP headless mode", buf, 0x12u);
    }
    v4 |= 4u;
    DWORD2(v35) = v4;
    if ((*(unsigned char *)(v2 + 676) & 4) == 0) {
      goto LABEL_6;
    }
LABEL_32:
    uint64_t v21 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22) {
      v22(6, "%s:%i Enabling Generic-A headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1478);
    }
    dispatch_get_specific(*v21);
    int v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
      __int16 v31 = 1024;
      int v32 = 1478;
      _os_log_impl(&dword_2229A5000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling Generic-A headless mode", buf, 0x12u);
    }
    int v8 = v4 | 8;
LABEL_37:
    DWORD2(v35) = v8;
    goto LABEL_38;
  }
  __int16 v9 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v10) {
    v10(6, "%s:%i Disabling headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1461);
  }
  dispatch_get_specific(*v9);
  __int16 v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
    __int16 v31 = 1024;
    int v32 = 1461;
    _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling headless mode", buf, 0x12u);
  }
  DWORD2(v35) = 0;
LABEL_38:
  unsigned int v24 = phLibNfc_Mgt_SetNfccParams();
  if (v24 != 13)
  {
    unsigned int v25 = v24;
    __int16 v26 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v27) {
      v27(3, "%s:%i status=0x%04X", "_Async_NFDriverSetHeadlessMode_block_invoke", 1495, v25);
    }
    dispatch_get_specific(*v26);
    __int16 v28 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
      __int16 v31 = 1024;
      int v32 = 1495;
      __int16 v33 = 1024;
      unsigned int v34 = v25;
      _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v25);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229E1AD8(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

void sub_2229E1B18(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  memset(v34, 0, sizeof(v34));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 24) + 739) = 0;
  int SecureElementList = phLibNfc_SE_GetSecureElementList();
  if (!SecureElementList)
  {
    uint64_t v9 = 3;
    int v10 = (_DWORD *)((unint64_t)v34 | 0xC);
    while (*(v10 - 1) != 1)
    {
      v10 += 4;
      if (!--v9)
      {
        uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 24);
        unsigned int v12 = *(void **)(v11 + 512);
        if (v12)
        {
          free(v12);
          uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 24);
        }
        *(void *)(v11 + 512) = 0;
LABEL_13:
        uint64_t v13 = *(void **)(a1 + 56);
        uint64_t v14 = 0;
LABEL_14:
        sub_2229BF9CC(v13, v14);
        sub_2229BF93C(*(void ***)(a1 + 56));
        return;
      }
    }
    int v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i Found eSE state=%d", "_NFDriverRecoverESE_block_invoke", 3722, *v10);
    }
    dispatch_get_specific(*v15);
    __int16 v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *v10;
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "_NFDriverRecoverESE_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3722;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v18;
      _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found eSE state=%d", buf, 0x18u);
    }
    int v19 = *v10;
    BOOL v20 = *v10 == 4;
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(v21 + 24);
    uint64_t v23 = *(void *)(v22 + 512);
    if (v23)
    {
      *(void *)(v23 + 8) = *(void *)(v10 - 3);
      uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 24);
      *(_DWORD *)(*(void *)(v24 + 512) + 24) = v20;
      if (v19 != 4) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v25 = (int)sub_2229C8060(*(_DWORD *)(v22 + 604), *(unsigned __int8 *)(v22 + 608)) - 5;
      if (v25 >= 8) {
        int v26 = 6;
      }
      else {
        int v26 = dword_2229E83D4[v25];
      }
      *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 512) = sub_2229B6038(v21, v26, v20, *(void *)(v10 - 3));
      uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 24);
      uint64_t v27 = *(void *)(v24 + 512);
      if (!v27 || *(_DWORD *)(v27 + 24) != 1) {
        goto LABEL_13;
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 8) = 1;
    if ((*(_DWORD *)(v24 + 732) - 14) > 4)
    {
      unsigned int v32 = phLibNfc_SE_SetMode();
      if (v32 == 13) {
        return;
      }
      unsigned int v29 = v32;
      dispatch_get_specific(*v15);
      __int16 v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v33) {
        v33(3, "%s:%i status=0x%04X", "_NFDriverRecoverESE_block_invoke", 3770, v29);
      }
      dispatch_get_specific(*v15);
      __int16 v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverRecoverESE_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3770;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v29;
        goto LABEL_39;
      }
    }
    else
    {
      unsigned int v28 = phLibNfc_SE_SetMode();
      if (v28 == 13) {
        return;
      }
      unsigned int v29 = v28;
      dispatch_get_specific(*v15);
      uint64_t v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30) {
        v30(3, "%s:%i status=0x%04X", "_NFDriverRecoverESE_block_invoke", 3755, v29);
      }
      dispatch_get_specific(*v15);
      __int16 v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverRecoverESE_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3755;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v29;
LABEL_39:
        _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
    }
    uint64_t v13 = *(void **)(a1 + 56);
    uint64_t v14 = v29;
    goto LABEL_14;
  }
  int v3 = SecureElementList;
  int v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v5 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v5) {
    v5(3, "%s:%i status=0x%04X", "_NFDriverRecoverESE_block_invoke", 3714, v3);
  }
  dispatch_get_specific(*v4);
  unsigned int v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "_NFDriverRecoverESE_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3714;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v3;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  int v8 = *(NSObject **)(*(void *)(v7 + 24) + 544);
  *(void *)buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&buf[16] = sub_2229C31BC;
  long long v36 = &unk_26463ADD8;
  uint64_t v37 = v7;
  dispatch_async(v8, buf);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

void sub_2229E2054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!a2 || (unsigned int v6 = *(void ***)a2) == 0) {
    __assert_rtn("_Callback_NFDriverESERecovery_SetSEModePowerWired", "NFDriver.c", 3613, "mutex != NULL");
  }
  unsigned int v7 = a5;
  if (a5 == 67)
  {
    int v14 = *(_DWORD *)(a2 + 8);
    int v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14 >= 3)
    {
      if (Logger) {
        Logger(3, "%s:%i Failed to power cycle SE... it's not coming back folks", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3637);
      }
      dispatch_get_specific(*v15);
      __int16 v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
        __int16 v31 = 1024;
        int v32 = 3637;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to power cycle SE... it's not coming back folks", buf, 0x12u);
      }
      unsigned int v7 = 67;
LABEL_40:
      uint64_t v13 = v7;
LABEL_41:
      sub_2229BF9CC(v6, v13);
      sub_2229BF93C(v6);
      return;
    }
    if (Logger) {
      Logger(6, "%s:%i SE power up failed. Trying to power off", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3640);
    }
    dispatch_get_specific(*v15);
    int v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
      __int16 v31 = 1024;
      int v32 = 3640;
      _os_log_impl(&dword_2229A5000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE power up failed. Trying to power off", buf, 0x12u);
    }
    ++*(_DWORD *)(a2 + 8);
    unsigned int v19 = phLibNfc_SE_SetMode();
    if (v19 != 13)
    {
      unsigned int v7 = v19;
      uint64_t v8 = a2 + 16;
      int v20 = 6;
LABEL_38:
      *(_DWORD *)(*(void *)v8 + 44) = v20;
LABEL_39:
      if (!v7) {
        return;
      }
      goto LABEL_40;
    }
  }
  else
  {
    if (a5) {
      goto LABEL_39;
    }
    uint64_t v8 = a2 + 16;
    int v9 = *(_DWORD *)(*(void *)(a2 + 16) + 44);
    if (v9)
    {
      if (v9 == 2)
      {
        int v21 = 0;
      }
      else
      {
        if (v9 == 1)
        {
          int v10 = (const void **)MEMORY[0x263F8C6C0];
          dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
          uint64_t v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v11) {
            v11(6, "%s:%i SE recovery complete. Leaving SE in wired", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3619);
          }
          dispatch_get_specific(*v10);
          unsigned int v12 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
            __int16 v31 = 1024;
            int v32 = 3619;
            _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE recovery complete. Leaving SE in wired", buf, 0x12u);
          }
          uint64_t v13 = 0;
          goto LABEL_41;
        }
        int v21 = 3;
      }
    }
    else
    {
      int v21 = 1;
    }
    uint64_t v22 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v23) {
      v23(6, "%s:%i Resuming SE mode to 0x%x (stored routing mode is %d)", "_resumeSEMode", 3568, v21, *(_DWORD *)(*(void *)v8 + 44));
    }
    dispatch_get_specific(*v22);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(*(void *)v8 + 44);
      *(_DWORD *)buf = 136446978;
      uint64_t v30 = "_resumeSEMode";
      __int16 v31 = 1024;
      int v32 = 3568;
      __int16 v33 = 1024;
      unsigned int v34 = v21;
      __int16 v35 = 1024;
      int v36 = v25;
      _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Resuming SE mode to 0x%x (stored routing mode is %d)", buf, 0x1Eu);
    }
    unsigned int v26 = phLibNfc_SE_SetMode();
    if (v26 != 13)
    {
      unsigned int v7 = v26;
      dispatch_get_specific(*v22);
      uint64_t v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27) {
        v27(3, "%s:%i Failed to restore SE mode : 0x%x", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3631, v7);
      }
      dispatch_get_specific(*v22);
      unsigned int v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint64_t v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
        __int16 v31 = 1024;
        int v32 = 3631;
        __int16 v33 = 1024;
        unsigned int v34 = v7;
        _os_log_impl(&dword_2229A5000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to restore SE mode : 0x%x", buf, 0x18u);
      }
      int v20 = 1;
      goto LABEL_38;
    }
  }
}

void sub_2229E252C(uint64_t a1, void ***a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!a2 || (uint64_t v5 = *a2) == 0) {
    __assert_rtn("_Callback_NFDriverESERecovery_SetSEModePowerOff", "NFDriver.c", 3585, "mutex != NULL");
  }
  unsigned int v7 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (a5)
  {
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Callback_NFDriverESERecovery_SetSEModePowerOff", 3601, a5);
    }
    dispatch_get_specific(*v7);
    int v9 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136446722;
    int v14 = "_Callback_NFDriverESERecovery_SetSEModePowerOff";
    __int16 v15 = 1024;
    int v16 = 3601;
    __int16 v17 = 1024;
    unsigned int v18 = a5;
LABEL_17:
    _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
LABEL_18:
    sub_2229BF9CC(v5, a5);
    sub_2229BF93C(v5);
    return;
  }
  if (Logger) {
    Logger(6, "%s:%i Powering SE back ON", "_Callback_NFDriverESERecovery_SetSEModePowerOff", 3589);
  }
  dispatch_get_specific(*v7);
  int v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    int v14 = "_Callback_NFDriverESERecovery_SetSEModePowerOff";
    __int16 v15 = 1024;
    int v16 = 3589;
    _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Powering SE back ON", buf, 0x12u);
  }
  unsigned int v11 = phLibNfc_SE_SetMode();
  if (v11 != 13)
  {
    a5 = v11;
    dispatch_get_specific(*v7);
    unsigned int v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12) {
      v12(3, "%s:%i status=0x%04X", "_Callback_NFDriverESERecovery_SetSEModePowerOff", 3596, a5);
    }
    dispatch_get_specific(*v7);
    int v9 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)buf = 136446722;
    int v14 = "_Callback_NFDriverESERecovery_SetSEModePowerOff";
    __int16 v15 = 1024;
    int v16 = 3596;
    __int16 v17 = 1024;
    unsigned int v18 = a5;
    goto LABEL_17;
  }
}

void sub_2229E27DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2 || (unsigned int v6 = *(void ***)a2) == 0) {
    __assert_rtn("_Callback_NFDriverESERecovery_SetSEModeResume", "NFDriver.c", 3541, "mutex != NULL");
  }
  uint64_t v8 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (a5)
  {
    if (Logger) {
      Logger(3, "%s:%i Failed to resume SE mode", "_Callback_NFDriverESERecovery_SetSEModeResume", 3545);
    }
    dispatch_get_specific(*v8);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v13 = "_Callback_NFDriverESERecovery_SetSEModeResume";
      __int16 v14 = 1024;
      int v15 = 3545;
      _os_log_impl(&dword_2229A5000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to resume SE mode", buf, 0x12u);
    }
    *(_DWORD *)(*(void *)(a2 + 16) + 44) = 1;
  }
  else
  {
    if (Logger) {
      Logger(6, "%s:%i SE is now recovered and set to prior mode", "_Callback_NFDriverESERecovery_SetSEModeResume", 3549);
    }
    dispatch_get_specific(*v8);
    unsigned int v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v13 = "_Callback_NFDriverESERecovery_SetSEModeResume";
      __int16 v14 = 1024;
      int v15 = 3549;
      _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE is now recovered and set to prior mode", buf, 0x12u);
    }
  }
  sub_2229BF9CC(v6, a5);
  sub_2229BF93C(v6);
}

void sub_2229E29C0(uint64_t a1)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void ***)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 52);
  int v115 = *(unsigned __int8 *)(a1 + 60);
  int v116 = *(unsigned __int8 *)(a1 + 62);
  int v5 = *(_DWORD *)(a1 + 56);
  long long v132 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  memset(v135, 0, sizeof(v135));
  int v6 = 0;
  if (NF_isFeatureSupported())
  {
    if (v5 || !*(unsigned char *)(v1 + 62))
    {
      if ((v5 | 2) == 2)
      {
        int v6 = 0;
      }
      else
      {
        int v10 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(6, "%s:%i Marking ESE reader as enabled!", "_Dispatched_NFDriverConfigureDiscovery", 649);
        }
        dispatch_get_specific(*v10);
        unsigned int v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 649;
          _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Marking ESE reader as enabled!", buf, 0x12u);
        }
        int v6 = 2;
      }
    }
    else
    {
      unsigned int v7 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v8) {
        v8(6, "%s:%i Marking ESE reader as disabled!", "_Dispatched_NFDriverConfigureDiscovery", 643);
      }
      dispatch_get_specific(*v7);
      int v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)__int16 v119 = 1024;
        *(_DWORD *)&v119[2] = 643;
        _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Marking ESE reader as disabled!", buf, 0x12u);
      }
      int v6 = 1;
    }
  }
  if (*(unsigned char *)(v1 + 56)) {
    goto LABEL_17;
  }
  if (*(unsigned char *)(*(void *)(v1 + 24) + 570))
  {
    __int16 v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(6, "%s:%i LPCD force always OFF", "_Dispatched_NFDriverConfigureDiscovery", 664);
    }
    dispatch_get_specific(*v14);
    uint64_t v16 = NFSharedLogGetLogger();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    char v13 = 0;
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = 664;
      _os_log_impl(&dword_2229A5000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i LPCD force always OFF", buf, 0x12u);
LABEL_17:
      char v13 = 0;
    }
  }
  else
  {
    char v13 = 1;
  }
  if (v3 == 3)
  {
    char v109 = v13;
    unsigned int v18 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19) {
      v19(6, "%s:%i Enabling multi tag polling!", "_Dispatched_NFDriverConfigureDiscovery", 671);
    }
    dispatch_get_specific(*v18);
    int v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = 671;
      _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling multi tag polling!", buf, 0x12u);
    }
    uint64_t v21 = *(void *)(v1 + 24);
    int v22 = *(_DWORD *)(v21 + 672) & 0x1821;
    int v113 = *(unsigned __int16 *)(v21 + 716);
    if (v113 != 300)
    {
      dispatch_get_specific(*v18);
      uint64_t v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23) {
        v23(6, "%s:%i Non-default polling period: %u", "_Dispatched_NFDriverConfigureDiscovery", 684, v113);
      }
      dispatch_get_specific(*v18);
      uint64_t v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)__int16 v119 = 1024;
        *(_DWORD *)&v119[2] = 684;
        *(_WORD *)&v119[6] = 1024;
        *(_DWORD *)&v119[8] = v113;
        _os_log_impl(&dword_2229A5000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Non-default polling period: %u", buf, 0x18u);
      }
    }
    int v25 = v22 | 0x40000;
    dispatch_get_specific(*v18);
    unsigned int v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26) {
      v26(6, "%s:%i Enabling automatic multi-tag polling", "_Dispatched_NFDriverConfigureDiscovery", 688);
    }
    dispatch_get_specific(*v18);
    uint64_t v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = 688;
      _os_log_impl(&dword_2229A5000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling automatic multi-tag polling", buf, 0x12u);
    }
    char v108 = 0;
    char v28 = 1;
  }
  else if (v3)
  {
    unsigned int v29 = (const void **)MEMORY[0x263F8C6C0];
    if ((*(unsigned char *)(*(void *)(v1 + 24) + 569) & 0x10) != 0)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30) {
        v30(6, "%s:%i LPCD force always ON", "_Dispatched_NFDriverConfigureDiscovery", 697);
      }
      dispatch_get_specific(*v29);
      __int16 v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)__int16 v119 = 1024;
        *(_DWORD *)&v119[2] = 697;
        _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s:%i LPCD force always ON", buf, 0x12u);
      }
      char v13 = 1;
    }
    else if (v3 == 1)
    {
      char v13 = 0;
    }
    if (v5 == 1 || v5 == 2 && *(unsigned char *)(v1 + 62))
    {
      dispatch_get_specific(*v29);
      int v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32) {
        v32(6, "%s:%i ESE reader as config set (%d / %d)!", "_Dispatched_NFDriverConfigureDiscovery", 706, *(unsigned __int8 *)(v1 + 62), v5);
      }
      dispatch_get_specific(*v29);
      __int16 v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = *(unsigned __int8 *)(v1 + 62);
        *(_DWORD *)buf = 136446978;
        unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)__int16 v119 = 1024;
        *(_DWORD *)&v119[2] = 706;
        *(_WORD *)&v119[6] = 1024;
        *(_DWORD *)&v119[8] = v34;
        *(_WORD *)&v119[12] = 1024;
        *(_DWORD *)&v119[14] = v5;
        _os_log_impl(&dword_2229A5000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader as config set (%d / %d)!", buf, 0x1Eu);
      }
      char v108 = 0;
      char v109 = 0;
      int v113 = *(_DWORD *)(*(void *)(v1 + 24) + 716);
      int v25 = 262179;
    }
    else
    {
      char v109 = v13;
      uint64_t v35 = *(void *)(v1 + 24);
      int v36 = *(_DWORD *)(v35 + 672) & 0x3983F;
      char v108 = *(unsigned char *)(v35 + 741);
      if (v108)
      {
        dispatch_get_specific(*v29);
        uint64_t v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v37) {
          v37(6, "%s:%i Frame RF INTF activated", "_Dispatched_NFDriverConfigureDiscovery", 739);
        }
        dispatch_get_specific(*v29);
        uint64_t v38 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 739;
          _os_log_impl(&dword_2229A5000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Frame RF INTF activated", buf, 0x12u);
        }
        int v25 = v36 | 0x40002;
        uint64_t v35 = *(void *)(v1 + 24);
      }
      else
      {
        int v25 = v36 | 0x40000;
      }
      int v39 = *(_DWORD *)(v35 + 712);
      if (!v39) {
        LOWORD(v39) = *(_WORD *)(v35 + 716);
      }
      LOWORD(v113) = v39;
      int v40 = (unsigned __int16)v39;
      if ((unsigned __int16)v39 != 300)
      {
        dispatch_get_specific(*v29);
        long long v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v41) {
          v41(6, "%s:%i Non-default polling period: %u", "_Dispatched_NFDriverConfigureDiscovery", 750, v40);
        }
        dispatch_get_specific(*v29);
        long long v42 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 750;
          *(_WORD *)&v119[6] = 1024;
          *(_DWORD *)&v119[8] = v40;
          _os_log_impl(&dword_2229A5000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Non-default polling period: %u", buf, 0x18u);
        }
      }
    }
    unsigned int v43 = phLibNfc_RemoteDev_NtfRegister();
    if (v43)
    {
      unsigned int v44 = v43;
      dispatch_get_specific(*v29);
      long long v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v45) {
        v45(3, "%s:%i status=0x%04X", "_Dispatched_NFDriverConfigureDiscovery", 775, v44);
      }
      dispatch_get_specific(*v29);
      long long v46 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)__int16 v119 = 1024;
        *(_DWORD *)&v119[2] = 775;
        *(_WORD *)&v119[6] = 1024;
        *(_DWORD *)&v119[8] = v44;
        _os_log_impl(&dword_2229A5000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
      sub_2229BF9CC(v2, v44);
    }
    char v28 = 0;
  }
  else
  {
    char v108 = 0;
    char v109 = v13;
    LOWORD(v113) = 0;
    char v28 = 0;
    int v25 = 0x40000;
  }
  int v111 = v4;
  int v112 = v6;
  int v114 = v3;
  char v110 = v28;
  if (v4)
  {
    v25 &= 0x3FFFFu;
    uint64_t v47 = *(void *)(*(void *)(v1 + 24) + 568);
    switch(((unint64_t)(v47 & 0x160) - 32) >> 5)
    {
      case 0uLL:
        long long v48 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v49) {
          v49(4, "%s:%i Type-A only", "_Dispatched_NFDriverConfigureDiscovery", 786);
        }
        dispatch_get_specific(*v48);
        __int16 v50 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 786;
          _os_log_impl(&dword_2229A5000, v50, OS_LOG_TYPE_ERROR, "%{public}s:%i Type-A only", buf, 0x12u);
        }
        char v51 = 1;
        goto LABEL_124;
      case 1uLL:
        __int16 v52 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        long long v53 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v53) {
          v53(4, "%s:%i Type-B only", "_Dispatched_NFDriverConfigureDiscovery", 790);
        }
        dispatch_get_specific(*v52);
        long long v54 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 790;
          _os_log_impl(&dword_2229A5000, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i Type-B only", buf, 0x12u);
        }
        char v51 = 2;
        goto LABEL_124;
      case 2uLL:
        int v62 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v63) {
          v63(4, "%s:%i Types-AB only", "_Dispatched_NFDriverConfigureDiscovery", 798);
        }
        dispatch_get_specific(*v62);
        int v64 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 798;
          _os_log_impl(&dword_2229A5000, v64, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-AB only", buf, 0x12u);
        }
        char v51 = 3;
        goto LABEL_124;
      case 7uLL:
        __int16 v65 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint32_t v66 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v66) {
          v66(4, "%s:%i Type-F only", "_Dispatched_NFDriverConfigureDiscovery", 794);
        }
        dispatch_get_specific(*v65);
        __int16 v67 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 794;
          _os_log_impl(&dword_2229A5000, v67, OS_LOG_TYPE_ERROR, "%{public}s:%i Type-F only", buf, 0x12u);
        }
        char v51 = 4;
        goto LABEL_124;
      case 8uLL:
        int v68 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v69) {
          v69(4, "%s:%i Types-AF only", "_Dispatched_NFDriverConfigureDiscovery", 802);
        }
        dispatch_get_specific(*v68);
        int v70 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 802;
          _os_log_impl(&dword_2229A5000, v70, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-AF only", buf, 0x12u);
        }
        char v51 = 5;
        goto LABEL_124;
      case 9uLL:
        long long v59 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v60 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v60) {
          v60(4, "%s:%i Types-BF only", "_Dispatched_NFDriverConfigureDiscovery", 806);
        }
        dispatch_get_specific(*v59);
        int v61 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 806;
          _os_log_impl(&dword_2229A5000, v61, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-BF only", buf, 0x12u);
        }
        char v51 = 6;
        goto LABEL_124;
      case 0xAuLL:
        uint64_t v71 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        int v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v72) {
          v72(4, "%s:%i Types-ABF only", "_Dispatched_NFDriverConfigureDiscovery", 810);
        }
        dispatch_get_specific(*v71);
        unint64_t v73 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 810;
          _os_log_impl(&dword_2229A5000, v73, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-ABF only", buf, 0x12u);
        }
        char v51 = 15;
LABEL_124:
        char v107 = v51;
        goto LABEL_125;
      default:
        char v55 = v4 & 1;
        if ((v4 & 2) != 0)
        {
          if ((v47 & 0x100000000) != 0 || !*(unsigned char *)(v1 + 59))
          {
            v55 |= 2u;
          }
          else
          {
            long long v56 = (const void **)MEMORY[0x263F8C6C0];
            dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
            long long v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v57) {
              v57(6, "%s:%i Type-B disabled", "_Dispatched_NFDriverConfigureDiscovery", 820);
            }
            dispatch_get_specific(*v56);
            long long v58 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
              *(_WORD *)__int16 v119 = 1024;
              *(_DWORD *)&v119[2] = 820;
              _os_log_impl(&dword_2229A5000, v58, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Type-B disabled", buf, 0x12u);
            }
          }
        }
        int v74 = v115;
        char v107 = v55 | v4 & 4;
        goto LABEL_126;
    }
  }
  char v107 = 0;
LABEL_125:
  int v74 = v115;
LABEL_126:
  if (v74) {
    int v75 = v25 | 0x80000;
  }
  else {
    int v75 = v25;
  }
  int isFeatureSupported = NF_isFeatureSupported();
  char v77 = 0;
  if (v116 && isFeatureSupported)
  {
    char v78 = *(unsigned char *)(*(void *)(v1 + 24) + 676);
    if (*(unsigned char *)(v1 + 63))
    {
      if ((*(unsigned char *)(*(void *)(v1 + 24) + 676) & 8) != 0)
      {
        unsigned int v80 = v78 & 8;
        v75 &= 0x7FFFFu;
        long long v81 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t v82 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v82) {
          v82(5, "%s:%i Disabling field detection for Single Poll express", "_Dispatched_NFDriverConfigureDiscovery", 848);
        }
        dispatch_get_specific(*v81);
        unint64_t v83 = NFSharedLogGetLogger();
        uint64_t v79 = v2;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)__int16 v119 = 1024;
          *(_DWORD *)&v119[2] = 848;
          _os_log_impl(&dword_2229A5000, v83, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling field detection for Single Poll express", buf, 0x12u);
        }
      }
      else
      {
        uint64_t v79 = v2;
        unsigned int v80 = v78 & 0xF;
      }
    }
    else
    {
      uint64_t v79 = v2;
      unsigned int v80 = v78 & 7;
    }
    uint64_t v84 = *(void *)(v1 + 24);
    if ((*(void *)(v84 + 568) & 0x400) != 0) {
      unsigned int v85 = 16;
    }
    else {
      unsigned int v85 = *(unsigned char *)(v84 + 676) & 0x10;
    }
    char v77 = v85 | v80;
    uint64_t v86 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    long long v87 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    unsigned int v88 = v85 >> 4;
    if (v87) {
      v87(6, "%s:%i Enabling express: transit=%d vas=%d generic-a=%d single_poll=%d debug=%d block=%d ", "_Dispatched_NFDriverConfigureDiscovery", 868, v80 & 1, (v80 >> 1) & 1, (v80 >> 2) & 1, v80 >> 3, v88, 0);
    }
    dispatch_get_specific(*v86);
    int v89 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448002;
      unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = 868;
      *(_WORD *)&v119[6] = 1024;
      *(_DWORD *)&v119[8] = v80 & 1;
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = (v80 >> 1) & 1;
      *(_WORD *)&v119[18] = 1024;
      *(_DWORD *)&v119[20] = (v80 >> 2) & 1;
      *(_WORD *)&v119[24] = 1024;
      *(_DWORD *)&v119[26] = v80 >> 3;
      *(_WORD *)&v119[30] = 1024;
      *(_DWORD *)&v119[32] = v88;
      *(_WORD *)&v119[36] = 1024;
      *(_DWORD *)&v119[38] = 0;
      _os_log_impl(&dword_2229A5000, v89, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling express: transit=%d vas=%d generic-a=%d single_poll=%d debug=%d block=%d ", buf, 0x36u);
    }
    uint64_t v2 = v79;
    int v74 = v115;
  }
  if (NF_isFeatureSupported())
  {
    if (!(v111 | v116 | v74)) {
      goto LABEL_154;
    }
  }
  else if (!(v111 | v74))
  {
    goto LABEL_154;
  }
  uint64_t v90 = *(void *)(v1 + 24);
  if (*(_DWORD *)(v90 + 580))
  {
    uint64_t v91 = *(void *)(v90 + 568);
    if ((v91 & 0x2000000) == 0)
    {
      unsigned int v92 = (v91 >> 20) & 1;
      char v93 = 1;
      goto LABEL_155;
    }
  }
LABEL_154:
  char v93 = 0;
  LOBYTE(v92) = 0;
LABEL_155:
  if (!*(unsigned char *)(v1 + 65))
  {
LABEL_161:
    if (v114 == 3)
    {
      long long v97 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v98 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v98) {
        v98(6, "%s:%i Changing config mode to MULTI_TAG", "_Dispatched_NFDriverConfigureDiscovery", 913);
      }
      dispatch_get_specific(*v97);
      int v99 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)__int16 v119 = 1024;
        *(_DWORD *)&v119[2] = 913;
        _os_log_impl(&dword_2229A5000, v99, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Changing config mode to MULTI_TAG", buf, 0x12u);
      }
      char v100 = 0;
    }
    else
    {
      char v100 = 0;
    }
    goto LABEL_173;
  }
  __int16 v94 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v95 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v114)
  {
    if (v95) {
      v95(4, "%s:%i Full HCE can't be used with polling", "_Dispatched_NFDriverConfigureDiscovery", 907);
    }
    dispatch_get_specific(*v94);
    __int16 v96 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = 907;
      _os_log_impl(&dword_2229A5000, v96, OS_LOG_TYPE_ERROR, "%{public}s:%i Full HCE can't be used with polling", buf, 0x12u);
    }
    goto LABEL_161;
  }
  if (v95) {
    v95(6, "%s:%i Forcing full hce routing", "_Dispatched_NFDriverConfigureDiscovery", 903);
  }
  dispatch_get_specific(*v94);
  int v101 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
    *(_WORD *)__int16 v119 = 1024;
    *(_DWORD *)&v119[2] = 903;
    _os_log_impl(&dword_2229A5000, v101, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Forcing full hce routing", buf, 0x12u);
  }
  char v100 = 1;
LABEL_173:
  *(_OWORD *)&v119[17] = v133;
  *(_OWORD *)&v119[33] = v134;
  *(_OWORD *)uint64_t v120 = *(_OWORD *)v135;
  *(_DWORD *)buf = v75;
  LOWORD(v118) = v113;
  WORD1(v118) = 256;
  BYTE4(v118) = 0;
  BYTE5(v118) = v107;
  HIWORD(v118) = 0;
  v119[0] = v77;
  *(_DWORD *)&v120[15] = *(_DWORD *)&v135[15];
  *(_OWORD *)&v119[1] = v132;
  char v121 = v109;
  __int16 v122 = 0;
  char v123 = 0;
  char v124 = v93;
  char v125 = v92;
  char v126 = v110;
  char v127 = 0;
  int v128 = v112;
  char v129 = v108;
  char v130 = v100;
  __int16 v131 = 0;
  unsigned int v102 = phLibNfc_Mgt_ConfigureDiscovery();
  if (v102 != 13)
  {
    unsigned int v103 = v102;
    long long v104 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v105 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v105) {
      v105(3, "%s:%i status=0x%04X", "_Dispatched_NFDriverConfigureDiscovery", 925, v103);
    }
    dispatch_get_specific(*v104);
    long long v106 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)__int16 v119 = 1024;
      *(_DWORD *)&v119[2] = 925;
      *(_WORD *)&v119[6] = 1024;
      *(_DWORD *)&v119[8] = v103;
      _os_log_impl(&dword_2229A5000, v106, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(v2, v103);
    sub_2229BF93C(v2);
  }
}

void sub_2229E3FE4(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

void sub_2229E4024(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_ConfigRoutingTable();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverConfigRoutingTable_block_invoke", 3484, v3);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v8 = "_Async_NFDriverConfigRoutingTable_block_invoke";
      __int16 v9 = 1024;
      int v10 = 3484;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 48), v3);
    sub_2229BF93C(*(void ***)(a1 + 48));
  }
}

void sub_2229E4170(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

void sub_2229E41B0(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24);
  uint64_t v3 = *(void *)(v2 + 568) << 61;
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  v22[0] = *(void *)(v2 + 544);
  v22[1] = (unint64_t)sub_2229E452C & (v3 >> 63);
  uint64_t v23 = 0;
  char v4 = NFIsRestoreOS();
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
  if (v4) {
    LOBYTE(v6) = 1;
  }
  else {
    int v6 = (*(unsigned __int8 *)(v5 + 570) >> 5) & 1;
  }
  LOBYTE(v23) = v6;
  BYTE1(v23) = *(unsigned char *)(v5 + 740);
  if (NFIsInternalBuild() && (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 24) + 571) & 4) != 0
    || !NFHardwareHasFollowerReset())
  {
    HIDWORD(v28) = 0;
    BYTE2(v23) = 0;
  }
  else
  {
    HIDWORD(v28) = 1;
    BYTE2(v23) = 1;
  }
  *(void *)&long long v27 = v22;
  *((void *)&v27 + 1) = v22;
  DWORD2(v25) = 0;
  unsigned int v7 = *(int **)(a1 + 32);
  int v8 = *v7;
  if (*v7 == 3)
  {
    long long v26 = *(_OWORD *)(v7 + 2);
    int v9 = 6;
  }
  else
  {
    *(void *)&long long v25 = *((void *)v7 + 1);
    if (v8 == 2) {
      int v9 = 7;
    }
    else {
      int v9 = 1;
    }
  }
  DWORD2(v24) = v9;
  if (*((unsigned char *)v7 + 56)) {
    DWORD2(v25) = 1;
  }
  MwVersionStr = (const char *)phLibNfc_Mgt_GetMwVersionStr();
  __int16 v11 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (MwVersionStr)
  {
    if (Logger) {
      Logger(6, "%s:%i %s", "_Async_NFDriverOpen_block_invoke", 340, MwVersionStr);
    }
    dispatch_get_specific(*v11);
    uint64_t v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v30 = "_Async_NFDriverOpen_block_invoke";
      __int16 v31 = 1024;
      int v32 = 340;
      __int16 v33 = 2080;
      int v34 = MwVersionStr;
      __int16 v14 = "%{public}s:%i %s";
      int v15 = v13;
      os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
      uint32_t v17 = 28;
LABEL_25:
      _os_log_impl(&dword_2229A5000, v15, v16, v14, buf, v17);
    }
  }
  else
  {
    if (Logger) {
      Logger(3, "%s:%i MW Version is NULL?", "_Async_NFDriverOpen_block_invoke", 342);
    }
    dispatch_get_specific(*v11);
    unsigned int v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v30 = "_Async_NFDriverOpen_block_invoke";
      __int16 v31 = 1024;
      int v32 = 342;
      __int16 v14 = "%{public}s:%i MW Version is NULL?";
      int v15 = v18;
      os_log_type_t v16 = OS_LOG_TYPE_ERROR;
      uint32_t v17 = 18;
      goto LABEL_25;
    }
  }
  unsigned int v19 = phLibNfc_Mgt_ConfigureDriver();
  if (v19)
  {
    dispatch_get_specific(*v11);
    int v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20) {
      v20(3, "%s:%i status=0x%04X", "_Async_NFDriverOpen_block_invoke", 349, v19);
    }
    dispatch_get_specific(*v11);
    uint64_t v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v30 = "_Async_NFDriverOpen_block_invoke";
      __int16 v31 = 1024;
      int v32 = 349;
      __int16 v33 = 1024;
      LODWORD(v34) = v19;
      _os_log_impl(&dword_2229A5000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  sub_2229BF9CC(*(void **)(a1 + 40), v19);
  sub_2229BF93C(*(void ***)(a1 + 40));
}

uint64_t sub_2229E452C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  if (byte_26ABD841C)
  {
    int v6 = "REDACTED";
    uint64_t v7 = 8;
  }
  else
  {
    int v6 = a4;
    uint64_t v7 = a5;
  }
  return MEMORY[0x270F9A330](a1, a3, v6, v7);
}

void sub_2229E4558(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_UnConfigureDriver();
  if (v2)
  {
    uint64_t v3 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverClose_block_invoke", 369, v2);
    }
    dispatch_get_specific(*v3);
    uint64_t v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v7 = "_Async_NFDriverClose_block_invoke";
      __int16 v8 = 1024;
      int v9 = 369;
      __int16 v10 = 1024;
      unsigned int v11 = v2;
      _os_log_impl(&dword_2229A5000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  sub_2229BF9CC(*(void **)(a1 + 40), v2);
  sub_2229BF93C(*(void ***)(a1 + 40));
}

void sub_2229E4688(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int FwVersion = phLibNfc_Mgt_GetFwVersion();
  if (FwVersion != 13)
  {
    unsigned int v3 = FwVersion;
    char v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverGetFirmwareVersion_block_invoke", 407, v3);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v8 = "_Async_NFDriverGetFirmwareVersion_block_invoke";
      __int16 v9 = 1024;
      int v10 = 407;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 48), v3);
    sub_2229BF93C(*(void ***)(a1 + 48));
  }
}

void sub_2229E47D0(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  sub_2229BF9CC(a2, a4);

  sub_2229BF93C(a2);
}

BOOL sub_2229E4810(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v49 = *MEMORY[0x263EF8340];
  unsigned int v6 = a2 - 1;
  if (a2 != 1 && a3 == 3)
  {
    uint64_t v7 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i phLibNfc_SE_ActModePwrOff is only available on ese - switching to ActModeOff", "_NFDriverSetSEMode", 3901);
    }
    dispatch_get_specific(*v7);
    __int16 v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "_NFDriverSetSEMode";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3901;
      _os_log_impl(&dword_2229A5000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_SE_ActModePwrOff is only available on ese - switching to ActModeOff", buf, 0x12u);
    }
    unsigned int v3 = 1;
  }
  uint64_t v10 = sub_2229D6CD0(a1, a2);
  if (v10) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  if (a2 == 4 || v11)
  {
    if (v6 > 7) {
      unsigned int v19 = "UNKNOWN";
    }
    else {
      unsigned int v19 = (&off_26463B930)[v6];
    }
    if (v3 > 3) {
      int v20 = "UNKNOWN";
    }
    else {
      int v20 = (&off_26463B970)[v3];
    }
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21) {
      v21(6, "%s:%i (%s) mode=%s", "_NFDriverSetSEMode", 3936, v19, v20);
    }
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "_NFDriverSetSEMode";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3936;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v19;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&unsigned char buf[30] = v20;
      _os_log_impl(&dword_2229A5000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i (%s) mode=%s", buf, 0x26u);
    }
    int v23 = 1;
    while (1)
    {
      sub_2229C382C(a1);
      long long v24 = sub_2229BF5F0();
      pthread_mutex_lock((pthread_mutex_t *)(v24[2] + 8));
      uint64_t v25 = v24[2];
      ++*(void *)v25;
      pthread_mutex_unlock((pthread_mutex_t *)(v25 + 8));
      long long v26 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229E500C;
      *(void *)&unsigned char buf[24] = &unk_26463B7F0;
      *(void *)&uint8_t buf[32] = a1;
      uint64_t v46 = v11;
      unsigned int v48 = v3;
      uint64_t v47 = v24;
      dispatch_async_and_wait(v26, buf);
      uint64_t v27 = sub_2229BFAD8(v24);
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 24) + 536));
      if (!v27)
      {
        sub_2229BF93C((void **)v24);
        return 1;
      }
      if (*v24 != 67) {
        break;
      }
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v28) {
        v28(3, "%s:%i eSE power-on failed! (%d/%d)", "_NFDriverSetSEMode", 3947, v23, 3);
      }
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      unsigned int v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3947;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v23;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = 3;
        _os_log_impl(&dword_2229A5000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i eSE power-on failed! (%d/%d)", buf, 0x1Eu);
      }
      sub_2229BF93C((void **)v24);
      if (++v23 == 4) {
        return 0;
      }
    }
    if (*v24 == 147)
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30) {
        v30(3, "%s:%i status=0x%04llX", "_NFDriverSetSEMode", 3955, *v24);
      }
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      __int16 v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = *v24;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3955;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v32;
        _os_log_impl(&dword_2229A5000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      sub_2229BF93C((void **)v24);
      __int16 v33 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229C31BC;
      *(void *)&unsigned char buf[24] = &unk_26463ADD8;
      *(void *)&uint8_t buf[32] = a1;
      dispatch_async(v33, buf);
      usleep(0x7A120u);
      int v34 = "Command rejected";
      uint64_t v35 = a1;
      uint64_t v36 = 57007;
    }
    else
    {
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v37) {
        v37(3, "%s:%i status=0x%04llX", "_NFDriverSetSEMode", 3963, *v24);
      }
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t v38 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = *v24;
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3963;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v39;
        _os_log_impl(&dword_2229A5000, v38, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      sub_2229BF93C((void **)v24);
      __int16 v44 = 0;
      BOOL v40 = sub_2229C8D00(a1, 0, 0, 0, &v44, 0);
      long long v41 = *(NSObject **)(*(void *)(a1 + 24) + 544);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_2229C31BC;
      *(void *)&unsigned char buf[24] = &unk_26463ADD8;
      *(void *)&uint8_t buf[32] = a1;
      dispatch_async(v41, buf);
      if (!v40)
      {
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        long long v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v42) {
          v42(5, "%s:%i Get stack breadcrumb failed", "_NFDriverSetSEMode", 3970);
        }
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        unsigned int v43 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
          return 0;
        }
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3970;
        os_log_type_t v16 = "%{public}s:%i Get stack breadcrumb failed";
        uint32_t v17 = v43;
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_18;
      }
      if (v44 != 44 && v44 != 34) {
        return 0;
      }
      int v34 = "_NFDriverSetSEMode: CRC error or response timeout";
      uint64_t v35 = a1;
      uint64_t v36 = 57005;
    }
    NFDriverSimulateCrash(v35, v36, (uint64_t)v34);
    return 0;
  }
  if (v3 == 1) {
    return 1;
  }
  unsigned int v12 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13) {
    v13(3, "%s:%i No SE handle", "_NFDriverSetSEMode", 3908);
  }
  dispatch_get_specific(*v12);
  __int16 v14 = NFSharedLogGetLogger();
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "_NFDriverSetSEMode";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3908;
    os_log_type_t v16 = "%{public}s:%i No SE handle";
    uint32_t v17 = v14;
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
LABEL_18:
    _os_log_impl(&dword_2229A5000, v17, v18, v16, buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_2229E500C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_SE_SetMode();
  unsigned int v3 = v2;
  if (v2)
  {
    if (v2 == 13) {
      return;
    }
    char v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetSEMode_block_invoke", 3295, v3);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v8 = "_Async_NFDriverSetSEMode_block_invoke";
      __int16 v9 = 1024;
      int v10 = 3295;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  sub_2229BF9CC(*(void **)(a1 + 48), v3);
  sub_2229BF93C(*(void ***)(a1 + 48));
}

void sub_2229E515C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  sub_2229BF9CC(a2, a5);

  sub_2229BF93C(a2);
}

void sub_2229E519C(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_eSeSvddControl();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    char v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetSEAlwaysOn_block_invoke", 3329, v3);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v8 = "_Async_NFDriverSetSEAlwaysOn_block_invoke";
      __int16 v9 = 1024;
      int v10 = 3329;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229E52E4(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

void sub_2229E5324(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_ConfigurePowerMode();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    char v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetStandbyMode_block_invoke", 984, v3);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v8 = "_Async_NFDriverSetStandbyMode_block_invoke";
      __int16 v9 = 1024;
      int v10 = 984;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v3);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229E546C(uint64_t a1, void **a2, unsigned int a3)
{
  sub_2229BF9CC(a2, a3);

  sub_2229BF93C(a2);
}

void sub_2229E54AC(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int Atr = phLibNfc_eSE_GetAtr();
  if (Atr != 13)
  {
    unsigned int v3 = Atr;
    char v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSEGetATR_block_invoke", 3259, v3);
    }
    dispatch_get_specific(*v4);
    unsigned int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v8 = "_Async_NFDriverSEGetATR_block_invoke";
      __int16 v9 = 1024;
      int v10 = 3259;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 56), v3);
    sub_2229BF93C(*(void ***)(a1 + 56));
  }
}

void sub_2229E55F4(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  sub_2229BF9CC(a2, a4);

  sub_2229BF93C(a2);
}

void sub_2229E5634(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_TriggerRfFieldOnNtf();
  if (v2) {
    BOOL v3 = v2 == 13;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    unsigned int v4 = v2;
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to setup delayed wake, status = 0x%04X", "_Async_NFDriverTriggerDelayedWake_block_invoke", 1015, v4);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v9 = "_Async_NFDriverTriggerDelayedWake_block_invoke";
      __int16 v10 = 1024;
      int v11 = 1015;
      __int16 v12 = 1024;
      unsigned int v13 = v4;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup delayed wake, status = 0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 40), v4);
    sub_2229BF93C(*(void ***)(a1 + 40));
  }
}

void sub_2229E5780(uint64_t a1, void **a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Failed to setup delayed wake, status = 0x%04X", "_Callback_NFDriverDelayedWake", 996, a3);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v9 = "_Callback_NFDriverDelayedWake";
      __int16 v10 = 1024;
      int v11 = 996;
      __int16 v12 = 1024;
      unsigned int v13 = a3;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup delayed wake, status = 0x%04X", buf, 0x18u);
    }
  }
  sub_2229BF9CC(a2, a3);
  sub_2229BF93C(a2);
}

void sub_2229E58A0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (NFIsInternalBuild())
  {
    unsigned int MemoryDump = phLibNfc_GetMemoryDump();
    unsigned int v3 = MemoryDump;
    if (MemoryDump)
    {
      if (MemoryDump == 13) {
        return;
      }
      unsigned int v4 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger) {
        Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverDumpMemory_block_invoke", 1315, v3);
      }
      dispatch_get_specific(*v4);
      unsigned int v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        __int16 v9 = "_Async_NFDriverDumpMemory_block_invoke";
        __int16 v10 = 1024;
        int v11 = 1315;
        __int16 v12 = 1024;
        unsigned int v13 = v3;
        _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
    }
    sub_2229BF9CC(*(void **)(a1 + 32), v3);
    sub_2229BF93C(*(void ***)(a1 + 32));
  }
  else
  {
    sub_2229BF9CC(*(void **)(a1 + 32), 30);
    uint64_t v7 = *(void ***)(a1 + 32);
    sub_2229BF93C(v7);
  }
}

void sub_2229E5A40(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a4)
  {
    uint64_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405730B0C9uLL);
    __int16 v8 = v7;
    if (v7)
    {
      *uint64_t v7 = *(void *)(a3 + 8);
      v7[1] = NFDataCreateWithBytes();
    }
    **(void **)(a2 + 8) = v8;
  }
  sub_2229BF9CC((void *)a2, a4);

  sub_2229BF93C((void **)a2);
}

void sub_2229E5ADC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(*(void *)(v2 + 24) + 743) = 1;
  sub_2229D6CD0(v2, *(_DWORD *)(a1 + 56));
  unsigned int v3 = phLibNfc_eSE_Transceive();
  if (v3 != 13)
  {
    unsigned int v4 = v3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 24) + 743) = 0;
    uint64_t v5 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSETransceive_block_invoke", 3454, v4);
    }
    dispatch_get_specific(*v5);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      __int16 v9 = "_Async_NFDriverSETransceive_block_invoke";
      __int16 v10 = 1024;
      int v11 = 3454;
      __int16 v12 = 1024;
      unsigned int v13 = v4;
      _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 48), v4);
    sub_2229BF93C(*(void ***)(a1 + 48));
  }
}

void sub_2229E5C64(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a2 || (uint64_t v7 = a2[1]) == 0) {
    __assert_rtn("_Callback_NFDriverSETransceive", "NFDriver.c", 3353, "txContext != NULL");
  }
  if (a6 == 217)
  {
    unsigned int v13 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i Reset notification. Len = %d", "_Callback_NFDriverSETransceive", 3365, *(_DWORD *)(a4 + 8));
    }
    dispatch_get_specific(*v13);
    int v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = *(_DWORD *)(a4 + 8);
      *(_DWORD *)buf = 136446722;
      uint64_t v21 = "_Callback_NFDriverSETransceive";
      __int16 v22 = 1024;
      int v23 = 3365;
      __int16 v24 = 1024;
      int v25 = v16;
      _os_log_impl(&dword_2229A5000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Reset notification. Len = %d", buf, 0x18u);
    }
    a6 = 217;
  }
  else if (!a6)
  {
    if (a4 && (uint64_t v9 = *(unsigned int *)(a4 + 8), v9 > 1))
    {
      a6 = 0;
      *uint64_t v7 = v9;
    }
    else
    {
      __int16 v10 = (const void **)MEMORY[0x263F8C6C0];
      dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
      int v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11)
      {
        if (a4) {
          int v12 = *(_DWORD *)(a4 + 8);
        }
        else {
          int v12 = 0;
        }
        v11(3, "%s:%i Invalid data returned: %d", "_Callback_NFDriverSETransceive", 3357, v12);
      }
      dispatch_get_specific(*v10);
      uint32_t v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if (a4) {
          int v18 = *(_DWORD *)(a4 + 8);
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)buf = 136446722;
        uint64_t v21 = "_Callback_NFDriverSETransceive";
        __int16 v22 = 1024;
        int v23 = 3357;
        __int16 v24 = 1024;
        int v25 = v18;
        _os_log_impl(&dword_2229A5000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid data returned: %d", buf, 0x18u);
      }
      a6 = 53261;
    }
  }
  uint64_t v19 = v7[2];
  if (v19) {
    *(unsigned char *)(*(void *)(v19 + 24) + 743) = 0;
  }
  sub_2229BF9CC(a2, a6);
  sub_2229BF93C(a2);
}

void sub_2229E5ED0(double a1, uint64_t a2, void *a3, uint64_t a4, _DWORD *a5, int a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!a3 || (uint64_t v7 = a3[1]) == 0) {
    __assert_rtn("_Callback_NFDriverSETransceiveWTX", "NFDriver.c", 3381, "txContext != NULL");
  }
  if (a6 == 74)
  {
    if (a5)
    {
      if (*(_DWORD *)(v7 + 8))
      {
        LODWORD(a1) = *a5;
        sub_2229BFA30((uint64_t)a3, (double)*(unint64_t *)&a1 / 1000.0);
        --*(_DWORD *)(v7 + 8);
      }
      else
      {
        int v18 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(3, "%s:%i WTX: error, too many WTX", "_Callback_NFDriverSETransceiveWTX", 3392);
        }
        dispatch_get_specific(*v18);
        int v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          int v23 = "_Callback_NFDriverSETransceiveWTX";
          __int16 v24 = 1024;
          int v25 = 3392;
          _os_log_impl(&dword_2229A5000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i WTX: error, too many WTX", buf, 0x12u);
        }
        sub_2229BF9CC(a3, 44);
        uint64_t v21 = *(void *)(v7 + 16);
        if (v21) {
          *(unsigned char *)(*(void *)(v21 + 24) + 743) = 0;
        }
      }
      return;
    }
    int v15 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    int v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16) {
      v16(4, "%s:%i WTX: no info", "_Callback_NFDriverSETransceiveWTX", 3400);
    }
    dispatch_get_specific(*v15);
    uint32_t v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      int v23 = "_Callback_NFDriverSETransceiveWTX";
      __int16 v24 = 1024;
      int v25 = 3400;
      int v12 = "%{public}s:%i WTX: no info";
      unsigned int v13 = v17;
      uint32_t v14 = 18;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10) {
      v10(3, "%s:%i WTX: error %d", "_Callback_NFDriverSETransceiveWTX", 3404, a6);
    }
    dispatch_get_specific(*v9);
    int v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      int v23 = "_Callback_NFDriverSETransceiveWTX";
      __int16 v24 = 1024;
      int v25 = 3404;
      __int16 v26 = 1024;
      int v27 = a6;
      int v12 = "%{public}s:%i WTX: error %d";
      unsigned int v13 = v11;
      uint32_t v14 = 24;
LABEL_15:
      _os_log_impl(&dword_2229A5000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    }
  }
}

uint64_t sub_2229E61AC(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i setting rate: %d", "_NFDriverSetISO15693LocalDataRate_block_invoke", 4381, *(_DWORD *)(a1 + 40));
  }
  dispatch_get_specific(*v2);
  unsigned int v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 40);
    LODWORD(buf[0]) = 136446722;
    *(void *)((char *)buf + 4) = "_NFDriverSetISO15693LocalDataRate_block_invoke";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 4381;
    WORD1(buf[1]) = 1024;
    DWORD1(buf[1]) = v5;
    _os_log_impl(&dword_2229A5000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting rate: %d", (uint8_t *)buf, 0x18u);
  }
  memset(buf, 0, sizeof(buf));
  int v6 = *(_DWORD *)(a1 + 40);
  LODWORD(buf[0]) = 8;
  DWORD2(buf[0]) = v6;
  HIDWORD(buf[0]) = v6;
  return phLibNfc_Mgt_SetNfccParams();
}

void sub_2229E630C(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  char v12 = 3;
  uint64_t v2 = malloc_type_calloc(1uLL, 0x30uLL, 0x1010040016340ADuLL);
  if (v2)
  {
    unsigned int v3 = v2;
    _WORD *v2 = 20761;
    *((unsigned char *)v2 + 2) = 1;
    *((_DWORD *)v2 + 1) = 1;
    *((void *)v2 + 1) = &v12;
    *((_DWORD *)v2 + 4) = 2000;
    *((void *)v2 + 4) = *(void *)(a1 + 40);
    v2[14] = *(_DWORD *)(a1 + 56);
    dword_26ABD842C = 666;
    unsigned int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(6, "%s:%i [C-RAW>] Soft Reset", "_Async_NFDriverHCISoftReset_block_invoke", 9452);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      uint32_t v14 = "_Async_NFDriverHCISoftReset_block_invoke";
      __int16 v15 = 1024;
      int v16 = 9452;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [C-RAW>] Soft Reset", buf, 0x12u);
    }
    sub_2229D6CD0(*(void *)(a1 + 48), *(_DWORD *)(a1 + 60));
    unsigned int v8 = phLibNfc_SE_RawTranseive();
    if (v8 != 13)
    {
      unsigned int v9 = v8;
      dispatch_get_specific(*v4);
      __int16 v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10) {
        v10(3, "%s:%i status=0x%04X", "_Async_NFDriverHCISoftReset_block_invoke", 9461, v9);
      }
      dispatch_get_specific(*v4);
      int v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        uint32_t v14 = "_Async_NFDriverHCISoftReset_block_invoke";
        __int16 v15 = 1024;
        int v16 = 9461;
        __int16 v17 = 1024;
        unsigned int v18 = v9;
        _os_log_impl(&dword_2229A5000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
      sub_2229BF9CC(*(void **)(a1 + 32), v9);
      sub_2229BF93C(*(void ***)(a1 + 32));
    }
    free(v3);
  }
  else
  {
    uint64_t v7 = *(void ***)(a1 + 32);
    sub_2229BF93C(v7);
  }
}

void sub_2229E65D0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a2)
  {
    sub_2229BF9CC(a2, a5);
    sub_2229BF93C(a2);
  }
}

void sub_2229E6618(double a1, uint64_t a2, void *a3, uint64_t a4, _DWORD *a5, int a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (a6 == 74)
  {
    if (a5)
    {
      if (dword_26ABD842C)
      {
        LODWORD(a1) = *a5;
        sub_2229BFA30((uint64_t)a3, (double)*(unint64_t *)&a1 / 1000.0);
        --dword_26ABD842C;
      }
      else
      {
        __int16 v17 = (const void **)MEMORY[0x263F8C6C0];
        dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
        uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(3, "%s:%i WTX: error, too many WTX", "_Callback_NFDriverSERawTransceiveWTX", 9411);
        }
        dispatch_get_specific(*v17);
        uint64_t v19 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v21 = "_Callback_NFDriverSERawTransceiveWTX";
          __int16 v22 = 1024;
          int v23 = 9411;
          _os_log_impl(&dword_2229A5000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i WTX: error, too many WTX", buf, 0x12u);
        }
        sub_2229BF9CC(a3, 44);
      }
      return;
    }
    uint32_t v14 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    __int16 v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15) {
      v15(4, "%s:%i WTX: no info", "_Callback_NFDriverSERawTransceiveWTX", 9416);
    }
    dispatch_get_specific(*v14);
    int v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v21 = "_Callback_NFDriverSERawTransceiveWTX";
      __int16 v22 = 1024;
      int v23 = 9416;
      int v11 = "%{public}s:%i WTX: no info";
      char v12 = v16;
      uint32_t v13 = 18;
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v8 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    unsigned int v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9) {
      v9(3, "%s:%i WTX: error %d", "_Callback_NFDriverSERawTransceiveWTX", 9420, a6);
    }
    dispatch_get_specific(*v8);
    __int16 v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      uint64_t v21 = "_Callback_NFDriverSERawTransceiveWTX";
      __int16 v22 = 1024;
      int v23 = 9420;
      __int16 v24 = 1024;
      int v25 = a6;
      int v11 = "%{public}s:%i WTX: error %d";
      char v12 = v10;
      uint32_t v13 = 24;
LABEL_13:
      _os_log_impl(&dword_2229A5000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    }
  }
}

void sub_2229E68BC(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unsigned int v2 = phLibNfc_Mgt_SetCE_ConfigParams();
  if (v2 != 13)
  {
    unsigned int v3 = v2;
    unsigned int v4 = (const void **)MEMORY[0x263F8C6C0];
    dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger) {
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetCEConfigParams_block_invoke", 9777, v3);
    }
    dispatch_get_specific(*v4);
    int v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      unsigned int v8 = "_Async_NFDriverSetCEConfigParams_block_invoke";
      __int16 v9 = 1024;
      int v10 = 9777;
      __int16 v11 = 1024;
      unsigned int v12 = v3;
      _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_2229BF9CC(*(void **)(a1 + 48), v3);
    sub_2229BF93C(*(void ***)(a1 + 48));
  }
}

BOOL sub_2229E6A04(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 32) = sub_2229E6A88;
    *(void *)(a1 + 40) = sub_2229E6B78;
    *(void *)(a1 + 48) = sub_2229E6C68;
    *(void *)(a1 + 56) = sub_2229E6D58;
    *(void *)(a1 + 64) = sub_2229E6E60;
    *(void *)(a1 + 72) = sub_2229E6F50;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(void *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 20) = 5;
  }
  return a1 != 0;
}

uint64_t sub_2229E6A88()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for Host SE!", "SetPower_Host", 23);
  }
  dispatch_get_specific(*v0);
  unsigned int v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "SetPower_Host";
    __int16 v6 = 1024;
    int v7 = 23;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229E6B78()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for Host SE!", "GetATR_Host", 29);
  }
  dispatch_get_specific(*v0);
  unsigned int v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "GetATR_Host";
    __int16 v6 = 1024;
    int v7 = 29;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229E6C68()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for Host SE!", "GetOSInfo_Host", 35);
  }
  dispatch_get_specific(*v0);
  unsigned int v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "GetOSInfo_Host";
    __int16 v6 = 1024;
    int v7 = 35;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229E6D58(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v4 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for Host SE!", "GetOSMode_Host", 41);
  }
  dispatch_get_specific(*v4);
  __int16 v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v9 = "GetOSMode_Host";
    __int16 v10 = 1024;
    int v11 = 41;
    _os_log_impl(&dword_2229A5000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  return 0;
}

uint64_t sub_2229E6E60()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v0 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for Host SE!", "GetOSUpdateLog_Host", 48);
  }
  dispatch_get_specific(*v0);
  unsigned int v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    int v5 = "GetOSUpdateLog_Host";
    __int16 v6 = 1024;
    int v7 = 48;
    _os_log_impl(&dword_2229A5000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_2229E6F50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v5 = (const void **)MEMORY[0x263F8C6C0];
  dispatch_get_specific((const void *)*MEMORY[0x263F8C6C0]);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(4, "%s:%i Not supported for Host SE!", "GetAttackCounterLog_Host", 54);
  }
  dispatch_get_specific(*v5);
  int v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    __int16 v10 = "GetAttackCounterLog_Host";
    __int16 v11 = 1024;
    int v12 = 54;
    _os_log_impl(&dword_2229A5000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  if (a3) {
    *a3 = 0;
  }
  if (a2) {
    *a2 = 0;
  }
  return 0;
}

uint64_t AMFDRCreateInstanceString()
{
  return MEMORY[0x270F91D88]();
}

uint64_t AMFDRCreateTypeWithOptions()
{
  return MEMORY[0x270F91D98]();
}

uint64_t AMFDRCreateWithOptions()
{
  return MEMORY[0x270F91DA0]();
}

uint64_t AMFDRDataApTicketCopyObjectProperty()
{
  return MEMORY[0x270F91DA8]();
}

uint64_t AMFDRDataApTicketPopulate()
{
  return MEMORY[0x270F91DB0]();
}

uint64_t AMFDRDataCopy()
{
  return MEMORY[0x270F91DC0]();
}

uint64_t AMFDRDataCopyTrustObject()
{
  return MEMORY[0x270F91DE0]();
}

uint64_t AMFDRSealingMapCopyInstanceForClass()
{
  return MEMORY[0x270F91F70]();
}

uint64_t AMFDRSealingMapCopyManifestProperties()
{
  return MEMORY[0x270F91FA0]();
}

uint64_t AMFDRSealingMapVerifySealing()
{
  return MEMORY[0x270F91FF8]();
}

uint64_t AMFDRSetOption()
{
  return MEMORY[0x270F92008]();
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x270EE42E8](theArray, range.location, range.length, value);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x270EE49A0](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x270EE49C8](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D40](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5058](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE5400](allocator, URLString, baseURL);
}

uint64_t GetElapsedTimeInMillisecondsFromMachTime()
{
  return MEMORY[0x270F9A258]();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x270EF4AB0](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD8](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x270F96010]();
}

uint64_t NFCalibrationCopyAntennaName()
{
  return MEMORY[0x270F96348]();
}

uint64_t NFCalibrationGetRFConfigTLVs()
{
  return MEMORY[0x270F96350]();
}

uint64_t NFDataAppend()
{
  return MEMORY[0x270F9A260]();
}

uint64_t NFDataAsHexString()
{
  return MEMORY[0x270F9A268]();
}

uint64_t NFDataCreateWithBytes()
{
  return MEMORY[0x270F9A270]();
}

uint64_t NFDataCreateWithBytesNoCopy()
{
  return MEMORY[0x270F9A278]();
}

uint64_t NFDataCreateWithHexString()
{
  return MEMORY[0x270F9A288]();
}

uint64_t NFDataCreateWithLength()
{
  return MEMORY[0x270F9A290]();
}

uint64_t NFDataPrintAsHexString()
{
  return MEMORY[0x270F9A298]();
}

uint64_t NFDataRelease()
{
  return MEMORY[0x270F9A2A0]();
}

uint64_t NFGetProductType()
{
  return MEMORY[0x270F9A2A8]();
}

uint64_t NFHardwareHasFollowerReset()
{
  return MEMORY[0x270F96358]();
}

uint64_t NFHardwareHasVirtualGPIO()
{
  return MEMORY[0x270F96360]();
}

uint64_t NFHardwareInterfaceGetType()
{
  return MEMORY[0x270F96368]();
}

uint64_t NFHardwareInterfaceIsHammerfestAlive()
{
  return MEMORY[0x270F96370]();
}

uint64_t NFHardwareSerialDebugLastMessage()
{
  return MEMORY[0x270F96378]();
}

uint64_t NFHardwareSerialDump()
{
  return MEMORY[0x270F96380]();
}

uint64_t NFIsInternalBuild()
{
  return MEMORY[0x270F9A2B0]();
}

uint64_t NFIsRestoreOS()
{
  return MEMORY[0x270F9A2B8]();
}

uint64_t NFLogGetLogger()
{
  return MEMORY[0x270F9A2C0]();
}

uint64_t NFProductAllowsWiredInDLMode()
{
  return MEMORY[0x270F9A2D0]();
}

uint64_t NFProductHasModuleCal()
{
  return MEMORY[0x270F9A2D8]();
}

uint64_t NFProductHasNFCRadio()
{
  return MEMORY[0x270F9A2E0]();
}

uint64_t NFProductHasThermistor()
{
  return MEMORY[0x270F9A2E8]();
}

uint64_t NFProductIsDevBoard()
{
  return MEMORY[0x270F9A2F0]();
}

uint64_t NFProductIsWatch()
{
  return MEMORY[0x270F9A310]();
}

uint64_t NFSharedLogGetLogger()
{
  return MEMORY[0x270F9A328]();
}

uint64_t NFSharedSignpostLog()
{
  return MEMORY[0x270F9A340]();
}

uint64_t NFSimulateCrash()
{
  return MEMORY[0x270F9A348]();
}

uint64_t NF_isFeatureSupported()
{
  return MEMORY[0x270F9A350]();
}

uint64_t TLVCreateWithData()
{
  return MEMORY[0x270F9A358]();
}

uint64_t TLVCreateWithDataMixed()
{
  return MEMORY[0x270F9A360]();
}

uint64_t TLVRelease()
{
  return MEMORY[0x270F9A368]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x270ED7EB0](a1, *(void *)&a2, a3, a4);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x270ED8EF0](*(void *)&__clock_id, __tp);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x270ED9320](key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x270ED95D0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x270ED9600]();
}

void exit(int a1)
{
}

void free(void *a1)
{
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x270EDA158]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

uint64_t phLibNfc_AntennaSelfTest()
{
  return MEMORY[0x270F961A8]();
}

uint64_t phLibNfc_CardEmulation_NtfRegister()
{
  return MEMORY[0x270F961B0]();
}

uint64_t phLibNfc_GetMemoryDump()
{
  return MEMORY[0x270F961C0]();
}

uint64_t phLibNfc_Mgt_ConfigRoutingTable()
{
  return MEMORY[0x270F961D0]();
}

uint64_t phLibNfc_Mgt_ConfigureDiscovery()
{
  return MEMORY[0x270F961D8]();
}

uint64_t phLibNfc_Mgt_ConfigureDriver()
{
  return MEMORY[0x270F961E0]();
}

uint64_t phLibNfc_Mgt_ConfigureHsuParams()
{
  return MEMORY[0x270F961E8]();
}

uint64_t phLibNfc_Mgt_ConfigureLogging()
{
  return MEMORY[0x270F961F0]();
}

uint64_t phLibNfc_Mgt_ConfigureMwLogging()
{
  return MEMORY[0x270F961F8]();
}

uint64_t phLibNfc_Mgt_ConfigurePowerMode()
{
  return MEMORY[0x270F96200]();
}

uint64_t phLibNfc_Mgt_DeInitialize()
{
  return MEMORY[0x270F96208]();
}

uint64_t phLibNfc_Mgt_DnldGeneralNtfRegister()
{
  return MEMORY[0x270F96210]();
}

uint64_t phLibNfc_Mgt_GeneralNtfRegister()
{
  return MEMORY[0x270F96218]();
}

uint64_t phLibNfc_Mgt_GetClrAssertRegs()
{
  return MEMORY[0x270F96220]();
}

uint64_t phLibNfc_Mgt_GetDebugInfo()
{
  return MEMORY[0x270F96228]();
}

uint64_t phLibNfc_Mgt_GetFwVersion()
{
  return MEMORY[0x270F96230]();
}

uint64_t phLibNfc_Mgt_GetMwVersionStr()
{
  return MEMORY[0x270F96238]();
}

uint64_t phLibNfc_Mgt_GetNfccParams()
{
  return MEMORY[0x270F96240]();
}

uint64_t phLibNfc_Mgt_GetTagID()
{
  return MEMORY[0x270F96248]();
}

uint64_t phLibNfc_Mgt_GetstackCapabilities()
{
  return MEMORY[0x270F96250]();
}

uint64_t phLibNfc_Mgt_Initialize()
{
  return MEMORY[0x270F96258]();
}

uint64_t phLibNfc_Mgt_IoCtl()
{
  return MEMORY[0x270F96260]();
}

uint64_t phLibNfc_Mgt_SetCE_ConfigParams()
{
  return MEMORY[0x270F96268]();
}

uint64_t phLibNfc_Mgt_SetNfccParams()
{
  return MEMORY[0x270F96270]();
}

uint64_t phLibNfc_Mgt_SetRfSettings()
{
  return MEMORY[0x270F96278]();
}

uint64_t phLibNfc_Mgt_UnConfigureDriver()
{
  return MEMORY[0x270F96280]();
}

uint64_t phLibNfc_Mgt_ValidateEepromSettings()
{
  return MEMORY[0x270F96288]();
}

uint64_t phLibNfc_Mgt_VenResetStatus()
{
  return MEMORY[0x270F96290]();
}

uint64_t phLibNfc_Mgt_eSeCfgDnldMode()
{
  return MEMORY[0x270F96298]();
}

uint64_t phLibNfc_Mgt_eSeSvddControl()
{
  return MEMORY[0x270F962A0]();
}

uint64_t phLibNfc_RemoteDev_NtfRegister()
{
  return MEMORY[0x270F962E0]();
}

uint64_t phLibNfc_RemoteDev_NtfUnregister()
{
  return MEMORY[0x270F962E8]();
}

uint64_t phLibNfc_RemoteDev_Receive()
{
  return MEMORY[0x270F962F0]();
}

uint64_t phLibNfc_SE_GetSecureElementList()
{
  return MEMORY[0x270F96308]();
}

uint64_t phLibNfc_SE_NtfRegister()
{
  return MEMORY[0x270F96310]();
}

uint64_t phLibNfc_SE_NtfUnregister()
{
  return MEMORY[0x270F96318]();
}

uint64_t phLibNfc_SE_RawTranseive()
{
  return MEMORY[0x270F96320]();
}

uint64_t phLibNfc_SE_SetMode()
{
  return MEMORY[0x270F96328]();
}

uint64_t phLibNfc_TriggerRfFieldOnNtf()
{
  return MEMORY[0x270F96330]();
}

uint64_t phLibNfc_eSE_GetAtr()
{
  return MEMORY[0x270F96338]();
}

uint64_t phLibNfc_eSE_Transceive()
{
  return MEMORY[0x270F96340]();
}

uint64_t phOsalNfc_setHardwareType()
{
  return MEMORY[0x270F96478]();
}

uint64_t phTmlNfc_IoCtl()
{
  return MEMORY[0x270F964A8]();
}

uint64_t postAnalyticsFlcTrimmingErrorEvent()
{
  return MEMORY[0x270F9A370]();
}

uint64_t postAnalyticsHardwareExceptionEvent()
{
  return MEMORY[0x270F9A378]();
}

uint64_t postAnalyticsMainSERemovedEvent()
{
  return MEMORY[0x270F9A380]();
}

uint64_t postAnalyticsMiddlewareExceptionEvent()
{
  return MEMORY[0x270F9A388]();
}

uint64_t postAnalyticsTxLdoErrorEvent()
{
  return MEMORY[0x270F9A390]();
}

uint64_t postAnalyticsTxLdoOverCurrentErrorEvent()
{
  return MEMORY[0x270F9A398]();
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE58](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x270EDAE60](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE68](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x270EDAE80](a1, a2, a3);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x270EDB158](__ptr, __size);
}

uint64_t resetCALoadStackExceptionCount()
{
  return MEMORY[0x270F9A3A0]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x270EDB508](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}