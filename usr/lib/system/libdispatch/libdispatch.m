uint64_t dispatch_atfork_prepare()
{
  uint64_t vars8;

  _voucher_atfork_prepare();

  return _os_object_atfork_prepare();
}

uint64_t dispatch_atfork_parent()
{
  _os_object_atfork_parent();

  return _voucher_atfork_parent();
}

void dispatch_atfork_child()
{
  if (_dispatch_unsafe_fork) {
    _dispatch_child_of_unsafe_fork = 1;
  }
  _dispatch_queue_atfork_child();
  _dispatch_unsafe_fork = 0;
}

uint64_t _dispatch_sigmask()
{
  sigset_t v3 = -67116761;
  uint64_t v0 = pthread_sigmask(1, &v3, 0);
  uint64_t v1 = v0;
  if (v0) {
    _dispatch_bug(108, (int)v0);
  }
  return v1;
}

uint64_t _dispatch_is_multithreaded()
{
  return _dispatch_unsafe_fork & 1;
}

uint64_t _dispatch_is_fork_of_multithreaded_parent()
{
  return _dispatch_child_of_unsafe_fork;
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  uint64_t v0 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (v0) {
    return v0;
  }
  else {
    return (dispatch_queue_t)&off_1EB1CE800;
  }
}

uint64_t *_dispatch_queue_attr_to_info(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = (char *)result - (char *)&_dispatch_queue_attr_concurrent;
    if (result < (uint64_t *)&_dispatch_queue_attr_concurrent || result >= qword_1ED74FA00) {
      _dispatch_queue_attr_to_info_cold_1(result);
    }
    unint64_t v3 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    unint64_t v4 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64;
    return (uint64_t *)(((v1 << 15) & 0x100000 | (((v1 >> 4) & 1) << 21) | -(((v1 >> 4) << 6) & 0xF00) & 0xFF00 | (((unint64_t)(v1 >> 4) >> 6) - 7 * v3) | ((v3 - 3 * ((v3 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 18) | ((v4 - 3 * ((v4 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 16)) ^ 0x100000);
  }
  return result;
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  if (qos_class <= QOS_CLASS_USER_INTERACTIVE)
  {
    unsigned __int8 v3 = relative_priority;
    if (((1 << qos_class) & 0x202220221) != 0
      && (relative_priority == 0 || relative_priority >= 0xFFFFFFF1))
    {
      v6 = _dispatch_queue_attr_to_info((uint64_t *)attr);
      HIDWORD(v8) = qos_class - 5;
      LODWORD(v8) = qos_class - 5;
      unsigned int v7 = v8 >> 2;
      if (v7 > 7) {
        int v9 = 0;
      }
      else {
        int v9 = dword_18A97E224[v7];
      }
      unint64_t v10 = v6 & 0x3F0000 | (v3 << 8) | v9;
      return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v10);
    }
  }
  return attr;
}

__objc2_class **_dispatch_queue_attr_from_info(unint64_t a1)
{
  return &_dispatch_queue_attr_concurrent
       + 2
       * (((a1 >> 21) & 1 | (2
                           * ((32 * (7 * (3 * ((a1 >> 16) & 3) + ((a1 >> 18) & 3)) + a1)
                             + 2 * -((__int16)a1 >> 8)) & 0xFFFFFFFFFFFFFFFELL | (a1 >> 20) & 1))) ^ 2);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  unint64_t v1 = _dispatch_queue_attr_to_info((uint64_t *)attr) | 0x200000;

  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v1);
}

__objc2_class **dispatch_queue_attr_make_with_overcommit(uint64_t *a1, int a2)
{
  unsigned int v3 = _dispatch_queue_attr_to_info(a1) & 0x3CFFFF;
  if (a2) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0x20000;
  }

  return _dispatch_queue_attr_from_info(v3 | v4);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  unint64_t v2 = _dispatch_queue_attr_to_info((uint64_t *)attr) & 0x33FFFF | ((frequency & 3) << 18);

  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v2);
}

void _dispatch_object_no_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 40);
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: do_invoke called";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_object_no_dispose(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 40);
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: do_dispose called";
  qword_1E91199F0 = v1;
  __break(1u);
}

size_t _dispatch_object_missing_debug(int a1, char *__dst, size_t a3)
{
  return strlcpy(__dst, "missing do_debug vtable slot: ", a3);
}

void _dispatch_queue_no_activate(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 40);
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: dq_activate called";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_data_destructor_free_block_invoke()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: free destructor called";
  __break(1u);
}

void _dispatch_data_destructor_none_block_invoke_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: none destructor called";
  __break(1u);
}

void _dispatch_data_destructor_vm_deallocate_block_invoke_3()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: vmdeallocate destructor called";
  __break(1u);
}

void _dispatch_data_destructor_inline_block_invoke_4()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: inline destructor called";
  __break(1u);
}

BOOL _dispatch_parse_BOOL(const char *a1)
{
  return !strcasecmp(a1, "YES") || !strcasecmp(a1, "Y") || !strcasecmp(a1, "TRUE") || atoi(a1) != 0;
}

BOOL _dispatch_getenv_BOOL(const char *a1, uint64_t a2)
{
  unsigned int v3 = getenv(a1);
  if (!v3) {
    return a2;
  }

  return _dispatch_parse_BOOL(v3);
}

uint64_t _dispatch_build_init()
{
  uint64_t v3 = *MEMORY[0x1E4F14BF8];
  *(void *)unint64_t v2 = 0x4100000001;
  size_t v1 = 16;
  return sysctl(v2, 2u, &unk_1E9119A60, &v1, 0, 0);
}

uint64_t _dispatch_fault(uint64_t a1, char *__format, ...)
{
  va_start(va, __format);
  uint64_t v4 = *MEMORY[0x1E4F14BF8];
  uint64_t result = vsnprintf(__str, 0x400uLL, __format, va);
  if (_dispatch_mode)
  {
    qword_1E91199D8 = (uint64_t)__str;
  }
  else if ((_dispatch_mode & 2) == 0)
  {
    return _dispatch_fault_cold_1(__str);
  }
  return result;
}

uint64_t _dispatch_continuation_get_function_symbol(void *a1)
{
  if ((*a1 & 0x20) != 0)
  {
    uint64_t v2 = a1[5];
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3 != 3512316172) {
      _dispatch_continuation_get_function_symbol_cold_1(v3);
    }
    uint64_t v4 = *(void *)(v2 + 72);
  }
  else
  {
    if ((*a1 & 0x10) == 0) {
      return a1[4];
    }
    uint64_t v4 = a1[5];
  }
  if (*(void *)(v4 + 16)) {
    return *(void *)(v4 + 16);
  }
  else {
    return 0;
  }
}

void _dispatch_debugv(unint64_t *a1, const char *a2, va_list a3)
{
  uint64_t v13 = *MEMORY[0x1E4F14BF8];
  if (a1)
  {
    unint64_t v5 = *a1;
    if (*a1) {
      BOOL v6 = (*a1 & 1) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6
      || (v5 >= (unint64_t)OS_dispatch_object
        ? (BOOL v9 = v5 >= (unint64_t)OS_object)
        : (BOOL v9 = 1),
          v9))
    {
      uint64_t v7 = _dispatch_objc_debug(a1, (uint64_t)v12, 2048);
    }
    else
    {
      uint64_t v7 = (*(uint64_t (**)(void))(v5 + 56))();
    }
    uint64_t v8 = v7 + 2;
    *(_WORD *)&v12[v7] = 8250;
    v12[v7 + 2] = 0;
  }
  else
  {
    uint64_t v8 = __strlcpy_chk();
  }
  int v10 = vsnprintf(&v12[v8], 2048 - v8, a2, a3);
  if (v8 + (unint64_t)(v10 & ~(v10 >> 31)) >= 0x7FF) {
    uint64_t v11 = 2047;
  }
  else {
    uint64_t v11 = v8 + (v10 & ~(v10 >> 31));
  }
  if (qword_1E9119A58 != -1) {
    dispatch_once_f(&qword_1E9119A58, 0, (dispatch_function_t)_dispatch_logv_init);
  }
  if ((_MergedGlobals & 1) == 0)
  {
    if (dispatch_logfile == -1) {
      _simple_asl_log();
    }
    else {
      _dispatch_log_file((uint64_t)v12, v11);
    }
  }
}

uint64_t _dispatch_temporary_resource_shortage()
{
  return sleep_NOCANCEL();
}

void *_dispatch_calloc(size_t a1, size_t a2)
{
  size_t v2 = a2;
  size_t v3 = a1;
  while (1)
  {
    uint64_t result = malloc_type_calloc(a1, a2, 0x1B54906DuLL);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v3;
    a2 = v2;
  }
  return result;
}

const char *_dispatch_strdup_if_mutable(const char *a1)
{
  size_t v1 = a1;
  size_t v2 = strlen(a1) + 1;
  if ((_dyld_is_memory_immutable() & 1) == 0)
  {
    uint64_t v4 = malloc_type_malloc(v2, 0x129C783DuLL);
    if (v4)
    {
      unint64_t v5 = v4;
      memcpy(v4, v1, v2);
      return (const char *)v5;
    }
    else
    {
      _dispatch_strdup_if_mutable_cold_1();
      return 0;
    }
  }
  return v1;
}

void *_dispatch_Block_copy(void *aBlock)
{
  if (!aBlock) {
    _dispatch_Block_copy_cold_1();
  }
  while (1)
  {
    uint64_t result = _Block_copy(aBlock);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
  }
  return result;
}

void _dispatch_call_block_and_release(void (**a1)(void))
{
  a1[2]();

  _Block_release(a1);
}

uint64_t dispatch_mach_msg_get_context(uint64_t a1)
{
  uint64_t v1 = a1 + ((*(unsigned int *)(a1 + 4) + 3) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)(v1 + 4) < 0x3Cu) {
    return 0;
  }
  else {
    return *(void *)(v1 + 52);
  }
}

uint64_t _dispatch_wakeup_runloop_thread()
{
  return 0;
}

void _dispatch_mach_notify_port_destroyed(uint64_t a1, unsigned int a2)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of port-destroyed";
  qword_1E91199F0 = a2;
  __break(1u);
}

void _dispatch_mach_notify_no_senders(uint64_t a1, unsigned int a2)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of no-more-senders";
  qword_1E91199F0 = a2;
  __break(1u);
}

uint64_t _dispatch_mach_xpc_no_handle_message()
{
  return 0;
}

uint64_t _dispatch_mach_msg_context_no_async_reply_queue()
{
  return 0;
}

void _dispatch_mach_default_async_reply_handler()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_mach_default_async_reply_handler called";
  qword_1E91199F0 = (uint64_t)_dispatch_mach_xpc_hooks;
  __break(1u);
}

uint64_t _dispatch_mach_enable_sigterm()
{
  return 1;
}

uint64_t _dispatch_logv_init()
{
  uint64_t v9 = *MEMORY[0x1E4F14BF8];
  uint64_t result = (uint64_t)getenv("LIBDISPATCH_LOG");
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v1 = (const char *)result;
  uint64_t result = strcmp((const char *)result, "YES");
  if (!result) {
    goto LABEL_7;
  }
  uint64_t result = strcmp(v1, "NO");
  if (!result)
  {
    _MergedGlobals = 1;
    return result;
  }
  uint64_t result = strcmp(v1, "syslog");
  if (!result) {
    goto LABEL_7;
  }
  uint64_t result = strcmp(v1, "file");
  if (result)
  {
    uint64_t result = strcmp(v1, "stderr");
    if (result)
    {
LABEL_7:
      int v2 = 0;
      goto LABEL_8;
    }
    dispatch_logfile = 2;
  }
  int v2 = 1;
LABEL_8:
  if ((_MergedGlobals & 1) == 0)
  {
    uint64_t result = dispatch_logfile;
    if (dispatch_logfile != -1) {
      int v2 = 0;
    }
    if (v2 == 1)
    {
      pid_t v3 = getpid();
      snprintf((char *)__str, 0x400uLL, "/var/tmp/libdispatch.%d.log", v3);
      uint64_t result = open_NOCANCEL();
      dispatch_logfile = result;
    }
    if (result != -1)
    {
      __str[0].tv_sec = 0;
      *(void *)&__str[0].tv_usec = 0;
      gettimeofday(__str, 0);
      int v4 = dispatch_logfile;
      unint64_t v5 = getprogname();
      if (v5) {
        BOOL v6 = v5;
      }
      else {
        BOOL v6 = (const char *)&unk_18A97F2E6;
      }
      pid_t v7 = getpid();
      return dprintf(v4, "=== log file opened for %s[%u] at %ld.%06u ===\n", v6, v7, __str[0].tv_sec, __str[0].tv_usec);
    }
  }
  return result;
}

uint64_t _dispatch_log_file(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + a2) = 10;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
    uint64_t result = write_NOCANCEL();
  while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  return result;
}

uint64_t _dispatch_logv_file(char *__format, va_list a2)
{
  uint64_t v6 = *MEMORY[0x1E4F14BF8];
  uint64_t result = vsnprintf(__str, 0x800uLL, __format, a2);
  if ((result & 0x80000000) == 0)
  {
    if (result >= 0x7FF) {
      int v3 = 2047;
    }
    else {
      int v3 = result;
    }
    __str[v3] = 10;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
      uint64_t result = write_NOCANCEL();
    while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  }
  return result;
}

uint64_t _os_object_retain_count(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 0x7FFFFFFF) {
    return -1;
  }
  return v1;
}

uint64_t _os_object_retain_internal(uint64_t result)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _os_object_retain_internal_n(uint64_t result, unsigned int a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), a2, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

void *_os_object_release_internal(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit == 1)
      {
        return (void *)_os_object_dispose(a1, a2);
      }
      else
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_internal_n(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, -(int)a2, memory_order_release);
    BOOL v3 = __OFSUB__(add_explicit, a2);
    int v4 = add_explicit - a2;
    if ((v4 < 0) ^ v3 | (v4 == 0))
    {
      if (v4 < 0)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        return (void *)_os_object_dispose(a1, a2);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain(uint64_t result)
{
  if (*(_DWORD *)(result + 12) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _os_object_retain_with_resurrect(uint64_t result)
{
  if (*(_DWORD *)(result + 12) == 0x7FFFFFFF
    || (unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed),
        (add_explicit & 0x80000000) != 0))
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an over-released object";
    __break(1u);
    return _os_object_retain_internal(result);
  }
  if (!add_explicit) {
    return _os_object_retain_internal(result);
  }
  return result;
}

void *_os_object_release(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 3, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit == 1)
      {
        return (void *)_os_object_xref_dispose(a1, a2);
      }
      else
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

void *_os_object_release_without_xref_dispose(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 3, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit == 1)
      {
        return _os_object_release_internal(a1, a2);
      }
      else
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
  return a1;
}

uint64_t _os_object_retain_weak(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 12);
  while (1)
  {
    if (v1 == 0x7FFFFFFF) {
      return 1;
    }
    if (!v1) {
      break;
    }
    if ((v1 & 0x80000000) != 0) {
      _os_object_retain_weak_cold_1();
    }
    uint64_t v2 = v1;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 12), (unsigned int *)&v2, v1 + 1, memory_order_relaxed, memory_order_relaxed);
    BOOL v3 = v2 == v1;
    uint64_t v1 = v2;
    if (v3) {
      return 1;
    }
  }
  return 0;
}

BOOL _os_object_allows_weak_reference(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 0) {
    _os_object_retain_weak_cold_1();
  }
  return v1 != 0;
}

void dispatch_retain(dispatch_object_t object)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v2 = isa >= (Class)OS_object) : (BOOL v2 = 1), v2))
  {
    _dispatch_objc_retain(object);
  }
  else
  {
    _os_object_retain((uint64_t)object);
  }
}

void dispatch_release(dispatch_object_t object)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v3 = isa >= (Class)OS_object) : (BOOL v3 = 1), v3))
  {
    _dispatch_objc_release(object);
  }
  else if (HIDWORD(object[1].isa) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)&object[1].isa + 1, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      atomic_load_explicit((atomic_uint *volatile)&object[1].isa + 1, memory_order_acquire);
      _dispatch_xref_dispose((atomic_ullong *)object, v1);
    }
  }
}

void *_dispatch_xref_dispose(atomic_ullong *a1, const char *a2)
{
  if ((*(void *)(*a1 + 40) & 0xF0) == 0x10)
  {
    _dispatch_queue_xref_dispose((uint64_t)a1);
    uint64_t v3 = *(void *)(*a1 + 40);
    if (v3 > 786)
    {
      if (v3 == 787)
      {
        if ((*((_WORD *)a1 + 58) & 0x10) != 0) {
          *(void *)(a1[11] + 48) = 195952365;
        }
      }
      else if (v3 == 395025)
      {
        _dispatch_runloop_queue_xref_dispose(a1);
      }
    }
    else if (v3 == 275)
    {
      _dispatch_source_xref_dispose((uint64_t)a1);
    }
    else if (v3 == 531)
    {
      _dispatch_channel_xref_dispose((uint64_t)a1);
    }
  }

  return _os_object_release_internal(a1, a2);
}

void _dispatch_dispose(uint64_t *a1)
{
  BOOL v2 = a1[3];
  if (a1[5]) {
    uint64_t v3 = (void (__cdecl *)(void *))a1[5];
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = (void *)a1[4];
  char v8 = 1;
  unint64_t v5 = a1 + 2;
  if (a1[2] != -1985229329) {
    _dispatch_dispose_cold_1(v5);
  }
  if (v2)
  {
    if (v2[8].isa == (Class)22) {
      uint64_t v6 = &unk_1EB1CE780;
    }
    else {
      uint64_t v6 = v2;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t *, char *))(*a1 + 48))(a1, &v8);
  if (v8)
  {
    objc_destructInstance(a1);
    free(a1);
  }
  if (v3 && v4) {
    dispatch_channel_async_f(v6, v4, v3);
  }
  if (v6) {
    _os_object_release_internal(v6, v7);
  }
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0 || !isa) {
    return (void *)_dispatch_objc_get_context();
  }
  if (isa < (Class)OS_dispatch_object || isa >= (Class)OS_object) {
    return (void *)_dispatch_objc_get_context();
  }
  if ((*((unsigned char *)isa + 42) & 4) != 0) {
    return 0;
  }
  return object[4].isa;
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v3 = isa >= (Class)OS_object) : (BOOL v3 = 1), v3))
  {
    _dispatch_objc_set_context(object, (const char *)context);
  }
  else if ((*((unsigned char *)isa + 42) & 4) == 0)
  {
    object[4].Class isa = (Class)context;
  }
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v3 = isa >= (Class)OS_object) : (BOOL v3 = 1), v3))
  {
    _dispatch_objc_set_finalizer_f(object, (const char *)finalizer);
  }
  else if ((*((unsigned char *)isa + 42) & 4) == 0)
  {
    if (finalizer) {
      int v4 = (objc_class *)finalizer;
    }
    else {
      int v4 = 0;
    }
    object[5].Class isa = v4;
  }
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v5 = isa >= (Class)OS_object) : (BOOL v5 = 1), v5))
  {
    _dispatch_objc_set_target_queue(object, (const char *)queue);
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    uint64_t v6 = *((void *)isa + 5);
    if ((v6 & 0x30000) == 0)
    {
      if (queue && (HIBYTE(queue[10].isa) & 8) != 0 && v6 != 1 && (unint64_t)isa >= 0x1000)
      {
        if (*((void *)isa + 5) != 19 || !_dispatch_source_is_timer((uint64_t)object)) {
          dispatch_set_target_queue_cold_3((uint64_t)object);
        }
        Class isa = object->isa;
      }
      uint64_t v7 = *((void *)isa + 5);
      if ((v7 & 0xF0) == 0x10)
      {
        _dispatch_lane_set_target_queue((atomic_ullong *)object, (char *)queue);
      }
      else if (v7 == 4)
      {
        _dispatch_io_set_target_queue((uint64_t)object, (uint64_t)queue);
      }
      else
      {
        dispatch_queue_t v8 = (dispatch_queue_t)&unk_1EB1CE780;
        if (queue) {
          dispatch_queue_t v8 = queue;
        }
        if (LODWORD(v8[1].isa) != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&v8[1], 1u, memory_order_relaxed) <= 0)
        {
          dispatch_set_target_queue_cold_2();
        }
        uint64_t v9 = (atomic_uint *)atomic_exchange_explicit((atomic_ullong *volatile)&object[3], (unint64_t)v8, memory_order_release);
        if (v9)
        {
          if (v9[2] != 0x7FFFFFFF)
          {
            int add_explicit = atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release);
            if (add_explicit <= 1)
            {
              if (add_explicit != 1) {
                _os_object_retain_weak_cold_1();
              }
              _os_object_dispose(v9, (const char *)queue);
            }
          }
        }
      }
    }
  }
}

void dispatch_activate(dispatch_object_t object)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v2 = isa >= (Class)OS_object) : (BOOL v2 = 1), v2))
  {
    _dispatch_objc_activate();
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    uint64_t v3 = *((unsigned __int8 *)isa + 40);
    if (v3 == 18)
    {
      _dispatch_workloop_activate((uint64_t)object);
    }
    else if ((v3 & 0xF0) == 0x10)
    {
      _dispatch_lane_resume((uint64_t)object, 1);
    }
  }
}

void dispatch_suspend(dispatch_object_t object)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v3 = isa >= (Class)OS_object) : (BOOL v3 = 1), v3))
  {
    _dispatch_objc_suspend();
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    uint64_t v4 = *((void *)isa + 5);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread((uint64_t)object)) {
        dispatch_suspend_cold_1();
      }
      _dispatch_lane_suspend((uint64_t)object);
    }
  }
}

void dispatch_resume(dispatch_object_t object)
{
  Class isa = object->isa;
  if (((uint64_t)object->isa & 1) != 0
    || !isa
    || (isa >= (Class)OS_dispatch_object ? (BOOL v3 = isa >= (Class)OS_object) : (BOOL v3 = 1), v3))
  {
    _dispatch_objc_resume();
  }
  else if (LODWORD(object[1].isa) != 0x7FFFFFFF)
  {
    uint64_t v4 = *((void *)isa + 5);
    if ((v4 & 0x300F0) == 0x10)
    {
      if (v4 == 18 && _dispatch_workloop_uses_bound_thread((uint64_t)object)) {
        dispatch_resume_cold_1();
      }
      _dispatch_lane_resume((uint64_t)object, 0);
    }
  }
}

const char *_os_object_init()
{
  _objc_init();
  Block_callbacks_RR v3 = *(Block_callbacks_RR *)ymmword_1ED74FB48;
  _Block_use_RR2(&v3);
  uint64_t v0 = getenv("OBJC_DEBUG_MISSING_POOLS");
  if (v0) {
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v0);
  }
  int v1 = getenv("DISPATCH_DEBUG_MISSING_POOLS");
  if (v1) {
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v1);
  }
  uint64_t result = getenv("LIBDISPATCH_DEBUG_MISSING_POOLS");
  if (result)
  {
    uint64_t result = (const char *)_dispatch_parse_BOOL(result);
    _os_object_debug_missing_pools = (char)result;
  }
  return result;
}

id _os_object_alloc_bridged(objc_class *a1, uint64_t a2)
{
  BOOL v2 = a1;
  size_t v3 = a2 - 8;
  while (1)
  {
    id result = class_createInstance(a1, v3);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  return result;
}

_DWORD *_os_object_alloc_realized(objc_class *a1, uint64_t a2)
{
  BOOL v2 = a1;
  size_t v3 = a2 - 8;
  while (1)
  {
    id result = class_createInstance(a1, v3);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  result[2] = 1;
  result[3] = 1;
  return result;
}

_DWORD *_os_object_alloc(uint64_t a1, uint64_t a2)
{
  size_t v3 = (objc_class *)objc_opt_class();

  return _os_object_alloc_realized(v3, a2);
}

uint64_t _os_object_xref_dispose(void *a1, const char *a2)
{
  return [a1 _xref_dispose];
}

uint64_t _os_object_dispose(void *a1, const char *a2)
{
  return [a1 dealloc];
}

uint64_t _os_object_atfork_prepare()
{
  return MEMORY[0x1F41813C8]();
}

uint64_t _os_object_atfork_parent()
{
  return MEMORY[0x1F41813C0]();
}

uint64_t _os_object_atfork_child()
{
  return MEMORY[0x1F41813B8]();
}

id _dispatch_objc_alloc(objc_class *a1, uint64_t a2)
{
  BOOL v2 = a1;
  size_t v3 = a2 - 8;
  while (1)
  {
    id result = class_createInstance(a1, v3);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }
  return result;
}

uint64_t _dispatch_objc_set_context(void *a1, const char *a2)
{
  return [a1 _setContext:a2];
}

uint64_t _dispatch_objc_set_finalizer_f(void *a1, const char *a2)
{
  return [a1 _setFinalizer:a2];
}

uint64_t _dispatch_objc_set_target_queue(void *a1, const char *a2)
{
  return [a1 _setTargetQueue:a2];
}

uint64_t _dispatch_last_resort_autorelease_pool_push(uint64_t result)
{
  if (!_os_object_debug_missing_pools)
  {
    uint64_t v1 = result;
    id result = MEMORY[0x18C121B40]();
    *(void *)(v1 + 24) = result;
  }
  return result;
}

void _dispatch_last_resort_autorelease_pool_pop(uint64_t a1)
{
  if (!_os_object_debug_missing_pools)
  {
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t _dispatch_client_callout(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_18A943FB4(void *a1)
{
}

void sub_18A943FC0(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_18A943FF4(void *a1)
{
}

void sub_18A944000(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_18A944034(void *a1)
{
}

void sub_18A944040(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_18A944074(void *a1)
{
}

void sub_18A944080(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout3_a(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_18A9440B4(void *a1)
{
}

void sub_18A9440C0(_Unwind_Exception *a1)
{
}

void *_dispatch_block_create(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  int v21 = 0;
  int v20 = 0;
  v9[0] = MEMORY[0x1E4F14BE8];
  v9[1] = 1174405120;
  v9[2] = ___dispatch_block_create_block_invoke;
  v9[3] = &__block_descriptor_tmp_3;
  uint64_t v10 = 3512316172;
  uint64_t v11 = a1;
  int v12 = 0;
  int v13 = 0;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  dispatch_group_t group = 0;
  v18 = 0;
  aBlocka = 0;
  int v19 = 0;
  if ((unint64_t)(a2 + 1) < 2)
  {
    if (!aBlock) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  voucher_retain(a2);
  if (aBlock) {
LABEL_3:
  }
    aBlocka = _dispatch_Block_copy(aBlock);
LABEL_4:
  uint64_t v6 = _dispatch_Block_copy(v9);
  if (v10 == 3512316172)
  {
    dispatch_group_t v7 = group;
    if (group)
    {
      if (!v13)
      {
        dispatch_group_leave(group);
        dispatch_group_t v7 = group;
      }
      _os_object_release_without_xref_dispose(v7, v5);
    }
    if (v18) {
      _os_object_release_internal_n(v18, (const char *)2);
    }
    if (aBlocka) {
      _Block_release(aBlocka);
    }
    if ((unint64_t)(v15 + 1) >= 2) {
      voucher_release(v15, v5);
    }
  }
  return v6;
}

void ___dispatch_block_create_block_invoke(uint64_t a1)
{
}

void *__copy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v6 = a2[7];
  uint64_t v5 = a2[8];
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 32) = 3512316172;
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  if ((unint64_t)(v5 + 1) >= 2) {
    voucher_retain(v5);
  }
  id result = (void *)a2[9];
  if (result)
  {
    id result = _dispatch_Block_copy(result);
    *(void *)(a1 + 72) = result;
  }
  if (a2[4])
  {
    id result = (void *)_dispatch_group_create_and_enter();
    *(void *)(a1 + 80) = result;
  }
  return result;
}

uint64_t __destroy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t result, const char *a2)
{
  if (*(void *)(result + 32) == 3512316172)
  {
    uint64_t v2 = result;
    size_t v3 = *(NSObject **)(result + 80);
    if (v3)
    {
      if (!*(_DWORD *)(v2 + 52))
      {
        dispatch_group_leave(v3);
        size_t v3 = *(NSObject **)(v2 + 80);
      }
      _os_object_release_without_xref_dispose(v3, a2);
    }
    uint64_t v4 = *(void **)(v2 + 88);
    if (v4) {
      _os_object_release_internal_n(v4, (const char *)2);
    }
    uint64_t v5 = *(const void **)(v2 + 72);
    if (v5) {
      _Block_release(v5);
    }
    id result = *(void *)(v2 + 64);
    if ((unint64_t)(result + 1) >= 2)
    {
      return voucher_release(result, a2);
    }
  }
  return result;
}

uint64_t _dispatch_sema4_create_slow(atomic_uint *a1, int policy)
{
  semaphore_t semaphore = 0;
  if (_dispatch_unsafe_fork)
  {
    if (policy)
    {
LABEL_3:
      uint64_t v4 = (task_t *)MEMORY[0x1E4F14C48];
      uint64_t result = semaphore_create(*MEMORY[0x1E4F14C48], &semaphore, policy, 0);
      if (result == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (result)
      {
        if (result == 15) {
          _dispatch_sema4_create_slow_cold_3();
        }
        _dispatch_sema4_create_slow_cold_1(result);
      }
      int v6 = 0;
      semaphore_t v7 = semaphore;
      atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v6, semaphore, memory_order_relaxed, memory_order_relaxed);
      if (v6)
      {
        uint64_t result = semaphore_destroy(*v4, v7);
        if (result == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        if (result)
        {
          if (result == 15) {
            _dispatch_sema4_create_slow_cold_3();
          }
          _dispatch_sema4_create_slow_cold_1(result);
        }
      }
      return result;
    }
  }
  else
  {
    _dispatch_fork_becomes_unsafe_slow();
    if (policy) {
      goto LABEL_3;
    }
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t result = *(void *)(StatusReg + 72);
  if (result) {
    *(void *)(StatusReg + 72) = 0;
  }
  else {
    uint64_t result = _os_semaphore_create();
  }
  int v9 = 0;
  atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v9, result, memory_order_relaxed, memory_order_relaxed);
  if (v9)
  {
    uint64_t v10 = result;
    uint64_t result = *(void *)(StatusReg + 72);
    *(void *)(StatusReg + 72) = v10;
    if (result)
    {
      return MEMORY[0x1F40D0738]();
    }
  }
  return result;
}

uint64_t _dispatch_sema4_dispose_slow(_DWORD *a1, int a2)
{
  uint64_t v3 = *a1;
  *a1 = -1;
  if (a2)
  {
    uint64_t result = semaphore_destroy(*MEMORY[0x1E4F14C48], v3);
    if (result == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (result)
    {
      if (result == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      _dispatch_sema4_create_slow_cold_1(result);
    }
  }
  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t result = *(void *)(StatusReg + 72);
    *(void *)(StatusReg + 72) = v3;
    if (result)
    {
      return MEMORY[0x1F40D0738]();
    }
  }
  return result;
}

uint64_t _dispatch_sema4_signal(unsigned int *a1, uint64_t a2)
{
  do
  {
    uint64_t result = MEMORY[0x18C121E10](*a1);
    if (result == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (result)
    {
      if (result == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      _dispatch_sema4_create_slow_cold_1(result);
    }
    --a2;
  }
  while (a2);
  return result;
}

uint64_t _dispatch_sema4_wait(unsigned int *a1)
{
  while (1)
  {
    uint64_t result = MEMORY[0x18C121E30](*a1);
    if ((int)result <= 13) {
      break;
    }
    if (result != 14)
    {
      if (result == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      goto LABEL_8;
    }
  }
  if (result == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (result) {
LABEL_8:
  }
    _dispatch_sema4_create_slow_cold_1(result);
  return result;
}

BOOL _dispatch_sema4_timedwait(semaphore_t *a1, int64_t a2)
{
  kern_return_t v5;
  mach_timespec_t v7;

  do
  {
    unint64_t v4 = _dispatch_timeout(a2);
    v7.tv_sec = v4 / 0x3B9ACA00;
    v7.tv_nsec = v4 % 0x3B9ACA00;
    uint64_t v5 = semaphore_timedwait(*a1, v7);
  }
  while (v5 == 14);
  if (v5 != 49)
  {
    if (v5 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v5)
    {
      if (v5 == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      _dispatch_sema4_create_slow_cold_1(v5);
    }
  }
  return v5 == 49;
}

uint64_t _dispatch_wait_on_address(uint64_t a1, unsigned int a2, int64_t a3)
{
  unint64_t v6 = _dispatch_timeout(a3);
  if (v6 == -1)
  {
    return _dlock_wait(a1, a2, 0);
  }
  else if (v6)
  {
    while (1)
    {
      unint64_t v7 = v6 == 1000 * (v6 / 0x3E8) ? v6 / 0x3E8 : v6 / 0x3E8 + 1;
      int v8 = v7 >= 0xFFFFFFFF ? -1 : v7;
      uint64_t result = _dlock_wait(a1, a2, v8);
      if (v7 < 0xFFFFFFFF || result != 60) {
        break;
      }
      unint64_t v6 = _dispatch_timeout(a3);
      if (!v6) {
        return 60;
      }
    }
  }
  else
  {
    return 60;
  }
  return result;
}

uint64_t _dispatch_wake_by_address()
{
  return _dlock_wake();
}

uint64_t _dispatch_thread_event_signal_slow()
{
  return _dlock_wake();
}

uint64_t _dispatch_thread_event_wait_slow(atomic_uint *a1)
{
  while (1)
  {
    uint64_t result = atomic_load_explicit(a1, memory_order_acquire);
    if (!result) {
      break;
    }
    if (result != -1) {
      _dispatch_thread_event_wait_slow_cold_1(result);
    }
    _dlock_wait((uint64_t)a1, 0xFFFFFFFF, 0);
  }
  return result;
}

uint64_t _dispatch_unfair_lock_lock_slow(uint64_t result)
{
  uint64_t v1 = (atomic_uint *)result;
  int v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  for (unsigned int i = v2 & 0xFFFFFFFC; ; i |= result == 66)
  {
    unsigned __int32 v4 = *v1;
    while (1)
    {
      unsigned __int32 v5 = v4;
      unsigned int v6 = i;
      if (v4 >= 4)
      {
        unsigned int v6 = v4 | 1;
        if ((v4 | 1) == v4) {
          break;
        }
      }
      atomic_compare_exchange_strong_explicit(v1, &v4, v6, memory_order_acquire, memory_order_acquire);
      if (v4 == v5) {
        goto LABEL_8;
      }
    }
    unsigned int v6 = v4;
LABEL_8:
    if ((v5 ^ v2) <= 3) {
      _dispatch_unfair_lock_lock_slow_cold_1();
    }
    if (v6 == i) {
      break;
    }
    uint64_t result = _dlock_wait((uint64_t)v1, v6, 0);
  }
  return result;
}

uint64_t _dispatch_unfair_lock_unlock_slow(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4) {
    _dispatch_unfair_lock_unlock_slow_cold_1(a2);
  }
  if (a2)
  {
    return _dlock_wake();
  }
  return result;
}

uint64_t _dispatch_once_wait(uint64_t result)
{
  uint64_t v1 = (atomic_ullong *)result;
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
LABEL_2:
  atomic_ullong v3 = *v1;
  while (v3 != -1)
  {
    atomic_ullong v4 = v3;
    if ((v3 & 3) == 2)
    {
      __dmb(9u);
      if ((unint64_t)(4 * MEMORY[0xFFFFFC180] - v3 - 14) <= 0xFFFFFFFFFFFFFFEFLL) {
        *uint64_t v1 = -1;
      }
      return result;
    }
    uint64_t v5 = v3 | 1;
    if ((v3 | 1) == v3)
    {
      LODWORD(v5) = v3;
LABEL_7:
      if (((v4 ^ v2) & 0xFFFFFFFC) == 0) {
        _dispatch_unfair_lock_lock_slow_cold_1();
      }
      uint64_t result = _dlock_wait((uint64_t)v1, v5, 0);
      goto LABEL_2;
    }
    atomic_compare_exchange_strong_explicit(v1, (unint64_t *)&v3, v5, memory_order_relaxed, memory_order_relaxed);
    if (v3 == v4) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t _dispatch_gate_broadcast_slow(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4) {
    _dispatch_unfair_lock_unlock_slow_cold_1(a2);
  }

  return _dlock_wake();
}

uint64_t _dispatch_firehose_gate_wait(uint64_t a1, unsigned int a2)
{
  return _dlock_wait(a1, a2, 0);
}

uint64_t _dlock_wait(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = a2;
  while (1)
  {
    int v5 = __ulock_wait();
    if (v5 > 0) {
      return 66;
    }
    int v6 = v5;
    uint64_t result = -v5;
    if (v6 != -4) {
      break;
    }
    if (a3) {
      return result;
    }
  }
  if (result > 0x3C || ((1 << result) & 0x1000000000004001) == 0)
  {
    if (result == 105) {
      _dlock_wait_cold_2(v4);
    }
    _dlock_wait_cold_1(result);
  }
  return result;
}

uint64_t _dlock_wake()
{
  uint64_t result = __ulock_wake();
  if (result)
  {
    if (result != -2) {
      _dlock_wake_cold_1(result);
    }
  }
  return result;
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  if (value < 0) {
    return 0;
  }
  dispatch_semaphore_t result = (dispatch_semaphore_t)_dispatch_object_alloc(OS_dispatch_semaphore, 72);
  result[2].Class isa = (Class)-1985229329;
  result[3].Class isa = (Class)&unk_1EB1CE780;
  result[6].Class isa = (Class)value;
  LODWORD(result[8].isa) = 0;
  result[7].Class isa = (Class)value;
  return result;
}

_DWORD *_dispatch_semaphore_dispose(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 48) < v1) {
    _dispatch_semaphore_dispose_cold_1((void *)(a1 + 48), v1);
  }
  int v3 = *(_DWORD *)(a1 + 64);
  dispatch_semaphore_t result = (_DWORD *)(a1 + 64);
  if (v3)
  {
    return (_DWORD *)_dispatch_sema4_dispose_slow(result, 0);
  }
  return result;
}

uint64_t _dispatch_semaphore_signal_slow(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64)) {
    _dispatch_sema4_create_slow((atomic_uint *)(a1 + 64), 0);
  }
  _dispatch_sema4_signal(v1, 1);
  return 1;
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  if ((atomic_fetch_add_explicit((atomic_ullong *volatile)&dsema[6], 1uLL, memory_order_release) & 0x8000000000000000) != 0) {
    return _dispatch_semaphore_signal_slow((uint64_t)dsema);
  }
  else {
    return 0;
  }
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  if ((uint64_t)atomic_fetch_add_explicit((atomic_ullong *volatile)&dsema[6], 0xFFFFFFFFFFFFFFFFLL, memory_order_acquire) <= 0)return _dispatch_semaphore_wait_slow((uint64_t)dsema, timeout); {
  else
  }
    return 0;
}

uint64_t _dispatch_semaphore_wait_slow(uint64_t a1, int64_t a2)
{
  uint64_t v4 = (semaphore_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64)) {
    _dispatch_sema4_create_slow((atomic_uint *)(a1 + 64), 0);
  }
  if (a2 != -1)
  {
    if (a2 && !_dispatch_sema4_timedwait(v4, a2)) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t result = 49;
    while (v5 < 0)
    {
      uint64_t v7 = v5;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v7, v5 + 1, memory_order_relaxed, memory_order_relaxed);
      BOOL v8 = v7 == v5;
      uint64_t v5 = v7;
      if (v8) {
        return result;
      }
    }
  }
  _dispatch_sema4_wait(v4);
  return 0;
}

dispatch_group_t dispatch_group_create(void)
{
  dispatch_group_t result = (dispatch_group_t)_dispatch_object_alloc(OS_dispatch_group, 72);
  result[2].Class isa = (Class)-1985229329;
  result[3].Class isa = (Class)&unk_1EB1CE780;
  return result;
}

uint64_t _dispatch_group_create_and_enter()
{
  uint64_t result = _dispatch_object_alloc(OS_dispatch_group, 72);
  *(void *)(result + 16) = -1985229329;
  *(void *)(result + 24) = &unk_1EB1CE780;
  *(_DWORD *)(result + 48) = -4;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  return result;
}

uint64_t _dispatch_group_dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    _dispatch_group_dispose_cold_1(result);
  }
  return result;
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  Class isa = group[6].isa;
  intptr_t result = 49;
  while ((isa & 0xFFFFFFFC) != 0)
  {
    if (!timeout) {
      return result;
    }
    uint64_t v5 = isa;
    if ((isa & 1) == 0)
    {
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&group[6], (unint64_t *)&isa, (unint64_t)isa | 1, memory_order_relaxed, memory_order_relaxed);
      if (isa != v5) {
        continue;
      }
    }
    return _dispatch_group_wait_slow((uint64_t)group, HIDWORD(v5), timeout);
  }
  intptr_t result = 0;
  __dmb(9u);
  return result;
}

uint64_t _dispatch_group_wait_slow(uint64_t a1, unsigned int a2, int64_t a3)
{
  uint64_t v5 = (atomic_uint *)(a1 + 52);
  uint64_t v6 = 49;
  while (1)
  {
    int v7 = _dispatch_wait_on_address((uint64_t)v5, a2, a3);
    if (atomic_load_explicit(v5, memory_order_acquire) != a2) {
      break;
    }
    if (v7 == 60) {
      return v6;
    }
  }
  return 0;
}

void dispatch_group_leave(dispatch_group_t group)
{
  unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)&group[6], 4uLL, memory_order_release);
  uint64_t v2 = add_explicit & 0xFFFFFFFC;
  if ((add_explicit & 0xFFFFFFFC) == 0xFFFFFFFC)
  {
    int v3 = (const char *)(add_explicit + 4);
    do
    {
      uint64_t v4 = v3;
      unint64_t v5 = (unint64_t)v3 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v4 & 0xFFFFFFFC) != 0) {
        unint64_t v5 = (unint64_t)v4;
      }
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFDLL;
      if (v4 == (const char *)(v5 & 0xFFFFFFFFFFFFFFFDLL)) {
        break;
      }
      int v3 = v4;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&group[6], (unint64_t *)&v3, v6, memory_order_relaxed, memory_order_relaxed);
    }
    while (v3 != v4);
    _dispatch_group_wake((uint64_t)group, v4, 1);
  }
  else if (!v2)
  {
    dispatch_group_leave_cold_1(v2);
  }
}

uint64_t _dispatch_group_wake(uint64_t result, const char *a2, int a3)
{
  uint64_t v4 = result;
  if ((a2 & 2) != 0)
  {
    uint64_t v14 = a2;
    uint64_t v5 = *(void *)(result + 56);
    if (!v5) {
      uint64_t v5 = _dispatch_wait_for_enqueuer((unint64_t *)(result + 56));
    }
    *(void *)(v4 + 56) = 0;
    unint64_t v6 = atomic_exchange_explicit((atomic_ullong *volatile)(v4 + 64), 0, memory_order_release) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      while (1)
      {
        uint64_t v7 = v5;
        BOOL v8 = *(atomic_uint **)(v5 + 48);
        if (v5 == v6)
        {
          uint64_t v5 = 0;
        }
        else
        {
          uint64_t v5 = *(void *)(v5 + 16);
          if (!v5) {
            uint64_t v5 = _dispatch_wait_for_enqueuer((unint64_t *)(v7 + 16));
          }
        }
        unsigned int v9 = __clz(__rbit32((*(_DWORD *)(v7 + 8) >> 8) & 0x3FFF));
        uint64_t v10 = ((*(_DWORD *)(v7 + 8) >> 8) & 0x3FFF) != 0 ? v9 + 1 : 0;
        intptr_t result = (*(uint64_t (**)(atomic_uint *, uint64_t, uint64_t))(*(void *)v8 + 88))(v8, v7, v10);
        if (v8[2] != 0x7FFFFFFF)
        {
          int add_explicit = atomic_fetch_add_explicit(v8 + 2, 0xFFFFFFFF, memory_order_release);
          if (add_explicit <= 1) {
            break;
          }
        }
        if (!v5) {
          goto LABEL_19;
        }
      }
      if (add_explicit != 1)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_33;
      }
      intptr_t result = _os_object_dispose(v8, v11);
    }
    while (v5);
LABEL_19:
    if (a3) {
      LOWORD(a3) = 2;
    }
    else {
      LOWORD(a3) = 1;
    }
    a2 = v14;
  }
  if (a2) {
    intptr_t result = _dispatch_wake_by_address();
  }
  if ((_WORD)a3)
  {
    if (*(_DWORD *)(v4 + 8) != 0x7FFFFFFF)
    {
      signed int v13 = atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), -(unsigned __int16)a3, memory_order_release)
          - (unsigned __int16)a3;
      if (v13 <= 0)
      {
        if (v13 < 0)
        {
LABEL_33:
          qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
        }
        else
        {
          return _os_object_dispose((void *)v4, a2);
        }
      }
    }
  }
  return result;
}

void dispatch_group_enter(dispatch_group_t group)
{
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)&group[6], 0xFFFFFFFC, memory_order_acquire);
  if ((add_explicit & 0xFFFFFFFC) != 0)
  {
    if ((add_explicit & 0xFFFFFFFC) == 4) {
      dispatch_group_enter_cold_2(add_explicit);
    }
  }
  else if (LODWORD(group[1].isa) != 0x7FFFFFFF {
         && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&group[1], 1u, memory_order_relaxed) <= 0)
  }
  {
    dispatch_set_target_queue_cold_2();
  }
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v9 = (objc_class *)StatusReg[22];
  if (v9) {
    StatusReg[22] = *((void *)v9 + 2);
  }
  else {
    unsigned int v9 = (objc_class *)_dispatch_continuation_alloc_from_heap();
  }
  *(void *)unsigned int v9 = 260;
  *((void *)v9 + 4) = work;
  *((void *)v9 + 5) = context;
  unint64_t v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF) {
    unint64_t v10 = 4351;
  }
  uint64_t v11 = StatusReg[28];
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0) {
    goto LABEL_28;
  }
  *((void *)v9 + 3) = v11;
  if (v10)
  {
    int v12 = (HIDWORD(queue[10].isa) >> 30) & 1;
    if ((HIDWORD(queue[10].isa) & 0xFFF) == 0) {
      int v12 = 1;
    }
    if (!v12) {
      unint64_t v10 = 0;
    }
  }
  *((void *)v9 + 1) = v10;
  *((void *)v9 + 6) = queue;
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
LABEL_28:
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_29:
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
    return;
  }
  *((void *)v9 + 2) = 0;
  StatusReg[122] = group + 8;
  unint64_t v13 = atomic_exchange_explicit((atomic_ullong *volatile)&group[8], (unint64_t)v9, memory_order_release);
  if (v13)
  {
    *(void *)(v13 + 16) = v9;
    StatusReg[122] = 0;
    return;
  }
  if (LODWORD(group[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&group[1], 1u, memory_order_relaxed) <= 0)
  {
    goto LABEL_29;
  }
  group[7].Class isa = v9;
  StatusReg[122] = 0;
  Class isa = group[6].isa;
  while (1)
  {
    uint64_t v15 = (const char *)((unint64_t)isa | 2);
    if (!isa) {
      break;
    }
    v16 = isa;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&group[6], (unint64_t *)&v16, (unint64_t)v15, memory_order_release, memory_order_relaxed);
    BOOL v17 = v16 == isa;
    Class isa = v16;
    if (v17) {
      return;
    }
  }

  _dispatch_group_wake((uint64_t)group, v15, 0);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = (uint64_t *)StatusReg[22];
  if (v7) {
    StatusReg[22] = v7[2];
  }
  else {
    uint64_t v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  BOOL v8 = _dispatch_Block_copy(block);
  unsigned int v9 = (uint64_t (*)())*((void *)block + 2);
  if (!v9)
  {
    if (_dispatch_block_special_invoke) {
      goto LABEL_5;
    }
LABEL_20:
    *uint64_t v7 = 276;
    v7[5] = (uint64_t)v8;
    _dispatch_continuation_init_slow(v7, (atomic_uint *)queue, 0);
    goto LABEL_15;
  }
  if (_dispatch_block_special_invoke == v9) {
    goto LABEL_20;
  }
LABEL_5:
  *uint64_t v7 = 276;
  v7[4] = (uint64_t)_dispatch_call_block_and_release;
  v7[5] = (uint64_t)v8;
  unint64_t v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF) {
    unint64_t v10 = 4351;
  }
  uint64_t v11 = StatusReg[28];
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  v7[3] = v11;
  if (v10)
  {
    int v12 = (HIDWORD(queue[10].isa) >> 30) & 1;
    if ((HIDWORD(queue[10].isa) & 0xFFF) == 0) {
      int v12 = 1;
    }
    if (!v12) {
      unint64_t v10 = 0;
    }
  }
  v7[1] = v10;
LABEL_15:
  v7[6] = (uint64_t)queue;
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  v7[2] = 0;
  StatusReg[122] = group + 8;
  unint64_t v13 = atomic_exchange_explicit((atomic_ullong *volatile)&group[8], (unint64_t)v7, memory_order_release);
  if (v13)
  {
    *(void *)(v13 + 16) = v7;
    StatusReg[122] = 0;
  }
  else
  {
    if (LODWORD(group[1].isa) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&group[1], 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    group[7].Class isa = (Class)v7;
    StatusReg[122] = 0;
    Class isa = group[6].isa;
    while (1)
    {
      uint64_t v15 = (const char *)((unint64_t)isa | 2);
      if (!isa) {
        break;
      }
      v16 = isa;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&group[6], (unint64_t *)&v16, (unint64_t)v15, memory_order_release, memory_order_relaxed);
      BOOL v17 = v16 == isa;
      Class isa = v16;
      if (v17) {
        return;
      }
    }
    _dispatch_group_wake((uint64_t)group, v15, 0);
  }
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v9 = (void *)StatusReg[22];
  if (v9) {
    StatusReg[22] = v9[2];
  }
  else {
    unsigned int v9 = _dispatch_continuation_alloc_from_heap();
  }
  *unsigned int v9 = 268;
  void v9[4] = work;
  v9[5] = context;
  unint64_t v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF) {
    unint64_t v10 = 4351;
  }
  uint64_t v11 = StatusReg[28];
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v9[3] = v11;
    if (v10)
    {
      int isa_high = HIDWORD(queue[10].isa);
      if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
      {
        uint64_t v13 = __clz(__rbit32(v10 >> 8)) + 1;
      }
      else
      {
        uint64_t v13 = 0;
        unint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    v9[1] = v10;
    dispatch_group_enter(group);
    v9[6] = group;
    uint64_t v14 = (void (*)(dispatch_queue_t, void *, uint64_t))*((void *)queue->isa + 11);
    v14(queue, v9, v13);
  }
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = (uint64_t *)StatusReg[22];
  if (v7) {
    StatusReg[22] = v7[2];
  }
  else {
    uint64_t v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  BOOL v8 = _dispatch_Block_copy(block);
  unsigned int v9 = (uint64_t (*)())*((void *)block + 2);
  if (!v9)
  {
    if (_dispatch_block_special_invoke) {
      goto LABEL_5;
    }
LABEL_19:
    *uint64_t v7 = 284;
    v7[5] = (uint64_t)v8;
    inited = _dispatch_continuation_init_slow(v7, (atomic_uint *)queue, 0);
    goto LABEL_15;
  }
  if (_dispatch_block_special_invoke == v9) {
    goto LABEL_19;
  }
LABEL_5:
  *uint64_t v7 = 284;
  v7[4] = (uint64_t)_dispatch_call_block_and_release;
  v7[5] = (uint64_t)v8;
  unint64_t v10 = StatusReg[4] & 0xFFFFFFLL;
  if (v10 >= 0x10FF) {
    unint64_t v10 = 4351;
  }
  uint64_t v11 = StatusReg[28];
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  v7[3] = v11;
  if (v10)
  {
    int isa_high = HIDWORD(queue[10].isa);
    if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
    {
      inited = (uint64_t *)(__clz(__rbit32(v10 >> 8)) + 1);
    }
    else
    {
      inited = 0;
      unint64_t v10 = 0;
    }
  }
  else
  {
    inited = 0;
  }
  v7[1] = v10;
LABEL_15:
  dispatch_group_enter(group);
  v7[6] = (uint64_t)group;
  uint64_t v14 = (void (*)(dispatch_queue_t, uint64_t *, uint64_t *))*((void *)queue->isa + 11);

  v14(queue, v7, inited);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  unint64_t explicit = atomic_load_explicit(predicate, memory_order_acquire);
  if (explicit != -1)
  {
    if ((explicit & 3) == 2)
    {
      if (4 * MEMORY[0xFFFFFC180] - explicit - 14 <= 0xFFFFFFFFFFFFFFEFLL) {
        *predicate = -1;
      }
    }
    else
    {
      uint64_t v4 = 0;
      atomic_compare_exchange_strong_explicit(predicate, (unint64_t *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL, memory_order_relaxed, memory_order_relaxed);
      if (v4) {
        _dispatch_once_wait((uint64_t)predicate);
      }
      else {
        _dispatch_once_callout(predicate, (uint64_t)context, (uint64_t (*)(void))function);
      }
    }
  }
}

uint64_t _dispatch_once_callout(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = _dispatch_client_callout(a2, a3);
  unsigned int v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  unsigned int v6 = atomic_exchange_explicit(a1, (4 * MEMORY[0xFFFFFC180]) | 2, memory_order_release);
  if (v5 != v6)
  {
    return _dispatch_gate_broadcast_slow((uint64_t)a1, v6);
  }
  return result;
}

void _os_eventlink_dispose(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    free(*(void **)(a1 + 16));
  }
  mach_port_name_t v2 = *(_DWORD *)(a1 + 32);
  if (v2 + 1 >= 2) {
    mach_port_deallocate(*MEMORY[0x1E4F14C48], v2);
  }
  mach_port_name_t v3 = *(_DWORD *)(a1 + 36);
  if (v3 + 1 >= 2)
  {
    ipc_space_t v4 = *MEMORY[0x1E4F14C48];
    mach_port_deallocate(v4, v3);
  }
}

_DWORD *os_eventlink_create(const char *a1)
{
  mach_port_name_t v2 = _os_object_alloc((uint64_t)OS_os_eventlink, 48);
  if (v2)
  {
    if (a1)
    {
      mach_port_name_t v3 = _dispatch_strdup_if_mutable(a1);
      if (v3 != a1) {
        *((void *)v2 + 3) |= 1uLL;
      }
      *((void *)v2 + 2) = v3;
    }
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v2;
}

uint64_t os_eventlink_activate(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 32) + 1) > 1) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) == 0)
  {
    int v2 = mach_eventlink_create();
    uint64_t result = 0xFFFFFFFFLL;
    if (v2 <= 13)
    {
      if (v2)
      {
        if (v2 == 4)
        {
          uint64_t result = 22;
        }
        else
        {
          if (v2 != 13) {
            return result;
          }
          uint64_t result = 37;
        }
      }
      else
      {
        uint64_t v5 = 0;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v5, 0, memory_order_relaxed, memory_order_relaxed);
        if (v5) {
          return 22;
        }
        uint64_t result = 0;
      }
      goto LABEL_22;
    }
    if (v2 > 36)
    {
      if (v2 != 37)
      {
        if (v2 != 49) {
          return result;
        }
        uint64_t result = 60;
        goto LABEL_22;
      }
    }
    else
    {
      if (v2 == 14)
      {
        uint64_t result = 53;
        goto LABEL_22;
      }
      if (v2 != 15) {
        return result;
      }
    }
    uint64_t result = 89;
LABEL_22:
    ipc_space_t v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    goto LABEL_23;
  }
  ipc_space_t v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  uint64_t result = 89;
LABEL_23:
  *ipc_space_t v4 = result;
  return result;
}

uint64_t os_eventlink_extract_remote_port(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 32))
  {
LABEL_7:
    ipc_space_t v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    uint64_t result = 22;
    goto LABEL_8;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) == 0)
  {
    int v2 = (unsigned int *)(a1 + 36);
    __swp(v2, v2);
    if ((a1 + 35) < 0xFFFFFFFE)
    {
      uint64_t result = 0;
      *a2 = v2;
      return result;
    }
    goto LABEL_7;
  }
  ipc_space_t v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  uint64_t result = 89;
LABEL_8:
  *ipc_space_t v4 = result;
  return result;
}

_DWORD *os_eventlink_create_with_port(const char *a1, mach_port_name_t a2)
{
  ipc_space_t v4 = _os_object_alloc((uint64_t)OS_os_eventlink, 48);
  if (v4)
  {
    if (a1)
    {
      uint64_t v5 = _dispatch_strdup_if_mutable(a1);
      if (v5 != a1) {
        *((void *)v4 + 3) |= 1uLL;
      }
      *((void *)v4 + 2) = v5;
    }
    if (mach_port_mod_refs(*MEMORY[0x1E4F14C48], a2, 0, 1)) {
      os_eventlink_create_with_port_cold_1();
    }
    if (v4[8]) {
      os_eventlink_create_with_port_cold_1();
    }
    v4[8] = a2;
  }
  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }
  return v4;
}

_DWORD *os_eventlink_create_remote_with_eventlink(const char *a1, uint64_t a2)
{
  mach_port_name_t v7 = 0;
  int v3 = os_eventlink_extract_remote_port(a2, &v7);
  if (v3)
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = v3;
    return 0;
  }
  else
  {
    mach_port_name_t v5 = v7;
    unsigned int v6 = os_eventlink_create_with_port(a1, v7);
    mach_port_mod_refs(*MEMORY[0x1E4F14C48], v5, 0, -1);
    return v6;
  }
}

uint64_t os_eventlink_associate(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_25:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  if (a2 != 1) {
    _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  }
  int v4 = mach_eventlink_associate();
  uint64_t result = 0xFFFFFFFFLL;
  if (v4 <= 13)
  {
    if (v4)
    {
      if (v4 == 4)
      {
        uint64_t result = 22;
      }
      else
      {
        if (v4 != 13) {
          return result;
        }
        uint64_t result = 37;
      }
    }
    else
    {
      uint64_t result = 0;
    }
    goto LABEL_24;
  }
  if (v4 > 36)
  {
    if (v4 != 37)
    {
      if (v4 != 49) {
        return result;
      }
      uint64_t result = 60;
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  if (v4 == 14)
  {
    uint64_t result = 53;
    goto LABEL_24;
  }
  if (v4 == 15)
  {
LABEL_20:
    uint64_t result = 89;
LABEL_24:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }
  return result;
}

uint64_t os_eventlink_disassociate(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32))
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
      return 0;
    }
    int v1 = mach_eventlink_disassociate();
    int v2 = v1;
    if (v1 <= 13)
    {
      switch(v1)
      {
        case 0:
          uint64_t result = 0;
          goto LABEL_20;
        case 4:
          uint64_t result = 22;
          goto LABEL_20;
        case 13:
          uint64_t result = 37;
          goto LABEL_20;
      }
    }
    else if (v1 > 36)
    {
      uint64_t result = 0;
      if (v2 == 37) {
        return result;
      }
      if (v2 == 49)
      {
        uint64_t result = 60;
        goto LABEL_20;
      }
    }
    else
    {
      if (v1 == 14)
      {
        uint64_t result = 53;
        goto LABEL_20;
      }
      if (v1 == 15)
      {
        uint64_t result = 89;
LABEL_20:
        int v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        goto LABEL_21;
      }
    }
    return 0xFFFFFFFFLL;
  }
  int v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  uint64_t result = 22;
LABEL_21:
  *int v4 = result;
  return result;
}

uint64_t os_eventlink_wait_until(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    a3 = 0;
  }
  uint64_t v8 = mach_absolute_time() + a3;

  return os_eventlink_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_wait_until_internal(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    os_eventlink_create_with_port_cold_1();
  }
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = mach_eventlink_wait_until();
  int v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(void *)(a1 + 40) - v6;
LABEL_7:
    uint64_t result = 0;
LABEL_8:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        uint64_t result = 22;
        goto LABEL_8;
      case 13:
        uint64_t result = 37;
        goto LABEL_8;
    }
  }
  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      uint64_t result = 89;
      goto LABEL_8;
    }
    if (v8 == 49)
    {
      uint64_t result = 60;
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == 14)
    {
      uint64_t result = 53;
      goto LABEL_8;
    }
    if (v8 == 15)
    {
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        os_eventlink_create_with_port_cold_1();
      }
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t os_eventlink_wait(uint64_t a1, void *a2)
{
  return os_eventlink_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_22:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  int v1 = mach_eventlink_signal();
  uint64_t result = 0xFFFFFFFFLL;
  if (v1 <= 13)
  {
    if (v1)
    {
      if (v1 == 4)
      {
        uint64_t result = 22;
      }
      else
      {
        if (v1 != 13) {
          return result;
        }
        uint64_t result = 37;
      }
    }
    else
    {
      uint64_t result = 0;
    }
    goto LABEL_21;
  }
  if (v1 > 36)
  {
    if (v1 != 37)
    {
      if (v1 != 49) {
        return result;
      }
      uint64_t result = 60;
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  if (v1 == 14)
  {
    uint64_t result = 53;
    goto LABEL_21;
  }
  if (v1 == 15)
  {
LABEL_17:
    uint64_t result = 89;
LABEL_21:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }
  return result;
}

uint64_t os_eventlink_signal_and_wait(uint64_t a1, void *a2)
{
  return os_eventlink_signal_and_wait_until_internal(a1, 32, 0, a2);
}

uint64_t os_eventlink_signal_and_wait_until_internal(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    os_eventlink_create_with_port_cold_1();
  }
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = mach_eventlink_signal_wait_until();
  int v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(void *)(a1 + 40) - v6;
LABEL_7:
    uint64_t result = 0;
LABEL_8:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        uint64_t result = 22;
        goto LABEL_8;
      case 13:
        uint64_t result = 37;
        goto LABEL_8;
    }
  }
  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      uint64_t result = 89;
      goto LABEL_8;
    }
    if (v8 == 49)
    {
      uint64_t result = 60;
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 == 14)
    {
      uint64_t result = 53;
      goto LABEL_8;
    }
    if (v8 == 15)
    {
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        os_eventlink_create_with_port_cold_1();
      }
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t os_eventlink_signal_and_wait_until(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    a3 = 0;
  }
  uint64_t v8 = mach_absolute_time() + a3;

  return os_eventlink_signal_and_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_cancel(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0)
  {
    atomic_fetch_or_explicit((atomic_ullong *volatile)(result + 24), 2uLL, memory_order_relaxed);
    uint64_t v1 = *(unsigned int *)(result + 32);
    if ((v1 - 1) <= 0xFFFFFFFD)
    {
      if (mach_port_mod_refs(*MEMORY[0x1E4F14C48], v1, 0, 1)) {
        os_eventlink_create_with_port_cold_1();
      }
      return MEMORY[0x1F40D0138](v1);
    }
  }
  return result;
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  if ((unint64_t)*((unsigned __int8 *)queue->isa + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL) {
    dispatch_assert_queue_V2_cold_1(*((unsigned __int8 *)queue->isa + 40));
  }
  Class isa = queue[7].isa;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((isa ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
  {
    dispatch_queue_t v3 = *(dispatch_queue_t *)(StatusReg + 160);
    BOOL v4 = v3 == 0;
    if (v3) {
      BOOL v5 = v3 == queue;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
LABEL_21:
      if (v4) {
        _dispatch_assert_queue_fail(queue, 1);
      }
      return;
    }
    uint64_t v6 = *(dispatch_queue_t **)(StatusReg + 168);
    while (1)
    {
      dispatch_queue_t v7 = (dispatch_queue_t)v3[3].isa;
      if (v6)
      {
        if (!v7)
        {
          dispatch_queue_t v7 = *v6;
LABEL_15:
          uint64_t v6 = (dispatch_queue_t *)v6[1];
          goto LABEL_16;
        }
        if (v3 == *v6) {
          goto LABEL_15;
        }
      }
LABEL_16:
      BOOL v4 = v7 == 0;
      if (v7) {
        BOOL v8 = v7 == queue;
      }
      else {
        BOOL v8 = 1;
      }
      dispatch_queue_t v3 = v7;
      if (v8) {
        goto LABEL_21;
      }
    }
  }
}

void _dispatch_assert_queue_fail(void *a1, int a2)
{
  int v2 = "not ";
  dispatch_queue_t v3 = (const char *)&unk_18A97F2E6;
  BOOL v5 = 0;
  if (a2) {
    int v2 = (const char *)&unk_18A97F2E6;
  }
  if (a1[9]) {
    dispatch_queue_t v3 = (const char *)a1[9];
  }
  asprintf(&v5, "%sBlock was %sexpected to execute on queue [%s (%p)]", "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ", v2, v3, a1);
  BOOL v4 = v5;
  _dispatch_log("%s", v5);
  qword_1E91199C0 = (uint64_t)v4;
  __break(1u);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  if ((unint64_t)*((unsigned __int8 *)queue->isa + 40) - 19 <= 0xFFFFFFFFFFFFFFFDLL) {
    dispatch_assert_queue_not_V2_cold_1(*((unsigned __int8 *)queue->isa + 40));
  }
  Class isa = queue[7].isa;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((isa ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0) {
    goto LABEL_20;
  }
  dispatch_queue_t v3 = *(dispatch_queue_t *)(StatusReg + 160);
  BOOL v4 = v3 == 0;
  if (v3) {
    BOOL v5 = v3 == queue;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = *(dispatch_queue_t **)(StatusReg + 168);
    do
    {
      dispatch_queue_t v7 = (dispatch_queue_t)v3[3].isa;
      if (v6)
      {
        if (!v7)
        {
          dispatch_queue_t v7 = *v6;
LABEL_13:
          uint64_t v6 = (dispatch_queue_t *)v6[1];
          goto LABEL_14;
        }
        if (v3 == *v6) {
          goto LABEL_13;
        }
      }
LABEL_14:
      BOOL v4 = v7 == 0;
      if (v7) {
        BOOL v8 = v7 == queue;
      }
      else {
        BOOL v8 = 1;
      }
      dispatch_queue_t v3 = v7;
    }
    while (!v8);
  }
  if (!v4) {
LABEL_20:
  }
    _dispatch_assert_queue_fail(queue, 0);
}

void dispatch_assert_queue_barrier(dispatch_queue_t queue)
{
  if (LOWORD(queue[10].isa) != 1 && (!queue[3].isa || ((uint64_t)queue[7].isa & 0x40000000000000) == 0)) {
    _dispatch_assert_queue_barrier_fail(queue);
  }
}

void _dispatch_assert_queue_barrier_fail(void *a1)
{
  uint64_t v1 = (const char *)a1[9];
  if (!v1) {
    uint64_t v1 = (const char *)&unk_18A97F2E6;
  }
  dispatch_queue_t v3 = 0;
  asprintf(&v3, "%sBlock was expected to act as a barrier on queue [%s (%p)]", "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ", v1, a1);
  int v2 = v3;
  _dispatch_log("%s", v3);
  qword_1E91199C0 = (uint64_t)v2;
  __break(1u);
}

uint64_t dispatch_allow_send_signals()
{
  return MEMORY[0x1F40D08B0]();
}

void _dispatch_set_priority_and_mach_voucher_slow(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (!a1 || (StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)), uint64_t v4 = *(void *)(StatusReg + 32), v4 == a1))
  {
    int v5 = 0;
    goto LABEL_11;
  }
  if ((v4 & 0x1000000) != 0)
  {
    uint64_t v7 = *(void *)(StatusReg + 200) & 0x80000000;
    int v6 = 16;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = *(void *)(StatusReg + 32) & 0x88000000;
  }
  uint64_t v8 = v7 | a1;
  if (((qword_1EB1CE2B8 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Changing the QoS while on the manager queue";
    qword_1E91199F0 = v8;
    __break(1u);
LABEL_23:
    _dispatch_bug(206, (int)a1);
    return;
  }
  if ((a1 & 0x2000000) != 0)
  {
    uint64_t v4 = v8;
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Cannot raise oneself to manager";
    qword_1E91199F0 = v8;
    __break(1u);
    goto LABEL_27;
  }
  if ((v4 & 0x2000000) != 0)
  {
LABEL_27:
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Cannot turn a manager thread into a normal one";
    qword_1E91199F0 = v4;
    __break(1u);
    return;
  }
  int v5 = v6 | ((v4 & 0xFFFFFF) != 0);
  uint64_t v2 = v8;
LABEL_11:
  if (a2 == -1) {
    int v9 = v5;
  }
  else {
    int v9 = v5 | 2;
  }
  uint64_t v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v10 && (*(unsigned char *)(v10 + 45) & 2) != 0) {
    _dispatch_event_loop_drain(1);
  }
  if (v9)
  {
    LODWORD(a1) = _pthread_set_properties_self();
    if (a1 == 22)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: _pthread_set_properties_self failed";
      qword_1E91199F0 = v2;
      __break(1u);
    }
    if (a1) {
      goto LABEL_23;
    }
  }
}

void _dispatch_set_priority_and_voucher_slow(uint64_t a1, uint64_t a2, char a3)
{
  if (a2 == -1) {
    goto LABEL_8;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(void *)(StatusReg + 224);
  if ((a3 & 2) == 0 || v5 != a2)
  {
    if (a2
      && (a3 & 4) == 0
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_31:
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return;
    }
    if (v5 == a2)
    {
      int v6 = -1;
      uint64_t v5 = a2;
      goto LABEL_21;
    }
    *(void *)(StatusReg + 224) = a2;
    if (a2)
    {
      int v6 = *(_DWORD *)(a2 + 32);
      if (v5)
      {
LABEL_15:
        int v7 = *(_DWORD *)(v5 + 32);
        goto LABEL_19;
      }
    }
    else
    {
      int v6 = 0;
      if (v5) {
        goto LABEL_15;
      }
    }
    int v7 = 0;
LABEL_19:
    if (v6 == v7) {
      int v6 = -1;
    }
    goto LABEL_21;
  }
  int v6 = -1;
  uint64_t v5 = -1;
  if (a2
    && (a3 & 4) != 0
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
LABEL_8:
    int v6 = -1;
    uint64_t v5 = -1;
  }
LABEL_21:
  if ((a3 & 8) == 0) {
    _dispatch_set_priority_and_mach_voucher_slow(a1, v6);
  }
  if (v5 != -1 && (a3 & 2) != 0)
  {
    if (v5)
    {
      int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 1)
      {
        if (add_explicit == 1)
        {
          _voucher_xref_dispose(v5, (const char *)a2);
          return;
        }
        goto LABEL_31;
      }
    }
  }
}

void _dispatch_async_redirect_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5 = *(_DWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v5) {
    unsigned int v9 = a3 & 0xFCFFFFFF | v5;
  }
  else {
    unsigned int v9 = a3;
  }
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v12 = (long long *)(StatusReg + 20);
  uint64_t v11 = StatusReg[20];
  if (v6)
  {
    uint64_t v13 = StatusReg[25];
    int v14 = *(_DWORD *)(v6 + 84);
    unsigned int v15 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
    StatusReg[20] = v6;
    int v16 = *(_DWORD *)(v7 + 84);
    if (v15)
    {
      if ((v16 & 0xFFF) != 0)
      {
        unsigned int v17 = v14 & 0x88000000 | ((WORD1(v13) & 0xF) << 16) & 0x880F0000;
        unsigned int v18 = v14 & 0xFFF;
        if (v18 <= (*(_DWORD *)(v7 + 84) & 0xFFFu)) {
          unsigned int v18 = *(_DWORD *)(v7 + 84) & 0xFFF;
        }
LABEL_13:
        if ((unsigned __int16)v16 >> 12 <= v18 >> 8) {
          int v19 = 0x40000000;
        }
        else {
          int v19 = 1140912128;
        }
        unsigned int v20 = v17 | v18 | v19 & v16;
        goto LABEL_24;
      }
      if ((v14 & 0xFFF) != 0) {
        unsigned int v21 = v15 | 0x40000000;
      }
      else {
        unsigned int v21 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
      }
      goto LABEL_22;
    }
LABEL_55:
    unsigned int v20 = v16 & 0xFFF0FFFF;
    goto LABEL_24;
  }
  int v16 = *(_DWORD *)(v7 + 84);
  uint64_t v13 = StatusReg[25];
  if (!v13) {
    goto LABEL_55;
  }
  unsigned int v18 = *(_DWORD *)(v7 + 84) & 0xFFF;
  if ((v16 & 0xFFF) != 0)
  {
    unsigned int v17 = v13 & 0x880F0000;
    if (((unsigned __int16)v13 & 0xFFFu) > v18) {
      unsigned int v18 = v13 & 0xFFF;
    }
    goto LABEL_13;
  }
  unsigned int v21 = v13 | 0x40000000;
  if ((v13 & 0xFFF) == 0) {
    unsigned int v21 = StatusReg[25];
  }
LABEL_22:
  unsigned int v22 = (unsigned __int16)v16 >> 12;
  unsigned int v20 = v21 & 0xFFFF0FFF | v16 & 0x400F000;
  if (v22 <= ((v21 >> 8) & 0xF)) {
    unsigned int v20 = v21;
  }
LABEL_24:
  StatusReg[25] = v20;
  long long v38 = *v12;
  StatusReg[20] = v7;
  StatusReg[21] = &v38;
  uint64_t v23 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = -1;
  uint64_t v24 = *(void *)(a1 + 8);
  if (v24 == -1)
  {
    unint64_t v31 = 0;
  }
  else
  {
    uint64_t v25 = StatusReg[25];
    if (((v25 >> 8) & 0xF) != 0) {
      uint64_t v26 = 256 << ((BYTE1(v25) & 0xFu) - 1);
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = v26 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    unint64_t v28 = v24 & 0xFFFFFF;
    if ((v24 & 0xFFFFFF) != 0)
    {
      unint64_t v29 = v26 & 0xFFFFFF00;
      if ((v25 & 0x44000000) == 0 && (*(void *)(a1 + 8) & 0x10000000) == 0) {
        unint64_t v31 = v27;
      }
      else {
        unint64_t v31 = v24 & 0xFFFFFF;
      }
      if (v28 < v29) {
        unint64_t v31 = v27;
      }
    }
    else if ((unsigned __int16)v25 >> 12)
    {
      unint64_t v31 = (256 << (((unsigned __int16)v25 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v31 = v26 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  unint64_t v32 = v31 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v33 = StatusReg[4];
  if ((v33 & 0x1000000) != 0)
  {
    if (v32)
    {
LABEL_70:
      _dispatch_set_priority_and_voucher_slow(v32, v23, 6);
      goto LABEL_45;
    }
    unint64_t v32 = v33 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v32 == (v33 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_41;
  }
  if (v32) {
    goto LABEL_70;
  }
LABEL_41:
  if (v23 == -1) {
    goto LABEL_45;
  }
  if (StatusReg[28] != v23)
  {
    unint64_t v32 = 0;
    goto LABEL_70;
  }
  if (v23 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
    -[OS_voucher release]();
  }
LABEL_45:
  uint64_t v34 = StatusReg[22];
  if (v34) {
    int v35 = *(_DWORD *)(v34 + 8) + 1;
  }
  else {
    int v35 = 1;
  }
  if (v35 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_pop(v8, a2, v9, v7);
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(void *)(a1 + 16) = v34;
    *(_DWORD *)(a1 + 8) = v35;
    StatusReg[22] = a1;
    _dispatch_continuation_pop(v8, a2, v9, v7);
  }
  *int v12 = v38;
  if (v6) {
    *(void *)int v12 = v11;
  }
  StatusReg[25] = StatusReg[25] & 0xF0000 | v13 & 0xFFF0FFFF;
  uint64_t v36 = *(void *)(v7 + 24);
  if (*(void *)(v36 + 24) && v36 != v11)
  {
    do
    {
      _dispatch_lane_non_barrier_complete(v36, 0);
      uint64_t v36 = *(void *)(v36 + 24);
      if (*(void *)(v36 + 24)) {
        BOOL v37 = v36 == v11;
      }
      else {
        BOOL v37 = 1;
      }
    }
    while (!v37);
  }
  _dispatch_lane_non_barrier_complete(v7, 1);
}

void _dispatch_workloop_stealer_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = -1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 == -1)
  {
    unint64_t v15 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v8 >> 8) & 0xF) != 0) {
      uint64_t v9 = 256 << ((BYTE1(v8) & 0xFu) - 1);
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00 | v8;
    unint64_t v11 = v7 & 0xFFFFFF;
    if ((v7 & 0xFFFFFF) != 0)
    {
      unint64_t v12 = v9 & 0xFFFFFF00;
      uint64_t v13 = v7 & 0x10000000;
      if ((v8 & 0x44000000) == 0 && v13 == 0) {
        unint64_t v15 = v10;
      }
      else {
        unint64_t v15 = v11;
      }
      if (v11 < v12) {
        unint64_t v15 = v10;
      }
    }
    else if ((unsigned __int16)v8 >> 12)
    {
      unint64_t v15 = (256 << (((unsigned __int16)v8 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v15 = v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
  }
  unint64_t v16 = v15 & 0xFFFFFFFF02FFFFFFLL;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_40:
      _dispatch_set_priority_and_voucher_slow(v16, v6, 6);
      goto LABEL_22;
    }
    unint64_t v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_18;
  }
  if (v16) {
    goto LABEL_40;
  }
LABEL_18:
  if (v6 == -1) {
    goto LABEL_22;
  }
  if (StatusReg[28] != v6)
  {
    unint64_t v16 = 0;
    goto LABEL_40;
  }
  if (v6 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
    -[OS_voucher release]();
  }
LABEL_22:
  uint64_t v19 = StatusReg[22];
  if (v19) {
    int v20 = *(_DWORD *)(v19 + 8) + 1;
  }
  else {
    int v20 = 1;
  }
  uint64_t v21 = a1;
  if (v20 <= _dispatch_continuation_cache_limit)
  {
    uint64_t v21 = 0;
    *(void *)(a1 + 16) = v19;
    *(_DWORD *)(a1 + 8) = v20;
    StatusReg[22] = a1;
  }
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 48) + 64))(*(void *)(a1 + 48), a2, a3 | 1u);
  if (v21)
  {
    _dispatch_continuation_free_to_cache_limit(v21);
  }
}

void _dispatch_queue_override_invoke(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = (uint64_t)a1;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = StatusReg[20];
  uint64_t v9 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v10 = StatusReg[25];
  StatusReg[25] = *(_DWORD *)(v8 + 84) & 0xFFF0FFFF | ((WORD1(v10) & 0xF) << 16);
  StatusReg[20] = v8;
  BOOL v11 = *(void *)(*a1 + 40) == 1792;
  uint64_t v12 = a1[3];
  a1[3] = -1;
  uint64_t v13 = a1[1];
  if (v13 == -1)
  {
    unint64_t v20 = 0;
  }
  else
  {
    uint64_t v14 = StatusReg[25];
    if (((v14 >> 8) & 0xF) != 0) {
      uint64_t v15 = 256 << ((BYTE1(v14) & 0xFu) - 1);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    unint64_t v17 = v13 & 0xFFFFFF;
    if ((v13 & 0xFFFFFF) != 0)
    {
      unint64_t v18 = v15 & 0xFFFFFF00;
      if ((v14 & 0x44000000) == 0 && (a1[1] & 0x10000000) == 0) {
        unint64_t v20 = v16;
      }
      else {
        unint64_t v20 = v13 & 0xFFFFFF;
      }
      if (v17 < v18) {
        unint64_t v20 = v16;
      }
    }
    else if ((unsigned __int16)v14 >> 12)
    {
      unint64_t v20 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v20 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  unint64_t v21 = v20 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v22 = StatusReg[4];
  if ((v22 & 0x1000000) != 0)
  {
    if (v21)
    {
LABEL_65:
      _dispatch_set_priority_and_voucher_slow(v21, v12, 6);
      goto LABEL_22;
    }
    unint64_t v21 = v22 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v21 == (v22 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_18;
  }
  if (v21) {
    goto LABEL_65;
  }
LABEL_18:
  if (v12 == -1) {
    goto LABEL_22;
  }
  if (StatusReg[28] != v12)
  {
    unint64_t v21 = 0;
    goto LABEL_65;
  }
  if (v12 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
    -[OS_voucher release]();
  }
LABEL_22:
  uint64_t v23 = StatusReg[22];
  if (v23) {
    int v24 = *(_DWORD *)(v23 + 8) + 1;
  }
  else {
    int v24 = 1;
  }
  if (v24 <= _dispatch_continuation_cache_limit)
  {
    *(void *)(v5 + 16) = v23;
    *(_DWORD *)(v5 + 8) = v24;
    StatusReg[22] = v5;
    uint64_t v5 = 0;
  }
  uint64_t v25 = *(void *)v9;
  if (*(void *)v9 < 0x1000uLL)
  {
    if ((a3 & 0x1000000) != 0)
    {
      uint64_t v26 = (void *)MEMORY[0x18C121B40]();
      uint64_t v25 = *(void *)v9;
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(void *)(v9 + 24);
    if ((v25 & 4) != 0) {
      *(void *)(v9 + 24) = -1;
    }
    uint64_t v28 = v25 & 4;
    uint64_t v29 = *(void *)(v9 + 8);
    if (v29 == -1)
    {
      unint64_t v32 = 0;
    }
    else
    {
      uint64_t v30 = StatusReg[25];
      if (((v30 >> 8) & 0xF) != 0) {
        uint64_t v31 = 256 << ((BYTE1(v30) & 0xFu) - 1);
      }
      else {
        uint64_t v31 = 0;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v29 & 0xFFFFFF) != 0)
      {
        if ((v29 & 0xFFFFFFuLL) >= (v31 & 0xFFFFFF00)
          && ((v30 & 0x44000000) != 0 || (*(void *)(v9 + 8) & 0x10000000) != 0))
        {
          unint64_t v32 = v29 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v30 >> 12)
      {
        unint64_t v32 = (256 << (((unsigned __int16)v30 >> 12) - 1)) | 0xFF;
      }
    }
    unint64_t v34 = v32 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v35 = StatusReg[4];
    if ((v35 & 0x1000000) != 0)
    {
      if (v34) {
        goto LABEL_75;
      }
      unint64_t v34 = v35 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v34 == (v35 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_51:
      if (v27 == -1) {
        goto LABEL_76;
      }
      if (StatusReg[28] == v27)
      {
        if ((v25 & 4) != 0 && v27)
        {
          if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v27 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
            -[OS_voucher release]();
          }
LABEL_77:
          uint64_t v36 = StatusReg[22];
          if (v36) {
            int v37 = *(_DWORD *)(v36 + 8) + 1;
          }
          else {
            int v37 = 1;
          }
          uint64_t v28 = v9;
          if (v37 <= _dispatch_continuation_cache_limit)
          {
            uint64_t v28 = 0;
            *(void *)(v9 + 16) = v36;
            *(_DWORD *)(v9 + 8) = v37;
            StatusReg[22] = v9;
          }
LABEL_82:
          if ((v25 & 8) != 0)
          {
            long long v38 = *(NSObject **)(v9 + 48);
            uint64_t v39 = *((void *)v38->isa + 5);
            if (v39 != 514) {
              _dispatch_queue_override_invoke_cold_1(v39);
            }
            _dispatch_client_callout(*(void *)(v9 + 40), *(uint64_t (**)(void))(v9 + 32));
            dispatch_group_leave(v38);
            if (!v28)
            {
LABEL_84:
              if (!v26) {
                goto LABEL_86;
              }
              goto LABEL_85;
            }
          }
          else
          {
            _dispatch_client_callout(*(void *)(v9 + 40), *(uint64_t (**)(void))(v9 + 32));
            if (!v28) {
              goto LABEL_84;
            }
          }
          _dispatch_continuation_free_to_cache_limit(v28);
          if (!v26) {
            goto LABEL_86;
          }
LABEL_85:
          goto LABEL_86;
        }
LABEL_76:
        if ((v25 & 4) == 0) {
          goto LABEL_82;
        }
        goto LABEL_77;
      }
      unint64_t v34 = 0;
LABEL_75:
      _dispatch_set_priority_and_voucher_slow(v34, v27, v28 | 2);
      goto LABEL_76;
    }
    if (v34) {
      goto LABEL_75;
    }
    goto LABEL_51;
  }
  if (*(void *)(v25 + 40) == 1) {
    (*(void (**)(uint64_t, void, void))(v25 + 48))(v9, 0, (a3 >> 21) & 1);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, void))(v25 + 64))(v9, a2, v11 | a3);
  }
LABEL_86:
  if (v5) {
    _dispatch_continuation_free_to_cache_limit(v5);
  }
  StatusReg[25] = StatusReg[25] & 0xF0000 | v10 & 0xFFF0FFFF;
  StatusReg[20] = v7;
}

void _dispatch_continuation_free_to_cache_limit(uint64_t a1)
{
  _dispatch_continuation_free_to_heap(a1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 176);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 8);
    if (v3 - _dispatch_continuation_cache_limit >= 1)
    {
      int v4 = _dispatch_continuation_cache_limit - v3 + 1;
      do
      {
        uint64_t v5 = v2;
        uint64_t v2 = *(void *)(v2 + 16);
        _dispatch_continuation_free_to_heap(v5);
        if (!v4) {
          break;
        }
        ++v4;
      }
      while (v2);
      *(void *)(StatusReg + 176) = v2;
    }
  }
}

void _dispatch_continuation_pop(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = (void (**)(uint64_t))StatusReg[24];
  if (v9) {
    (*v9)(a4);
  }
  uint64_t v10 = *(void *)a1;
  if (*(void *)a1 < 0x1000uLL)
  {
    if ((a3 & 0x1000000) != 0)
    {
      BOOL v11 = (void *)MEMORY[0x18C121B40]();
      uint64_t v10 = *(void *)a1;
    }
    else
    {
      BOOL v11 = 0;
    }
    uint64_t v12 = *(void *)(a1 + 24);
    if ((v10 & 4) != 0) {
      *(void *)(a1 + 24) = -1;
    }
    uint64_t v13 = v10 & 4;
    uint64_t v14 = *(void *)(a1 + 8);
    if (v14 == -1)
    {
      unint64_t v17 = 0;
    }
    else
    {
      uint64_t v15 = StatusReg[25];
      if (((v15 >> 8) & 0xF) != 0) {
        uint64_t v16 = 256 << ((BYTE1(v15) & 0xFu) - 1);
      }
      else {
        uint64_t v16 = 0;
      }
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v14 & 0xFFFFFF) != 0)
      {
        if ((v14 & 0xFFFFFFuLL) >= (v16 & 0xFFFFFF00)
          && ((v15 & 0x44000000) != 0 || (*(void *)(a1 + 8) & 0x10000000) != 0))
        {
          unint64_t v17 = v14 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v15 >> 12)
      {
        unint64_t v17 = (256 << (((unsigned __int16)v15 >> 12) - 1)) | 0xFF;
      }
    }
    unint64_t v19 = v17 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t add_explicit = StatusReg[4];
    if ((add_explicit & 0x1000000) != 0) {
      goto LABEL_33;
    }
    if (v19 != (add_explicit & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_35;
    }
    while (v12 != -1)
    {
      if (StatusReg[28] != v12)
      {
        unint64_t v19 = 0;
LABEL_41:
        _dispatch_set_priority_and_voucher_slow(v19, v12, v13 | 2);
        break;
      }
      if ((v10 & 4) == 0 || !v12) {
        break;
      }
      uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 0xFFFFFFFF, memory_order_relaxed);
      if ((int)add_explicit > 1) {
        goto LABEL_43;
      }
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
LABEL_33:
      if (!v19)
      {
        unint64_t v19 = add_explicit & 0xFFFFFFFFFEFFFFFFLL;
LABEL_35:
        if (!v19) {
          continue;
        }
      }
      goto LABEL_41;
    }
    if ((v10 & 4) == 0) {
      goto LABEL_48;
    }
LABEL_43:
    uint64_t v21 = StatusReg[22];
    if (v21) {
      int v22 = *(_DWORD *)(v21 + 8) + 1;
    }
    else {
      int v22 = 1;
    }
    uint64_t v13 = a1;
    if (v22 <= _dispatch_continuation_cache_limit)
    {
      uint64_t v13 = 0;
      *(void *)(a1 + 16) = v21;
      *(_DWORD *)(a1 + 8) = v22;
      StatusReg[22] = a1;
    }
LABEL_48:
    if ((v10 & 8) != 0)
    {
      int v24 = *(NSObject **)(a1 + 48);
      uint64_t v25 = *((void *)v24->isa + 5);
      if (v25 != 514)
      {
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
        qword_1E91199F0 = v25;
        __break(1u);
        return;
      }
      _dispatch_client_callout(*(void *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
      dispatch_group_leave(v24);
      if (!v13)
      {
LABEL_50:
        if (!v11) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
    else
    {
      _dispatch_client_callout(*(void *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
      if (!v13) {
        goto LABEL_50;
      }
    }
    _dispatch_continuation_free_to_cache_limit(v13);
    if (!v11) {
      goto LABEL_52;
    }
LABEL_51:
    goto LABEL_52;
  }
  if (*(void *)(v10 + 40) == 1) {
    (*(void (**)(uint64_t, void, void))(v10 + 48))(a1, 0, (a3 >> 21) & 1);
  }
  else {
    (*(void (**)(uint64_t, uint64_t, void))(v10 + 64))(a1, a2, a3 & 0xFFFF0000);
  }
LABEL_52:
  if (v9)
  {
    uint64_t v23 = v9[1];
    v23(a4);
  }
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  if ((flags & 0xFFFFFF00) != 0) {
    return 0;
  }
  unint64_t v4 = flags | 0x40000000;
  if ((flags & 0xA) == 0) {
    unint64_t v4 = flags;
  }
  if ((v4 & 0x20) != 0) {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFFEFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v6 = v5;
    goto LABEL_16;
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v6 = v5 | 0x80000000;
    goto LABEL_16;
  }
  if ((v5 & 0x40) != 0)
  {
    uint64_t v6 = v5 | 0x80000000;
    uint64_t v7 = -1;
    goto LABEL_16;
  }
  if ((v5 & 4) != 0)
  {
    uint64_t v6 = v5 | 0x80000000;
    uint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
LABEL_16:
    uint64_t v8 = 0;
    if ((v5 & 4) == 0 || (v6 & 0x40000000) != 0)
    {
      uint64_t v5 = v6;
    }
    else
    {
      unint64_t v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v9 >= 0x10FF) {
        uint64_t v8 = 4351;
      }
      else {
        uint64_t v8 = v9;
      }
      uint64_t v5 = v6 | 0x40000000;
    }
    return _dispatch_block_create(v5, v7, v8, block);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  return _dispatch_block_create(v5, v7, v8, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  if ((flags & 0xFFFFFF00) != 0
    || qos_class > QOS_CLASS_USER_INTERACTIVE
    || ((1 << qos_class) & 0x202220221) == 0
    || relative_priority != 0 && relative_priority < 0xFFFFFFF1)
  {
    return 0;
  }
  char v5 = flags;
  unint64_t v6 = flags | 0x40000000;
  uint64_t v7 = _pthread_qos_class_encode();
  uint64_t v8 = 0;
  if ((v5 & 0x20) != 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFFFEFLL;
  }
  else {
    uint64_t v9 = v6;
  }
  uint64_t v10 = v9;
  if ((v9 & 0x80000000) != 0)
  {
LABEL_15:
    if ((v9 & 4) == 0) {
      goto LABEL_22;
    }
LABEL_16:
    if ((v10 & 0x40000000) == 0)
    {
      unint64_t v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v12 >= 0x10FF) {
        uint64_t v7 = 4351;
      }
      else {
        uint64_t v7 = v12;
      }
      uint64_t v9 = v10 | 0x40000000;
      return _dispatch_block_create(v9, v8, v7, block);
    }
    goto LABEL_22;
  }
  if ((v9 & 2) != 0)
  {
    uint64_t v8 = 0;
    uint64_t v10 = v9 | 0x80000000;
    goto LABEL_15;
  }
  if ((v9 & 0x40) == 0)
  {
    if ((v9 & 4) == 0)
    {
      uint64_t v8 = 0;
      return _dispatch_block_create(v9, v8, v7, block);
    }
    uint64_t v10 = v9 | 0x80000000;
    uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    goto LABEL_16;
  }
  uint64_t v10 = v9 | 0x80000000;
  uint64_t v8 = -1;
  if ((v9 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_22:
  uint64_t v9 = v10;
  return _dispatch_block_create(v9, v8, v7, block);
}

void *dispatch_block_create_with_voucher(uint64_t a1, uint64_t a2, void *aBlock)
{
  if ((a1 & 0xFFFFFF00) != 0) {
    return 0;
  }
  uint64_t v5 = 3221225472;
  if ((a1 & 0xA) == 0) {
    uint64_t v5 = 0x80000000;
  }
  if ((a1 & 0x20) != 0) {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFEFLL | a1 & 0xFFFFFFFF7FFFFFAFLL;
  }
  else {
    unint64_t v6 = v5 | a1 & 0xFFFFFFFF7FFFFFBFLL;
  }
  if (a2 == -3) {
    a2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  }
  if ((v6 & 0x40000004) == 4)
  {
    unint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
    if (v7 >= 0x10FF) {
      uint64_t v8 = 4351;
    }
    else {
      uint64_t v8 = v7;
    }
    v6 |= 0x40000000uLL;
  }
  else
  {
    uint64_t v8 = 0;
  }
  return _dispatch_block_create(v6, a2, v8, aBlock);
}

void *dispatch_block_create_with_voucher_and_qos_class(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  if ((a1 & 0xFFFFFF00) != 0 || a3 > 0x21 || ((1 << a3) & 0x202220221) == 0 || a4 != 0 && a4 < 0xFFFFFFF1) {
    return 0;
  }
  char v7 = a1;
  unint64_t v8 = a1 & 0xFFFFFFFF3FFFFFB7 | 0xC0000000;
  uint64_t v9 = _pthread_qos_class_encode();
  if ((v7 & 0x20) != 0) {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFEFLL;
  }
  else {
    unint64_t v10 = v8;
  }
  if (a2 == -3) {
    a2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  }
  return _dispatch_block_create(v10, a2, v9, a5);
}

void dispatch_block_perform(dispatch_block_flags_t flags, dispatch_block_t block)
{
  if ((flags & 0xFFFFFF00) != 0) {
    dispatch_block_perform_cold_1(flags);
  }
  unint64_t v2 = flags | 0x40000000;
  if ((flags & 0xA) == 0) {
    unint64_t v2 = flags;
  }
  if ((v2 & 0x20) != 0) {
    v2 &= ~0x10uLL;
  }
  v4[0] = 3512316172;
  v4[1] = v2 | ((v2 & 2) << 30);
  int v5 = 8;
  int v6 = 0;
  if ((v2 & 2) != 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = -1;
  }
  uint64_t v7 = 0;
  uint64_t v8 = v3;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  dispatch_block_t v9 = block;
  uint64_t v10 = 0;
  _dispatch_block_invoke_direct((uint64_t)v4);
}

void _dispatch_block_invoke_direct(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 4) != 0) {
    _dispatch_block_invoke_direct_cold_3(*(_DWORD *)(a1 + 16));
  }
  if ((v2 & 1) == 0)
  {
    unint64_t v4 = 0;
    if ((v1 & 0x40000000) != 0)
    {
      unint64_t v5 = 0;
      if ((v1 & 0x30) != 0x10)
      {
        uint64_t v6 = *(void *)(a1 + 24);
        unint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
        BOOL v8 = v7 != 0;
        BOOL v9 = v7 < (v6 & 0xFFFFFFuLL);
        unint64_t v10 = v6 & 0xFFFFFFFF02FFFFFFLL;
        if (v8 && v9) {
          unint64_t v4 = v7;
        }
        else {
          unint64_t v4 = 0;
        }
        if (v8 && v9) {
          unint64_t v5 = v10;
        }
        else {
          unint64_t v5 = 0;
        }
      }
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v5 = 0;
      if ((v1 & 0x80000000) == 0)
      {
LABEL_12:
        uint64_t v11 = -1;
        goto LABEL_15;
      }
    }
    uint64_t v11 = *(void *)(a1 + 32);
LABEL_15:
    unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v13 = StatusReg[4];
    if ((v13 & 0x1000000) != 0)
    {
      if (v5) {
        goto LABEL_46;
      }
      unint64_t v5 = v13 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v5 == (v13 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_17:
      if (v11 == -1) {
        goto LABEL_21;
      }
      if (StatusReg[28] == v11)
      {
        if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0) {
          -[OS_voucher retain]();
        }
LABEL_21:
        *(_DWORD *)(a1 + 64) = StatusReg[3];
        if (*(void *)(*(void *)(a1 + 40) + 16)) {
          uint64_t v14 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
        }
        else {
          uint64_t v14 = 0;
        }
        _dispatch_client_callout(*(void *)(a1 + 40), v14);
        uint64_t v15 = StatusReg[4];
        if ((v15 & 0x1000000) != 0)
        {
          if (v4) {
            goto LABEL_48;
          }
          unint64_t v4 = v15 & 0xFFFFFFFFFEFFFFFFLL;
        }
        else if (v4 == (v15 & 0xFFFFFFFF77FFFFFFLL))
        {
LABEL_26:
          if (v11 == -1) {
            goto LABEL_30;
          }
          if (StatusReg[28] == v11)
          {
            if (v11
              && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
            {
              -[OS_voucher release]();
            }
            goto LABEL_30;
          }
          unint64_t v4 = 0;
LABEL_48:
          _dispatch_set_priority_and_voucher_slow(v4, v11, 6);
          if ((v2 & 8) != 0) {
            return;
          }
          goto LABEL_31;
        }
        if (v4) {
          goto LABEL_48;
        }
        goto LABEL_26;
      }
      unint64_t v5 = 0;
LABEL_46:
      _dispatch_set_priority_and_voucher_slow(v5, v11, 0);
      uint64_t v11 = v17;
      goto LABEL_21;
    }
    if (v5) {
      goto LABEL_46;
    }
    goto LABEL_17;
  }
LABEL_30:
  if ((v2 & 8) != 0) {
    return;
  }
LABEL_31:
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 20), 1u, memory_order_relaxed))
  {
    uint64_t v16 = *(NSObject **)(a1 + 48);
    dispatch_group_leave(v16);
  }
}

void _dispatch_block_sync_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(atomic_uint **)(a1 + 32);
  if (v3 != (atomic_uint *)3512316172) {
    _dispatch_continuation_get_function_symbol_cold_1((uint64_t)v3);
  }
  int v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) != 0) {
    _dispatch_block_invoke_direct_cold_3(*(_DWORD *)(a1 + 48));
  }
  if (v4)
  {
LABEL_21:
    if ((v4 & 8) != 0) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if ((*(void *)(a1 + 40) & 0x80000000) == 0)
  {
    uint64_t v5 = -1;
    goto LABEL_16;
  }
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = StatusReg[25];
  uint64_t v8 = 256 << ((BYTE1(v7) & 0xFu) - 1);
  if (((v7 >> 8) & 0xF) == 0) {
    uint64_t v8 = 0;
  }
  BOOL v9 = (unsigned __int16)v7 >> 12 == 0;
  uint64_t v5 = *(void *)(a1 + 64);
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
  uint64_t v11 = (256 << (((v7 >> 12) & 0xF) - 1)) | 0xFF;
  if (v9) {
    uint64_t v11 = v10;
  }
  unint64_t v12 = v11 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v13 = StatusReg[4];
  if ((v13 & 0x1000000) != 0)
  {
    if (v12)
    {
LABEL_45:
      _dispatch_set_priority_and_voucher_slow(v12, *(void *)(a1 + 64), 0);
      uint64_t v5 = v17;
      goto LABEL_16;
    }
    unint64_t v12 = v13 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v12 == (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_12;
  }
  if (v12) {
    goto LABEL_45;
  }
LABEL_12:
  if (v5 == -1) {
    goto LABEL_16;
  }
  if (StatusReg[28] != v5)
  {
    unint64_t v12 = 0;
    goto LABEL_45;
  }
  if (v5 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
LABEL_16:
  uint64_t v3 = (atomic_uint *)(*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16))();
  unint64_t v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v15 = *(void *)(v14 + 32);
  if ((v15 & 0x1000000) == 0 || (uint64_t v3 = (atomic_uint *)(v15 & 0xFFFFFFFFFEFFFFFFLL), (v15 & 0xFFFFFFFFFEFFFFFFLL) == 0))
  {
    if (v5 == -1) {
      goto LABEL_21;
    }
    if (*(void *)(v14 + 224) == v5)
    {
      if (v5 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
        -[OS_voucher release]();
      }
      goto LABEL_21;
    }
    uint64_t v3 = 0;
  }
  _dispatch_set_priority_and_voucher_slow((uint64_t)v3, v5, 6);
  if ((v4 & 8) != 0) {
    goto LABEL_24;
  }
LABEL_22:
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed)) {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
  }
LABEL_24:
  __swp(v3, (unsigned int *)(a1 + 88));
  if (v3)
  {
    if (v3[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFE, memory_order_release);
      if (add_explicit <= 2)
      {
        if (add_explicit != 2) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v3, a2);
      }
    }
  }
}

void dispatch_block_cancel(dispatch_block_t block)
{
  if (*((uint64_t (**)())block + 2) != _dispatch_block_special_invoke) {
    dispatch_block_cancel_cold_2();
  }
  if (*((void *)block + 4) != 3512316172) {
    _dispatch_continuation_get_function_symbol_cold_1(*((void *)block + 4));
  }
  atomic_fetch_or_explicit((atomic_uint *volatile)block + 12, 1u, memory_order_relaxed);
}

intptr_t dispatch_block_testcancel(dispatch_block_t block)
{
  if (*((uint64_t (**)())block + 2) != _dispatch_block_special_invoke) {
    dispatch_block_testcancel_cold_2();
  }
  if (*((void *)block + 4) != 3512316172) {
    _dispatch_continuation_get_function_symbol_cold_1(*((void *)block + 4));
  }
  return *((_DWORD *)block + 12) & 1;
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  if (*((uint64_t (**)())block + 2) != _dispatch_block_special_invoke) {
    dispatch_block_wait_cold_4();
  }
  uint64_t v5 = *((void *)block + 4);
  if (v5 != 3512316172) {
    _dispatch_continuation_get_function_symbol_cold_1(v5);
  }
  unsigned int v6 = atomic_fetch_or_explicit((atomic_uint *volatile)block + 12, 2u, memory_order_relaxed);
  if ((v6 & 6) != 0) {
    dispatch_block_wait_cold_2(v6);
  }
  uint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  __swp(v2, (unsigned int *)block + 22);
  if (v2)
  {
    unsigned int v8 = __clz(__rbit32((v7 >> 8) & 0x3FFF));
    if (((v7 >> 8) & 0x3FFF) != 0) {
      uint64_t v9 = v8 + 1;
    }
    else {
      uint64_t v9 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v9, 9);
  }
  int v10 = *((_DWORD *)block + 24);
  if (v10)
  {
    _pthread_qos_override_start_direct();
    BOOL v11 = v2 == 0;
  }
  else
  {
    BOOL v11 = 1;
  }
  int v12 = *((_DWORD *)block + 13);
  if (!v11 || v12 >= 2) {
    dispatch_block_wait_cold_1(v12);
  }
  intptr_t v13 = dispatch_group_wait(*((dispatch_group_t *)block + 10), timeout);
  if (v10) {
    _pthread_qos_override_end_direct();
  }
  unint64_t v14 = (atomic_uint *)((char *)block + 48);
  if (v13) {
    atomic_fetch_and_explicit(v14, 0xFFFFFFFD, memory_order_relaxed);
  }
  else {
    atomic_fetch_or_explicit(v14, 4u, memory_order_relaxed);
  }
  return v13;
}

void dispatch_block_notify(dispatch_block_t block, dispatch_queue_t queue, dispatch_block_t notification_block)
{
  if (*((uint64_t (**)())block + 2) != _dispatch_block_special_invoke) {
    dispatch_block_notify_cold_3((uint64_t)block);
  }
  if (*((void *)block + 4) != 3512316172) {
    _dispatch_continuation_get_function_symbol_cold_1(*((void *)block + 4));
  }
  if (*((int *)block + 13) >= 2) {
    dispatch_block_notify_cold_1(*((_DWORD *)block + 13));
  }
  uint64_t v3 = *((void *)block + 10);

  dispatch_group_notify(v3, queue, notification_block);
}

uint64_t *_dispatch_continuation_init_slow(uint64_t *result, atomic_uint *a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = result[5];
  if (*(uint64_t (**)())(v6 + 16) == _dispatch_block_special_invoke)
  {
    uint64_t v9 = *(void *)(v6 + 32);
    uint64_t v7 = (void *)(v6 + 32);
    uint64_t v8 = v9;
    if (v9 != 3512316172)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1E91199F0 = v8;
      __break(1u);
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7[1];
  uint64_t v11 = *result;
  if (a2[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(a2 + 2, 2u, memory_order_relaxed);
    BOOL v13 = add_explicit == 0;
    if (add_explicit <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_38;
    }
  }
  uint64_t v14 = 0;
  atomic_compare_exchange_strong_explicit(v7 + 7, (unint64_t *)&v14, (unint64_t)a2, memory_order_relaxed, memory_order_relaxed);
  if (v14)
  {
    if (a2[2] != 0x7FFFFFFF)
    {
      int v15 = atomic_fetch_add_explicit(a2 + 2, 0xFFFFFFFE, memory_order_release);
      BOOL v13 = v15 == 2;
      if (v15 <= 2)
      {
LABEL_38:
        if (v13)
        {
          _os_object_dispose(a2, (const char *)a2);
          goto LABEL_9;
        }
LABEL_42:
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        return result;
      }
    }
  }
LABEL_9:
  uint64_t v16 = _dispatch_block_async_invoke_and_release;
  if ((v11 & 4) == 0) {
    uint64_t v16 = _dispatch_block_async_invoke;
  }
  v5[4] = (uint64_t)v16;
  int v17 = v10 | a3;
  if ((v10 & 0x40000000) != 0)
  {
    uint64_t v18 = v7[3];
LABEL_16:
    uint64_t v19 = v18 & 0xFFFFFF;
    if (!v19) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  if ((v17 & 0x40000000) != 0)
  {
    uint64_t v19 = 0;
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if ((unsigned __int16)(v18 >> 8) <= 0x10uLL) {
    goto LABEL_16;
  }
  uint64_t v19 = 4351;
LABEL_17:
  if ((v17 & 0x20) != 0)
  {
    v19 |= 0x10000000uLL;
  }
  else
  {
    int v20 = (a2[21] >> 30) & 1;
    if ((a2[21] & 0xFFF) == 0) {
      int v20 = 1;
    }
    if (!v20) {
      uint64_t v19 = 0;
    }
  }
LABEL_25:
  v5[1] = v19;
  if ((v10 & 0x80000000) == 0)
  {
    if ((v17 & 0x40) != 0) {
      goto LABEL_33;
    }
    uint64_t v21 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (!v21 || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 12), 1u, memory_order_relaxed) > 0) {
      goto LABEL_34;
    }
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  uint64_t v21 = v7[4];
  if ((unint64_t)(v21 + 1) < 2
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 12), 1u, memory_order_relaxed) > 0)
  {
    goto LABEL_34;
  }
  qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
  __break(1u);
LABEL_33:
  uint64_t v21 = 0;
LABEL_34:
  v5[3] = v21;
  *uint64_t v5 = v11 | (2 * (v10 & 1)) | 0x20;
  unsigned int v22 = __clz(__rbit32((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF));
  if (((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF) != 0) {
    return (uint64_t *)(v22 + 1);
  }
  else {
    return 0;
  }
}

void _dispatch_block_async_invoke_and_release(char *a1)
{
}

void _dispatch_block_async_invoke(char *a1)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (void *)StatusReg[22];
  if (v5)
  {
    StatusReg[22] = v5[2];
    *uint64_t v5 = 262;
    v5[4] = work;
    v5[5] = context;
    unint64_t v6 = StatusReg[4] & 0xFFFFFFLL;
    if (v6 >= 0x10FF) {
      unint64_t v6 = 4351;
    }
    uint64_t v7 = StatusReg[28];
    if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
    }
    else
    {
      v5[3] = v7;
      if (v6)
      {
        int isa_high = HIDWORD(queue[10].isa);
        if ((isa_high & 0x40000000) == 0 && (isa_high & 0xFFF) != 0) {
          unint64_t v6 = 0;
        }
      }
      v5[1] = v6;
      (*((void (**)(void))queue->isa + 11))();
    }
  }
  else
  {
    _dispatch_async_f_slow(queue, (uint64_t)context, (uint64_t)work, 0, 6);
  }
}

uint64_t _dispatch_async_f_slow(_DWORD *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = _dispatch_continuation_alloc_from_heap();
  *uint64_t v10 = a5 | 0x100;
  v10[4] = a3;
  v10[5] = a2;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v12 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v12 >= 0x10FF) {
    unint64_t v12 = 4351;
  }
  if ((a4 & 0x40) != 0) {
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(StatusReg + 224);
  if (v13 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_7:
    uint64_t v13 = 0;
  }
  v10[3] = v13;
  if (v12)
  {
    if ((a4 & 0x20) != 0)
    {
      v12 |= 0x10000000uLL;
    }
    else
    {
      int v14 = a1[21];
      if ((v14 & 0x40000000) == 0 && (v14 & 0xFFF) != 0)
      {
        uint64_t v15 = 0;
        unint64_t v12 = 0;
        goto LABEL_15;
      }
    }
    uint64_t v15 = __clz(__rbit32(v12 >> 8)) + 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
LABEL_15:
  v10[1] = v12;
  uint64_t v16 = *(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)a1 + 88);

  return v16(a1, v10, v15);
}

uint64_t _dispatch_barrier_async_detached_f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    uint64_t v7 = _dispatch_continuation_alloc_from_heap();
  }
  v7[4] = a3;
  v7[5] = a2;
  v7[3] = -1;
  *(_OWORD *)uint64_t v7 = xmmword_18A97E250;
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 88);

  return v8(a1);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (uint64_t *)StatusReg[22];
  if (v5) {
    StatusReg[22] = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  unint64_t v6 = _dispatch_Block_copy(block);
  uint64_t v7 = (uint64_t (*)())*((void *)block + 2);
  if (!v7)
  {
    if (_dispatch_block_special_invoke) {
      goto LABEL_5;
    }
LABEL_19:
    *uint64_t v5 = 278;
    v5[5] = (uint64_t)v6;
    inited = _dispatch_continuation_init_slow(v5, (atomic_uint *)queue, 0);
    goto LABEL_15;
  }
  if (_dispatch_block_special_invoke == v7) {
    goto LABEL_19;
  }
LABEL_5:
  *uint64_t v5 = 278;
  v5[4] = (uint64_t)_dispatch_call_block_and_release;
  v5[5] = (uint64_t)v6;
  unint64_t v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF) {
    unint64_t v8 = 4351;
  }
  uint64_t v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  v5[3] = v9;
  if (v8)
  {
    int isa_high = HIDWORD(queue[10].isa);
    if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
    {
      inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
    }
    else
    {
      inited = 0;
      unint64_t v8 = 0;
    }
  }
  else
  {
    inited = 0;
  }
  v5[1] = v8;
LABEL_15:
  unint64_t v12 = (void (*)(dispatch_queue_t, uint64_t *, uint64_t *))*((void *)queue->isa + 11);

  v12(queue, v5, inited);
}

void dispatch_channel_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (void *)StatusReg[22];
  if (v5)
  {
    StatusReg[22] = v5[2];
    *uint64_t v5 = 260;
    v5[4] = work;
    v5[5] = context;
    unint64_t v6 = StatusReg[4] & 0xFFFFFFLL;
    if (v6 >= 0x10FF) {
      unint64_t v6 = 4351;
    }
    uint64_t v7 = StatusReg[28];
    if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
    }
    else
    {
      v5[3] = v7;
      if (v6)
      {
        int isa_high = HIDWORD(queue[10].isa);
        if ((isa_high & 0x40000000) == 0 && (isa_high & 0xFFF) != 0) {
          unint64_t v6 = 0;
        }
      }
      v5[1] = v6;
      (*((void (**)(void))queue->isa + 11))();
    }
  }
  else
  {
    _dispatch_async_f_slow(queue, (uint64_t)context, (uint64_t)work, 0, 4);
  }
}

_DWORD *dispatch_async_enforce_qos_class_f(_DWORD *result, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (void *)StatusReg[22];
  if (!v5) {
    return (_DWORD *)_dispatch_async_f_slow(result, a2, a3, 32, 4);
  }
  StatusReg[22] = v5[2];
  *uint64_t v5 = 260;
  v5[4] = a3;
  v5[5] = a2;
  unint64_t v6 = StatusReg[4] & 0xFFFFFFLL;
  if (v6 >= 0x10FF) {
    unint64_t v6 = 4351;
  }
  uint64_t v7 = StatusReg[28];
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v5[3] = v7;
    if (v6) {
      uint64_t v8 = v6 | 0x10000000;
    }
    else {
      uint64_t v8 = 0;
    }
    v5[1] = v8;
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  return result;
}

void dispatch_channel_async(dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (uint64_t *)StatusReg[22];
  if (v5) {
    StatusReg[22] = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  unint64_t v6 = _dispatch_Block_copy(block);
  uint64_t v7 = (uint64_t (*)())*((void *)block + 2);
  if (!v7)
  {
    if (_dispatch_block_special_invoke) {
      goto LABEL_5;
    }
LABEL_19:
    *uint64_t v5 = 276;
    v5[5] = (uint64_t)v6;
    inited = _dispatch_continuation_init_slow(v5, (atomic_uint *)queue, 0);
    goto LABEL_15;
  }
  if (_dispatch_block_special_invoke == v7) {
    goto LABEL_19;
  }
LABEL_5:
  *uint64_t v5 = 276;
  v5[4] = (uint64_t)_dispatch_call_block_and_release;
  v5[5] = (uint64_t)v6;
  unint64_t v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF) {
    unint64_t v8 = 4351;
  }
  uint64_t v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  v5[3] = v9;
  if (v8)
  {
    int isa_high = HIDWORD(queue[10].isa);
    if ((isa_high & 0x40000000) != 0 || (isa_high & 0xFFF) == 0)
    {
      inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
    }
    else
    {
      inited = 0;
      unint64_t v8 = 0;
    }
  }
  else
  {
    inited = 0;
  }
  v5[1] = v8;
LABEL_15:
  unint64_t v12 = (void (*)(dispatch_queue_t, uint64_t *, uint64_t *))*((void *)queue->isa + 11);

  v12(queue, v5, inited);
}

atomic_ullong *_dispatch_barrier_trysync_or_async_f(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(void), char a4)
{
  uint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  unint64_t v5 = (unint64_t)*((unsigned __int16 *)a1 + 40) << 41;
  unint64_t v6 = v4 & 0xFFFFFFFC | ((unint64_t)(a4 & 1) << 58);
  atomic_ullong v7 = a1[7];
  do
  {
    if (v7 != (v7 & 0x3000000000) - v5 + 0x20000000000000) {
      return (atomic_ullong *)_dispatch_barrier_async_detached_f((uint64_t)a1, a2, (uint64_t)a3);
    }
    atomic_ullong v8 = v7;
    atomic_compare_exchange_strong_explicit(a1 + 7, (unint64_t *)&v8, v7 & 0x3000000000 | v6 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
    BOOL v9 = v8 == v7;
    atomic_ullong v7 = v8;
  }
  while (!v9);
  if ((a4 & 1) == 0
    || *((_DWORD *)a1 + 2) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, 2u, memory_order_relaxed) > 0)
  {
    return (atomic_ullong *)_dispatch_barrier_trysync_or_async_f_complete(a1, a2, a3, a4);
  }
  qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return a1;
}

uint64_t _dispatch_barrier_trysync_or_async_f_complete(atomic_ullong *a1, uint64_t a2, uint64_t (*a3)(void), char a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v9 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v9;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v9;
  uint64_t v7 = 4;
  if (a4)
  {
    if (atomic_fetch_add_explicit(a1 + 7, 0xFC00000000000000, memory_order_relaxed) >> 55 == 8) {
      uint64_t v7 = 5;
    }
    else {
      uint64_t v7 = 4;
    }
  }
  return (*(uint64_t (**)(atomic_ullong *, void, uint64_t))(*a1 + 80))(a1, 0, v7);
}

void dispatch_barrier_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (*((unsigned char *)queue->isa + 40) != 17
    || (uint64_t v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        int v4 = (int)queue[10].isa,
        (v4 & 0x1000000) != 0)
    && (int v4 = (int)queue[10].isa, (v4 & 0x40000) != 0))
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
LABEL_12:
    _dispatch_sync_recurse((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work, 2uLL);
  }
  else
  {
    unint64_t v5 = (unint64_t)(unsigned __int16)v4 << 41;
    uint64_t v6 = v3 & 0xFFFFFFFC;
    Class isa = queue[7].isa;
    do
    {
      if (isa != (Class)(((unint64_t)isa & 0x3000000000) - v5 + 0x20000000000000))
      {
        _dispatch_sync_f_slow((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work, 2uLL, (atomic_ullong *)queue, 2);
        return;
      }
      atomic_ullong v8 = isa;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&queue[7], (unint64_t *)&v8, v6 | (unint64_t)isa & 0x3000000000 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      BOOL v9 = v8 == isa;
      Class isa = v8;
    }
    while (!v9);
    if (*((void *)queue[3].isa + 3)) {
      goto LABEL_12;
    }
    _dispatch_lane_barrier_sync_invoke_and_complete((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work);
  }
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (LOWORD(queue[10].isa) == 1)
  {
    _dispatch_barrier_sync_f((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work, 0);
  }
  else if (*((unsigned char *)queue->isa + 40) != 17 {
         || ((uint64_t)queue[10].isa & 0x1000000) != 0 && ((uint64_t)queue[10].isa & 0x40000) != 0)
  }
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
LABEL_15:
    _dispatch_sync_recurse((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work, 0);
  }
  else
  {
    if (!queue[6].isa)
    {
      Class isa = queue[7].isa;
      while (((unint64_t)isa & 0xFFC0018000000000) == 0)
      {
        int v4 = isa;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&queue[7], (unint64_t *)&v4, (unint64_t)isa + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        BOOL v5 = v4 == isa;
        Class isa = v4;
        if (v5)
        {
          if (*((void *)queue[3].isa + 3)) {
            goto LABEL_15;
          }
          _dispatch_sync_invoke_and_complete((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work);
          return;
        }
      }
    }
    _dispatch_sync_f_slow((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work, 0, (atomic_ullong *)queue, 0);
  }
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  uint64_t v2 = (uint64_t (*)())*((void *)block + 2);
  if (v2)
  {
    uint64_t v3 = (uint64_t (*)(void))*((void *)block + 2);
    if (_dispatch_block_special_invoke == v2) {
      goto LABEL_7;
    }
LABEL_6:
    _dispatch_barrier_sync_f((uint64_t)queue, (uint64_t)block, v3, 18);
    return;
  }
  if (_dispatch_block_special_invoke)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
LABEL_7:
  _dispatch_sync_block_with_privdata((atomic_uint *)queue, (uint64_t)block, 18);
}

void _dispatch_sync_block_with_privdata(atomic_uint *a1, uint64_t a2, uint64_t a3)
{
  if (*(uint64_t (**)())(a2 + 16) == _dispatch_block_special_invoke)
  {
    uint64_t v6 = (void *)(a2 + 32);
    uint64_t add_explicit = *(void *)(a2 + 32);
    if (add_explicit != 3512316172)
    {
LABEL_58:
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1E91199F0 = add_explicit;
      __break(1u);
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  unint64_t v8 = 0;
  uint64_t v9 = v6[1];
  if (v9) {
    uint64_t v10 = 34;
  }
  else {
    uint64_t v10 = 32;
  }
  if ((v9 & 0x40000000) != 0)
  {
    uint64_t v11 = 0;
    if ((v6[1] & 0x30) != 0x10)
    {
      uint64_t v11 = v6[3];
      unint64_t v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      BOOL v13 = v12 != 0;
      BOOL v14 = v12 < (v11 & 0xFFFFFFuLL);
      unint64_t v8 = v13 && v14 ? v12 : 0;
      if (!v13 || !v14) {
        uint64_t v11 = 0;
      }
    }
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if ((v9 & 0x80000000) == 0)
    {
LABEL_15:
      uint64_t v15 = -1;
      goto LABEL_18;
    }
  }
  uint64_t v15 = v6[4];
LABEL_18:
  unint64_t v16 = v11 & 0xFFFFFFFF02FFFFFFLL;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 32);
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_49:
      _dispatch_set_priority_and_voucher_slow(v16, v15, 0);
      uint64_t v15 = v23;
      goto LABEL_24;
    }
    unint64_t v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_20;
  }
  if (v16) {
    goto LABEL_49;
  }
LABEL_20:
  if (v15 == -1) {
    goto LABEL_24;
  }
  if (*(void *)(StatusReg + 224) != v15)
  {
    unint64_t v16 = 0;
    goto LABEL_49;
  }
  if (v15)
  {
    uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 12), 1u, memory_order_relaxed);
    if ((int)add_explicit <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_57:
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      goto LABEL_58;
    }
  }
LABEL_24:
  if (a1[2] != 0x7FFFFFFF)
  {
    uint64_t v19 = atomic_fetch_add_explicit(a1 + 2, 2u, memory_order_relaxed);
    if ((int)v19 <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_44:
      if (v8) {
        goto LABEL_51;
      }
      unint64_t v8 = v19 & 0xFFFFFFFFFEFFFFFFLL;
      goto LABEL_46;
    }
  }
  uint64_t v20 = 0;
  atomic_compare_exchange_strong_explicit(v6 + 7, (unint64_t *)&v20, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
  if (v20)
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      int v21 = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
      if (v21 <= 2)
      {
        if (v21 != 2)
        {
LABEL_59:
          qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
          return;
        }
        _os_object_dispose(a1, (const char *)a2);
      }
    }
  }
  unint64_t v22 = v10 | a3;
  if (((v10 | a3) & 2) != 0) {
    _dispatch_barrier_sync_f((uint64_t)a1, a2, (uint64_t (*)(void))_dispatch_block_sync_invoke, v22);
  }
  else {
    _dispatch_sync_f((uint64_t)a1, a2, (uint64_t (*)(void))_dispatch_block_sync_invoke, v22);
  }
  uint64_t v19 = *(void *)(StatusReg + 32);
  if ((v19 & 0x1000000) != 0) {
    goto LABEL_44;
  }
  if (v8 != (v19 & 0xFFFFFFFF77FFFFFFLL))
  {
LABEL_46:
    if (v8) {
      goto LABEL_51;
    }
  }
  if (v15 == -1) {
    return;
  }
  if (*(void *)(StatusReg + 224) == v15)
  {
    if (!v15) {
      return;
    }
    uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if ((int)add_explicit > 1) {
      return;
    }
    goto LABEL_57;
  }
  unint64_t v8 = 0;
LABEL_51:

  _dispatch_set_priority_and_voucher_slow(v8, v15, 6);
}

double _dispatch_barrier_sync_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (*(unsigned char *)(*(void *)a1 + 40) != 17
    || (uint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        int v5 = *(_DWORD *)(a1 + 80),
        (v5 & 0x1000000) != 0)
    && (int v5 = *(_DWORD *)(a1 + 80), (v5 & 0x40000) != 0))
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, a4 | 2);
  }
  else
  {
    unint64_t v6 = (unint64_t)(unsigned __int16)v5 << 41;
    uint64_t v7 = v4 & 0xFFFFFFFC;
    uint64_t v8 = *(void *)(a1 + 56);
    do
    {
      if (v8 != (v8 & 0x3000000000) - v6 + 0x20000000000000) {
        return _dispatch_sync_f_slow(a1, a2, a3, 2uLL, (atomic_ullong *)a1, a4 | 2);
      }
      uint64_t v9 = v8;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v9, v7 | v8 & 0x3000000000 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      BOOL v10 = v9 == v8;
      uint64_t v8 = v9;
    }
    while (!v10);
    if (*(void *)(*(void *)(a1 + 24) + 24)) {
      return _dispatch_sync_recurse(a1, a2, a3, a4 | 2);
    }
    _dispatch_lane_barrier_sync_invoke_and_complete(a1, a2, a3);
  }
  return result;
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  uint64_t v2 = (uint64_t (*)())*((void *)block + 2);
  if (v2)
  {
    uint64_t v3 = (uint64_t (*)(void))*((void *)block + 2);
    if (_dispatch_block_special_invoke == v2) {
      goto LABEL_7;
    }
LABEL_6:
    _dispatch_sync_f((uint64_t)queue, (uint64_t)block, v3, 0x10uLL);
    return;
  }
  if (_dispatch_block_special_invoke)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
LABEL_7:
  _dispatch_sync_block_with_privdata((atomic_uint *)queue, (uint64_t)block, 16);
}

double _dispatch_sync_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  if (*(_WORD *)(a1 + 80) == 1) {
    return _dispatch_barrier_sync_f(a1, a2, a3, a4);
  }
  if (*(unsigned char *)(*(void *)a1 + 40) != 17
    || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x40000) != 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, a4);
  }
  else
  {
    if (!*(void *)(a1 + 48))
    {
      uint64_t v5 = *(void *)(a1 + 56);
      while ((v5 & 0xFFC0018000000000) == 0)
      {
        uint64_t v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v6, v5 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        BOOL v7 = v6 == v5;
        uint64_t v5 = v6;
        if (v7)
        {
          if (*(void *)(*(void *)(a1 + 24) + 24)) {
            return _dispatch_sync_recurse(a1, a2, a3, a4);
          }
          _dispatch_sync_invoke_and_complete(a1, a2, a3);
          return result;
        }
      }
    }
    return _dispatch_sync_f_slow(a1, a2, a3, 0, (atomic_ullong *)a1, a4);
  }
}

void dispatch_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (queue[3].isa)
  {
    if (LOWORD(queue[10].isa) == 1) {
      unint64_t v3 = 130;
    }
    else {
      unint64_t v3 = 128;
    }
    _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)context, (uint64_t)work, v3);
  }
  else
  {
    _dispatch_sync_function_invoke((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work);
  }
}

double _dispatch_sync_function_invoke(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v5 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v5;
  _dispatch_client_callout(a2, a3);
  double result = *(double *)&v5;
  *(_OWORD *)(StatusReg + 160) = v5;
  return result;
}

void _dispatch_async_and_wait_f(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(void *)(StatusReg + 32);
  int v6 = *(_DWORD *)(StatusReg + 24);
  uint64_t v10 = 0;
  v7[0] = a4;
  v7[1] = v5 | 0x10000000;
  v7[2] = 0;
  v7[3] = *(void *)(StatusReg + 224);
  v7[4] = _dispatch_async_and_wait_invoke;
  v7[5] = v7;
  v7[6] = 0;
  v7[7] = a1;
  v7[8] = a3;
  v7[9] = a2;
  v7[10] = 0;
  v7[11] = 0;
  int v8 = 0;
  int v9 = v6;
  _dispatch_async_and_wait_recurse(a1, (uint64_t)v7, v6, a4);
}

void dispatch_barrier_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (queue[3].isa) {
    _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)context, (uint64_t)work, 0x82uLL);
  }
  else {
    _dispatch_sync_function_invoke((uint64_t)queue, (uint64_t)context, (uint64_t (*)(void))work);
  }
}

void dispatch_barrier_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  if (!queue[3].isa)
  {
    dispatch_barrier_sync(queue, block);
    return;
  }
  uint64_t v2 = (uint64_t (*)())*((void *)block + 2);
  if (v2)
  {
    uint64_t v3 = *((void *)block + 2);
    if (_dispatch_block_special_invoke == v2) {
      goto LABEL_9;
    }
LABEL_7:
    _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)block, v3, 0x92uLL);
    return;
  }
  if (_dispatch_block_special_invoke)
  {
    uint64_t v3 = 0;
    goto LABEL_7;
  }
LABEL_9:
  _dispatch_async_and_wait_block_with_privdata((atomic_uint *)queue, (uint64_t)block, 146);
}

void _dispatch_async_and_wait_block_with_privdata(atomic_uint *a1, uint64_t a2, uint64_t a3)
{
  if (*(uint64_t (**)())(a2 + 16) == _dispatch_block_special_invoke)
  {
    int v6 = (void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 32);
    if (v7 != 3512316172)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1E91199F0 = v7;
      __break(1u);
      goto LABEL_27;
    }
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v8 = v6[1];
  if ((v8 & 0x40000000) == 0
    || (v6[1] & 0x30) == 0x10
    || ((uint64_t v9 = v6[3], (v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL) != 0)
      ? (BOOL v11 = v10 >= (v9 & 0xFFFFFFuLL))
      : (BOOL v11 = 1),
        v11))
  {
    uint64_t v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  }
  unint64_t v12 = (uint64_t *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if ((int)v8 < 0) {
    unint64_t v12 = v6 + 4;
  }
  uint64_t v13 = *v12;
  if (a1[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(a1 + 2, 2u, memory_order_relaxed);
    BOOL v15 = add_explicit == 0;
    if (add_explicit <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_23;
    }
  }
  uint64_t v16 = 0;
  atomic_compare_exchange_strong_explicit(v6 + 7, (unint64_t *)&v16, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
  if (v16)
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      int v17 = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
      BOOL v15 = v17 == 2;
      if (v17 <= 2)
      {
LABEL_23:
        if (v15)
        {
          _os_object_dispose(a1, (const char *)a2);
          goto LABEL_19;
        }
LABEL_27:
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        return;
      }
    }
  }
LABEL_19:
  uint64_t v18 = 34;
  if ((v8 & 1) == 0) {
    uint64_t v18 = 32;
  }
  int v19 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v20[0] = v18 | a3;
  v20[1] = v9 | 0x10000000;
  v20[2] = 0;
  v20[3] = v13;
  v20[4] = _dispatch_async_and_wait_invoke;
  v20[5] = v20;
  v20[6] = 0;
  v20[7] = a1;
  v20[8] = _dispatch_block_sync_invoke;
  v20[9] = a2;
  v20[10] = 0;
  v20[11] = 0;
  int v21 = 0;
  int v22 = v19;
  uint64_t v23 = 0;
  _dispatch_async_and_wait_recurse((uint64_t)a1, (uint64_t)v20, v19, v18 | a3);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  if (queue[3].isa)
  {
    if (LOWORD(queue[10].isa) == 1) {
      unint64_t v2 = 146;
    }
    else {
      unint64_t v2 = 144;
    }
    uint64_t v3 = (uint64_t (*)())*((void *)block + 2);
    if (v3)
    {
      uint64_t v4 = *((void *)block + 2);
      if (_dispatch_block_special_invoke != v3)
      {
LABEL_7:
        _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)block, v4, v2);
        return;
      }
    }
    else if (_dispatch_block_special_invoke)
    {
      uint64_t v4 = 0;
      goto LABEL_7;
    }
    _dispatch_async_and_wait_block_with_privdata((atomic_uint *)queue, (uint64_t)block, v2);
  }
  else
  {
    dispatch_sync(queue, block);
  }
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  if (key)
  {
    Class isa = queue[11].isa;
    uint64_t v9 = *((void *)queue->isa + 5);
    LODWORD(v10) = v9;
    if (v9 != 17) {
      goto LABEL_8;
    }
    uint64_t v10 = v9 & 0x20000;
    if (v9 != 394769 && v10 != 0)
    {
      do
      {
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue doesn't support dispatch_queue_set_specific";
        __break(1u);
LABEL_8:
        ;
      }
      while (v10 != 18);
    }
    if (!context || isa)
    {
      if (!isa) {
        return;
      }
    }
    else
    {
      _dispatch_queue_init_specific((uint64_t)queue);
      Class isa = queue[11].isa;
    }
    int v12 = 0;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)isa, (unsigned int *)&v12, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v12) {
      _dispatch_unfair_lock_lock_slow((uint64_t)isa);
    }
    BOOL v14 = (const void **)*((void *)isa + 1);
    if (v14)
    {
      while (*v14 != key)
      {
        BOOL v14 = (const void **)v14[3];
        if (!v14) {
          goto LABEL_18;
        }
      }
      uint64_t v17 = (uint64_t)v14[2];
      if (v17) {
        _dispatch_barrier_async_detached_f((uint64_t)&unk_1EB1CE780, (uint64_t)v14[1], v17);
      }
      if (context)
      {
        v14[1] = context;
        v14[2] = destructor;
      }
      else
      {
        uint64_t v18 = v14[3];
        int v19 = v14[4];
        if (v18)
        {
          v18[4] = v19;
          int v19 = v14[4];
        }
        else
        {
          *((void *)isa + 2) = v19;
        }
        *int v19 = v18;
        free(v14);
      }
    }
    else
    {
LABEL_18:
      if (context)
      {
        BOOL v15 = _dispatch_calloc(1uLL, 0x28uLL);
        *BOOL v15 = key;
        v15[1] = context;
        v15[2] = destructor;
        v15[3] = 0;
        uint64_t v16 = (void *)*((void *)isa + 2);
        v15[4] = v16;
        void *v16 = v15;
        *((void *)isa + 2) = v15 + 3;
      }
    }
    unsigned int v20 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    unsigned int v21 = atomic_exchange_explicit((atomic_uint *volatile)isa, 0, memory_order_release);
    if (v21 != v20)
    {
      _dispatch_unfair_lock_unlock_slow((uint64_t)isa, v21);
    }
  }
}

void _dispatch_queue_init_specific(uint64_t a1)
{
  unint64_t v2 = _dispatch_calloc(1uLL, 0x18uLL);
  uint64_t v3 = 0;
  v2[1] = 0;
  int v2[2] = v2 + 1;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 88), (unint64_t *)&v3, (unint64_t)v2, memory_order_release, memory_order_relaxed);
  if (v3)
  {
    _dispatch_queue_specific_head_dispose(v2);
  }
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  unint64_t v2 = (void *)key;
  if (key)
  {
    Class isa = queue[11].isa;
    uint64_t v4 = *((void *)queue->isa + 5);
    uint64_t v5 = v4;
    BOOL v7 = (v4 & 0x20000) == 0 || v4 == 394769;
    if (v5 != 17) {
      BOOL v7 = v5 == 18;
    }
    if (!v7 || isa == 0)
    {
      return 0;
    }
    else
    {
      int v9 = 0;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)isa, (unsigned int *)&v9, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
      if (v9) {
        _dispatch_unfair_lock_lock_slow((uint64_t)isa);
      }
      BOOL v11 = (void **)*((void *)isa + 1);
      if (v11)
      {
        while (*v11 != v2)
        {
          BOOL v11 = (void **)v11[3];
          if (!v11) {
            goto LABEL_19;
          }
        }
        unint64_t v2 = v11[1];
      }
      else
      {
LABEL_19:
        unint64_t v2 = 0;
      }
      unsigned int v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      unsigned int v13 = atomic_exchange_explicit((atomic_uint *volatile)isa, 0, memory_order_release);
      if (v13 != v12) {
        _dispatch_unfair_lock_unlock_slow((uint64_t)isa, v13);
      }
    }
  }
  return v2;
}

void *__cdecl dispatch_get_specific(const void *key)
{
  uint64_t v1 = 0;
  if (key)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    for (unsigned int i = *(void **)(StatusReg + 160); i; unsigned int i = (void *)i[3])
    {
      uint64_t v5 = i[11];
      uint64_t v6 = *(void *)(*i + 40);
      uint64_t v7 = v6;
      BOOL v9 = (v6 & 0x20000) == 0 || v6 == 394769;
      if (v7 != 17) {
        BOOL v9 = v7 == 18;
      }
      if (!v9 || v5 == 0)
      {
        uint64_t v1 = 0;
      }
      else
      {
        int v11 = 0;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v5, (unsigned int *)&v11, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
        if (v11) {
          _dispatch_unfair_lock_lock_slow(v5);
        }
        uint64_t v12 = *(void *)(v5 + 8);
        if (v12)
        {
          while (*(const void **)v12 != key)
          {
            uint64_t v12 = *(void *)(v12 + 24);
            if (!v12) {
              goto LABEL_20;
            }
          }
          uint64_t v1 = *(void **)(v12 + 8);
        }
        else
        {
LABEL_20:
          uint64_t v1 = 0;
        }
        unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        unsigned int v14 = atomic_exchange_explicit((atomic_uint *volatile)v5, 0, memory_order_release);
        if (v14 != v13) {
          _dispatch_unfair_lock_unlock_slow(v5, v14);
        }
      }
      if (v1) {
        break;
      }
    }
  }
  return v1;
}

uint64_t dispatch_queue_set_label_nocopy(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    if ((*(_DWORD *)(result + 80) & 0x200000) != 0) {
      dispatch_queue_set_label_nocopy_cold_1(result);
    }
    *(void *)(result + 72) = a2;
  }
  return result;
}

uint64_t _dispatch_queue_compute_priority_and_wlh(uint64_t a1, uint64_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 84);
  int v3 = (unsigned __int16)v2 >> 12;
  unint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = -4;
  if ((*(void *)(a1 + 56) & 0x2000000000) != 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = *(void *)(*(void *)v4 + 40);
  if ((v6 & 0x10000) == 0)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
    while ((__objc2_class **)v4 != &_dispatch_mgr_q)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x40000) != 0 && (*(_DWORD *)(v4 + 80) & 0x1000000) == 0)
      {
        if (a2) {
          *a2 = -4;
        }
        return *(unsigned int *)(v4 + 84);
      }
      if (*(void *)(v4 + 56) >> 55) {
        goto LABEL_43;
      }
      if ((*(void *)(v4 + 56) & 0x2000000000) != 0)
      {
        uint64_t v5 = v4;
        if (v6 == 18)
        {
          atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
          uint64_t v5 = v4;
        }
      }
      else if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
LABEL_43:
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace();
        }
        uint64_t result = 0;
        if (a2) {
          *a2 = 0;
        }
        return result;
      }
      int v16 = *(_DWORD *)(v4 + 84);
      unint64_t v4 = *(void *)(v4 + 24);
      if ((v16 & 0x20000000) == 0)
      {
        if (!v3) {
          int v3 = (unsigned __int16)v16 >> 12;
        }
        unsigned int v17 = v16 & 0xFFF;
        if (v7 <= v17) {
          unsigned int v7 = v17;
        }
        uint64_t v6 = *(void *)(*(void *)v4 + 40);
        if ((v6 & 0x10000) == 0) {
          continue;
        }
      }
      goto LABEL_5;
    }
    if (a2) {
      *a2 = -4;
    }
    return 0x2000000;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
LABEL_5:
  BOOL v8 = v4 < (unint64_t)&_dispatch_root_queues || v4 >= (unint64_t)&_dispatch_queue_serial_numbers;
  if (v8 && *(void *)(v4 + 64) != 22)
  {
    if (a2) {
      *a2 = -4;
    }
    return 0x2000000;
  }
  int v9 = *(_DWORD *)(v4 + 84);
  unsigned int v10 = (unsigned __int16)v9 >> 12;
  if (v3) {
    unsigned int v10 = v3;
  }
  unsigned int v11 = *(_DWORD *)(v4 + 84) & 0xFFF;
  if (v7 > v11) {
    unsigned int v11 = v7;
  }
  uint64_t result = v11 | v9 & 0x88000000;
  if ((v2 & 0x40000000) != 0 || (v2 & 0xFFF) == 0)
  {
    unsigned int v13 = result | v2 & 0x40000000;
    BOOL v14 = v10 > ((v11 >> 8) & 0xF);
    unsigned int v15 = v13 | ((v10 & 0xF) << 12) | 0x4000000;
    if (v14) {
      uint64_t result = v15;
    }
    else {
      uint64_t result = v13;
    }
  }
  if (a2) {
    *a2 = v5;
  }
  return result;
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  if ((*((void *)object->isa + 5) & 0xF0) != 0x10) {
    dispatch_set_qos_class_floor_cold_2();
  }
  if (*((void *)object->isa + 5) == 18)
  {
    dispatch_workloop_set_qos_class_floor((uint64_t)object, qos_class, relative_priority, 0);
  }
  else
  {
    HIDWORD(v4) = qos_class - 5;
    LODWORD(v4) = qos_class - 5;
    unsigned int v3 = v4 >> 2;
    if (v3 <= 7 && ((0xBBu >> v3) & 1) != 0) {
      int v5 = (relative_priority - 1) | dword_18A97E284[v3] | 0x40000000;
    }
    else {
      int v5 = 0;
    }
    HIDWORD(object[10].isa) = v5 | HIDWORD(object[10].isa) & 0xBFFFF000;
    uint64_t isa = (uint64_t)object[7].isa;
    if ((~isa & 0x180000000000000) != 0) {
      dispatch_set_qos_class_floor_cold_1(isa);
    }
  }
}

_DWORD *dispatch_workloop_set_qos_class_floor(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if ((~v5 & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(v5);
  }
  uint64_t result = *(_DWORD **)(a1 + 200);
  if (!result)
  {
    uint64_t result = _dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = result;
  }
  HIDWORD(v11) = a2 - 5;
  LODWORD(v11) = a2 - 5;
  unsigned int v10 = v11 >> 2;
  if (v10 <= 7 && ((0xBBu >> v10) & 1) != 0)
  {
    result[1] = dword_18A97E284[v10] | (a3 - 1);
    unsigned int v12 = *result | 8;
    if ((a4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_9:
    result[4] = 2;
    unsigned int v13 = v12 | 2;
    goto LABEL_10;
  }
  result[1] = 0;
  unsigned int v12 = *result & 0xFFFFFFF7;
  if (a4) {
    goto LABEL_9;
  }
LABEL_7:
  unsigned int v13 = v12 & 0xFFFFFFFD;
LABEL_10:
  *uint64_t result = v13;
  return result;
}

uint64_t dispatch_set_qos_class(uint64_t a1, int a2, char a3)
{
  if ((*(void *)(*(void *)a1 + 40) & 0xF0) != 0x10
    || *(void *)(*(void *)a1 + 40) == 18)
  {
    dispatch_set_qos_class_cold_1();
  }
  HIDWORD(v5) = a2 - 5;
  LODWORD(v5) = a2 - 5;
  unsigned int v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0) {
    int v6 = dword_18A97E284[v4] | (a3 - 1);
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xBFFFF000 | v6;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

uint64_t dispatch_set_qos_class_fallback(uint64_t a1, int a2)
{
  if ((*(void *)(*(void *)a1 + 40) & 0xF0) != 0x10) {
    dispatch_set_qos_class_fallback_cold_2();
  }
  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  unsigned int v2 = v3 >> 2;
  if (v2 > 7) {
    int v4 = 0;
  }
  else {
    int v4 = dword_18A97E2A4[v2];
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFBFF0FFF | v4;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)_dispatch_lane_create_with_target(label, (uint64_t *)attr, (__objc2_class **)target, 0);
}

uint64_t _dispatch_lane_create_with_target(const char *a1, uint64_t *a2, __objc2_class **a3, unsigned __int8 a4)
{
  uint64_t result = (uint64_t)_dispatch_queue_attr_to_info(a2);
  int v8 = result;
  int v9 = result;
  unsigned int v10 = WORD1(result) & 3;
  if (a3 && v10)
  {
    if (!a3[3]) {
      goto LABEL_6;
    }
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify both overcommit and a non-global target queue";
    qword_1E91199F0 = (uint64_t)a3;
    __break(1u);
  }
  if (!a3)
  {
    if ((result & 0x100000) != 0) {
      int v12 = 2;
    }
    else {
      int v12 = 1;
    }
    if (!v10) {
      unsigned int v10 = v12;
    }
    goto LABEL_28;
  }
LABEL_6:
  if ((*a3)[1].isa == (__objc2_class *)328465)
  {
    if (v10)
    {
      if (!(_BYTE)result)
      {
LABEL_29:
        LODWORD(add_explicit) = (*((_DWORD *)a3 + 21) >> 8) & 0xF;
        goto LABEL_30;
      }
    }
    else
    {
      if (*((int *)a3 + 21) < 0) {
        unsigned int v10 = 1;
      }
      else {
        unsigned int v10 = 2;
      }
      if (!(_BYTE)result) {
        goto LABEL_29;
      }
    }
LABEL_28:
    LODWORD(add_explicit) = result;
LABEL_30:
    if (add_explicit) {
      uint64_t add_explicit = add_explicit;
    }
    else {
      uint64_t add_explicit = 4;
    }
    if ((add_explicit - 7) <= 0xFFFFFFF9)
    {
LABEL_70:
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
      qword_1E91199F0 = add_explicit;
      __break(1u);
      goto LABEL_71;
    }
    int v14 = 3 * add_explicit;
    if (v10 == 1) {
      ++v14;
    }
    a3 = &_dispatch_root_queues + 16 * (unint64_t)(v14 - 3);
LABEL_38:
    if ((((result & 0x2C0000) == 0) & a4) != 0) {
      int v15 = 0x400000;
    }
    else {
      int v15 = 0;
    }
    if ((result & 0x100000) != 0) {
      int v16 = OS_dispatch_queue_concurrent;
    }
    else {
      int v16 = OS_dispatch_queue_serial;
    }
    unsigned int v17 = (result >> 18) & 3;
    if (v17 == 1)
    {
      v15 |= 0x10000u;
      if (a1)
      {
LABEL_48:
        uint64_t v18 = _dispatch_strdup_if_mutable(a1);
        if (v18 != a1) {
          v15 |= 0x200000u;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (v17 == 2) {
        v15 |= 0x20000u;
      }
      if (a1) {
        goto LABEL_48;
      }
    }
    uint64_t v18 = 0;
LABEL_52:
    uint64_t result = _dispatch_object_alloc(v16, 120);
    uint64_t v19 = result;
    if ((v8 & 0x100000) != 0) {
      uint64_t v20 = 4094;
    }
    else {
      uint64_t v20 = 1;
    }
    uint64_t v21 = 0x180000000000000;
    if ((v8 & 0x200000) != 0)
    {
      *(_DWORD *)(result + 8) += 2;
      if (*(unsigned char *)(*(void *)result + 40) == 19) {
        ++*(_DWORD *)(result + 8);
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    *(void *)(result + 16) = -1985229329;
    *(_DWORD *)(result + 80) = v15 | v20;
    *(void *)(result + 56) = v21 - (v20 << 41) + 0x20000000000000;
    *(void *)(result + 64) = atomic_fetch_add_explicit(&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
    *(void *)(result + 72) = v18;
    if (v9) {
      int v22 = (BYTE1(v8) - 1) | ((v9 & 0xF) << 8);
    }
    else {
      int v22 = 0;
    }
    if (v10 == 1) {
      v22 |= 0x80000000;
    }
    *(_DWORD *)(result + 84) = v22;
    if ((v8 & 0x200000) == 0)
    {
      _dispatch_queue_priority_inherit_from_target(result, (unint64_t)a3);
      uint64_t result = _dispatch_lane_inherit_wlh_from_target(v19, (unint64_t)a3);
    }
    if (*((_DWORD *)a3 + 2) == 0x7FFFFFFF
      || (uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)a3 + 2, 1u, memory_order_relaxed),
          (int)add_explicit > 0))
    {
      *(void *)(v19 + 24) = a3;
      return v19;
    }
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
    goto LABEL_70;
  }
  if ((*((unsigned char *)a3 + 87) & 8) != 0)
  {
LABEL_71:
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
    qword_1E91199F0 = (uint64_t)a3;
    __break(1u);
    goto LABEL_72;
  }
  if (a3[3])
  {
    if ((result & 0x100000) != 0) {
      int v11 = 2;
    }
    else {
      int v11 = 1;
    }
    if (!v10) {
      unsigned int v10 = v11;
    }
    goto LABEL_38;
  }
  if (!v10) {
    goto LABEL_38;
  }
LABEL_72:
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify an overcommit attribute and use this kind of target queue";
  qword_1E91199F0 = (uint64_t)a3;
  __break(1u);
  return result;
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)_dispatch_lane_create_with_target(label, (uint64_t *)attr, 0, 1u);
}

void dispatch_queue_create_with_accounting_override_voucher()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported interface";
  __break(1u);
}

void _dispatch_lane_class_dispose(uint64_t *a1, unsigned char *a2)
{
  if (a1[6]) {
    _dispatch_lane_class_dispose_cold_3(a1 + 6);
  }
  a1[13] = 512;
  a1[6] = 512;
  uint64_t v2 = a1[7];
  unint64_t v3 = 0x20000000000000 - ((unint64_t)*((unsigned __int16 *)a1 + 40) << 41);
  if (*(unsigned char *)(*a1 + 42)) {
    unint64_t v3 = 0x60000000000000;
  }
  if ((v2 & 0xFFFFFF48FFFFFFFFLL) != v3)
  {
    if ((v2 & 0xFFFFFFFC) == 0) {
      _dispatch_lane_class_dispose_cold_1(v2);
    }
    _dispatch_lane_class_dispose_cold_2(v2);
  }

  _dispatch_queue_dispose(a1, a2);
}

void _dispatch_queue_dispose(id obj, unsigned char *a2)
{
  int v4 = (void *)*((void *)obj + 9);
  if (v4 && (*((_DWORD *)obj + 20) & 0x200000) != 0) {
    free(v4);
  }
  __swp(v4, (unsigned int *)obj + 22);
  if (v4) {
    _dispatch_queue_specific_head_dispose(v4);
  }
  if (*((_DWORD *)obj + 24))
  {
    _dispatch_object_finalize(obj);
    *a2 = 0;
    *((void *)obj + 9) = "<released queue, pending free>";
    *((void *)obj + 4) = 0;
    *((void *)obj + 5) = 0;
    *((void *)obj + 3) = 0;
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)obj + 24, 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
      else
      {
        *((void *)obj + 7) = 0xDEAD000000000000;
        _dispatch_object_dealloc(obj);
      }
    }
  }
  else
  {
    *((void *)obj + 7) = 0xDEAD000000000000;
  }
}

unint64_t _dispatch_queue_xref_dispose(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 56);
  if (result >> 55)
  {
    if ((result & 0x180000000000000) == 0) {
      _dispatch_queue_xref_dispose_cold_1(result);
    }
    _dispatch_queue_xref_dispose_cold_2(result);
  }
  atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x800000u, memory_order_relaxed);
  return result;
}

uint64_t _dispatch_lane_suspend(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 56);
  while (v1 < 0xFC00000000000000)
  {
    unint64_t v2 = v1;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 56), &v1, v1 + 0x400000000000000, memory_order_relaxed, memory_order_relaxed);
    if (v1 == v2)
    {
      if (!(v2 >> 55)
        && *(_DWORD *)(result + 8) != 0x7FFFFFFF
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 2u, memory_order_relaxed) <= 0)
      {
        dispatch_set_target_queue_cold_2();
      }
      return result;
    }
  }

  return _dispatch_lane_suspend_slow(result);
}

uint64_t _dispatch_lane_suspend_slow(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = 0;
  unint64_t v3 = (atomic_uint *)(result + 100);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 100), (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2) {
    unint64_t result = _dispatch_unfair_lock_lock_slow(result + 100);
  }
  unsigned int v5 = *(_DWORD *)(v1 + 112);
  unint64_t v6 = 0x7C00000000000000;
  if (!v5) {
    unint64_t v6 = 0x7A00000000000000;
  }
  unint64_t v7 = *(void *)(v1 + 56);
  do
  {
    if (v7 < v6)
    {
      unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      unsigned int v12 = atomic_exchange_explicit(v3, 0, memory_order_release);
      if (v12 != v11)
      {
        uint64_t v13 = (uint64_t)v3;
        char v14 = v12;
        _dispatch_unfair_lock_unlock_slow(v13, v12);
        if ((v14 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000) == 0) {
          *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        }
      }
      return _dispatch_lane_suspend(v1);
    }
    unint64_t v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v1 + 56), &v8, v7 - v6, memory_order_relaxed, memory_order_relaxed);
    BOOL v9 = v8 == v7;
    unint64_t v7 = v8;
  }
  while (!v9);
  *(_DWORD *)(v1 + 112) = v5 + 32;
  if (v5 >= 0xFFFFFFE0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_suspend()";
    __break(1u);
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    LODWORD(v1) = atomic_exchange_explicit(v3, 0, memory_order_release);
    if (v1 == v10) {
      return result;
    }
  }
  unint64_t result = _dispatch_unfair_lock_unlock_slow((uint64_t)v3, v1);
  if ((v1 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000) == 0) {
    *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  }
  return result;
}

uint64_t _dispatch_lane_resume(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a2 == 2)
  {
    unint64_t v7 = *(void *)(a1 + 56);
    do
    {
      if ((v7 & 0x180000000000000) == 0) {
        return (uint64_t)_os_object_release_internal_n((void *)a1, (const char *)2);
      }
      unint64_t add_explicit = v7;
      unint64_t v8 = v7 - 0x80000000000000;
      unint64_t v9 = v8 >> 53;
      unint64_t v10 = v8 & 0xFFFFFFF000000001;
      uint64_t v11 = v8 | 0x8000000000;
      if ((add_explicit & 0xFFFFFFFC) != 0) {
        unint64_t v10 = v11;
      }
      if (v9) {
        unint64_t v6 = v11;
      }
      else {
        unint64_t v6 = v10;
      }
      unint64_t v7 = add_explicit;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v7, v6, memory_order_release, memory_order_relaxed);
    }
    while (v7 != add_explicit);
    if ((v6 & 0x180000000000000) == 0) {
      goto LABEL_19;
    }
    unint64_t add_explicit = a1;
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt activation state";
    qword_1E91199F0 = a1;
    __break(1u);
LABEL_52:
    if ((add_explicit & 0x200000000000000) != 0) {
      return _dispatch_lane_resume_slow(a1);
    }
    goto LABEL_54;
  }
  if (a2 == 1)
  {
    unint64_t v3 = *(void *)(a1 + 56);
    while ((~v3 & 0x180000000000000) == 0)
    {
      unint64_t add_explicit = v3;
      if (v3 >> 58) {
        unint64_t v5 = 0xFF80000000000000;
      }
      else {
        unint64_t v5 = 0xFF00000000000000;
      }
      unint64_t v6 = v3 + v5;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v3, v6, memory_order_relaxed, memory_order_relaxed);
      if (v3 == add_explicit) {
        goto LABEL_19;
      }
    }
    return a1;
  }
  unint64_t v12 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  uint64_t v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  uint64_t v14 = *(unsigned __int8 *)(v2 + 40);
  unint64_t v15 = *(void *)(a1 + 56);
  a2 = v13 | 0x60000000000002;
  do
  {
    unint64_t add_explicit = v15;
    if (v14 == 19 && (v15 & 0xFF80000000000000) == 0x180000000000000)
    {
      unint64_t v6 = v15 - 0x100000000000000;
    }
    else
    {
      unint64_t v16 = v15 - 0x400000000000000;
      if (v15 < 0x400000000000000) {
        goto LABEL_52;
      }
      if ((v16 & 0x180000000000000) == 0x100000000000000)
      {
        unint64_t v6 = v15 - 0x480000000000000;
      }
      else if (v16 >> 53 || (v15 & 0xFFFFFFFC) != 0)
      {
        unint64_t v6 = v16 | 0x8000000000;
      }
      else if (v14 == 19 || (v16 & 0x10000000000) == 0 && (v12 + v16) >> 53)
      {
        unint64_t v6 = v16 & 0xFFFFFFF000000001;
      }
      else
      {
        unint64_t v6 = a2 | v16 & 0x7700000001;
      }
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v15, v6, memory_order_release, memory_order_relaxed);
  }
  while (v15 != add_explicit);
LABEL_19:
  if ((v6 & 0x180000000000000) == 0x80000000000000) {
    return _dispatch_lane_resume_activate(a1);
  }
  if (!(v6 >> 55))
  {
    if (((add_explicit ^ v6) & 0x40000000000000) != 0)
    {
      uint64_t v17 = 5;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80))(a1, HIDWORD(add_explicit) & 7, v17);
    }
    if (!(v6 >> 53))
    {
      uint64_t v17 = 1;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80))(a1, HIDWORD(add_explicit) & 7, v17);
    }
    if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF) {
      return a1;
    }
    unint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFE, memory_order_release);
    if ((int)add_explicit > 2) {
      return a1;
    }
    if (add_explicit == 2) {
      return _os_object_dispose((void *)a1, (const char *)a2);
    }
    qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
LABEL_54:
    if ((~add_explicit & 0x180000000000000) != 0)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an object";
      qword_1E91199F0 = a1;
      __break(1u);
    }
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an inactive object";
    qword_1E91199F0 = a1;
    __break(1u);
  }
  return a1;
}

uint64_t _dispatch_lane_resume_slow(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = 0;
  unint64_t v3 = (atomic_uint *)(result + 100);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 100), (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2) {
    unint64_t result = _dispatch_unfair_lock_lock_slow(result + 100);
  }
  int v5 = *(_DWORD *)(v1 + 112);
  if (v5)
  {
    uint64_t v6 = 0x7C00000000000000;
    int v7 = v5 - 32;
    if (!v7) {
      uint64_t v6 = 0x7A00000000000000;
    }
    uint64_t v8 = *(void *)(v1 + 56);
    while (!__CFADD__(v8, v6))
    {
      uint64_t v9 = v8;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v1 + 56), (unint64_t *)&v9, v8 + v6, memory_order_relaxed, memory_order_relaxed);
      BOOL v10 = v9 == v8;
      uint64_t v8 = v9;
      if (v10)
      {
        *(_DWORD *)(v1 + 112) = v7;
        unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        unsigned int v12 = atomic_exchange_explicit((atomic_uint *volatile)(v1 + 100), 0, memory_order_release);
        if (v12 != v11)
        {
          unint64_t result = _dispatch_unfair_lock_unlock_slow((uint64_t)v3, v12);
          if ((v12 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000) == 0) {
            *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
          }
        }
        return result;
      }
    }
  }
  unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unsigned int v14 = atomic_exchange_explicit(v3, 0, memory_order_release);
  if (v14 != v13)
  {
    uint64_t v15 = (uint64_t)v3;
    char v16 = v14;
    _dispatch_unfair_lock_unlock_slow(v15, v14);
    if ((v16 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000) == 0) {
      *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }

  return _dispatch_lane_resume(v1, 0);
}

uint64_t _dispatch_lane_resume_activate(uint64_t a1)
{
  int v2 = *(void (**)(uint64_t))(*(void *)a1 + 72);
  if (v2) {
    v2(a1);
  }

  return _dispatch_lane_resume(a1, 2);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  if (!queue)
  {
    int v2 = *(NSObject **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (v2) {
      queue = v2;
    }
    else {
      queue = (dispatch_queue_t)&off_1EB1CE800;
    }
  }
  if (queue[9].isa) {
    return (const char *)queue[9].isa;
  }
  else {
    return (const char *)&unk_18A97F2E6;
  }
}

dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue, int *relative_priority_ptr)
{
  unint64_t isa_high = HIDWORD(queue[10].isa);
  uint64_t v3 = (isa_high >> 8) & 0xF;
  if (relative_priority_ptr)
  {
    if ((isa_high & 0xF00) != 0) {
      int v4 = (char)isa_high + 1;
    }
    else {
      int v4 = 0;
    }
    if (!v3) {
      int v4 = 0;
    }
    *relative_priority_ptr = v4;
  }
  uint64_t v5 = v3 - 1;
  if (v5 > 5) {
    return 0;
  }
  else {
    return dword_18A97E2C4[v5];
  }
}

atomic_ullong *dispatch_queue_set_width(atomic_ullong *a1, uint64_t a2)
{
  if (*(void *)(*a1 + 40) != 17) {
    dispatch_queue_set_width_cold_2(*(void *)(*a1 + 40));
  }
  if (*(void *)(*a1 + 40) != 529) {
    dispatch_queue_set_width_cold_1(*(void *)(*a1 + 40));
  }
  if ((a2 & 0x80000000) != 0)
  {
    return (atomic_ullong *)_dispatch_barrier_async_detached_f((uint64_t)a1, a2, (uint64_t)_dispatch_lane_set_width);
  }
  else
  {
    return _dispatch_barrier_trysync_or_async_f(a1, a2, (uint64_t (*)(void))_dispatch_lane_set_width, 1);
  }
}

unint64_t _dispatch_lane_set_width(int a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 160);
  if (a1 < 0)
  {
    int v9 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    if (a1 == -1)
    {
      if (!v9 || (a1 = pthread_qos_max_parallelism(), a1 <= 0)) {
        a1 = MEMORY[0xFFFFFC036];
      }
      if (a1 >= MEMORY[0xFFFFFC034]) {
        a1 = MEMORY[0xFFFFFC034];
      }
    }
    else if (a1 == -2)
    {
      if (!v9 || (a1 = pthread_qos_max_parallelism(), a1 <= 0)) {
        a1 = MEMORY[0xFFFFFC035];
      }
    }
    else if (!v9 || (a1 = pthread_qos_max_parallelism(), a1 <= 0))
    {
      a1 = MEMORY[0xFFFFFC036];
    }
  }
  else if (a1 <= 1)
  {
    a1 = 1;
  }
  if (a1 >= 0xFFE) {
    int v3 = 4094;
  }
  else {
    int v3 = a1;
  }
  int v4 = *(_DWORD *)(v2 + 80);
  int v5 = v4;
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v2 + 80), (unsigned int *)&v5, v4 & 0xFFFF0000 | v3, memory_order_relaxed, memory_order_relaxed);
    BOOL v6 = v5 == v4;
    int v4 = v5;
  }
  while (!v6);
  unint64_t v7 = *(void *)(v2 + 24);

  return _dispatch_lane_inherit_wlh_from_target(v2, v7);
}

atomic_ullong *_dispatch_lane_set_target_queue(atomic_ullong *a1, char *a2)
{
  if (!a2)
  {
    uint64_t v3 = 1152;
    if (*((_WORD *)a1 + 40) == 1) {
      uint64_t v3 = 1280;
    }
    a2 = (char *)&_dispatch_root_queues + v3;
  }
  atomic_ullong v4 = a1[7];
  while ((~v4 & 0x180000000000000) == 0)
  {
    atomic_ullong v5 = v4;
    atomic_compare_exchange_strong_explicit(a1 + 7, (unint64_t *)&v4, v4 + 0x400000000000000, memory_order_relaxed, memory_order_relaxed);
    if (v4 == v5)
    {
      if ((v5 & 0x200000000000000) != 0) {
        _dispatch_lane_set_target_queue_cold_3();
      }
      if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 1u, memory_order_relaxed) <= 0)
      {
        dispatch_set_target_queue_cold_2();
      }
      BOOL v6 = (atomic_uint *)atomic_exchange_explicit(a1 + 3, (unint64_t)a2, memory_order_release);
      if (v6)
      {
        if (v6[2] != 0x7FFFFFFF)
        {
          int add_explicit = atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release);
          if (add_explicit <= 1)
          {
            if (add_explicit != 1) {
              _os_object_retain_weak_cold_1();
            }
            _os_object_dispose(v6, a2);
          }
        }
      }
      return (atomic_ullong *)_dispatch_lane_resume((uint64_t)a1, 0);
    }
  }
  if ((a1[10] & 0x400000) == 0)
  {
    if ((a1[10] & 0x100000) == 0) {
      _dispatch_lane_set_target_queue_cold_4();
    }
    _dispatch_lane_set_target_queue_cold_5();
  }
  uint64_t v9 = *(void *)(*a1 + 40);
  int v10 = *(void *)(*a1 + 40);
  if (v10 == 17)
  {
    if ((a1[10] & 0x100000) == 0) {
      goto LABEL_20;
    }
    unsigned int v12 = a2;
    unsigned int v11 = "Changing the target of a queue already targeted by other dispatch objects";
  }
  else
  {
    unsigned int v12 = a2;
    if (v10 != 19) {
      _dispatch_lane_set_target_queue_cold_6(v9);
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace();
    }
    unsigned int v11 = "Changing the target of a source after it has been activated";
  }
  _dispatch_bug_deprecated(v11);
  a2 = v12;
LABEL_20:
  if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }

  return _dispatch_barrier_trysync_or_async_f(a1, (uint64_t)a2, (uint64_t (*)(void))_dispatch_lane_legacy_set_target_queue, 1);
}

void *_dispatch_lane_legacy_set_target_queue(unint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 160);
  atomic_ullong v4 = *(void **)(v3 + 24);
  if ((*(_DWORD *)(v3 + 80) & 0x100000) != 0) {
    _dispatch_lane_legacy_set_target_queue_cold_2();
  }
  atomic_ullong v5 = _dispatch_queue_priority_inherit_from_target(v3, a1);
  _dispatch_lane_inherit_wlh_from_target(v3, (unint64_t)v5);
  int v7 = 0;
  uint64_t v8 = v3 + 100;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v3 + 100), (unsigned int *)&v7, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v7) {
    _dispatch_unfair_lock_lock_slow(v3 + 100);
  }
  if ((*(_DWORD *)(v3 + 80) & 0x400000) == 0) {
    _dispatch_lane_set_target_queue_cold_4();
  }
  *(void *)(v3 + 24) = v5;
  unsigned int v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unsigned int v10 = atomic_exchange_explicit((atomic_uint *volatile)(v3 + 100), 0, memory_order_release);
  if (v10 != v9)
  {
    _dispatch_unfair_lock_unlock_slow(v8, v10);
    if ((v10 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000) == 0) {
      *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }

  return _os_object_release_internal(v4, v6);
}

void _dispatch_return_to_kernel()
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v1 = *(void *)(StatusReg + 232);
  if (!v1 || *(void *)(v1 + 24) == -4) {
    *(void *)(StatusReg + 40) = 0;
  }
  else {
    _dispatch_event_loop_drain(1);
  }
}

BOOL dispatch_swift_job_should_yield()
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 960) != 0;
}

void _dispatch_lane_serial_drain(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  int v37 = (atomic_ullong *)(a1 + 48);
  if (!*(void *)(a1 + 48)) {
    return;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v42 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v42;
  unsigned int v10 = (unint64_t *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 104);
  if (!v11) {
    uint64_t v11 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
  }
  uint64_t v39 = (_OWORD *)(StatusReg + 160);
  if (!(*(void *)(a1 + 56) >> 55))
  {
    uint64_t v41 = v6;
    do
    {
      if (v6 != *(void *)(a1 + 24)) {
        break;
      }
      if (*(void *)v11 <= 0xFFFuLL && (a3 & 0x80000) == 0 && (*(void *)v11 & 1) != 0)
      {
        uint64_t v36 = a2;
        *(void *)(a2 + 8) = v11;
        if ((a3 & 8) == 0) {
          goto LABEL_92;
        }
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
        __break(1u);
        goto LABEL_101;
      }
      uint64_t v12 = *(void *)(v11 + 16);
      *unsigned int v10 = v12;
      if (!v12)
      {
        uint64_t v28 = (unint64_t *)(v11 + 16);
        atomic_ullong v29 = *v37;
        while (v11 == (v29 & 0xFFFFFFFFFFFFFFF8))
        {
          atomic_ullong v30 = v29;
          atomic_compare_exchange_strong_explicit(v37, (unint64_t *)&v30, 0, memory_order_release, memory_order_relaxed);
          BOOL v23 = v30 == v29;
          atomic_ullong v29 = v30;
          if (v23) {
            goto LABEL_11;
          }
        }
        uint64_t v12 = *v28;
        if (!*v28) {
          uint64_t v12 = _dispatch_wait_for_enqueuer(v28);
        }
        *unsigned int v10 = v12;
      }
LABEL_11:
      unsigned int v13 = *(void (***)(uint64_t))(StatusReg + 192);
      if (v13) {
        (*v13)(a1);
      }
      uint64_t v14 = *(void *)v11;
      if (*(void *)v11 >= 0x1000uLL)
      {
        if (*(void *)(v14 + 40) == 1) {
          (*(void (**)(uint64_t, void, void))(v14 + 48))(v11, 0, (a3 >> 21) & 1);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, void))(v14 + 64))(v11, a2, a3 & 0xFFFD0000);
        }
        goto LABEL_67;
      }
      if ((a3 & 0x1000000) != 0)
      {
        uint64_t v15 = (void *)MEMORY[0x18C121B40]();
        uint64_t v14 = *(void *)v11;
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void *)(v11 + 24);
      if ((v14 & 4) != 0) {
        *(void *)(v11 + 24) = -1;
      }
      uint64_t v17 = *(void *)(v11 + 8);
      if (v17 == -1)
      {
        unint64_t v20 = 0;
      }
      else
      {
        uint64_t v18 = *(void *)(StatusReg + 200);
        if (((v18 >> 8) & 0xF) != 0) {
          uint64_t v19 = 256 << ((BYTE1(v18) & 0xFu) - 1);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = v19 & 0xFFFFFFFFFFFFFF00 | *(void *)(StatusReg + 200);
        unint64_t v21 = v17 & 0xFFFFFF;
        if ((v17 & 0xFFFFFF) != 0)
        {
          unint64_t v22 = v19 & 0xFFFFFF00;
          BOOL v23 = (v18 & 0x44000000) == 0 && (*(void *)(v11 + 8) & 0x10000000) == 0;
          if (v23) {
            uint64_t v24 = v20;
          }
          else {
            uint64_t v24 = v17 & 0xFFFFFF;
          }
          if (v21 >= v22) {
            unint64_t v20 = v24;
          }
        }
        else if ((unsigned __int16)v18 >> 12)
        {
          unint64_t v20 = (256 << (((unsigned __int16)v18 >> 12) - 1)) | 0xFF;
        }
      }
      uint64_t v25 = v14 & 4;
      unint64_t v26 = v20 & 0xFFFFFFFF02FFFFFFLL;
      uint64_t v27 = *(void *)(StatusReg + 32);
      if ((v27 & 0x1000000) != 0)
      {
        if (v26) {
          goto LABEL_56;
        }
        unint64_t v26 = v27 & 0xFFFFFFFFFEFFFFFFLL;
      }
      else if (v26 == (v27 & 0xFFFFFFFF77FFFFFFLL))
      {
        goto LABEL_39;
      }
      if (v26) {
        goto LABEL_56;
      }
LABEL_39:
      if (v16 == -1) {
        goto LABEL_57;
      }
      if (*(void *)(StatusReg + 224) != v16)
      {
        unint64_t v26 = 0;
LABEL_56:
        _dispatch_set_priority_and_voucher_slow(v26, v16, v25 | 2);
LABEL_57:
        if ((v14 & 4) == 0) {
          goto LABEL_63;
        }
        goto LABEL_58;
      }
      if ((v14 & 4) == 0 || !v16) {
        goto LABEL_57;
      }
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
        __break(1u);
        return;
      }
LABEL_58:
      uint64_t v31 = *(void *)(StatusReg + 176);
      if (v31) {
        int v32 = *(_DWORD *)(v31 + 8) + 1;
      }
      else {
        int v32 = 1;
      }
      uint64_t v25 = v11;
      if (v32 <= _dispatch_continuation_cache_limit)
      {
        uint64_t v25 = 0;
        *(void *)(v11 + 16) = v31;
        *(_DWORD *)(v11 + 8) = v32;
        *(void *)(StatusReg + 176) = v11;
      }
LABEL_63:
      if ((v14 & 8) != 0)
      {
        uint64_t v33 = *(NSObject **)(v11 + 48);
        uint64_t v34 = *((void *)v33->isa + 5);
        if (v34 != 514)
        {
          qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
          qword_1E91199F0 = v34;
          __break(1u);
          return;
        }
        _dispatch_client_callout(*(void *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
        dispatch_group_leave(v33);
        if (!v25) {
          goto LABEL_65;
        }
      }
      else
      {
        _dispatch_client_callout(*(void *)(v11 + 40), *(uint64_t (**)(void))(v11 + 32));
        if (!v25) {
          goto LABEL_65;
        }
      }
      _dispatch_continuation_free_to_cache_limit(v25);
LABEL_65:
      uint64_t v6 = v41;
      if (v15) {
LABEL_67:
      }
      if (v13) {
        v13[1](a1);
      }
      uint64_t v11 = v12;
      if (!v12)
      {
        if (!*v37)
        {
          uint64_t v36 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000;
          goto LABEL_95;
        }
        uint64_t v11 = *v10;
        if (!*v10) {
          uint64_t v11 = _dispatch_wait_for_enqueuer(v10);
        }
      }
      if (*(void *)(StatusReg + 40)) {
        _dispatch_return_to_kernel();
      }
    }
    while (*(_WORD *)(a1 + 80) == 1
         && ((a3 & 0x4000000) != 0 || (*(unsigned char *)(StatusReg + 960) & 1) == 0)
         && ((a3 & 0x100000) == 0
          || (*(_DWORD *)(*(void *)(StatusReg + 216) + 60) & 7u) <= *(unsigned __int8 *)(*(void *)(StatusReg + 216)
                                                                                           + 100))
         && !(*(void *)(a1 + 56) >> 55));
  }
  uint64_t v35 = *(unsigned __int16 *)(a1 + 80);
  uint64_t v36 = (v35 << 41) + 0x40000000000000;
  if (!v11)
  {
LABEL_95:
    *a4 = *a4 & 0x4000000001 | v36;
    *uint64_t v39 = v42;
    return;
  }
  atomic_ullong v4 = a4;
  if (v35 >= 2)
  {
    uint64_t v5 = *(void *)v11;
    if (*(void *)v11 < 0x1000uLL)
    {
LABEL_101:
      if ((v5 & 2) == 0) {
        goto LABEL_90;
      }
    }
    else if ((*(void *)(v5 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(v11 + 80) & 0x80000) == 0)
    {
      goto LABEL_90;
    }
    uint64_t v36 = 0x40010000000000;
  }
LABEL_90:
  *atomic_ullong v4 = *v4 & 0x4000000001 | v36;
LABEL_92:
  *uint64_t v39 = v42;
}

void _dispatch_queue_invoke_finish(atomic_ullong *a1, uint64_t a2, __objc2_class **a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(v5 + 106) |= 0x80u;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    if (v6) {
      _dispatch_workloop_drain_barrier_waiter((uint64_t)a1, v5, v6, 1, a4 & 0x4000000001);
    }
    else {
      _dispatch_lane_drain_barrier_waiter(a1, v5, 1, a4 & 0x4000000001);
    }
  }
  else
  {
    if (a3 == &_dispatch_mgr_q) {
      uint64_t v7 = 0x4000000000;
    }
    else {
      uint64_t v7 = 1;
    }
    atomic_ullong v8 = a1[7];
    atomic_ullong v9 = v8;
    do
    {
      unint64_t v10 = v8 - a4;
      if ((v8 - a4) & 0x4000000001 | ((unint64_t)(v8 - a4) >> 53)) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v7;
      }
      unint64_t v12 = (v8 - a4) & 0xFFFFFF7700000001 | v11 | 0x8000000000;
      atomic_compare_exchange_strong_explicit(a1 + 7, (unint64_t *)&v9, v12, memory_order_release, memory_order_relaxed);
      BOOL v13 = v9 == v8;
      atomic_ullong v8 = v9;
    }
    while (!v13);
    if ((~v10 & 0x1800000000) == 0)
    {
      uint64_t v14 = HIDWORD(v10) & 7;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v16 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v16) & 0xF) < v14) {
        *(void *)(StatusReg + 200) = v16 & 0xFFF0FFFF | (v14 << 16);
      }
    }
    if (((v12 ^ v10) & v7) != 0)
    {
      if ((v10 & 0x2000000000) != 0) {
        _dispatch_event_loop_poke((uint64_t)a1, v12, 1);
      }
      else {
        ((void (*)(__objc2_class **, atomic_ullong *, unint64_t))(*a3)[2].superclass)(a3, a1, HIDWORD(v10) & 7);
      }
    }
    else
    {
      _os_object_release_internal_n(a1, (const char *)2);
    }
  }
}

uint64_t _dispatch_workloop_drain_barrier_waiter(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v8 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = a3 - 1;
  uint64_t v11 = a1 + 8 * (a3 - 1);
  *(void *)(v11 + 104) = v9;
  if (!v9)
  {
    unint64_t v20 = (uint64_t *)(a2 + 16);
    unint64_t v21 = (uint64_t *)(v11 + 104);
    uint64_t v22 = *(void *)(a1 + 8 * v10 + 152);
    BOOL v23 = (atomic_ullong *)(a1 + 8 * v10 + 152);
    while ((v22 & 0xFFFFFFFFFFFFFFF8) == a2)
    {
      uint64_t v24 = v22;
      atomic_compare_exchange_strong_explicit(v23, (unint64_t *)&v24, 0, memory_order_release, memory_order_relaxed);
      BOOL v25 = v24 == v22;
      uint64_t v22 = v24;
      if (v25) {
        goto LABEL_2;
      }
    }
    uint64_t v26 = a5;
    uint64_t v9 = *v20;
    if (!*v20) {
      uint64_t v9 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
    }
    *unint64_t v21 = v9;
    a5 = v26;
  }
LABEL_2:
  BOOL v12 = v9 != 0;
  uint64_t v13 = v8 - a5;
LABEL_3:
  if (v12)
  {
    BOOL v12 = 1;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      BOOL v12 = v14 != -48;
      if (v14 == -48) {
        break;
      }
      uint64_t v15 = *(void *)(a1 + 192 + v14);
      v14 -= 8;
    }
    while (!v15);
  }
  unint64_t v16 = *(void *)(a1 + 56);
  do
  {
    unint64_t v17 = v16;
    if ((v16 & 0x2000000000) != 0)
    {
      if ((v16 & 2) != 0 && (v16 & 0x800000001) != 0)
      {
        _dispatch_event_loop_ensure_ownership(a1);
        atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
        goto LABEL_3;
      }
      unint64_t v18 = v16 & 0xFFFFFF7700000001 | v8;
      if (!v12)
      {
        if ((v16 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
          goto LABEL_3;
        }
        unint64_t v18 = v16 & 0xFFFFFF7000000000 | v8 & 0xFFFFFF70FFFFFFFCLL;
      }
    }
    else
    {
      unint64_t v18 = v13 + (v16 & 0xFFFFFF7700000001);
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v16, v18, memory_order_release, memory_order_relaxed);
  }
  while (v16 != v17);

  return _dispatch_barrier_waiter_redirect_or_wake(a1, a2, a4, v17, v18);
}

uint64_t _dispatch_lane_drain_barrier_waiter(atomic_ullong *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  uint64_t v8 = *(void *)(a2 + 16);
  a1[13] = v8;
  if (!v8)
  {
    uint64_t v14 = (unint64_t *)(a2 + 16);
    atomic_ullong v15 = a1[6];
    while ((v15 & 0xFFFFFFFFFFFFFFF8) == a2)
    {
      atomic_ullong v16 = v15;
      atomic_compare_exchange_strong_explicit(a1 + 6, (unint64_t *)&v16, 0, memory_order_release, memory_order_relaxed);
      BOOL v17 = v16 == v15;
      atomic_ullong v15 = v16;
      if (v17) {
        goto LABEL_2;
      }
    }
    uint64_t v18 = a4;
    uint64_t v8 = *v14;
    if (!*v14) {
      uint64_t v8 = _dispatch_wait_for_enqueuer(v14);
    }
    a1[13] = v8;
    a4 = v18;
  }
LABEL_2:
  uint64_t v9 = v7 - a4;
LABEL_3:
  unint64_t v10 = a1[7];
  do
  {
    unint64_t v11 = v10;
    if ((v10 & 0x2000000000) != 0)
    {
      if ((v10 & 2) != 0 && (v10 & 0x800000001) != 0)
      {
        _dispatch_event_loop_ensure_ownership((uint64_t)a1);
        atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
        goto LABEL_3;
      }
      unint64_t v12 = v10 & 0xFFFFFF7700000001 | v7;
      if (!v8)
      {
        if ((v10 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit(a1 + 7, 0x8000000000uLL, memory_order_acquire);
          uint64_t v8 = a1[13];
          goto LABEL_3;
        }
        unint64_t v12 = v10 & 0xFFFFFF7000000000 | v7 & 0xFFFFFF70FFFFFFFCLL;
      }
    }
    else
    {
      unint64_t v12 = v9 + (v10 & 0xFFFFFF7700000001);
    }
    atomic_compare_exchange_strong_explicit(a1 + 7, &v10, v12, memory_order_release, memory_order_relaxed);
  }
  while (v10 != v11);

  return _dispatch_barrier_waiter_redirect_or_wake((uint64_t)a1, a2, a3, v11, v12);
}

unint64_t _dispatch_lane_activate(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 24);
  unsigned int v3 = *(_DWORD *)(a1 + 84);
  unsigned int v4 = (v3 >> 8) & 0xF;
  if ((unsigned __int16)v3 >> 12 <= v4 || (v3 & 0x40000000) == 0 && v4) {
    *(_DWORD *)(a1 + 84) = v3 & 0xFBFF0FFF;
  }
  uint64_t v5 = _dispatch_queue_priority_inherit_from_target(a1, v2);

  return _dispatch_lane_inherit_wlh_from_target(a1, (unint64_t)v5);
}

__objc2_class **_dispatch_queue_priority_inherit_from_target(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 84);
  BOOL v4 = a2 >= (unint64_t)&_dispatch_root_queues && a2 < (unint64_t)&_dispatch_queue_serial_numbers;
  if ((v2 & 0x20000000) != 0 || (v2 & 0x44000FFF) == 0)
  {
    if (v4)
    {
      unsigned int v2 = *(_DWORD *)(a2 + 84) | 0x20000000;
    }
    else if ((v2 & 0x20000000) != 0)
    {
      v2 &= 0xFBFF0FFF;
    }
    *(_DWORD *)(a1 + 84) = v2;
  }
  else if (v4)
  {
    if (((v2 >> 8) & 0xF) != 0) {
      unsigned int v5 = (v2 >> 8) & 0xF;
    }
    else {
      unsigned int v5 = 4;
    }
    if (v5 - 7 <= 0xFFFFFFF9) {
      _dispatch_queue_priority_inherit_from_target_cold_1(v5);
    }
    return &_dispatch_root_queues + 16 * (unint64_t)(3 * v5 + (v2 >> 31) - 3);
  }
  return (__objc2_class **)a2;
}

unint64_t _dispatch_lane_inherit_wlh_from_target(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(*(void *)a2 + 42))
  {
    if (*(void *)(*(void *)a1 + 40) == 133137
      || (*(void *)(*(void *)a1 + 40) != 19
       || (*(unsigned char *)(*(void *)(a1 + 88) + 29) & 0x20) != 0)
      && *(_WORD *)(a1 + 80) == 1
      && (a2 >= (unint64_t)&_dispatch_root_queues
        ? (BOOL v6 = (unint64_t)&_dispatch_queue_serial_numbers > a2)
        : (BOOL v6 = 0),
          v6))
    {
      uint64_t v5 = 0x2000000000;
      char v4 = 1;
    }
    else
    {
      char v4 = 0;
      uint64_t v5 = 0x1000000000;
    }
  }
  else
  {
    char v4 = 0;
    uint64_t v5 = 0;
  }
  unint64_t v7 = *(void *)(a1 + 56);
  while (1)
  {
    unint64_t v8 = v7;
    unint64_t result = v7 & 0xFFFFFFCFFFFFFFFFLL | v5;
    if (v7 == result) {
      break;
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v7, result, memory_order_relaxed, memory_order_relaxed);
    if (v7 == v8) {
      goto LABEL_16;
    }
  }
  unint64_t result = v7;
LABEL_16:
  if ((v8 & 0x2000000000) == 0) {
    char v4 = 1;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
    if (v10)
    {
      if (*(void *)(v10 + 24) == a1) {
        unint64_t result = _dispatch_event_loop_leave_immediate(result);
      }
    }
  }
  if ((*(void *)(*(void *)a2 + 40) & 0x10000) == 0)
  {
    if (*(void *)(*(void *)a2 + 40) == 18)
    {
      unint64_t v11 = *(void *)(a2 + 24);
      if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
      {
        uint64_t v13 = *(unsigned char **)(a2 + 200);
        unsigned int v14 = 0x1000000;
        if (v13)
        {
          if ((*v13 & 0x40) != 0) {
            unsigned int v14 = 17039360;
          }
          else {
            unsigned int v14 = 0x1000000;
          }
        }
      }
      else
      {
        unsigned int v14 = 0;
      }
      uint64_t v15 = *(unsigned int *)(a2 + 80);
      do
      {
        unsigned int v16 = v15 & 0xFFAFFFFF | 0x100000;
        if (v16 == v15) {
          break;
        }
        uint64_t v17 = v15;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 80), (unsigned int *)&v17, v16, memory_order_relaxed, memory_order_relaxed);
        BOOL v18 = v17 == v15;
        uint64_t v15 = v17;
      }
      while (!v18);
    }
    else
    {
      unsigned int v14 = *(_DWORD *)(a2 + 80) & 0x1000000;
      if (v14) {
        unsigned int v14 = *(_DWORD *)(a2 + 80) & 0x1040000;
      }
      atomic_fetch_or_explicit((atomic_uint *volatile)(a2 + 80), 0x100000u, memory_order_relaxed);
    }
    if (v14) {
      atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), v14, memory_order_relaxed);
    }
  }
  return result;
}

void _dispatch_lane_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v52 = 0;
  if ((a3 & 3) == 0) {
    *(void *)(a1 + 16) = -1985229329;
  }
  if ((a3 & 2) != 0)
  {
    uint64_t v52 = 0x40020000000001;
    int v6 = a3 & 0x40000;
  }
  else
  {
    unint64_t v32 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v34 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
    int v6 = a3 & 0x40000;
    if ((a3 & 0x40000) != 0) {
      uint64_t v35 = 0x4000000000;
    }
    else {
      uint64_t v35 = 1;
    }
    if ((a3 & 0x40001) == 0x40000) {
      unint64_t v36 = 0xFFE00000FFFFFFFCLL;
    }
    else {
      unint64_t v36 = 0xFFE00040FFFFFFFCLL;
    }
    unsigned int v37 = *(_DWORD *)(StatusReg + 200);
    unsigned int v38 = (v37 >> 8) & 0xF;
    unsigned int v39 = (unsigned __int16)v37 >> 12;
    unsigned int v40 = HIWORD(v37) & 0xF;
    if (v38 <= v39) {
      unsigned int v38 = v39;
    }
    if (v38 > v40) {
      unsigned int v40 = v38;
    }
LABEL_69:
    for (unint64_t i = *(void *)(a1 + 56); ; unint64_t i = v46)
    {
      while ((i & v36) != 0)
      {
        if (a3) {
          goto LABEL_88;
        }
        unint64_t v47 = i;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v47, i ^ v35, memory_order_acquire, memory_order_acquire);
        if (v47 == i) {
          goto LABEL_88;
        }
        unint64_t i = v47;
      }
      if ((i & 0x1000000000) != 0)
      {
        uint64_t v42 = HIDWORD(i) & 7;
        if (v42 > v40)
        {
          unint64_t v50 = v32;
          _pthread_workqueue_override_start_direct();
          unint64_t v32 = v50;
          unsigned int v48 = *(_DWORD *)(StatusReg + 200);
          unsigned int v40 = v42;
          if ((HIWORD(v48) & 0xF) < v42)
          {
            *(void *)(StatusReg + 200) = v48 & 0xFFF0FFFF | (v42 << 16);
            unsigned int v40 = v42;
          }
          goto LABEL_69;
        }
      }
      uint64_t v43 = (i >> 40) & 1;
      if (!((v32 + i) >> 53)) {
        LODWORD(v43) = 1;
      }
      uint64_t v44 = v43 ? 0x60000000000000 : 0x20000000000000;
      unint64_t v45 = i & 0x7700000001 | v34 | v44;
      unint64_t v46 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v46, v45, memory_order_acquire, memory_order_acquire);
      if (v46 == i) {
        break;
      }
    }
    uint64_t v49 = 0x60000000000000;
    if ((a3 & 1) == 0) {
      uint64_t v49 = v35 | 0x60000000000000;
    }
    uint64_t v52 = (v45 & v49) - (i & 0x3FFE0000000000);
    if (!v52) {
      goto LABEL_88;
    }
  }
  if (!v6)
  {
    int v8 = *(_DWORD *)(a1 + 84);
    unint64_t v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v10 = *(void *)(v9 + 200);
    if (v10)
    {
      unsigned int v11 = (unsigned __int16)v8 >> 12;
      unsigned int v12 = v8 & 0xFFF;
      if ((v8 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v10 & 0xFFFu) > v12) {
          unsigned int v12 = v10 & 0xFFF;
        }
        if (v11 <= v12 >> 8) {
          int v13 = 0x40000000;
        }
        else {
          int v13 = 1140912128;
        }
        unsigned int v14 = v10 & 0x880F0000 | v12 | v13 & v8;
      }
      else
      {
        unsigned int v15 = v10 | 0x40000000;
        if ((v10 & 0xFFF) == 0) {
          unsigned int v15 = *(void *)(v9 + 200);
        }
        unsigned int v14 = v15 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v11 <= ((v15 >> 8) & 0xF)) {
          unsigned int v14 = v15;
        }
      }
    }
    else
    {
      unsigned int v14 = v8 & 0xFFF0FFFF;
    }
    *(void *)(v9 + 200) = v14;
    uint64_t v7 = v10 & 0xFFF0FFFF;
    if ((a3 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v7 = 0;
  if ((a3 & 0x100000) != 0)
  {
LABEL_21:
    if ((*(_DWORD *)(a1 + 80) & 0x400000) != 0) {
      atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
    }
  }
LABEL_23:
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0) {
    unsigned int v16 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFFF;
  }
  else {
    unsigned int v16 = a3;
  }
  unint64_t v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_27:
  if ((v16 & 0x1000002) == 2)
  {
    _dispatch_last_resort_autorelease_pool_push(a2);
    uint64_t v19 = *(__objc2_class ***)(a1 + 24);
    unint64_t v20 = (long long *)(v17 + 160);
    if (*(__objc2_class ***)(v17 + 160) == v19)
    {
      if (*(_WORD *)(a1 + 80) == 1) {
        _dispatch_lane_serial_drain(a1, a2, v16, &v52);
      }
      else {
        _dispatch_lane_concurrent_drain(a1, a2, v16, &v52);
      }
      uint64_t v19 = v21;
    }
    long long v51 = *v20;
    *(void *)(v17 + 160) = a1;
    *(void *)(v17 + 168) = &v51;
    _dispatch_last_resort_autorelease_pool_pop(a2);
    *unint64_t v20 = v51;
  }
  else
  {
    uint64_t v19 = *(__objc2_class ***)(a1 + 24);
    if (*(__objc2_class ***)(v18 + 160) == v19)
    {
      if (*(_WORD *)(a1 + 80) == 1) {
        _dispatch_lane_serial_drain(a1, a2, v16, &v52);
      }
      else {
        _dispatch_lane_concurrent_drain(a1, a2, v16, &v52);
      }
      uint64_t v19 = v22;
    }
  }
  if ((unint64_t)v19 + 1 <= 1)
  {
    uint64_t v23 = v52;
    unint64_t v24 = *(void *)(a1 + 56);
    while (1)
    {
      unint64_t v25 = v24;
      unint64_t v26 = v24 - v23;
      unint64_t v27 = v26 & 0xFFFFFFF700000001;
      if (!(v25 >> 55))
      {
        if ((v25 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
          uint64_t v19 = *(__objc2_class ***)(v18 + 160);
          if ((a3 & 1) != 0 || ((uint64_t)(*v19)[1].isa & 0x10000) != 0) {
            goto LABEL_27;
          }
          break;
        }
        if (v19) {
          unint64_t v27 = v26 & 0xFFFFFF7700000001 | 0x8000000000;
        }
        else {
          unint64_t v27 = v26 & 0xFFFFFFF000000001;
        }
      }
      unint64_t v24 = v25;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v24, v27, memory_order_release, memory_order_relaxed);
      if (v24 == v25)
      {
        if ((~v25 & 0x1800000000) == 0)
        {
          uint64_t v28 = HIDWORD(v25) & 7;
          unint64_t v29 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          unsigned int v30 = *(_DWORD *)(v29 + 200);
          if ((HIWORD(v30) & 0xF) < v28) {
            *(void *)(v29 + 200) = v30 & 0xFFF0FFFF | (v28 << 16);
          }
        }
        uint64_t v19 = 0;
        uint64_t v52 = 0;
        break;
      }
    }
  }
  if ((v16 & 0x40000) == 0)
  {
    unint64_t v31 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(v31 + 200) = *(void *)(v31 + 200) & 0xF0000 | v7;
  }
  if (v19)
  {
    _dispatch_queue_invoke_finish((atomic_ullong *)a1, a2, v19, v52);
    return;
  }
LABEL_88:
  _os_object_release_internal_n((void *)a1, (const char *)2);
}

uint64_t dispatch_workloop_copy_current()
{
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  BOOL v1 = v0 == -4 || v0 == 0;
  if (v1 || *(unsigned char *)(*(void *)v0 + 40) != 18) {
    return 0;
  }
  _os_object_retain_with_resurrect(v0);
  return v0;
}

BOOL dispatch_workloop_is_current(uint64_t a1)
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) == a1;
}

BOOL _dispatch_workloop_uses_bound_thread(uint64_t a1)
{
  BOOL v1 = *(unsigned char **)(a1 + 200);
  return v1 && (*v1 & 0x40) != 0;
}

BOOL _dispatch_workloop_should_yield_4NW()
{
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  BOOL v1 = v0 == -4 || v0 == 0;
  return !v1 && *(unsigned char *)(*(void *)v0 + 40) == 18 && (*(_DWORD *)(v0 + 60) & 7u) > *(unsigned __int8 *)(v0 + 100);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)_dispatch_workloop_create(label, 0);
}

uint64_t _dispatch_workloop_create(const char *a1, uint64_t a2)
{
  int v3 = 65537;
  if (a1)
  {
    uint64_t v5 = _dispatch_strdup_if_mutable(a1);
    if (v5 == a1) {
      int v3 = 65537;
    }
    else {
      int v3 = 2162689;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = _dispatch_object_alloc(OS_dispatch_workloop, 208);
  if ((a2 & 0x180000000000000) != 0)
  {
    *(_DWORD *)(result + 8) += 2;
    if (*(unsigned char *)(*(void *)result + 40) == 19) {
      ++*(_DWORD *)(result + 8);
    }
  }
  *(void *)(result + 16) = -1985229329;
  *(_DWORD *)(result + 80) = v3;
  *(void *)(result + 56) = a2 | 0x1FFE2000000000;
  *(void *)(result + 64) = atomic_fetch_add_explicit(&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(void *)(result + 72) = v5;
  *(void *)(result + 24) = &off_1EB1CE800;
  if ((a2 & 0x180000000000000) == 0) {
    *(_DWORD *)(result + 84) = -2080358400;
  }
  return result;
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)_dispatch_workloop_create(label, 0x180000000000000);
}

void dispatch_workloop_set_autorelease_frequency(dispatch_workloop_t workloop, dispatch_autorelease_frequency_t frequency)
{
  uint64_t isa_low = LODWORD(workloop[10].isa);
  if (frequency == DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM)
  {
    do
    {
      unsigned int v3 = isa_low & 0xFFFCFFFF | 0x10000;
      if (v3 == isa_low) {
        break;
      }
      uint64_t v4 = isa_low;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&workloop[10], (unsigned int *)&v4, v3, memory_order_relaxed, memory_order_relaxed);
      BOOL v5 = v4 == isa_low;
      uint64_t isa_low = v4;
    }
    while (!v5);
  }
  else
  {
    do
    {
      unsigned int v6 = isa_low & 0xFFFCFFFF | 0x20000;
      if (v6 == isa_low) {
        break;
      }
      uint64_t v7 = isa_low;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&workloop[10], (unsigned int *)&v7, v6, memory_order_relaxed, memory_order_relaxed);
      BOOL v5 = v7 == isa_low;
      uint64_t isa_low = v7;
    }
    while (!v5);
  }
  uint64_t isa = (uint64_t)workloop[7].isa;
  if ((~isa & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(isa);
  }
}

_DWORD *dispatch_workloop_set_scheduler_priority(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(v4);
  }
  uint64_t result = *(_DWORD **)(a1 + 200);
  if (result)
  {
    if (a2) {
      goto LABEL_4;
    }
LABEL_8:
    result[2] = 0;
    unsigned int v8 = *result & 0xFFFFFFFE;
    if ((a3 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    result[4] = 2;
    unsigned int v9 = v8 | 2;
    goto LABEL_10;
  }
  uint64_t result = _dispatch_calloc(1uLL, 0x38uLL);
  *(void *)(a1 + 200) = result;
  if (!a2) {
    goto LABEL_8;
  }
LABEL_4:
  result[2] = a2;
  unsigned int v8 = *result | 1;
  if (a3) {
    goto LABEL_9;
  }
LABEL_5:
  unsigned int v9 = v8 & 0xFFFFFFFD;
LABEL_10:
  *uint64_t result = v9;
  return result;
}

uint64_t dispatch_workloop_set_uses_bound_thread(uint64_t a1)
{
  if (_dispatch_workloop_bound_thread_pred != -1) {
    dispatch_once_f(&_dispatch_workloop_bound_thread_pred, 0, (dispatch_function_t)_dispatch_workloop_bound_thread_init_once);
  }
  if (!_dispatch_thread_bound_kqwl_enabled) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if ((~v2 & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(v2);
  }
  unsigned int v3 = *(_DWORD **)(a1 + 200);
  if (!v3)
  {
    unsigned int v3 = _dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = v3;
  }
  uint64_t result = 0;
  *v3 |= 0x40u;
  return result;
}

void dispatch_workloop_set_os_workgroup(dispatch_workloop_t workloop, os_workgroup_t workgroup)
{
  uint64_t isa = (uint64_t)workloop[7].isa;
  if ((~isa & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(isa);
  }
  BOOL v5 = workloop[25].isa;
  if (!v5)
  {
    BOOL v5 = (objc_class *)_dispatch_calloc(1uLL, 0x38uLL);
    workloop[25].uint64_t isa = v5;
  }
  unsigned int v6 = (void *)*((void *)v5 + 4);
  if (v6) {
    _os_object_release(v6, (const char *)workgroup);
  }
  _os_object_retain((uint64_t)workgroup);
  *((void *)workloop[25].isa + 4) = workgroup;
}

_DWORD *dispatch_workloop_set_qos_class(uint64_t a1, int a2, char a3)
{
  return dispatch_workloop_set_qos_class_floor(a1, a2, 0, a3);
}

unsigned char *dispatch_workloop_set_cpupercent(uint64_t a1, char a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if ((~v4 & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(v4);
  }
  uint64_t result = *(unsigned char **)(a1 + 200);
  if (!result)
  {
    uint64_t result = _dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = result;
  }
  int v8 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 9) == 0) {
    dispatch_workloop_set_cpupercent_cold_1();
  }
  result[20] = a2;
  *((_DWORD *)result + 6) = a3;
  *(_DWORD *)uint64_t result = v8 | 4;
  return result;
}

__n128 _dispatch_workloop_set_observer_hooks_4IOHID(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if ((~v3 & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(v3);
  }
  BOOL v5 = *(char **)(a1 + 200);
  if (!v5)
  {
    BOOL v5 = (char *)_dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = v5;
  }
  __n128 result = *a2;
  *(__n128 *)(v5 + 40) = *a2;
  **(_DWORD **)(a1 + 200) |= 0x20u;
  return result;
}

void _dispatch_workloop_dispose(void *obj, char *a2)
{
  uint64_t v3 = obj[7];
  if (v3 != 0x1FFE2000000000)
  {
    if ((v3 & 0xFFFFFFFC) == 0) {
      _dispatch_workloop_dispose_cold_2(v3);
    }
    _dispatch_workloop_dispose_cold_3(v3);
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    unsigned int v6 = (char *)&obj[i];
    uint64_t v7 = obj[i + 19];
    if (v7) {
      _dispatch_workloop_dispose_cold_1(v7);
    }
    *((void *)v6 + 19) = 512;
    *((void *)v6 + 13) = 512;
  }
  int v8 = (void *)obj[6];
  if (v8)
  {
    free(v8);
    obj[6] = 0;
  }
  unsigned int v9 = (unsigned char *)obj[25];
  if (v9)
  {
    if ((*v9 & 0x10) != 0)
    {
      int v10 = _pthread_workloop_destroy();
      if (v10) {
        _dispatch_bug(4566, v10);
      }
    }
    unsigned int v11 = (void **)obj[25];
    if (v11)
    {
      if (v11[4])
      {
        _os_object_release(v11[4], a2);
        unsigned int v11 = (void **)obj[25];
      }
      free(v11);
    }
  }

  _dispatch_queue_dispose(obj, a2);
}

void _dispatch_workloop_activate(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F14BF8];
  if ((~atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFEFFFFFFFFFFFFFFLL, memory_order_relaxed) & 0x180000000000000) != 0) {
    return;
  }
  uint64_t v2 = *(int **)(a1 + 200);
  if (v2)
  {
    memset(&v14, 0, sizeof(v14));
    pthread_attr_init(&v14);
    int v3 = *v2;
    if ((*v2 & 8) != 0) {
      *(_DWORD *)(a1 + 84) |= v2[1] | 0x40000000;
    }
    if (v3)
    {
      pthread_attr_setschedparam(&v14, (const sched_param *)v2 + 1);
      *(void *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
    }
    uint64_t v4 = *((void *)v2 + 4);
    if (v4)
    {
      *(void *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
      if (_os_workgroup_get_backing_workinterval(v4)) {
        pthread_attr_setworkinterval_np();
      }
    }
    int v5 = *v2;
    if ((*v2 & 0x40) != 0)
    {
      if (_dispatch_root_queues_pred != -1) {
        dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
      }
      *(void *)(a1 + 24) = &_dispatch_custom_workloop_overcommit_root_queue;
      int v5 = *v2;
      if ((*v2 & 2) == 0)
      {
LABEL_17:
        if ((v5 & 4) != 0) {
          pthread_attr_setcpupercent_np();
        }
        uint64_t v6 = *(void *)(a1 + 200);
        if (!v6) {
          goto LABEL_44;
        }
        if ((*(unsigned char *)v6 & 0x47) == 0)
        {
          uint64_t v8 = *(void *)(v6 + 32);
          if (!v8 || !_os_workgroup_get_backing_workinterval(v8)) {
            goto LABEL_44;
          }
        }
        int v7 = _pthread_workloop_create();
        if (v7 <= 44)
        {
          if (v7)
          {
            if (v7 == 33) {
              _dispatch_workloop_activate_cold_1(a1);
            }
          }
          else
          {
            *v2 |= 0x10u;
          }
          goto LABEL_44;
        }
        if (v7 != 45)
        {
          if (v7 == 78) {
            _dispatch_workloop_activate_simulator_fallback(a1, (long long *)&v14.__sig);
          }
LABEL_44:
          pthread_attr_destroy(&v14);
          goto LABEL_45;
        }
        unsigned int v9 = *(const sched_param **)(a1 + 200);
        memset(&v15, 0, sizeof(v15));
        pthread_attr_init(&v15);
        int sched_priority = v9->sched_priority;
        if (v9->sched_priority)
        {
          pthread_attr_setschedparam(&v15, v9 + 1);
          int sched_priority = v9->sched_priority;
          if ((v9->sched_priority & 2) == 0)
          {
LABEL_32:
            if ((sched_priority & 4) == 0)
            {
LABEL_34:
              int v11 = _pthread_workloop_create();
              if (v11 == 45)
              {
                _dispatch_workloop_activate_simulator_fallback(a1, (long long *)&v15.__sig);
              }
              else if (!v11)
              {
                v9->sched_priority |= 0x10u;
              }
              pthread_attr_destroy(&v15);
              goto LABEL_44;
            }
LABEL_33:
            pthread_attr_setcpupercent_np();
            goto LABEL_34;
          }
        }
        else if ((sched_priority & 2) == 0)
        {
          goto LABEL_32;
        }
        pthread_attr_setschedpolicy(&v15, v9[2].sched_priority);
        if ((v9->sched_priority & 4) == 0) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_17;
    }
    pthread_attr_setschedpolicy(&v14, v2[4]);
    int v5 = *v2;
    goto LABEL_17;
  }
LABEL_45:
  int v12 = *(_DWORD *)(a1 + 84);
  if (v12) {
    unsigned int v13 = v12 | 0x80000000;
  }
  else {
    unsigned int v13 = -2080358400;
  }
  *(_DWORD *)(a1 + 84) = v13;
  atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFF7FFFFFFFFFFFFFLL, memory_order_relaxed);
  _dispatch_workloop_wakeup(a1, 0, 1u);
}

void _dispatch_workloop_wakeup(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 4) != 0)
  {
    _dispatch_workloop_barrier_complete(a1, a2, a3);
    return;
  }
  if ((a3 & 1) == 0) {
    _dispatch_workloop_wakeup_cold_1(a3);
  }
  if ((a3 & 8) != 0) {
    goto LABEL_30;
  }
  unint64_t v4 = *(void *)(a1 + 56);
  unint64_t v5 = a2 << 32;
  do
  {
    unint64_t v6 = v4;
    unint64_t v7 = v4 & 0x700000000;
    unint64_t v8 = v6 & 0xFFFFFFF8FFFFFFFFLL | v5;
    if (v6 & 0x1000000000 | v5 & 0x1000000000) {
      v8 |= 0x800000000uLL;
    }
    if (v7 < v5) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = v6;
    }
    unint64_t v10 = v9 | ((v9 & 0x700000000) != 0);
    if ((a3 & 2) != 0)
    {
      v10 |= 0x8000000000uLL;
    }
    else if (v10 == v6)
    {
      goto LABEL_30;
    }
    unint64_t v4 = v6;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v4, v10, memory_order_release, memory_order_relaxed);
  }
  while (v4 != v6);
  if (v6 >> 55) {
    _dispatch_workloop_wakeup_cold_2(v6);
  }
  if ((v10 ^ v6))
  {
    if ((v10 & 0x2000000000) != 0)
    {
      uint64_t v11 = a1;
      unsigned int v12 = 1;
LABEL_19:
      _dispatch_event_loop_poke(v11, v10, v12);
      return;
    }
    unsigned int v13 = *(void (**)(void))(**(void **)(a1 + 24) + 88);
    v13();
    return;
  }
  if (((v10 ^ v6) & 0x700000000) == 0)
  {
LABEL_30:
    _os_object_release_internal_n((void *)a1, (const char *)2);
    return;
  }
  if ((v10 & 0x2000000000) != 0)
  {
    unsigned int v12 = a3 | 0x80000000;
    uint64_t v11 = a1;
    goto LABEL_19;
  }

  _dispatch_queue_wakeup_with_override_slow(a1, v10, a3);
}

void _dispatch_workloop_invoke(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 & 3) == 0) {
    *(void *)(a1 + 16) = -1985229329;
  }
  if ((a3 & 2) != 0)
  {
    int v4 = a3 & 0x40000;
    uint64_t v5 = 0x40020000000001;
  }
  else
  {
    unint64_t v93 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v95 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
    int v4 = a3 & 0x40000;
    if ((a3 & 0x40000) != 0) {
      uint64_t v96 = 0x4000000000;
    }
    else {
      uint64_t v96 = 1;
    }
    int v97 = a3;
    if ((a3 & 0x40001) == 0x40000) {
      unint64_t v98 = 0xFFE00000FFFFFFFCLL;
    }
    else {
      unint64_t v98 = 0xFFE00040FFFFFFFCLL;
    }
    unsigned int v99 = *(_DWORD *)(StatusReg + 200);
    unsigned int v100 = (v99 >> 8) & 0xF;
    unsigned int v101 = (unsigned __int16)v99 >> 12;
    unsigned int v102 = HIWORD(v99) & 0xF;
    if (v100 <= v101) {
      unsigned int v100 = v101;
    }
    if (v100 > v102) {
      unsigned int v102 = v100;
    }
LABEL_241:
    for (unint64_t i = *(void *)(a1 + 56); ; unint64_t i = v108)
    {
      while ((i & v98) != 0)
      {
        if (v97) {
          goto LABEL_260;
        }
        unint64_t v109 = i;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v109, i ^ v96, memory_order_acquire, memory_order_acquire);
        if (v109 == i) {
          goto LABEL_260;
        }
        unint64_t i = v109;
      }
      if ((i & 0x1000000000) != 0)
      {
        uint64_t v104 = HIDWORD(i) & 7;
        if (v104 > v102)
        {
          _pthread_workqueue_override_start_direct();
          unsigned int v110 = *(_DWORD *)(StatusReg + 200);
          unsigned int v102 = v104;
          if ((HIWORD(v110) & 0xF) < v104)
          {
            *(void *)(StatusReg + 200) = v110 & 0xFFF0FFFF | (v104 << 16);
            unsigned int v102 = v104;
          }
          goto LABEL_241;
        }
      }
      uint64_t v105 = (i >> 40) & 1;
      if (!((v93 + i) >> 53)) {
        LODWORD(v105) = 1;
      }
      uint64_t v106 = v105 ? 0x60000000000000 : 0x20000000000000;
      unint64_t v107 = i & 0x7700000001 | v95 | v106;
      unint64_t v108 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v108, v107, memory_order_acquire, memory_order_acquire);
      if (v108 == i) {
        break;
      }
    }
    uint64_t v111 = 0x60000000000000;
    if ((v97 & 1) == 0) {
      uint64_t v111 = v96 | 0x60000000000000;
    }
    unint64_t v112 = v107 & v111;
    uint64_t v113 = i & 0x3FFE0000000000;
    uint64_t v5 = v112 - v113;
    if (v112 == v113) {
      goto LABEL_260;
    }
    a3 = v97;
  }
  if (!v4)
  {
    int v6 = *(_DWORD *)(a1 + 84);
    unint64_t v7 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v8 = *(void *)(v7 + 200);
    if (v8)
    {
      unsigned int v9 = v6 & 0xFFF;
      if ((v6 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v8 & 0xFFFu) > v9) {
          unsigned int v9 = v8 & 0xFFF;
        }
        if ((unsigned __int16)v6 >> 12 <= v9 >> 8) {
          int v10 = 0x40000000;
        }
        else {
          int v10 = 1140912128;
        }
        int v11 = v10 & v6;
        unsigned int v12 = v8 & 0x880F0000 | v9;
      }
      else
      {
        unsigned int v13 = v8 | 0x40000000;
        if ((v8 & 0xFFF) == 0) {
          unsigned int v13 = *(void *)(v7 + 200);
        }
        if ((unsigned __int16)v6 >> 12 <= ((v13 >> 8) & 0xF)) {
          goto LABEL_20;
        }
        unsigned int v12 = v13 & 0xFFFF0FFF;
        int v11 = v6 & 0x400F000;
      }
      unsigned int v13 = v12 | v11;
    }
    else
    {
      unsigned int v13 = v6 & 0xFFF0FFFF;
    }
LABEL_20:
    *(void *)(v7 + 200) = v13;
    uint64_t v117 = v8 & 0xFFF0FFFF;
    goto LABEL_21;
  }
  uint64_t v117 = 0;
LABEL_21:
  char v116 = a3;
  if ((*(_DWORD *)(a1 + 80) & 0x400000) != 0) {
    atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  }
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0) {
    unsigned int v14 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCEDFFFF | 0x100000;
  }
  else {
    unsigned int v14 = a3 & 0xFFEDFFFF | 0x100000;
  }
  int v15 = v14 & 0x1000002;
  unsigned int v120 = v14 & 0xFFFD0000;
  unsigned int v119 = (v14 >> 21) & 1;
  unint64_t v16 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_27:
  uint64_t v118 = v5;
  if (v15 == 2)
  {
    resort_autorelease_pool_push = (unint64_t *)_dispatch_last_resort_autorelease_pool_push(a2);
    uint64_t v19 = *(unsigned char **)(a1 + 200);
    if (v19 && (*v19 & 0x20) != 0) {
      *(void *)(v17 + 192) = v19 + 40;
    }
    v114 = (_OWORD *)(v16 + 160);
    long long v122 = *(_OWORD *)(v16 + 160);
    *(void *)(v16 + 160) = a1;
    *(void *)(v16 + 168) = &v122;
LABEL_32:
    uint64_t v20 = 6;
    while (v20)
    {
      uint64_t v21 = v20--;
      if (*(void *)(a1 + 8 * v20 + 152))
      {
        unsigned int v22 = v21;
        unint64_t v23 = v21 << 32;
        uint64_t v24 = *(void *)(a1 + 56);
        while (1)
        {
          if ((v24 & 0x700000000uLL) <= v23) {
            goto LABEL_42;
          }
          if ((v24 & 0x8000000000) != 0) {
            break;
          }
          uint64_t v25 = v24;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v25, v24 & 0xFFFFFFF8FFFFFFFFLL | v23, memory_order_relaxed, memory_order_relaxed);
          BOOL v39 = v25 == v24;
          uint64_t v24 = v25;
          if (v39)
          {
            uint64_t v26 = *(void *)(v16 + 232);
            if (v26)
            {
              *(unsigned char *)(v26 + 45) |= 2u;
              _dispatch_return_to_kernel();
            }
LABEL_42:
            *(unsigned char *)(a1 + 100) = v21;
            uint64_t v27 = a1 + 8 * v20;
            uint64_t v28 = *(void *)(v27 + 104);
            if (!v28)
            {
              resort_autorelease_pool_push = (unint64_t *)_dispatch_wait_for_enqueuer((unint64_t *)(v27 + 104));
              uint64_t v28 = (uint64_t)resort_autorelease_pool_push;
            }
            while (2)
            {
              if ((*(void *)v28 & 0xFFFFFFFFFFFFF001) == 1)
              {
                uint64_t v82 = a2;
                *(_DWORD *)(a2 + 16) = v22;
                *(void *)(a2 + 8) = v28;
                *(unsigned char *)(a1 + 100) = 0;
                v83 = (long long *)(v16 + 160);
                _OWORD *v114 = v122;
                *(void *)(v16 + 192) = 0;
                v84 = *(__objc2_class ***)(a1 + 24);
                uint64_t v5 = v118;
                goto LABEL_205;
              }
              unint64_t v29 = *(void *)(v28 + 16);
              uint64_t v30 = a1 + 8 * ((int)v22 - 1);
              *(void *)(v30 + 104) = v29;
              if (!v29)
              {
                resort_autorelease_pool_push = (unint64_t *)(v28 + 16);
                uint64_t v43 = (unint64_t *)(v30 + 104);
                uint64_t v44 = *(void *)(v30 + 152);
                while (v28 == (v44 & 0xFFFFFFFFFFFFFFF8))
                {
                  uint64_t v45 = v44;
                  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v30 + 152), (unint64_t *)&v45, 0, memory_order_release, memory_order_relaxed);
                  BOOL v39 = v45 == v44;
                  uint64_t v44 = v45;
                  if (v39) {
                    goto LABEL_46;
                  }
                }
                unint64_t v29 = *resort_autorelease_pool_push;
                if (!*resort_autorelease_pool_push)
                {
                  resort_autorelease_pool_push = (unint64_t *)_dispatch_wait_for_enqueuer(resort_autorelease_pool_push);
                  unint64_t v29 = (unint64_t)resort_autorelease_pool_push;
                }
                *uint64_t v43 = v29;
              }
LABEL_46:
              if (*(void *)(v16 + 40)) {
                _dispatch_return_to_kernel();
              }
              unint64_t v31 = *(uint64_t (***)(uint64_t))(v16 + 192);
              if (v31) {
                resort_autorelease_pool_push = (unint64_t *)(*v31)(a1);
              }
              uint64_t v32 = *(void *)v28;
              if (*(void *)v28 >= 0x1000uLL)
              {
                if (*(void *)(v32 + 40) == 1) {
                  resort_autorelease_pool_push = (unint64_t *)(*(uint64_t (**)(uint64_t, void, void))(v32 + 48))(v28, 0, v119);
                }
                else {
                  resort_autorelease_pool_push = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void))(v32 + 64))(v28, a2, v120);
                }
LABEL_103:
                if (v31) {
                  resort_autorelease_pool_push = (unint64_t *)v31[1](a1);
                }
                if (!v29) {
                  goto LABEL_32;
                }
                unsigned int v22 = *(unsigned __int8 *)(a1 + 100);
                uint64_t v28 = v29;
                if ((*(_DWORD *)(a1 + 60) & 7u) > v22) {
                  goto LABEL_32;
                }
                continue;
              }
              break;
            }
            if ((v14 & 0x1000000) != 0)
            {
              uint64_t v33 = (void *)MEMORY[0x18C121B40](resort_autorelease_pool_push);
              uint64_t v32 = *(void *)v28;
            }
            else
            {
              uint64_t v33 = 0;
            }
            uint64_t v34 = *(void *)(v28 + 24);
            if ((v32 & 4) != 0) {
              *(void *)(v28 + 24) = -1;
            }
            uint64_t v35 = *(void *)(v28 + 8);
            if (v35 == -1)
            {
              unint64_t v38 = 0;
            }
            else
            {
              uint64_t v36 = *(void *)(v16 + 200);
              if (((v36 >> 8) & 0xF) != 0) {
                uint64_t v37 = 256 << ((BYTE1(v36) & 0xFu) - 1);
              }
              else {
                uint64_t v37 = 0;
              }
              unint64_t v38 = v37 & 0xFFFFFFFFFFFFFF00 | *(void *)(v16 + 200);
              if ((v35 & 0xFFFFFF) != 0)
              {
                if ((v35 & 0xFFFFFFuLL) >= (v37 & 0xFFFFFF00))
                {
                  BOOL v39 = (v36 & 0x44000000) == 0 && (*(void *)(v28 + 8) & 0x10000000) == 0;
                  if (!v39) {
                    unint64_t v38 = v35 & 0xFFFFFF;
                  }
                }
              }
              else if ((unsigned __int16)v36 >> 12)
              {
                unint64_t v38 = (256 << (((unsigned __int16)v36 >> 12) - 1)) | 0xFF;
              }
            }
            uint64_t v40 = v32 & 4;
            unint64_t v41 = v38 & 0xFFFFFFFF02FFFFFFLL;
            uint64_t v42 = *(void *)(v16 + 32);
            if ((v42 & 0x1000000) != 0)
            {
              if (!v41)
              {
                unint64_t v41 = v42 & 0xFFFFFFFFFEFFFFFFLL;
                goto LABEL_86;
              }
LABEL_92:
              _dispatch_set_priority_and_voucher_slow(v41, v34, v40 | 2);
            }
            else
            {
              if (v41 == (v42 & 0xFFFFFFFF77FFFFFFLL)) {
                goto LABEL_74;
              }
LABEL_86:
              if (v41) {
                goto LABEL_92;
              }
LABEL_74:
              if (v34 != -1)
              {
                if (*(void *)(v16 + 224) != v34)
                {
                  unint64_t v41 = 0;
                  goto LABEL_92;
                }
                if ((v32 & 4) != 0 && v34)
                {
                  if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)-[OS_voucher release](); {
LABEL_94:
                  }
                  uint64_t v46 = *(void *)(v16 + 176);
                  if (v46) {
                    int v47 = *(_DWORD *)(v46 + 8) + 1;
                  }
                  else {
                    int v47 = 1;
                  }
                  uint64_t v40 = v28;
                  if (v47 <= _dispatch_continuation_cache_limit)
                  {
                    uint64_t v40 = 0;
                    *(void *)(v28 + 16) = v46;
                    *(_DWORD *)(v28 + 8) = v47;
                    *(void *)(v16 + 176) = v28;
                  }
LABEL_99:
                  if ((v32 & 8) != 0)
                  {
                    unsigned int v48 = *(NSObject **)(v28 + 48);
                    uint64_t v49 = *((void *)v48->isa + 5);
                    if (v49 != 514) {
                      _dispatch_queue_override_invoke_cold_1(v49);
                    }
                    _dispatch_client_callout(*(void *)(v28 + 40), *(uint64_t (**)(void))(v28 + 32));
                    dispatch_group_leave(v48);
                    if (!v40) {
                      goto LABEL_101;
                    }
                  }
                  else
                  {
                    resort_autorelease_pool_push = (unint64_t *)_dispatch_client_callout(*(void *)(v28 + 40), *(uint64_t (**)(void))(v28 + 32));
                    if (!v40)
                    {
LABEL_101:
                      if (!v33) {
                        goto LABEL_103;
                      }
                      goto LABEL_102;
                    }
                  }
                  _dispatch_continuation_free_to_cache_limit(v40);
                  if (!v33) {
                    goto LABEL_103;
                  }
LABEL_102:
                  goto LABEL_103;
                }
              }
            }
            if ((v32 & 4) != 0) {
              goto LABEL_94;
            }
            goto LABEL_99;
          }
        }
        atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
        goto LABEL_32;
      }
    }
    v84 = 0;
    uint64_t v5 = v118 & 1 | 0x40020000000000;
    v83 = (long long *)(v16 + 160);
    _OWORD *v114 = v122;
    *(void *)(v16 + 192) = 0;
    uint64_t v82 = a2;
LABEL_205:
    long long v122 = *v83;
    *(void *)(v16 + 160) = a1;
    *(void *)(v16 + 168) = &v122;
    _dispatch_last_resort_autorelease_pool_pop(v82);
    long long *v83 = v122;
    int v15 = v14 & 0x1000002;
  }
  else
  {
    unint64_t v50 = *(unsigned char **)(a1 + 200);
    if (v50 && (*v50 & 0x20) != 0) {
      *(void *)(v17 + 192) = v50 + 40;
    }
    v115 = (_OWORD *)(v17 + 160);
    long long v122 = *(_OWORD *)(v17 + 160);
    *(void *)(v17 + 160) = a1;
    *(void *)(v17 + 168) = &v122;
LABEL_120:
    uint64_t v51 = 6;
    while (v51)
    {
      uint64_t v52 = v51--;
      if (*(void *)(a1 + 8 * v51 + 152))
      {
        unsigned int v53 = v52;
        unint64_t v54 = v52 << 32;
        uint64_t v55 = *(void *)(a1 + 56);
        while (1)
        {
          if ((v55 & 0x700000000uLL) <= v54) {
            goto LABEL_130;
          }
          if ((v55 & 0x8000000000) != 0) {
            break;
          }
          uint64_t v56 = v55;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v56, v55 & 0xFFFFFFF8FFFFFFFFLL | v54, memory_order_relaxed, memory_order_relaxed);
          BOOL v39 = v56 == v55;
          uint64_t v55 = v56;
          if (v39)
          {
            uint64_t v57 = *(void *)(v17 + 232);
            if (v57)
            {
              *(unsigned char *)(v57 + 45) |= 2u;
              _dispatch_return_to_kernel();
            }
LABEL_130:
            *(unsigned char *)(a1 + 100) = v52;
            uint64_t v58 = a1 + 8 * v51;
            uint64_t v59 = *(void *)(v58 + 104);
            if (!v59) {
              uint64_t v59 = _dispatch_wait_for_enqueuer((unint64_t *)(v58 + 104));
            }
            while (2)
            {
              if ((*(void *)v59 & 0xFFFFFFFFFFFFF001) == 1)
              {
                *(_DWORD *)(a2 + 16) = v53;
                *(void *)(a2 + 8) = v59;
                *(unsigned char *)(a1 + 100) = 0;
                _OWORD *v115 = v122;
                *(void *)(v17 + 192) = 0;
                v84 = *(__objc2_class ***)(a1 + 24);
                uint64_t v5 = v118;
                goto LABEL_207;
              }
              uint64_t v60 = *(void *)(v59 + 16);
              uint64_t v61 = a1 + 8 * ((int)v53 - 1);
              *(void *)(v61 + 104) = v60;
              if (!v60)
              {
                v74 = (unint64_t *)(v59 + 16);
                v75 = (uint64_t *)(v61 + 104);
                uint64_t v76 = *(void *)(v61 + 152);
                while (v59 == (v76 & 0xFFFFFFFFFFFFFFF8))
                {
                  uint64_t v77 = v76;
                  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v61 + 152), (unint64_t *)&v77, 0, memory_order_release, memory_order_relaxed);
                  BOOL v39 = v77 == v76;
                  uint64_t v76 = v77;
                  if (v39) {
                    goto LABEL_134;
                  }
                }
                uint64_t v60 = *v74;
                if (!*v74) {
                  uint64_t v60 = _dispatch_wait_for_enqueuer(v74);
                }
                uint64_t *v75 = v60;
              }
LABEL_134:
              if (*(void *)(v17 + 40)) {
                _dispatch_return_to_kernel();
              }
              v62 = *(void (***)(uint64_t))(v17 + 192);
              if (v62) {
                (*v62)(a1);
              }
              uint64_t v63 = *(void *)v59;
              if (*(void *)v59 >= 0x1000uLL)
              {
                if (*(void *)(v63 + 40) == 1) {
                  (*(void (**)(uint64_t, void, void))(v63 + 48))(v59, 0, v119);
                }
                else {
                  (*(void (**)(uint64_t, uint64_t, void))(v63 + 64))(v59, a2, v120);
                }
LABEL_191:
                if (v62) {
                  v62[1](a1);
                }
                if (!v60) {
                  goto LABEL_120;
                }
                unsigned int v53 = *(unsigned __int8 *)(a1 + 100);
                uint64_t v59 = v60;
                if ((*(_DWORD *)(a1 + 60) & 7u) > v53) {
                  goto LABEL_120;
                }
                continue;
              }
              break;
            }
            if ((v14 & 0x1000000) != 0)
            {
              v64 = (void *)MEMORY[0x18C121B40]();
              uint64_t v63 = *(void *)v59;
            }
            else
            {
              v64 = 0;
            }
            uint64_t v65 = *(void *)(v59 + 24);
            if ((v63 & 4) != 0) {
              *(void *)(v59 + 24) = -1;
            }
            uint64_t v66 = *(void *)(v59 + 8);
            if (v66 == -1)
            {
              unint64_t v69 = 0;
            }
            else
            {
              uint64_t v67 = *(void *)(v17 + 200);
              if (((v67 >> 8) & 0xF) != 0) {
                uint64_t v68 = 256 << ((BYTE1(v67) & 0xFu) - 1);
              }
              else {
                uint64_t v68 = 0;
              }
              unint64_t v69 = v68 & 0xFFFFFFFFFFFFFF00 | *(void *)(v17 + 200);
              if ((v66 & 0xFFFFFF) != 0)
              {
                if ((v66 & 0xFFFFFFuLL) >= (v68 & 0xFFFFFF00)
                  && ((v67 & 0x44000000) != 0 || (*(void *)(v59 + 8) & 0x10000000) != 0))
                {
                  unint64_t v69 = v66 & 0xFFFFFF;
                }
              }
              else if ((unsigned __int16)v67 >> 12)
              {
                unint64_t v69 = (256 << (((unsigned __int16)v67 >> 12) - 1)) | 0xFF;
              }
            }
            uint64_t v71 = v63 & 4;
            unint64_t v72 = v69 & 0xFFFFFFFF02FFFFFFLL;
            uint64_t v73 = *(void *)(v17 + 32);
            if ((v73 & 0x1000000) != 0)
            {
              if (!v72)
              {
                unint64_t v72 = v73 & 0xFFFFFFFFFEFFFFFFLL;
                goto LABEL_174;
              }
LABEL_180:
              _dispatch_set_priority_and_voucher_slow(v72, v65, v71 | 2);
            }
            else
            {
              if (v72 == (v73 & 0xFFFFFFFF77FFFFFFLL)) {
                goto LABEL_162;
              }
LABEL_174:
              if (v72) {
                goto LABEL_180;
              }
LABEL_162:
              if (v65 != -1)
              {
                if (*(void *)(v17 + 224) != v65)
                {
                  unint64_t v72 = 0;
                  goto LABEL_180;
                }
                if ((v63 & 4) != 0 && v65)
                {
                  if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v65 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)-[OS_voucher release](); {
LABEL_182:
                  }
                  uint64_t v78 = *(void *)(v17 + 176);
                  if (v78) {
                    int v79 = *(_DWORD *)(v78 + 8) + 1;
                  }
                  else {
                    int v79 = 1;
                  }
                  uint64_t v71 = v59;
                  if (v79 <= _dispatch_continuation_cache_limit)
                  {
                    uint64_t v71 = 0;
                    *(void *)(v59 + 16) = v78;
                    *(_DWORD *)(v59 + 8) = v79;
                    *(void *)(v17 + 176) = v59;
                  }
LABEL_187:
                  if ((v63 & 8) != 0)
                  {
                    v80 = *(NSObject **)(v59 + 48);
                    uint64_t v81 = *((void *)v80->isa + 5);
                    if (v81 != 514) {
                      _dispatch_queue_override_invoke_cold_1(v81);
                    }
                    _dispatch_client_callout(*(void *)(v59 + 40), *(uint64_t (**)(void))(v59 + 32));
                    dispatch_group_leave(v80);
                    if (!v71) {
                      goto LABEL_189;
                    }
                  }
                  else
                  {
                    _dispatch_client_callout(*(void *)(v59 + 40), *(uint64_t (**)(void))(v59 + 32));
                    if (!v71)
                    {
LABEL_189:
                      if (!v64) {
                        goto LABEL_191;
                      }
                      goto LABEL_190;
                    }
                  }
                  _dispatch_continuation_free_to_cache_limit(v71);
                  if (!v64) {
                    goto LABEL_191;
                  }
LABEL_190:
                  goto LABEL_191;
                }
              }
            }
            if ((v63 & 4) != 0) {
              goto LABEL_182;
            }
            goto LABEL_187;
          }
        }
        atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
        goto LABEL_120;
      }
    }
    v84 = 0;
    uint64_t v5 = v118 & 1 | 0x40020000000000;
    _OWORD *v115 = v122;
    *(void *)(v17 + 192) = 0;
LABEL_207:
    int v15 = v14 & 0x1000002;
  }
  if ((unint64_t)v84 + 1 > 1)
  {
LABEL_225:
    if ((v14 & 0x40000) == 0)
    {
LABEL_226:
      unint64_t v92 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(void *)(v92 + 200) = *(void *)(v92 + 200) & 0xF0000 | v117;
    }
  }
  else
  {
    unint64_t v85 = *(void *)(a1 + 56);
    do
    {
      unint64_t v86 = v85;
      unint64_t v87 = v85 - v5;
      unint64_t v88 = v87 & 0xFFFFFFF700000001;
      if (!(v86 >> 55))
      {
        if ((v86 & 0x8000000000) != 0)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
          v84 = *(__objc2_class ***)(v17 + 160);
          if ((v116 & 1) != 0 || ((uint64_t)(*v84)[1].isa & 0x10000) != 0) {
            goto LABEL_27;
          }
          goto LABEL_225;
        }
        if (v84) {
          unint64_t v88 = v87 & 0xFFFFFF7700000001 | 0x8000000000;
        }
        else {
          unint64_t v88 = v87 & 0xFFFFFFF000000001;
        }
      }
      unint64_t v85 = v86;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v85, v88, memory_order_release, memory_order_relaxed);
    }
    while (v85 != v86);
    if ((~v86 & 0x1800000000) == 0)
    {
      uint64_t v89 = HIDWORD(v86) & 7;
      unint64_t v90 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v91 = *(_DWORD *)(v90 + 200);
      if ((HIWORD(v91) & 0xF) < v89)
      {
        uint64_t v5 = 0;
        v84 = 0;
        *(void *)(v90 + 200) = v91 & 0xFFF0FFFF | (v89 << 16);
        goto LABEL_225;
      }
    }
    uint64_t v5 = 0;
    v84 = 0;
    if ((v14 & 0x40000) == 0) {
      goto LABEL_226;
    }
  }
  if (v84)
  {
    _dispatch_queue_invoke_finish((atomic_ullong *)a1, a2, v84, v5);
    return;
  }
LABEL_260:
  _os_object_release_internal_n((void *)a1, (const char *)2);
}

void _dispatch_workloop_barrier_complete(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = 0;
  unint64_t v6 = a2 << 32;
  unint64_t v7 = (void *)(a1 + 192);
LABEL_2:
  uint64_t v8 = v7;
  uint64_t v9 = 6;
  do
  {
    if (*v8)
    {
      int v10 = (void *)*(v8 - 6);
      if (!v10) {
        int v10 = (void *)_dispatch_wait_for_enqueuer(v8 - 6);
      }
      if (*v10 <= 0xFFFuLL && (*v10 & 0x81) != 0)
      {
        _dispatch_workloop_drain_barrier_waiter(a1, (uint64_t)v10, v9, a3, 0);
        return;
      }
      uint64_t v5 = 1;
    }
    --v8;
    --v9;
  }
  while (v9);
  if (v5 && (a3 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    a3 |= 1u;
  }
LABEL_15:
  unint64_t v12 = *(void *)(a1 + 56);
  while (1)
  {
    if ((~v12 & 0x2000000002) == 0 && (v12 & 0x800000001) != 0)
    {
      _dispatch_event_loop_ensure_ownership(a1);
      atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 56), 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
      goto LABEL_15;
    }
    unint64_t v14 = v12 & 0xFFFFFFF8FFFFFFFFLL | v6;
    if (v12 & 0x1000000000 | v6 & 0x1000000000) {
      v14 |= 0x800000000uLL;
    }
    unint64_t v15 = (v12 & 0x700000000) < v6 ? v14 : v12;
    unint64_t v16 = (v15 & 0xFFFFFFF700000001) - 0x40020000000000;
    if (v5) {
      break;
    }
    if ((v12 & 0x8000000000) != 0)
    {
      atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
      goto LABEL_2;
    }
    if ((v12 & 0x2000000000) != 0)
    {
      unint64_t v17 = v16 & 0xFFFFFFF000000000;
      unint64_t v18 = v12;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v18, v17, memory_order_release, memory_order_relaxed);
      if (v18 == v12) {
        goto LABEL_53;
      }
LABEL_32:
      unint64_t v12 = v18;
    }
    else
    {
      unint64_t v17 = v16 & 0xFFFFFFF000000001;
      unint64_t v19 = v12;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v19, v17, memory_order_release, memory_order_relaxed);
      if (v19 == v12) {
        goto LABEL_43;
      }
      unint64_t v12 = v19;
    }
  }
  unint64_t v17 = v16 | 1;
  unint64_t v18 = v12;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v18, v17, memory_order_release, memory_order_relaxed);
  if (v18 != v12) {
    goto LABEL_32;
  }
  if ((v12 & 0x2000000000) != 0)
  {
LABEL_53:
    if (v12 & 3) != 2 || (v17)
    {
      _dispatch_event_loop_end_ownership(a1, v12, v17, a3);
      return;
    }
    goto LABEL_55;
  }
LABEL_43:
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((~v12 & 0x1800000000) == 0)
  {
    uint64_t v21 = HIDWORD(v12) & 7;
    unsigned int v22 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v22) & 0xF) < v21) {
      *(void *)(StatusReg + 200) = v22 & 0xFFF0FFFF | (v21 << 16);
    }
  }
  if (!v5) {
    goto LABEL_55;
  }
  if ((v17 ^ v12))
  {
    if ((v17 & 0x2000000000) != 0)
    {
      uint64_t v23 = a1;
      uint64_t v24 = v17;
      unsigned int v25 = 1;
LABEL_50:
      _dispatch_event_loop_poke(v23, v24, v25);
      return;
    }
    uint64_t v26 = *(void (**)(void))(**(void **)(a1 + 24) + 88);
    v26();
    return;
  }
  if ((v17 & 0xFF80004000000000) != 0 || (v17 & 0xFFFFFFFD) == 0)
  {
LABEL_55:
    if (a3)
    {
      _os_object_release_internal_n((void *)a1, (const char *)2);
    }
    return;
  }
  if ((v17 & 0x2000000000) != 0)
  {
    uint64_t v23 = a1;
    uint64_t v24 = v17;
    unsigned int v25 = a3 | 0x80000000;
    goto LABEL_50;
  }

  _dispatch_queue_wakeup_with_override_slow(a1, v17, a3);
}

void _dispatch_workloop_push(uint64_t a1, void *a2, unsigned int a3)
{
  if (*a2 > 0xFFFuLL || (*a2 & 0x81) == 0)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 84);
    unsigned int v5 = (v4 >> 8) & 0xF;
    int v6 = (unsigned __int16)v4 >> 12;
    if (a3) {
      int v6 = a3;
    }
    if (v5 > a3) {
      int v6 = v5;
    }
    a2[2] = 0;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(StatusReg + 976) = a1 + 8 * (v6 - 1) + 152;
    unint64_t v8 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 8 * (v6 - 1) + 152), (unint64_t)a2, memory_order_release);
    if (v8)
    {
      *(void *)(v8 + 16) = a2;
      *(void *)(StatusReg + 976) = 0;
    }
    else
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed);
      *(void *)(a1 + 8 * (v6 - 1) + 104) = a2;
      *(void *)(StatusReg + 976) = 0;
      _dispatch_workloop_wakeup();
    }
  }
  else
  {
    _dispatch_workloop_push_waiter(a1, (unint64_t)a2, a3);
  }
}

void _dispatch_workloop_push_waiter(uint64_t a1, unint64_t a2, unsigned int a3)
{
  LODWORD(v3) = (__clz(__rbit32((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF)) + 1) & 0xF;
  if (((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF) == 0) {
    LODWORD(v3) = 0;
  }
  if (v3 <= a3) {
    LODWORD(v3) = a3;
  }
  if (v3) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = 4;
  }
  *(void *)(a2 + 16) = 0;
  unsigned int v4 = (atomic_ullong *)(a1 + 8 * ((int)v3 - 1) + 152);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = v4;
  unint64_t v6 = atomic_exchange_explicit(v4, a2, memory_order_release);
  if (v6)
  {
    *(void *)(v6 + 16) = a2;
    *(void *)(StatusReg + 976) = 0;
    return;
  }
  uint64_t v7 = a1 + 8 * ((int)v3 - 1);
  *(void *)(v7 + 104) = a2;
  *(void *)(StatusReg + 976) = 0;
  uint64_t v8 = *(void *)a2;
  if ((*(void *)a2 & 0x80) != 0
    && ((unint64_t v9 = *(void *)(a1 + 24), v9 < (unint64_t)&_dispatch_root_queues)
     || v9 >= (unint64_t)&_dispatch_queue_serial_numbers))
  {
    *(void *)(a2 + 56) = a1;
    *(void *)a2 = v8 & 0xFFFFFFFFFFFFFF7FLL;
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed);
    _dispatch_workloop_wakeup();
  }
  else
  {
    int v10 = (unint64_t *)(a2 + 16);
    int v11 = (unint64_t *)(v7 + 104);
    unint64_t v12 = *(void *)(a1 + 56);
    unint64_t v13 = v3 << 32;
    uint64_t v14 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
    do
    {
      unint64_t v15 = v12;
      unint64_t v16 = v12 & 0xFFFFFFF8FFFFFFFFLL | v13;
      if (v12 & 0x1000000000 | v13 & 0x1000000000) {
        v16 |= 0x800000000uLL;
      }
      if ((v12 & 0x700000000) < v13) {
        unint64_t v17 = v16;
      }
      else {
        unint64_t v17 = v12;
      }
      uint64_t v18 = v17 | 0x8000000000;
      uint64_t v19 = v14 | v17 & 0x7700000001;
      if ((v12 & 0x40FFFFFFFDLL) != 0) {
        uint64_t v19 = v18;
      }
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v12, v19, memory_order_release, memory_order_relaxed);
    }
    while (v12 != v15);
    if ((v19 & 0x2000000000) != 0 && *(void *)(a2 + 48) != -4) {
      *(unsigned char *)(a2 + 106) = *(unsigned char *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
    }
    if (((v19 ^ v15) & 0x40000000000000) != 0)
    {
      if ((*(unsigned char *)(a2 + 106) & 4) == 0) {
        goto LABEL_39;
      }
      unint64_t v20 = *v11;
      if (!*v11)
      {
        unint64_t v29 = a2;
        uint64_t v30 = a1;
        uint64_t v31 = a1 + 8 * ((int)v3 - 1) + 152;
        uint64_t v33 = v11;
        uint64_t v28 = (unint64_t *)(a2 + 16);
        uint64_t v26 = _dispatch_wait_for_enqueuer(v11);
        int v10 = v28;
        unsigned int v4 = (atomic_ullong *)v31;
        int v11 = v33;
        unint64_t v20 = v26;
        a2 = v29;
        a1 = v30;
      }
      if (v20 == a2)
      {
        uint64_t v21 = v10;
        uint64_t v32 = v11;
        *(unsigned char *)(a2 + 106) |= 8u;
        if ((*(unsigned char *)a2 & 0x80) != 0) {
          *(void *)(a2 + 56) = a1;
        }
        unint64_t v22 = *v10;
        *int v11 = *v21;
        if (!v22)
        {
          atomic_ullong v23 = *v4;
          while ((v23 & 0xFFFFFFFFFFFFFFF8) == a2)
          {
            atomic_ullong v24 = v23;
            atomic_compare_exchange_strong_explicit(v4, (unint64_t *)&v24, 0, memory_order_release, memory_order_relaxed);
            BOOL v25 = v24 == v23;
            atomic_ullong v23 = v24;
            if (v25) {
              return;
            }
          }
          uint64_t v27 = *v21;
          if (!*v21) {
            uint64_t v27 = _dispatch_wait_for_enqueuer(v21);
          }
          *uint64_t v32 = v27;
        }
      }
      else
      {
LABEL_39:
        _dispatch_workloop_barrier_complete();
      }
    }
    else
    {
      if (((v19 ^ v15) & 0x700000000) == 0 || (v19 & 0xFF80004000000000) != 0) {
        return;
      }
      if ((v19 & 1) == 0)
      {
        if ((v19 & 0x2000000000) != 0 || (v19 & 0xFFFFFFFC) == 0) {
          return;
        }
        goto LABEL_32;
      }
      if ((v19 & 0x2000000000) == 0)
      {
LABEL_32:
        _dispatch_queue_wakeup_with_override_slow();
        return;
      }
      _dispatch_event_loop_poke(a1, v19, 0x80000000);
    }
  }
}

uint64_t dispatch_thread_get_current_override_qos_floor()
{
  unsigned int v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
  unsigned int v1 = (v0 >> 8) & 0xF;
  unsigned int v2 = (unsigned __int16)v0 >> 12;
  unsigned int v3 = HIWORD(v0) & 0xF;
  if (v1 <= v2) {
    unsigned int v1 = v2;
  }
  if (v1 > v3) {
    unsigned int v3 = v1;
  }
  unsigned int v4 = v3 - 1;
  uint64_t result = 0;
  uint64_t v6 = 0x2100000001;
  switch(v4)
  {
    case 0u:
      return 0x500000001;
    case 1u:
      return 0x900000001;
    case 2u:
      return 0x1100000001;
    case 3u:
      return 0x1500000001;
    case 4u:
      return 0x1900000001;
    case 5u:
      return v6;
    case 0xEu:
      return result;
    default:
      return 1;
  }
}

uint64_t dispatch_thread_override_self(int a1)
{
  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  unsigned int v1 = v2 >> 2;
  unsigned int v3 = 6;
  switch(v1)
  {
    case 0u:
      unsigned int v3 = 1;
      break;
    case 1u:
      unsigned int v3 = 2;
      break;
    case 3u:
    case 4u:
    case 5u:
      unsigned int v3 = v1;
      break;
    case 7u:
      break;
    default:
      unsigned int v3 = 0;
      break;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  _pthread_workqueue_override_start_direct();
  unsigned int v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3) {
    *(void *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  }
  return 0;
}

uint64_t dispatch_lock_override_start_with_debounce()
{
  return _pthread_workqueue_override_start_direct_check_owner();
}

uint64_t dispatch_lock_override_end(int a1)
{
  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  unsigned int v1 = v2 >> 2;
  if (v1 > 7) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = dword_18A97E320[v1];
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3) {
    *(void *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  }
  return 0;
}

void _dispatch_queue_wakeup(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a4 && (a3 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      return;
    }
    a3 |= 1u;
  }
  if ((a3 & 4) != 0)
  {
    unsigned int v28 = *(_DWORD *)(a1 + 84);
    unsigned int v29 = (unsigned __int16)v28 >> 12;
    if (a2) {
      unsigned int v29 = a2;
    }
    unsigned int v30 = (v28 >> 8) & 0xF;
    if (v29 <= v30) {
      uint64_t v31 = (atomic_ullong *)v30;
    }
    else {
      uint64_t v31 = (atomic_ullong *)v29;
    }
    _dispatch_lane_class_barrier_complete((atomic_ullong *)a1, v31, a3, (__objc2_class **)a4, 0x40020000000000);
    return;
  }
  if (!a4)
  {
    if (!a2) {
      goto LABEL_72;
    }
    unint64_t v20 = *(void *)(a1 + 56);
    unint64_t v21 = a2 << 32;
    do
    {
      if ((v20 & 0x40FFFFFFFDLL) == 0) {
        goto LABEL_72;
      }
      unint64_t v22 = v20;
      unint64_t v23 = v20 & 0x700000000;
      unint64_t v24 = v22 & 0xFFFFFFF8FFFFFFFFLL | v21;
      if (v22 & 0x1000000000 | v21 & 0x1000000000) {
        v24 |= 0x800000000uLL;
      }
      unint64_t v25 = v23 < v21 ? v24 : v22;
      BOOL v26 = (v22 & 0xFF80002000000000) == 0x2000000000 && (unint64_t)((v22 & 0x4000000000) == 0);
      unint64_t v18 = v25 | v26;
      if ((v25 | v26) == v22) {
        goto LABEL_72;
      }
      unint64_t v20 = v22;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v20, v18, memory_order_relaxed, memory_order_relaxed);
    }
    while (v20 != v22);
    unint64_t v19 = v18 ^ v22;
    uint64_t v4 = 1;
    if (a3 & 1) == 0 && (v19)
    {
      if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) <= 0)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
        goto LABEL_78;
      }
      a3 |= 1u;
      uint64_t v4 = 1;
    }
    a4 = 1;
    goto LABEL_59;
  }
  uint64_t v4 = 0x4000000000;
  if ((__objc2_class **)a4 != &_dispatch_mgr_q) {
    uint64_t v4 = 1;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 84);
  unsigned int v6 = (unsigned __int16)v5 >> 12;
  if (a2) {
    unsigned int v6 = a2;
  }
  LODWORD(v7) = (v5 >> 8) & 0xF;
  if (v6 <= v7) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = v7 << 32;
  do
  {
    unint64_t v10 = v8;
    unint64_t v11 = v8 & 0x700000000;
    unint64_t v12 = v10 & 0xFFFFFFF8FFFFFFFFLL | v9;
    if (v10 & 0x1000000000 | v9 & 0x1000000000) {
      v12 |= 0x800000000uLL;
    }
    if (v11 < v9) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v10;
    }
    if ((v10 & 0x180000000000000) == 0x80000000000000) {
      unint64_t v14 = v13 & 0xFF7FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if ((a3 & 0x20) != 0) {
      unint64_t v13 = v14;
    }
    unint64_t v15 = (unint64_t)((v10 & 0xFFFFFFFC) == 0) << 38;
    if ((__objc2_class **)a4 != &_dispatch_mgr_q) {
      unint64_t v15 = 1;
    }
    unint64_t v16 = v13 | v15;
    if (v13 >> 55) {
      unint64_t v17 = v13;
    }
    else {
      unint64_t v17 = v16;
    }
    if ((v10 & 0x4000000001) != 0) {
      unint64_t v18 = v13;
    }
    else {
      unint64_t v18 = v17;
    }
    if ((a3 & 2) != 0)
    {
      v18 |= 0x8000000000uLL;
    }
    else if (v18 == v10)
    {
      goto LABEL_72;
    }
    unint64_t v8 = v10;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v8, v18, memory_order_release, memory_order_relaxed);
  }
  while (v8 != v10);
  unint64_t v19 = v10 ^ v18;
LABEL_59:
  if ((v19 & v4) != 0)
  {
    if (a4 == 1) {
      a4 = *(void *)(a1 + 24);
    }
    if ((v18 & 0x2000000000) != 0)
    {
      unsigned int v27 = 1;
LABEL_64:
      _dispatch_event_loop_poke(a1, v18, v27);
      return;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a4 + 88))(a4, a1, HIDWORD(v18) & 7);
    return;
  }
  if ((v19 & 0x700000000) == 0)
  {
LABEL_72:
    if (a3) {
      _os_object_release_internal_n((void *)a1, (const char *)2);
    }
    return;
  }
LABEL_78:
  if ((v18 & 0xFF80004000000000) != 0 || (v18 & 0xFFFFFFFD) == 0) {
    goto LABEL_72;
  }
  if ((v18 & 0x2000000000) != 0)
  {
    unsigned int v27 = a3 | 0x80000000;
    goto LABEL_64;
  }
  _dispatch_queue_wakeup_with_override_slow(a1, v18, a3);
}

void _dispatch_lane_class_barrier_complete(atomic_ullong *a1, atomic_ullong *a2, int a3, __objc2_class **a4, uint64_t a5)
{
  if (a4 == &_dispatch_mgr_q)
  {
    char v10 = 0;
    uint64_t v11 = 0x4000000000;
    a4 = &_dispatch_mgr_q;
  }
  else if (a4)
  {
    char v10 = 0;
    if (a4 == (__objc2_class **)1) {
      a4 = (__objc2_class **)a1[3];
    }
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    char v10 = 1;
  }
  unint64_t v12 = (void)a2 << 32;
LABEL_9:
  unint64_t v13 = a1[7];
  do
  {
    if ((~v13 & 0x2000000002) == 0 && (v13 & 0x800000001) != 0)
    {
      int v32 = a3;
      _dispatch_event_loop_ensure_ownership((uint64_t)a1);
      a3 = v32;
      atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFF7FFFFFFFDLL, memory_order_relaxed);
      goto LABEL_9;
    }
    unint64_t v14 = v13 - a5;
    unint64_t v15 = (v13 - a5) & 0xFFFFFFF8FFFFFFFFLL | v12;
    if ((v13 - a5) & 0x1000000000 | v12 & 0x1000000000) {
      v15 |= 0x800000000uLL;
    }
    if (((v13 - a5) & 0x700000000) < v12) {
      unint64_t v16 = v15;
    }
    else {
      unint64_t v16 = v13 - a5;
    }
    unint64_t v17 = v16 & 0xFFFFFFF700000001;
    if (v13 >> 55)
    {
      unint64_t v18 = v16 & 0xFFFFFFF700000000;
      if ((v13 & 0x2000000000) == 0) {
        unint64_t v18 = v17;
      }
    }
    else if (v10)
    {
      if ((v13 & 0x8000000000) != 0)
      {
        atomic_fetch_xor_explicit(a1 + 7, 0x8000000000uLL, memory_order_acquire);
        uint64_t v28 = a3 | 4u;
        superclass = *(__objc2_class **)(*a1 + 80);
        unsigned int v30 = (__objc2_class **)a1;
        uint64_t v31 = a2;
        goto LABEL_54;
      }
      unint64_t v18 = v16 & 0xFFFFFFF000000001;
    }
    else
    {
      if ((v13 & 0x4000000001) != 0) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v11;
      }
      unint64_t v18 = v17 | v19;
    }
    unint64_t v20 = v13;
    atomic_compare_exchange_strong_explicit(a1 + 7, &v20, v18, memory_order_release, memory_order_relaxed);
    BOOL v21 = v20 == v13;
    unint64_t v13 = v20;
  }
  while (!v21);
  if ((v14 & 0x2000000000) != 0)
  {
    if (v14 & 2) == 0 || ((v18 | v14))
    {
      _dispatch_event_loop_end_ownership((uint64_t)a1, v14, v18, a3);
      return;
    }
LABEL_44:
    if (a3)
    {
      _os_object_release_internal_n(a1, (const char *)2);
    }
    return;
  }
  if ((~v14 & 0x1800000000) == 0)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v23 = HIDWORD(v14) & 7;
    unsigned int v24 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v24) & 0xF) < v23) {
      *(void *)(StatusReg + 200) = v24 & 0xFFF0FFFF | (v23 << 16);
    }
  }
  if (!a4) {
    goto LABEL_44;
  }
  if (((v18 ^ v14) & v11) != 0)
  {
    if ((v18 & 0x2000000000) != 0)
    {
      uint64_t v25 = (uint64_t)a1;
      uint64_t v26 = v18;
      unsigned int v27 = 1;
      goto LABEL_39;
    }
    superclass = (*a4)[2].superclass;
    uint64_t v28 = HIDWORD(v18) & 7;
    unsigned int v30 = a4;
    uint64_t v31 = a1;
LABEL_54:
    ((void (*)(__objc2_class **, atomic_ullong *, uint64_t))superclass)(v30, v31, v28);
    return;
  }
  if ((v18 & 0xFF80004000000000) != 0 || (v18 & 0xFFFFFFFD) == 0) {
    goto LABEL_44;
  }
  if ((v18 & 0x2000000000) != 0)
  {
    unsigned int v27 = a3 | 0x80000000;
    uint64_t v25 = (uint64_t)a1;
    uint64_t v26 = v18;
LABEL_39:
    _dispatch_event_loop_poke(v25, v26, v27);
  }
  else
  {
    _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v18, a3);
  }
}

void _dispatch_lane_wakeup(uint64_t a1, atomic_ullong *a2, uint64_t a3)
{
  if ((a3 & 4) != 0) {
    _dispatch_lane_barrier_complete(a1, a2, a3);
  }
  else {
    _dispatch_queue_wakeup(a1, (uint64_t)a2, a3, *(void *)(a1 + 48) != 0);
  }
}

void _dispatch_lane_barrier_complete(uint64_t a1, atomic_ullong *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 48) || *(void *)(a1 + 56) >> 55)
  {
    uint64_t v6 = 0;
LABEL_34:
    uint64_t v11 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000;
    _dispatch_lane_class_barrier_complete((atomic_ullong *)a1, a2, a3, (__objc2_class **)v6, v11);
    return;
  }
  uint64_t v7 = *(void *)(a1 + 104);
  if (!v7) {
    uint64_t v7 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
  }
  unsigned int v8 = *(unsigned __int16 *)(a1 + 80);
  unint64_t v9 = *(void *)v7;
  if (v8 == 1)
  {
    if (v9 <= 0xFFF && (*(void *)v7 & 0x81) != 0) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }
  if (v9 < 0x1000)
  {
    if ((v9 & 2) != 0)
    {
      if ((v9 & 0x81) != 0)
      {
LABEL_21:
        _dispatch_lane_drain_barrier_waiter((atomic_ullong *)a1, v7, a3, 0);
        return;
      }
LABEL_29:
      if ((a3 & 1) == 0)
      {
        if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) <= 0)
        {
          qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          return;
        }
        LODWORD(a3) = a3 | 1;
      }
      uint64_t v6 = 1;
      goto LABEL_34;
    }
    if (v8 < 2) {
      goto LABEL_29;
    }
  }
  else if ((*(void *)(v9 + 40) & 0xF0) == 0x10)
  {
    if ((*(_DWORD *)(v7 + 80) & 0x80000) != 0 || v8 <= 1 || (*(_DWORD *)(v7 + 80) & 0x80000) != 0) {
      goto LABEL_29;
    }
  }
  else if (v8 <= 1)
  {
    goto LABEL_29;
  }

  _dispatch_lane_drain_non_barriers((atomic_ullong *)a1, v7, a3);
}

void _dispatch_lane_push(uint64_t a1, void *a2, unsigned int a3)
{
  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0)
  {
    _dispatch_lane_push_waiter(a1, (unint64_t)a2, a3);
    return;
  }
  if (((*(_DWORD *)(a1 + 84) >> 8) & 0xFu) >= a3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a3;
  }
  a2[2] = 0;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = a1 + 48;
  unint64_t v6 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t)a2, memory_order_release);
  if (v6)
  {
    if ((*(_DWORD *)(a1 + 60) & 7) != 0 && (*(_DWORD *)(a1 + 60) & 7u) >= v4)
    {
      *(void *)(v6 + 16) = a2;
      *(void *)(StatusReg + 976) = 0;
      return;
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed);
    unsigned int v8 = (void *)(v6 + 16);
    uint64_t v9 = 1;
  }
  else
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed);
    unsigned int v8 = (void *)(a1 + 104);
    uint64_t v9 = 3;
  }
  *unsigned int v8 = a2;
  *(void *)(StatusReg + 976) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v4, v9);
}

void _dispatch_lane_push_waiter(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(void *)(a2 + 48) == -4) {
    unsigned int v3 = (atomic_ullong *)a3;
  }
  else {
    unsigned int v3 = 0;
  }
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = (atomic_ullong *)(a1 + 48);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = a1 + 48;
  unint64_t v6 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 48), a2, memory_order_release);
  if (v6)
  {
    *(void *)(v6 + 16) = a2;
    *(void *)(StatusReg + 976) = 0;
    if (v3)
    {
      unint64_t v10 = *(void *)(a1 + 56);
      unint64_t v11 = (void)v3 << 32;
      while (1)
      {
        unint64_t v12 = v10 & 0xFFFFFFF8FFFFFFFFLL | v11;
        if (v10 & 0x1000000000 | v11 & 0x1000000000) {
          v12 |= 0x800000000uLL;
        }
        unint64_t v13 = (v10 & 0x700000000) < v11 ? v12 : v10;
        if (v10 == v13) {
          break;
        }
        unint64_t v14 = v10;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v14, v13, memory_order_relaxed, memory_order_relaxed);
        BOOL v15 = v14 == v10;
        unint64_t v10 = v14;
        if (v15)
        {
          if ((v13 & 0xFF80004000000000) != 0) {
            return;
          }
          if (v13)
          {
            if ((v13 & 0x2000000000) == 0) {
              goto LABEL_24;
            }
            goto LABEL_59;
          }
          if ((v13 & 0x2000000000) != 0 || (v13 & 0xFFFFFFFC) == 0) {
            return;
          }
          goto LABEL_24;
        }
      }
    }
    return;
  }
  *(void *)(a1 + 104) = a2;
  *(void *)(StatusReg + 976) = 0;
  int v7 = *(_DWORD *)(a1 + 80);
  if ((v7 & 0x40000) != 0)
  {
    int v7 = *(_DWORD *)(a1 + 80);
    if ((v7 & 0x1000000) == 0)
    {
      uint64_t v8 = *(void *)a2;
      goto LABEL_70;
    }
  }
  uint64_t v8 = *(void *)a2;
  if ((*(void *)a2 & 0x80) != 0)
  {
    unint64_t v9 = *(void *)(a1 + 56);
    int v7 = *(_DWORD *)(a1 + 80);
    if ((v7 & 0x1000000) == 0)
    {
      if ((v9 & 0x3000000000) == 0) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(a1 + 24);
      if (v16 >= (unint64_t)&_dispatch_root_queues && v16 < (unint64_t)&_dispatch_queue_serial_numbers) {
        goto LABEL_31;
      }
    }
LABEL_70:
    *(void *)a2 = v8 & 0xFFFFFFFFFFFFFF7FLL;
    *(void *)(a2 + 56) = a1;
    uint64_t v28 = *(void (**)(void))(*(void *)a1 + 80);
    v28();
    return;
  }
  unint64_t v9 = *(void *)(a1 + 56);
LABEL_31:
  unint64_t v17 = (uint64_t *)(a2 + 16);
  unint64_t v18 = ((unint64_t)(unsigned __int16)v7 << 41) - 0x20000000000;
  unint64_t v19 = (void)v3 << 32;
  uint64_t v20 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002;
  do
  {
    unint64_t v21 = v9;
    unint64_t v22 = v9 & 0x700000000;
    unint64_t v23 = v9 & 0xFFFFFFF8FFFFFFFFLL | v19;
    if ((v23 & 0x1000000000) != 0) {
      v23 |= 0x800000000uLL;
    }
    if (v22 >= v19) {
      unint64_t v23 = v21;
    }
    unint64_t v24 = v23 | 0x8000000000;
    if ((v21 & 0xFFE00000FFFFFFFCLL) == 0
      && ((v21 & 0x2000000000) == 0 || (v21 & 0x4000000001) == 0)
      && ((v21 & 0x10000000000) != 0 || !((v18 + v23) >> 53)))
    {
      unint64_t v24 = v20 | v23 & 0x7700000001;
    }
    unint64_t v9 = v21;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v9, v24, memory_order_release, memory_order_relaxed);
  }
  while (v9 != v21);
  if ((v21 & 0x2000000000) != 0 && *(void *)(a2 + 48) != -4) {
    *(unsigned char *)(a2 + 106) = *(unsigned char *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
  }
  if (((v24 ^ v21) & 0x40000000000000) != 0)
  {
    if ((*(unsigned char *)(a2 + 106) & 4) != 0 && *(void *)(a1 + 104) == a2)
    {
      *(unsigned char *)(a2 + 106) |= 8u;
      if ((*(unsigned char *)a2 & 0x80) != 0) {
        *(void *)(a2 + 56) = a1;
      }
      uint64_t v25 = *v17;
      *(void *)(a1 + 104) = *v17;
      if (!v25)
      {
        atomic_ullong v26 = *v4;
        while ((v26 & 0xFFFFFFFFFFFFFFF8) == a2)
        {
          atomic_ullong v27 = v26;
          atomic_compare_exchange_strong_explicit(v4, (unint64_t *)&v27, 0, memory_order_release, memory_order_relaxed);
          BOOL v15 = v27 == v26;
          atomic_ullong v26 = v27;
          if (v15) {
            return;
          }
        }
        uint64_t v29 = *v17;
        if (!*v17) {
          uint64_t v29 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16));
        }
        *(void *)(a1 + 104) = v29;
      }
    }
    else
    {
      _dispatch_lane_barrier_complete(a1, v3, 0);
    }
  }
  else
  {
    if (((v24 ^ v21) & 0x700000000) == 0 || (v24 & 0xFF80004000000000) != 0) {
      return;
    }
    if (v24)
    {
      if ((v24 & 0x2000000000) != 0)
      {
        unint64_t v13 = v24;
LABEL_59:
        _dispatch_event_loop_poke(a1, v13, 0x80000000);
        return;
      }
    }
    else if ((v24 & 0x2000000000) != 0 || (v24 & 0xFFFFFFFC) == 0)
    {
      return;
    }
    unint64_t v13 = v24;
LABEL_24:
    _dispatch_queue_wakeup_with_override_slow(a1, v13, 0);
  }
}

void _dispatch_lane_concurrent_push(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if ((*(unsigned char *)(a1 + 87) & 8) != 0
    && *(void *)a2 >= 0x1000uLL
    && *(void *)(*(void *)a2 + 40) != 1
    && (*(void *)(*(void *)a2 + 40) != 19 || (_dispatch_source_is_timer((uint64_t)a2) & 1) == 0))
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
    qword_1E91199F0 = (uint64_t)a2;
    __break(1u);
    return;
  }
  if (!*(void *)(a1 + 48))
  {
    uint64_t v6 = *(void *)a2;
    if (*(void *)a2 <= 0xFFFuLL)
    {
      if ((v6 & 0x83) != 0) {
        goto LABEL_7;
      }
    }
    else if ((*(void *)(v6 + 40) & 0xF0) == 0x10 && (a2[20] & 0x80000) != 0)
    {
      goto LABEL_7;
    }
    uint64_t v7 = *(void *)(a1 + 56);
    while ((v7 & 0xFFE0018000000000) == 0)
    {
      uint64_t v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v8, v7 + 0x20000000000, memory_order_acquire, memory_order_acquire);
      BOOL v9 = v8 == v7;
      uint64_t v7 = v8;
      if (v9)
      {
        _dispatch_continuation_redirect_push((_DWORD *)a1, a2);
        return;
      }
    }
  }
LABEL_7:

  _dispatch_lane_push(a1, a2, a3);
}

_DWORD *_dispatch_continuation_redirect_push(_DWORD *result, void *a2)
{
  unsigned int v3 = result;
  if (*a2 >= 0x1000uLL && *(void *)(*a2 + 40) == 256)
  {
    if (!a2[5]) {
      a2[5] = (result[20] << 8) & 0x3000000;
    }
  }
  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v5 = *(void **)(StatusReg + 176);
    if (v5)
    {
      *(void *)(StatusReg + 176) = v5[2];
    }
    else
    {
      uint64_t result = _dispatch_continuation_alloc_from_heap();
      unsigned int v5 = result;
    }
    a2[2] = 0;
    *unsigned int v5 = &unk_1ED74FBE8;
    v5[4] = 0;
    v5[5] = (v3[20] << 8) & 0x3000000;
    v5[6] = v3;
    v5[7] = a2;
    v5[3] = -1;
    v5[1] = -1;
    if (v3[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(v3 + 2, 2u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      return result;
    }
  }
  uint64_t v6 = *(uint64_t (**)(void))(**((void **)v3 + 3) + 88);

  return (_DWORD *)v6();
}

uint64_t dispatch_async_swift_job(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a2 + 40) != 1) {
    dispatch_async_swift_job_cold_1(*(void *)(*(void *)a2 + 40));
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 88);

  return v2();
}

void _dispatch_channel_dispose(uint64_t *a1, unsigned char *a2)
{
  a1[11] = 0;
  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t _dispatch_channel_xref_dispose(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 88) + 24)) {
    BOOL v1 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1) {
    _dispatch_channel_xref_dispose_cold_1(a1);
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 80);

  return v2();
}

void _dispatch_channel_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 3) == 0) {
    *(void *)(a1 + 16) = -1985229329;
  }
  unsigned int v102 = a3;
  if ((a3 & 2) != 0)
  {
    int v4 = a3 & 0x40000;
    uint64_t v5 = 0x40020000000001;
    goto LABEL_5;
  }
  unint64_t v79 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v81 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  int v4 = a3 & 0x40000;
  unint64_t v82 = 0xFFE00000FFFFFFFCLL;
  if ((a3 & 0x40000) != 0)
  {
    uint64_t v83 = 0x4000000000;
  }
  else
  {
    unint64_t v82 = 0xFFE00040FFFFFFFCLL;
    uint64_t v83 = 1;
  }
  if (a3) {
    unint64_t v84 = 0xFFE00040FFFFFFFCLL;
  }
  else {
    unint64_t v84 = v82;
  }
  unsigned int v85 = *(_DWORD *)(StatusReg + 200);
  unsigned int v86 = (v85 >> 8) & 0xF;
  unsigned int v87 = (unsigned __int16)v85 >> 12;
  unsigned int v88 = HIWORD(v85) & 0xF;
  if (v86 <= v87) {
    unsigned int v86 = v87;
  }
  if (v86 > v88) {
    unsigned int v88 = v86;
  }
  while (2)
  {
    unint64_t v89 = *(void *)(a1 + 56);
    while ((v89 & v84) != 0)
    {
      if (a3) {
        goto LABEL_252;
      }
      unint64_t v96 = v89;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v96, v89 ^ v83, memory_order_acquire, memory_order_acquire);
      if (v96 == v89) {
        goto LABEL_252;
      }
      uint64_t v95 = a3;
      unint64_t v89 = v96;
LABEL_243:
      a3 = v95;
    }
    if ((v89 & 0x1000000000) != 0)
    {
      uint64_t v90 = HIDWORD(v89) & 7;
      if (v90 > v88)
      {
        _pthread_workqueue_override_start_direct();
        a3 = v102;
        unsigned int v97 = *(_DWORD *)(StatusReg + 200);
        unsigned int v88 = v90;
        if ((HIWORD(v97) & 0xF) < v90)
        {
          *(void *)(StatusReg + 200) = v97 & 0xFFF0FFFF | (v90 << 16);
          unsigned int v88 = v90;
        }
        continue;
      }
    }
    break;
  }
  uint64_t v91 = (v89 >> 40) & 1;
  if (!((v79 + v89) >> 53)) {
    LODWORD(v91) = 1;
  }
  if (v91) {
    uint64_t v92 = 0x60000000000000;
  }
  else {
    uint64_t v92 = 0x20000000000000;
  }
  unint64_t v93 = v89 & 0x7700000001 | v81 | v92;
  unint64_t v94 = v89;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v94, v93, memory_order_acquire, memory_order_acquire);
  if (v94 != v89)
  {
    uint64_t v95 = a3;
    unint64_t v89 = v94;
    goto LABEL_243;
  }
  uint64_t v98 = 0x60000000000000;
  if ((a3 & 1) == 0) {
    uint64_t v98 = v83 | 0x60000000000000;
  }
  unint64_t v99 = v93 & v98;
  uint64_t v100 = v89 & 0x3FFE0000000000;
  uint64_t v5 = v99 - v100;
  if (v99 == v100) {
    goto LABEL_252;
  }
LABEL_5:
  if (v4)
  {
    uint64_t v104 = 0;
    goto LABEL_21;
  }
  int v6 = *(_DWORD *)(a1 + 84);
  unint64_t v7 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(v7 + 200);
  if (v8)
  {
    unsigned int v9 = (unsigned __int16)v6 >> 12;
    unsigned int v10 = v6 & 0xFFF;
    if ((v6 & 0xFFF) != 0)
    {
      if (((unsigned __int16)v8 & 0xFFFu) > v10) {
        unsigned int v10 = v8 & 0xFFF;
      }
      if (v9 <= v10 >> 8) {
        int v11 = 0x40000000;
      }
      else {
        int v11 = 1140912128;
      }
      int v12 = v11 & v6;
      unsigned int v13 = v8 & 0x880F0000 | v10;
LABEL_19:
      unsigned int v14 = v13 | v12;
    }
    else
    {
      unsigned int v14 = v8 | 0x40000000;
      if ((v8 & 0xFFF) == 0) {
        unsigned int v14 = *(void *)(v7 + 200);
      }
      if (v9 > ((v14 >> 8) & 0xF))
      {
        unsigned int v13 = v14 & 0xFFFF0FFF;
        int v12 = v6 & 0x400F000;
        goto LABEL_19;
      }
    }
  }
  else
  {
    unsigned int v14 = v6 & 0xFFF0FFFF;
  }
  *(void *)(v7 + 200) = v14;
  uint64_t v104 = v8 & 0xFFF0FFFF;
LABEL_21:
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0) {
    atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  }
  int v15 = *(_DWORD *)(a1 + 80);
  unsigned int v16 = (v15 << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  if (((v15 << 8) & 0x3000000) == 0) {
    unsigned int v16 = a3 | 8;
  }
  int v17 = v16 & 0x1000002;
  unsigned int v106 = v16 & 0xFFFDFFFF;
  uint64_t v105 = v5;
  v103 = (atomic_ullong *)(a1 + 48);
  unint64_t v18 = (uint64_t *)(a1 + 104);
  unsigned int v110 = v16;
  unsigned int v107 = (v16 >> 21) & 1;
  unsigned int v108 = v16 & 0xFFFF0000;
  unint64_t v19 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v20 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v101 = v16 & 0x1000002;
  while (2)
  {
    if (v17 == 2)
    {
      _dispatch_last_resort_autorelease_pool_push(a2);
      uint64_t v21 = *(void *)(a1 + 88);
      int v114 = 0;
      long long v116 = 0u;
      *(void *)uint64_t v111 = a1;
      uint64_t v112 = a2;
      unsigned int v113 = v106;
      uint64_t v115 = 0;
      *(void *)&long long v116 = 0;
      BYTE8(v116) = 0;
      *(_OWORD *)&v111[8] = *(_OWORD *)(v19 + 160);
      *(void *)(v19 + 160) = a1;
      *(void *)(v19 + 168) = &v111[8];
      if (_dispatch_channel_invoke_cancel_check(a1, (uint64_t)v111, v21))
      {
        while (1)
        {
          uint64_t v22 = v116;
          if (!(void)v116)
          {
            if (!*v103) {
              goto LABEL_198;
            }
            uint64_t v22 = *v18;
            if (!*v18) {
              uint64_t v22 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
            }
          }
          uint64_t v23 = *(void *)v22;
          if (*(void *)v22 > 0xFFFuLL) {
            break;
          }
          if (v23) {
            _dispatch_channel_invoke_cold_4();
          }
          if ((v23 & 0x400) == 0) {
            break;
          }
          *(void *)&long long v116 = v22;
          BYTE8(v116) = 0;
          if ((v113 & 0x1000000) != 0) {
            uint64_t v28 = (void *)MEMORY[0x18C121B40]();
          }
          else {
            uint64_t v28 = 0;
          }
          if ((*(unsigned int (**)(uint64_t, unsigned char *, void))(v21 + 16))(a1, v111, *(void *)(a1 + 32)))
          {
            if (!BYTE8(v116)) {
              _dispatch_channel_invoke_cold_3();
            }
            if (!v28) {
              goto LABEL_104;
            }
LABEL_74:
            goto LABEL_104;
          }
          uint64_t v115 = -1;
          if (v28) {
            goto LABEL_74;
          }
LABEL_104:
          if (v115) {
            goto LABEL_198;
          }
        }
        uint64_t v24 = *(void *)(v22 + 16);
        uint64_t *v18 = v24;
        if (!v24)
        {
          unint64_t v38 = (uint64_t *)(v22 + 16);
          atomic_ullong v39 = *v103;
          while (v22 == (v39 & 0xFFFFFFFFFFFFFFF8))
          {
            atomic_ullong v40 = v39;
            atomic_compare_exchange_strong_explicit(v103, (unint64_t *)&v40, 0, memory_order_release, memory_order_relaxed);
            BOOL v34 = v40 == v39;
            atomic_ullong v39 = v40;
            if (v34) {
              goto LABEL_34;
            }
          }
          uint64_t v24 = *v38;
          if (!*v38) {
            uint64_t v24 = _dispatch_wait_for_enqueuer((unint64_t *)(v22 + 16));
          }
          uint64_t *v18 = v24;
        }
LABEL_34:
        *(void *)&long long v116 = v24;
        uint64_t v25 = *(void (***)(uint64_t))(v19 + 192);
        if (v25) {
          (*v25)(a1);
        }
        uint64_t v26 = *(void *)v22;
        if (*(void *)v22 >= 0x1000uLL)
        {
          if (*(void *)(v26 + 40) == 1) {
            (*(void (**)(uint64_t, void, void))(v26 + 48))(v22, 0, v107);
          }
          else {
            (*(void (**)(uint64_t, uint64_t, void))(v26 + 64))(v22, a2, v108);
          }
LABEL_101:
          if (v25) {
            v25[1](a1);
          }
          if (!_dispatch_channel_invoke_checks(a1, (uint64_t)v111, v21)) {
            goto LABEL_198;
          }
          goto LABEL_104;
        }
        if ((v110 & 0x1000000) != 0)
        {
          atomic_ullong v27 = (void *)MEMORY[0x18C121B40]();
          uint64_t v26 = *(void *)v22;
        }
        else
        {
          atomic_ullong v27 = 0;
        }
        uint64_t v29 = *(void *)(v22 + 24);
        if ((v26 & 4) != 0) {
          *(void *)(v22 + 24) = -1;
        }
        uint64_t v30 = *(void *)(v22 + 8);
        if (v30 == -1)
        {
          unint64_t v33 = 0;
        }
        else
        {
          uint64_t v31 = *(void *)(v19 + 200);
          if (((v31 >> 8) & 0xF) != 0) {
            uint64_t v32 = 256 << ((BYTE1(v31) & 0xFu) - 1);
          }
          else {
            uint64_t v32 = 0;
          }
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFF00 | *(void *)(v19 + 200);
          if ((v30 & 0xFFFFFF) != 0)
          {
            if ((v30 & 0xFFFFFFuLL) >= (v32 & 0xFFFFFF00))
            {
              BOOL v34 = (v31 & 0x44000000) == 0 && (*(void *)(v22 + 8) & 0x10000000) == 0;
              if (!v34) {
                unint64_t v33 = v30 & 0xFFFFFF;
              }
            }
          }
          else if ((unsigned __int16)v31 >> 12)
          {
            unint64_t v33 = (256 << (((unsigned __int16)v31 >> 12) - 1)) | 0xFF;
          }
        }
        uint64_t v35 = v26 & 4;
        unint64_t v36 = v33 & 0xFFFFFFFF02FFFFFFLL;
        uint64_t v37 = *(void *)(v19 + 32);
        if ((v37 & 0x1000000) != 0)
        {
          if (v36) {
            goto LABEL_90;
          }
          unint64_t v36 = v37 & 0xFFFFFFFFFEFFFFFFLL;
        }
        else if (v36 == (v37 & 0xFFFFFFFF77FFFFFFLL))
        {
LABEL_62:
          if (v29 == -1) {
            goto LABEL_91;
          }
          if (*(void *)(v19 + 224) == v29)
          {
            if ((v26 & 4) != 0 && v29)
            {
              if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
                -[OS_voucher release]();
              }
LABEL_92:
              uint64_t v41 = *(void *)(v19 + 176);
              if (v41) {
                int v42 = *(_DWORD *)(v41 + 8) + 1;
              }
              else {
                int v42 = 1;
              }
              uint64_t v35 = v22;
              if (v42 <= _dispatch_continuation_cache_limit)
              {
                uint64_t v35 = 0;
                *(void *)(v22 + 16) = v41;
                *(_DWORD *)(v22 + 8) = v42;
                *(void *)(v19 + 176) = v22;
              }
LABEL_97:
              if ((v26 & 8) != 0)
              {
                uint64_t v43 = *(NSObject **)(v22 + 48);
                uint64_t v44 = *((void *)v43->isa + 5);
                if (v44 != 514) {
                  _dispatch_queue_override_invoke_cold_1(v44);
                }
                _dispatch_client_callout(*(void *)(v22 + 40), *(uint64_t (**)(void))(v22 + 32));
                dispatch_group_leave(v43);
                if (!v35)
                {
LABEL_99:
                  if (!v27) {
                    goto LABEL_101;
                  }
                  goto LABEL_100;
                }
              }
              else
              {
                _dispatch_client_callout(*(void *)(v22 + 40), *(uint64_t (**)(void))(v22 + 32));
                if (!v35) {
                  goto LABEL_99;
                }
              }
              _dispatch_continuation_free_to_cache_limit(v35);
              if (!v27) {
                goto LABEL_101;
              }
LABEL_100:
              goto LABEL_101;
            }
LABEL_91:
            if ((v26 & 4) == 0) {
              goto LABEL_97;
            }
            goto LABEL_92;
          }
          unint64_t v36 = 0;
LABEL_90:
          _dispatch_set_priority_and_voucher_slow(v36, v29, v35 | 2);
          goto LABEL_91;
        }
        if (v36) {
          goto LABEL_90;
        }
        goto LABEL_62;
      }
LABEL_198:
      *(_OWORD *)(v19 + 160) = *(_OWORD *)&v111[8];
      unint64_t v69 = (__objc2_class **)v115;
      *(_OWORD *)uint64_t v111 = *(_OWORD *)(v19 + 160);
      *(void *)(v19 + 160) = a1;
      *(void *)(v19 + 168) = v111;
      _dispatch_last_resort_autorelease_pool_pop(a2);
      *(_OWORD *)(v19 + 160) = *(_OWORD *)v111;
      goto LABEL_200;
    }
    uint64_t v45 = *(void *)(a1 + 88);
    int v114 = 0;
    long long v116 = 0u;
    *(void *)uint64_t v111 = a1;
    uint64_t v112 = a2;
    unsigned int v113 = v106;
    uint64_t v115 = 0;
    *(void *)&long long v116 = 0;
    BYTE8(v116) = 0;
    *(_OWORD *)&v111[8] = *(_OWORD *)(v20 + 160);
    *(void *)(v20 + 160) = a1;
    *(void *)(v20 + 168) = &v111[8];
    if (_dispatch_channel_invoke_cancel_check(a1, (uint64_t)v111, v45))
    {
      while (1)
      {
        uint64_t v46 = v116;
        if (!(void)v116)
        {
          if (!*v103) {
            goto LABEL_199;
          }
          uint64_t v46 = *v18;
          if (!*v18) {
            uint64_t v46 = _dispatch_wait_for_enqueuer((unint64_t *)(a1 + 104));
          }
        }
        uint64_t v47 = *(void *)v46;
        if (*(void *)v46 > 0xFFFuLL) {
          break;
        }
        if (v47) {
          _dispatch_channel_invoke_cold_4();
        }
        if ((v47 & 0x400) == 0) {
          break;
        }
        *(void *)&long long v116 = v46;
        BYTE8(v116) = 0;
        if ((v113 & 0x1000000) != 0) {
          uint64_t v52 = (void *)MEMORY[0x18C121B40]();
        }
        else {
          uint64_t v52 = 0;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned char *, void))(v45 + 16))(a1, v111, *(void *)(a1 + 32)))
        {
          if (!BYTE8(v116)) {
            _dispatch_channel_invoke_cold_3();
          }
          if (!v52) {
            goto LABEL_189;
          }
LABEL_159:
          goto LABEL_189;
        }
        uint64_t v115 = -1;
        if (v52) {
          goto LABEL_159;
        }
LABEL_189:
        if (v115) {
          goto LABEL_199;
        }
      }
      uint64_t v48 = *(void *)(v46 + 16);
      uint64_t *v18 = v48;
      if (!v48)
      {
        v62 = (uint64_t *)(v46 + 16);
        atomic_ullong v63 = *v103;
        while (v46 == (v63 & 0xFFFFFFFFFFFFFFF8))
        {
          atomic_ullong v64 = v63;
          atomic_compare_exchange_strong_explicit(v103, (unint64_t *)&v64, 0, memory_order_release, memory_order_relaxed);
          BOOL v34 = v64 == v63;
          atomic_ullong v63 = v64;
          if (v34) {
            goto LABEL_119;
          }
        }
        uint64_t v48 = *v62;
        if (!*v62) {
          uint64_t v48 = _dispatch_wait_for_enqueuer((unint64_t *)(v46 + 16));
        }
        uint64_t *v18 = v48;
      }
LABEL_119:
      *(void *)&long long v116 = v48;
      uint64_t v49 = *(void (***)(uint64_t))(v20 + 192);
      if (v49) {
        (*v49)(a1);
      }
      uint64_t v50 = *(void *)v46;
      if (*(void *)v46 >= 0x1000uLL)
      {
        if (*(void *)(v50 + 40) == 1) {
          (*(void (**)(uint64_t, void, void))(v50 + 48))(v46, 0, v107);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, void))(v50 + 64))(v46, a2, v108);
        }
LABEL_186:
        if (v49) {
          v49[1](a1);
        }
        if (!_dispatch_channel_invoke_checks(a1, (uint64_t)v111, v45)) {
          goto LABEL_199;
        }
        goto LABEL_189;
      }
      if ((v110 & 0x1000000) != 0)
      {
        uint64_t v51 = (void *)MEMORY[0x18C121B40]();
        uint64_t v50 = *(void *)v46;
      }
      else
      {
        uint64_t v51 = 0;
      }
      uint64_t v53 = *(void *)(v46 + 24);
      if ((v50 & 4) != 0) {
        *(void *)(v46 + 24) = -1;
      }
      uint64_t v54 = *(void *)(v46 + 8);
      if (v54 == -1)
      {
        unint64_t v57 = 0;
      }
      else
      {
        uint64_t v55 = *(void *)(v20 + 200);
        if (((v55 >> 8) & 0xF) != 0) {
          uint64_t v56 = 256 << ((BYTE1(v55) & 0xFu) - 1);
        }
        else {
          uint64_t v56 = 0;
        }
        unint64_t v57 = v56 & 0xFFFFFFFFFFFFFF00 | *(void *)(v20 + 200);
        if ((v54 & 0xFFFFFF) != 0)
        {
          if ((v54 & 0xFFFFFFuLL) >= (v56 & 0xFFFFFF00)
            && ((v55 & 0x44000000) != 0 || (*(void *)(v46 + 8) & 0x10000000) != 0))
          {
            unint64_t v57 = v54 & 0xFFFFFF;
          }
        }
        else if ((unsigned __int16)v55 >> 12)
        {
          unint64_t v57 = (256 << (((unsigned __int16)v55 >> 12) - 1)) | 0xFF;
        }
      }
      uint64_t v59 = v50 & 4;
      unint64_t v60 = v57 & 0xFFFFFFFF02FFFFFFLL;
      uint64_t v61 = *(void *)(v20 + 32);
      if ((v61 & 0x1000000) != 0)
      {
        if (v60) {
          goto LABEL_175;
        }
        unint64_t v60 = v61 & 0xFFFFFFFFFEFFFFFFLL;
      }
      else if (v60 == (v61 & 0xFFFFFFFF77FFFFFFLL))
      {
LABEL_147:
        if (v53 == -1) {
          goto LABEL_176;
        }
        if (*(void *)(v20 + 224) == v53)
        {
          if ((v50 & 4) != 0 && v53)
          {
            if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v53 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
              -[OS_voucher release]();
            }
LABEL_177:
            uint64_t v65 = *(void *)(v20 + 176);
            if (v65) {
              int v66 = *(_DWORD *)(v65 + 8) + 1;
            }
            else {
              int v66 = 1;
            }
            uint64_t v59 = v46;
            if (v66 <= _dispatch_continuation_cache_limit)
            {
              uint64_t v59 = 0;
              *(void *)(v46 + 16) = v65;
              *(_DWORD *)(v46 + 8) = v66;
              *(void *)(v20 + 176) = v46;
            }
LABEL_182:
            if ((v50 & 8) != 0)
            {
              uint64_t v67 = *(NSObject **)(v46 + 48);
              uint64_t v68 = *((void *)v67->isa + 5);
              if (v68 != 514) {
                _dispatch_queue_override_invoke_cold_1(v68);
              }
              _dispatch_client_callout(*(void *)(v46 + 40), *(uint64_t (**)(void))(v46 + 32));
              dispatch_group_leave(v67);
              if (!v59)
              {
LABEL_184:
                if (!v51) {
                  goto LABEL_186;
                }
                goto LABEL_185;
              }
            }
            else
            {
              _dispatch_client_callout(*(void *)(v46 + 40), *(uint64_t (**)(void))(v46 + 32));
              if (!v59) {
                goto LABEL_184;
              }
            }
            _dispatch_continuation_free_to_cache_limit(v59);
            if (!v51) {
              goto LABEL_186;
            }
LABEL_185:
            goto LABEL_186;
          }
LABEL_176:
          if ((v50 & 4) == 0) {
            goto LABEL_182;
          }
          goto LABEL_177;
        }
        unint64_t v60 = 0;
LABEL_175:
        _dispatch_set_priority_and_voucher_slow(v60, v53, v59 | 2);
        goto LABEL_176;
      }
      if (v60) {
        goto LABEL_175;
      }
      goto LABEL_147;
    }
LABEL_199:
    *(_OWORD *)(v20 + 160) = *(_OWORD *)&v111[8];
    unint64_t v69 = (__objc2_class **)v115;
LABEL_200:
    uint64_t v70 = v105;
    if ((unint64_t)v69 + 1 > 1) {
      break;
    }
    unint64_t v71 = *(void *)(a1 + 56);
    while (1)
    {
      unint64_t v72 = v71;
      unint64_t v73 = v71 - v105;
      unint64_t v74 = v73 & 0xFFFFFFF700000001;
      if (!(v72 >> 55)) {
        break;
      }
LABEL_206:
      unint64_t v71 = v72;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v71, v74, memory_order_release, memory_order_relaxed);
      if (v71 == v72)
      {
        if ((~v72 & 0x1800000000) != 0
          || (uint64_t v75 = HIDWORD(v72) & 7,
              unint64_t v76 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)),
              unsigned int v77 = *(_DWORD *)(v76 + 200),
              (HIWORD(v77) & 0xF) >= v75))
        {
          uint64_t v70 = 0;
          unint64_t v69 = 0;
        }
        else
        {
          uint64_t v70 = 0;
          unint64_t v69 = 0;
          *(void *)(v76 + 200) = v77 & 0xFFF0FFFF | (v75 << 16);
        }
        goto LABEL_216;
      }
    }
    if ((v72 & 0x8000000000) == 0)
    {
      if (v69) {
        unint64_t v74 = v73 & 0xFFFFFF7700000001 | 0x8000000000;
      }
      else {
        unint64_t v74 = v73 & 0xFFFFFFF000000001;
      }
      goto LABEL_206;
    }
    atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
    unint64_t v69 = *(__objc2_class ***)(v20 + 160);
    int v17 = v101;
    if ((v102 & 1) != 0 || ((uint64_t)(*v69)[1].isa & 0x10000) != 0) {
      continue;
    }
    break;
  }
LABEL_216:
  if ((v110 & 0x40000) == 0)
  {
    unint64_t v78 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(v78 + 200) = *(void *)(v78 + 200) & 0xF0000 | v104;
  }
  if (v69)
  {
    _dispatch_queue_invoke_finish((atomic_ullong *)a1, a2, v69, v70);
    return;
  }
LABEL_252:
  _os_object_release_internal_n((void *)a1, (const char *)2);
}

uint64_t dispatch_channel_foreach_work_item_peek_f(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, void))
{
  if (*(unsigned char *)(result + 56)) {
    dispatch_channel_foreach_work_item_peek_f_cold_1();
  }
  unsigned int v3 = *(void **)(result + 48);
  if ((*v3 & 0xFFFFFFFFFFFFF400) == 0x400)
  {
    int v6 = (void *)(*(void *)result + 48);
    do
    {
      uint64_t result = a3(a2, v3[5]);
      if (!result || v3 == (void *)*v6) {
        break;
      }
      uint64_t result = v3[2];
      if (!result) {
        uint64_t result = _dispatch_wait_for_enqueuer(v3 + 2);
      }
      unsigned int v3 = (void *)result;
    }
    while ((*(void *)result & 0xFFFFFFFFFFFFF400) == 0x400);
  }
  return result;
}

void dispatch_channel_drain_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t *))
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 88);
  uint64_t v37 = 0;
  if (*(unsigned char *)(a1 + 56)) {
    dispatch_channel_drain_f_cold_3();
  }
  *(unsigned char *)(a1 + 56) = 1;
  unint64_t v36 = (atomic_ullong *)(v3 + 48);
  uint64_t v8 = (uint64_t *)(v3 + 104);
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    unsigned int v10 = *(void **)(a1 + 48);
    if (!v10)
    {
      if (!*v36) {
        break;
      }
      unsigned int v10 = (void *)*v8;
      if (!*v8) {
        unsigned int v10 = (void *)_dispatch_wait_for_enqueuer((unint64_t *)(v3 + 104));
      }
    }
    if ((*v10 & 0xFFFFFFFFFFFFF400) != 0x400) {
      break;
    }
    uint64_t v11 = v10[2];
    *uint64_t v8 = v11;
    if (!v11)
    {
      uint64_t v25 = v10 + 2;
      atomic_ullong v26 = *v36;
      while (v10 == (void *)(v26 & 0xFFFFFFFFFFFFFFF8))
      {
        atomic_ullong v27 = v26;
        atomic_compare_exchange_strong_explicit(v36, (unint64_t *)&v27, 0, memory_order_release, memory_order_relaxed);
        BOOL v17 = v27 == v26;
        atomic_ullong v26 = v27;
        if (v17) {
          goto LABEL_6;
        }
      }
      uint64_t v11 = *v25;
      if (!*v25) {
        uint64_t v11 = _dispatch_wait_for_enqueuer(v10 + 2);
      }
      *uint64_t v8 = v11;
    }
LABEL_6:
    *(void *)(a1 + 48) = v11;
    uint64_t v12 = v10[3];
    v10[3] = -1;
    uint64_t v13 = v10[1];
    if (v13 == -1)
    {
      unint64_t v16 = 0;
    }
    else
    {
      uint64_t v14 = StatusReg[25];
      uint64_t v15 = ((v14 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v14) & 0xFu) - 1) : 0;
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v13 & 0xFFFFFF) != 0)
      {
        if ((v13 & 0xFFFFFFuLL) >= (v15 & 0xFFFFFF00))
        {
          BOOL v17 = (v14 & 0x44000000) == 0 && (v10[1] & 0x10000000) == 0;
          if (!v17) {
            unint64_t v16 = v13 & 0xFFFFFF;
          }
        }
      }
      else if ((unsigned __int16)v14 >> 12)
      {
        unint64_t v16 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
      }
    }
    unint64_t v18 = v16 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v19 = StatusReg[4];
    if ((v19 & 0x1000000) != 0)
    {
      if (v18) {
        goto LABEL_53;
      }
      unint64_t v18 = v19 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v18 == (v19 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_21;
    }
    if (v18) {
      goto LABEL_53;
    }
LABEL_21:
    if (v12 == -1) {
      goto LABEL_25;
    }
    if (StatusReg[28] != v12)
    {
      unint64_t v18 = 0;
LABEL_53:
      _dispatch_set_priority_and_voucher_slow(v18, v12, 6);
      goto LABEL_25;
    }
    if (v12 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
      -[OS_voucher release]();
    }
LABEL_25:
    uint64_t v20 = StatusReg[22];
    if (v20) {
      int v21 = *(_DWORD *)(v20 + 8) + 1;
    }
    else {
      int v21 = 1;
    }
    uint64_t v22 = (uint64_t)v10;
    if (v21 <= _dispatch_continuation_cache_limit)
    {
      uint64_t v22 = 0;
      v10[2] = v20;
      *((_DWORD *)v10 + 2) = v21;
      StatusReg[22] = v10;
    }
    if (*(unsigned char *)(a1 + 35))
    {
      uint64_t v24 = (void *)MEMORY[0x18C121B40]();
      int v23 = a3(a2, v10[5], &v37);
    }
    else
    {
      int v23 = a3(a2, v10[5], &v37);
    }
    if (!v22)
    {
      if (!v23) {
        break;
      }
      continue;
    }
    _dispatch_continuation_free_to_cache_limit(v22);
    if (!v23) {
      break;
    }
  }
  while ((_dispatch_channel_invoke_checks(v3, a1, v4) & 1) != 0);
  uint64_t v28 = v37;
  if (v37)
  {
    uint64_t v29 = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v30 = (void *)v29[22];
    if (v30)
    {
      v29[22] = v30[2];
    }
    else
    {
      uint64_t v30 = _dispatch_continuation_alloc_from_heap();
      uint64_t v28 = v37;
    }
    *uint64_t v30 = 1284;
    v30[4] = 0;
    v30[5] = v28;
    unint64_t v31 = v29[4] & 0xFFFFFFLL;
    if (v31 >= 0x10FF) {
      unint64_t v31 = 4351;
    }
    uint64_t v32 = v29[28];
    if (v32 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 12), 1u, memory_order_relaxed) <= 0) {
      -[OS_voucher retain]();
    }
    v30[3] = v32;
    if (v31)
    {
      int v33 = (*(_DWORD *)(v3 + 84) >> 30) & 1;
      if ((*(_DWORD *)(v3 + 84) & 0xFFF) == 0) {
        int v33 = 1;
      }
      if (!v33) {
        unint64_t v31 = 0;
      }
    }
    v30[1] = v31;
    uint64_t v34 = *(void *)(a1 + 48);
    v30[2] = v34;
    if (!v34)
    {
      atomic_compare_exchange_strong_explicit(v36, (unint64_t *)&v34, (unint64_t)v30, memory_order_release, memory_order_relaxed);
      if (v34)
      {
        uint64_t v35 = *v8;
        if (!*v8) {
          uint64_t v35 = _dispatch_wait_for_enqueuer((unint64_t *)(v3 + 104));
        }
        v30[2] = v35;
      }
    }
    *uint64_t v8 = (uint64_t)v30;
    *(void *)(a1 + 48) = v30;
  }
}

uint64_t _dispatch_channel_invoke_checks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _dispatch_channel_invoke_cancel_check(a1, a2, a3);
  if (result)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if (*(void *)(StatusReg + 40)) {
      _dispatch_return_to_kernel();
    }
    if ((*(unsigned char *)(a2 + 34) & 0x10) != 0
      && (*(_DWORD *)(*(void *)(StatusReg + 216) + 60) & 7u) > *(unsigned __int8 *)(*(void *)(StatusReg + 216)
                                                                                      + 100)
      || (*(unsigned char *)(StatusReg + 960) & 1) != 0
      || *(void *)(a1 + 56) >> 55)
    {
      uint64_t result = 0;
      *(void *)(a2 + 40) = *(void *)(a1 + 24);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t dispatch_channel_foreach_work_item_peek(uint64_t a1, uint64_t a2)
{
  return dispatch_channel_foreach_work_item_peek_f(a1, a2, *(uint64_t (**)(uint64_t, void))(a2 + 16));
}

void dispatch_channel_drain(uint64_t a1, uint64_t a2)
{
}

void _dispatch_channel_wakeup(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)(a1 + 88) + 8))(a1, *(void *)(a1 + 32)))
  {
    if (*(void *)(a1 + 48)) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (*(_DWORD *)(a1 + 80) & 0x10000000) != 0 && (*(_WORD *)(a1 + 116) & 8) == 0;
    }
  }
  else
  {
    uint64_t v6 = -1;
  }

  _dispatch_queue_wakeup(a1, a2, a3, v6);
}

uint64_t dispatch_channel_create(const char *a1, __objc2_class **a2, uint64_t a3, void *a4)
{
  if (!*a4) {
    dispatch_channel_create_cold_1();
  }
  uint64_t v6 = a2;
  int v8 = 67108865;
  if (!a1)
  {
    unsigned int v9 = 0;
    if (a2) {
      goto LABEL_7;
    }
LABEL_15:
    uint64_t v6 = &off_1EB1CE800;
    goto LABEL_9;
  }
  unsigned int v9 = _dispatch_strdup_if_mutable(a1);
  if (v9 == a1) {
    int v8 = 67108865;
  }
  else {
    int v8 = 69206017;
  }
  if (!v6) {
    goto LABEL_15;
  }
LABEL_7:
  if (*((_DWORD *)v6 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
LABEL_9:
  uint64_t result = _dispatch_object_alloc(OS_dispatch_channel, 120);
  *(_DWORD *)(result + 8) += 2;
  if (*(unsigned char *)(*(void *)result + 40) == 19) {
    ++*(_DWORD *)(result + 8);
  }
  *(void *)(result + 16) = -1985229329;
  *(_DWORD *)(result + 80) = v8;
  *(void *)(result + 56) = 0x19FFE0000000000;
  *(void *)(result + 64) = atomic_fetch_add_explicit(&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(void *)(result + 72) = v9;
  *(void *)(result + 88) = a4;
  *(void *)(result + 24) = v6;
  *(void *)(result + 32) = a3;
  if (!a4[3])
  {
    *(_WORD *)(result + 116) |= 8u;
    --*(_DWORD *)(result + 8);
  }
  return result;
}

_DWORD *dispatch_channel_enqueue(_DWORD *result, uint64_t a2)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v4 = (void *)StatusReg[22];
  if (!v4) {
    return _dispatch_channel_enqueue_slow(result, a2);
  }
  StatusReg[22] = v4[2];
  *uint64_t v4 = 1284;
  v4[4] = 0;
  v4[5] = a2;
  unint64_t v5 = StatusReg[4] & 0xFFFFFFLL;
  if (v5 >= 0x10FF) {
    unint64_t v5 = 4351;
  }
  uint64_t v6 = StatusReg[28];
  if (v6 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v4[3] = v6;
    if (v5)
    {
      int v7 = result[21];
      if ((v7 & 0x40000000) == 0 && (v7 & 0xFFF) != 0) {
        unint64_t v5 = 0;
      }
    }
    v4[1] = v5;
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  return result;
}

void *_dispatch_channel_enqueue_slow(_DWORD *a1, uint64_t a2)
{
  uint64_t result = _dispatch_continuation_alloc_from_heap();
  *uint64_t result = 1284;
  result[4] = 0;
  result[5] = a2;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v6 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v6 >= 0x10FF) {
    unint64_t v6 = 4351;
  }
  uint64_t v7 = *(void *)(StatusReg + 224);
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    result[3] = v7;
    if (v6)
    {
      int v8 = a1[21];
      if ((v8 & 0x40000000) != 0 || (v8 & 0xFFF) == 0)
      {
        uint64_t v9 = __clz(__rbit32(v6 >> 8)) + 1;
      }
      else
      {
        uint64_t v9 = 0;
        unint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    result[1] = v6;
    unsigned int v10 = *(uint64_t (**)(_DWORD *, void *, uint64_t))(*(void *)a1 + 88);
    return (void *)v10(a1, result, v9);
  }
  return result;
}

uint64_t dispatch_channel_wakeup(uint64_t a1, int a2)
{
  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  unsigned int v2 = v3 >> 2;
  if (v2 > 7) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = dword_18A97E320[v2];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v4, 2);
}

void _dispatch_mgr_queue_push(atomic_ullong *a1, void *a2)
{
  if (*a2 <= 0xFFFuLL && (*a2 & 0x81) != 0) {
    _dispatch_mgr_queue_push_cold_1();
  }
  a2[2] = 0;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = a1 + 6;
  unint64_t v4 = atomic_exchange_explicit(a1 + 6, (unint64_t)a2, memory_order_release);
  if (v4)
  {
    *(void *)(v4 + 16) = a2;
    *(void *)(StatusReg + 976) = 0;
  }
  else
  {
    a1[13] = (atomic_ullong)a2;
    *(void *)(StatusReg + 976) = 0;
    if (((atomic_fetch_or_explicit(a1 + 7, 0x8000000000uLL, memory_order_release) ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
    {
      _dispatch_event_loop_poke(-8, 0, 0);
    }
  }
}

void _dispatch_mgr_queue_wakeup()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override the manager";
  __break(1u);
}

void _dispatch_kevent_workqueue_init()
{
  if (_dispatch_root_queues_pred != -1) {
    dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
  }
  if (_dispatch_mgr_sched_pred != -1) {
    dispatch_once_f(&_dispatch_mgr_sched_pred, 0, (dispatch_function_t)_dispatch_mgr_sched_init);
  }
  uint64_t v0 = _dispatch_mgr_sched;
  if (dword_1EB1CEFA4) {
    uint64_t v1 = _pthread_qos_class_encode();
  }
  else {
    uint64_t v1 = 0;
  }
  if ((int)v0 > dword_1EB1CEFA8) {
    uint64_t v1 = v0 | 0x20000000;
  }
  if (v1)
  {
    int v2 = _pthread_workqueue_set_event_manager_priority();
    if (v2)
    {
      _dispatch_bug(6510, v2);
    }
  }
}

uint64_t _dispatch_mgr_sched_init()
{
  uint64_t v10 = *MEMORY[0x1E4F14BF8];
  sched_param v8 = 0;
  memset(&v9, 0, sizeof(v9));
  int v0 = pthread_attr_init(&v9);
  if (v0) {
    _dispatch_bug(6165, v0);
  }
  int v1 = pthread_attr_getschedpolicy(&v9, dword_1EB1CEFAC);
  if (v1) {
    _dispatch_bug(6167, v1);
  }
  int v2 = pthread_attr_getschedparam(&v9, &v8);
  if (v2) {
    _dispatch_bug(6168, v2);
  }
  uint64_t result = qos_class_main();
  if (result == 21) {
    int v4 = 25;
  }
  else {
    int v4 = result;
  }
  if (v4)
  {
    dword_1EB1CEFA4 = v4;
    if (v4 == 5)
    {
      int sched_priority = 4;
    }
    else
    {
      HIDWORD(v7) = v4 - 9;
      LODWORD(v7) = v4 - 9;
      unsigned int v6 = v7 >> 2;
      if (v6 > 6) {
        int sched_priority = 0;
      }
      else {
        int sched_priority = dword_18A97E3A0[v6];
      }
    }
  }
  else
  {
    int sched_priority = v8.sched_priority;
  }
  dword_1EB1CEFA8 = sched_priority;
  _dispatch_mgr_sched = sched_priority;
  return result;
}

void _dispatch_root_queue_poke(unsigned int *a1, signed int a2, int a3)
{
  if (*((void *)a1 + 6))
  {
    uint64_t v3 = *(void *)(*(void *)a1 + 40);
    BOOL v4 = v3 == 330001 || v3 == 328465;
    if (!v4
      || (int v5 = 0,
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 28, (unsigned int *)&v5, a2, memory_order_release, memory_order_relaxed), !v5))
    {
      _dispatch_root_queue_poke_slow(a1, a2, a3);
    }
  }
}

void _dispatch_root_queue_poke_slow(unsigned int *a1, signed int a2, int a3)
{
  if (_dispatch_root_queues_pred != -1) {
LABEL_36:
  }
    dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (v6 == 330001)
  {
    int v12 = _pthread_workqueue_add_cooperativethreads();
    if (!v12) {
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = 6848;
    goto LABEL_38;
  }
  if (v6 == 328465)
  {
    int v9 = _pthread_workqueue_addthreads();
    if (!v9) {
      return;
    }
    uint64_t v10 = v9;
    uint64_t v11 = 6840;
LABEL_38:
    _dispatch_bug(v11, v10);
    return;
  }
  uint64_t v7 = *((void *)a1 + 4);
  if (*(void *)(v7 + 72))
  {
    while (dispatch_semaphore_signal((dispatch_semaphore_t)(v7 + 72)))
    {
      if (!--a2) {
        return;
      }
    }
  }
  if ((a1[21] & 0x80000000) != 0)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 28, a2, memory_order_relaxed);
  }
  else
  {
    int v8 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 28, (unsigned int *)&v8, a2, memory_order_relaxed, memory_order_relaxed);
    if (v8) {
      return;
    }
  }
  uint64_t v13 = a1[25];
  while (1)
  {
    signed int v14 = v13 - a3;
    if ((int)v13 < a3) {
      signed int v14 = 0;
    }
    if (a2 > v14)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 28, v14 - a2, memory_order_relaxed);
      a2 = v14;
    }
    if (!a2) {
      break;
    }
    uint64_t v15 = v13;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 25, (unsigned int *)&v15, v13 - a2, memory_order_acquire, memory_order_acquire);
    BOOL v16 = v15 == v13;
    uint64_t v13 = v15;
    if (v16)
    {
      pthread_t v18 = 0;
      a3 = 0x7FFFFFFF;
LABEL_27:
      if (a1[2] != 0x7FFFFFFF
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a1 + 2, 1u, memory_order_relaxed) < 1)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
        goto LABEL_36;
      }
      while (1)
      {
        int v17 = pthread_create(&v18, (const pthread_attr_t *)v7, (void *(__cdecl *)(void *))_dispatch_worker_thread, a1);
        if (v17 != 35)
        {
          if (!v17)
          {
            if (!--a2) {
              return;
            }
            goto LABEL_27;
          }
          _dispatch_bug(6907, v17);
        }
        _dispatch_temporary_resource_shortage();
      }
    }
  }
}

void _dispatch_root_queue_poke_and_wakeup(unsigned int *a1, signed int a2, int a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 40);
  if (v3 != 330001 && v3 != 328465) {
    goto LABEL_12;
  }
  unsigned int v5 = a1[28];
  do
  {
    int v6 = v5;
    if (v5) {
      unsigned int v7 = v5;
    }
    else {
      unsigned int v7 = a2;
    }
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1 + 28, &v5, v7, memory_order_release, memory_order_relaxed);
  }
  while (v5 != v6);
  if (v6 <= 0) {
LABEL_12:
  }
    _dispatch_root_queue_poke_slow(a1, a2, a3);
}

unsigned int *_dispatch_root_queue_wakeup(unsigned int *result, uint64_t a2, char a3)
{
  if ((a3 & 8) != 0)
  {
    if (a3) {
      return (unsigned int *)_os_object_release_internal_n(result, (const char *)2);
    }
  }
  else
  {
    uint64_t v3 = result[21];
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override a root queue";
    qword_1E91199F0 = v3;
    __break(1u);
  }
  return result;
}

void _dispatch_root_queue_push(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v6 = *(uint64_t **)(StatusReg + 232);
  if (v6 && *((unsigned char *)v6 + 44) && ((unsigned int v7 = (void *)v6[1], v12 = *(_DWORD *)(a1 + 84), !v7) || v12 < 0))
  {
    uint64_t v13 = *v6;
    unsigned int v14 = *((_DWORD *)v6 + 4);
    uint64_t *v6 = a1;
    v6[1] = (uint64_t)a2;
    *((_DWORD *)v6 + 4) = a3;
    if (v12 < 0) {
      *((unsigned char *)v6 + 44) = 0;
    }
    if (!v7) {
      return;
    }
    unsigned int v3 = v14;
    uint64_t v4 = v13;
  }
  else
  {
    unsigned int v7 = a2;
  }
  unsigned int v8 = *(_DWORD *)(v4 + 84);
  if ((v8 & 0x8000000) != 0 && *v7 >= 0x1000uLL && *(void *)(*v7 + 40) != 1)
  {
    if (*(void *)(*v7 + 40) != 19 || !_dispatch_source_is_timer((uint64_t)v7))
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
      qword_1E91199F0 = (uint64_t)v7;
      __break(1u);
      return;
    }
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if ((unsigned __int16)v8 >> 12)
  {
    if (v3 && (unsigned __int16)v8 >> 12 != v3)
    {
LABEL_13:
      _dispatch_root_queue_push_override((__objc2_class **)v4, v7, v3);
      return;
    }
  }
  else
  {
    unsigned int v9 = (v8 >> 8) & 0xF;
    if (v9) {
      BOOL v10 = v9 >= v3;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      goto LABEL_13;
    }
  }
  v7[2] = 0;
  *(void *)(StatusReg + 976) = v4 + 48;
  unint64_t v11 = atomic_exchange_explicit((atomic_ullong *volatile)(v4 + 48), (unint64_t)v7, memory_order_release);
  if (v11)
  {
    *(void *)(v11 + 16) = v7;
    *(void *)(StatusReg + 976) = 0;
  }
  else
  {
    *(void *)(v4 + 104) = v7;
    *(void *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v4, 1, 0);
  }
}

void _dispatch_root_queue_push_override(__objc2_class **a1, void *a2, unsigned int a3)
{
  unint64_t v4 = (unint64_t)a2;
  unsigned int v5 = (__objc2_class *)a1;
  int v6 = *((_DWORD *)a1 + 21);
  if (v6 < 0) {
    unsigned int v7 = 2;
  }
  else {
    unsigned int v7 = (v6 >> 25) & 4;
  }
  if (*a2 >= 0x1000uLL && *(void *)(*a2 + 40) == 256)
  {
    a2[4] = a1;
  }
  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a1 = *(__objc2_class ***)(StatusReg + 176);
    if (a1) {
      *(void *)(StatusReg + 176) = a1[2];
    }
    else {
      a1 = (__objc2_class **)_dispatch_continuation_alloc_from_heap();
    }
    a1[6] = (__objc2_class *)v4;
    a1[7] = v5;
    a1[5] = (__objc2_class *)a1;
    *a1 = (__objc2_class *)&unk_1ED74FDE0;
    a1[1] = (__objc2_class *)-1;
    a1[3] = (__objc2_class *)-1;
    unint64_t v4 = (unint64_t)a1;
  }
  if (a3 - 7 <= 0xFFFFFFF9)
  {
    unint64_t v10 = a3;
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_1E91199F0 = a3;
    __break(1u);
  }
  else
  {
    int v9 = 2 * (v7 > 3);
    if ((v7 & 2) != 0) {
      int v9 = 1;
    }
    *(void *)(v4 + 16) = 0;
    a1 = &_dispatch_root_queues + 16 * (unint64_t)(3 * a3 + v9 - 3);
    unint64_t v10 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(v10 + 976) = a1 + 6;
    unint64_t v11 = atomic_exchange_explicit((atomic_ullong *volatile)a1 + 6, v4, memory_order_release);
    if (v11)
    {
      *(void *)(v11 + 16) = v4;
      *(void *)(v10 + 976) = 0;
      return;
    }
  }
  a1[13] = (__objc2_class *)v4;
  *(void *)(v10 + 976) = 0;

  _dispatch_root_queue_poke_and_wakeup((unsigned int *)a1, 1, 0);
}

uint64_t dispatch_pthread_root_queue_create(const char *a1, int a2, long long *a3, void *a4)
{
  return _dispatch_pthread_root_queue_create(a1, a2, a3, a4, 0);
}

uint64_t _dispatch_pthread_root_queue_create(const char *a1, int a2, long long *a3, void *a4, _OWORD *a5)
{
  if (a2 < 0) {
    int v8 = (char)a2;
  }
  else {
    int v8 = 0;
  }
  int v9 = 4095;
  if (a1)
  {
    unint64_t v11 = _dispatch_strdup_if_mutable(a1);
    if (v11 == a1) {
      int v9 = 4095;
    }
    else {
      int v9 = 2101247;
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v12 = _dispatch_object_alloc(OS_dispatch_queue_pthread_root, 320);
  uint64_t v13 = v12;
  *(void *)(v12 + 16) = -1985229329;
  *(_DWORD *)(v12 + 80) = v9;
  *(void *)(v12 + 56) = 0x20000000000;
  *(void *)(v12 + 64) = atomic_fetch_add_explicit(&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(void *)(v12 + 72) = v11;
  *(void *)(v12 + 56) = 0x60000000000000;
  *(_DWORD *)(v12 + 84) = 0x80000000;
  uint64_t v14 = v12 + 120;
  *(void *)(v12 + 32) = v12 + 120;
  if (v8 >= 32 || v8 == 0) {
    int v16 = 32;
  }
  else {
    int v16 = v8;
  }
  *(_DWORD *)(v12 + 100) = v16;
  *(void *)(v12 + 192) = OS_dispatch_semaphore;
  *(_DWORD *)(v12 + 256) = 0;
  _dispatch_sema4_create_slow((atomic_uint *)(v12 + 256), 2);
  if (a3)
  {
    long long v17 = *a3;
    long long v18 = a3[1];
    long long v19 = a3[3];
    *(_OWORD *)(v14 + 32) = a3[2];
    *(_OWORD *)(v14 + 48) = v19;
    *(_OWORD *)uint64_t v14 = v17;
    *(_OWORD *)(v14 + 16) = v18;
    _dispatch_mgr_priority_raise((pthread_attr_t *)v14);
  }
  else
  {
    int v20 = pthread_attr_init((pthread_attr_t *)v14);
    if (v20) {
      _dispatch_bug(7641, v20);
    }
  }
  int v21 = pthread_attr_setdetachstate((pthread_attr_t *)v14, 2);
  if (!v21)
  {
    if (!a4) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  _dispatch_bug(7644, v21);
  if (a4) {
LABEL_21:
  }
    *(void *)(v13 + 184) = _dispatch_Block_copy(a4);
LABEL_22:
  if (a5) {
    *(_OWORD *)(v13 + 264) = *a5;
  }
  return v13;
}

uint64_t _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID(const char *a1, int a2, long long *a3, uint64_t a4, void *a5)
{
  if (!*(void *)a4 || !*(void *)(a4 + 8)) {
    _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_cold_1();
  }

  return _dispatch_pthread_root_queue_create(a1, a2, a3, a5, (_OWORD *)a4);
}

BOOL _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 80);
  if (v2 != 1) {
    _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_cold_1(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  return ((v3 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) == 0;
}

uint64_t dispatch_pthread_root_queue_copy_current()
{
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (!v0) {
    return 0;
  }
  do
  {
    uint64_t v1 = v0;
    uint64_t v0 = *(void *)(v0 + 24);
  }
  while (v0);
  if (*(void *)(*(void *)v1 + 40) != 328721) {
    return 0;
  }
  _os_object_retain_with_resurrect(v1);
  return v1;
}

void _dispatch_pthread_root_queue_dispose(uint64_t *a1, unsigned char *a2)
{
  unint64_t v4 = (pthread_attr_t *)a1[4];
  pthread_attr_destroy(v4);
  _dispatch_semaphore_dispose((uint64_t)v4[1].__opaque);
  sig = (const void *)v4[1].__sig;
  if (sig) {
    _Block_release(sig);
  }
  a1[3] = (uint64_t)&unk_1EB1CE780;

  _dispatch_lane_class_dispose(a1, a2);
}

void _dispatch_runloop_queue_wakeup(atomic_ullong *context, atomic_ullong *a2, uint64_t a3)
{
  if ((context[10] & 0x800000) != 0
    || (a3 & 2) != 0 && (atomic_fetch_or_explicit(context + 7, 0x8000000000uLL, memory_order_release) & 0xFFFFFFFC) == 0)
  {
    _dispatch_lane_wakeup((uint64_t)context, a2, a3);
  }
  else if (context[6])
  {
    _dispatch_runloop_queue_poke(context, a2, a3);
  }
  else
  {
    unint64_t v3 = (atomic_fetch_and_explicit(context + 7, 0xFFFFFFF0FFFFFFFFLL, memory_order_relaxed) >> 32) & 7;
    if (v3)
    {
      if (context[6]) {
        _dispatch_runloop_queue_poke(context, v3, a3);
      }
      _pthread_qos_override_end_direct();
    }
    else if (a3)
    {
      _os_object_release_internal_n(context, (const char *)2);
    }
  }
}

void _dispatch_runloop_queue_poke(atomic_ullong *context, unsigned int a2, char a3)
{
  if (*(void *)(*context + 40) == 394769 && _dispatch_main_q_handle_pred != -1) {
    dispatch_once_f(&_dispatch_main_q_handle_pred, context, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  unsigned int v6 = *((_DWORD *)context + 21);
  unsigned int v7 = (unsigned __int16)v6 >> 12;
  if (a2) {
    unsigned int v7 = a2;
  }
  unsigned int v8 = (v6 >> 8) & 0xF;
  if (v7 <= v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = v7;
  }
  atomic_ullong v10 = context[7];
  unint64_t v11 = v9 << 32;
  while (1)
  {
    unint64_t v12 = v10;
    unint64_t v13 = v10 & 0x700000000;
    unint64_t v14 = v10 & 0xFFFFFFF8FFFFFFFFLL | v11;
    if ((v14 & 0x1000000000) != 0) {
      v14 |= 0x800000000uLL;
    }
    unint64_t v15 = v13 < v11 ? v14 : v12;
    if (v12 == v15) {
      break;
    }
    atomic_ullong v10 = v12;
    atomic_compare_exchange_strong_explicit(context + 7, (unint64_t *)&v10, v15, memory_order_relaxed, memory_order_relaxed);
    if (v10 == v12)
    {
      if (v8 < v7)
      {
        _pthread_qos_override_start_direct();
        if ((BYTE4(v12) & 7u) > v8) {
          _pthread_qos_override_end_direct();
        }
      }
      break;
    }
  }
  mach_port_t v16 = *((_DWORD *)context + 8);
  if (v16 - 1 > 0xFFFFFFFD
    || ((int v17 = _dispatch_send_wakeup_runloop_thread(v16, 0), (v17 - 268435459) >= 2)
      ? (BOOL v18 = v17 == 16)
      : (BOOL v18 = 1),
        !v18 ? (BOOL v19 = v17 == 0) : (BOOL v19 = 1),
        v19))
  {
    if ((a3 & 1) == 0) {
      return;
    }
  }
  else
  {
    _dispatch_bug(7895, v17);
    if ((a3 & 1) == 0) {
      return;
    }
  }

  _os_object_release_internal_n(context, (const char *)2);
}

uint64_t _dispatch_runloop_root_queue_create_4CF(const char *a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v4 = *(void *)(StatusReg + 32);
  uint64_t v5 = _dispatch_object_alloc(OS_dispatch_queue_runloop, 120);
  uint64_t v6 = v5;
  *(void *)(v5 + 16) = -1985229329;
  *(_DWORD *)(v5 + 80) = 262145;
  *(void *)(v5 + 56) = 0x1FFE1000000000;
  unint64_t add_explicit = atomic_fetch_add_explicit(&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(void *)(v5 + 24) = &off_1EB1CE800;
  unsigned int v8 = "runloop-queue";
  if (a1) {
    unsigned int v8 = a1;
  }
  *(void *)(v5 + 64) = add_explicit;
  *(void *)(v5 + 72) = v8;
  BOOL v9 = (v4 & 0x22000000) != 0 || (v4 & 0x3F00) == 0;
  if (!v9)
  {
    unsigned int v10 = (__clz(__rbit32((v4 >> 8) & 0x3FFF)) << 8) + 256;
    if (((v4 >> 8) & 0x3FFF) == 0) {
      unsigned int v10 = 0;
    }
    *(_DWORD *)(v5 + 84) = v10 & 0xFFFFFF00 | v4;
  }
  _dispatch_runloop_queue_handle_init((void *)v5);
  uint64_t v11 = *(void *)(v6 + 56);
  uint64_t v12 = v11;
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 56), (unint64_t *)&v12, v11 & 0xFFFFFFFF00000003 | (4 * ((*(void *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), memory_order_relaxed, memory_order_relaxed);
    BOOL v9 = v12 == v11;
    uint64_t v11 = v12;
  }
  while (!v9);
  return v6;
}

void _dispatch_runloop_queue_handle_init(void *context)
{
  kern_return_t v2;
  mach_port_name_t name;
  mach_port_options_t options;

  if ((_dispatch_unsafe_fork & 1) == 0) {
    _dispatch_fork_becomes_unsafe_slow();
  }
  options.reserved[1] = 0;
  *(_OWORD *)&options.flags = xmmword_18A97E268;
  name = 0;
  if (*(void *)(*context + 40) == 394769) {
    *(void *)&options.flags = 0x100000033;
  }
  int v2 = mach_port_construct(*MEMORY[0x1E4F14C48], &options, (mach_port_context_t)context, &name);
  if (v2 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v2) {
    _dispatch_bug(7808, v2);
  }
  context[4] = name;
  _dispatch_program_is_probably_callback_driven = 1;
}

uint64_t _dispatch_runloop_queue_xref_dispose(atomic_ullong *a1)
{
  unint64_t v1 = (atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFF0FFFFFFFFLL, memory_order_relaxed) >> 32) & 7;
  atomic_fetch_and_explicit(a1 + 7, 0xFFFFFFFF00000003, memory_order_relaxed);
  uint64_t result = (*(uint64_t (**)(atomic_ullong *, unint64_t, uint64_t))(*a1 + 80))(a1, v1, 2);
  if (v1)
  {
    return _pthread_qos_override_end_direct();
  }
  return result;
}

void _dispatch_runloop_queue_dispose(uint64_t *a1, unsigned char *a2)
{
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)a1);

  _dispatch_lane_class_dispose(a1, a2);
}

void _dispatch_runloop_queue_handle_dispose(mach_port_context_t guard)
{
  kern_return_t v2;
  uint64_t vars8;

  mach_port_name_t v1 = *(_DWORD *)(guard + 32);
  if (v1 - 1 <= 0xFFFFFFFD)
  {
    *(void *)(guard + 32) = 0;
    int v2 = mach_port_destruct(*MEMORY[0x1E4F14C48], v1, -1, guard);
    if (v2 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v2)
    {
      _dispatch_bug(7864, v2);
    }
  }
}

BOOL _dispatch_runloop_root_queue_perform_4CF(dispatch_object_t object)
{
  uint64_t v2 = *((void *)object->isa + 5);
  if (v2 != 395025) {
    _dispatch_runloop_root_queue_perform_4CF_cold_6(v2);
  }
  dispatch_retain(object);
  unint64_t v3 = (atomic_ullong *)&object[6];
  if (!object[6].isa)
  {
    BOOL v15 = 0;
    goto LABEL_104;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v5 = *(void *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (v5 != -4)
  {
    if (v5)
    {
      int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 0)
      {
        if (add_explicit < 0) {
          _os_object_retain_weak_cold_1();
        }
        *(void *)(v5 + 56) = 0xDEAD000000000000;
        _dispatch_object_dealloc((void *)v5);
      }
    }
    *(void *)(StatusReg + 216) = -4;
  }
  long long v45 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = object;
  *(void *)(StatusReg + 168) = &v45;
  uint64_t v7 = *(void *)(StatusReg + 32);
  unsigned int v8 = (__clz(__rbit32((v7 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v7 >> 8) & 0x3FFF) != 0) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(StatusReg + 224);
  if (v10 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  LODWORD(v11) = v9 | v7 & 0x8E0000FF;
  uint64_t v12 = *(void *)(StatusReg + 200);
  unint64_t v43 = v5;
  if (v12)
  {
    unsigned int v13 = v9 & 0xFFF | v7;
    if (v13)
    {
      if (((unsigned __int16)v12 & 0xFFFu) > v13) {
        unsigned int v13 = v12 & 0xFFF;
      }
      int v14 = v9 & 0x4003000 | v7 & 0x4000000;
      if (v9 >> 12 <= v13 >> 8) {
        int v14 = 0;
      }
      LODWORD(v11) = v12 & 0x880F0000 | v13 | v14;
    }
    else
    {
      unsigned int v16 = v12 | 0x40000000;
      if ((v12 & 0xFFF) == 0) {
        unsigned int v16 = *(void *)(StatusReg + 200);
      }
      LODWORD(v11) = v16 & 0xFFFF0FFF | v9 & 0x4003000 | v7 & 0x4000000;
      if (((v16 >> 8) & 0xF) >= v9 >> 12) {
        LODWORD(v11) = v16;
      }
    }
  }
  if ((~v11 & 0xF0000) != 0) {
    uint64_t v11 = v11 | 0xF0000;
  }
  else {
    uint64_t v11 = v11;
  }
  *(void *)(StatusReg + 200) = v11;
  memset(v44, 0, sizeof(v44));
  dispatch_object_t v17 = object + 13;
  uint64_t isa = (uint64_t)object[13].isa;
  if (!isa) {
    uint64_t isa = _dispatch_wait_for_enqueuer((unint64_t *)&object[13]);
  }
  uint64_t v19 = *(void *)(isa + 16);
  v17->uint64_t isa = (Class)v19;
  if (!v19)
  {
    unint64_t v31 = (unint64_t *)(isa + 16);
    atomic_ullong v32 = *v3;
    while (isa == (v32 & 0xFFFFFFFFFFFFFFF8))
    {
      atomic_ullong v33 = v32;
      atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v33, 0, memory_order_release, memory_order_relaxed);
      BOOL v28 = v33 == v32;
      atomic_ullong v32 = v33;
      if (v28) {
        goto LABEL_32;
      }
    }
    uint64_t v19 = *v31;
    if (!*v31) {
      uint64_t v19 = _dispatch_wait_for_enqueuer(v31);
    }
    v17->uint64_t isa = (Class)v19;
  }
LABEL_32:
  int v20 = *(void (***)(dispatch_object_t))(StatusReg + 192);
  if (v20) {
    (*v20)(object);
  }
  uint64_t v21 = *(void *)isa;
  if (*(void *)isa < 0x1000uLL)
  {
    uint64_t v22 = *(void *)(isa + 24);
    if ((v21 & 4) != 0) {
      *(void *)(isa + 24) = -1;
    }
    uint64_t v23 = v21 & 4;
    uint64_t v24 = *(void *)(isa + 8);
    if (v24 == -1)
    {
      unint64_t v27 = 0;
    }
    else
    {
      uint64_t v25 = *(void *)(StatusReg + 200);
      if (((v25 >> 8) & 0xF) != 0) {
        uint64_t v26 = 256 << ((BYTE1(v25) & 0xFu) - 1);
      }
      else {
        uint64_t v26 = 0;
      }
      unint64_t v27 = v26 & 0xFFFFFFFFFFFFFF00 | *(void *)(StatusReg + 200);
      if ((v24 & 0xFFFFFF) != 0)
      {
        if ((v24 & 0xFFFFFFuLL) >= (v26 & 0xFFFFFF00))
        {
          BOOL v28 = (v25 & 0x44000000) == 0 && (*(void *)(isa + 8) & 0x10000000) == 0;
          if (!v28) {
            unint64_t v27 = v24 & 0xFFFFFF;
          }
        }
      }
      else if ((unsigned __int16)v25 >> 12)
      {
        unint64_t v27 = (256 << (((unsigned __int16)v25 >> 12) - 1)) | 0xFF;
      }
    }
    unint64_t v29 = v27 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v30 = *(void *)(StatusReg + 32);
    if ((v30 & 0x1000000) != 0)
    {
      if (v29) {
        goto LABEL_78;
      }
      unint64_t v29 = v30 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v29 == (v30 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_57:
      if (v22 == -1) {
        goto LABEL_79;
      }
      if (*(void *)(StatusReg + 224) == v22)
      {
        if ((v21 & 4) != 0 && v22)
        {
          if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
            -[OS_voucher release]();
          }
LABEL_80:
          uint64_t v34 = *(void *)(StatusReg + 176);
          if (v34) {
            int v35 = *(_DWORD *)(v34 + 8) + 1;
          }
          else {
            int v35 = 1;
          }
          uint64_t v23 = isa;
          if (v35 <= _dispatch_continuation_cache_limit)
          {
            uint64_t v23 = 0;
            *(void *)(isa + 16) = v34;
            *(_DWORD *)(isa + 8) = v35;
            *(void *)(StatusReg + 176) = isa;
          }
LABEL_85:
          if ((v21 & 8) != 0)
          {
            uint64_t v41 = *(NSObject **)(isa + 48);
            uint64_t v42 = *((void *)v41->isa + 5);
            if (v42 != 514) {
              _dispatch_queue_override_invoke_cold_1(v42);
            }
            _dispatch_client_callout(*(void *)(isa + 40), *(uint64_t (**)(void))(isa + 32));
            dispatch_group_leave(v41);
            if (!v23)
            {
LABEL_87:
              if (!v20) {
                goto LABEL_89;
              }
              goto LABEL_88;
            }
          }
          else
          {
            _dispatch_client_callout(*(void *)(isa + 40), *(uint64_t (**)(void))(isa + 32));
            if (!v23) {
              goto LABEL_87;
            }
          }
          _dispatch_continuation_free_to_cache_limit(v23);
          if (!v20) {
            goto LABEL_89;
          }
LABEL_88:
          v20[1](object);
          goto LABEL_89;
        }
LABEL_79:
        if ((v21 & 4) == 0) {
          goto LABEL_85;
        }
        goto LABEL_80;
      }
      unint64_t v29 = 0;
LABEL_78:
      _dispatch_set_priority_and_voucher_slow(v29, v22, v23 | 2);
      goto LABEL_79;
    }
    if (v29) {
      goto LABEL_78;
    }
    goto LABEL_57;
  }
  if (*(void *)(v21 + 40) == 1) {
    (*(void (**)(uint64_t, void, void))(v21 + 48))(isa, 0, 0);
  }
  else {
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v21 + 64))(isa, v44, 0x80000);
  }
  if (v20) {
    goto LABEL_88;
  }
LABEL_89:
  BOOL v15 = v19 != 0;
  if (!v19) {
    (*((void (**)(dispatch_object_t, void, void))object->isa + 10))(object, 0, 0);
  }
  *(void *)(StatusReg + 200) = v12 & 0xFFF0FFFF;
  unint64_t v36 = v7 & 0xFFFFFFFF02FFFFFFLL;
  if (v7 == -1) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v7 & 0xFFFFFFFF02FFFFFFLL;
  }
  uint64_t v38 = *(void *)(StatusReg + 32);
  if ((v38 & 0x1000000) != 0)
  {
    if (v37)
    {
LABEL_110:
      _dispatch_set_priority_and_voucher_slow(v36, v10, 6);
      goto LABEL_100;
    }
    unint64_t v37 = v38 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v37 == (v38 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_96;
  }
  unint64_t v36 = v37;
  if (v37) {
    goto LABEL_110;
  }
LABEL_96:
  if (v10 != -1)
  {
    if (*(void *)(StatusReg + 224) == v10)
    {
      if (v10
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
      {
        -[OS_voucher release]();
      }
      goto LABEL_100;
    }
    unint64_t v36 = 0;
    goto LABEL_110;
  }
LABEL_100:
  *(_OWORD *)(StatusReg + 160) = v45;
  if (v43 != -4)
  {
    *(void *)(StatusReg + 216) = 0;
    *(void *)(StatusReg + 40) = 0;
  }
  uint64_t v39 = *(void *)(StatusReg + 176);
  if (v39)
  {
    *(void *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup(v39);
  }
LABEL_104:
  dispatch_release(object);
  return v15;
}

void _dispatch_runloop_root_queue_wakeup_4CF(atomic_ullong *a1)
{
  if (*(void *)(*a1 + 40) != 395025) {
    _dispatch_runloop_root_queue_perform_4CF_cold_6(*(void *)(*a1 + 40));
  }

  _dispatch_runloop_queue_wakeup(a1, 0, 0);
}

uint64_t _dispatch_runloop_root_queue_get_port_4CF(unsigned int *a1)
{
  if (*(void *)(*(void *)a1 + 40) != 395025) {
    _dispatch_runloop_root_queue_perform_4CF_cold_6(*(void *)(*(void *)a1 + 40));
  }
  return a1[8];
}

uint64_t _dispatch_get_main_queue_handle_4CF()
{
  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  return dword_1EB1CE220;
}

uint64_t _dispatch_get_main_queue_port_4CF()
{
  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  return dword_1EB1CE220;
}

void _dispatch_main_queue_callback_4CF()
{
  if (!dword_1EB1CE270)
  {
    dword_1EB1CE270 = 1;
    _dispatch_main_queue_drain();
    dword_1EB1CE270 = 0;
  }
}

void _dispatch_main_queue_drain()
{
  long long v45 = 0uLL;
  if (!qword_1EB1CE230) {
    return;
  }
  if ((dword_1EB1CE250 & 0x40000) == 0) {
    _dispatch_main_queue_drain_cold_1();
  }
  uint64_t v0 = qword_1EB1CE238[0];
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v0 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0) {
    _dispatch_main_queue_drain_cold_8(v0);
  }
  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  unint64_t v2 = *(void *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (v2)
  {
    if (v2 == -4) {
      _dispatch_main_queue_drain_cold_7();
    }
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0) {
        _os_object_retain_weak_cold_1();
      }
      *(void *)(v2 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc((void *)v2);
    }
  }
  *(void *)(StatusReg + 216) = -4;
  long long v45 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = &_dispatch_main_q;
  *(void *)(StatusReg + 168) = 0;
  uint64_t v4 = *(void *)(StatusReg + 32);
  unsigned int v5 = (__clz(__rbit32((v4 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v4 >> 8) & 0x3FFF) != 0) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(StatusReg + 224);
  if (v7 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  uint64_t v43 = v7;
  int v8 = v4 & 0x8E0000FF;
  if ((((unsigned __int16)dword_1EB1CE254 ^ (unsigned __int16)v6) & 0xF00) != 0) {
    _dispatch_main_queue_update_priority_from_thread();
  }
  int v9 = v6 | v8;
  uint64_t v10 = *(void *)(StatusReg + 200);
  int v41 = v10;
  uint64_t v42 = v4;
  if (v10)
  {
    unsigned int v11 = v9 & 0xFFF;
    if ((v9 & 0xFFF) != 0)
    {
      int v12 = v10 & 0x880F0000;
      unsigned int v13 = v10 & 0xFFF;
      if (v13 > v11) {
        unsigned int v11 = v13;
      }
      int v14 = v9 & 0x4003000;
      if (v6 >> 12 <= v11 >> 8) {
        int v14 = 0;
      }
      unsigned int v15 = v12 | v11;
    }
    else
    {
      unsigned int v16 = v10 | 0x40000000;
      if ((v10 & 0xFFF) == 0) {
        unsigned int v16 = *(void *)(StatusReg + 200);
      }
      if (((v16 >> 8) & 0xF) >= v6 >> 12) {
        goto LABEL_30;
      }
      unsigned int v15 = v16 & 0xFFFF0FFF;
      int v14 = v9 & 0x4003000;
    }
    unsigned int v16 = v15 | v14;
  }
  else
  {
    unsigned int v16 = v6 | v8;
  }
LABEL_30:
  LODWORD(v17) = v16 | 0xF0000;
  if ((~v16 & 0xF0000) != 0) {
    uint64_t v17 = v17;
  }
  else {
    uint64_t v17 = v16;
  }
  *(void *)(StatusReg + 200) = v17;
  memset(v44, 0, sizeof(v44));
  BOOL v18 = (uint64_t *)off_1EB1CE268;
  if (!off_1EB1CE268) {
    BOOL v18 = (uint64_t *)_dispatch_wait_for_enqueuer((unint64_t *)&off_1EB1CE268);
  }
  off_1EB1CE268 = 0;
  unint64_t v19 = atomic_exchange_explicit(&qword_1EB1CE230, 0, memory_order_release) & 0xFFFFFFFFFFFFFFF8;
  do
  {
    if (v18 == (uint64_t *)v19)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = v18[2];
      if (!v20) {
        uint64_t v20 = _dispatch_wait_for_enqueuer((unint64_t *)v18 + 2);
      }
    }
    uint64_t v21 = *(void (***)(__objc2_class **))(StatusReg + 192);
    if (v21) {
      (*v21)(&_dispatch_main_q);
    }
    unint64_t v22 = *v18;
    if ((unint64_t)*v18 >= 0x1000)
    {
      if (*(void *)(v22 + 40) == 1) {
        (*(void (**)(uint64_t *, void, void))(v22 + 48))(v18, 0, 0);
      }
      else {
        (*(void (**)(uint64_t *, _OWORD *, uint64_t))(v22 + 64))(v18, v44, 0x80000);
      }
      if (v21) {
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    uint64_t v23 = v18[3];
    if ((v22 & 4) != 0) {
      v18[3] = -1;
    }
    uint64_t v24 = v18[1];
    if (v24 == -1)
    {
      unint64_t v27 = 0;
    }
    else
    {
      uint64_t v25 = *(void *)(StatusReg + 200);
      if (((v25 >> 8) & 0xF) != 0) {
        uint64_t v26 = 256 << ((BYTE1(v25) & 0xFu) - 1);
      }
      else {
        uint64_t v26 = 0;
      }
      unint64_t v27 = v26 & 0xFFFFFFFFFFFFFF00 | *(void *)(StatusReg + 200);
      if ((v24 & 0xFFFFFF) != 0)
      {
        if ((v24 & 0xFFFFFFuLL) >= (v26 & 0xFFFFFF00)
          && ((v25 & 0x44000000) != 0 || (v18[1] & 0x10000000) != 0))
        {
          unint64_t v27 = v24 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v25 >> 12)
      {
        unint64_t v27 = (256 << (((unsigned __int16)v25 >> 12) - 1)) | 0xFF;
      }
    }
    uint64_t v29 = v22 & 4;
    unint64_t v30 = v27 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v31 = *(void *)(StatusReg + 32);
    if ((v31 & 0x1000000) != 0)
    {
      if (v30) {
        goto LABEL_79;
      }
      unint64_t v30 = v31 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v30 == (v31 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_65;
    }
    if (v30) {
      goto LABEL_79;
    }
LABEL_65:
    if (v23 == -1) {
      goto LABEL_80;
    }
    if (*(void *)(StatusReg + 224) != v23)
    {
      unint64_t v30 = 0;
LABEL_79:
      _dispatch_set_priority_and_voucher_slow(v30, v23, v29 | 2);
      goto LABEL_80;
    }
    if ((v22 & 4) != 0 && v23)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
        -[OS_voucher release]();
      }
LABEL_81:
      uint64_t v32 = *(void *)(StatusReg + 176);
      if (v32) {
        int v33 = *(_DWORD *)(v32 + 8) + 1;
      }
      else {
        int v33 = 1;
      }
      uint64_t v29 = (uint64_t)v18;
      if (v33 <= _dispatch_continuation_cache_limit)
      {
        uint64_t v29 = 0;
        v18[2] = v32;
        *((_DWORD *)v18 + 2) = v33;
        *(void *)(StatusReg + 176) = v18;
      }
      goto LABEL_86;
    }
LABEL_80:
    if ((v22 & 4) != 0) {
      goto LABEL_81;
    }
LABEL_86:
    if ((v22 & 8) != 0)
    {
      uint64_t v34 = v18[6];
      uint64_t v35 = *((void *)v34->isa + 5);
      if (v35 != 514) {
        _dispatch_queue_override_invoke_cold_1(v35);
      }
      _dispatch_client_callout(v18[5], (uint64_t (*)(void))v18[4]);
      dispatch_group_leave(v34);
      if (!v29)
      {
LABEL_88:
        if (!v21) {
          goto LABEL_90;
        }
LABEL_89:
        v21[1](&_dispatch_main_q);
        goto LABEL_90;
      }
    }
    else
    {
      _dispatch_client_callout(v18[5], (uint64_t (*)(void))v18[4]);
      if (!v29) {
        goto LABEL_88;
      }
    }
    _dispatch_continuation_free_to_cache_limit(v29);
    if (v21) {
      goto LABEL_89;
    }
LABEL_90:
    BOOL v18 = (uint64_t *)v20;
  }
  while (v20);
  ((void (*)(__objc2_class **, void, void))_dispatch_main_q[2].isa)(&_dispatch_main_q, 0, 0);
  *(void *)(StatusReg + 200) = v41 & 0xFFF0FFFF;
  unint64_t v36 = v42 & 0xFFFFFFFF02FFFFFFLL;
  if (v42 == -1) {
    unint64_t v37 = 0;
  }
  else {
    unint64_t v37 = v42 & 0xFFFFFFFF02FFFFFFLL;
  }
  uint64_t v38 = *(void *)(StatusReg + 32);
  if ((v38 & 0x1000000) != 0)
  {
    uint64_t v39 = v43;
    if (!v37)
    {
      unint64_t v37 = v38 & 0xFFFFFFFFFEFFFFFFLL;
      goto LABEL_113;
    }
LABEL_117:
    _dispatch_set_priority_and_voucher_slow(v36, v39, 6);
  }
  else
  {
    uint64_t v39 = v43;
    if (v37 == (v38 & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_101;
    }
LABEL_113:
    unint64_t v36 = v37;
    if (v37) {
      goto LABEL_117;
    }
LABEL_101:
    if (v39 != -1)
    {
      if (*(void *)(StatusReg + 224) != v39)
      {
        unint64_t v36 = 0;
        goto LABEL_117;
      }
      if (v39
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v39 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
      {
        -[OS_voucher release]();
      }
    }
  }
  *(_OWORD *)(StatusReg + 160) = v45;
  *(void *)(StatusReg + 216) = 0;
  *(void *)(StatusReg + 40) = 0;
  uint64_t v40 = *(void *)(StatusReg + 176);
  if (v40)
  {
    *(void *)(StatusReg + 176) = 0;
    _dispatch_cache_cleanup(v40);
  }
}

uint64_t _dispatch_main_queue_push(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v4 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
  unsigned int v5 = __clz(__rbit32(v4));
  *(void *)(a2 + 16) = 0;
  *(void *)(StatusReg + 976) = result + 48;
  uint64_t v6 = *(void *)(result + 48);
  do
  {
    uint64_t v7 = v6;
    BOOL v8 = v4 != 0 && v5 >= (v6 & 7u);
    if (v8) {
      uint64_t v9 = v5 + 1;
    }
    else {
      uint64_t v9 = v6 & 7;
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 48), (unint64_t *)&v6, v9 | a2, memory_order_release, memory_order_relaxed);
  }
  while (v6 != v7);
  uint64_t v10 = (void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 16);
  if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    uint64_t v10 = (void *)(result + 104);
  }
  *uint64_t v10 = a2;
  *(void *)(StatusReg + 976) = 0;
  if (!v7 || v8 && (*(_DWORD *)(result + 80) & 0x40000) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 80))(result, a3, 2);
  }
  if (((*(_DWORD *)(result + 84) >> 8) & 0xFu) >= a3) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a3;
  }
  if ((*(_DWORD *)(result + 60) & 7) == 0 || (*(_DWORD *)(result + 60) & 7u) < v11) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)result + 80))(result, v11, 0);
  }
  return result;
}

void _dispatch_main_queue_wakeup(uint64_t a1, atomic_ullong *a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0) {
    _dispatch_runloop_queue_wakeup((atomic_ullong *)a1, a2, a3);
  }
  else {
    _dispatch_lane_wakeup(a1, a2, a3);
  }
}

void dispatch_main(void)
{
  if (_dispatch_root_queues_pred != -1) {
    goto LABEL_9;
  }
  while (1)
  {
    if (!pthread_main_np())
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main() must be called on the main thread";
      __break(1u);
    }
    if (!dword_1EB1CE270)
    {
      dword_1EB1CE270 = 1;
      _dispatch_main_queue_drain();
      dword_1EB1CE270 = 0;
      _dispatch_program_is_probably_callback_driven = 1;
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace();
      }
      pthread_exit(0);
    }
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main called from a block on the main queue";
    __break(1u);
LABEL_9:
    dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
  }
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  if ((flags & 0xFFFFFFFFFFFFFFF9) != 0 || (~(_BYTE)flags & 6) == 0) {
    return 0;
  }
  if (identifier <= -3)
  {
    if (identifier == -32768)
    {
      uint64_t v3 = 3;
      goto LABEL_17;
    }
    if (identifier != -128) {
      goto LABEL_14;
    }
LABEL_11:
    uint64_t v3 = 6;
    goto LABEL_17;
  }
  switch(identifier)
  {
    case -2:
      goto LABEL_11;
    case 0:
      uint64_t v3 = 9;
      goto LABEL_17;
    case 2:
      uint64_t v3 = 12;
      goto LABEL_17;
  }
LABEL_14:
  HIDWORD(v5) = identifier - 5;
  LODWORD(v5) = identifier - 5;
  unsigned int v4 = v5 >> 2;
  if (v4 > 7 || ((0xBBu >> v4) & 1) == 0) {
    return 0;
  }
  uint64_t v3 = qword_18A97E340[v4];
LABEL_17:
  uintptr_t v6 = (flags >> 1) & 2;
  if ((flags & 2) != 0) {
    uintptr_t v6 = 1;
  }
  return (dispatch_queue_global_t)(&_dispatch_root_queues + 16 * (v3 + v6));
}

uint64_t libdispatch_init()
{
  if (_dispatch_getenv_BOOL("LIBDISPATCH_STRICT", 0)) {
    _dispatch_mode |= 1u;
  }
  if (_dispatch_getenv_BOOL("LIBDISPATCH_COOPERATIVE_POOL_STRICT", 0)) {
    _dispatch_mode |= 4u;
  }
  HIDWORD(v1) = qos_class_main() - 5;
  LODWORD(v1) = HIDWORD(v1);
  unsigned int v0 = v1 >> 2;
  if (v0 > 7) {
    int v2 = 0;
  }
  else {
    int v2 = dword_18A97E380[v0];
  }
  dword_1EB1CE254 = v2;
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  pthread_key_init_np();
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = &_dispatch_main_q;
  atomic_ullong v4 = qword_1EB1CE238[0];
  atomic_ullong v5 = qword_1EB1CE238[0];
  do
  {
    atomic_compare_exchange_strong_explicit(qword_1EB1CE238, (unint64_t *)&v5, v4 & 0xFFFFFFFF00000003 | (4 * ((StatusReg[3] >> 2) & 0x3FFFFFFFLL)), memory_order_relaxed, memory_order_relaxed);
    BOOL v6 = v5 == v4;
    atomic_ullong v4 = v5;
  }
  while (!v6);
  if ((~*((_DWORD *)StatusReg + 50) & 0xF0000) != 0) {
    StatusReg[25] = StatusReg[25] | 0xF0000;
  }
  _dispatch_time_init();
  _dispatch_vtable_init();
  _os_object_init();
  _voucher_init();

  return _workgroup_init();
}

void _dispatch_queue_cleanup(__objc2_class **a1)
{
  if (a1 != &_dispatch_main_q) {
    _dispatch_queue_cleanup_cold_1((uint64_t)a1);
  }
  _dispatch_queue_cleanup2();
}

void _dispatch_frame_cleanup(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch frame is active";
  qword_1E91199F0 = a1;
  __break(1u);
}

uint64_t _dispatch_cache_cleanup(uint64_t result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = *(void *)(result + 16);
      _dispatch_continuation_free_to_heap(result);
      uint64_t result = v1;
    }
    while (v1);
  }
  return result;
}

void _dispatch_context_cleanup(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch context is set";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_wlh_cleanup(uint64_t a1)
{
  unint64_t v1 = a1 & 0xFFFFFFFFFFFFFFFELL;
  int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 96), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit <= 0)
  {
    if (add_explicit < 0) {
      _os_object_retain_weak_cold_1();
    }
    *(void *)(v1 + 56) = 0xDEAD000000000000;
    _dispatch_object_dealloc((void *)v1);
  }
}

void _dispatch_deferred_items_cleanup(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit with unhandled deferred items";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_queue_atfork_child()
{
  if ((dword_1EB1CE250 & 0x40000) != 0)
  {
    uint64_t v0 = qword_1EB1CE238[0];
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v2 = v0;
    do
    {
      atomic_compare_exchange_strong_explicit(qword_1EB1CE238, (unint64_t *)&v2, v0 & 0xFFFFFFFF00000003 | (4 * ((*(void *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), memory_order_relaxed, memory_order_relaxed);
      BOOL v3 = v2 == v0;
      uint64_t v0 = v2;
    }
    while (!v3);
  }
  if (_dispatch_unsafe_fork)
  {
    uint64_t v4 = 0;
    off_1EB1CE268 = (_UNKNOWN *)256;
    qword_1EB1CE230 = 256;
    qword_1EB1CE2E8 = 256;
    qword_1EB1CE2B0 = 256;
    do
    {
      atomic_ullong v5 = (char *)&_dispatch_root_queues + v4;
      *((void *)v5 + 13) = 256;
      *((void *)v5 + 6) = 256;
      v4 += 128;
    }
    while (v4 != 2304);
  }
}

void _dispatch_fork_becomes_unsafe_slow()
{
  if ((atomic_fetch_or_explicit(&_dispatch_unsafe_fork, 1u, memory_order_relaxed) & 2) != 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Transition to multithreaded is prohibited";
    __break(1u);
  }
}

uint64_t _dispatch_prohibit_transition_to_multithreaded(uint64_t result)
{
  if (result)
  {
    if (atomic_fetch_or_explicit(&_dispatch_unsafe_fork, 2u, memory_order_relaxed))
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: The executable is already multithreaded";
      __break(1u);
    }
  }
  else
  {
    atomic_fetch_and_explicit(&_dispatch_unsafe_fork, 0xFDu, memory_order_relaxed);
  }
  return result;
}

void _dispatch_block_async_invoke2(char *aBlock, const char *a2)
{
  char v2 = (char)a2;
  BOOL v3 = aBlock;
  uint64_t v4 = (uint64_t (*)())*((void *)aBlock + 2);
  BOOL v5 = v4 == _dispatch_block_special_invoke;
  if (v4 == _dispatch_block_special_invoke)
  {
    BOOL v6 = aBlock + 32;
    uint64_t v7 = *((void *)aBlock + 4);
    BOOL v5 = v7 == 3512316172;
    if (v7 != 3512316172)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_1E91199F0 = v7;
      __break(1u);
      goto LABEL_23;
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  uint64_t v8 = *((unsigned int *)v6 + 4);
  if ((v8 & 4) != 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
    qword_1E91199F0 = v8;
    __break(1u);
    goto LABEL_16;
  }
  if ((v8 & 1) == 0) {
    aBlock = (char *)(*(uint64_t (**)(void))(*((void *)v6 + 5) + 16))();
  }
  if ((v8 & 8) == 0 && !atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 5, 1u, memory_order_relaxed)) {
    dispatch_group_leave(*((dispatch_group_t *)v6 + 6));
  }
  __swp(aBlock, (unsigned int *)v6 + 14);
  if (aBlock)
  {
    if (*((_DWORD *)aBlock + 2) != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)aBlock + 2, 0xFFFFFFFE, memory_order_release);
      BOOL v5 = add_explicit == 2;
      if (add_explicit <= 2)
      {
LABEL_16:
        if (v5)
        {
          _os_object_dispose(aBlock, a2);
          if ((v2 & 1) == 0) {
            return;
          }
          goto LABEL_19;
        }
LABEL_23:
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        return;
      }
    }
  }
  if ((v2 & 1) == 0) {
    return;
  }
LABEL_19:

  _Block_release(v3);
}

void _dispatch_lane_non_barrier_complete(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  unint64_t v4 = *(void *)(a1 + 56);
  do
  {
    unint64_t v5 = v4;
    unint64_t v6 = v4 - 0x20000000000;
    if ((v4 & 0xFFFFFFFC) != 0)
    {
      v6 |= 0x8000000000uLL;
    }
    else if (!(v6 >> 53))
    {
      unint64_t v7 = (v4 & 0x10000000000) != 0
         ? v4 - 0x10000000000
         : v6 + ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41);
      BOOL v8 = (v7 & 0x3FFE0000000000) == 0x20000000000000;
      v6 |= (v5 >> 39) & 1;
      unint64_t v9 = ((v7 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v3;
      if (v8) {
        unint64_t v6 = v9;
      }
    }
    unint64_t v4 = v5;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v4, v6, memory_order_relaxed, memory_order_relaxed);
  }
  while (v4 != v5);
  if ((~v5 & 0x1800000000) == 0)
  {
    uint64_t v10 = HIDWORD(v5) & 7;
    unsigned int v11 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v11) & 0xF) < v10) {
      *(void *)(StatusReg + 200) = v11 & 0xFFF0FFFF | (v10 << 16);
    }
  }
  if (((v6 ^ v5) & 0x40000000000000) != 0)
  {
    _dispatch_lane_barrier_complete(a1, 0, a2);
  }
  else if ((v6 ^ v5))
  {
    if ((a2 & 1) != 0
      || *(_DWORD *)(a1 + 8) == 0x7FFFFFFF
      || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 2u, memory_order_relaxed) > 0)
    {
      (*(void (**)(void, uint64_t, unint64_t))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24), a1, HIDWORD(v6) & 7);
    }
    else
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if (a2)
  {
    _os_object_release_internal_n((void *)a1, (const char *)2);
  }
}

double _dispatch_sync_f_slow(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4, atomic_ullong *a5, uint64_t a6)
{
  if (a5[3])
  {
    unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v11 = StatusReg[4];
    uint64_t v21 = 0;
    v13[0] = a6 | 1;
    v13[1] = v11 | 0x10000000;
    v13[2] = 0;
    v13[3] = StatusReg[28];
    v13[4] = _dispatch_async_and_wait_invoke;
    v13[5] = v13;
    v13[6] = 0;
    uint64_t v14 = a1;
    unsigned int v15 = a3;
    uint64_t v16 = a2;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = 0;
    int v20 = StatusReg[3];
    __DISPATCH_WAIT_FOR_QUEUE__((uint64_t)v13, a5);
    if (v15) {
      _dispatch_sync_invoke_and_complete_recurse(a1, a2, a3, a4);
    }
    else {
      _dispatch_sync_complete_recurse(a1, v14, a4);
    }
  }
  else
  {
    return _dispatch_sync_function_invoke((uint64_t)a5, a2, a3);
  }
  return result;
}

double _dispatch_sync_recurse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
LABEL_2:
  if (*(_WORD *)(v5 + 80) == 1)
  {
    uint64_t v7 = *(void *)(v5 + 56);
    while (v7 == (v7 & 0x3000000000 | 0x1FFE0000000000))
    {
      uint64_t v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 56), (unint64_t *)&v8, v6 | v7 & 0x3000000000 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      BOOL v9 = v8 == v7;
      uint64_t v7 = v8;
      if (v9) {
        goto LABEL_7;
      }
    }
    uint64_t v13 = 2;
  }
  else
  {
    if (!*(void *)(v5 + 48))
    {
      uint64_t v10 = *(void *)(v5 + 56);
      while ((v10 & 0xFFC0018000000000) == 0)
      {
        uint64_t v11 = v10;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 56), (unint64_t *)&v11, v10 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        BOOL v9 = v11 == v10;
        uint64_t v10 = v11;
        if (v9)
        {
LABEL_7:
          uint64_t v5 = *(void *)(v5 + 24);
          if (*(void *)(v5 + 24)) {
            goto LABEL_2;
          }
          _dispatch_sync_invoke_and_complete_recurse(a1, a2, a3, a4);
          return result;
        }
      }
    }
    uint64_t v13 = 0;
  }
  return _dispatch_sync_f_slow(a1, a2, a3, a4, (atomic_ullong *)v5, v13);
}

void _dispatch_lane_barrier_sync_invoke_and_complete(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v8 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v8;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v8;
  if (!*(void *)(a1 + 48) && *(unsigned __int16 *)(a1 + 80) < 2u)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    while ((v5 & 0xFF80008800000001) == 0)
    {
      uint64_t v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v6, (v5 & 0xFFFFFFF000000001) - 0x40020000000000, memory_order_release, memory_order_relaxed);
      BOOL v7 = v6 == v5;
      uint64_t v5 = v6;
      if (v7) {
        return;
      }
    }
  }
  _dispatch_lane_barrier_complete(a1, 0, 0);
}

uint64_t _dispatch_async_and_wait_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(unsigned char *)(a1 + 106)) {
    uint64_t v3 = (void *)MEMORY[0x18C121B40]();
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v6 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = v2;
  *(void *)(StatusReg + 168) = a1 + 80;
  _dispatch_client_callout(*(void *)(a1 + 72), *(uint64_t (**)(void))(a1 + 64));
  *(_OWORD *)(StatusReg + 160) = v6;
  if (v3) {
  *(void *)(a1 + 56) = *(void *)(StatusReg + 160);
  }
  *(void *)(a1 + 64) = 0;
  if (*(void *)(a1 + 48) == -4)
  {
    uint64_t result = a1 + 96;
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 96), 1u, memory_order_release))
    {
      return _dispatch_thread_event_signal_slow();
    }
  }
  else
  {
    return _dispatch_event_loop_cancel_waiter(a1);
  }
  return result;
}

void __DISPATCH_WAIT_FOR_QUEUE__(uint64_t a1, atomic_ullong *a2)
{
  uint64_t v4 = a2[7];
  while ((v4 & 0xFF80002000000002) == 0x2000000002)
  {
    uint64_t v5 = v4 | 0x800000000;
    uint64_t v6 = v4;
    atomic_compare_exchange_strong_explicit(a2 + 7, (unint64_t *)&v6, v4 | 0x800000000, memory_order_relaxed, memory_order_relaxed);
    BOOL v7 = v6 == v4;
    uint64_t v4 = v6;
    if (v7) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = v4;
LABEL_5:
  if ((*(_DWORD *)(a1 + 100) ^ v5) <= 3)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_sync called on queue already owned by current thread";
    qword_1E91199F0 = v5;
    __break(1u);
    return;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(StatusReg + 160);
  if ((v5 & 0xFF80001000000000) != 0)
  {
    *(void *)(a1 + 48) = -4;
    BOOL v9 = (void *)(a1 + 48);
LABEL_8:
    unsigned int v10 = *(_DWORD *)(StatusReg + 200);
    unsigned int v11 = (v10 >> 8) & 0xF;
    unsigned int v12 = (unsigned __int16)v10 >> 12;
    unsigned int v13 = HIWORD(v10) & 0xF;
    if (v11 <= v12) {
      unsigned int v11 = v12;
    }
    if (v11 > v13) {
      LOBYTE(v13) = v11;
    }
    *(unsigned char *)(a1 + 105) = v13;
    *(unsigned char *)(a1 + 104) = v13;
    *(_DWORD *)(a1 + 96) = 0;
    goto LABEL_17;
  }
  if ((v5 & 0x2000000000) != 0)
  {
    *(void *)(a1 + 48) = a2;
    uint64_t v14 = a2;
  }
  else
  {
    _dispatch_wait_compute_wlh((uint64_t)a2, a1);
    uint64_t v14 = *(atomic_ullong **)(a1 + 48);
  }
  BOOL v9 = (void *)(a1 + 48);
  if (v14 == (atomic_ullong *)-4) {
    goto LABEL_8;
  }
LABEL_17:
  *(void *)(StatusReg + 968) = a1;
  unsigned int v15 = __clz(__rbit32((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF) != 0) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 0;
  }
  (*(void (**)(atomic_ullong *, uint64_t, uint64_t))(*a2 + 88))(a2, a1, v16);
  if (*(void *)(a1 + 48) == -4)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 96), 0xFFFFFFFF, memory_order_acquire) != 1) {
      _dispatch_thread_event_wait_slow((atomic_uint *)(a1 + 96));
    }
  }
  else if ((*(unsigned char *)(a1 + 106) & 8) == 0)
  {
    _dispatch_event_loop_wait_for_ownership(a1);
  }
  *(void *)(StatusReg + 968) = 0;
  if (*v9 == -4)
  {
    unsigned int v17 = *(unsigned __int8 *)(a1 + 105);
    if (v17 > *(unsigned __int8 *)(a1 + 104))
    {
      unsigned int v18 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v18) & 0xF) < v17) {
        *(void *)(StatusReg + 200) = v18 & 0xFFF0FFFF | (v17 << 16);
      }
    }
  }
}

void _dispatch_sync_complete_recurse(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a3 >> 1) & 1;
  do
  {
    if (a1 == a2) {
      break;
    }
    if (v5) {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 80))(a1, 0, 4);
    }
    else {
      _dispatch_lane_non_barrier_complete(a1, 0);
    }
    a1 = *(void *)(a1 + 24);
    LOBYTE(v5) = *(unsigned __int16 *)(a1 + 80) == 1;
  }
  while (*(void *)(a1 + 24));
}

void _dispatch_sync_invoke_and_complete_recurse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v7 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v7;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v7;
  _dispatch_sync_complete_recurse(a1, 0, a4);
}

uint64_t _dispatch_wait_compute_wlh(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 80);
  if ((v4 & 0x400000) != 0)
  {
    int v5 = 0;
    *(unsigned char *)(a2 + 106) |= 0x40u;
    uint64_t v6 = a1 + 100;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 100), (unsigned int *)&v5, *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v5) {
      _dispatch_unfair_lock_lock_slow(v6);
    }
  }
  uint64_t result = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(result + 56);
  while (1)
  {
    if (v8 >> 55) {
      goto LABEL_18;
    }
    if ((~v8 & 0x2000000002) != 0) {
      break;
    }
    uint64_t v9 = v8 | 0x800000000;
    unint64_t v10 = v8;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 56), &v10, v8 | 0x800000000, memory_order_relaxed, memory_order_relaxed);
    BOOL v11 = v10 == v8;
    unint64_t v8 = v10;
    if (v11)
    {
      if ((v9 & 0x1000000000) == 0) {
        goto LABEL_10;
      }
LABEL_18:
      *(unsigned char *)(a2 + 106) &= ~0x40u;
      *(void *)(a2 + 48) = -4;
      goto LABEL_19;
    }
  }
  uint64_t v9 = v8;
  if ((v8 & 0x1000000000) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v9 & 0x2000000000) != 0)
  {
    if (*(unsigned char *)(*(void *)result + 40) == 18)
    {
      *(unsigned char *)(a2 + 106) = *(unsigned char *)(a2 + 106) & 0xAF | 0x10;
    }
    else if ((*(unsigned char *)(a2 + 106) & 0x40) != 0 {
           && (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 96), 1u, memory_order_relaxed) & 0x80000000) != 0)
    }
    {
      dispatch_set_target_queue_cold_2();
    }
    *(void *)(a2 + 48) = result;
  }
  else
  {
    uint64_t result = _dispatch_wait_compute_wlh();
  }
LABEL_19:
  if ((v4 & 0x400000) != 0)
  {
    if ((*(unsigned char *)(a2 + 106) & 0x10) != 0) {
      atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
    }
    uint64_t result = a1 + 100;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    unsigned int v14 = atomic_exchange_explicit((atomic_uint *volatile)(a1 + 100), 0, memory_order_release);
    if (v14 != v13)
    {
      uint64_t result = _dispatch_unfair_lock_unlock_slow(result, v14);
      if ((v14 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000) == 0) {
        *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
    }
  }
  return result;
}

void _dispatch_sync_invoke_and_complete(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v5 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v5;
  _dispatch_client_callout(a2, a3);
  *(_OWORD *)(StatusReg + 160) = v5;
  _dispatch_lane_non_barrier_complete(a1, 0);
}

void _dispatch_async_and_wait_recurse(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = a1;
  if ((*(_DWORD *)(a1 + 80) & 0x1000000) != 0) {
    goto LABEL_34;
  }
  long long v7 = (_DWORD *)(a1 + 80);
  uint64_t v8 = a3 & 0xFFFFFFFC;
  uint64_t v9 = a1;
  unint64_t v10 = a4;
LABEL_3:
  if ((v5 & 0x3000000000) != 0)
  {
    unint64_t v11 = *(void *)(v9 + 24);
    if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
    {
      uint64_t v6 = v9;
LABEL_34:
      *(void *)a2 &= ~0x80uLL;
      *(void *)(a2 + 56) = v6;
      uint64_t v9 = v6;
      goto LABEL_32;
    }
  }
  if ((v10 & 2) != 0)
  {
    unint64_t v13 = (unint64_t)*(unsigned __int16 *)(v9 + 80) << 41;
    uint64_t v14 = *(void *)(v9 + 56);
    while (v14 == (v14 & 0x3000000000) - v13 + 0x20000000000000)
    {
      uint64_t v15 = v14;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v9 + 56), (unint64_t *)&v15, v14 & 0x3000000000 | v8 | 0x60000000000002, memory_order_acquire, memory_order_acquire);
      BOOL v16 = v15 == v14;
      uint64_t v14 = v15;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  else if (!*(void *)(v9 + 48))
  {
    uint64_t v21 = *(void *)(v9 + 56);
    while ((v21 & 0xFFC0018000000000) == 0)
    {
      uint64_t v22 = v21;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v9 + 56), (unint64_t *)&v22, v21 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
      BOOL v16 = v22 == v21;
      uint64_t v21 = v22;
      if (v16)
      {
LABEL_13:
        unsigned int v17 = *(_DWORD *)(v9 + 84) & 0xFFF;
        if (v17)
        {
          uint64_t v18 = v17 >= 0x100 ? 256 << (BYTE1(v17) - 1) : 0;
          unint64_t v19 = v18 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(v9 + 84);
          if (v19 > (*(void *)(a2 + 8) & 0xFFFFFFuLL)) {
            *(void *)(a2 + 8) = v19 | 0x10000000;
          }
        }
        if ((*(unsigned char *)(a2 + 106) & 3) == 0) {
          *(unsigned char *)(a2 + 106) = *(unsigned char *)(a2 + 106) & 0xFC | HIWORD(*v7) & 3;
        }
        uint64_t v6 = *(void *)(v9 + 24);
        if (!*(void *)(v6 + 24))
        {
          _dispatch_async_and_wait_invoke_and_complete_recurse(a1, a2, v9, a4);
          return;
        }
        long long v7 = (_DWORD *)(v6 + 80);
        unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFFDLL;
        v10 |= 2uLL;
        if (*(_WORD *)(v6 + 80) != 1) {
          unint64_t v10 = v20;
        }
        *(void *)a2 = v10;
        uint64_t v5 = *(void *)(v6 + 56);
        uint64_t v9 = v6;
        if ((*(_DWORD *)(v6 + 80) & 0x1000000) == 0) {
          goto LABEL_3;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_32:
  _dispatch_async_and_wait_f_slow(a1, a4, a2, (atomic_ullong *)v9);
}

void _dispatch_async_and_wait_f_slow(uint64_t a1, unint64_t a2, uint64_t a3, atomic_ullong *a4)
{
  __DISPATCH_WAIT_FOR_QUEUE__(a3, a4);
  uint64_t v7 = *(void *)(a3 + 56);
  if (*(void *)(a3 + 64))
  {
    _dispatch_async_and_wait_invoke_and_complete_recurse(a1, a3, v7, a2);
  }
  else
  {
    uint64_t v8 = *(void *)(a3 + 56);
    _dispatch_sync_complete_recurse(a1, v8, a2);
  }
}

void _dispatch_async_and_wait_invoke_and_complete_recurse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned char *)(*(void *)a3 + 40) != 18 && (*(void *)(a3 + 56) & 0x2000000000) == 0) {
    a3 = -4;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 216);
  *(void *)(StatusReg + 216) = a3;
  if (*(unsigned char *)(a2 + 106)) {
    uint64_t v9 = (void *)MEMORY[0x18C121B40]();
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 24);
  long long v20 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v20;
  uint64_t v12 = *(void *)(StatusReg + 32);
  uint64_t v13 = v12 & 0xFFFFFF;
  BOOL v14 = (v12 & 0xFFFFFFuLL) >= (v10 & 0xFFFFFFuLL) || (v12 & 0xFFFFFF) == 0;
  if (v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v12 & 0xFFFFFF;
  }
  unint64_t v16 = v10 & 0xFFFFFFFF02FFFFFFLL;
  if (v14) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = v10 & 0xFFFFFFFF02FFFFFFLL;
  }
  if ((v12 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_41:
      _dispatch_set_priority_and_voucher_slow(v16, v11, 0);
      uint64_t v11 = v19;
      goto LABEL_20;
    }
    unint64_t v17 = v12 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v12 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_16;
  }
  unint64_t v16 = v17;
  if (v17) {
    goto LABEL_41;
  }
LABEL_16:
  if (v11 == -1) {
    goto LABEL_20;
  }
  if (*(void *)(StatusReg + 224) != v11)
  {
    unint64_t v16 = 0;
    goto LABEL_41;
  }
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_45:
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_20:
  _dispatch_client_callout(*(void *)(a2 + 72), *(uint64_t (**)(void))(a2 + 64));
  uint64_t v18 = *(void *)(StatusReg + 32);
  if ((v18 & 0x1000000) != 0)
  {
    if (!v14)
    {
LABEL_43:
      _dispatch_set_priority_and_voucher_slow(v13, v11, 6);
      goto LABEL_26;
    }
    uint64_t v13 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else
  {
    if (v15 == (v18 & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_22;
    }
    uint64_t v13 = v15;
  }
  if (v13) {
    goto LABEL_43;
  }
LABEL_22:
  if (v11 == -1) {
    goto LABEL_26;
  }
  if (*(void *)(StatusReg + 224) != v11)
  {
    uint64_t v13 = 0;
    goto LABEL_43;
  }
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
    goto LABEL_45;
  }
LABEL_26:
  *(_OWORD *)(StatusReg + 160) = v20;
  if (v9) {
  *(void *)(StatusReg + 216) = v8;
  }
  _dispatch_sync_complete_recurse(a1, 0, a4);
}

void _dispatch_queue_specific_head_dispose(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  if (!v2) {
    goto LABEL_9;
  }
  v2[4] = v7;
  uint64_t v4 = a1[2];
  v7[0] = v2;
  v7[1] = v4;
  a1[1] = 0;
  a1[2] = v3;
  do
  {
    uint64_t v5 = (void *)v2[3];
    if (v2[2])
    {
      v2[3] = 0;
      uint64_t v6 = (void *)a1[2];
      v2[4] = v6;
      void *v6 = v2;
      a1[2] = v2 + 3;
    }
    else
    {
      free(v2);
    }
    uint64_t v2 = v5;
  }
  while (v5);
  if (*v3) {
    _dispatch_barrier_async_detached_f((uint64_t)&unk_1EB1CE780, (uint64_t)a1, (uint64_t)_dispatch_queue_specific_head_dispose_slow);
  }
  else {
LABEL_9:
  }
    free(a1);
}

void _dispatch_queue_specific_head_dispose_slow(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 24);
      _dispatch_client_callout(*(void *)(v2 + 8), *(uint64_t (**)(void))(v2 + 16));
      free((void *)v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }

  free(a1);
}

uint64_t _dispatch_non_barrier_waiter_redirect_or_wake(uint64_t a1, uint64_t a2)
{
LABEL_1:
  uint64_t v2 = *(void *)(a1 + 56);
  if ((BYTE4(v2) & 7u) > *(unsigned __int8 *)(a2 + 105)) {
    *(unsigned char *)(a2 + 105) = BYTE4(v2) & 7;
  }
  uint64_t v3 = *(void *)a2;
  if ((*(void *)a2 & 0x80) != 0)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 84) & 0xFFF;
    if (v4)
    {
      uint64_t v5 = v4 >= 0x100 ? 256 << (BYTE1(v4) - 1) : 0;
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(a1 + 84);
      if (v6 > (*(void *)(a2 + 8) & 0xFFFFFFuLL)) {
        *(void *)(a2 + 8) = v6 | 0x10000000;
      }
    }
    if ((*(unsigned char *)(a2 + 106) & 3) == 0) {
      *(unsigned char *)(a2 + 106) = *(unsigned char *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
    }
    if ((v2 & 0x3000000000) == 0) {
      goto LABEL_15;
    }
    *(void *)(a2 + 56) = a1;
    return _dispatch_waiter_wake_wlh_anon(a2);
  }
  if ((v2 & 0x3000000000) != 0) {
    return _dispatch_waiter_wake_wlh_anon(a2);
  }
LABEL_15:
  a1 = *(void *)(a1 + 24);
  if (*(_WORD *)(a1 + 80) == 1)
  {
    *(void *)a2 = v3 | 2;
  }
  else
  {
    *(void *)a2 = v3 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(void *)(a1 + 48))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      while ((v7 & 0xFFC0018000000000) == 0)
      {
        uint64_t v8 = v7;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v8, v7 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
        if (v9) {
          goto LABEL_1;
        }
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t _dispatch_waiter_wake_wlh_anon(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 105) > *(unsigned __int8 *)(a1 + 104)) {
    _pthread_workqueue_override_start_direct();
  }
  uint64_t result = a1 + 96;
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 96), 1u, memory_order_release))
  {
    return _dispatch_thread_event_signal_slow();
  }
  return result;
}

uint64_t _dispatch_barrier_waiter_redirect_or_wake(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  if (*(void *)(a2 + 48) == -4 && (BYTE4(a4) & 7u) > *(unsigned __int8 *)(a2 + 105)) {
    *(unsigned char *)(a2 + 105) = BYTE4(a4) & 7;
  }
  if ((a4 & 0x2000000000) != 0)
  {
    uint64_t v8 = a1;
    if ((a3 & 1) == 0)
    {
      if ((a4 & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v8 = a1;
      if (a5) {
        goto LABEL_22;
      }
      uint64_t v8 = a1;
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF) {
        goto LABEL_22;
      }
      uint64_t v8 = a1;
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) > 1) {
        goto LABEL_22;
      }
      qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
    }
    if (a5) {
      goto LABEL_20;
    }
  }
  else
  {
    if ((~a4 & 0x1800000000) == 0)
    {
      uint64_t v5 = HIDWORD(a4) & 7;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v7 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v7) & 0xF) < v5) {
        *(void *)(StatusReg + 200) = v7 & 0xFFF0FFFF | (v5 << 16);
      }
    }
    uint64_t v8 = -4;
    if ((a3 & 1) == 0) {
      goto LABEL_22;
    }
  }
  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFE, memory_order_release) > 2)
  {
    goto LABEL_22;
  }
  qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_20:
  uint64_t v8 = a1;
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
    uint64_t v8 = a1;
    if ((int)add_explicit <= 1)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_39;
    }
  }
LABEL_22:
  if ((a4 & 0x3000000000) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t add_explicit = *(void *)a2;
    if ((*(void *)a2 & 0x80) != 0)
    {
      unsigned int v11 = *(_DWORD *)(a1 + 84) & 0xFFF;
      if (v11)
      {
        uint64_t v12 = v11 >= 0x100 ? 256 << (BYTE1(v11) - 1) : 0;
        unint64_t v13 = v12 & 0xFFFFFFFFFFFFFF00 | *(_DWORD *)(a1 + 84);
        if (v13 > (*(void *)(a2 + 8) & 0xFFFFFFuLL)) {
          *(void *)(a2 + 8) = v13 | 0x10000000;
        }
      }
      if ((*(unsigned char *)(a2 + 106) & 3) == 0) {
        *(unsigned char *)(a2 + 106) = *(unsigned char *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
      }
    }
    if (*(_WORD *)(v8 + 80) == 1)
    {
      *(void *)a2 = add_explicit | 2;
LABEL_37:
      *(unsigned char *)(a2 + 106) &= ~0x80u;
      return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8);
    }
LABEL_39:
    *(void *)a2 = add_explicit & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(void *)(v8 + 48))
    {
      uint64_t v14 = *(void *)(v8 + 56);
      while ((v14 & 0xFFC0018000000000) == 0)
      {
        uint64_t v15 = v14;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v8 + 56), (unint64_t *)&v15, v14 + 0x20000000000, memory_order_relaxed, memory_order_relaxed);
        BOOL v16 = v15 == v14;
        uint64_t v14 = v15;
        if (v16) {
          return _dispatch_non_barrier_waiter_redirect_or_wake(v8, a2);
        }
      }
    }
    goto LABEL_37;
  }
  if ((*(unsigned char *)a2 & 0x80) != 0) {
    *(void *)(a2 + 56) = a1;
  }
  return _dispatch_waiter_wake(a2, v8, a4, a5);
}

uint64_t _dispatch_waiter_wake(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  if (((a3 & 0x2000000000) == 0 || *(char *)(a1 + 106) < 0) && (a4 & 0x2000000000) == 0 && v5 == -4
    || (uint64_t result = _dispatch_event_loop_wake_owner(a1, a2, a3, a4), v5 == -4))
  {
    return _dispatch_waiter_wake_wlh_anon(a1);
  }
  return result;
}

void _dispatch_lane_concurrent_drain(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *a4;
  uint64_t v47 = (atomic_ullong *)(a1 + 48);
  if (*(void *)(a1 + 48))
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    long long v53 = *(_OWORD *)(StatusReg + 160);
    *(void *)(StatusReg + 160) = a1;
    *(void *)(StatusReg + 168) = &v53;
    if ((v5 & 0x40000000000000) != 0) {
      uint64_t v9 = 0x40000000000000;
    }
    else {
      uint64_t v9 = v5 & 0x3FFE0000000000;
    }
    uint64_t v52 = (unint64_t *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 104);
    if (!v10) {
      uint64_t v10 = _dispatch_wait_for_enqueuer(v52);
    }
    uint64_t v49 = (_OWORD *)(StatusReg + 160);
    unint64_t v11 = *(void *)(a1 + 56);
    if (!(v11 >> 55))
    {
      uint64_t v51 = v4;
      while (v4 == *(void *)(a1 + 24))
      {
        unint64_t v12 = *(void *)v10;
        if (*(void *)v10 >= 0x1000uLL)
        {
          if ((*(void *)(v12 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(v10 + 80) & 0x80000) != 0)
          {
LABEL_17:
            if (v9 != 0x40000000000000)
            {
              unint64_t v13 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x10000000000;
              unint64_t v14 = v11;
              do
              {
                if ((v11 & 0x10000000000) != 0) {
                  unint64_t v15 = 0;
                }
                else {
                  unint64_t v15 = v13;
                }
                unint64_t v16 = v15 + v11 - v9;
                if (!(v16 >> 53)) {
                  v16 += 0x40010000000000;
                }
                atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v14, v16 & 0xFFFFFF7FFFFFFFFFLL, memory_order_acquire, memory_order_acquire);
                BOOL v18 = v14 == v11;
                unint64_t v11 = v14;
              }
              while (!v18);
              if ((v16 & 0x40000000000000) == 0) {
                goto LABEL_134;
              }
              unint64_t v12 = *(void *)v10;
            }
            if (v12 <= 0xFFF && (a3 & 0x80000) == 0 && (v12 & 1) != 0)
            {
              uint64_t v43 = a2;
              *(void *)(a2 + 8) = v10;
              if ((a3 & 8) != 0)
              {
                qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
                __break(1u);
LABEL_152:
                qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
                qword_1E91199F0 = v43;
                __break(1u);
              }
              else
              {
                *uint64_t v49 = v53;
              }
              return;
            }
            uint64_t v17 = *(void *)(v10 + 16);
            *uint64_t v52 = v17;
            if (!v17)
            {
              unint64_t v37 = (unint64_t *)(v10 + 16);
              atomic_ullong v38 = *v47;
              while (v10 == (v38 & 0xFFFFFFFFFFFFFFF8))
              {
                atomic_ullong v39 = v38;
                atomic_compare_exchange_strong_explicit(v47, (unint64_t *)&v39, 0, memory_order_release, memory_order_relaxed);
                uint64_t v9 = 0x40000000000000;
                BOOL v18 = v39 == v38;
                atomic_ullong v38 = v39;
                if (v18) {
                  goto LABEL_41;
                }
              }
              uint64_t v17 = *v37;
              if (!*v37) {
                uint64_t v17 = _dispatch_wait_for_enqueuer(v37);
              }
              *uint64_t v52 = v17;
            }
            uint64_t v9 = 0x40000000000000;
            goto LABEL_41;
          }
        }
        else if ((v12 & 2) != 0)
        {
          goto LABEL_17;
        }
        if (v9 == 0x40000000000000)
        {
          atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x40000000000000uLL, memory_order_release);
          uint64_t v9 = (unint64_t)*(unsigned __int16 *)(a1 + 80) << 41;
        }
        else if (!v9)
        {
          if (v12 > 0xFFF || (v12 & 0x81) == 0)
          {
            while ((v11 & 0xFFE0018000000000) == 0)
            {
              unint64_t v44 = v11;
              atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v44, v11 + 0x20000000000, memory_order_acquire, memory_order_acquire);
              BOOL v18 = v44 == v11;
              unint64_t v11 = v44;
              if (v18)
              {
                uint64_t v9 = 0x20000000000;
                goto LABEL_34;
              }
            }
LABEL_134:
            *a4 &= 0x4000000001uLL;
            *uint64_t v49 = v53;
            return;
          }
          uint64_t v9 = 0x20000000000;
          atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 56), 0x20000000000uLL, memory_order_relaxed);
        }
LABEL_34:
        uint64_t v17 = *(void *)(v10 + 16);
        *uint64_t v52 = v17;
        if (!v17)
        {
          uint64_t v34 = (unint64_t *)(v10 + 16);
          atomic_ullong v35 = *v47;
          while (v10 == (v35 & 0xFFFFFFFFFFFFFFF8))
          {
            atomic_ullong v36 = v35;
            atomic_compare_exchange_strong_explicit(v47, (unint64_t *)&v36, 0, memory_order_release, memory_order_relaxed);
            BOOL v18 = v36 == v35;
            atomic_ullong v35 = v36;
            if (v18) {
              goto LABEL_35;
            }
          }
          uint64_t v17 = *v34;
          if (!*v34) {
            uint64_t v17 = _dispatch_wait_for_enqueuer(v34);
          }
          *uint64_t v52 = v17;
        }
LABEL_35:
        BOOL v18 = *(void *)v10 > 0xFFFuLL || (*(void *)v10 & 0x81) == 0;
        if (!v18)
        {
          v9 -= 0x20000000000;
          _dispatch_non_barrier_waiter_redirect_or_wake(a1, v10);
          goto LABEL_109;
        }
        if ((a3 & 0x20000) != 0)
        {
          v9 -= 0x20000000000;
          _dispatch_continuation_redirect_push((_DWORD *)a1, (void *)v10);
          goto LABEL_109;
        }
LABEL_41:
        uint64_t v19 = *(void (***)(uint64_t))(StatusReg + 192);
        if (v19) {
          (*v19)(a1);
        }
        unint64_t v20 = *(void *)v10;
        if (*(void *)v10 < 0x1000uLL)
        {
          if ((a3 & 0x1000000) != 0)
          {
            uint64_t v21 = (void *)MEMORY[0x18C121B40]();
            unint64_t v20 = *(void *)v10;
          }
          else
          {
            uint64_t v21 = 0;
          }
          uint64_t v22 = *(void *)(v10 + 24);
          if ((v20 & 4) != 0) {
            *(void *)(v10 + 24) = -1;
          }
          uint64_t v23 = *(void *)(v10 + 8);
          if (v23 == -1)
          {
            unint64_t v26 = 0;
          }
          else
          {
            uint64_t v24 = *(void *)(StatusReg + 200);
            if (((v24 >> 8) & 0xF) != 0) {
              uint64_t v25 = 256 << ((BYTE1(v24) & 0xFu) - 1);
            }
            else {
              uint64_t v25 = 0;
            }
            unint64_t v26 = v25 & 0xFFFFFFFFFFFFFF00 | *(void *)(StatusReg + 200);
            unint64_t v27 = v23 & 0xFFFFFF;
            if ((v23 & 0xFFFFFF) != 0)
            {
              unint64_t v28 = v25 & 0xFFFFFF00;
              if ((v24 & 0x44000000) == 0 && (*(void *)(v10 + 8) & 0x10000000) == 0) {
                uint64_t v30 = v26;
              }
              else {
                uint64_t v30 = v23 & 0xFFFFFF;
              }
              if (v27 >= v28) {
                unint64_t v26 = v30;
              }
            }
            else if ((unsigned __int16)v24 >> 12)
            {
              unint64_t v26 = (256 << (((unsigned __int16)v24 >> 12) - 1)) | 0xFF;
            }
          }
          uint64_t v31 = v20 & 4;
          unint64_t v32 = v26 & 0xFFFFFFFF02FFFFFFLL;
          uint64_t v33 = *(void *)(StatusReg + 32);
          if ((v33 & 0x1000000) != 0)
          {
            if (!v32)
            {
              unint64_t v32 = v33 & 0xFFFFFFFFFEFFFFFFLL;
              goto LABEL_89;
            }
LABEL_94:
            _dispatch_set_priority_and_voucher_slow(v32, v22, v31 | 2);
          }
          else
          {
            if (v32 == (v33 & 0xFFFFFFFF77FFFFFFLL)) {
              goto LABEL_70;
            }
LABEL_89:
            if (v32) {
              goto LABEL_94;
            }
LABEL_70:
            if (v22 != -1)
            {
              if (*(void *)(StatusReg + 224) != v22)
              {
                unint64_t v32 = 0;
                goto LABEL_94;
              }
              if ((v20 & 4) != 0 && v22)
              {
                if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
                {
                  qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
                  __break(1u);
                  return;
                }
LABEL_96:
                uint64_t v40 = *(void *)(StatusReg + 176);
                if (v40) {
                  int v41 = *(_DWORD *)(v40 + 8) + 1;
                }
                else {
                  int v41 = 1;
                }
                uint64_t v31 = v10;
                if (v41 <= _dispatch_continuation_cache_limit)
                {
                  uint64_t v31 = 0;
                  *(void *)(v10 + 16) = v40;
                  *(_DWORD *)(v10 + 8) = v41;
                  *(void *)(StatusReg + 176) = v10;
                }
LABEL_101:
                if ((v20 & 8) != 0)
                {
                  uint64_t v42 = *(NSObject **)(v10 + 48);
                  uint64_t v43 = *((void *)v42->isa + 5);
                  if (v43 != 514) {
                    goto LABEL_152;
                  }
                  _dispatch_client_callout(*(void *)(v10 + 40), *(uint64_t (**)(void))(v10 + 32));
                  dispatch_group_leave(v42);
                }
                else
                {
                  _dispatch_client_callout(*(void *)(v10 + 40), *(uint64_t (**)(void))(v10 + 32));
                }
                if (v31) {
                  _dispatch_continuation_free_to_cache_limit(v31);
                }
                uint64_t v4 = v51;
                if (v21) {
                goto LABEL_107;
                }
              }
            }
          }
          if ((v20 & 4) != 0) {
            goto LABEL_96;
          }
          goto LABEL_101;
        }
        if (*(void *)(v20 + 40) == 1) {
          (*(void (**)(uint64_t, void, void))(v20 + 48))(v10, 0, (a3 >> 21) & 1);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, void))(v20 + 64))(v10, a2, a3 & 0xFFFF0000);
        }
LABEL_107:
        if (v19) {
          v19[1](a1);
        }
LABEL_109:
        uint64_t v10 = v17;
        if (!v17)
        {
          if (!*v47)
          {
            uint64_t v10 = 0;
            break;
          }
          uint64_t v10 = *v52;
          if (!*v52) {
            uint64_t v10 = _dispatch_wait_for_enqueuer(v52);
          }
        }
        if (*(void *)(StatusReg + 40)) {
          _dispatch_return_to_kernel();
        }
        if (*(_WORD *)(a1 + 80) != 1
          && ((a3 & 0x4000000) != 0 || (*(unsigned char *)(StatusReg + 960) & 1) == 0)
          && ((a3 & 0x100000) == 0
           || (*(_DWORD *)(*(void *)(StatusReg + 216) + 60) & 7u) <= *(unsigned __int8 *)(*(void *)(StatusReg + 216)
                                                                                            + 100)))
        {
          unint64_t v11 = *(void *)(a1 + 56);
          if (!(v11 >> 55)) {
            continue;
          }
        }
        break;
      }
    }
    if (v9 == 0x40000000000000) {
      uint64_t v9 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000;
    }
    if (v10)
    {
      unint64_t v45 = *(unsigned __int16 *)(a1 + 80);
      if (v45 < 2)
      {
LABEL_143:
        *a4 = *a4 & 0x4000000001 | v9;
        *uint64_t v49 = v53;
        return;
      }
      unint64_t v46 = *(void *)v10;
      if (*(void *)v10 < 0x1000uLL)
      {
        if ((v46 & 2) == 0) {
          goto LABEL_143;
        }
      }
      else if ((*(void *)(v46 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(v10 + 80) & 0x80000) == 0)
      {
        goto LABEL_143;
      }
      uint64_t v9 = v9 - (v45 << 41) + 0x10000000000;
      goto LABEL_143;
    }
    *a4 = *a4 & 0x4000000001 | v9;
    *uint64_t v49 = v53;
  }
}

void _dispatch_workloop_bound_thread_init_once()
{
  int v2 = 0;
  size_t v1 = 4;
  int v0 = sysctlbyname("kern.kern_event.thread_bound_kqwl_support_enabled", &v2, &v1, 0, 0);
  if (v0) {
    _dispatch_bug(4220, v0);
  }
  if (v2) {
    _dispatch_thread_bound_kqwl_enabled = 1;
  }
}

void _dispatch_workloop_activate_simulator_fallback(uint64_t a1, long long *a2)
{
  uint64_t v3 = _dispatch_pthread_root_queue_create("com.apple.libdispatch.workloop_fallback", 0, a2, 0, 0);
  *(void *)(a1 + 24) = v3;
  if (*(_DWORD *)(v3 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  dispatch_release((dispatch_object_t)v3);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = v4;
  do
  {
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v5, v4 & 0xFFFFFFCFFFFFFFFFLL | 0x1000000000, memory_order_relaxed, memory_order_relaxed);
    BOOL v6 = v5 == v4;
    uint64_t v4 = v5;
  }
  while (!v6);
}

void _dispatch_queue_wakeup_with_override_slow(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5 = HIDWORD(a2) & 7;
  BOOL v6 = *(int **)(a1 + 24);
  if ((a2 & 0x1000000000) != 0)
  {
    if (v6 < (int *)&_dispatch_root_queues || v6 >= (int *)&_dispatch_queue_serial_numbers) {
      goto LABEL_41;
    }
    if (a2 >= 4)
    {
      _pthread_workqueue_override_start_direct_check_owner();
      goto LABEL_41;
    }
    goto LABEL_16;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x400000) == 0)
  {
LABEL_16:
    char v11 = 1;
    goto LABEL_17;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 100);
  unsigned int v8 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  do
  {
    unsigned int v9 = v7;
    unsigned int v10 = v7 | 2;
    if (v7 < 4) {
      unsigned int v10 = v8;
    }
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 100), &v7, v10, memory_order_acquire, memory_order_acquire);
  }
  while (v7 != v9);
  if (v9 > 3)
  {
    _pthread_workqueue_override_start_direct_check_owner();
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace();
    }
    goto LABEL_41;
  }
  BOOL v6 = *(int **)(a1 + 24);
  if (MEMORY[0xFFFFFC100])
  {
    uint64_t v20 = HIDWORD(a2) & 7;
    kdebug_trace();
    uint64_t v5 = v20;
  }
  char v11 = 0;
LABEL_17:
  unint64_t v13 = (atomic_uint *)(a1 + 100);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    unsigned int v15 = v5;
    if ((*(void *)(*(void *)v6 + 40) & 0x10000) != 0)
    {
      if (v5 > ((v6[21] >> 8) & 0xF)) {
        _dispatch_root_queue_push_override_stealer(v6, a1, v5);
      }
    }
    else if (*(void *)(*(void *)v6 + 40) == 18)
    {
      _dispatch_workloop_push_stealer((uint64_t)v6, a1, v5);
    }
    else if ((v6[15] & 7) == 0 || (v6[15] & 7u) < v5)
    {
      (*(void (**)(int *, uint64_t, void))(*(void *)v6 + 80))(v6, v5, 0);
    }
    if (v11) {
      break;
    }
    do
    {
      for (uint64_t i = *v13; ; uint64_t i = v19)
      {
        while ((i & 2) == 0)
        {
          uint64_t v18 = i;
          atomic_compare_exchange_strong_explicit(v13, (unsigned int *)&v18, 0, memory_order_release, memory_order_relaxed);
          if (v18 == i) {
            goto LABEL_45;
          }
          uint64_t i = v18;
        }
        uint64_t v19 = i;
        atomic_compare_exchange_strong_explicit(v13, (unsigned int *)&v19, i ^ 2, memory_order_release, memory_order_relaxed);
        if (v19 == i) {
          break;
        }
      }
      if (i == 2)
      {
LABEL_45:
        if (i) {
          _dispatch_unfair_lock_unlock_slow(a1 + 100, i);
        }
        goto LABEL_41;
      }
      __dmb(9u);
      if ((*(void *)(StatusReg + 200) & 0xF0000) == 0) {
        *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
      uint64_t v5 = *(_DWORD *)(a1 + 60) & 7;
    }
    while ((*(_DWORD *)(a1 + 60) & 7u) <= v15);
  }
LABEL_41:
  if (a3)
  {
    _os_object_release_internal_n((void *)a1, (const char *)2);
  }
}

void _dispatch_root_queue_push_override_stealer(int *a1, uint64_t a2, unsigned int a3)
{
  if (a3 - 7 <= 0xFFFFFFF9)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_1E91199F0 = a3;
    __break(1u);
LABEL_15:
    char v11 = (__objc2_class *)_dispatch_continuation_alloc_from_heap();
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  int v9 = a1[21];
  if (v9 < 0) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = (v9 >> 25) & 4;
  }
  if ((v10 & 2) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = 2 * (v10 > 3);
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v11 = *(__objc2_class **)(StatusReg + 176);
  if (!v11) {
    goto LABEL_15;
  }
  *(void *)(StatusReg + 176) = v11->cache;
LABEL_10:
  v11->uint64_t isa = (__objc2_class *)&unk_1ED74FD98;
  if (*(_DWORD *)(v4 + 8) == 0x7FFFFFFF
    || (uint64_t v12 = 2,
        uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 2u, memory_order_relaxed),
        (int)add_explicit > 0))
  {
    uint64_t add_explicit = 3 * a3 + v7 - 3;
    uint64_t v12 = (uint64_t)&_dispatch_root_queues;
    v11[1].superclass = (__objc2_class *)v4;
    v11[1].cache = v5;
    v11->info = 0;
    v11[1].uint64_t isa = v11;
    v11->superclass = (__objc2_class *)-1;
    v11->vtable = (void *)-1;
    v11->cache = 0;
    uint64_t v3 = &_dispatch_root_queues + 16 * add_explicit;
    *(void *)(StatusReg + 976) = v3 + 6;
    unint64_t v14 = atomic_exchange_explicit((atomic_ullong *volatile)v3 + 6, (unint64_t)v11, memory_order_release);
    if (v14)
    {
      *(void *)(v14 + 16) = v11;
      *(void *)(StatusReg + 976) = 0;
      return;
    }
  }
  else
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  v3[13] = v11;
  *(void *)(StatusReg + 976) = 0;

  _dispatch_root_queue_poke_and_wakeup((unsigned int *)(v12 + (add_explicit << 7)), 1, 0);
}

void _dispatch_workloop_push_stealer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v7 = *(void **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    int v7 = _dispatch_continuation_alloc_from_heap();
  }
  *int v7 = &unk_1ED74FD50;
  if (*(_DWORD *)(a2 + 8) == 0x7FFFFFFF
    || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 2u, memory_order_relaxed) > 0)
  {
    v7[6] = a2;
    v7[7] = 0;
    v7[4] = 0;
    v7[5] = v7;
    v7[1] = -1;
    v7[3] = -1;
    _dispatch_workloop_push(a1, v7, a3);
  }
  else
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
}

atomic_ullong *_dispatch_lane_drain_non_barriers(atomic_ullong *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)result;
  uint64_t v5 = *((unsigned __int16 *)result + 40);
  atomic_fetch_and_explicit(result + 7, 0xFFBFFFFFFFFFFFFFLL, memory_order_release);
  BOOL v6 = result + 6;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    if (v5)
    {
      --v5;
      goto LABEL_4;
    }
    if (*(void *)a2 > 0xFFFuLL || (*(void *)a2 & 0x81) == 0) {
      break;
    }
    uint64_t v5 = 0;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 56), 0x20000000000uLL, memory_order_relaxed);
LABEL_4:
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(v4 + 104) = v8;
    if (!v8)
    {
      uint64_t v23 = (unint64_t *)(a2 + 16);
      atomic_ullong v24 = *v6;
      while (a2 == (v24 & 0xFFFFFFFFFFFFFFF8))
      {
        atomic_ullong v25 = v24;
        atomic_compare_exchange_strong_explicit(v6, (unint64_t *)&v25, 0, memory_order_release, memory_order_relaxed);
        BOOL v9 = v25 == v24;
        atomic_ullong v24 = v25;
        if (v9) {
          goto LABEL_5;
        }
      }
      uint64_t v30 = a2;
      uint64_t v8 = *v23;
      if (!*v23) {
        uint64_t v8 = _dispatch_wait_for_enqueuer(v23);
      }
      *(void *)(v4 + 104) = v8;
      a2 = v30;
    }
LABEL_5:
    BOOL v9 = *(void *)a2 > 0xFFFuLL || (*(void *)a2 & 0x81) == 0;
    if (v9) {
      uint64_t result = (atomic_ullong *)_dispatch_continuation_redirect_push((_DWORD *)v4, (void *)a2);
    }
    else {
      uint64_t result = (atomic_ullong *)_dispatch_non_barrier_waiter_redirect_or_wake(v4, a2);
    }
    a2 = v8;
    if (!v8) {
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v10 = *(void *)a2;
    if (*(void *)a2 <= 0xFFFuLL)
    {
      if ((v10 & 2) != 0) {
        goto LABEL_17;
      }
    }
    else if ((*(void *)(v10 + 40) & 0xF0) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_17;
    }
  }
  uint64_t v21 = *(void *)(v4 + 56);
  while ((v21 & 0xFFE0018000000000) == 0)
  {
    uint64_t v22 = v21;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 56), (unint64_t *)&v22, v21 + 0x20000000000, memory_order_acquire, memory_order_acquire);
    BOOL v9 = v22 == v21;
    uint64_t v21 = v22;
    if (v9)
    {
      uint64_t v5 = 0;
      goto LABEL_4;
    }
  }
  uint64_t v5 = 0;
LABEL_17:
  uint64_t v11 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  uint64_t v12 = v5 << 41;
  if (a2)
  {
    unint64_t v13 = *(unsigned __int16 *)(v4 + 80);
    if (v13 >= 2)
    {
      uint64_t v26 = *(void *)a2;
      if (*(void *)a2 < 0x1000uLL)
      {
        if ((v26 & 2) == 0) {
          goto LABEL_19;
        }
      }
      else if ((*(void *)(v26 + 40) & 0xF0) != 0x10 || (*(_DWORD *)(a2 + 80) & 0x80000) == 0)
      {
        goto LABEL_19;
      }
      uint64_t v12 = (v12 | 0x10000000000) - (v13 << 41);
    }
  }
LABEL_19:
  uint64_t v14 = *(void *)(v4 + 56);
  do
  {
    unint64_t v15 = v14 - v12;
    unint64_t v16 = (v14 - v12) & 0xFFFFFF7700000001;
    if (a2)
    {
      uint64_t v18 = v16 | 0x8000000000;
      if ((v15 & 0x10000000000) != 0) {
        unint64_t v19 = v16 + 0x18000000000;
      }
      else {
        unint64_t v19 = v18 + ((unint64_t)*(unsigned __int16 *)(v4 + 80) << 41);
      }
      unint64_t v16 = (v14 - v12) & 0xFFFFFF7700000000 | 0x8000000001;
      if ((v14 & 0x8000000000) == 0) {
        unint64_t v16 = v18;
      }
      if ((v19 & 0x3FFE0000000000) == 0x20000000000000) {
        unint64_t v16 = ((v19 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000) | v11;
      }
    }
    else if ((v14 & 0x8000000000) != 0)
    {
      atomic_fetch_xor_explicit((atomic_ullong *volatile)(v4 + 56), 0x8000000000uLL, memory_order_acquire);
      a2 = *(void *)(v4 + 104);
      if (a2) {
        goto LABEL_12;
      }
      goto LABEL_17;
    }
    uint64_t v17 = v14;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 56), (unint64_t *)&v17, v16, memory_order_relaxed, memory_order_relaxed);
    BOOL v9 = v17 == v14;
    uint64_t v14 = v17;
  }
  while (!v9);
  if ((~v15 & 0x1800000000) == 0)
  {
    uint64_t v27 = HIDWORD(v15) & 7;
    unsigned int v28 = *(_DWORD *)(StatusReg + 200);
    if ((HIWORD(v28) & 0xF) < v27) {
      *(void *)(StatusReg + 200) = v28 & 0xFFF0FFFF | (v27 << 16);
    }
  }
  if (((v16 ^ v15) & 0x40000000000000) != 0)
  {
    return (atomic_ullong *)_dispatch_lane_barrier_complete(v4, 0, a3);
  }
  else if ((v16 ^ v15))
  {
    if ((a3 & 1) != 0
      || *(_DWORD *)(v4 + 8) == 0x7FFFFFFF
      || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 2u, memory_order_relaxed) > 0)
    {
      uint64_t v29 = *(uint64_t (**)(void))(**(void **)(v4 + 24) + 88);
      return (atomic_ullong *)v29();
    }
    else
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }
  else if (a3)
  {
    return (atomic_ullong *)_os_object_release_internal_n((void *)v4, (const char *)2);
  }
  return result;
}

uint64_t _dispatch_channel_invoke_cancel_check(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 116) & 8) != 0 || (*(_DWORD *)(a1 + 80) & 0x10000000) == 0) {
    return 1;
  }
  if (*(unsigned char *)(a2 + 35)) {
    BOOL v6 = (void *)MEMORY[0x18C121B40]();
  }
  else {
    BOOL v6 = 0;
  }
  int v7 = (*(uint64_t (**)(uint64_t, void))(a3 + 24))(a1, *(void *)(a1 + 32));
  if (v6) {
  if (v7)
  }
  {
    *(_WORD *)(a1 + 116) |= 8u;
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
    {
      _os_object_retain_weak_cold_1();
    }
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a2 + 40) = -1;
  return result;
}

uint64_t _dispatch_worker_thread(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 32);
  int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 112), 0xFFFFFFFF, memory_order_acquire);
  if (add_explicit <= 0) {
    _dispatch_worker_thread_cold_1(add_explicit);
  }
  if (v2[18].isa) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 192) = v2 + 18;
  }
  uint64_t v4 = *(const char **)(a1 + 72);
  if (v4) {
    pthread_setname_np(v4);
  }
  Class isa = v2[8].isa;
  if (isa) {
    (*((void (**)(void))isa + 2))();
  }
  _dispatch_sigmask();
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 32);
  uint64_t v8 = *(unsigned int *)(a1 + 84);
  if ((v8 & 0x46000FFF) == 0)
  {
    unsigned int v9 = v8 & 0x80000000;
    if ((v7 & 0x22000000) != 0 || (v7 & 0x3F00) == 0)
    {
      uint64_t v8 = v9 | 0xF0000;
    }
    else
    {
      unsigned int v10 = (__clz(__rbit32((v7 >> 8) & 0x3FFF)) << 8) + 256;
      if (((v7 >> 8) & 0x3FFF) == 0) {
        unsigned int v10 = 0;
      }
      uint64_t v8 = v7 & 0x8E0000FF | v9 | v10;
    }
  }
  unint64_t v11 = v7 & 0xFFFFFFFF02FFFFFFLL;
  if (v7 == -1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = v7 & 0xFFFFFFFF02FFFFFFLL;
  }
  unint64_t v13 = v2 + 9;
  do
  {
    _dispatch_root_queue_drain(a1, v8, 0x20000);
    uint64_t v14 = *(void *)(StatusReg + 32);
    if ((v14 & 0x1000000) != 0)
    {
      unint64_t v15 = v11;
      if (v12) {
        goto LABEL_29;
      }
      unint64_t v15 = v14 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_26:
      if (v15) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    unint64_t v15 = v12;
    if (v12 != (v14 & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_26;
    }
LABEL_21:
    if (!*(void *)(StatusReg + 224)) {
      goto LABEL_22;
    }
    unint64_t v15 = 0;
LABEL_29:
    _dispatch_set_priority_and_voucher_slow(v15, 0, 6);
LABEL_22:
    dispatch_time_t v16 = dispatch_time(0, 5000000000);
  }
  while (!dispatch_semaphore_wait(v13, v16));
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 100), 1u, memory_order_release);
  _dispatch_root_queue_poke(a1, 1, 0);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    int v18 = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
    if (v18 <= 1)
    {
      if (v18 != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose((void *)a1, v17);
    }
  }
  return 0;
}

void _dispatch_root_queue_drain(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 200) = a2;
  unint64_t v7 = *(void *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (v7)
  {
    if (v7 == -4) {
      _dispatch_main_queue_drain_cold_7();
    }
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0) {
        _os_object_retain_weak_cold_1();
      }
      *(void *)(v7 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc((void *)v7);
    }
  }
  *(void *)(StatusReg + 216) = -4;
  memset(v36, 0, sizeof(v36));
  _dispatch_last_resort_autorelease_pool_push((uint64_t)v36);
  BOOL v9 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v10 = __swp(v3, (unsigned int *)(a1 + 104));
        if (v3) {
          break;
        }
        uint64_t v28 = -1;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 104), (unint64_t *)&v28, 0, memory_order_relaxed, memory_order_relaxed);
        if (v28 == -1)
        {
          if (!*(void *)(a1 + 48)) {
            goto LABEL_86;
          }
          uint64_t v29 = _dispatch_root_queue_head_tail_quiesced;
          goto LABEL_51;
        }
      }
      if (v3 != -1) {
        break;
      }
      uint64_t v29 = (uint64_t (*)(uint64_t))_dispatch_root_queue_mediator_is_gone;
LABEL_51:
      if (!__DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(a1, v29)) {
        goto LABEL_86;
      }
    }
    unint64_t v11 = (unint64_t *)(v3 + 16);
    uint64_t v12 = *(void *)(v3 + 16);
    if (v12) {
      goto LABEL_10;
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v30 = v3;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v30, 0, memory_order_release, memory_order_relaxed);
    if (v30 != v3)
    {
      uint64_t v12 = *v11;
      if (!*v11) {
        uint64_t v12 = _dispatch_wait_for_enqueuer(v11);
      }
LABEL_10:
      *(void *)(a1 + 104) = v12;
      _dispatch_root_queue_poke((unsigned int *)a1, 1, 0);
    }
    if (v9) {
      unint64_t v11 = (unint64_t *)_pthread_workqueue_override_reset();
    }
    uint64_t v13 = *(void *)(StatusReg + 192);
    if (v13) {
      unint64_t v11 = (unint64_t *)(*(uint64_t (**)(uint64_t))v13)(a1);
    }
    uint64_t v14 = *(void *)v3;
    if (*(void *)v3 >= 0x1000uLL)
    {
      if (*(void *)(v14 + 40) == 1) {
        (*(void (**)(uint64_t, void, void))(v14 + 48))(v3, 0, (a3 >> 21) & 1);
      }
      else {
        (*(void (**)(uint64_t, _OWORD *, void))(v14 + 64))(v3, v36, a3 & 0xFFFF0000);
      }
      goto LABEL_74;
    }
    if ((a3 & 0x1000000) != 0)
    {
      unint64_t v15 = (void *)MEMORY[0x18C121B40](v11);
      uint64_t v14 = *(void *)v3;
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v16 = *(void *)(v3 + 24);
    if ((v14 & 4) != 0) {
      *(void *)(v3 + 24) = v10;
    }
    uint64_t v17 = *(void *)(v3 + 8);
    if (v17 == -1)
    {
      unint64_t v20 = 0;
    }
    else
    {
      uint64_t v18 = *(void *)(StatusReg + 200);
      uint64_t v19 = ((v18 >> 8) & 0xF) != 0 ? 256 << ((BYTE1(v18) & 0xFu) - 1) : 0;
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFF00 | *(void *)(StatusReg + 200);
      unint64_t v21 = v17 & 0xFFFFFF;
      if ((v17 & 0xFFFFFF) != 0)
      {
        unint64_t v22 = v19 & 0xFFFFFF00;
        if ((v18 & 0x44000000) == 0 && (*(void *)(v3 + 8) & 0x10000000) == 0) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = v17 & 0xFFFFFF;
        }
        if (v21 >= v22) {
          unint64_t v20 = v24;
        }
      }
      else if ((unsigned __int16)v18 >> 12)
      {
        unint64_t v20 = (256 << (((unsigned __int16)v18 >> 12) - 1)) | 0xFF;
      }
    }
    uint64_t v25 = v14 & 4;
    unint64_t v26 = v20 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v27 = *(void *)(StatusReg + 32);
    if ((v27 & 0x1000000) != 0)
    {
      if (v26) {
        goto LABEL_63;
      }
      unint64_t v26 = v27 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v26 == (v27 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_41;
    }
    if (v26) {
      goto LABEL_63;
    }
LABEL_41:
    if (v16 == -1) {
      goto LABEL_64;
    }
    if (*(void *)(StatusReg + 224) != v16)
    {
      unint64_t v26 = 0;
LABEL_63:
      _dispatch_set_priority_and_voucher_slow(v26, v16, v25 | 2);
      goto LABEL_64;
    }
    if ((v14 & 4) != 0 && v16)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
        -[OS_voucher release]();
      }
      goto LABEL_65;
    }
LABEL_64:
    if ((v14 & 4) == 0) {
      goto LABEL_70;
    }
LABEL_65:
    uint64_t v31 = *(void *)(StatusReg + 176);
    if (v31) {
      int v32 = *(_DWORD *)(v31 + 8) + 1;
    }
    else {
      int v32 = 1;
    }
    if (v32 <= _dispatch_continuation_cache_limit)
    {
      uint64_t v25 = 0;
      *(void *)(v3 + 16) = v31;
      *(_DWORD *)(v3 + 8) = v32;
      *(void *)(StatusReg + 176) = v3;
LABEL_70:
      if ((v14 & 8) != 0) {
        goto LABEL_82;
      }
      goto LABEL_71;
    }
    uint64_t v25 = v3;
    if ((v14 & 8) != 0)
    {
LABEL_82:
      uint64_t v34 = *(NSObject **)(v3 + 48);
      uint64_t v35 = *((void *)v34->isa + 5);
      if (v35 != 514) {
        _dispatch_queue_override_invoke_cold_1(v35);
      }
      _dispatch_client_callout(*(void *)(v3 + 40), *(uint64_t (**)(void))(v3 + 32));
      dispatch_group_leave(v34);
      if (!v25)
      {
LABEL_72:
        if (!v15) {
          goto LABEL_74;
        }
LABEL_73:
        goto LABEL_74;
      }
      goto LABEL_84;
    }
LABEL_71:
    _dispatch_client_callout(*(void *)(v3 + 40), *(uint64_t (**)(void))(v3 + 32));
    if (!v25) {
      goto LABEL_72;
    }
LABEL_84:
    _dispatch_continuation_free_to_cache_limit(v25);
    if (v15) {
      goto LABEL_73;
    }
LABEL_74:
    if (v13) {
      (*(void (**)(uint64_t))(v13 + 8))(a1);
    }
    unsigned int v33 = WORD1(*(void *)(StatusReg + 200)) & 0xF;
    if (v33)
    {
      *(void *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
      BOOL v9 = v33 != 15;
    }
    else
    {
      BOOL v9 = 0;
    }
    if (*(unsigned char *)(StatusReg + 960)) {
      break;
    }
    *(void *)(StatusReg + 960) = 0;
  }
LABEL_86:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v36);
  *(void *)(StatusReg + 216) = 0;
  *(void *)(StatusReg + 40) = 0;
  *(void *)(StatusReg + 200) = 0;
  *(void *)(StatusReg + 160) = 0;
}

BOOL __DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  char v4 = 0;
  uint64_t v5 = 500;
LABEL_2:
  int v6 = -80;
  do
  {
    if (__CFADD__(v6++, 1))
    {
      if ((v4 & 1) == 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 112), 1u, memory_order_release);
      }
      MEMORY[0x18C121F20](0, 3, v5);
      int v8 = a2(a1);
      if (!v8)
      {
        unsigned int v9 = (v5 >> 4) & 0x7FFFFFF;
        uint64_t v5 = (2 * v5);
        char v4 = 1;
        if (v9 < 0xC35) {
          goto LABEL_2;
        }
        int v8 = 0;
      }
      goto LABEL_12;
    }
    __yield();
    int v8 = a2(a1);
  }
  while (!v8);
  if ((v4 & 1) == 0) {
    return v8 == 1;
  }
LABEL_12:
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 112), 0xFFFFFFFF, memory_order_acquire);
  if (*(void *)(a1 + 48))
  {
    int v8 = 1;
  }
  else if (!v8)
  {
    _dispatch_root_queue_poke((unsigned int *)a1, 1, 0);
    int v8 = 0;
  }
  return v8 == 1;
}

uint64_t _dispatch_root_queue_head_tail_quiesced(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if ((*(void *)(a1 + 104) != 0) != (*(void *)(a1 + 48) == 0)) {
    return v1;
  }
  else {
    return 0;
  }
}

BOOL _dispatch_root_queue_mediator_is_gone(uint64_t a1)
{
  return *(void *)(a1 + 104) != -1;
}

void _dispatch_mgr_priority_raise(pthread_attr_t *a1)
{
  if (_dispatch_mgr_sched_pred != -1) {
    dispatch_once_f(&_dispatch_mgr_sched_pred, 0, (dispatch_function_t)_dispatch_mgr_sched_init);
  }
  sched_param v14 = 0;
  int v2 = pthread_attr_getschedparam(a1, &v14);
  if (v2) {
    _dispatch_bug(6293, v2);
  }
  qos_class_t __qos_class = QOS_CLASS_UNSPECIFIED;
  pthread_attr_get_qos_class_np(a1, &__qos_class, 0);
  qos_class_t v3 = __qos_class;
  if (__qos_class == 5)
  {
    int sched_priority = 4;
    goto LABEL_12;
  }
  if (__qos_class)
  {
    HIDWORD(v6) = __qos_class - 9;
    LODWORD(v6) = __qos_class - 9;
    unsigned int v5 = v6 >> 2;
    if (v5 > 6) {
      int sched_priority = 0;
    }
    else {
      int sched_priority = dword_18A97E3A0[v5];
    }
LABEL_12:
    v14.int sched_priority = sched_priority;
    uint64_t v7 = dword_1EB1CEFA4;
    do
    {
      if (v7 >= v3) {
        break;
      }
      uint64_t v8 = v7;
      atomic_compare_exchange_strong_explicit(&dword_1EB1CEFA4, (unsigned int *)&v8, v3, memory_order_relaxed, memory_order_relaxed);
      BOOL v9 = v8 == v7;
      uint64_t v7 = v8;
    }
    while (!v9);
    goto LABEL_16;
  }
  int sched_priority = v14.sched_priority;
LABEL_16:
  uint64_t v10 = _dispatch_mgr_sched;
  while ((int)v10 < sched_priority)
  {
    uint64_t v11 = v10;
    atomic_compare_exchange_strong_explicit(&_dispatch_mgr_sched, (unsigned int *)&v11, sched_priority, memory_order_relaxed, memory_order_relaxed);
    BOOL v9 = v11 == v10;
    uint64_t v10 = v11;
    if (v9)
    {
      if (_dispatch_root_queues_pred != -1) {
        dispatch_once_f(&_dispatch_root_queues_pred, 0, (dispatch_function_t)_dispatch_root_queues_init_once);
      }
      if (sched_priority > dword_1EB1CEFA8 || __qos_class && _pthread_qos_class_encode())
      {
        int v12 = _pthread_workqueue_set_event_manager_priority();
        if (v12) {
          _dispatch_bug(6325, v12);
        }
      }
      return;
    }
  }
}

uint64_t _dispatch_main_queue_update_priority_from_thread()
{
  unint64_t v0 = qword_1EB1CE238[0];
  if (LODWORD(qword_1EB1CE238[0]) >= 4) {
    uint64_t result = LODWORD(qword_1EB1CE238[0]) | 3u;
  }
  else {
    uint64_t result = 0;
  }
  unsigned int v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  unsigned int v3 = (__clz(__rbit32((v2 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v2 >> 8) & 0x3FFF) != 0) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  unsigned int v5 = (v4 >> 8) & 0xF;
  unsigned int v6 = v4 & 0xFFFFFF00 | v2;
  uint64_t v7 = HIDWORD(v0) & 7;
  unsigned int v8 = (dword_1EB1CE254 >> 8) & 0xF;
  dword_1EB1CE254 = v6;
  if (v8 < v7 && v5 == 0) {
    return _pthread_qos_override_end_direct();
  }
  if (v8 < v7 && v7 <= v5) {
    return _pthread_qos_override_end_direct();
  }
  if (v8 >= v7 && v7 > v5) {
    return _pthread_qos_override_start_direct();
  }
  return result;
}

uint64_t _dispatch_root_queues_init_once()
{
  if ((_dispatch_unsafe_fork & 1) == 0) {
    _dispatch_fork_becomes_unsafe_slow();
  }
  int v0 = _pthread_workqueue_supported();
  int v1 = v0;
  if ((v0 & 0x10) == 0) {
    _dispatch_root_queues_init_once_cold_1(v0);
  }
  uint64_t v4 = 0x200000000;
  unsigned int v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 64;
  uint64_t v9 = 72;
  if ((v0 & 0x80) != 0)
  {
    uint64_t v7 = _dispatch_worker_thread2;
    unsigned int v5 = _dispatch_kevent_worker_thread;
    unsigned int v6 = _dispatch_workloop_worker_thread;
  }
  else
  {
    if ((v0 & 0x40) == 0) {
      _dispatch_root_queues_init_once_cold_2(v0);
    }
    uint64_t v7 = _dispatch_worker_thread2;
    unsigned int v5 = _dispatch_kevent_worker_thread;
  }
  uint64_t result = pthread_workqueue_setup();
  if (result) {
    _dispatch_root_queues_init_once_cold_4(result, v1);
  }
  if ((_dispatch_mode & 4) != 0)
  {
    int v3 = -1;
    uint64_t result = sysctlbyname("kern.wq_limit_cooperative_threads", 0, 0, &v3, 4uLL);
    if (result) {
      _dispatch_root_queues_init_once_cold_3();
    }
  }
  return result;
}

void _dispatch_worker_thread2(uint64_t a1)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[120] = 0;
  StatusReg[4] = a1 & 0xFFFFFFFF88FFFFFFLL;
  unsigned int v2 = __clz(__rbit32((a1 >> 8) & 0x3FFF));
  if (((a1 >> 8) & 0x3FFF) != 0) {
    unsigned int v3 = v2 + 1;
  }
  else {
    unsigned int v3 = 0;
  }
  if (v3 - 7 <= 0xFFFFFFF9) {
    _dispatch_queue_priority_inherit_from_target_cold_1(v3);
  }
  if ((a1 & 0x8000000) != 0) {
    unsigned int v4 = 2293760;
  }
  else {
    unsigned int v4 = 196608;
  }
  unsigned int v5 = ((a1 & 0x8000000) >> 26) | 0xFFFFFFFD;
  int v6 = 3 * v3;
  if ((a1 & 0x88000000) == 0x80000000) {
    unsigned int v5 = -2;
  }
  uint64_t v7 = &_dispatch_root_queues + 16 * (unint64_t)(v5 + v6);
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 28, 0xFFFFFFFF, memory_order_acquire);
  _dispatch_root_queue_drain((uint64_t)v7, *((_DWORD *)v7 + 21), v4);
  uint64_t v8 = StatusReg[4];
  if ((v8 & 0x1000000) != 0)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFEFFFFFFLL) != 0) {
      goto LABEL_17;
    }
  }
  if (StatusReg[28])
  {
    unint64_t v9 = 0;
LABEL_17:
    _dispatch_set_priority_and_voucher_slow(v9, 0, 14);
  }
  StatusReg[120] = 0;
}

void _dispatch_kevent_worker_thread(uint64_t *a1, int *a2)
{
  if (!a1 || !a2)
  {
    _dispatch_bug(6755, 0);
    return;
  }
  if (!*a2 || !*a1) {
    return;
  }
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v5 = StatusReg[27] & 0xFFFFFFFFFFFFFFFELL;
  if (v5)
  {
    if (v5 == -4) {
      goto LABEL_34;
    }
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if ((add_explicit & 0x80000000) == 0)
      {
        *(void *)(v5 + 56) = 0xDEAD000000000000;
        _dispatch_object_dealloc((void *)v5);
        goto LABEL_10;
      }
LABEL_33:
      qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
LABEL_34:
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      return;
    }
  }
LABEL_10:
  StatusReg[27] = -4;
  uint64_t v7 = *a1;
  StatusReg[120] = 0;
  uint64_t v16 = 0;
  long long v15 = 0u;
  uint64_t v17 = -4;
  long long v18 = (unint64_t)v7;
  uint64_t v8 = StatusReg[4];
  if ((v8 & 0x2000000) != 0)
  {
    if ((v8 & 0x20000000) != 0) {
      uint64_t v8 = StatusReg[4] & 0xFE000000;
    }
    StatusReg[4] = v8 & 0xFFFFFFFFFEFFFFFFLL;
    StatusReg[25] = 34537472;
    StatusReg[20] = &_dispatch_mgr_q;
    uint64_t v9 = qword_1EB1CE2B8[0];
    uint64_t v10 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
    do
    {
      if ((v9 & 0xFFE00000FFFFFFFCLL) != 0)
      {
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
        qword_1E91199F0 = v9;
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v11 = v9;
      atomic_compare_exchange_strong_explicit(qword_1EB1CE2B8, (unint64_t *)&v11, v10 | v9 & 0x7700000001, memory_order_acquire, memory_order_acquire);
      BOOL v12 = v11 == v9;
      uint64_t v9 = v11;
    }
    while (!v12);
    uint64_t v17 = -4;
    StatusReg[29] = &v15;
    _dispatch_event_loop_merge(v7, *a2);
    _dispatch_mgr_queue_drain();
    if (byte_1EB1CEE76) {
      _dispatch_event_loop_drain_timers((uint64_t)&_dispatch_timers_heap, 9u);
    }
    uint64_t v13 = qword_1EB1CE2B8[0];
    do
    {
      uint64_t v14 = v13;
      atomic_compare_exchange_strong_explicit(qword_1EB1CE2B8, (unint64_t *)&v13, (v13 & 0xFFFFFFF000000001) - 0x40020000000000, memory_order_release, memory_order_relaxed);
    }
    while (v13 != v14);
    StatusReg[25] = 0;
    StatusReg[20] = 0;
    if ((v14 & 0x8000000000) != 0) {
      _dispatch_event_loop_poke(-8, 0, 0);
    }
  }
  else
  {
    StatusReg[4] = v8 & 0xFFFFFFFF88FFFFFFLL | 0x1000000;
    BYTE12(v18) = 1;
    StatusReg[29] = &v15;
    _dispatch_event_loop_merge(v7, *a2);
    if (*((void *)&v15 + 1))
    {
      if (v17 == -4)
      {
        StatusReg[29] = 0;
        _dispatch_root_queue_drain_deferred_item((uint64_t *)&v15);
      }
      else
      {
        _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v15);
      }
    }
  }
  StatusReg[29] = 0;
  StatusReg[120] = 0;
  *a2 = WORD4(v18);
  StatusReg[27] = 0;
  StatusReg[5] = 0;
}

void _dispatch_workloop_worker_thread(uint64_t *a1, uint64_t *a2, int *a3)
{
  if (!a1 || !a2 || !a3)
  {
    _dispatch_bug(6774, 0);
    return;
  }
  uint64_t v5 = *a1;
  if (!*a1)
  {
    _dispatch_bug(6777, 0);
    _dispatch_kevent_worker_thread(a2, a3);
    return;
  }
  if (!*a3 || !*a2) {
    return;
  }
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v7 = StatusReg[27] & 0xFFFFFFFFFFFFFFFELL;
  if (v7 == -4) {
    goto LABEL_73;
  }
  if (v7 == v5) {
    goto LABEL_15;
  }
  if (v7)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0)
      {
LABEL_71:
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
LABEL_72:
        qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
LABEL_73:
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
        __break(1u);
        goto LABEL_74;
      }
      *(void *)(v7 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc((void *)v7);
    }
  }
  if (v5 != -4
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 1u, memory_order_relaxed) & 0x80000000) != 0)
  {
    goto LABEL_72;
  }
LABEL_15:
  StatusReg[27] = v5;
  uint64_t v9 = *a2;
  StatusReg[120] = 0;
  uint64_t v27 = 0;
  long long v26 = 0u;
  uint64_t v28 = v5;
  long long v29 = (unint64_t)v9;
  if (v5 == -4)
  {
    char v12 = 0;
    uint64_t v13 = 0;
    memset(&v25, 0, sizeof(v25));
    goto LABEL_35;
  }
  if (*(void *)(*(void *)v5 + 40) == 131090 && (uint64_t v10 = *(int **)(v5 + 200)) != 0)
  {
    int v11 = *v10;
    memset(&v25, 0, sizeof(v25));
    if ((v11 & 0x40) != 0)
    {
      unint64_t v7 = *(void *)(v5 + 72);
      if (!v7
        || StatusReg[124]
        || (LODWORD(v7) = pthread_setname_np((const char *)v7),
            char v12 = 1,
            StatusReg[124] = 1,
            (uint64_t v10 = *(int **)(v5 + 200)) != 0))
      {
        if (*((void *)v10 + 4) && !StatusReg[115])
        {
          uint64_t v24 = _dispatch_calloc(1uLL, 0x28uLL);
          LODWORD(v7) = _os_workgroup_join_update_wg(*(void *)(*(void *)(v5 + 200) + 32), (uint64_t)v24);
          uint64_t v13 = 0;
          StatusReg[115] = v24;
          char v12 = 1;
        }
        else
        {
          uint64_t v13 = 0;
          char v12 = 1;
        }
        goto LABEL_35;
      }
      goto LABEL_32;
    }
  }
  else
  {
    memset(&v25, 0, sizeof(v25));
  }
  if (*(void *)(*(void *)v5 + 40) == 131090)
  {
    uint64_t v14 = *(void *)(v5 + 200);
    if (v14)
    {
      uint64_t v13 = *(OS_os_workgroup **)(v14 + 32);
      if (!v13 || (LODWORD(v7) = os_workgroup_join(*(os_workgroup_t *)(v14 + 32), &v25), !v7))
      {
        char v12 = 0;
        goto LABEL_35;
      }
      if (v7 != 22)
      {
LABEL_74:
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_workloop os_workgroup_join failed";
        qword_1E91199F0 = (int)v7;
        __break(1u);
        return;
      }
    }
  }
  char v12 = 0;
LABEL_32:
  uint64_t v13 = 0;
LABEL_35:
  uint64_t v15 = StatusReg[4];
  if ((v15 & 0x2000000) != 0)
  {
    if ((v15 & 0x20000000) != 0) {
      uint64_t v15 = StatusReg[4] & 0xFE000000;
    }
    StatusReg[4] = v15 & 0xFFFFFFFFFEFFFFFFLL;
    StatusReg[25] = 34537472;
    StatusReg[20] = &_dispatch_mgr_q;
    atomic_ullong v17 = qword_1EB1CE2B8[0];
    uint64_t v18 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000;
    do
    {
      if ((v17 & 0xFFE00000FFFFFFFCLL) != 0)
      {
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
        qword_1E91199F0 = v17;
        __break(1u);
        goto LABEL_71;
      }
      atomic_ullong v19 = v17;
      atomic_compare_exchange_strong_explicit(qword_1EB1CE2B8, (unint64_t *)&v19, v18 | v17 & 0x7700000001, memory_order_acquire, memory_order_acquire);
      BOOL v20 = v19 == v17;
      atomic_ullong v17 = v19;
    }
    while (!v20);
    uint64_t v28 = -4;
    StatusReg[29] = &v26;
    _dispatch_event_loop_merge(v9, *a3);
    _dispatch_mgr_queue_drain();
    if (byte_1EB1CEE76) {
      _dispatch_event_loop_drain_timers((uint64_t)&_dispatch_timers_heap, 9u);
    }
    atomic_ullong v21 = qword_1EB1CE2B8[0];
    do
    {
      atomic_ullong v22 = v21;
      atomic_compare_exchange_strong_explicit(qword_1EB1CE2B8, (unint64_t *)&v21, (v21 & 0xFFFFFFF000000001) - 0x40020000000000, memory_order_release, memory_order_relaxed);
    }
    while (v21 != v22);
    StatusReg[25] = 0;
    StatusReg[20] = 0;
    if ((v22 & 0x8000000000) != 0) {
      _dispatch_event_loop_poke(-8, 0, 0);
    }
  }
  else
  {
    unint64_t v16 = v15 & 0xFFFFFFFF88FFFFFFLL;
    if (v5 == -4) {
      v16 |= 0x1000000uLL;
    }
    StatusReg[4] = v16;
    if (v5 == -4) {
      BYTE12(v29) = 1;
    }
    StatusReg[29] = &v26;
    _dispatch_event_loop_merge(v9, *a3);
    if (*((void *)&v26 + 1))
    {
      if (v28 == -4)
      {
        StatusReg[29] = 0;
        _dispatch_root_queue_drain_deferred_item((uint64_t *)&v26);
      }
      else
      {
        _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v26);
      }
    }
  }
  if (v13) {
    char v23 = v12;
  }
  else {
    char v23 = 1;
  }
  if ((v23 & 1) == 0) {
    os_workgroup_leave(v13, &v25);
  }
  StatusReg[29] = 0;
  StatusReg[5] = 0;
  StatusReg[120] = 0;
  *a3 = WORD4(v29);
  StatusReg[27] = v5 | 1;
}

void _dispatch_mgr_queue_drain()
{
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = 0x40020000000000;
  if (qword_1EB1CE2B0)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if ((~*(_DWORD *)(StatusReg + 200) & 0xF0000) != 0) {
      *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0xF0000;
    }
    _dispatch_lane_serial_drain((uint64_t)&_dispatch_mgr_q, (uint64_t)v6, 0x40000u, &v5);
    if (v2) {
      _dispatch_mgr_queue_drain_cold_2();
    }
    uint64_t v3 = *(void *)(StatusReg + 224);
    if (v3)
    {
      *(void *)(StatusReg + 224) = 0;
      if (*(_DWORD *)(v3 + 32)) {
        _dispatch_set_priority_and_mach_voucher_slow(0, 0);
      }
      int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          -[OS_voucher release]();
        }
        _voucher_xref_dispose(v3, v1);
      }
    }
    if ((*(void *)(StatusReg + 200) & 0xF0000) != 0) {
      *(void *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
    }
  }
}

void _dispatch_root_queue_drain_deferred_item(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  memset(v22, 0, sizeof(v22));
  _dispatch_last_resort_autorelease_pool_push((uint64_t)v22);
  StatusReg[25] = *(unsigned int *)(v2 + 84);
  uint64_t v4 = a1[1];
  uint64_t v5 = (void (**)(uint64_t))StatusReg[24];
  if (v5) {
    (*v5)(v2);
  }
  uint64_t v6 = *(void *)v4;
  if (*(void *)v4 < 0x1000uLL)
  {
    uint64_t v7 = *(void *)(v4 + 24);
    if ((v6 & 4) != 0) {
      *(void *)(v4 + 24) = -1;
    }
    uint64_t v8 = v6 & 4;
    uint64_t v9 = *(void *)(v4 + 8);
    if (v9 == -1)
    {
      unint64_t v12 = 0;
    }
    else
    {
      uint64_t v10 = StatusReg[25];
      if (((v10 >> 8) & 0xF) != 0) {
        uint64_t v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
      }
      else {
        uint64_t v11 = 0;
      }
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      if ((v9 & 0xFFFFFF) != 0)
      {
        if ((v9 & 0xFFFFFFuLL) >= (v11 & 0xFFFFFF00)
          && ((v10 & 0x44000000) != 0 || (*(void *)(v4 + 8) & 0x10000000) != 0))
        {
          unint64_t v12 = v9 & 0xFFFFFF;
        }
      }
      else if ((unsigned __int16)v10 >> 12)
      {
        unint64_t v12 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
      }
    }
    unint64_t v14 = v12 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v15 = StatusReg[4];
    if ((v15 & 0x1000000) != 0)
    {
      if (v14) {
        goto LABEL_40;
      }
      unint64_t v14 = v15 & 0xFFFFFFFFFEFFFFFFLL;
    }
    else if (v14 == (v15 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_26:
      if (v7 == -1) {
        goto LABEL_41;
      }
      if (StatusReg[28] == v7)
      {
        if ((v6 & 4) != 0 && v7)
        {
          if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
            -[OS_voucher release]();
          }
LABEL_42:
          uint64_t v16 = StatusReg[22];
          if (v16) {
            int v17 = *(_DWORD *)(v16 + 8) + 1;
          }
          else {
            int v17 = 1;
          }
          uint64_t v8 = v4;
          if (v17 <= _dispatch_continuation_cache_limit)
          {
            uint64_t v8 = 0;
            *(void *)(v4 + 16) = v16;
            *(_DWORD *)(v4 + 8) = v17;
            StatusReg[22] = v4;
          }
LABEL_47:
          if ((v6 & 8) != 0)
          {
            BOOL v20 = *(NSObject **)(v4 + 48);
            uint64_t v21 = *((void *)v20->isa + 5);
            if (v21 != 514) {
              _dispatch_queue_override_invoke_cold_1(v21);
            }
            _dispatch_client_callout(*(void *)(v4 + 40), *(uint64_t (**)(void))(v4 + 32));
            dispatch_group_leave(v20);
            if (!v8)
            {
LABEL_49:
              if (!v5) {
                goto LABEL_51;
              }
LABEL_50:
              v5[1](v2);
              goto LABEL_51;
            }
          }
          else
          {
            _dispatch_client_callout(*(void *)(v4 + 40), *(uint64_t (**)(void))(v4 + 32));
            if (!v8) {
              goto LABEL_49;
            }
          }
          _dispatch_continuation_free_to_cache_limit(v8);
          if (!v5) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
LABEL_41:
        if ((v6 & 4) == 0) {
          goto LABEL_47;
        }
        goto LABEL_42;
      }
      unint64_t v14 = 0;
LABEL_40:
      _dispatch_set_priority_and_voucher_slow(v14, v7, v8 | 2);
      goto LABEL_41;
    }
    if (v14) {
      goto LABEL_40;
    }
    goto LABEL_26;
  }
  if (*(void *)(v6 + 40) == 1) {
    (*(void (**)(uint64_t, void, void))(v6 + 48))(v4, 0, 0);
  }
  else {
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 64))(v4, v22, 196608);
  }
  if (v5) {
    goto LABEL_50;
  }
LABEL_51:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v22);
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  uint64_t v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    unint64_t v19 = v18 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v18 & 0xFFFFFFFFFEFFFFFFLL) != 0) {
      goto LABEL_57;
    }
  }
  if (StatusReg[28])
  {
    unint64_t v19 = 0;
LABEL_57:
    _dispatch_set_priority_and_voucher_slow(v19, 0, 14);
  }
}

void _dispatch_root_queue_drain_deferred_wlh(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  memset(v12, 0, sizeof(v12));
  StatusReg[25] = *(unsigned int *)(v2 + 84) | 0xF0000;
  *(unsigned char *)(a1 + 45) |= 4u;
  unint64_t v5 = *(void *)(v3 + 56);
  while (2)
  {
    uint64_t v6 = StatusReg[3] & 0xFFFFFFFCLL;
    while (1)
    {
      uint64_t v7 = v5;
      if (v5 >> 55)
      {
        unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_6;
      }
      if ((v5 & 0xFFFFFFFC) != 0) {
        break;
      }
      unint64_t v8 = v6 | v5 & 0x7700000001 | 0x60000000000000;
LABEL_6:
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v3 + 56), &v5, v8, memory_order_acquire, memory_order_acquire);
      if (v5 == v7) {
        goto LABEL_12;
      }
    }
    if ((v5 & 2) != 0)
    {
      unint64_t v8 = v5 | 0x800000000;
      goto LABEL_6;
    }
    unint64_t v8 = v5;
LABEL_12:
    if ((v7 & 0x6000000001) != 0x2000000001) {
      _dispatch_root_queue_drain_deferred_wlh_cold_4(v7);
    }
    if ((v7 & 0xFF800000FFFFFFFCLL) != 0)
    {
      int v10 = *(_DWORD *)(v3 + 8);
      if (v8 >> 55)
      {
        if (v10 != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFE, memory_order_release) <= 2)
        {
          _os_object_retain_weak_cold_1();
        }
      }
      else if (v10 != 0x7FFFFFFF {
             && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
      }
      {
        _os_object_retain_weak_cold_1();
      }
      goto LABEL_21;
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v3 + 64))(v3, v12, 196610);
    if (*(unsigned char *)(a1 + 45))
    {
      unint64_t v5 = *(void *)(v3 + 56);
      if ((v5 & 0x2000000000) != 0)
      {
        if (v5)
        {
          if (*(_DWORD *)(v3 + 8) != 0x7FFFFFFF
            && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed) <= 0)
          {
            dispatch_set_target_queue_cold_2();
          }
          continue;
        }
        unint64_t v8 = *(void *)(v3 + 56);
LABEL_21:
        _dispatch_event_loop_leave_deferred(a1, v8);
      }
    }
    break;
  }
  StatusReg[25] = 0;
  StatusReg[20] = 0;
  uint64_t v9 = StatusReg[4];
  if ((v9 & 0x1000000) != 0)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v9 & 0xFFFFFFFFFEFFFFFFLL) != 0)
    {
LABEL_36:
      _dispatch_set_priority_and_voucher_slow(v11, 0, 14);
      return;
    }
  }
  if (StatusReg[28])
  {
    unint64_t v11 = 0;
    goto LABEL_36;
  }
}

void _dispatch_queue_cleanup2()
{
  uint64_t v6 = *MEMORY[0x1E4F14BF8];
  atomic_ullong v0 = qword_1EB1CE238[0];
  atomic_ullong v1 = qword_1EB1CE238[0];
  do
  {
    atomic_compare_exchange_strong_explicit(qword_1EB1CE238, (unint64_t *)&v1, (v0 & 0xFFFFFF7FFFFFFFFFLL) + 0x40020000000000, memory_order_acquire, memory_order_acquire);
    BOOL v2 = v1 == v0;
    atomic_ullong v0 = v1;
  }
  while (!v2);
  atomic_fetch_and_explicit(&dword_1EB1CE250, 0xFFFBFFFF, memory_order_relaxed);
  _dispatch_lane_barrier_complete((uint64_t)&_dispatch_main_q, 0, 0);
  if (_dispatch_program_is_probably_callback_driven == 1)
  {
    memset(&v5, 0, sizeof(v5));
    pthread_attr_init(&v5);
    pthread_attr_setdetachstate(&v5, 2);
    pthread_t v4 = 0;
    int v3 = pthread_create(&v4, &v5, (void *(__cdecl *)(void *))_dispatch_sig_thread, 0);
    if (v3)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to create signal thread";
      qword_1E91199F0 = v3;
      __break(1u);
    }
    pthread_attr_destroy(&v5);
    sleep_NOCANCEL();
  }
  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f(&_dispatch_main_q_handle_pred, &_dispatch_main_q, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)&_dispatch_main_q);
}

void _dispatch_sig_thread()
{
  atomic_ullong v0 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v0);
  bzero(&vars0, stackaddr_np - (unsigned char *)&vars0);
  _dispatch_sigsuspend();
}

void _dispatch_sigsuspend()
{
  while (1)
    sigsuspend_NOCANCEL();
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  return v0 + v1;
}

void _dispatch_apply_invoke(uint64_t a1)
{
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed);
  context[1] = 0;
  context[2] = 0;
  context[0] = a1;
  _dispatch_apply_set_attr_behavior(*(void *)(a1 + 56));
  int v3 = (dispatch_once_t *)(*(void *)(a1 + 32) + 8 * add_explicit);
  if (*v3 != -1) {
    dispatch_once_f(v3, context, (dispatch_function_t)_dispatch_apply_invoke3);
  }
  _dispatch_apply_clear_attr_behavior(*(void *)(a1 + 56));
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 44), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    pthread_t v4 = *(void **)(a1 + 32);
    if (v4) {
      free(v4);
    }
    pthread_attr_t v5 = *(_OWORD **)(a1 + 56);
    if (v5)
    {
      v5[2] = 0u;
      v5[3] = 0u;
      *pthread_attr_t v5 = 0u;
      v5[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v7 = *(void *)(StatusReg + 176);
    if (v7) {
      int v8 = *(_DWORD *)(v7 + 8) + 1;
    }
    else {
      int v8 = 1;
    }
    if (v8 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit(a1);
    }
    else
    {
      *(void *)(a1 + 16) = v7;
      *(_DWORD *)(a1 + 8) = v8;
      *(void *)(StatusReg + 176) = a1;
    }
  }
}

void _dispatch_apply_redirect_invoke(uint64_t a1)
{
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed);
  uint64_t context = a1;
  long long v10 = xmmword_18A97E3C0;
  _dispatch_apply_set_attr_behavior(*(void *)(a1 + 56));
  int v3 = (dispatch_once_t *)(*(void *)(a1 + 32) + 8 * add_explicit);
  if (*v3 != -1) {
    dispatch_once_f(v3, &context, (dispatch_function_t)_dispatch_apply_invoke3);
  }
  _dispatch_apply_clear_attr_behavior(*(void *)(a1 + 56));
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 44), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    pthread_t v4 = *(void **)(a1 + 32);
    if (v4) {
      free(v4);
    }
    pthread_attr_t v5 = *(_OWORD **)(a1 + 56);
    if (v5)
    {
      v5[2] = 0u;
      v5[3] = 0u;
      *pthread_attr_t v5 = 0u;
      v5[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v7 = *(void *)(StatusReg + 176);
    if (v7) {
      int v8 = *(_DWORD *)(v7 + 8) + 1;
    }
    else {
      int v8 = 1;
    }
    if (v8 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit(a1);
    }
    else
    {
      *(void *)(a1 + 16) = v7;
      *(_DWORD *)(a1 + 8) = v8;
      *(void *)(StatusReg + 176) = a1;
    }
  }
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
}

void _dispatch_apply_with_attr_f(unint64_t a1, uint64_t a2, __objc2_class **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return;
  }
  int v8 = a3;
  if (a2 && (*(_DWORD *)a2 != -1592086528 || ~*(void *)(a2 + 16) != a2)) {
    _dispatch_apply_with_attr_f_cold_4(a2);
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v12 = StatusReg + 184;
  while (1)
  {
    unint64_t v12 = *(void *)v12;
    if (!v12) {
      break;
    }
    if (*(char **)(v12 + 8) == "apply")
    {
      unint64_t v13 = *(void *)(v12 + 16);
      goto LABEL_10;
    }
  }
  unint64_t v13 = 0;
LABEL_10:
  if (!a3)
  {
    if (!*(void *)(StatusReg + 160)) {
      goto LABEL_24;
    }
    unint64_t v14 = *(__objc2_class ***)(StatusReg + 160);
    do
    {
      int v8 = v14;
      unint64_t v14 = (__objc2_class **)v14[3];
      if (!v14) {
        break;
      }
    }
    while (v14 != &_dispatch_custom_workloop_root_queue && v14 != &_dispatch_custom_workloop_overcommit_root_queue);
    if (v8 >= &_dispatch_root_queues && v8 < (__objc2_class **)&_dispatch_queue_serial_numbers)
    {
LABEL_24:
      unsigned int v17 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
        unsigned int v18 = v17 + 1;
      }
      else {
        unsigned int v18 = 4;
      }
      if (v18 - 7 <= 0xFFFFFFF9) {
        _dispatch_queue_priority_inherit_from_target_cold_1(v18);
      }
      int v8 = &_dispatch_root_queues + 16 * (unint64_t)(3 * v18 - 3);
    }
  }
  uint64_t v49 = *(NSObject **)(StatusReg + 160);
  unsigned int v19 = *((_DWORD *)v8 + 21);
  int v20 = (unsigned __int16)v19 >> 12;
  int v21 = (v19 >> 8) & 0xF;
  if (v21) {
    int v22 = v21;
  }
  else {
    int v22 = v20;
  }
  if (v8[3])
  {
    unsigned int v29 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
      int v22 = v29 + 1;
    }
    else {
      int v22 = 0;
    }
    if (a2) {
      goto LABEL_34;
    }
  }
  else if (a2)
  {
LABEL_34:
    if (*(_DWORD *)a2 != -1592086528 || ~*(void *)(a2 + 16) != a2) {
      _dispatch_apply_with_attr_f_cold_4(a2);
    }
    if (v13)
    {
      uint64_t v28 = 0xFFFFLL;
      unint64_t v26 = 1;
    }
    else
    {
      uint64_t v23 = a5;
      switch(v22)
      {
        case 0:
          goto LABEL_38;
        default:
          int v24 = pthread_qos_max_parallelism();
          if (v24 <= 0) {
LABEL_38:
          }
            int v24 = MEMORY[0xFFFFFC036];
          if (v24 >= MEMORY[0xFFFFFC034]) {
            unint64_t v25 = MEMORY[0xFFFFFC034];
          }
          else {
            unint64_t v25 = v24;
          }
          if (*(void *)(a2 + 8))
          {
            int v27 = pthread_qos_max_parallelism();
            if (v27 < 1) {
              unint64_t v26 = 0;
            }
            else {
              unint64_t v26 = (v27 * *(_DWORD *)(a2 + 8));
            }
          }
          else
          {
            unint64_t v26 = -1;
          }
          a5 = v23;
          if (v26 >= v25) {
            unint64_t v26 = v25;
          }
          if (!v26) {
            goto LABEL_118;
          }
          uint64_t v28 = 0xFFFFLL;
          break;
      }
    }
    goto LABEL_64;
  }
  uint64_t v48 = a5;
  switch(v22)
  {
    case 0:
      goto LABEL_57;
    default:
      int v30 = pthread_qos_max_parallelism();
      if (v30 <= 0) {
LABEL_57:
      }
        int v30 = MEMORY[0xFFFFFC036];
      if (v30 >= MEMORY[0xFFFFFC034]) {
        unint64_t v26 = MEMORY[0xFFFFFC034];
      }
      else {
        unint64_t v26 = v30;
      }
      if (v13)
      {
        a5 = v48;
        if (v13 >= v26) {
          unint64_t v26 = 1;
        }
        else {
          v26 /= v13;
        }
        if (v13 >= 0xFFFF || a1 >= 0xFFFF) {
          uint64_t v28 = 0xFFFFLL;
        }
        else {
          uint64_t v28 = v13 * a1;
        }
      }
      else
      {
        uint64_t v28 = a1;
        a5 = v48;
        if (!v26) {
LABEL_118:
        }
          _dispatch_apply_with_attr_f_cold_2(a2);
      }
      return;
  }
LABEL_64:
  if (v26 >= a1) {
    unint64_t v31 = a1;
  }
  else {
    unint64_t v31 = v26;
  }
  memset(v52, 0, 32);
  v52[4] = a5;
  v52[5] = a4;
  v52[6] = a6;
  v52[7] = v8;
  int v32 = *(void **)(StatusReg + 176);
  if (v32) {
    *(void *)(StatusReg + 176) = *((void *)v32 + 2);
  }
  else {
    int v32 = _dispatch_continuation_alloc_from_heap();
  }
  *((void *)v32 + _dispatch_apply_with_attr_f(iterations, 0, (__objc2_class **)queue, (uint64_t)context, (uint64_t)work, 1) = 0;
  *((void *)v32 + 2) = a1;
  *((void *)v32 + 3) = v28;
  *((_DWORD *)v32 + 1_dispatch_apply_with_attr_f(iterations, 0, (__objc2_class **)queue, (uint64_t)context, (uint64_t)work, 1) = v31;
  *((_DWORD *)v32 + 13) = 0;
  if (a2)
  {
    unint64_t v33 = (unint64_t)_dispatch_calloc(1uLL, 0x40uLL);
    *(_OWORD *)unint64_t v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_OWORD *)(v33 + 48) = 0u;
    *(_DWORD *)unint64_t v33 = -1592086528;
    *(void *)(v33 + 16) = ~v33;
    *(void *)(v33 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v33 + 4) = *(_DWORD *)(a2 + 4);
  }
  else
  {
    unint64_t v33 = 0;
  }
  *((void *)v32 + 7) = v33;
  *((void *)v32 + 4) = 0;
  *(void *)int v32 = v52;
  *((_DWORD *)v32 + 1pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = 0;
  uint64_t v34 = (__objc2_class **)v8[3];
  if (v34 == &_dispatch_custom_workloop_root_queue || v34 == &_dispatch_custom_workloop_overcommit_root_queue)
  {
    if (((v8[7] ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0) {
      dispatch_async_and_wait_f((dispatch_queue_t)v8, v32, (dispatch_function_t)_dispatch_apply_serial);
    }
    else {
      _dispatch_apply_serial((uint64_t)v32);
    }
    return;
  }
  if (v31 < 2 || *((_WORD *)v8 + 40) == 1)
  {
    unint64_t v44 = _dispatch_apply_serial;
    goto LABEL_100;
  }
  if (v34)
  {
    unint64_t v45 = v49;
    if (v8 == (__objc2_class **)v49)
    {
      unint64_t v46 = (void (__cdecl *)(void *))_dispatch_apply_serial;
      goto LABEL_101;
    }
    unint64_t v44 = _dispatch_apply_redirect;
LABEL_100:
    unint64_t v46 = (void (__cdecl *)(void *))v44;
    unint64_t v45 = v8;
LABEL_101:
    dispatch_sync_f(v45, v32, v46);
    return;
  }
  uint64_t v35 = (_OWORD *)(StatusReg + 160);
  long long v51 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 16pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = v8;
  *(void *)(StatusReg + 168) = &v51;
  int v36 = *((_DWORD *)v32 + 11);
  signed int v50 = v36 - 1;
  if (v36 < 2)
  {
    unint64_t v38 = 0;
    int v41 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    unint64_t v38 = 0;
    uint64_t v39 = *(void *)(StatusReg + 32) | 0x10000000;
    int v40 = v36 - 1;
    do
    {
      int v41 = *(__objc2_class **)(StatusReg + 176);
      if (v41) {
        *(void *)(StatusReg + 176) = v41->cache;
      }
      else {
        int v41 = (__objc2_class *)_dispatch_continuation_alloc_from_heap();
      }
      v41->Class isa = (__objc2_class *)260;
      v41->info = (__objc2_class_ro *)_dispatch_apply_invoke;
      v41[1].Class isa = (__objc2_class *)v32;
      uint64_t v42 = *(atomic_uint **)(StatusReg + 224);
      if (v42 && (int)atomic_fetch_add_explicit(v42 + 3, 1u, memory_order_relaxed) <= 0) {
        -[OS_voucher retain]();
      }
      v41->vtable = v42;
      v41->superclass = (__objc2_class *)v39;
      v41->cache = v37;
      if (!v38) {
        unint64_t v38 = (unint64_t)v41;
      }
      unint64_t v37 = v41;
      --v40;
    }
    while (v40);
    int v36 = *((_DWORD *)v32 + 11);
    uint64_t v35 = (_OWORD *)(StatusReg + 160);
  }
  *((_DWORD *)v32 + 12) = v36;
  *((void *)v32 + 4) = _dispatch_calloc(v36, 8uLL);
  *(void *)(v38 + 16) = 0;
  *(void *)(StatusReg + 976) = v8 + 6;
  unint64_t v43 = atomic_exchange_explicit((atomic_ullong *volatile)v8 + 6, v38, memory_order_release);
  if (v43)
  {
    *(void *)(v43 + 16) = v41;
    *(void *)(StatusReg + 976) = 0;
  }
  else
  {
    v8[13] = v41;
    *(void *)(StatusReg + 976) = 0;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v8, v50, 0);
  }
  _dispatch_apply_invoke_and_wait((uint64_t)v32);
  *uint64_t v35 = v51;
}

void dispatch_apply_with_attr_f(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  pthread_attr_t v5 = (void (__cdecl **)(void *, size_t))_dispatch_Block_copy(block);
  dispatch_apply_f(iterations, queue, v5, v5[2]);

  _Block_release(v5);
}

void dispatch_apply_with_attr(unint64_t a1, uint64_t a2, void *aBlock)
{
  pthread_attr_t v5 = _dispatch_Block_copy(aBlock);
  if (v5[2]) {
    uint64_t v6 = v5[2];
  }
  else {
    uint64_t v6 = 0;
  }
  _dispatch_apply_with_attr_f(a1, a2, 0, (uint64_t)v5, v6, 2);

  _Block_release(v5);
}

double dispatch_apply_attr_init(unint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = -1592086528;
  *(void *)(a1 + 16) = ~a1;
  return result;
}

double dispatch_apply_attr_destroy(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t dispatch_apply_attr_set_parallelism(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == -1 || a2 == 2)
  {
    if (a3 != 1)
    {
      if (!a3) {
        dispatch_apply_attr_set_parallelism_cold_4();
      }
      dispatch_apply_attr_set_parallelism_cold_3(a3);
    }
    if (result && (*(_DWORD *)result != -1592086528 || ~*(void *)(result + 16) != result)) {
      _dispatch_apply_with_attr_f_cold_4(result);
    }
    *(void *)(result + 8) = 1;
  }
  else
  {
    if (a2 != 1) {
      dispatch_apply_attr_set_parallelism_cold_1(a2);
    }
    if (a3 != 1) {
      dispatch_apply_attr_set_parallelism_cold_2(a3);
    }
  }
  return result;
}

unint64_t dispatch_apply_attr_query(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = result;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v5 = StatusReg + 184;
  while (1)
  {
    unint64_t v5 = *(void *)v5;
    if (!v5) {
      break;
    }
    if (*(char **)(v5 + 8) == "apply")
    {
      unint64_t v6 = *(void *)(v5 + 16);
      goto LABEL_6;
    }
  }
  unint64_t v6 = 0;
LABEL_6:
  uint64_t v7 = *(__objc2_class ***)(StatusReg + 160);
  if (!v7) {
    goto LABEL_18;
  }
  do
  {
    int v8 = v7;
    uint64_t v7 = (__objc2_class **)v7[3];
    if (!v7) {
      break;
    }
    BOOL v9 = v7 == &_dispatch_custom_workloop_root_queue || v7 == &_dispatch_custom_workloop_overcommit_root_queue;
  }
  while (!v9);
  if (v8 >= &_dispatch_root_queues && v8 < (__objc2_class **)&_dispatch_queue_serial_numbers)
  {
LABEL_18:
    unsigned int v11 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    BOOL v9 = v11 == 0;
    unsigned int v12 = __clz(__rbit32(v11));
    if (v9) {
      double result = 4;
    }
    else {
      double result = v12 + 1;
    }
    if ((result - 7) <= 0xFFFFFFF9) {
      _dispatch_queue_priority_inherit_from_target_cold_1(result);
    }
    int v8 = &_dispatch_root_queues + 16 * (unint64_t)(3 * result - 3);
  }
  unsigned int v13 = *((_DWORD *)v8 + 21);
  int v14 = (unsigned __int16)v13 >> 12;
  int v15 = (v13 >> 8) & 0xF;
  if (v15) {
    int v16 = v15;
  }
  else {
    int v16 = v14;
  }
  switch(a2)
  {
    case 0:
      return dispatch_apply_attr_query(v3, 1) != 0;
    case 1:
      if (a3)
      {
        if (v3)
        {
          if (*(_DWORD *)v3 != -1592086528 || ~*(void *)(v3 + 16) != v3) {
            _dispatch_apply_with_attr_f_cold_4(v3);
          }
          if (v6) {
            return 1;
          }
          switch(v16)
          {
            case 0:
              goto LABEL_49;
            default:
LABEL_60:
              int v21 = pthread_qos_max_parallelism();
              if (v21 <= 0) {
LABEL_49:
              }
                int v21 = MEMORY[0xFFFFFC036];
              if (v21 >= MEMORY[0xFFFFFC034]) {
                unint64_t v22 = MEMORY[0xFFFFFC034];
              }
              else {
                unint64_t v22 = v21;
              }
              if (*(void *)(v3 + 8))
              {
                int v24 = pthread_qos_max_parallelism();
                if (v24 < 1) {
                  unint64_t v23 = 0;
                }
                else {
                  unint64_t v23 = (v24 * *(_DWORD *)(v3 + 8));
                }
              }
              else
              {
                unint64_t v23 = -1;
              }
              if (v23 >= v22) {
                double result = v22;
              }
              else {
                double result = v23;
              }
              break;
          }
        }
        else
        {
          switch(v16)
          {
            case 0:
              goto LABEL_55;
            default:
LABEL_72:
              LODWORD(result) = pthread_qos_max_parallelism();
              if ((int)result <= 0) {
LABEL_55:
              }
                LODWORD(result) = MEMORY[0xFFFFFC036];
              if (result >= MEMORY[0xFFFFFC034]) {
                double result = MEMORY[0xFFFFFC034];
              }
              else {
                double result = result;
              }
              if (!v6) {
                return result;
              }
              if (v6 >= result) {
                return 1;
              }
              result /= v6;
              break;
          }
        }
      }
      else if (v3)
      {
        if (*(_DWORD *)v3 != -1592086528 || ~*(void *)(v3 + 16) != v3) {
          _dispatch_apply_with_attr_f_cold_4(v3);
        }
        int v17 = pthread_qos_max_parallelism();
        if (v17 <= 0) {
          int v17 = MEMORY[0xFFFFFC036];
        }
        unint64_t v18 = v17;
        if (*(void *)(v3 + 8))
        {
          int v19 = pthread_qos_max_parallelism();
          if (v19 < 1) {
            unint64_t v20 = 0;
          }
          else {
            unint64_t v20 = (v19 * *(_DWORD *)(v3 + 8));
          }
        }
        else
        {
          unint64_t v20 = -1;
        }
        if (v20 >= v18) {
          return v18;
        }
        else {
          return v20;
        }
      }
      else
      {
        LODWORD(result) = pthread_qos_max_parallelism();
        if ((int)result <= 0) {
          LODWORD(result) = MEMORY[0xFFFFFC036];
        }
        return result;
      }
      break;
    case 2:
      if (!v3)
      {
        switch(v16)
        {
          case 0:
            goto LABEL_55;
          default:
            goto LABEL_72;
        }
      }
      if (*(_DWORD *)v3 != -1592086528 || ~*(void *)(v3 + 16) != v3) {
        _dispatch_apply_with_attr_f_cold_4(v3);
      }
      if (!v6)
      {
        switch(v16)
        {
          case 0:
            goto LABEL_49;
          default:
            goto LABEL_60;
        }
      }
      return 1;
  }
  return result;
}

uint64_t _dispatch_apply_set_attr_behavior(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 8))
    {
      double result = __bsdthread_ctl();
      if (result)
      {
        double result = (uint64_t)__error();
        if (*(_DWORD *)result != 45) {
          __break(1u);
        }
      }
    }
  }
  return result;
}

void _dispatch_apply_invoke3(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = *(void *)(*a1 + 16);
  unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(*a1 + 8), 1uLL, memory_order_relaxed);
  if (add_explicit >= v2) {
    return;
  }
  uint64_t v5 = 0;
  unint64_t v6 = *(uint64_t (**)(void))(*(void *)v1 + 32);
  uint64_t v7 = *(void *)(*(void *)v1 + 40);
  int v8 = "apply";
  uint64_t v9 = *(void *)(*(void *)v1 + 48);
  uint64_t v10 = *(void *)(v1 + 24);
  v23[1] = "apply";
  v23[2] = v10;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23[0] = *(void *)(StatusReg + 184);
  *(void *)(StatusReg + 184) = v23;
  long long v22 = 0uLL;
  if (a1[1])
  {
    uint64_t v12 = *(void *)(*(void *)v1 + 56);
    long long v22 = *(_OWORD *)(StatusReg + 160);
    *(void *)(StatusReg + 16pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = v12;
    *(void *)(StatusReg + 168) = &v22;
    LODWORD(v8) = *(_DWORD *)(v12 + 84);
    uint64_t v13 = *(void *)(StatusReg + 200);
    if (v13)
    {
      unsigned int v14 = (unsigned __int16)v8 & 0xFFF;
      if (((unsigned __int16)v8 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v13 & 0xFFFu) > v14) {
          unsigned int v14 = v13 & 0xFFF;
        }
        if ((unsigned __int16)v8 >> 12 <= v14 >> 8) {
          int v15 = 0x40000000;
        }
        else {
          int v15 = 1140912128;
        }
        LODWORD(v8) = v13 & 0x880F0000 | v14 | v15 & v8;
      }
      else
      {
        unsigned int v16 = v13 | 0x40000000;
        if ((v13 & 0xFFF) == 0) {
          unsigned int v16 = *(void *)(StatusReg + 200);
        }
        unsigned int v17 = (unsigned __int16)v8 >> 12;
        LODWORD(v8) = v16 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v17 <= ((v16 >> 8) & 0xF)) {
          LODWORD(v8) = v16;
        }
      }
    }
    else
    {
LABEL_31:
      LODWORD(v8) = v8 & 0xFFF0FFFF;
    }
    *(void *)(StatusReg + 20pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = v8;
    uint64_t v5 = v13 & 0xFFF0FFFF;
  }
  uint64_t v20 = v5;
  unint64_t v21 = StatusReg;
  int v18 = *(_DWORD *)(v1 + 40);
  do
  {
    if ((v18 & 0x1000000) != 0)
    {
      int v19 = (void *)MEMORY[0x18C121B40]();
      if (v9)
      {
LABEL_19:
        _dispatch_client_callout2(v7, add_explicit, v6);
        goto LABEL_23;
      }
    }
    else
    {
      int v19 = 0;
      if (v9) {
        goto LABEL_19;
      }
    }
    if ((v9 & 2) == 0)
    {
      LODWORD(v13) = v9;
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_1E91199F0 = v9;
      __break(1u);
      goto LABEL_31;
    }
    _dispatch_client_callout3_a(v7, add_explicit, *((unsigned int *)a1 + 4), v6);
LABEL_23:
    unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    if (v19) {
  }
    }
  while (add_explicit < v2);
  if (a1[1])
  {
    *(void *)(v21 + 20pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = *(void *)(v21 + 200) & 0xF0000 | v20;
    *(_OWORD *)(v21 + 16pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = v22;
  }
  *(void *)(v21 + 184) = v23[0];
}

uint64_t _dispatch_apply_clear_attr_behavior(uint64_t result)
{
  if (result && *(void *)(result + 8))
  {
    double result = __bsdthread_ctl();
    if (result) {
      __break(1u);
    }
  }
  return result;
}

void _dispatch_apply_serial(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 56);
  if (v3)
  {
    do
    {
      int v4 = *(_DWORD *)(v3 + 80);
      uint64_t v3 = *(void *)(v3 + 24);
      if (v3) {
        BOOL v5 = (v4 & 0x30000) == 0;
      }
      else {
        BOOL v5 = 0;
      }
    }
    while (v5);
    BOOL v6 = (v4 & 0x10000) == 0;
  }
  else
  {
    BOOL v6 = 1;
  }
  uint64_t v7 = 0;
  if (*(void *)(a1 + 16) <= 1uLL) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  do
  {
    if (v6) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (void *)MEMORY[0x18C121B40]();
    }
    uint64_t v10 = *(void *)(v2 + 48);
    if (v10)
    {
      _dispatch_client_callout2(*(void *)(v2 + 40), v7, *(uint64_t (**)(void))(v2 + 32));
      if (!v9) {
        goto LABEL_20;
      }
LABEL_19:
      goto LABEL_20;
    }
    if ((v10 & 2) == 0)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_1E91199F0 = v10;
      __break(1u);
      return;
    }
    _dispatch_client_callout3_a(*(void *)(v2 + 40), v7, 0, *(uint64_t (**)(void))(v2 + 32));
    if (v9) {
      goto LABEL_19;
    }
LABEL_20:
    ++v7;
  }
  while (v8 != v7);
  unsigned int v11 = *(void **)(a1 + 32);
  if (v11) {
    free(v11);
  }
  uint64_t v12 = *(_OWORD **)(a1 + 56);
  if (v12)
  {
    _OWORD v12[2] = 0u;
    v12[3] = 0u;
    *uint64_t v12 = 0u;
    v12[1] = 0u;
    free(*(void **)(a1 + 56));
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v14 = *(void *)(StatusReg + 176);
  if (v14) {
    int v15 = *(_DWORD *)(v14 + 8) + 1;
  }
  else {
    int v15 = 1;
  }
  if (v15 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 8) = v15;
    *(void *)(StatusReg + 176) = a1;
  }
}

void _dispatch_apply_redirect(uint64_t a1)
{
  uint64_t v2 = (*(_DWORD *)(a1 + 44) - 1);
  uint64_t v3 = *(void *)(*(void *)a1 + 56);
  uint64_t v4 = v3;
  while (1)
  {
    if (*(_WORD *)(v4 + 80) != 1)
    {
      unint64_t v5 = *(void *)(v4 + 56);
      while ((v5 & 0x20000000000000) == 0)
      {
        uint64_t v6 = (v5 >> 41) & 0x1FFF;
        if (v6 == 4096) {
          break;
        }
        LODWORD(v6) = 4096 - v6;
        if ((int)v6 >= (int)v2) {
          uint64_t v6 = v2;
        }
        else {
          uint64_t v6 = v6;
        }
        unint64_t v7 = v5;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 56), &v7, v5 + (v6 << 41), memory_order_relaxed, memory_order_relaxed);
        BOOL v8 = v7 == v5;
        unint64_t v5 = v7;
        if (v8) {
          goto LABEL_11;
        }
      }
    }
    uint64_t v6 = 0;
LABEL_11:
    uint64_t v9 = (v2 - v6);
    if ((int)v2 <= (int)v6) {
      goto LABEL_12;
    }
    if (v3 != v4)
    {
      uint64_t v10 = v3;
      do
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 56), 0xFFFFFE0000000000 * v9, memory_order_relaxed);
        uint64_t v10 = *(void *)(v10 + 24);
      }
      while (v10 != v4);
    }
    if (!v6) {
      break;
    }
    *(_DWORD *)(a1 + 44) -= v9;
    uint64_t v2 = v6;
LABEL_12:
    if (!*(_DWORD *)(a1 + 40)) {
      *(_DWORD *)(a1 + 4pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = (*(_DWORD *)(v4 + 80) << 8) & 0x3000000;
    }
    uint64_t v4 = *(void *)(v4 + 24);
    if (!*(void *)(v4 + 24))
    {
      unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v12 = *(_DWORD *)(a1 + 44);
      signed int v13 = v12 - 1;
      if (v12 < 2)
      {
        unint64_t v14 = 0;
        unsigned int v16 = 0;
LABEL_34:
        *(_DWORD *)(a1 + 48) = v12;
        *(void *)(a1 + 32) = _dispatch_calloc(v12, 8uLL);
        *(void *)(v14 + 16) = 0;
        StatusReg[122] = v4 + 48;
        unint64_t v18 = atomic_exchange_explicit((atomic_ullong *volatile)(v4 + 48), v14, memory_order_release);
        if (v18)
        {
          *(void *)(v18 + 16) = v16;
          StatusReg[122] = 0;
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v20 = (void *)v2;
        uint64_t v2 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = StatusReg[4] | 0x10000000;
        signed int v19 = v12 - 1;
        while (1)
        {
          unsigned int v16 = (void *)StatusReg[22];
          if (v16) {
            StatusReg[22] = v16[2];
          }
          else {
            unsigned int v16 = _dispatch_continuation_alloc_from_heap();
          }
          void *v16 = 260;
          v16[4] = _dispatch_apply_redirect_invoke;
          v16[5] = a1;
          uint64_t v17 = StatusReg[28];
          if (v17)
          {
            if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 12), 1u, memory_order_relaxed) <= 0) {
              break;
            }
          }
          v16[3] = v17;
          v16[1] = v15;
          v16[2] = v2;
          if (!v14) {
            unint64_t v14 = (unint64_t)v16;
          }
          uint64_t v2 = (uint64_t)v16;
          if (!--v13)
          {
            int v12 = *(_DWORD *)(a1 + 44);
            uint64_t v2 = (uint64_t)v20;
            signed int v13 = v19;
            goto LABEL_34;
          }
        }
        qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
        __break(1u);
      }
      *(void *)(v4 + 104) = v16;
      StatusReg[122] = 0;
      _dispatch_root_queue_poke_and_wakeup((unsigned int *)v4, v13, 0);
LABEL_36:
      _dispatch_apply_invoke_and_wait(a1);
      for (; v3 != v4; uint64_t v3 = *(void *)(v3 + 24))
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 56), 0xFFFFFE0000000000 * v2, memory_order_relaxed);
      return;
    }
  }

  _dispatch_apply_serial(a1);
}

void _dispatch_apply_invoke_and_wait(uint64_t a1)
{
  uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 52), 1u, memory_order_relaxed);
  uint64_t context = a1;
  long long v15 = xmmword_18A97E3D0;
  _dispatch_apply_set_attr_behavior(*(void *)(a1 + 56));
  uint64_t v3 = (dispatch_once_t *)(*(void *)(a1 + 32) + 8 * add_explicit);
  if (*v3 != -1) {
    dispatch_once_f(v3, &context, (dispatch_function_t)_dispatch_apply_invoke3);
  }
  _dispatch_apply_clear_attr_behavior(*(void *)(a1 + 56));
  int v4 = *(_DWORD *)(a1 + 48);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 8 * add_explicit;
    do
    {
      if (v7 != v5)
      {
        BOOL v8 = (dispatch_once_t *)(*(void *)(a1 + 32) + v5);
        if (*v8 != -1) {
          dispatch_once_f(v8, 0, (dispatch_function_t)_dispatch_no_op);
        }
        int v4 = *(_DWORD *)(a1 + 48);
      }
      ++v6;
      v5 += 8;
    }
    while (v6 < v4);
  }
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 44), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    if (v9) {
      free(v9);
    }
    uint64_t v10 = *(_OWORD **)(a1 + 56);
    if (v10)
    {
      v10[2] = 0u;
      v10[3] = 0u;
      *uint64_t v10 = 0u;
      v10[1] = 0u;
      free(*(void **)(a1 + 56));
    }
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v12 = *(void *)(StatusReg + 176);
    if (v12) {
      int v13 = *(_DWORD *)(v12 + 8) + 1;
    }
    else {
      int v13 = 1;
    }
    if (v13 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit(a1);
    }
    else
    {
      *(void *)(a1 + 16) = v12;
      *(_DWORD *)(a1 + 8) = v13;
      *(void *)(StatusReg + 176) = a1;
    }
  }
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  uint64_t v6 = (*((uint64_t (**)(dispatch_source_type_t, uintptr_t, uintptr_t))type + 4))(type, handle, mask);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = _dispatch_object_alloc(OS_dispatch_source, 120);
  uint64_t v9 = v8;
  char v10 = *(unsigned char *)(*(void *)v7 + 10);
  *(_DWORD *)(v8 + 8) += 2;
  if (*(unsigned char *)(*(void *)v8 + 40) == 19) {
    ++*(_DWORD *)(v8 + 8);
  }
  *(void *)(v8 + 16) = -1985229329;
  if ((v10 & 2) != 0) {
    int v11 = 67108865;
  }
  else {
    int v11 = 4194305;
  }
  *(_DWORD *)(v8 + 8pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0) = v11;
  *(void *)(v8 + 56) = 0x19FFE0000000000;
  *(void *)(v8 + 64) = atomic_fetch_add_explicit(&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(void *)(v8 + 72) = "source";
  *(void *)(v8 + 88) = v7;
  *(void *)(v7 + 8) = ~v8;
  if (queue)
  {
    if ((HIBYTE(queue[10].isa) & 8) != 0 && (*(unsigned char *)(v7 + 29) & 2) == 0) {
      dispatch_source_create_cold_2(v8);
    }
    if (LODWORD(queue[1].isa) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
  }
  else
  {
    queue = (dispatch_queue_t)&off_1EB1CE800;
  }
  *(void *)(v8 + 24) = queue;
  if ((*(unsigned char *)(v7 + 29) & 2) != 0 && (*(unsigned char *)(v7 + 30) & 0x10) != 0) {
    dispatch_source_set_timer((dispatch_source_t)v8, 0, handle, 0xFFFFFFFFFFFFFFFFLL);
  }
  return v9;
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  Class isa = source[11].isa;
  if ((*((unsigned char *)isa + 29) & 2) == 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempt to set timer on a non-timer source";
    qword_1E91199F0 = (uint64_t)source;
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v5 = leeway;
  int64_t v6 = start;
  char v11 = *((unsigned char *)isa + 30);
  if ((v11 & 0x10) == 0)
  {
    int v4 = _dispatch_calloc(1uLL, 0x20uLL);
    if (interval)
    {
      if (interval >= 0x7FFFFFFFFFFFFFFFLL) {
        interval = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v6 != -1)
      {
LABEL_9:
        switch(v6)
        {
          case -9223372036854775808:
            int v13 = 1;
            uint64_t v12 = mach_continuous_time();
            goto LABEL_56;
          case -2:
            uint64_t v12 = clock_gettime_nsec_np(_CLOCK_REALTIME);
            int v13 = 2;
            goto LABEL_67;
          case 0:
            uint64_t v12 = mach_absolute_time();
            int v13 = 0;
LABEL_56:
            if (!_dispatch_host_time_nano2mach)
            {
              if (interval > 0x7FFFFFFFFFFFFFFELL)
              {
                interval = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v26 = (3 * interval * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
                uint64_t v27 = (v26 + ((3 * interval - v26) >> 1)) >> 6;
                if (interval > 0x5555555555555554) {
                  uint64_t v27 = 3 * (interval / 0x7D);
                }
                if (v27 <= 1) {
                  interval = 1;
                }
                else {
                  interval = v27;
                }
              }
              goto LABEL_63;
            }
            uint64_t v33 = v12;
            uint64_t v34 = _dispatch_host_time_nano2mach(interval);
            if (v34 <= 1) {
              interval = 1;
            }
            else {
              interval = v34;
            }
            if (!_dispatch_host_time_nano2mach)
            {
              uint64_t v12 = v33;
LABEL_63:
              if (v5)
              {
                if (v5 > 0x7FFFFFFFFFFFFFFELL)
                {
                  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else if (v5 > 0x5555555555555554)
                {
                  uint64_t v5 = 3 * (v5 / 0x7D);
                }
                else
                {
                  uint64_t v28 = (3 * v5 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
                  uint64_t v5 = (v28 + ((3 * v5 - v28) >> 1)) >> 6;
                }
              }
              goto LABEL_67;
            }
            uint64_t v5 = _dispatch_host_time_nano2mach(v5);
            uint64_t v12 = v33;
LABEL_67:
            uint64_t v29 = interval >> 1;
            if (v5 < interval >> 1) {
              uint64_t v29 = v5;
            }
            if (interval >= 0x7FFFFFFFFFFFFFFFLL) {
              uint64_t v29 = v5;
            }
            v4[6] = v13;
            unint64_t v30 = v29 + v12;
            if (v30 >= 0x7FFFFFFFFFFFFFFFLL) {
              unint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
            }
            *(void *)int v4 = v12;
            *((void *)v4 + _dispatch_apply_with_attr_f(iterations, 0, (__objc2_class **)queue, (uint64_t)context, (uint64_t)work, 1) = v30;
            *((void *)v4 + 2) = interval;
            goto LABEL_74;
        }
        unint64_t v23 = v6 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v6 & 0x4000000000000000) != 0) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        if ((v6 & 0x4000000000000000) != 0) {
          unint64_t v23 = -v6;
        }
        if (v6 < 0) {
          int v13 = v24;
        }
        else {
          int v13 = 0;
        }
        if (v6 >= 0) {
          unint64_t v23 = v6;
        }
        if (v23 >> 62) {
          uint64_t v12 = -1;
        }
        else {
          uint64_t v12 = v23;
        }
LABEL_55:
        if (v13 == 2) {
          goto LABEL_67;
        }
        goto LABEL_56;
      }
      goto LABEL_54;
    }
LABEL_50:
    if (v6 != -1)
    {
      _dispatch_bug_deprecated("Setting timer interval to 0 requests a 1ns timer, did you mean FOREVER (a one-shot timer)?");
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      }
      interval = 1;
      goto LABEL_9;
    }
    if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    interval = 1;
LABEL_54:
    int v13 = (*((unsigned __int8 *)isa + 30) >> 2) & 3;
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_55;
  }
  unint64_t v14 = (unint64_t)_dispatch_calloc(1uLL, 0x20uLL);
  int v4 = (_DWORD *)v14;
  *(_DWORD *)(v14 + 24) = 0;
  if (!v6)
  {
    if (interval)
    {
      uint64_t v16 = 16666666;
      uint64_t v17 = 1892160075;
      if ((v11 & 0x20) == 0)
      {
        uint64_t v17 = 31536000000;
        uint64_t v16 = 1000000;
      }
      uint64_t v18 = v16 * interval;
      if (v17 >= interval) {
        unint64_t v14 = v18;
      }
      else {
        unint64_t v14 = 31536000000000000;
      }
      uint64_t v7 = &_dispatch_host_time_nano2mach;
      long long v15 = _dispatch_host_time_nano2mach;
      if (!_dispatch_host_time_nano2mach)
      {
        if (v14 > 0x7FFFFFFFFFFFFFFELL)
        {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v14 > 0x5555555555555554)
        {
          unint64_t v20 = 3 * (v14 / 0x7D);
        }
        else
        {
          uint64_t v19 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
          unint64_t v20 = (v19 + ((3 * v14 - v19) >> 1)) >> 6;
        }
        goto LABEL_26;
      }
    }
    else
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Setting interval to 0";
      __break(1u);
    }
    unint64_t v20 = v15(v14);
LABEL_26:
    uint64_t v21 = mach_absolute_time();
    if (v5 > 0x3E8)
    {
      if (v5 != -1)
      {
LABEL_100:
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Passing an invalid leeway";
        __break(1u);
        return;
      }
      if ((v11 & 0x20) != 0)
      {
        if (*v7) {
          uint64_t v22 = (*v7)(16666666);
        }
        else {
          uint64_t v22 = 399999;
        }
      }
      else
      {
        uint64_t v22 = v20 >> 1;
      }
    }
    else
    {
      uint64_t v22 = v20 * v5 / 0x3E8;
    }
    int v13 = 0;
    uint64_t v25 = (v21 + v20) / v20 * v20;
    v4[6] = 0;
    *(void *)int v4 = v25;
    *((void *)v4 + _dispatch_apply_with_attr_f(iterations, 0, (__objc2_class **)queue, (uint64_t)context, (uint64_t)work, 1) = v22 + v25;
    *((void *)v4 + 2) = v20;
    goto LABEL_74;
  }
  if (v6 != -1)
  {
LABEL_99:
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Start value is not DISPATCH_TIME_NOW or DISPATCH_TIME_FOREVER";
    __break(1u);
    goto LABEL_100;
  }
  int v13 = 0;
  *(void *)(v14 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)unint64_t v14 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
LABEL_74:
  if (v13 != ((*((unsigned __int8 *)isa + 30) >> 2) & 3) && *((unsigned __int8 *)isa + 28) == 236)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempting to modify timer clock";
    __break(1u);
    goto LABEL_99;
  }
  unint64_t v31 = (void *)atomic_exchange_explicit((atomic_ullong *volatile)isa + 13, (unint64_t)v4, memory_order_release);
  if (v31) {
    free(v31);
  }
  int v32 = (void (*)(dispatch_source_t, void, uint64_t))*((void *)source->isa + 10);

  v32(source, 0, 2);
}

uint64_t _dispatch_source_is_timer(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 88) + 29) >> 1) & 1;
}

void _dispatch_source_dispose(uint64_t *a1, char *a2)
{
  __swp(a1, (unsigned int *)(a1[11] + 56));
  if (a1) {
    _dispatch_source_handler_dispose((uint64_t)a1, a2);
  }
  __swp(a1, (unsigned int *)(a1[11] + 40));
  if (a1) {
    _dispatch_source_handler_dispose((uint64_t)a1, a2);
  }
  __swp(a1, (unsigned int *)(a1[11] + 48));
  if (a1) {
    _dispatch_source_handler_dispose((uint64_t)a1, a2);
  }
  _dispatch_unote_dispose(a1[11]);
  a1[11] = 0;

  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t _dispatch_source_xref_dispose(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x14000000) == 0x4000000 && *(void *)(*(void *)(a1 + 88) + 48)) {
    _dispatch_source_xref_dispose_cold_1(*(_DWORD *)(a1 + 80));
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 80);

  return v1();
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return ((unint64_t)LODWORD(source[10].isa) >> 28) & 1;
}

uintptr_t dispatch_source_get_mask(dispatch_source_t source)
{
  Class isa = source[11].isa;
  if (((uint64_t)source[10].isa & 0x10000000) != 0) {
    return 0;
  }
  if ((*((unsigned char *)isa + 29) & 0x10) != 0) {
    return 0x80000000;
  }
  if ((*((unsigned char *)isa + 29) & 2) != 0) {
    return *((unsigned __int8 *)isa + 30);
  }
  return *((unsigned int *)isa + 8);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  Class isa = source[11].isa;
  if (*((unsigned __int8 *)isa + 28) == 236
    && (unint64_t v2 = ((unint64_t)*((unsigned __int8 *)isa + 30) >> 2) & 3, v2 != 3))
  {
    return v2 + 1;
  }
  else
  {
    return *((unsigned int *)isa + 6);
  }
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  Class isa = source[11].isa;
  char v2 = *((unsigned char *)isa + 29);
  if ((v2 & 0x10) != 0) {
    return 0x80000000;
  }
  uintptr_t v3 = *((void *)isa + 8);
  if ((v2 & 4) != 0) {
    return v3;
  }
  else {
    return v3;
  }
}

uint64_t dispatch_source_get_extended_data(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if ((*(unsigned char *)(v4 + 29) & 4) != 0)
    {
      unint64_t v7 = *(void *)(v4 + 64);
      uint64_t v6 = v7;
      uint64_t v5 = HIDWORD(v7);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = (*(unsigned char *)(v4 + 29) & 0x10) != 0 ? 0x80000000 : *(void *)(v4 + 64);
    }
    if (a3 >= 8)
    {
      *a2 = v6;
      if (a3 >= 0x10)
      {
        a2[1] = v5;
        if (a3 != 16) {
          bzero(a2 + 2, a3 - 16);
        }
      }
    }
  }
  if (a3 >= 0x10) {
    return 16;
  }
  else {
    return a3;
  }
}

void dispatch_source_merge_data(dispatch_source_t source, uintptr_t value)
{
  if (((uint64_t)source[10].isa & 0x10800000) == 0)
  {
    Class isa = source[11].isa;
    int v3 = *((char *)isa + 28);
    switch(v3)
    {
      case -23:
        *((void *)isa + 9) = value;
        break;
      case -22:
        atomic_fetch_or_explicit((atomic_ullong *volatile)isa + 9, value, memory_order_relaxed);
        break;
      case -21:
        atomic_fetch_add_explicit((atomic_ullong *volatile)isa + 9, value, memory_order_relaxed);
        break;
      default:
        dispatch_source_merge_data_cold_1(v3);
    }
    uint64_t v4 = (void (*)(void))*((void *)source->isa + 10);
    v4();
  }
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

atomic_ullong *_dispatch_source_set_handler(uint64_t a1, uint64_t (**aBlock)(), uint64_t a3, int a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = *(uint64_t **)(StatusReg + 176);
  if (!v9)
  {
    uint64_t v9 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    if (aBlock) {
      goto LABEL_3;
    }
LABEL_15:
    *uint64_t v9 = 256;
    void v9[4] = 0;
    goto LABEL_16;
  }
  *(void *)(StatusReg + 176) = v9[2];
  if (!aBlock) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v10 = 4 * (a3 != 0);
  if (a4)
  {
    char v11 = _dispatch_Block_copy(aBlock);
    uint64_t v12 = v10 | 0x110;
    int v13 = aBlock[2];
    if (v13)
    {
      unint64_t v14 = (void (*)(void (**)(void)))aBlock[2];
      if (_dispatch_block_special_invoke == v13) {
        goto LABEL_44;
      }
    }
    else
    {
      if (!_dispatch_block_special_invoke)
      {
LABEL_44:
        *uint64_t v9 = v12;
        v9[5] = (uint64_t)v11;
        _dispatch_continuation_init_slow(v9, (atomic_uint *)a1, 1073741888);
        goto LABEL_16;
      }
      unint64_t v14 = 0;
    }
    if (a3) {
      unint64_t v14 = _dispatch_call_block_and_release;
    }
    void v9[4] = (uint64_t)v14;
    v9[5] = (uint64_t)v11;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v12 = v10 | 0x140;
    void v9[4] = (uint64_t)aBlock;
    v9[5] = v15;
  }
  v9[3] = 0;
  *uint64_t v9 = v12;
  v9[1] = 0;
LABEL_16:
  uint64_t v16 = *(void *)(a1 + 56);
  while ((~v16 & 0x180000000000000) == 0)
  {
    uint64_t v17 = v16;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v16, v16 + 0x400000000000000, memory_order_relaxed, memory_order_relaxed);
    if (v16 == v17)
    {
      if ((v17 & 0x200000000000000) != 0)
      {
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling d"
                                   "ispatch_set_target_queue() or dispatch_set_*_handler()";
        __break(1u);
      }
      else
      {
        if (v9[4])
        {
          if ((*(unsigned char *)v9 & 0x40) != 0) {
            v9[5] = *(void *)(a1 + 32);
          }
          goto LABEL_29;
        }
        uint64_t v18 = *(void *)(StatusReg + 176);
        if (v18) {
          int v19 = *(_DWORD *)(v18 + 8) + 1;
        }
        else {
          int v19 = 1;
        }
        if (v19 <= _dispatch_continuation_cache_limit)
        {
          v9[2] = v18;
          *((_DWORD *)v9 + 2) = v19;
          *(void *)(StatusReg + 176) = v9;
LABEL_28:
          uint64_t v9 = 0;
LABEL_29:
          uint64_t v20 = atomic_exchange_explicit((atomic_ullong *volatile)(*(void *)(a1 + 88) + 8 * a3 + 40), (unint64_t)v9, memory_order_release);
          if (v20) {
            _dispatch_source_handler_dispose(v20, (const char *)aBlock);
          }
          return (atomic_ullong *)_dispatch_lane_resume(a1, 0);
        }
      }
      _dispatch_continuation_free_to_cache_limit((uint64_t)v9);
      goto LABEL_28;
    }
  }
  int v22 = *(_DWORD *)(a1 + 80);
  if ((v22 & 0x4000000) != 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change a handler of this source after it has been activated";
    qword_1E91199F0 = a3;
    __break(1u);
    goto LABEL_50;
  }
  if ((v22 & 0x10000000) == 0)
  {
    if (!MEMORY[0xFFFFFC100])
    {
LABEL_37:
      if (a3 == 2 || !aBlock)
      {
        if (a3 == 2) {
          unint64_t v23 = "Setting registration handler after the source has been activated";
        }
        else {
          unint64_t v23 = "Clearing handler after the source has been activated";
        }
        _dispatch_bug_deprecated(v23);
      }
      goto LABEL_39;
    }
LABEL_50:
    kdebug_trace();
    goto LABEL_37;
  }
LABEL_39:
  v9[6] = a3;

  return _dispatch_barrier_trysync_or_async_f((atomic_ullong *)a1, (uint64_t)v9, (uint64_t (*)(void))_dispatch_source_set_handler_slow, 0);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

atomic_ullong *dispatch_source_set_mandatory_cancel_handler(uint64_t a1, uint64_t (**a2)())
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  do
  {
    unsigned int v3 = v2 & 0xFBBFFFFF | 0x4000000;
    if (v3 == v2) {
      break;
    }
    uint64_t v4 = v2;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v4, v3, memory_order_relaxed, memory_order_relaxed);
    BOOL v5 = v4 == v2;
    uint64_t v2 = v4;
  }
  while (!v5);
  return _dispatch_source_set_handler(a1, a2, 1, 1);
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

atomic_ullong *dispatch_source_set_mandatory_cancel_handler_f(uint64_t a1, uint64_t (**a2)())
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  do
  {
    unsigned int v3 = v2 & 0xFBBFFFFF | 0x4000000;
    if (v3 == v2) {
      break;
    }
    uint64_t v4 = v2;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v4, v3, memory_order_relaxed, memory_order_relaxed);
    BOOL v5 = v4 == v2;
    uint64_t v2 = v4;
  }
  while (!v5);
  return _dispatch_source_set_handler(a1, a2, 1, 0);
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_registration_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

BOOL _dispatch_source_will_reenable_kevent_4NW(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (((v1 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) != 0) {
    _dispatch_source_will_reenable_kevent_4NW_cold_1();
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 88) + 16);
  return (v2 & 3) == 0 && v2 != 0;
}

atomic_uint *_dispatch_source_activate(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v12 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 40);
    if (!v4)
    {
      _dispatch_bug_deprecated("dispatch source activated with no event handler set");
LABEL_17:
      double result = (atomic_uint *)_dispatch_lane_activate(a1);
      if ((*(unsigned char *)(v3 + 29) & 3) != 0 && (*(_WORD *)(a1 + 116) & 1) == 0)
      {
        double result = (atomic_uint *)_dispatch_queue_compute_priority_and_wlh(a1, (uint64_t *)&v12);
        if (result)
        {
          unsigned int v10 = result;
          uint64_t v11 = (uint64_t)v12;
          if (v12 != (void *)-4
            && v12
            && *(unsigned char *)(*v12 + 40) == 18
            && *(unsigned __int8 *)(v3 + 28) == 236
            && *(_DWORD *)(v3 + 24) <= 5u)
          {
            if (!v12[6])
            {
              *(void *)(v11 + 48) = _dispatch_calloc(6uLL, 0x20uLL);
              uint64_t v11 = (uint64_t)v12;
            }
            *(unsigned char *)(v3 + 29) |= 1u;
            if (v11 != -4
              && v11
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 96), 1u, memory_order_relaxed) & 0x80000000) != 0)
            {
              dispatch_set_target_queue_cold_2();
            }
            *(void *)(v3 + 16) = v11;
          }
          return (atomic_uint *)_dispatch_source_install(a1, v11, v10);
        }
      }
      return result;
    }
    unint64_t v5 = *v4;
    if ((unint64_t)*v4 < 0x1000)
    {
      if ((v5 & 2) == 0) {
        goto LABEL_9;
      }
    }
    else if ((*(void *)(v5 + 40) & 0xF0) != 0x10 || (v4[10] & 0x80000) == 0)
    {
      goto LABEL_9;
    }
    atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x80000u, memory_order_relaxed);
LABEL_9:
    uint64_t v6 = v4[1];
    if ((v6 & 0x10000000) != 0 || (int v7 = *(_DWORD *)(a1 + 84), (v7 & 0x20000000) != 0) || (v7 & 0x44000FFF) == 0)
    {
      unsigned int v8 = (__clz(__rbit32((v6 >> 8) & 0x3FFF)) << 8) + 256;
      if (((v6 >> 8) & 0x3FFF) == 0) {
        unsigned int v8 = 0;
      }
      *(_DWORD *)(a1 + 84) = v8 & 0xFFFFFF00 | v4[1];
    }
    if ((*(unsigned char *)v4 & 0x40) != 0) {
      v4[5] = *(void *)(a1 + 32);
    }
    goto LABEL_17;
  }
  *(_WORD *)(a1 + 116) |= 1u;

  return _dispatch_source_refs_finalize_unregistration((atomic_uint *)a1, a2);
}

atomic_uint *_dispatch_source_refs_finalize_unregistration(atomic_uint *a1, const char *a2)
{
  atomic_uint v5 = a1[20];
  double result = a1 + 20;
  atomic_uint v4 = v5;
  do
  {
    unsigned int v6 = v4;
    unsigned int v7 = v4 & 0x1FFFFFFF | 0x80000000;
    if (v7 == v4) {
      break;
    }
    atomic_compare_exchange_strong_explicit(result, (unsigned int *)&v4, v7, memory_order_relaxed, memory_order_relaxed);
  }
  while (v4 != v6);
  if ((v6 & 0x80000000) != 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Source finalized twice";
    qword_1E91199F0 = v6;
    __break(1u);
  }
  else
  {
    if ((v6 & 0x20000000) != 0) {
      _dispatch_wake_by_address();
    }
    return (atomic_uint *)_os_object_release_internal(a1, a2);
  }
  return result;
}

uint64_t _dispatch_source_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(a1 + 88);
  *(_WORD *)(a1 + 116) |= 1u;
  uint64_t result = _dispatch_unote_register(v4, a2, a3);
  if ((result & 1) == 0)
  {
    return (uint64_t)_dispatch_source_refs_finalize_unregistration((atomic_uint *)a1, v6);
  }
  return result;
}

void _dispatch_source_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v76 = 0;
  if ((a3 & 3) == 0) {
    *(void *)(a1 + 16) = -1985229329;
  }
  if ((a3 & 2) != 0)
  {
    uint64_t v76 = 0x40020000000001;
    int v6 = a3 & 0x40000;
  }
  else
  {
    unint64_t v51 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v53 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
    int v6 = a3 & 0x40000;
    unint64_t v54 = 0xFFE00000FFFFFFFCLL;
    if ((a3 & 0x40000) != 0)
    {
      uint64_t v55 = 0x4000000000;
    }
    else
    {
      unint64_t v54 = 0xFFE00040FFFFFFFCLL;
      uint64_t v55 = 1;
    }
    if (a3) {
      unint64_t v56 = 0xFFE00040FFFFFFFCLL;
    }
    else {
      unint64_t v56 = v54;
    }
    unsigned int v57 = *(_DWORD *)(StatusReg + 200);
    unsigned int v58 = (v57 >> 8) & 0xF;
    unsigned int v59 = (unsigned __int16)v57 >> 12;
    unsigned int v60 = HIWORD(v57) & 0xF;
    if (v58 <= v59) {
      unsigned int v58 = v59;
    }
    if (v58 > v60) {
      unsigned int v60 = v58;
    }
LABEL_157:
    for (unint64_t i = *(void *)(a1 + 56); ; unint64_t i = v66)
    {
      while ((i & v56) != 0)
      {
        if ((a3 & 1) != 0
          || (unint64_t v67 = i,
              atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v67, i ^ v55, memory_order_acquire, memory_order_acquire), v67 == i))
        {
          uint64_t v76 = 0;
          goto LABEL_176;
        }
        unint64_t i = v67;
      }
      if ((i & 0x1000000000) != 0)
      {
        uint64_t v62 = HIDWORD(i) & 7;
        if (v62 > v60)
        {
          _pthread_workqueue_override_start_direct();
          unsigned int v68 = *(_DWORD *)(StatusReg + 200);
          unsigned int v60 = v62;
          if ((HIWORD(v68) & 0xF) < v62)
          {
            *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v68 & 0xFFF0FFFF | (v62 << 16);
            unsigned int v60 = v62;
          }
          goto LABEL_157;
        }
      }
      uint64_t v63 = (i >> 40) & 1;
      if (!((v51 + i) >> 53)) {
        LODWORD(v63) = 1;
      }
      uint64_t v64 = v63 ? 0x60000000000000 : 0x20000000000000;
      unint64_t v65 = v53 | i & 0x7700000001 | v64;
      unint64_t v66 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v66, v65, memory_order_acquire, memory_order_acquire);
      if (v66 == i) {
        break;
      }
    }
    uint64_t v69 = 0x60000000000000;
    if ((a3 & 1) == 0) {
      uint64_t v69 = v55 | 0x60000000000000;
    }
    uint64_t v76 = (v65 & v69) - (i & 0x3FFE0000000000);
    uint64_t v4 = a2;
    if (!v76) {
      goto LABEL_176;
    }
  }
  if (v6)
  {
    uint64_t v72 = 0;
    goto LABEL_21;
  }
  int v7 = *(_DWORD *)(a1 + 84);
  unint64_t v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = *(void *)(v8 + 200);
  if (v9)
  {
    unsigned int v10 = (unsigned __int16)v7 >> 12;
    unsigned int v11 = v7 & 0xFFF;
    if ((v7 & 0xFFF) != 0)
    {
      if (((unsigned __int16)v9 & 0xFFFu) > v11) {
        unsigned int v11 = v9 & 0xFFF;
      }
      if (v10 <= v11 >> 8) {
        int v12 = 0x40000000;
      }
      else {
        int v12 = 1140912128;
      }
      int v13 = v12 & v7;
      unsigned int v14 = v9 & 0x880F0000 | v11;
    }
    else
    {
      unsigned int v15 = v9 | 0x40000000;
      if ((v9 & 0xFFF) == 0) {
        unsigned int v15 = *(void *)(v8 + 200);
      }
      if (v10 <= ((v15 >> 8) & 0xF)) {
        goto LABEL_20;
      }
      unsigned int v14 = v15 & 0xFFFF0FFF;
      int v13 = v7 & 0x400F000;
    }
    unsigned int v15 = v14 | v13;
  }
  else
  {
    unsigned int v15 = v7 & 0xFFF0FFFF;
  }
LABEL_20:
  *(void *)(v8 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v15;
  uint64_t v72 = v9 & 0xFFF0FFFF;
LABEL_21:
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0) {
    atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  }
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0) {
    unsigned int v16 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  }
  else {
    unsigned int v16 = a3 | 8;
  }
  int v17 = v16 & 0x1000002;
  unint64_t v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    if (v17 == 2) {
      _dispatch_last_resort_autorelease_pool_push(v4);
    }
    uint64_t v19 = *(void *)(v18 + 160);
    unint64_t v73 = (uint64_t *)(v18 + 160);
    uint64_t v20 = *(void *)(a1 + 88);
    if ((v16 & 0x40000) == 0)
    {
      uint64_t v21 = *(void *)(v18 + 232);
      uint64_t v22 = v21 ? *(void *)(v21 + 24) : -4;
      unint64_t v23 = *(void *)(v20 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v24 = v23 == -4 || v23 == 0;
      if (!v24 && v22 != v23) {
        _dispatch_source_handle_wlh_change(a1);
      }
    }
    if (*(void *)(a1 + 48))
    {
      _dispatch_lane_serial_drain(a1, v4, v16 | 0x4000000, &v76);
      uint64_t v27 = v26;
      unsigned int v28 = v16 & 0xFBFFFFFF;
    }
    else
    {
      uint64_t v27 = 0;
      unsigned int v28 = v16;
    }
    uint64_t v29 = &_dispatch_mgr_q;
    if (*(unsigned char *)(v20 + 29)) {
      uint64_t v29 = *(__objc2_class ***)(a1 + 24);
    }
    if ((*(_WORD *)(a1 + 116) & 1) == 0)
    {
      if ((__objc2_class **)v19 != v29)
      {
LABEL_49:
        uint64_t v27 = (uint64_t)v29;
        goto LABEL_92;
      }
      if ((v28 & 0x10000) != 0) {
        unsigned int v30 = *(_DWORD *)(v18 + 200);
      }
      else {
        unsigned int v30 = 0x2000000;
      }
      uint64_t v31 = *(void *)(v18 + 232);
      if (v31) {
        uint64_t v32 = *(void *)(v31 + 24);
      }
      else {
        uint64_t v32 = -4;
      }
      _dispatch_source_install(a1, v32, v30);
    }
    if (*(void *)(a1 + 56) >> 55)
    {
LABEL_130:
      uint64_t v27 = *(void *)(a1 + 24);
      goto LABEL_92;
    }
    if ((*(unsigned char *)(v20 + 29) & 2) != 0 && *(void *)(v20 + 104) && (*(_DWORD *)(a1 + 80) & 0x10800000) == 0)
    {
      if ((__objc2_class **)v19 != v29) {
        goto LABEL_49;
      }
      _dispatch_timer_unote_configure(*(unsigned int **)(a1 + 88));
    }
    if (*(void *)(v20 + 56))
    {
      uint64_t v33 = v27;
      uint64_t v27 = *(void *)(a1 + 24);
      if (v19 != v27) {
        goto LABEL_92;
      }
      _dispatch_source_registration_callout(a1, (const char *)v19, v28);
      uint64_t v27 = v33;
    }
    if ((*(void *)(v20 + 16) & 2) != 0) {
      _dispatch_source_refs_unregister(a1, 5);
    }
    int v34 = *(_DWORD *)(a1 + 80);
    int v35 = v34 & 0x10800000;
    if ((v34 & 0x10800000) != 0)
    {
      BOOL v36 = 0;
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_76;
    }
    if (*(void *)(v20 + 72))
    {
      uint64_t v71 = v27;
      uint64_t v27 = *(void *)(a1 + 24);
      if (v19 != v27) {
        goto LABEL_92;
      }
      _dispatch_source_latch_and_call(a1, v19, v28);
      int v34 = *(_DWORD *)(a1 + 80);
      if ((v34 & 0x90000000) != 0)
      {
        BOOL v36 = 0;
        uint64_t v27 = v71;
      }
      else
      {
        uint64_t v27 = v71;
        if (*(void *)(v19 + 24)) {
          BOOL v36 = 1;
        }
        else {
          BOOL v36 = *(_DWORD *)(v19 + 84) >= 0;
        }
      }
      *(_WORD *)(a1 + 116) |= 2u;
      int v35 = v34 & 0x10800000;
      if ((v34 & 0x80000000) == 0)
      {
LABEL_67:
        if (v35)
        {
          if ((*(unsigned char *)(v20 + 29) & 2) == 0 || (*(void *)(v20 + 16)) && (__objc2_class **)v19 != v29) {
            goto LABEL_49;
          }
          if ((v34 & 0x40000000) != 0) {
            char v37 = 1;
          }
          else {
            char v37 = 3;
          }
          _dispatch_source_refs_unregister(a1, v37);
          int v34 = *(_DWORD *)(a1 + 80);
          if ((v34 & 0x80000000) == 0)
          {
            if (!v27) {
              uint64_t v27 = -1;
            }
            goto LABEL_92;
          }
          int v35 = v34 & 0x10800000;
        }
      }
LABEL_76:
      if (v34 < 0 && v35)
      {
        if (v19 != *(void *)(a1 + 24) && (*(void *)(v20 + 40) || *(void *)(v20 + 48) || *(void *)(v20 + 56)))
        {
          BOOL v36 = 0;
          uint64_t v27 = *(void *)(a1 + 24);
        }
        else
        {
          _dispatch_source_cancel_callout(a1, (const char *)v19, v28);
          BOOL v36 = 0;
          int v34 = *(_DWORD *)(a1 + 80);
        }
      }
      goto LABEL_91;
    }
    BOOL v36 = 0;
LABEL_91:
    if ((v34 & 0x10800000) == 0)
    {
      if ((*(unsigned char *)(v20 + 29) & 2) != 0)
      {
        if (!*(void *)(v20 + 104))
        {
          uint64_t v47 = *(void *)(v20 + 16);
          if (!v47 || (v47 & 3) != 0 || *(void *)(v20 + 80) > 0x7FFFFFFFFFFFFFFEuLL) {
            goto LABEL_92;
          }
        }
      }
      else
      {
        uint64_t v43 = *(void *)(v20 + 16);
        if (!v43 || (v43 & 3) != 0) {
          goto LABEL_92;
        }
      }
      uint64_t v44 = v27;
      uint64_t v27 = (uint64_t)v29;
      if ((__objc2_class **)v19 == v29)
      {
        if (!(*(void *)(a1 + 56) >> 55))
        {
          uint64_t v27 = v44;
          if ((*(unsigned char *)(v20 + 29) & 1) == 0 || (~*(void *)(v20 + 16) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            _dispatch_unote_resume((void *)v20);
            if (!v36)
            {
              if (*(void *)(v18 + 40))
              {
                uint64_t v45 = *(void *)(v18 + 232);
                if (v45)
                {
                  uint64_t v46 = *(void *)(v45 + 24);
                  if (v46 != -4 && v46 == (*(void *)(v20 + 16) & 0xFFFFFFFFFFFFFFFCLL)) {
                    _dispatch_event_loop_drain(1);
                  }
                }
              }
            }
            goto LABEL_92;
          }
          __int16 v48 = *(_WORD *)(a1 + 116);
          if ((v48 & 2) != 0)
          {
            *(_WORD *)(a1 + 116) = v48 & 0xFFFD;
            _dispatch_unote_resume((void *)v20);
          }
          if (!v36) {
            goto LABEL_92;
          }
        }
        goto LABEL_130;
      }
    }
LABEL_92:
    int v17 = v16 & 0x1000002;
    uint64_t v4 = a2;
    if ((v16 & 0x1000002) == 2)
    {
      long long v75 = *(_OWORD *)v73;
      *(void *)(v18 + 16_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a1;
      *(void *)(v18 + 168) = &v75;
      _dispatch_last_resort_autorelease_pool_pop(a2);
      *(_OWORD *)unint64_t v73 = v75;
    }
    if ((unint64_t)(v27 + 1) > 1) {
      break;
    }
    uint64_t v38 = v76;
    unint64_t v39 = *(void *)(a1 + 56);
    while (1)
    {
      unint64_t v40 = v39;
      unint64_t v41 = v39 - v38;
      unint64_t v42 = v41 & 0xFFFFFFF700000001;
      if (!(v40 >> 55)) {
        break;
      }
LABEL_100:
      unint64_t v39 = v40;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v39, v42, memory_order_release, memory_order_relaxed);
      if (v39 == v40)
      {
        if ((~v40 & 0x1800000000) == 0)
        {
          uint64_t v49 = HIDWORD(v40) & 7;
          unsigned int v50 = *(_DWORD *)(v18 + 200);
          if ((HIWORD(v50) & 0xF) < v49) {
            *(void *)(v18 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v50 & 0xFFF0FFFF | (v49 << 16);
          }
        }
        uint64_t v27 = 0;
        uint64_t v76 = 0;
        goto LABEL_142;
      }
    }
    if ((v40 & 0x8000000000) == 0)
    {
      if (v27) {
        unint64_t v42 = v41 & 0xFFFFFF7700000001 | 0x8000000000;
      }
      else {
        unint64_t v42 = v41 & 0xFFFFFFF000000001;
      }
      goto LABEL_100;
    }
    atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
    uint64_t v27 = *v73;
    if ((a3 & 1) != 0 || (*(void *)(*(void *)*v73 + 40) & 0x10000) != 0) {
      continue;
    }
    break;
  }
LABEL_142:
  if ((v16 & 0x40000) == 0) {
    *(void *)(v18 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(v18 + 200) & 0xF0000 | v72;
  }
  if (!v27)
  {
LABEL_176:
    _os_object_release_internal_n((void *)a1, (const char *)2);
    if ((a3 & 0x100000) != 0) {
      goto LABEL_177;
    }
    return;
  }
  _dispatch_queue_invoke_finish((atomic_ullong *)a1, a2, (__objc2_class **)v27, v76);
  if ((a3 & 0x100000) == 0) {
    return;
  }
LABEL_177:
  uint64_t v70 = *(void *)(*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) + 48);
  if (v70)
  {
    if (*(unsigned char *)(v70 + 6)) {
      _dispatch_event_loop_drain_timers(v70, 6u);
    }
  }
}

void _dispatch_source_wakeup(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 88);
  int v4 = *(_DWORD *)(a1 + 80);
  char v5 = *(unsigned char *)(v3 + 29);
  if ((*(_WORD *)(a1 + 116) & 1) == 0) {
    goto LABEL_2;
  }
  if ((v4 & 0x10800000) != 0)
  {
    if (*(void *)(v3 + 56) | *(void *)(v3 + 16) & 2)
    {
LABEL_27:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q) {
        uint64_t v6 = (uint64_t)&_dispatch_mgr_q;
      }
      else {
        uint64_t v6 = 1;
      }
      goto LABEL_4;
    }
    if (v4 < 0)
    {
      if (*(void *)(v3 + 40) || *(void *)(v3 + 48) || *(void *)(v3 + 56)) {
        goto LABEL_27;
      }
      goto LABEL_12;
    }
    if ((*(unsigned char *)(v3 + 29) & 2) != 0 && (*(void *)(v3 + 16) & 1) == 0) {
      goto LABEL_27;
    }
    if ((a3 & 0x10) == 0 && (v4 & 0x40000000) != 0)
    {
LABEL_12:
      if (!*(void *)(a1 + 48))
      {
        uint64_t v6 = 0;
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if ((*(unsigned char *)(v3 + 29) & 2) != 0 && *(void *)(v3 + 104)) {
      goto LABEL_2;
    }
    if (*(void *)(v3 + 56) | *(void *)(v3 + 16) & 2 || *(void *)(v3 + 72)) {
      goto LABEL_27;
    }
    if ((*(unsigned char *)(v3 + 29) & 2) != 0)
    {
      if (*(void *)(v3 + 104)) {
        goto LABEL_2;
      }
      uint64_t v9 = *(void *)(v3 + 16);
      if (v9)
      {
        if ((v9 & 3) == 0 && *(void *)(v3 + 80) < 0x7FFFFFFFFFFFFFFFuLL) {
          goto LABEL_2;
        }
      }
      goto LABEL_12;
    }
    uint64_t v7 = *(void *)(v3 + 16);
    if (v7) {
      BOOL v8 = (v7 & 3) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      goto LABEL_12;
    }
  }
LABEL_2:
  if (v5) {
    goto LABEL_27;
  }
  uint64_t v6 = (uint64_t)&_dispatch_mgr_q;
  if (&_dispatch_mgr_q == (__objc2_class **)1) {
    goto LABEL_27;
  }
LABEL_4:
  _dispatch_queue_wakeup(a1, a2, a3, v6);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  if (LODWORD(source[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&source[1], 2u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if ((atomic_fetch_or_explicit((atomic_uint *volatile)&source[10], 0x10000000u, memory_order_relaxed) & 0x10000000) != 0)
  {
    _os_object_release_internal_n(source, (const char *)2);
  }
  else
  {
    uint64_t v1 = (void (*)(void))*((void *)source->isa + 10);
    v1();
  }
}

void dispatch_source_cancel_and_wait(dispatch_object_t object)
{
  Class isa = object[11].isa;
  if (*((void *)isa + 6)) {
    dispatch_source_cancel_and_wait_cold_4((uint64_t)object);
  }
  int v4 = (atomic_uint *)&object[10];
  int v3 = (int)object[10].isa;
  do
  {
    int v5 = v3;
    unsigned int v6 = v3 | 0x10000000;
    if ((v3 & 0x20000000) != 0) {
      break;
    }
    if ((v3 & 0x80000000) == 0 && ((v3 & 0x40000000) != 0 || (*((unsigned char *)isa + 29) & 3) != 1)) {
      unsigned int v6 = v3 | 0x30000000;
    }
    atomic_compare_exchange_strong_explicit(v4, (unsigned int *)&v3, v6, memory_order_relaxed, memory_order_relaxed);
  }
  while (v3 != v5);
  if ((v5 & 0x800000) != 0) {
    dispatch_source_cancel_and_wait_cold_3((uint64_t)object);
  }
  if (v5 < 0) {
    return;
  }
  if ((v6 & 0x20000000) != 0)
  {
LABEL_29:
    unsigned int v14 = (*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) >> 8) & 0x3FFF;
    BOOL v13 = v14 == 0;
    unsigned int v15 = __clz(__rbit32(v14));
    if (v13) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15 + 1;
    }
    (*((void (**)(dispatch_object_t, uint64_t, uint64_t))object->isa + 10))(object, v16, 2);
    dispatch_activate(object);
LABEL_33:
    uint64_t v17 = *v4;
    if ((v17 & 0x80000000) == 0)
    {
      do
      {
        if ((v17 & 0x20000000) != 0
          || (uint64_t v18 = v17,
              atomic_compare_exchange_strong_explicit(v4, (unsigned int *)&v18, v17 | 0x20000000, memory_order_relaxed, memory_order_relaxed), BOOL v13 = v18 == v17, LODWORD(v17) = v17 | 0x20000000, v13))
        {
          _dispatch_wait_on_address((uint64_t)&object[10], v17, -1);
          uint64_t v18 = *v4;
        }
        uint64_t v17 = v18;
      }
      while ((v18 & 0x80000000) == 0);
    }
    return;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  unint64_t v9 = (unint64_t)object[7].isa;
  while (1)
  {
    unint64_t v10 = v9;
    unint64_t v11 = v9 & 0xFFE00000FFFFFFFCLL;
    if ((v9 & 0xFFE00000FFFFFFFCLL) != 0) {
      break;
    }
    unint64_t v12 = v8 | v9 & 0x7700000001 | 0x60000000000000;
LABEL_15:
    atomic_compare_exchange_strong((atomic_ullong *volatile)&object[7], &v9, v12);
    if (v9 == v10)
    {
      if (!(v10 >> 55))
      {
        if (!v11)
        {
          if ((*v4 & 0x80000000) == 0) {
            _dispatch_source_refs_unregister((uint64_t)object, 3);
          }
          if (*v4 < 0) {
            _dispatch_source_cancel_callout((uint64_t)object, 0, 0);
          }
          (*((void (**)(dispatch_object_t, void, uint64_t))object->isa + 10))(object, 0, 20);
          goto LABEL_33;
        }
        goto LABEL_28;
      }
      goto LABEL_35;
    }
  }
  if ((v5 & 0x10000000) == 0)
  {
    unint64_t v12 = v9 | 0x8000000000;
    goto LABEL_15;
  }
  if (!(v9 >> 55))
  {
LABEL_28:
    if (((v10 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0) {
      dispatch_source_cancel_and_wait_cold_2((uint64_t)object);
    }
    goto LABEL_29;
  }
LABEL_35:
  if (v10 >> 58) {
    dispatch_source_cancel_and_wait_cold_1((uint64_t)object);
  }

  dispatch_activate(object);
}

atomic_uint *_dispatch_source_refs_unregister(uint64_t a1, char a2)
{
  uint64_t result = (atomic_uint *)_dispatch_unote_unregister(*(void *)(a1 + 88), a2);
  if (result)
  {
    return _dispatch_source_refs_finalize_unregistration((atomic_uint *)a1, v4);
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 80);
    do
    {
      if (v5 >> 30) {
        break;
      }
      uint64_t v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), (unsigned int *)&v6, v5 | 0x40000000, memory_order_relaxed, memory_order_relaxed);
      BOOL v7 = v6 == v5;
      uint64_t v5 = v6;
    }
    while (!v7);
  }
  return result;
}

void _dispatch_source_cancel_callout(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6 = a1;
  uint64_t v7 = *(void *)(a1 + 88);
  if ((a3 & 0x1000000) != 0)
  {
    a1 = MEMORY[0x18C121B40]();
    uint64_t v8 = (void *)a1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  __swp(v3, (unsigned int *)(v7 + 48));
  *(void *)(v7 + 64) = 0;
  *(void *)(v7 + 72) = 0;
  __swp(a1, (unsigned int *)(v7 + 40));
  if (a1) {
    _dispatch_source_handler_dispose(a1, a2);
  }
  __swp(a1, (unsigned int *)(v7 + 56));
  if (a1) {
    _dispatch_source_handler_dispose(a1, a2);
  }
  if (!v3)
  {
LABEL_11:
    if (!v8) {
      return;
    }
    goto LABEL_12;
  }
  if ((*(_DWORD *)(v6 + 80) & 0x10000000) == 0)
  {
    _dispatch_source_handler_dispose(v3, a2);
    goto LABEL_11;
  }
  if ((*(unsigned char *)v3 & 0x40) != 0) {
    *(void *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(v6 + 32);
  }
  _dispatch_continuation_pop(v3, 0, a3 & 0xFEFFFFFF, (uint64_t)a2);
  if (v8)
  {
LABEL_12:
  }
}

uint64_t _dispatch_source_merge_evt(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  __int16 v5 = (__int16)a2;
  uint64_t v7 = (_DWORD *)~*(void *)(a1 + 8);
  if (((unsigned __int16)a2 & 0x100) == 0 && !*(void *)(a1 + 16) && (*(unsigned char *)(a1 + 29) & 2) == 0) {
    _dispatch_source_refs_finalize_unregistration((atomic_uint *)~*(void *)(a1 + 8), a2);
  }
  if ((v5 & 0x200) != 0)
  {
    if ((v7[20] & 0x4000000) != 0) {
      _dispatch_source_merge_evt_cold_1(a1);
    }
    _dispatch_bug_kevent_vanished(a1);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 80);
  unsigned int v9 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = 0;
  }

  return v8(v7, v10, 51);
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (when == -1) {
    return;
  }
  dispatch_time_t v7 = when;
  unint64_t v8 = _dispatch_timeout(when);
  if (v8)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v10 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 0;
    }
    if (v11 > 5) {
      unint64_t v12 = 20;
    }
    else {
      unint64_t v12 = qword_18A97E3F8[v11];
    }
    unint64_t v13 = v8 / v12;
    if (v13 <= 0xF4240) {
      unint64_t v13 = 1000000;
    }
    if (v13 >= 0xDF8475800) {
      unint64_t v14 = 60000000000;
    }
    else {
      unint64_t v14 = v13;
    }
    dispatch_source_t v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_after, 0, 0, queue);
    Class isa = v15[11].isa;
    uint64_t v17 = *(void **)(StatusReg + 176);
    if (v17) {
      *(void *)(StatusReg + 176) = v17[2];
    }
    else {
      uint64_t v17 = _dispatch_continuation_alloc_from_heap();
    }
    *uint64_t v17 = 256;
    v17[4] = work;
    v17[5] = context;
    unint64_t v18 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v18 >= 0x10FF) {
      unint64_t v18 = 4351;
    }
    uint64_t v19 = *(void *)(StatusReg + 224);
    if (v19 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
      return;
    }
    v17[3] = v19;
    if (v18)
    {
      int v20 = (HIDWORD(queue[10].isa) >> 30) & 1;
      if ((HIDWORD(queue[10].isa) & 0xFFF) == 0) {
        int v20 = 1;
      }
      if (!v20) {
        unint64_t v18 = 0;
      }
    }
    v17[1] = v18;
    v17[6] = v15;
    *((void *)isa + 5) = v17;
    if ((v7 & 0x8000000000000000) != 0)
    {
      if ((v7 & 0x4000000000000000) != 0)
      {
        if ((unint64_t)-(uint64_t)v7 >> 62) {
          dispatch_time_t v7 = -1;
        }
        else {
          dispatch_time_t v7 = -(uint64_t)v7;
        }
        char v21 = 2;
LABEL_37:
        *((unsigned char *)isa + 30) |= 4 * v21;
        *((void *)isa + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v7;
        *((void *)isa + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v14 + v7;
        *((void *)isa + 12) = -1;
        dispatch_activate(v15);
        return;
      }
      v7 &= ~0x8000000000000000;
      char v21 = 1;
    }
    else
    {
      char v21 = 0;
    }
    if (v7 >> 62) {
      dispatch_time_t v7 = -1;
    }
    if (_dispatch_host_time_nano2mach)
    {
      unint64_t v14 = _dispatch_host_time_nano2mach(v14);
    }
    else
    {
      uint64_t v22 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
      unint64_t v14 = (v22 + ((3 * v14 - v22) >> 1)) >> 6;
    }
    goto LABEL_37;
  }

  dispatch_channel_async_f(queue, context, work);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  if (when == -1) {
    return;
  }
  dispatch_time_t v5 = when;
  unint64_t v6 = _dispatch_timeout(when);
  if (v6)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v8 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = 0;
    }
    if (v9 > 5) {
      unint64_t v10 = 20;
    }
    else {
      unint64_t v10 = qword_18A97E3F8[v9];
    }
    unint64_t v11 = v6 / v10;
    if (v11 <= 0xF4240) {
      unint64_t v11 = 1000000;
    }
    if (v11 >= 0xDF8475800) {
      unint64_t v12 = 60000000000;
    }
    else {
      unint64_t v12 = v11;
    }
    dispatch_source_t v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_after, 0, 0, queue);
    Class isa = v13[11].isa;
    dispatch_source_t v15 = *(uint64_t **)(StatusReg + 176);
    if (v15) {
      *(void *)(StatusReg + 176) = v15[2];
    }
    else {
      dispatch_source_t v15 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    }
    uint64_t v16 = _dispatch_Block_copy(block);
    uint64_t v17 = (uint64_t (*)())*((void *)block + 2);
    if (v17)
    {
      if (_dispatch_block_special_invoke == v17) {
        goto LABEL_51;
      }
    }
    else
    {
      if (!_dispatch_block_special_invoke)
      {
LABEL_51:
        *dispatch_source_t v15 = 272;
        v15[5] = (uint64_t)v16;
        _dispatch_continuation_init_slow(v15, (atomic_uint *)queue, 0);
        goto LABEL_35;
      }
      uint64_t v17 = 0;
    }
    *dispatch_source_t v15 = 272;
    v15[4] = (uint64_t)v17;
    v15[5] = (uint64_t)v16;
    unint64_t v18 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v18 >= 0x10FF) {
      unint64_t v18 = 4351;
    }
    uint64_t v19 = *(void *)(StatusReg + 224);
    if (v19 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 12), 1u, memory_order_relaxed) <= 0) {
      -[OS_voucher retain]();
    }
    v15[3] = v19;
    if (v18)
    {
      int v20 = (HIDWORD(queue[10].isa) >> 30) & 1;
      if ((HIDWORD(queue[10].isa) & 0xFFF) == 0) {
        int v20 = 1;
      }
      if (!v20) {
        unint64_t v18 = 0;
      }
    }
    v15[1] = v18;
LABEL_35:
    v15[6] = (uint64_t)v13;
    *((void *)isa + 5) = v15;
    if ((v5 & 0x8000000000000000) != 0)
    {
      if ((v5 & 0x4000000000000000) != 0)
      {
        if ((unint64_t)-(uint64_t)v5 >> 62) {
          dispatch_time_t v5 = -1;
        }
        else {
          dispatch_time_t v5 = -(uint64_t)v5;
        }
        char v21 = 2;
LABEL_43:
        *((unsigned char *)isa + 30) |= 4 * v21;
        *((void *)isa + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v5;
        *((void *)isa + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v12 + v5;
        *((void *)isa + 12) = -1;
        dispatch_activate(v13);
        return;
      }
      v5 &= ~0x8000000000000000;
      char v21 = 1;
    }
    else
    {
      char v21 = 0;
    }
    if (v5 >> 62) {
      dispatch_time_t v5 = -1;
    }
    if (_dispatch_host_time_nano2mach)
    {
      unint64_t v12 = _dispatch_host_time_nano2mach(v12);
    }
    else
    {
      uint64_t v22 = (3 * v12 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
      unint64_t v12 = (v22 + ((3 * v12 - v22) >> 1)) >> 6;
    }
    goto LABEL_43;
  }

  dispatch_channel_async(queue, block);
}

void _dispatch_source_handler_dispose(uint64_t a1, const char *a2)
{
  if ((*(unsigned char *)a1 & 0x10) != 0) {
    _Block_release(*(const void **)(a1 + 40));
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
        __break(1u);
        return;
      }
      _voucher_xref_dispose(v3, a2);
    }
    *(void *)(a1 + 24) = -1;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = *(void *)(StatusReg + 176);
  if (v6) {
    int v7 = *(_DWORD *)(v6 + 8) + 1;
  }
  else {
    int v7 = 1;
  }
  if (v7 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(void *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 8) = v7;
    *(void *)(StatusReg + 176) = a1;
  }
}

void _dispatch_source_set_handler_slow(unint64_t a1, const char *a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 160);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (*(void *)(a1 + 32))
  {
    if ((*(unsigned char *)a1 & 0x40) != 0) {
      *(void *)(a1 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(v3 + 32);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(StatusReg + 176);
    if (v5) {
      int v6 = *(_DWORD *)(v5 + 8) + 1;
    }
    else {
      int v6 = 1;
    }
    if (v6 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit(a1);
    }
    else
    {
      *(void *)(a1 + 16) = v5;
      *(_DWORD *)(a1 + 8) = v6;
      *(void *)(StatusReg + 176) = a1;
    }
    a1 = 0;
  }
  uint64_t v7 = atomic_exchange_explicit((atomic_ullong *volatile)(*(void *)(v3 + 88) + 8 * v4 + 40), a1, memory_order_release);
  if (v7)
  {
    _dispatch_source_handler_dispose(v7, a2);
  }
}

void _dispatch_source_handle_wlh_change(uint64_t a1)
{
  unsigned int v1 = atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x8000000u, memory_order_relaxed);
  if ((v1 & 0x400000) != 0)
  {
    if ((v1 & 0x8000000) == 0) {
      _dispatch_bug_deprecated("Changing target queue hierarchy after source was activated");
    }
  }
  else
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after source was activated";
    __break(1u);
  }
}

void _dispatch_source_registration_callout(uint64_t a1, const char *a2, unsigned int a3)
{
  __swp(v3, (unsigned int *)(*(void *)(a1 + 88) + 56));
  if ((*(_DWORD *)(a1 + 80) & 0x10800000) != 0)
  {
    if ((a3 & 0x1000000) != 0)
    {
      uint64_t v4 = (void *)MEMORY[0x18C121B40]();
      _dispatch_source_handler_dispose(v3, v5);
    }
    else
    {
      _dispatch_source_handler_dispose(v3, a2);
    }
  }
  else
  {
    if ((*(unsigned char *)v3 & 0x40) != 0) {
      *(void *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(a1 + 32);
    }
    _dispatch_continuation_pop(v3, 0, a3, (uint64_t)a2);
  }
}

void _dispatch_source_latch_and_call(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = *(void *)(a1 + 88);
  unsigned int v8 = *(void **)(v7 + 40);
  __swp(v3, (unsigned int *)(v7 + 72));
  int v9 = *(unsigned __int8 *)(*(void *)v7 + 9);
  if (v9 == 3)
  {
    unint64_t v10 = ~v3;
  }
  else if (v9 == 5)
  {
    if (v3)
    {
      uint64_t v11 = *(void *)(a1 + 88);
      unint64_t v10 = v3 >> 1;
      unint64_t v12 = (void *)(v11 + 80);
      if (*(void *)(v11 + 80) <= 0x7FFFFFFFFFFFFFFEuLL)
      {
        unsigned int v13 = *(_DWORD *)(v11 + 24) / 3u;
        if (v13 == 2) {
          __uint64_t v14 = clock_gettime_nsec_np(_CLOCK_REALTIME);
        }
        else {
          __uint64_t v14 = v13 == 1 ? mach_continuous_time() : mach_absolute_time();
        }
        if (v14 >= *v12)
        {
          unint64_t v15 = *(void *)(v11 + 96);
          __uint64_t v16 = (v14 - *v12) / v15;
          if ((uint64_t)(v16 + 1 + v10) >= 0) {
            uint64_t v17 = v16 + 1;
          }
          else {
            uint64_t v17 = v10 ^ 0x7FFFFFFFFFFFFFFFLL;
          }
          if (v15 > 0x7FFFFFFFFFFFFFFELL)
          {
            *unint64_t v12 = -1;
            *(void *)(v11 + 88) = -1;
          }
          else
          {
            unint64_t v18 = v17 * v15;
            *v12 += v18;
            *(void *)(v11 + 88) += v18;
          }
          v10 += v17;
        }
      }
    }
    else
    {
      unint64_t v10 = v3 >> 1;
    }
  }
  else
  {
    unint64_t v10 = v3;
    if (!v3)
    {
      unint64_t v10 = 0;
      if (*(unsigned __int8 *)(v7 + 28) == 233) {
        return;
      }
    }
  }
  *(void *)(v7 + 64) = v10;
  if (v8)
  {
    if (v3)
    {
      if (*(unsigned __int8 *)(v7 + 28) == 242)
      {
        _dispatch_continuation_get_function_symbol(v8);
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace();
        }
      }
      _dispatch_continuation_pop((uint64_t)v8, 0, a3, a2);
      if (*(unsigned __int8 *)(v7 + 28) == 242 && MEMORY[0xFFFFFC100]) {
        uint64_t v19 = kdebug_trace();
      }
      if ((*(unsigned char *)(v7 + 29) & 2) != 0)
      {
        if ((v3 & 1) != 0 && *(void *)(v7 + 104)) {
          _dispatch_timer_unote_configure(*(unsigned int **)(a1 + 88));
        }
        if ((*(unsigned char *)(v7 + 30) & 0x40) != 0)
        {
          if ((a3 & 0x1000000) != 0)
          {
            uint64_t v19 = MEMORY[0x18C121B40]();
            char v21 = (void *)v19;
          }
          else
          {
            char v21 = 0;
          }
          __swp(v19, (unsigned int *)(v7 + 40));
          if (v19) {
            _dispatch_source_handler_dispose(v19, v20);
          }
          if (v21) {
          dispatch_release((dispatch_object_t)a1);
          }
        }
      }
    }
    else
    {
      _dispatch_source_latch_and_call_cold_1();
    }
  }
  else if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace();
  }
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return v0;
}

void _os_workgroup_xref_dispose(uint64_t a1)
{
  unsigned int v1 = *(void (***)(void))(a1 + 48);
  if (v1)
  {
    v1[1](*v1);
    free(v1);
  }
}

uint64_t _os_workgroup_interval_xref_dispose(uint64_t result)
{
  if ((*(void *)(result + 24) & 8) != 0) {
    _os_workgroup_interval_xref_dispose_cold_1();
  }
  return result;
}

void _os_workgroup_dispose(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  mach_port_name_t v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    if (mach_port_mod_refs(*MEMORY[0x1E4F14C48], v3, 0, -1))
    {
      _os_assumes_log();
      if ((v2 & 1) == 0) {
        goto LABEL_6;
      }
    }
    else if ((v2 & 1) == 0)
    {
      goto LABEL_6;
    }
    if (work_interval_destroy()) {
      _os_assumes_log();
    }
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void **)(a1 + 16);
    free(v4);
  }
}

uint64_t _os_workgroup_debug(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, "wg[%p] = {xref = %d, ref = %d, name = %s}", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8), *(const char **)(a1 + 16));
}

uint64_t _os_workgroup_interval_dispose(uint64_t a1)
{
  return MEMORY[0x1F40D05A0](*(void *)(a1 + 72));
}

uint64_t _os_workgroup_tsd_cleanup(uint64_t result)
{
  uint64_t v2 = *MEMORY[0x1E4F14BF8];
  if (result) {
    _os_workgroup_tsd_cleanup_cold_1(v1, result);
  }
  return result;
}

void _os_workgroup_join_token_tsd_cleanup(void *a1, const char *a2)
{
  if (a1)
  {
    if (a1[1]) {
      os_eventlink_create_with_port_cold_1();
    }
    _os_workgroup_leave_update_wg(a1[2], a2);
    free(a1);
  }
}

void *_os_workgroup_leave_update_wg(uint64_t a1, const char *a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(void *)(StatusReg + 928) != a1) {
    os_eventlink_create_with_port_cold_1();
  }
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 60), 0xFFFFFFFF, memory_order_relaxed)) {
    _os_workgroup_leave_update_wg_cold_1();
  }
  uint64_t result = *(void **)(StatusReg + 928);
  *(void *)(StatusReg + 928) = 0;
  if (result)
  {
    return _os_object_release_internal(result, a2);
  }
  return result;
}

uint64_t _workgroup_init()
{
  return MEMORY[0x1F40D0978](&_os_workgroup_pthread_functions);
}

uint64_t _os_workgroup_get_backing_workinterval(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 40);
  }
  return result;
}

uint64_t os_workgroup_interval_data_set_flags(_DWORD *a1, unsigned int a2)
{
  if (!a1) {
    return 22;
  }
  uint64_t result = 22;
  if (a2 <= 1 && *a1 == 1386695757)
  {
    uint64_t result = 0;
    a1[1] = a2;
  }
  return result;
}

uint64_t os_workgroup_interval_data_set_telemetry(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1 && a4 == 40)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 16) = 2621441;
    *(void *)(a1 + 8) = a3;
  }
  else
  {
    uint64_t result = 22;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  return result;
}

uint64_t os_workgroup_attr_set_interval_type(uint64_t a1, int a2)
{
  if (!a1) {
    return 22;
  }
  BOOL v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || (a2 - 1) > 9) {
    return 22;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 8) = a2;
  return result;
}

uint64_t os_workgroup_attr_set_flags(_DWORD *a1, int a2)
{
  if (!a1) {
    return 22;
  }
  if (*a1 != 799564740 && *a1 != 799564724) {
    return 22;
  }
  uint64_t result = 0;
  a1[1] = a2;
  return result;
}

uint64_t os_workgroup_attr_set_telemetry_flavor(uint64_t a1, int a2)
{
  if (!a1) {
    return 22;
  }
  BOOL v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || a2 != 1) {
    return 22;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 1;
  return result;
}

void *os_workgroup_interval_copy_current_4AudioToolbox()
{
  uint64_t v0 = *(unsigned __int16 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 928);
  if (v0 && v0[28] - 3 <= 1) {
    return os_retain(v0);
  }
  else {
    return 0;
  }
}

_DWORD *os_workgroup_create(const char *a1, long long *a2)
{
  if (a2)
  {
    if (*(_DWORD *)a2 != 799564740 && *(_DWORD *)a2 != 799564724) {
      goto LABEL_17;
    }
    long long v4 = a2[1];
    long long v13 = *a2;
    long long v14 = v4;
    long long v5 = a2[3];
    long long v15 = a2[2];
    long long v16 = v5;
    BOOL v6 = v13 == 799564724 || v13 == 799564740;
    if (!v6 || (LODWORD(v13) = 2015762650, WORD4(v13)))
    {
LABEL_17:
      uint64_t v7 = 0;
      unsigned int v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      int v9 = 22;
LABEL_20:
      *unsigned int v8 = v9;
      return v7;
    }
  }
  else
  {
    long long v13 = _os_workgroup_attr_default;
    long long v14 = unk_18A97E438;
    long long v15 = xmmword_18A97E448;
    long long v16 = unk_18A97E458;
  }
  if ((BYTE4(v13) & 2) == 0 || WORD5(v13))
  {
    uint64_t v7 = 0;
    unsigned int v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    int v9 = 45;
    goto LABEL_20;
  }
  uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v13);
  if (!work_interval) {
    return 0;
  }
  uint64_t v12 = work_interval;
  uint64_t v7 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((void *)v7 + 4) = v12;
  v7[10] = 0;
  *((void *)v7 + 3) = 1;
  *((_WORD *)v7 + 28) = WORD4(v13);
  _os_workgroup_set_name((uint64_t)v7, a1);
  return v7;
}

uint64_t _os_workgroup_create_work_interval(uint64_t a1)
{
  _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 8));
  int v1 = work_interval_create();
  uint64_t result = 0;
  if (!v1)
  {
    int v3 = work_interval_copy_port();
    uint64_t result = 0;
    if (v3 < 0)
    {
      work_interval_destroy();
      return 0;
    }
  }
  return result;
}

void _os_workgroup_set_name(uint64_t a1, const char *a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    long long v4 = _dispatch_strdup_if_mutable(a2);
    if (v4 != v2)
    {
      *(void *)(a1 + 24) |= 4uLL;
      uint64_t v2 = v4;
    }
  }
  *(void *)(a1 + 16) = v2;
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5) {
    BOOL v6 = (*(void *)(a1 + 24) & 1) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v5 == -1) {
      _os_workgroup_set_name_cold_1();
    }
    if (v2 && __strlcpy_chk() && __work_interval_ctl() == -1)
    {
      uint64_t v7 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (v7) {
        _dispatch_bug(534, v7);
      }
    }
  }
}

_DWORD *os_workgroup_interval_create(const char *a1, int a2, long long *a3)
{
  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724) {
      goto LABEL_22;
    }
    long long v6 = a3[1];
    long long v16 = *a3;
    long long v17 = v6;
    long long v7 = a3[3];
    long long v18 = a3[2];
    long long v19 = v7;
    if (v16 == 799564724)
    {
      int v9 = DWORD1(v16);
      if (!DWORD1(v16)) {
        int v9 = 2;
      }
      DWORD1(v16) = v9;
      if (WORD4(v16) <= 1u) {
        int v8 = 1;
      }
      else {
        int v8 = WORD4(v16);
      }
      WORD4(v16) = v8;
    }
    else
    {
      if (v16 != 799564740) {
        goto LABEL_22;
      }
      int v8 = WORD4(v16);
    }
    LODWORD(v16) = 2015762650;
    if ((v8 - 1) >= 0xA)
    {
LABEL_22:
      unint64_t v10 = 0;
      uint64_t v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      int v12 = 22;
      goto LABEL_23;
    }
  }
  else
  {
    long long v16 = _os_workgroup_interval_attr_default;
    long long v17 = unk_18A97E478;
    long long v18 = xmmword_18A97E488;
    long long v19 = unk_18A97E498;
    LOWORD(v8) = 1;
  }
  if ((BYTE4(v16) & 4) != 0) {
    goto LABEL_22;
  }
  if ((BYTE4(v16) & 2) == 0)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    int v12 = 45;
LABEL_23:
    *uint64_t v11 = v12;
    return v10;
  }
  uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v16);
  if (!work_interval) {
    return 0;
  }
  uint64_t v15 = work_interval;
  unint64_t v10 = _os_object_alloc((uint64_t)OS_os_workgroup_interval, 80);
  *((void *)v10 + 4) = v15;
  v10[10] = 0;
  v10[16] = a2;
  *((void *)v10 + 9) = work_interval_instance_alloc();
  v10[17] = 0;
  *((_WORD *)v10 + 28) = v8;
  *((void *)v10 + 3) = 1;
  *((_WORD *)v10 + 22) = WORD5(v16);
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

_DWORD *os_workgroup_create_with_workload_id(const char *a1, char *a2, long long *a3)
{
  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724) {
      goto LABEL_32;
    }
    long long v6 = a3[1];
    long long v19 = *a3;
    long long v20 = v6;
    long long v7 = a3[3];
    long long v21 = a3[2];
    long long v22 = v7;
    if (v19 != 799564740)
    {
      if (v19 != 799564724)
      {
LABEL_32:
        os_workgroup_create_with_workload_id_cold_2();
        return 0;
      }
      int v8 = DWORD1(v19);
      if (!DWORD1(v19)) {
        int v8 = 2;
      }
      DWORD1(v19) = v8;
    }
    LODWORD(v19) = 2015762650;
  }
  else
  {
    long long v19 = _os_workgroup_with_workload_id_attr_default;
    long long v20 = unk_18A97E4B8;
    long long v21 = xmmword_18A97E4C8;
    long long v22 = unk_18A97E4D8;
  }
  LOWORD(v18) = 0;
  int v9 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v19 | 0xC), &v18);
  if (v9)
  {
    if (!WORD4(v19) || WORD4(v19) == (unsigned __int16)v18)
    {
      WORD4(v19) = v9;
    }
    else if (v9 != WORD4(v19))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_create_with_workload_id", a2, WORD4(v19));
      unint64_t v10 = 0;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      int v12 = *(int **)(StatusReg + 8);
      int v13 = 22;
      goto LABEL_24;
    }
  }
  if (DWORD1(v19) != 2)
  {
    os_workgroup_create_with_workload_id_cold_1(SDWORD1(v19));
    return 0;
  }
  if (WORD4(v19))
  {
    _dispatch_log("BUG IN CLIENT of %s: Non-default workload type: %s (%hd)", "os_workgroup_create_with_workload_id", a2, WORD4(v19));
    unint64_t v10 = 0;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_31;
  }
  if (!WORD5(v19))
  {
    int v18 = 0;
    uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v19);
    if (work_interval)
    {
      uint64_t v15 = work_interval;
      unint64_t v10 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
      *((void *)v10 + 4) = v15;
      v10[10] = v18;
      *((void *)v10 + 3) = 1;
      *((_WORD *)v10 + 28) = 0;
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, SHIDWORD(v19)))
      {
        _os_workgroup_set_name((uint64_t)v10, a1);
        return v10;
      }
      _os_object_release(v10, v16);
    }
    return 0;
  }
  unint64_t v10 = 0;
  int v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  int v13 = 45;
LABEL_24:
  *int v12 = v13;
  return v10;
}

uint64_t _os_workgroup_set_work_interval_workload_id(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 + 1 <= 1) {
    _os_workgroup_set_work_interval_workload_id_cold_1(v4);
  }
  if (!a3) {
    return 0;
  }
  unsigned int v6 = a3 & 0xFFFFFFFE;
  __strlcpy_chk();
  _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 56));
  uint64_t v7 = __work_interval_ctl();
  if (v7)
  {
    if (v7 != -1)
    {
      unsigned int v9 = 0;
      uint64_t v8 = v7;
      goto LABEL_12;
    }
    uint64_t v8 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v8)
    {
      _dispatch_bug(576, (int)v8);
      unsigned int v9 = 0;
      LODWORD(v7) = v8;
      goto LABEL_12;
    }
  }
  unsigned int v9 = v6;
  if (v6)
  {
    LODWORD(v7) = 0;
    uint64_t v8 = 37;
LABEL_12:
    _dispatch_log("BUG IN CLIENT of %s: Unable to set kernel workload ID: %s (0x%x) -> %d (0x%x)", "_os_workgroup_set_work_interval_workload_id", a2, v6, v7, v9);
    return v8;
  }
  uint64_t v8 = 0;
  *(void *)(a1 + 24) |= 0x10uLL;
  return v8;
}

_DWORD *os_workgroup_interval_create_with_workload_id(const char *a1, char *a2, int a3, long long *a4)
{
  if (a4)
  {
    if (*(_DWORD *)a4 != 799564740 && *(_DWORD *)a4 != 799564724) {
      goto LABEL_33;
    }
    long long v8 = a4[1];
    long long v21 = *a4;
    long long v22 = v8;
    long long v9 = a4[3];
    long long v23 = a4[2];
    long long v24 = v9;
    if (v21 != 799564740)
    {
      if (v21 != 799564724)
      {
LABEL_33:
        os_workgroup_interval_create_with_workload_id_cold_2();
        return 0;
      }
      int v10 = DWORD1(v21);
      if (!DWORD1(v21)) {
        int v10 = 2;
      }
      DWORD1(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v10;
      __int16 v11 = WORD4(v21);
      if (WORD4(v21) <= 1u) {
        __int16 v11 = 1;
      }
      WORD4(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v11;
    }
    LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 2015762650;
  }
  else
  {
    long long v21 = _os_workgroup_interval_attr_default;
    long long v22 = unk_18A97E478;
    long long v23 = xmmword_18A97E488;
    long long v24 = unk_18A97E498;
  }
  LOWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  int v12 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v21 | 0xC), &v20);
  if (v12)
  {
    if (WORD4(v21) == 1 || WORD4(v21) == (unsigned __int16)v20)
    {
      WORD4(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v12;
    }
    else if (v12 != WORD4(v21))
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd", "os_workgroup_interval_create_with_workload_id", a2, WORD4(v21));
      int v13 = 0;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      **(_DWORD **)(StatusReg + 8) = 22;
      return v13;
    }
  }
  if (DWORD1(v21) == 2)
  {
    __int16 v15 = WORD4(v21);
    if (WORD4(v21) - 1 >= 0xA)
    {
      _dispatch_log("BUG IN CLIENT of %s: Invalid workload interval type: %s (%hd)", "os_workgroup_interval_create_with_workload_id", a2, WORD4(v21));
      int v13 = 0;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      goto LABEL_31;
    }
    int v20 = 0;
    uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v21);
    if (work_interval)
    {
      uint64_t v17 = work_interval;
      int v13 = _os_object_alloc((uint64_t)OS_os_workgroup_interval, 80);
      *((void *)v13 + 4) = v17;
      v13[10] = v20;
      v13[16] = a3;
      *((void *)v13 + 9) = work_interval_instance_alloc();
      v13[17] = 0;
      *((_WORD *)v13 + 28) = v15;
      *((void *)v13 + 3) = 1;
      *((_WORD *)v13 + 22) = WORD5(v21);
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v13, a2, SHIDWORD(v21)))
      {
        _os_workgroup_set_name((uint64_t)v13, a1);
        return v13;
      }
      _os_object_release(v13, v18);
    }
  }
  else
  {
    os_workgroup_interval_create_with_workload_id_cold_1(SDWORD1(v21));
  }
  return 0;
}

int os_workgroup_join(os_workgroup_t wg, os_workgroup_join_token_t token_out)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(void *)(StatusReg + 928))
  {
    int v3 = *(int **)(StatusReg + 8);
    int result = 37;
LABEL_9:
    *int v3 = result;
    return result;
  }
  Class isa = wg[3].super.super.isa;
  if ((isa & 2) != 0)
  {
    int v3 = *(int **)(StatusReg + 8);
    int result = 22;
    goto LABEL_9;
  }
  if (LODWORD(wg[5].super.super.isa))
  {
    if (isa)
    {
      if (work_interval_join()) {
        return **(_DWORD **)(StatusReg + 8);
      }
    }
    else if (work_interval_join_port())
    {
      return **(_DWORD **)(StatusReg + 8);
    }
  }
  _os_workgroup_join_update_wg((uint64_t)wg, (uint64_t)token_out);
  return 0;
}

void os_workgroup_leave(os_workgroup_t wg, os_workgroup_join_token_t token)
{
  if (token->sig != 1298094680) {
    os_workgroup_leave_cold_5();
  }
  int v2 = *(_DWORD *)token->opaque;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (v2 != *(_DWORD *)(StatusReg + 24)) {
    os_workgroup_leave_cold_4();
  }
  int v5 = *(OS_os_workgroup **)(StatusReg + 928);
  if (v5 != wg || *(void *)&token->opaque[12] != (void)v5) {
    os_workgroup_leave_cold_3();
  }
  if (*(void *)&token->opaque[4]) {
    os_eventlink_create_with_port_cold_1();
  }
  if (LODWORD(wg[5].super.super.isa) && work_interval_leave()) {
    os_workgroup_leave_cold_1();
  }

  _os_workgroup_leave_update_wg((uint64_t)wg, (const char *)token);
}

os_workgroup_parallel_t os_workgroup_parallel_create(const char *name, os_workgroup_attr_t attr)
{
  if (!attr) {
    goto LABEL_19;
  }
  uint32_t sig = attr->sig;
  if (attr->sig != 799564724 && sig != 799564740) {
    goto LABEL_15;
  }
  int v5 = *(_DWORD *)attr->opaque;
  if (sig != 799564740)
  {
    if (sig != 799564724) {
      goto LABEL_15;
    }
    if (!v5) {
      LOBYTE(v5) = 6;
    }
    if (!*(_WORD *)&attr->opaque[4])
    {
LABEL_13:
      if ((v5 & 2) == 0 || *(_WORD *)&attr->opaque[6])
      {
        unsigned int v6 = 0;
        uint64_t v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        int v8 = 45;
        goto LABEL_18;
      }
LABEL_19:
      unsigned int v6 = (OS_os_workgroup *)_os_object_alloc((uint64_t)OS_os_workgroup_parallel, 64);
      v6[4].super.super.Class isa = 0;
      v6[3].super.super.Class isa = (Class)1;
      LOWORD(v6[7].super.super.isa) = 64;
      _os_workgroup_set_name((uint64_t)v6, name);
      return v6;
    }
  }
  if (*(_WORD *)&attr->opaque[4] == 64) {
    goto LABEL_13;
  }
LABEL_15:
  unsigned int v6 = 0;
  uint64_t v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  int v8 = 22;
LABEL_18:
  *uint64_t v7 = v8;
  return v6;
}

int os_workgroup_copy_port(os_workgroup_t wg, mach_port_t *mach_port_out)
{
  if (!wg) {
    os_eventlink_create_with_port_cold_1();
  }
  if (!mach_port_out) {
    os_eventlink_create_with_port_cold_1();
  }
  *mach_port_out = 0;
  if (((uint64_t)wg[3].super.super.isa & 2) != 0) {
    return 22;
  }
  mach_port_name_t isa = (mach_port_name_t)wg[5].super.super.isa;
  if (!isa) {
    return 22;
  }
  int result = mach_port_mod_refs(*MEMORY[0x1E4F14C48], isa, 0, 1);
  if (result)
  {
    os_workgroup_copy_port_cold_3();
    return 12;
  }
  else
  {
    *mach_port_out = (mach_port_t)wg[5].super.super.isa;
  }
  return result;
}

os_workgroup_t os_workgroup_create_with_port(const char *name, mach_port_t mach_port)
{
  if (mach_port - 1 >= 0xFFFFFFFE)
  {
    unsigned int v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }
  else
  {
    if (!work_interval_get_flags_from_port())
    {
      if (!mach_port_mod_refs(*MEMORY[0x1E4F14C48], mach_port, 0, 1))
      {
        unsigned int v4 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
        v4[10] = mach_port;
        *((_WORD *)v4 + 28) = 0;
        _os_workgroup_set_name((uint64_t)v4, name);
        return (os_workgroup_t)v4;
      }
      os_workgroup_create_with_port_cold_2();
    }
    return 0;
  }
  return (os_workgroup_t)v4;
}

_DWORD *os_workgroup_create_with_workload_id_and_port(const char *a1, char *a2, mach_port_name_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F14BF8];
  if (a3 - 1 >= 0xFFFFFFFE)
  {
    os_workgroup_create_with_workload_id_and_port_cold_3(a3);
    return 0;
  }
  unsigned int v15 = 0;
  if (work_interval_get_flags_from_port())
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port", a3);
    return 0;
  }
  unsigned int v6 = v15;
  unsigned __int16 v7 = 0;
  switch(v15 >> 28)
  {
    case 0u:
      break;
    case 1u:
      unsigned __int16 v7 = 4;
      break;
    case 2u:
      unsigned __int16 v7 = 5;
      break;
    case 3u:
      unsigned __int16 v7 = 2;
      break;
    case 4u:
      unsigned __int16 v7 = 7;
      break;
    case 5u:
      unsigned __int16 v7 = 8;
      break;
    case 6u:
      unsigned __int16 v7 = 9;
      break;
    case 7u:
      unsigned __int16 v7 = 10;
      break;
    default:
      os_workgroup_create_with_port_cold_1((char *)v16, v15);
  }
  v16[0] = 0;
  LOWORD(v15) = 0;
  unsigned int v8 = _os_workgroup_lookup_type_from_workload_id(a2, v16, &v15);
  if (v8)
  {
    unsigned int v9 = v8;
    unsigned int v10 = v6 & 0xF0000000;
    if ((_wg_type_to_wi_flags((unsigned __int16)v15) & 0x70000000) != v10
      && (_wg_type_to_wi_flags(v9) & 0x70000000) != v10)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and port interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_port", a2, v7);
      __int16 v11 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v11;
    }
  }
  if (mach_port_mod_refs(*MEMORY[0x1E4F14C48], a3, 0, 1))
  {
    os_workgroup_create_with_workload_id_and_port_cold_2(a3);
    return 0;
  }
  __int16 v11 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  v11[10] = a3;
  *((_WORD *)v11 + 28) = v7;
  int v12 = _os_workgroup_set_work_interval_workload_id((uint64_t)v11, a2, v16[0]);
  if (v12 && v12 != 37)
  {
    _os_object_release(v11, v13);
    return 0;
  }
  _os_workgroup_set_name((uint64_t)v11, a1);
  return v11;
}

os_workgroup_t os_workgroup_create_with_workgroup(const char *name, os_workgroup_t wg)
{
  if (((uint64_t)wg[3].super.super.isa & 2) != 0)
  {
    unsigned int v4 = 0;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
    return v4;
  }
  unsigned int v4 = (OS_os_workgroup *)_os_object_alloc((uint64_t)OS_os_workgroup, 64);
  LOWORD(v4[7].super.super.isa) = wg[7].super.super.isa;
  mach_port_name_t isa = (mach_port_name_t)wg[5].super.super.isa;
  if (!isa)
  {
LABEL_7:
    _os_workgroup_set_name((uint64_t)v4, name);
    return v4;
  }
  if (!mach_port_mod_refs(*MEMORY[0x1E4F14C48], isa, 0, 1))
  {
    LODWORD(v4[5].super.super.isa) = wg[5].super.super.isa;
    goto LABEL_7;
  }
  free(v4);
  return 0;
}

_DWORD *os_workgroup_create_with_workload_id_and_workgroup(const char *a1, char *a2, uint64_t a3)
{
  kern_return_t v12;
  int v13;
  int v14;
  const char *v15;
  unsigned int v17;
  unsigned __int16 v18;

  if ((*(void *)(a3 + 24) & 2) != 0)
  {
    os_workgroup_create_with_workload_id_and_workgroup_cold_1();
    return 0;
  }
  uint64_t v17 = 0;
  int v6 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a3 + 56));
  int v18 = 0;
  unsigned int v7 = _os_workgroup_lookup_type_from_workload_id(a2, &v17, &v18);
  if (v7)
  {
    unsigned int v8 = v7;
    int v9 = v6 & 0x70000000;
    if ((_wg_type_to_wi_flags(v18) & 0x70000000) != v9 && (_wg_type_to_wi_flags(v8) & 0x70000000) != v9)
    {
      _dispatch_log("BUG IN CLIENT of %s: Mismatched workload ID and workgroup interval type: %s vs %hd", "os_workgroup_create_with_workload_id_and_workgroup", a2, *(unsigned __int16 *)(a3 + 56));
      unsigned int v10 = 0;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v10;
    }
  }
  unsigned int v10 = _os_object_alloc((uint64_t)OS_os_workgroup, 64);
  *((_WORD *)v10 + 28) = *(_WORD *)(a3 + 56);
  mach_port_name_t v11 = *(_DWORD *)(a3 + 40);
  if (!v11) {
    goto LABEL_9;
  }
  int v12 = mach_port_mod_refs(*MEMORY[0x1E4F14C48], v11, 0, 1);
  int v13 = *(_DWORD *)(a3 + 40);
  if (v12)
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid workgroup port 0x%x", "os_workgroup_create_with_workload_id_and_workgroup", v13);
    free(v10);
    return 0;
  }
  v10[10] = v13;
  long long v14 = _os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, v17);
  if (v14 && v14 != 37)
  {
    _os_object_release(v10, v15);
    return 0;
  }
LABEL_9:
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

int os_workgroup_max_parallel_threads(os_workgroup_t wg, os_workgroup_mpt_attr_t attr)
{
  if (!wg) {
    os_eventlink_create_with_port_cold_1();
  }
  if (LOWORD(wg[7].super.super.isa) - 3 > 1)
  {
    return pthread_qos_max_parallelism();
  }
  else
  {
    return MEMORY[0x1F40D0A30](0, attr);
  }
}

void *_os_workgroup_join_update_wg(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(void *)(StatusReg + 928)) {
    _os_workgroup_join_update_wg_cold_1();
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 60), 1u, memory_order_relaxed);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v4 = *(void *)(StatusReg + 24);
  *(_DWORD *)a2 = 1298094680;
  *(_DWORD *)(a2 + 4) = v4;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = a1;
  if (a1) {
    _os_object_retain_internal(a1);
  }
  int result = *(void **)(StatusReg + 928);
  *(void *)(StatusReg + 928) = a1;
  if (result)
  {
    return _os_object_release_internal(result, (const char *)a2);
  }
  return result;
}

int os_workgroup_set_working_arena(os_workgroup_t wg, void *arena, uint32_t max_workers, os_workgroup_working_arena_destructor_t destructor)
{
  _X0 = malloc_type_calloc(4 * max_workers + 24, 1uLL, 0xB26F0EFuLL);
  if (_X0)
  {
    _X0[4] = max_workers;
    *(void *)_X0 = arena;
    *((void *)_X0 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = destructor;
    _X2 = wg[6].super.super.isa;
    do
    {
      if ((unint64_t)wg[7].super.super.isa >> 32)
      {
        free(_X0);
        uint64_t v17 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        int result = 16;
        goto LABEL_9;
      }
      Class v10 = _X2;
      _X3 = wg[7].super.super.isa;
      __asm { CASP            X2, X3, X0, X1, [X9] }
    }
    while (_X2 != v10);
    if (v10)
    {
      (*((void (**)(void))v10 + 1))(*(void *)v10);
      free(v10);
    }
    return 0;
  }
  else
  {
    uint64_t v17 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    int result = 12;
LABEL_9:
    *uint64_t v17 = result;
  }
  return result;
}

void *__cdecl os_workgroup_get_working_arena(os_workgroup_t wg, os_workgroup_index *index_out)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_t *)(StatusReg + 928) != wg) {
    os_workgroup_get_working_arena_cold_3();
  }
  Class isa = wg[6].super.super.isa;
  if (!isa) {
    return 0;
  }
  if (index_out)
  {
    uint64_t v4 = *((unsigned int *)isa + 4);
    if (!v4) {
      os_workgroup_get_working_arena_cold_1();
    }
    uint64_t v5 = 0;
    while (*((_DWORD *)isa + v5 + 6) != *(_DWORD *)(StatusReg + 24))
    {
      if (v4 == ++v5)
      {
        LODWORD(v5) = atomic_fetch_add_explicit((atomic_uint *volatile)isa + 5, 1u, memory_order_relaxed);
        if (v5 >= v4) {
          os_workgroup_get_working_arena_cold_2();
        }
        *((_DWORD *)isa + v5 + 6) = *(void *)(StatusReg + 24);
        break;
      }
    }
    *index_out = v5;
  }
  return *(void **)isa;
}

void os_workgroup_cancel(os_workgroup_t wg)
{
}

BOOL os_workgroup_testcancel(os_workgroup_t wg)
{
  return ((unint64_t)wg[3].super.super.isa >> 1) & 1;
}

int os_workgroup_interval_start(os_workgroup_interval_t wg, uint64_t start, uint64_t deadline, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_interval_t *)(StatusReg + 928) != wg) {
    os_workgroup_get_working_arena_cold_3();
  }
  if (data && *(_WORD *)&data->opaque[12] == 1 && WORD2(wg[5].super.super.isa) != 1
    || deadline < start
    || LODWORD(wg[8].super.super.isa) == 32 && mach_absolute_time() < start)
  {
    unsigned int v7 = *(int **)(StatusReg + 8);
    int v8 = 22;
LABEL_7:
    *unsigned int v7 = v8;
    return v8;
  }
  if (!os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1))
  {
    unsigned int v7 = *(int **)(StatusReg + 8);
    int v8 = 16;
    goto LABEL_7;
  }
  if (data && data->sig == 1386695757) {
    uint64_t v10 = *(_DWORD *)data->opaque & 1;
  }
  else {
    uint64_t v10 = 0;
  }
  Class isa = wg[3].super.super.isa;
  while (1)
  {
    if ((isa & 0xA) != 0)
    {
      int v8 = 22;
LABEL_32:
      os_unfair_lock_unlock((os_unfair_lock_t)&wg[8].super.super.isa + 1);
      unsigned int v7 = *(int **)(StatusReg + 8);
      goto LABEL_7;
    }
    if ((isa & 1) == 0)
    {
      int v8 = 1;
      goto LABEL_32;
    }
    if (v10 && (isa & 0x10) == 0) {
      break;
    }
    int v12 = isa;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&wg[3], (unint64_t *)&v12, (unint64_t)isa | 8, memory_order_relaxed, memory_order_relaxed);
    BOOL v13 = v12 == isa;
    Class isa = v12;
    if (v13) {
      goto LABEL_24;
    }
  }
  **(_DWORD **)(StatusReg + 8) = 22;
LABEL_24:
  work_interval_instance_clear();
  work_interval_instance_set_start();
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  int v8 = work_interval_instance_start();
  if (v8)
  {
    atomic_fetch_and_explicit((atomic_ullong *volatile)&wg[3], 0xFFFFFFFFFFFFFFF7, memory_order_relaxed);
  }
  else if (data && *(_WORD *)&data->opaque[12] == 1)
  {
    _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)data);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&wg[8].super.super.isa + 1);
  return v8;
}

double _os_workgroup_interval_copy_telemetry_data(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, 40);
  work_interval_instance_get_telemetry_data();
  if (*(_WORD *)(a2 + 16) == 1)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)uint64_t v4 = *(void *)&v5[0];
    *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)&v5[1] + 8);
    double result = *((double *)v5 + 1);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)v5 + 8);
  }
  return result;
}

int os_workgroup_interval_update(os_workgroup_interval_t wg, uint64_t deadline, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_interval_t *)(StatusReg + 928) != wg) {
    os_workgroup_get_working_arena_cold_3();
  }
  os_workgroup_interval_data_t v4 = data;
  if (!data)
  {
    int v6 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
    if (os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1)) {
      goto LABEL_9;
    }
LABEL_12:
    int v9 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)&data->opaque[12] == 1 && WORD2(wg[5].super.super.isa) != 1) {
    goto LABEL_17;
  }
  int v6 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
  if (!os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1)) {
    goto LABEL_12;
  }
  if (v4->sig == 1386695757)
  {
    uint64_t v7 = *(_DWORD *)v4->opaque & 1;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v7 = 0;
LABEL_10:
  Class isa = wg[3].super.super.isa;
  if ((isa & 1) == 0)
  {
    os_unfair_lock_unlock(v6);
    int v9 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 1;
LABEL_18:
    *int v9 = v4;
    return (int)v4;
  }
  if (v7 && (isa & 0x10) == 0 || (isa & 8) == 0)
  {
    os_unfair_lock_unlock(v6);
LABEL_17:
    int v9 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 22;
    goto LABEL_18;
  }
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  if (work_interval_instance_update())
  {
    LODWORD(v4) = **(_DWORD **)(StatusReg + 8);
  }
  else if (v4)
  {
    if (*(_WORD *)&v4->opaque[12] == 1) {
      _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)v4);
    }
    LODWORD(v4) = 0;
  }
  os_unfair_lock_unlock(v6);
  return (int)v4;
}

int os_workgroup_interval_finish(os_workgroup_interval_t wg, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_interval_t *)(StatusReg + 928) != wg) {
    os_workgroup_get_working_arena_cold_3();
  }
  os_workgroup_interval_data_t v3 = data;
  if (!data)
  {
    uint64_t v5 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
    if (os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1)) {
      goto LABEL_9;
    }
LABEL_12:
    int v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 16;
    goto LABEL_18;
  }
  if (*(_WORD *)&data->opaque[12] == 1 && WORD2(wg[5].super.super.isa) != 1) {
    goto LABEL_17;
  }
  uint64_t v5 = (os_unfair_lock_s *)&wg[8].super.super.isa + 1;
  if (!os_unfair_lock_trylock((os_unfair_lock_t)&wg[8].super.super.isa + 1)) {
    goto LABEL_12;
  }
  if (v3->sig == 1386695757)
  {
    uint64_t v6 = *(_DWORD *)v3->opaque & 1;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v6 = 0;
LABEL_10:
  Class isa = wg[3].super.super.isa;
  if ((isa & 1) == 0)
  {
    os_unfair_lock_unlock(v5);
    int v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 1;
LABEL_18:
    *int v8 = v3;
    return (int)v3;
  }
  if (v6 && (isa & 0x10) == 0 || (isa & 8) == 0)
  {
    os_unfair_lock_unlock(v5);
LABEL_17:
    int v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 22;
    goto LABEL_18;
  }
  if (LODWORD(wg[8].super.super.isa) == 32) {
    mach_absolute_time();
  }
  work_interval_instance_set_finish();
  work_interval_instance_set_complexity();
  if (work_interval_instance_finish())
  {
    LODWORD(v3) = **(_DWORD **)(StatusReg + 8);
  }
  else
  {
    atomic_fetch_and_explicit((atomic_ullong *volatile)&wg[3], 0xFFFFFFFFFFFFFFF7, memory_order_relaxed);
    if (v3)
    {
      if (*(_WORD *)&v3->opaque[12] == 1) {
        _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)v3);
      }
      LODWORD(v3) = 0;
    }
  }
  os_unfair_lock_unlock(v5);
  return (int)v3;
}

uint64_t _os_workgroup_pthread_create_with_workgroup(pthread_t *a1, void *a2, const pthread_attr_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = _dispatch_calloc(1uLL, 0x18uLL);
  _os_object_retain_internal((uint64_t)a2);
  *uint64_t v10 = a2;
  v10[1] = a4;
  v10[2] = a5;
  uint64_t v12 = pthread_create(a1, a3, (void *(__cdecl *)(void *))_os_workgroup_pthread_start, v10);
  if (v12)
  {
    _os_object_release_internal(a2, v11);
    free(v10);
  }
  return v12;
}

uint64_t _os_workgroup_pthread_start(OS_os_workgroup **a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  os_workgroup_interval_data_t v3 = a1[2];
  free(a1);
  memset(&v8, 0, sizeof(v8));
  int v4 = os_workgroup_join(v1, &v8);
  if (v4) {
    _os_workgroup_pthread_start_cold_1(v4);
  }
  uint64_t v5 = ((uint64_t (*)(OS_os_workgroup *))v2)(v3);
  os_workgroup_leave(v1, &v8);
  _os_object_release_internal(v1, v6);
  return v5;
}

uint64_t _wg_type_to_wi_flags(unsigned int a1)
{
  if (a1 >= 0xB) {
    _wg_type_to_wi_flags_cold_1();
  }
  return dword_18A97E4E8[(__int16)a1];
}

uint64_t _os_workgroup_lookup_type_from_workload_id(char *a1, unsigned int *a2, _WORD *a3)
{
  if (!a1) {
    _os_workgroup_lookup_type_from_workload_id_cold_1();
  }
  uint64_t v6 = 0;
  char v7 = 1;
  while (1)
  {
    char v8 = v7;
    if (!strcasecmp(a1, (&_os_workgroup_workload_id_table)[2 * v6])) {
      break;
    }
    char v7 = 0;
    uint64_t v6 = 1;
    if ((v8 & 1) == 0)
    {
      unsigned int v9 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
  }
  mach_port_name_t v11 = &(&_os_workgroup_workload_id_table)[2 * v6];
  uint64_t result = *((unsigned __int16 *)v11 + 4);
  unsigned int v9 = *((_DWORD *)v11 + 3) & 0xFFFFFFFA | 1;
LABEL_7:
  if (v9 <= 1) {
    unsigned int v9 = 1;
  }
  *a2 = v9;
  *a3 = result;
  return result;
}

void OUTLINED_FUNCTION_0_2(uint64_t a1@<X8>)
{
  **(_DWORD **)(a1 + 8) = 22;
}

void OUTLINED_FUNCTION_1_1(uint64_t a1)
{
}

uint64_t _dispatch_wait_for_enqueuer(unint64_t *a1)
{
  int v1 = -10;
  while (1)
  {
    unint64_t v2 = __ldxr(a1);
    if (v2) {
      break;
    }
    __wfe();
    if (__CFADD__(v1++, 1)) {
      return __DISPATCH_WAIT_FOR_ENQUEUER__((uint64_t *)a1);
    }
  }
  __clrex();
  return v2;
}

uint64_t __DISPATCH_WAIT_FOR_ENQUEUER__(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    int v3 = 1;
    do
    {
      _pthread_yield_to_enqueuer_4dispatch();
      uint64_t result = *a1;
      ++v3;
    }
    while (!*a1);
  }
  return result;
}

void dispatch_mach_hooks_install_4libxpc(void *a1)
{
  if (*a1 <= 2uLL) {
    dispatch_mach_hooks_install_4libxpc_cold_1((uint64_t)a1);
  }
  int v1 = &_dispatch_mach_xpc_hooks_default;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&_dispatch_mach_xpc_hooks, (unint64_t *)&v1, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
  if (v1 != &_dispatch_mach_xpc_hooks_default) {
    dispatch_mach_hooks_install_4libxpc_cold_2();
  }
}

void _dispatch_mach_hooks_install_default()
{
  _dispatch_mach_xpc_hooks = &_dispatch_mach_xpc_hooks_default;
}

uint64_t dispatch_mach_create(uint64_t a1, __objc2_class **a2, void *aBlock)
{
  uint64_t v5 = _dispatch_Block_copy(aBlock);
  if (v5[2]) {
    uint64_t v6 = v5[2];
  }
  else {
    uint64_t v6 = 0;
  }

  return _dispatch_mach_create(a1, a2, (uint64_t)v5, v6, 1u);
}

uint64_t _dispatch_mach_create(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10 = _dispatch_object_alloc(OS_dispatch_mach, 136);
  uint64_t v11 = v10;
  *(_DWORD *)(v10 + 8) += 2;
  if (*(unsigned char *)(*(void *)v10 + 40) == 19) {
    ++*(_DWORD *)(v10 + 8);
  }
  *(void *)(v10 + 16) = -1985229329;
  *(_DWORD *)(v10 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 4194305;
  *(void *)(v10 + 56) = 0x19FFE0000000000;
  *(void *)(v10 + 64) = atomic_fetch_add_explicit(&_dispatch_queue_serial_numbers, 1uLL, memory_order_relaxed);
  *(void *)(v10 + 72) = a1;
  *(_WORD *)(v10 + 116) = (8 * a5) & 0x10 | (((a5 >> 2) & 1) << 7) | *(_WORD *)(v10 + 116) & 0xFF6F;
  uint64_t v12 = off_1ED750420((uint64_t)&_dispatch_mach_type_recv, 0, 0);
  char v13 = v12[29];
  *((void *)v12 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = ~v11;
  if (a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = 0;
  }
  *((void *)v12 + 5) = v14;
  *((void *)v12 + 6) = a3;
  v12[29] = v13 & 0xBF | ((a5 & 1) << 6);
  if ((*(unsigned char *)(v11 + 116) & 0x80) != 0) {
    *((_DWORD *)v12 + 8) |= 0x200u;
  }
  *(void *)(v11 + 88) = v12;
  unsigned int v15 = off_1ED750360((uint64_t)&_dispatch_mach_type_send, 0, 9);
  *((void *)v15 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = ~v11;
  *(void *)(v11 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v15;
  if (a2)
  {
    if ((*((unsigned char *)a2 + 87) & 8) != 0) {
      _dispatch_mach_create_cold_2((uint64_t)a2);
    }
    if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)a2 + 2, 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
  }
  else
  {
    a2 = &off_1EB1CE800;
  }
  *(void *)(v11 + 24) = a2;
  return v11;
}

uint64_t dispatch_mach_create_f(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 0);
}

uint64_t dispatch_mach_create_4libxpc(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 6u);
}

void _dispatch_mach_dispose(uint64_t *a1, unsigned char *a2)
{
  _dispatch_unote_dispose(a1[11]);
  a1[11] = 0;
  _dispatch_unote_dispose(a1[15]);
  a1[15] = 0;
  uint64_t v4 = a1[16];
  if (v4)
  {
    _dispatch_unote_dispose(v4);
    a1[16] = 0;
  }

  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t dispatch_mach_request_no_senders(uint64_t a1)
{
  *(_WORD *)(a1 + 116) |= 0x20u;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

uint64_t dispatch_mach_notify_no_senders(uint64_t a1, int a2)
{
  if (a2) {
    __int16 v2 = 96;
  }
  else {
    __int16 v2 = 32;
  }
  *(_WORD *)(a1 + 116) = v2 | *(_WORD *)(a1 + 116) & 0xFF9F;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

uint64_t dispatch_mach_set_flags(uint64_t a1, char a2)
{
  *(_WORD *)(a1 + 116) = *(_WORD *)(a1 + 116) & 0xFF7F | ((a2 & 1) << 7);
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

void dispatch_mach_connect(dispatch_object_t object, int a2, int a3, dispatch_object_t a4)
{
  Class isa = object[15].isa;
  if ((a2 - 1) <= 0xFFFFFFFD) {
    *((_DWORD *)object[11].isa + 6) = a2;
  }
  *((_DWORD *)isa + 23) = a3;
  if ((a3 - 1) <= 0xFFFFFFFD)
  {
    if (a4)
    {
      dispatch_retain(a4);
      LODWORD(a4[6].isa) = 0x40000;
      dispatch_object_t v7 = a4 + 11;
      if (LODWORD(a4[9].isa)) {
        dispatch_object_t v7 = (dispatch_object_t)v7->isa;
      }
      *((_DWORD *)isa + 24) = v7[1].isa;
    }
    *((void *)isa + 6) = a4;
  }
  if ((WORD2(object[14].isa) & 0x20) != 0 && !*((void *)isa + 6)) {
    _dispatch_mach_arm_no_senders((uint64_t)object, 0);
  }
  unsigned int v8 = atomic_fetch_and_explicit((atomic_uint *volatile)isa + 22, 0x7FFFFFFFu, memory_order_relaxed);
  if ((v8 & 0x80000000) == 0) {
    dispatch_mach_connect_cold_1(v8);
  }

  dispatch_activate(object);
}

void _dispatch_mach_arm_no_senders(uint64_t a1, char a2)
{
  kern_return_t v5;
  kern_return_t v6;
  mach_port_t previous;

  mach_port_name_t v3 = *(_DWORD *)(*(void *)(a1 + 88) + 24);
  previous = 0;
  if (v3 - 1 <= 0xFFFFFFFD)
  {
    uint64_t v4 = (ipc_space_t *)MEMORY[0x1E4F14C48];
    uint64_t v5 = mach_port_request_notification(*MEMORY[0x1E4F14C48], v3, 70, (*(_WORD *)(a1 + 116) & 0x40) == 0, v3, 0x15u, &previous);
    if (v5 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v5) {
      _dispatch_bug(252, v5);
    }
    if (previous)
    {
      if ((a2 & 1) == 0) {
        _dispatch_mach_arm_no_senders_cold_2(previous);
      }
      uint64_t v6 = mach_port_deallocate(*v4, previous);
      if (v6 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (v6) {
        _dispatch_bug(260, v6);
      }
    }
  }
}

void *_dispatch_mach_merge_msg(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, unsigned int *a5, int a6, unsigned int a7)
{
  if ((a2 & 0x200) != 0) {
    _dispatch_mach_merge_msg_cold_2(a1);
  }
  uint64_t v10 = ~*(void *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(void *)(a1 + 8)) & 0x10000000) == 0)
  {
    if (a3->msgh_id != 70 || (*(_WORD *)(115 - *(void *)(a1 + 8)) & 0x20) == 0)
    {
      uint64_t v14 = _voucher_create_with_mach_msgv(&a3->msgh_bits, a5);
      if ((*(void *)&a6 & 0xFFFFFFuLL) >= 0x10FF) {
        uint64_t v15 = 4351;
      }
      else {
        uint64_t v15 = *(void *)&a6 & 0xFFFFFFLL;
      }
      uint64_t v16 = dispatch_mach_msg_create(a3, a4, HIWORD(a2) & 1, 0);
      if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100]) {
        kdebug_trace();
      }
      *(void *)(v16 + 56) = v15;
      *(void *)(v16 + 64) = v14;
      *(void *)(v16 + 32) = 0;
      *(_DWORD *)(v16 + 48) = -117964798;
      _dispatch_mach_handle_or_push_received_msg(v10, v16, a7);
      goto LABEL_12;
    }
    if (_dispatch_mach_msg_sender_is_kernel((uint64_t)a3))
    {
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      long long v19 = *(void **)(StatusReg + 176);
      if (v19) {
        *(void *)(StatusReg + 176) = v19[2];
      }
      else {
        long long v19 = _dispatch_continuation_alloc_from_heap();
      }
      v19[4] = _dispatch_mach_no_senders_invoke;
      v19[5] = v10;
      v19[3] = 0;
      *(_OWORD *)long long v19 = xmmword_18A97E520;
      (*(void (**)(uint64_t))(*(void *)v10 + 88))(v10);
    }
    else
    {
      _dispatch_mach_merge_msg_cold_1();
    }
  }
  mach_msg_destroy(a3);
  if ((a2 & 0x10000) != 0) {
    free(a3);
  }
LABEL_12:
  if ((*(void *)(a1 + 16) & 2) != 0 || (*(_DWORD *)(v10 + 60) & 0x1800000) == 0x800000)
  {
    int v20 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 80);
    return (void *)v20(v10, 0, 51);
  }
  else
  {
    return _os_object_release_internal_n((void *)v10, (const char *)2);
  }
}

uint64_t _dispatch_mach_no_senders_invoke(uint64_t result)
{
  if ((*(_DWORD *)(result + 80) & 0x10000000) == 0)
  {
    uint64_t v1 = *(void *)(result + 88);
    if (*(void *)(v1 + 40)) {
      __int16 v2 = *(uint64_t (**)(void))(v1 + 40);
    }
    else {
      __int16 v2 = 0;
    }
    return _dispatch_client_callout4(*(void *)(v1 + 48), 13, 0, 0, v2);
  }
  return result;
}

void _dispatch_mach_handle_or_push_received_msg(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a2 + 48);
  uint64_t v7 = 3;
  if (v6) {
    uint64_t v7 = 4;
  }
  if ((v6 & 0xFFFFC000) == 0xF8F80000) {
    uint64_t v8 = v6 & 0x3FFF;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 != 2
    && (*(_WORD *)(a1 + 116) & 0x10) != 0
    && ((*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 1))(*(void *)(*(void *)(a1 + 88) + 48)) & 1) != 0)
  {
    *(void *)(a2 + 16) = -1985229329;
    dispatch_release((dispatch_object_t)a2);
  }
  else
  {
    unsigned int v9 = (a3 >> 8) & 0x3FFF;
    if (v9) {
      unsigned int v10 = __clz(__rbit32(v9)) + 1;
    }
    else {
      unsigned int v10 = (*(_DWORD *)(a1 + 84) >> 8) & 0xF;
    }
    _dispatch_lane_push(a1, (void *)a2, v10);
  }
}

void _dispatch_mach_reply_merge_msg(uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v10 = ~*(void *)(a1 + 8);
  if ((*(_DWORD *)(79 - *(void *)(a1 + 8)) & 0x10000000) != 0)
  {
    mach_msg_destroy(a3);
    if ((a2 & 0x10000) != 0) {
      free(a3);
    }
    char v27 = 117;
  }
  else
  {
    mach_msg_bits_t msgh_bits = a3->msgh_bits;
    mach_msg_bits_t v14 = HIWORD(a3->msgh_bits) & 0x1F;
    mach_port_name_t msgh_voucher_port = a3->msgh_voucher_port;
    if ((v14 == 17 || v14 == 19) && msgh_voucher_port != 0)
    {
      if (v14 == 17)
      {
        _voucher_dealloc_mach_voucher(msgh_voucher_port);
        mach_msg_bits_t msgh_bits = a3->msgh_bits;
      }
      a3->mach_port_name_t msgh_voucher_port = 0;
      a3->mach_msg_bits_t msgh_bits = msgh_bits & 0xFFE0FFFF;
    }
    uint64_t v18 = *(unsigned int *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    uint64_t v20 = dispatch_mach_msg_create(a3, a4, HIWORD(a2) & 1, 0);
    if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100]) {
      kdebug_trace();
    }
    *(void *)(v20 + 56) = v18;
    *(void *)(v20 + 64) = v19;
    uint64_t v21 = *(void *)(a1 + 48);
    *(void *)(v20 + 32) = v21;
    *(_DWORD *)(v20 + 48) = -117964798;
    if ((*(unsigned char *)(v10 + 116) & 0x10) != 0 && v21)
    {
      uint64_t v22 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = v10;
      }
      long long v24 = _dispatch_mach_msg_async_reply_wrap(v20, v10);
      unsigned int v25 = __clz(__rbit32((*(_DWORD *)(v20 + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(v20 + 56) >> 8) & 0x3FFF) != 0) {
        uint64_t v26 = v25 + 1;
      }
      else {
        uint64_t v26 = 0;
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v23 + 88))(v23, v24, v26);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg(v10, v20, a7);
    }
    char v27 = 101;
  }

  _dispatch_mach_reply_unregister((void *)v10, (const char *)a1, v27);
}

void _dispatch_mach_reply_unregister(void *a1, const char *a2, char a3)
{
  uint64_t v4 = a2;
  if (*(void *)a2) {
    uint64_t v6 = *(void *)a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = a1[15];
  if ((a3 & 0x20) != 0)
  {
    int v9 = 0;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v7 + 40), (unsigned int *)&v9, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v9) {
      _dispatch_unfair_lock_lock_slow(v7 + 40);
    }
    uint64_t v11 = v4[8];
    if (v11) {
      *(void *)(v11 + 72) = v4[9];
    }
    *(void *)v4[9] = v11;
    v4[9] = 0;
    if (*(void *)(v7 + 56)) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = *(_DWORD *)(v7 + 88) != 0;
    }
    unsigned int v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    a2 = (const char *)atomic_exchange_explicit((atomic_uint *volatile)(v7 + 40), 0, memory_order_release);
    if (a2 != v12) {
      _dispatch_unfair_lock_unlock_slow(v7 + 40, a2);
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  if (!v4[2] || (_dispatch_unote_unregister((uint64_t)v4, a3 & 0xF) & 1) != 0)
  {
    if ((a3 & 0x10) != 0)
    {
      if ((*((_WORD *)a1 + 58) & 0x10) != 0 && v4[6])
      {
        uint64_t v17 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
        if (v17) {
          uint64_t v16 = (void *)v17;
        }
        else {
          uint64_t v16 = a1;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (v16) {
        uint64_t v21 = 12;
      }
      else {
        uint64_t v21 = 7;
      }
      uint64_t reply_disconnected = _dispatch_mach_msg_create_reply_disconnected(0, (uint64_t)v4, v21);
    }
    else
    {
      uint64_t v13 = v4[7];
      if (v13)
      {
        int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 12), 0xFFFFFFFF, memory_order_relaxed);
        if (add_explicit <= 1)
        {
          if (add_explicit != 1)
          {
            qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
            __break(1u);
            return;
          }
          _voucher_xref_dispose(v13, a2);
        }
        uint64_t reply_disconnected = 0;
        uint64_t v16 = 0;
        v4[7] = 0;
      }
      else
      {
        uint64_t reply_disconnected = 0;
        uint64_t v16 = 0;
      }
    }
    if (v6 != -2) {
      _dispatch_unote_dispose((uint64_t)v4);
    }
    if (reply_disconnected)
    {
      if (!v16)
      {
        _dispatch_mach_handle_or_push_received_msg((uint64_t)a1, reply_disconnected, 0);
        if ((a3 & 0x40) == 0) {
          return;
        }
        goto LABEL_47;
      }
      uint64_t v22 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, (uint64_t)a1);
      unsigned int v23 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0) {
        uint64_t v24 = v23 + 1;
      }
      else {
        uint64_t v24 = 0;
      }
      (*(void (**)(void *, void *, uint64_t))(*v16 + 88))(v16, v22, v24);
    }
    if ((a3 & 0x40) == 0) {
      return;
    }
LABEL_47:
    if (v8)
    {
      unsigned int v25 = *(void (**)(void *, void, uint64_t))(*a1 + 80);
      v25(a1, 0, 3);
    }
    else
    {
      _os_object_release_internal_n(a1, (const char *)2);
    }
    return;
  }
  if (a3 < 0)
  {
    uint64_t v20 = *(void *)(v7 + 56);
    uint64_t v19 = (void *)(v7 + 56);
    uint64_t v18 = v20;
    v4[8] = v20;
    if (v20) {
      *(void *)(v18 + 72) = v4 + 8;
    }
    *uint64_t v19 = v4;
    v4[9] = v19;
  }
}

void _dispatch_mach_send_barrier_drain_invoke(void *a1, uint64_t a2, const char *a3)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = StatusReg[20];
  uint64_t v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *v7;
  uint64_t v8 = a1[3];
  a1[3] = -1;
  uint64_t v9 = a1[1];
  if (v9 == -1)
  {
    unint64_t v16 = 0;
  }
  else
  {
    uint64_t v10 = StatusReg[25];
    if (((v10 >> 8) & 0xF) != 0) {
      uint64_t v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    unint64_t v13 = v9 & 0xFFFFFF;
    if ((v9 & 0xFFFFFF) != 0)
    {
      unint64_t v14 = v11 & 0xFFFFFF00;
      if ((v10 & 0x44000000) == 0 && (a1[1] & 0x10000000) == 0) {
        unint64_t v16 = v12;
      }
      else {
        unint64_t v16 = v9 & 0xFFFFFF;
      }
      if (v13 < v14) {
        unint64_t v16 = v12;
      }
    }
    else if ((unsigned __int16)v10 >> 12)
    {
      unint64_t v16 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  unint64_t v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_37:
      _dispatch_set_priority_and_voucher_slow(v17, v8, 6);
      goto LABEL_22;
    }
    unint64_t v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_18;
  }
  if (v17) {
    goto LABEL_37;
  }
LABEL_18:
  if (v8 == -1) {
    goto LABEL_22;
  }
  if (StatusReg[28] != v8)
  {
    unint64_t v17 = 0;
    goto LABEL_37;
  }
  if (v8 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_22:
  uint64_t v19 = StatusReg[22];
  if (v19) {
    int v20 = *(_DWORD *)(v19 + 8) + 1;
  }
  else {
    int v20 = 1;
  }
  if (v20 > _dispatch_continuation_cache_limit)
  {
    _dispatch_mach_send_invoke(v6, a3, 6u);
    _dispatch_continuation_free_to_cache_limit((uint64_t)a1);
  }
  else
  {
    a1[2] = v19;
    *((_DWORD *)a1 + 2) = v20;
    StatusReg[22] = a1;
    _dispatch_mach_send_invoke(v6, a3, 6u);
  }
  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_send_invoke(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 120);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  uint64_t v9 = 0xFFFFFFFFLL;
  if ((a3 & 4) == 0) {
    uint64_t v9 = 0x10FFFFFFFFLL;
  }
  if ((a3 & 2) != 0) {
    uint64_t v10 = 0x10FFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v11 = (unint64_t)(a3 & 2) << 35;
  unsigned int v12 = *(_DWORD *)(StatusReg + 200);
  unsigned int v13 = (v12 >> 8) & 0xF;
  unsigned int v14 = (unsigned __int16)v12 >> 12;
  unsigned int v15 = HIWORD(v12) & 0xF;
  if (v13 <= v14) {
    unsigned int v13 = v14;
  }
  if (v13 > v15) {
    unsigned int v15 = v13;
  }
LABEL_10:
  for (unint64_t i = *(void *)(v6 + 64); ; unint64_t i = v18)
  {
    if ((i & v10) != v11)
    {
      if ((a3 & 1) == 0) {
        return;
      }
      unint64_t v18 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v18, i | 0x2000000000, memory_order_acquire, memory_order_acquire);
      if (v18 == i) {
        return;
      }
      continue;
    }
    uint64_t v17 = HIDWORD(i) & 7;
    if (v15 < v17)
    {
      _pthread_workqueue_override_start_direct();
      unsigned int v19 = *(_DWORD *)(StatusReg + 200);
      unsigned int v15 = v17;
      if ((HIWORD(v19) & 0xF) < v17)
      {
        *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v19 & 0xFFF0FFFF | (v17 << 16);
        unsigned int v15 = v17;
      }
      goto LABEL_10;
    }
    unint64_t v18 = i;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v18, i & 0xFFFFFFC7FFFFFFFFLL | v8, memory_order_acquire, memory_order_acquire);
    if (v18 == i) {
      break;
    }
  }

  _dispatch_mach_send_drain((_DWORD *)a1, a2, a3);
}

void *_dispatch_mach_notification_merge_evt(uint64_t a1, uint64_t a2, int a3)
{
  mach_port_name_t v3 = (void *)~*(void *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 32) & a3) != 0) {
    _dispatch_mach_send_invoke(~*(void *)(a1 + 8), (const char *)0x40000, 1u);
  }

  return _os_object_release_internal_n(v3, (const char *)2);
}

uint64_t dispatch_mach_send(uint64_t a1, char *a2, int a3)
{
  return _dispatch_mach_send_msg(a1, a2, 0, a3 & 0xFFFF0000);
}

uint64_t _dispatch_mach_send_msg(uint64_t result, char *object, NSObject *a3, int a4)
{
  uint64_t v5 = *(void *)(result + 120);
  Class v6 = (Class)*((void *)object + 2);
  BOOL v7 = v6 == (Class)-1985229329;
  if (v6 != (Class)-1985229329)
  {
    Class v28 = (Class)*((void *)object + 2);
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message already enqueued";
    qword_1E91199F0 = (uint64_t)v28;
    __break(1u);
LABEL_38:
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
LABEL_39:
    if (!v7)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
      __break(1u);
      return result;
    }
    _voucher_xref_dispose(result, object);
LABEL_35:
    *((void *)object + 8) = 0;
    *((void *)object + 2) = -1985229329;
    dispatch_release((dispatch_object_t)object);
    return 1;
  }
  char v8 = a4;
  uint64_t v10 = (atomic_uint *)result;
  if ((a4 & 0x40000) != 0)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
    uint64_t v12 = v11 & 0xFFFFFF;
    BOOL v13 = (unsigned __int16)(v11 >> 8) > 0x10uLL && (a4 & 4) == 0;
    uint64_t v14 = 4351;
    if (!v13) {
      uint64_t v14 = v12;
    }
  }
  *((void *)object + 7) = v14;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v16 = *(atomic_uint **)(StatusReg + 224);
  if (v16)
  {
    int add_explicit = atomic_fetch_add_explicit(v16 + 3, 1u, memory_order_relaxed);
    BOOL v7 = add_explicit == 0;
    if (add_explicit <= 0) {
      goto LABEL_38;
    }
  }
  *((void *)object + 8) = v16;
  *((_DWORD *)object + 12) = a4 | (((*(void *)(StatusReg + 32) & 0x300) != 0) << 18);
  dispatch_retain((dispatch_object_t)object);
  unsigned int v18 = __clz(__rbit32((*((_DWORD *)object + 14) >> 8) & 0x3FFF));
  if (((*((_DWORD *)object + 14) >> 8) & 0x3FFF) != 0) {
    uint64_t v19 = v18 + 1;
  }
  else {
    uint64_t v19 = 0;
  }
  dispatch_object_t v20 = (dispatch_object_t)(object + 88);
  if (*((_DWORD *)object + 18)) {
    dispatch_object_t v20 = (dispatch_object_t)v20->isa;
  }
  int isa = (int)v20->isa;
  if (((uint64_t)v20->isa & 0x1F00) != 0x1500 || (HIDWORD(v20[1].isa) - 1) >= 0xFFFFFFFE) {
    int isa_high = 0;
  }
  else {
    int isa_high = HIDWORD(v20[1].isa);
  }
  *((_DWORD *)object + 13) = isa_high;
  if ((isa & 0x1F) != 0x12 || isa_high || *(_DWORD *)(v5 + 88) || (v10[20] & 0x10000000) != 0)
  {
    if (a3) {
      dispatch_object_t v25 = a3;
    }
    else {
      dispatch_object_t v25 = (dispatch_object_t)object;
    }
    _dispatch_mach_send_push_and_trydrain(v10, (unint64_t)v25, v19, 8 * (v8 & 1));
    if ((v26 & 1) == 0) {
      return 0;
    }
LABEL_33:
    uint64_t result = *((void *)object + 8);
    if (!result) {
      goto LABEL_35;
    }
    int v27 = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
    BOOL v7 = v27 == 1;
    if (v27 > 1) {
      goto LABEL_35;
    }
    goto LABEL_39;
  }
  char v24 = _dispatch_mach_msg_send((unint64_t)v10, (uint64_t)object, 0, 0, (int *)(8 * (v8 & 1u)));
  uint64_t result = 0;
  if ((v24 & 2) != 0) {
    goto LABEL_33;
  }
  return result;
}

uint64_t dispatch_mach_send_with_result(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if (a4)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1E91199F0 = a4;
    __break(1u);
  }
  else
  {
    uint64_t result = _dispatch_mach_send_msg(result, (char *)a2, 0, a3 & 0xFFFF0000 | 1);
    if (result)
    {
      int v9 = *(_DWORD *)(a2 + 48);
      uint64_t v10 = v9 & 0x3FFF;
      uint64_t v11 = 3;
      if (v9) {
        uint64_t v11 = 4;
      }
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        int v9 = 0;
        uint64_t v12 = v10;
      }
      else
      {
        uint64_t v12 = v11;
      }
    }
    else
    {
      int v9 = 0;
      uint64_t v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_and_wait_for_reply(uint64_t a1, char *a2, int a3)
{
  return _dispatch_mach_send_and_wait_for_reply(a1, a2, a3 & 0xFFFF0000, &v4);
}

uint64_t _dispatch_mach_send_and_wait_for_reply(uint64_t a1, char *object, int a3, unsigned char *a4)
{
  mach_msg_return_t v25;
  mach_msg_return_t v26;
  uint64_t msgh_size;
  mach_msg_header_t *v28;
  uint64_t v29;
  uint64_t v30;
  mach_msg_header_t *v31;
  mach_msg_header_t *v32;
  int v33;
  uint64_t msgh_local_port;
  atomic_uint *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  long long v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  uint64_t v62;

  uint64_t v62 = *MEMORY[0x1E4F14BF8];
  unsigned int v59 = 0u;
  unsigned int v60 = 0u;
  uint64_t v61 = 0u;
  unsigned int v57 = 0u;
  unsigned int v58 = 0u;
  unint64_t v56 = -2;
  *((void *)&v59 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = *((void *)object + 4);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  DWORD2(v6_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = *(void *)(StatusReg + 24);
  int v9 = *((_DWORD *)object + 18);
  dispatch_object_t v10 = (dispatch_object_t)(object + 88);
  dispatch_object_t isa = (dispatch_object_t)(object + 88);
  if (v9) {
    dispatch_object_t isa = (dispatch_object_t)v10->isa;
  }
  unsigned int isa_high = HIDWORD(isa[1].isa);
  if (isa_high - 1 > 0xFFFFFFFD || ((uint64_t)isa->isa & 0x1F00) != 0x1500)
  {
    unsigned int isa_high = *(_DWORD *)(StatusReg + 64);
    if (!isa_high)
    {
      unsigned int special_reply_port = thread_get_special_reply_port();
      *(void *)(StatusReg + 64) = special_reply_port;
      if (special_reply_port + 1 < 2) {
        _dispatch_mach_send_and_wait_for_reply_cold_6();
      }
      unsigned int isa_high = special_reply_port;
      int v9 = *((_DWORD *)object + 18);
    }
    if (v9) {
      dispatch_object_t v10 = (dispatch_object_t)v10->isa;
    }
    HIDWORD(v10[1].isa) = isa_high;
    BYTE6(v58) = 1;
  }
  uint64_t v49 = xmmword_18A97E530;
  unsigned int v50 = 0;
  unint64_t v51 = -1;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unint64_t v54 = object;
  uint64_t v55 = &v56;
  uint64_t v14 = _dispatch_mach_send_msg(a1, object, &v49, a3 | 4u);
  *a4 = v14;
  if (BYTE6(v58))
  {
    if (isa_high == *(_DWORD *)(StatusReg + 64)) {
      *(void *)(StatusReg + 64) = 0;
    }
    mach_port_name_t v15 = *(_DWORD *)(*(void *)(a1 + 120) + 92);
  }
  else
  {
    mach_port_name_t v15 = 0;
  }
  if (isa_high + 1 <= 1) {
    _dispatch_mach_send_and_wait_for_reply_cold_1(isa_high);
  }
  __int16 v48 = &v45;
  uint64_t v46 = *((void *)&v59 + 1);
  uint64_t v16 = (*MEMORY[0x1E4F14C70] + 0x4000) & ~*MEMORY[0x1E4F14C70];
  MEMORY[0x1F41887A8](v14);
  unsigned int v18 = (mach_msg_header_t *)((char *)&v45 - v17);
  bzero((char *)&v45 - v17, v19);
  LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  uint64_t v21 = 0;
  if (v15 - 1 >= 0xFFFFFFFE) {
    int v22 = 117440526;
  }
  else {
    int v22 = 117456910;
  }
  if (v15 - 1 >= 0xFFFFFFFE) {
    mach_port_name_t v23 = 0;
  }
  else {
    mach_port_name_t v23 = v15;
  }
  uint64_t v47 = a1;
  mach_msg_option_t v24 = v22 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a1 + 116) >> 7) & 1) << 9);
  while (1)
  {
    dispatch_object_t v25 = mach_msg(v18, v24, 0, v16, isa_high, 0, v23);
    char v26 = v25;
    if (v25 != 268451844) {
      break;
    }
    msgh_size = v18->msgh_size;
    if (msgh_size >= 0xFFFFFFBC) {
      _dispatch_mach_send_and_wait_for_reply_cold_3(msgh_size);
    }
    if ((v24 & 4) == 0)
    {
      _dispatch_log("BUG in libdispatch client: dispatch_mach_send_and_wait_for_reply: dropped message too large to fit in memory: id = 0x%x, size = %u", v18->msgh_id, msgh_size);
      goto LABEL_42;
    }
    uint64_t v20 = msgh_size + 68;
    Class v28 = (mach_msg_header_t *)malloc_type_malloc(msgh_size + 68, 0x62EACE2EuLL);
    uint64_t v21 = v28;
    uint64_t v29 = v20;
    if (!v28)
    {
      _dispatch_mach_send_and_wait_for_reply_cold_5();
      Class v28 = v18;
      uint64_t v29 = v16;
    }
    mach_msg_option_t v24 = v24 & 0xFFFFFEFB | 0x100;
    uint64_t v16 = v29;
    unsigned int v18 = v28;
  }
  if ((v25 - 268451842) <= 7 && ((1 << (v25 - 2)) & 0x91) != 0)
  {
    if (BYTE6(v58)) {
      _dispatch_destruct_reply_port();
    }
    goto LABEL_34;
  }
  if (v25) {
    _dispatch_mach_send_and_wait_for_reply_cold_2(v25);
  }
  LODWORD(v16) = v18->msgh_size + 68;
  if (v21 && v16 < v20)
  {
    uint64_t v31 = (mach_msg_header_t *)malloc_type_realloc(v21, v20, 0x7CF7F135uLL);
    if (v31)
    {
      uint64_t v21 = v31;
      uint64_t v32 = v31;
    }
    else
    {
      uint64_t v32 = v18;
    }
  }
  else
  {
LABEL_42:
    uint64_t v32 = v18;
  }
  uint64_t v33 = 0;
  msgh_local_port = v32->msgh_local_port;
  int v35 = (atomic_uint *)(*(void *)(v47 + 120) + 40);
  atomic_compare_exchange_strong_explicit(v35, (unsigned int *)&v33, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v33) {
    _dispatch_unfair_lock_lock_slow((uint64_t)v35);
  }
  BOOL v36 = v61;
  if ((void)v61)
  {
    char v37 = *((void *)&v60 + 1);
    uint64_t v38 = (void *)v61;
    if (*((void *)&v60 + 1))
    {
      *(void *)(*((void *)&v60 + 1) + 72) = v61;
      uint64_t v38 = (void *)v61;
    }
    *uint64_t v38 = v37;
    *(void *)&uint64_t v61 = 0;
  }
  unint64_t v39 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unint64_t v40 = atomic_exchange_explicit(v35, 0, memory_order_release);
  if (v40 != v39) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v35, v40);
  }
  if (BYTE6(v58))
  {
    if (v58 != msgh_local_port)
    {
      if ((msgh_local_port - 1) < 0xFFFFFFFE || v36) {
        _dispatch_mach_send_and_wait_for_reply_cold_4(msgh_local_port);
      }
      goto LABEL_61;
    }
    if (!v36 || *(_DWORD *)(StatusReg + 64))
    {
LABEL_61:
      _dispatch_destruct_reply_port();
      goto LABEL_62;
    }
    *(void *)(StatusReg + 64) = msgh_local_port;
  }
  else if ((msgh_local_port - 1) <= 0xFFFFFFFD && v36)
  {
    unint64_t v41 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    *(void *)(v41 + 16) = -1985229329;
    *(void *)(v41 + 24) = &unk_1EB1CE780;
    *(_DWORD *)(v41 + 72) = 0;
    *(void *)(v41 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 24;
    *(_DWORD *)(v41 + 10_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = msgh_local_port;
    uint64_t v43 = *((void *)&v59 + 1);
    unint64_t v42 = v60;
    *(void *)&unsigned int v60 = 0;
    *(void *)(v41 + 56) = v59;
    *(void *)(v41 + 64) = v42;
    *(void *)(v41 + 32) = v43;
    *(_DWORD *)(v41 + 48) = -117964791;
    _dispatch_mach_handle_or_push_received_msg(v47, v41, 0);
  }
LABEL_62:
  v32->msgh_local_port = 0;
  if (*(_DWORD *)(v47 + 80) & 0x10000000 | v26)
  {
    if (!v26) {
      mach_msg_destroy(v32);
    }
LABEL_34:
    free(v21);
    return 0;
  }
  unsigned int v30 = dispatch_mach_msg_create(v32, v16, v21 != 0, 0);
  if ((!v21 || v32 != v18) && MEMORY[0xFFFFFC100]) {
    kdebug_trace();
  }
  *(void *)(v30 + 32) = v46;
  return v30;
}

uint64_t dispatch_mach_send_with_result_and_wait_for_reply(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if (a4)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1E91199F0 = a4;
    __break(1u);
  }
  else
  {
    unsigned __int8 v13 = 0;
    uint64_t result = _dispatch_mach_send_and_wait_for_reply(result, (char *)a2, a3 & 0xFFFF0000 | 1, &v13);
    int v9 = v13;
    if (v13)
    {
      int v9 = *(_DWORD *)(a2 + 48);
      uint64_t v10 = v9 & 0x3FFF;
      uint64_t v11 = 3;
      if (v9) {
        uint64_t v11 = 4;
      }
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        int v9 = 0;
        uint64_t v12 = v10;
      }
      else
      {
        uint64_t v12 = v11;
      }
    }
    else
    {
      uint64_t v12 = 10;
    }
    *a5 = v12;
    *a6 = v9;
  }
  return result;
}

uint64_t dispatch_mach_send_with_result_and_async_reply_4libxpc(uint64_t result, char *object, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if (a4)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_1E91199F0 = a4;
    __break(1u);
    goto LABEL_16;
  }
  if ((*(_WORD *)(result + 116) & 0x10) == 0)
  {
LABEL_16:
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_send_with_result_and_wait_for_reply is XPC only";
    __break(1u);
LABEL_17:
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply port needed for async send with reply";
    __break(1u);
    return result;
  }
  dispatch_object_t v9 = (dispatch_object_t)(object + 88);
  if (*((_DWORD *)object + 18)) {
    dispatch_object_t v9 = (dispatch_object_t)v9->isa;
  }
  if ((HIDWORD(v9[1].isa) - 1) > 0xFFFFFFFD || ((uint64_t)v9->isa & 0x1F00) != 0x1500) {
    goto LABEL_17;
  }
  uint64_t result = _dispatch_mach_send_msg(result, object, 0, a3 & 0xFFFF0000 | 1);
  if (result)
  {
    int v10 = *((_DWORD *)object + 12);
    uint64_t v11 = v10 & 0x3FFF;
    uint64_t v12 = 3;
    if (v10) {
      uint64_t v12 = 4;
    }
    if ((v10 & 0xFFFFC000) == 0xF8F80000)
    {
      int v10 = 0;
      uint64_t v13 = v11;
    }
    else
    {
      uint64_t v13 = v12;
    }
  }
  else
  {
    int v10 = 0;
    uint64_t v13 = 10;
  }
  *a5 = v13;
  *a6 = v10;
  return result;
}

atomic_uint *dispatch_mach_reconnect(uint64_t a1, unsigned int a2, dispatch_object_t object)
{
  uint64_t v3 = (uint64_t)object;
  uint64_t v6 = *(void *)(a1 + 120);
  atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 88), 1u, memory_order_relaxed);
  if (a2 - 1 > 0xFFFFFFFD || object == 0)
  {
    int v8 = 0;
    if (object == (dispatch_object_t)-1) {
      uint64_t v3 = -1;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    dispatch_retain(object);
    *(_DWORD *)(v3 + 48) = 0x40000;
    uint64_t v9 = v3 + 88;
    if (*(_DWORD *)(v3 + 72)) {
      uint64_t v9 = *(void *)v9;
    }
    int v8 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(v6 + 96) = v8;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v11 = *(void ***)(StatusReg + 176);
  if (v11) {
    *(void *)(StatusReg + 176) = v11[2];
  }
  else {
    uint64_t v11 = (void **)_dispatch_continuation_alloc_from_heap();
  }
  v11[5] = v11;
  v11[6] = (void *)v3;
  v11[7] = (void *)a2;
  v11[3] = (void *)-1;
  v11[4] = _dispatch_mach_reconnect_invoke;
  *(_OWORD *)uint64_t v11 = xmmword_18A97E540;

  return _dispatch_mach_send_push((atomic_uint *)a1, v11, 0);
}

BOOL _dispatch_mach_reconnect_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 120);
  if (*(void *)(v4 + 16))
  {
    _dispatch_unote_unregister(*(void *)(a1 + 120), 5);
    *(_DWORD *)(*(void *)(a1 + 120) + 24) = 0;
  }
  int v5 = *(_DWORD *)(v4 + 92);
  if ((v5 + 1) >= 2)
  {
    uint64_t v6 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    *(void *)(v6 + 16) = -1985229329;
    *(void *)(v6 + 24) = &unk_1EB1CE780;
    *(_DWORD *)(v6 + 72) = 0;
    *(void *)(v6 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 24;
    *(_DWORD *)(v6 + 96) = v5;
    *(_DWORD *)(v6 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, v6, 0);
    *(_DWORD *)(v4 + 92) = 0;
  }
  uint64_t v7 = *(void *)(v4 + 48);
  if (v7)
  {
    _dispatch_mach_msg_not_sent(a1, v7, 0);
    *(void *)(v4 + 48) = 0;
  }
  int v8 = 0;
  *(_WORD *)(a1 + 118) &= ~1u;
  uint64_t v24 = 0;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0) {
    char v9 = -112;
  }
  else {
    char v9 = -110;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 40), (unsigned int *)&v8, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v8) {
    _dispatch_unfair_lock_lock_slow(v4 + 40);
  }
  uint64_t v11 = v24;
  uint64_t v24 = *(void *)(v4 + 56);
  uint64_t v12 = v24;
  *(void *)(v4 + 56) = v11;
  if (v12)
  {
    *(void *)(v12 + 72) = &v24;
    do
    {
      uint64_t v13 = *(void *)(v12 + 64);
      *(void *)(v12 + 72) = 0;
      _dispatch_mach_reply_unregister((void *)a1, (const char *)v12, v9);
      uint64_t v12 = v13;
    }
    while (v13);
    uint64_t v11 = *(void *)(v4 + 56);
  }
  unsigned int v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unsigned int v15 = atomic_exchange_explicit((atomic_uint *volatile)(v4 + 40), 0, memory_order_release);
  if (v15 != v14)
  {
    _dispatch_unfair_lock_unlock_slow(v4 + 40, v15);
    if (v11) {
      return v11 == 0;
    }
LABEL_18:
    uint64_t v16 = *(void *)(StatusReg + 176);
    if (v16) {
      int v17 = *(_DWORD *)(v16 + 8) + 1;
    }
    else {
      int v17 = 1;
    }
    int v18 = *(_DWORD *)(a2 + 56);
    uint64_t v19 = *(void *)(a2 + 48);
    if (v17 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit(a2);
    }
    else
    {
      *(void *)(a2 + 16) = v16;
      *(_DWORD *)(a2 + 8) = v17;
      *(void *)(StatusReg + 176) = a2;
    }
    __int16 v20 = *(_WORD *)(a1 + 118);
    if (v19 == -1)
    {
      uint64_t v19 = 0;
      __int16 v21 = v20 | 2;
      *(_WORD *)(a1 + 118) = v21;
      if ((v21 & 2) == 0) {
        goto LABEL_25;
      }
    }
    else if ((v20 & 2) == 0)
    {
LABEL_25:
      *(_DWORD *)(v4 + 92) = v18;
      *(void *)(v4 + 48) = v19;
LABEL_31:
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 88), 0xFFFFFFFF, memory_order_relaxed);
      return v11 == 0;
    }
    if ((v18 - 1) <= 0xFFFFFFFD)
    {
      uint64_t v22 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
      *(void *)(v22 + 16) = -1985229329;
      *(void *)(v22 + 24) = &unk_1EB1CE780;
      *(_DWORD *)(v22 + 72) = 0;
      *(void *)(v22 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 24;
      *(_DWORD *)(v22 + 96) = v18;
      *(_DWORD *)(v22 + 48) = -117964793;
      _dispatch_mach_handle_or_push_received_msg(a1, v22, 0);
    }
    if (v19) {
      _dispatch_mach_msg_not_sent(a1, v19, 0);
    }
    goto LABEL_31;
  }
  if (!v11) {
    goto LABEL_18;
  }
  return v11 == 0;
}

atomic_uint *_dispatch_mach_send_push(atomic_uint *result, void **a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 15);
  uint64_t v5 = 0xA000000000;
  if ((unint64_t)*a2 >= 0x1000 && *a2 == &unk_1ED74FC78) {
    uint64_t v5 = 0xB000000000;
  }
  a2[2] = 0;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = v4 + 72;
  unint64_t v7 = atomic_exchange_explicit((atomic_ullong *volatile)(v4 + 72), (unint64_t)a2, memory_order_release);
  if (v7) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = 4;
  }
  atomic_fetch_add_explicit(result + 2, v8, memory_order_relaxed);
  unint64_t v9 = a3 << 32;
  if (v7)
  {
    *(void *)(v7 + 16) = a2;
    *(void *)(StatusReg + 976) = 0;
    unint64_t v10 = *(void *)(v4 + 64);
    while (1)
    {
      unint64_t v11 = v10;
      unint64_t v12 = v9 | v10 & 0xFFFFFFF0FFFFFFFFLL | 0x2800000000;
      if ((v10 & 0x700000000) >= v9) {
        unint64_t v12 = v10;
      }
      if (v10 == v12) {
        break;
      }
      uint64_t v5 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 64), &v10, v12, memory_order_relaxed, memory_order_relaxed);
      if (v10 == v11) {
        goto LABEL_13;
      }
    }
    uint64_t v5 = 0;
    unint64_t v12 = v10;
  }
  else
  {
    *(void *)(v4 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a2;
    *(void *)(StatusReg + 976) = 0;
    unint64_t v14 = *(void *)(v4 + 64);
    do
    {
      unint64_t v11 = v14;
      if ((v14 & 0x700000000) >= v9) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v9 | v14 & 0xFFFFFF50FFFFFFFFLL | 0x800000000;
      }
      unint64_t v12 = v15 | v5;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 64), &v14, v12, memory_order_release, memory_order_relaxed);
    }
    while (v14 != v11);
    if ((v11 & 0x8000000000) != 0
      && result[2] != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit(result + 2, 0xFFFFFFFE, memory_order_release) <= 2)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return result;
    }
  }
LABEL_13:
  if (v11 >= 4)
  {
    if ((v11 & 0x700000000) < (v12 & 0x700000000)) {
      _pthread_workqueue_override_start_direct_check_owner();
    }
  }
  else if ((v5 & 0x1000000000) != 0)
  {
    _dispatch_mach_push_send_barrier_drain((uint64_t)result, BYTE4(v12) & 7);
  }
  else
  {
    if (!v7 || *(_DWORD *)(v4 + 88) || (result[20] & 0x10000000) != 0)
    {
      uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 80);
      goto LABEL_27;
    }
    if ((v11 & 0x1000000000) != 0)
    {
      uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 80);
LABEL_27:
      return (atomic_uint *)v13();
    }
  }

  return (atomic_uint *)_os_object_release_internal_n(v3, (const char *)2);
}

uint64_t dispatch_mach_get_checkin_port(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 120) + 96);
  }
}

BOOL dispatch_mach_can_handoff_4libxpc()
{
  unint64_t v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  while (1)
  {
    unint64_t v0 = *(void *)v0;
    if (!v0) {
      break;
    }
    if (*(char **)(v0 + 8) == "mach_msg")
    {
      uint64_t v1 = *(void *)(v0 + 16);
      if (v1) {
        return *(void *)(v1 + 56) == 0;
      }
      return 0;
    }
  }
  return 0;
}

uint64_t dispatch_mach_handoff_reply_f(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = _dispatch_mach_handoff_context(a2);
  unsigned int v8 = *(void **)(v7 + 16);
  uint64_t result = _dispatch_mach_handoff_set_wlh((uint64_t)v8, a1);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  *(void *)(v7 + 24) = a1;
  *unsigned int v8 = 260;
  v8[4] = a4;
  v8[5] = a3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v11 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v11 >= 0x10FF) {
    unint64_t v11 = 4351;
  }
  uint64_t v12 = *(void *)(StatusReg + 224);
  if (v12 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  v8[3] = v12;
  if (v11)
  {
    int v13 = *(_DWORD *)(a1 + 84);
    if ((v13 & 0x40000000) != 0 || (v13 & 0xFFF) == 0)
    {
      unsigned int v14 = __clz(__rbit32(v11 >> 8)) + 1;
    }
    else
    {
      unsigned int v14 = 0;
      unint64_t v11 = 0;
    }
  }
  else
  {
    unsigned int v14 = 0;
  }
  v8[1] = v11;
  *(_DWORD *)(v7 + 32) = v14;
  *unsigned int v8 = &unk_1ED74FE28;
  return result;
}

unint64_t _dispatch_mach_handoff_context(unsigned int a1)
{
  unint64_t v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    unint64_t v2 = *(void *)v2;
    if (!v2) {
      goto LABEL_10;
    }
  }
  while (*(char **)(v2 + 8) != "mach_msg");
  uint64_t v3 = *(atomic_uint **)(v2 + 16);
  if (!v3) {
LABEL_10:
  }
    _dispatch_mach_handoff_context_cold_1();
  if (*(void *)(*(void *)v3 + 40) == 515)
  {
    uint64_t v3 = (atomic_uint *)_dispatch_calloc(1uLL, 0x50uLL);
    *(void *)(v2 + 16) = v3;
    v3[18] = 1;
  }
  else
  {
    atomic_fetch_add_explicit(v3 + 18, 1u, memory_order_relaxed);
  }
  if (*((void *)v3 + 7)) {
    _dispatch_mach_handoff_context_cold_2();
  }
  *((void *)v3 + 7) = a1;
  return v2;
}

uint64_t _dispatch_mach_handoff_set_wlh(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (void *)(a2 + 24);
  if (*(void *)(a2 + 24))
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if ((*(_DWORD *)(a2 + 80) & 0x400000) != 0)
      {
        int v6 = 0;
        unint64_t v7 = (atomic_uint *)(a2 + 100);
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 100), (unsigned int *)&v6, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
        if (v6)
        {
          uint64_t v19 = result;
          unint64_t v15 = StatusReg;
          uint64_t v17 = a2;
          unint64_t v11 = (atomic_uint *)(a2 + 100);
          int v13 = v2;
          _dispatch_unfair_lock_lock_slow(a2 + 100);
          unint64_t v2 = v13;
          unint64_t StatusReg = v15;
          unint64_t v7 = v11;
          a2 = v17;
          uint64_t result = v19;
        }
        atomic_fetch_and_explicit((atomic_uint *volatile)(a2 + 80), 0xFFBFFFFF, memory_order_relaxed);
        unsigned int v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        unsigned int v9 = atomic_exchange_explicit(v7, 0, memory_order_release);
        if (v9 != v8)
        {
          uint64_t v18 = result;
          unint64_t v14 = StatusReg;
          uint64_t v16 = a2;
          char v10 = v9;
          uint64_t v12 = v2;
          _dispatch_unfair_lock_unlock_slow((uint64_t)v7, v9);
          unint64_t v2 = v12;
          unint64_t StatusReg = v14;
          a2 = v16;
          uint64_t result = v18;
          if ((v10 & 2) != 0 && (*(void *)(v14 + 200) & 0xF0000) == 0) {
            *(void *)(v14 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(v14 + 200) & 0xFFF0FFFFLL | 0x10000;
          }
        }
      }
      if ((*(void *)(a2 + 56) & 0x2000000000) != 0) {
        break;
      }
      a2 = *v2;
      uint64_t v4 = *v2;
      uint64_t v5 = *(void *)(v4 + 24);
      unint64_t v2 = (void *)(v4 + 24);
      if (!v5) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    a2 = 0;
  }
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t *dispatch_mach_handoff_reply(atomic_uint *a1, unsigned int a2, void *a3)
{
  unint64_t v5 = _dispatch_mach_handoff_context(a2);
  int v6 = *(uint64_t **)(v5 + 16);
  _dispatch_mach_handoff_set_wlh((uint64_t)v6, (uint64_t)a1);
  if (a1[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(a1 + 2, 1u, memory_order_relaxed) <= 0) {
    dispatch_set_target_queue_cold_2();
  }
  *(void *)(v5 + 24) = a1;
  unint64_t v7 = _dispatch_Block_copy(a3);
  unsigned int v8 = (uint64_t (*)())a3[2];
  if (!v8)
  {
    if (_dispatch_block_special_invoke) {
      goto LABEL_5;
    }
LABEL_17:
    uint64_t *v6 = 276;
    v6[5] = (uint64_t)v7;
    uint64_t result = _dispatch_continuation_init_slow(v6, a1, 0);
    goto LABEL_15;
  }
  if (_dispatch_block_special_invoke == v8) {
    goto LABEL_17;
  }
LABEL_5:
  uint64_t *v6 = 276;
  v6[4] = (uint64_t)_dispatch_call_block_and_release;
  v6[5] = (uint64_t)v7;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v10 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  if (v10 >= 0x10FF) {
    unint64_t v10 = 4351;
  }
  uint64_t v11 = *(void *)(StatusReg + 224);
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  v6[3] = v11;
  if (v10)
  {
    atomic_uint v12 = a1[21];
    if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
    {
      uint64_t result = (uint64_t *)(__clz(__rbit32(v10 >> 8)) + 1);
    }
    else
    {
      uint64_t result = 0;
      unint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  v6[1] = v10;
LABEL_15:
  *(_DWORD *)(v5 + 32) = result;
  v6[6] = *v6;
  uint64_t *v6 = (uint64_t)&unk_1ED74FE28;
  return result;
}

double _dispatch_mach_ipc_handoff_invoke(uint64_t a1, uint64_t a2, int a3)
{
  v22[1] = "mach_msg";
  _OWORD v22[2] = a1;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v7 = *(_DWORD *)(a1 + 56);
  __swp(v3, (unsigned int *)(a1 + 64));
  if (v3)
  {
    if (v3) {
      uint64_t v3 = ~v3;
    }
    else {
      _dispatch_sync_ipc_handoff_begin(v3, v7, a1 + 64);
    }
  }
  *(void *)(a1 + 16) = -1985229329;
  *(void *)(a1 + 56) = 0;
  v22[0] = StatusReg[23];
  StatusReg[23] = v22;
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = -1;
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9 == -1)
  {
    unint64_t v16 = 0;
  }
  else
  {
    uint64_t v10 = StatusReg[25];
    if (((v10 >> 8) & 0xF) != 0) {
      uint64_t v11 = 256 << ((BYTE1(v10) & 0xFu) - 1);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    unint64_t v13 = v9 & 0xFFFFFF;
    if ((v9 & 0xFFFFFF) != 0)
    {
      unint64_t v14 = v11 & 0xFFFFFF00;
      if ((v10 & 0x44000000) == 0 && (*(void *)(a1 + 8) & 0x10000000) == 0) {
        unint64_t v16 = v12;
      }
      else {
        unint64_t v16 = v9 & 0xFFFFFF;
      }
      if (v13 < v14) {
        unint64_t v16 = v12;
      }
    }
    else if ((unsigned __int16)v10 >> 12)
    {
      unint64_t v16 = (256 << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v16 = v11 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  unint64_t v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17) {
      goto LABEL_36;
    }
    unint64_t v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_22;
  }
  if (v17)
  {
LABEL_36:
    _dispatch_set_priority_and_voucher_slow(v17, v8, 6);
    if ((a3 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_37;
  }
LABEL_22:
  if (v8 == -1) {
    goto LABEL_26;
  }
  if (StatusReg[28] != v8)
  {
    unint64_t v17 = 0;
    goto LABEL_36;
  }
  if (v8 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1) {
    -[OS_voucher release]();
  }
LABEL_26:
  if ((a3 & 0x1000000) == 0)
  {
LABEL_27:
    uint64_t v19 = 0;
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v19 = (void *)MEMORY[0x18C121B40]();
LABEL_38:
  _dispatch_client_callout(*(void *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
  if (v19) {
  uint64_t v21 = v23;
  }
  StatusReg[23] = v22[0];
  if (v21)
  {
    _dispatch_mach_ipc_handoff_async((uint64_t)v22);
  }
  else if (!atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 72), 0xFFFFFFFF, memory_order_relaxed))
  {
    free((void *)a1);
  }
  if (v3) {
    return _dispatch_sync_ipc_handoff_end(v3, v7);
  }
  return result;
}

void *_dispatch_mach_ipc_handoff_async(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24), v2, *(unsigned int *)(a1 + 32));
  if (v4)
  {
    _dispatch_sync_ipc_handoff_begin(v4, v3, v2 + 64);
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v2 + 64), &v6, ~v4, memory_order_relaxed, memory_order_relaxed);
  }
  if (!atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 72), 0xFFFFFFFF, memory_order_relaxed)) {
    free((void *)v2);
  }
  unsigned int v7 = *(void **)(a1 + 24);

  return _os_object_release_internal(v7, v5);
}

void _dispatch_mach_msg_invoke(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = StatusReg[20];
  unsigned int v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *v7;
  unsigned int v8 = *(_DWORD *)(a1 + 48);
  unsigned int v9 = v8 & 0xFFFFC000;
  uint64_t v10 = 3;
  if (v8) {
    uint64_t v10 = 4;
  }
  if (v9 == -117964800) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v9 == -117964800) {
    uint64_t v12 = v8 & 0x3FFF;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  v25[1] = "mach_msg";
  v25[2] = a1;
  v25[0] = StatusReg[23];
  StatusReg[23] = v25;
  uint64_t v13 = *(void *)(v6 + 88);
  *(void *)(a1 + 16) = -1985229329;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  if (v15 == -1)
  {
    unint64_t v18 = 0;
  }
  else
  {
    uint64_t v16 = StatusReg[25];
    if (((v16 >> 8) & 0xF) != 0) {
      uint64_t v17 = 256 << ((BYTE1(v16) & 0xFu) - 1);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = v15 & 0xFFFFFF;
    if (v18)
    {
      if (v18 < (v17 & 0xFFFFFF00)) {
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      }
    }
    else if ((unsigned __int16)v16 >> 12)
    {
      unint64_t v18 = (256 << (((unsigned __int16)v16 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v18 = v17 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  unint64_t v19 = v18 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v20 = StatusReg[4];
  if ((v20 & 0x1000000) != 0)
  {
    if (v19)
    {
LABEL_53:
      _dispatch_set_priority_and_voucher_slow(v19, v14, 7);
      goto LABEL_24;
    }
    unint64_t v19 = v20 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v19 == (v20 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_20;
  }
  if (v19) {
    goto LABEL_53;
  }
LABEL_20:
  if (v14 == -1) {
    goto LABEL_24;
  }
  if (StatusReg[28] != v14)
  {
    unint64_t v19 = 0;
    goto LABEL_53;
  }
  if (v14 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_24:
  uint64_t v21 = 0;
  *(void *)(a1 + 64) = 0;
  if ((a3 & 0x1000000) != 0) {
    uint64_t v21 = (void *)MEMORY[0x18C121B40]();
  }
  if ((a3 & 4) != 0)
  {
    _dispatch_client_callout3(*(void *)(v13 + 48), v12, a1, *((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 3));
    if (!v21) {
      goto LABEL_38;
    }
  }
  else
  {
    if ((*(_WORD *)(v6 + 116) & 4) == 0) {
      _dispatch_mach_connect_invoke(v6);
    }
    if (v12 == 2 && (*(_DWORD *)(v6 + 80) & 0x10000000) != 0)
    {
      uint64_t v24 = (mach_msg_header_t *)(a1 + 88);
      if (*(_DWORD *)(a1 + 72)) {
        uint64_t v24 = *(mach_msg_header_t **)&v24->msgh_bits;
      }
      mach_msg_destroy(v24);
      if (!v21) {
        goto LABEL_38;
      }
    }
    else
    {
      if (*(void *)(v13 + 40)) {
        uint64_t v22 = *(uint64_t (**)(void))(v13 + 40);
      }
      else {
        uint64_t v22 = 0;
      }
      _dispatch_client_callout4(*(void *)(v13 + 48), v12, a1, v11, v22);
      if (!v21) {
        goto LABEL_38;
      }
    }
  }
LABEL_38:
  dispatch_release((dispatch_object_t)a1);
  uint64_t v23 = v26;
  StatusReg[23] = v25[0];
  if (v23) {
    _dispatch_mach_ipc_handoff_async((uint64_t)v25);
  }
  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_barrier_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (v6 == 1024)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v8 = *(void *)(StatusReg + 160);
    unsigned int v9 = *(_OWORD **)(StatusReg + 168);
    *(_OWORD *)(StatusReg + 16_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *v9;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(v5 + 88);
  if ((*(_WORD *)(v5 + 116) & 4) == 0)
  {
    if ((a3 & 0x1000000) != 0)
    {
      uint64_t v29 = (void *)MEMORY[0x18C121B40]();
      _dispatch_mach_connect_invoke(v5);
    }
    else
    {
      _dispatch_mach_connect_invoke(v5);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = -1;
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12 == -1)
  {
    unint64_t v20 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    if (((v13 >> 8) & 0xF) != 0) {
      uint64_t v14 = 256 << ((BYTE1(v13) & 0xFu) - 1);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = v14 & 0xFFFFFFFFFFFFFF00 | v13;
    unint64_t v16 = v12 & 0xFFFFFF;
    if ((v12 & 0xFFFFFF) != 0)
    {
      unint64_t v17 = v14 & 0xFFFFFF00;
      uint64_t v18 = v12 & 0x10000000;
      if ((v13 & 0x44000000) == 0 && v18 == 0) {
        unint64_t v20 = v15;
      }
      else {
        unint64_t v20 = v16;
      }
      if (v16 < v17) {
        unint64_t v20 = v15;
      }
    }
    else if ((unsigned __int16)v13 >> 12)
    {
      unint64_t v20 = (256 << (((unsigned __int16)v13 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v20 = v14 & 0xFFFFFFFFFFFFFF00 | v13;
    }
  }
  unint64_t v21 = v20 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v22 = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v23 = v22[4];
  if ((v23 & 0x1000000) != 0)
  {
    if (v21)
    {
LABEL_54:
      _dispatch_set_priority_and_voucher_slow(v21, v11, 6);
      goto LABEL_26;
    }
    unint64_t v21 = v23 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v21 == (v23 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_22;
  }
  if (v21) {
    goto LABEL_54;
  }
LABEL_22:
  if (v11 == -1) {
    goto LABEL_26;
  }
  if (v22[28] != v11)
  {
    unint64_t v21 = 0;
    goto LABEL_54;
  }
  if (v11 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    return;
  }
LABEL_26:
  uint64_t v24 = v22[22];
  if (v24) {
    int v25 = *(_DWORD *)(v24 + 8) + 1;
  }
  else {
    int v25 = 1;
  }
  uint64_t v26 = a1;
  if (v25 <= _dispatch_continuation_cache_limit)
  {
    uint64_t v26 = 0;
    *(void *)(a1 + 16) = v24;
    *(_DWORD *)(a1 + 8) = v25;
    v22[22] = a1;
  }
  if ((a3 & 0x1000000) != 0) {
    uint64_t v27 = (void *)MEMORY[0x18C121B40]();
  }
  else {
    uint64_t v27 = 0;
  }
  _dispatch_client_callout(*(void *)(a1 + 40), *(uint64_t (**)(void))(a1 + 32));
  if (*(void *)(v10 + 40)) {
    Class v28 = *(uint64_t (**)(void))(v10 + 40);
  }
  else {
    Class v28 = 0;
  }
  _dispatch_client_callout4(*(void *)(v10 + 48), 6, 0, 0, v28);
  if (v27) {
  if (v26)
  }
    _dispatch_continuation_free_to_cache_limit(v26);
  if (v6 == 1024)
  {
    v22[20] = v8;
    v22[21] = v9;
  }
}

uint64_t _dispatch_mach_connect_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (*(void *)(v2 + 40)) {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = _dispatch_client_callout4(*(void *)(v2 + 48), 1, 0, 0, v3);
  *(_WORD *)(a1 + 116) |= 4u;
  return result;
}

atomic_uint *dispatch_mach_send_barrier_f(atomic_uint *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v7 = (atomic_uint *)StatusReg[22];
  if (v7)
  {
    StatusReg[22] = *((void *)v7 + 2);
  }
  else
  {
    uint64_t result = (atomic_uint *)_dispatch_continuation_alloc_from_heap();
    unsigned int v7 = result;
  }
  *(void *)unsigned int v7 = 260;
  *((void *)v7 + 4) = a3;
  *((void *)v7 + 5) = a2;
  unint64_t v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF) {
    unint64_t v8 = 4351;
  }
  uint64_t v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    *((void *)v7 + 3) = v9;
    if (v8)
    {
      int v10 = (v5[21] >> 30) & 1;
      if ((v5[21] & 0xFFF) == 0) {
        int v10 = 1;
      }
      if (!v10) {
        unint64_t v8 = 0;
      }
    }
    *((void *)v7 + 6) = *(void *)v7;
    *((void *)v7 + 7) = v5;
    *(void *)unsigned int v7 = &unk_1ED74FC78;
    *((void *)v7 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v8;
    unsigned int v11 = __clz(__rbit32(v8 >> 8));
    if (v8 >= 0x100) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = 0;
    }
    return _dispatch_mach_send_push(v5, (void **)v7, v12);
  }
  return result;
}

atomic_uint *dispatch_mach_send_barrier(atomic_uint *a1, uint64_t (**aBlock)())
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (uint64_t *)StatusReg[22];
  if (v5) {
    StatusReg[22] = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  uint64_t result = (atomic_uint *)_dispatch_Block_copy(aBlock);
  unsigned int v7 = aBlock[2];
  if (!v7)
  {
    if (_dispatch_block_special_invoke) {
      goto LABEL_5;
    }
LABEL_22:
    *uint64_t v5 = 276;
    v5[5] = (uint64_t)result;
    _dispatch_continuation_init_slow(v5, a1, 0);
    unint64_t v8 = v5[1];
    goto LABEL_15;
  }
  if (_dispatch_block_special_invoke == v7) {
    goto LABEL_22;
  }
LABEL_5:
  *uint64_t v5 = 276;
  v5[4] = (uint64_t)_dispatch_call_block_and_release;
  v5[5] = (uint64_t)result;
  unint64_t v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF) {
    unint64_t v8 = 4351;
  }
  uint64_t v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
    return result;
  }
  _OWORD v5[3] = v9;
  if (v8)
  {
    int v10 = (a1[21] >> 30) & 1;
    if ((a1[21] & 0xFFF) == 0) {
      int v10 = 1;
    }
    if (!v10) {
      unint64_t v8 = 0;
    }
  }
  v5[1] = v8;
LABEL_15:
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *uint64_t v5 = (uint64_t)&unk_1ED74FC78;
  unsigned int v12 = (v8 >> 8) & 0x3FFF;
  BOOL v11 = v12 == 0;
  unsigned int v13 = __clz(__rbit32(v12));
  if (v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13 + 1;
  }

  return _dispatch_mach_send_push(a1, (void **)v5, v14);
}

_DWORD *dispatch_mach_receive_barrier_f(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v7 = (void *)StatusReg[22];
  if (v7)
  {
    StatusReg[22] = v7[2];
  }
  else
  {
    uint64_t result = _dispatch_continuation_alloc_from_heap();
    unsigned int v7 = result;
  }
  *unsigned int v7 = 260;
  v7[4] = a3;
  v7[5] = a2;
  unint64_t v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF) {
    unint64_t v8 = 4351;
  }
  uint64_t v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
  }
  else
  {
    v7[3] = v9;
    if (v8)
    {
      int v10 = v5[21];
      if ((v10 & 0x40000000) == 0 && (v10 & 0xFFF) != 0) {
        unint64_t v8 = 0;
      }
    }
    v7[1] = v8;
    v7[6] = *v7;
    v7[7] = v5;
    *unsigned int v7 = &unk_1ED74FCC0;
    BOOL v11 = *(uint64_t (**)(_DWORD *))(*(void *)v5 + 88);
    return (_DWORD *)v11(v5);
  }
  return result;
}

void *dispatch_mach_receive_barrier(atomic_uint *a1, uint64_t (**aBlock)())
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (uint64_t *)StatusReg[22];
  if (v5) {
    StatusReg[22] = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  uint64_t result = _dispatch_Block_copy(aBlock);
  unsigned int v7 = aBlock[2];
  if (!v7)
  {
    if (_dispatch_block_special_invoke) {
      goto LABEL_5;
    }
LABEL_19:
    *uint64_t v5 = 276;
    v5[5] = (uint64_t)result;
    inited = _dispatch_continuation_init_slow(v5, a1, 0);
    goto LABEL_15;
  }
  if (_dispatch_block_special_invoke == v7) {
    goto LABEL_19;
  }
LABEL_5:
  *uint64_t v5 = 276;
  v5[4] = (uint64_t)_dispatch_call_block_and_release;
  v5[5] = (uint64_t)result;
  unint64_t v8 = StatusReg[4] & 0xFFFFFFLL;
  if (v8 >= 0x10FF) {
    unint64_t v8 = 4351;
  }
  uint64_t v9 = StatusReg[28];
  if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
    __break(1u);
    return result;
  }
  _OWORD v5[3] = v9;
  if (v8)
  {
    atomic_uint v10 = a1[21];
    if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
    {
      inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
    }
    else
    {
      inited = 0;
      unint64_t v8 = 0;
    }
  }
  else
  {
    inited = 0;
  }
  v5[1] = v8;
LABEL_15:
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *uint64_t v5 = (uint64_t)&unk_1ED74FCC0;
  unsigned int v12 = *(uint64_t (**)(atomic_uint *, uint64_t *, uint64_t *))(*(void *)a1 + 88);

  return (void *)v12(a1, v5, inited);
}

atomic_uint *dispatch_mach_cancel(atomic_uint *result, const char *a2)
{
  uint64_t v2 = result;
  if (result[2] == 0x7FFFFFFF || (int)atomic_fetch_add_explicit(result + 2, 1u, memory_order_relaxed) > 0)
  {
    if ((atomic_fetch_or_explicit(result + 20, 0x10000000u, memory_order_relaxed) & 0x10000000) == 0) {
      dispatch_mach_reconnect((uint64_t)result, 0, (dispatch_object_t)0xFFFFFFFFFFFFFFFFLL);
    }
    return (atomic_uint *)_os_object_release_internal(v2, a2);
  }
  else
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }
  return result;
}

uint64_t _dispatch_mach_activate(uint64_t a1)
{
  uint64_t result = _dispatch_lane_activate(a1);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
  {
    uint64_t v3 = 0;
    uint64_t result = _dispatch_queue_compute_priority_and_wlh(a1, &v3);
    if (result) {
      return _dispatch_mach_install(a1, v3, result);
    }
  }
  return result;
}

uint64_t _dispatch_mach_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  __int16 v6 = *(_WORD *)(a1 + 116);
  *(_WORD *)(a1 + 116) = v6 | 1;
  uint64_t result = *(unsigned int *)(*(void *)(a1 + 120) + 88);
  if ((result & 0x80000000) != 0) {
    _dispatch_mach_install_cold_1(result);
  }
  if (*(_DWORD *)(a1 + 84))
  {
    if ((v4 & 0x10000000) != 0) {
      return result;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 84) = a3;
    if ((v4 & 0x10000000) != 0) {
      return result;
    }
  }
  if ((v6 & 0x10) != 0)
  {
    uint64_t result = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 4))(*(void *)(v5 + 48));
    if (result)
    {
      atomic_uint v10 = off_1ED7504A0((uint64_t)&_dispatch_xpc_type_sigterm, 15, 0);
      *((void *)v10 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = ~a1;
      *(void *)(a1 + 128) = v10;
      uint64_t result = _dispatch_unote_register((uint64_t)v10, a2, a3);
    }
  }
  if (*(_DWORD *)(v5 + 24))
  {
    return _dispatch_unote_register(v5, a2, a3);
  }
  return result;
}

void _dispatch_mach_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v67 = 0;
  if ((a3 & 3) == 0) {
    *(void *)(a1 + 16) = -1985229329;
  }
  if ((a3 & 2) != 0)
  {
    uint64_t v67 = 0x40020000000001;
    int v6 = a3 & 0x40000;
  }
  else
  {
    unint64_t v45 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v47 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
    int v6 = a3 & 0x40000;
    unint64_t v48 = 0xFFE00000FFFFFFFCLL;
    if ((a3 & 0x40000) != 0)
    {
      uint64_t v49 = 0x4000000000;
    }
    else
    {
      unint64_t v48 = 0xFFE00040FFFFFFFCLL;
      uint64_t v49 = 1;
    }
    if (a3) {
      unint64_t v50 = 0xFFE00040FFFFFFFCLL;
    }
    else {
      unint64_t v50 = v48;
    }
    unsigned int v51 = *(_DWORD *)(StatusReg + 200);
    unsigned int v52 = (v51 >> 8) & 0xF;
    unsigned int v53 = (unsigned __int16)v51 >> 12;
    unsigned int v54 = HIWORD(v51) & 0xF;
    if (v52 <= v53) {
      unsigned int v52 = v53;
    }
    if (v52 > v54) {
      unsigned int v54 = v52;
    }
LABEL_138:
    for (unint64_t i = *(void *)(a1 + 56); ; unint64_t i = v60)
    {
      while ((i & v50) != 0)
      {
        if ((a3 & 1) != 0
          || (unint64_t v61 = i,
              atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v61, i ^ v49, memory_order_acquire, memory_order_acquire), v61 == i))
        {
          uint64_t v67 = 0;
          goto LABEL_157;
        }
        unint64_t i = v61;
      }
      if ((i & 0x1000000000) != 0)
      {
        uint64_t v56 = HIDWORD(i) & 7;
        if (v56 > v54)
        {
          _pthread_workqueue_override_start_direct();
          unsigned int v62 = *(_DWORD *)(StatusReg + 200);
          unsigned int v54 = v56;
          if ((HIWORD(v62) & 0xF) < v56)
          {
            *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v62 & 0xFFF0FFFF | (v56 << 16);
            unsigned int v54 = v56;
          }
          goto LABEL_138;
        }
      }
      uint64_t v57 = (i >> 40) & 1;
      if (!((v45 + i) >> 53)) {
        LODWORD(v57) = 1;
      }
      uint64_t v58 = v57 ? 0x60000000000000 : 0x20000000000000;
      unint64_t v59 = v47 | i & 0x7700000001 | v58;
      unint64_t v60 = i;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v60, v59, memory_order_acquire, memory_order_acquire);
      if (v60 == i) {
        break;
      }
    }
    uint64_t v63 = 0x60000000000000;
    if ((a3 & 1) == 0) {
      uint64_t v63 = v49 | 0x60000000000000;
    }
    uint64_t v67 = (v59 & v63) - (i & 0x3FFE0000000000);
    uint64_t v4 = a2;
    if (!v67) {
      goto LABEL_157;
    }
  }
  if (v6)
  {
    uint64_t v64 = 0;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 84);
    unint64_t v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v9 = *(void *)(v8 + 200);
    if (v9)
    {
      unsigned int v10 = v7 & 0xFFF;
      if ((v7 & 0xFFF) != 0)
      {
        if (((unsigned __int16)v9 & 0xFFFu) > v10) {
          unsigned int v10 = v9 & 0xFFF;
        }
        if ((unsigned __int16)v7 >> 12 <= v10 >> 8) {
          int v11 = 0x40000000;
        }
        else {
          int v11 = 1140912128;
        }
        unsigned int v12 = v9 & 0x880F0000 | v10 | v11 & v7;
      }
      else
      {
        unsigned int v13 = v9 | 0x40000000;
        if ((v9 & 0xFFF) == 0) {
          unsigned int v13 = *(void *)(v8 + 200);
        }
        unsigned int v14 = (unsigned __int16)v7 >> 12;
        unsigned int v12 = v13 & 0xFFFF0FFF | v7 & 0x400F000;
        if (v14 <= ((v13 >> 8) & 0xF)) {
          unsigned int v12 = v13;
        }
      }
    }
    else
    {
      unsigned int v12 = v7 & 0xFFF0FFFF;
    }
    *(void *)(v8 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v12;
    uint64_t v64 = v9 & 0xFFF0FFFF;
  }
  if ((a3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0) {
    atomic_fetch_and_explicit((atomic_uint *volatile)(a1 + 80), 0xFFBFFFFF, memory_order_relaxed);
  }
  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0) {
    unint64_t v15 = (const char *)((*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8);
  }
  else {
    unint64_t v15 = (const char *)(a3 | 8u);
  }
  unsigned int v16 = v15 & 0x1000002;
  unint64_t v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (2)
  {
    if (v16 == 2) {
      _dispatch_last_resort_autorelease_pool_push(v4);
    }
    unint64_t v19 = (uint64_t *)(v17 + 160);
    uint64_t v18 = *(__objc2_class ***)(v17 + 160);
    uint64_t v20 = *(void *)(a1 + 120);
    unint64_t v21 = *(void **)(a1 + 88);
    if ((v15 & 0x40000) == 0 && v21)
    {
      uint64_t v22 = *(void *)(v17 + 232);
      uint64_t v23 = v22 ? *(void *)(v22 + 24) : -4;
      unint64_t v24 = v21[2] & 0xFFFFFFFFFFFFFFFCLL;
      BOOL v25 = v24 == -4 || v24 == 0;
      if (!v25 && v23 != v24) {
        _dispatch_mach_handle_wlh_change(a1);
      }
    }
    if ((*(_WORD *)(a1 + 116) & 1) == 0)
    {
      if ((v15 & 0x40000) != 0)
      {
        uint64_t v27 = *(void *)(a1 + 24);
        goto LABEL_84;
      }
      if ((v15 & 0x10000) != 0) {
        unsigned int v40 = *(_DWORD *)(v17 + 200);
      }
      else {
        unsigned int v40 = 0x2000000;
      }
      uint64_t v41 = *(void *)(v17 + 232);
      if (v41) {
        uint64_t v42 = *(void *)(v41 + 24);
      }
      else {
        uint64_t v42 = -4;
      }
      _dispatch_mach_install(a1, v42, v40);
    }
    if (!*(void *)(a1 + 48))
    {
      uint64_t v27 = 0;
      goto LABEL_47;
    }
    uint64_t v27 = *(void *)(a1 + 24);
    if (v18 != (__objc2_class **)v27) {
      goto LABEL_47;
    }
    while (1)
    {
      while (1)
      {
        _dispatch_lane_serial_drain(a1, a2, v15, &v67);
        uint64_t v27 = v28;
LABEL_47:
        int v29 = *(_DWORD *)(a1 + 80);
        if (v27 || (v29 & 0x10000000) != 0) {
          break;
        }
        if (!v21[2] || (v21[2] & 3) != 0) {
          break;
        }
        _dispatch_unote_resume(v21);
        if (v18 == *(__objc2_class ***)(a1 + 24)
          && !v18[3]
          && !*(void *)(v20 + 72)
          && (*((_DWORD *)v18 + 21) & 0x80000000) != 0)
        {
          if (*(void *)(v17 + 40))
          {
            uint64_t v38 = *(void *)(v17 + 232);
            if (v38)
            {
              uint64_t v39 = *(void *)(v38 + 24);
              if (v39 != -4 && v39 == (v21[2] & 0xFFFFFFFFFFFFFFFCLL))
              {
                _dispatch_event_loop_drain(1);
                if (*(void *)(a1 + 48)) {
                  continue;
                }
              }
            }
          }
        }
        int v29 = *(_DWORD *)(a1 + 80);
        break;
      }
      if (!*(void *)(v20 + 72)) {
        goto LABEL_74;
      }
      if ((*(unsigned char *)(v20 + 30) & 1) != 0 && !*(_DWORD *)(v20 + 88)) {
        goto LABEL_70;
      }
      BOOL v31 = *(_DWORD *)(v20 + 88) ? *(void *)(v20 + 16) != 0 : *(_WORD *)(a1 + 118) & 1;
      if (v31 && v18 != &_dispatch_mgr_q) {
        break;
      }
      _dispatch_mach_send_invoke(a1, v15, 4 * (v18 != &_dispatch_mgr_q));
      if (v27) {
        goto LABEL_74;
      }
      if (*(void *)(a1 + 48))
      {
        uint64_t v27 = *(void *)(a1 + 24);
LABEL_70:
        if (v27) {
          goto LABEL_74;
        }
      }
      if (*(void *)(v20 + 72)) {
        uint64_t v27 = -1;
      }
      else {
        uint64_t v27 = 0;
      }
LABEL_74:
      if ((v29 & 0x10000000) == 0) {
        goto LABEL_84;
      }
      if ((v29 & 0x80000000) == 0)
      {
        _dispatch_mach_cancel(a1);
        if ((v32 & 1) == 0)
        {
          if (!v27) {
            uint64_t v27 = -1;
          }
          goto LABEL_84;
        }
      }
      if ((*(_WORD *)(a1 + 116) & 8) != 0) {
        goto LABEL_84;
      }
      if (v18 != *(__objc2_class ***)(a1 + 24))
      {
        if (!v27) {
          uint64_t v27 = *(void *)(a1 + 24);
        }
        goto LABEL_84;
      }
      if (*(void *)(a1 + 56) >> 55)
      {
        uint64_t v27 = (uint64_t)v18;
        goto LABEL_84;
      }
      if (!*(void *)(a1 + 48))
      {
        _dispatch_mach_cancel_invoke(a1, (int)v15);
        goto LABEL_84;
      }
    }
    if (!v27) {
      uint64_t v27 = (uint64_t)&_dispatch_mgr_q;
    }
LABEL_84:
    unsigned int v16 = v15 & 0x1000002;
    uint64_t v4 = a2;
    if ((v15 & 0x1000002) == 2)
    {
      long long v66 = *(_OWORD *)v19;
      *(void *)(v17 + 16_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a1;
      *(void *)(v17 + 168) = &v66;
      _dispatch_last_resort_autorelease_pool_pop(a2);
      *(_OWORD *)unint64_t v19 = v66;
    }
    if ((unint64_t)(v27 + 1) > 1) {
      break;
    }
    uint64_t v33 = v67;
    unint64_t v34 = *(void *)(a1 + 56);
    while (2)
    {
      unint64_t v35 = v34;
      unint64_t v36 = v34 - v33;
      unint64_t v37 = v36 & 0xFFFFFFF700000001;
      if (v35 >> 55)
      {
LABEL_92:
        unint64_t v34 = v35;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 56), &v34, v37, memory_order_release, memory_order_relaxed);
        if (v34 == v35)
        {
          if ((~v35 & 0x1800000000) == 0)
          {
            uint64_t v43 = HIDWORD(v35) & 7;
            unsigned int v44 = *(_DWORD *)(v17 + 200);
            if ((HIWORD(v44) & 0xF) < v43) {
              *(void *)(v17 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v44 & 0xFFF0FFFF | (v43 << 16);
            }
          }
          uint64_t v27 = 0;
          uint64_t v67 = 0;
          goto LABEL_124;
        }
        continue;
      }
      break;
    }
    if ((v35 & 0x8000000000) == 0)
    {
      if (v27) {
        unint64_t v37 = v36 & 0xFFFFFF7700000001 | 0x8000000000;
      }
      else {
        unint64_t v37 = v36 & 0xFFFFFFF000000001;
      }
      goto LABEL_92;
    }
    atomic_fetch_xor_explicit((atomic_ullong *volatile)(a1 + 56), 0x8000000000uLL, memory_order_acquire);
    uint64_t v27 = *v19;
    if ((a3 & 1) != 0 || (*(void *)(*(void *)*v19 + 40) & 0x10000) != 0) {
      continue;
    }
    break;
  }
LABEL_124:
  if ((v15 & 0x40000) == 0) {
    *(void *)(v17 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(v17 + 200) & 0xF0000 | v64;
  }
  if (v27)
  {
    _dispatch_queue_invoke_finish((atomic_ullong *)a1, a2, (__objc2_class **)v27, v67);
    return;
  }
LABEL_157:
  _os_object_release_internal_n((void *)a1, (const char *)2);
}

void _dispatch_mach_wakeup(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  int v4 = *(_DWORD *)(a1 + 80);
  if ((*(_WORD *)(a1 + 116) & 1) == 0 || *(void *)(a1 + 48)) {
    goto LABEL_3;
  }
  if (!*(void *)(v3 + 72))
  {
    uint64_t v5 = 0;
    if ((v4 & 0x10000000) == 0 || !(a3 & 0x10 | ~v4 & 0x50000000)) {
      goto LABEL_6;
    }
    if ((*(_WORD *)(a1 + 116) & 8) == 0)
    {
LABEL_3:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q) {
        uint64_t v5 = (uint64_t)&_dispatch_mgr_q;
      }
      else {
        uint64_t v5 = 1;
      }
      goto LABEL_6;
    }
LABEL_16:
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)(v3 + 64) > 3u || (*(unsigned char *)(v3 + 30) & 1) != 0 && !*(_DWORD *)(v3 + 88)) {
    goto LABEL_16;
  }
  if (*(_DWORD *)(v3 + 88)) {
    int v6 = *(void *)(v3 + 16) != 0;
  }
  else {
    int v6 = *(_WORD *)(a1 + 118) & 1;
  }
  uint64_t v5 = (uint64_t)&_dispatch_mgr_q;
  if (v6) {
    BOOL v7 = &_dispatch_mgr_q == (__objc2_class **)1;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_3;
  }
LABEL_6:
  _dispatch_queue_wakeup(a1, a2, a3, v5);
}

uint64_t _dispatch_xpc_sigterm_merge_evt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = ~*(void *)(a1 + 8);
  _dispatch_barrier_async_detached_f(v5, v5, (uint64_t)_dispatch_mach_sigterm_invoke);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80);
  unsigned int v7 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = 0;
  }

  return v6(v5, v8, 19);
}

uint64_t _dispatch_mach_sigterm_invoke(uint64_t a1)
{
  uint64_t result = _dispatch_unote_unregister(*(void *)(a1 + 128), 5);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = *(void *)(v3 + 48);
    if (*(void *)(v3 + 40)) {
      uint64_t v5 = *(uint64_t (**)(void))(v3 + 40);
    }
    else {
      uint64_t v5 = 0;
    }
    return _dispatch_client_callout4(v4, 11, 0, 0, v5);
  }
  return result;
}

uint64_t dispatch_mach_msg_create(const void *a1, size_t a2, int a3, void *a4)
{
  if (a2 < 0x18 || (unsigned int v7 = a1) == 0 && a3) {
    dispatch_mach_msg_create_cold_1(a2);
  }
  if (a3)
  {
    uint64_t v8 = _dispatch_object_alloc(OS_dispatch_mach_msg, 96);
    *(void *)(v8 + 88) = v7;
    *(void *)(v8 + 16) = -1985229329;
    *(void *)(v8 + 24) = &unk_1EB1CE780;
    *(_DWORD *)(v8 + 72) = a3;
    *(void *)(v8 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a2;
    if (!a4) {
      return v8;
    }
    goto LABEL_12;
  }
  size_t v9 = a2 + 88;
  if (a2 - 8 >= 0xFFFFFFFFFFFFFFA0) {
    dispatch_mach_msg_create_cold_2(a2);
  }
  uint64_t v10 = _dispatch_object_alloc(OS_dispatch_mach_msg, v9);
  uint64_t v8 = v10;
  if (v7) {
    memcpy((void *)(v10 + 88), v7, a2);
  }
  *(void *)(v8 + 16) = -1985229329;
  *(void *)(v8 + 24) = &unk_1EB1CE780;
  *(_DWORD *)(v8 + 72) = 0;
  *(void *)(v8 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a2;
  if (a4)
  {
    unsigned int v7 = (const void *)(v8 + 88);
LABEL_12:
    *a4 = v7;
  }
  return v8;
}

void _dispatch_mach_msg_dispose(uint64_t a1, const char *a2)
{
  kern_return_t v7;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        -[OS_voucher release]();
      }
      _voucher_xref_dispose(v3, a2);
    }
    *(void *)(a1 + 64) = 0;
  }
  int v5 = *(_DWORD *)(a1 + 72);
  if (v5 == 2)
  {
    unsigned int v7 = mach_vm_deallocate(*MEMORY[0x1E4F14C48], *(void *)(a1 + 88), *(void *)(a1 + 80));
    if (v7)
    {
      _dispatch_bug(3000, v7);
    }
  }
  else if (v5 == 1)
  {
    int v6 = *(void **)(a1 + 88);
    free(v6);
  }
}

uint64_t dispatch_mach_msg_get_msg(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = *(void *)(a1 + 80);
  }
  int v2 = *(_DWORD *)(a1 + 72);
  uint64_t result = a1 + 88;
  if (v2) {
    return *(void *)result;
  }
  return result;
}

void _dispatch_mach_msg_async_reply_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unsigned int v7 = *(_DWORD *)(v6 + 48);
  uint64_t v8 = 3;
  if (v7) {
    uint64_t v8 = 4;
  }
  if (v7 >> 14 == 254944) {
    uint64_t v9 = v7 & 0x3FFF;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  v26[1] = "mach_msg";
  v26[2] = v6;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v26[0] = StatusReg[23];
  StatusReg[23] = v26;
  uint64_t v11 = *(void *)(v5 + 88);
  *(void *)(v6 + 16) = -1985229329;
  uint64_t v13 = *(void *)(v6 + 56);
  uint64_t v12 = *(void *)(v6 + 64);
  if (v13 == -1)
  {
    unint64_t v16 = 0;
  }
  else
  {
    uint64_t v14 = StatusReg[25];
    if (((v14 >> 8) & 0xF) != 0) {
      uint64_t v15 = 256 << ((BYTE1(v14) & 0xFu) - 1);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v13 & 0xFFFFFF;
    if (v16)
    {
      if (v16 < (v15 & 0xFFFFFF00)) {
        unint64_t v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
      }
    }
    else if ((unsigned __int16)v14 >> 12)
    {
      unint64_t v16 = (256 << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
    else
    {
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFF00 | StatusReg[25];
    }
  }
  unint64_t v17 = v16 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_45:
      _dispatch_set_priority_and_voucher_slow(v17, v12, 7);
      goto LABEL_21;
    }
    unint64_t v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }
  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_17;
  }
  if (v17) {
    goto LABEL_45;
  }
LABEL_17:
  if (v12 == -1) {
    goto LABEL_21;
  }
  if (StatusReg[28] != v12)
  {
    unint64_t v17 = 0;
    goto LABEL_45;
  }
  if (v12 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 12), 0xFFFFFFFF, memory_order_relaxed) <= 1)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
    __break(1u);
    goto LABEL_47;
  }
LABEL_21:
  unint64_t v19 = 0;
  *(void *)(v6 + 64) = 0;
  if ((a3 & 0x1000000) != 0) {
    unint64_t v19 = (void *)MEMORY[0x18C121B40]();
  }
  _dispatch_client_callout3(*(void *)(v11 + 48), v9, v6, *((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 3));
  if (v19) {
  dispatch_release((dispatch_object_t)v6);
  }
  uint64_t v21 = v27;
  StatusReg[23] = v26[0];
  if (v21) {
    _dispatch_mach_ipc_handoff_async((uint64_t)v26);
  }
  uint64_t v22 = *(atomic_uint **)(a1 + 56);
  if (v22[2] == 0x7FFFFFFF) {
    goto LABEL_29;
  }
  int add_explicit = atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release);
  if (add_explicit > 1) {
    goto LABEL_29;
  }
  if (add_explicit != 1)
  {
LABEL_47:
    qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  _os_object_dispose(v22, v20);
LABEL_29:
  uint64_t v24 = StatusReg[22];
  if (v24) {
    int v25 = *(_DWORD *)(v24 + 8) + 1;
  }
  else {
    int v25 = 1;
  }
  if (v25 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }
  else
  {
    *(void *)(a1 + 16) = v24;
    *(_DWORD *)(a1 + 8) = v25;
    StatusReg[22] = a1;
  }
}

uint64_t dispatch_mach_msg_get_filter_policy_id(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    dispatch_mach_msg_get_filter_policy_id_cold_1();
  }
  uint64_t v2 = a1 + 88;
  if (*(_DWORD *)(a1 + 72))
  {
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      dispatch_mach_msg_get_filter_policy_id_cold_4(a1);
    }
  }
  uint64_t v3 = (unsigned int *)(v2 + ((*(unsigned int *)(v2 + 4) + 3) & 0x1FFFFFFFCLL));
  if (*v3) {
    dispatch_mach_msg_get_filter_policy_id_cold_3(*v3);
  }
  uint64_t result = v3[1];
  if (result < 0x44) {
    dispatch_mach_msg_get_filter_policy_id_cold_2(result);
  }
  *a2 = v3[15];
  return result;
}

uint64_t dispatch_mig_server(uint64_t a1, uint64_t a2, unsigned int (*a3)(mach_msg_header_t *, mach_msg_header_t *))
{
  uint64_t v28 = a3;
  uint64_t v30 = *MEMORY[0x1E4F14BF8];
  mach_msg_option_t v4 = 117442818;
  size_t v5 = a2 + 68;
  uint64_t v29 = *(void *)(a1 + 88);
  MEMORY[0x1F41887A8](a1);
  unsigned int v7 = (mach_msg_header_t *)((char *)&v27 - ((v6 + 83) & 0xFFFFFFFFFFFFFFF0));
  bzero(v7, v5);
  v7[1].mach_port_t msgh_remote_port = 0;
  MEMORY[0x1F41887A8](v8);
  uint64_t v9 = v7;
  bzero(v7, v5);
  char v10 = 0;
  v7->msgh_size = 0;
  int v11 = 1000;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v13 = 117442818;
  while (1)
  {
    uint64_t v14 = v9;
    uint64_t v9 = v7;
    if (*(void *)(a1 + 56) >> 55) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
    }
    if (!v15 || (--v11, !v11))
    {
      if ((v4 & 1) == 0) {
        return 0;
      }
      v13 &= ~2u;
      v4 &= ~2u;
    }
    uint64_t v16 = mach_msg(v14, v4, v14->msgh_size, v5, *(_DWORD *)(v29 + 24), 0, 0);
    if (v16) {
      break;
    }
    if ((v13 & 2) == 0) {
      return 0;
    }
    unint64_t v17 = voucher_create_with_mach_msg(&v14->msgh_bits);
    uint64_t v19 = *(void *)(StatusReg + 224);
    if ((_DWORD *)v19 == v17) {
      goto LABEL_21;
    }
    *(void *)(StatusReg + 224) = v17;
    if (v17)
    {
      uint64_t v18 = (const char *)v17[8];
      if (!v19) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v18 = 0;
      if (!v19)
      {
LABEL_17:
        int v20 = 0;
        goto LABEL_18;
      }
    }
    int v20 = *(_DWORD *)(v19 + 32);
LABEL_18:
    if (v18 != -1 && v18 != v20) {
      _dispatch_set_priority_and_mach_voucher_slow(0, (int)v18);
    }
LABEL_21:
    if (v19)
    {
      int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          -[OS_voucher release]();
        }
        _voucher_xref_dispose(v19, v18);
      }
    }
    *(void *)&v7->mach_msg_bits_t msgh_bits = 0;
    *(void *)&v7->mach_port_t msgh_remote_port = 0;
    *(void *)&v7->mach_port_name_t msgh_voucher_port = 0;
    if (!v28(v14, v7)) {
      goto LABEL_28;
    }
    if ((v7->msgh_bits & 0x80000000) != 0) {
      goto LABEL_29;
    }
    mach_port_t msgh_remote_port = v7[1].msgh_remote_port;
    if (!msgh_remote_port) {
      goto LABEL_29;
    }
    if (msgh_remote_port == -305)
    {
      v7->mach_port_t msgh_remote_port = 0;
    }
    else
    {
LABEL_28:
      v14->mach_port_t msgh_remote_port = 0;
      mach_msg_destroy(v14);
    }
LABEL_29:
    mach_port_t v23 = v7->msgh_remote_port;
    char v10 = 1;
    unsigned int v7 = v14;
    mach_msg_option_t v4 = v13;
    if (v23)
    {
      if ((v9->msgh_bits & 0x1F) == 0x12) {
        int v24 = 1;
      }
      else {
        int v24 = 17;
      }
      mach_msg_option_t v4 = v24 | v13;
      unsigned int v7 = v14;
    }
  }
  uint64_t v25 = v16;
  if ((v16 - 268435459) < 2)
  {
    _dispatch_mig_consume_unsent_message(v14);
  }
  else if (v16 != 268451842)
  {
    if (v16 == 268451843)
    {
      if (v10 & 1 | (v14->msgh_remote_port != 0)) {
        return 0;
      }
      else {
        return 268451843;
      }
    }
    else
    {
      _dispatch_bug_mach_client("dispatch_mig_server: mach_msg() failed", v16);
    }
  }
  return v25;
}

void _dispatch_mig_consume_unsent_message(mach_msg_header_t *a1)
{
  kern_return_t v4;
  uint64_t vars8;

  mach_port_name_t msgh_local_port = a1->msgh_local_port;
  if (msgh_local_port - 1 <= 0xFFFFFFFD)
  {
    mach_msg_bits_t v3 = (a1->msgh_bits >> 8) & 0x1F;
    if (v3 - 17 >= 2)
    {
      if (v3 != 16) {
        goto LABEL_10;
      }
      mach_msg_option_t v4 = mach_port_mod_refs(*MEMORY[0x1E4F14C48], msgh_local_port, 1u, -1);
    }
    else
    {
      mach_msg_option_t v4 = mach_port_deallocate(*MEMORY[0x1E4F14C48], msgh_local_port);
    }
    if (v4 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v4) {
      _dispatch_bug(3170, v4);
    }
  }
LABEL_10:

  mach_msg_destroy(a1);
}

uint64_t dispatch_mach_mig_demux(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  mach_msg_return_t v21;
  mach_port_name_t msgh_local_port;
  int v23;
  kern_return_t v24;
  void v25[4];

  void v25[3] = *MEMORY[0x1E4F14BF8];
  v25[1] = "mach_mig_demux";
  v25[2] = a1;
  mach_msg_option_t v4 = (mach_msg_header_t *)(a4 + 88);
  if (*(_DWORD *)(a4 + 72)) {
    mach_msg_option_t v4 = *(mach_msg_header_t **)&v4->msgh_bits;
  }
  if (!a3) {
    return 0;
  }
  mach_msg_id_t msgh_id = v4->msgh_id;
  while (1)
  {
    uint64_t v6 = *a2;
    int v7 = *(_DWORD *)(*a2 + 8);
    BOOL v8 = __OFSUB__(msgh_id, v7);
    int v9 = msgh_id - v7;
    if (v9 < 0 == v8 && *(_DWORD *)(v6 + 12) > msgh_id) {
      break;
    }
    ++a2;
    if (!--a3) {
      return 0;
    }
  }
  uint64_t v11 = v6 + 40 * v9;
  uint64_t v13 = *(void *)(v11 + 40);
  uint64_t v12 = (void (**)(mach_msg_header_t *, char *))(v11 + 40);
  if (!v13) {
    return 0;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v25[0] = *(void *)(StatusReg + 184);
  *(void *)(StatusReg + 184) = v25;
  MEMORY[0x1F41887A8](a1);
  uint64_t v16 = (mach_msg_header_t *)((char *)v25 - v15);
  bzero((char *)v25 - v15, v17);
  mach_port_t msgh_remote_port = v4->msgh_remote_port;
  v16->mach_msg_bits_t msgh_bits = v4->msgh_bits & 0x1F;
  v16->msgh_size = 36;
  *(void *)&v16->mach_port_t msgh_remote_port = msgh_remote_port;
  v16->mach_port_name_t msgh_voucher_port = 0;
  v16->mach_msg_id_t msgh_id = msgh_id + 100;
  (*v12)(v4, (char *)v16);
  if ((v16->msgh_bits & 0x80000000) == 0)
  {
    mach_port_t v19 = v16[1].msgh_remote_port;
    if (v19 == -305) {
      goto LABEL_32;
    }
    if (v19)
    {
      v4->mach_port_t msgh_remote_port = 0;
      mach_msg_destroy(v4);
    }
  }
  if (v16->msgh_remote_port)
  {
    if ((v16->msgh_bits & 0x1F) == 0x12) {
      mach_msg_option_t v20 = 1;
    }
    else {
      mach_msg_option_t v20 = 17;
    }
    uint64_t v21 = mach_msg(v16, v20, v16->msgh_size, 0, 0, 0, 0);
    if ((v21 - 268435459) >= 2)
    {
      if (v21)
      {
        if (v21 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        dispatch_mach_mig_demux_cold_1(v21);
      }
      goto LABEL_32;
    }
    mach_port_name_t msgh_local_port = v16->msgh_local_port;
    if (msgh_local_port - 1 > 0xFFFFFFFD) {
      goto LABEL_31;
    }
    mach_port_t v23 = (v16->msgh_bits >> 8) & 0x1F;
    if ((v23 - 17) >= 2)
    {
      if (v23 != 16)
      {
LABEL_31:
        mach_msg_destroy(v16);
        goto LABEL_32;
      }
      int v24 = mach_port_mod_refs(*MEMORY[0x1E4F14C48], msgh_local_port, 1u, -1);
    }
    else
    {
      int v24 = mach_port_deallocate(*MEMORY[0x1E4F14C48], msgh_local_port);
    }
    if (v24 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v24) {
      _dispatch_bug(3170, v24);
    }
    goto LABEL_31;
  }
LABEL_32:
  *(void *)(StatusReg + 184) = v25[0];
  return 1;
}

uint64_t dispatch_mach_mig_demux_get_context()
{
  unint64_t v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    unint64_t v0 = *(void *)v0;
    if (!v0) {
      dispatch_mach_mig_demux_get_context_cold_1();
    }
  }
  while (*(char **)(v0 + 8) != "mach_mig_demux");
  return *(void *)(v0 + 16);
}

uint64_t _dispatch_mach_msg_create_reply_disconnected(void *a1, uint64_t a2, uint64_t a3)
{
  size_t v5 = (int *)a1 + 13;
  if (!a1) {
    size_t v5 = (int *)(a2 + 24);
  }
  int v6 = *v5;
  if (*v5)
  {
    if (a2 && !*(void *)(a2 + 16) && *(unsigned char *)(a2 + 30))
    {
      uint64_t v14 = *(void *)(a2 + 56);
      if (v14)
      {
        int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 12), 0xFFFFFFFF, memory_order_relaxed);
        if (add_explicit <= 1)
        {
          if (add_explicit != 1) {
            -[OS_voucher release]();
          }
          _voucher_xref_dispose(v14, (const char *)a2);
        }
        *(void *)(a2 + 56) = 0;
      }
      _dispatch_destruct_reply_port();
      return 0;
    }
    uint64_t result = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    *(void *)(result + 16) = -1985229329;
    *(void *)(result + 24) = &unk_1EB1CE780;
    *(_DWORD *)(result + 72) = 0;
    *(void *)(result + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 24;
    *(_DWORD *)(result + 10_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v6;
    if (a1)
    {
      *(void *)(result + 32) = a1[4];
      uint64_t v9 = a1[8];
      *(void *)(result + 56) = a1[7];
      *(void *)(result + 64) = v9;
      if (v9 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 12), 1u, memory_order_relaxed) <= 0) {
        -[OS_voucher retain]();
      }
    }
    else
    {
      uint64_t v11 = *(unsigned int *)(a2 + 40);
      uint64_t v12 = *(void *)(a2 + 56);
      *(void *)(result + 32) = *(void *)(a2 + 48);
      *(void *)(result + 56) = v11;
      *(void *)(result + 64) = v12;
      *(void *)(a2 + 56) = 0;
    }
    int v13 = a3 | 0xF8F80000;
    if (!a3) {
      int v13 = 0;
    }
    *(_DWORD *)(result + 48) = v13;
  }
  else
  {
    if (a1) {
      return 0;
    }
    uint64_t result = *(void *)(a2 + 56);
    if (result)
    {
      int v10 = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
      if (v10 <= 1)
      {
        if (v10 != 1) {
          -[OS_voucher release]();
        }
        _voucher_xref_dispose(result, (const char *)a2);
      }
      uint64_t result = 0;
      *(void *)(a2 + 56) = 0;
    }
  }
  return result;
}

void _dispatch_destruct_reply_port()
{
  int v0 = thread_destruct_special_reply_port();
  if (v0 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v0)
  {
    _dispatch_bug(515, v0);
  }
}

void _dispatch_mach_send_drain(_DWORD *a1, const char *a2, unsigned int a3)
{
  unsigned int v34 = a2;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = *((void *)a1 + 15);
  uint64_t v7 = HIDWORD(*(void *)(v6 + 64)) & 7;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    if (*(void *)(v6 + 72))
    {
      unsigned int v31 = v4;
      BOOL v8 = (uint64_t *)(v6 + 80);
      unint64_t v9 = a3;
      char v32 = (atomic_ullong *)(v6 + 72);
LABEL_4:
      uint64_t v10 = *v8;
      if (!*v8) {
        uint64_t v10 = _dispatch_wait_for_enqueuer((unint64_t *)(v6 + 80));
      }
      while (1)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v12 = (unint64_t *)(v10 + 16);
        uint64_t v10 = *(void *)(v10 + 16);
        *BOOL v8 = v10;
        if (!v10)
        {
          atomic_ullong v17 = *v32;
          while (v11 == (void *)(v17 & 0xFFFFFFFFFFFFFFF8))
          {
            atomic_ullong v18 = v17;
            atomic_compare_exchange_strong_explicit(v32, (unint64_t *)&v18, 0, memory_order_release, memory_order_relaxed);
            BOOL v19 = v18 == v17;
            atomic_ullong v17 = v18;
            if (v19) {
              goto LABEL_7;
            }
          }
          uint64_t v10 = *v12;
          if (!*v12) {
            uint64_t v10 = _dispatch_wait_for_enqueuer(v12);
          }
          *BOOL v8 = v10;
        }
LABEL_7:
        uint64_t v13 = *v11;
        if (*v11 < 0x1000uLL) {
          break;
        }
        if (*(void *)(v13 + 40) != 768)
        {
          uint64_t v14 = 0;
          uint64_t v15 = (uint64_t)v11;
LABEL_18:
          if (*(_DWORD *)(v6 + 88) || (a1[20] & 0x10000000) != 0)
          {
            _dispatch_mach_msg_not_sent((uint64_t)a1, v15, v14);
          }
          else
          {
            int v16 = _dispatch_mach_msg_send((unint64_t)a1, v15, v14, v7, (int *)v9);
            if (!v16)
            {
              uint64_t v4 = v31 | (2 * (*((_WORD *)a1 + 59) & 1));
LABEL_36:
              *uint64_t v12 = v10;
              if (!v10)
              {
                uint64_t v20 = 0;
                atomic_compare_exchange_strong_explicit(v32, (unint64_t *)&v20, (unint64_t)v11, memory_order_release, memory_order_relaxed);
                if (v20)
                {
                  uint64_t v28 = *v8;
                  if (!*v8)
                  {
                    uint64_t v29 = v4;
                    uint64_t v28 = _dispatch_wait_for_enqueuer((unint64_t *)(v6 + 80));
                    uint64_t v4 = v29;
                  }
                  v11[2] = v28;
                }
              }
              *BOOL v8 = (uint64_t)v11;
              if (*v11 >= 0x1000uLL && *(void *)(*v11 + 40) == 768)
              {
                unint64_t v21 = *(void *)(v6 + 64);
                do
                {
                  unint64_t v22 = v21;
                  unint64_t v23 = v21 & 0xFFFFFFC700000000 | 0x3000000000;
                  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v21, v23, memory_order_release, memory_order_relaxed);
                }
                while (v21 != v22);
              }
              else
              {
                unint64_t v24 = *(void *)(v6 + 64);
                do
                {
                  unint64_t v22 = v24;
                  unint64_t v23 = v24 & 0xFFFFFFC7FFFFFFFFLL;
                  if ((v24 & 0x2800000000) == 0) {
                    unint64_t v23 = v24 & 0xFFFFFFDF00000000 | 0x2000000000;
                  }
                  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v24, v23, memory_order_release, memory_order_relaxed);
                }
                while (v24 != v22);
              }
              a3 &= ~8u;
              goto LABEL_50;
            }
            v5 |= (v16 & 2) >> 1;
          }
          goto LABEL_22;
        }
        if ((a3 & 4) == 0) {
          goto LABEL_34;
        }
        _dispatch_continuation_pop((uint64_t)v11, 0, v34, (uint64_t)a1);
LABEL_22:
        unint64_t v9 = a3 & 0xFFFFFFF7;
        if (!v10)
        {
          unint64_t v9 = a3 & 0xFFFFFFF7;
          if (*v32) {
            goto LABEL_4;
          }
          a3 &= ~8u;
          uint64_t v4 = v31;
          goto LABEL_48;
        }
      }
      if ((v13 & 1) == 0)
      {
        if (*(void *)(v6 + 16) && *(__objc2_class ***)(StatusReg + 160) != &_dispatch_mgr_q)
        {
          *((_WORD *)a1 + 59) |= 1u;
          uint64_t v4 = v31 | 2;
          goto LABEL_36;
        }
        if (!_dispatch_mach_reconnect_invoke((uint64_t)a1, (uint64_t)v11))
        {
LABEL_34:
          uint64_t v4 = v31;
          goto LABEL_36;
        }
        goto LABEL_22;
      }
      uint64_t v15 = v11[6];
      uint64_t v14 = v11[7];
      goto LABEL_18;
    }
LABEL_48:
    unint64_t v25 = *(void *)(v6 + 64);
    do
    {
      unint64_t v22 = v25;
      unint64_t v23 = v25 & ((uint64_t)(v25 << 26) >> 63) & 0xFFFFFFC7FFFFFFFFLL;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v6 + 64), &v25, v23, memory_order_release, memory_order_relaxed);
    }
    while (v25 != v22);
LABEL_50:
    if ((v22 & 0x800000000) != 0)
    {
      uint64_t v26 = HIDWORD(v22) & 7;
      unsigned int v27 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v27) & 0xF) < v26) {
        *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v27 & 0xFFF0FFFF | (v26 << 16);
      }
    }
    uint64_t v7 = HIDWORD(v23) & 7;
  }
  while (v23);
  if ((v23 & 0x1000000000) != 0)
  {
    _dispatch_mach_push_send_barrier_drain((uint64_t)a1, BYTE4(v23) & 7);
    return;
  }
  if (!v23 && (*((_WORD *)a1 + 59) & 2) != 0)
  {
    if ((a1[29] & 8) != 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v4 | 0x12;
    }
  }
  if (((v22 ^ v23) & 0x8000000000) == 0)
  {
    if (!v4) {
      return;
    }
LABEL_71:
    (*(void (**)(_DWORD *, void, uint64_t))(*(void *)a1 + 80))(a1, (*((unsigned __int16 *)a1 + 59) << 31 >> 31) & v7, v4);
    return;
  }
  if (v4)
  {
    uint64_t v4 = v4 | 1;
    goto LABEL_71;
  }
  if (a1[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
    if (add_explicit <= 2)
    {
      if (add_explicit == 2)
      {
        _os_object_dispose(a1, a2);
      }
      else
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }
}

void _dispatch_mach_msg_not_sent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 48);
  if ((*(_WORD *)(a1 + 116) & 0x10) != 0 && *(void *)(a2 + 32))
  {
    uint64_t v7 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = a1;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v8) {
    uint64_t v9 = 12;
  }
  else {
    uint64_t v9 = 7;
  }
  uint64_t reply_disconnected = _dispatch_mach_msg_create_reply_disconnected((void *)a2, a3, v9);
  if ((v6 & 2) != 0) {
    int v11 = 0;
  }
  else {
    int v11 = -117964795;
  }
  *(_DWORD *)(a2 + 48) = v11;
  _dispatch_mach_handle_or_push_received_msg(a1, a2, 0);
  if (reply_disconnected)
  {
    if (v8)
    {
      uint64_t v12 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, a1);
      uint64_t v13 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 88);
      unsigned int v14 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0) {
        uint64_t v15 = v14 + 1;
      }
      else {
        uint64_t v15 = 0;
      }
      v13(v8, v12, v15);
    }
    else
    {
      _dispatch_mach_handle_or_push_received_msg(a1, reply_disconnected, 0);
    }
  }
}

uint64_t _dispatch_mach_msg_send(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  unsigned int v6 = a4;
  unint64_t v8 = a1;
  uint64_t v77 = *MEMORY[0x1E4F14BF8];
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = a2 + 88;
  if (*(_DWORD *)(a2 + 72)) {
    uint64_t v10 = *(void *)v10;
  }
  uint64_t v11 = *(void *)(a2 + 64);
  int v12 = *(_DWORD *)v10 & 0x1F;
  uint64_t v13 = *(unsigned int *)(a2 + 52);
  long long v75 = 0u;
  long long v76 = 0u;
  long long v74 = 0u;
  memset(v73, 0, 40);
  if (v12 == 18)
  {
    unsigned int v14 = (int *)(a2 + 48);
    int v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 2) == 0)
    {
      int v69 = 18;
      int v15 = 0;
      int v16 = 0;
      LOBYTE(v17) = 1;
      goto LABEL_42;
    }
LABEL_19:
    int v23 = 0;
    goto LABEL_74;
  }
  __int16 v18 = *(_WORD *)(a1 + 118);
  *(_WORD *)(a1 + 118) = v18 & 0xFFFE;
  uint64_t v19 = *(void *)(v9 + 48);
  if (v19) {
    BOOL v20 = v19 == a2;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    if (*(void *)(v9 + 16)
      && *(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
    {
      uint64_t v44 = 0;
      __int16 v45 = v18 | 1;
      goto LABEL_72;
    }
    uint64_t v54 = v13;
    unsigned int v14 = a5;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unint64_t v56 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v56 >= 0x10FF) {
      unint64_t v56 = 4351;
    }
    *(void *)(v19 + 56) = v56;
    uint64_t v57 = *(void *)(StatusReg + 224);
    if (v57 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v57 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
      goto LABEL_131;
    }
    *(void *)(v19 + 64) = v57;
    *(_DWORD *)(v19 + 48) = ((*(void *)(StatusReg + 32) & 0x300) != 0) << 18;
    if (!_dispatch_mach_msg_send(a1, *(void *)(v9 + 48), 0, a4, 0)) {
      goto LABEL_126;
    }
    if ((*(_WORD *)(v8 + 116) & 0x20) != 0) {
      _dispatch_mach_arm_no_senders(v8, 1);
    }
    uint64_t v19 = 0;
    *(void *)(v9 + 48) = 0;
    LOBYTE(a5) = (_BYTE)v14;
    LODWORD(v13) = v54;
  }
  unsigned int v14 = (int *)(a2 + 48);
  int v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 2) != 0) {
    goto LABEL_19;
  }
  int v69 = v12;
  LOWORD(v12) = 0;
  __int16 v21 = 1;
  if (v19 != a2) {
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v9 + 92);
  }
  if (*(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
  {
    if (v11) {
      goto LABEL_16;
    }
LABEL_23:
    if ((*(unsigned char *)(v10 + 2) & 0x1F) == 0)
    {
      uint64_t v70 = v9;
      __int16 v67 = v21;
      int v24 = v13;
      char v25 = (char)a5;
      if (_voucher_task_mach_voucher_pred != -1) {
        dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
      }
      int v15 = 0;
      int mach_voucher = _voucher_task_mach_voucher;
      goto LABEL_31;
    }
    int v15 = 0;
    goto LABEL_25;
  }
  if (!*(void *)(v9 + 16))
  {
    int v66 = v13;
    uint64_t v54 = v9;
    LOBYTE(v9) = (_BYTE)a5;
    unint64_t v64 = v8;
    uint64_t v62 = *(void *)(v8 + 120);
    *(_DWORD *)(v62 + 24) = *(_DWORD *)(v10 + 8);
    if (_dispatch_unote_register(v62, -4, 0x2000000u))
    {
LABEL_124:
      LOBYTE(a5) = v9;
      uint64_t v9 = v54;
      LODWORD(v13) = v66;
      unint64_t v8 = v64;
      goto LABEL_21;
    }
LABEL_131:
    _dispatch_bug(1743, 0);
    goto LABEL_124;
  }
LABEL_21:
  if (*(unsigned char *)(v9 + 30)) {
    return 0;
  }
  __int16 v21 = v12 | 0x81;
  if (!v11) {
    goto LABEL_23;
  }
LABEL_16:
  uint64_t v22 = *(void *)(v11 + 48);
  if (!v22)
  {
    int v15 = 0;
    int v16 = 0;
    if ((*(unsigned char *)(v10 + 2) & 0x1F) != 0) {
      goto LABEL_36;
    }
    goto LABEL_27;
  }
  *((void *)&v73[0] + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 59821818;
  *(void *)&v73[1] = v22;
  *(_OWORD *)((char *)&v73[1] + 8) = *(_OWORD *)(v11 + 56);
  LODWORD(v73[0]) = 40;
  int v15 = 32;
  if ((*(unsigned char *)(v10 + 2) & 0x1F) != 0)
  {
LABEL_25:
    int v16 = 0;
    goto LABEL_36;
  }
LABEL_27:
  __int16 v67 = v21;
  int v24 = v13;
  uint64_t v70 = v9;
  char v25 = (char)a5;
  int mach_voucher = _voucher_get_mach_voucher(v11);
LABEL_31:
  int v16 = 0;
  if (mach_voucher)
  {
    int v27 = *(_DWORD *)v10;
    LOBYTE(a5) = v25;
    LODWORD(v13) = v24;
    __int16 v21 = v67;
    if ((*(_DWORD *)v10 & 0x1F0000) == 0)
    {
      *(_DWORD *)(v10 + 16) = mach_voucher;
      *(_DWORD *)uint64_t v10 = v27 | 0x130000;
      int v16 = 1;
    }
    uint64_t v9 = v70;
  }
  else
  {
    LOBYTE(a5) = v25;
    uint64_t v9 = v70;
    LODWORD(v13) = v24;
    __int16 v21 = v67;
  }
LABEL_36:
  if (v6 >= 5) {
    int v28 = 5;
  }
  else {
    int v28 = v6;
  }
  if (v28)
  {
    __int16 v17 = v21 | 0x30;
    if (!v13) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  __int16 v17 = v21 | 0x10;
  if (v13) {
LABEL_41:
  }
    v17 |= (4 * *(_WORD *)(v8 + 116)) & 0x200;
LABEL_42:
  uint64_t v71 = v9;
  unsigned int v68 = v14;
  if ((v5 & 4) != 0)
  {
    if (*(unsigned char *)(a3 + 30))
    {
      int v29 = v15;
      unint64_t v30 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      if (v13 == *(_DWORD *)(v30 + 64))
      {
        int v31 = v16;
        char v32 = v17;
        char v33 = (char)a5;
        *(void *)(v30 + 64) = 0;
LABEL_49:
        int v34 = v13;
        _dispatch_mach_reply_waiter_register(v8, a3, v13, (void *)a2);
        LOBYTE(v17) = v32;
        int v15 = v29;
        goto LABEL_50;
      }
    }
    else
    {
      int v29 = v15;
    }
    int v31 = v16;
    char v32 = v17;
    char v33 = (char)a5;
    goto LABEL_49;
  }
  int v31 = v16;
  int v34 = v13;
  char v33 = (char)a5;
LABEL_50:
  unsigned int v35 = *(_DWORD *)(v10 + 4);
  long long v74 = (unint64_t)v10;
  *(void *)&long long v75 = v35;
  unsigned int v36 = v73[0];
  if (!v15) {
    unsigned int v36 = 0;
  }
  *((void *)&v75 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v73;
  *(void *)&long long v76 = 0;
  *((void *)&v76 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v36;
  char v65 = v17;
  int v37 = mach_msg2_internal();
  int v23 = v37;
  if ((v5 & 4) != 0 && v37) {
    _dispatch_mach_reply_unregister((void *)v8, (const char *)a3, 36);
  }
  LOBYTE(a5) = v33;
  uint64_t v9 = v71;
  LODWORD(v13) = v34;
  if (!v31)
  {
LABEL_67:
    if (v23 == 268435460)
    {
      int v23 = 268435460;
      int v12 = v69;
      unsigned int v14 = v68;
      if ((v65 & 0x10) != 0)
      {
        if (*(_DWORD *)(v10 + 8) == -1)
        {
          *(_DWORD *)uint64_t v10 = *(_DWORD *)v10 & 0xFFFFFFE0 | 0x13;
          if ((v65 & 0x80) == 0) {
            goto LABEL_71;
          }
        }
        else if ((v65 & 0x80) == 0)
        {
LABEL_71:
          uint64_t v44 = 0;
          __int16 v45 = *(_WORD *)(v8 + 118) | 1;
LABEL_72:
          *(_WORD *)(v8 + 118) = v45;
          return v44;
        }
        _dispatch_mach_notification_set_armed(v9);
        return 0;
      }
    }
    else
    {
      int v12 = v69;
      unsigned int v14 = v68;
    }
LABEL_74:
    if (!(v5 & 4 | v23))
    {
      if (v13)
      {
        uint64_t v46 = *(void *)(v8 + 88);
        if (!*(void *)(v46 + 16) || *(_DWORD *)(v46 + 24) != v13)
        {
          char v47 = (char)a5;
          _dispatch_mach_reply_kevent_register(v8, v13, (void *)a2);
          LOBYTE(a5) = v47;
        }
      }
    }
    if (v12 != 18 && *(void *)(v9 + 48) == a2 && *(void *)(v9 + 16))
    {
      char v58 = (char)a5;
      _dispatch_unote_unregister(*(void *)(v8 + 120), 5);
      LOBYTE(a5) = v58;
      *(_DWORD *)(*(void *)(v8 + 120) + 24) = 0;
      if (!v23) {
        goto LABEL_83;
      }
    }
    else if (!v23)
    {
LABEL_83:
      unint64_t v48 = 0;
      uint64_t reply_disconnected = 0;
      goto LABEL_84;
    }
    if ((*(_WORD *)(v8 + 116) & 0x10) != 0)
    {
      char v59 = (char)a5;
      if (*(void *)(a2 + 32))
      {
        uint64_t v60 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
        if (v60) {
          unint64_t v48 = v60;
        }
        else {
          unint64_t v48 = v8;
        }
LABEL_119:
        if (v48) {
          uint64_t v61 = 12;
        }
        else {
          uint64_t v61 = 7;
        }
        uint64_t reply_disconnected = _dispatch_mach_msg_create_reply_disconnected((void *)a2, a3, v61);
        LOBYTE(a5) = v59;
LABEL_84:
        *unsigned int v14 = v23;
        if (a5 & 8) != 0 && (v5)
        {
          uint64_t v44 = 3;
          if (!reply_disconnected) {
            return v44;
          }
        }
        else
        {
          _dispatch_mach_handle_or_push_received_msg(v8, a2, 0);
          uint64_t v44 = 1;
          if (!reply_disconnected) {
            return v44;
          }
        }
        if (v48)
        {
          unint64_t v50 = _dispatch_mach_msg_async_reply_wrap(reply_disconnected, v8);
          unsigned int v51 = __clz(__rbit32((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF));
          if (((*(_DWORD *)(reply_disconnected + 56) >> 8) & 0x3FFF) != 0) {
            uint64_t v52 = v51 + 1;
          }
          else {
            uint64_t v52 = 0;
          }
          (*(void (**)(unint64_t, void *, uint64_t))(*(void *)v48 + 88))(v48, v50, v52);
        }
        else
        {
          _dispatch_mach_handle_or_push_received_msg(v8, reply_disconnected, 0);
        }
        return v44;
      }
    }
    else
    {
      char v59 = (char)a5;
    }
    unint64_t v48 = 0;
    goto LABEL_119;
  }
  mach_port_name_t v39 = *(_DWORD *)(v10 + 16);
  if (v23 != 268435461 || !v39)
  {
    int v40 = *(_DWORD *)v10;
    int v41 = HIWORD(*(_DWORD *)v10) & 0x1F;
    BOOL v42 = v41 == 17 || v41 == 19;
    if (v42 && v39)
    {
      if (v41 == 17)
      {
        char v43 = (char)a5;
        _voucher_dealloc_mach_voucher(v39);
        LODWORD(v13) = v34;
        LOBYTE(a5) = v43;
        uint64_t v9 = v71;
        int v40 = *(_DWORD *)v10;
      }
      *(_DWORD *)(v10 + 16) = 0;
      *(_DWORD *)uint64_t v10 = v40 & 0xFFE0FFFF;
    }
    goto LABEL_67;
  }
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher port corruption";
  qword_1E91199F0 = 268435461;
  __break(1u);
LABEL_126:
  uint64_t result = *(void *)(*(void *)(v9 + 48) + 64);
  if (!result) {
    return 0;
  }
  int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit > 1)
  {
LABEL_128:
    uint64_t v44 = 0;
    *(void *)(*(void *)(v9 + 48) + 64) = 0;
    return v44;
  }
  if (add_explicit == 1)
  {
    _voucher_xref_dispose(result, v38);
    goto LABEL_128;
  }
  qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher over-release";
  __break(1u);
  return result;
}

void _dispatch_mach_push_send_barrier_drain(uint64_t a1, unsigned int a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v5 = *(void **)(StatusReg + 176);
  if (v5) {
    *(void *)(StatusReg + 176) = v5[2];
  }
  else {
    int v5 = _dispatch_continuation_alloc_from_heap();
  }
  v5[4] = 0;
  v5[5] = 0;
  _OWORD v5[3] = -1;
  *int v5 = &unk_1ED74FC30;
  v5[1] = -1;

  _dispatch_lane_push(a1, v5, a2);
}

uint64_t _dispatch_mach_reply_waiter_register(uint64_t result, uint64_t a2, int a3, void *a4)
{
  *(void *)(a2 + 8) = ~result;
  *(unsigned char *)(a2 + 28) = -8;
  *(_DWORD *)(a2 + 24) = a3;
  if (!*(unsigned char *)(a2 + 30))
  {
    uint64_t v5 = a4[8];
    if (v5)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 12), 1u, memory_order_relaxed) <= 0)
      {
        qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
        __break(1u);
        return result;
      }
      *(void *)(a2 + 56) = v5;
    }
    *(_DWORD *)(a2 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a4[7];
    *(void *)(a2 + 48) = a4[4];
  }
  int v6 = 0;
  uint64_t v7 = *(void *)(result + 120);
  unint64_t v8 = (atomic_uint *)(v7 + 40);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v7 + 40), (unsigned int *)&v6, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t result = _dispatch_unfair_lock_lock_slow(v7 + 40);
  }
  uint64_t v12 = *(void *)(v7 + 56);
  uint64_t v11 = (void *)(v7 + 56);
  uint64_t v10 = v12;
  *(void *)(a2 + 64) = v12;
  if (v12) {
    *(void *)(v10 + 72) = a2 + 64;
  }
  *uint64_t v11 = a2;
  *(void *)(a2 + 72) = v11;
  unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unsigned int v14 = atomic_exchange_explicit(v8, 0, memory_order_release);
  if (v14 != v13)
  {
    return _dispatch_unfair_lock_unlock_slow((uint64_t)v8, v14);
  }
  return result;
}

void _dispatch_mach_reply_kevent_register(unint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5 = off_1ED750460((uint64_t)&_dispatch_mach_type_reply, a2, 0);
  uint64_t v6 = (uint64_t)v5;
  *((void *)v5 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = ~a1;
  uint64_t v7 = a3[8];
  if (v7)
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 12), 1u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Voucher resurrection";
      __break(1u);
LABEL_45:
      unint64_t v28 = *(void *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v13 = (int *)(a1 + 84);
      goto LABEL_21;
    }
    *((void *)v5 + 7) = v7;
  }
  unint64_t v8 = 0;
  *((_DWORD *)v5 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a3[7];
  uint64_t v9 = a3[4];
  *(void *)(v6 + 48) = v9;
  __int16 v10 = *(_WORD *)(a1 + 116);
  if ((v10 & 0x10) != 0 && v9)
  {
    uint64_t v11 = (*((uint64_t (**)(void))_dispatch_mach_xpc_hooks + 2))();
    if (v11) {
      unint64_t v8 = v11;
    }
    else {
      unint64_t v8 = a1;
    }
    __int16 v10 = *(_WORD *)(a1 + 116);
  }
  if ((v10 & 0x80) != 0) {
    *(_DWORD *)(v6 + 32) |= 0x200u;
  }
  unint64_t v28 = 0;
  if (!v8 || v8 == a1)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (*(void *)(v7 + 16) >= 4uLL) {
      goto LABEL_45;
    }
  }
  if ((*(unsigned char *)(*(void *)v8 + 42) & 1) == 0)
  {
    int v12 = _dispatch_queue_compute_priority_and_wlh(v8, (uint64_t *)&v28);
    if (v12) {
      goto LABEL_22;
    }
    unint64_t v28 = -4;
    goto LABEL_20;
  }
  unint64_t v28 = -4;
  int v12 = 0x2000000;
  if (v8 >= (unint64_t)&_dispatch_root_queues && v8 < (unint64_t)&_dispatch_queue_serial_numbers)
  {
LABEL_20:
    unsigned int v13 = (int *)(v8 + 84);
LABEL_21:
    int v12 = *v13;
  }
LABEL_22:
  unsigned int v14 = *((_DWORD *)a3 + 14);
  unsigned int v15 = (__clz(__rbit32((v14 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v14 >> 8) & 0x3FFF) == 0) {
    unsigned int v15 = 0;
  }
  unsigned int v16 = v15 & 0xFFFFFF00 | *((_DWORD *)a3 + 14);
  unsigned int v17 = v12 & 0x80000000;
  if ((v12 & 0xFFF) != 0)
  {
    if ((v12 & 0xFFFu) > v16) {
      unsigned int v16 = v12 & 0xFFF;
    }
    goto LABEL_30;
  }
  if ((unsigned __int16)v12 >> 12 && v16)
  {
LABEL_30:
    unsigned int v18 = v16 | v17;
    goto LABEL_31;
  }
  if (!((unsigned __int16)v12 >> 12) || v16)
  {
    unint64_t v28 = -4;
    unsigned int v18 = 0x2000000;
  }
  else
  {
    unsigned int v18 = v17 | ((unsigned __int16)v12 >> 12 << 8) | 0xFF;
  }
LABEL_31:
  int v19 = 0;
  uint64_t v20 = *(void *)(a1 + 120);
  __int16 v21 = (atomic_uint *)(v20 + 40);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v20 + 40), (unsigned int *)&v19, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v19) {
    _dispatch_unfair_lock_lock_slow(v20 + 40);
  }
  uint64_t v25 = *(void *)(v20 + 56);
  int v24 = (uint64_t *)(v20 + 56);
  uint64_t v23 = v25;
  *(void *)(v6 + 64) = v25;
  if (v25) {
    *(void *)(v23 + 72) = v6 + 64;
  }
  *int v24 = v6;
  *(void *)(v6 + 72) = v24;
  unsigned int v26 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unsigned int v27 = atomic_exchange_explicit(v21, 0, memory_order_release);
  if (v27 != v26) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v21, v27);
  }
  if ((_dispatch_unote_register(v6, v28, v18) & 1) == 0) {
    _dispatch_mach_reply_unregister((void *)a1, (const char *)v6, 52);
  }
}

void *_dispatch_mach_msg_async_reply_wrap(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t result = *(void **)(StatusReg + 176);
  if (result) {
    *(void *)(StatusReg + 176) = result[2];
  }
  else {
    uint64_t result = _dispatch_continuation_alloc_from_heap();
  }
  result[6] = a1;
  result[7] = a2;
  *uint64_t result = &unk_1ED74FD08;
  result[1] = -1;
  result[3] = -1;
  return result;
}

void _dispatch_mach_send_push_and_trydrain(atomic_uint *a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = *((void *)a1 + 15);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(StatusReg + 976) = v5 + 72;
  unint64_t v8 = atomic_exchange_explicit((atomic_ullong *volatile)(v5 + 72), a2, memory_order_release);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = (unint64_t *)(v8 + 16);
  }
  else
  {
    if (a1[2] != 0x7FFFFFFF && (int)atomic_fetch_add_explicit(a1 + 2, 2u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_57;
    }
    uint64_t v11 = (unint64_t *)(v5 + 80);
    uint64_t v10 = 3;
    uint64_t v9 = 0xA000000000;
  }
  *uint64_t v11 = a2;
  *(void *)(StatusReg + 976) = 0;
  if (*(_DWORD *)(v5 + 88) || (a1[20] & 0x10000000) != 0)
  {
    unint64_t v23 = *(void *)(v5 + 64);
    unint64_t v24 = a3 << 32;
    do
    {
      unint64_t v25 = v23;
      if ((v23 & 0x700000000) >= v24) {
        unint64_t v26 = v23;
      }
      else {
        unint64_t v26 = v24 | v23 & 0xFFFFFFF0FFFFFFFFLL | 0x2800000000;
      }
      unint64_t v27 = v26 | v9;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v5 + 64), &v23, v27, memory_order_release, memory_order_relaxed);
    }
    while (v23 != v25);
    if (((v27 ^ v25) & 0x8000000000) != 0) {
      uint64_t v28 = v10 & 2;
    }
    else {
      uint64_t v28 = v10;
    }
    (*(void (**)(atomic_uint *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a3, v28);
    return;
  }
  uint64_t v12 = v7 & 0xFFFFFFFC;
  unsigned int v13 = (atomic_ullong *)(v5 + 64);
  if (!v8)
  {
    atomic_ullong v18 = *v13;
    unint64_t v19 = a3 << 32;
    do
    {
      atomic_ullong v16 = v18;
      if ((v18 & 0x700000000uLL) >= v19) {
        unint64_t v20 = v18;
      }
      else {
        unint64_t v20 = v19 | v18 & 0xFFFFFFF0FFFFFFFFLL | 0x2800000000;
      }
      unint64_t v21 = v20 | v9;
      if ((v18 & 0x10FFFFFFFFLL) == 0) {
        unint64_t v21 = v21 & 0xFFFFFFC7FFFFFFFFLL | v12;
      }
      atomic_compare_exchange_strong(v13, (unint64_t *)&v18, v21);
    }
    while (v18 != v16);
    if (((v21 ^ v16) & 0x8000000000) != 0) {
      v10 &= 2u;
    }
    else {
      uint64_t v10 = v10;
    }
LABEL_26:
    if (v16 >= 4)
    {
      if ((v16 & 0x700000000uLL) < a3 << 32) {
        _pthread_workqueue_override_start_direct_check_owner();
      }
      if ((v10 & 1) == 0) {
        return;
      }
      if (a1[2] == 0x7FFFFFFF) {
        return;
      }
      int add_explicit = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release);
      if (add_explicit > 2) {
        return;
      }
      if (add_explicit == 2)
      {
        _os_object_dispose(a1, (const char *)a2);
        return;
      }
LABEL_58:
      qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return;
    }
    if ((v16 & 0x1000000000) != 0)
    {
      (*(void (**)(atomic_uint *, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a3, v10);
      return;
    }
    if (v10 && *(void *)(v5 + 80) == a2)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_33;
      }
    }
    else
    {
      a4 &= ~8u;
      if ((v10 & 1) == 0) {
        goto LABEL_33;
      }
    }
    if (a1[2] == 0x7FFFFFFF || (int)atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFE, memory_order_release) > 2)
    {
LABEL_33:
      _dispatch_mach_send_drain(a1, 0, a4);
      return;
    }
LABEL_57:
    qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    goto LABEL_58;
  }
  atomic_ullong v14 = *v13;
  unint64_t v15 = a3 << 32;
  while (1)
  {
    atomic_ullong v16 = v14;
    if ((v14 & 0x700000000uLL) >= v15 || (v14 & 0xFFFFFFD0FFFFFFFFLL | v15 | 0x2800000000) == v14) {
      break;
    }
    unint64_t v17 = v14 & 0xFFFFFFC0FFFFFFFFLL | v15 & 0xFFFFFFC7FFFFFFFFLL | v12;
    if ((v14 & 0x10FFFFFFFFLL) != 0) {
      unint64_t v17 = v14 & 0xFFFFFFD0FFFFFFFFLL | v15 | 0x2800000000;
    }
    atomic_compare_exchange_strong_explicit(v13, (unint64_t *)&v14, v17, memory_order_acquire, memory_order_acquire);
    if (v14 == v16) {
      goto LABEL_26;
    }
  }
}

void _dispatch_mach_handle_wlh_change(uint64_t a1)
{
  unsigned int v1 = atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x8000000u, memory_order_relaxed);
  if ((v1 & 0x400000) != 0)
  {
    if ((v1 & 0x8000000) == 0)
    {
      if ((*(_WORD *)(a1 + 116) & 0x10) != 0) {
        _dispatch_bug_deprecated("Changing target queue hierarchy after xpc connection was activated");
      }
      else {
        _dispatch_bug_deprecated("Changing target queue hierarchy after mach channel was connected");
      }
    }
  }
  else
  {
    if ((*(_WORD *)(a1 + 116) & 0x10) == 0)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after mach channel was connected";
      __break(1u);
    }
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after xpc connection was activated";
    __break(1u);
  }
}

void _dispatch_mach_cancel(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 120) + 88)) {
    int v2 = 0;
  }
  else {
    int v2 = (*(unsigned __int16 *)(a1 + 118) >> 1) & 1;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0) {
    char v3 = 1;
  }
  else {
    char v3 = 3;
  }
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    v2 &= _dispatch_unote_unregister(v4, v3);
  }
  uint64_t v5 = *(void *)(a1 + 88);
  int v6 = *(_DWORD *)(v5 + 24);
  if (v6)
  {
    if (!_dispatch_unote_unregister(*(void *)(a1 + 88), v3)) {
      goto LABEL_12;
    }
    uint64_t v7 = _dispatch_object_alloc(OS_dispatch_mach_msg, 112);
    *(void *)(v7 + 16) = -1985229329;
    *(void *)(v7 + 24) = &unk_1EB1CE780;
    *(_DWORD *)(v7 + 72) = 0;
    *(void *)(v7 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 24;
    *(_DWORD *)(v7 + 10_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v6;
    *(_DWORD *)(v7 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, v7, 0);
    *(_DWORD *)(v5 + 24) = 0;
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if (!v2)
  {
LABEL_12:
    atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 80), 0x40000000u, memory_order_relaxed);
    return;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 80);
  do
  {
    unsigned int v9 = v8;
    unsigned int v10 = v8 & 0x3FFFFFFF | 0x80000000;
    if (v10 == v8) {
      break;
    }
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 80), &v8, v10, memory_order_relaxed, memory_order_relaxed);
  }
  while (v8 != v9);
  if ((v9 & 0xA0000000) != 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt channel state";
    qword_1E91199F0 = v9;
    __break(1u);
LABEL_22:
    qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
  {
    goto LABEL_22;
  }
}

void _dispatch_mach_cancel_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  if ((a2 & 0x1000000) != 0) {
    uint64_t v4 = (void *)MEMORY[0x18C121B40]();
  }
  else {
    uint64_t v4 = 0;
  }
  if ((*(_WORD *)(a1 + 116) & 4) == 0) {
    _dispatch_mach_connect_invoke(a1);
  }
  if (*(void *)(v3 + 40)) {
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 40);
  }
  else {
    uint64_t v5 = 0;
  }
  _dispatch_client_callout4(*(void *)(v3 + 48), 8, 0, 0, v5);
  if (v4) {
  *(_WORD *)(a1 + 116) |= 8u;
  }
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return v0 + v1;
}

char *_dispatch_unote_create_with_handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    return _dispatch_unote_create(a1, a2, a3);
  }
  else {
    return 0;
  }
}

char *_dispatch_unote_create(uint64_t a1, int a2, uint64_t a3)
{
  if ((~*(_DWORD *)(a1 + 20) & a3) != 0) {
    return 0;
  }
  int v4 = a3;
  if (*(_DWORD *)(a1 + 20))
  {
    if (!a3 && (*(unsigned char *)(a1 + 10) & 4) == 0) {
      return 0;
    }
  }
  size_t v7 = *(unsigned int *)(a1 + 24);
  if ((*(_WORD *)(a1 + 12) & 0x100) != 0) {
    uint64_t result = (char *)_dispatch_calloc(1uLL, v7);
  }
  else {
    uint64_t result = (char *)_dispatch_calloc(1uLL, v7 + 24) + 24;
  }
  *(void *)uint64_t result = a1;
  char v8 = result[29] & 0xDF | (32 * (*(unsigned char *)(a1 + 10) & 1));
  result[29] = v8;
  *((_DWORD *)result + 6) = a2;
  result[28] = *(unsigned char *)(a1 + 8);
  *((_DWORD *)result + 8) = v4;
  if (*(unsigned char *)(a1 + 13)) {
    result[29] = v8 | 1;
  }
  return result;
}

char *_dispatch_unote_create_without_handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    return 0;
  }
  else {
    return _dispatch_unote_create(a1, 0, a3);
  }
}

void _dispatch_unote_dispose(uint64_t a1)
{
  uint64_t v1 = a1;
  char v2 = *(unsigned char *)(a1 + 29);
  if ((v2 & 0x40) != 0)
  {
    _Block_release(*(const void **)(a1 + 48));
    char v2 = *(unsigned char *)(v1 + 29);
  }
  if ((v2 & 2) != 0)
  {
    if (*(_DWORD *)(v1 + 112) == -1 && *(_DWORD *)(v1 + 116) == -1)
    {
      a1 = *(void *)(v1 + 104);
      if (!a1) {
        goto LABEL_10;
      }
    }
    else
    {
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Disposing of timer still in its heap";
      __break(1u);
    }
    free((void *)a1);
    *(void *)(v1 + 104) = 0;
  }
  else
  {
    BOOL v3 = (v2 & 1) == 0;
    uint64_t v4 = -24;
    if (!v3) {
      uint64_t v4 = 0;
    }
    v1 += v4;
  }
LABEL_10:

  free((void *)v1);
}

uint64_t _dispatch_unote_register(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x4600FFFF) == 0x4004000 && MEMORY[0xFFFFFC100]) {
    kdebug_trace();
  }
  *(_DWORD *)(a1 + 36) = a3;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(void *)(a1 + 16) = -3;
    return 1;
  }
  if ((*(unsigned char *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_register(a1, a2, a3);
    return 1;
  }
  if (*(unsigned char *)(a1 + 29))
  {
    return _dispatch_unote_register_direct((uint64_t *)a1, a2);
  }
  else
  {
    return _dispatch_unote_register_muxed(a1);
  }
}

void _dispatch_timer_unote_register(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (((a3 >> 8) & 0xF) - 1 <= 1)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 30);
    if (v3)
    {
      if (MEMORY[0xFFFFFC100])
      {
        uint64_t v4 = a2;
        uint64_t v5 = a1;
        kdebug_trace();
        a2 = v4;
        a1 = v5;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v3 | 2;
      *(_DWORD *)(a1 + 24) = 3 * ((v3 >> 2) & 3) + (v3 & 1 | 2);
    }
  }
  if ((*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL) != a2) {
    *(void *)(a1 + 16) = -4;
  }
  if (*(void *)(a1 + 104))
  {
    _dispatch_timer_unote_configure((unsigned int *)a1);
  }
}

void _dispatch_unote_resume(void *a1)
{
  if ((*((unsigned char *)a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_resume((uint64_t)a1);
  }
  else if (*((unsigned char *)a1 + 29))
  {
    _dispatch_unote_resume_direct(a1);
  }
  else
  {
    _dispatch_unote_resume_muxed(a1);
  }
}

void _dispatch_timer_unote_resume(uint64_t a1)
{
  BOOL v2 = !(*(void *)(55 - *(void *)(a1 + 8)) >> 55)
    && *(_DWORD *)(a1 + 24) != -1
    && *(void *)(a1 + 80) < 0x7FFFFFFFFFFFFFFFuLL;
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 30);
  int v5 = (v4 >> 2) & 3;
  int v6 = v4 & 3;
  int v7 = 3 * v5;
  if ((v3 & 0xFFFFFFFFFFFFFFFCLL) == 0xFFFFFFFFFFFFFFFCLL) {
    char v8 = &_dispatch_timers_heap;
  }
  else {
    char v8 = *(void **)((v3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  }
  unsigned int v9 = v7 + v6;
  if ((v3 & v2) == 1)
  {
    if (*(_DWORD *)(a1 + 24) == v9)
    {
      if (v2) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  else if ((v3 & 1) == 0)
  {
    if (!v2) {
      return;
    }
    goto LABEL_15;
  }
  _dispatch_timer_unote_disarm(a1, (uint64_t)v8);
  if (v2)
  {
LABEL_11:
    if (v3)
    {
LABEL_17:
      _dispatch_timer_unote_arm(a1, (uint64_t)v8, v9);
      return;
    }
LABEL_15:
    if (*(_DWORD *)(7 - *(void *)(a1 + 8)) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(void *)(a1 + 8)), 2u, memory_order_relaxed) <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      return;
    }
    goto LABEL_17;
  }
LABEL_21:
  if (v3)
  {
    unsigned int v10 = (void *)~*(void *)(a1 + 8);
    _os_object_release_internal_n(v10, (const char *)2);
  }
}

uint64_t _dispatch_unote_unregister(uint64_t a1, char a2)
{
  if (!*(void *)(a1 + 16)) {
    return 1;
  }
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(void *)(a1 + 16) = 0;
    return 1;
  }
  if ((*(unsigned char *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_unregister(a1);
    return 1;
  }
  if (*(unsigned char *)(a1 + 29))
  {
    return _dispatch_unote_unregister_direct((uint64_t *)a1, a2);
  }
  else
  {
    return _dispatch_unote_unregister_muxed((uint64_t *)a1);
  }
}

void _dispatch_timer_unote_unregister(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if (v2 == -4) {
    uint64_t v3 = &_dispatch_timers_heap;
  }
  else {
    uint64_t v3 = *(void **)(v2 + 48);
  }
  if ((*(void *)(a1 + 16) & 1) != 0
    && (_dispatch_timer_unote_disarm(a1, (uint64_t)v3), *(_DWORD *)(7 - *(void *)(a1 + 8)) != 0x7FFFFFFF)
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(void *)(a1 + 8)), 0xFFFFFFFE, memory_order_release) <= 2)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if (v4 == -4 || v4 == 0) {
      goto LABEL_14;
    }
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit > 0) {
      goto LABEL_14;
    }
    if ((add_explicit & 0x80000000) == 0)
    {
      *(void *)(v4 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc((void *)v4);
LABEL_14:
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = -1;
      return;
    }
  }
  qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

unsigned char *_dispatch_source_data_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 | a2) {
    return 0;
  }
  uint64_t result = _dispatch_calloc(1uLL, *(unsigned int *)(a1 + 24));
  *(void *)uint64_t result = a1;
  result[28] = *(unsigned char *)(a1 + 8);
  result[29] |= 1u;
  return result;
}

char *_dispatch_source_signal_create(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 <= 0x1F) {
    return _dispatch_unote_create_with_handle(a1, a2, a3);
  }
  else {
    return 0;
  }
}

void _dispatch_timer_unote_configure(unsigned int *a1)
{
  __swp(a1, a1 + 26);
  unsigned int v2 = *((unsigned __int8 *)a1 + 30);
  if (a1[6] != ((v2 >> 2) & 3))
  {
    char v3 = v2 & 0xF3;
    *((unsigned char *)a1 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v3;
    *((unsigned char *)a1 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v3 | (4 * *((unsigned char *)a1 + 24));
  }
  long long v4 = *(_OWORD *)a1;
  *((void *)a1 + 12) = *((void *)a1 + 2);
  *((_OWORD *)a1 + 5) = v4;
  free(a1);
  *((void *)a1 + 9) = 0;
  if (*((void *)a1 + 2))
  {
    _dispatch_timer_unote_resume((uint64_t)a1);
  }
}

double _dispatch_source_timer_create(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3) {
    unsigned int v3 = a3 & 0xFFFFFFFD;
  }
  else {
    unsigned int v3 = a3;
  }
  if ((v3 & ~*(_DWORD *)(a1 + 20)) != 0) {
    return result;
  }
  long long v4 = (char **)a1;
  if ((*(unsigned char *)(a1 + 11) & 0x10) != 0)
  {
    if (!a2) {
      return result;
    }
LABEL_16:
    int v5 = (unsigned __int8 *)_dispatch_calloc(1uLL, *((unsigned int *)v4 + 6));
    *(void *)int v5 = v4;
    v5[28] = *((unsigned char *)v4 + 8);
    v5[29] |= 2u;
    unsigned int v6 = *((unsigned __int8 *)v4 + 11) | v3 | v5[30];
    v5[30] = v6;
    *((_DWORD *)v5 + 6) = 3 * ((v6 >> 2) & 3) + (v6 & 3);
    double result = NAN;
    *((void *)v5 + 14) = -1;
    *((void *)v5 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = -1;
    *((void *)v5 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = -1;
    *((void *)v5 + 12) = -1;
    return result;
  }
  if (*(unsigned __int8 *)(a1 + 8) != 236)
  {
    switch(a2)
    {
      case 0:
        goto LABEL_16;
      case 1:
        goto LABEL_15;
      case 2:
        v3 |= 4u;
        goto LABEL_15;
      case 3:
        v3 |= 8u;
LABEL_15:
        long long v4 = &_dispatch_source_type_timer_with_clock;
        goto LABEL_16;
      default:
        return result;
    }
  }
  if (!a2) {
    goto LABEL_16;
  }
  return result;
}

void _dispatch_event_loop_drain_timers(uint64_t a1, unsigned int a2)
{
  v57[0] = 0;
  v57[1] = 0;
  uint64_t v58 = 0;
  uint64_t v3 = a2;
  do
  {
    if (!a2)
    {
      *(unsigned char *)(a1 + 6) = 0;
      return;
    }
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = a1 + 32 * v4;
      uint64_t v8 = *(void *)(v5 + 8);
      unsigned int v6 = (uint64_t *)(v5 + 8);
      uint64_t v7 = v8;
      if (v8)
      {
        unint64_t v9 = v4 / 3uLL;
        while (1)
        {
          unint64_t v10 = v57[v9];
          if (!v10)
          {
            uint64_t v59 = 0;
            uint64_t v60 = 0;
            mach_get_times();
            uint64_t v58 = v60 + 1000000000 * v59;
            unint64_t v10 = v57[v9];
          }
          unint64_t v11 = *(void *)(v7 + 80);
          BOOL v12 = v10 >= v11;
          unint64_t v13 = v10 - v11;
          if (!v12) {
            goto LABEL_41;
          }
          if ((*(unsigned char *)(v7 + 30) & 0x40) != 0)
          {
            _dispatch_timer_unote_disarm(v7, a1);
            unint64_t v14 = *(void *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL;
            if (v14 != -4 && v14 != 0)
            {
              int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 96), 0xFFFFFFFF, memory_order_relaxed);
              if (add_explicit <= 0)
              {
                if (add_explicit < 0) {
                  _os_object_retain_weak_cold_1();
                }
                *(void *)(v14 + 56) = 0xDEAD000000000000;
                _dispatch_object_dealloc((void *)v14);
              }
            }
            *(void *)(v7 + 16) = 0;
            *(void *)(v7 + 72) = 2;
            goto LABEL_21;
          }
          if (!*(void *)(v7 + 104)) {
            break;
          }
          _dispatch_timer_unote_configure((unsigned int *)v7);
LABEL_22:
          uint64_t v7 = *v6;
          if (!*v6) {
            goto LABEL_41;
          }
        }
        if (*(void *)(v7 + 72))
        {
          _dispatch_timer_unote_disarm(v7, a1);
          atomic_fetch_or_explicit((atomic_ullong *volatile)(v7 + 72), 1uLL, memory_order_relaxed);
        }
        else
        {
          unint64_t v17 = *(void *)(v7 + 96);
          unint64_t v18 = v13 / v17;
          if (v18 + 1 < 0x7FFFFFFFFFFFFFFFLL) {
            uint64_t v19 = v18 + 1;
          }
          else {
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          if (v17 > 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v20 = -1;
            *(void *)(v7 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = -1;
            *(void *)(v7 + 88) = -1;
          }
          else
          {
            unint64_t v20 = v19 * v17 + v11;
            unint64_t v21 = *(void *)(v7 + 88) + v19 * v17;
            *(void *)(v7 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v20;
            *(void *)(v7 + 88) = v21;
          }
          uint64_t v22 = 2 * v19;
          if (*(void *)(55 - *(void *)(v7 + 8)) >> 55)
          {
            if (MEMORY[0xFFFFFC100]) {
              kdebug_trace();
            }
          }
          else if (*(_DWORD *)(v7 + 24) != -1 && v20 <= 0x7FFFFFFFFFFFFFFELL)
          {
            if (*(_DWORD *)(7 - *(void *)(v7 + 8)) != 0x7FFFFFFF
              && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(void *)(v7 + 8)), 2u, memory_order_relaxed) <= 0)
            {
              dispatch_set_target_queue_cold_2();
            }
            _dispatch_timer_unote_arm(v7, a1, v4);
            *(void *)(v7 + 72) = v22;
            goto LABEL_21;
          }
          _dispatch_timer_unote_disarm(v7, a1);
          atomic_store(v22 | 1, (unint64_t *)(v7 + 72));
        }
LABEL_21:
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v7 + 48))(v7, 16, 0, 0);
        goto LABEL_22;
      }
LABEL_41:
      ++v4;
    }
    while (v4 != v3);
    *(unsigned char *)(a1 + 6) = 0;
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = a1 + 32 * v23;
      unint64_t v25 = (char *)(v24 + 7);
      if ((*(unsigned char *)(v24 + 7) & 2) == 0) {
        goto LABEL_91;
      }
      uint64_t v26 = *(void *)(v24 + 8);
      if (!v26) {
        goto LABEL_87;
      }
      unint64_t v27 = *(void *)(v26 + 80);
      unint64_t v28 = *(void *)(*(void *)(a1 + 32 * v23 + 16) + 88);
      unint64_t v29 = v57[v23 / 3];
      if (!v29)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        mach_get_times();
        uint64_t v58 = v60 + 1000000000 * v59;
        unint64_t v29 = v57[v23 / 3];
      }
      unsigned int v30 = v23 % 3;
      if (v27 <= v29) {
        goto LABEL_86;
      }
      unsigned int v31 = *(_DWORD *)v24;
      if (*(_DWORD *)v24 >= 3u)
      {
        uint64_t v32 = _dispatch_kevent_coalescing_window[v30];
        if (v32 + v27 < v28)
        {
          unint64_t v33 = v28 - v32;
          unint64_t v27 = *(void *)(*(void *)(v24 + 8) + 80);
          uint64_t v34 = a1 + 32 * v23;
          int v35 = *(unsigned __int8 *)(v34 + 4);
          unsigned int v36 = (uint64_t *)(v34 + 24);
          unsigned int v37 = 2;
          do
          {
            if (v37 > 1)
            {
              unsigned int v39 = __clz((v37 - 2) | 7);
              int v40 = v36;
              if (30 - v39 != v35) {
                int v40 = (uint64_t *)(*v36 + 8 * ((8 << (v35 - 2)) - 30 + v39));
              }
              uint64_t v41 = *v40;
              if (v39 == 29) {
                int v42 = 0;
              }
              else {
                int v42 = -8 << (28 - v39);
              }
              uint64_t v38 = v41 + 8 * (v42 + v37 - 2);
            }
            else
            {
              uint64_t v38 = a1 + 32 * v23 + 8 * v37 + 8;
            }
            unint64_t v43 = *(void *)(*(void *)v38 + 80);
            if (v43 <= v27) {
              unint64_t v44 = v27;
            }
            else {
              unint64_t v44 = v43;
            }
            unsigned int v45 = (v37 & 0xFFFFFFFE) + 2;
            if (v45 == v31) {
              unsigned int v46 = ((v37 - 2) >> 1) & 0x7FFFFFFE;
            }
            else {
              unsigned int v46 = v37 & 0xFFFFFFFE;
            }
            unsigned int v47 = (v46 + 3) >> __clz(__rbit32(-4 - v46));
            int v48 = v37 & 1 | (2 * v47);
            if (!v47) {
              int v48 = -1;
            }
            if (2 * v37 - (v37 & 1) + 2 < v31) {
              int v48 = 2 * v37 - (v37 & 1) + 2;
            }
            if (v45 == v31) {
              unsigned int v49 = ((v37 - 2) >> 1) & 0x7FFFFFFE;
            }
            else {
              unsigned int v49 = v37 & 0xFFFFFFFE;
            }
            unsigned int v50 = (v49 + 3) >> __clz(__rbit32(-4 - v49));
            unsigned int v37 = v37 & 1 | (2 * v50);
            if (!v50) {
              unsigned int v37 = -1;
            }
            if (v43 <= v33)
            {
              unsigned int v37 = v48;
              unint64_t v27 = v44;
            }
          }
          while (v37 < v31);
        }
      }
      unint64_t v51 = v27 - v29;
      uint64_t v52 = v51 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v51;
      uint64_t v53 = v28 - v27 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v28 - v27;
      if (!v52)
      {
LABEL_86:
        *(unsigned char *)(a1 + 6) |= (1 << v30) | 0x80;
LABEL_87:
        char v55 = *v25;
        if (*v25)
        {
          _dispatch_event_loop_timer_delete(a1, v23);
          char v55 = *v25;
        }
        char v54 = v55 & 0xFC;
        goto LABEL_90;
      }
      if ((unint64_t)(v52 - 0x7FFFFFFFFFFFFFFFLL) <= 0x8000000000000001) {
        goto LABEL_87;
      }
      _dispatch_event_loop_timer_arm(a1, v23, v52, v53, (uint64_t)v57);
      char v54 = *v25 & 0xFC | 1;
LABEL_90:
      *unint64_t v25 = v54;
LABEL_91:
      ++v23;
    }
    while (v23 != v3);
  }
  while (*(unsigned char *)(a1 + 6));
}

double _dispatch_timer_unote_disarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  uint64_t v5 = a2 + 32 * v4;
  int v6 = *(_DWORD *)v5;
  unsigned int v7 = *(_DWORD *)v5 - 2;
  *(_DWORD *)uint64_t v5 = v7;
  if (v6 == 2)
  {
    *(unsigned char *)(v5 + 7) |= 2u;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = (unsigned char *)(v5 + 4);
    unint64_t v10 = (void *)(v5 + 24);
    char v11 = 1;
    do
    {
      char v12 = v11;
      unsigned int v13 = v7 + v8;
      if (v7 + v8 > 1)
      {
        int v15 = *v9;
        unsigned int v16 = v13 - 2;
        unsigned int v17 = __clz(v16 | 7);
        unint64_t v18 = (void *)(v5 + 24);
        if (30 - v17 != v15) {
          unint64_t v18 = (void *)(*v10 + 8 * ((8 << (v15 - 2)) + v17 - 30));
        }
        if (v17 == 29) {
          int v19 = 0;
        }
        else {
          int v19 = -8 << (28 - v17);
        }
        unint64_t v14 = (uint64_t *)(*v18 + 8 * (v19 + v16));
      }
      else
      {
        unint64_t v14 = (uint64_t *)(a2 + 32 * v4 + 8 * v13 + 8);
      }
      uint64_t v20 = *v14;
      *unint64_t v14 = 0;
      if (v20 != a1) {
        _dispatch_timer_heap_resift(v5, v20, *(_DWORD *)(a1 + 4 * v8 + 112));
      }
      char v11 = 0;
      uint64_t v8 = 1;
    }
    while ((v12 & 1) != 0);
    int v21 = *v9;
    unsigned int v22 = (8 << (v21 - 2)) - v21 + 4;
    int v23 = v21 - 1;
    if (!v23) {
      unsigned int v22 = 2;
    }
    if (v7 <= v22)
    {
      *unint64_t v9 = v23;
      uint64_t v24 = (void *)*v10;
      if ((_BYTE)v23)
      {
        int v25 = v23;
        unsigned int v26 = 8 << (v23 - 1);
        uint64_t v27 = v24[v26 - v23];
        unsigned int v28 = v23 - 1;
        if (v25 != 1) {
          memcpy((void *)(v27 + 8 * ((v26 >> 1) - v28)), &v24[v26 - v28], 8 * v28);
        }
      }
      else
      {
        uint64_t v27 = 0;
      }
      *unint64_t v10 = v27;
      free(v24);
    }
  }
  double result = NAN;
  *(void *)(a1 + 112) = -1;
  *(unsigned char *)(a2 + 6) |= (1 << (v4 % 3)) | 0x80;
  *(void *)(a1 + 16) &= ~1uLL;
  return result;
}

uint64_t _dispatch_timer_unote_arm(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  if (*(void *)(result + 16))
  {
    _dispatch_timer_heap_resift(a2 + 32 * a3, result, *(_DWORD *)(result + 112));
    double result = _dispatch_timer_heap_resift(a2 + 32 * a3, v5, *(_DWORD *)(v5 + 116));
  }
  else
  {
    *(_DWORD *)(result + 24) = a3;
    uint64_t v6 = a2 + 32 * a3;
    unsigned int v7 = *(_DWORD *)v6;
    unsigned int v8 = *(_DWORD *)v6 + 2;
    *(_DWORD *)uint64_t v6 = v8;
    unsigned int v9 = *(_DWORD *)(result + 36);
    unsigned int v10 = (v9 >> 8) & 0xF;
    unsigned int v11 = (unsigned __int16)v9 >> 12;
    if (v10 > v11) {
      unsigned int v11 = v10;
    }
    if (v11 > *(unsigned __int8 *)(v6 + 5))
    {
      *(unsigned char *)(v6 + 5) = v11;
      *(unsigned char *)(v6 + 7) |= 2u;
    }
    if (v7)
    {
      if (*(unsigned char *)(a2 + 32 * a3 + 4))
      {
        int v12 = *(unsigned __int8 *)(a2 + 32 * a3 + 4);
        unsigned int v13 = (8 << (v12 - 1)) - v12 + 3;
      }
      else
      {
        unsigned int v13 = 2;
      }
      if (v8 > v13) {
        _dispatch_timer_heap_grow(a2 + 32 * a3);
      }
      _dispatch_timer_heap_resift(a2 + 32 * a3, v5, v7);
      double result = _dispatch_timer_heap_resift(a2 + 32 * a3, v5, v7 + 1);
    }
    else
    {
      uint64_t v14 = a2 + 32 * a3;
      *(unsigned char *)(v14 + 7) |= 2u;
      *(void *)(result + 112) = 0x100000000;
      *(int64x2_t *)(v14 + 8) = vdupq_n_s64(result);
    }
    *(void *)(v5 + 16) |= 1uLL;
  }
  *(unsigned char *)(a2 + 6) |= (1 << (a3 % 3)) | 0x80;
  return result;
}

uint64_t _dispatch_timer_heap_resift(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)result;
  uint64_t v4 = a3 & 1;
  int v5 = *(unsigned __int8 *)(result + 4);
  unsigned int v6 = a3 - 2;
  if (a3 < 2)
  {
    unsigned int v7 = (void *)(result + 8 * a3 + 8);
LABEL_22:
    unsigned int v19 = a3 & 1;
    unsigned int v20 = 2 * a3 - v19 + 2;
    if (v20 < v3)
    {
      int v21 = (void *)(result + 24);
      int v22 = (8 << (v5 - 2)) - 30;
      while (1)
      {
        if (v20 > 1)
        {
          unsigned int v23 = __clz((v20 - 2) | 7);
          uint64_t v24 = (uint64_t *)(result + 24);
          if (30 - v23 != v5) {
            uint64_t v24 = (uint64_t *)(*v21 + 8 * (v22 + v23));
          }
          uint64_t v25 = *v24;
          int v26 = v23 == 29 ? 0 : -8 << (28 - v23);
          unsigned int v13 = (void *)(v25 + 8 * (v26 + v20 - 2));
        }
        else
        {
          unsigned int v13 = (void *)(result + 8 * v20 + 8);
        }
        uint64_t v27 = *v13;
        if (v20 + 2 >= v3)
        {
          unsigned int v12 = v20;
        }
        else
        {
          if (v20 < 0xFFFFFFFE)
          {
            unsigned int v29 = __clz(v20 | 7);
            unsigned int v30 = (uint64_t *)(result + 24);
            if (30 - v29 != v5) {
              unsigned int v30 = (uint64_t *)(*v21 + 8 * (v22 + v29));
            }
            uint64_t v31 = *v30;
            int v32 = v29 == 29 ? 0 : -8 << (28 - v29);
            unsigned int v28 = (void *)(v31 + 8 * (v32 + v20));
          }
          else
          {
            unsigned int v28 = (void *)(result + 8 * (v20 + 2) + 8);
          }
          unsigned int v12 = v20;
          if (*(void *)(v27 + 8 * v4 + 80) > *(void *)(*v28 + 8 * v4 + 80))
          {
            unsigned int v13 = v28;
            uint64_t v27 = *v28;
            unsigned int v12 = v20 + 2;
          }
        }
        if (*(void *)(a2 + 80 + 8 * v4) <= *(void *)(v27 + 8 * v4 + 80)) {
          break;
        }
        if (a3 <= 1) {
          *(unsigned char *)(result + 7) |= 2u;
        }
        *unsigned int v7 = v27;
        *(_DWORD *)(v27 + 4 * v19 + 112) = a3;
        unsigned int v19 = v12 & 1;
        unsigned int v20 = 2 * v12 - v19 + 2;
        unsigned int v7 = v13;
        a3 = v12;
        if (v20 >= v3) {
          goto LABEL_50;
        }
      }
    }
    unsigned int v12 = a3;
    unsigned int v13 = v7;
LABEL_50:
    unsigned int v7 = v13;
    a3 = v12;
    if (v12 <= 1)
    {
LABEL_51:
      *(unsigned char *)(result + 7) |= 2u;
      unsigned int v7 = v13;
      a3 = v12;
    }
    goto LABEL_52;
  }
  unsigned int v8 = __clz(v6 | 7);
  if (30 - v8 == v5) {
    unsigned int v9 = (void *)(result + 24);
  }
  else {
    unsigned int v9 = (void *)(*(void *)(result + 24) + 8 * (v8 + (8 << (v5 - 2)) - 30));
  }
  char v10 = 0;
  if (v8 == 29) {
    int v11 = 0;
  }
  else {
    int v11 = -8 << (28 - v8);
  }
  unsigned int v7 = (void *)(*v9 + 8 * (v11 + v6));
  while (1)
  {
    unsigned int v12 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    if (v12 > 1)
    {
      unsigned int v14 = __clz((v12 - 2) | 7);
      int v15 = (uint64_t *)(result + 24);
      if (30 - v14 != v5) {
        int v15 = (uint64_t *)(*(void *)(result + 24) + 8 * ((8 << (v5 - 2)) - 30 + v14));
      }
      uint64_t v16 = *v15;
      int v17 = v14 == 29 ? 0 : -8 << (28 - v14);
      unsigned int v13 = (void *)(v16 + 8 * (v17 + v12 - 2));
    }
    else
    {
      unsigned int v13 = (void *)(result + 8 * v12 + 8);
    }
    uint64_t v18 = *v13;
    if (*(void *)(*v13 + 8 * v4 + 80) <= *(void *)(a2 + 80 + 8 * v4)) {
      break;
    }
    *unsigned int v7 = v18;
    *(_DWORD *)(v18 + 4 * (a3 & 1) + 112) = a3;
    char v10 = 1;
    unsigned int v7 = v13;
    a3 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    if (v12 <= 1) {
      goto LABEL_51;
    }
  }
  if ((v10 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_52:
  *unsigned int v7 = a2;
  *(_DWORD *)(a2 + 4 * (a3 & 1) + 112) = a3;
  return result;
}

char *_dispatch_timer_heap_grow(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 4);
  *(unsigned char *)(a1 + 4) = v2 + 1;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2) {
    size_t v4 = (8 << (v2 - 1));
  }
  else {
    size_t v4 = 8;
  }
  double result = (char *)_dispatch_calloc(v4, 8uLL);
  unsigned int v6 = result;
  if (v2 >= 2)
  {
    double result = (char *)memcpy(&result[8 * (v4 - (v2 - 1))], (const void *)(v3 + 8 * ((v4 >> 1) - (v2 - 1))), 8 * (v2 - 1));
LABEL_7:
    *(void *)&v6[8 * (v4 - v2)] = v3;
    goto LABEL_8;
  }
  if (v2) {
    goto LABEL_7;
  }
LABEL_8:
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t _dispatch_sync_ipc_handoff_begin(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = 655343;
  void v4[2] = a1;
  int v5 = -2147483392;
  uint64_t v7 = 0;
  uint64_t v6 = 0;
  int v8 = 0;
  uint64_t v9 = a3;
  uint64_t v10 = -1;
  uint64_t v11 = a1;
  uint64_t result = _dispatch_kq_immediate_update(a1, (uint64_t)v4);
  if ((result & 0xFFFFFFFD) != 0) {
    _dispatch_sync_ipc_handoff_begin_cold_1(result);
  }
  return result;
}

uint64_t _dispatch_kq_immediate_update(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v2 && *(void *)(v2 + 24) == a1)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v4 = *(unsigned __int16 *)(v2 + 40);
    if (*(_WORD *)(v2 + 40))
    {
      uint64_t v5 = 0;
      uint64_t v6 = (unsigned __int16 *)(v3 + 8);
      uint64_t v7 = (unsigned __int16 *)(v3 + 8);
      while (1)
      {
        int v8 = *v7;
        v7 += 36;
        if (v8 == *(unsigned __int16 *)(a2 + 8)
          && *((void *)v6 - 1) == *(void *)a2
          && *((void *)v6 + 1) == *(void *)(a2 + 16))
        {
          break;
        }
        ++v5;
        uint64_t v6 = v7;
        if (v4 == v5) {
          return _dispatch_kq_drain(a1, a2, 1, 3);
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if (v5 < v4)
    {
      unsigned __int16 v9 = v4 - 1;
      *(_WORD *)(v2 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v9;
      if (v5 != v9)
      {
        uint64_t v10 = v3 + 72 * v5;
        uint64_t v11 = v3 + 72 * v9;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        long long v12 = *(_OWORD *)(v11 + 16);
        long long v13 = *(_OWORD *)(v11 + 32);
        long long v14 = *(_OWORD *)(v11 + 48);
        *(void *)(v10 + 64) = *(void *)(v11 + 64);
        *(_OWORD *)(v10 + 32) = v13;
        *(_OWORD *)(v10 + 48) = v14;
        *(_OWORD *)(v10 + 16) = v12;
      }
    }
  }
  return _dispatch_kq_drain(a1, a2, 1, 3);
}

double _dispatch_sync_ipc_handoff_end(uint64_t a1, unsigned int a2)
{
  v3[0] = a2;
  v3[1] = 524271;
  v3[2] = a1;
  unsigned int v4 = 0x80000000;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(void *)&double result = _dispatch_kq_deferred_update(a1, (uint64_t)v3).n128_u64[0];
  return result;
}

__n128 _dispatch_kq_deferred_update(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 232);
  if (v3 && *(void *)(v3 + 24) == a1 && (int v5 = *(unsigned __int16 *)(v3 + 42), *(_WORD *)(v3 + 42)))
  {
    uint64_t v6 = *(unsigned __int16 *)(v3 + 40);
    if (*(_WORD *)(v3 + 40))
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(v3 + 32) + 8;
      unsigned __int16 v9 = (unsigned __int16 *)v8;
      while (1)
      {
        int v10 = *v9;
        v9 += 36;
        if (v10 == *(unsigned __int16 *)(a2 + 8)
          && *(void *)(v8 - 8) == *(void *)a2
          && *(void *)(v8 + 8) == *(void *)(a2 + 16))
        {
          break;
        }
        ++v7;
        uint64_t v8 = (uint64_t)v9;
        if (v6 == v7)
        {
          LODWORD(v7) = *(unsigned __int16 *)(v3 + 40);
          break;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if (a1 != -4) {
      *(void *)(StatusReg + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 1;
    }
    if (v7 == v5)
    {
      *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 1;
      uint64_t v14 = a2;
      uint64_t v15 = v3;
      _dispatch_kq_drain(a1, *(void *)(v3 + 32), v6, 3);
      a2 = v14;
      uint64_t v3 = v15;
      LODWORD(v7) = 0;
    }
    else if (v7 == v6)
    {
      *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v6 + 1;
      LODWORD(v7) = v6;
    }
    uint64_t v11 = *(void *)(v3 + 32) + 72 * v7;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
    __n128 result = *(__n128 *)(a2 + 16);
    long long v12 = *(_OWORD *)(a2 + 32);
    long long v13 = *(_OWORD *)(a2 + 48);
    *(void *)(v11 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(v11 + 32) = v12;
    *(_OWORD *)(v11 + 48) = v13;
    *(__n128 *)(v11 + 16) = result;
  }
  else
  {
    _dispatch_kq_drain(a1, a2, 1, 3);
  }
  return result;
}

uint64_t _dispatch_unote_register_muxed(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  int v3 = *(char *)(a1 + 28);
  unint64_t v4 = v2 >> 8;
  if ((v3 | 0x10) != 0xFFFFFFF8) {
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
  }
  int v5 = (void **)((char *)&_dispatch_sources + 8 * (v4 & 0x3F));
  uint64_t v6 = *v5;
  if (!*v5)
  {
LABEL_7:
    int64_t v7 = (int64_t)_dispatch_calloc(1uLL, 0x60uLL);
    uint64_t v6 = (void *)v7;
    *(void *)(v7 + 24) = *(unsigned int *)(a1 + 24);
    uint64_t v8 = v7 + 24;
    __int16 v9 = *(_WORD *)(*(void *)a1 + 12) | 5;
    unsigned int v10 = *(_DWORD *)(*(void *)a1 + 16) | *(_DWORD *)(a1 + 32);
    uint64_t v11 = *(unsigned __int16 *)(*(void *)a1 + 14);
    *(_WORD *)(v7 + 32) = *(char *)(*(void *)a1 + 8);
    *(_WORD *)(v7 + 34) = v9;
    *(void *)(v7 + 48) = v10;
    *(void *)(v7 + 56) = v11;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0u;
    *(_DWORD *)(v7 + 36) = 0x2000000;
    *(void *)(v7 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v7 | 1;
    long long v12 = *(uint64_t (**)(int64_t, uint64_t))(*(void *)a1 + 40);
    if (v12)
    {
      if ((v12(v7, v8) & 1) == 0) {
        goto LABEL_9;
      }
    }
    else if (_dispatch_kq_immediate_update(-4, v8))
    {
LABEL_9:
      free(v6);
      return 0;
    }
    *((_WORD *)v6 + 17) &= 0xFDFEu;
    uint64_t v18 = *v5;
    void *v6 = *v5;
    if (v18) {
      v18[1] = v6;
    }
    *int v5 = v6;
    v6[1] = v5;
    goto LABEL_18;
  }
  while (v6[3] != v2 || *((unsigned __int16 *)v6 + 16) != (unsigned __int16)v3)
  {
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  int v14 = *(_DWORD *)(a1 + 32);
  int v15 = *((_DWORD *)v6 + 12);
  int v16 = v14 & ~v15;
  if (v16)
  {
    *((_DWORD *)v6 + 12) = v15 | v14;
    int v17 = *(uint64_t (**)(void *))(*(void *)a1 + 40);
    if (v17)
    {
      if ((v17(v6) & 1) == 0) {
        goto LABEL_13;
      }
    }
    else if (_dispatch_kq_immediate_update(-4, (uint64_t)(v6 + 3)))
    {
LABEL_13:
      uint64_t result = 0;
      *((_DWORD *)v6 + 12) &= ~v16;
      return result;
    }
  }
LABEL_18:
  unsigned int v19 = v6 + 2;
  uint64_t v20 = v6[2];
  *(void *)(a1 - 24) = v20;
  uint64_t v21 = a1 - 24;
  if (v20) {
    *(void *)(v20 + 8) = v21;
  }
  *unsigned int v19 = v21;
  *(void *)(a1 - 16) = v19;
  if (*(unsigned __int8 *)(a1 + 28) == 232) {
    *(unsigned char *)(a1 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v6[8] != 0;
  }
  *(void *)(a1 - 8) = v6;
  *(void *)(a1 + 16) = -3;
  return 1;
}

void _dispatch_unote_resume_muxed(void *a1)
{
  a1[2] |= 1uLL;
  uint64_t v1 = *(void (**)(uint64_t))(*a1 + 40);
  uint64_t v2 = *(a1 - 1);
  if (v1) {
    v1(v2);
  }
  else {
    _dispatch_kq_deferred_update(-4, v2 + 24);
  }
}

uint64_t _dispatch_unote_unregister_muxed(uint64_t *a1)
{
  uint64_t v1 = (__int16 *)*(a1 - 1);
  if (v1[16] == -24) {
    *((unsigned char *)a1 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  }
  a1[2] = 0;
  uint64_t v2 = *(a1 - 3);
  if (v2) {
    *(void *)(v2 + 8) = *(a1 - 2);
  }
  *(void *)*(a1 - 2) = v2;
  *(a1 - _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 0;
  uint64_t v3 = *((void *)v1 + 2);
  if (v3)
  {
    int v4 = *(_DWORD *)(*a1 + 16);
    int v5 = (uint64_t *)*((void *)v1 + 2);
    do
    {
      uint64_t v6 = v5;
      v4 |= *((_DWORD *)v5 + 14);
      int v5 = (uint64_t *)*v5;
    }
    while (v5);
    int v7 = *((_DWORD *)v1 + 12);
    if ((v7 & ~v4) == 0) {
      goto LABEL_13;
    }
    a1 = v6 + 3;
    *((_DWORD *)v1 + 12) = v7 & v4;
LABEL_11:
    __int16 v9 = *(uint64_t (**)(__int16 *))(*a1 + 40);
    if (v9)
    {
      if ((v9(v1) & 1) == 0) {
        _dispatch_unote_unregister_muxed_cold_1();
      }
    }
    else
    {
      _dispatch_kq_deferred_update(-4, v1 + 12);
    }
LABEL_13:
    if (v3) {
      return 1;
    }
    goto LABEL_14;
  }
  __int16 v8 = v1[17];
  v1[17] = v8 | 2;
  if ((v8 & 2) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v10 = *(void *)v1;
  if (*(void *)v1) {
    *(void *)(v10 + 8) = *((void *)v1 + 1);
  }
  **((void **)v1 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v10;
  free(v1);
  return 1;
}

uint64_t _dispatch_unote_register_direct(uint64_t *a1, uint64_t a2)
{
  return _dispatch_kq_unote_update(a2, a1, 5);
}

uint64_t _dispatch_kq_unote_update(uint64_t result, uint64_t *a2, __int16 a3)
{
  __int16 v3 = a3;
  uint64_t v5 = result;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 232);
  if (a3)
  {
    if (result != -4
      && result
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 96), 1u, memory_order_relaxed) & 0x80000000) != 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_62:
      *(_WORD *)(v7 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 1;
      uint64_t result = _dispatch_kq_drain(result, *(void *)(v7 + 32));
      LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
      goto LABEL_44;
    }
    a2[2] = result | 1;
  }
  if (!v7 || *(void *)(v7 + 24) != result) {
    goto LABEL_8;
  }
  uint64_t v18 = *(void *)(v7 + 32);
  uint64_t v19 = *(unsigned __int16 *)(v7 + 40);
  if (*(_WORD *)(v7 + 40))
  {
    uint64_t v20 = 0;
    uint64_t v21 = (unsigned __int16 *)(v18 + 8);
    int v22 = (unsigned __int16 *)(v18 + 8);
    while (1)
    {
      int v23 = *v22;
      v22 += 36;
      if (v23 == (unsigned __int16)*((char *)a2 + 28)
        && *((void *)v21 - 1) == *((_DWORD *)a2 + 6)
        && *((uint64_t **)v21 + 1) == a2)
      {
        break;
      }
      ++v20;
      uint64_t v21 = v22;
      if (v19 == v20)
      {
        LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(unsigned __int16 *)(v7 + 40);
        goto LABEL_38;
      }
    }
  }
  else
  {
    LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  }
  if (v20 >= v19)
  {
LABEL_38:
    if ((v3 & 5) != 4) {
      goto LABEL_8;
    }
  }
  else
  {
    v3 |= *(_WORD *)(v18 + 72 * v20 + 10) & 4;
    if ((v3 & 5) != 4)
    {
      *(_WORD *)(v7 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v19 - 1;
      if (v20 != (unsigned __int16)(v19 - 1))
      {
        uint64_t v24 = v18 + 72 * v20;
        uint64_t v25 = v18 + 72 * (unsigned __int16)(v19 - 1);
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
        long long v26 = *(_OWORD *)(v25 + 16);
        long long v27 = *(_OWORD *)(v25 + 32);
        long long v28 = *(_OWORD *)(v25 + 48);
        *(void *)(v24 + 64) = *(void *)(v25 + 64);
        *(_OWORD *)(v24 + 32) = v27;
        *(_OWORD *)(v24 + 48) = v28;
        *(_OWORD *)(v24 + 16) = v26;
      }
LABEL_8:
      uint64_t v8 = *a2;
      __int16 v9 = *(_WORD *)(*a2 + 12) | v3;
      if ((v9 & 0x201) == 0x200) {
        v9 &= ~0x200u;
      }
      uint64_t v10 = *((unsigned int *)a2 + 6);
      __int16 v11 = *(char *)(v8 + 8);
      unsigned int v12 = *((_DWORD *)a2 + 9);
      if ((v12 & 0x4000000) != 0)
      {
        unsigned int v13 = v12 & 0x8E000000 | 0xFF;
        LOWORD(v12) = (unsigned __int16)v12 >> 12;
      }
      else
      {
        unsigned int v13 = v12 & 0x8E0000FF;
        unsigned int v12 = (v12 >> 8) & 0xF;
        if (!v12) {
          goto LABEL_15;
        }
      }
      v13 |= 256 << (v12 - 1);
LABEL_15:
      int v14 = *(_DWORD *)(v8 + 16) | *((_DWORD *)a2 + 8);
      uint64_t v15 = *(unsigned __int16 *)(v8 + 14);
      long long v46 = 0u;
      long long v47 = 0u;
      uint64_t v38 = v10;
      __int16 v39 = v11;
      __int16 v40 = v9;
      unsigned int v41 = v13;
      int v42 = a2;
      int v43 = v14;
      int v44 = 0;
      uint64_t v45 = v15;
      uint64_t result = _dispatch_kq_drain(result, &v38);
      int v16 = result;
      if ((v3 & 1) == 0)
      {
        if ((v3 & 2) == 0) {
          goto LABEL_58;
        }
        if (result == 36) {
          return 0;
        }
        goto LABEL_52;
      }
      if (result)
      {
        if (v5 != -4)
        {
          if (v5)
          {
            int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
            if (add_explicit <= 0)
            {
              if (add_explicit < 0) {
                goto LABEL_64;
              }
              *(void *)(v5 + 56) = 0xDEAD000000000000;
              _dispatch_object_dealloc((void *)v5);
            }
          }
        }
        uint64_t result = 0;
        a2[2] = 0;
        return result;
      }
      return 1;
    }
  }
  if (result != -4) {
    *(void *)(StatusReg + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 1;
  }
  if (v20 == *(unsigned __int16 *)(v7 + 42)) {
    goto LABEL_62;
  }
  if (v20 == v19)
  {
    *(_WORD *)(v7 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v19 + 1;
    LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v19;
  }
LABEL_44:
  uint64_t v29 = *(void *)(v7 + 32) + 72 * v20;
  uint64_t v30 = *a2;
  __int16 v31 = *(_WORD *)(*a2 + 12) | v3;
  if ((v31 & 0x201) == 0x200) {
    v31 &= ~0x200u;
  }
  __int16 v32 = *(char *)(v30 + 8);
  unsigned int v33 = *((_DWORD *)a2 + 9);
  if ((v33 & 0x4000000) != 0)
  {
    unsigned int v34 = v33 & 0x8E000000 | 0xFF;
    LOWORD(v33) = (unsigned __int16)v33 >> 12;
    goto LABEL_50;
  }
  unsigned int v34 = v33 & 0x8E0000FF;
  unsigned int v33 = (v33 >> 8) & 0xF;
  if (v33) {
LABEL_50:
  }
    v34 |= 256 << (v33 - 1);
  int v16 = 0;
  unsigned int v35 = *(_DWORD *)(v30 + 16) | *((_DWORD *)a2 + 8);
  uint64_t v36 = *(unsigned __int16 *)(v30 + 14);
  *(void *)uint64_t v29 = *((unsigned int *)a2 + 6);
  *(_WORD *)(v29 + 8) = v32;
  *(_WORD *)(v29 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v31;
  *(_DWORD *)(v29 + 12) = v34;
  *(void *)(v29 + 16) = a2;
  *(void *)(v29 + 24) = v35;
  *(void *)(v29 + 32) = v36;
  *(_OWORD *)(v29 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0u;
  *(_OWORD *)(v29 + 56) = 0u;
  if ((v3 & 3) != 2) {
    return 1;
  }
LABEL_52:
  if (v5 == -4) {
    goto LABEL_57;
  }
  if (!v5) {
    goto LABEL_57;
  }
  int v37 = atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 96), 0xFFFFFFFF, memory_order_relaxed);
  if (v37 > 0) {
    goto LABEL_57;
  }
  if ((v37 & 0x80000000) == 0)
  {
    *(void *)(v5 + 56) = 0xDEAD000000000000;
    _dispatch_object_dealloc((void *)v5);
LABEL_57:
    a2[2] = 0;
LABEL_58:
    if (v16) {
      _dispatch_bug(1077, v16);
    }
    return 1;
  }
  qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_64:
  qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t _dispatch_unote_resume_direct(uint64_t *a1)
{
  a1[2] |= 1uLL;
  return _dispatch_kq_unote_update(a1[2] & 0xFFFFFFFFFFFFFFFCLL, a1, 4);
}

uint64_t _dispatch_unote_unregister_direct(uint64_t *a1, char a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  int v7 = 2;
  if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0xFFFFFFFFFFFFFFFCLL && v6 != 0)
  {
    if (*(void *)(v6 + 24) == v5)
    {
      a2 |= 5u;
      int v7 = 6;
    }
    else
    {
      int v7 = 2;
    }
  }
  if ((v4 & 2) != 0 && (a2 & 1) == 0) {
    goto LABEL_10;
  }
  if (v4 == 2)
  {
    a1[2] = 0;
    return 1;
  }
  if (v4)
  {
    unsigned int v10 = v7;
  }
  else
  {
    a2 |= 4u;
    unsigned int v10 = 6;
  }
  BOOL v11 = v10 <= 3 && (a2 & 2) == 0;
  if (!v11 && (_dispatch_kq_unote_update(v5, a1, v10) & 1) != 0) {
    return 1;
  }
LABEL_10:
  if ((a2 & 4) != 0) {
    _dispatch_unote_unregister_direct_cold_1();
  }
  return 0;
}

void _dispatch_event_loop_atfork_child()
{
  _dispatch_mach_host_port_pred = 0;
  _dispatch_mach_host_port = 0;
}

void _dispatch_event_loop_poke(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 == -8)
  {
    uint64_t v19 = 65526;
    memset(v21, 0, sizeof(v21));
    long long v22 = 0u;
    uint64_t v18 = 1;
    uint64_t v20 = -8;
    LODWORD(v21[0]) = 0x1000000;
    _dispatch_kq_deferred_update(-4, (uint64_t)&v18);
    return;
  }
  if (a1 == -4 || !a1) {
    goto LABEL_53;
  }
  if ((a2 & 0x4000000000) == 0)
  {
    uint64_t v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
    if (!v5 || *(void *)(v5 + 24) != a1)
    {
      if (a2)
      {
        unint64_t v10 = *(unsigned int *)(*(void *)(a1 + 24) + 84);
        if ((v10 & 0x8000000) != 0) {
          goto LABEL_58;
        }
        unsigned int v11 = (v10 >> 8) & 0xF;
        if (v11 <= (BYTE4(a2) & 7u)) {
          unsigned int v11 = BYTE4(a2) & 7;
        }
        if (v11 <= 1) {
          LOBYTE(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 1;
        }
        uint64_t v12 = 256 << (v11 - 1);
        uint64_t v7 = a2 & 2 | 0x3700000001;
        int v6 = v10 & 0x80000000 | v12 | 0xFF;
        if ((a2 & 2) != 0) {
          int v9 = 401;
        }
        else {
          int v9 = 273;
        }
        __int16 v8 = 5;
      }
      else
      {
        int v6 = 0;
        uint64_t v7 = 1;
        __int16 v8 = 7;
        int v9 = 1;
      }
      uint64_t v18 = a1;
      LOWORD(v19) = -17;
      WORD1(v19) = v8;
      HIDWORD(v19) = v6;
      uint64_t v20 = a1;
      LODWORD(v21[0]) = v9;
      memset((char *)v21 + 4, 0, 20);
      *((void *)&v21[1] + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = a1 + 56;
      *(void *)&long long v22 = v7;
      *((void *)&v22 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = a2;
      if (!_dispatch_kq_poll(a1, &v18, 1, &v18, 1, 0, 0, 3))
      {
        if (a3 < 0)
        {
          if (a3) {
            _os_object_release_internal_n((void *)a1, (const char *)2);
          }
        }
        else
        {
          _os_object_release_internal((void *)a1, v13);
        }
        return;
      }
LABEL_54:
      int v16 = DWORD2(v21[0]);
      uint64_t v17 = WORD1(v19) & 0xBFFF;
      WORD1(v19) &= ~0x4000u;
      DWORD1(v21[0]) = DWORD2(v21[0]);
      *((void *)&v21[0] + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 0;
      if (DWORD1(v21[0]) == 105)
      {
LABEL_59:
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
        qword_1E91199F0 = *((void *)&v22 + 1);
        __break(1u);
        goto LABEL_60;
      }
      if (v16 == 34)
      {
LABEL_60:
        int v16 = HIDWORD(v19);
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_1E91199F0 = SHIDWORD(v19);
        __break(1u);
        goto LABEL_61;
      }
      if (v16 != 2)
      {
LABEL_61:
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_1E91199F0 = v16;
        __break(1u);
        return;
      }
      unint64_t v10 = ((unint64_t)LODWORD(v21[0]) << 32) | (v17 << 16) | 2;
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_1E91199F0 = v10;
      __break(1u);
LABEL_58:
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_1E91199F0 = v10;
      __break(1u);
      goto LABEL_59;
    }
    if ((*(unsigned char *)(v5 + 45) & 4) == 0)
    {
      if (*(unsigned char *)(v5 + 45))
      {
        if ((a3 & 1) == 0
          || *(_DWORD *)(a1 + 8) == 0x7FFFFFFF
          || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFE, memory_order_release) > 2)
        {
          return;
        }
        qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
LABEL_41:
        _dispatch_kevent_workloop_override_self(v5, a2, a3);
        return;
      }
      if (a3 < 0)
      {
        int v14 = *(_DWORD *)(a1 + 8);
        if (a3)
        {
          if (v14 != 0x7FFFFFFF
            && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) <= 1)
          {
LABEL_52:
            qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
            __break(1u);
LABEL_53:
            qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unsupported wlh configuration";
            qword_1E91199F0 = a1;
            __break(1u);
            goto LABEL_54;
          }
        }
        else if (v14 != 0x7FFFFFFF {
               && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
        }
        {
          qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_31;
        }
      }
      *(unsigned char *)(v5 + 45) |= 3u;
      *(void *)uint64_t v5 = *(void *)(a1 + 24);
      *(void *)(v5 + 8) = a1;
      *(_DWORD *)(v5 + 16) = BYTE4(a2) & 7;
      return;
    }
LABEL_31:
    if ((a3 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF
        || (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release) > 1)
      {
        _dispatch_event_loop_leave_deferred(v5, a2);
        return;
      }
      qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_41;
  }
  superclass = (void (*)(void))_dispatch_mgr_q[2].superclass;

  superclass();
}

void _dispatch_event_loop_drain(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 232);
  uint64_t v4 = *(uint64_t **)(v3 + 24);
  uint64_t v5 = v4 + 7;
  int v6 = a1 & 3;
  while ((*(unsigned char *)(v3 + 45) & 2) == 0)
  {
LABEL_23:
    uint64_t v19 = *(unsigned __int16 *)(v3 + 40);
    *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
    _dispatch_kq_drain((uint64_t)v4, *(void *)(v3 + 32), v19, a1);
    if (v4 != (uint64_t *)-4)
    {
      if (v4)
      {
        if (*(unsigned char *)(*v4 + 40) == 18)
        {
          uint64_t v20 = v4[6];
          if (v20)
          {
            if (*(unsigned char *)(v20 + 6)) {
              _dispatch_event_loop_drain_timers(v20, 6u);
            }
          }
        }
      }
    }
    if (v6 != 1 || !*(void *)(StatusReg + 40)) {
      return;
    }
  }
  uint64_t v7 = *v5;
  *(unsigned char *)(v3 + 45) &= ~2u;
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(unsigned __int16 *)(v3 + 40);
  if (*(_WORD *)(v3 + 40))
  {
    uint64_t v10 = 0;
    unsigned int v11 = (uint64_t **)(v8 + 8);
    uint64_t v12 = (uint64_t **)(v8 + 8);
    while (1)
    {
      int v13 = *(__int16 *)v12;
      v12 += 9;
      if (v13 == -17 && *(v11 - 1) == v4 && v11[1] == v4) {
        break;
      }
      ++v10;
      unsigned int v11 = v12;
      if (v9 == v10)
      {
        LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(unsigned __int16 *)(v3 + 40);
        goto LABEL_12;
      }
    }
  }
  else
  {
    LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  }
  if (v10 == v9) {
LABEL_12:
  }
    *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v9 + 1;
  uint64_t v14 = *(unsigned int *)(v4[3] + 84);
  if ((v14 & 0x8000000) == 0)
  {
    unsigned int v15 = (v14 >> 8) & 0xF;
    if (v15 <= (BYTE4(v7) & 7u)) {
      unsigned int v15 = BYTE4(v7) & 7;
    }
    uint64_t v16 = v8 + 72 * v10;
    *(void *)uint64_t v16 = v4;
    if (v15 <= 1) {
      char v17 = 1;
    }
    else {
      char v17 = v15;
    }
    *(_DWORD *)(v16 + 8) = 393199;
    *(_DWORD *)(v16 + 12) = v14 & 0x80000000 | (256 << (v17 - 1)) | 0xFF;
    *(void *)(v16 + 16) = v4;
    if ((v7 & 2) != 0) {
      int v18 = 401;
    }
    else {
      int v18 = 273;
    }
    *(_DWORD *)(v16 + 24) = v18;
    *(void *)(v16 + 36) = 0;
    *(void *)(v16 + 28) = 0;
    *(_DWORD *)(v16 + 44) = 0;
    *(void *)(v16 + 48) = v5;
    *(void *)(v16 + 56) = v7 & 2 | 0x3700000001;
    *(void *)(v16 + 64) = v7;
    goto LABEL_23;
  }
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_1E91199F0 = v14;
  __break(1u);
}

uint64_t _dispatch_kq_drain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F14BF8];
  if ((a4 & 2) == 0)
  {
    uint64_t v17 = 0x8000;
    MEMORY[0x1F41887A8](a1);
    bzero(v16, 0x8000uLL);
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(StatusReg + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
    uint64_t result = _dispatch_kq_poll(a1, a2, a3, v18, 16, v16, &v17, a4);
    if (!result) {
      return result;
    }
    if ((v18[5] & 0x4000) != 0) {
      *(void *)(StatusReg + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 1;
    }
    if ((int)result >= 1)
    {
      uint64_t v10 = result;
      unsigned int v11 = v18;
      do
      {
        _dispatch_kevent_drain((uint64_t)v11);
        v11 += 36;
        --v10;
      }
      while (v10);
    }
    return 0;
  }
  int v12 = _dispatch_kq_poll(a1, a2, a3, v18, 16, 0, 0, a4);
  if (v12 < 1) {
    return 0;
  }
  unsigned int v13 = v12;
  uint64_t result = 0;
  uint64_t v14 = v13;
  unsigned int v15 = v18;
  do
  {
    if ((v15[5] & 0x4000) != 0 && *((void *)v15 + 4))
    {
      _dispatch_kevent_drain((uint64_t)v15);
      uint64_t result = *((unsigned int *)v15 + 8);
    }
    v15 += 36;
    --v14;
  }
  while (v14);
  return result;
}

void _dispatch_event_loop_merge(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  v10[1] = *MEMORY[0x1E4F14BF8];
  uint64_t v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  uint64_t v4 = *(void **)(v3 + 24);
  MEMORY[0x1F41887A8](a1);
  int v6 = (char *)v10 - v5;
  memcpy((char *)v10 - v5, v7, v8);
  *(_WORD *)(v3 + 42) = 14;
  if ((int)v2 >= 1)
  {
    uint64_t v2 = v2;
    do
    {
      _dispatch_kevent_drain((uint64_t)v6);
      v6 += 72;
      --v2;
    }
    while (v2);
  }
  if (v4 == (void *)-4)
  {
    if (*(void *)(v3 + 8) && *(_WORD *)(v3 + 40)) {
      _dispatch_event_loop_drain(3);
    }
  }
  else if (*(unsigned char *)(*v4 + 40) == 18)
  {
    uint64_t v9 = v4[6];
    if (v9)
    {
      if (*(unsigned char *)(v9 + 6)) {
        _dispatch_event_loop_drain_timers(v9, 6u);
      }
    }
  }
}

void _dispatch_kevent_drain(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 8);
  if (v1 != 65526)
  {
    if (v1 == 65519)
    {
      _dispatch_kevent_workloop_poke_drain(a1);
      return;
    }
    if ((*(_WORD *)(a1 + 10) & 0x4000) != 0)
    {
      if (v1 != 65531 || *(void *)(a1 + 32) != 3)
      {
        _dispatch_kevent_print_error(a1);
        return;
      }
      *(_WORD *)(a1 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 274;
      *(_DWORD *)(a1 + 24) = -2080374784;
      *(void *)(a1 + 32) = 0;
    }
    else if (v1 == 65528)
    {
      if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 24) >> 14 == 16385)
      {
        _dispatch_kevent_mach_msg_drain(a1);
        return;
      }
    }
    else if (v1 == 65529)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)a1;
      *(unsigned char *)(v3 + 6) |= (1 << (*(void *)a1 % 3u)) | 0x80;
      *(unsigned char *)(v3 + 32 * v4 + 7) = *(unsigned char *)(v3 + 32 * v4 + 7) & 0xFC | 2;
      return;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5) {
      _dispatch_kevent_merge_muxed(a1);
    }
    else {
      _dispatch_kevent_merge(v5, a1);
    }
  }
}

uint64_t _dispatch_event_loop_leave_immediate(uint64_t a1)
{
  uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  uint64_t v2 = *(void *)(v1 + 24);
  *(unsigned char *)(v1 + 45) &= 0xFCu;
  uint64_t v6 = v2;
  v7[0] = 524271;
  v7[1] = v2;
  unsigned int v8 = 33;
  long long v9 = 0uLL;
  int v10 = 0;
  uint64_t v11 = v2 + 56;
  uint64_t v12 = 0;
  uint64_t v13 = a1;
  uint64_t result = _dispatch_kq_poll(v2, (uint64_t)&v6, 1, (uint64_t)&v6, 1, 0, 0, 131075);
  if (result)
  {
    int v4 = DWORD1(v9);
    unsigned __int16 v5 = WORD1(v7[0]) & 0xBFFF;
    WORD1(v7[0]) &= ~0x4000u;
    LODWORD(v9) = DWORD1(v9);
    *(void *)((char *)&v9 + 4) = 0;
    if (v9 != 105)
    {
      if (v4 != 34)
      {
        if (v4 == 2) {
          _dispatch_event_loop_leave_immediate_cold_3(&v8, v5);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v4);
      }
      _dispatch_event_loop_leave_immediate_cold_4((int *)v7 + 1);
    }
    _dispatch_event_loop_leave_immediate_cold_2(&v13);
  }
  return result;
}

uint64_t _dispatch_kq_poll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  char context = 0;
  if (_dispatch_kq_poll_pred != -1)
  {
    dispatch_once_f(&_dispatch_kq_poll_pred, &context, (dispatch_function_t)_dispatch_kq_init);
    if (context)
    {
      _dispatch_memorypressure_create(*MEMORY[0x1E4F14C98]);
      _voucher_activity_debug_channel_init();
    }
  }
  if (a1)
  {
    int v10 = &_dispatch_mgr_q;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      while (1)
      {
        if (a1 == -4)
        {
          uint64_t v11 = v10;
          a8 |= 0x20u;
          uint64_t result = kevent_qos();
        }
        else
        {
          uint64_t v11 = v10;
          if ((a8 & 2) != 0) {
            int v13 = 1024;
          }
          else {
            int v13 = 132096;
          }
          a8 |= v13;
          uint64_t result = kevent_id();
        }
        if (result != -1) {
          return result;
        }
        LODWORD(v14) = **(_DWORD **)(StatusReg + 8);
        if ((int)v14 > 8) {
          break;
        }
        int v10 = v11;
        if (v14 != 4) {
          goto LABEL_19;
        }
      }
      if (v14 != 12) {
        break;
      }
      _dispatch_temporary_resource_shortage();
      int v10 = v11;
    }
    if (v14 == 9)
    {
      LODWORD(v14) = 9;
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Do not close random Unix descriptors";
      qword_1E91199F0 = 9;
      __break(1u);
    }
LABEL_25:
    uint64_t v14 = (int)v14;
    goto LABEL_26;
  }
  LODWORD(v14) = 0;
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh";
  qword_1E91199F0 = 0;
  __break(1u);
LABEL_19:
  if (v14 != 2) {
    goto LABEL_25;
  }
  if ((~a8 & 0x20002) != 0)
  {
    while (1)
    {
      uint64_t v14 = 2;
LABEL_26:
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected error from kevent";
      qword_1E91199F0 = v14;
      __break(1u);
    }
  }
  return 0;
}

uint64_t _dispatch_event_loop_leave_deferred(uint64_t result, uint64_t a2)
{
  if ((~a2 & 0x2800000000) == 0)
  {
    if ((a2 & 0xFFFFFFFC) != 0) {
      uint64_t v2 = a2 & 0xFFFFFFFC | 3;
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t v3 = *(void *)(result + 24);
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(unsigned __int16 *)(result + 40);
    if (*(_WORD *)(result + 40))
    {
      uint64_t v6 = 0;
      uint64_t v7 = (__int16 *)(v4 + 8);
      unsigned int v8 = (__int16 *)(v4 + 8);
      while (1)
      {
        int v9 = *v8;
        v8 += 36;
        if (v9 == -17 && *((void *)v7 - 1) == v3 && *((void *)v7 + 1) == v2) {
          break;
        }
        ++v6;
        uint64_t v7 = v8;
        if (v5 == v6)
        {
          LODWORD(v6) = *(unsigned __int16 *)(result + 40);
          goto LABEL_14;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if (v6 == v5) {
LABEL_14:
    }
      *(_WORD *)(result + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v5 + 1;
    uint64_t v10 = v4 + 72 * v6;
    *(void *)uint64_t v10 = v2;
    *(void *)(v10 + 8) = 655343;
    *(void *)(v10 + 16) = v3;
    *(_DWORD *)(v10 + 24) = 392;
    *(void *)(v10 + 44) = 0;
    *(_DWORD *)(v10 + 52) = 0;
    *(void *)(v10 + 28) = 0;
    *(void *)(v10 + 36) = 0;
    *(void *)(v10 + 56) = 0x3800000002;
    *(void *)(v10 + 64) = a2;
    *(void *)(v10 + 48) = v3 + 56;
  }
  *(unsigned char *)(result + 45) &= 0xFCu;
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v12 = *(void *)(result + 32);
  uint64_t v13 = *(unsigned __int16 *)(result + 40);
  if (*(_WORD *)(result + 40))
  {
    uint64_t v14 = 0;
    unsigned int v15 = (__int16 *)(v12 + 8);
    uint64_t v16 = (__int16 *)(v12 + 8);
    while (1)
    {
      int v17 = *v16;
      v16 += 36;
      if (v17 == -17 && *((void *)v15 - 1) == v11 && *((void *)v15 + 1) == v11) {
        break;
      }
      ++v14;
      unsigned int v15 = v16;
      if (v13 == v14)
      {
        LODWORD(v14) = *(unsigned __int16 *)(result + 40);
        goto LABEL_25;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if (v14 == v13) {
LABEL_25:
  }
    *(_WORD *)(result + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v13 + 1;
  if (a2)
  {
    uint64_t result = *(unsigned int *)(*(void *)(v11 + 24) + 84);
    if ((result & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(result);
    }
    unsigned int v22 = (result >> 8) & 0xF;
    if (v22 <= (BYTE4(a2) & 7u)) {
      unsigned int v22 = BYTE4(a2) & 7;
    }
    if (v22 <= 1) {
      LOBYTE(v22) = 1;
    }
    uint64_t v23 = 256 << (v22 - 1);
    uint64_t v19 = a2 & 2 | 0x3700000001;
    int v18 = result & 0x80000000 | v23 | 0xFF;
    if ((a2 & 2) != 0) {
      int v21 = 401;
    }
    else {
      int v21 = 273;
    }
    __int16 v20 = 5;
  }
  else
  {
    int v18 = 0;
    uint64_t v19 = 1;
    __int16 v20 = 7;
    int v21 = 1;
  }
  uint64_t v24 = v12 + 72 * v14;
  *(void *)uint64_t v24 = v11;
  *(_WORD *)(v24 + 8) = -17;
  *(_WORD *)(v24 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v20;
  *(_DWORD *)(v24 + 12) = v18;
  *(void *)(v24 + 16) = v11;
  *(_DWORD *)(v24 + 24) = v21;
  *(void *)(v24 + 36) = 0;
  *(void *)(v24 + 28) = 0;
  *(_DWORD *)(v24 + 44) = 0;
  *(void *)(v24 + 48) = v11 + 56;
  *(void *)(v24 + 56) = v19;
  *(void *)(v24 + 64) = a2;
  return result;
}

uint64_t _dispatch_event_loop_cancel_waiter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  while (1)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 100);
    v9[0] = 458735;
    v9[1] = v2;
    unsigned int v10 = 40;
    long long v11 = 0u;
    memset(v12, 0, sizeof(v12));
    uint64_t result = _dispatch_kq_poll(v2, &v8, 1, &v8, 1, 0, 0, 3);
    if (!result) {
      break;
    }
    char v4 = *(unsigned char *)(a1 + 106);
    int v5 = DWORD1(v11);
    char v6 = BYTE2(v9[0]);
    unsigned __int16 v7 = WORD1(v9[0]) & 0xBFFF;
    WORD1(v9[0]) &= ~0x4000u;
    LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = DWORD1(v11);
    *(void *)((char *)&v11 + 4) = 0;
    if (v11 != 2)
    {
      if (v5 != 34)
      {
        if (v5 == 105) {
          _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v8);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v5);
      }
      _dispatch_event_loop_leave_immediate_cold_4((int *)v9 + 1);
    }
    if ((v4 & 0x20) != 0 || (v6 & 2) == 0 || (v10 & 0x28) != 0x28) {
      _dispatch_event_loop_cancel_waiter_cold_3(v10, v7);
    }
    MEMORY[0x18C121F20](*(unsigned int *)(a1 + 100), 4, 1);
  }
  return result;
}

uint64_t _dispatch_event_loop_wake_owner(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v47 = *MEMORY[0x1E4F14BF8];
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(result + 48);
  if (a2 == -4
    || (uint64_t v8 = *(void *)(StatusReg + 232)) == 0
    || *(void *)(v8 + 24) != a2
    || (*(unsigned char *)(v8 + 45) &= 0xFCu, v7 != a2))
  {
    if ((a4 ^ a3))
    {
      uint64_t v38 = a2;
      uint64_t v39 = 524271;
      uint64_t v40 = a2;
      int v41 = 257;
      long long v42 = 0uLL;
      int v43 = 0;
      uint64_t v9 = 1;
      uint64_t v44 = a2 + 56;
      uint64_t v45 = 1;
      uint64_t v46 = a4;
      if ((a4 & 0x2000000000) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v9 = 0;
      if ((a4 & 0x2000000000) == 0)
      {
LABEL_10:
        if ((a3 & 0x2000000002) == 0x2000000000 && (*(char *)(result + 106) & 0x80000000) == 0)
        {
          uint64_t v11 = *(unsigned int *)(StatusReg + 24);
          uint64_t v12 = &v38 + 9 * v9;
          *uint64_t v12 = v11;
          v12[1] = 458735;
          _OWORD v12[2] = a2;
          *((_DWORD *)v12 + 6) = 40;
          *(_OWORD *)((char *)v12 + 28) = 0u;
          *(_OWORD *)((char *)v12 + 44) = 0u;
          *((_DWORD *)v12 + 15) = 0;
          v12[8] = a3;
          uint64_t v9 = (v9 + 1);
        }
        uint64_t result = _dispatch_kq_poll(a2, &v38, v9, &v38, v9, 0, 0, 3);
        BOOL v14 = v7 != -4 && v7 != a2;
        if (result)
        {
          if (v14) {
            _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          }
          int v36 = DWORD1(v42);
          unsigned __int16 v37 = WORD1(v39) & 0xBFFF;
          WORD1(v39) &= ~0x4000u;
          LODWORD(v42) = DWORD1(v42);
          *(void *)((char *)&v42 + 4) = 0;
          if (v42 != 105)
          {
            if (v36 != 34)
            {
              if (v36 == 2) {
                _dispatch_event_loop_wake_owner_cold_4((uint64_t)&v38, v37);
              }
              _dispatch_sync_ipc_handoff_begin_cold_1(v36);
            }
            _dispatch_event_loop_wake_owner_cold_5((uint64_t)&v38);
          }
          _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v38);
        }
        if (v14)
        {
          _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          return _dispatch_event_loop_cancel_waiter(v5);
        }
        return result;
      }
    }
    unsigned int v10 = &v38 + 9 * v9;
    *unsigned int v10 = *(unsigned int *)(result + 100);
    v10[1] = 655343;
    void v10[2] = a2;
    *((_DWORD *)v10 + 6) = 136;
    *(_OWORD *)((char *)v10 + 44) = 0u;
    *(_OWORD *)((char *)v10 + 28) = 0u;
    *((_DWORD *)v10 + 15) = 0;
    v10[8] = a4;
    v10[6] = a2 + 56;
    uint64_t v9 = (v9 + 1);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(v8 + 32);
  uint64_t v16 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    uint64_t v17 = 0;
    int v18 = (__int16 *)(v15 + 8);
    uint64_t v19 = (__int16 *)(v15 + 8);
    while (1)
    {
      int v20 = *v19;
      v19 += 36;
      if (v20 == -17 && *((void *)v18 - 1) == a2 && *((void *)v18 + 1) == a2) {
        break;
      }
      ++v17;
      int v18 = v19;
      if (v16 == v17)
      {
        LODWORD(v17) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_32;
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if (v17 == v16) {
LABEL_32:
  }
    *(_WORD *)(v8 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v16 + 1;
  if (a4)
  {
    uint64_t result = *(unsigned int *)(*(void *)(a2 + 24) + 84);
    if ((result & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(result);
    }
    unsigned int v25 = (result >> 8) & 0xF;
    if (v25 <= (BYTE4(a4) & 7u)) {
      unsigned int v25 = BYTE4(a4) & 7;
    }
    if (v25 <= 1) {
      LOBYTE(v25) = 1;
    }
    uint64_t v26 = 256 << (v25 - 1);
    uint64_t v24 = a4 & 2 | 0x3700000001;
    int v21 = result & 0x80000000 | v26 | 0xFF;
    if ((a4 & 2) != 0) {
      int v22 = 401;
    }
    else {
      int v22 = 273;
    }
    __int16 v23 = 5;
  }
  else
  {
    int v21 = 0;
    int v22 = 257;
    __int16 v23 = 7;
    uint64_t v24 = 1;
  }
  uint64_t v27 = v15 + 72 * v17;
  *(void *)uint64_t v27 = a2;
  *(_WORD *)(v27 + 8) = -17;
  *(_WORD *)(v27 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v23;
  *(_DWORD *)(v27 + 12) = v21;
  *(void *)(v27 + 16) = a2;
  *(_DWORD *)(v27 + 24) = v22;
  *(void *)(v27 + 36) = 0;
  *(void *)(v27 + 28) = 0;
  *(_DWORD *)(v27 + 44) = 0;
  *(void *)(v27 + 48) = a2 + 56;
  *(void *)(v27 + 56) = v24;
  *(void *)(v27 + 64) = a4;
  uint64_t v28 = *(unsigned int *)(v5 + 100);
  uint64_t v29 = *(void *)(v8 + 32);
  uint64_t v30 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    uint64_t v31 = 0;
    __int16 v32 = (__int16 *)(v29 + 8);
    unsigned int v33 = (__int16 *)(v29 + 8);
    while (1)
    {
      int v34 = *v33;
      v33 += 36;
      if (v34 == -17 && *((void *)v32 - 1) == a2 && *((void *)v32 + 1) == v28) {
        break;
      }
      ++v31;
      __int16 v32 = v33;
      if (v30 == v31)
      {
        LODWORD(v3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_53;
      }
    }
  }
  else
  {
    LODWORD(v3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 0;
  }
  if (v31 == v30) {
LABEL_53:
  }
    *(_WORD *)(v8 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v30 + 1;
  uint64_t v35 = v29 + 72 * v31;
  *(void *)uint64_t v35 = v28;
  *(void *)(v35 + 8) = 655343;
  *(void *)(v35 + 16) = a2;
  *(_DWORD *)(v35 + 24) = 136;
  *(_OWORD *)(v35 + 44) = 0u;
  *(_OWORD *)(v35 + 28) = 0u;
  *(_DWORD *)(v35 + 6_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  *(void *)(v35 + 64) = a4;
  *(void *)(v35 + 48) = a2 + 56;
  return result;
}

void _dispatch_event_loop_wait_for_ownership(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F14BF8];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  if ((v3 & 0xFFFFFFFD) == 1)
  {
    unsigned int v4 = *(_DWORD *)(*(void *)(v2 + 24) + 84);
    if ((v4 & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(v4);
    }
    unsigned int v5 = (v4 >> 8) & 0xF;
    if (v5 <= (BYTE4(v3) & 7u)) {
      unsigned int v5 = BYTE4(v3) & 7;
    }
    uint64_t v22 = v2;
    if (v5 <= 1) {
      LOBYTE(v5) = 1;
    }
    LODWORD(v23) = 393199;
    HIDWORD(v23) = v4 & 0x80000000 | (256 << (v5 - 1)) | 0xFF;
    uint64_t v24 = v2;
    if ((v3 & 2) != 0) {
      int v6 = 401;
    }
    else {
      int v6 = 273;
    }
    int v25 = v6;
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    int v28 = 0;
    uint64_t v29 = v2 + 56;
    uint64_t v30 = v3 & 2 | 0x3700000001;
    uint64_t v31 = v3;
    unsigned int v7 = 1;
  }
  else if ((~v3 & 0x2800000000) != 0)
  {
    unsigned int v7 = 0;
  }
  else
  {
    uint64_t v8 = v3 & 0xFFFFFFFC | 3;
    if ((v3 & 0xFFFFFFFC) == 0) {
      uint64_t v8 = 0;
    }
    uint64_t v22 = v8;
    uint64_t v23 = 655343;
    uint64_t v24 = v2;
    int v25 = 392;
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    int v28 = 0;
    uint64_t v30 = 0x3800000002;
    uint64_t v31 = v3;
    unsigned int v7 = 1;
    uint64_t v29 = v2 + 56;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    uint64_t v10 = v7 + 1;
    uint64_t v11 = *(void *)(StatusReg + 32);
    uint64_t v12 = &v22 + 9 * v7;
    if ((v11 & 0x3FFF00) == 0) {
      LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 2303;
    }
    *uint64_t v12 = *(unsigned int *)(a1 + 100);
    *((_DWORD *)v12 + 2) = 655343;
    *((_DWORD *)v12 + 3) = v11;
    _OWORD v12[2] = v2;
    *((_DWORD *)v12 + 6) = 4;
    *(_OWORD *)((char *)v12 + 28) = 0u;
    *(_OWORD *)((char *)v12 + 44) = 0u;
    *((_DWORD *)v12 + 15) = 0;
    v12[8] = v3;
    int v13 = _dispatch_kq_poll(v2, (uint64_t)&v22, v10, (uint64_t)&v22, v10, 0, 0, 3);
    if (v13 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (uint64_t *)((char *)&v26 + 4);
      do
      {
        uint64_t v16 = *((unsigned int *)v15 - 2);
        uint64_t v17 = *v15;
        unsigned __int16 v18 = *((_WORD *)v15 - 11) & 0xBFFF;
        *((_WORD *)v15 - 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v18;
        *((_DWORD *)v15 - _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = v17;
        *uint64_t v15 = 0;
        if (v17 != 4)
        {
          switch(v17)
          {
            case 2:
              _dispatch_event_loop_cancel_waiter_cold_3(v16, v18);
            case 0x22:
              _dispatch_event_loop_wait_for_ownership_cold_5((uint64_t)&v22, v14);
            case 0x69:
              _dispatch_event_loop_wait_for_ownership_cold_4((uint64_t)&v22, v14);
          }
LABEL_37:
          _dispatch_sync_ipc_handoff_begin_cold_1(v17);
        }
        if ((v16 & 4) == 0) {
          goto LABEL_37;
        }
        v15 += 9;
        ++v14;
      }
      while (v13 != v14);
    }
    if (!v13) {
      break;
    }
    unsigned int v7 = 0;
    uint64_t v3 = v31;
  }
  char v19 = *(unsigned char *)(a1 + 106);
  if ((v19 & 0x20) != 0)
  {
    _dispatch_event_loop_cancel_waiter(a1);
    char v19 = *(unsigned char *)(a1 + 106) & 0xDF;
    *(unsigned char *)(a1 + 106) = v19;
  }
  if ((v19 & 0x40) != 0)
  {
    uint64_t v20 = *(void *)(a1 + 48);
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 96), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      if (add_explicit < 0) {
        _os_object_retain_weak_cold_1();
      }
      *(void *)(v20 + 56) = 0xDEAD000000000000;
      _dispatch_object_dealloc((void *)v20);
    }
  }
}

uint64_t _dispatch_event_loop_ensure_ownership(uint64_t a1)
{
  uint64_t v4 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5[0] = 655343;
  v5[1] = a1;
  unsigned int v6 = 136;
  long long v8 = 0u;
  long long v7 = 0u;
  int v9 = 0;
  uint64_t v10 = v4;
  *(void *)((char *)&v8 + 4) = a1 + 56;
  uint64_t result = _dispatch_kq_poll(a1, &v4, 1, &v4, 1, 0, 0, 3);
  if (result)
  {
    int v2 = DWORD1(v7);
    unsigned __int16 v3 = WORD1(v5[0]) & 0xBFFF;
    WORD1(v5[0]) &= ~0x4000u;
    LODWORD(v7) = DWORD1(v7);
    *(void *)((char *)&v7 + 4) = 0;
    if (v7 != 105)
    {
      if (v2 != 34)
      {
        if (v2 == 2) {
          _dispatch_event_loop_leave_immediate_cold_3(&v6, v3);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v2);
      }
      _dispatch_event_loop_leave_immediate_cold_4((int *)v5 + 1);
    }
    _dispatch_event_loop_leave_immediate_cold_2(&v10);
  }
  return result;
}

uint64_t _dispatch_event_loop_end_ownership(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = a3;
  uint64_t v34 = *MEMORY[0x1E4F14BF8];
  if (a3)
  {
    unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 84);
    if ((v8 & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(v8);
    }
    unsigned int v9 = (v8 >> 8) & 0xF;
    if (v9 <= (BYTE4(a3) & 7u)) {
      unsigned int v9 = BYTE4(a3) & 7;
    }
    if (v9 <= 1) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 256 << (v9 - 1);
    uint64_t v11 = a3 & 2 | 0x3700000001;
    LODWORD(a3) = v8 & 0x80000000 | v10 | 0xFF;
    if ((v5 & 2) != 0) {
      int v12 = 401;
    }
    else {
      int v12 = 273;
    }
    __int16 v13 = 5;
  }
  else
  {
    a3 = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_14;
    }
    int v12 = 257;
    __int16 v13 = 7;
    uint64_t v11 = 1;
  }
  uint64_t v23 = a1;
  __int16 v24 = -17;
  __int16 v25 = v13;
  int v26 = a3;
  uint64_t v27 = a1;
  int v28 = v12;
  long long v29 = 0uLL;
  int v30 = 0;
  uint64_t v31 = a1 + 56;
  uint64_t v32 = v11;
  a3 = 1;
  uint64_t v33 = v5;
LABEL_14:
  if ((a2 & 2) == 0)
  {
    uint64_t v14 = &v23 + 9 * a3;
    *uint64_t v14 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    v14[1] = 458735;
    a3 = (a3 + 1);
    v14[2] = a1;
    *((_DWORD *)v14 + 6) = 40;
    *(_OWORD *)((char *)v14 + 28) = 0u;
    *(_OWORD *)((char *)v14 + 44) = 0u;
    *((_DWORD *)v14 + 15) = 0;
    v14[8] = v5;
  }
  uint64_t result = _dispatch_kq_poll(a1, &v23, a3, &v23, a3, 0, 0, 3);
  if (result)
  {
    int v21 = DWORD1(v29);
    unsigned __int16 v22 = v25 & 0xBFFF;
    v25 &= ~0x4000u;
    LODWORD(v29) = DWORD1(v29);
    *(void *)((char *)&v29 + 4) = 0;
    if (v29 != 105)
    {
      if (v21 != 34)
      {
        if (v21 == 2) {
          _dispatch_event_loop_wake_owner_cold_4((uint64_t)&v23, v22);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v21);
      }
      _dispatch_event_loop_wake_owner_cold_5((uint64_t)&v23);
    }
    _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v23);
  }
  int v17 = (a2 & 1 | (2 * (a4 & 1))) - (v5 & 1);
  if (v17 >= 1 && *(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), (v5 & 1) - (a2 & 1 | (2 * (a4 & 1))), memory_order_release);
    BOOL v19 = __OFSUB__(add_explicit, v17);
    int v20 = add_explicit - v17;
    if ((v20 < 0) ^ v19 | (v20 == 0))
    {
      if (v20 < 0) {
        _os_object_retain_weak_cold_1();
      }
      return _os_object_dispose((void *)a1, v16);
    }
  }
  return result;
}

void _dispatch_event_loop_timer_arm(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = a2 / 3uLL;
  uint64_t v10 = *(void *)(a5 + 8 * v9);
  if (!v10)
  {
    mach_get_times();
    *(void *)(a5 + 16) = 0;
    uint64_t v10 = *(void *)(a5 + 8 * v9);
  }
  uint64_t v11 = v10 + a3;
  if (_dispatch_timers_force_max_leeway == 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = a4;
  }
  if (_dispatch_timers_force_max_leeway == 1) {
    uint64_t v13 = v11 + a4;
  }
  else {
    uint64_t v13 = v11;
  }
  _dispatch_event_loop_timer_program(a1, a2, v13, v12, 5);
  if (a2 - 6 <= 2 && _dispatch_mach_calendar_pred != -1) {
    dispatch_once_f(&_dispatch_mach_calendar_pred, 0, (dispatch_function_t)_dispatch_mach_host_notify_update);
  }
}

double _dispatch_event_loop_timer_program(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  if (v6 == -4)
  {
    int v7 = 0x2000000;
  }
  else if (*(unsigned char *)(a1 + 32 * a2 + 5))
  {
    int v7 = (256 << (*(unsigned char *)(a1 + 32 * a2 + 5) - 1)) | 0xFF;
  }
  else
  {
    int v7 = 255;
  }
  unint64_t v9 = a2 | 0xFFFFFFFFFFFFFF00;
  __int16 v10 = -7;
  __int16 v11 = a5 | 0x10;
  int v12 = v7;
  uint64_t v13 = a1;
  int v14 = _dispatch_timer_index_to_fflags[a2];
  int v15 = 0;
  uint64_t v16 = a3;
  uint64_t v17 = 0;
  long long v19 = 0u;
  uint64_t v18 = a4;
  *(void *)&double result = _dispatch_kq_deferred_update(v6, (uint64_t)&v9).n128_u64[0];
  return result;
}

double _dispatch_event_loop_timer_delete(uint64_t a1, unsigned int a2)
{
  return _dispatch_event_loop_timer_program(a1, a2, 0, 0, 2);
}

char *_dispatch_source_proc_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  double result = _dispatch_unote_create_with_handle(a1, a2, a3);
  if ((v3 & 0x4000000) != 0)
  {
    if (result) {
      result[29] |= 4u;
    }
  }
  return result;
}

char *_dispatch_source_vm_create(uint64_t a1, uint64_t a2)
{
  double result = _dispatch_unote_create_without_handle((uint64_t)&_dispatch_source_type_memorystatus, a2, 2);
  if (result) {
    result[29] |= 0x10u;
  }
  return result;
}

BOOL _dispatch_mach_msg_sender_is_kernel(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + ((*(unsigned int *)(a1 + 4) + 3) & 0x1FFFFFFFCLL));
  if (*v1 || v1[1] <= 0x33u) {
    _dispatch_mach_msg_sender_is_kernel_cold_1();
  }
  return v1[10] == 0;
}

uint64_t _dispatch_get_mach_host_port()
{
  if (_dispatch_mach_host_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_host_port_pred, 0, (dispatch_function_t)_dispatch_mach_host_port_init);
  }
  return _dispatch_mach_host_port;
}

void _dispatch_mach_host_port_init()
{
  kern_return_t special_port;
  int v2;
  kern_return_t v3;
  mach_port_t port;

  port = 0;
  mach_port_t v0 = MEMORY[0x18C121960]();
  special_port = host_get_special_port(v0, -1, 1, &port);
  if (special_port == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  int v2 = special_port;
  if (special_port)
  {
    if (special_port != 4) {
      _dispatch_bug(2859, special_port);
    }
  }
  else
  {
    int v3 = mach_port_deallocate(*MEMORY[0x1E4F14C48], v0);
    if (v3 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    int v2 = v3;
    mach_port_t v0 = port;
  }
  if (!v0) {
    _dispatch_mach_host_port_init_cold_1(v2);
  }
  _dispatch_mach_host_port = v0;
}

uint64_t _dispatch_mach_notify_port_deleted(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t _dispatch_mach_notify_merge(uint64_t result, int a2, int a3)
{
  uint64_t v3 = _dispatch_sources[((unint64_t)result >> 8) & 0x3F];
  if (v3)
  {
    while (*(void *)(v3 + 24) != result || *(__int16 *)(v3 + 32) != -24)
    {
      uint64_t v3 = *(void *)v3;
      if (!v3) {
        return result;
      }
    }
    *(void *)(v3 + 56) &= 0xFFFFFFFFFFFFFFF2;
    if ((a3 & 1) != 0 || (double result = _dispatch_kevent_mach_notify_resume(v3, a2, 0), (result & 1) == 0))
    {
      *(_WORD *)(v3 + 34) |= 2u;
      uint64_t v6 = 16;
    }
    else
    {
      uint64_t v6 = 4;
    }
    *(void *)(v3 + 64) = 0;
    int v7 = *(uint64_t **)(v3 + 16);
    if (v7)
    {
      do
      {
        unsigned int v8 = (uint64_t *)*v7;
        if (*(void *)(v3 + 64)) {
          break;
        }
        unint64_t v9 = v7[7] & a2;
        *((unsigned char *)v7 + 54) = 0;
        if ((a3 & 1) != 0 || v9)
        {
          if (*(_DWORD *)(7 - v7[4]) != 0x7FFFFFFF
            && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - v7[4]), 2u, memory_order_relaxed) <= 0)
          {
            qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
            __break(1u);
            return result;
          }
          if (a3) {
            _dispatch_unote_unregister_muxed(v7 + 3);
          }
          uint64_t v10 = v7[3];
          if (v9)
          {
            if (*(unsigned char *)(v10 + 9) == 2) {
              atomic_fetch_or_explicit(v7 + 12, v9, memory_order_relaxed);
            }
          }
          double result = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t, void))(v10 + 48))(v7 + 3, v6, v9, 0);
        }
        int v7 = v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t _dispatch_mach_notify_dead_name(uint64_t a1, uint64_t a2)
{
  mach_port_name_t v2 = a2;
  _dispatch_mach_notify_merge(a2, 1, 1);
  if (mach_port_deallocate(*MEMORY[0x1E4F14C48], v2) == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  return 0;
}

uint64_t _dispatch_mach_notify_send_possible(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t _dispatch_mach_notification_set_armed(uint64_t result)
{
  uint64_t v1 = *(void *)(result - 8);
  if (v1)
  {
    *(void *)(v1 + 64) = 1;
    for (unint64_t i = *(uint64_t **)(v1 + 16); i; unint64_t i = (uint64_t *)*i)
      *((unsigned char *)i + 54) = 1;
  }
  return result;
}

char *_dispatch_source_mach_send_create(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 <= 1) {
    a3 = 1;
  }
  if (!a2) {
    a2 = 0xFFFFFFFFLL;
  }
  return _dispatch_unote_create_with_handle(a1, a2, a3);
}

uint64_t _dispatch_mach_send_update(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if ((*(_WORD *)(a1 + 34) & 2) != 0)
  {
    int v2 = 0;
  }
  else
  {
    int v2 = *(_DWORD *)(a1 + 48);
    int v1 = 0;
  }
  return _dispatch_kevent_mach_notify_resume(a1, v2, v1);
}

char *_dispatch_mach_send_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = _dispatch_unote_create_without_handle(a1, a2, a3);
  if (result)
  {
    *((_DWORD *)result + 22) = 0x80000000;
    *((void *)result + 7) = 0;
  }
  return result;
}

void _dispatch_mach_notification_event(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected non message event";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_mach_notification_merge_msg(void *a1, int a2, mach_msg_header_t *a3)
{
  int v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (a3->msgh_id > 77 || _dispatch_mach_msg_sender_is_kernel((uint64_t)a3))
  {
    int v6 = libdispatch_internal_protocol_server(a3, (uint64_t)v9);
    if (v6 || v10 != -303)
    {
      if (v6)
      {
        if (v10 == -305 || v10 == 0) {
          goto LABEL_13;
        }
        _dispatch_bug(2806, v10);
        if (v10 == -305 || !v10) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
    }
    else if ((a3->msgh_id & 0xFFFFFFFE) == 0x3B6)
    {
      byte_1EB1CEF37 |= 2u;
      byte_1EB1CEF57 |= 2u;
      byte_1EB1CEF77 |= 2u;
      byte_1EB1CEE76 |= 0x87u;
      _dispatch_mach_host_notify_update();
      int v10 = 0;
      goto LABEL_13;
    }
    uint64_t v8 = 2805;
  }
  else
  {
    uint64_t v8 = 2790;
  }
  _dispatch_bug(v8, 0);
LABEL_18:
  mach_msg_destroy(a3);
LABEL_13:
  if ((a2 & 0x10000) != 0) {
    free(a3);
  }
  _dispatch_unote_resume(a1);
}

uint64_t _dispatch_mach_recv_direct_merge_evt(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  if (((unsigned __int16)a2 & 0x200) != 0) {
    _dispatch_mach_recv_direct_merge_evt_cold_1();
  }
  return _dispatch_source_merge_evt(a1, a2, a3, a4);
}

void _dispatch_mach_reply_merge_evt(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 & 0x200) == 0)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected event";
    qword_1E91199F0 = a3 | (unint64_t)(a2 << 32);
    __break(1u);
  }
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

uint64_t _dispatch_kevent_workloop_override_self(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(result + 24);
  *(unsigned char *)(result + 45) &= ~2u;
  uint64_t add_explicit = *(unsigned int *)(*(void *)(v3 + 24) + 84);
  if ((add_explicit & 0x8000000) != 0) {
    goto LABEL_15;
  }
  unsigned int v6 = (add_explicit >> 8) & 0xF;
  if (v6 <= (BYTE4(a2) & 7u)) {
    unsigned int v6 = BYTE4(a2) & 7;
  }
  uint64_t v10 = v3;
  if (v6 <= 1) {
    LOBYTE(v6) = 1;
  }
  int v11 = 393199;
  int v12 = add_explicit & 0x80000000 | (256 << (v6 - 1)) | 0xFF;
  uint64_t v13 = v3;
  if ((a2 & 2) != 0) {
    int v7 = 401;
  }
  else {
    int v7 = 273;
  }
  unsigned int v14 = v7;
  long long v15 = 0uLL;
  int v16 = 0;
  uint64_t v17 = v3 + 56;
  uint64_t v18 = a2 & 2 | 0x3700000001;
  uint64_t v19 = a2;
  double result = _dispatch_kq_poll(v3, &v10, 1, &v10, 1, 0, 0, 3);
  if (result)
  {
LABEL_16:
    int v8 = DWORD1(v15);
    uint64_t v9 = HIWORD(v11) & 0xBFFF;
    HIWORD(v11) &= ~0x4000u;
    LODWORD(v15) = DWORD1(v15);
    *(void *)((char *)&v15 + 4) = 0;
    if (v15 != 105)
    {
      if (v8 == 34)
      {
LABEL_21:
        int v8 = v12;
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_1E91199F0 = v12;
        __break(1u);
        goto LABEL_22;
      }
      if (v8 != 2)
      {
LABEL_22:
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_1E91199F0 = v8;
        __break(1u);
        return result;
      }
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_1E91199F0 = ((unint64_t)v14 << 32) | (v9 << 16) | 2;
      __break(1u);
    }
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
    qword_1E91199F0 = v19;
    __break(1u);
    goto LABEL_21;
  }
  if ((a3 & 1) != 0 && *(_DWORD *)(v3 + 8) != 0x7FFFFFFF)
  {
    uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFE, memory_order_release);
    if ((int)add_explicit <= 2)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
LABEL_15:
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_1E91199F0 = add_explicit;
      __break(1u);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t _dispatch_kevent_workloop_poke_drain(uint64_t result)
{
  uint64_t v2 = *(unsigned int *)(result + 24);
  if ((v2 & 0x80000000) != 0) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  double result = *(void *)(result + 16);
  uint64_t v5 = *(unsigned __int16 *)(v3 + 10);
  if ((v5 & 0x4000) == 0)
  {
    if (*(unsigned char *)(v4 + 45)) {
      return result;
    }
    *(unsigned char *)(v4 + 45) |= 1u;
    if (*(_DWORD *)(result + 8) == 0x7FFFFFFF) {
      goto LABEL_6;
    }
    uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    if ((int)add_explicit > 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
  uint64_t v1 = *(void *)(v3 + 32);
  *(_DWORD *)(v3 + 28) = v1;
  uint64_t add_explicit = *(void *)(v3 + 64);
  v5 &= ~0x4000uLL;
  *(_WORD *)(v3 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v5;
  *(void *)(v3 + 32) = 0;
  if (v1 != 70)
  {
LABEL_33:
    switch(v1)
    {
      case 0x69:
LABEL_38:
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
        qword_1E91199F0 = add_explicit;
        __break(1u);
        goto LABEL_39;
      case 0x22:
LABEL_39:
        uint64_t v16 = *(int *)(v3 + 12);
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_1E91199F0 = v16;
        __break(1u);
        goto LABEL_40;
      case 2:
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_1E91199F0 = (v5 << 16) | (v2 << 32) | 2;
        __break(1u);
        break;
    }
LABEL_37:
    uint64_t add_explicit = (int)v1;
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
    qword_1E91199F0 = (int)v1;
    __break(1u);
    goto LABEL_38;
  }
  if ((v2 & 0x100) != 0) {
    goto LABEL_37;
  }
  if (!*(void *)(v3 + 48)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(v3 + 56);
  if (!v2) {
    goto LABEL_37;
  }
  if ((add_explicit & 0x2000000000) == 0) {
    return result;
  }
  if ((add_explicit & 1) == 0)
  {
    int v9 = 0;
    uint64_t v10 = 1;
    __int16 v11 = 7;
    int v12 = 1;
    goto LABEL_28;
  }
  if ((add_explicit & 0xFFFFFFFC) != 0)
  {
    uint64_t v4 = *(unsigned int *)(*(void *)(result + 24) + 84);
    if ((v4 & 0x8000000) != 0)
    {
LABEL_40:
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_1E91199F0 = v4;
      __break(1u);
      return result;
    }
    unsigned int v13 = (v4 >> 8) & 0xF;
    if (v13 <= (BYTE4(add_explicit) & 7u)) {
      unsigned int v13 = BYTE4(add_explicit) & 7;
    }
    if (v13 <= 1) {
      LOBYTE(v13) = 1;
    }
    uint64_t v15 = add_explicit & 2;
    BOOL v14 = v15 == 0;
    uint64_t v10 = v15 | 0x3700000001;
    int v9 = v4 & 0x80000000 | (256 << (v13 - 1)) | 0xFF;
    if (v14) {
      int v12 = 273;
    }
    else {
      int v12 = 401;
    }
    __int16 v11 = 5;
LABEL_28:
    *(void *)uint64_t v3 = result;
    *(_WORD *)(v3 + 8) = -17;
    *(_WORD *)(v3 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v11;
    *(_DWORD *)(v3 + 12) = v9;
    *(_DWORD *)(v3 + 24) = v12;
    *(void *)(v3 + 28) = 0;
    *(void *)(v3 + 36) = 0;
    *(_DWORD *)(v3 + 44) = 0;
    *(void *)(v3 + 48) = result + 56;
    *(void *)(v3 + 56) = v10;
    return _dispatch_kq_deferred_update();
  }
  *(unsigned char *)(v4 + 45) |= 1u;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    uint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    if ((int)add_explicit <= 0)
    {
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_32:
      qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_33;
    }
  }
LABEL_6:
  *(void *)uint64_t v4 = *(void *)(result + 24);
  *(void *)(v4 + 8) = result;
  unsigned int v7 = __clz(__rbit32((*(_DWORD *)(v3 + 12) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(v3 + 12) >> 8) & 0x3FFF) != 0) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 0;
  }
  *(_DWORD *)(v4 + 16) = v8;
  return result;
}

void _dispatch_kevent_print_error(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 10);
  if ((v2 & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 10) & 0x100) != 0 && *(void *)(a1 + 32) == 36) {
      return;
    }
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v3 = 0;
      v2 |= *(_WORD *)(v4 + 34);
      goto LABEL_10;
    }
    if (v3 && !*(void *)(v3 + 16))
    {
      v2 |= 1u;
LABEL_10:
      *(_WORD *)(a1 + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v2;
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    if (v5 == 34)
    {
      uint64_t v12 = *(int *)(a1 + 12);
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid kevent priority";
      qword_1E91199F0 = v12;
      __break(1u);
    }
    else
    {
      unsigned int v6 = _evfiltstr(*(__int16 *)(a1 + 8));
      uint64_t v7 = *(void *)(a1 + 16);
      unsigned int v8 = "enable";
      if ((v2 & 4) == 0) {
        unsigned int v8 = "monitor";
      }
      if (v2) {
        int v9 = "add";
      }
      else {
        int v9 = v8;
      }
      if ((v2 & 2) != 0) {
        int v9 = "delete";
      }
      if (v7) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void *)a1;
      _dispatch_bug_kevent_client("kevent", v6, v10, v5, v11, v7, v3);
    }
  }
}

void _dispatch_kevent_mach_msg_drain(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F14BF8];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = v4;
  unsigned int v6 = *(void **)(a1 + 16);
  uint64_t v7 = *(unsigned int *)(a1 + 60);
  uint64_t v8 = *(int *)(a1 + 12);
  uint64_t v9 = *(unsigned __int16 *)(a1 + 10);
  mach_error_t v10 = *(_DWORD *)(a1 + 24);
  if (v10 != 268451844)
  {
    if (v10 == 268451848)
    {
      uint64_t v18 = *(int *)(a1 + 12);
      uint64_t v19 = v6;
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to copyout msg, possible port leak";
      qword_1E91199F0 = 268451848;
      __break(1u);
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 40);
      if (v11)
      {
        if (!v10)
        {
          if (*(_DWORD *)(a1 + 64)) {
            uint64_t v12 = v4 + v11;
          }
          else {
            uint64_t v12 = 0;
          }
          unsigned int v13 = *(void **)(a1 + 16);
          _dispatch_kevent_mach_msg_recv(v13, v9, v11, v12, v7, v8);
          return;
        }
        goto LABEL_28;
      }
    }
    uint64_t v18 = v8;
    uint64_t v19 = v6;
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message";
    qword_1E91199F0 = v10;
    __break(1u);
    goto LABEL_22;
  }
  if (!v4)
  {
LABEL_22:
    uint64_t v5 = 268451844;
    uint64_t v18 = v8;
    uint64_t v19 = v6;
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message size";
    qword_1E91199F0 = 268451844;
    __break(1u);
LABEL_23:
    uint64_t v18 = v8;
    uint64_t v19 = v6;
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with overlarge message";
    qword_1E91199F0 = v5;
    __break(1u);
    goto LABEL_24;
  }
  if (!*(void *)(a1 + 32))
  {
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: MACH_RCV_LARGE_IDENTITY with no identity";
    __break(1u);
    return;
  }
  if (v4 >= 0xFFFFFFBC) {
    goto LABEL_23;
  }
  int v14 = v4 + 68;
  uint64_t v1 = malloc_type_malloc((v4 + 68), 0xE77C1C11uLL);
  __int16 v2 = v17;
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  if (!MEMORY[0x1F41887A8]())
  {
LABEL_24:
    _dispatch_bug(3256, (uint64_t)v1);
    int v14 = 0;
  }
  uint64_t v23 = v1;
  uint64_t v24 = 0;
  int v25 = 0;
  int v26 = v14;
  uint64_t v27 = v2;
  uint64_t v28 = 0;
  uint64_t v29 = 0x2800000000;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  mach_error_t v15 = mach_msg2();
  if (!v15)
  {
    if (*v2) {
      uint64_t v16 = (uint64_t)v2;
    }
    else {
      uint64_t v16 = 0;
    }
    _dispatch_kevent_mach_msg_recv(v6, v9 | 0x10000, (uint64_t)v1, v16, v7, v8);
    return;
  }
  mach_error_t v10 = v15;
  if (v15 == 268451844)
  {
    _dispatch_log("BUG in libdispatch client: _dispatch_kevent_mach_msg_drain: dropped message too large to fit in memory: id = 0x%x, size = %u", v1[5], *(void *)(a1 + 48));
    mach_error_t v10 = 0;
  }
  free(v1);
LABEL_28:
  if (v10) {
    _dispatch_bug_mach_client("_dispatch_kevent_mach_msg_drain: message reception failed", v10);
  }
}

void *_dispatch_kevent_merge_muxed(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_WORD *)(a1 + 10) & 0x12) != 0) {
    *(_WORD *)(v2 + 34) |= 2u;
  }
  double result = *(void **)(v2 + 16);
  if (result)
  {
    do
    {
      uint64_t v4 = (void *)*result;
      _dispatch_kevent_merge((uint64_t)(result + 3), a1);
      double result = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _dispatch_kevent_merge(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)a1 + 9);
  if (*(_DWORD *)(7 - *(void *)(a1 + 8)) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - *(void *)(a1 + 8)), 2u, memory_order_relaxed) <= 0)
  {
    qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
LABEL_32:
    _dispatch_unote_unregister(a1, 5);
    goto LABEL_28;
  }
  switch((int)v5)
  {
    case 0:
      unint64_t v2 = *(void *)(a2 + 32);
      break;
    case 1:
      if (*(unsigned __int8 *)(a1 + 28) == 248) {
        unint64_t v2 = 2;
      }
      else {
        unint64_t v2 = *(unsigned int *)(a2 + 24);
      }
      break;
    case 2:
      unint64_t v2 = (*(_DWORD *)(a1 + 32) & *(_DWORD *)(a2 + 24));
      if ((*(unsigned char *)(a1 + 29) & 4) != 0)
      {
        uint64_t v6 = *(void *)(a1 + 72);
        unint64_t v7 = (*(void *)(a2 + 32) << 32) | v2;
        uint64_t v8 = v6;
        do
        {
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 72), (unint64_t *)&v8, v6 | v7, memory_order_relaxed, memory_order_relaxed);
          BOOL v9 = v8 == v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      else if (*(unsigned __int8 *)(a1 + 28) == 248)
      {
        unint64_t v2 = 2;
        *(void *)(a1 + 72) = 2;
      }
      else if (v2)
      {
        atomic_fetch_or_explicit((atomic_ullong *volatile)(a1 + 72), v2, memory_order_relaxed);
      }
      else
      {
        unint64_t v2 = 0;
      }
      break;
    case 3:
      unint64_t v2 = *(void *)(a2 + 32);
      *(void *)(a1 + 72) = ~v2;
      break;
    case 4:
      unint64_t v2 = *(void *)(a2 + 32);
      if (v2) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 72), v2, memory_order_relaxed);
      }
      break;
    default:
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Corrupt unote action";
      qword_1E91199F0 = v5;
      __break(1u);
      JUMPOUT(0x18A968D58);
  }
  __int16 v10 = *(_WORD *)(a2 + 10);
  if ((v10 & 0x110) == 0x10) {
    goto LABEL_32;
  }
  if ((v10 & 2) != 0)
  {
    unint64_t v11 = 2;
  }
  else if ((*(_WORD *)(a2 + 10) & 0x210) != 0)
  {
    unint64_t v11 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL | 2;
  }
  else
  {
    if ((v10 & 0x80) == 0) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
  }
  *(void *)(a1 + 16) = v11;
LABEL_28:
  uint64_t v12 = *(_DWORD *)(a2 + 12) & 0xFFFFFFLL;
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)a1 + 48);
  uint64_t v14 = *(unsigned __int16 *)(a2 + 10);

  return v13(a1, v14, v2, v12);
}

const char *_evfiltstr(unsigned int a1)
{
  if (a1 < 0xFFFFFFE8) {
    return "EVFILT_missing";
  }
  else {
    return off_1E543CE40[(int)a1 + 24];
  }
}

uint64_t _dispatch_kevent_mach_msg_recv(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = *(_DWORD *)(a3 + 4);
  if (v6 >= 0xFFFFFFBC) {
    _dispatch_kevent_mach_msg_recv_cold_1(*(_DWORD *)(a3 + 4));
  }
  if (!*(_DWORD *)(a3 + 12)) {
    _dispatch_kevent_mach_msg_recv_cold_2(a3);
  }
  if (*(_DWORD *)(7 - a1[1]) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(7 - a1[1]), 2u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if ((a2 & 0x110) == 0x10)
  {
    _dispatch_unote_unregister((uint64_t)a1, 5);
  }
  else
  {
    if ((a2 & 2) != 0)
    {
      unint64_t v13 = 2;
    }
    else if ((a2 & 0x210) != 0)
    {
      unint64_t v13 = a1[2] & 0xFFFFFFFFFFFFFFFCLL | 2;
    }
    else
    {
      if ((a2 & 0x80) == 0) {
        goto LABEL_13;
      }
      unint64_t v13 = a1[2] & 0xFFFFFFFFFFFFFFFELL;
    }
    a1[2] = v13;
  }
LABEL_13:
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 56);

  return v14(a1, a2, a3, v6 + 68, a4, a5, a6);
}

uint64_t mach_msg2()
{
  return mach_msg2_internal();
}

uint64_t _dispatch_kq_init(unsigned char *a1)
{
  if ((_dispatch_unsafe_fork & 1) == 0) {
    _dispatch_fork_becomes_unsafe_slow();
  }
  if (getenv("LIBDISPATCH_TIMERS_FORCE_MAX_LEEWAY")) {
    _dispatch_timers_force_max_leeway = 1;
  }
  *a1 = 1;
  _dispatch_kevent_workqueue_init();
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    uint64_t result = kevent_qos();
    if (result != -1) {
      break;
    }
    int v4 = **(_DWORD **)(StatusReg + 8);
    if (v4 != 4) {
      _dispatch_kq_init_cold_1(v4);
    }
  }
  return result;
}

void _dispatch_memorypressure_create(uintptr_t mask)
{
  uint64_t v1 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_memorystatus, 0, mask, (dispatch_queue_t)&_dispatch_mgr_q);
  dispatch_set_context(v1, v1);
  dispatch_source_set_event_handler_f(v1, (dispatch_function_t)_dispatch_memorypressure_handler);
  dispatch_activate(v1);
  if (_dispatch_memorypressure_source)
  {
    dispatch_source_cancel((dispatch_source_t)_dispatch_memorypressure_source);
    dispatch_release((dispatch_object_t)_dispatch_memorypressure_source);
  }
  _dispatch_memorypressure_source = (uint64_t)v1;
}

uint64_t _dispatch_memorypressure_handler(NSObject *a1)
{
  uintptr_t data = dispatch_source_get_data(a1);
  if ((data & 0xF0000000) != 0
    && dispatch_source_get_mask((dispatch_source_t)_dispatch_memorypressure_source) != *MEMORY[0x1E4F14CA0])
  {
    _dispatch_memorypressure_create(*MEMORY[0x1E4F14CA0]);
  }
  if (data)
  {
    _dispatch_memory_warn = 0;
    _dispatch_continuation_cache_limit = 112;
    uint64_t v2 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      if (atomic_fetch_and_explicit((atomic_ullong *volatile)(_firehose_task_buffer + 512), 0xFFFFFFFFFFFFFFFELL, memory_order_relaxed))firehose_buffer_update_limits(v2); {
    }
      }
  }
  if ((data & 2) != 0)
  {
    _dispatch_memory_warn = 1;
    _dispatch_continuation_cache_limit = 16;
    uint64_t v3 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      unint64_t v4 = atomic_fetch_or_explicit((atomic_ullong *volatile)(_firehose_task_buffer + 512), 1uLL, memory_order_relaxed);
      if (v4 != (v4 | 1)) {
        firehose_buffer_update_limits(v3);
      }
    }
  }

  return MEMORY[0x1F40D0660](data);
}

void _dispatch_mach_host_notify_update()
{
  kern_return_t v1;
  uint64_t vars8;

  if (_dispatch_mach_host_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_host_port_pred, 0, (dispatch_function_t)_dispatch_mach_host_port_init);
  }
  host_t v0 = _dispatch_mach_host_port;
  if (_dispatch_mach_notify_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_notify_port_pred, 0, (dispatch_function_t)_dispatch_mach_notify_port_init);
  }
  uint64_t v1 = host_request_notification(v0, 1, _dispatch_mach_notify_port);
  if (v1 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v1)
  {
    _dispatch_bug(2893, v1);
  }
}

void _dispatch_mach_notify_port_init()
{
  kern_return_t v1;
  mach_port_options_t v2;

  v2.reserved[1] = 0;
  *(_OWORD *)&v2.flags = xmmword_18A97E5A8;
  uint64_t v1 = mach_port_construct(*MEMORY[0x1E4F14C48], &v2, (mach_port_context_t)&_dispatch_mach_notify_port, (mach_port_name_t *)&_dispatch_mach_notify_port);
  if (v1)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: mach_port_construct() failed: cannot create receive right";
    qword_1E91199F0 = v1;
    __break(1u);
    goto LABEL_5;
  }
  host_t v0 = _dispatch_unote_create_with_handle((uint64_t)&_dispatch_mach_type_notification, _dispatch_mach_notify_port, 0);
  *((void *)v0 + _dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = ~(unint64_t)&_dispatch_mgr_q;
  if ((_dispatch_unote_register((uint64_t)v0, -4, 0x2000000u) & 1) == 0) {
LABEL_5:
  }
    _dispatch_bug(2842, 0);
  _dispatch_mach_notify_unote = (uint64_t)v0;
}

uint64_t _dispatch_kevent_mach_notify_resume(uint64_t a1, int a2, int a3)
{
  kern_return_t v9;
  kern_return_t v10;
  int v12;
  kern_return_t v13;
  uint64_t v15;
  char v16;
  mach_port_t previous;
  int v18;

  if (((a3 | a2) & 0xD) == 0) {
    return 1;
  }
  unint64_t v4 = (void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 56);
  mach_port_name_t v5 = *(_DWORD *)(a1 + 24);
  uint64_t v6 = (v3 | (*(_DWORD *)(a1 + 48) | a2) & 0xD) & (~a3 | 0xFFFFFFF2);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = v6 & 0xD;
  if ((v3 & 0xD) != 0 || !v7)
  {
    uint64_t v12 = 0;
    if ((v3 & 0xD) == 0 || v7) {
      return v12 == 0;
    }
    previous = 0;
    unint64_t v13 = mach_port_request_notification(*MEMORY[0x1E4F14C48], v5, 66, 0, 0, 0x12u, &previous);
    __int16 v10 = 0;
    if (v13 > 0x11 || ((1 << v13) & 0x28011) == 0)
    {
      if (v13 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      _dispatch_bug(2966, v13);
      __int16 v10 = 0;
    }
    goto LABEL_17;
  }
  previous = 0;
  ipc_space_t v8 = *MEMORY[0x1E4F14C48];
  if (_dispatch_mach_notify_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_notify_port_pred, 0, (dispatch_function_t)_dispatch_mach_notify_port_init);
  }
  BOOL v9 = mach_port_request_notification(v8, v5, 66, 0, _dispatch_mach_notify_port, 0x15u, &previous);
  __int16 v10 = v9;
  if (v9 <= 14)
  {
    if (v9 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (!v9)
    {
      uint64_t v12 = previous;
      if (!previous) {
        return v12 == 0;
      }
      uint64_t v16 = _dispatch_kevent_mach_notify_resume_cold_3(previous, &previous, &v18);
      uint64_t v12 = v18;
      if ((v16 & 1) == 0) {
        return v12 == 0;
      }
      __int16 v10 = 0;
      mach_error_t v15 = 2947;
      goto LABEL_31;
    }
  }
  else if (v9 == 15 || v9 == 17)
  {
    *v4 &= 0xFFFFFFF2uLL;
    goto LABEL_17;
  }
  _dispatch_kevent_mach_notify_resume_cold_1(v9, v4);
LABEL_17:
  if (!previous) {
    goto LABEL_18;
  }
  uint64_t v12 = _dispatch_send_consume_send_once_right(previous);
  if (!v12) {
    goto LABEL_18;
  }
  mach_error_t v15 = 2976;
LABEL_31:
  _dispatch_bug(v15, v12);
LABEL_18:
  uint64_t v12 = v10;
  return v12 == 0;
}

uint64_t voucher_adopt(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 224);
  if (a1 != -3)
  {
    if (v2 == a1) {
      return a1;
    }
    *(void *)(StatusReg + 224) = a1;
    if (a1)
    {
      int v3 = *(_DWORD *)(a1 + 32);
      if (v2)
      {
LABEL_5:
        int v4 = *(_DWORD *)(v2 + 32);
LABEL_12:
        if (v3 != -1 && v3 != v4) {
          _dispatch_set_priority_and_mach_voucher_slow(0, v3);
        }
        return v2;
      }
    }
    else
    {
      int v3 = 0;
      if (v2) {
        goto LABEL_5;
      }
    }
    int v4 = 0;
    goto LABEL_12;
  }
  if (v2 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  return v2;
}

uint64_t voucher_copy()
{
  uint64_t result = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result)
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed) <= 0) {
      -[OS_voucher retain]();
    }
  }
  return result;
}

uint64_t voucher_copy_without_importance()
{
  uint64_t result = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result) {
    return _voucher_create_without_importance(result);
  }
  return result;
}

uint64_t voucher_retain(uint64_t result)
{
  if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  return result;
}

uint64_t voucher_release(uint64_t result, const char *a2)
{
  int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit <= 1)
  {
    if (add_explicit != 1) {
      -[OS_voucher release]();
    }
    return _voucher_xref_dispose(result, a2);
  }
  return result;
}

uint64_t _voucher_thread_cleanup(uint64_t result, const char *a2)
{
  int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit <= 1)
  {
    if (add_explicit != 1) {
      -[OS_voucher release]();
    }
    return _voucher_xref_dispose(result, a2);
  }
  return result;
}

void _voucher_dealloc_mach_voucher(mach_port_name_t a1)
{
  kern_return_t v1;
  uint64_t vars8;

  uint64_t v1 = mach_voucher_deallocate(a1);
  if (v1 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v1)
  {
    _dispatch_bug(302, v1);
  }
}

uint64_t _voucher_task_mach_voucher_init()
{
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  uint64_t result = host_create_mach_voucher(mach_host_port, _voucher_task_mach_voucher_init_task_create_recipe, 0x10u, &voucher);
  if (result == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (result) {
    _voucher_task_mach_voucher_init_cold_2(result);
  }
  _voucher_default_task_int mach_voucher = voucher;
  _voucher_task_int mach_voucher = voucher;
  return result;
}

void voucher_replace_default_voucher(kern_return_t a1)
{
  if (_voucher_task_mach_voucher_pred != -1) {
    dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
  }
  uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 32);
    if (v2)
    {
      int v3 = *(_DWORD *)(v1 + 36);
      if (!v3) {
        int v3 = v2;
      }
      *(void *)recipes = 0x100000003;
      int v8 = v3;
      int v9 = 0;
      host_t mach_host_port = _dispatch_get_mach_host_port();
      ipc_voucher_t voucher = 0;
      a1 = host_create_mach_voucher(mach_host_port, recipes, 0x10u, &voucher);
      if (a1 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (a1)
      {
        _dispatch_bug(362, a1);
      }
      else if (voucher)
      {
        int v5 = _voucher_default_task_mach_voucher;
        goto LABEL_13;
      }
    }
  }
  int v5 = _voucher_default_task_mach_voucher;
LABEL_13:
  __swp(a1, (unsigned int *)&_voucher_task_mach_voucher);
  if (a1) {
    BOOL v6 = a1 == v5;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    _voucher_dealloc_mach_voucher(a1);
  }
}

uint64_t _voucher_get_mach_voucher(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = *(unsigned int *)(result + 36);
    if (!result)
    {
      uint64_t result = *(unsigned int *)(v1 + 32);
      if (!result)
      {
        if (_voucher_task_mach_voucher_pred != -1) {
          dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
        }
        return _voucher_task_mach_voucher;
      }
    }
  }
  return result;
}

uint64_t _voucher_create_without_importance(uint64_t a1)
{
  kern_return_t v5;
  ipc_voucher_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v12;
  long long v13;
  int v14;
  uint64_t v15;

  uint64_t v1 = a1;
  mach_error_t v15 = *MEMORY[0x1E4F14BF8];
  if (!a1) {
    return v1;
  }
  if (!*(_DWORD *)(a1 + 32) || (*(unsigned char *)(a1 + 72) & 1) == 0)
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 12), 1u, memory_order_relaxed) <= 0) {
      -[OS_voucher retain]();
    }
    return v1;
  }
  if (*(_DWORD *)(a1 + 36)) {
    mach_port_name_t v3 = *(_DWORD *)(a1 + 36);
  }
  else {
    mach_port_name_t v3 = *(_DWORD *)(a1 + 32);
  }
  *(void *)recipes = 0x1FFFFFFFFLL;
  uint64_t v12 = v3;
  unint64_t v13 = xmmword_18A97E5E0;
  uint64_t v14 = 0;
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  int v5 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if (v5 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v5)
  {
    _dispatch_bug(639, v5);
    goto LABEL_25;
  }
  BOOL v6 = voucher;
  if (!voucher)
  {
LABEL_25:
    if (*(_DWORD *)(v1 + 36)) {
      return 0;
    }
    BOOL v6 = 0;
  }
  if (v6 == v3)
  {
    _voucher_dealloc_mach_voucher(v3);
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 12), 1u, memory_order_relaxed) <= 0) {
      -[OS_voucher retain]();
    }
  }
  else
  {
    uint64_t v7 = _voucher_find_and_retain(v6);
    if (v7 && *(_DWORD *)(v1 + 36))
    {
      _voucher_dealloc_mach_voucher(v6);
      return v7;
    }
    else
    {
      int v8 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      int v9 = v8;
      *((_OWORD *)v8 + 3) = *(_OWORD *)(v1 + 48);
      *((void *)v8 + 8) = *(void *)(v1 + 64);
      v8[8] = v6;
      if (*(_DWORD *)(v1 + 36))
      {
        v8[9] = v6;
        _voucher_insert((uint64_t)v8);
      }
      else if (v7)
      {
        *((void *)v8 + 5) = v7;
        _voucher_dealloc_mach_voucher(v6);
      }
      return (uint64_t)v9;
    }
  }
  return v1;
}

uint64_t _voucher_find_and_retain(unsigned int a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = 0;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2) {
    _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock);
  }
  for (uint64_t i = *((void *)&_voucher_hash + ((a1 >> 8) & 0x3F)); ; uint64_t i = *(void *)(15 - i))
  {
    uint64_t v5 = ~i;
    if (i == -1) {
      break;
    }
    if (*(_DWORD *)(35 - i) == a1)
    {
      unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(11 - i), 1u, memory_order_relaxed);
      if ((add_explicit & 0x80000000) != 0) {
        -[OS_voucher release]();
      }
      if (!add_explicit) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
      }
      break;
    }
  }
  unsigned int v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unsigned int v8 = atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
  if (v8 != v7) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v8);
  }
  return v5;
}

uint64_t _voucher_insert(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 36);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v3, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
    if (v3) {
      _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock);
    }
    if (*(void *)(v2 + 24)) {
      _voucher_insert_cold_3();
    }
    uint64_t v5 = *(void *)(v2 + 48);
    if (v5) {
      _voucher_insert_cold_2(v5);
    }
    uint64_t result = *(void *)(v2 + 40);
    if (result) {
      _voucher_insert_cold_1(result);
    }
    BOOL v6 = (unint64_t *)&_voucher_hash + ((v1 >> 8) & 0x3F);
    uint64_t v7 = *v6;
    *(void *)(v2 + 16) = *v6;
    if (v7 != -1) {
      *(void *)(23 - v7) = ~(v2 + 16);
    }
    unint64_t *v6 = ~v2;
    *(void *)(v2 + 24) = ~(unint64_t)v6;
    unsigned int v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    unsigned int v9 = atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
    if (v9 != v8)
    {
      return _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v9);
    }
  }
  return result;
}

_DWORD *_voucher_create_with_mach_msgv(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a1;
  if ((*a1 & 0x1F0000) == 0)
  {
    int v6 = 0;
    unsigned int v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v10 = 0;
    unsigned int v8 = 0;
    goto LABEL_9;
  }
  unsigned int v5 = a1[4];
  a1[4] = 0;
  int v6 = v3 & 0x201F0000;
  *a1 = v3 & 0xDFE0FFFF;
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  unsigned int v7 = *a2;
  if (*a2 <= 7) {
    _voucher_create_with_mach_msgv_cold_1(*a2);
  }
  unsigned int v8 = v7 - 8;
  unsigned int v9 = a2 + 2;
  if (v7 == 8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (uint64_t)v9;
  }
LABEL_9:

  return _voucher_create_with_mach_voucher(v5, v6, v10, v8);
}

_DWORD *_voucher_create_with_mach_voucher(unsigned int a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a1)
  {
    uint64_t v8 = _voucher_find_and_retain(a1);
    if (v8)
    {
      unsigned int v9 = (_DWORD *)v8;
      _voucher_dealloc_mach_voucher(a1);
    }
    else
    {
      unsigned int v9 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      v9[8] = a1;
      v9[9] = a1;
      *((unsigned char *)v9 + 72) = v9[18] & 0xFE | ((a2 & 0x20000000) != 0);
      _voucher_insert((uint64_t)v9);
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  if (a4 >= 0x20 && *(_DWORD *)a3 == 59821818 && *(void *)(a3 + 8))
  {
    if (v9)
    {
      uint64_t v10 = *((void *)v9 + 6);
      if (v10) {
        _voucher_insert_cold_2(v10);
      }
      uint64_t v11 = *((void *)v9 + 5);
      if (v11) {
        _voucher_insert_cold_1(v11);
      }
      uint64_t v12 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      uint64_t v14 = v12;
      if (v9[8])
      {
        mach_error_t v15 = (_DWORD *)*((void *)v9 + 5);
        if (!v15) {
          mach_error_t v15 = v9;
        }
        if ((int)atomic_fetch_add_explicit(v15 + 3, 1u, memory_order_relaxed) <= 0) {
          -[OS_voucher retain]();
        }
        *((void *)v12 + 5) = v15;
        v12[8] = v15[8];
        *((unsigned char *)v12 + 72) = v12[18] & 0xFE | v15[18] & 1;
      }
      voucher_release((uint64_t)v9, v13);
    }
    else
    {
      uint64_t v14 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    *((_OWORD *)v14 + 3) = *(_OWORD *)(a3 + 8);
    *((void *)v14 + 8) = *(void *)(a3 + 24);
    return v14;
  }
  return v9;
}

_DWORD *voucher_create_with_mach_msg(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if ((*a1 & 0x1F0000) != 0)
  {
    unsigned int v3 = a1[4];
    a1[4] = 0;
    int v4 = v1 & 0x201F0000;
    *a1 = v1 & 0xDFE0FFFF;
  }
  else
  {
    int v4 = 0;
    unsigned int v3 = 0;
  }
  return _voucher_create_with_mach_voucher(v3, v4, 0, 0);
}

void voucher_decrement_importance_count4CF(uint64_t a1)
{
  kern_return_t v2;
  mach_msg_type_number_t out_contentCnt;
  uint8_t in_content[4];

  if (a1 && *(_DWORD *)(a1 + 32) && (*(unsigned char *)(a1 + 72) & 1) != 0)
  {
    ipc_voucher_t v1 = *(_DWORD *)(a1 + 36) ? *(_DWORD *)(a1 + 36) : *(_DWORD *)(a1 + 32);
    *(_DWORD *)in_content = 1;
    out_contentCnt = 0;
    uint64_t v2 = mach_voucher_attr_command(v1, 2u, 2u, in_content, 4u, 0, &out_contentCnt);
    if (v2 != 16)
    {
      if (v2 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (v2) {
        voucher_decrement_importance_count4CF_cold_1(v2, v2);
      }
    }
  }
}

uint64_t _voucher_xref_dispose(uint64_t result, const char *a2)
{
  uint64_t v2 = result;
  if (!*(void *)(result + 24)) {
    goto LABEL_11;
  }
  int v3 = 0;
  int v4 = *(_DWORD *)(result + 36);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v3, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (!v3)
  {
    if (v4) {
      goto LABEL_4;
    }
LABEL_20:
    _voucher_insert_cold_3();
  }
  uint64_t result = _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock);
  if (!v4) {
    goto LABEL_20;
  }
LABEL_4:
  if (*(int *)(v2 + 12) <= 0)
  {
    uint64_t v6 = *(void *)(v2 + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(v2 + 16);
      if (v7 != -1) {
        *(void *)(23 - v7) = v6;
      }
      *(void *)~uint64_t v6 = v7;
      *(_OWORD *)(v2 + 16) = xmmword_18A97E5F0;
    }
  }
  unsigned int v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  a2 = (const char *)atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
  if (a2 != v8) {
    uint64_t result = _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, a2);
  }
LABEL_11:
  if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return _os_object_dispose((void *)v2, a2);
    }
  }
  return result;
}

uint64_t _voucher_dispose(uint64_t a1, const char *a2)
{
  if (*(void *)(a1 + 24)) {
    _voucher_insert_cold_3();
  }
  *(_OWORD *)(a1 + 16) = xmmword_18A97E5F0;
  mach_port_name_t v3 = *(_DWORD *)(a1 + 36);
  if (v3)
  {
    if (v3 != *(_DWORD *)(a1 + 32)) {
      _voucher_dealloc_mach_voucher(v3);
    }
    *(_DWORD *)(a1 + 36) = 0;
  }
  mach_port_name_t v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    if (!*(void *)(a1 + 40)) {
      _voucher_dealloc_mach_voucher(v4);
    }
    *(_DWORD *)(a1 + 32) = 0;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        -[OS_voucher release]();
      }
      uint64_t result = _voucher_xref_dispose(result, a2);
    }
    *(void *)(a1 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return result;
}

void _voucher_activity_debug_channel_init()
{
  kern_return_t v1;
  NSObject *f;
  mach_port_t special_port;

  if (_voucher_libtrace_hooks)
  {
    uint64_t v0 = *(void *)(_voucher_libtrace_hooks + 16);
    if (v0)
    {
      special_port = 0;
      ipc_voucher_t v1 = task_get_special_port(*MEMORY[0x1E4F14C48], 10, &special_port);
      if (v1)
      {
        if (v1 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        _voucher_activity_debug_channel_init_cold_1(v1);
      }
      if (special_port)
      {
        f = dispatch_mach_create_f((uint64_t)"com.apple.debug-channel", 0, 0, v0);
        *((unsigned char *)f[11].isa + 29) &= ~0x20u;
        dispatch_mach_connect(f, special_port, 0, 0);
        _voucher_activity_debug_channel = (uint64_t)f;
      }
    }
  }
}

uint64_t _voucher_atfork_prepare()
{
  int v0 = 0;
  atomic_compare_exchange_strong_explicit(&_voucher_hash_lock, (unsigned int *)&v0, *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v0) {
    return _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock);
  }
  return result;
}

uint64_t _voucher_atfork_parent()
{
  unsigned int v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  unsigned int v1 = atomic_exchange_explicit(&_voucher_hash_lock, 0, memory_order_release);
  if (v1 != v0) {
    return _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v1);
  }
  return result;
}

__n128 _voucher_atfork_child()
{
  for (uint64_t i = 0; i != 64; ++i)
  {
    while (1)
    {
      uint64_t v1 = *((void *)&_voucher_hash + i);
      if (v1 == -1) {
        break;
      }
      uint64_t v2 = ~v1;
      *(void *)(v2 + 32) = 0;
      uint64_t v3 = *(void *)(v2 + 16);
      uint64_t v4 = *(void *)(v2 + 24);
      if (v3 != -1) {
        *(void *)(23 - v3) = v4;
      }
      *(void *)~uint64_t v4 = v3;
      *(_OWORD *)(v2 + 16) = xmmword_18A97E5F0;
    }
  }
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  xmmword_1EB1CEDF0 = (__int128)result;
  unk_1EB1CEE00 = result;
  xmmword_1EB1CEDD0 = (__int128)result;
  unk_1EB1CEDE0 = result;
  xmmword_1EB1CEDB0 = (__int128)result;
  unk_1EB1CEDC0 = result;
  xmmword_1EB1CED90 = (__int128)result;
  unk_1EB1CEDA0 = result;
  xmmword_1EB1CED70 = (__int128)result;
  unk_1EB1CED80 = result;
  xmmword_1EB1CED50 = (__int128)result;
  unk_1EB1CED60 = result;
  xmmword_1EB1CED30 = (__int128)result;
  unk_1EB1CED40 = result;
  xmmword_1EB1CED10 = (__int128)result;
  unk_1EB1CED20 = result;
  xmmword_1EB1CECF0 = (__int128)result;
  unk_1EB1CED00 = result;
  xmmword_1EB1CECD0 = (__int128)result;
  unk_1EB1CECE0 = result;
  xmmword_1EB1CECB0 = (__int128)result;
  unk_1EB1CECC0 = result;
  xmmword_1EB1CEC90 = (__int128)result;
  unk_1EB1CECA0 = result;
  xmmword_1EB1CEC70 = (__int128)result;
  unk_1EB1CEC80 = result;
  xmmword_1EB1CEC50 = (__int128)result;
  unk_1EB1CEC60 = result;
  xmmword_1EB1CEC30 = (__int128)result;
  unk_1EB1CEC40 = result;
  _voucher_hash = (__int128)result;
  unk_1EB1CEC20 = result;
  _voucher_hash_lock = 0;
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224) = 0;
  _voucher_task_mach_voucher_pred = 0;
  _voucher_task_int mach_voucher = 0;
  _voucher_default_task_int mach_voucher = 0;
  _voucher_aid_next = 0;
  _firehose_task_buffer_pred = 0;
  _firehose_task_buffer = 0;
  return result;
}

uint64_t voucher_process_can_use_arbitrary_personas()
{
  if (_voucher_process_can_use_arbitrary_personas_pred != -1) {
    dispatch_once_f(&_voucher_process_can_use_arbitrary_personas_pred, 0, (dispatch_function_t)_voucher_process_can_use_arbitrary_personas_init);
  }
  return _voucher_process_can_use_arbitrary_personas;
}

uint64_t _voucher_process_can_use_arbitrary_personas_init()
{
  if (_voucher_task_mach_voucher_pred != -1) {
    dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
  }
  *(_DWORD *)out_content = 0;
  mach_msg_type_number_t out_contentCnt = 4;
  uint64_t result = mach_voucher_attr_command(_voucher_task_mach_voucher, 3u, 4u, 0, 0, out_content, &out_contentCnt);
  if (result) {
    _voucher_process_can_use_arbitrary_personas_init_cold_1(result);
  }
  _voucher_process_can_use_arbitrary_personas = *(_DWORD *)out_content != 0;
  return result;
}

uint64_t voucher_copy_with_persona_mach_voucher(int a1)
{
  kern_return_t v4;
  kern_return_t v5;
  ipc_voucher_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  uint64_t v18 = *MEMORY[0x1E4F14BF8];
  uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (a1)
  {
    if (v1)
    {
      mach_port_name_t v2 = *(_DWORD *)(v1 + 36);
      if (!v2) {
        mach_port_name_t v2 = *(_DWORD *)(v1 + 32);
      }
    }
    else
    {
      mach_port_name_t v2 = 0;
    }
    *(void *)recipes = 0x1FFFFFFFFLL;
    unint64_t v13 = v2;
    uint64_t v14 = 0x300000000;
    mach_error_t v15 = 10;
    uint64_t v16 = a1;
    uint64_t v17 = 0;
    host_t mach_host_port = _dispatch_get_mach_host_port();
    ipc_voucher_t voucher = 0;
    uint64_t v4 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
    if (v4 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    unsigned int v5 = v4;
    if (v4)
    {
      _dispatch_bug(944, v4);
      if (v5 == 20) {
        return -1;
      }
      if (!v2) {
        goto LABEL_14;
      }
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = voucher;
      if (voucher == v2)
      {
        if (v2) {
          _voucher_dealloc_mach_voucher(v2);
        }
LABEL_14:
        if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 12), 1u, memory_order_relaxed) <= 0) {
          -[OS_voucher retain]();
        }
        return v1;
      }
    }
    uint64_t v7 = _voucher_find_and_retain(v6);
    if (v7)
    {
      if (!v1 || *(_DWORD *)(v1 + 36))
      {
        _voucher_dealloc_mach_voucher(v6);
        return v7;
      }
      unsigned int v9 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
    }
    else
    {
      unsigned int v8 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
      unsigned int v9 = v8;
      if (!v1)
      {
        v8[8] = v6;
        goto LABEL_28;
      }
    }
    *((_OWORD *)v9 + 3) = *(_OWORD *)(v1 + 48);
    *((void *)v9 + 8) = *(void *)(v1 + 64);
    v9[8] = v6;
    if (!*(_DWORD *)(v1 + 36))
    {
      if (v7)
      {
        *((void *)v9 + 5) = v7;
        _voucher_dealloc_mach_voucher(v6);
      }
      return (uint64_t)v9;
    }
LABEL_28:
    v9[9] = v6;
    _voucher_insert((uint64_t)v9);
    return (uint64_t)v9;
  }
  if (v1 && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 12), 1u, memory_order_relaxed) <= 0) {
    -[OS_voucher retain]();
  }
  return v1;
}

uint64_t mach_voucher_persona_self(ipc_voucher_t *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F14BF8];
  *(_OWORD *)recipes = xmmword_18A97E630;
  long long v9 = unk_18A97E640;
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  uint64_t v3 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if (v3 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  uint64_t v4 = v3;
  if (v3)
  {
    _dispatch_bug(1000, (int)v3);
    ipc_voucher_t v5 = 0;
  }
  else
  {
    ipc_voucher_t v5 = voucher;
  }
  *a1 = v5;
  return v4;
}

uint64_t mach_voucher_persona_for_originator(int a1, int a2, uint64_t a3, ipc_voucher_t *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F14BF8];
  *(void *)recipes = 0x100000003;
  int v10 = a2;
  long long v11 = xmmword_18A97E600;
  int v12 = 16;
  int v13 = a1;
  int v14 = 0;
  uint64_t v15 = a3;
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  uint64_t result = host_create_mach_voucher(mach_host_port, recipes, 0x30u, &voucher);
  if (result == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  ipc_voucher_t v7 = voucher;
  if (result) {
    ipc_voucher_t v7 = 0;
  }
  *a4 = v7;
  return result;
}

uint64_t voucher_get_current_persona()
{
  kern_return_t v5;
  int v7;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;

  *(_DWORD *)out_content = -1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v1 = *(void *)(StatusReg + 224);
  if (v1)
  {
    ipc_voucher_t v2 = *(_DWORD *)(v1 + 32);
    if (v2)
    {
      ipc_voucher_t v3 = *(_DWORD *)(v1 + 36);
      if (v3) {
        ipc_voucher_t v4 = v3;
      }
      else {
        ipc_voucher_t v4 = v2;
      }
      mach_msg_type_number_t out_contentCnt = 4;
      ipc_voucher_t v5 = mach_voucher_attr_command(v4, 3u, 3u, 0, 0, out_content, &out_contentCnt);
      if (v5 > 0x2E || ((1 << v5) & 0x400000040011) == 0)
      {
        _dispatch_bug(1103, v5);
      }
      else if (!v5)
      {
        return *(unsigned int *)out_content;
      }
    }
  }
  if ((kpersona_get() & 0x80000000) != 0)
  {
    ipc_voucher_t v7 = **(_DWORD **)(StatusReg + 8);
    if (v7 != 3 && v7 != 0) {
      _dispatch_bug(1126, v7);
    }
  }
  return *(unsigned int *)out_content;
}

double voucher_get_current_persona_originator_info(_OWORD *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F14BF8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)&v4))
  {
    long long v3 = v5;
    *a1 = v4;
    a1[1] = v3;
    double result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

uint64_t _voucher_get_current_persona_token(mach_voucher_attr_content_t out_content)
{
  uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v1) {
    return 5;
  }
  ipc_voucher_t v2 = *(_DWORD *)(v1 + 32);
  if (!v2) {
    return 5;
  }
  ipc_voucher_t v4 = *(_DWORD *)(v1 + 36);
  if (v4) {
    ipc_voucher_t v5 = v4;
  }
  else {
    ipc_voucher_t v5 = v2;
  }
  mach_msg_type_number_t out_contentCnt = 96;
  uint64_t result = mach_voucher_attr_command(v5, 3u, 2u, 0, 0, out_content, &out_contentCnt);
  if (result > 0x2E || ((1 << result) & 0x400000040011) == 0)
  {
    uint64_t v8 = result;
    _dispatch_bug(1075, (int)result);
    return v8;
  }
  return result;
}

double voucher_get_current_persona_proximate_info(_OWORD *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F14BF8];
  long long v6 = 0u;
  *(_OWORD *)long long v7 = 0u;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  if (!_voucher_get_current_persona_token((mach_voucher_attr_content_t)v4))
  {
    long long v3 = v6;
    *a1 = v5;
    a1[1] = v3;
    double result = v7[0];
    a1[2] = *(_OWORD *)v7;
  }
  return result;
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  if ((msg->msgh_bits & 0x1F0000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v2)
  {
    mach_port_name_t mach_voucher = _voucher_get_mach_voucher(v2);
  }
  else
  {
    if (_voucher_task_mach_voucher_pred != -1) {
      dispatch_once_f(&_voucher_task_mach_voucher_pred, 0, (dispatch_function_t)_voucher_task_mach_voucher_init);
    }
    mach_port_name_t mach_voucher = _voucher_task_mach_voucher;
  }
  mach_msg_bits_t msgh_bits = msg->msgh_bits;
  if (!mach_voucher || (msg->msgh_bits & 0x1F0000) != 0) {
    return 0;
  }
  msg->mach_port_name_t msgh_voucher_port = mach_voucher;
  msg->mach_msg_bits_t msgh_bits = msgh_bits | 0x130000;
  return 1;
}

void voucher_mach_msg_clear(mach_msg_header_t *msg)
{
  mach_msg_bits_t msgh_bits = msg->msgh_bits;
  mach_msg_bits_t v3 = HIWORD(msg->msgh_bits) & 0x1F;
  mach_port_name_t msgh_voucher_port = msg->msgh_voucher_port;
  if ((v3 == 17 || v3 == 19) && msgh_voucher_port != 0)
  {
    if (v3 == 17)
    {
      _voucher_dealloc_mach_voucher(msgh_voucher_port);
      mach_msg_bits_t msgh_bits = msg->msgh_bits;
    }
    msg->mach_port_name_t msgh_voucher_port = 0;
    msg->mach_msg_bits_t msgh_bits = msgh_bits & 0xFFE0FFFF;
  }
}

voucher_mach_msg_state_t voucher_mach_msg_adopt(mach_msg_header_t *msg)
{
  mach_msg_bits_t msgh_bits = msg->msgh_bits;
  if ((msg->msgh_bits & 0x1F0000) == 0) {
    return (voucher_mach_msg_state_t)-1;
  }
  mach_port_name_t msgh_voucher_port = msg->msgh_voucher_port;
  msg->mach_port_name_t msgh_voucher_port = 0;
  msg->mach_msg_bits_t msgh_bits = msgh_bits & 0xDFE0FFFF;
  if (!msgh_voucher_port) {
    return (voucher_mach_msg_state_t)-1;
  }
  int v4 = msgh_bits & 0x201F0000;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v6 = *(unsigned int **)(StatusReg + 984);
  if (v6)
  {
    unsigned int v9 = *v6;
    long long v7 = v6 + 2;
    unsigned int v8 = v9;
    unsigned int v10 = v9 - 8;
    if (v9 == 8) {
      long long v7 = 0;
    }
    if (v8 <= 7) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (uint64_t)v7;
    }
    if (v8 <= 7) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = v10;
    }
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
  }
  uint64_t v15 = (voucher_mach_msg_state_s *)_voucher_create_with_mach_voucher(msgh_voucher_port, v4, v11, v12);
  int v13 = *(voucher_mach_msg_state_s **)(StatusReg + 224);
  if (v13 == v15) {
    return v15;
  }
  *(void *)(StatusReg + 224) = v15;
  if (!v15)
  {
    int v16 = 0;
    if (v13) {
      goto LABEL_18;
    }
LABEL_21:
    int v17 = 0;
    goto LABEL_22;
  }
  int v16 = *((_DWORD *)v15 + 8);
  if (!v13) {
    goto LABEL_21;
  }
LABEL_18:
  int v17 = *((_DWORD *)v13 + 8);
LABEL_22:
  if (v16 != -1 && v16 != v17) {
    _dispatch_set_priority_and_mach_voucher_slow(0, v16);
  }
  return v13;
}

void voucher_mach_msg_revert(voucher_mach_msg_state_t state)
{
  if (state == (voucher_mach_msg_state_t)-1) {
    return;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  mach_msg_bits_t v3 = *(atomic_uint **)(StatusReg + 224);
  if (v3 != (atomic_uint *)state)
  {
    *(void *)(StatusReg + 224) = state;
    if (state)
    {
      uint64_t v1 = (const char *)*((unsigned int *)state + 8);
      if (v3)
      {
LABEL_5:
        atomic_uint v4 = v3[8];
LABEL_8:
        if (v1 != -1 && v1 != v4) {
          _dispatch_set_priority_and_mach_voucher_slow(0, (int)v1);
        }
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v1 = 0;
      if (v3) {
        goto LABEL_5;
      }
    }
    atomic_uint v4 = 0;
    goto LABEL_8;
  }
LABEL_11:
  if (v3)
  {
    int add_explicit = atomic_fetch_add_explicit(v3 + 3, 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        -[OS_voucher release]();
      }
      _voucher_xref_dispose((uint64_t)v3, v1);
    }
  }
}

uint64_t voucher_activity_initialize_4libtrace(uint64_t *a1)
{
  if (*a1 <= 2) {
    voucher_activity_initialize_4libtrace_cold_1(*a1);
  }
  uint64_t v1 = 0;
  atomic_compare_exchange_strong_explicit(&_voucher_libtrace_hooks, (unint64_t *)&v1, (unint64_t)a1, memory_order_relaxed, memory_order_relaxed);
  if (v1) {
    voucher_activity_initialize_4libtrace_cold_2();
  }
  uint64_t result = _dispatch_getenv_BOOL("LIBDISPATCH_NO_FAULTS", 0);
  if ((result & 1) == 0)
  {
    uint64_t result = getpid();
    if (result != 1)
    {
      uint64_t result = os_variant_has_internal_diagnostics();
      if (result)
      {
        if ((MEMORY[0xFFFFFC104] & 0x80000000) == 0) {
          _dispatch_mode &= ~2u;
        }
      }
    }
  }
  return result;
}

uint64_t _voucher_init()
{
  return MEMORY[0x1F40CFDC0](&_voucher_libkernel_functions);
}

unint64_t voucher_activity_id_allocate(unsigned __int8 a1)
{
  uint64_t v2 = _voucher_aid_next;
  while (1)
  {
    uint64_t v3 = v2;
    if (!v2 || ((v2 + 1) & 0xF) == 0) {
      break;
    }
    atomic_compare_exchange_strong_explicit(&_voucher_aid_next, (unint64_t *)&v2, v2 + 1, memory_order_relaxed, memory_order_relaxed);
    if (v2 == v3) {
      return v3 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
    }
  }
  _voucher_activity_id_allocate_slow(v2);
  return v3 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
}

mach_vm_address_t voucher_activity_get_logging_preferences(mach_vm_size_t *a1)
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  }
  uint64_t v2 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
  {
    *a1 = 0;
    return 0;
  }
  else
  {
    return firehose_buffer_get_logging_prefs(v2, a1);
  }
}

BOOL voucher_activity_should_send_strings()
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  }
  unsigned int v0 = (int *)_firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1) {
    return 0;
  }

  return firehose_buffer_should_send_strings(v0);
}

uint64_t voucher_activity_get_metadata_buffer(void *a1)
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  }
  uint64_t v2 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
  {
    uint64_t result = 0;
    *a1 = 0;
  }
  else
  {
    *a1 = 2048;
    return v2 + 2048;
  }
  return result;
}

void *voucher_activity_create_with_data_2(unint64_t *a1, uint64_t a2, unsigned __int8 a3, const void *a4, size_t a5, char a6)
{
  size_t v7 = a5 + 8;
  unint64_t v8 = (unsigned __int16)(a5 + 8);
  if (a5 >= 0xFFFFFFFFFFFFFFF8 || v7 >> 16 || v8 >= 0x81) {
    voucher_activity_create_with_data_2_cold_1(v8);
  }
  unint64_t v11 = *a1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v12 = *(void *)(StatusReg + 224);
  if (a2 == -3) {
    uint64_t v13 = *(void *)(StatusReg + 224);
  }
  else {
    uint64_t v13 = a2;
  }
  unint64_t v86 = v11;
  unint64_t v14 = v11 >> 16;
  uint64_t v15 = (v11 >> 16) & 0xFFFFFFEF;
  if (v12)
  {
    unint64_t v16 = *(void *)(v12 + 48);
    if (v16)
    {
      LOWORD(v15) = v15 | 1;
      unint64_t v17 = *(void *)(v12 + 56);
      LODWORD(v7) = a5 + 24;
      if (v17) {
        LOWORD(v15) = v14 | 0x11;
      }
      else {
        LODWORD(v7) = a5 + 16;
      }
      if (!v13) {
        goto LABEL_13;
      }
LABEL_16:
      unint64_t v18 = *(void *)(v13 + 48);
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v16 = 0;
  }
  unint64_t v17 = 0;
  if (v13) {
    goto LABEL_16;
  }
LABEL_13:
  unint64_t v18 = 0;
LABEL_17:
  unint64_t v92 = v18;
  if (v18) {
    LOWORD(v15) = v15 | 0x200;
  }
  unsigned __int16 v85 = v15;
  if (v18) {
    size_t v7 = (v7 + 8);
  }
  else {
    size_t v7 = v7;
  }
  size_t v94 = v7;
  char v19 = MEMORY[0xFFFFFC104];
  uint64_t v20 = _os_object_alloc_realized((objc_class *)OS_voucher, 80);
  uint64_t v21 = v20;
  if (v13 && *(_DWORD *)(v13 + 32))
  {
    uint64_t v22 = *(void *)(v13 + 40);
    if (!v22) {
      uint64_t v22 = v13;
    }
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v22 + 12), 1u, memory_order_relaxed) <= 0) {
      -[OS_voucher retain]();
    }
    *((void *)v20 + 5) = v22;
    v20[8] = *(_DWORD *)(v22 + 32);
    *((unsigned char *)v20 + 72) = v20[18] & 0xFE | *(unsigned char *)(v22 + 72) & 1;
  }
  int v93 = a6 & 1;
  uint64_t v23 = _voucher_aid_next;
  while (1)
  {
    uint64_t v24 = v23;
    if (!v23 || ((v23 + 1) & 0xF) == 0) {
      break;
    }
    atomic_compare_exchange_strong_explicit(&_voucher_aid_next, (unint64_t *)&v23, v23 + 1, memory_order_relaxed, memory_order_relaxed);
    if (v23 == v24) {
      goto LABEL_32;
    }
  }
  _voucher_activity_id_allocate_slow(v23);
LABEL_32:
  unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)(a3 | HIBYTE(v92) | ~v19 & 0x80u) << 56);
  uint64_t v26 = _voucher_unique_pid;
  v21[6] = v25;
  v21[7] = v26;
  v21[8] = v92;
  unint64_t v88 = v25;
  unint64_t v89 = v16;
  unint64_t v87 = v17;
  uint64_t v83 = v21;
  unint64_t v84 = a1;
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  }
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    if ((a3 | HIBYTE(v92)) & 0x80 | ~v19 & 0x80 || (MEMORY[0xFFFFFC104] & 0x80) == 0) {
      uint64_t v27 = mach_continuous_time();
    }
    else {
      uint64_t v27 = mach_continuous_approximate_time();
    }
    uint64_t v28 = v27;
    uint64_t v29 = 0;
    int v30 = (unsigned __int16)(v94 + 24);
    if ((v94 & 7) != 0) {
      uint64_t v31 = (v94 & 0xFFF8) + 32;
    }
    else {
      uint64_t v31 = (unsigned __int16)v94 + 24;
    }
    size_t v82 = v94 << 48;
    char v32 = 1;
    while (1)
    {
      char v33 = v32;
      uint64_t v34 = voucher_activity_create_with_data_2_streams[v29];
      uint64_t v35 = _firehose_task_buffer;
      int v36 = (atomic_ullong *)(_firehose_task_buffer + (v34 << 7) + 640);
      unint64_t v37 = *v36;
      if ((v32 & 1) == 0) {
        break;
      }
      do
      {
        while (1)
        {
          unint64_t v38 = HIDWORD(v37);
          if ((BYTE4(v37) - 1) <= 0xFDu)
          {
            uint64_t v39 = (atomic_ullong *)(v35 + ((unint64_t)BYTE4(v37) << 12));
            unint64_t v40 = *v39;
            if (*v39)
            {
              uint64_t v41 = v28 - v39[1];
              while ((HIWORD(v40) & 0x1FF) == v34)
              {
                BOOL v42 = v30 + (unsigned __int16)v40 <= WORD1(v40) && HIWORD(v41) == 0;
                int v43 = !v42;
                unsigned __int16 v44 = v40 + v31;
                unint64_t v45 = v40 + v31 + 0x100000000;
                unint64_t v46 = (v40 + v31) >> 16;
                uint64_t v47 = ((unsigned __int16)(v40 + v31) + 40 > (unsigned __int16)v46) | HIBYTE(v45);
                if (v43 == 1)
                {
                  unint64_t v45 = v40;
                  uint64_t v47 = HIBYTE(v40) | 1;
                  unint64_t v46 = v40 >> 16;
                  unsigned __int16 v44 = v40;
                }
                unint64_t v48 = (v46 << 16) | v45 & 0xFFFFFF00000000 | (v47 << 56) | v44;
                unint64_t v49 = v40;
                atomic_compare_exchange_strong_explicit(v39, &v49, v48, memory_order_relaxed, memory_order_relaxed);
                if (v49 == v40)
                {
                  if (v43)
                  {
                    if ((v45 & 0xFF00000000) == 0) {
                      firehose_buffer_ring_enqueue((int *)v35, BYTE4(v37));
                    }
                    break;
                  }
                  if (!(_WORD)v40) {
                    break;
                  }
                  unint64_t v78 = *(void *)(StatusReg - 8);
                  uint64_t v77 = (unint64_t *)((char *)v39 + (unsigned __int16)v40);
                  v77[2] = v41 | v82;
                  goto LABEL_118;
                }
                unint64_t v40 = v49;
                if (!v49) {
                  break;
                }
              }
            }
            LOBYTE(v38) = 0;
          }
          if (!v37) {
            break;
          }
          uint64_t v52 = v37 | 1;
          unint64_t v53 = v52 | ((unint64_t)v38 << 32) | v37 & 0xFFFFFF0000000000;
          if (v53 != v37)
          {
            unint64_t v54 = v37;
            atomic_compare_exchange_strong_explicit(v36, &v54, v53, memory_order_relaxed, memory_order_relaxed);
            BOOL v42 = v54 == v37;
            unint64_t v37 = v54;
            if (!v42) {
              continue;
            }
          }
          _dispatch_firehose_gate_wait((uint64_t)v36, v52);
          unint64_t v37 = *v36;
        }
        unint64_t v51 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v38 << 32) | v37 & 0xFFFFFF0000000000;
        v37 &= 0xFFFFFFFF00000000;
        unint64_t v50 = v37;
        atomic_compare_exchange_strong_explicit(v36, &v37, v51, memory_order_relaxed, memory_order_relaxed);
      }
      while (v37 != v50);
      uint64_t v96 = v28;
      uint64_t v97 = (unsigned __int16)v94;
      BYTE4(v97) = v34;
      char v76 = (((1 << v34) & 0x13) != 0) | (2 * *(unsigned char *)(v35 + 1569)) | 4;
LABEL_114:
      BYTE6(v97) = v76;
      uint64_t v77 = (unint64_t *)firehose_buffer_tracepoint_reserve_slow(v35, (unsigned __int8 *)&v96, 0);
      if (v77)
      {
LABEL_119:
        if (v89)
        {
          v77[3] = v89;
          unint64_t v79 = v77 + 4;
        }
        else
        {
          unint64_t v79 = v77 + 3;
        }
        if (v87) {
          *v79++ = v87;
        }
        if (v92) {
          *v79++ = v92;
        }
        *unint64_t v79 = v88;
        memcpy(v79 + 1, a4, a5);
        v80 = (int *)_firehose_task_buffer;
        atomic_store(v86 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v85 << 16), v77);
        if ((atomic_fetch_add_explicit((atomic_ullong *volatile)((unint64_t)v77 & 0xFFFFFFFFFFFFF000), 0xFFFFFFFF00000000, memory_order_relaxed) & 0x10000FF00000000) == 0x100000100000000)firehose_buffer_ring_enqueue(v80, (((v77 & 0xFFFFF000) - v80) >> 12)); {
      }
        }
LABEL_128:
      char v32 = 0;
      uint64_t v29 = 1u;
      if ((v33 & 1) == 0) {
        goto LABEL_129;
      }
    }
    char v55 = 1;
    while (1)
    {
      unint64_t v56 = HIDWORD(v37);
      if ((BYTE4(v37) - 1) <= 0xFDu)
      {
        uint64_t v57 = (atomic_ullong *)(v35 + ((unint64_t)BYTE4(v37) << 12));
        unint64_t v58 = *v57;
        if (*v57)
        {
          uint64_t v59 = v28 - v57[1];
          while ((HIWORD(v58) & 0x1FF) == v34)
          {
            BOOL v61 = v30 + (unsigned __int16)v58 > WORD1(v58) || HIWORD(v59) != 0;
            unsigned __int16 v62 = v58 + v31;
            unint64_t v63 = v58 + v31 + 0x100000000;
            unint64_t v64 = (v58 + v31) >> 16;
            uint64_t v65 = ((unsigned __int16)(v58 + v31) + 40 > (unsigned __int16)v64) | HIBYTE(v63);
            if (v61)
            {
              unint64_t v63 = v58;
              uint64_t v65 = HIBYTE(v58) | 1;
              unint64_t v64 = v58 >> 16;
              unsigned __int16 v62 = v58;
            }
            unint64_t v66 = (v64 << 16) | v63 & 0xFFFFFF00000000 | (v65 << 56) | v62;
            unint64_t v67 = v58;
            atomic_compare_exchange_strong_explicit(v57, &v67, v66, memory_order_relaxed, memory_order_relaxed);
            if (v67 == v58)
            {
              if (v61)
              {
                if ((v63 & 0xFF00000000) == 0) {
                  firehose_buffer_ring_enqueue((int *)v35, BYTE4(v37));
                }
                break;
              }
              if (!(_WORD)v58) {
                break;
              }
              unint64_t v78 = *(void *)(StatusReg - 8);
              uint64_t v77 = (unint64_t *)((char *)v57 + (unsigned __int16)v58);
              v77[2] = v59 | v82;
LABEL_118:
              v77[1] = v78;
              goto LABEL_119;
            }
            unint64_t v58 = v67;
            if (!v67) {
              break;
            }
          }
        }
        LOBYTE(v56) = 0;
      }
      if (!v93) {
        break;
      }
      if (((v37 >> 40) & 0x80) != 0 || !((((v37 >> 40) & 0x40) == 0) | v55 & 1))
      {
        uint64_t v71 = (v37 >> 40) & 0x3F;
        if (v71 >= 0x3E) {
          LODWORD(v7_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = 62;
        }
        unint64_t v72 = ((((int)v71 + 1) | (v37 >> 40) & 0xC0) << 40) | ((unint64_t)v56 << 32) | v37 & 0xFFFF0000FFFFFFFFLL;
        unint64_t v70 = v37;
        atomic_compare_exchange_strong_explicit(v36, &v70, v72, memory_order_relaxed, memory_order_relaxed);
        if (v70 == v37) {
          goto LABEL_128;
        }
        goto LABEL_104;
      }
      if (v37)
      {
        int v68 = 2;
LABEL_108:
        uint64_t v73 = v68 | v37;
        unint64_t v74 = v73 | ((unint64_t)v56 << 32) | v37 & 0xFFFFFF0000000000;
        if (v74 == v37
          || (unint64_t v75 = v37,
              atomic_compare_exchange_strong_explicit(v36, &v75, v74, memory_order_relaxed, memory_order_relaxed),
              BOOL v42 = v75 == v37,
              unint64_t v37 = v75,
              v42))
        {
          _dispatch_firehose_gate_wait((uint64_t)v36, v73);
          char v55 = 0;
          unint64_t v37 = *v36;
        }
      }
      else
      {
LABEL_99:
        unint64_t v69 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v56 << 32) | v37 & 0xFFFFFF0000000000;
        unint64_t v70 = v37 & 0xFFFFFFFF00000000;
        atomic_compare_exchange_strong_explicit(v36, &v70, v69, memory_order_relaxed, memory_order_relaxed);
        if (v70 == (v37 & 0xFFFFFFFF00000000))
        {
          uint64_t v96 = v28;
          uint64_t v97 = (unsigned __int16)v94;
          BYTE4(v97) = v34;
          char v76 = ((4 * v93) | (2 * *(unsigned char *)(v35 + 1569)) | (((1 << v34) & 0x13) != 0)) ^ 4;
          goto LABEL_114;
        }
LABEL_104:
        unint64_t v37 = v70;
      }
    }
    if (v37)
    {
      int v68 = 1;
      goto LABEL_108;
    }
    goto LABEL_99;
  }
LABEL_129:
  uint64_t result = v83;
  *unint64_t v84 = v86 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v85 << 16);
  return result;
}

void *voucher_activity_create_with_data(unint64_t *a1, uint64_t a2, unsigned __int8 a3, const void *a4, size_t a5)
{
  return voucher_activity_create_with_data_2(a1, a2, a3, a4, a5, 0);
}

void *voucher_activity_create_with_location(unint64_t *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = a4;
  return voucher_activity_create_with_data_2(a1, a2, a3, &v5, 8uLL, 0);
}

uint64_t voucher_get_activity_id_and_creator(void *a1, void *a2, void *a3)
{
  if (a1 == (void *)-3)
  {
    a1 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1) {
      goto LABEL_3;
    }
  }
  else if (a1)
  {
LABEL_3:
    if (a2) {
      *a2 = a1[7];
    }
    if (a3) {
      *a3 = a1[8];
    }
    return a1[6];
  }
  if (a2) {
    *a2 = 0;
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = 0;
  }
  return result;
}

uint64_t voucher_get_activity_id(uint64_t a1, void *a2)
{
  if (a1 == -3)
  {
    a1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1) {
      goto LABEL_3;
    }
  }
  else if (a1)
  {
LABEL_3:
    if (a2) {
      *a2 = *(void *)(a1 + 64);
    }
    return *(void *)(a1 + 48);
  }
  uint64_t result = 0;
  if (a2) {
    *a2 = 0;
  }
  return result;
}

void voucher_activity_flush(unsigned int a1)
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
  }
  uint64_t v2 = (int *)_firehose_task_buffer;
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    uint64_t v3 = a1;
    unint64_t v4 = _firehose_task_buffer + ((unint64_t)a1 << 7);
    uint64_t v5 = *(void *)(v4 + 640);
    if ((~v5 & 0xFF00000000) == 0 || BYTE4(*(void *)(v4 + 640)) == 0)
    {
      firehose_buffer_force_connect(v2);
    }
    else
    {
      size_t v7 = (atomic_ullong *)(_firehose_task_buffer + ((unint64_t)BYTE4(v5) << 12));
      unint64_t v8 = *v7;
      if (*v7)
      {
        unint64_t v9 = v7[1];
        while ((HIWORD(v8) & 0x1FF) == v3)
        {
          BOOL v11 = (unsigned __int16)v8 + 25 > WORD1(v8) || v9 < 0xFFFF000000000000;
          unint64_t v12 = v8 + 0x100000020;
          unint64_t v13 = (v8 + 0x100000020) >> 16;
          unint64_t v14 = ((unsigned __int16)(v8 + 32) + 40 > (unsigned __int16)v13) | ((v8 + 0x100000020) >> 56);
          if (v11)
          {
            unint64_t v12 = v8;
            unint64_t v14 = HIBYTE(v8) | 1;
            unint64_t v13 = v8 >> 16;
          }
          unint64_t v15 = (v13 << 16) | v12 & 0xFFFFFF00000000 | (v14 << 56) | (unsigned __int16)v12;
          unint64_t v16 = v8;
          atomic_compare_exchange_strong_explicit(v7, &v16, v15, memory_order_relaxed, memory_order_relaxed);
          if (v16 == v8)
          {
            if (v11)
            {
              if ((v12 & 0xFF00000000) == 0) {
                firehose_buffer_ring_enqueue(v2, BYTE4(v5));
              }
            }
            else if ((_WORD)v8)
            {
              voucher_activity_flush_cold_1((unsigned __int16)v8);
            }
            break;
          }
          unint64_t v8 = v16;
          if (!v16) {
            break;
          }
        }
      }
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v4 + 640), &v17, v5 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
    }
  }
}

void voucher_activity_trace_v_2(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, unint64_t a6, char a7)
{
  LOBYTE(v7) = a7;
  uint64_t v11 = a3;
  unsigned int v13 = a1;
  if (_firehose_task_buffer_pred != -1)
  {
LABEL_99:
    unsigned int v66 = v13;
    uint64_t v67 = v11;
    dispatch_once_f(&_firehose_task_buffer_pred, 0, (dispatch_function_t)_firehose_task_buffer_init);
    uint64_t v11 = v67;
    unsigned int v13 = v66;
  }
  uint64_t v14 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1) {
    return;
  }
  __dst = 0;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v16 = *(void *)(StatusReg + 224);
  if (v16)
  {
    unint64_t v17 = *(void *)(v16 + 48);
    uint64_t v18 = *(void *)(v16 + 56);
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v17 = 0;
  }
  char v19 = a5 + 8;
  if (!v17) {
    char v19 = a5;
  }
  int v20 = (v17 != 0) | (a2 >> 16) & 0xFFFFFFEF;
  uint64_t v21 = v19 + 8;
  if (v18) {
    LOWORD(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = (v17 != 0) | WORD1(a2);
  }
  else {
    uint64_t v21 = v19;
  }
  if ((a2 & 0x100000) != 0) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = 0;
  }
  BOOL v23 = (a2 & 0x100000) == 0 || v18 == 0;
  if ((a2 & 0x100000) != 0) {
    unsigned __int16 v24 = v20;
  }
  else {
    unsigned __int16 v24 = (v17 != 0) | WORD1(a2);
  }
  if ((a2 & 0x100000) != 0) {
    unint64_t v25 = v21;
  }
  else {
    unint64_t v25 = v19;
  }
  unsigned __int16 v26 = v24 | 0x100;
  if (a6)
  {
    uint64_t v27 = v25 + 4;
  }
  else
  {
    unsigned __int16 v26 = v24;
    uint64_t v27 = v25;
  }
  if ((unint64_t)&v27[a6 + 24] >= 0xFF1)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Log is too large";
    qword_1E91199F0 = (uint64_t)&v27[a6 + 24];
    __break(1u);
    return;
  }
  uint64_t v79 = v22;
  unsigned __int16 v80 = v26;
  unint64_t v81 = a2;
  int v28 = v7 & 1;
  uint64_t v7 = v13;
  uint64_t v29 = (atomic_ullong *)(v14 + ((unint64_t)v13 << 7) + 640);
  unint64_t v30 = *v29;
  a2 = (unsigned __int16)((_WORD)v27 + 24 + a6);
  if ((v27 & 7) != 0) {
    uint64_t v31 = ((unsigned __int16)v27 & 0xFFF8u) + 32;
  }
  else {
    uint64_t v31 = (unsigned __int16)v27 + 24;
  }
  char v82 = 1;
  while (1)
  {
    unint64_t v32 = HIDWORD(v30);
    if ((BYTE4(v30) - 1) <= 0xFDu)
    {
      char v33 = (atomic_ullong *)(v14 + ((unint64_t)BYTE4(v30) << 12));
      unint64_t v34 = *v33;
      if (*v33)
      {
        unint64_t v35 = v11 - v33[1];
        while ((HIWORD(v34) & 0x1FF) == v7)
        {
          BOOL v36 = a2 + (unsigned __int16)v34 <= WORD1(v34) && HIWORD(v35) == 0;
          int v37 = !v36;
          unsigned __int16 v38 = v34 + v31;
          unint64_t v39 = v34 + v31 - (a6 << 16);
          unint64_t v40 = v39 >> 16;
          unint64_t v41 = ((unsigned __int16)(v34 + v31) + 40 > WORD1(v39)) | ((v39 + 0x100000000) >> 56);
          if (v37 == 1) {
            unint64_t v42 = v34;
          }
          else {
            unint64_t v42 = v39 + 0x100000000;
          }
          if (v37 == 1)
          {
            unint64_t v41 = HIBYTE(v34) | 1;
            unint64_t v43 = v34 >> 16;
          }
          else
          {
            LODWORD(v43) = v40;
          }
          if (v37 == 1) {
            unsigned __int16 v38 = v34;
          }
          unint64_t v44 = (v43 << 16) | v42 & 0xFFFFFF00000000 | (v41 << 56) | v38;
          unint64_t v45 = v34;
          atomic_compare_exchange_strong_explicit(v33, &v45, v44, memory_order_relaxed, memory_order_relaxed);
          if (v45 == v34)
          {
            if (v37)
            {
              if ((v42 & 0xFF00000000) == 0)
              {
                unint64_t v77 = v17;
                unsigned int v75 = v13;
                uint64_t v73 = v11;
                int v69 = v28;
                BOOL v71 = v23;
                unint64_t v68 = StatusReg;
                firehose_buffer_ring_enqueue((int *)v14, BYTE4(v30));
                unint64_t StatusReg = v68;
                int v28 = v69;
                BOOL v23 = v71;
                uint64_t v11 = v73;
                unsigned int v13 = v75;
                unint64_t v17 = v77;
              }
              break;
            }
            __dst = (char *)v33 + (unsigned __int16)v43;
            unint64_t v32 = (unsigned __int16)v34;
            if (!(_WORD)v34) {
              goto LABEL_57;
            }
            unint64_t v65 = *(void *)(StatusReg - 8);
            uint64_t v57 = (unint64_t *)((char *)v33 + v32);
            void v57[2] = v35 | ((void)v27 << 48);
            v57[1] = v65;
            if (v17) {
              goto LABEL_79;
            }
            goto LABEL_96;
          }
          unint64_t v34 = v45;
          if (!v45) {
            break;
          }
        }
      }
      LOBYTE(v32) = 0;
    }
LABEL_57:
    if (!v28) {
      break;
    }
    if (((v30 >> 40) & 0x80) != 0 || !((((v30 >> 40) & 0x40) == 0) | v82 & 1))
    {
      uint64_t v49 = (v30 >> 40) & 0x3F;
      if (v49 >= 0x3E) {
        LODWORD(v49) = 62;
      }
      unint64_t v50 = ((((int)v49 + 1) | (v30 >> 40) & 0xC0) << 40) | ((unint64_t)v32 << 32) | v30 & 0xFFFF0000FFFFFFFFLL;
      unint64_t v48 = v30;
      atomic_compare_exchange_strong_explicit(v29, &v48, v50, memory_order_relaxed, memory_order_relaxed);
      if (v48 == v30) {
        return;
      }
LABEL_68:
      unint64_t v30 = v48;
    }
    else
    {
      if (!v30) {
        goto LABEL_63;
      }
      int v46 = 2;
LABEL_72:
      uint64_t v51 = v46 | v30;
      unint64_t v52 = v51 | ((unint64_t)v32 << 32) | v30 & 0xFFFFFF0000000000;
      if (v52 == v30
        || (unint64_t v53 = v30,
            atomic_compare_exchange_strong_explicit(v29, &v53, v52, memory_order_relaxed, memory_order_relaxed),
            BOOL v36 = v53 == v30,
            unint64_t v30 = v53,
            v36))
      {
        unint64_t v78 = v17;
        unsigned int v76 = v13;
        uint64_t v74 = v11;
        int v70 = v28;
        BOOL v72 = v23;
        unint64_t v54 = StatusReg;
        _dispatch_firehose_gate_wait((uint64_t)v29, v51);
        int v28 = v70;
        BOOL v23 = v72;
        unint64_t StatusReg = v54;
        uint64_t v11 = v74;
        unsigned int v13 = v76;
        unint64_t v17 = v78;
        char v82 = 0;
        unint64_t v30 = *v29;
      }
    }
  }
  if (v30)
  {
    int v46 = 1;
    goto LABEL_72;
  }
LABEL_63:
  unint64_t v47 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v32 << 32) | v30 & 0xFFFFFF0000000000;
  unint64_t v48 = v30 & 0xFFFFFFFF00000000;
  atomic_compare_exchange_strong_explicit(v29, &v48, v47, memory_order_relaxed, memory_order_relaxed);
  if (v48 != (v30 & 0xFFFFFFFF00000000)) {
    goto LABEL_68;
  }
  BOOL v55 = v23;
  a2 = v17;
  uint64_t v84 = v11;
  uint64_t v85 = (unsigned __int16)v27;
  WORD1(v85) = a6;
  BYTE4(v85) = v13;
  BYTE6(v85) = ((2 * *(unsigned char *)(v14 + 1569)) | (4 * v28) | (((1 << v7) & 0x13) != 0)) ^ 4;
  unint64_t v56 = firehose_buffer_tracepoint_reserve_slow(v14, (unsigned __int8 *)&v84, &__dst);
  if (v56)
  {
    uint64_t v57 = (unint64_t *)v56;
    unint64_t v17 = a2;
    LOBYTE(v23) = v55;
    if (a2)
    {
LABEL_79:
      v57[3] = v17;
      unint64_t v58 = v57 + 4;
      if (!v23) {
        goto LABEL_80;
      }
    }
    else
    {
LABEL_96:
      unint64_t v58 = v57 + 3;
      if (!v23) {
LABEL_80:
      }
        *v58++ = v79;
    }
    if (a6)
    {
      *(_DWORD *)unint64_t v58 = (unsigned __int16)((_WORD)__dst - ((unsigned __int16)v57 & 0xF000)) | ((unsigned __int16)a6 << 16);
      unint64_t v58 = (void *)((char *)v58 + 4);
    }
    while (a5)
    {
      size_t v59 = *(void *)(a4 + 8);
      memcpy(v58, *(const void **)a4, v59);
      unint64_t v60 = *(void *)(a4 + 8);
      BOOL v61 = (unint64_t)a5 >= v60;
      a5 -= v60;
      if (!v61)
      {
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
        __break(1u);
LABEL_98:
        qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
        __break(1u);
        goto LABEL_99;
      }
      unint64_t v58 = (void *)((char *)v58 + v59);
      a4 += 16;
    }
    if (a6)
    {
      a5 = (char *)__dst;
      do
      {
        size_t v62 = *(void *)(a4 + 8);
        memcpy(a5, *(const void **)a4, v62);
        a5 += v62;
        __dst = a5;
        unint64_t v63 = *(void *)(a4 + 8);
        BOOL v61 = a6 >= v63;
        a6 -= v63;
        if (!v61) {
          goto LABEL_98;
        }
        a4 += 16;
      }
      while (a6);
    }
    unint64_t v64 = (int *)_firehose_task_buffer;
    atomic_store(v81 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v80 << 16), v57);
    if ((atomic_fetch_add_explicit((atomic_ullong *volatile)((unint64_t)v57 & 0xFFFFFFFFFFFFF000), 0xFFFFFFFF00000000, memory_order_relaxed) & 0x10000FF00000000) == 0x100000100000000)firehose_buffer_ring_enqueue(v64, (((v57 & 0xFFFFF000) - v64) >> 12)); {
  }
    }
}

void voucher_activity_trace_v(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, unint64_t a6)
{
}

void voucher_activity_trace(unsigned int a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  v5[0] = a4;
  v5[1] = a5;
  voucher_activity_trace_v(a1, a2, a3, (uint64_t)v5, a5, 0);
}

size_t _voucher_debug(uint64_t a1, char *__str, size_t __size)
{
  int v6 = snprintf(__str, __size, "voucher[%p] = { xref = %d, ref = %d", (const void *)a1, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  size_t v7 = v6;
  if (v6 >= __size) {
    size_t v7 = __size;
  }
  if (v6 >= 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (__size >= v8) {
      size_t v9 = __size - v8;
    }
    else {
      size_t v9 = 0;
    }
    int v10 = snprintf(&__str[v8], v9, ", base voucher %p", *(const void **)(a1 + 40));
    size_t v11 = v10;
    if (v9 < v10) {
      size_t v11 = v9;
    }
    if (v10 < 0) {
      size_t v11 = 0;
    }
    v8 += v11;
  }
  int v12 = *(_DWORD *)(a1 + 32);
  if (v12)
  {
    if (__size >= v8) {
      size_t v22 = __size - v8;
    }
    else {
      size_t v22 = 0;
    }
    if (v12 == *(_DWORD *)(a1 + 36)) {
      BOOL v23 = " & ipc kvoucher";
    }
    else {
      BOOL v23 = (const char *)&unk_18A97F2E6;
    }
    snprintf(&__str[v8], v22, ", kvoucher%s 0x%x [\n", v23, v12);
    size_t v24 = voucher_kvoucher_debug(*MEMORY[0x1E4F14C48]);
    size_t v25 = v24;
    if (__size >= v24) {
      size_t v26 = __size - v24;
    }
    else {
      size_t v26 = 0;
    }
    int v27 = snprintf(&__str[v24], v26, "]");
    size_t v28 = v27;
    if (v26 < v27) {
      size_t v28 = v26;
    }
    if (v27 < 0) {
      size_t v28 = 0;
    }
    size_t v8 = v28 + v25;
  }
  int v13 = *(_DWORD *)(a1 + 36);
  if (v13 && v13 != *(_DWORD *)(a1 + 32))
  {
    if (__size >= v8) {
      size_t v29 = __size - v8;
    }
    else {
      size_t v29 = 0;
    }
    snprintf(&__str[v8], v29, ", ipc kvoucher 0x%x [\n", *(_DWORD *)(a1 + 36));
    size_t v30 = voucher_kvoucher_debug(*MEMORY[0x1E4F14C48]);
    size_t v31 = v30;
    if (__size >= v30) {
      size_t v32 = __size - v30;
    }
    else {
      size_t v32 = 0;
    }
    int v33 = snprintf(&__str[v30], v32, "]");
    size_t v34 = v33;
    if (v32 < v33) {
      size_t v34 = v32;
    }
    if (v33 < 0) {
      size_t v34 = 0;
    }
    size_t v8 = v34 + v31;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    if (__size >= v8) {
      size_t v15 = __size - v8;
    }
    else {
      size_t v15 = 0;
    }
    int v16 = snprintf(&__str[v8], v15, ", activity 0x%llx (pid: 0x%16llx, parent 0x%llx)", v14, *(void *)(a1 + 56), *(void *)(a1 + 64));
    size_t v17 = v16;
    if (v15 < v16) {
      size_t v17 = v15;
    }
    if (v16 < 0) {
      size_t v17 = 0;
    }
    v8 += v17;
  }
  if (__size >= v8) {
    size_t v18 = __size - v8;
  }
  else {
    size_t v18 = 0;
  }
  int v19 = snprintf(&__str[v8], v18, " }");
  size_t v20 = v19;
  if (v18 < v19) {
    size_t v20 = v18;
  }
  if (v19 < 0) {
    size_t v20 = 0;
  }
  return v20 + v8;
}

uint64_t voucher_mach_msg_fill_aux(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a2 >= 0x28)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4)
    {
      *(_OWORD *)a1 = xmmword_18A97E610;
      long long v5 = *(_OWORD *)(v2 + 56);
      *(void *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 24) = v5;
      return 40;
    }
  }
  return v3;
}

void _voucher_activity_id_allocate_slow(uint64_t a1)
{
  uint64_t activity_id = 0;
  uint64_t v2 = mach_generate_activity_id(*MEMORY[0x1E4F14C48], 1, &activity_id);
  if (v2)
  {
    uint64_t v3 = (atomic_ullong *)(int)v2;
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not generate an activity ID";
    qword_1E91199F0 = (int)v2;
    __break(1u);
  }
  else
  {
    if (16 * (activity_id & 0xFFFFFFFFFFFFFLL)) {
      uint64_t v2 = 16 * (activity_id & 0xFFFFFFFFFFFFFLL);
    }
    else {
      uint64_t v2 = 1;
    }
    uint64_t v3 = &_voucher_aid_next;
    if (a1) {
      goto LABEL_6;
    }
  }
  uint64_t v4 = 0;
  atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v4, v2 + 1, memory_order_relaxed, memory_order_relaxed);
  if (v4) {
LABEL_6:
  }
    __swp(v2, (unsigned int *)v3);
}

uint64_t _firehose_task_buffer_init()
{
  uint64_t v9 = *MEMORY[0x1E4F14BF8];
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  pid_t v0 = getpid();
  uint64_t result = proc_pidinfo(v0, 17, 1uLL, &v5, 56);
  if (result != 56)
  {
    if (!result)
    {
      uint64_t v4 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (error)";
      qword_1E91199F0 = v4;
      __break(1u);
    }
    qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (size)";
    qword_1E91199F0 = (int)result;
    __break(1u);
  }
  _voucher_unique_pid = v6;
  if (_voucher_libtrace_hooks)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 8))(result, v2);
    if (result)
    {
      uint64_t result = firehose_buffer_create(result, _voucher_unique_pid, _dispatch_memory_warn);
      _firehose_task_buffer = result;
      if (*(uint64_t *)_voucher_libtrace_hooks >= 4)
      {
        uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 32);
        if (v3) {
          return v3(result + 2048, 2048);
        }
      }
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_3()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_4()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_6()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_7()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_8()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_9()
{
  return v0 + v1;
}

mach_vm_address_t firehose_buffer_create(mach_port_name_t a1, uint64_t a2, uint64_t a3)
{
  kern_return_t v7;
  mach_vm_address_t v8;
  kern_return_t v9;
  uint64_t i;
  kern_return_t v12;
  mach_vm_address_t address;
  mach_port_options_t options;
  mach_port_name_t name;

  address = *MEMORY[0x1E4F14C80];
  if (0x4000 % address) {
    firehose_buffer_create_cold_4();
  }
  long long v6 = (ipc_space_t *)MEMORY[0x1E4F14C48];
  long long v7 = mach_vm_map(*MEMORY[0x1E4F14C48], &address, 0x40000uLL, 0, 1308622851, 0, 0, 0, 3, 7, 2u);
  if (v7)
  {
    if (v7 != 3) {
      _dispatch_bug(346, v7);
    }
    int v12 = mach_port_deallocate(*v6, a1);
    if (v12 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v12) {
      _dispatch_bug(91, v12);
    }
    return 0;
  }
  else
  {
    uint64_t v8 = address;
    *(_DWORD *)(address + 1548) = a1;
    *(_DWORD *)(v8 + 1544) = getpid();
    *(void *)(v8 + 1536) = a2;
    name = 0;
    *(void *)&options.flags = 0x500000033;
    options.8 = 0uLL;
    uint64_t v9 = mach_port_construct(*v6, &options, v8, &name);
    if (v9)
    {
      if (v9 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      firehose_buffer_create_cold_2(v9);
    }
    *(_DWORD *)(v8 + 156_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = name;
    *(_DWORD *)(v8 + 264) = 20180226;
    *(void *)(v8 + 512) = a3;
    for (uint64_t i = 644; i != 1540; i += 128)
    {
      if (i != 1028) {
        *(unsigned char *)(v8 + i) = -1;
      }
    }
    firehose_buffer_update_limits_unlocked(v8);
    *(void *)(v8 + 52_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 31;
    *(_WORD *)uint64_t v8 = 1;
    *(_WORD *)(v8 + 2) = 2;
    *(_WORD *)(v8 + 4) = 3;
    *(_WORD *)(v8 + 6) = 4;
    *(void *)(v8 + 464) = 4;
    *(_WORD *)(v8 + 32_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 4;
    *(_WORD *)(v8 + 256) = 0;
    *(_WORD *)(v8 + 258) = 4;
    *(_WORD *)(v8 + 26_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
    *(_WORD *)(v8 + 262) = 0;
  }
  return v8;
}

uint64_t firehose_buffer_update_limits_unlocked(uint64_t result)
{
  int v1 = 0;
  int v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(result + 512);
  long long v5 = (unsigned __int8 *)(result + 644);
  do
  {
    int v7 = *v5;
    v5 += 128;
    int v6 = v7;
    if (((1 << v3) & 0x13) != 0) {
      int v8 = v2;
    }
    else {
      int v8 = v2 + 1;
    }
    if (((1 << v3) & 0x13) != 0) {
      int v9 = v1 + 1;
    }
    else {
      int v9 = v1;
    }
    if (v6 != 255)
    {
      int v2 = v8;
      int v1 = v9;
    }
    ++v3;
  }
  while (v3 != 7);
  unsigned __int16 v10 = (2 * (v1 + v2)) | 1;
  if ((v4 & 2) != 0) {
    unsigned __int16 v10 = 3 * v1 + 6 * v2 + 1;
  }
  unsigned __int16 v11 = v1 + v2 + 3;
  __int16 v12 = v1 + 4 * v2;
  if ((v4 & 2) != 0) {
    unsigned __int16 v13 = v12 + 1;
  }
  else {
    unsigned __int16 v13 = v11;
  }
  if ((v4 & 1) == 0) {
    unsigned __int16 v13 = v10;
  }
  unint64_t v14 = *MEMORY[0x1E4F14C80];
  if ((*MEMORY[0x1E4F14C80] & 0xFFFE000) != 0)
  {
    unint64_t v15 = v14 >> 12;
    unsigned int v16 = v13 % (unsigned __int16)(v14 >> 12);
    __int16 v17 = v15 - v16;
    if (v16) {
      __int16 v18 = v17;
    }
    else {
      __int16 v18 = 0;
    }
    v13 += v18;
  }
  if (v4) {
    unsigned int v19 = 4;
  }
  else {
    unsigned int v19 = 8;
  }
  if (v19 <= v13) {
    unsigned int v19 = v13;
  }
  unsigned __int16 v20 = v19 - 1;
  unsigned int v21 = 2 * (unsigned __int16)v1;
  if ((3 * v19) >> 3 > v21) {
    unsigned int v21 = (3 * v19) >> 3;
  }
  unsigned __int8 v22 = v19 + 1;
  uint64_t v23 = *(void *)(result + 528);
  *(_WORD *)(result + 528) = v20;
  *(_WORD *)(result + 53_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v21;
  *(unsigned char *)(result + 532) = v22;
  *(unsigned char *)(result + 533) = 0;
  *(_WORD *)(result + 534) = 0;
  unint64_t v24 = ((v21 << 16) | ((unint64_t)v22 << 32) | v20) - v23;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 448), v24, memory_order_relaxed);
  }
  return result;
}

mach_vm_address_t firehose_buffer_get_logging_prefs(uint64_t a1, mach_vm_size_t *a2)
{
  kern_return_t v6;
  kern_return_t v7;
  mach_vm_address_t result;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_port_name_t v11;

  int v3 = *(_DWORD *)(a1 + 1548);
  unsigned __int16 v11 = 0;
  address = 0;
  size = 0;
  if ((v3 + 1) <= 1)
  {
LABEL_16:
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  int logging_prefs = firehose_send_get_logging_prefs(v3, &v11, &size);
  if (logging_prefs)
  {
    if (logging_prefs != 268435459)
    {
      if (logging_prefs == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      _dispatch_bug(601, logging_prefs);
    }
    goto LABEL_16;
  }
  long long v5 = (ipc_space_t *)MEMORY[0x1E4F14C48];
  int v6 = mach_vm_map(*MEMORY[0x1E4F14C48], &address, size, 0, 1, v11, 0, 0, 1, 1, 2u);
  if (v6 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v6)
  {
    _dispatch_bug(612, v6);
    address = 0;
    size = 0;
  }
  int v7 = mach_port_deallocate(*v5, v11);
  if (v7 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v7) {
    _dispatch_bug(618, v7);
  }
  uint64_t result = address;
  *a2 = size;
  return result;
}

BOOL firehose_buffer_should_send_strings(int *guard)
{
  int v1 = guard[388];
  int v7 = 0;
  if (v1 == -1) {
    return 0;
  }
  if (!v1)
  {
LABEL_10:
    int v5 = firehose_client_reconnect(guard, v1, 0);
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      int should_send_strings = firehose_send_should_send_strings(v5, &v7);
      if (!should_send_strings) {
        return v7 != 0;
      }
      if (should_send_strings != 268435459)
      {
        if (should_send_strings == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        _dispatch_bug(654, should_send_strings);
      }
    }
    return 0;
  }
  int v3 = firehose_send_should_send_strings(v1, &v7);
  if (v3)
  {
    if (v3 != 268435459)
    {
      if (v3 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      _dispatch_bug(642, v3);
    }
    goto LABEL_10;
  }
  return v7 != 0;
}

uint64_t firehose_client_reconnect(int *guard, int a2, unsigned int a3)
{
  kern_return_t v17;
  kern_return_t memory_entry_64;
  uint64_t (*v19)(int **, memory_object_size_t *);
  int v20;
  memory_object_size_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  char v26;
  kern_return_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  kern_return_t v34;
  kern_return_t v35;
  uint64_t v36;
  char v37;
  char v38;
  mach_port_name_t v39;
  kern_return_t v40;
  kern_return_t v41;
  kern_return_t v42;
  int *v43;
  memory_object_size_t size;
  mach_port_t object_handle[2];
  mach_port_options_t options;
  mach_port_name_t name;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;

  int v6 = 0;
  unint64_t v50 = *MEMORY[0x1E4F14BF8];
  *(void *)object_handle = 0;
  int v7 = guard + 391;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit(guard + 391, (unsigned int *)&v6, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v6) {
    _dispatch_unfair_lock_lock_slow((uint64_t)(guard + 391));
  }
  uint64_t v9 = guard[a3 + 388];
  if (v9 == a2 && v9 != -1)
  {
    unsigned __int16 v11 = (ipc_space_t *)MEMORY[0x1E4F14C48];
    if (a2)
    {
      uint64_t v12 = 0;
      char v13 = 1;
      do
      {
        char v14 = v13;
        unint64_t v15 = &guard[v12];
        mach_port_name_t v16 = v15[388];
        if (mach_port_destruct(*v11, v16, 0, (mach_port_context_t)guard) == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        __int16 v17 = mach_port_deallocate(*v11, v16);
        if (v17 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        if (v17) {
          _dispatch_bug(91, v17);
        }
        char v13 = 0;
        v15[388] = 0;
        uint64_t v12 = 1;
      }
      while ((v14 & 1) != 0);
    }
    unint64_t v43 = guard;
    size = 0x40000;
    memory_entry_64 = mach_make_memory_entry_64(*v11, &size, (memory_object_offset_t)guard, 4194305, &object_handle[1], 0);
    if (!(size >> 18)) {
      firehose_client_reconnect_cold_1(size);
    }
    if (memory_entry_64) {
      firehose_client_reconnect_cold_9(memory_entry_64);
    }
    if (a2
      && (unsigned int v19 = *(uint64_t (**)(int **, memory_object_size_t *))(_voucher_libtrace_hooks + 24)) != 0
      && ((unsigned __int16 v20 = v19(&v43, &size), v21 = size, !v20) ? (v22 = v43 == 0) : (v22 = 1),
          !v22 ? (uint64_t v23 = size == 0) : (uint64_t v23 = 1),
          !v23))
    {
      size_t v34 = mach_make_memory_entry_64(*v11, &size, (memory_object_offset_t)v43, 4194305, object_handle, 0);
      if (v34) {
        firehose_client_reconnect_cold_9(v34);
      }
      unint64_t v35 = mach_vm_deallocate(*v11, (mach_vm_address_t)v43, size);
      if (v35) {
        _dispatch_bug(209, v35);
      }
    }
    else
    {
      unsigned int v21 = 0;
    }
    unint64_t v24 = 0;
    size_t v25 = 1;
    do
    {
      size_t v26 = v25;
      name = 0;
      *(void *)&options.flags = 0x100000017;
      options.8 = 0uLL;
      int v27 = mach_port_construct(*v11, &options, (mach_port_context_t)guard, &name);
      if (v27)
      {
        if (v27 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        firehose_buffer_create_cold_2(v27);
      }
      size_t v25 = 0;
      *(&v48 + v24) = name;
      unint64_t v24 = 1;
    }
    while ((v26 & 1) != 0);
    uint64_t v9 = *(&v48 + a3);
    size_t v28 = v48;
    size_t v29 = v49;
    size_t v30 = firehose_send_register(guard[387], object_handle[1], 0x40000, v48, v49, guard[390], object_handle[0], v21);
    if (v30)
    {
      if (v30 != 268435459) {
        firehose_client_reconnect_cold_3(v30);
      }
      BOOL v36 = 0;
      int v37 = 1;
      do
      {
        unsigned __int16 v38 = v37;
        unint64_t v39 = *(&v48 + v36);
        if (mach_port_destruct(*v11, v39, 0, (mach_port_context_t)guard) == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        unint64_t v40 = mach_port_deallocate(*v11, v39);
        if (v40 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        if (v40) {
          _dispatch_bug(91, v40);
        }
        int v37 = 0;
        guard[v36 + 388] = -1;
        BOOL v36 = 1;
      }
      while ((v38 & 1) != 0);
      unint64_t v41 = mach_port_deallocate(*v11, object_handle[1]);
      if (v41 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (v41) {
        _dispatch_bug(91, v41);
      }
      if (object_handle[0])
      {
        unint64_t v42 = mach_port_deallocate(*v11, object_handle[0]);
        if (v42 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        if (v42) {
          _dispatch_bug(91, v42);
        }
      }
      uint64_t v9 = 0xFFFFFFFFLL;
    }
    else
    {
      guard[388] = v28;
      guard[389] = v29;
    }
  }
  size_t v31 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  size_t v32 = atomic_exchange_explicit(v7, 0, memory_order_release);
  if (v32 != v31) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v7, v32);
  }
  return v9;
}

void firehose_client_push_reply(uint64_t a1, int a2)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: firehose_push_reply should never be sent to the buffer receive port";
  qword_1E91199F0 = a2;
  __break(1u);
}

uint64_t firehose_client_push_notify_async(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
    unint64_t v4 = *(void *)v4;
  while (v4 && *(char **)(v4 + 8) != "firehose");
  firehose_client_merge_updates(*(void *)(v4 + 16), 1, a2, a3, a4 != 0, 0);
  return 0;
}

uint64_t firehose_client_merge_updates(uint64_t result, int a2, unint64_t a3, unint64_t a4, int a5, void *a6)
{
  if (a5)
  {
    char v6 = *(unsigned char *)(result + 1568);
    if (!v6) {
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(result + 1568), (unsigned __int8 *)&v6, 1u, memory_order_relaxed, memory_order_relaxed);
    }
  }
  unint64_t v7 = *(void *)(result + 464);
  do
  {
    unint64_t v8 = v7;
    if (a3 <= v7) {
      break;
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 464), &v7, a3, memory_order_relaxed, memory_order_relaxed);
  }
  while (v7 != v8);
  if (a3 <= v8) {
    unsigned __int16 v9 = 0;
  }
  else {
    unsigned __int16 v9 = a3 - v8;
  }
  unint64_t v10 = *(void *)(result + 488);
  do
  {
    unint64_t v11 = v10;
    if (a4 <= v10) {
      break;
    }
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 488), &v10, a4, memory_order_relaxed, memory_order_relaxed);
  }
  while (v10 != v11);
  if (a4 <= v11) {
    int v12 = 0;
  }
  else {
    int v12 = a4 - v11;
  }
  if (v9 | (unsigned __int16)v12)
  {
    unint64_t v13 = *(void *)(result + 256);
    unint64_t v14 = v13;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 256), &v14, ((unint64_t)(unsigned __int16)(v9 + WORD1(v13)) << 16) | ((unint64_t)(v12 + HIWORD(v13)) << 48) | v13 & 0xFFFF0000FFFFLL, memory_order_relaxed, memory_order_relaxed);
    if (v14 != v13)
    {
      unint64_t v15 = v14;
      do
      {
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(result + 256), &v15, ((unint64_t)(unsigned __int16)(v9 + WORD1(v14)) << 16) | ((unint64_t)(v12+ HIWORD(v14)) << 48) | v14 & 0xFFFF0000FFFFLL, memory_order_relaxed, memory_order_relaxed);
        BOOL v16 = v15 == v14;
        unint64_t v14 = v15;
      }
      while (!v16);
    }
    unint64_t v17 = v9 | ((unint64_t)(unsigned __int16)v12 << 16);
    unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 448), v17, memory_order_release);
    if (a6) {
      *a6 = add_explicit + v17;
    }
    if (a2)
    {
      if ((_WORD)v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 496), 1uLL, memory_order_relaxed);
      }
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 472), 1uLL, memory_order_relaxed);
      }
    }
  }
  else if (a6)
  {
    *a6 = *(void *)(result + 448);
  }
  return result;
}

uint64_t firehose_buffer_update_limits(uint64_t a1)
{
  int v2 = 0;
  int v3 = (atomic_uint *)(a1 + 536);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 536), (unsigned int *)&v2, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
  if (v2) {
    _dispatch_unfair_lock_lock_slow(a1 + 536);
  }
  uint64_t result = firehose_buffer_update_limits_unlocked(a1);
  unsigned int v6 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  unsigned int v7 = atomic_exchange_explicit(v3, 0, memory_order_release);
  if (v7 != v6)
  {
    return _dispatch_unfair_lock_unlock_slow((uint64_t)v3, v7);
  }
  return result;
}

void firehose_buffer_ring_enqueue(int *guard, unsigned int a2)
{
  unint64_t v3 = HIBYTE(guard[1024 * (unint64_t)a2 + 1]) & 2;
  unint64_t v4 = guard + 32;
  uint64_t v5 = 384;
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) != 0)
  {
    unsigned int v6 = guard + 96;
  }
  else
  {
    uint64_t v5 = 320;
    unsigned int v6 = guard + 80;
  }
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) == 0) {
    unint64_t v4 = guard;
  }
  uint64_t v7 = *(unsigned __int16 *)((char *)guard + v5);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned __int16 v9 = (atomic_ushort *)((char *)guard + v5);
  while (1)
  {
LABEL_7:
    while (1)
    {
      uint64_t v10 = v7;
      int v11 = v7 & 0xFFFFFFC0;
      *(void *)(StatusReg + 976) = v6;
      uint64_t v12 = v7 & 0x3F;
      int v13 = v7 & 0xFFFFFFC0;
      atomic_compare_exchange_strong_explicit((atomic_ushort *volatile)v4 + v12, (unsigned __int16 *)&v13, v7 & 0xFFC0 | a2, memory_order_relaxed, memory_order_relaxed);
      if (v13 == (v7 & 0xFFC0)) {
        break;
      }
      *(void *)(StatusReg + 976) = 0;
      uint64_t v7 = *(unsigned __int16 *)((char *)guard + v5);
      if (v7 == (unsigned __int16)v10)
      {
        int v14 = -1024;
        while (*((unsigned __int16 *)v4 + v12) != (unsigned __int16)v11)
        {
          uint64_t v24 = v10;
          uint64_t v29 = v12;
          int v27 = v11;
          size_t v28 = v9;
          unint64_t v25 = StatusReg;
          size_t v26 = v4;
          uint64_t v23 = v5;
          size_t v30 = v6;
          unsigned int v22 = a2;
          int v15 = v14;
          if (v14 < 0) {
            __yield();
          }
          else {
            _pthread_yield_to_enqueuer_4dispatch();
          }
          uint64_t v5 = v23;
          uint64_t v10 = v24;
          uint64_t v7 = *(unsigned __int16 *)((char *)guard + v23);
          int v14 = v15 + 1;
          a2 = v22;
          uint64_t v12 = v29;
          unsigned int v6 = v30;
          unint64_t StatusReg = v25;
          unint64_t v4 = v26;
          unsigned __int16 v9 = v28;
          int v11 = v27;
          if (v7 != (unsigned __int16)v24) {
            goto LABEL_7;
          }
        }
        uint64_t v7 = v10;
      }
    }
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int16 *)&v7, v7 + 1, memory_order_release, memory_order_relaxed);
    if (v7 == (unsigned __int16)v10) {
      break;
    }
    *((_WORD *)v4 + v12) = v11;
    *(void *)(StatusReg + 976) = 0;
  }
  *(void *)(StatusReg + 976) = 0;
  mach_port_context_t v16 = (mach_port_context_t)guard + 2 * v3;
  int v17 = *(_DWORD *)(v16 + 1552);
  if (v17 == -1) {
    return;
  }
  if (v17)
  {
    int v18 = firehose_send_push_async(*(_DWORD *)(v16 + 1552), 0, 0);
    if (v18 <= 268435458)
    {
      if (!v18) {
        return;
      }
      if (v18 == -301)
      {
        qword_1E91199C0 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1E91199F0 = -301;
        __break(1u);
        goto LABEL_40;
      }
      goto LABEL_27;
    }
    if (v18 != 268435459)
    {
      if (v18 == 268435460) {
        return;
      }
LABEL_27:
      _dispatch_bug(476, v18);
    }
  }
  mach_port_t v19 = firehose_client_reconnect(guard, v17, v3 >> 1);
  if (v19 - 1 <= 0xFFFFFFFD)
  {
    int v20 = firehose_send_push_async(v19, 0, 0);
    if ((v20 - 268435459) >= 2 && v20 != 0)
    {
      if (v20 != -301)
      {
        _dispatch_bug(488, v20);
        return;
      }
LABEL_40:
      qword_1E91199C0 = (uint64_t)"MIG_REPLY_MISMATCH";
      qword_1E91199F0 = -301;
      __break(1u);
    }
  }
}

int *firehose_buffer_force_connect(int *result)
{
  if (!result[388]) {
    return (int *)firehose_client_reconnect(result, 0, 0);
  }
  return result;
}

unint64_t firehose_buffer_tracepoint_reserve_slow(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v6 = a2[14] & 1;
  firehose_drain_notifications_once(a1);
  unint64_t v7 = *(void *)(a1 + 448);
  unint64_t v78 = v7;
  while (*(_WORD *)((unint64_t)&v78 | (2 * v6)))
  {
    unint64_t v77 = v7;
    --*(_WORD *)((unint64_t)&v77 | (2 * v6));
    unint64_t v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 448), &v8, v77, memory_order_acquire, memory_order_acquire);
    unint64_t v78 = v8;
    BOOL v9 = v8 == v7;
    unint64_t v7 = v8;
    if (v9)
    {
      unint64_t v10 = v77;
      uint64_t v11 = a1 + 128;
      uint64_t v12 = (atomic_uint *)(a1 + 536);
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (2)
      {
        for (unint64_t i = *(void *)(a1 + 256); ; unint64_t i = v19)
        {
          unint64_t v15 = HIDWORD(i);
          if ((unsigned __int16)i == WORD1(i))
          {
            if (HIWORD(i) == WORD2(i))
            {
              int v71 = v6;
              int v43 = 0;
              char v44 = BYTE4(v10);
              unint64_t v45 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              int v46 = v12;
              atomic_compare_exchange_strong_explicit(v12, (unsigned int *)&v43, *(_DWORD *)(v45 + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
              if (v43) {
                _dispatch_unfair_lock_lock_slow((uint64_t)v12);
              }
              uint64_t v47 = *(void *)(a1 + 520);
              uint64_t v48 = v47 | (-1 << v44);
              if (v48 == -1)
              {
                unsigned int v26 = 0;
              }
              else
              {
                unsigned int v49 = __clz(__rbit64(~v48));
                *(void *)(a1 + 52_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v47 | (1 << v49);
                unsigned int v26 = v49;
              }
              unsigned int v50 = *(_DWORD *)(v45 + 24) & 0xFFFFFFFC;
              unsigned int v51 = atomic_exchange_explicit(v46, 0, memory_order_release);
              if (v51 == v50)
              {
                if (v26) {
                  goto LABEL_41;
                }
              }
              else
              {
                _dispatch_unfair_lock_unlock_slow((uint64_t)v46, v51);
                if (v26) {
                  goto LABEL_41;
                }
              }
              if ((a2[14] & 4) != 0)
              {
                char v41 = 1;
                goto LABEL_58;
              }
              unsigned int v26 = 0;
              unint64_t v52 = 0x10000;
              if (!v71) {
                unint64_t v52 = 1;
              }
              atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 448), v52, memory_order_relaxed);
              goto LABEL_41;
            }
            LODWORD(v17) = HIDWORD(i) + 1;
            unsigned __int16 v16 = i;
          }
          else
          {
            unsigned __int16 v16 = i + 1;
            unint64_t v17 = HIDWORD(i);
          }
          unint64_t v18 = v16 | ((unint64_t)(unsigned __int16)v17 << 32) | i & 0xFFFF0000FFFF0000;
          unint64_t v19 = i;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 256), &v19, v18, memory_order_relaxed, memory_order_relaxed);
          if (v19 == i) {
            break;
          }
        }
        if ((unsigned __int16)v17 == WORD2(i)) {
          LOBYTE(v2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = i;
        }
        else {
          unint64_t v20 = HIDWORD(i);
        }
        if ((unsigned __int16)v17 == WORD2(i)) {
          uint64_t v21 = a1;
        }
        else {
          uint64_t v21 = v11;
        }
        uint64_t v22 = v20 & 0x3F;
        __int16 v23 = *(_WORD *)(v21 + 2 * v22);
        unsigned int v24 = v23 & 0x3F;
        if ((v23 & 0x3F) == 0)
        {
          int v35 = -1024;
          do
          {
            if (v35 < 0)
            {
              __yield();
            }
            else
            {
              uint64_t v64 = v11;
              unint64_t v68 = v12;
              unint64_t v36 = v10;
              unint64_t v73 = StatusReg;
              unint64_t v60 = v15;
              uint64_t v62 = v22;
              uint64_t v63 = v21;
              int v61 = v17;
              MEMORY[0x18C121F20](0, 4, (v35 + 1));
              uint64_t v22 = v62;
              uint64_t v21 = v63;
              LODWORD(v17) = v61;
              unint64_t v15 = v60;
              uint64_t v12 = v68;
              unint64_t StatusReg = v73;
              uint64_t v11 = v64;
              unint64_t v10 = v36;
            }
            __int16 v23 = *(_WORD *)(v21 + 2 * v22);
            ++v35;
            unsigned int v24 = v23 & 0x3F;
          }
          while ((v23 & 0x3F) == 0);
        }
        int v25 = (unsigned __int16)v17;
        unsigned int v26 = v24;
        unint64_t v27 = a1 + ((unint64_t)v24 << 12);
        if (v25 == (unsigned __int16)v15 && *(unsigned char *)(v27 + 6) == 3) {
          atomic_fetch_and_explicit((atomic_ullong *volatile)(a1 + 456), ~(1 << v24), memory_order_relaxed);
        }
        *(void *)unint64_t v27 = 0x100000000000000;
        *(_WORD *)(v21 + 2 * v22) = (v23 & 0xFFC0) + 64;
        if (v24 >= BYTE4(v10))
        {
          int v28 = 0;
          atomic_compare_exchange_strong_explicit(v12, (unsigned int *)&v28, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
          if (v28)
          {
            uint64_t v65 = v11;
            uint64_t v69 = v6;
            int v37 = v12;
            unint64_t v38 = v10;
            unint64_t v74 = StatusReg;
            _dispatch_unfair_lock_lock_slow((uint64_t)v12);
            uint64_t v11 = v65;
            unint64_t v10 = v38;
            uint64_t v12 = v37;
            uint64_t v6 = v69;
            unint64_t StatusReg = v74;
          }
          if (*(unsigned __int8 *)(a1 + 532) <= v26)
          {
            unint64_t v29 = *(void *)(a1 + 520) & ~(1 << v26);
            *(void *)(a1 + 52_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v29;
            if (((v29 >> (v26 & 0x3C)) & 0xF) == 0)
            {
              size_t v30 = (void *)(a1 + ((unint64_t)(v26 & 0x3C) << 12));
              uint64_t v67 = v12;
              unint64_t v72 = StatusReg;
              unint64_t v31 = v10;
              uint64_t v32 = v11;
              madvise(v30, 0x4000uLL, 5);
              uint64_t v12 = v67;
              unint64_t StatusReg = v72;
              uint64_t v11 = v32;
              unint64_t v10 = v31;
            }
            unsigned int v26 = 0;
          }
          unsigned int v33 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
          unsigned int v34 = atomic_exchange_explicit(v12, 0, memory_order_release);
          if (v34 != v33)
          {
            uint64_t v66 = v11;
            uint64_t v70 = v6;
            unint64_t v39 = v12;
            unint64_t v40 = v10;
            unint64_t v75 = StatusReg;
            _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v34);
            uint64_t v11 = v66;
            unint64_t v10 = v40;
            uint64_t v12 = v39;
            uint64_t v6 = v70;
            unint64_t StatusReg = v75;
          }
          if (!v26) {
            continue;
          }
        }
        goto LABEL_41;
      }
    }
  }
  unsigned int v26 = 0;
  char v41 = 0;
  if ((a2[14] & 4) == 0)
  {
LABEL_41:
    return firehose_buffer_stream_chunk_install(a1, (uint64_t)a2, a3, v26);
  }
LABEL_58:
  char v76 = v41;
  unint64_t v53 = a1 + ((unint64_t)a2[12] << 7);
  unint64_t v54 = (atomic_ullong *)(v53 + 640);
  atomic_ullong v55 = *(void *)(v53 + 640);
  if ((v55 & 0x400000000000) != 0)
  {
    unint64_t v58 = v55 & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000;
    for (j = *(void *)(v53 + 640); ; unint64_t v58 = j & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000)
    {
      atomic_compare_exchange_strong_explicit(v54, (unint64_t *)&j, v58, memory_order_relaxed, memory_order_relaxed);
      if (j == v55) {
        break;
      }
      atomic_ullong v55 = j;
    }
  }
  else
  {
    *(void *)(v53 + 648) = mach_continuous_time();
    atomic_ullong v55 = *v54;
    unint64_t v56 = *v54 & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000;
    for (k = *v54; ; unint64_t v56 = k & 0xFFFF3FFFFFFFFFFDLL | 0xC00000000000)
    {
      atomic_compare_exchange_strong_explicit(v54, (unint64_t *)&k, v56, memory_order_release, memory_order_relaxed);
      if (k == v55) {
        break;
      }
      atomic_ullong v55 = k;
    }
  }
  if ((v55 & 2) != 0) {
    _dispatch_gate_broadcast_slow(v53 + 640, v55);
  }
  a2[13] = v76;

  return firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(a1, (uint64_t)a2, a3);
}

BOOL firehose_drain_notifications_once(uint64_t a1)
{
  mach_msg_return_t v2;
  mach_msg_return_t v3;
  unint64_t StatusReg;
  char v5;
  int v6;
  void v8[3];
  unsigned char msg[124];
  _DWORD v10[8];
  int v11;
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x1E4F14BF8];
  memset(msg, 0, sizeof(msg));
  int v2 = mach_msg((mach_msg_header_t *)msg, 67109126, 0, 0x7Cu, *(_DWORD *)(a1 + 1560), 0, 0);
  unint64_t v3 = v2;
  if (v2)
  {
    if (v2 != 268451843) {
      firehose_drain_notifications_once_cold_2(v2);
    }
  }
  else
  {
    v8[1] = "firehose";
    v8[2] = a1;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v8[0] = *(void *)(StatusReg + 184);
    *(void *)(StatusReg + 184) = v8;
    uint64_t v5 = msg[0];
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
    if (!firehoseReply_server(msg, (uint64_t)v10)) {
      goto LABEL_12;
    }
    if (v10[0] >= 0) {
      uint64_t v6 = v11;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!v6 && (v5 & 0x1F) == 0x12) {
      firehose_drain_notifications_once_cold_1((uint64_t)v10);
    }
    if (v6 != -305 && v6)
    {
LABEL_12:
      *(_DWORD *)&msg[8] = 0;
      mach_msg_destroy((mach_msg_header_t *)msg);
    }
    *(void *)(StatusReg + 184) = v8[0];
  }
  return v3 == 0;
}

unint64_t firehose_buffer_stream_chunk_install(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = (atomic_ullong *)(a1 + (v5 << 7) + 640);
  if (!a4)
  {
    unint64_t v18 = *v6;
    if ((*v6 & 0x400000000000) != 0)
    {
      uint64_t v48 = (v18 >> 40) & 0x3F;
      if (v48 >= 0x3E) {
        LODWORD(v48) = 62;
      }
      unint64_t v49 = v18 & 0xFFFF000000000000 | ((unint64_t)((v48 + 1) | 0x40u) << 40);
      unint64_t v50 = *v6;
      atomic_compare_exchange_strong_explicit(v6, &v50, v49, memory_order_relaxed, memory_order_relaxed);
      if (v50 != v18)
      {
        unint64_t v51 = v50;
        do
        {
          unint64_t v19 = 0;
          unint64_t v18 = v50;
          uint64_t v52 = (v50 >> 40) & 0x3F;
          if (v52 >= 0x3E) {
            LODWORD(v52) = 62;
          }
          atomic_compare_exchange_strong_explicit(v6, &v51, v50 & 0xFFFF000000000000 | ((unint64_t)((v52 + 1) | 0x40u) << 40), memory_order_relaxed, memory_order_relaxed);
          BOOL v41 = v51 == v50;
          unint64_t v50 = v51;
        }
        while (!v41);
        goto LABEL_34;
      }
    }
    else
    {
      *(void *)(a1 + (v5 << 7) + 648) = mach_continuous_time();
      unint64_t v18 = *v6;
      uint64_t v36 = ((unint64_t)*v6 >> 40) & 0x3F;
      if (v36 >= 0x3E) {
        LODWORD(v36) = 62;
      }
      unint64_t v37 = *v6 & 0xFFFF000000000000 | ((unint64_t)((v36 + 1) | 0x40u) << 40);
      unint64_t v38 = *v6;
      atomic_compare_exchange_strong_explicit(v6, &v38, v37, memory_order_release, memory_order_relaxed);
      if (v38 != v18)
      {
        unint64_t v39 = v38;
        do
        {
          unint64_t v19 = 0;
          unint64_t v18 = v38;
          uint64_t v40 = (v38 >> 40) & 0x3F;
          if (v40 >= 0x3E) {
            LODWORD(v4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 62;
          }
          atomic_compare_exchange_strong_explicit(v6, &v39, v38 & 0xFFFF000000000000 | ((unint64_t)((v40 + 1) | 0x40u) << 40), memory_order_release, memory_order_relaxed);
          BOOL v41 = v39 == v38;
          unint64_t v38 = v39;
        }
        while (!v41);
        goto LABEL_34;
      }
    }
    unint64_t v19 = 0;
    goto LABEL_34;
  }
  uint64_t v9 = a4;
  unint64_t v10 = a1 + ((unint64_t)a4 << 12);
  if (*(void *)v10) {
    bzero((void *)(v10 + 16), 0xFF0uLL);
  }
  if (*(unsigned char *)(a2 + 12) == 3) {
    atomic_fetch_or_explicit((atomic_ullong *volatile)(a1 + 456), 1 << v9, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
  uint64_t v12 = v9 << 32;
  if ((*v6 & 0x3F0000000000) != 0) {
    goto LABEL_18;
  }
  if (*(void *)a2 >= 0x1000000000uLL) {
    uint64_t v13 = *(void *)a2 - 0x1000000000;
  }
  else {
    uint64_t v13 = 0;
  }
  *(void *)(v10 + 8) = v13;
  uint64_t v14 = *(unsigned __int16 *)(a2 + 8);
  __int16 v15 = v14 + 24;
  if ((v14 & 7) != 0) {
    __int16 v15 = (v14 & 0xFFF8) + 32;
  }
  __int16 v16 = v15 + 16;
  unsigned __int16 v17 = 4096 - *(_WORD *)(a2 + 10);
  *(void *)(v10 + 32) = (*(void *)a2 - v13) | (v14 << 48);
  *(void *)(v10 + 24) = v11;
  char v55 = *(unsigned char *)(a2 + 12);
  char v53 = 2 * (*(unsigned char *)(a2 + 14) & 3);
  *(_WORD *)unint64_t v10 = v16;
  *(_WORD *)(v10 + 2) = v17;
  *(unsigned char *)(v10 + 4) = 1;
  *(unsigned char *)(v10 + 5) = 0;
  *(unsigned char *)(v10 + 6) = v55;
  *(unsigned char *)(v10 + 7) = v53;
  if (a3) {
    *a3 = v10 + v17;
  }
  unint64_t v18 = *v6;
  if ((*v6 & 0x3F0000000000) != 0)
  {
LABEL_18:
    atomic_load_explicit(v6, memory_order_acquire);
    uint64_t v21 = a1 + (v5 << 7);
    unint64_t v22 = *(void *)(v21 + 648);
    *(void *)(v21 + 648) = 0;
    uint64_t v23 = mach_continuous_time();
    unint64_t v24 = *(void *)a2;
    if (*(void *)a2 >= v22) {
      unint64_t v24 = v22;
    }
    BOOL v25 = v24 >= 0x1000000000;
    unint64_t v26 = v24 - 0x1000000000;
    if (!v25) {
      unint64_t v26 = 0;
    }
    *(void *)(v10 + 8) = v26;
    unint64_t v27 = *(void *)a2;
    if ((*(void *)a2 - v26) >> 48)
    {
      unint64_t v26 = v27 - 0x1000000000;
      *(void *)(v10 + 8) = v27 - 0x1000000000;
    }
    unint64_t v28 = v22 - v26;
    if ((v22 - v26) >> 48) {
      unint64_t v28 = *(void *)a2 - v26;
    }
    *(void *)(v10 + 32) = v28 | 0x18000000000000;
    *(void *)(v10 + 24) = v11;
    uint64_t v29 = *(unsigned __int16 *)(a2 + 8);
    __int16 v30 = v29 + 24;
    if ((v29 & 7) != 0) {
      __int16 v30 = (v29 & 0xFFF8) + 32;
    }
    __int16 v31 = v30 + 64;
    unsigned __int16 v32 = 4096 - *(_WORD *)(a2 + 10);
    *(void *)(v10 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = (*(void *)a2 - v26) | (v29 << 48);
    *(void *)(v10 + 72) = v11;
    char v56 = *(unsigned char *)(a2 + 12);
    char v54 = 2 * (*(unsigned char *)(a2 + 14) & 3);
    *(_WORD *)unint64_t v10 = v31;
    *(_WORD *)(v10 + 2) = v32;
    *(unsigned char *)(v10 + 4) = 1;
    *(unsigned char *)(v10 + 5) = 0;
    *(unsigned char *)(v10 + 6) = v56;
    *(unsigned char *)(v10 + 7) = v54;
    if (a3) {
      *a3 = v10 + v32;
    }
    unint64_t v19 = v10 + 64;
    unint64_t v18 = *v6;
    unint64_t v33 = (*v6 & 0xFFFF000000000000 | ((unint64_t)v9 << 32)) + 0x1000000000000;
    for (atomic_ullong i = *v6; ; v33 = (i & 0xFFFF000000000000 | v12) + 0x1000000000000)
    {
      atomic_compare_exchange_strong_explicit(v6, (unint64_t *)&i, v33, memory_order_release, memory_order_relaxed);
      if (i == v18) {
        break;
      }
      unint64_t v18 = i;
    }
    *(void *)(v10 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v22;
    *(void *)(v10 + 48) = v23;
    *(void *)(v10 + 56) = (v18 >> 40) & 0x3F;
    atomic_store(((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | 7, (unint64_t *)(v10 + 16));
  }
  else
  {
    unint64_t v19 = v10 + 16;
    atomic_ullong v20 = *v6;
    while (1)
    {
      atomic_compare_exchange_strong_explicit(v6, (unint64_t *)&v20, (v18 & 0xFFFF000000000000 | v12) + 0x1000000000000, memory_order_release, memory_order_relaxed);
      if (v20 == v18) {
        break;
      }
      unint64_t v18 = v20;
      if ((v20 & 0x3F0000000000) != 0) {
        goto LABEL_18;
      }
    }
  }
LABEL_34:
  if ((v18 & 3) != 0)
  {
    uint64_t v42 = (uint64_t)v6;
    unint64_t v43 = v19;
    _dispatch_gate_broadcast_slow(v42, v18);
    unint64_t v19 = v43;
  }
  if ((~v18 & 0xFF00000000) == 0)
  {
    unint64_t v44 = v19;
    firehose_buffer_update_limits(a1);
    unint64_t v19 = v44;
  }
  if (*(unsigned char *)(a1 + 1568) == 1)
  {
    int v45 = 1;
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 1568), (unsigned __int8 *)&v45, 2u, memory_order_relaxed, memory_order_relaxed);
    if (v45 == 1)
    {
      uint64_t v46 = a1;
      unint64_t v47 = v19;
      firehose_client_start_quarantine(v46);
      return v47;
    }
  }
  return v19;
}

uint64_t firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(uint64_t guard, uint64_t a2, void *a3)
{
  uint64_t v6 = *(unsigned char *)(a2 + 14) & 1;
  int v7 = -6;
  do
    BOOL v8 = __CFADD__(v7++, 1);
  while (!v8 && firehose_drain_notifications_once(guard));
  unint64_t v85 = 0;
  if (*(unsigned char *)(a2 + 13))
  {
    unint64_t v9 = *(unsigned __int8 *)(guard + 452);
LABEL_6:
    uint64_t v10 = guard + 128;
    uint64_t v11 = (atomic_uint *)(guard + 536);
    uint64_t v12 = -1 << v9;
    mach_port_context_t v13 = guard + 4 * v6 + 1552;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_7:
    while (2)
    {
      for (unint64_t i = *(void *)(guard + 256); ; unint64_t i = v20)
      {
        unint64_t v16 = HIDWORD(i);
        if ((unsigned __int16)i == WORD1(i))
        {
          if (HIWORD(i) == WORD2(i))
          {
            uint64_t v52 = (_DWORD *)v13;
            uint64_t v66 = v10;
            uint64_t v71 = v12;
            unint64_t v61 = v9;
            int v34 = 0;
            unint64_t v75 = StatusReg;
            unint64_t v81 = v11;
            atomic_compare_exchange_strong_explicit(v11, (unsigned int *)&v34, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
            if (v34) {
              _dispatch_unfair_lock_lock_slow((uint64_t)v11);
            }
            uint64_t v35 = *(void *)(guard + 520);
            if ((v35 | v71) == 0xFFFFFFFFFFFFFFFFLL)
            {
              int v56 = 0;
            }
            else
            {
              int v36 = __clz(__rbit64(~(v35 | v71)));
              *(void *)(guard + 52_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v35 | (1 << v36);
              int v56 = v36;
            }
            unsigned int v37 = *(_DWORD *)(v75 + 24) & 0xFFFFFFFC;
            unsigned int v38 = atomic_exchange_explicit(v81, 0, memory_order_release);
            if (v38 != v37) {
              _dispatch_unfair_lock_unlock_slow((uint64_t)v81, v38);
            }
            LODWORD(v24) = v56;
            if (v56) {
              return firehose_buffer_stream_chunk_install(guard, a2, a3, v24);
            }
            if ((*(unsigned char *)(a2 + 14) & 2) != 0) {
              __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v6, 0);
            }
            else {
              firehose_client_send_push_and_wait(guard, v6, 0);
            }
            mach_port_context_t v13 = (mach_port_context_t)v52;
            unint64_t StatusReg = v75;
            uint64_t v11 = v81;
            unint64_t v9 = v61;
            uint64_t v10 = v66;
            uint64_t v12 = v71;
            if (*v52 == -1)
            {
              LODWORD(v24) = 0;
              return firehose_buffer_stream_chunk_install(guard, a2, a3, v24);
            }
            goto LABEL_7;
          }
          LODWORD(v18) = HIDWORD(i) + 1;
          unsigned __int16 v17 = i;
        }
        else
        {
          unsigned __int16 v17 = i + 1;
          unint64_t v18 = HIDWORD(i);
        }
        unint64_t v19 = v17 | ((unint64_t)(unsigned __int16)v18 << 32) | i & 0xFFFF0000FFFF0000;
        unint64_t v20 = i;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(guard + 256), &v20, v19, memory_order_relaxed, memory_order_relaxed);
        if (v20 == i) {
          break;
        }
      }
      if ((unsigned __int16)v18 == WORD2(i))
      {
        uint64_t v21 = guard;
      }
      else
      {
        i >>= 32;
        uint64_t v21 = v10;
      }
      uint64_t v22 = i & 0x3F;
      __int16 v23 = *(_WORD *)(v21 + 2 * v22);
      uint64_t v24 = v23 & 0x3F;
      if ((v23 & 0x3F) == 0)
      {
        int v32 = -1024;
        do
        {
          if (v32 < 0)
          {
            __yield();
          }
          else
          {
            int v33 = v32;
            unint64_t v74 = StatusReg;
            unsigned __int16 v80 = v11;
            uint64_t v55 = v22;
            unint64_t v60 = v9;
            uint64_t v65 = v10;
            uint64_t v70 = v12;
            mach_port_context_t v51 = v13;
            uint64_t v48 = v21;
            unint64_t v49 = v16;
            int v50 = v18;
            MEMORY[0x18C121F20](0, 4, (v32 + 1), v24);
            int v32 = v33;
            mach_port_context_t v13 = v51;
            uint64_t v22 = v55;
            uint64_t v21 = v48;
            unint64_t v16 = v49;
            LODWORD(v18) = v50;
            uint64_t v12 = v70;
            unint64_t StatusReg = v74;
            unint64_t v9 = v60;
            uint64_t v10 = v65;
            uint64_t v11 = v80;
          }
          __int16 v23 = *(_WORD *)(v21 + 2 * v22);
          ++v32;
          uint64_t v24 = v23 & 0x3F;
        }
        while ((v23 & 0x3F) == 0);
      }
      int v25 = (unsigned __int16)v18;
      unint64_t v26 = guard + ((unint64_t)v24 << 12);
      if (v25 == (unsigned __int16)v16 && *(unsigned char *)(v26 + 6) == 3) {
        atomic_fetch_and_explicit((atomic_ullong *volatile)(guard + 456), ~(1 << v24), memory_order_relaxed);
      }
      *(void *)unint64_t v26 = 0x100000000000000;
      *(_WORD *)(v21 + 2 * v22) = (v23 & 0xFFC0) + 64;
      if (v24 >= v9)
      {
        int v27 = 0;
        atomic_compare_exchange_strong_explicit(v11, (unsigned int *)&v27, *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC, memory_order_acquire, memory_order_acquire);
        if (v27)
        {
          unint64_t v76 = StatusReg;
          char v82 = v11;
          int v57 = v24;
          unint64_t v62 = v9;
          uint64_t v67 = v10;
          uint64_t v39 = v12;
          mach_port_context_t v53 = v13;
          _dispatch_unfair_lock_lock_slow((uint64_t)v11);
          unint64_t StatusReg = v76;
          uint64_t v11 = v82;
          mach_port_context_t v13 = v53;
          LODWORD(v24) = v57;
          uint64_t v12 = v39;
          unint64_t v9 = v62;
          uint64_t v10 = v67;
        }
        if (*(unsigned __int8 *)(guard + 532) <= v24)
        {
          unint64_t v28 = *(void *)(guard + 520) & ~(1 << v24);
          *(void *)(guard + 52_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v28;
          if (((v28 >> (v24 & 0x3C)) & 0xF) == 0)
          {
            unint64_t v73 = StatusReg;
            uint64_t v79 = v11;
            unint64_t v59 = v9;
            uint64_t v64 = v10;
            uint64_t v69 = v12;
            mach_port_context_t v29 = v13;
            madvise((void *)(guard + ((unint64_t)(v24 & 0x3C) << 12)), 0x4000uLL, 5);
            uint64_t v12 = v69;
            unint64_t StatusReg = v73;
            mach_port_context_t v13 = v29;
            unint64_t v9 = v59;
            uint64_t v10 = v64;
            uint64_t v11 = v79;
          }
          LODWORD(v24) = 0;
        }
        unsigned int v30 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        unsigned int v31 = atomic_exchange_explicit(v11, 0, memory_order_release);
        if (v31 != v30)
        {
          unint64_t v77 = StatusReg;
          uint64_t v83 = v11;
          int v58 = v24;
          unint64_t v63 = v9;
          uint64_t v68 = v10;
          uint64_t v40 = v12;
          mach_port_context_t v54 = v13;
          _dispatch_unfair_lock_unlock_slow((uint64_t)v11, v31);
          unint64_t StatusReg = v77;
          uint64_t v11 = v83;
          mach_port_context_t v13 = v54;
          LODWORD(v24) = v58;
          uint64_t v12 = v40;
          unint64_t v9 = v63;
          uint64_t v10 = v68;
        }
        if (!v24) {
          continue;
        }
      }
      return firehose_buffer_stream_chunk_install(guard, a2, a3, v24);
    }
  }
  else
  {
    unint64_t v85 = *(void *)(guard + 448);
    mach_port_context_t v42 = guard + 4 * v6 + 1552;
    unint64_t v43 = (_WORD *)((unint64_t)&v87 | (2 * v6));
    unint64_t v44 = (_WORD *)((unint64_t)&v86 | (2 * v6));
    do
    {
      unint64_t v45 = v85;
      unint64_t v87 = v85;
      while (*v43)
      {
        unint64_t v86 = v45;
        --*v44;
        unint64_t v46 = v45;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(guard + 448), &v46, v86, memory_order_acquire, memory_order_acquire);
        unint64_t v87 = v46;
        BOOL v47 = v46 == v45;
        unint64_t v45 = v46;
        if (v47)
        {
          unint64_t v85 = v86;
          unint64_t v9 = HIDWORD(v86);
          goto LABEL_6;
        }
      }
      unint64_t v78 = v43;
      uint64_t v84 = v44;
      unint64_t v72 = (_DWORD *)v42;
      if ((*(unsigned char *)(a2 + 14) & 2) != 0) {
        __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v6, &v85);
      }
      else {
        firehose_client_send_push_and_wait(guard, v6, &v85);
      }
      uint64_t result = 0;
      mach_port_context_t v42 = (mach_port_context_t)v72;
      unint64_t v43 = v78;
      unint64_t v44 = v84;
    }
    while (*v72 != -1);
  }
  return result;
}

void firehose_client_start_quarantine(uint64_t a1)
{
  if (*(uint64_t *)_voucher_libtrace_hooks < 5) {
    return;
  }
  int v1 = *(void (**)(void))(_voucher_libtrace_hooks + 40);
  if (!v1) {
    return;
  }
  v1();
  *(unsigned char *)(a1 + 1569) = 1;
  uint64_t v3 = *(void *)(a1 + 768);
  if ((~v3 & 0xFF00000000) == 0 || BYTE4(*(void *)(a1 + 768)) == 0)
  {
    if (!*(_DWORD *)(a1 + 1552)) {
      firehose_client_reconnect((int *)a1, 0, 0);
    }
  }
  else
  {
    uint64_t v5 = (atomic_ullong *)(a1 + ((unint64_t)BYTE4(v3) << 12));
    unint64_t v6 = *v5;
    if ((*v5 & 0x1FF000000000000) == 0x1000000000000)
    {
      unint64_t v7 = v5[1];
      atomic_ullong v8 = *v5;
      while (1)
      {
        BOOL v10 = (unsigned __int16)v6 + 25 > WORD1(v6) || v7 < 0xFFFF000000000000;
        unint64_t v11 = v6 + 0x100000020;
        unint64_t v12 = (v6 + 0x100000020) >> 16;
        unint64_t v13 = ((unsigned __int16)(v6 + 32) + 40 > (unsigned __int16)v12) | ((v6 + 0x100000020) >> 56);
        if (v10)
        {
          unint64_t v11 = v6;
          unint64_t v13 = HIBYTE(v6) | 1;
          unint64_t v12 = v6 >> 16;
        }
        atomic_compare_exchange_strong_explicit(v5, (unint64_t *)&v8, (v12 << 16) | v11 & 0xFFFFFF00000000 | (v13 << 56) | (unsigned __int16)v11, memory_order_relaxed, memory_order_relaxed);
        if (v8 == v6) {
          break;
        }
        unint64_t v6 = v8;
        if ((v8 & 0x1FF000000000000) != 0x1000000000000) {
          goto LABEL_26;
        }
      }
      if (v10)
      {
        if ((v11 & 0xFF00000000) == 0) {
          firehose_buffer_ring_enqueue((int *)a1, BYTE4(v3));
        }
      }
      else if ((_WORD)v6)
      {
        qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
        qword_1E91199F0 = (unsigned __int16)v6;
        __break(1u);
        goto LABEL_81;
      }
    }
LABEL_26:
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 768), &v14, v3 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a1 + 640);
  if ((~v3 & 0xFF00000000) == 0 || !BYTE4(*(void *)(a1 + 640)))
  {
    if (!*(_DWORD *)(a1 + 1552)) {
      firehose_client_reconnect((int *)a1, 0, 0);
    }
    goto LABEL_55;
  }
  __int16 v15 = (atomic_ullong *)(a1 + ((unint64_t)BYTE4(v3) << 12));
  unint64_t v6 = *v15;
  if (*v15) {
    BOOL v16 = (*v15 & 0x1FF000000000000) == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    unint64_t v17 = v15[1];
    atomic_ullong v18 = *v15;
    while (1)
    {
      BOOL v20 = (unsigned __int16)v6 + 25 > WORD1(v6) || v17 < 0xFFFF000000000000;
      unint64_t v21 = v6 + 0x100000020;
      unint64_t v22 = (v6 + 0x100000020) >> 16;
      unint64_t v23 = ((unsigned __int16)(v6 + 32) + 40 > (unsigned __int16)v22) | ((v6 + 0x100000020) >> 56);
      if (v20)
      {
        unint64_t v21 = v6;
        unint64_t v23 = HIBYTE(v6) | 1;
        unint64_t v22 = v6 >> 16;
      }
      atomic_compare_exchange_strong_explicit(v15, (unint64_t *)&v18, (v22 << 16) | v21 & 0xFFFFFF00000000 | (v23 << 56) | (unsigned __int16)v21, memory_order_relaxed, memory_order_relaxed);
      if (v18 == v6) {
        break;
      }
      if (v18) {
        BOOL v24 = (v18 & 0x1FF000000000000) == 0;
      }
      else {
        BOOL v24 = 0;
      }
      unint64_t v6 = v18;
      if (!v24) {
        goto LABEL_54;
      }
    }
    if (v20)
    {
      if ((v21 & 0xFF00000000) == 0) {
        firehose_buffer_ring_enqueue((int *)a1, BYTE4(v3));
      }
      goto LABEL_54;
    }
LABEL_81:
    if ((_WORD)v6)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
      qword_1E91199F0 = (unsigned __int16)v6;
      __break(1u);
      goto LABEL_83;
    }
  }
LABEL_54:
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 640), &v25, v3 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
LABEL_55:
  uint64_t v3 = *(void *)(a1 + 896);
  if ((~v3 & 0xFF00000000) != 0 && BYTE4(*(void *)(a1 + 896)))
  {
    unint64_t v26 = (atomic_ullong *)(a1 + ((unint64_t)BYTE4(v3) << 12));
    unint64_t v6 = *v26;
    if ((*v26 & 0x1FF000000000000) != 0x2000000000000)
    {
LABEL_77:
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 896), &v34, v3 & 0xFFFFFF00FFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
      return;
    }
    unint64_t v27 = v26[1];
    atomic_ullong v28 = *v26;
    while (1)
    {
      BOOL v29 = (unsigned __int16)v6 + 25 <= WORD1(v6) && v27 >= 0xFFFF000000000000;
      BOOL v30 = !v29;
      unint64_t v31 = v6 + 0x100000020;
      unint64_t v32 = (v6 + 0x100000020) >> 16;
      unint64_t v33 = ((unsigned __int16)(v6 + 32) + 40 > (unsigned __int16)v32) | ((v6 + 0x100000020) >> 56);
      if (v30)
      {
        unint64_t v31 = v6;
        unint64_t v33 = HIBYTE(v6) | 1;
        unint64_t v32 = v6 >> 16;
      }
      atomic_compare_exchange_strong_explicit(v26, (unint64_t *)&v28, (v32 << 16) | v31 & 0xFFFFFF00000000 | (v33 << 56) | (unsigned __int16)v31, memory_order_relaxed, memory_order_relaxed);
      if (v28 == v6) {
        break;
      }
      unint64_t v6 = v28;
      if ((v28 & 0x1FF000000000000) != 0x2000000000000) {
        goto LABEL_77;
      }
    }
    if (v30)
    {
      if ((v31 & 0xFF00000000) == 0) {
        firehose_buffer_ring_enqueue((int *)a1, BYTE4(v3));
      }
      goto LABEL_77;
    }
LABEL_83:
    if ((_WORD)v6)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
      qword_1E91199F0 = (unsigned __int16)v6;
      __break(1u);
      return;
    }
    goto LABEL_77;
  }
  if (!*(_DWORD *)(a1 + 1552))
  {
    firehose_client_reconnect((int *)a1, 0, 0);
  }
}

void __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(uint64_t a1, unsigned int a2, void *a3)
{
}

void firehose_client_send_push_and_wait(uint64_t guard, unsigned int a2, void *a3)
{
  int v3 = *(_DWORD *)(guard + 4 * a2 + 1552);
  long long v11 = 0uLL;
  int v10 = 0;
  if (v3 == -1) {
    return;
  }
  if (v3)
  {
    int v7 = firehose_send_push_and_wait(v3, &v11, &v10);
    if (!v7)
    {
LABEL_4:
      if (((unint64_t)v11 & *((void *)&v11 + 1)) != 0xFFFFFFFFFFFFFFFFLL)
      {
        uint64_t v8 = 480;
        if (a2) {
          uint64_t v8 = 504;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(guard + v8), 1uLL, memory_order_relaxed);
        firehose_client_merge_updates(guard, 0, v11, *((unint64_t *)&v11 + 1), v10 != 0, a3);
        return;
      }
      goto LABEL_18;
    }
    if (v7 != 268435459)
    {
      if (v7 == -301)
      {
        qword_1E91199C0 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_1E91199F0 = -301;
        __break(1u);
      }
      _dispatch_bug(681, v7);
    }
  }
  int v9 = firehose_client_reconnect((int *)guard, v3, a2);
  if ((v9 - 1) > 0xFFFFFFFD) {
    goto LABEL_20;
  }
  int v7 = firehose_send_push_and_wait(v9, &v11, &v10);
  switch(v7)
  {
    case 0:
      goto LABEL_4;
    case 268435459:
      goto LABEL_20;
    case -301:
      qword_1E91199C0 = (uint64_t)"MIG_REPLY_MISMATCH";
      qword_1E91199F0 = -301;
      __break(1u);
LABEL_18:
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Memory corruption in the logging buffers";
      __break(1u);
      break;
  }
  _dispatch_bug(693, v7);
LABEL_20:
  if (a3) {
    *a3 = *(void *)(guard + 448);
  }
}

uint64_t _dispatch_iocntl(uint64_t result, uint64_t a2)
{
  switch((int)result)
  {
    case 1:
      dispatch_io_defaults = *MEMORY[0x1E4F14C80] * a2;
      break;
    case 2:
      qword_1E9119940 = a2;
      break;
    case 3:
      byte_1E9119950 = a2 != 0;
      break;
    case 4:
      qword_1E9119948 = a2;
      break;
    default:
      return result;
  }
  return result;
}

void _dispatch_io_dispose(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2 && (*(unsigned char *)(a1 + 120) & 3) == 0)
  {
    int v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *int v3 = 0;
      uint64_t v2 = *(void *)(a1 + 112);
    }
    dispatch_resume(*(dispatch_object_t *)(v2 + 64));
  }
  unint64_t v4 = *(NSObject **)(a1 + 48);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 56);
  if (v5) {
    dispatch_release(v5);
  }
  unint64_t v6 = *(NSObject **)(a1 + 64);
  if (v6)
  {
    dispatch_release(v6);
  }
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  if (type > 1) {
    return 0;
  }
  unint64_t v4 = _dispatch_io_create(type);
  *((_DWORD *)v4 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = fd;
  *((_DWORD *)v4 + 32) = fd;
  dispatch_suspend((dispatch_object_t)v4[6]);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  v10[0] = MEMORY[0x1E4F14BE8];
  v10[1] = 0x40000000;
  void v10[2] = __dispatch_io_create_block_invoke;
  v10[3] = &unk_1E543CF08;
  v10[6] = type;
  v10[7] = queue;
  v10[4] = cleanup_handler;
  v10[5] = v4;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v10);
  return (dispatch_io_t)v4;
}

void *_dispatch_io_create(uint64_t a1)
{
  uint64_t v2 = (void *)_dispatch_object_alloc(OS_dispatch_io, 152);
  int v2[2] = -1985229329;
  v2[3] = &off_1EB1CE800;
  uint64_t v3 = dispatch_io_defaults * qword_1E9119940;
  v2[9] = a1;
  v2[10] = v3;
  v2[11] = -1;
  v2[6] = dispatch_queue_create("com.apple.libdispatch-io.channelq", 0);
  return v2;
}

void _dispatch_fd_entry_init_async(int a1, uint64_t a2)
{
  if (_dispatch_io_init_pred != -1) {
    dispatch_once_f(&_dispatch_io_init_pred, 0, (dispatch_function_t)_dispatch_io_queues_init);
  }
  v4[0] = MEMORY[0x1E4F14BE8];
  v4[1] = 0x40000000;
  void v4[2] = ___dispatch_fd_entry_init_async_block_invoke;
  _OWORD v4[3] = &unk_1E543D6C0;
  int v5 = a1;
  v4[4] = a2;
  dispatch_channel_async((dispatch_queue_t)_dispatch_io_fds_lockq, v4);
}

atomic_uint *__dispatch_io_create_block_invoke(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (!v4)
  {
    int v5 = *(_WORD *)(a2 + 36) & 0xF000;
    if (v5 == 0x4000)
    {
      int v4 = 21;
    }
    else if (*(void *)(a1[5] + 72) != 1 || (int v4 = 29, v5 != 4096) && v5 != 49152)
    {
      if (a1[6] == 1)
      {
        unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          off_t v7 = lseek(*(_DWORD *)a2, 0, 1);
          if (v7 != -1) {
            goto LABEL_12;
          }
          int v4 = **(_DWORD **)(StatusReg + 8);
        }
        while (v4 == 4);
        if (!v4)
        {
LABEL_12:
          int v4 = 0;
          *(void *)(a1[5] + 136) = v7;
          goto LABEL_14;
        }
        _dispatch_bug(389, v4);
      }
      else
      {
        int v4 = 0;
      }
    }
  }
LABEL_14:
  *(_DWORD *)(a1[5] + 144) = v4;
  dispatch_suspend(*(dispatch_object_t *)(a2 + 64));
  _dispatch_io_init((void *)a1[5], (NSObject **)a2, a1[7], v4, a1[4]);
  dispatch_resume(*(dispatch_object_t *)(a1[5] + 48));
  int v9 = (atomic_uint *)a1[5];
  if (v9[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v9, v8);
    }
  }
  uint64_t result = (atomic_uint *)a1[7];
  if (result[2] != 0x7FFFFFFF)
  {
    int v12 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (v12 <= 1)
    {
      if (v12 != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v8);
    }
  }
  return result;
}

dispatch_group_t _dispatch_io_init(void *a1, NSObject **a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5)
  {
    if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a3 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    off_t v7 = a2 + 8;
    if (a4) {
      off_t v7 = (NSObject **)(a1 + 6);
    }
    uint64_t v8 = *v7;
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_io_init_block_invoke;
    block[3] = &unk_1E543D478;
    block[4] = a5;
    block[5] = a3;
    int v11 = a4;
    dispatch_channel_async(v8, block);
  }
  if (a2)
  {
    a1[14] = a2;
    dispatch_retain(a2[9]);
    dispatch_retain(a2[10]);
    dispatch_group_t result = a2[10];
    a1[7] = a2[9];
  }
  else
  {
    a1[7] = dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0);
    dispatch_group_t result = dispatch_group_create();
  }
  a1[8] = result;
  return result;
}

dispatch_io_t dispatch_io_create_f(dispatch_io_type_t a1, dispatch_fd_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    unint64_t v6 = v8;
    v8[0] = MEMORY[0x1E4F14BE8];
    v8[1] = 0x40000000;
    v8[2] = __dispatch_io_create_f_block_invoke;
    v8[3] = &__block_descriptor_tmp_2;
    v8[4] = a5;
    v8[5] = a4;
  }
  else
  {
    unint64_t v6 = 0;
  }
  return dispatch_io_create(a1, a2, a3, v6);
}

uint64_t __dispatch_io_create_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

dispatch_io_t dispatch_io_create_with_path(dispatch_io_type_t type, const char *path, int oflag, mode_t mode, dispatch_queue_t queue, void *cleanup_handler)
{
  if (type > 1) {
    return 0;
  }
  if (*path != 47) {
    return 0;
  }
  size_t v12 = strlen(path);
  unint64_t v13 = malloc_type_malloc(v12 + 25, 0x5B08A984uLL);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = v13;
  __int16 v15 = _dispatch_io_create(type);
  *(void *)((char *)v15 + 124) = -1;
  *(void *)unint64_t v14 = v15;
  v14[2] = oflag;
  *((_WORD *)v14 + 6) = mode;
  *((void *)v14 + 2) = v12;
  memcpy(v14 + 6, path, v12 + 1);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if (*((_DWORD *)v15 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v15 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  BOOL v16 = v15[6];
  v18[0] = MEMORY[0x1E4F14BE8];
  v18[1] = 0x40000000;
  v18[2] = __dispatch_io_create_with_path_block_invoke;
  v18[3] = &unk_1E543CF78;
  v18[6] = v15;
  v18[7] = queue;
  v18[4] = cleanup_handler;
  v18[5] = v14;
  dispatch_channel_async(v16, v18);
  return (dispatch_io_t)v15;
}

void __dispatch_io_create_with_path_block_invoke(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  memset(&v26, 0, sizeof(v26));
  do
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = (const char *)(v3 + 24);
    if ((*(_DWORD *)(v3 + 8) & 0x200100) != 0) {
      int v5 = lstat(v4, &v26);
    }
    else {
      int v5 = stat(v4, &v26);
    }
    if (v5 != -1) {
      goto LABEL_8;
    }
    int v6 = **(_DWORD **)(StatusReg + 8);
  }
  while (v6 == 4);
  if (v6)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if ((*(unsigned char *)(v9 + 9) & 2) != 0)
    {
      uint64_t v10 = *(void *)(v9 + 16);
      if (*(unsigned char *)(v9 + v10 + 23) != 47)
      {
        while (1)
        {
          uint64_t v16 = v10 - 1;
          if (v10 < 1) {
            break;
          }
          int v17 = *(unsigned __int8 *)(v9 + v10-- + 23);
          if (v17 == 47)
          {
            atomic_ullong v18 = (unsigned char *)(v9 + v16 + 24);
            goto LABEL_28;
          }
        }
        atomic_ullong v18 = 0;
LABEL_28:
        unsigned char *v18 = 0;
        do
        {
          if (stat((const char *)(*(void *)(a1 + 40) + 24), &v26) != -1) {
            goto LABEL_32;
          }
          int v19 = **(_DWORD **)(StatusReg + 8);
        }
        while (v19 == 4);
        if (!v19)
        {
LABEL_32:
          v26.st_mode = 0x8000;
          unsigned char *v18 = 47;
          uint64_t v8 = *(void *)(a1 + 48);
          goto LABEL_33;
        }
        unsigned char *v18 = 47;
        *(_DWORD *)(*(void *)(a1 + 48) + 144) = v6;
        goto LABEL_17;
      }
    }
LABEL_16:
    *(_DWORD *)(*(void *)(a1 + 48) + 144) = v6;
LABEL_17:
    free(*(void **)(a1 + 40));
    _dispatch_io_init(*(void **)(a1 + 48), 0, *(void *)(a1 + 56), v6, *(void *)(a1 + 32));
    size_t v12 = *(atomic_uint **)(a1 + 48);
    if (v12[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v12, v11);
      }
    }
    unint64_t v14 = *(atomic_uint **)(a1 + 56);
    if (v14[2] != 0x7FFFFFFF)
    {
      int v15 = atomic_fetch_add_explicit(v14 + 2, 0xFFFFFFFF, memory_order_release);
      if (v15 <= 1)
      {
        if (v15 != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v14, v11);
      }
    }
    return;
  }
LABEL_8:
  int v7 = v26.st_mode & 0xF000;
  if (v7 == 0x4000)
  {
    int v6 = 21;
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (*(void *)(v8 + 72) == 1)
  {
    int v6 = 29;
    if (v7 == 4096 || v7 == 49152) {
      goto LABEL_16;
    }
  }
LABEL_33:
  *(_DWORD *)(v8 + 144) = 0;
  dispatch_suspend(*(dispatch_object_t *)(v8 + 48));
  if (_dispatch_io_init_pred != -1) {
    dispatch_once_f(&_dispatch_io_init_pred, 0, (dispatch_function_t)_dispatch_io_queues_init);
  }
  v22[0] = MEMORY[0x1E4F14BE8];
  v22[1] = 0x40000000;
  _OWORD v22[2] = __dispatch_io_create_with_path_block_invoke_2;
  void v22[3] = &unk_1E543CF50;
  stat v23 = v26;
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v25 = v20;
  uint64_t v21 = *(void *)(a1 + 40);
  v22[4] = *(void *)(a1 + 32);
  v22[5] = v21;
  dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, v22);
}

dispatch_queue_t _dispatch_io_queues_init()
{
  _dispatch_io_fds_lockq = (uint64_t)dispatch_queue_create("com.apple.libdispatch-io.fd_lockq", 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.libdispatch-io.dev_lockq", 0);
  _dispatch_io_devs_lockq = (uint64_t)result;
  return result;
}

atomic_uint *__dispatch_io_create_with_path_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = (NSObject **)_dispatch_fd_entry_create_with_path(*(objc_class **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_WORD *)(a1 + 52));
  _dispatch_io_init(*(void **)(a1 + 192), v2, *(void *)(a1 + 200), 0, *(void *)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 192) + 48));
  int v4 = *(atomic_uint **)(a1 + 192);
  if (v4[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v4, v3);
    }
  }
  dispatch_queue_t result = *(atomic_uint **)(a1 + 200);
  if (result[2] != 0x7FFFFFFF)
  {
    int v7 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (v7 <= 1)
    {
      if (v7 != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

NSObject *_dispatch_fd_entry_create_with_path(objc_class *a1, unsigned int a2, __int16 a3)
{
  int v6 = _dispatch_fd_entry_create(*(NSObject **)(*(void *)a1 + 48));
  int v7 = v6;
  if ((a3 & 0xF000) == 0x8000) {
    _dispatch_disk_init(v6, HIBYTE(a2));
  }
  else {
    _dispatch_stream_init((uint64_t)v6);
  }
  LODWORD(v7->isa) = -1;
  LODWORD(v7[2].isa) = -1;
  v7[1].dispatch_object_t isa = a1;
  LODWORD(v7[4].isa) = a2;
  WORD2(v7[4].isa) = a3;
  v7[9].dispatch_object_t isa = (Class)dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0);
  v7[10].dispatch_object_t isa = (Class)dispatch_group_create();
  dispatch_object_t isa = v7[8].isa;
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = ___dispatch_fd_entry_create_with_path_block_invoke;
  block[3] = &__block_descriptor_tmp_79;
  block[4] = v7;
  dispatch_channel_async(isa, block);
  uint64_t v9 = v7[8].isa;
  v11[0] = MEMORY[0x1E4F14BE8];
  v11[1] = 0x40000000;
  v11[2] = ___dispatch_fd_entry_create_with_path_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_80;
  v11[4] = v7;
  dispatch_channel_async(v9, v11);
  return v7;
}

dispatch_io_t dispatch_io_create_with_path_f(dispatch_io_type_t a1, const char *a2, int a3, mode_t a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    uint64_t v8 = v10;
    v10[0] = MEMORY[0x1E4F14BE8];
    v10[1] = 0x40000000;
    void v10[2] = __dispatch_io_create_with_path_f_block_invoke;
    v10[3] = &__block_descriptor_tmp_6;
    v10[4] = a7;
    v10[5] = a6;
  }
  else
  {
    uint64_t v8 = 0;
  }
  return dispatch_io_create_with_path(a1, a2, a3, a4, a5, v8);
}

uint64_t __dispatch_io_create_with_path_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

dispatch_io_t dispatch_io_create_with_io(dispatch_io_type_t type, dispatch_io_t io, dispatch_queue_t queue, void *cleanup_handler)
{
  if (type > 1) {
    return 0;
  }
  int v4 = _dispatch_io_create(type);
  dispatch_suspend((dispatch_object_t)v4[6]);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if (LODWORD(io[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&io[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  dispatch_object_t isa = io[6].isa;
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_io_create_with_io_block_invoke;
  block[3] = &unk_1E543D010;
  void block[6] = v4;
  block[7] = queue;
  block[4] = cleanup_handler;
  void block[5] = io;
  block[8] = type;
  dispatch_channel_async(isa, block);
  return (dispatch_io_t)v4;
}

void __dispatch_io_create_with_io_block_invoke(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  if ((*(unsigned char *)(v2 + 120) & 3) != 0)
  {
    int v3 = 89;
  }
  else
  {
    int v3 = *(_DWORD *)(v2 + 144);
    if (!v3)
    {
      unint64_t v13 = *(NSObject **)(v2 + 56);
      block[0] = MEMORY[0x1E4F14BE8];
      block[1] = 0x40000000;
      block[2] = __dispatch_io_create_with_io_block_invoke_2;
      block[3] = &unk_1E543CFE8;
      uint64_t v15 = a1[7];
      uint64_t v14 = a1[8];
      void block[6] = a1[6];
      block[7] = v14;
      block[8] = v15;
      block[4] = a1[4];
      void block[5] = v2;
      dispatch_channel_async(v13, block);
      return;
    }
  }
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  *(_DWORD *)(v4 + 144) = v3;
  _dispatch_io_init((void *)v4, 0, v5, v3, a1[4]);
  dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
  int v7 = (atomic_uint *)a1[6];
  if (v7[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v7, v6);
    }
  }
  uint64_t v9 = (atomic_uint *)a1[5];
  if (v9[2] != 0x7FFFFFFF)
  {
    int v10 = atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release);
    if (v10 <= 1)
    {
      if (v10 != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v9, v6);
    }
  }
  int v11 = (atomic_uint *)a1[7];
  if (v11[2] != 0x7FFFFFFF)
  {
    int v12 = atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release);
    if (v12 <= 1)
    {
      if (v12 != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v11, v6);
    }
  }
}

atomic_uint *__dispatch_io_create_with_io_block_invoke_2(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  if ((*(unsigned char *)(v2 + 120) & 3) != 0)
  {
    int v3 = 89;
    goto LABEL_7;
  }
  int v3 = *(_DWORD *)(v2 + 144);
  if (v3) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(v2 + 112);
  int v3 = *(_DWORD *)(v4 + 24);
  if (v3) {
    goto LABEL_7;
  }
  int v5 = *(_WORD *)(v4 + 36) & 0xF000;
  if (v5 == 0x4000)
  {
    int v3 = 21;
LABEL_7:
    uint64_t v6 = a1[6];
    *(_DWORD *)(v6 + 144) = v3;
    _dispatch_io_init((void *)v6, 0, a1[8], v3, a1[4]);
    dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
    uint64_t v8 = (atomic_uint *)a1[6];
    if (v8[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(v8 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v8, v7);
      }
    }
    int v10 = (atomic_uint *)a1[5];
    if (v10[2] != 0x7FFFFFFF)
    {
      int v11 = atomic_fetch_add_explicit(v10 + 2, 0xFFFFFFFF, memory_order_release);
      if (v11 <= 1)
      {
        if (v11 != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v10, v7);
      }
    }
    dispatch_queue_t result = (atomic_uint *)a1[8];
    if (result[2] != 0x7FFFFFFF)
    {
      int v13 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
      if (v13 <= 1)
      {
        if (v13 != 1) {
          _os_object_retain_weak_cold_1();
        }
        return (atomic_uint *)_os_object_dispose(result, v7);
      }
    }
    return result;
  }
  uint64_t v14 = a1[6];
  if (*(void *)(v14 + 72) == 1)
  {
    int v3 = 29;
    if (v5 == 4096 || v5 == 49152) {
      goto LABEL_7;
    }
  }
  if (a1[7] == 1 && *(_DWORD *)(v2 + 124) != -1)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      off_t v16 = lseek(**(_DWORD **)(a1[5] + 112), 0, 1);
      if (v16 != -1) {
        goto LABEL_23;
      }
      int v3 = **(_DWORD **)(StatusReg + 8);
    }
    while (v3 == 4);
    if (!v3)
    {
LABEL_23:
      uint64_t v2 = a1[5];
      uint64_t v14 = a1[6];
      *(void *)(v14 + 136) = v16;
      goto LABEL_24;
    }
    _dispatch_bug(590, v3);
    goto LABEL_7;
  }
LABEL_24:
  *(_DWORD *)(v14 + 144) = 0;
  int v17 = *(_DWORD *)(v2 + 124);
  if (v17 == -1)
  {
    *(void *)(v14 + 124) = -1;
    uint64_t v25 = *(void *)(v2 + 112);
    __int16 v26 = *(_WORD *)(v25 + 36);
    int v27 = *(_DWORD *)(v25 + 32);
    size_t v28 = *(void *)(*(void *)(v25 + 8) + 16) + 25;
    BOOL v29 = malloc_type_malloc(v28, 0x2C5081E5uLL);
    memcpy(v29, *(const void **)(*(void *)(a1[5] + 112) + 8), v28);
    *BOOL v29 = a1[6];
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = __dispatch_io_create_with_io_block_invoke_3;
    block[3] = &unk_1E543CFC0;
    int v33 = v27;
    __int16 v34 = v26;
    uint64_t v30 = a1[8];
    void block[6] = a1[6];
    block[7] = v30;
    block[4] = a1[4];
    void block[5] = v29;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }
  else
  {
    atomic_ullong v18 = *(NSObject ***)(v2 + 112);
    int v19 = *(_DWORD *)(v2 + 128);
    *(_DWORD *)(v14 + 124) = v17;
    *(_DWORD *)(v14 + 128) = v19;
    dispatch_suspend(v18[8]);
    _dispatch_io_init((void *)a1[6], v18, a1[8], 0, a1[4]);
    dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
    uint64_t v21 = (atomic_uint *)a1[6];
    if (v21[2] != 0x7FFFFFFF)
    {
      int v22 = atomic_fetch_add_explicit(v21 + 2, 0xFFFFFFFF, memory_order_release);
      if (v22 <= 1)
      {
        if (v22 != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v21, v20);
      }
    }
    stat v23 = (atomic_uint *)a1[8];
    if (v23[2] != 0x7FFFFFFF)
    {
      int v24 = atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release);
      if (v24 <= 1)
      {
        if (v24 != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v23, v20);
      }
    }
  }
  dispatch_queue_t result = (atomic_uint *)a1[5];
  if (result[2] != 0x7FFFFFFF)
  {
    int v31 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (v31 <= 1)
    {
      if (v31 != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v20);
    }
  }
  return result;
}

atomic_uint *__dispatch_io_create_with_io_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = (NSObject **)_dispatch_fd_entry_create_with_path(*(objc_class **)(a1 + 40), *(_DWORD *)(a1 + 64), *(_WORD *)(a1 + 68));
  _dispatch_io_init(*(void **)(a1 + 48), v2, *(void *)(a1 + 56), 0, *(void *)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 48) + 48));
  uint64_t v4 = *(atomic_uint **)(a1 + 48);
  if (v4[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v4, v3);
    }
  }
  dispatch_queue_t result = *(atomic_uint **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    int v7 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (v7 <= 1)
    {
      if (v7 != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

dispatch_io_t dispatch_io_create_with_io_f(dispatch_io_type_t a1, NSObject *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v6 = v8;
    v8[0] = MEMORY[0x1E4F14BE8];
    v8[1] = 0x40000000;
    v8[2] = __dispatch_io_create_with_io_f_block_invoke;
    v8[3] = &__block_descriptor_tmp_10;
    v8[4] = a5;
    v8[5] = a4;
  }
  else
  {
    uint64_t v6 = 0;
  }
  return dispatch_io_create_with_io(a1, a2, a3, v6);
}

uint64_t __dispatch_io_create_with_io_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_io_set_high_water(dispatch_io_t channel, size_t high_water)
{
  if (LODWORD(channel[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  dispatch_object_t isa = channel[6].isa;
  v3[0] = MEMORY[0x1E4F14BE8];
  v3[1] = 0x40000000;
  v3[2] = __dispatch_io_set_high_water_block_invoke;
  void v3[3] = &__block_descriptor_tmp_11;
  v3[4] = channel;
  v3[5] = high_water;
  dispatch_channel_async(isa, v3);
}

uint64_t __dispatch_io_set_high_water_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(result + 80) > v4)
  {
    *(void *)(result + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v4;
    unint64_t v4 = *(void *)(a1 + 40);
  }
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  *(void *)(result + 88) = v5;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return _os_object_dispose((void *)result, a2);
    }
  }
  return result;
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
  if (LODWORD(channel[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  dispatch_object_t isa = channel[6].isa;
  v3[0] = MEMORY[0x1E4F14BE8];
  v3[1] = 0x40000000;
  v3[2] = __dispatch_io_set_low_water_block_invoke;
  void v3[3] = &__block_descriptor_tmp_12;
  v3[4] = channel;
  v3[5] = low_water;
  dispatch_channel_async(isa, v3);
}

uint64_t __dispatch_io_set_low_water_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(result + 88) < v4)
  {
    *(void *)(result + 88) = v4;
    unint64_t v4 = *(void *)(a1 + 40);
  }
  *(void *)(result + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v4;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return _os_object_dispose((void *)result, a2);
    }
  }
  return result;
}

void dispatch_io_set_interval(dispatch_io_t channel, uint64_t interval, dispatch_io_interval_flags_t flags)
{
  if (LODWORD(channel[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  dispatch_object_t isa = channel[6].isa;
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_io_set_interval_block_invoke;
  block[3] = &__block_descriptor_tmp_13;
  block[4] = channel;
  void block[5] = interval;
  void block[6] = flags;
  dispatch_channel_async(isa, block);
}

uint64_t __dispatch_io_set_interval_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = a1 + 32;
  uint64_t result = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(v6 + 8);
  if (v5 < 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = v5;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(result + 96) = v3;
  *(void *)(result + 104) = v7;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return _os_object_dispose((void *)result, a2);
    }
  }
  return result;
}

void _dispatch_io_set_target_queue(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  uint64_t v2 = *(NSObject **)(a1 + 48);
  v3[0] = MEMORY[0x1E4F14BE8];
  v3[1] = 0x40000000;
  v3[2] = ___dispatch_io_set_target_queue_block_invoke;
  void v3[3] = &__block_descriptor_tmp_14;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_channel_async(v2, v3);
}

atomic_uint *___dispatch_io_set_target_queue_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(atomic_uint **)(v3 + 24);
  *(void *)(v3 + 24) = v4;
  if (v5[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v5, a2);
    }
  }
  uint64_t result = *(atomic_uint **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    int v8 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (v8 <= 1)
    {
      if (v8 != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel)
{
  if (((uint64_t)channel[15].isa & 3) != 0) {
    return -1;
  }
  dispatch_fd_t result = (dispatch_fd_t)channel[16].isa;
  if (result == -1)
  {
    if (!LODWORD(channel[18].isa))
    {
      unint64_t v3 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
      while (1)
      {
        unint64_t v3 = *(void *)v3;
        if (!v3) {
          break;
        }
        if (*(char **)(v3 + 8) == "io")
        {
          if (*(dispatch_io_t *)(v3 + 16) != channel) {
            return -1;
          }
          _dispatch_fd_entry_open((uint64_t)channel[14].isa, (uint64_t)channel);
          return (dispatch_fd_t)channel[16].isa;
        }
      }
    }
    return -1;
  }
  return result;
}

uint64_t _dispatch_fd_entry_open(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == -1 && *(void *)(a1 + 8))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      return v2;
    }
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      unsigned int v7 = guarded_open_np();
      if (v7 != -1) {
        break;
      }
      **(_DWORD **)(StatusReg + 8) = 0;
      unsigned int v7 = open_NOCANCEL();
      if (v7 != -1) {
        goto LABEL_12;
      }
      uint64_t v2 = **(unsigned int **)(StatusReg + 8);
      if (v2 != 4)
      {
        int v8 = 0;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 24), (unsigned int *)&v8, v2, memory_order_relaxed, memory_order_relaxed);
        return v2;
      }
    }
    *(_DWORD *)(a1 + 28) = 15;
LABEL_12:
    int v9 = -1;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v9, v7, memory_order_relaxed, memory_order_relaxed);
    if (v9 == -1)
    {
      uint64_t v2 = 0;
      *(_DWORD *)(a2 + 128) = v7;
      return v2;
    }
    if (*(_DWORD *)(a1 + 28)) {
      guarded_close_np();
    }
    else {
      close_NOCANCEL();
    }
  }
  return 0;
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
  int isa = (int)channel[15].isa;
  if (flags)
  {
    if ((isa & 2) != 0) {
      return;
    }
    atomic_fetch_or_explicit((atomic_uint *volatile)&channel[15], 2u, memory_order_relaxed);
    if (LODWORD(channel[1].isa) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    unint64_t v3 = channel[6].isa;
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_io_stop_block_invoke;
    block[3] = &__block_descriptor_tmp_54;
    block[4] = channel;
    uint64_t v4 = block;
  }
  else
  {
    if ((isa & 3) != 0) {
      return;
    }
    if (LODWORD(channel[1].isa) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    unint64_t v3 = channel[6].isa;
    v5[0] = MEMORY[0x1E4F14BE8];
    v5[1] = 0x40000000;
    void v5[2] = __dispatch_io_close_block_invoke;
    _OWORD v5[3] = &__block_descriptor_tmp_17;
    v5[4] = channel;
    uint64_t v4 = v5;
  }
  dispatch_channel_async(v3, v4);
}

void __dispatch_io_close_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 56);
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_io_close_block_invoke_2;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = v1;
  dispatch_channel_async(v2, block);
}

uint64_t __dispatch_io_close_block_invoke_2(uint64_t a1, const char *a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if ((*(unsigned char *)(result + 120) & 3) == 0)
  {
    atomic_fetch_or_explicit((atomic_uint *volatile)(result + 120), 1u, memory_order_relaxed);
    uint64_t result = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(result + 112);
    if (v4)
    {
      unint64_t v5 = *(void **)(v4 + 8);
      if (v5)
      {
        *unint64_t v5 = 0;
        uint64_t result = *(void *)(a1 + 32);
      }
      *(void *)(result + 112) = 0;
      dispatch_resume(*(dispatch_object_t *)(v4 + 64));
      uint64_t result = *(void *)(a1 + 32);
    }
  }
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return _os_object_dispose((void *)result, a2);
    }
  }
  return result;
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
  if (LODWORD(channel[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  int isa = channel[6].isa;
  v3[0] = MEMORY[0x1E4F14BE8];
  v3[1] = 0x40000000;
  v3[2] = __dispatch_io_barrier_block_invoke;
  void v3[3] = &unk_1E543D168;
  v3[4] = barrier;
  v3[5] = channel;
  dispatch_channel_async(isa, v3);
}

void __dispatch_io_barrier_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 24);
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_io_barrier_block_invoke_2;
  block[3] = &unk_1E543D140;
  long long v4 = *(_OWORD *)(v1 + 56);
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  block[4] = *(void *)(a1 + 32);
  dispatch_channel_async((dispatch_queue_t)v4, block);
}

void __dispatch_io_barrier_block_invoke_2(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
  uint64_t v2 = *(NSObject **)(a1 + 48);
  unint64_t v3 = *(NSObject **)(a1 + 56);
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_io_barrier_block_invoke_3;
  block[3] = &unk_1E543D118;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 40);
  block[4] = *(void *)(a1 + 32);
  void block[5] = v4;
  void block[6] = v5;
  dispatch_group_notify(v2, v3, block);
}

atomic_uint *__dispatch_io_barrier_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v7[1] = "io";
  void v7[2] = v2;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7[0] = *(void *)(StatusReg + 184);
  *(void *)(StatusReg + 184) = v7;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  *(void *)(StatusReg + 184) = v7[0];
  dispatch_resume(*(dispatch_object_t *)(a1 + 48));
  uint64_t result = *(atomic_uint **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v4);
    }
  }
  return result;
}

void dispatch_io_barrier_f(NSObject *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = MEMORY[0x1E4F14BE8];
  v3[1] = 0x40000000;
  v3[2] = __dispatch_io_barrier_f_block_invoke;
  void v3[3] = &__block_descriptor_tmp_21;
  v3[4] = a3;
  v3[5] = a2;
  dispatch_io_barrier(a1, v3);
}

uint64_t __dispatch_io_barrier_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  if (LODWORD(channel[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  int isa = channel[6].isa;
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_io_read_block_invoke;
  block[3] = &unk_1E543D1D0;
  void block[6] = offset;
  void block[7] = length;
  void block[8] = queue;
  block[4] = io_handler;
  void block[5] = channel;
  dispatch_channel_async(isa, block);
}

atomic_uint *__dispatch_io_read_block_invoke(uint64_t a1)
{
  uint64_t v2 = _dispatch_operation_create(0, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), &_dispatch_data_empty, *(void *)(a1 + 64), *(void **)(a1 + 32));
  if (v2)
  {
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 40) + 56);
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = __dispatch_io_read_block_invoke_2;
    block[3] = &__block_descriptor_tmp_22;
    block[4] = v2;
    dispatch_channel_async(v4, block);
  }
  uint64_t v5 = *(atomic_uint **)(a1 + 40);
  if (v5[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v5, v3);
    }
  }
  uint64_t result = *(atomic_uint **)(a1 + 64);
  if (result[2] != 0x7FFFFFFF)
  {
    int v8 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (v8 <= 1)
    {
      if (v8 != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

uint64_t _dispatch_operation_create(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, void *a7)
{
  if ((*(unsigned char *)(a2 + 120) & 3) != 0)
  {
    int v12 = 89;
LABEL_3:
    _dispatch_objc_retain(a5);
    if (*(_DWORD *)(a6 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a6 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    int v13 = *(NSObject **)(a2 + 56);
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_operation_create_block_invoke;
    block[3] = &unk_1E543D568;
    int v23 = a1;
    int v24 = v12;
    block[4] = a7;
    void block[5] = a6;
    void block[6] = a5;
    void block[7] = a2;
    dispatch_channel_async(v13, block);
    return 0;
  }
  int v12 = *(_DWORD *)(a2 + 144);
  if (!a4 || v12) {
    goto LABEL_3;
  }
  uint64_t v14 = _dispatch_object_alloc(OS_dispatch_operation, 272);
  *(void *)(v14 + 16) = -1985229329;
  *(_DWORD *)(v14 + 12) = 0;
  *(void *)(v14 + 48) = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.opq", 0, (dispatch_queue_t)a6);
  *(unsigned char *)(v14 + 16_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  *(_DWORD *)(v14 + 56) = a1;
  *(void *)(v14 + 104) = *(void *)(a2 + 136) + a3;
  *(void *)(v14 + 112) = a4;
  *(void *)(v14 + 128) = _dispatch_Block_copy(a7);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  *(void *)(v14 + 136) = a2;
  long long v18 = *(_OWORD *)(a2 + 72);
  long long v19 = *(_OWORD *)(a2 + 88);
  *(void *)(v14 + 96) = *(void *)(a2 + 104);
  *(_OWORD *)(v14 + 64) = v18;
  *(_OWORD *)(v14 + 8_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v19;
  uint64_t v20 = *(void *)(a2 + 24);
  do
  {
    uint64_t v21 = v20;
    uint64_t v20 = *(void *)(v20 + 24);
  }
  while (v20);
  *(void *)(v14 + 24) = v21;
  return v14;
}

void __dispatch_io_read_block_invoke_2(uint64_t a1)
{
}

void _dispatch_operation_enqueue(uint64_t a1, unsigned int a2, id a3)
{
  _dispatch_objc_retain(a3);
  uint64_t v6 = *(void *)(a1 + 136);
  if ((*(unsigned char *)(v6 + 120) & 3) != 0)
  {
    int v7 = 89;
  }
  else
  {
    int v7 = *(_DWORD *)(v6 + 144);
    if (!v7)
    {
      uint64_t v12 = *(void *)(v6 + 112);
      *(void *)(a1 + 144) = v12;
      dispatch_suspend(*(dispatch_object_t *)(v12 + 64));
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 144) + 80));
      uint64_t v13 = *(void *)(a1 + 144);
      uint64_t v14 = *(void *)(v13 + 56);
      if (v14)
      {
        uint64_t v15 = *(NSObject **)(v14 + 72);
        v18[0] = MEMORY[0x1E4F14BE8];
        v18[1] = 0x40000000;
        v18[2] = ___dispatch_operation_enqueue_block_invoke_3;
        v18[3] = &__block_descriptor_tmp_62;
        v18[4] = v14;
        v18[5] = a1;
        v18[6] = a3;
        off_t v16 = v18;
      }
      else
      {
        int v17 = *(NSObject ***)(v13 + 8 * a2 + 40);
        uint64_t v15 = *v17;
        v19[0] = MEMORY[0x1E4F14BE8];
        v19[1] = 0x40000000;
        v19[2] = ___dispatch_operation_enqueue_block_invoke_2;
        v19[3] = &__block_descriptor_tmp_61;
        v19[4] = v17;
        v19[5] = a1;
        v19[6] = a3;
        off_t v16 = v19;
      }
      dispatch_channel_async(v15, v16);
      return;
    }
  }
  uint64_t v8 = *(void *)(a1 + 128);
  int v9 = *(NSObject **)(a1 + 48);
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = ___dispatch_operation_enqueue_block_invoke;
  block[3] = &unk_1E543D590;
  unsigned int v21 = a2;
  int v22 = v7;
  block[4] = v8;
  void block[5] = a3;
  dispatch_channel_async(v9, block);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose((void *)a1, v10);
    }
  }
}

void dispatch_io_read_f(NSObject *a1, off_t a2, size_t a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  v6[0] = MEMORY[0x1E4F14BE8];
  v6[1] = 0x40000000;
  _OWORD v6[2] = __dispatch_io_read_f_block_invoke;
  v6[3] = &__block_descriptor_tmp_25;
  v6[4] = a6;
  v6[5] = a5;
  dispatch_io_read(a1, a2, a3, a4, v6);
}

uint64_t __dispatch_io_read_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  _dispatch_objc_retain(data);
  if (LODWORD(channel[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&channel[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  int isa = channel[6].isa;
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_io_write_block_invoke;
  block[3] = &unk_1E543D238;
  void block[6] = offset;
  void block[7] = data;
  void block[8] = queue;
  block[4] = io_handler;
  void block[5] = channel;
  dispatch_channel_async(isa, block);
}

atomic_uint *__dispatch_io_write_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(NSObject **)(a1 + 56);
  size_t size = dispatch_data_get_size(v4);
  uint64_t v6 = _dispatch_operation_create(1, v2, v3, size, v4, *(void *)(a1 + 64), *(void **)(a1 + 32));
  if (v6)
  {
    int v7 = *(NSObject **)(*(void *)(a1 + 40) + 56);
    v14[0] = MEMORY[0x1E4F14BE8];
    v14[1] = 0x40000000;
    v14[2] = __dispatch_io_write_block_invoke_2;
    v14[3] = &__block_descriptor_tmp_26;
    uint64_t v8 = *(void *)(a1 + 56);
    v14[4] = v6;
    v14[5] = v8;
    dispatch_channel_async(v7, v14);
  }
  else
  {
    _dispatch_objc_release(*(id *)(a1 + 56));
  }
  int v10 = *(atomic_uint **)(a1 + 40);
  if (v10[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v10 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v10, v9);
    }
  }
  uint64_t result = *(atomic_uint **)(a1 + 64);
  if (result[2] != 0x7FFFFFFF)
  {
    int v13 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (v13 <= 1)
    {
      if (v13 != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v9);
    }
  }
  return result;
}

void __dispatch_io_write_block_invoke_2(uint64_t a1)
{
  _dispatch_operation_enqueue(*(void *)(a1 + 32), 1u, *(id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 40);

  _dispatch_objc_release(v2);
}

void dispatch_io_write_f(NSObject *a1, off_t a2, NSObject *a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  v6[0] = MEMORY[0x1E4F14BE8];
  v6[1] = 0x40000000;
  _OWORD v6[2] = __dispatch_io_write_f_block_invoke;
  v6[3] = &__block_descriptor_tmp_28;
  v6[4] = a6;
  v6[5] = a5;
  dispatch_io_write(a1, a2, a3, a4, v6);
}

uint64_t __dispatch_io_write_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_read(dispatch_fd_t fd, size_t length, dispatch_queue_t queue, void *handler)
{
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  v4[0] = MEMORY[0x1E4F14BE8];
  v4[1] = 0x40000000;
  void v4[2] = __dispatch_read_block_invoke;
  _OWORD v4[3] = &unk_1E543D320;
  v4[4] = handler;
  void v4[5] = queue;
  dispatch_fd_t v5 = fd;
  v4[6] = length;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v4);
}

void __dispatch_read_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = __dispatch_read_block_invoke_2;
    block[3] = &unk_1E543D280;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    block[4] = v5;
    int v21 = v3;
    dispatch_channel_async(v4, block);
    int v7 = *(atomic_uint **)(a1 + 40);
    if (v7[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v7, v6);
      }
    }
  }
  else
  {
    int v10 = *(void **)(a2 + 88);
    if (!v10)
    {
      int v10 = _dispatch_io_create(0);
      *((_DWORD *)v10 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = *(_DWORD *)(a1 + 56);
      *((_DWORD *)v10 + 32) = *(_DWORD *)(a1 + 56);
      v10[14] = a2;
      dispatch_retain(*(dispatch_object_t *)(a2 + 72));
      dispatch_retain(*(dispatch_object_t *)(a2 + 80));
      *(_OWORD *)(v10 + 7) = *(_OWORD *)(a2 + 72);
      *(void *)(a2 + 88) = v10;
    }
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2000000000;
    v19[3] = &_dispatch_data_empty;
    v17[0] = 0;
    v17[1] = v17;
    v17[2] = 0x2000000000;
    int v18 = 0;
    int v11 = *(NSObject **)(a2 + 64);
    v16[0] = MEMORY[0x1E4F14BE8];
    v16[1] = 0x40000000;
    v16[2] = __dispatch_read_block_invoke_3;
    v16[3] = &unk_1E543D2D0;
    uint64_t v12 = *(void *)(a1 + 40);
    v16[4] = *(void *)(a1 + 32);
    v16[5] = v19;
    v16[6] = v17;
    v16[7] = v12;
    dispatch_channel_async(v11, v16);
    uint64_t v13 = *(void *)(a1 + 48);
    v15[0] = MEMORY[0x1E4F14BE8];
    v15[1] = 0x40000000;
    v15[2] = __dispatch_read_block_invoke_5;
    v15[3] = &unk_1E543D2F8;
    v15[4] = v19;
    v15[5] = v17;
    uint64_t v14 = _dispatch_operation_create(0, (uint64_t)v10, 0, v13, &_dispatch_data_empty, (uint64_t)&unk_1EB1CE780, v15);
    if (v14) {
      _dispatch_operation_enqueue(v14, 0, &_dispatch_data_empty);
    }
    _Block_object_dispose(v17, 8);
    _Block_object_dispose(v19, 8);
  }
}

uint64_t __dispatch_read_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, __objc2_class **, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), &_dispatch_data_empty, *(unsigned int *)(a1 + 40));
}

atomic_uint *__dispatch_read_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_read_block_invoke_4;
  block[3] = &unk_1E543D2A8;
  long long v7 = *(_OWORD *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  dispatch_channel_async(v2, block);
  uint64_t result = *(atomic_uint **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void __dispatch_read_block_invoke_4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  _dispatch_objc_release(v2);
}

void __dispatch_read_block_invoke_5(uint64_t a1, int a2, dispatch_data_t data2, int a4)
{
  if (data2)
  {
    dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), data2);
    _dispatch_objc_release(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = concat;
  }
  if (a2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4;
  }
}

void dispatch_read_f(dispatch_fd_t a1, size_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  v5[0] = MEMORY[0x1E4F14BE8];
  v5[1] = 0x40000000;
  void v5[2] = __dispatch_read_f_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_35;
  v5[4] = a5;
  void v5[5] = a4;
  dispatch_read(a1, a2, a3, v5);
}

uint64_t __dispatch_read_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_write(dispatch_fd_t fd, dispatch_data_t data, dispatch_queue_t queue, void *handler)
{
  _dispatch_objc_retain(data);
  if (LODWORD(queue[1].isa) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  v8[0] = MEMORY[0x1E4F14BE8];
  v8[1] = 0x40000000;
  v8[2] = __dispatch_write_block_invoke;
  v8[3] = &unk_1E543D408;
  v8[4] = handler;
  v8[5] = queue;
  dispatch_fd_t v9 = fd;
  void v8[6] = data;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v8);
}

void __dispatch_write_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = __dispatch_write_block_invoke_2;
    block[3] = &unk_1E543D368;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    void block[4] = v5;
    int v22 = v3;
    dispatch_channel_async(v4, block);
    long long v7 = *(atomic_uint **)(a1 + 40);
    if (v7[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v7, v6);
      }
    }
  }
  else
  {
    int v10 = *(void **)(a2 + 88);
    if (!v10)
    {
      int v10 = _dispatch_io_create(0);
      *((_DWORD *)v10 + 3_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = *(_DWORD *)(a1 + 56);
      *((_DWORD *)v10 + 32) = *(_DWORD *)(a1 + 56);
      v10[14] = a2;
      dispatch_retain(*(dispatch_object_t *)(a2 + 72));
      dispatch_retain(*(dispatch_object_t *)(a2 + 80));
      *(_OWORD *)(v10 + 7) = *(_OWORD *)(a2 + 72);
      *(void *)(a2 + 88) = v10;
    }
    v20[0] = 0;
    v20[1] = v20;
    v20[2] = 0x2000000000;
    v20[3] = 0;
    v18[0] = 0;
    v18[1] = v18;
    v18[2] = 0x2000000000;
    int v19 = 0;
    int v11 = *(NSObject **)(a2 + 64);
    v17[0] = MEMORY[0x1E4F14BE8];
    v17[1] = 0x40000000;
    v17[2] = __dispatch_write_block_invoke_3;
    void v17[3] = &unk_1E543D3B8;
    uint64_t v12 = *(void *)(a1 + 40);
    v17[4] = *(void *)(a1 + 32);
    v17[5] = v20;
    v17[6] = v18;
    v17[7] = v12;
    dispatch_channel_async(v11, v17);
    uint64_t v13 = *(NSObject **)(a1 + 48);
    size_t size = dispatch_data_get_size(v13);
    v16[0] = MEMORY[0x1E4F14BE8];
    v16[1] = 0x40000000;
    v16[2] = __dispatch_write_block_invoke_5;
    v16[3] = &unk_1E543D3E0;
    v16[4] = v20;
    v16[5] = v18;
    uint64_t v15 = _dispatch_operation_create(1, (uint64_t)v10, 0, size, v13, (uint64_t)&unk_1EB1CE780, v16);
    if (v15) {
      _dispatch_operation_enqueue(v15, 1u, *(id *)(a1 + 48));
    }
    _dispatch_objc_release(*(id *)(a1 + 48));
    _Block_object_dispose(v18, 8);
    _Block_object_dispose(v20, 8);
  }
}

uint64_t __dispatch_write_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, *(unsigned int *)(a1 + 40));
}

atomic_uint *__dispatch_write_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = __dispatch_write_block_invoke_4;
  block[3] = &unk_1E543D390;
  long long v7 = *(_OWORD *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  dispatch_channel_async(v2, block);
  uint64_t result = *(atomic_uint **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void __dispatch_write_block_invoke_4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    _dispatch_objc_release(v2);
  }
}

id __dispatch_write_block_invoke_5(id result, int a2, id a3, int a4)
{
  if (a2)
  {
    uint64_t v6 = (uint64_t)result;
    if (a3)
    {
      uint64_t result = _dispatch_objc_retain(a3);
      *(void *)(*(void *)(*(void *)(v6 + 32) + 8) + 24) = a3;
    }
    *(_DWORD *)(*(void *)(*(void *)(v6 + 40) + 8) + 24) = a4;
  }
  return result;
}

void dispatch_write_f(dispatch_fd_t a1, NSObject *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  v5[0] = MEMORY[0x1E4F14BE8];
  v5[1] = 0x40000000;
  void v5[2] = __dispatch_write_f_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_41;
  v5[4] = a5;
  void v5[5] = a4;
  dispatch_write(a1, a2, a3, v5);
}

uint64_t __dispatch_write_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void _dispatch_operation_dispose(uint64_t a1, const char *a2)
{
  if (*(void *)(a1 + 144))
  {
    _dispatch_operation_deliver_data(a1, 2);
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 144) + 80));
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 144) + 64));
  }
  int v3 = *(atomic_uint **)(a1 + 136);
  if (v3)
  {
    if (v3[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        _os_object_dispose(v3, a2);
      }
    }
  }
  uint64_t v5 = *(NSObject **)(a1 + 152);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *(void **)(a1 + 176);
  if (v6 && !*(_DWORD *)(a1 + 56)) {
    free(v6);
  }
  long long v7 = *(void **)(a1 + 224);
  if (v7) {
    _dispatch_objc_release(v7);
  }
  uint64_t v8 = *(void **)(a1 + 232);
  if (v8) {
    _dispatch_objc_release(v8);
  }
  dispatch_fd_t v9 = *(NSObject **)(a1 + 48);
  if (v9) {
    dispatch_release(v9);
  }
  int v10 = *(const void **)(a1 + 128);

  _Block_release(v10);
}

void _dispatch_operation_deliver_data(uint64_t a1, int a2)
{
  size_t v4 = *(void *)(a1 + 200);
  size_t v5 = v4 + *(void *)(a1 + 208);
  if ((a2 & 3) != 0)
  {
    *(_DWORD *)(a1 + 184) = 0;
LABEL_7:
    int v8 = *(_DWORD *)(a1 + 120);
    if (v8)
    {
LABEL_11:
      int v7 = 1;
      goto LABEL_12;
    }
    if ((*(unsigned char *)(*(void *)(a1 + 136) + 120) & 2) != 0)
    {
      int v8 = 89;
      *(_DWORD *)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 89;
      goto LABEL_11;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_11;
  }
  int v6 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = 0;
  if (v6) {
    goto LABEL_7;
  }
  if (v5 >= *(void *)(a1 + 72)) {
    goto LABEL_9;
  }
  if (v4 < *(void *)(a1 + 192)) {
    return;
  }
  int v7 = 0;
  int v8 = 0;
LABEL_12:
  int v9 = *(_DWORD *)(a1 + 56);
  if (v9 == 1)
  {
    if (v7) {
      dispatch_data_t subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), v4, *(void *)(a1 + 112));
    }
    else {
      dispatch_data_t subrange = 0;
    }
    uint64_t v12 = *(void **)(a1 + 224);
    if (v12 && *(void *)(a1 + 200) == *(void *)(a1 + 192))
    {
      _dispatch_objc_release(v12);
      *(void *)(a1 + 224) = 0;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
      if (v7)
      {
        _dispatch_objc_retain(subrange);
        dispatch_data_t v13 = subrange;
      }
      else
      {
        dispatch_data_t v13 = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), *(void *)(a1 + 192), *(void *)(a1 + 112));
      }
      _dispatch_objc_release(*(id *)(a1 + 232));
      *(void *)(a1 + 232) = v13;
      if (!v7) {
        goto LABEL_35;
      }
      goto LABEL_28;
    }
  }
  else
  {
    if (v9) {
      return;
    }
    if (v4)
    {
      int v10 = dispatch_data_create(*(const void **)(a1 + 176), v4, 0, &__block_literal_global);
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 20_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
      dispatch_data_t subrange = dispatch_data_create_concat(*(dispatch_data_t *)(a1 + 232), v10);
      _dispatch_objc_release(*(id *)(a1 + 232));
      _dispatch_objc_release(v10);
    }
    else
    {
      dispatch_data_t subrange = *(dispatch_data_t *)(a1 + 232);
    }
    uint64_t v14 = &_dispatch_data_empty;
    if (!v7) {
      uint64_t v14 = (__objc2_class **)subrange;
    }
    *(void *)(a1 + 232) = v14;
  }
  if (!v7)
  {
LABEL_35:
    *(void *)(a1 + 208) = v5;
    return;
  }
LABEL_28:
  if ((a2 & 8) != 0 && !dispatch_data_get_size(subrange)) {
    goto LABEL_35;
  }
  *(void *)(a1 + 208) = 0;
  int v15 = *(_DWORD *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 144);
  dispatch_suspend(*(dispatch_object_t *)(v17 + 64));
  uint64_t v18 = *(void *)(a1 + 136);
  if (*(_DWORD *)(v18 + 8) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  int v19 = *(NSObject **)(a1 + 48);
  v20[0] = MEMORY[0x1E4F14BE8];
  v20[1] = 0x40000000;
  v20[2] = ___dispatch_operation_deliver_data_block_invoke;
  v20[3] = &unk_1E543D7C8;
  int v21 = a2;
  int v22 = v15;
  int v23 = v8;
  void v20[4] = v16;
  v20[5] = subrange;
  v20[6] = v18;
  v20[7] = v17;
  dispatch_channel_async(v19, v20);
}

void _dispatch_disk_dispose(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (v1) {
    *(void *)(v1 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(a1 + 120);
  }
  **(void **)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v1;
  dispatch_release(*(dispatch_object_t *)(a1 + 72));
}

atomic_uint *___dispatch_io_init_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  v6[0] = MEMORY[0x1E4F14BE8];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___dispatch_io_init_block_invoke_2;
  v6[3] = &unk_1E543D450;
  v6[4] = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 48);
  dispatch_channel_async(v2, v6);
  uint64_t result = *(atomic_uint **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

uint64_t ___dispatch_io_init_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void ___dispatch_io_stop_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 56);
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = ___dispatch_io_stop_block_invoke_2;
  block[3] = &__block_descriptor_tmp_53;
  void block[4] = v1;
  dispatch_channel_async(v2, block);
}

atomic_uint *___dispatch_io_stop_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 112);
  if (v3)
  {
    _dispatch_fd_entry_cleanup_operations(*(void *)(v2 + 112), v2);
    uint64_t v4 = *(void *)(a1 + 32);
    if ((*(unsigned char *)(v4 + 120) & 1) == 0)
    {
      size_t v5 = *(void **)(v3 + 8);
      if (v5)
      {
        *size_t v5 = 0;
        uint64_t v4 = *(void *)(a1 + 32);
      }
      *(void *)(v4 + 112) = 0;
      dispatch_resume(*(dispatch_object_t *)(v3 + 64));
    }
  }
  else if (*(_DWORD *)(v2 + 124) != -1)
  {
    if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
    {
      if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed) < 1) {
        dispatch_set_target_queue_cold_2();
      }
      uint64_t v2 = *(void *)(a1 + 32);
    }
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_io_stop_block_invoke_3;
    block[3] = &__block_descriptor_tmp_52;
    void block[4] = v2;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_fds_lockq, block);
  }
  uint64_t result = *(atomic_uint **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, (const char *)v2);
    }
  }
  return result;
}

void _dispatch_fd_entry_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    if (a2
      && *(_DWORD *)(a2 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
    dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
    size_t v5 = *(NSObject **)(*(void *)(a1 + 56) + 72);
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_cleanup_operations_block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = a1;
    void block[5] = a2;
    dispatch_channel_async(v5, block);
  }
  else
  {
    char v6 = 1;
    do
    {
      char v7 = v6;
      int v8 = *(NSObject ***)(a1 + 8 * v4 + 40);
      if (v8)
      {
        if (a2
          && *(_DWORD *)(a2 + 8) != 0x7FFFFFFF
          && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed) <= 0)
        {
          dispatch_set_target_queue_cold_2();
        }
        dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
        int v9 = *v8;
        v10[0] = MEMORY[0x1E4F14BE8];
        v10[1] = 0x40000000;
        void v10[2] = ___dispatch_fd_entry_cleanup_operations_block_invoke_2;
        v10[3] = &__block_descriptor_tmp_56;
        v10[4] = v8;
        v10[5] = a2;
        void v10[6] = a1;
        dispatch_channel_async(v9, v10);
      }
      char v6 = 0;
      uint64_t v4 = 1;
    }
    while ((v7 & 1) != 0);
  }
}

void ___dispatch_io_stop_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 32);
  atomic_uint v3 = v2[31];
  uint64_t v4 = _dispatch_io_fds[v3 & 0x3F];
  if (v4)
  {
    while (*(_DWORD *)v4 != v3)
    {
      uint64_t v4 = *(void *)(v4 + 112);
      if (!v4) {
        goto LABEL_6;
      }
    }
    _dispatch_fd_entry_cleanup_operations(v4, (uint64_t)v2);
    uint64_t v2 = *(atomic_uint **)(a1 + 32);
  }
LABEL_6:
  if (v2[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v2, (const char *)v2);
    }
  }
}

atomic_uint *___dispatch_fd_entry_cleanup_operations_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    do
    {
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v4 = *(void *)(v4 + 240);
        if (!*(unsigned char *)(v6 + 160) && (!v5 || *(void *)(v6 + 136) == v5)) {
          break;
        }
        if (!v4) {
          goto LABEL_9;
        }
      }
      _dispatch_disk_complete_operation(v3, v6);
    }
    while (v4);
LABEL_9:
    uint64_t v2 = *(void *)(a1 + 32);
  }
  dispatch_resume(*(dispatch_object_t *)(v2 + 64));
  uint64_t result = *(atomic_uint **)(a1 + 40);
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        return (atomic_uint *)_os_object_dispose(result, v7);
      }
    }
  }
  return result;
}

atomic_uint *___dispatch_fd_entry_cleanup_operations_block_invoke_2(uint64_t *a1)
{
  _dispatch_stream_cleanup_operations(a1[4], a1[5]);
  dispatch_resume(*(dispatch_object_t *)(a1[6] + 64));
  uint64_t result = (atomic_uint *)a1[5];
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        return (atomic_uint *)_os_object_dispose(result, v2);
      }
    }
  }
  return result;
}

void _dispatch_stream_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    do
    {
      uint64_t v5 = *(void *)(v4 + 240);
      if (!a2 || *(void *)(v4 + 136) == a2) {
        _dispatch_stream_complete_operation(a1, v4);
      }
      uint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    do
    {
      uint64_t v7 = *(void *)(v6 + 240);
      if (!a2 || *(void *)(v6 + 136) == a2) {
        _dispatch_stream_complete_operation(a1, v6);
      }
      uint64_t v6 = v7;
    }
    while (v7);
  }
  if (*(unsigned char *)(a1 + 24) && !*(void *)(a1 + 48) && !*(void *)(a1 + 32))
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 8));
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void _dispatch_disk_complete_operation(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 64) == a2) {
    *(void *)(a1 + 64) = **(void **)(*(void *)(a2 + 248) + 8);
  }
  if (!*(void *)(a2 + 64))
  {
    uint64_t v3 = *(void **)(a2 + 256);
    uint64_t v4 = *(void **)(a2 + 264);
    if (v3)
    {
      v3[33] = v4;
      **(void **)(a2 + 264) = v3;
      v3[30] = 0;
      uint64_t v5 = *(void **)(a1 + 56);
      v3[31] = v5;
      *uint64_t v5 = v3;
      *(void *)(a1 + 56) = v3 + 30;
    }
    else
    {
      *(void *)(*(void *)(a2 + 144) + 104) = v4;
      *uint64_t v4 = 0;
    }
  }
  uint64_t v6 = *(void *)(a2 + 240);
  uint64_t v7 = *(void **)(a2 + 248);
  if (v6)
  {
    *(void *)(v6 + 248) = v7;
    uint64_t v7 = *(void **)(a2 + 248);
  }
  else
  {
    *(void *)(a1 + 56) = v7;
  }
  *uint64_t v7 = v6;
  int v8 = *(NSObject **)(a2 + 152);
  if (v8) {
    dispatch_source_cancel(v8);
  }
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose((void *)a2, (const char *)a2);
    }
  }
}

void _dispatch_stream_complete_operation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 240);
  if (v3) {
    uint64_t v4 = (void *)(v3 + 248);
  }
  else {
    uint64_t v4 = (void *)(a1 + 16 * *(void *)(a2 + 64) + 40);
  }
  *uint64_t v4 = *(void *)(a2 + 248);
  **(void **)(a2 + 248) = v3;
  if (*(void *)(a1 + 16) == a2) {
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v5 = *(NSObject **)(a2 + 152);
  if (v5) {
    dispatch_source_cancel(v5);
  }
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose((void *)a2, (const char *)a2);
    }
  }
}

atomic_uint *___dispatch_operation_create_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  v6[0] = MEMORY[0x1E4F14BE8];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___dispatch_operation_create_block_invoke_2;
  v6[3] = &unk_1E543D540;
  uint64_t v8 = *(void *)(a1 + 64);
  v6[4] = *(void *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  dispatch_channel_async(v2, v6);
  uint64_t result = *(atomic_uint **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v3);
    }
  }
  return result;
}

void ___dispatch_operation_create_block_invoke_2(void *a1)
{
  (*(void (**)(void))(a1[4] + 16))();
  uint64_t v3 = (atomic_uint *)a1[6];
  if (v3[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v3, v2);
    }
  }
  uint64_t v5 = (void *)a1[5];

  _dispatch_objc_release(v5);
}

void ___dispatch_operation_enqueue_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void **)(a1 + 40);

  _dispatch_objc_release(v2);
}

void ___dispatch_operation_enqueue_block_invoke_2(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v2, *(NSObject **)v3, *(id *)(a1 + 48)))
  {
    BOOL v4 = *(void *)(v3 + 48) || *(void *)(v3 + 32) != 0;
    v2[30] = 0;
    uint64_t v5 = v3 + 16 * v2[8];
    v2[31] = *(void *)(v5 + 40);
    **(void **)(v5 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v2;
    *(void *)(v5 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v2 + 30;
    if (!v4) {
      dispatch_channel_async_f(*(dispatch_queue_t *)v3, *(void **)v3, (dispatch_function_t)_dispatch_stream_queue_handler);
    }
  }
  uint64_t v6 = *(void **)(a1 + 48);

  _dispatch_objc_release(v6);
}

void ___dispatch_operation_enqueue_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v3, *(NSObject **)(v2 + 72), *(id *)(a1 + 48)))
  {
    if (v3[8])
    {
      v3[30] = 0;
      BOOL v4 = *(void **)(v2 + 56);
      v3[31] = v4;
      *BOOL v4 = v3;
      *(void *)(v2 + 56) = v3 + 30;
    }
    else
    {
      uint64_t v5 = v3[18];
      if (!*(void *)(v5 + 96))
      {
        v3[30] = 0;
        uint64_t v6 = *(void **)(v2 + 56);
        v3[31] = v6;
        void *v6 = v3;
        *(void *)(v2 + 56) = v3 + 30;
        uint64_t v5 = v3[18];
      }
      long long v7 = *(void **)(v5 + 104);
      v3[32] = 0;
      v3[33] = v7;
      *long long v7 = v3;
      *(void *)(v3[18] + 104) = v3 + 32;
    }
    _dispatch_disk_handler((unsigned char *)v2);
  }
  uint64_t v8 = *(void **)(a1 + 48);

  _dispatch_objc_release(v8);
}

uint64_t _dispatch_operation_should_enqueue(uint64_t a1, NSObject *a2, id a3)
{
  _dispatch_objc_retain(a3);
  *(void *)(a1 + 232) = a3;
  int v7 = *(_DWORD *)(*(void *)(a1 + 136) + 120);
  if ((v7 & 3) != 0)
  {
    if ((v7 & 2) != 0)
    {
      int v8 = 89;
      goto LABEL_5;
    }
  }
  else
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 144) + 24);
    if (v8)
    {
LABEL_5:
      *(_DWORD *)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v8;
      if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
      {
        int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0xFFFFFFFF, memory_order_release);
        if (add_explicit <= 1)
        {
          if (add_explicit != 1) {
            _os_object_retain_weak_cold_1();
          }
          _os_object_dispose((void *)a1, v6);
        }
      }
      return 0;
    }
  }
  if (*(void *)(a1 + 88))
  {
    int v11 = *(NSObject **)(a1 + 152);
    if (!v11)
    {
      int v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a2);
      dispatch_time_t v12 = dispatch_time(0, *(void *)(a1 + 88));
      dispatch_source_set_timer(v11, v12, *(void *)(a1 + 88), 0);
      v13[0] = MEMORY[0x1E4F14BE8];
      v13[1] = 0x40000000;
      v13[2] = ___dispatch_operation_timer_block_invoke;
      v13[3] = &__block_descriptor_tmp_63;
      v13[4] = v11;
      v13[5] = a1;
      dispatch_source_set_event_handler(v11, v13);
      *(void *)(a1 + 152) = v11;
    }
    dispatch_resume(v11);
  }
  return 1;
}

void _dispatch_stream_queue_handler(NSObject *a1)
{
  char context = dispatch_get_context(a1);
  if (context)
  {
    _dispatch_stream_handler((uint64_t)context);
  }
}

void ___dispatch_operation_timer_block_invoke(uint64_t a1)
{
  if (!dispatch_source_testcancel(*(dispatch_source_t *)(a1 + 32)))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(v2 + 96) & 1;
    if (*(unsigned char *)(v2 + 160)) {
      BOOL v4 = (*(void *)(v2 + 96) & 1) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      _dispatch_operation_deliver_data(v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 184) = v3;
    }
  }
}

void _dispatch_stream_handler(uint64_t a1)
{
  while (1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 64);
      if (v3)
      {
        if (v3 != 1) {
          return;
        }
        uint64_t v2 = *(void *)(v2 + 240);
        if (!v2)
        {
          uint64_t v2 = *(void *)(a1 + 48);
          if (!v2) {
            return;
          }
        }
      }
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (!(*(void *)(a1 + 48) | v4)) {
        return;
      }
      uint64_t v2 = v4 ? *(void *)(a1 + 32) : *(void *)(a1 + 48);
      if (!v2) {
        return;
      }
    }
    int v5 = *(_DWORD *)(*(void *)(v2 + 136) + 120);
    if ((v5 & 3) != 0) {
      break;
    }
    uint64_t v7 = *(void *)(v2 + 144);
    int v6 = *(_DWORD *)(v7 + 24);
    if (!v6) {
      goto LABEL_18;
    }
LABEL_16:
    *(_DWORD *)(v2 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v6;
    _dispatch_stream_complete_operation(a1, v2);
  }
  if ((v5 & 2) != 0)
  {
    int v6 = 89;
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(v2 + 144);
LABEL_18:
  *(void *)(a1 + 16) = v2;
  dispatch_suspend(*(dispatch_object_t *)(v7 + 64));
  if (*(void *)(v2 + 216)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = byte_1E9119950 == 0;
  }
  if (!v8) {
    _dispatch_operation_deliver_data(v2, 1);
  }
  switch(_dispatch_operation_perform(v2))
  {
    case 1u:
      goto LABEL_26;
    case 2u:
      _dispatch_operation_deliver_data(v2, 0);
      goto LABEL_27;
    case 3u:
      _dispatch_operation_deliver_data(v2, 9);
LABEL_26:
      _dispatch_stream_complete_operation(a1, v2);
LABEL_27:
      if (*(void *)(a1 + 48) || *(void *)(a1 + 32)) {
        dispatch_channel_async_f(*(dispatch_queue_t *)a1, *(void **)a1, (dispatch_function_t)_dispatch_stream_queue_handler);
      }
      goto LABEL_43;
    case 4u:
      _dispatch_stream_complete_operation(a1, v2);
      goto LABEL_31;
    case 5u:
LABEL_31:
      if (!*(void *)(a1 + 48) && !*(void *)(a1 + 32)) {
        goto LABEL_43;
      }
      *(unsigned char *)(a1 + 24) = 1;
      int v9 = *(NSObject **)(a1 + 8);
      if (v9) {
        goto LABEL_42;
      }
      int v10 = *(_DWORD *)(v2 + 56);
      if (!v10)
      {
        int v11 = &_dispatch_source_type_read;
        goto LABEL_40;
      }
      if (v10 == 1)
      {
        int v11 = &_dispatch_source_type_write;
LABEL_40:
        int v9 = dispatch_source_create((dispatch_source_type_t)v11, **(int **)(v2 + 144), 0, *(dispatch_queue_t *)a1);
        dispatch_set_context(v9, (void *)a1);
        dispatch_source_set_event_handler_f(v9, (dispatch_function_t)_dispatch_stream_source_handler);
        dispatch_data_t v13 = *(uint64_t (**)())(*(void *)(v2 + 144) + 64);
        v15[0] = (uint64_t (*)())MEMORY[0x1E4F14BE8];
        v15[1] = (uint64_t (*)())0x40000000;
        v15[2] = (uint64_t (*)())___dispatch_stream_source_block_invoke;
        v15[3] = (uint64_t (*)())&__block_descriptor_tmp_67;
        v15[4] = v13;
        dispatch_source_set_mandatory_cancel_handler((uint64_t)v9, v15);
        *(void *)(a1 + 8) = v9;
        goto LABEL_42;
      }
      int v9 = 0;
LABEL_42:
      dispatch_resume(v9);
LABEL_43:
      dispatch_resume(*(dispatch_object_t *)(v7 + 64));
      return;
    case 6u:
      _dispatch_stream_cleanup_operations(a1, *(void *)(v2 + 136));
      goto LABEL_43;
    case 7u:
      dispatch_suspend(*(dispatch_object_t *)(v7 + 64));
      dispatch_time_t v12 = *(NSObject **)(v7 + 72);
      v14[0] = MEMORY[0x1E4F14BE8];
      v14[1] = 0x40000000;
      v14[2] = ___dispatch_stream_handler_block_invoke;
      v14[3] = &__block_descriptor_tmp_64;
      v14[4] = v7;
      dispatch_channel_async(v12, v14);
      goto LABEL_43;
    default:
      goto LABEL_43;
  }
}

uint64_t _dispatch_operation_perform(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)(*(void *)(a1 + 136) + 120);
    if ((v2 & 3) == 0)
    {
      uint64_t v3 = *(void *)(a1 + 144) + 24;
      goto LABEL_8;
    }
  }
  else
  {
    LOBYTE(v2) = MEMORY[0x78];
    if ((MEMORY[0x78] & 3) == 0)
    {
      uint64_t v3 = 144;
LABEL_8:
      int v4 = *(_DWORD *)v3;
      if (*(_DWORD *)v3) {
        goto LABEL_36;
      }
      goto LABEL_9;
    }
  }
  if ((v2 & 2) != 0)
  {
    *(_DWORD *)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 89;
    return 6;
  }
LABEL_9:
  if (*(void *)(a1 + 176)) {
    goto LABEL_10;
  }
  unint64_t v11 = *(void *)(a1 + 80);
  unint64_t v12 = dispatch_io_defaults;
  int v13 = *(_DWORD *)(a1 + 56);
  if (v13 == 1)
  {
    if (dispatch_io_defaults >= v11) {
      uint64_t v21 = *(void *)(a1 + 80);
    }
    else {
      uint64_t v21 = dispatch_io_defaults;
    }
    *(void *)(a1 + 192) = 0;
    int v22 = *(NSObject **)(a1 + 232);
    v25[0] = MEMORY[0x1E4F14BE8];
    v25[1] = 0x40000000;
    v25[2] = ___dispatch_operation_perform_block_invoke;
    void v25[3] = &__block_descriptor_tmp_66;
    v25[4] = a1;
    v25[5] = v21;
    dispatch_data_apply(v22, v25);
    size_t v23 = *(void *)(a1 + 192);
    if (v23 > v11)
    {
      *(void *)(a1 + 192) = v11;
      size_t v23 = v11;
    }
    dispatch_data_t subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), 0, v23);
    *(void *)(a1 + 224) = dispatch_data_create_map(subrange, (const void **)(a1 + 176), 0);
    _dispatch_objc_release(subrange);
    goto LABEL_10;
  }
  if (v13) {
    goto LABEL_10;
  }
  size_t size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 232));
  if (v11 - size >= v12) {
    size_t v15 = v12;
  }
  else {
    size_t v15 = v11 - size;
  }
  uint64_t v16 = *(void *)(a1 + 112);
  if (v16 != -1)
  {
    size_t v17 = v16 - *(void *)(a1 + 216);
    if (v17 < v15) {
      size_t v15 = v17;
    }
  }
  *(void *)(a1 + 192) = v15;
  int v4 = malloc_type_posix_memalign((void **)(a1 + 176), *MEMORY[0x1E4F14C80], v15, 0x23812559uLL);
  if (!v4)
  {
LABEL_10:
    int v5 = *(_DWORD **)(a1 + 144);
    if (*v5 == -1)
    {
      int v4 = _dispatch_fd_entry_open((uint64_t)v5, *(void *)(a1 + 136));
      if (v4) {
        goto LABEL_36;
      }
    }
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      int v7 = *(_DWORD *)(a1 + 56);
      if (v7 == 1)
      {
        uint64_t v10 = *(void *)(a1 + 64);
        if (v10 == 1)
        {
          uint64_t NOCANCEL = pwrite_NOCANCEL();
        }
        else
        {
          if (v10) {
            goto LABEL_23;
          }
          uint64_t NOCANCEL = write_NOCANCEL();
        }
      }
      else
      {
        if (v7) {
          goto LABEL_23;
        }
        uint64_t v8 = *(void *)(a1 + 64);
        if (v8 == 1)
        {
          uint64_t NOCANCEL = pread_NOCANCEL();
        }
        else
        {
          if (v8) {
            goto LABEL_23;
          }
          uint64_t NOCANCEL = read_NOCANCEL();
        }
      }
      if (NOCANCEL != -1)
      {
        if (!NOCANCEL) {
          return 3;
        }
        *(void *)(a1 + 200) += NOCANCEL;
        uint64_t v20 = *(void *)(a1 + 216) + NOCANCEL;
        *(void *)(a1 + 216) = v20;
        if (v20 == *(void *)(a1 + 112)) {
          return 1;
        }
        else {
          return 2;
        }
      }
LABEL_23:
      int v4 = **(_DWORD **)(StatusReg + 8);
    }
    while (v4 == 4);
  }
LABEL_36:
  if (v4 != 35)
  {
    *(_DWORD *)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v4;
    if (v4 != 89)
    {
      if (v4 != 9) {
        return 1;
      }
      int v19 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 144) + 24), (unsigned int *)&v19, 9u, memory_order_relaxed, memory_order_relaxed);
      return 7;
    }
    return 6;
  }
  if (!*(_DWORD *)(a1 + 56)
    && *(void *)(a1 + 216)
    && *(void *)(a1 + 136) == *(void *)(*(void *)(a1 + 144) + 88))
  {
    return 4;
  }
  else
  {
    return 5;
  }
}

void ___dispatch_stream_handler_block_invoke(uint64_t a1)
{
  _dispatch_fd_entry_cleanup_operations(*(void *)(a1 + 32), 0);
  int v2 = *(NSObject **)(*(void *)(a1 + 32) + 64);

  dispatch_resume(v2);
}

BOOL ___dispatch_operation_perform_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 192);
  unint64_t v7 = v6 + a5;
  if (!v6 || (unint64_t v8 = *(void *)(a1 + 40), v7 <= v8))
  {
    *(void *)(v5 + 192) = v7;
    unint64_t v8 = *(void *)(a1 + 40);
  }
  return v7 < v8;
}

uint64_t _dispatch_stream_source_handler(uint64_t a1)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 8));
  *(unsigned char *)(a1 + 24) = 0;

  return _dispatch_stream_handler(a1);
}

void ___dispatch_stream_source_block_invoke(uint64_t a1)
{
}

void _dispatch_disk_handler(unsigned char *context)
{
  if (context[108]) {
    return;
  }
  unint64_t v3 = *((void *)context + 10);
  unint64_t v2 = *((void *)context + 11);
  unint64_t v4 = v2;
  if (v2 <= v3) {
    unint64_t v4 = *((void *)context + 16) + v2;
  }
  if (v3 <= v4)
  {
    while (1)
    {
      unint64_t v5 = v3 % *((void *)context + 16);
      if (*(void *)&context[8 * v5 + 136] || (uint64_t v6 = *((void *)context + 6)) == 0)
      {
LABEL_30:
        unint64_t v2 = *((void *)context + 11);
        break;
      }
      uint64_t v7 = *((void *)context + 8);
      uint64_t v8 = v7;
      if (v7)
      {
        do
        {
          if (*(void *)(v8 + 240)) {
            uint64_t v8 = *(void *)(v8 + 240);
          }
          else {
            uint64_t v8 = *((void *)context + 6);
          }
          if (*(unsigned char *)(v8 + 160)) {
            BOOL v9 = v8 == v7;
          }
          else {
            BOOL v9 = 1;
          }
        }
        while (!v9);
        if (*(unsigned char *)(v8 + 160)) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v8 = *((void *)context + 6);
        if (*(unsigned char *)(v6 + 160)) {
          goto LABEL_30;
        }
      }
      *((void *)context + 8) = v8;
      int v10 = *(_DWORD *)(*(void *)(v8 + 136) + 120);
      if ((v10 & 3) != 0)
      {
        if ((v10 & 2) == 0) {
          goto LABEL_25;
        }
        int v11 = 89;
      }
      else
      {
        int v11 = *(_DWORD *)(*(void *)(v8 + 144) + 24);
        if (!v11)
        {
LABEL_25:
          if (*(_DWORD *)(v8 + 8) != 0x7FFFFFFF)
          {
            if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed) < 1) {
              dispatch_set_target_queue_cold_2();
            }
            unint64_t v5 = v3 % *((void *)context + 16);
          }
          *(void *)&context[8 * v5 + 136] = v8;
          *(unsigned char *)(v8 + 16_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 1;
          ++v3;
          goto LABEL_29;
        }
      }
      *(_DWORD *)(v8 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v11;
      _dispatch_disk_complete_operation((uint64_t)context, v8);
LABEL_29:
      if (v3 > v4) {
        goto LABEL_30;
      }
    }
  }
  *((void *)context + 1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v3 % *((void *)context + 16);
  uint64_t v12 = *(void *)&context[8 * v2 + 136];
  if (v12)
  {
    context[108] = 1;
    int v13 = *(NSObject **)(v12 + 24);
    dispatch_channel_async_f(v13, context, (dispatch_function_t)_dispatch_disk_perform);
  }
}

void _dispatch_disk_perform(void *a1)
{
  uint64_t v2 = dispatch_io_defaults;
  unint64_t v3 = a1[12];
  unint64_t v4 = a1[10];
  if (v4 <= v3) {
    v4 += a1[16];
  }
  unint64_t v5 = (unint64_t *)MEMORY[0x1E4F14C80];
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    unint64_t v7 = v3 % a1[16];
    uint64_t v8 = a1[v7 + 17];
    if (!v8) {
      break;
    }
    if (*(_DWORD *)(v8 + 56) != 1)
    {
      BOOL v9 = *(_DWORD **)(v8 + 144);
      if (*v9 != -1 || !_dispatch_fd_entry_open((uint64_t)v9, *(void *)(v8 + 136)))
      {
        if (*(void *)(v8 + 216)) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = byte_1E9119950 == 0;
        }
        if (!v10) {
          _dispatch_operation_deliver_data(v8, 1);
        }
        if (v4 - v3 == 1 && !a1[a1[10] + 17]) {
          v2 <<= *(void *)(v8 + 168) == 0;
        }
        int v11 = *(_DWORD *)(*(void *)(v8 + 136) + 120);
        if ((v11 & 3) != 0)
        {
          if ((v11 & 2) == 0) {
            goto LABEL_23;
          }
        }
        else if (!*(_DWORD *)(*(void *)(v8 + 144) + 24))
        {
LABEL_23:
          uint64_t v28 = 0;
          int64_t v12 = *(void *)(v8 + 168);
          unint64_t v13 = *v5;
          unint64_t v14 = *(void *)(v8 + 104) + v2;
          if (v12 <= (uint64_t)(v14 + *(void *)(v8 + 216) + *v5))
          {
            if (v12)
            {
              int v15 = v2;
            }
            else
            {
              unint64_t v16 = v14 % v13;
              int v17 = v13 - v14 % v13;
              if (v16) {
                int v18 = v17;
              }
              else {
                int v18 = 0;
              }
              int v15 = v18 + v2;
              int64_t v12 = *(void *)(v8 + 104);
            }
            LODWORD(v28) = v15;
            int64_t v27 = v12;
            *(void *)(v8 + 168) = v12 + v15;
            while (fcntl_NOCANCEL() == -1)
            {
              unsigned int v19 = **(_DWORD **)(StatusReg + 8);
              if (v19 != 4)
              {
                if (v19 > 0x2D || ((1 << v19) & 0x200008000001) == 0) {
                  _dispatch_bug(2308, (int)v19);
                }
                break;
              }
            }
          }
        }
      }
    }
    if (++v3 >= v4)
    {
      unint64_t v7 = v3 % a1[16];
      break;
    }
  }
  a1[12] = v7;
  uint64_t v21 = a1[a1[11] + 17];
  int v22 = _dispatch_operation_perform(v21);
  uint64_t v23 = a1[11];
  a1[v23 + 17] = 0;
  a1[11] = (unint64_t)(v23 + 1) % a1[16];
  int v24 = a1[9];
  block[0] = MEMORY[0x1E4F14BE8];
  block[1] = 0x40000000;
  block[2] = ___dispatch_disk_perform_block_invoke;
  block[3] = &__block_descriptor_tmp_68;
  int v26 = v22;
  void block[4] = v21;
  void block[5] = a1;
  dispatch_channel_async(v24, block);
}

atomic_uint *___dispatch_disk_perform_block_invoke(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      goto LABEL_4;
    case 2:
      _dispatch_operation_deliver_data(*(void *)(a1 + 32), 0);
      break;
    case 3:
      _dispatch_operation_deliver_data(*(void *)(a1 + 32), 9);
LABEL_4:
      _dispatch_disk_complete_operation(*(void *)(a1 + 40), *(void *)(a1 + 32));
      break;
    case 6:
      _dispatch_disk_cleanup_operations(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 136));
      break;
    case 7:
      uint64_t v2 = *(void *)(a1 + 40);
      uint64_t v3 = *(void *)(v2 + 48);
      if (v3)
      {
        do
        {
          uint64_t v4 = *(void *)(v3 + 240);
          _dispatch_disk_complete_operation(v2, v3);
          uint64_t v3 = v4;
        }
        while (v4);
      }
      break;
    default:
      break;
  }
  unint64_t v5 = *(unsigned char **)(a1 + 40);
  *(unsigned char *)(*(void *)(a1 + 32) + 16_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = 0;
  v5[108] = 0;
  _dispatch_disk_handler(v5);
  uint64_t result = *(atomic_uint **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, v6);
    }
  }
  return result;
}

void _dispatch_disk_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    do
    {
      uint64_t v5 = *(void *)(v3 + 240);
      if (!a2 || *(void *)(v3 + 136) == a2) {
        _dispatch_disk_complete_operation(a1, v3);
      }
      uint64_t v3 = v5;
    }
    while (v5);
  }
}

void ___dispatch_fd_entry_init_async_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  uint64_t v3 = (void *)((char *)&_dispatch_io_fds + 8 * (v2 & 0x3F));
  uint64_t v4 = (void *)*v3;
  if (*v3)
  {
    while (*(_DWORD *)v4 != v2)
    {
      uint64_t v4 = (void *)v4[14];
      if (!v4) {
        goto LABEL_4;
      }
    }
    dispatch_suspend((dispatch_object_t)v4[8]);
  }
  else
  {
LABEL_4:
    uint64_t v5 = _dispatch_fd_entry_create(_dispatch_io_fds_lockq);
    uint64_t v4 = v5;
    *(_DWORD *)uint64_t v5 = v2;
    uint64_t v6 = (void *)*v3;
    v5[14] = *v3;
    if (v6) {
      v6[15] = v5 + 14;
    }
    *uint64_t v3 = v5;
    v5[15] = v3;
    v5[9] = dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0);
    v4[10] = dispatch_group_create();
    unint64_t v7 = v4[9];
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke;
    block[3] = &__block_descriptor_tmp_72;
    int v16 = v2;
    void block[4] = v4;
    dispatch_channel_async(v7, block);
    uint64_t v8 = v4[8];
    v14[0] = MEMORY[0x1E4F14BE8];
    v14[1] = 0x40000000;
    v14[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_3;
    v14[3] = &__block_descriptor_tmp_74;
    v14[4] = v4;
    dispatch_channel_async(v8, v14);
    BOOL v9 = v4[8];
    v12[0] = MEMORY[0x1E4F14BE8];
    v12[1] = 0x40000000;
    _OWORD v12[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_5;
    v12[3] = &__block_descriptor_tmp_75;
    v12[4] = v4;
    int v13 = v2;
    dispatch_channel_async(v9, v12);
  }
  BOOL v10 = v4[9];
  v11[0] = MEMORY[0x1E4F14BE8];
  v11[1] = 0x40000000;
  v11[2] = ___dispatch_fd_entry_init_async_block_invoke_2;
  v11[3] = &unk_1E543D698;
  v11[4] = *(void *)(a1 + 32);
  void v11[5] = v4;
  dispatch_channel_async(v10, v11);
}

void ___dispatch_fd_entry_init_async_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  int v2 = *(NSObject **)(*(void *)(a1 + 40) + 64);

  dispatch_resume(v2);
}

void *_dispatch_fd_entry_create(NSObject *a1)
{
  int v2 = _dispatch_calloc(1uLL, 0x80uLL);
  uint64_t v3 = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.closeq", 0, a1);
  v2[8] = v3;
  dispatch_suspend(v3);
  return v2;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke(uint64_t a1)
{
  memset(&v22.st_uid, 0, 128);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)&v22.st_dev = *(_OWORD *)&v22.st_blksize;
  while (fstat(*(_DWORD *)(a1 + 40), &v22) == -1)
  {
    int v3 = **(_DWORD **)(StatusReg + 8);
    if (v3 != 4)
    {
      if (v3)
      {
        *(_DWORD *)(*(void *)(a1 + 32) + 24) = v3;
        return;
      }
      break;
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(_DWORD *)(v4 + 32) = v22.st_dev;
  *(_WORD *)(v4 + 36) = v22.st_mode;
  unint64_t v5 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    int v6 = fcntl_NOCANCEL();
    if (v6 != -1) {
      break;
    }
    int v7 = **(_DWORD **)(v5 + 8);
    if (v7 != 4)
    {
      if (v7) {
        _dispatch_bug(1471, v7);
      }
      break;
    }
  }
  if ((v22.st_mode & 0xF000) == 0x1000)
  {
    unint64_t v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (fcntl_NOCANCEL() != -1)
      {
        unint64_t v11 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          int v12 = fcntl_NOCANCEL();
          if (v12 != -1)
          {
            int v13 = v12;
            goto LABEL_22;
          }
          int v9 = **(_DWORD **)(v11 + 8);
        }
        while (v9 == 4);
        if (!v9) {
          goto LABEL_21;
        }
        uint64_t v10 = 1484;
        goto LABEL_42;
      }
      int v9 = **(_DWORD **)(v8 + 8);
    }
    while (v9 == 4);
    if (!v9) {
      goto LABEL_21;
    }
    uint64_t v10 = 1477;
LABEL_42:
    _dispatch_bug(v10, v9);
  }
LABEL_21:
  int v13 = -1;
LABEL_22:
  if ((v22.st_mode & 0xF000) == 0x8000)
  {
    if (v6 != -1)
    {
      unint64_t v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL() == -1)
      {
        int v15 = **(_DWORD **)(v14 + 8);
        if (v15 != 4)
        {
          if (v15)
          {
            _dispatch_bug(1496, v15);
            int v6 = -1;
          }
          break;
        }
      }
    }
    int st_dev_high = HIBYTE(v22.st_dev);
    dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 72));
    if (_dispatch_io_init_pred != -1) {
      dispatch_once_f(&_dispatch_io_init_pred, 0, (dispatch_function_t)_dispatch_io_queues_init);
    }
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_2;
    block[3] = &__block_descriptor_tmp_71;
    void block[4] = *(void *)(a1 + 32);
    int v21 = st_dev_high;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }
  else
  {
    if (v6 != -1)
    {
      unint64_t v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL() == -1)
      {
        int v18 = **(_DWORD **)(v17 + 8);
        if (v18 != 4)
        {
          if (v18)
          {
            _dispatch_bug(1516, v18);
            int v6 = -1;
          }
          break;
        }
      }
    }
    _dispatch_stream_init(*(void *)(a1 + 32));
  }
  uint64_t v19 = *(void *)(a1 + 32);
  *(_DWORD *)(v19 + 16) = v6;
  *(_DWORD *)(v19 + 2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v13;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_2(uint64_t a1)
{
  _dispatch_disk_init(*(dispatch_queue_t *)(a1 + 32), *(_DWORD *)(a1 + 40));
  int v2 = *(NSObject **)(*(void *)(a1 + 32) + 72);

  dispatch_resume(v2);
}

dispatch_queue_t _dispatch_disk_init(dispatch_queue_t result, int a2)
{
  dispatch_queue_t v3 = result;
  uint64_t v10 = *MEMORY[0x1E4F14BF8];
  uint64_t v4 = (uint64_t *)((char *)&_dispatch_io_devs + 8 * (a2 & 0x3F));
  uint64_t v5 = *v4;
  if (*v4)
  {
    while (*(_DWORD *)(v5 + 104) != a2)
    {
      uint64_t v5 = *(void *)(v5 + 112);
      if (!v5) {
        goto LABEL_4;
      }
    }
    if (*(_DWORD *)(v5 + 8) != 0x7FFFFFFF
      && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed) <= 0)
    {
      dispatch_set_target_queue_cold_2();
    }
  }
  else
  {
LABEL_4:
    uint64_t v6 = qword_1E9119948;
    uint64_t v5 = _dispatch_object_alloc(OS_dispatch_disk, 8 * qword_1E9119948 + 136);
    *(void *)(v5 + 16) = -1985229329;
    *(_DWORD *)(v5 + 12) = 0;
    *(void *)(v5 + 128) = v6;
    *(void *)(v5 + 24) = &unk_1EB1CE780;
    *(_DWORD *)(v5 + 104) = a2;
    *(void *)(v5 + 48) = 0;
    *(void *)(v5 + 56) = v5 + 48;
    *(void *)(v5 + 64) = 0;
    snprintf(__str, 0x2DuLL, "com.apple.libdispatch-io.deviceq.%d", a2);
    uint64_t result = dispatch_queue_create(__str, 0);
    *(void *)(v5 + 72) = result;
    uint64_t v7 = *v4;
    *(void *)(v5 + 112) = *v4;
    if (v7) {
      *(void *)(v7 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v5 + 112;
    }
    *uint64_t v4 = v5;
    *(void *)(v5 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v4;
  }
  v3[12].int isa = 0;
  dispatch_queue_t v8 = v3 + 12;
  v8[-5].int isa = (Class)v5;
  v8[1].int isa = (Class)v8;
  return result;
}

void _dispatch_stream_init(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = _dispatch_calloc(1uLL, 0x40uLL);
    uint64_t v6 = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.streamq", 0, (dispatch_queue_t)&unk_1EB1CE780);
    *uint64_t v5 = v6;
    dispatch_set_context(v6, v5);
    char v3 = 0;
    void v5[6] = 0;
    v5[7] = v5 + 6;
    v5[4] = 0;
    void v5[5] = v5 + 4;
    *(void *)(a1 + 8 * v2 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v5;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56);
  if (v2)
  {
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_4;
    block[3] = &__block_descriptor_tmp_73;
    void block[4] = v2;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }
  else
  {
    _dispatch_stream_dispose(*(void *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(void *)(a1 + 32), 1u);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 112);
  if (v4)
  {
    *(void *)(v4 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = *(void *)(v3 + 120);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 112);
  }
  **(void **)(v3 + 12_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v4;
}

void _dispatch_stream_dispose(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(dispatch_object_t **)(a1 + 8 * a2 + 40);
  if (v2)
  {
    if (v2[1])
    {
      dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
      dispatch_source_cancel(v2[1]);
      dispatch_resume(v2[1]);
      dispatch_release(v2[1]);
    }
    dispatch_set_context(*v2, 0);
    dispatch_release(*v2);
    free(v2);
  }
}

atomic_uint *___dispatch_fd_entry_create_with_fd_block_invoke_4(uint64_t a1, const char *a2)
{
  uint64_t result = *(atomic_uint **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      return (atomic_uint *)_os_object_dispose(result, a2);
    }
  }
  return result;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_5(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 64));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 72));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 16) != -1)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL() == -1 && **(_DWORD **)(StatusReg + 8) == 4)
      ;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(_DWORD *)(v2 + 20) != -1)
  {
    unint64_t v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (fcntl_NOCANCEL() == -1 && **(_DWORD **)(v4 + 8) == 4)
      ;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v2 + 88);
  if (v5)
  {
    *(void *)(v5 + 112) = 0;
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 88));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  free((void *)v2);
}

uint64_t ___dispatch_fd_entry_create_with_path_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  if (!*((void *)v2 + 7))
  {
    _dispatch_stream_dispose(*(void *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(void *)(a1 + 32), 1u);
    uint64_t v2 = *(unsigned int **)(a1 + 32);
  }
  uint64_t result = *v2;
  if (result != -1)
  {
    if (v2[7]) {
      uint64_t result = guarded_close_np();
    }
    else {
      uint64_t result = close_NOCANCEL();
    }
  }
  uint64_t v4 = **(void **)(*(void *)(a1 + 32) + 8);
  if (v4) {
    *(void *)(v4 + 112) = 0;
  }
  return result;
}

void ___dispatch_fd_entry_create_with_path_block_invoke_2(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 64));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 72));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 80));
  free(*(void **)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void **)(a1 + 32);

  free(v2);
}

void ___dispatch_operation_deliver_data_block_invoke(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 64) & 2) != 0
    && !*(_DWORD *)(a1 + 68)
    && *(_DWORD *)(a1 + 72)
    && dispatch_data_get_size(*(dispatch_data_t *)(a1 + 40)))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release);
    if (add_explicit <= 1)
    {
      if (add_explicit != 1) {
        _os_object_retain_weak_cold_1();
      }
      _os_object_dispose(v3, v2);
    }
  }
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 56) + 64));
  uint64_t v5 = *(void **)(a1 + 40);

  _dispatch_objc_release(v5);
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return v0;
}

void _dispatch_data_init_with_bytes(void *a1, mach_vm_address_t a2, mach_vm_size_t a3, void *aBlock)
{
  mach_vm_size_t v4 = a3;
  mach_vm_address_t v5 = a2;
  if (!a2 || !a3)
  {
    if (aBlock)
    {
      uint64_t v7 = _dispatch_Block_copy(aBlock);
      _dispatch_data_destroy_buffer(v5, v4, 0, v7);
    }
    mach_vm_address_t v5 = 0;
    mach_vm_size_t v4 = 0;
    aBlocatomic_ullong k = &__block_literal_global_4130;
  }
  a1[5] = aBlock;
  a1[6] = v4;
  a1[4] = v5;
}

void _dispatch_data_destroy_buffer(mach_vm_address_t address, mach_vm_size_t size, NSObject *a3, void *context)
{
  if (&__block_literal_global == context)
  {
    free((void *)address);
  }
  else if (&__block_literal_global_4130 != context)
  {
    if (&__block_literal_global_4134 == context)
    {
      mach_vm_deallocate(*MEMORY[0x1E4F14C48], address, size);
    }
    else
    {
      if (a3) {
        mach_vm_size_t v4 = a3;
      }
      else {
        mach_vm_size_t v4 = &unk_1EB1CE780;
      }
      dispatch_channel_async_f(v4, context, (dispatch_function_t)_dispatch_call_block_and_release);
    }
  }
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  uint64_t v7 = (void *)buffer;
  if (buffer && size)
  {
    if (destructor)
    {
      if (&__block_literal_global_4138 != destructor)
      {
        dispatch_queue_t v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, 64);
        v8[7].int isa = 0;
        int v9 = (objc_class *)_dispatch_Block_copy(destructor);
        goto LABEL_16;
      }
      size_t v14 = size + 64;
      if (size < 0xFFFFFFFFFFFFFFC0)
      {
        dispatch_queue_t v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, v14);
        v8[7].int isa = 0;
      }
      else
      {
        dispatch_queue_t v8 = 0;
      }
      int v12 = v8 + 8;
      memcpy(&v8[8], v7, size);
      int v13 = (const dispatch_block_t *)&_dispatch_data_destructor_none;
    }
    else
    {
      unint64_t v11 = malloc_type_malloc(size, 0xF1E95671uLL);
      if (!v11) {
        return 0;
      }
      int v12 = v11;
      memcpy(v11, v7, size);
      dispatch_queue_t v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, 64);
      v8[7].int isa = 0;
      int v13 = &_dispatch_data_destructor_free;
    }
    int v9 = (objc_class *)*v13;
    uint64_t v7 = v12;
LABEL_16:
    v8[5].int isa = v9;
    v8[6].int isa = (Class)size;
    v8[4].int isa = (Class)v7;
    if (queue)
    {
      if (LODWORD(queue[1].isa) != 0x7FFFFFFF
        && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&queue[1], 1u, memory_order_relaxed) <= 0)
      {
        dispatch_set_target_queue_cold_2();
      }
      v8[1].int isa = (Class)queue;
    }
    return v8;
  }
  if (destructor)
  {
    uint64_t v10 = _dispatch_Block_copy(destructor);
    _dispatch_data_destroy_buffer((mach_vm_address_t)v7, size, queue, v10);
  }
  return (dispatch_data_t)&_dispatch_data_empty;
}

dispatch_data_t dispatch_data_create_f(const void *a1, size_t a2, NSObject *a3, void *a4)
{
  if (a4)
  {
    if (&__block_literal_global != (_UNKNOWN *)a4
      && &__block_literal_global_4130 != (_UNKNOWN *)a4
      && &__block_literal_global_4134 != (_UNKNOWN *)a4
      && &__block_literal_global_4138 != (_UNKNOWN *)a4)
    {
      v8[0] = MEMORY[0x1E4F14BE8];
      v8[1] = 0x40000000;
      v8[2] = __dispatch_data_create_f_block_invoke;
      v8[3] = &__block_descriptor_tmp_1;
      v8[4] = a4;
      v8[5] = a1;
      a4 = v8;
    }
  }
  return dispatch_data_create(a1, a2, a3, a4);
}

uint64_t __dispatch_data_create_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

__objc2_class **dispatch_data_create_alloc(unint64_t a1, __objc2_class ***a2)
{
  if (!a1)
  {
    mach_vm_address_t v5 = 0;
    uint64_t result = &_dispatch_data_empty;
    if (!a2) {
      return result;
    }
    goto LABEL_6;
  }
  if (a1 < 0xFFFFFFFFFFFFFFC0)
  {
    uint64_t result = (__objc2_class **)_dispatch_object_alloc_bridged(OS_dispatch_data, a1 + 64);
    result[7] = 0;
  }
  else
  {
    uint64_t result = 0;
  }
  mach_vm_address_t v5 = result + 8;
  result[5] = (__objc2_class *)&__block_literal_global_4130;
  result[6] = (__objc2_class *)a1;
  result[4] = (__objc2_class *)(result + 8);
  if (a2) {
LABEL_6:
  }
    *a2 = v5;
  return result;
}

void _dispatch_data_dispose(void *a1)
{
  if (a1[7])
  {
    unint64_t v2 = 0;
    uint64_t v3 = (void **)(a1 + 8);
    do
    {
      mach_vm_size_t v4 = *v3;
      v3 += 3;
      _dispatch_objc_release(v4);
      ++v2;
      unint64_t v5 = a1[7];
      if (v5 <= 1) {
        unint64_t v5 = 1;
      }
    }
    while (v2 < v5);
    uint64_t v6 = (void *)a1[4];
    free(v6);
  }
  else
  {
    dispatch_queue_t v8 = (void *)a1[5];
    mach_vm_size_t v7 = a1[6];
    int v9 = a1[1];
    mach_vm_address_t v10 = a1[4];
    _dispatch_data_destroy_buffer(v10, v7, v9, v8);
  }
}

atomic_uint *_dispatch_data_set_target_queue(uint64_t a1, const char *a2)
{
  unint64_t v2 = (const char *)&unk_1EB1CE780;
  if (a2) {
    unint64_t v2 = a2;
  }
  if (*((_DWORD *)v2 + 2) != 0x7FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)v2 + 2, 1u, memory_order_relaxed) <= 0)
  {
    dispatch_set_target_queue_cold_2();
  }
  uint64_t result = (atomic_uint *)atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 24), (unint64_t)v2, memory_order_release);
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      int add_explicit = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release);
      if (add_explicit <= 1)
      {
        if (add_explicit != 1) {
          _os_object_retain_weak_cold_1();
        }
        return (atomic_uint *)_os_object_dispose(result, a2);
      }
    }
  }
  return result;
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return (size_t)data[6].isa;
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  dispatch_data_t v2 = data2;
  Class isa = data1[6].isa;
  if (!isa) {
    goto LABEL_15;
  }
  Class v5 = data2[6].isa;
  if (!v5)
  {
    dispatch_data_t v2 = data1;
LABEL_15:
    _dispatch_objc_retain(v2);
    return v2;
  }
  Class v6 = data1[7].isa;
  if ((unint64_t)v6 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = (uint64_t)data1[7].isa;
  }
  unint64_t v8 = (unint64_t)data2[7].isa;
  if (v8 <= 1) {
    unint64_t v8 = 1;
  }
  int v9 = 0;
  unint64_t v10 = v7 + v8;
  if (!__CFADD__(v7, v8))
  {
    if (is_mul_ok(v10, 0x18uLL) && 24 * v10 < 0xFFFFFFFFFFFFFFC0)
    {
      int v9 = _dispatch_object_alloc_bridged(OS_dispatch_data, 24 * v10 + 64);
      v9[7].Class isa = (Class)v10;
      Class v5 = v2[6].isa;
      Class isa = data1[6].isa;
      Class v6 = data1[7].isa;
    }
    v9[6].Class isa = (Class)((char *)isa + (void)v5);
    if (v6)
    {
      memcpy(&v9[8], &data1[8], 24 * (void)v6);
    }
    else
    {
      Class v11 = data1[6].isa;
      v9[9].Class isa = 0;
      v9[10].Class isa = v11;
      v9[8].Class isa = (Class)data1;
    }
    Class v12 = v2[7].isa;
    unint64_t v13 = (unint64_t)data1[7].isa;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    if (v12)
    {
      memcpy(&v9[3 * v13 + 8], &v2[8], 24 * (void)v12);
    }
    else
    {
      Class v14 = v2[6].isa;
      int v15 = &v9[3 * v13];
      v15[9].Class isa = 0;
      v15[10].Class isa = v14;
      v15[8].Class isa = (Class)v2;
    }
    unint64_t v16 = 0;
    uint64_t v17 = 8;
    do
    {
      _dispatch_objc_retain(v9[v17].isa);
      ++v16;
      unint64_t v18 = (unint64_t)v9[7].isa;
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      v17 += 3;
    }
    while (v16 < v18);
  }
  return v9;
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  uint64_t v3 = &_dispatch_data_empty;
  if (!length) {
    return v3;
  }
  dispatch_data_t v5 = data;
  Class isa = data[6].isa;
  while (1)
  {
    if ((unint64_t)isa <= offset) {
      return v3;
    }
    size_t v7 = (size_t)isa - offset;
    if ((unint64_t)isa - offset >= length)
    {
      size_t v7 = length;
      if (isa == (Class)length)
      {
        uint64_t v3 = v5;
        goto LABEL_18;
      }
    }
    unint64_t v8 = (unint64_t)v5[7].isa;
    if (!v8)
    {
      uint64_t v3 = _dispatch_object_alloc_bridged(OS_dispatch_data, 88);
      v3[6].Class isa = (Class)v7;
      v3[7].Class isa = (Class)1;
      v3[9].Class isa = (Class)offset;
      v3[10].Class isa = (Class)v7;
      v3[8].Class isa = (Class)v5;
LABEL_18:
      _dispatch_objc_retain(v5);
      return v3;
    }
    uint64_t v9 = 0;
    dispatch_data_t v10 = v5 + 16;
    size_t v11 = offset;
    while (1)
    {
      size_t v12 = (size_t)v10[-6].isa;
      if (v11 < v12) {
        break;
      }
      ++v9;
      v10 += 3;
      v11 -= v12;
      if (v8 == v9) {
        dispatch_data_create_subrange_cold_1(v8);
      }
    }
    unint64_t v13 = (objc_class *)(v11 + v7 - v12);
    if (v11 + v7 > v12) {
      break;
    }
    if (!v7) {
      return v3;
    }
    dispatch_data_t v5 = (dispatch_data_t)v10[-8].isa;
    offset = (size_t)v10[-7].isa + v11;
    Class isa = v5[6].isa;
    length = v7;
  }
  uint64_t v14 = v8 - v9;
  if ((Class)(v7 + offset) == isa)
  {
    unint64_t v13 = 0;
    uint64_t v15 = v8 - v9;
  }
  else if (v9 + 1 >= v8)
  {
    uint64_t v15 = 1;
  }
  else
  {
    Class v16 = v10[-3].isa;
    uint64_t v15 = 2;
    if (v13 > v16)
    {
      p_Class isa = &v10->isa;
      do
      {
        if (v14 == v15) {
          dispatch_data_create_subrange_cold_1(v8);
        }
        unint64_t v13 = (objc_class *)((char *)v13 - (uint64_t)v16);
        ++v15;
        unint64_t v18 = *p_isa;
        p_isa += 3;
        Class v16 = (Class)v18;
      }
      while ((unint64_t)v13 > v18);
    }
  }
  uint64_t v3 = _dispatch_object_alloc_bridged(OS_dispatch_data, 24 * v15 + 64);
  v3[6].Class isa = (Class)v7;
  v3[7].Class isa = (Class)v15;
  memcpy(&v3[8], &v10[-8], 24 * v15);
  if (v11)
  {
    uint64_t v19 = (Class)((char *)v3[10].isa - v11);
    v3[9].Class isa = (Class)((char *)v3[9].isa + v11);
    v3[10].Class isa = v19;
  }
  if ((Class)(v7 + offset) != isa) {
    v3[3 * v15 + 7].Class isa = v13;
  }
  if (v15)
  {
    uint64_t v20 = 8;
    do
    {
      _dispatch_objc_retain(v3[v20].isa);
      v20 += 3;
      --v15;
    }
    while (v15);
  }
  return v3;
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  Class isa = data[6].isa;
  if (!isa)
  {
    size_t v11 = 0;
    Class v6 = &_dispatch_data_empty;
    if (buffer_ptr) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  Class v6 = data;
  Class v7 = data[7].isa;
  if (v7 == (Class)1)
  {
    p_Class isa = data[8].isa;
    Class v8 = data[9].isa;
    if (!p_isa[7]) {
      goto LABEL_4;
    }
  }
  else
  {
    Class v8 = 0;
    p_Class isa = &data->isa;
    if (!v7)
    {
LABEL_4:
      uint64_t v10 = p_isa[4];
      goto LABEL_5;
    }
  }
  uint64_t v10 = p_isa[4];
  if (v10)
  {
LABEL_5:
    size_t v11 = (char *)v8 + v10;
    if ((Class)((char *)v8 + v10))
    {
      _dispatch_objc_retain(data);
      if (!buffer_ptr) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  size_t v12 = (char *)_dispatch_data_flatten((uint64_t)data);
  size_t v11 = v12;
  if (v12)
  {
    Class v6 = dispatch_data_create(v12, (size_t)isa, 0, &__block_literal_global);
    if (!buffer_ptr) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  Class isa = 0;
  Class v6 = 0;
  if (buffer_ptr) {
LABEL_14:
  }
    *buffer_ptr = v11;
LABEL_15:
  if (size_ptr) {
    *size_ptr = (size_t)isa;
  }
  return v6;
}

void *_dispatch_data_flatten(uint64_t a1)
{
  dispatch_data_t v2 = malloc_type_malloc(*(void *)(a1 + 48), 0x4CB264A7uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    applier[0] = MEMORY[0x1E4F14BE8];
    applier[1] = 0x40000000;
    applier[2] = ___dispatch_data_flatten_block_invoke;
    applier[3] = &__block_descriptor_tmp_12_0;
    applier[4] = v2;
    dispatch_data_apply((dispatch_data_t)a1, applier);
  }
  return v3;
}

char *dispatch_data_get_flattened_bytes_4libxpc(void *a1)
{
  if (!a1[6]) {
    return 0;
  }
  uint64_t v1 = (uint64_t)a1;
  uint64_t v2 = a1[7];
  if (v2 == 1)
  {
    uint64_t v1 = a1[8];
    uint64_t v3 = a1[9];
    if (!*(void *)(v1 + 56)) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (!v2)
    {
LABEL_4:
      uint64_t v4 = *(void *)(v1 + 32);
      goto LABEL_5;
    }
  }
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4)
  {
LABEL_5:
    uint64_t result = (char *)(v4 + v3);
    if (v4 + v3) {
      return result;
    }
  }
  uint64_t result = (char *)_dispatch_data_flatten(v1);
  if (result)
  {
    Class v6 = 0;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(v1 + 32), (unint64_t *)&v6, (unint64_t)result, memory_order_release, memory_order_relaxed);
    if (v6)
    {
      free(result);
      uint64_t result = v6;
    }
    result += v3;
  }
  return result;
}

uint64_t dispatch_data_apply_f(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  if (v3) {
    return _dispatch_data_apply(a1, 0, 0, v3, a2, a3);
  }
  else {
    return 1;
  }
}

uint64_t _dispatch_data_apply(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  uint64_t v10 = a1[7];
  if (v10 == 1)
  {
    size_t v12 = (void *)a1[8];
    uint64_t v11 = a1[9];
    if (!v12[7]) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v13 = v12[4];
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }
  uint64_t v11 = 0;
  size_t v12 = a1;
  if (v10) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v13 = v12[4];
LABEL_4:
  uint64_t v14 = v13 + v11;
  if (v14)
  {
    return _dispatch_data_apply_client_callout(a5, a1, a2, v14 + a3, a4);
  }
LABEL_10:
  Class v16 = a1 + 10;
  unint64_t v17 = 1;
  do
  {
    uint64_t result = _dispatch_data_apply(*(v16 - 2), v8, *(v16 - 1), *v16, a5, a6);
    unint64_t v18 = a1[7];
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    if (v17 >= v18) {
      break;
    }
    uint64_t v19 = *v16;
    v16 += 3;
    v8 += v19;
    ++v17;
  }
  while ((result & 1) != 0);
  return result;
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  Class isa = data[6].isa;
  if (!isa) {
    return 1;
  }
  if (*((void *)applier + 2)) {
    uint64_t v3 = *((void *)applier + 2);
  }
  else {
    uint64_t v3 = 0;
  }
  return _dispatch_data_apply(data, 0, 0, (uint64_t)isa, (uint64_t)applier, v3);
}

dispatch_data_t dispatch_data_copy_region(dispatch_data_t data, size_t location, size_t *offset_ptr)
{
  Class isa = data[6].isa;
  if ((unint64_t)isa <= location)
  {
    *offset_ptr = (size_t)isa;
    return (dispatch_data_t)&_dispatch_data_empty;
  }
  dispatch_data_t v4 = data;
  size_t v5 = 0;
  Class v6 = 0;
  *offset_ptr = 0;
  Class v7 = v4[6].isa;
LABEL_4:
  if (v4[6].isa == v7) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_7:
  unint64_t v9 = (unint64_t)v4[7].isa;
  if (v9 == 1)
  {
    dispatch_data_t v16 = v4 + 8;
    dispatch_data_t v4 = (dispatch_data_t)v4[8].isa;
    Class v6 = (objc_class *)((char *)v6 + (unint64_t)v16[1].isa);
    unint64_t v9 = (unint64_t)v4[7].isa;
    if (!v9) {
      goto LABEL_9;
    }
LABEL_24:
    Class v10 = v4[4].isa;
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v9) {
    goto LABEL_24;
  }
LABEL_9:
  Class v10 = v4[4].isa;
LABEL_10:
  if (!(objc_class *)((char *)v6 + (void)v10))
  {
LABEL_11:
    uint64_t v11 = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v9;
    }
    for (unint64_t i = v4 + 10; ; i += 3)
    {
      Class v14 = i->isa;
      if (v6 >= i->isa)
      {
        Class v6 = (objc_class *)((char *)v6 - (unint64_t)i->isa);
      }
      else
      {
        Class v7 = (objc_class *)(v14 - v6);
        size_t v15 = v14 - v6 + v11;
        if (v15 > location)
        {
          dispatch_data_t v4 = (dispatch_data_t)i[-2].isa;
          Class v6 = (objc_class *)((char *)v6 + (unint64_t)i[-1].isa);
          v5 += v11;
          *offset_ptr = v5;
          location -= v11;
          if (!v6) {
            goto LABEL_4;
          }
          uint64_t v8 = 0;
          goto LABEL_7;
        }
        Class v6 = 0;
        uint64_t v11 = v15;
      }
      if (!--v12) {
        dispatch_data_copy_region_cold_1(v5, v11);
      }
    }
  }
  if (v8)
  {
    _dispatch_objc_retain(v8);
  }
  else
  {
    _dispatch_objc_retain(v4);
    if (v6 || v4[6].isa != v7)
    {
      uint64_t v8 = _dispatch_object_alloc_bridged(OS_dispatch_data, 88);
      v8[6].Class isa = v7;
      v8[7].Class isa = (Class)1;
      v8[9].Class isa = v6;
      v8[10].Class isa = v7;
      v8[8].Class isa = (Class)v4;
    }
    else
    {
      return v4;
    }
  }
  return v8;
}

uint64_t dispatch_data_make_memory_entry(NSObject *a1)
{
  kern_return_t v7;
  mach_vm_address_t v8;
  kern_return_t memory_entry_64;
  kern_return_t v10;
  uint64_t v11;
  void v13[5];
  mach_vm_address_t address;
  memory_object_size_t size;
  mach_port_t object_handle;

  object_handle = 0;
  size_t size = 0;
  memory_object_size_t isa = (memory_object_size_t)a1[6].isa;
  BOOL v3 = a1[5].isa != (Class)&__block_literal_global_4134;
  dispatch_data_t v4 = (mach_vm_address_t *)MEMORY[0x1E4F14C80];
  size_t v5 = (vm_map_t *)MEMORY[0x1E4F14C48];
  while (1)
  {
    BOOL v6 = v3;
    if (v3)
    {
      address = *v4;
      Class v7 = mach_vm_allocate(*v5, &address, isa, 1);
      if (v7)
      {
        if (v7 == 3) {
          return object_handle;
        }
        uint64_t v11 = 704;
        goto LABEL_16;
      }
      v13[0] = MEMORY[0x1E4F14BE8];
      v13[1] = 0x40000000;
      v13[2] = __dispatch_data_make_memory_entry_block_invoke;
      v13[3] = &__block_descriptor_tmp_9_0;
      v13[4] = address;
      dispatch_data_apply(a1, v13);
      uint64_t v8 = address;
    }
    else
    {
      uint64_t v8 = (mach_vm_address_t)a1[4].isa;
      address = v8;
    }
    size_t size = isa;
    memory_entry_64 = mach_make_memory_entry_64(*v5, &size, v8, 2097219, &object_handle, 0);
    if (memory_entry_64 == 18) {
      memory_entry_64 = mach_make_memory_entry_64(*v5, &size, address, 67, &object_handle, 0);
    }
    if (memory_entry_64) {
      break;
    }
    if (size >= isa) {
      goto LABEL_18;
    }
    Class v10 = mach_port_deallocate(*v5, object_handle);
    if (v10) {
      _dispatch_bug(731, v10);
    }
    BOOL v3 = 1;
    if (v6)
    {
      object_handle = 0;
      goto LABEL_19;
    }
  }
  _dispatch_bug(726, memory_entry_64);
  object_handle = 0;
LABEL_18:
  if (v6)
  {
LABEL_19:
    Class v7 = mach_vm_deallocate(*v5, address, isa);
    if (!v7) {
      return object_handle;
    }
    uint64_t v11 = 740;
LABEL_16:
    _dispatch_bug(v11, v7);
  }
  return object_handle;
}

uint64_t __dispatch_data_make_memory_entry_block_invoke(uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  return 1;
}

uint64_t ___dispatch_data_flatten_block_invoke(uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  return 1;
}

NSObject *dispatch_data_create_with_transform(NSObject *a1, uint64_t *a2, void *a3)
{
  dispatch_data_t v4 = a2;
  size_t v5 = a1;
  uint64_t v6 = *a2;
  if (*a2 == 16)
  {
    Class v14 = 0;
    Class v7 = _dispatch_data_subrange_map(a1, (const void **)&v14, 0, 2uLL);
    if (!v7) {
      return 0;
    }
    int v8 = *v14;
    if (v8 == 65534) {
      unint64_t v9 = (uint64_t *)&_dispatch_data_format_type_utf16be;
    }
    else {
      unint64_t v9 = (uint64_t *)&_dispatch_data_format_type_utf8;
    }
    dispatch_release(v7);
    if (v8 == 65279) {
      dispatch_data_t v4 = (uint64_t *)&_dispatch_data_format_type_utf16le;
    }
    else {
      dispatch_data_t v4 = v9;
    }
    uint64_t v6 = *v4;
  }
  if ((v6 & ~a3[1]) != 0 || (*a3 & ~v4[2]) != 0) {
    return 0;
  }
  if (dispatch_data_get_size(v5))
  {
    uint64_t v11 = (uint64_t (*))v4[3];
    if (v11)
    {
      size_t v5 = v11(v5);
      if (!v5) {
        return v5;
      }
    }
    else
    {
      dispatch_retain(v5);
    }
    uint64_t v12 = (uint64_t (*))a3[4];
    if (v12)
    {
      uint64_t v13 = v12(v5);
    }
    else
    {
      dispatch_retain(v5);
      uint64_t v13 = (uint64_t)v5;
    }
    dispatch_release(v5);
    return v13;
  }
  return v5;
}

uint64_t _dispatch_transform_from_base32(NSObject *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32_decode_table, 91);
}

dispatch_data_t _dispatch_transform_to_base32(NSObject *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
}

uint64_t _dispatch_transform_from_base32hex(NSObject *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32hex_decode_table, 33);
}

dispatch_data_t _dispatch_transform_to_base32hex(NSObject *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"0123456789ABCDEFGHIJKLMNOPQRSTUV");
}

uint64_t _dispatch_transform_from_base64(NSObject *a1)
{
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v11[3] = 0;
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x2000000000;
  v10[3] = 0;
  v9[0] = 0;
  v9[1] = v9;
  _OWORD v9[2] = 0x2000000000;
  v9[3] = 0;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = &_dispatch_data_empty;
  v4[0] = MEMORY[0x1E4F14BE8];
  v4[1] = 0x40000000;
  void v4[2] = ___dispatch_transform_from_base64_block_invoke;
  _OWORD v4[3] = &unk_1E543D8A0;
  v4[4] = v10;
  void v4[5] = v9;
  v4[6] = v11;
  void v4[7] = &v5;
  BOOL v1 = dispatch_data_apply(a1, v4);
  uint64_t v2 = v6[3];
  if (!v1)
  {
    dispatch_release((dispatch_object_t)v6[3]);
    uint64_t v2 = 0;
  }
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v11, 8);
  return v2;
}

dispatch_data_t _dispatch_transform_to_base64(NSObject *a1)
{
  size_t size = dispatch_data_get_size(a1);
  dispatch_data_t v3 = 0;
  v12[0] = 0;
  v12[1] = v12;
  _OWORD v12[2] = 0x2000000000;
  v12[3] = 0;
  if (size == 3 * (size / 3)) {
    unint64_t v4 = size / 3;
  }
  else {
    unint64_t v4 = size / 3 + 1;
  }
  if (!(v4 >> 62))
  {
    size_t v5 = size;
    size_t v6 = 4 * v4;
    uint64_t v7 = malloc_type_malloc(4 * v4, 0x36FC11AuLL);
    if (v7)
    {
      int v8 = v7;
      v11[0] = 0;
      v11[1] = v11;
      v11[2] = 0x2000000000;
      v11[3] = v7;
      v10[0] = MEMORY[0x1E4F14BE8];
      v10[1] = 0x40000000;
      void v10[2] = ___dispatch_transform_to_base64_block_invoke;
      v10[3] = &unk_1E543D8C8;
      void v10[4] = v12;
      v10[5] = v11;
      void v10[6] = a1;
      void v10[7] = v5;
      if (dispatch_data_apply(a1, v10))
      {
        dispatch_data_t v3 = dispatch_data_create(v8, v6, 0, &__block_literal_global);
      }
      else
      {
        free(v8);
        dispatch_data_t v3 = 0;
      }
      _Block_object_dispose(v11, 8);
    }
    else
    {
      dispatch_data_t v3 = 0;
    }
  }
  _Block_object_dispose(v12, 8);
  return v3;
}

uint64_t _dispatch_transform_from_utf16le(NSObject *a1)
{
  return _dispatch_transform_from_utf16(a1, 1);
}

uint64_t _dispatch_transform_to_utf16le(NSObject *a1)
{
  return _dispatch_transform_to_utf16(a1, 1);
}

uint64_t _dispatch_transform_from_utf16be(NSObject *a1)
{
  return _dispatch_transform_from_utf16(a1, 2);
}

uint64_t _dispatch_transform_to_utf16be(NSObject *a1)
{
  return _dispatch_transform_to_utf16(a1, 2);
}

dispatch_data_t _dispatch_transform_to_utf8_without_bom(NSObject *a1)
{
  BOOL v1 = a1;
  uint64_t v7 = 0;
  uint64_t v2 = _dispatch_data_subrange_map(a1, (const void **)&v7, 0, 3uLL);
  if (v2
    && (*(unsigned __int16 *)v7 == 48111 ? (BOOL v3 = v7[2] == 191) : (BOOL v3 = 0),
        v3 ? (int v4 = 0) : (int v4 = 1),
        dispatch_release(v2),
        !v4))
  {
    size_t size = dispatch_data_get_size(v1);
    return dispatch_data_create_subrange(v1, 3uLL, size - 3);
  }
  else
  {
    dispatch_retain(v1);
  }
  return v1;
}

dispatch_data_t _dispatch_data_subrange_map(NSObject *a1, const void **a2, size_t offset, size_t length)
{
  dispatch_data_t subrange = dispatch_data_create_subrange(a1, offset, length);
  if (dispatch_data_get_size(subrange) == length) {
    dispatch_data_t map = dispatch_data_create_map(subrange, a2, 0);
  }
  else {
    dispatch_data_t map = 0;
  }
  dispatch_release(subrange);
  return map;
}

uint64_t _dispatch_transform_from_base32_with_table(NSObject *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v13[3] = 0;
  v12[0] = 0;
  v12[1] = v12;
  _OWORD v12[2] = 0x2000000000;
  v12[3] = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  v11[3] = 0;
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  Class v10 = &_dispatch_data_empty;
  v6[0] = MEMORY[0x1E4F14BE8];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___dispatch_transform_from_base32_with_table_block_invoke;
  v6[3] = &unk_1E543D850;
  v6[8] = a3;
  v6[9] = a2;
  v6[4] = v12;
  void v6[5] = v11;
  void v6[6] = v13;
  v6[7] = &v7;
  BOOL v3 = dispatch_data_apply(a1, v6);
  uint64_t v4 = v8[3];
  if (!v3)
  {
    dispatch_release((dispatch_object_t)v8[3]);
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

uint64_t ___dispatch_transform_from_base32_with_table_block_invoke(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5 = a5;
  unint64_t v8 = a5 >> 3;
  if ((a5 & 7) != 0) {
    ++v8;
  }
  uint64_t result = (uint64_t)malloc_type_malloc(5 * v8, 0x100004077774924uLL);
  if (result)
  {
    Class v10 = (unsigned char *)result;
    if (v5)
    {
      Class v10 = (unsigned char *)result;
      do
      {
        unsigned int v12 = *a4++;
        uint64_t v11 = v12;
        uint64_t v13 = (1 << v12) & 0x100000600;
        if (v12 > 0x20 || v13 == 0)
        {
          if (a1[8] <= v11 || (uint64_t v15 = a1[9], *(unsigned __int8 *)(v15 + v11) == 255))
          {
            free((void *)result);
            return 0;
          }
          ++*(void *)(*(void *)(a1[4] + 8) + 24);
          int v16 = *(unsigned __int8 *)(v15 + v11);
          if (v16 == 254)
          {
            LOBYTE(v16) = 0;
            ++*(void *)(*(void *)(a1[5] + 8) + 24);
          }
          *(void *)(*(void *)(a1[6] + 8) + 24) *= 32;
          *(void *)(*(void *)(a1[6] + 8) + 24) += (char)v16;
          if ((*(unsigned char *)(*(void *)(a1[4] + 8) + 24) & 7) == 0)
          {
            *Class v10 = *(_DWORD *)(*(void *)(a1[6] + 8) + 28);
            v10[1] = BYTE3(*(void *)(*(void *)(a1[6] + 8) + 24));
            void v10[2] = BYTE2(*(void *)(*(void *)(a1[6] + 8) + 24));
            v10[3] = BYTE1(*(void *)(*(void *)(a1[6] + 8) + 24));
            void v10[4] = *(void *)(*(void *)(a1[6] + 8) + 24);
            v10 += 5;
          }
        }
        --v5;
      }
      while (v5);
    }
    size_t v17 = (size_t)&v10[-result];
    switch(*(void *)(*(void *)(a1[5] + 8) + 24))
    {
      case 1:
        --v17;
        break;
      case 3:
        v17 -= 2;
        break;
      case 4:
        v17 -= 3;
        break;
      case 6:
        v17 -= 4;
        break;
      default:
        break;
    }
    unint64_t v18 = dispatch_data_create((const void *)result, v17, 0, &__block_literal_global);
    dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(void *)(a1[7] + 8) + 24), v18);
    dispatch_release(v18);
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1[7] + 8) + 24));
    *(void *)(*(void *)(a1[7] + 8) + 24) = concat;
    return 1;
  }
  return result;
}

dispatch_data_t _dispatch_transform_to_base32_with_table(NSObject *a1, uint64_t a2)
{
  size_t size = dispatch_data_get_size(a1);
  dispatch_data_t v5 = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  v14[3] = 0;
  if (size == 5 * (size / 5)) {
    unint64_t v6 = size / 5;
  }
  else {
    unint64_t v6 = size / 5 + 1;
  }
  if (!(v6 >> 61))
  {
    size_t v7 = size;
    size_t v8 = 8 * v6;
    uint64_t v9 = malloc_type_malloc(8 * v6, 0x29176DCDuLL);
    if (v9)
    {
      Class v10 = v9;
      v13[0] = 0;
      v13[1] = v13;
      v13[2] = 0x2000000000;
      v13[3] = v9;
      applier[0] = MEMORY[0x1E4F14BE8];
      applier[1] = 0x40000000;
      applier[2] = ___dispatch_transform_to_base32_with_table_block_invoke;
      applier[3] = &unk_1E543D878;
      applier[4] = v14;
      void applier[5] = v13;
      applier[6] = a1;
      applier[7] = a2;
      applier[8] = v7;
      if (dispatch_data_apply(a1, applier))
      {
        dispatch_data_t v5 = dispatch_data_create(v10, v8, 0, &__block_literal_global);
      }
      else
      {
        free(v10);
        dispatch_data_t v5 = 0;
      }
      _Block_object_dispose(v13, 8);
    }
    else
    {
      dispatch_data_t v5 = 0;
    }
  }
  _Block_object_dispose(v14, 8);
  return v5;
}

BOOL ___dispatch_transform_to_base32_with_table_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v9 = 0;
    for (i = 0; i != a5; BOOL v9 = i >= a5)
    {
      unint64_t v11 = *(unsigned __int8 *)(a4 + i);
      unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (0xCCCCCCCCCCCCCCCDLL * v12 < 0x3333333333333334)
      {
        char v13 = 0;
      }
      else if (i)
      {
        char v13 = *(unsigned char *)(a4 + i - 1);
      }
      else
      {
        uint64_t v48 = 0;
        Class v14 = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v48, a3 - 1, 1uLL);
        if (!v14) {
          return v9;
        }
        char v13 = *v48;
        dispatch_release(v14);
        unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      }
      switch(v12 % 5)
      {
        case 0uLL:
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = v11 >> 3;
          goto LABEL_15;
        case 1uLL:
          char v17 = *(unsigned char *)(*(void *)(a1 + 56) + ((4 * (v13 & 7u)) | (v11 >> 6)));
          uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v19 = *(unsigned char **)(v18 + 24);
          *(void *)(v18 + 24) = v19 + 1;
          *uint64_t v19 = v17;
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = (v11 >> 1) & 0x1F;
          goto LABEL_15;
        case 2uLL:
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = (v11 >> 4) & 0xFFFFFFEF | (16 * (v13 & 1));
          goto LABEL_15;
        case 3uLL:
          char v20 = *(unsigned char *)(*(void *)(a1 + 56) + ((v11 >> 7) & 0xFFFFFFE1 | (2 * (v13 & 0xF))));
          uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
          stat v22 = *(unsigned char **)(v21 + 24);
          *(void *)(v21 + 24) = v22 + 1;
          *stat v22 = v20;
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = (v11 >> 2) & 0x1F;
          goto LABEL_15;
        case 4uLL:
          char v23 = *(unsigned char *)(*(void *)(a1 + 56) + ((v11 >> 5) & 0xFFFFFFE7 | (8 * (v13 & 3))));
          uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v25 = *(unsigned char **)(v24 + 24);
          *(void *)(v24 + 24) = v25 + 1;
          *uint64_t v25 = v23;
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = v11 & 0x1F;
LABEL_15:
          char v26 = *(unsigned char *)(v15 + v16);
          uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v28 = *(unsigned char **)(v27 + 24);
          *(void *)(v27 + 24) = v28 + 1;
          *uint64_t v28 = v26;
          break;
        default:
          break;
      }
      ++i;
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
  if (a5 + a3 == *(void *)(a1 + 64))
  {
    unint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    switch(~(5 * (v29 / 5)) + v29)
    {
      case 0uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 4 * (*(unsigned char *)(a5 + a4 - 1) & 7);
        goto LABEL_23;
      case 1uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 16 * (*(unsigned char *)(a5 + a4 - 1) & 1);
        goto LABEL_23;
      case 2uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 2 * (*(unsigned char *)(a5 + a4 - 1) & 0xF);
        goto LABEL_23;
      case 3uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 8 * (*(unsigned char *)(a5 + a4 - 1) & 3);
LABEL_23:
        char v32 = *(unsigned char *)(v30 + v31);
        uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 8);
        __int16 v34 = *(unsigned char **)(v33 + 24);
        *(void *)(v33 + 24) = v34 + 1;
        *__int16 v34 = v32;
        break;
      default:
        break;
    }
    switch(~(5 * (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) / 5uLL))
           + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      case 0uLL:
        uint64_t v35 = *(void *)(*(void *)(a1 + 40) + 8);
        int v36 = *(unsigned char **)(v35 + 24);
        *(void *)(v35 + 24) = v36 + 1;
        *int v36 = 61;
        uint64_t v37 = *(void *)(*(void *)(a1 + 40) + 8);
        unsigned int v38 = *(unsigned char **)(v37 + 24);
        *(void *)(v37 + 24) = v38 + 1;
        *unsigned int v38 = 61;
        goto LABEL_26;
      case 1uLL:
LABEL_26:
        uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v40 = *(unsigned char **)(v39 + 24);
        *(void *)(v39 + 24) = v40 + 1;
        *uint64_t v40 = 61;
        goto LABEL_27;
      case 2uLL:
LABEL_27:
        uint64_t v41 = *(void *)(*(void *)(a1 + 40) + 8);
        mach_port_context_t v42 = *(unsigned char **)(v41 + 24);
        *(void *)(v41 + 24) = v42 + 1;
        *mach_port_context_t v42 = 61;
        uint64_t v43 = *(void *)(*(void *)(a1 + 40) + 8);
        unint64_t v44 = *(unsigned char **)(v43 + 24);
        *(void *)(v43 + 24) = v44 + 1;
        *unint64_t v44 = 61;
        goto LABEL_28;
      case 3uLL:
LABEL_28:
        uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 8);
        unint64_t v46 = *(unsigned char **)(v45 + 24);
        *(void *)(v45 + 24) = v46 + 1;
        *unint64_t v46 = 61;
        break;
      default:
        break;
    }
  }
  return 1;
}

uint64_t ___dispatch_transform_from_base64_block_invoke(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5 = a5;
  unint64_t v8 = a5 >> 2;
  if ((a5 & 3) != 0) {
    ++v8;
  }
  uint64_t result = (uint64_t)malloc_type_malloc(3 * v8, 0x100004077774924uLL);
  if (result)
  {
    Class v10 = (unsigned char *)result;
    if (!v5)
    {
LABEL_18:
      unint64_t v16 = dispatch_data_create((const void *)result, (size_t)&v10[-result - *(void *)(*(void *)(a1[5] + 8) + 24)], 0, &__block_literal_global);
      dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(void *)(a1[7] + 8) + 24), v16);
      dispatch_release(v16);
      dispatch_release(*(dispatch_object_t *)(*(void *)(a1[7] + 8) + 24));
      *(void *)(*(void *)(a1[7] + 8) + 24) = concat;
      return 1;
    }
    Class v10 = (unsigned char *)result;
    while (1)
    {
      unsigned int v12 = *a4++;
      uint64_t v11 = v12;
      uint64_t v13 = (1 << v12) & 0x100000600;
      if (v12 > 0x20 || v13 == 0)
      {
        if (v11 > 0x7A || (int v15 = base64_decode_table[v11], v15 == 255))
        {
          free((void *)result);
          return 0;
        }
        ++*(void *)(*(void *)(a1[4] + 8) + 24);
        if (v11 == 61)
        {
          LOBYTE(v15) = 0;
          ++*(void *)(*(void *)(a1[5] + 8) + 24);
        }
        *(void *)(*(void *)(a1[6] + 8) + 24) <<= 6;
        *(void *)(*(void *)(a1[6] + 8) + 24) += (char)v15;
        if ((*(unsigned char *)(*(void *)(a1[4] + 8) + 24) & 3) == 0)
        {
          *Class v10 = BYTE2(*(void *)(*(void *)(a1[6] + 8) + 24));
          v10[1] = BYTE1(*(void *)(*(void *)(a1[6] + 8) + 24));
          void v10[2] = *(void *)(*(void *)(a1[6] + 8) + 24);
          v10 += 3;
        }
      }
      if (!--v5) {
        goto LABEL_18;
      }
    }
  }
  return result;
}

BOOL ___dispatch_transform_to_base64_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v8 = 0;
    unint64_t v9 = 0;
    size_t v10 = a3 - 1;
    while (1)
    {
      unint64_t v11 = *(unsigned __int8 *)(a4 + v9);
      unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (0xAAAAAAAAAAAAAAABLL * v12 < 0x5555555555555556)
      {
        char v13 = 0;
      }
      else if (v9)
      {
        char v13 = *(unsigned char *)(a4 + v9 - 1);
      }
      else
      {
        unsigned int v38 = 0;
        Class v14 = _dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v38, v10, 1uLL);
        if (!v14) {
          return v8;
        }
        char v13 = *v38;
        dispatch_release(v14);
        unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      }
      unint64_t v15 = v12 % 3;
      if (v15 == 2) {
        break;
      }
      if (v15 == 1)
      {
        uint64_t v16 = (v11 >> 4) & 0xFFFFFFCF | (16 * (v13 & 3));
        goto LABEL_15;
      }
      if (!v15)
      {
        uint64_t v16 = v11 >> 2;
LABEL_15:
        char v20 = base64_encode_table[v16];
        uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
        stat v22 = *(char **)(v21 + 24);
        *(void *)(v21 + 24) = v22 + 1;
        *stat v22 = v20;
      }
      ++v9;
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      BOOL v8 = v9 >= a5;
      if (a5 == v9) {
        goto LABEL_17;
      }
    }
    char v17 = base64_encode_table[(4 * (v13 & 0xFu)) | (v11 >> 6)];
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v19 = *(char **)(v18 + 24);
    *(void *)(v18 + 24) = v19 + 1;
    *uint64_t v19 = v17;
    uint64_t v16 = v11 & 0x3F;
    goto LABEL_15;
  }
LABEL_17:
  if (a5 + a3 == *(void *)(a1 + 56))
  {
    unint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) % 3uLL;
    if (v23 == 2)
    {
      char v31 = base64_encode_table[4 * (*(unsigned char *)(a5 + a4 - 1) & 0xF)];
      uint64_t v32 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v33 = *(char **)(v32 + 24);
      *(void *)(v32 + 24) = v33 + 1;
      *uint64_t v33 = v31;
      uint64_t v34 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v35 = *(unsigned char **)(v34 + 24);
      *(void *)(v34 + 24) = v35 + 1;
      *uint64_t v35 = 61;
    }
    else if (v23 == 1)
    {
      char v24 = base64_encode_table[16 * (*(unsigned char *)(a5 + a4 - 1) & 3)];
      uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8);
      char v26 = *(char **)(v25 + 24);
      *(void *)(v25 + 24) = v26 + 1;
      *char v26 = v24;
      uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v28 = *(unsigned char **)(v27 + 24);
      *(void *)(v27 + 24) = v28 + 1;
      *uint64_t v28 = 61;
      uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v30 = *(unsigned char **)(v29 + 24);
      *(void *)(v29 + 24) = v30 + 1;
      *uint64_t v30 = 61;
    }
  }
  return 1;
}

uint64_t _dispatch_transform_from_utf16(NSObject *a1, int a2)
{
  v13[2] = 0x2000000000;
  uint64_t v10 = 0x3800000000;
  long long v11 = xmmword_1E543D910;
  long long v12 = unk_1E543D920;
  v13[0] = 0;
  v13[1] = v13;
  v13[3] = 0;
  uint64_t v8 = 0;
  unint64_t v9 = &v8;
  applier[0] = MEMORY[0x1E4F14BE8];
  applier[1] = 0x40000000;
  applier[2] = ___dispatch_transform_from_utf16_block_invoke;
  applier[3] = &unk_1E543D8F0;
  applier[4] = &v8;
  void applier[5] = v13;
  applier[6] = a1;
  int v7 = a2;
  BOOL v2 = dispatch_data_apply(a1, applier);
  BOOL v3 = v9 + 3;
  if (v2)
  {
    uint64_t v4 = *v3;
  }
  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0, 0);
    dispatch_release((dispatch_object_t)v9[3]);
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

size_t ___dispatch_transform_from_utf16_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = a5;
  if (!a3)
  {
    unint64_t v9 = a5 == 3 * (a5 / 3) ? a5 / 3 : a5 / 3 + 1;
    size_t result = _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8) + 24, 2 * v9, 0);
    if (!result) {
      return result;
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v12 = *(void *)(v11 + 24);
  if (v12 >= v5)
  {
    *(void *)(v11 + 24) = v12 - v5;
    return 1;
  }
  if (v12)
  {
    a4 += v12;
    v5 -= v12;
    *(void *)(v11 + 24) = 0;
  }
  unint64_t v13 = (v5 & 1) + (v5 >> 1);
  if (!v13)
  {
LABEL_55:
    _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8) + 24, 0, 0);
    return 1;
  }
  uint64_t v14 = 0;
  while (1)
  {
    if ((v5 & 1) != 0 && v14 == v13 - 1)
    {
      uint64_t v35 = 0;
      size_t result = (size_t)_dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v35, a3 + 2 * (v13 - 1), 2uLL);
      if (!result) {
        return result;
      }
      unsigned int v15 = bswap32(*v35) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *v35 : v15;
      dispatch_release((dispatch_object_t)result);
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    else
    {
      unsigned int v17 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *(_WORD *)(a4 + 2 * v14) : v17;
    }
    if (!(v14 | a3) && (unsigned __int16)v16 == 65534) {
      return 0;
    }
    unsigned int v16 = (unsigned __int16)v16;
    if (v14 | a3 || (unsigned __int16)v16 != 65279)
    {
      if ((v16 & 0xFC00) == 0xD800)
      {
        if (++v14 >= v13)
        {
          uint64_t v35 = 0;
          size_t result = (size_t)_dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v35, a3 + 2 * v14, 2uLL);
          if (!result) {
            return result;
          }
          unsigned int v20 = bswap32(*v35) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1) {
            unsigned __int16 v19 = *v35;
          }
          else {
            unsigned __int16 v19 = v20;
          }
          dispatch_release((dispatch_object_t)result);
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += 2;
        }
        else
        {
          unsigned int v18 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1) {
            unsigned __int16 v19 = *(_WORD *)(a4 + 2 * v14);
          }
          else {
            unsigned __int16 v19 = v18;
          }
        }
        if (v19 >> 10 != 55) {
          return 0;
        }
        unsigned int v16 = (((unsigned __int16)v16 << 10) - 56557568) | v19 & 0x3FF;
      }
      else if ((v16 & 0xFC00) == 0xDC00)
      {
        return 0;
      }
      if ((uint64_t)(v13 - v14) < 0) {
        return 0;
      }
      uint64_t v21 = 2 * (v13 - v14);
      if (v16 > 0x7F)
      {
        if (v16 > 0x7FF)
        {
          uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 8) + 24;
          if (HIWORD(v16))
          {
            size_t result = _dispatch_transform_buffer_new(v25, 4uLL, v21);
            if (!result) {
              return result;
            }
            uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 8);
            uint64_t v28 = *(unsigned char **)(v27 + 40);
            *(void *)(v27 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v28 + 1;
            *uint64_t v28 = (v16 >> 18) | 0xF0;
            int v26 = (v16 >> 12) & 0x3F | 0x80;
          }
          else
          {
            size_t result = _dispatch_transform_buffer_new(v25, 3uLL, v21);
            if (!result) {
              return result;
            }
            int v26 = (v16 >> 12) | 0xE0;
          }
          uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v30 = *(unsigned char **)(v29 + 40);
          *(void *)(v29 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v30 + 1;
          *uint64_t v30 = v26;
          int v24 = (v16 >> 6) & 0x3F | 0x80;
        }
        else
        {
          size_t result = _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8) + 24, 2uLL, v21);
          if (!result) {
            return result;
          }
          int v24 = (v16 >> 6) | 0xC0;
        }
        uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v32 = *(unsigned char **)(v31 + 40);
        *(void *)(v31 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v32 + 1;
        *uint64_t v32 = v24;
        uint64_t v33 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v34 = *(unsigned char **)(v33 + 40);
        *(void *)(v33 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v34 + 1;
        *uint64_t v34 = v16 & 0x3F | 0x80;
      }
      else
      {
        size_t result = _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8) + 24, 1uLL, v21);
        if (!result) {
          return result;
        }
        uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 8);
        unint64_t v23 = *(unsigned char **)(v22 + 40);
        *(void *)(v22 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v23 + 1;
        *unint64_t v23 = v16;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    if (++v14 >= v13) {
      goto LABEL_55;
    }
  }
}

size_t _dispatch_transform_buffer_new(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void **)(a1 + 8);
  if (a2 && (unint64_t)v6 + *(void *)(a1 + 24) - *(void *)(a1 + 16) >= a2) {
    return 1;
  }
  if (v6)
  {
    unint64_t v7 = *(void *)(a1 + 16);
    if (v7 <= (unint64_t)v6)
    {
      free(v6);
    }
    else
    {
      uint64_t v8 = dispatch_data_create(v6, v7 - (void)v6, 0, &__block_literal_global);
      dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)a1, v8);
      dispatch_release(v8);
      dispatch_release(*(dispatch_object_t *)a1);
      *(void *)a1 = concat;
    }
  }
  *(void *)(a1 + 8) = 0;
  size_t result = a3 + a2;
  *(void *)(a1 + 24) = a3 + a2;
  if (!(a3 + a2)) {
    goto LABEL_11;
  }
  if (result > 0x6400000) {
    return 0;
  }
  size_t result = (size_t)malloc_type_malloc(result, 0xADEDD139uLL);
  *(void *)(a1 + 8) = result;
  if (result)
  {
LABEL_11:
    *(void *)(a1 + 16) = result;
    return 1;
  }
  return result;
}

uint64_t _dispatch_transform_to_utf16(NSObject *a1, int a2)
{
  v13[2] = 0x2000000000;
  uint64_t v10 = 0x3800000000;
  long long v11 = xmmword_1E543D910;
  long long v12 = unk_1E543D920;
  v13[0] = 0;
  v13[1] = v13;
  v13[3] = 0;
  uint64_t v8 = 0;
  unint64_t v9 = &v8;
  applier[0] = MEMORY[0x1E4F14BE8];
  applier[1] = 0x40000000;
  applier[2] = ___dispatch_transform_to_utf16_block_invoke;
  applier[3] = &unk_1E543D938;
  int v7 = a2;
  applier[4] = &v8;
  void applier[5] = v13;
  applier[6] = a1;
  BOOL v2 = dispatch_data_apply(a1, applier);
  BOOL v3 = v9 + 3;
  if (v2)
  {
    uint64_t v4 = *v3;
  }
  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0, 0);
    dispatch_release((dispatch_object_t)v9[3]);
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

size_t ___dispatch_transform_to_utf16_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, size_t a5)
{
  size_t v5 = a5;
  if (!a3)
  {
    size_t result = 0;
    if ((a5 & 0x8000000000000000) != 0) {
      return result;
    }
    if (2 * a5 >= 0xFFFFFFFFFFFFFFFELL) {
      return result;
    }
    size_t result = _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8) + 24, 2 * a5 + 2, 0);
    if (!result) {
      return result;
    }
    if (*(_DWORD *)(a1 + 56) == 1) {
      __int16 v28 = -257;
    }
    else {
      __int16 v28 = -2;
    }
    uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v30 = *(__int16 **)(v29 + 40);
    *(void *)(v29 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v30 + 1;
    *uint64_t v30 = v28;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v10 >= v5)
  {
    *(void *)(v9 + 24) = v10 - v5;
    return 1;
  }
  if (!v10) {
    goto LABEL_6;
  }
  *(void *)(v9 + 24) = 0;
  v5 -= v10;
  if (!v5)
  {
LABEL_36:
    _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8) + 24, 0, 0);
    return 1;
  }
  a4 += v10;
LABEL_6:
  unint64_t v11 = 0;
  while (1)
  {
    int v12 = *a4;
    if (v12 < 0)
    {
      if ((v12 & 0xE0) == 0xC0)
      {
        size_t v13 = 2;
      }
      else if ((v12 & 0xF0) == 0xE0)
      {
        size_t v13 = 3;
      }
      else
      {
        if ((v12 & 0xF8) != 0xF0) {
          return 0;
        }
        size_t v13 = 4;
      }
    }
    else
    {
      size_t v13 = 1;
    }
    if (v13 + v11 <= v5)
    {
      unsigned int utf8_sequence = _dispatch_transform_read_utf8_sequence(a4);
      v11 += v13;
    }
    else
    {
      uint64_t v31 = 0;
      size_t result = (size_t)_dispatch_data_subrange_map(*(NSObject **)(a1 + 48), (const void **)&v31, v11 + a3, v13);
      if (!result) {
        return result;
      }
      unsigned int v15 = result;
      unsigned int utf8_sequence = _dispatch_transform_read_utf8_sequence(v31);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v11 - v5 + v13;
      dispatch_release(v15);
      unint64_t v11 = v5;
    }
    if ((uint64_t)(v5 - v11) < 0) {
      return 0;
    }
    if (utf8_sequence != 65279 || v11 + a3 != 3)
    {
      if (utf8_sequence - 55296 < 0x7FF) {
        return 0;
      }
      uint64_t v17 = 2 * (v5 - v11);
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8) + 24;
      if (utf8_sequence < 0x10000)
      {
        size_t result = _dispatch_transform_buffer_new(v18, 2uLL, v17);
        if (!result) {
          return result;
        }
        unsigned int v25 = bswap32(utf8_sequence) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1) {
          LOWORD(v23) = utf8_sequence;
        }
        else {
          LOWORD(v23) = v25;
        }
      }
      else
      {
        size_t result = _dispatch_transform_buffer_new(v18, 4uLL, v17);
        if (!result) {
          return result;
        }
        unsigned int v19 = bswap32(((utf8_sequence + 983040) >> 10) & 0x3FF | 0xFFFFD800) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1) {
          __int16 v20 = ((utf8_sequence + 983040) >> 10) & 0x3FF | 0xD800;
        }
        else {
          __int16 v20 = v19;
        }
        uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v22 = *(_WORD **)(v21 + 40);
        *(void *)(v21 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v22 + 1;
        *uint64_t v22 = v20;
        unsigned int v23 = utf8_sequence & 0x3FF | 0xFFFFDC00;
        unsigned int v24 = bswap32(v23) >> 16;
        if (*(_DWORD *)(a1 + 56) != 1) {
          LOWORD(v23) = v24;
        }
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v27 = *(_WORD **)(v26 + 40);
      *(void *)(v26 + 4_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v27 + 1;
      *uint64_t v27 = v23;
    }
    a4 += v13;
    if (v5 <= v11) {
      goto LABEL_36;
    }
  }
}

uint64_t _dispatch_transform_read_utf8_sequence(char *a1)
{
  uint64_t v1 = *a1;
  if (*a1 < 0)
  {
    if ((v1 & 0xE0) == 0xC0)
    {
      int v2 = 1;
      int v3 = 31;
    }
    else
    {
      if ((v1 & 0xF0) != 0xE0)
      {
        int v5 = v1 & 0xF8;
        unsigned int v6 = (v1 & 7) << 6;
        if (v5 == 240) {
          unsigned int v4 = v6;
        }
        else {
          unsigned int v4 = 0;
        }
        if (v5 == 240) {
          int v2 = 3;
        }
        else {
          int v2 = -1;
        }
        goto LABEL_13;
      }
      int v2 = 2;
      int v3 = 15;
    }
    unsigned int v4 = (v1 & v3) << 6;
LABEL_13:
    int v7 = a1 + 1;
    do
    {
      char v8 = *v7++;
      uint64_t v1 = v4 | v8 & 0x3F;
      --v2;
      unsigned int v4 = v1 << 6;
    }
    while ((_BYTE)v2);
  }
  return v1;
}

void _dispatch_time_init()
{
  kern_return_t v0;
  mach_timebase_info info;

  info = 0;
  uint64_t v0 = mach_timebase_info(&info);
  if (v0) {
    _dispatch_bug(86, v0);
  }
  if (info.numer != 125 || info.denom != 3)
  {
    *(double *)&_dispatch_host_time_data_0 = (double)info.numer / (double)info.denom;
    _dispatch_host_time_data_1 = info.numer == info.denom;
    _dispatch_host_time_mach2nano = _dispatch_mach_host_time_mach2nano;
    _dispatch_host_time_nano2mach = (uint64_t (*)(void))_dispatch_mach_host_time_nano2mach;
  }
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  if ((uint64_t)when > -2)
  {
    if (when == -1) {
      return when;
    }
    if (when) {
      goto LABEL_14;
    }
    when = mach_absolute_time();
    int v3 = 0;
LABEL_9:
    if (when == -1) {
      return when;
    }
    goto LABEL_10;
  }
  if (when == 0x8000000000000000)
  {
    int v3 = 1;
    when = mach_continuous_time();
    goto LABEL_9;
  }
  if (when == -2)
  {
    when = clock_gettime_nsec_np(_CLOCK_REALTIME);
    int v3 = 2;
    goto LABEL_9;
  }
LABEL_14:
  if ((when & 0x8000000000000000) != 0)
  {
    if ((when & 0x4000000000000000) == 0)
    {
      when &= ~0x8000000000000000;
      int v3 = 1;
      goto LABEL_21;
    }
    when = -(uint64_t)when;
    int v3 = 2;
  }
  else
  {
    int v3 = 0;
  }
  if (when >> 62) {
    return -1;
  }
LABEL_10:
  if (v3 == 2)
  {
    int64_t v4 = when + delta;
    if (delta < 0)
    {
      if (v4 < 1)
      {
        int64_t v4 = 2;
        return -v4;
      }
      if ((unint64_t)v4 <= 0x3FFFFFFFFFFFFFFELL) {
        return -v4;
      }
    }
    else if ((unint64_t)(v4 - 0x3FFFFFFFFFFFFFFFLL) >= 0xC000000000000002)
    {
      return -v4;
    }
    return -1;
  }
LABEL_21:
  if ((delta & 0x8000000000000000) == 0)
  {
    if (_dispatch_host_time_nano2mach)
    {
      dispatch_time_t v12 = when;
      unint64_t v6 = _dispatch_host_time_nano2mach(delta);
      when = v12;
    }
    else if (delta)
    {
      if ((unint64_t)delta > 0x7FFFFFFFFFFFFFFELL)
      {
        unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else if ((unint64_t)delta > 0x5555555555555554)
      {
        unint64_t v6 = 3 * (delta / 0x7DuLL);
      }
      else
      {
        uint64_t v5 = ((unint64_t)(3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        unint64_t v6 = (v5 + ((unint64_t)(3 * delta - v5) >> 1)) >> 6;
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    int64_t v7 = v6 + when;
    if ((unint64_t)(v7 - 0x3FFFFFFFFFFFFFFFLL) < 0xC000000000000002) {
      return -1;
    }
LABEL_37:
    if (v3 == 1) {
      return v7 | 0x8000000000000000;
    }
    else {
      return v7;
    }
  }
  unint64_t v8 = -delta;
  if (_dispatch_host_time_nano2mach)
  {
    dispatch_time_t v11 = when;
    unint64_t v10 = _dispatch_host_time_nano2mach(v8);
    when = v11;
  }
  else if (v8 > 0x7FFFFFFFFFFFFFFELL)
  {
    unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v8 > 0x5555555555555554)
  {
    unint64_t v10 = 3 * (v8 / 0x7D);
  }
  else
  {
    uint64_t v9 = ((unint64_t)(-3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    unint64_t v10 = (v9 + ((unint64_t)(-3 * delta - v9) >> 1)) >> 6;
  }
  int64_t v7 = when - v10;
  if (v7 > 0)
  {
    if ((unint64_t)v7 > 0x3FFFFFFFFFFFFFFELL) {
      return -1;
    }
    goto LABEL_37;
  }
  if (v3 == 1) {
    return 0x8000000000000001;
  }
  else {
    return 1;
  }
}

uint64_t dispatch_time_to_nsecs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t)a1 <= -2)
  {
    if (a1 == 0x8000000000000000)
    {
      a1 = mach_continuous_time();
      goto LABEL_10;
    }
    if (a1 == -2)
    {
      a1 = clock_gettime_nsec_np(_CLOCK_REALTIME);
LABEL_5:
      *a2 = 3;
LABEL_21:
      uint64_t v6 = 1;
      goto LABEL_22;
    }
LABEL_12:
    if ((a1 & 0x8000000000000000) == 0)
    {
      if (a1 >> 62) {
        a1 = -1;
      }
      goto LABEL_15;
    }
    if ((a1 & 0x4000000000000000) != 0)
    {
      if ((unint64_t)-(uint64_t)a1 >> 62) {
        a1 = -1;
      }
      else {
        a1 = -(uint64_t)a1;
      }
      goto LABEL_5;
    }
    a1 &= ~0x8000000000000000;
LABEL_10:
    uint64_t v5 = 2;
    goto LABEL_16;
  }
  if (a1 != -1)
  {
    if (!a1)
    {
      a1 = mach_absolute_time();
LABEL_15:
      uint64_t v5 = 1;
LABEL_16:
      *a2 = v5;
      if (_dispatch_host_time_mach2nano)
      {
        a1 = _dispatch_host_time_mach2nano(a1);
      }
      else if (a1)
      {
        if (a1 > 0x3126E978D4FDF39)
        {
          uint64_t v6 = 1;
          a1 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_22;
        }
        if (a1 > 0x20C49BA5E353F7BLL) {
          a1 = 125 * (a1 / 3);
        }
        else {
          a1 = 125 * a1 / 3;
        }
      }
      goto LABEL_21;
    }
    goto LABEL_12;
  }
  uint64_t v6 = 0;
  *a2 = 0;
LABEL_22:
  *a3 = a1;
  return v6;
}

uint64_t dispatch_time_from_nsec(uint64_t a1, unint64_t a2)
{
  if (a2 <= 2) {
    unint64_t v3 = 2;
  }
  else {
    unint64_t v3 = a2;
  }
  if (_dispatch_host_time_nano2mach)
  {
    unint64_t v5 = _dispatch_host_time_nano2mach(v3);
  }
  else if (v3 > 0x7FFFFFFFFFFFFFFELL)
  {
    unint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v3 >= 0x5555555555555555)
  {
    unint64_t v5 = 3 * (v3 / 0x7D);
  }
  else
  {
    uint64_t v4 = (3 * v3 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    unint64_t v5 = (v4 + ((3 * v3 - v4) >> 1)) >> 6;
  }
  if (v5 > 0x3FFFFFFFFFFFFFFELL) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = v5;
  }
  unint64_t v7 = v5 | 0x8000000000000000;
  if (v5 > 0x3FFFFFFFFFFFFFFELL) {
    unint64_t v7 = -1;
  }
  uint64_t v8 = -1;
  if (v3 <= 0x3FFFFFFFFFFFFFFELL) {
    uint64_t v8 = -(uint64_t)v3;
  }
  if (a1 == 2) {
    uint64_t v8 = v7;
  }
  if (a1 == 1) {
    return v6;
  }
  else {
    return v8;
  }
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  if (when) {
    __uint64_t v3 = when->tv_nsec + 1000000000 * when->tv_sec;
  }
  else {
    __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_REALTIME);
  }
  uint64_t v4 = v3 + delta;
  dispatch_time_t v5 = -2;
  if (delta >= 0) {
    dispatch_time_t v5 = -1;
  }
  if (v4 >= 2) {
    return -v4;
  }
  else {
    return v5;
  }
}

int64_t _dispatch_timeout(int64_t result)
{
  if (result > -2)
  {
    if (result == -1) {
      return result;
    }
    if (!result) {
      return 0;
    }
  }
  else if (result == 0x8000000000000000 || result == -2)
  {
    return 0;
  }
  if (result < 0)
  {
    if ((result & 0x4000000000000000) != 0)
    {
      if ((unint64_t)-result >> 62) {
        unint64_t v6 = -1;
      }
      else {
        unint64_t v6 = -result;
      }
      __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_REALTIME);
      if (v6 >= v7) {
        return v6 - v7;
      }
      else {
        return 0;
      }
    }
    unint64_t v1 = result & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v2 = mach_continuous_time();
  }
  else
  {
    if ((unint64_t)result >> 62) {
      unint64_t v1 = -1;
    }
    else {
      unint64_t v1 = result;
    }
    uint64_t v2 = mach_absolute_time();
  }
  BOOL v3 = v1 >= v2;
  unint64_t v4 = v1 - v2;
  if (v4 == 0 || !v3) {
    return 0;
  }
  dispatch_time_t v5 = (uint64_t (*)(void))_dispatch_host_time_mach2nano;
  if (_dispatch_host_time_mach2nano)
  {
    return v5();
  }
  else if (v4 > 0x3126E978D4FDF39)
  {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else if (v4 >= 0x20C49BA5E353F7CLL)
  {
    return 125 * (v4 / 3);
  }
  else
  {
    return 125 * v4 / 3;
  }
}

unint64_t _dispatch_mach_host_time_mach2nano(unint64_t result)
{
  unint64_t v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      size_t result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        double v2 = (double)v1 * *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18) {
          return (unint64_t)v2;
        }
      }
    }
  }
  return result;
}

unint64_t _dispatch_mach_host_time_nano2mach(unint64_t result)
{
  unint64_t v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      size_t result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        double v2 = (double)v1 / *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18) {
          return (unint64_t)v2;
        }
      }
    }
  }
  return result;
}

void *_dispatch_continuation_alloc_from_heap()
{
  if (_dispatch_continuation_alloc_init_pred != -1) {
    dispatch_once_f(&_dispatch_continuation_alloc_init_pred, 0, (dispatch_function_t)_dispatch_continuation_alloc_init);
  }
  if (_dispatch_use_dispatch_alloc)
  {
    return (void *)_dispatch_alloc_continuation_alloc();
  }
  else
  {
    while (1)
    {
      size_t result = malloc_type_calloc(1uLL, 0x40uLL, 0x791BAC36uLL);
      if (result) {
        break;
      }
      _dispatch_temporary_resource_shortage();
    }
  }
  return result;
}

unint64_t _dispatch_alloc_continuation_alloc()
{
  if (!_dispatch_main_heap) {
    goto LABEL_11;
  }
  __int16 StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  uint64_t v1 = _dispatch_main_heap;
  uint64_t v2 = *(void *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    while (2)
    {
      unint64_t v4 = (atomic_ullong *)(v2 + 8 * v3);
      atomic_ullong v5 = *v4;
      while (v5 != -1)
      {
        unint64_t v6 = __clz(__rbit64(~v5));
        atomic_ullong v7 = v5;
        atomic_compare_exchange_strong_explicit(v4, (unint64_t *)&v7, (1 << v6) | v5, memory_order_relaxed, memory_order_relaxed);
        BOOL v8 = v7 == v5;
        atomic_ullong v5 = v7;
        if (v8)
        {
          unint64_t v10 = ((unint64_t)v4 & 0xFFFFF) - 64;
          unint64_t v11 = v10 >> 3;
          uint64_t v12 = (v10 >> 9) & 0x3FFFFFF;
          unint64_t result = ((((unint64_t)v4 & 0xFFFFFFFFFFF00000) + (v12 << 18)) & 0xFFFFFFFFFFFC0FFFLL | ((v11 & 0x3F) << 12))
                 + (v6 << 6)
                 + 0x4000;
          size_t v13 = (atomic_ullong *)(((unint64_t)v4 & 0xFFFFFFFFFFF00000) + 8 * v12 + 16);
          uint64_t v14 = *(void *)(((unint64_t)v4 & 0xFFFFFFFFFFF00000) + 8 * v12 + 0x10);
          uint64_t v15 = 1 << v11;
          do
          {
            if (*v4 != -1) {
              break;
            }
            uint64_t v16 = v14;
            atomic_compare_exchange_strong_explicit(v13, (unint64_t *)&v16, v14 | v15, memory_order_relaxed, memory_order_relaxed);
            BOOL v8 = v16 == v14;
            uint64_t v14 = v16;
          }
          while (!v8);
          return result;
        }
      }
      if (++v3 != 4) {
        continue;
      }
      break;
    }
    uint64_t v1 = _dispatch_main_heap;
  }
  unint64_t result = _dispatch_alloc_continuation_from_heap(v1);
  if (!result)
  {
LABEL_11:
    return _dispatch_alloc_continuation_from_heap_slow();
  }
  return result;
}

void _dispatch_continuation_free_to_heap(uint64_t a1)
{
  if (_dispatch_use_dispatch_alloc) {
    _dispatch_alloc_continuation_free(a1);
  }
  else {
    free((void *)a1);
  }
}

void _dispatch_alloc_continuation_free(uint64_t a1)
{
  *(void *)a1 = 0;
  unint64_t v1 = a1 - (a1 & 0xFFFFFFFFFFF00000);
  unint64_t v2 = (v1 - 0x4000) >> 6;
  unint64_t v3 = ((v1 - 0x4000) >> 18) & 0xFFFFF;
  unint64_t v4 = (a1 & 0xFFFFFFFFFFF00000) + 8 * v3 + 16;
  unint64_t v5 = (a1 & 0xFFFFFFFFFFF00000) + (v3 << 9) + 8 * ((v2 >> 6) & 0x3F) + 64;
  unint64_t v6 = (v1 - 1664) >> 6;
  unsigned int v7 = v6 >> 6;
  if ((a1 & 0xFC000) != 0)
  {
    BOOL v8 = (atomic_ullong *)v4;
  }
  else
  {
    unint64_t v5 = (a1 & 0xFFFFFFFFFFF00000) + 8 * v7 + 1600;
    BOOL v8 = 0;
  }
  if ((a1 & 0xFC000) != 0) {
    LOBYTE(v7) = (v2 >> 6) & 0x3F;
  }
  else {
    LOBYTE(v2) = v6;
  }
  uint64_t v9 = 1 << v2;
  if ((v9 & *(void *)v5) != 0)
  {
    unint64_t v5 = atomic_fetch_and_explicit((atomic_ullong *volatile)v5, ~v9, memory_order_release);
    if (!v8) {
      return;
    }
  }
  else
  {
    BOOL v8 = *(atomic_ullong **)v5;
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption: failed to clear bit exclusively";
    qword_1E91199F0 = (uint64_t)v8;
    __break(1u);
  }
  atomic_fetch_and_explicit(v8, ~(1 << v7), memory_order_release);
  if ((v5 & ~v9) == 0) {
    _dispatch_alloc_maybe_madvise_page(a1);
  }
}

const char *_dispatch_continuation_alloc_init()
{
  int v0 = malloc_engaged_nano();
  unint64_t result = getenv("LIBDISPATCH_CONTINUATION_ALLOCATOR");
  if (result)
  {
    unint64_t result = (const char *)atoi(result);
    BOOL v2 = result != 0;
  }
  else
  {
    BOOL v2 = v0 == 0;
  }
  _dispatch_use_dispatch_alloc = v2;
  return result;
}

uint64_t _dispatch_alloc_continuation_from_heap(uint64_t a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFFF;
  while (2)
  {
    unint64_t v3 = (atomic_ullong *)(a1 + (v2 << 20) + 8 * v1 + 1600);
    atomic_ullong v4 = *v3;
    while (v4 != -1)
    {
      unint64_t v5 = __clz(__rbit64(~v4));
      atomic_ullong v6 = v4;
      atomic_compare_exchange_strong_explicit(v3, (unint64_t *)&v6, (1 << v5) | v4, memory_order_relaxed, memory_order_relaxed);
      BOOL v7 = v6 == v4;
      atomic_ullong v4 = v6;
      if (v7)
      {
        uint64_t v10 = (v1 << 6);
        return a1 + (v2 << 20) + ((v5 | v10) << 6) + 1664;
      }
    }
    if (++v1 != 3) {
      continue;
    }
    break;
  }
  BOOL v8 = (atomic_ullong *)(a1 + (v2 << 20) + 1624);
  atomic_ullong v9 = *v8;
  uint64_t v10 = 192;
  while (v9 != -1)
  {
    unint64_t v5 = __clz(__rbit64(~v9));
    if (v5 >= 0x26) {
      break;
    }
    atomic_ullong v11 = v9;
    atomic_compare_exchange_strong_explicit(v8, (unint64_t *)&v11, (1 << v5) | v9, memory_order_relaxed, memory_order_relaxed);
    BOOL v7 = v11 == v9;
    atomic_ullong v9 = v11;
    if (v7) {
      return a1 + (v2 << 20) + ((v5 | v10) << 6) + 1664;
    }
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v15 = a1 + (v2 << 20) + 8 * i;
    uint64_t v17 = *(void *)(v15 + 16);
    uint64_t v16 = (atomic_ullong *)(v15 + 16);
    if (v17 != -1)
    {
      uint64_t v18 = 0;
      while (2)
      {
        uint64_t v19 = a1 + (v2 << 20) + (i << 9) + 8 * v18;
        uint64_t v22 = *(void *)(v19 + 64);
        __int16 v20 = (atomic_ullong *)(v19 + 64);
        uint64_t v21 = v22;
        while (v21 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v21));
          uint64_t v24 = v21;
          atomic_compare_exchange_strong_explicit(v20, (unint64_t *)&v24, (1 << v23) | v21, memory_order_relaxed, memory_order_relaxed);
          BOOL v7 = v24 == v21;
          uint64_t v21 = v24;
          if (v7)
          {
            __int16 StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
            *(void *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8) = (unint64_t)v20 & 0xFFFFFFFFFFFFFFE0;
            atomic_ullong v26 = *v16;
            do
            {
              if (*v20 != -1) {
                break;
              }
              atomic_ullong v27 = v26;
              atomic_compare_exchange_strong_explicit(v16, (unint64_t *)&v27, v26 | (1 << v18), memory_order_relaxed, memory_order_relaxed);
              BOOL v7 = v27 == v26;
              atomic_ullong v26 = v27;
            }
            while (!v7);
            return a1 + (v2 << 20) + (i << 18) + (v18 << 12) + (v23 << 6) + 0x4000;
          }
        }
        if (++v18 != 64) {
          continue;
        }
        break;
      }
    }
    uint64_t v12 = 0;
  }
  return v12;
}

uint64_t _dispatch_alloc_continuation_from_heap_slow()
{
  for (uint64_t i = &_dispatch_main_heap; ; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v1 = *i;
    if (!*i)
    {
      _dispatch_alloc_try_create_heap(i);
      uint64_t v1 = *i;
    }
    uint64_t result = _dispatch_alloc_continuation_from_heap(v1);
    if (result) {
      break;
    }
  }
  return result;
}

void _dispatch_alloc_try_create_heap(atomic_ullong *a1)
{
  kern_return_t v5;
  uint64_t v6;
  void *v7;
  mach_vm_address_t address;

  mach_vm_size_t v2 = (unint64_t)MEMORY[0xFFFFFC036] << 20;
  unint64_t v3 = (mach_vm_address_t *)MEMORY[0x1E4F14C80];
  atomic_ullong v4 = (vm_map_t *)MEMORY[0x1E4F14C48];
  while (1)
  {
    address = *v3;
    unint64_t v5 = mach_vm_map(*v4, &address, v2, 0xFFFFFuLL, 1241513985, 0, 0, 0, 3, 7, 1u);
    if (!v5) {
      break;
    }
    if (v5 != 3)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not allocate heap";
      qword_1E91199F0 = v5;
      __break(1u);
LABEL_9:
      _dispatch_bug(427, v5);
      return;
    }
    _dispatch_temporary_resource_shortage();
  }
  atomic_ullong v6 = 0;
  BOOL v7 = (void *)address;
  atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v6, address, memory_order_relaxed, memory_order_relaxed);
  if (v6)
  {
    unint64_t v5 = munmap(v7, (unint64_t)MEMORY[0xFFFFFC036] << 20);
    if (v5) {
      goto LABEL_9;
    }
  }
}

void _dispatch_alloc_maybe_madvise_page(uint64_t a1)
{
  if ((a1 & 0xFC000) != 0)
  {
    mach_vm_size_t v2 = (void *)(a1 & 0xFFFFFFFFFFFFC000);
    if (v2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = a1 & 0xFFFFFFFFFFF00000;
      unint64_t v5 = (unint64_t)v2 - v4 - 0x4000;
      unint64_t v6 = v5 >> 12;
      uint64_t v7 = (v5 >> 12) & 0x3F;
      uint64_t v8 = (v5 >> 18) & 0xFFFFF;
      atomic_ullong v9 = (void *)(((v4 + (v8 << 9)) & 0xFFFFFFFFFFFFFE07 | (8 * (v6 & 0x3F))) + 64);
      while (!v9[v3])
      {
        if (++v3 == 4)
        {
          uint64_t v10 = 0;
          uint64_t v16 = v8;
          unint64_t v17 = v4;
          uint64_t v15 = v7;
          while (1)
          {
            uint64_t v11 = 0;
            atomic_compare_exchange_strong_explicit(&v9[v10], (unint64_t *)&v11, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
            if (v11) {
              break;
            }
            if (++v10 == 4)
            {
              int v12 = madvise(v2, 0x4000uLL, 5);
              if (v12) {
                _dispatch_bug(563, v12);
              }
              uint64_t v10 = 4;
LABEL_14:
              uint64_t v13 = v10 + 7;
              do
              {
                *(void *)(v17 + ((8 * v15) | (v16 << 9)) + 8 * v13) = 0;
                unint64_t v14 = v13 - 7;
                --v13;
              }
              while (v14 > 2);
              goto LABEL_16;
            }
          }
          if ((int)v10 >= 2) {
            goto LABEL_14;
          }
          if (v10)
          {
LABEL_16:
            *atomic_ullong v9 = 0;
            return;
          }
          return;
        }
      }
    }
  }
}

uint64_t dispatch_benchmark(uint64_t a1, uint64_t a2)
{
  return dispatch_benchmark_f(a1, a2, *(void (**)(uint64_t))(a2 + 16));
}

uint64_t dispatch_benchmark_f(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (dispatch_benchmark_f_pred == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
    return 0;
  }
  dispatch_once_f(&dispatch_benchmark_f_pred, &dispatch_benchmark_f_bdata, (dispatch_function_t)_dispatch_benchmark_init);
  if (!a1) {
    return 0;
  }
LABEL_3:
  mach_absolute_time();
  uint64_t v6 = a1;
  do
  {
    a3(a2);
    --v6;
  }
  while (v6);
  mach_absolute_time();
  return __udivti3() - qword_1EC15C710;
}

uint64_t _dispatch_benchmark_init(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  mach_timebase_info((mach_timebase_info_t)a1);
  mach_absolute_time();
  if (v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  do
  {
    v3(v2);
    --v5;
  }
  while (v5);
  mach_absolute_time();
  __udivti3();
  uint64_t result = __udivti3();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _dispatch_send_wakeup_runloop_thread(mach_port_t a1, mach_msg_timeout_t timeout)
{
  msg.msgh_size_t size = 0;
  msg.mach_msg_bits_t msgh_bits = 19;
  msg.mach_port_t msgh_remote_port = a1;
  msg.mach_port_name_t msgh_local_port = 0;
  *(void *)&msg.mach_port_name_t msgh_voucher_port = 0x4E00000000;
  uint64_t v2 = mach_msg(&msg, 17, 0x18u, 0, 0, timeout, 0);
  if (v2 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14C48], msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }
  return v2;
}

uint64_t _dispatch_send_consume_send_once_right(mach_port_t a1)
{
  msg.msgh_size_t size = 0;
  msg.mach_msg_bits_t msgh_bits = 18;
  msg.mach_port_t msgh_remote_port = a1;
  msg.mach_port_name_t msgh_local_port = 0;
  *(void *)&msg.mach_port_name_t msgh_voucher_port = 0x4F00000000;
  return mach_msg(&msg, 1, 0x18u, 0, 0, 0, 0);
}

uint64_t (*libdispatch_internal_protocol_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 80) >= 0xFFFFFFF0) {
    return _dispatch_libdispatch_internal_protocol_subsystem[5 * (v1 - 64) + 5];
  }
  else {
    return 0;
  }
}

_DWORD *_Xmach_notify_port_deleted(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  }
  else
  {
    uint64_t result = (_DWORD *)_dispatch_mach_notify_port_deleted(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *_Xmach_notify_send_possible(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  }
  else
  {
    uint64_t result = (_DWORD *)_dispatch_mach_notify_send_possible(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t _Xmach_notify_port_destroyed(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 40)
  {
    if (*(unsigned __int16 *)(result + 38) << 16 == 0x100000) {
      _dispatch_mach_notify_port_destroyed(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28));
    }
    int v2 = -300;
  }
  else
  {
    int v2 = -304;
  }
  *(_DWORD *)(a2 + 32) = v2;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  return result;
}

_DWORD *_Xmach_notify_no_senders(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0 && result[1] == 36) {
    _dispatch_mach_notify_no_senders(result[3], result[8]);
  }
  *(_DWORD *)(a2 + 32) = -304;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  return result;
}

_DWORD *_Xmach_notify_send_once(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  }
  else
  {
    uint64_t result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *_Xmach_notify_dead_name(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  }
  else
  {
    uint64_t result = (_DWORD *)_dispatch_mach_notify_dead_name(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *_Xwakeup_runloop_thread(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  }
  else
  {
    uint64_t result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

_DWORD *_Xconsume_send_once_right(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  }
  else
  {
    uint64_t result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t libdispatch_internal_protocol_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v3;
  int v4 = a1[5];
  if ((v4 - 80) >= 0xFFFFFFF0
    && (uint64_t v5 = (void (*)(void))_dispatch_libdispatch_internal_protocol_subsystem[5 * (v4 - 64) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t firehose_send_register(int a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8)
{
  long long v11 = 0u;
  long long v18 = 0u;
  long long v10 = 0u;
  DWORD2(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = a2;
  int v12 = 1114112;
  uint64_t v13 = a4;
  int v14 = 0x100000;
  uint64_t v15 = a5;
  int v16 = 0x100000;
  int v17 = a6;
  DWORD1(v18) = 1310720;
  DWORD2(v18) = a7;
  int v19 = 1114112;
  uint64_t v20 = *MEMORY[0x1E4F14C30];
  uint64_t v21 = a3;
  uint64_t v22 = a8;
  int v9 = -2147483629;
  DWORD1(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = a1;
  *(void *)&long long v11 = 0x500002D50;
  return mach_msg((mach_msg_header_t *)&v9, 1, 0x70u, 0, 0, 0, 0);
}

uint64_t firehose_send_push_and_wait(int a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F14BF8];
  memset(&msg_16[4], 0, 44);
  int msg_4 = 0;
  int msg_8 = a1;
  mach_port_name_t msg_12 = mig_get_special_reply_port();
  int msg = 5395;
  *(void *)msg_16 = 0x2D5100000000;
  uint64_t v5 = mach_msg((mach_msg_header_t *)&msg, 3162115, 0x18u, 0x40u, msg_12, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!v5)
    {
      if (*(_DWORD *)&msg_16[4] == 71)
      {
        uint64_t v6 = 4294966988;
      }
      else if (*(_DWORD *)&msg_16[4] == 11701)
      {
        if ((msg & 0x80000000) == 0)
        {
          if (msg_4 == 56)
          {
            if (!msg_8)
            {
              uint64_t v6 = *(unsigned int *)&msg_16[16];
              if (!*(_DWORD *)&msg_16[16])
              {
                *a2 = *(_OWORD *)&msg_16[20];
                *a3 = *(_DWORD *)&msg_16[36];
                return v6;
              }
              goto LABEL_20;
            }
          }
          else if (msg_4 == 36)
          {
            if (msg_8) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = *(_DWORD *)&msg_16[16] == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996;
            }
            else {
              uint64_t v6 = *(unsigned int *)&msg_16[16];
            }
            goto LABEL_20;
          }
        }
        uint64_t v6 = 4294966996;
      }
      else
      {
        uint64_t v6 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&msg);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

uint64_t firehose_send_push_async(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  uint64_t v6 = *MEMORY[0x1E4F14C30];
  int v7 = a2;
  *(void *)&msg.mach_msg_bits_t msgh_bits = 19;
  msg.mach_port_name_t msgh_voucher_port = 0;
  msg.mach_msg_id_t msgh_id = 11602;
  msg.mach_port_t msgh_remote_port = a1;
  msg.mach_port_name_t msgh_local_port = 0;
  uint64_t v3 = mach_msg(&msg, 17, 0x24u, 0, 0, timeout, 0);
  if (v3 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14C48], msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }
  return v3;
}

uint64_t firehose_send_get_logging_prefs(int a1, _DWORD *a2, void *a3)
{
  memset(v12, 0, sizeof(v12));
  *(_OWORD *)&void v11[4] = 0u;
  LODWORD(v9) = 0;
  HIDWORD(v9) = a1;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  int v8 = 5395;
  *(void *)long long v11 = 0x2D5300000000;
  uint64_t v5 = mach_msg((mach_msg_header_t *)&v8, 3162115, 0x18u, 0x40u, special_reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!v5)
    {
      if (*(_DWORD *)&v11[4] == 71)
      {
        uint64_t v6 = 4294966988;
      }
      else if (*(_DWORD *)&v11[4] == 11703)
      {
        if ((v8 & 0x80000000) == 0)
        {
          if (v9 == 36)
          {
            uint64_t v6 = 4294966996;
            if (*(_DWORD *)&v11[16])
            {
              if (HIDWORD(v9)) {
                uint64_t v6 = 4294966996;
              }
              else {
                uint64_t v6 = *(unsigned int *)&v11[16];
              }
            }
          }
          else
          {
            uint64_t v6 = 4294966996;
          }
          goto LABEL_20;
        }
        uint64_t v6 = 4294966996;
        if (*(_DWORD *)&v11[8] == 1 && v9 == 56 && HIWORD(v12[0]) << 16 == 1114112)
        {
          uint64_t v6 = 0;
          *a2 = *(_DWORD *)&v11[12];
          *a3 = *(void *)&v12[3];
          return v6;
        }
      }
      else
      {
        uint64_t v6 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&v8);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  return v6;
}

uint64_t firehose_send_should_send_strings(int a1, _DWORD *a2)
{
  memset(&v11[4], 0, 28);
  int v8 = 0;
  int v9 = a1;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  int v7 = 5395;
  *(void *)long long v11 = 0x2D5400000000;
  uint64_t v3 = mach_msg((mach_msg_header_t *)&v7, 3162115, 0x18u, 0x30u, special_reply_port, 0, 0);
  uint64_t v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!v3)
    {
      if (*(_DWORD *)&v11[4] == 71)
      {
        uint64_t v4 = 4294966988;
      }
      else if (*(_DWORD *)&v11[4] == 11704)
      {
        if ((v7 & 0x80000000) == 0)
        {
          if (v8 == 40)
          {
            if (!v9)
            {
              uint64_t v4 = *(unsigned int *)&v11[16];
              if (!*(_DWORD *)&v11[16])
              {
                *a2 = *(_DWORD *)&v11[20];
                return v4;
              }
              goto LABEL_20;
            }
          }
          else if (v8 == 36)
          {
            if (v9) {
              BOOL v5 = 1;
            }
            else {
              BOOL v5 = *(_DWORD *)&v11[16] == 0;
            }
            if (v5) {
              uint64_t v4 = 4294966996;
            }
            else {
              uint64_t v4 = *(unsigned int *)&v11[16];
            }
            goto LABEL_20;
          }
        }
        uint64_t v4 = 4294966996;
      }
      else
      {
        uint64_t v4 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)&v7);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  return v4;
}

uint64_t (*firehoseReply_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 11705) >= 0xFFFFFFFB) {
    return firehose_client_firehoseReply_subsystem[5 * (v1 - 11700) + 5];
  }
  else {
    return 0;
  }
}

_DWORD *_Xpush_reply(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0 && result[1] == 56) {
    firehose_client_push_reply(result[3], result[8]);
  }
  *(_DWORD *)(a2 + 32) = -304;
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  return result;
}

uint64_t _Xpush_notify_async(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
  }
  else
  {
    uint64_t result = firehose_client_push_notify_async(*(unsigned int *)(result + 12), *(void *)(result + 32), *(void *)(result + 40), *(_DWORD *)(result + 48));
    *(_DWORD *)(a2 + 32) = result;
  }
  return result;
}

uint64_t firehoseReply_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 2_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 0) = v3;
  int v4 = a1[5];
  if ((v4 - 11705) >= 0xFFFFFFFB
    && (BOOL v5 = (void (*)(void))firehose_client_firehoseReply_subsystem[5 * (v4 - 11700) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14C30];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void _dispatch_bug(uint64_t a1, uint64_t a2)
{
  if (qword_1E9119A30 != -1) {
    dispatch_once_f(&qword_1E9119A30, 0, (dispatch_function_t)_dispatch_build_init);
  }
  uint64_t v5 = qword_1E9119A38;
  qword_1E9119A38 = v2;
  if (v2 != v5) {
    _dispatch_log("BUG in libdispatch: %s - %lu - 0x%lx", byte_1E9119A60, a1, a2);
  }
}

void _dispatch_log(char *__format, ...)
{
  va_start(va, __format);
  if (qword_1E9119A58 != -1) {
    dispatch_once_f(&qword_1E9119A58, 0, (dispatch_function_t)_dispatch_logv_init);
  }
  if ((_MergedGlobals & 1) == 0)
  {
    if (dispatch_logfile == -1)
    {
      uint64_t v2 = 0;
      vasprintf(&v2, __format, va);
      if (v2)
      {
        _simple_asl_log();
        free(v2);
      }
    }
    else
    {
      _dispatch_logv_file(__format, va);
    }
  }
}

void _dispatch_bug_mach_client(const char *a1, mach_error_t error_value)
{
  uint64_t v3 = _dispatch_bug_mach_client_last_seen;
  _dispatch_bug_mach_client_last_seen = v2;
  if (v2 != v3)
  {
    uint64_t v6 = mach_error_string(error_value);
    _dispatch_log("BUG in libdispatch client: %s %s - 0x%x", a1, v6, error_value);
    int v7 = mach_error_string(error_value);
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_mach_client", "BUG in libdispatch client: %s %s - 0x%x", a1, v7, error_value);
    OUTLINED_FUNCTION_1();
    if (v8)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_mach_client";
      __break(1u);
    }
  }
}

void _dispatch_bug_kevent_client(const char *a1, const char *a2, const char *a3, int __errnum, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8 = (const char *)v7;
  LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (uint64_t (**)())handler, 2, 1) = __errnum;
  if (a7)
  {
    uint64_t v15 = *(void *)(*(void *)~*(void *)(a7 + 8) + 40);
    if (v15 == 787)
    {
      if (*(void *)(a7 + 40))
      {
        function_symbol = *(const void **)(a7 + 40);
        goto LABEL_11;
      }
    }
    else if (v15 == 275)
    {
      int v16 = *(void **)(a7 + 40);
      if (v16)
      {
        function_symbol = (const void *)_dispatch_continuation_get_function_symbol(v16);
        goto LABEL_11;
      }
    }
    function_symbol = 0;
LABEL_11:
    a2 = **(const char ***)a7;
    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  function_symbol = 0;
  if (!a3) {
    goto LABEL_16;
  }
LABEL_12:
  if (v11)
  {
    uint64_t v19 = qword_1E9119A40;
    qword_1E9119A40 = v7;
    if (v7 == v19) {
      return;
    }
    strerror((int)v11);
    OUTLINED_FUNCTION_2();
    char v8 = "BUG in libdispatch client: %s %s: \"%s\" - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }";
    _dispatch_log("BUG in libdispatch client: %s %s: \"%s\" - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v27, v29, v31, v33, v35, v37, v39, v41);
    strerror((int)v11);
    OUTLINED_FUNCTION_2();
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client", "BUG in libdispatch client: %s %s: \"%s\" - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v28, v30, v32, v34, v36, v38, v40, v42);
    OUTLINED_FUNCTION_1();
    if ((v20 & 1) == 0) {
      return;
    }
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
    __break(1u);
  }
LABEL_16:
  uint64_t v21 = (uint64_t)v8;
  if (a3)
  {
    uint64_t v22 = qword_1E9119A48;
    qword_1E9119A48 = (uint64_t)v8;
    if (v8 == (const char *)v22) {
      return;
    }
    long long v11 = "BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }";
    _dispatch_log("BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, a3, a6, a2, a5, a5, function_symbol);
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client", "BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, a3, a6, a2, a5, a5, function_symbol);
    OUTLINED_FUNCTION_1();
    if ((v21 & 1) == 0) {
      return;
    }
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
    __break(1u);
  }
  uint64_t v23 = qword_1E9119A50;
  qword_1E9119A50 = v21;
  if (v21 != v23)
  {
    uint64_t v24 = strerror((int)v11);
    _dispatch_log("BUG in libdispatch: %s: \"%s\" - 0x%x{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v24, v11, a6, a2, a5, a5, function_symbol);
    unsigned int v25 = strerror((int)v11);
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client", "BUG in libdispatch: %s: \"%s\" - 0x%x{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }", a1, v25, v11, a6, a2, a5, a5, function_symbol);
    OUTLINED_FUNCTION_1();
    if (v26)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
      __break(1u);
    }
  }
}

void _dispatch_bug_kevent_vanished(uint64_t a1)
{
  if (*(void *)(*(void *)~*(void *)(a1 + 8) + 40) == 275)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      _dispatch_continuation_get_function_symbol(v2);
    }
  }
  uint64_t v3 = _dispatch_bug_kevent_vanished_last_seen;
  _dispatch_bug_kevent_vanished_last_seen = v1;
  if (v1 != v3)
  {
    OUTLINED_FUNCTION_0();
    _dispatch_log("BUG in libdispatch client: %s, monitored resource vanished before the source cancel handler was invoked { %p[%s], ident: %d / 0x%x, handler: %p }", v5, v7, v9, v11, v13, v15);
    OUTLINED_FUNCTION_0();
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_vanished", "BUG in libdispatch client: %s, monitored resource vanished before the source cancel handler was invoked { %p[%s], ident: %d / 0x%x, handler: %p }", v6, v8, v10, v12, v14, v16);
    OUTLINED_FUNCTION_1();
    if (v4)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_vanished";
      __break(1u);
    }
  }
}

void _dispatch_bug_deprecated(const char *a1)
{
  uint64_t v2 = _dispatch_bug_deprecated_last_seen;
  _dispatch_bug_deprecated_last_seen = v1;
  if (v1 != v2)
  {
    _dispatch_log("DEPRECATED USE in libdispatch client: %s; set a breakpoint on _dispatch_bug_deprecated to debug", a1);
    _dispatch_fault((uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_deprecated", "DEPRECATED USE in libdispatch client: %s; set a breakpoint on _dispatch_bug_deprecated to debug",
      a1);
    OUTLINED_FUNCTION_1();
    if (v4)
    {
      qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_deprecated";
      __break(1u);
    }
  }
}

void dispatch_debug(dispatch_object_t object, const char *message, ...)
{
  va_start(va, message);
  _dispatch_debugv((unint64_t *)object, message, va);
}

void _dispatch_queue_attr_to_info_cold_1(uint64_t *a1)
{
  if (*a1) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = 0;
  }
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid queue attribute";
  qword_1E91199F0 = v1;
  __break(1u);
}

uint64_t _dispatch_fault_cold_1(const char *a1)
{
  return os_fault_with_payload();
}

void _dispatch_continuation_get_function_symbol_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_strdup_if_mutable_cold_1()
{
}

void _dispatch_Block_copy_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: NULL was passed where a block should have been";
  __break(1u);
}

size_t _dispatch_object_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v4 = snprintf(__str, __size, "xref = %d, ref = %d, ", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  size_t v5 = v4;
  if (v4 >= __size) {
    size_t v5 = __size;
  }
  if (v4 >= 0) {
    return v5;
  }
  else {
    return 0;
  }
}

void _os_object_retain_weak_cold_1()
{
  qword_1E91199C0 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

void _dispatch_dispose_cold_1(uint64_t *a1)
{
  uint64_t v1 = *a1;
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Release while enqueued";
  qword_1E91199F0 = v1;
  __break(1u);
}

void dispatch_set_target_queue_cold_2()
{
  qword_1E91199C0 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

void dispatch_set_target_queue_cold_3(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_suspend_cold_1()
{
  qword_1E91199C0 = (uint64_t)"API MISUSE: Object type does not support suspension";
  __break(1u);
}

void dispatch_resume_cold_1()
{
  qword_1E91199C0 = (uint64_t)"API MISUSE: Object type does not support resume";
  __break(1u);
}

uint64_t _dispatch_objc_debug(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  size_t v5 = (void *)[a1 debugDescription];
  [v5 getBytes:a2 maxLength:a3 - 1 usedLength:&v7 encoding:4 options:0 range:0 remainingRange:objc_msgSend(v5, "length")];
  uint64_t result = v7;
  if (v7) {
    *(unsigned char *)(a2 + v7) = 0;
  }
  return result;
}

void _dispatch_sema4_create_slow_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: mach semaphore API failure";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_sema4_create_slow_cold_2()
{
  qword_1E91199C0 = (uint64_t)"MIG_REPLY_MISMATCH";
  qword_1E91199F0 = -301;
  __break(1u);
}

void _dispatch_sema4_create_slow_cold_3()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Use-after-free of dispatch_semaphore_t or dispatch_group_t";
  qword_1E91199F0 = 15;
  __break(1u);
}

void _dispatch_thread_event_wait_slow_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt thread event value";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_unfair_lock_lock_slow_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: trying to lock recursively";
  __break(1u);
}

void _dispatch_unfair_lock_unlock_slow_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: lock not owned by current thread";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dlock_wait_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wait() failed";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dlock_wait_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Owner in ulock is unknown - possible memory corruption";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dlock_wake_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wake() failed";
  qword_1E91199F0 = -a1;
  __break(1u);
}

size_t _dispatch_semaphore_debug(uint64_t a1, char *a2, size_t a3)
{
  ClassName = object_getClassName((id)a1);
  int v7 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, (const void *)a1);
  size_t v8 = v7;
  if (v7 >= a3) {
    size_t v8 = a3;
  }
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0;
  }
  size_t v10 = v9 + _dispatch_object_debug_attr(a1, &a2[v9], a3 - v9);
  int v11 = snprintf(&a2[v10], a3 - v10, "port = 0x%x, ", *(_DWORD *)(a1 + 64));
  size_t v12 = v11;
  if (a3 - v10 < v11) {
    size_t v12 = a3 - v10;
  }
  if (v11 < 0) {
    size_t v12 = 0;
  }
  size_t v13 = v12 + v10;
  size_t v14 = a3 - (v12 + v10);
  int v15 = snprintf(&a2[v12 + v10], v14, "value = %ld, orig = %ld }", *(void *)(a1 + 48), *(void *)(a1 + 56));
  size_t v16 = v15;
  if (v14 < v15) {
    size_t v16 = v14;
  }
  if (v15 < 0) {
    size_t v16 = 0;
  }
  return v16 + v13;
}

size_t _dispatch_group_debug(void *a1, char *a2, size_t a3)
{
  uint64_t v6 = a1[6];
  ClassName = object_getClassName(a1);
  int v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  size_t v9 = v8;
  if (v8 >= a3) {
    size_t v9 = a3;
  }
  if (v8 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 0;
  }
  size_t v11 = v10 + _dispatch_object_debug_attr((uint64_t)a1, &a2[v10], a3 - v10);
  size_t v12 = a3 - v11;
  int v13 = snprintf(&a2[v11], v12, "count = %u, gen = %d, waiters = %d, notifs = %d }", -(v6 & 0xFFFFFFFC) >> 2, HIDWORD(v6), v6 & 1, (v6 >> 1) & 1);
  size_t v14 = v13;
  if (v12 < v13) {
    size_t v14 = v12;
  }
  if (v13 < 0) {
    size_t v14 = 0;
  }
  return v14 + v11;
}

void _dispatch_semaphore_dispose_cold_1(void *a1, uint64_t a2)
{
  uint64_t v2 = a2 - *a1;
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use (current value < original value)";
  qword_1E91199F0 = v2;
  __break(1u);
}

void _dispatch_group_dispose_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Group object deallocated while in use";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_group_leave_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unbalanced call to dispatch_group_leave()";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_group_enter_cold_2(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_group_enter()";
  qword_1E91199F0 = a1;
  __break(1u);
}

void os_eventlink_create_with_port_cold_1()
{
}

size_t _dispatch_queue_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v7 = *(void **)(a1 + 24);
  int v8 = (const char *)&unk_18A97F2E6;
  if (v7 && v7[9]) {
    int v8 = (const char *)v7[9];
  }
  unint64_t v9 = *(void *)(a1 + 56);
  int v10 = snprintf(__str, __size, "sref = %d, target = %s[%p], width = 0x%x, state = 0x%016llx", *(_DWORD *)(a1 + 96) + 1, v8, v7, *(unsigned __int16 *)(a1 + 80), v9);
  size_t v11 = v10;
  if (v10 >= __size) {
    size_t v11 = __size;
  }
  if (v10 >= 0) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = 0;
  }
  if (v9 >> 55)
  {
    int v13 = (char *)OUTLINED_FUNCTION_1_0();
    snprintf(v13, v3, ", suspended = %d", v9 >> 58);
    OUTLINED_FUNCTION_0_0();
    if (v15 < 0) {
      uint64_t v14 = 0;
    }
    v12 += v14;
  }
  uint64_t v16 = v9 & 0x180000000000000;
  if ((v9 & 0x180000000000000) == 0x80000000000000)
  {
    long long v18 = (char *)OUTLINED_FUNCTION_1_0();
    snprintf(v18, v3, ", activating");
  }
  else if (v16 == 0x100000000000000)
  {
    uint64_t v19 = (char *)OUTLINED_FUNCTION_1_0();
    snprintf(v19, v3, ", activated");
  }
  else
  {
    if (v16 != 0x180000000000000) {
      goto LABEL_22;
    }
    int v17 = (char *)OUTLINED_FUNCTION_1_0();
    snprintf(v17, v3, ", inactive");
  }
  OUTLINED_FUNCTION_0_0();
  if (v21 < 0) {
    uint64_t v20 = 0;
  }
  v12 += v20;
LABEL_22:
  if ((v9 & 0x4000000001) != 0)
  {
    uint64_t v22 = (char *)OUTLINED_FUNCTION_1_0();
    snprintf(v22, v3, ", enqueued");
    OUTLINED_FUNCTION_0_0();
    if (v24 < 0) {
      uint64_t v23 = 0;
    }
    v12 += v23;
  }
  if ((v9 & 0x8000000000) != 0)
  {
    unsigned int v25 = (char *)OUTLINED_FUNCTION_1_0();
    snprintf(v25, v3, ", dirty");
    OUTLINED_FUNCTION_0_0();
    if (v27 < 0) {
      uint64_t v26 = 0;
    }
    v12 += v26;
  }
  if ((v9 & 0x700000000) != 0)
  {
    size_t v3 = __size - v12;
    snprintf(&__str[v12], __size - v12, ", max qos %d", BYTE4(v9) & 7);
    OUTLINED_FUNCTION_0_0();
    if (v29 < 0) {
      uint64_t v28 = 0;
    }
    v12 += v28;
  }
  if (v9 >= 4) {
    int v30 = v9 | 3;
  }
  else {
    int v30 = 0;
  }
  if (v9 >= 4 && ((*(_DWORD *)(a1 + 80) & 0x40000) == 0 || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0))
  {
    size_t v3 = __size - v12;
    snprintf(&__str[v12], __size - v12, ", draining on 0x%x", v9 | 3);
    OUTLINED_FUNCTION_0_0();
    if (v32 < 0) {
      uint64_t v31 = 0;
    }
    v12 += v31;
  }
  uint64_t v33 = (char *)OUTLINED_FUNCTION_1_0();
  if ((v9 & 0x40000000000000) != 0)
  {
    snprintf(v33, v3, ", in-barrier");
    OUTLINED_FUNCTION_0_0();
    if (v39 < 0) {
      uint64_t v37 = 0;
    }
    uint64_t v36 = v9 & 0x10000000000;
  }
  else
  {
    uint64_t v34 = (v9 >> 41) & 0x1FFF;
    int v35 = v34 + *(unsigned __int16 *)(a1 + 80) - 4096;
    uint64_t v36 = v9 & 0x10000000000;
    if (v36) {
      int v35 = v34 - 4095;
    }
    snprintf(v33, v3, ", in-flight = %d", v35);
    OUTLINED_FUNCTION_0_0();
    if (v38 < 0) {
      uint64_t v37 = 0;
    }
  }
  size_t v40 = v37 + v12;
  if (v36)
  {
    int v41 = snprintf(&__str[v40], __size - v40, ", pending-barrier");
    size_t v42 = v41;
    if (__size - v40 < v41) {
      size_t v42 = __size - v40;
    }
    if (v41 < 0) {
      size_t v42 = 0;
    }
    v40 += v42;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0 && (*(_DWORD *)(a1 + 80) & 0x1000000) == 0)
  {
    size_t v43 = __size - v40;
    int v44 = snprintf(&__str[v40], v43, ", thread = 0x%x ", v30);
    size_t v45 = v44;
    if (v43 < v44) {
      size_t v45 = v43;
    }
    if (v44 < 0) {
      size_t v45 = 0;
    }
    v40 += v45;
  }
  return v40;
}

uint64_t _dispatch_queue_debug(void *a1, char *__str, size_t __size)
{
  uint64_t v6 = (const char *)a1[9];
  if (!v6) {
    uint64_t v6 = object_getClassName(a1) + 12;
  }
  int v7 = snprintf(__str, __size, "%s[%p] = { ", v6, a1);
  size_t v8 = v7;
  if (v7 >= __size) {
    size_t v8 = __size;
  }
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0;
  }
  size_t v10 = v9 + _dispatch_object_debug_attr((uint64_t)a1, &__str[v9], __size - v9);
  size_t v11 = v10 + _dispatch_queue_debug_attr((uint64_t)a1, &__str[v10], __size - v10);
  size_t v12 = __size - v11;
  int v13 = snprintf(&__str[v11], v12, "}");
  size_t v14 = v13;
  if (v12 < v13) {
    size_t v14 = v12;
  }
  if (v13 < 0) {
    size_t v14 = 0;
  }
  return v14 + v11;
}

size_t _dispatch_channel_debug(_DWORD *a1, char *a2, size_t a3)
{
  int v6 = a1[20];
  ClassName = object_getClassName(a1);
  int v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  size_t v9 = v8;
  if (v8 >= a3) {
    size_t v9 = a3;
  }
  if (v8 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 0;
  }
  size_t v11 = v10 + _dispatch_object_debug_attr((uint64_t)a1, &a2[v10], a3 - v10);
  size_t v12 = _dispatch_queue_debug_attr((uint64_t)a1, &a2[v11], a3 - v11);
  int v13 = "cancelled, ";
  size_t v14 = (const char *)&unk_18A97F2E6;
  if ((v6 & 0x10000000) == 0) {
    int v13 = (const char *)&unk_18A97F2E6;
  }
  int v15 = "needs-event, ";
  if ((v6 & 0x40000000) == 0) {
    int v15 = (const char *)&unk_18A97F2E6;
  }
  if (v6 < 0) {
    size_t v14 = "deleted, ";
  }
  int v16 = snprintf(a2, a3, "%s%s%s", v13, v15, v14);
  size_t v17 = v16;
  if (v16 >= a3) {
    size_t v17 = a3;
  }
  if (v16 < 0) {
    size_t v17 = 0;
  }
  return v11 + v17 + v12;
}

void dispatch_assert_queue_V2_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue()";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_assert_queue_not_V2_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue_not()";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_queue_override_invoke_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_block_perform_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid flags passed to dispatch_block_perform()";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_block_invoke_direct_cold_3(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_block_cancel_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_cancel()";
  __break(1u);
}

void dispatch_block_testcancel_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_testcancel()";
  __break(1u);
}

void dispatch_block_wait_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_block_wait_cold_2(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be waited for more than once";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_block_wait_cold_4()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_wait()";
  __break(1u);
}

void dispatch_block_notify_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and observed";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_block_notify_cold_3(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_notify()";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_queue_set_label_nocopy_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change label for this queue";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch queue/source property setter called after activation";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_floor called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_fallback_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_fallback called on invalid object type";
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue with corrupt state";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Premature release of a locked queue";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_3(uint64_t *a1)
{
  uint64_t v1 = *a1;
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue while items are enqueued";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_queue_xref_dispose_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a suspended object";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_queue_xref_dispose_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of an inactive object";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_queue_set_width_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot set width of a serial queue";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_queue_set_width_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected dispatch object type";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_3()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling dispatc"
                             "h_set_target_queue() or dispatch_set_*_handler()";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_4()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change the target of this object after it has been activated";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_5()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change the target of a queue already targeted by other"
                             " dispatch objects";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_6(unsigned __int8 a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected dispatch object type";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_lane_legacy_set_target_queue_cold_2()
{
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace();
  }

  _dispatch_bug_deprecated("Changing the target of a queue already targeted by other dispatch objects");
}

void _dispatch_queue_priority_inherit_from_target_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_workloop_set_cpupercent_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: workloop qos class or priority must be set before cpupercent";
  __break(1u);
}

void _dispatch_workloop_dispose_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a workloop while items are enqueued";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_workloop_dispose_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a workloop with corrupt state";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_workloop_dispose_cold_3(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a locked workloop";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_workloop_activate_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Process has too many threads.";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_workloop_wakeup_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid way to wake up a workloop";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_workloop_wakeup_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Waking up an inactive workloop";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_async_swift_job_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Used Swift only SPI to enqueue non-Swift runtime objects into dispatch";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_channel_xref_dispose_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a channel that has not been cancelled, but has a c"
                             "ancel acknowledgement callback";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_channel_invoke_cold_3()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel didn't call dispatch_channel_drain";
  __break(1u);
}

void _dispatch_channel_invoke_cold_4()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: sync waiter found on channel";
  __break(1u);
}

void dispatch_channel_foreach_work_item_peek_f_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Called peek after drain";
  __break(1u);
}

void dispatch_channel_drain_f_cold_3()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Called drain twice in the same invoke";
  __break(1u);
}

void dispatch_channel_create_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported callbacks version";
  qword_1E91199F0 = 0;
  __break(1u);
}

void _dispatch_mgr_queue_push_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Waiter pushed onto manager";
  __break(1u);
}

void _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid pthread root queue observer hooks";
  __break(1u);
}

void _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_cold_1(unsigned __int16 a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid queue type";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_runloop_root_queue_perform_4CF_cold_6(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Not a runloop queue";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_main_queue_drain_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_main_queue_callback_4CF called after dispatch_main()";
  __break(1u);
}

void _dispatch_main_queue_drain_cold_7()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
  __break(1u);
}

void _dispatch_main_queue_drain_cold_8(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_main_queue_callback_4CF called from the wrong thread";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_queue_cleanup_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch queue is running";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_worker_thread_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Pending thread request underflow";
  qword_1E91199F0 = a1 - 1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: QoS Maintenance support required";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_2(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Missing Kevent WORKQ support";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_3()
{
  uint64_t v0 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unable to limit cooperative pool size";
  qword_1E91199F0 = v0;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_4(int a1, int a2)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Root queue initialization failed";
  qword_1E91199F0 = a2 | (a1 << 16);
  __break(1u);
}

void _dispatch_mgr_queue_drain_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Interrupted drain on manager queue";
  __break(1u);
}

void _dispatch_root_queue_drain_deferred_wlh_cold_4(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh state";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_apply_with_attr_f_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: attribute's properties are invalid or meaningless on this system";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_apply_with_attr_f_cold_4(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_apply_attr not initialized using dispatch_apply_attr_init";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unknown entity";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid threads_per_entity value for CPU entity";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_3(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid threads_per_cluster value, only acceptable value is 1";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_4()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: 0 is an invalid threads_per_cluster value";
  qword_1E91199F0 = 0;
  __break(1u);
}

size_t _dispatch_source_debug(void *a1, char *a2, size_t a3)
{
  int v6 = (const char ***)a1[11];
  ClassName = object_getClassName(a1);
  int v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  size_t v9 = v8;
  if (v8 >= a3) {
    size_t v9 = a3;
  }
  if (v8 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 0;
  }
  uint64_t v11 = OUTLINED_FUNCTION_0_1();
  size_t v14 = v10 + _dispatch_object_debug_attr(v11, v12, v13);
  uint64_t v15 = OUTLINED_FUNCTION_0_1();
  size_t v18 = v14 + _dispatch_source_debug_attr(v15, v16, v17);
  char v19 = *((unsigned char *)v6 + 29);
  if ((v19 & 2) != 0)
  {
    uint64_t v25 = OUTLINED_FUNCTION_0_1();
    v18 += _dispatch_timer_debug_attr(v25, v26, v27);
    char v19 = *((unsigned char *)v6 + 29);
  }
  size_t v20 = a3 - v18;
  if (v19) {
    int v21 = " (direct)";
  }
  else {
    int v21 = (const char *)&unk_18A97F2E6;
  }
  int v22 = snprintf(&a2[v18], v20, "kevent = %p%s, filter = %s }", v6, v21, **v6);
  size_t v23 = v22;
  if (v20 < v22) {
    size_t v23 = v20;
  }
  if (v22 < 0) {
    size_t v23 = 0;
  }
  return v23 + v18;
}

size_t _dispatch_source_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 88);
  int v6 = *(_DWORD *)(a1 + 80);
  uint64_t v7 = *(void *)(v5 + 16);
  if (v4)
  {
    int v8 = (const char *)v4[9];
    if (!v8) {
      int v8 = (const char *)&unk_18A97F2E6;
    }
  }
  else
  {
    int v8 = (const char *)&unk_18A97F2E6;
  }
  BOOL v9 = v7 != 0;
  int v10 = v7 & 1;
  uint64_t v11 = "cancelled, ";
  if ((v6 & 0x10000000) == 0) {
    uint64_t v11 = (const char *)&unk_18A97F2E6;
  }
  size_t v12 = "needs-event, ";
  if ((v6 & 0x40000000) == 0) {
    size_t v12 = (const char *)&unk_18A97F2E6;
  }
  if (v6 < 0) {
    size_t v13 = "deleted, ";
  }
  else {
    size_t v13 = (const char *)&unk_18A97F2E6;
  }
  int v14 = snprintf(__str, __size, "target = %s[%p], ident = 0x%x, mask = 0x%x, pending_data = 0x%llx, registered = %d, armed = %d, %s%s%s", v8, v4, *(_DWORD *)(v5 + 24), *(_DWORD *)(v5 + 32), *(void *)(v5 + 72), v9, v10, v11, v12, v13);
  size_t v15 = v14;
  if (v14 >= __size) {
    size_t v15 = __size;
  }
  if (v14 >= 0) {
    return v15;
  }
  else {
    return 0;
  }
}

size_t _dispatch_timer_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v4 = snprintf(__str, __size, "timer = { target = 0x%llx, deadline = 0x%llx, interval = 0x%llx, flags = 0x%x }, ", *(void *)(*(void *)(a1 + 88) + 80), *(void *)(*(void *)(a1 + 88) + 88), *(void *)(*(void *)(a1 + 88) + 96), *(unsigned __int8 *)(*(void *)(a1 + 88) + 30));
  size_t v5 = v4;
  if (v4 >= __size) {
    size_t v5 = __size;
  }
  if (v4 >= 0) {
    return v5;
  }
  else {
    return 0;
  }
}

void dispatch_source_create_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target source to the cooperative root queue - not implemented";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_source_xref_dispose_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a source that has not been cancelled, but has a ma"
                             "ndatory cancel handler";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_source_merge_data_cold_1(char a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid source type";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_source_will_reenable_kevent_4NW_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_source_will_reenable_kevent_4NW not called from wit"
                             "hin the event handler";
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Source is suspended";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_source_cancel_and_wait called from a source handler";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_3(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Dispatch source used after last release";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_4(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Source has a cancel handler";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_source_merge_evt_cold_1(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports or f"
                             "ile descriptors)";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_source_latch_and_call_cold_1()
{
}

void _os_workgroup_interval_xref_dispose_cold_1()
{
}

void _os_workgroup_tsd_cleanup_cold_1(char *a1, uint64_t a2)
{
}

void _os_workgroup_leave_update_wg_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Joined count underflowed";
  __break(1u);
}

void _os_workgroup_set_name_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_1E91199F0 = 0xFFFFFFFFLL;
  __break(1u);
}

void os_workgroup_create_with_workload_id_cold_1(int a1)
{
}

void os_workgroup_create_with_workload_id_cold_2()
{
}

void _os_workgroup_set_work_interval_workload_id_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_1E91199F0 = a1;
  __break(1u);
}

void os_workgroup_interval_create_with_workload_id_cold_1(int a1)
{
}

void os_workgroup_interval_create_with_workload_id_cold_2()
{
}

void os_workgroup_leave_cold_1()
{
}

void os_workgroup_leave_cold_3()
{
}

void os_workgroup_leave_cold_4()
{
}

void os_workgroup_leave_cold_5()
{
}

void os_workgroup_copy_port_cold_3()
{
}

void os_workgroup_create_with_port_cold_1(char *a1, int a2)
{
  snprintf(a1, 0x200uLL, "BUG IN DISPATCH: Invalid wi flags = %u", a2);
  _os_crash();
  __break(1u);
}

void os_workgroup_create_with_port_cold_2()
{
}

void os_workgroup_create_with_workload_id_and_port_cold_2(int a1)
{
}

void os_workgroup_create_with_workload_id_and_port_cold_3(int a1)
{
}

void os_workgroup_create_with_workload_id_and_workgroup_cold_1()
{
}

void _os_workgroup_join_update_wg_cold_1()
{
  __assert_rtn("_os_workgroup_join_update_wg", "workgroup.c", 1653, "cur_wg == NULL");
}

void os_workgroup_get_working_arena_cold_1()
{
}

void os_workgroup_get_working_arena_cold_2()
{
}

void os_workgroup_get_working_arena_cold_3()
{
}

void _os_workgroup_pthread_start_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: pthread_start os_workgroup_join failed";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _wg_type_to_wi_flags_cold_1()
{
}

void _os_workgroup_lookup_type_from_workload_id_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Workload identifier must not be NULL";
  __break(1u);
}

size_t _dispatch_mach_msg_debug(_DWORD *a1, char *a2, size_t a3)
{
  ClassName = object_getClassName(a1);
  int v7 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  size_t v8 = v7;
  if (v7 >= a3) {
    size_t v8 = a3;
  }
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0;
  }
  size_t v10 = v9 + _dispatch_object_debug_attr((uint64_t)a1, &a2[v9], a3 - v9);
  uint64_t v11 = a1 + 22;
  int v12 = snprintf(&a2[v10], a3 - v10, "opts/err = 0x%x, msgh[%p] = { ", a1[12], a1 + 22);
  size_t v13 = v12;
  if (a3 - v10 < v12) {
    size_t v13 = a3 - v10;
  }
  if (v12 < 0) {
    size_t v13 = 0;
  }
  if (a1[18]) {
    uint64_t v11 = *(_DWORD **)v11;
  }
  size_t v14 = v13 + v10;
  if (v11[5])
  {
    size_t v15 = (char *)OUTLINED_FUNCTION_1_2();
    snprintf(v15, (size_t)a1, "id 0x%x, ", v39);
    OUTLINED_FUNCTION_0_3();
    if (v17 < 0) {
      uint64_t v16 = 0;
    }
    v14 += v16;
  }
  if (v11[1])
  {
    size_t v18 = (char *)OUTLINED_FUNCTION_1_2();
    snprintf(v18, (size_t)a1, "size %u, ", v39);
    OUTLINED_FUNCTION_0_3();
    if (v20 < 0) {
      uint64_t v19 = 0;
    }
    v14 += v19;
  }
  if (*v11)
  {
    size_t v21 = a3 - v14;
    snprintf(&a2[v14], a3 - v14, "bits <l %u, r %u", (*v11 >> 8) & 0x1F, *v11 & 0x1F);
    OUTLINED_FUNCTION_0_3();
    if (v23 < 0) {
      uint64_t v22 = 0;
    }
    size_t v24 = v22 + v14;
    if ((*v11 & 0xFFE0E0E0) != 0)
    {
      uint64_t v25 = (char *)OUTLINED_FUNCTION_1_2();
      snprintf(v25, v21, ", o 0x%x", v40);
      OUTLINED_FUNCTION_0_3();
      if (v27 < 0) {
        uint64_t v26 = 0;
      }
      v24 += v26;
    }
    snprintf(&a2[v24], a3 - v24, ">, ");
    OUTLINED_FUNCTION_0_3();
    if (v29 < 0) {
      uint64_t v28 = 0;
    }
    size_t v14 = v28 + v24;
  }
  int v30 = v11[2];
  uint64_t v31 = &a2[v14];
  if (v11[3])
  {
    if (v30) {
      snprintf(v31, a3 - v14, "local 0x%x, remote 0x%x");
    }
    else {
      snprintf(v31, a3 - v14, "local 0x%x");
    }
  }
  else if (v30)
  {
    snprintf(v31, a3 - v14, "remote 0x%x");
  }
  else
  {
    snprintf(v31, a3 - v14, "no ports");
  }
  OUTLINED_FUNCTION_0_3();
  if (v33 < 0) {
    uint64_t v32 = 0;
  }
  size_t v34 = v32 + v14;
  size_t v35 = a3 - (v32 + v14);
  int v36 = snprintf(&a2[v32 + v14], v35, " } }");
  size_t v37 = v36;
  if (v35 < v36) {
    size_t v37 = v35;
  }
  if (v36 < 0) {
    size_t v37 = 0;
  }
  return v37 + v34;
}

uint64_t _dispatch_mach_debug(void *a1, char *__str, size_t __size)
{
  int v6 = (const char *)a1[9];
  if (!v6 || (*((_WORD *)a1 + 58) & 8) != 0) {
    int v6 = object_getClassName(a1) + 12;
  }
  int v7 = snprintf(__str, __size, "%s[%p] = { ", v6, a1);
  size_t v8 = v7;
  if (v7 >= __size) {
    size_t v8 = __size;
  }
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0;
  }
  size_t v10 = v9 + _dispatch_object_debug_attr((uint64_t)a1, &__str[v9], __size - v9);
  size_t v11 = v10 + _dispatch_mach_debug_attr((uint64_t)a1, &__str[v10], __size - v10);
  size_t v12 = __size - v11;
  int v13 = snprintf(&__str[v11], v12, "}");
  size_t v14 = v13;
  if (v12 < v13) {
    size_t v14 = v12;
  }
  if (v13 < 0) {
    size_t v14 = 0;
  }
  return v14 + v11;
}

size_t _dispatch_mach_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 120);
  int v6 = (const char *)&unk_18A97F2E6;
  if (v4)
  {
    int v7 = (const char *)v4[9];
    if (!v7) {
      int v7 = (const char *)&unk_18A97F2E6;
    }
  }
  else
  {
    int v7 = (const char *)&unk_18A97F2E6;
  }
  if (*(unsigned char *)(v5 + 30)) {
    size_t v8 = " (armed)";
  }
  else {
    size_t v8 = (const char *)&unk_18A97F2E6;
  }
  if (*(void *)(v5 + 48)) {
    int v6 = " (pending)";
  }
  int v9 = snprintf(__str, __size, "target = %s[%p], receive = 0x%x, send = 0x%x, send-possible = 0x%x%s, checkin = 0x%x%s, send state = %016llx, disconnected = %d, canceled = %d ", v7, v4, *(_DWORD *)(*(void *)(a1 + 88) + 24), *(_DWORD *)(v5 + 92), *(_DWORD *)(v5 + 24), v8, *(_DWORD *)(v5 + 96), v6, *(void *)(v5 + 64), *(_DWORD *)(v5 + 88), (*(_DWORD *)(a1 + 80) >> 28) & 1);
  size_t v10 = v9;
  if (v9 >= __size) {
    size_t v10 = __size;
  }
  if (v9 >= 0) {
    return v10;
  }
  else {
    return 0;
  }
}

void dispatch_mach_hooks_install_4libxpc_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: trying to install hooks with unsupported version";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_hooks_install_4libxpc_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_hooks_install_4libxpc called twice";
  qword_1E91199F0 = (uint64_t)_dispatch_mach_xpc_hooks;
  __break(1u);
}

void _dispatch_mach_create_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_connect_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel already connected";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_mach_arm_no_senders_cold_2(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Mach port notification collision";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_mach_merge_msg_cold_1()
{
}

void _dispatch_mach_merge_msg_cold_2(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid reply port";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_2(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from mach_msg_receive";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_3(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Overlarge message";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_4(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply received on unexpected port";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_5()
{
}

void _dispatch_mach_send_and_wait_for_reply_cold_6()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to allocate reply port, possible port leak";
  __break(1u);
}

void _dispatch_mach_handoff_context_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Trying to handoff IPC from non IPC context";
  __break(1u);
}

void _dispatch_mach_handoff_context_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Calling dispatch_mach_handoff_reply multiple times from the same context";
  __break(1u);
}

void _dispatch_mach_install_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel never connected";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_msg_create_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Empty message";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_msg_create_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message size too large";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Filter id should be non-NULL";
  qword_1E91199F0 = 0;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_2(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Trailer doesn't contain filter policy id";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_3(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Trailer format is invalid";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_4(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Messsage should be non-NULL";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_mig_demux_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_mig_demux: mach_msg(MACH_SEND_MSG) failed";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_mach_mig_demux_get_context_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_mig_demux_get_context not called from dispatch_"
                             "mach_mig_demux context";
  __break(1u);
}

void _dispatch_sync_ipc_handoff_begin_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_unote_unregister_muxed_cold_1()
{
}

void _dispatch_unote_unregister_direct_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unregistration failed";
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_2(uint64_t *a1)
{
  uint64_t v1 = *a1;
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_3(unsigned int *a1, unsigned __int16 a2)
{
  unint64_t v2 = ((unint64_t)a2 << 16) | ((unint64_t)*a1 << 32) | 2;
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_1E91199F0 = v2;
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_4(int *a1)
{
  uint64_t v1 = *a1;
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_event_loop_leave_deferred_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_event_loop_cancel_waiter_cold_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_event_loop_cancel_waiter_cold_3(uint64_t a1, unsigned __int16 a2)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_1E91199F0 = ((unint64_t)a2 << 16) | (a1 << 32) | 2;
  __break(1u);
}

void _dispatch_event_loop_wake_owner_cold_4(uint64_t a1, unsigned __int16 a2)
{
  unint64_t v2 = ((unint64_t)a2 << 16) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32) | 2;
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_1E91199F0 = v2;
  __break(1u);
}

void _dispatch_event_loop_wake_owner_cold_5(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 12);
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_event_loop_wait_for_ownership_cold_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72 * a2 + 64);
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_1E91199F0 = v2;
  __break(1u);
}

void _dispatch_event_loop_wait_for_ownership_cold_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a1 + 72 * a2 + 12);
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_1E91199F0 = v2;
  __break(1u);
}

void _dispatch_mach_msg_sender_is_kernel_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: message received without expected trailer";
  __break(1u);
}

void _dispatch_mach_host_port_init_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not get unprivileged host port";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_mach_recv_direct_merge_evt_cold_1()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

void _dispatch_kevent_mach_msg_recv_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Overlarge message received";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_kevent_mach_msg_recv_cold_2(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 20);
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Received message with MACH_PORT_NULL msgh_local_port";
  qword_1E91199F0 = v1;
  __break(1u);
}

void _dispatch_kq_init_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Failed to initalize workqueue kevent";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _dispatch_kevent_mach_notify_resume_cold_1(int a1, void *a2)
{
  *a2 &= 0xFFFFFFF2uLL;
}

uint64_t _dispatch_kevent_mach_notify_resume_cold_3(unsigned int a1, mach_port_name_t *a2, _DWORD *a3)
{
  _dispatch_bug(2938, a1);
  uint64_t result = mach_port_deallocate(*MEMORY[0x1E4F14C48], *a2);
  *a3 = result;
  if (result == -301)
  {
    qword_1E91199C0 = (uint64_t)"MIG_REPLY_MISMATCH";
    qword_1E91199F0 = -301;
    __break(1u);
  }
  if (result) {
    return 1;
  }
  return result;
}

size_t voucher_kvoucher_debug(uint64_t a1)
{
  kern_return_t v16;
  mach_error_t v17;
  size_t v18;
  int v19;
  size_t v20;
  size_t v21;
  int v22;
  size_t v23;
  size_t v24;
  unint64_t v25;
  uint8_t *v26;
  int v27;
  char *v28;
  uint64_t v29;
  int v30;
  size_t v31;
  uint64_t v32;
  int v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  size_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  char *v46;
  size_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  size_t v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  int v59;
  const char *v60;
  unint64_t v61;
  size_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  char *v68;
  size_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  uint64_t v73;
  int v74;
  char *v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  char *v80;
  size_t v81;
  uint64_t v82;
  int v83;
  char *v85;
  size_t v86;
  uint64_t v87;
  int v88;
  char *v89;
  size_t v90;
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  int v95;
  size_t v96;
  int v97;
  char *v98;
  uint64_t v99;
  int v100;
  char *v101;
  uint64_t v102;
  int v103;
  size_t v104;
  const char *v106;
  const char *v107;
  const char *v108;
  unint64_t v109;
  const char *v110;
  unsigned int object_addr[2];
  mach_msg_type_number_t recipesCnt[3];
  uint8_t recipes[8209];
  uint64_t v114;

  ipc_space_read_t v2 = MEMORY[0x1F41887A8](a1);
  size_t v4 = v3;
  int v6 = v5;
  unint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  mach_port_name_t v14 = v13;
  ipc_space_read_t v15 = v2;
  int v114 = *MEMORY[0x1E4F14BF8];
  bzero(recipes, 0x2000uLL);
  *(void *)object_addr = 0;
  *(void *)recipesCnt = 0x2000;
  if (mach_port_kernel_object(v15, v14, object_addr, &object_addr[1]) || object_addr[0] != 37)
  {
    if (v6)
    {
      int v93 = (char *)OUTLINED_FUNCTION_2_0();
      snprintf(v93, v4, "%s", v106);
      OUTLINED_FUNCTION_0_0();
      if (v95 < 0) {
        size_t v94 = 0;
      }
      v8 += v94;
    }
    if (v10 >= v8) {
      uint64_t v96 = v10 - v8;
    }
    else {
      uint64_t v96 = 0;
    }
    uint64_t v97 = snprintf((char *)(v12 + v8), v96, "Invalid voucher: 0x%x\n");
    goto LABEL_119;
  }
  uint64_t v16 = mach_voucher_debug_info(v15, v14, recipes, recipesCnt);
  if (v16)
  {
    int v17 = v16;
    if (v16 != 46)
    {
      if (v6)
      {
        uint64_t v98 = (char *)OUTLINED_FUNCTION_2_0();
        snprintf(v98, v4, "%s", v106);
        OUTLINED_FUNCTION_0_0();
        if (v100 < 0) {
          unint64_t v99 = 0;
        }
        v8 += v99;
      }
      if (v10 >= v8) {
        uint64_t v96 = v10 - v8;
      }
      else {
        uint64_t v96 = 0;
      }
      mach_error_string(v17);
      uint64_t v97 = snprintf((char *)(v12 + v8), v96, "Voucher: 0x%x Failed to get contents %s\n");
      goto LABEL_119;
    }
  }
  if (!*(void *)recipesCnt)
  {
    if (v6)
    {
      int v101 = (char *)OUTLINED_FUNCTION_2_0();
      snprintf(v101, v4, "%s", v106);
      OUTLINED_FUNCTION_0_0();
      if (v103 < 0) {
        unsigned int v102 = 0;
      }
      v8 += v102;
    }
    if (v10 >= v8) {
      uint64_t v96 = v10 - v8;
    }
    else {
      uint64_t v96 = 0;
    }
    uint64_t v97 = snprintf((char *)(v12 + v8), v96, "Voucher: 0x%x has no contents\n");
LABEL_119:
    uint64_t v104 = v97;
    if (v96 < v97) {
      uint64_t v104 = v96;
    }
    if (v97 < 0) {
      uint64_t v104 = 0;
    }
    return v104 + v8;
  }
  if (v6)
  {
    if (v10 >= v8) {
      size_t v18 = v10 - v8;
    }
    else {
      size_t v18 = 0;
    }
    uint64_t v19 = snprintf((char *)(v12 + v8), v18, "%s", v6);
    int v20 = v19;
    if (v18 < v19) {
      int v20 = v18;
    }
    if (v19 < 0) {
      int v20 = 0;
    }
    v8 += v20;
  }
  if (v10 >= v8) {
    size_t v21 = v10 - v8;
  }
  else {
    size_t v21 = 0;
  }
  uint64_t v22 = snprintf((char *)(v12 + v8), v21, "Voucher: 0x%x\n", object_addr[1]);
  int v23 = v22;
  if (v21 < v22) {
    int v23 = v21;
  }
  if (v22 < 0) {
    int v23 = 0;
  }
  size_t v24 = v23 + v8;
  if (*(void *)recipesCnt)
  {
    unint64_t v109 = v4;
    unsigned int v110 = v6;
    uint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = &recipes[v25];
      int v27 = *(_DWORD *)&recipes[v25];
      if (v27) {
        break;
      }
LABEL_93:
      uint64_t v25 = (v25 + *((_DWORD *)v26 + 3) + 16);
      if (*(void *)recipesCnt <= v25) {
        return v24;
      }
    }
    if (v6)
    {
      uint64_t v28 = (char *)OUTLINED_FUNCTION_6();
      snprintf(v28, v1, "%s", v6);
      OUTLINED_FUNCTION_0_4();
      if (v30 < 0) {
        int v29 = 0;
      }
      v24 += v29;
      int v27 = *(_DWORD *)v26;
    }
    if (v10 >= v24) {
      uint64_t v31 = v10 - v24;
    }
    else {
      uint64_t v31 = 0;
    }
    snprintf((char *)(v12 + v24), v31, "Key: %u, ", v27);
    OUTLINED_FUNCTION_0_4();
    if (v33 < 0) {
      uint64_t v32 = 0;
    }
    size_t v34 = v32 + v24;
    size_t v35 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v35, v24, "Command: %u, ", *((_DWORD *)v26 + 1));
    OUTLINED_FUNCTION_1_3();
    if (v37 < 0) {
      int v36 = 0;
    }
    int v38 = v36 + v34;
    int v39 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v39, v24, "Previous voucher: 0x%x, ", *((_DWORD *)v26 + 2));
    OUTLINED_FUNCTION_1_3();
    if (v41 < 0) {
      int v40 = 0;
    }
    size_t v42 = v40 + v38;
    size_t v43 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v43, v24, "Content size: %u\n", *((_DWORD *)v26 + 3));
    OUTLINED_FUNCTION_1_3();
    if (v45 < 0) {
      int v44 = 0;
    }
    size_t v1 = v44 + v42;
    if (*(_DWORD *)v26 == 3)
    {
      if (v6)
      {
        uint64_t v52 = (char *)OUTLINED_FUNCTION_7();
        snprintf(v52, v53, "%s", v107);
        OUTLINED_FUNCTION_1_3();
        if (v55 < 0) {
          mach_port_context_t v54 = 0;
        }
        v1 += v54;
      }
      int v56 = (char *)OUTLINED_FUNCTION_4();
      snprintf(v56, v57, "RESOURCE ACCOUNTING INFO: %s");
      goto LABEL_52;
    }
    if (*(_DWORD *)v26 == 2)
    {
      if (v6)
      {
        unint64_t v46 = (char *)OUTLINED_FUNCTION_7();
        snprintf(v46, v47, "%s", v107);
        OUTLINED_FUNCTION_1_3();
        if (v49 < 0) {
          uint64_t v48 = 0;
        }
        v1 += v48;
      }
      int v50 = (char *)OUTLINED_FUNCTION_4();
      snprintf(v50, v51, "IMPORTANCE INFO: %s");
LABEL_52:
      OUTLINED_FUNCTION_1_3();
      if (v59 < 0) {
        int v58 = 0;
      }
      size_t v24 = v58 + v1;
      goto LABEL_89;
    }
    unint64_t v60 = v6;
    if (*((unsigned int *)v26 + 3) >= v109) {
      unint64_t v61 = v109;
    }
    else {
      unint64_t v61 = *((unsigned int *)v26 + 3);
    }
    if (v10 >= v1) {
      unint64_t v62 = v10 - v1;
    }
    else {
      unint64_t v62 = 0;
    }
    snprintf((char *)(v12 + v1), v62, "%s%s:\n", v60, "Recipe Contents");
    OUTLINED_FUNCTION_1_3();
    if (v64 < 0) {
      unint64_t v63 = 0;
    }
    size_t v24 = v63 + v1;
    if (v61)
    {
      uint64_t v65 = 0;
      uint64_t v66 = v26 + 16;
      do
      {
        uint64_t v67 = v65 & 0xF;
        if ((v65 & 0xF) == 0)
        {
          if (v65)
          {
            uint64_t v68 = (char *)OUTLINED_FUNCTION_3();
            snprintf(v68, v69, "  %s\n", v108);
            OUTLINED_FUNCTION_0_4();
            if (v71 < 0) {
              uint64_t v70 = 0;
            }
            v24 += v70;
          }
          unint64_t v72 = (char *)OUTLINED_FUNCTION_6();
          snprintf(v72, v1, "%s  %04lx ", v110, v65);
          OUTLINED_FUNCTION_0_4();
          if (v74 < 0) {
            unint64_t v73 = 0;
          }
          v24 += v73;
        }
        unint64_t v75 = (char *)OUTLINED_FUNCTION_6();
        snprintf(v75, v1, " %02x", v66[v65]);
        OUTLINED_FUNCTION_0_4();
        if (v77 < 0) {
          unint64_t v76 = 0;
        }
        v24 += v76;
        unint64_t v78 = v66[v65];
        if ((v78 - 127) < 0xFFFFFFA1) {
          LOBYTE(v78) = 46;
        }
        recipes[v67 + 0x2000] = v78;
        ++v65;
      }
      while (v61 != v65);
      recipes[v67 + 8193] = 0;
      if ((v61 & 0xF) == 0)
      {
        int v6 = v110;
LABEL_89:
        if (*(unsigned char *)(v24 + v12 - 1) != 10)
        {
          unint64_t v89 = (char *)OUTLINED_FUNCTION_9();
          snprintf(v89, v90, "\n");
          OUTLINED_FUNCTION_0_4();
          if (v92 < 0) {
            uint64_t v91 = 0;
          }
          v24 += v91;
        }
        goto LABEL_93;
      }
      uint64_t v79 = v61 + 1;
      do
      {
        unsigned __int16 v80 = (char *)OUTLINED_FUNCTION_9();
        snprintf(v80, v81, "   ");
        OUTLINED_FUNCTION_0_4();
        if (v83 < 0) {
          char v82 = 0;
        }
        v24 += v82;
      }
      while ((v79++ & 0xF) != 0);
      unint64_t v85 = (char *)OUTLINED_FUNCTION_3();
      snprintf(v85, v86, "  %s\n", v108);
      OUTLINED_FUNCTION_0_4();
      if (v88 < 0) {
        unint64_t v87 = 0;
      }
      v24 += v87;
    }
    int v6 = v110;
    goto LABEL_89;
  }
  return v24;
}

void _voucher_task_mach_voucher_init_cold_2(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not create task mach voucher";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _voucher_insert_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: base voucher has nested base voucher";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _voucher_insert_cold_2(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: base voucher has non-zero activity value";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _voucher_insert_cold_3()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher corruption";
  __break(1u);
}

void _voucher_create_with_mach_msgv_cold_1(unsigned int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid msg aux data size.";
  qword_1E91199F0 = a1;
  __break(1u);
}

void voucher_decrement_importance_count4CF_cold_1(uint64_t a1, int a2)
{
  if (a2 == 5)
  {
    qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher importance count underflow";
    qword_1E91199F0 = a1;
    __break(1u);
  }
}

void _voucher_activity_debug_channel_init_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Couldn't get debug control port";
  qword_1E91199F0 = a1;
  __break(1u);
}

void _voucher_process_can_use_arbitrary_personas_init_cold_1(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: mach_voucher_attr_command(BANK_PERSONA_ADOPT_ANY) failed";
  qword_1E91199F0 = a1;
  __break(1u);
}

void voucher_activity_initialize_4libtrace_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: unsupported vah_version";
  qword_1E91199F0 = a1;
  __break(1u);
}

void voucher_activity_initialize_4libtrace_cold_2()
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: voucher_activity_initialize_4libtrace called twice";
  qword_1E91199F0 = _voucher_libtrace_hooks;
  __break(1u);
}

void voucher_activity_create_with_data_2_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Absurd publen";
  qword_1E91199F0 = a1;
  __break(1u);
}

void voucher_activity_flush_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
  qword_1E91199F0 = a1;
  __break(1u);
}

void firehose_buffer_create_cold_2(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to allocate mach port";
  qword_1E91199F0 = a1;
  __break(1u);
}

void firehose_buffer_create_cold_4()
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: Invalid values for MADVISE_CHUNK_COUNT / CHUNK_SIZE";
  qword_1E91199F0 = 0x4000;
  __break(1u);
}

void firehose_client_reconnect_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid size for the firehose buffer";
  qword_1E91199F0 = a1;
  __break(1u);
}

void firehose_client_reconnect_cold_3(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to register with logd";
  qword_1E91199F0 = a1;
  __break(1u);
}

void firehose_client_reconnect_cold_9(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to make memory port";
  qword_1E91199F0 = a1;
  __break(1u);
}

void firehose_drain_notifications_once_cold_1(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 20);
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: firehose_mig_server doesn't handle replies";
  qword_1E91199F0 = v1;
  __break(1u);
}

void firehose_drain_notifications_once_cold_2(int a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: firehose_drain_notifications_once() failed";
  qword_1E91199F0 = a1;
  __break(1u);
}

size_t _dispatch_io_debug(void *a1, char *a2, size_t a3)
{
  ClassName = object_getClassName(a1);
  snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  OUTLINED_FUNCTION_0_5();
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  _dispatch_object_debug_attr((uint64_t)a1, &a2[v9], a3 - v9);
  uint64_t v10 = OUTLINED_FUNCTION_1_4();
  uint64_t v13 = v9 + _dispatch_io_debug_attr(v10, v11, v12);
  size_t v14 = a3 - v13;
  int v15 = snprintf(&a2[v13], v14, "}");
  size_t v16 = v15;
  if (v14 < v15) {
    size_t v16 = v14;
  }
  if (v15 < 0) {
    size_t v16 = 0;
  }
  return v16 + v13;
}

uint64_t _dispatch_io_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  size_t v3 = *(void **)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 120);
  uint64_t v5 = (const char *)&unk_18A97F2E6;
  if (v3)
  {
    int v6 = (const char *)v3[9];
    if (!v6) {
      int v6 = (const char *)&unk_18A97F2E6;
    }
  }
  else
  {
    int v6 = (const char *)&unk_18A97F2E6;
  }
  uint64_t v7 = "closed, ";
  if ((v4 & 1) == 0) {
    uint64_t v7 = (const char *)&unk_18A97F2E6;
  }
  if ((v4 & 2) != 0) {
    int v8 = "stopped, ";
  }
  else {
    int v8 = v7;
  }
  if (*(void *)(a1 + 72)) {
    uint64_t v9 = "random";
  }
  else {
    uint64_t v9 = "stream";
  }
  if (*(void *)(a1 + 104)) {
    uint64_t v5 = "(strict)";
  }
  snprintf(__str, __size, "type = %s, fd = 0x%lx, %sfd_entry = %p, queue = %p, target = %s[%p], barrier_queue = %p, barrier_dispatch_group_t group = %p, err = 0x%x, low = 0x%zx, high = 0x%zx, interval%s = %llu ", v9, *(int *)(a1 + 128), v8, *(const void **)(a1 + 112), *(const void **)(a1 + 48), v6, v3, *(const void **)(a1 + 56), *(const void **)(a1 + 64), *(_DWORD *)(a1 + 144), *(void *)(a1 + 80), *(void *)(a1 + 88), v5, *(void *)(a1 + 96));
  OUTLINED_FUNCTION_0_5();
  if (v11 >= 0) {
    return v10;
  }
  else {
    return 0;
  }
}

size_t _dispatch_operation_debug(void *a1, char *a2, size_t a3)
{
  ClassName = object_getClassName(a1);
  snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  OUTLINED_FUNCTION_0_5();
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  _dispatch_object_debug_attr((uint64_t)a1, &a2[v9], a3 - v9);
  uint64_t v10 = OUTLINED_FUNCTION_1_4();
  uint64_t v13 = v9 + _dispatch_operation_debug_attr(v10, v11, v12);
  size_t v14 = a3 - v13;
  int v15 = snprintf(&a2[v13], v14, "}");
  size_t v16 = v15;
  if (v14 < v15) {
    size_t v16 = v14;
  }
  if (v15 < 0) {
    size_t v16 = 0;
  }
  return v16 + v13;
}

uint64_t _dispatch_operation_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  size_t v3 = *(void **)(a1 + 48);
  if (v3) {
    int v4 = (void *)v3[3];
  }
  else {
    int v4 = 0;
  }
  uint64_t v5 = *(void **)(a1 + 24);
  int v6 = *(int **)(a1 + 144);
  if (v6) {
    uint64_t v7 = *v6;
  }
  else {
    uint64_t v7 = -1;
  }
  int v8 = (const char *)&unk_18A97F2E6;
  if (v4 && v4[9]) {
    int v8 = (const char *)v4[9];
  }
  uint64_t v9 = (const char *)&unk_18A97F2E6;
  if (v5)
  {
    uint64_t v10 = (const char *)v5[9];
    if (!v10) {
      uint64_t v10 = (const char *)&unk_18A97F2E6;
    }
  }
  else
  {
    uint64_t v10 = (const char *)&unk_18A97F2E6;
  }
  int v11 = "write";
  if (!*(_DWORD *)(a1 + 56)) {
    int v11 = "read";
  }
  if (*(void *)(a1 + 64)) {
    size_t v12 = "random";
  }
  else {
    size_t v12 = "stream";
  }
  if (*(void *)(a1 + 96)) {
    uint64_t v9 = "(strict)";
  }
  snprintf(__str, __size, "type = %s %s, fd = 0x%lx, fd_entry = %p, channel = %p, queue = %p -> %s[%p], target = %s[%p], offset = %lld, length = %zu, done = %zu, undelivered = %zu, flags = %u, err = 0x%x, low = 0x%zx, high = 0x%zx, interval%s = %llu ", v12, v11, v7, v6, *(const void **)(a1 + 136), v3, v8, v4, v10, v5, *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 216), *(void *)(a1 + 200) + *(void *)(a1 + 208), *(_DWORD *)(a1 + 184),
    *(_DWORD *)(a1 + 120),
    *(void *)(a1 + 72),
    *(void *)(a1 + 80),
    v9,
    *(void *)(a1 + 88));
  OUTLINED_FUNCTION_0_5();
  if (v14 >= 0) {
    return v13;
  }
  else {
    return 0;
  }
}

uint64_t _dispatch_data_debug(uint64_t a1, char *__str, size_t __size)
{
  int v6 = snprintf(__str, __size, "data[%p] = { ", (const void *)a1);
  size_t v7 = v6;
  if (v6 >= __size) {
    size_t v7 = __size;
  }
  if (v6 >= 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = 0;
  }
  uint64_t v9 = &__str[v8];
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    snprintf(v9, __size - v8, "composite, size_t size = %zd, num_records = %zd ", *(void *)(a1 + 48), v10);
    OUTLINED_FUNCTION_0_0();
    if (v12 < 0) {
      uint64_t v11 = 0;
    }
    size_t v13 = v11 + v8;
    if (*(void *)(a1 + 32))
    {
      snprintf(&__str[v13], __size - v13, ", flatbuf = %p ", *(const void **)(a1 + 32));
      OUTLINED_FUNCTION_0_0();
      if (v15 < 0) {
        uint64_t v14 = 0;
      }
      v13 += v14;
    }
    unint64_t v16 = 0;
    int v17 = (void *)(a1 + 80);
    do
    {
      int v18 = snprintf(&__str[v13], __size - v13, "record[%zd] = { from = %zd, length = %zd, data_object = %p }, ", v16, *(v17 - 1), *v17, (const void *)*(v17 - 2));
      size_t v19 = v18;
      if (__size - v13 < v18) {
        size_t v19 = __size - v13;
      }
      if (v18 < 0) {
        size_t v19 = 0;
      }
      v13 += v19;
      ++v16;
      unint64_t v20 = *(void *)(a1 + 56);
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      v17 += 3;
    }
    while (v16 < v20);
  }
  else
  {
    snprintf(v9, __size - v8, "leaf, size_t size = %zd, buf = %p ", *(void *)(a1 + 48), *(const void **)(a1 + 32));
    OUTLINED_FUNCTION_0_0();
    if (v22 < 0) {
      uint64_t v21 = 0;
    }
    size_t v13 = v21 + v8;
  }
  size_t v23 = __size - v13;
  int v24 = snprintf(&__str[v13], v23, "}");
  size_t v25 = v24;
  if (v23 < v24) {
    size_t v25 = v23;
  }
  if (v24 < 0) {
    size_t v25 = 0;
  }
  return v25 + v13;
}

void dispatch_data_create_subrange_cold_1(uint64_t a1)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: dispatch_data_create_subrange out of bounds";
  qword_1E91199F0 = a1;
  __break(1u);
}

void dispatch_data_copy_region_cold_1(uint64_t a1, uint64_t a2)
{
  qword_1E91199C0 = (uint64_t)"BUG IN LIBDISPATCH: dispatch_data_copy_region out of bounds";
  qword_1E91199F0 = a1 + a2;
  __break(1u);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40CF6D8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Block_use_RR2(const Block_callbacks_RR *callbacks)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

uint64_t __bsdthread_ctl()
{
  return MEMORY[0x1F40CFD40]();
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40CFD60]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40CF770]();
}

uint64_t __udivti3()
{
  return MEMORY[0x1F40CF390]();
}

uint64_t __ulock_wait()
{
  return MEMORY[0x1F40CFE60]();
}

uint64_t __ulock_wake()
{
  return MEMORY[0x1F40CFE68]();
}

uint64_t __work_interval_ctl()
{
  return MEMORY[0x1F40CFE88]();
}

uint64_t _dyld_is_memory_immutable()
{
  return MEMORY[0x1F40CF5E8]();
}

uint64_t _objc_init()
{
  return MEMORY[0x1F4181428]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1F40CF790]();
}

uint64_t _os_assumes_log()
{
  return MEMORY[0x1F40CF798]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40CF7A8]();
}

uint64_t _os_semaphore_create()
{
  return MEMORY[0x1F40D0730]();
}

uint64_t _pthread_qos_class_encode()
{
  return MEMORY[0x1F40D0870]();
}

uint64_t _pthread_qos_override_end_direct()
{
  return MEMORY[0x1F40D0878]();
}

uint64_t _pthread_qos_override_start_direct()
{
  return MEMORY[0x1F40D0880]();
}

uint64_t _pthread_set_properties_self()
{
  return MEMORY[0x1F40D0888]();
}

uint64_t _pthread_workloop_create()
{
  return MEMORY[0x1F40D0890]();
}

uint64_t _pthread_workloop_destroy()
{
  return MEMORY[0x1F40D0898]();
}

uint64_t _pthread_workqueue_add_cooperativethreads()
{
  return MEMORY[0x1F40D08A0]();
}

uint64_t _pthread_workqueue_addthreads()
{
  return MEMORY[0x1F40D08A8]();
}

uint64_t _pthread_workqueue_override_reset()
{
  return MEMORY[0x1F40D08B8]();
}

uint64_t _pthread_workqueue_override_start_direct()
{
  return MEMORY[0x1F40D08C0]();
}

uint64_t _pthread_workqueue_override_start_direct_check_owner()
{
  return MEMORY[0x1F40D08C8]();
}

uint64_t _pthread_workqueue_set_event_manager_priority()
{
  return MEMORY[0x1F40D08D0]();
}

uint64_t _pthread_workqueue_supported()
{
  return MEMORY[0x1F40D08D8]();
}

uint64_t _pthread_yield_to_enqueuer_4dispatch()
{
  return MEMORY[0x1F40D08E0]();
}

uint64_t _simple_asl_log()
{
  return MEMORY[0x1F40D0798]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CF7E0](a1, a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CF7E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1F4181510](cls, extraBytes);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CF818](*(void *)&__clock_id);
}

uint64_t close_NOCANCEL()
{
  return MEMORY[0x1F40CFEF0]();
}

int dprintf(int a1, const char *a2, ...)
{
  return MEMORY[0x1F40CF840](*(void *)&a1, a2);
}

uint64_t fcntl_NOCANCEL()
{
  return MEMORY[0x1F40CFF50]();
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CFF88](*(void *)&a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CF8B8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40D0000]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CF8C8]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CF8D0](a1, a2);
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1F40D0038]();
}

uint64_t guarded_open_np()
{
  return MEMORY[0x1F40D0040]();
}

kern_return_t host_create_mach_voucher(host_t host, mach_voucher_attr_raw_recipe_array_t recipes, mach_msg_type_number_t recipesCnt, ipc_voucher_t *voucher)
{
  return MEMORY[0x1F40D0048](*(void *)&host, recipes, *(void *)&recipesCnt, voucher);
}

kern_return_t host_get_special_port(host_priv_t host_priv, int node, int which, mach_port_t *port)
{
  return MEMORY[0x1F40D0060](*(void *)&host_priv, *(void *)&node, *(void *)&which, port);
}

kern_return_t host_request_notification(host_t host, host_flavor_t notify_type, mach_port_t notify_port)
{
  return MEMORY[0x1F40D0068](*(void *)&host, *(void *)&notify_type, *(void *)&notify_port);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40D0088]();
}

uint64_t kevent_id()
{
  return MEMORY[0x1F40D0098]();
}

uint64_t kevent_qos()
{
  return MEMORY[0x1F40D00A0]();
}

uint64_t kpersona_get()
{
  return MEMORY[0x1F40D00C0]();
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40D00E8](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40D00F0](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40D00F8]();
}

uint64_t mach_continuous_approximate_time(void)
{
  return MEMORY[0x1F40D0110]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40D0118]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40D0120](*(void *)&error_value);
}

uint64_t mach_eventlink_associate()
{
  return MEMORY[0x1F40D0128]();
}

uint64_t mach_eventlink_create()
{
  return MEMORY[0x1F40D0130]();
}

uint64_t mach_eventlink_disassociate()
{
  return MEMORY[0x1F40D0140]();
}

uint64_t mach_eventlink_signal()
{
  return MEMORY[0x1F40D0148]();
}

uint64_t mach_eventlink_signal_wait_until()
{
  return MEMORY[0x1F40D0150]();
}

uint64_t mach_eventlink_wait_until()
{
  return MEMORY[0x1F40D0158]();
}

kern_return_t mach_generate_activity_id(mach_port_name_t target, int count, uint64_t *activity_id)
{
  return MEMORY[0x1F40D0160](*(void *)&target, *(void *)&count, activity_id);
}

uint64_t mach_get_times()
{
  return MEMORY[0x1F40D0168]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40D0170]();
}

kern_return_t mach_make_memory_entry_64(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry)
{
  return MEMORY[0x1F40D0178](*(void *)&target_task, size, offset, *(void *)&permission, object_handle, *(void *)&parent_entry);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40D0180](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

uint64_t mach_msg2_internal()
{
  return MEMORY[0x1F40D0188]();
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_construct(ipc_space_t task, mach_port_options_ptr_t options, mach_port_context_t context, mach_port_name_t *name)
{
  return MEMORY[0x1F40D01A0](*(void *)&task, options, context, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40D01A8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_destruct(ipc_space_t task, mach_port_name_t name, mach_port_delta_t srdelta, mach_port_context_t guard)
{
  return MEMORY[0x1F40D01B0](*(void *)&task, *(void *)&name, *(void *)&srdelta, guard);
}

kern_return_t mach_port_kernel_object(ipc_space_read_t task, mach_port_name_t name, unsigned int *object_type, unsigned int *object_addr)
{
  return MEMORY[0x1F40D01C8](*(void *)&task, *(void *)&name, object_type, object_addr);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40D01D0](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_request_notification(ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous)
{
  return MEMORY[0x1F40D01D8](*(void *)&task, *(void *)&name, *(void *)&msgid, *(void *)&sync, *(void *)&notify, *(void *)&notifyPoly, previous);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40D01E8](info);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x1F40D01F0](*(void *)&target, address, size, *(void *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1F40D01F8](*(void *)&target, address, size);
}

kern_return_t mach_vm_map(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, BOOLean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance)
{
  return MEMORY[0x1F40D0200](*(void *)&target_task, address, size, mask, *(void *)&flags, *(void *)&object, offset, *(void *)&copy);
}

kern_return_t mach_voucher_attr_command(ipc_voucher_t voucher, mach_voucher_attr_key_t key, mach_voucher_attr_command_t command, mach_voucher_attr_content_t in_content, mach_msg_type_number_t in_contentCnt, mach_voucher_attr_content_t out_content, mach_msg_type_number_t *out_contentCnt)
{
  return MEMORY[0x1F40D0278](*(void *)&voucher, *(void *)&key, *(void *)&command, in_content, *(void *)&in_contentCnt, out_content, out_contentCnt);
}

kern_return_t mach_voucher_deallocate(mach_port_name_t voucher)
{
  return MEMORY[0x1F40D0280](*(void *)&voucher);
}

kern_return_t mach_voucher_debug_info(ipc_space_read_t task, mach_port_name_t voucher_name, mach_voucher_attr_raw_recipe_array_t recipes, mach_msg_type_number_t *recipesCnt)
{
  return MEMORY[0x1F40D0288](*(void *)&task, *(void *)&voucher_name, recipes, recipesCnt);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40D0290](a1, a2, *(void *)&a3);
}

uint64_t malloc_engaged_nano()
{
  return MEMORY[0x1F40D0648]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40D0670](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40D0678](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1F40D0680](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40D0688](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CF920](__dst, __src, __n);
}

uint64_t mig_dealloc_special_reply_port()
{
  return MEMORY[0x1F40D02A0]();
}

uint64_t mig_get_special_reply_port()
{
  return MEMORY[0x1F40D02B0]();
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40D02F8](a1, a2);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x1F41816D8](obj);
}

void objc_end_catch(void)
{
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x1F4181788](name);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

void objc_terminate(void)
{
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

uint64_t open_NOCANCEL()
{
  return MEMORY[0x1F40D0310]();
}

uint64_t os_fault_with_payload()
{
  return MEMORY[0x1F40D0338]();
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1F40D0840](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CFC78]();
}

uint64_t pread_NOCANCEL()
{
  return MEMORY[0x1F40D03B0]();
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40D03C0](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40D08F0](a1);
}

int pthread_attr_get_qos_class_np(pthread_attr_t *__attr, qos_class_t *__qos_class, int *__relative_priority)
{
  return MEMORY[0x1F40D08F8](__attr, __qos_class, __relative_priority);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1F40D0900](a1, a2);
}

int pthread_attr_getschedpolicy(const pthread_attr_t *a1, int *a2)
{
  return MEMORY[0x1F40D0908](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40D0910](a1);
}

uint64_t pthread_attr_setcpupercent_np()
{
  return MEMORY[0x1F40D0918]();
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40D0920](a1, *(void *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1F40D0928](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40D0930](a1, *(void *)&a2);
}

uint64_t pthread_attr_setworkinterval_np()
{
  return MEMORY[0x1F40D0938]();
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40D0940](a1, a2, a3, a4);
}

void pthread_exit(void *a1)
{
}

void *__cdecl pthread_get_stackaddr_np(pthread_t a1)
{
  return (void *)MEMORY[0x1F40D0960](a1);
}

uint64_t pthread_key_init_np()
{
  return MEMORY[0x1F40D0990]();
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40D09A0]();
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x1F40D09D8]();
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40D0A00]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40D0A08](a1);
}

int pthread_sigmask(int a1, const sigset_t *a2, sigset_t *a3)
{
  return MEMORY[0x1F40D0A18](*(void *)&a1, a2, a3);
}

uint64_t pthread_workqueue_setup()
{
  return MEMORY[0x1F40D0A38]();
}

uint64_t pwrite_NOCANCEL()
{
  return MEMORY[0x1F40D03D8]();
}

qos_class_t qos_class_main(void)
{
  return MEMORY[0x1F40D0A40]();
}

uint64_t read_NOCANCEL()
{
  return MEMORY[0x1F40D03E0]();
}

kern_return_t semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value)
{
  return MEMORY[0x1F40D0408](*(void *)&task, semaphore, *(void *)&policy, *(void *)&value);
}

kern_return_t semaphore_destroy(task_t task, semaphore_t semaphore)
{
  return MEMORY[0x1F40D0410](*(void *)&task, *(void *)&semaphore);
}

kern_return_t semaphore_signal(semaphore_t semaphore)
{
  return MEMORY[0x1F40D0418](*(void *)&semaphore);
}

kern_return_t semaphore_timedwait(semaphore_t semaphore, mach_timespec_t wait_time)
{
  return ((uint64_t (*)(void, void))MEMORY[0x1F40D0420])(*(void *)&semaphore, wait_time);
}

kern_return_t semaphore_wait(semaphore_t semaphore)
{
  return MEMORY[0x1F40D0428](*(void *)&semaphore);
}

uint64_t sigsuspend_NOCANCEL()
{
  return MEMORY[0x1F40D04A0]();
}

uint64_t sleep_NOCANCEL()
{
  return MEMORY[0x1F40CF9E0]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CF9E8](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40D04B8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CFA00](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CFA20](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CFA40](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CFA58](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CFA60](__s);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CFAE8](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CFAF0](a1, a2, a3, a4, a5);
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return MEMORY[0x1F40D04D8](*(void *)&task, *(void *)&which_port, special_port);
}

uint64_t thread_destruct_special_reply_port()
{
  return MEMORY[0x1F40D0500]();
}

uint64_t thread_get_special_reply_port()
{
  return MEMORY[0x1F40D0508]();
}

kern_return_t thread_switch(mach_port_name_t thread_name, int option, mach_msg_timeout_t option_time)
{
  return MEMORY[0x1F40D0510](*(void *)&thread_name, *(void *)&option, *(void *)&option_time);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CFB60](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CFB68](__str, __size, __format, a4);
}

uint64_t work_interval_copy_port()
{
  return MEMORY[0x1F40D0568]();
}

uint64_t work_interval_create()
{
  return MEMORY[0x1F40D0570]();
}

uint64_t work_interval_destroy()
{
  return MEMORY[0x1F40D0578]();
}

uint64_t work_interval_get_flags_from_port()
{
  return MEMORY[0x1F40D0580]();
}

uint64_t work_interval_instance_alloc()
{
  return MEMORY[0x1F40D0588]();
}

uint64_t work_interval_instance_clear()
{
  return MEMORY[0x1F40D0590]();
}

uint64_t work_interval_instance_finish()
{
  return MEMORY[0x1F40D0598]();
}

uint64_t work_interval_instance_get_telemetry_data()
{
  return MEMORY[0x1F40D05A8]();
}

uint64_t work_interval_instance_set_complexity()
{
  return MEMORY[0x1F40D05B0]();
}

uint64_t work_interval_instance_set_deadline()
{
  return MEMORY[0x1F40D05B8]();
}

uint64_t work_interval_instance_set_finish()
{
  return MEMORY[0x1F40D05C0]();
}

uint64_t work_interval_instance_set_start()
{
  return MEMORY[0x1F40D05C8]();
}

uint64_t work_interval_instance_start()
{
  return MEMORY[0x1F40D05D0]();
}

uint64_t work_interval_instance_update()
{
  return MEMORY[0x1F40D05D8]();
}

uint64_t work_interval_join()
{
  return MEMORY[0x1F40D05E0]();
}

uint64_t work_interval_join_port()
{
  return MEMORY[0x1F40D05E8]();
}

uint64_t work_interval_leave()
{
  return MEMORY[0x1F40D05F0]();
}

uint64_t write_NOCANCEL()
{
  return MEMORY[0x1F40D0600]();
}