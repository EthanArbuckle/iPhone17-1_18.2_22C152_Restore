char *__memcpy_chk(int a1, char *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;

  if (a4 < a3) {
    __chk_fail_overflow();
  }
  return j__mkdtempat_np(a1, a2);
}

uint64_t __memmove_chk(char *a1, int a2, unint64_t a3, unint64_t a4)
{
  if (a4 < a3) {
    __chk_fail_overflow();
  }
  return j__mkostemp(a1, a2);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  if (!__nel) {
    return 0;
  }
  size_t v7 = __nel;
  while (1)
  {
    v10 = (char *)__base + (v7 >> 1) * __width;
    int v11 = ((uint64_t (*)(const void *, char *))__compar)(__key, v10);
    if (!v11) {
      break;
    }
    if (v11 > 0) {
      __base = &v10[__width];
    }
    unint64_t v12 = v7 - (v11 > 0);
    size_t v7 = v12 >> 1;
    if (v12 <= 1) {
      return 0;
    }
  }
  return v10;
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  if (a1 >= 0x100) {
    return ___toupper(a1);
  }
  uint64_t v2 = __locale_key;
  v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120) + 4 * a1 + 2108);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  if (a1 >= 0x100) {
    return ___tolower(a1);
  }
  uint64_t v2 = __locale_key;
  v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120) + 4 * a1 + 1084);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  if (!__s) {
    return 22;
  }
  if ((__smax & 0x8000000000000000) != 0) {
    return 7;
  }
  if ((__n & 0x8000000000000000) == 0) {
    rsize_t v4 = __n;
  }
  else {
    rsize_t v4 = __smax;
  }
  BOOL v5 = v4 > __smax;
  if (v4 >= __smax) {
    LODWORD(v4) = __smax;
  }
  if (v5) {
    errno_t v6 = 84;
  }
  else {
    errno_t v6 = ((uint64_t)__n >> 63) & 7;
  }
  j__mkostemps((char *)__s, __c, v4);
  return v6;
}

size_t strcspn(const char *__s, const char *__charset)
{
  if (!*__s) {
    return 0;
  }
  v8[0] = 1;
  memset(&v8[1], 0, 24);
  unsigned int v2 = *(unsigned __int8 *)__charset;
  if (*__charset)
  {
    v3 = __charset + 1;
    do
    {
      v8[v2 >> 6] |= 1 << v2;
      unsigned int v4 = *(unsigned __int8 *)v3++;
      unsigned int v2 = v4;
    }
    while (v4);
  }
  uint64_t v5 = 0;
  do
    unint64_t v6 = __s[v5++];
  while (((*(void *)((char *)v8 + ((v6 >> 3) & 0x18)) >> v6) & 1) == 0);
  return v5 - 1;
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  if (!__n) {
    return 0;
  }
  while (*__s != __c)
  {
    ++__s;
    if (!--__n) {
      return 0;
    }
  }
  return __s;
}

uint64_t __glob(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F41887A8](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (const char *)v2;
  uint64_t v28 = 0;
  uint64_t v6 = __locale_key;
  size_t v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  memset(v27, 0, sizeof(v27));
  if (v7) {
    v8 = v7;
  }
  else {
    v8 = (_xlocale *)&__global_locale;
  }
  uint64_t v9 = *(int *)(*((void *)v8 + 166) + 64);
  int v10 = *(_DWORD *)(v3 + 24);
  if ((v10 & 1) == 0)
  {
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 32) = 0;
    if ((v10 & 2) == 0) {
      *(void *)(v3 + 16) = 0;
    }
  }
  if ((v10 & 0x1000) != 0)
  {
    int v11 = *(_DWORD *)(v3 + 8);
    if (!v11) {
      int v11 = 1024;
    }
    *((void *)&v27[0] + 1) = v11;
  }
  __int32 v26 = 0;
  *(_DWORD *)(v3 + 8) = 0;
  memset(&v29, 0, sizeof(v29));
  if ((v10 & 0x2000) == 0)
  {
    if ((int)v9 <= 1023)
    {
      unint64_t v12 = v30;
      uint64_t v13 = 8176;
      v14 = (const char *)v2;
      while (1)
      {
        if (*v14 == 92)
        {
          if (!*(unsigned __int8 *)++v14)
          {
            *unint64_t v12 = 92;
            goto LABEL_21;
          }
          uint64_t v16 = 0x4000000000;
        }
        else
        {
          uint64_t v16 = 0;
        }
        size_t v17 = mbrtowc_l(&v26, v14, 6uLL, &v29, v8);
        if (v17 >= 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_29;
        }
        if (!v17) {
          goto LABEL_33;
        }
        *unint64_t v12 = v16 | v26;
        v14 += v17;
LABEL_21:
        ++v12;
        BOOL v18 = v9 <= v13 >> 3;
        v13 -= 8;
        if (!v18) {
          goto LABEL_29;
        }
      }
    }
    goto LABEL_29;
  }
  if ((int)v9 > 1023)
  {
LABEL_29:
    if ((*(_DWORD *)(v4 + 24) & 0x10) != 0 || (*(_DWORD *)(v4 + 24) & 0x300) == 0x200) {
      return __gl_globextend(0, v4, (uint64_t)v27, v5, v8);
    }
    else {
      return 4294967293;
    }
  }
  unint64_t v12 = v30;
  uint64_t v19 = 8176;
  v20 = (const char *)v2;
  while (1)
  {
    size_t v21 = mbrtowc_l(&v26, v20, 6uLL, &v29, v8);
    if (v21 >= 0xFFFFFFFFFFFFFFFELL) {
      goto LABEL_29;
    }
    if (!v21) {
      break;
    }
    *v12++ = v26;
    v20 += v21;
    BOOL v18 = v9 <= v19 >> 3;
    v19 -= 8;
    if (!v18) {
      goto LABEL_29;
    }
  }
LABEL_33:
  *unint64_t v12 = 0;
  int v23 = *(_DWORD *)(v4 + 24);
  if ((v23 & 0x80) == 0) {
    return glob0((uint64_t)v30, v4);
  }
  if (v30[0] == 123 && v30[1] == 125 && !v30[2])
  {
    if ((v23 & 0x1000) != 0)
    {
      unint64_t v24 = (*(void *)&v27[0])++;
      if (v24 >= 0x80)
      {
        *__error() = 7;
        return 0xFFFFFFFFLL;
      }
    }
    return glob0((uint64_t)v30, v4);
  }
  uint64_t v25 = *(void *)v4;
  uint64_t result = globexp1((uint64_t)v30, v4);
  if (!result) {
    return globfinal(v4, (uint64_t)v27, v25, v5, v8);
  }
  return result;
}

uint64_t glob2(__int32 *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _xlocale *a7)
{
  memset(&v42, 0, sizeof(v42));
  uint64_t v13 = *a4;
  if (!*a4)
  {
LABEL_17:
    *a2 = 0;
    if (__gl_g_Ctoc(a1, v45, 0x405uLL, a7))
    {
      v20 = __error();
      uint64_t v21 = 0;
      int v22 = 63;
LABEL_19:
      int *v20 = v22;
      return v21;
    }
    if ((*(unsigned char *)(a5 + 24) & 0x40) != 0)
    {
      if ((*(unsigned int (**)(char *, stat *))(a5 + 72))(v45, &v42)) {
        return 0;
      }
    }
    else if (lstat(v45, &v42))
    {
      return 0;
    }
    int v23 = *(_DWORD *)(a5 + 24);
    if ((v23 & 0x1000) != 0)
    {
      unint64_t v24 = *(void *)(a6 + 24);
      *(void *)(a6 + 24) = v24 + 1;
      if (v24 >= 0x80) {
        goto LABEL_39;
      }
    }
    if ((v23 & 8) != 0 && (*(a2 - 1) & 0xFFFFFFBFFFFFFFFFLL) != 0x2F)
    {
      int v25 = v42.st_mode & 0xF000;
      if (v25 == 0x4000 || v25 == 40960 && !g_stat(a1, &v42, a5, a7) && (v42.st_mode & 0xF000) == 0x4000)
      {
        if ((unint64_t)(a2 + 1) > a3) {
          goto LABEL_39;
        }
        *(_OWORD *)a2 = xmmword_18AA002F0;
      }
    }
    ++*(_DWORD *)(a5 + 8);
    return __gl_globextend(a1, a5, a6, 0, a7);
  }
  v14 = a4;
  while (1)
  {
    uint64_t v15 = 0;
    for (int i = 0; v13; ++v15)
    {
      if (v13 == 47 || v13 == 0x400000002FLL) {
        break;
      }
      if ((unint64_t)&a2[v15 + 1] > a3) {
        goto LABEL_39;
      }
      if ((v13 & 0x8000000000) != 0) {
        int i = 1;
      }
      a2[v15] = v13;
      uint64_t v13 = v14[v15 + 1];
    }
    size_t v17 = &v14[v15];
    if (i)
    {
      if ((unint64_t)a2 > a3) {
        goto LABEL_39;
      }
      *a2 = 0;
      if (*(void *)(a5 + 40))
      {
        if (__gl_g_Ctoc(a1, v45, 0x405uLL, a7)) {
          goto LABEL_39;
        }
      }
      int v39 = *__error();
      *__error() = 0;
      v41 = g_opendir(a1, a5, a7);
      if (v41)
      {
        if ((*(unsigned char *)(a5 + 24) & 0x40) != 0) {
          v27 = *(dirent *(__cdecl **)(DIR *))(a5 + 56);
        }
        else {
          v27 = readdir;
        }
        *__error() = 0;
        uint64_t v21 = ((uint64_t (*)(DIR *))v27)(v41);
        if (v21)
        {
          v40 = v27;
          while (1)
          {
            __int32 v43 = 0;
            memset(&v44, 0, sizeof(v44));
            if ((*(unsigned char *)(a5 + 25) & 0x10) != 0)
            {
              unint64_t v28 = *(void *)(a6 + 16);
              *(void *)(a6 + 16) = v28 + 1;
              if (v28 >> 14) {
                break;
              }
            }
            int v30 = *(unsigned __int8 *)(v21 + 21);
            mbstate_t v29 = (const char *)(v21 + 21);
            if (v30 != 46 || (*v14 & 0xFFFFFFBFFFFFFFFFLL) == 0x2E)
            {
              v31 = a2;
              memset(&v44, 0, sizeof(v44));
              while (1)
              {
                size_t v32 = mbrtowc_l(&v43, v29, 6uLL, &v44, a7);
                if (v32 < 0xFFFFFFFFFFFFFFFELL)
                {
                  __int32 v33 = v43;
                }
                else
                {
                  __int32 v33 = *(unsigned __int8 *)v29;
                  __int32 v43 = v33;
                  memset(&v44, 0, sizeof(v44));
                  size_t v32 = 1;
                }
                uint64_t *v31 = v33;
                if (!v33) {
                  break;
                }
                ++v31;
                v29 += v32;
                if ((unint64_t)v31 > a3)
                {
                  uint64_t v34 = err_aborted(a5, (uint64_t)v45);
                  if (v34)
                  {
                    uint64_t v21 = v34;
                    int v37 = 63;
                    goto LABEL_72;
                  }
                  goto LABEL_68;
                }
              }
              if (!__gl_match(a2, v14, v17, a7))
              {
LABEL_68:
                *a2 = 0;
                v27 = v40;
                goto LABEL_69;
              }
              if (!*__error()) {
                *__error() = v39;
              }
              uint64_t v35 = glob2(a1, v31, a3, v17, a5, a6, a7);
              v27 = v40;
              if (v35)
              {
                uint64_t v21 = v35;
                goto LABEL_73;
              }
            }
LABEL_69:
            *__error() = 0;
            uint64_t v21 = ((uint64_t (*)(DIR *))v27)(v41);
            if (!v21) {
              goto LABEL_70;
            }
          }
          uint64_t v21 = 0xFFFFFFFFLL;
          int v37 = 7;
LABEL_72:
          *__error() = v37;
LABEL_73:
          int v36 = 0;
        }
        else
        {
LABEL_70:
          int v36 = 1;
        }
        int v38 = *__error();
        if ((*(unsigned char *)(a5 + 24) & 0x40) != 0) {
          (*(void (**)(DIR *))(a5 + 48))(v41);
        }
        else {
          closedir(v41);
        }
        *__error() = v38;
        if (v21) {
          return v21;
        }
        if (v36)
        {
          if (*__error())
          {
            __error();
            uint64_t v21 = err_aborted(a5, (uint64_t)v45);
            if (v21) {
              return v21;
            }
          }
        }
        if (*__error()) {
          return 0;
        }
        v20 = __error();
        uint64_t v21 = 0;
LABEL_83:
        int v22 = v39;
        goto LABEL_19;
      }
      if (*__error() != 2 && *__error() != 20)
      {
        __error();
        uint64_t v21 = err_aborted(a5, (uint64_t)v45);
        if (*__error()) {
          return v21;
        }
        v20 = __error();
        goto LABEL_83;
      }
      return 0;
    }
    BOOL v18 = &a2[v15];
    if ((v13 & 0xFFFFFFBFFFFFFFFFLL) == 0x2F) {
      break;
    }
    a2 = v18;
LABEL_16:
    v14 = v17;
    if (!v13) {
      goto LABEL_17;
    }
  }
  while (1)
  {
    a2 = v18 + 1;
    if ((unint64_t)(v18 + 1) > a3) {
      break;
    }
    *BOOL v18 = v13;
    uint64_t v19 = v17[1];
    ++v17;
    uint64_t v13 = v19;
    ++v18;
    if ((v19 & 0xFFFFFFBFFFFFFFFFLL) != 0x2F) {
      goto LABEL_16;
    }
  }
LABEL_39:
  *__error() = 7;
  return 0xFFFFFFFFLL;
}

int fnmatch(const char *a1, const char *a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = __locale_key;
  size_t v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  memset(&v32._mbstateL + 10, 0, 32);
  if (v7) {
    v8 = v7;
  }
  else {
    v8 = (_xlocale *)&__global_locale;
  }
  memset(&v32, 0, 80);
  memset(&v31, 0, sizeof(v31));
  memset(&v34, 0, sizeof(v34));
  memset(&v33, 0, sizeof(v33));
  *((_OWORD *)&v32._mbstateL + 7) = 0uLL;
  *(void *)unint64_t v28 = 0;
  size_t v9 = mbrtowc_l(&v28[1], a1, 6uLL, &v32, v8);
  if (v9 > 0xFFFFFFFFFFFFFFFDLL) {
    return 2;
  }
  size_t v11 = v9;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  mbstate_t v29 = 0;
  int v30 = 0;
  v27 = a2;
  while (1)
  {
    size_t v15 = mbrtowc_l(v28, a2, 6uLL, &v31, v8);
    if (v15 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v28[0] = *(unsigned __int8 *)a2;
      memset(&v31, 0, sizeof(v31));
      size_t v15 = 1;
    }
    uint64_t v16 = &v5[v11];
    int result = v28[1];
    if (v28[1] > 62)
    {
      if (v28[1] == 63)
      {
        if (v28[0] == 47)
        {
          if ((a3 & 2) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          if (!v28[0]) {
            return 1;
          }
          if ((a3 & 4) == 0 || v28[0] != 46 || a2 != v27 && ((a3 & 2) == 0 || *(a2 - 1) != 47))
          {
LABEL_50:
            a2 += v15;
            goto LABEL_79;
          }
        }
        goto LABEL_70;
      }
      if (v28[1] != 91)
      {
        if (v28[1] == 92)
        {
          if (a3)
          {
            int result = 92;
          }
          else
          {
            size_t v17 = mbrtowc_l(&v28[1], &v5[v11], 6uLL, &v32, v8);
            if (v17 > 0xFFFFFFFFFFFFFFFDLL) {
              return 2;
            }
            size_t v18 = v17;
            if (v17)
            {
              int result = v28[1];
            }
            else
            {
              int result = 92;
              v28[1] = 92;
            }
            v16 += v18;
          }
        }
LABEL_61:
        a2 += v15;
        unsigned int v22 = v28[0];
        if (result == v28[0]) {
          goto LABEL_79;
        }
        if ((a3 & 0x10) != 0)
        {
          if (result > 0x7F)
          {
            __darwin_ct_rune_t v23 = ___tolower_l(result, v8);
            unsigned int v22 = v28[0];
          }
          else
          {
            __darwin_ct_rune_t v23 = _DefaultRuneLocale.__maplower[result];
          }
          __darwin_ct_rune_t v24 = v22 > 0x7F ? ___tolower_l(v22, v8) : _DefaultRuneLocale.__maplower[v22];
          if (v23 == v24) {
            goto LABEL_79;
          }
        }
LABEL_70:
        if (!v13) {
          return 1;
        }
        size_t v25 = mbrtowc(v28, v12, 6uLL, &v33);
        if (v25 < 0xFFFFFFFFFFFFFFFELL)
        {
          __darwin_ct_rune_t v26 = v28[0];
        }
        else
        {
          __darwin_ct_rune_t v26 = *(unsigned __int8 *)v12;
          v28[0] = v26;
          memset(&v33, 0, sizeof(v33));
          size_t v25 = 1;
        }
        if (v26 == 47)
        {
          if ((a3 & 2) != 0) {
            return 1;
          }
        }
        else if (!v26)
        {
          return 1;
        }
        a2 = &v12[v25];
        mbstate_t v32 = v34;
        mbstate_t v31 = v33;
        uint64_t v16 = v13;
        v12 += v25;
        goto LABEL_79;
      }
      if (v28[0] == 47)
      {
        if ((a3 & 2) != 0) {
          goto LABEL_70;
        }
      }
      else
      {
        if (!v28[0]) {
          return 1;
        }
        if ((a3 & 4) != 0 && v28[0] == 46 && (a2 == v27 || (a3 & 2) != 0 && *(a2 - 1) == 47)) {
          goto LABEL_70;
        }
      }
      int v21 = rangematch(&v5[v11], v28[0], (size_t)&a2[v15], a3, &v30, &v29, &v32, &v31, v8);
      if (v21)
      {
        if (v21 == 1)
        {
          a2 = v29;
          uint64_t v16 = v30;
        }
        else if (v21 == -1)
        {
          return 2;
        }
        goto LABEL_79;
      }
      goto LABEL_70;
    }
    if (!v28[1])
    {
      if (((v28[0] == 47) & (a3 >> 3)) != 0 || !v28[0]) {
        return result;
      }
      goto LABEL_70;
    }
    if (v28[1] != 42) {
      goto LABEL_61;
    }
    uint64_t v16 = &v5[v11 - 1];
    do
    {
      int v20 = *(unsigned __int8 *)++v16;
      int v19 = v20;
    }
    while (v20 == 42);
    if ((a3 & 4) != 0 && v28[0] == 46 && (a2 == v27 || (a3 & 2) != 0 && *(a2 - 1) == 47)) {
      goto LABEL_70;
    }
    if (v19 != 47) {
      break;
    }
    if ((a3 & 2) == 0) {
      goto LABEL_57;
    }
    a2 = (const char *)j__strncasecmp(a2, (const char *)0x2F, v14);
    if (!a2) {
      return 1;
    }
LABEL_79:
    size_t v11 = mbrtowc_l(&v28[1], v16, 6uLL, &v32, v8);
    uint64_t v5 = v16;
    if (v11 >= 0xFFFFFFFFFFFFFFFELL) {
      return 2;
    }
  }
  if (v19)
  {
LABEL_57:
    mbstate_t v34 = v32;
    mbstate_t v33 = v31;
    uint64_t v13 = v16;
    unint64_t v12 = a2;
    goto LABEL_79;
  }
  return (a3 & 0xA) == 2 && j__strncasecmp(a2, (const char *)0x2F, v14) != 0;
}

uint64_t _none_mbrtowc(_DWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  if (!a3) {
    return -2;
  }
  int v3 = *a2;
  if (a1) {
    *a1 = v3;
  }
  return v3 != 0;
}

size_t mbrtowc_l(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1) {
    locale_t v5 = a5;
  }
  if (a5) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  if (!a4) {
    a4 = (mbstate_t *)((char *)v6 + 272);
  }
  return (*(uint64_t (**)(__int32 *, const char *, size_t, mbstate_t *))(*((void *)v6 + 166) + 72))(a1, a2, a3, a4);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  int v6 = *__error();
  *__error() = 0;
  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  v8 = (char *)_readdir_unlocked((uint64_t)a1, 1);
  if (v8) {
    j__mkdtempat_np((int)a2, v8);
  }
  pthread_mutex_unlock(p_dd_lock);
  if (*__error())
  {
    if (!v8) {
      return *__error();
    }
  }
  else
  {
    *__error() = v6;
  }
  int result = 0;
  if (v8) {
    int v10 = a2;
  }
  else {
    int v10 = 0;
  }
  *a3 = v10;
  return result;
}

dirent *__cdecl readdir(DIR *a1)
{
  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  int v3 = (dirent *)_readdir_unlocked((uint64_t)a1, 1);
  pthread_mutex_unlock(p_dd_lock);
  return v3;
}

unint64_t _readdir_unlocked(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  while (1)
  {
    if (v5 >= *(void *)(a1 + 16))
    {
      int v7 = *(_DWORD *)(a1 + 56);
      if ((v7 & 0x28) != 0) {
        return 0;
      }
      unsigned int v6 = v7 & 0xFFFFFFEF;
      *(_DWORD *)(a1 + 56) = v6;
      *(void *)(a1 + 8) = 0;
      uint64_t v4 = v5;
    }
    else
    {
      unsigned int v6 = *(_DWORD *)(a1 + 56);
      if (v5) {
        goto LABEL_20;
      }
    }
    if ((v6 & 0x38) != 0)
    {
      uint64_t v5 = 0;
      goto LABEL_20;
    }
    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 == 2048)
    {
      size_t v9 = (char *)malloc_type_malloc(0x2000uLL, 0xAFA3A964uLL);
      int v10 = *(char **)(a1 + 24);
      if (v9)
      {
        free(v10);
        *(void *)(a1 + 24) = v9;
        int v8 = 0x2000;
        *(_DWORD *)(a1 + 32) = 0x2000;
        int v10 = v9;
      }
      else
      {
        int v8 = *(_DWORD *)(a1 + 32);
      }
    }
    else
    {
      int v10 = *(char **)(a1 + 24);
    }
    size_t v11 = &v10[v8];
    *((_DWORD *)v11 - 1) = 0;
    uint64_t v12 = *(void *)(*(void *)(a1 + 128) + 16);
    unint64_t result = __getdirentries64();
    *(void *)(a1 + 16) = result;
    if ((result & 0x8000000000000000) != 0) {
      return 0;
    }
    if (result <= *(int *)(a1 + 32) - 4)
    {
      if (*(v11 - 4)) {
        *(_DWORD *)(a1 + 56) |= 0x20u;
      }
      if (!result) {
        return result;
      }
    }
    _fixtelldir(a1, v12, v4);
    unsigned int v6 = *(_DWORD *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 8);
LABEL_20:
    *(_DWORD *)(a1 + 56) = v6 & 0xFFFFFFEF;
    unint64_t result = *(void *)(a1 + 24) + v5;
    if ((result & 3) != 0) {
      return 0;
    }
    uint64_t v14 = *(unsigned __int16 *)(result + 16);
    if (!*(_WORD *)(result + 16) || *(int *)(a1 + 32) - v5 + 1 < v14) {
      return 0;
    }
    v5 += v14;
    *(void *)(a1 + 8) = v5;
    if (!a2 || *(void *)result)
    {
      int v15 = v6 & 1;
      if (*(unsigned char *)(result + 20) != 14 || v15 == 0) {
        return result;
      }
    }
  }
}

uint64_t _fixtelldir(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(uint64_t **)(result + 128);
  uint64_t v4 = *v3;
  if (*v3 && *(void *)(v4 + 32) == a3 && *(void *)(v4 + 24) == a2)
  {
    uint64_t v5 = *(void *)(result + 8);
    *(void *)(v4 + 24) = v3[2];
    *(void *)(v4 + 32) = v5;
  }
  return result;
}

void rewinddir(DIR *a1)
{
  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  int dd_flags = a1->__dd_flags;
  a1->__int dd_flags = dd_flags & 0xFFFFFFCF;
  if ((dd_flags & 8) != 0)
  {
    _filldir((uint64_t)a1, 0);
  }
  else
  {
    lseek(a1->__dd_fd, 0, 0);
    *((void *)a1->__dd_td + 2) = 0;
  }
  a1->__dd_loc = 0;
  _reclaim_telldir((uint64_t)a1);

  pthread_mutex_unlock(p_dd_lock);
}

int closedir(DIR *a1)
{
  p_dd_lock = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  a1->__dd_fd = -1;
  a1->__dd_loc = 0;
  free(a1->__dd_buf);
  _reclaim_telldir((uint64_t)a1);
  pthread_mutex_unlock(p_dd_lock);
  pthread_mutex_destroy(p_dd_lock);
  free(a1);

  return close_NOCANCEL();
}

void *_reclaim_telldir(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 128);
  unint64_t result = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v4 = (void *)*result;
      free(result);
      unint64_t result = v4;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 128);
  }
  *uint64_t v2 = 0;
  return result;
}

uint64_t __gl_g_Ctoc(__int32 *a1, char *a2, unint64_t a3, _xlocale *a4)
{
  unint64_t v4 = *(int *)(*((void *)a4 + 166) + 64);
  memset(&v11, 0, sizeof(v11));
  if (v4 > a3) {
    return 1;
  }
  unint64_t v6 = a3;
  while (1)
  {
    size_t v9 = wcrtomb_l(a2, *a1, &v11, a4);
    if (v9 == -1)
    {
      *a2 = *(void *)a1;
      memset(&v11, 0, sizeof(v11));
      size_t v9 = 1;
    }
    if (!*a1) {
      break;
    }
    a1 += 2;
    a2 += v9;
    v6 -= v9;
    if (v6 < v4) {
      return 1;
    }
  }
  return 0;
}

size_t wcrtomb_l(char *a1, __int32 a2, mbstate_t *a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  if (!a3) {
    a3 = (mbstate_t *)((char *)v5 + 784);
  }
  return (*(uint64_t (**)(char *, void, mbstate_t *))(*((void *)v5 + 166) + 96))(a1, *(void *)&a2, a3);
}

uint64_t _none_wcrtomb(unsigned char *a1, unsigned int a2)
{
  if (!a1) {
    return 1;
  }
  if (a2 < 0x100)
  {
    *a1 = a2;
    return 1;
  }
  else
  {
    *__error() = 92;
    return -1;
  }
}

uint64_t __gl_match(uint64_t *a1, uint64_t *a2, uint64_t *a3, _xlocale *a4)
{
  int v7 = 0;
  __darwin_ct_rune_t v24 = 0;
  while (1)
  {
    if (a2 < a3)
    {
      int v8 = a2;
      while (1)
      {
        uint64_t v10 = *v8++;
        uint64_t v9 = v10;
        uint64_t v11 = v10 & 0xFFFFFFFFFFLL;
        if ((v10 & 0xFFFFFFFFFFLL) == 0x800000005BLL) {
          break;
        }
        if (v11 == 0x800000003FLL)
        {
          if (!*a1++) {
            goto LABEL_37;
          }
        }
        else if (v11 == 0x800000002ALL)
        {
          if (v8 == a3) {
            return 1;
          }
          if (!*a1) {
            return 0;
          }
          int v7 = a1 + 1;
          __darwin_ct_rune_t v24 = a2;
        }
        else
        {
          uint64_t v21 = *a1++;
          if (v21 != v9) {
            goto LABEL_37;
          }
        }
LABEL_35:
        a2 = v8;
        if (v8 >= a3) {
          goto LABEL_36;
        }
      }
      uint64_t v13 = *a1++;
      uint64_t v12 = v13;
      if (!v13) {
        goto LABEL_37;
      }
      uint64_t v14 = a2[1] & 0xFFFFFFFFFFLL;
      int v15 = v14 == 0x8000000021;
      uint64_t v16 = 1;
      if (v14 == 0x8000000021)
      {
        uint64_t v16 = 2;
        size_t v17 = a2 + 2;
      }
      else
      {
        size_t v17 = v8;
      }
      int v8 = v17 + 1;
      uint64_t v18 = a2[v16];
      if ((v18 & 0xFFFFFFFFFFLL) == 0x800000005DLL)
      {
        int v19 = 0;
LABEL_34:
        if (v19 == v15) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      int v19 = 0;
      while (1)
      {
        if ((v17[1] & 0xFFFFFFFFFFLL) != 0x800000002DLL)
        {
          if (v18 == v12) {
            int v19 = 1;
          }
          uint64_t v18 = v17[1];
          size_t v17 = v8;
          goto LABEL_33;
        }
        if (*(unsigned char *)(*((void *)a4 + 165) + 64))
        {
          if (v12 < (unint64_t)v18
            || v12 > (unint64_t)*((unsigned int *)v17 + 4))
          {
            goto LABEL_32;
          }
        }
        else if ((int)__collate_range_cmp(v18, v12, a4) > 0 {
               || (int)__collate_range_cmp(v12, *((_DWORD *)v17 + 4), a4) > 0)
        }
        {
          goto LABEL_32;
        }
        int v19 = 1;
LABEL_32:
        uint64_t v22 = v17[3];
        v17 += 3;
        uint64_t v18 = v22;
LABEL_33:
        int v8 = v17 + 1;
        if ((v18 & 0xFFFFFFFFFFLL) == 0x800000005DLL) {
          goto LABEL_34;
        }
      }
    }
LABEL_36:
    if (!*a1) {
      return 1;
    }
LABEL_37:
    a2 = v24;
    a1 = v7;
    if (!v7) {
      return 0;
    }
  }
}

uint64_t __gl_globextend(__int32 *a1, uint64_t a2, uint64_t a3, const char *a4, _xlocale *a5)
{
  if ((*(unsigned char *)(a2 + 25) & 0x10) != 0 && *(void *)(a3 + 8) < (unint64_t)*(int *)(a2 + 8)) {
    goto LABEL_17;
  }
  uint64_t v10 = reallocarray_DARWIN_EXTSN();
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v10;
  if (!*(void *)(a2 + 32))
  {
    uint64_t v12 = *(void *)(a2 + 16);
    if (v12) {
      MEMORY[0x18C122530](v10, 8 * v12);
    }
  }
  *(void *)(a2 + 32) = v11;
  if (!a4)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(void *)&a1[v16];
      v16 += 2;
    }
    while (v17);
    size_t v18 = ((v16 * 4) >> 3) * *(int *)(*((void *)a5 + 166) + 64);
    int v19 = (char *)malloc_type_malloc(v18, 0x2653AAEDuLL);
    if (!v19) {
      goto LABEL_19;
    }
    int v15 = v19;
    if (__gl_g_Ctoc(a1, v19, v18, a5)) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  int v15 = strdup(a4);
  if (v15)
  {
LABEL_14:
    unint64_t v20 = j__strsignal_r((int)v15, v13, v14) + *(void *)(a3 + 32) + 1;
    *(void *)(a3 + 32) = v20;
    if ((*(unsigned char *)(a2 + 25) & 0x10) == 0 || v20 < 0x10000)
    {
      uint64_t result = 0;
      uint64_t v22 = *(void *)(a2 + 16);
      uint64_t v23 = (*(void *)a2)++;
      *(void *)(v11 + 8 * (v23 + v22)) = v15;
      goto LABEL_21;
    }
LABEL_16:
    free(v15);
LABEL_17:
    *__error() = 7;
    return 0xFFFFFFFFLL;
  }
LABEL_19:
  uint64_t result = 0xFFFFFFFFLL;
LABEL_21:
  *(void *)(v11 + 8 * (*(void *)a2 + *(void *)(a2 + 16))) = 0;
  return result;
}

uint64_t glob0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F41887A8](a1, a2);
  locale_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = __gl_globtilde(v2, (uint64_t)v24);
  if (!v11)
  {
    *__error() = 7;
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = *(void *)v10;
  uint64_t v13 = v24;
LABEL_3:
  size_t v14 = v11 + 2;
  while (1)
  {
    uint64_t v11 = v14;
    uint64_t v15 = *((void *)v14 - 1);
    if (v15 != 42) {
      break;
    }
    *(_DWORD *)(v10 + 24) |= 0x100u;
    if (v13 != v24)
    {
      size_t v14 = v11 + 2;
      if (*(v13 - 1) == 0x800000002ALL) {
        continue;
      }
    }
    *uint64_t v13 = 0x800000002ALL;
    goto LABEL_35;
  }
  if (v15)
  {
    if (v15 == 63)
    {
      *(_DWORD *)(v10 + 24) |= 0x100u;
      uint64_t v15 = 0x800000003FLL;
      goto LABEL_34;
    }
    if (v15 != 91)
    {
      uint64_t v15 = v15;
      goto LABEL_34;
    }
    uint64_t v16 = (uint64_t)(v11 + 2);
    uint64_t v17 = *(void *)v11;
    if (*(void *)v11 != 33) {
      uint64_t v16 = (uint64_t)v11;
    }
    if (!*(void *)v16)
    {
LABEL_17:
      *uint64_t v13 = 91;
      if (v17 == 33) {
        uint64_t v20 = -1;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v11 = (__int32 *)(v16 + 8 * v20);
      goto LABEL_35;
    }
    uint64_t v11 = (__int32 *)(v16 + 8);
    uint64_t v18 = 8;
    while (1)
    {
      uint64_t v19 = *(void *)(v16 + v18);
      if (v19 == 93) {
        break;
      }
      v18 += 8;
      if (!v19) {
        goto LABEL_17;
      }
    }
    *uint64_t v13 = 0x800000005BLL;
    if (v17 == 33)
    {
      v13[1] = 0x8000000021;
      v13 += 2;
    }
    else
    {
      ++v13;
    }
    LODWORD(v16) = *(_DWORD *)v16;
    while (1)
    {
      *uint64_t v13 = v16;
      uint64_t v16 = *(void *)v11;
      if (*(void *)v11 == 45)
      {
        uint64_t v21 = *((void *)v11 + 1);
        if (v21 != 93)
        {
          v13[1] = 0x800000002DLL;
          v13[2] = v21;
          v13 += 3;
          uint64_t v22 = *((void *)v11 + 2);
          v11 += 4;
          uint64_t v16 = v22;
          goto LABEL_32;
        }
        uint64_t v16 = 45;
      }
      ++v13;
LABEL_32:
      v11 += 2;
      if (v16 == 93)
      {
        *(_DWORD *)(v10 + 24) |= 0x100u;
        uint64_t v15 = 0x800000005DLL;
LABEL_34:
        *uint64_t v13 = v15;
LABEL_35:
        ++v13;
        goto LABEL_3;
      }
    }
  }
  *uint64_t v13 = 0;
  if (!v24[0] || (uint64_t result = glob2((__int32 *)v25, v25, (unint64_t)&v26, v24, v10, v8, v4), !result))
  {
    if (v6) {
      return globfinal(v10, v8, v12, v6, v4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t globfinal(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, _xlocale *a5)
{
  int v5 = *(_DWORD *)(a1 + 24);
  if (*(void *)a1 == a3)
  {
    if ((v5 & 0x10) != 0 || (*(_DWORD *)(a1 + 24) & 0x300) == 0x200)
    {
      return __gl_globextend(0, a1, a2, a4, a5);
    }
    else
    {
      return 4294967293;
    }
  }
  else
  {
    if ((v5 & 0x20) == 0) {
      qsort((void *)(*(void *)(a1 + 32) + 8 * *(void *)(a1 + 16) + 8 * a3), *(void *)a1 - a3, 8uLL, (int (__cdecl *)(const void *, const void *))__gl_compare);
    }
    return 0;
  }
}

void psort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  if (__nel >= 0x7D0
    && (_get_cpu_capabilities() & 0xFE0000) != 0
    && (v18 = 0, long long v16 = 0u, *(_OWORD *)group = 0u, v14 = 0u, *(_OWORD *)v15 = 0u, (v8 = getargs((uint64_t)&v14)) != 0))
  {
    uint64_t v9 = (uint64_t)v8;
    *(void *)&long long v14 = "psort_b";
    v15[1] = __compar;
    *(void *)&long long v16 = __width;
    group[0] = dispatch_get_global_queue(0, 0);
    group[1] = dispatch_group_create();
    *(void *)(v9 + 8) = __base;
    *(void *)(v9 + 16) = __nel;
    *(_DWORD *)(v9 + 24) = 2 * flsl(__nel) - 2;
    *(void *)uint64_t v9 = &v14;
    int v10 = flsl(__nel);
    if (v10 >= 0) {
      int v11 = v10;
    }
    else {
      int v11 = v10 + 1;
    }
    *((void *)&v16 + 1) = ((1 << (v11 >> 1)) + (__nel >> (v11 >> 1))) >> 1;
    _psort_parallel_0(v9);
    dispatch_group_wait(group[1], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(group[1]);
    uint64_t v12 = v15[0];
    if (v15[0])
    {
      do
      {
        uint64_t v13 = (void *)*v12;
        munmap(v12, 0x1000uLL);
        uint64_t v12 = v13;
      }
      while (v13);
    }
  }
  else
  {
    qsort_b(__base, __nel, __width, __compar);
  }
}

void qsort_r(void *__base, size_t __nel, size_t __width, void *a4, int (__cdecl *__compar)(void *, const void *, const void *))
{
  int v10 = 2 * flsl(__nel) - 2;

  _qsort_0((char *)__base, __nel, __width, (uint64_t)a4, (int (*)(uint64_t, char *, char *))__compar, v10);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  if (*((void *)__compar + 2)) {
    locale_t v4 = (int (__cdecl *)(void *, const void *, const void *))*((void *)__compar + 2);
  }
  else {
    locale_t v4 = 0;
  }
  qsort_r(__base, __nel, __width, __compar, v4);
}

void psort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  if (__nel >= 0x7D0
    && (_get_cpu_capabilities() & 0xFE0000) != 0
    && (v18 = 0, long long v16 = 0u, *(_OWORD *)group = 0u, v14 = 0u, *(_OWORD *)v15 = 0u, (v8 = getargs((uint64_t)&v14)) != 0))
  {
    uint64_t v9 = (uint64_t)v8;
    *(void *)&long long v14 = "psort";
    v15[1] = __compar;
    *(void *)&long long v16 = __width;
    group[0] = dispatch_get_global_queue(0, 0);
    group[1] = dispatch_group_create();
    *(void *)(v9 + 8) = __base;
    *(void *)(v9 + 16) = __nel;
    *(_DWORD *)(v9 + 24) = 2 * flsl(__nel) - 2;
    *(void *)uint64_t v9 = &v14;
    int v10 = flsl(__nel);
    if (v10 >= 0) {
      int v11 = v10;
    }
    else {
      int v11 = v10 + 1;
    }
    *((void *)&v16 + 1) = ((1 << (v11 >> 1)) + (__nel >> (v11 >> 1))) >> 1;
    _psort_parallel(v9);
    dispatch_group_wait(group[1], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(group[1]);
    uint64_t v12 = v15[0];
    if (v15[0])
    {
      do
      {
        uint64_t v13 = (void *)*v12;
        munmap(v12, 0x1000uLL);
        uint64_t v12 = v13;
      }
      while (v13);
    }
  }
  else
  {
    qsort(__base, __nel, __width, __compar);
  }
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  int v8 = 2 * flsl(__nel) - 2;

  _qsort((unint64_t)__base, __nel, __width, __compar, v8);
}

uint64_t _isort(unint64_t a1, uint64_t a2, unint64_t a3, int (*a4)(char *, _DWORD *), int a5, int a6, int a7)
{
  if ((uint64_t)(a3 * a2) > (uint64_t)a3)
  {
    int v10 = 0;
    unint64_t v28 = a1 + a3 * a2;
    int v11 = (_DWORD *)(a1 + a3);
    uint64_t v12 = -(uint64_t)a3;
    unint64_t v13 = a3 >> 2;
    unint64_t v14 = a3 >> 3;
    unint64_t v15 = a1;
    do
    {
      unint64_t v29 = v15;
      int v30 = v11;
      if ((unint64_t)v11 > a1)
      {
        do
        {
          long long v16 = (_DWORD *)((char *)v11 + v12);
          if (a4((char *)v11 + v12, v11) < 1) {
            break;
          }
          if (a6)
          {
            if (a7)
            {
              if (a6 > 1)
              {
                if (a7 >= 2)
                {
                  uint64_t v24 = 0;
                  unint64_t v25 = v15 + a3;
                  do
                  {
                    char v26 = *(unsigned char *)(v25 + v24);
                    *(unsigned char *)(v25 + v24) = *(unsigned char *)(v15 + v24);
                    *(unsigned char *)(v15 + v24++) = v26;
                  }
                  while (a3 != v24);
                }
                else
                {
                  uint64_t v22 = 0;
                  do
                  {
                    int v23 = v11[v22];
                    v11[v22] = *(_DWORD *)(v15 + 4 * v22);
                    *(_DWORD *)(v15 + 4 * v22++) = v23;
                  }
                  while (v13 != v22);
                }
              }
              else
              {
                uint64_t v17 = 0;
                unint64_t v18 = v15 + a3;
                do
                {
                  uint64_t v19 = *(void *)(v18 + 8 * v17);
                  *(void *)(v18 + 8 * v17) = *(void *)(v15 + 8 * v17);
                  *(void *)(v15 + 8 * v17++) = v19;
                }
                while (v14 != v17);
              }
            }
            else
            {
              int v21 = *v11;
              *int v11 = *v16;
              *long long v16 = v21;
            }
          }
          else
          {
            uint64_t v20 = *(void *)v11;
            *(void *)int v11 = *(void *)v16;
            *(void *)long long v16 = v20;
          }
          if (a5)
          {
            if (v10 >= a5) {
              return 0;
            }
            ++v10;
          }
          v15 += v12;
          int v11 = (_DWORD *)((char *)v11 + v12);
        }
        while ((unint64_t)v16 > a1);
      }
      int v11 = (_DWORD *)((char *)v30 + a3);
      unint64_t v15 = v29 + a3;
    }
    while ((unint64_t)v30 + a3 < v28);
  }
  return 1;
}

uint64_t _isort_0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int (*a5)(uint64_t, char *, _DWORD *), int a6, int a7, int a8)
{
  if ((uint64_t)(a3 * a2) > (uint64_t)a3)
  {
    int v11 = 0;
    unint64_t v29 = a1 + a3 * a2;
    uint64_t v12 = (_DWORD *)(a1 + a3);
    uint64_t v13 = -(uint64_t)a3;
    unint64_t v14 = a3 >> 2;
    unint64_t v15 = a3 >> 3;
    unint64_t v16 = a1;
    do
    {
      unint64_t v30 = v16;
      mbstate_t v31 = v12;
      if ((unint64_t)v12 > a1)
      {
        do
        {
          uint64_t v17 = (_DWORD *)((char *)v12 + v13);
          if (a5(a4, (char *)v12 + v13, v12) < 1) {
            break;
          }
          if (a7)
          {
            if (a8)
            {
              if (a7 > 1)
              {
                if (a8 >= 2)
                {
                  uint64_t v25 = 0;
                  unint64_t v26 = v16 + a3;
                  do
                  {
                    char v27 = *(unsigned char *)(v26 + v25);
                    *(unsigned char *)(v26 + v25) = *(unsigned char *)(v16 + v25);
                    *(unsigned char *)(v16 + v25++) = v27;
                  }
                  while (a3 != v25);
                }
                else
                {
                  uint64_t v23 = 0;
                  do
                  {
                    int v24 = v12[v23];
                    v12[v23] = *(_DWORD *)(v16 + 4 * v23);
                    *(_DWORD *)(v16 + 4 * v23++) = v24;
                  }
                  while (v14 != v23);
                }
              }
              else
              {
                uint64_t v18 = 0;
                unint64_t v19 = v16 + a3;
                do
                {
                  uint64_t v20 = *(void *)(v19 + 8 * v18);
                  *(void *)(v19 + 8 * v18) = *(void *)(v16 + 8 * v18);
                  *(void *)(v16 + 8 * v18++) = v20;
                }
                while (v15 != v18);
              }
            }
            else
            {
              int v22 = *v12;
              *uint64_t v12 = *v17;
              *uint64_t v17 = v22;
            }
          }
          else
          {
            uint64_t v21 = *(void *)v12;
            *(void *)uint64_t v12 = *(void *)v17;
            *(void *)uint64_t v17 = v21;
          }
          if (a6)
          {
            if (v11 >= a6) {
              return 0;
            }
            ++v11;
          }
          v16 += v13;
          uint64_t v12 = (_DWORD *)((char *)v12 + v13);
        }
        while ((unint64_t)v17 > a1);
      }
      uint64_t v12 = (_DWORD *)((char *)v31 + a3);
      unint64_t v16 = v30 + a3;
    }
    while ((unint64_t)v31 + a3 < v29);
  }
  return 1;
}

uint64_t _qsort(unint64_t a1, size_t a2, size_t a3, int (__cdecl *a4)(const void *, const void *), int a5)
{
  uint64_t v7 = (char *)a1;
  int v8 = a3 != 4;
  if (a5 < 1)
  {
LABEL_164:
    return heapsort(v7, a2, a3, a4);
  }
  int v9 = a5;
  uint64_t v117 = -(uint64_t)a3;
  BOOL v113 = ((a1 | a3) & 3) == 0;
  BOOL v104 = a3 != 4;
  BOOL v105 = a3 != 8;
  if (((a1 | a3) & 3) != 0) {
    int v8 = 2;
  }
  BOOL v114 = ((a1 | a3) & 7) == 0;
  int v115 = v8;
  if (((a1 | a3) & 7) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = a3 != 8;
  }
  int v116 = v10;
  size_t v11 = a3 >> 2;
  size_t v12 = a3 >> 3;
  while (a2 > 7)
  {
    uint64_t v13 = &v7[(a2 >> 1) * a3];
    unint64_t v14 = &v7[(a2 - 1) * a3];
    unint64_t v108 = a2;
    int v109 = v9;
    if (a2 < 0x29)
    {
      int v24 = &v7[(a2 - 1) * a3];
      uint64_t v25 = v7;
      goto LABEL_40;
    }
    size_t v15 = (a2 >> 3) * a3;
    unint64_t v16 = &v7[v15];
    size_t v106 = v15;
    uint64_t v17 = &v7[2 * v15];
    int v18 = ((uint64_t (*)(char *, char *))a4)(v7, &v7[v15]);
    v110 = v16;
    unint64_t v19 = v16;
    uint64_t v20 = v17;
    int v21 = ((uint64_t (*)(char *, char *))a4)(v19, v17);
    if (v18 < 0)
    {
      size_t v22 = v106;
      if ((v21 & 0x80000000) == 0)
      {
        if (((int (*)(char *, char *))a4)(v7, v20) >= 0) {
          uint64_t v23 = v7;
        }
        else {
          uint64_t v23 = v20;
        }
        goto LABEL_20;
      }
    }
    else
    {
      size_t v22 = v106;
      if (v21 <= 0)
      {
        if (((int (*)(char *, char *))a4)(v7, v20) >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v7;
        }
LABEL_20:
        v110 = v23;
      }
    }
    v107 = &v13[-v22];
    int v26 = ((uint64_t (*)(void))a4)();
    int v27 = ((uint64_t (*)(char *, char *))a4)(v13, &v13[v22]);
    if (v26 < 0)
    {
      if ((v27 & 0x80000000) == 0)
      {
        if (((int (*)(char *, char *))a4)(v107, &v13[v22]) >= 0) {
          v13 -= v22;
        }
        else {
          v13 += v22;
        }
      }
    }
    else if (v27 <= 0)
    {
      if (((int (*)(char *, char *))a4)(v107, &v13[v22]) >= 0) {
        v13 += v22;
      }
      else {
        v13 -= v22;
      }
    }
    uint64_t v28 = -(uint64_t)v22;
    unint64_t v29 = &v14[-2 * v22];
    int v24 = &v14[v28];
    int v30 = ((uint64_t (*)(char *, char *))a4)(v29, &v14[v28]);
    int v31 = ((uint64_t (*)(char *, char *))a4)(v24, v14);
    if (v30 < 0)
    {
      if ((v31 & 0x80000000) == 0)
      {
        if (((int (*)(char *, char *))a4)(v29, v14) >= 0) {
          int v24 = v29;
        }
        else {
          int v24 = v14;
        }
      }
    }
    else if (v31 <= 0)
    {
      if (((int (*)(char *, char *))a4)(v29, v14) >= 0) {
        int v24 = v14;
      }
      else {
        int v24 = v29;
      }
    }
    int v9 = v109;
    uint64_t v25 = v110;
LABEL_40:
    v111 = v25;
    int v32 = ((uint64_t (*)(void))a4)();
    uint64_t result = ((uint64_t (*)(char *, char *))a4)(v13, v24);
    if (v32 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = ((uint64_t (*)(char *, char *))a4)(v111, v24);
        if ((int)result >= 0) {
          uint64_t v13 = v111;
        }
        else {
          uint64_t v13 = v24;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = ((uint64_t (*)(char *, char *))a4)(v111, v24);
      if ((int)result >= 0) {
        uint64_t v13 = v24;
      }
      else {
        uint64_t v13 = v111;
      }
    }
    if (v116)
    {
      if (v115)
      {
        if (v114)
        {
          mbstate_t v34 = v7;
          size_t v35 = a3 >> 3;
          do
          {
            uint64_t v36 = *(void *)v34;
            *(void *)mbstate_t v34 = *(void *)v13;
            v34 += 8;
            *(void *)uint64_t v13 = v36;
            v13 += 8;
            --v35;
          }
          while (v35);
        }
        else if (v113)
        {
          size_t v39 = a3 >> 2;
          v40 = v7;
          do
          {
            int v41 = *(_DWORD *)v40;
            *(_DWORD *)v40 = *(_DWORD *)v13;
            v40 += 4;
            *(_DWORD *)uint64_t v13 = v41;
            v13 += 4;
            --v39;
          }
          while (v39);
        }
        else
        {
          size_t v42 = a3;
          __int32 v43 = v7;
          do
          {
            char v44 = *v43;
            *v43++ = *v13;
            *v13++ = v44;
            --v42;
          }
          while (v42);
        }
      }
      else
      {
        int v38 = *(_DWORD *)v7;
        *(_DWORD *)uint64_t v7 = *(_DWORD *)v13;
        *(_DWORD *)uint64_t v13 = v38;
      }
    }
    else
    {
      uint64_t v37 = *(void *)v7;
      *(void *)uint64_t v7 = *(void *)v13;
      *(void *)uint64_t v13 = v37;
    }
    int v45 = 0;
    unsigned int v112 = v9 - 1;
    v46 = v14;
    v47 = &v7[a3];
    v48 = &v7[a3];
LABEL_64:
    while (v48 <= v46)
    {
      uint64_t result = ((uint64_t (*)(char *, char *))a4)(v48, v7);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v116)
        {
          if (v115)
          {
            if (v114)
            {
              uint64_t v49 = 0;
              do
              {
                uint64_t v50 = *(void *)&v47[8 * v49];
                *(void *)&v47[8 * v49] = *(void *)&v48[8 * v49];
                *(void *)&v48[8 * v49++] = v50;
              }
              while (v12 != v49);
            }
            else if (v113)
            {
              uint64_t v64 = 0;
              do
              {
                int v65 = *(_DWORD *)&v47[4 * v64];
                *(_DWORD *)&v47[4 * v64] = *(_DWORD *)&v48[4 * v64];
                *(_DWORD *)&v48[4 * v64++] = v65;
              }
              while (v11 != v64);
            }
            else
            {
              uint64_t v66 = 0;
              do
              {
                char v67 = v47[v66];
                v47[v66] = v48[v66];
                v48[v66++] = v67;
              }
              while (a3 != v66);
            }
          }
          else
          {
            int v63 = *(_DWORD *)v47;
            *(_DWORD *)v47 = *(_DWORD *)v48;
            *(_DWORD *)v48 = v63;
          }
        }
        else
        {
          uint64_t v62 = *(void *)v47;
          *(void *)v47 = *(void *)v48;
          *(void *)v48 = v62;
        }
        v47 += a3;
        int v45 = 1;
      }
      v48 += a3;
    }
    while (v48 <= v46)
    {
      uint64_t result = ((uint64_t (*)(char *, char *))a4)(v46, v7);
      if ((result & 0x80000000) != 0)
      {
        if (v116)
        {
          if (v115)
          {
            if (v114)
            {
              uint64_t v60 = 0;
              do
              {
                uint64_t v61 = *(void *)&v48[8 * v60];
                *(void *)&v48[8 * v60] = *(void *)&v46[8 * v60];
                *(void *)&v46[8 * v60++] = v61;
              }
              while (v12 != v60);
            }
            else if (v113)
            {
              uint64_t v70 = 0;
              do
              {
                int v71 = *(_DWORD *)&v48[4 * v70];
                *(_DWORD *)&v48[4 * v70] = *(_DWORD *)&v46[4 * v70];
                *(_DWORD *)&v46[4 * v70++] = v71;
              }
              while (v11 != v70);
            }
            else
            {
              uint64_t v72 = 0;
              do
              {
                char v73 = v48[v72];
                v48[v72] = v46[v72];
                v46[v72++] = v73;
              }
              while (a3 != v72);
            }
          }
          else
          {
            int v69 = *(_DWORD *)v48;
            *(_DWORD *)v48 = *(_DWORD *)v46;
            *(_DWORD *)v46 = v69;
          }
        }
        else
        {
          uint64_t v68 = *(void *)v48;
          *(void *)v48 = *(void *)v46;
          *(void *)v46 = v68;
        }
        v48 += a3;
        v46 += v117;
        int v45 = 1;
        goto LABEL_64;
      }
      if (result)
      {
        uint64_t v51 = v117;
      }
      else
      {
        if (v116)
        {
          if (v115)
          {
            if (v114)
            {
              uint64_t v52 = 0;
              do
              {
                uint64_t v53 = *(void *)&v46[8 * v52];
                *(void *)&v46[8 * v52] = *(void *)&v14[8 * v52];
                *(void *)&v14[8 * v52++] = v53;
              }
              while (v12 != v52);
            }
            else if (v113)
            {
              uint64_t v56 = 0;
              do
              {
                int v57 = *(_DWORD *)&v46[4 * v56];
                *(_DWORD *)&v46[4 * v56] = *(_DWORD *)&v14[4 * v56];
                *(_DWORD *)&v14[4 * v56++] = v57;
              }
              while (v11 != v56);
            }
            else
            {
              uint64_t v58 = 0;
              do
              {
                char v59 = v46[v58];
                v46[v58] = v14[v58];
                v14[v58++] = v59;
              }
              while (a3 != v58);
            }
          }
          else
          {
            int v55 = *(_DWORD *)v46;
            *(_DWORD *)v46 = *(_DWORD *)v14;
            *(_DWORD *)unint64_t v14 = v55;
          }
        }
        else
        {
          uint64_t v54 = *(void *)v46;
          *(void *)v46 = *(void *)v14;
          *(void *)unint64_t v14 = v54;
        }
        uint64_t v51 = v117;
        v14 += v117;
        int v45 = 1;
      }
      v46 += v51;
    }
    size_t v74 = v48 - v47;
    if (v47 - v7 >= v48 - v47) {
      unint64_t v75 = v48 - v47;
    }
    else {
      unint64_t v75 = v47 - v7;
    }
    if (v75)
    {
      v76 = &v48[-v75];
      if (v114)
      {
        unint64_t v77 = v75 >> 3;
        v78 = v7;
        do
        {
          uint64_t v79 = *(void *)v78;
          *(void *)v78 = *(void *)v76;
          v78 += 8;
          *(void *)v76 = v79;
          v76 += 8;
          --v77;
        }
        while (v77);
      }
      else if (v113)
      {
        unint64_t v80 = v75 >> 2;
        v81 = v7;
        do
        {
          int v82 = *(_DWORD *)v81;
          *(_DWORD *)v81 = *(_DWORD *)v76;
          v81 += 4;
          *(_DWORD *)v76 = v82;
          v76 += 4;
          --v80;
        }
        while (v80);
      }
      else
      {
        uint64_t v83 = -(uint64_t)v75;
        v84 = v7;
        do
        {
          char v85 = *v84;
          *v84++ = v48[v83];
          v48[v83] = v85;
          BOOL v86 = __CFADD__(v83++, 1);
        }
        while (!v86);
      }
    }
    v87 = &v7[v108 * a3];
    size_t v88 = v14 - v46;
    if (v88 >= v87 - &v14[a3]) {
      size_t v89 = v87 - &v14[a3];
    }
    else {
      size_t v89 = v88;
    }
    if (v89)
    {
      v90 = &v87[-v89];
      if (v114)
      {
        size_t v91 = v89 >> 3;
        do
        {
          uint64_t v92 = *(void *)v48;
          *(void *)v48 = *(void *)v90;
          v48 += 8;
          *(void *)v90 = v92;
          v90 += 8;
          --v91;
        }
        while (v91);
      }
      else if (v113)
      {
        size_t v93 = v89 >> 2;
        do
        {
          int v94 = *(_DWORD *)v48;
          *(_DWORD *)v48 = *(_DWORD *)v90;
          v48 += 4;
          *(_DWORD *)v90 = v94;
          v90 += 4;
          --v93;
        }
        while (v93);
      }
      else
      {
        uint64_t v95 = -(uint64_t)v89;
        do
        {
          char v96 = *v48;
          *v48++ = v87[v95];
          v87[v95] = v96;
          BOOL v86 = __CFADD__(v95++, 1);
        }
        while (!v86);
      }
    }
    int v9 = v112;
    if (!v45)
    {
      size_t v97 = v74;
      uint64_t result = _isort((unint64_t)v7, v108, a3, (int (*)(char *, _DWORD *))a4, (v108 >> 2) + 1, v116, v115);
      size_t v74 = v97;
      if (result) {
        return result;
      }
    }
    if (v74 <= v88)
    {
      if (v74 > a3) {
        uint64_t result = _qsort(v7, v74 / a3, a3, a4, v112);
      }
      if (v88 <= a3) {
        return result;
      }
      uint64_t v7 = &v87[-v88];
      char v100 = ((_BYTE)v87 - v88) | a3;
      int v101 = v105;
      if ((v100 & 7) != 0) {
        int v101 = 2;
      }
      BOOL v102 = (v100 & 3) == 0;
      BOOL v113 = v102;
      BOOL v114 = (v100 & 7) == 0;
      int v103 = v104;
      if (!v102) {
        int v103 = 2;
      }
      int v115 = v103;
      int v116 = v101;
      a2 = v88 / a3;
      if (v109 < 2) {
        goto LABEL_164;
      }
    }
    else
    {
      if (v88 > a3)
      {
        v98 = &v87[-v88];
        size_t v99 = v74;
        uint64_t result = _qsort(v98, v88 / a3, a3, a4, v112);
        size_t v74 = v99;
      }
      if (v74 <= a3) {
        return result;
      }
      a2 = v74 / a3;
      if (v109 < 2) {
        goto LABEL_164;
      }
    }
  }

  return _isort((unint64_t)v7, a2, a3, (int (*)(char *, _DWORD *))a4, 0, v116, v115);
}

uint64_t _qsort_0(char *a1, unint64_t a2, unint64_t a3, uint64_t a4, int (*a5)(uint64_t, char *, char *), int a6)
{
  int v8 = a1;
  int v9 = a3 != 4;
  if (a6 >= 1)
  {
    int v10 = a6;
    uint64_t v118 = -(uint64_t)a3;
    BOOL v114 = (((unint64_t)a1 | a3) & 3) == 0;
    BOOL v102 = a3 != 4;
    BOOL v103 = a3 != 8;
    if ((((unint64_t)a1 | a3) & 3) != 0) {
      int v9 = 2;
    }
    BOOL v115 = ((a1 | a3) & 7) == 0;
    int v116 = v9;
    if (((a1 | a3) & 7) != 0) {
      int v11 = 2;
    }
    else {
      int v11 = a3 != 8;
    }
    int v117 = v11;
    unint64_t v12 = a3 >> 2;
    unint64_t v13 = a3 >> 3;
LABEL_8:
    int v113 = v10;
    do
    {
      if (a2 <= 7)
      {
        return _isort_0((unint64_t)v8, a2, a3, a4, (int (*)(uint64_t, char *, _DWORD *))a5, 0, v117, v116);
      }
      unint64_t v14 = &v8[(a2 >> 1) * a3];
      size_t v15 = &v8[(a2 - 1) * a3];
      unint64_t v109 = a2;
      if (a2 < 0x29)
      {
        size_t v22 = &v8[(a2 - 1) * a3];
        uint64_t v23 = v8;
        goto LABEL_41;
      }
      unint64_t v16 = (a2 >> 3) * a3;
      uint64_t v17 = &v8[v16];
      unint64_t v107 = v16;
      int v18 = &v8[2 * v16];
      int v105 = a5(a4, v8, &v8[v16]);
      v110 = v17;
      int v19 = a5(a4, v17, v18);
      if (v105 < 0)
      {
        unint64_t v20 = v107;
        if ((v19 & 0x80000000) == 0)
        {
          if (a5(a4, v8, v18) >= 0) {
            int v21 = v8;
          }
          else {
            int v21 = v18;
          }
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v20 = v107;
        if (v19 <= 0)
        {
          if (a5(a4, v8, v18) >= 0) {
            int v21 = v18;
          }
          else {
            int v21 = v8;
          }
LABEL_21:
          v110 = v21;
        }
      }
      size_t v106 = &v14[-v20];
      int v24 = ((uint64_t (*)(uint64_t))a5)(a4);
      BOOL v104 = &v14[v20];
      int v25 = a5(a4, v14, &v14[v20]);
      if (v24 < 0)
      {
        unint64_t v26 = v107;
        if ((v25 & 0x80000000) == 0)
        {
          if (a5(a4, v106, v104) >= 0) {
            v14 -= v20;
          }
          else {
            v14 += v20;
          }
        }
      }
      else
      {
        unint64_t v26 = v107;
        if (v25 <= 0)
        {
          if (a5(a4, v106, v104) >= 0) {
            v14 += v20;
          }
          else {
            v14 -= v20;
          }
        }
      }
      int v27 = &v15[-2 * v26];
      size_t v22 = &v15[-v26];
      unint64_t v108 = v27;
      int v28 = ((uint64_t (*)(uint64_t))a5)(a4);
      int v29 = a5(a4, v22, v15);
      if (v28 < 0)
      {
        if ((v29 & 0x80000000) == 0)
        {
          if (a5(a4, v108, v15) >= 0) {
            size_t v22 = v108;
          }
          else {
            size_t v22 = v15;
          }
        }
      }
      else if (v29 <= 0)
      {
        if (a5(a4, v108, v15) >= 0) {
          size_t v22 = v15;
        }
        else {
          size_t v22 = v108;
        }
      }
      uint64_t v23 = v110;
LABEL_41:
      v111 = v23;
      int v30 = ((uint64_t (*)(uint64_t))a5)(a4);
      uint64_t result = ((uint64_t (*)(uint64_t, char *, char *))a5)(a4, v14, v22);
      if (v30 < 0)
      {
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = ((uint64_t (*)(uint64_t, char *, char *))a5)(a4, v111, v22);
          if ((int)result >= 0) {
            unint64_t v14 = v111;
          }
          else {
            unint64_t v14 = v22;
          }
        }
      }
      else if ((int)result <= 0)
      {
        uint64_t result = ((uint64_t (*)(uint64_t, char *, char *))a5)(a4, v111, v22);
        if ((int)result >= 0) {
          unint64_t v14 = v22;
        }
        else {
          unint64_t v14 = v111;
        }
      }
      if (v117)
      {
        if (v116)
        {
          if (v115)
          {
            int v32 = v8;
            unint64_t v33 = a3 >> 3;
            do
            {
              uint64_t v34 = *(void *)v32;
              *(void *)int v32 = *(void *)v14;
              v32 += 8;
              *(void *)unint64_t v14 = v34;
              v14 += 8;
              --v33;
            }
            while (v33);
          }
          else if (v114)
          {
            unint64_t v37 = a3 >> 2;
            int v38 = v8;
            do
            {
              int v39 = *(_DWORD *)v38;
              *(_DWORD *)int v38 = *(_DWORD *)v14;
              v38 += 4;
              *(_DWORD *)unint64_t v14 = v39;
              v14 += 4;
              --v37;
            }
            while (v37);
          }
          else
          {
            unint64_t v40 = a3;
            int v41 = v8;
            do
            {
              char v42 = *v41;
              *v41++ = *v14;
              *v14++ = v42;
              --v40;
            }
            while (v40);
          }
        }
        else
        {
          int v36 = *(_DWORD *)v8;
          *(_DWORD *)int v8 = *(_DWORD *)v14;
          *(_DWORD *)unint64_t v14 = v36;
        }
      }
      else
      {
        uint64_t v35 = *(void *)v8;
        *(void *)int v8 = *(void *)v14;
        *(void *)unint64_t v14 = v35;
      }
      int v43 = 0;
      unsigned int v112 = v113 - 1;
      char v44 = v15;
      int v45 = &v8[a3];
      v46 = &v8[a3];
LABEL_65:
      while (v46 <= v44)
      {
        uint64_t result = ((uint64_t (*)(uint64_t, char *, char *))a5)(a4, v46, v8);
        if ((int)result > 0) {
          break;
        }
        if (!result)
        {
          if (v117)
          {
            if (v116)
            {
              if (v115)
              {
                uint64_t v47 = 0;
                do
                {
                  uint64_t v48 = *(void *)&v45[8 * v47];
                  *(void *)&v45[8 * v47] = *(void *)&v46[8 * v47];
                  *(void *)&v46[8 * v47++] = v48;
                }
                while (v13 != v47);
              }
              else if (v114)
              {
                uint64_t v62 = 0;
                do
                {
                  int v63 = *(_DWORD *)&v45[4 * v62];
                  *(_DWORD *)&v45[4 * v62] = *(_DWORD *)&v46[4 * v62];
                  *(_DWORD *)&v46[4 * v62++] = v63;
                }
                while (v12 != v62);
              }
              else
              {
                uint64_t v64 = 0;
                do
                {
                  char v65 = v45[v64];
                  v45[v64] = v46[v64];
                  v46[v64++] = v65;
                }
                while (a3 != v64);
              }
            }
            else
            {
              int v61 = *(_DWORD *)v45;
              *(_DWORD *)int v45 = *(_DWORD *)v46;
              *(_DWORD *)v46 = v61;
            }
          }
          else
          {
            uint64_t v60 = *(void *)v45;
            *(void *)int v45 = *(void *)v46;
            *(void *)v46 = v60;
          }
          v45 += a3;
          int v43 = 1;
        }
        v46 += a3;
      }
      while (v46 <= v44)
      {
        uint64_t result = ((uint64_t (*)(uint64_t, char *, char *))a5)(a4, v44, v8);
        if ((result & 0x80000000) != 0)
        {
          if (v117)
          {
            if (v116)
            {
              if (v115)
              {
                uint64_t v58 = 0;
                do
                {
                  uint64_t v59 = *(void *)&v46[8 * v58];
                  *(void *)&v46[8 * v58] = *(void *)&v44[8 * v58];
                  *(void *)&v44[8 * v58++] = v59;
                }
                while (v13 != v58);
              }
              else if (v114)
              {
                uint64_t v68 = 0;
                do
                {
                  int v69 = *(_DWORD *)&v46[4 * v68];
                  *(_DWORD *)&v46[4 * v68] = *(_DWORD *)&v44[4 * v68];
                  *(_DWORD *)&v44[4 * v68++] = v69;
                }
                while (v12 != v68);
              }
              else
              {
                uint64_t v70 = 0;
                do
                {
                  char v71 = v46[v70];
                  v46[v70] = v44[v70];
                  v44[v70++] = v71;
                }
                while (a3 != v70);
              }
            }
            else
            {
              int v67 = *(_DWORD *)v46;
              *(_DWORD *)v46 = *(_DWORD *)v44;
              *(_DWORD *)char v44 = v67;
            }
          }
          else
          {
            uint64_t v66 = *(void *)v46;
            *(void *)v46 = *(void *)v44;
            *(void *)char v44 = v66;
          }
          v46 += a3;
          v44 += v118;
          int v43 = 1;
          goto LABEL_65;
        }
        if (result)
        {
          uint64_t v49 = v118;
        }
        else
        {
          if (v117)
          {
            if (v116)
            {
              if (v115)
              {
                uint64_t v50 = 0;
                do
                {
                  uint64_t v51 = *(void *)&v44[8 * v50];
                  *(void *)&v44[8 * v50] = *(void *)&v15[8 * v50];
                  *(void *)&v15[8 * v50++] = v51;
                }
                while (v13 != v50);
              }
              else if (v114)
              {
                uint64_t v54 = 0;
                do
                {
                  int v55 = *(_DWORD *)&v44[4 * v54];
                  *(_DWORD *)&v44[4 * v54] = *(_DWORD *)&v15[4 * v54];
                  *(_DWORD *)&v15[4 * v54++] = v55;
                }
                while (v12 != v54);
              }
              else
              {
                uint64_t v56 = 0;
                do
                {
                  char v57 = v44[v56];
                  v44[v56] = v15[v56];
                  v15[v56++] = v57;
                }
                while (a3 != v56);
              }
            }
            else
            {
              int v53 = *(_DWORD *)v44;
              *(_DWORD *)char v44 = *(_DWORD *)v15;
              *(_DWORD *)size_t v15 = v53;
            }
          }
          else
          {
            uint64_t v52 = *(void *)v44;
            *(void *)char v44 = *(void *)v15;
            *(void *)size_t v15 = v52;
          }
          uint64_t v49 = v118;
          v15 += v118;
          int v43 = 1;
        }
        v44 += v49;
      }
      unint64_t v72 = v46 - v45;
      if (v45 - v8 >= v46 - v45) {
        unint64_t v73 = v46 - v45;
      }
      else {
        unint64_t v73 = v45 - v8;
      }
      if (v73)
      {
        size_t v74 = &v46[-v73];
        if (v115)
        {
          unint64_t v75 = v73 >> 3;
          v76 = v8;
          do
          {
            uint64_t v77 = *(void *)v76;
            *(void *)v76 = *(void *)v74;
            v76 += 8;
            *(void *)size_t v74 = v77;
            v74 += 8;
            --v75;
          }
          while (v75);
        }
        else if (v114)
        {
          unint64_t v78 = v73 >> 2;
          uint64_t v79 = v8;
          do
          {
            int v80 = *(_DWORD *)v79;
            *(_DWORD *)uint64_t v79 = *(_DWORD *)v74;
            v79 += 4;
            *(_DWORD *)size_t v74 = v80;
            v74 += 4;
            --v78;
          }
          while (v78);
        }
        else
        {
          uint64_t v81 = -(uint64_t)v73;
          int v82 = v8;
          do
          {
            char v83 = *v82;
            *v82++ = v46[v81];
            v46[v81] = v83;
            BOOL v84 = __CFADD__(v81++, 1);
          }
          while (!v84);
        }
      }
      char v85 = &v8[v109 * a3];
      unint64_t v86 = v15 - v44;
      if (v86 >= v85 - &v15[a3]) {
        unint64_t v87 = v85 - &v15[a3];
      }
      else {
        unint64_t v87 = v86;
      }
      int v10 = v113 - 1;
      if (v87)
      {
        size_t v88 = &v85[-v87];
        if (v115)
        {
          unint64_t v89 = v87 >> 3;
          do
          {
            uint64_t v90 = *(void *)v46;
            *(void *)v46 = *(void *)v88;
            v46 += 8;
            *(void *)size_t v88 = v90;
            v88 += 8;
            --v89;
          }
          while (v89);
        }
        else if (v114)
        {
          unint64_t v91 = v87 >> 2;
          do
          {
            int v92 = *(_DWORD *)v46;
            *(_DWORD *)v46 = *(_DWORD *)v88;
            v46 += 4;
            *(_DWORD *)size_t v88 = v92;
            v88 += 4;
            --v91;
          }
          while (v91);
        }
        else
        {
          uint64_t v93 = -(uint64_t)v87;
          do
          {
            char v94 = *v46;
            *v46++ = v85[v93];
            v85[v93] = v94;
            BOOL v84 = __CFADD__(v93++, 1);
          }
          while (!v84);
        }
      }
      if (!v43)
      {
        unint64_t v95 = v72;
        uint64_t result = _isort_0((unint64_t)v8, v109, a3, a4, (int (*)(uint64_t, char *, _DWORD *))a5, (v109 >> 2) + 1, v117, v116);
        unint64_t v72 = v95;
        if (result) {
          return result;
        }
      }
      if (v72 <= v86)
      {
        if (v72 > a3) {
          uint64_t result = _qsort_0(v8, v72 / a3, a3, a4, a5, v112);
        }
        if (v86 <= a3) {
          return result;
        }
        int v8 = &v85[-v86];
        char v98 = ((_BYTE)v85 - v86) | a3;
        int v99 = v103;
        if ((v98 & 7) != 0) {
          int v99 = 2;
        }
        BOOL v100 = (v98 & 3) == 0;
        BOOL v114 = v100;
        BOOL v115 = (v98 & 7) == 0;
        int v101 = v102;
        if (!v100) {
          int v101 = 2;
        }
        int v116 = v101;
        int v117 = v99;
        a2 = v86 / a3;
        if (v113 >= 2) {
          goto LABEL_8;
        }
        break;
      }
      if (v86 > a3)
      {
        unint64_t v96 = v72;
        uint64_t result = _qsort_0(&v85[-v86], v86 / a3, a3, a4, a5, v112);
        unint64_t v72 = v96;
      }
      if (v72 <= a3) {
        return result;
      }
      a2 = v72 / a3;
    }
    while (v113-- >= 2);
  }

  return __heapsort_r(v8, a2, a3, a4, (uint64_t (*)(uint64_t, char *, char *))a5);
}

int strcasecmp_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v5 = a3;
  }
  if (a3) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (_xlocale *)&__c_locale;
  }
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)a1;
    __darwin_ct_rune_t v8 = *a1 < 0 ? ___tolower_l(v7, v6) : _DefaultRuneLocale.__maplower[v7];
    uint64_t v9 = *(unsigned __int8 *)a2;
    __darwin_ct_rune_t v10 = *a2 < 0 ? ___tolower_l(v9, v6) : _DefaultRuneLocale.__maplower[v9];
    if (v8 != v10) {
      break;
    }
    ++a2;
    if (!*(unsigned __int8 *)a1++) {
      return 0;
    }
  }
  uint64_t v13 = *(unsigned __int8 *)a1;
  if (*a1 < 0) {
    __darwin_ct_rune_t v14 = ___tolower_l(v13, v6);
  }
  else {
    __darwin_ct_rune_t v14 = _DefaultRuneLocale.__maplower[v13];
  }
  uint64_t v15 = *(unsigned __int8 *)a2;
  if (*a2 < 0) {
    __darwin_ct_rune_t v16 = ___tolower_l(v15, v6);
  }
  else {
    __darwin_ct_rune_t v16 = _DefaultRuneLocale.__maplower[v15];
  }
  return v14 - v16;
}

int strcasecmp(const char *a1, const char *a2)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (_xlocale *)&__global_locale;
  }
  return strcasecmp_l(a1, a2, v4);
}

int strcoll_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v5 = a3;
  }
  if (a3) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (_xlocale *)&__c_locale;
  }
  if (*(unsigned char *)(*((void *)v6 + 165) + 64))
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = __collate_mbstowcs((char *)a1, v6);
    if (v7)
    {
      unint64_t v12 = __collate_mbstowcs((char *)a2, v6);
      if (v12)
      {
        uint64_t v13 = v12;
        int v14 = wcscoll_l(v7, v12, v6);
        int v15 = *__error();
        free(v7);
        free(v13);
        *__error() = v15;
        return v14;
      }
    }
  }
  int v8 = *__error();
  free(v7);
  *__error() = v8;

  return j__strncasecmp_l(a1, a2, v9, v10);
}

int strcoll(const char *__s1, const char *__s2)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (_xlocale *)&__global_locale;
  }
  return strcoll_l(__s1, __s2, v4);
}

int alphasort(const dirent **a1, const dirent **a2)
{
  return strcoll((*a1)->d_name, (*a2)->d_name);
}

uint64_t __gl_compare(const char **a1, const char **a2)
{
  return strcoll(*a1, *a2);
}

DIR *g_opendir(__int32 *a1, uint64_t a2, locale_t a3)
{
  if (*(void *)a1)
  {
    if (__gl_g_Ctoc(a1, v6, 0x405uLL, a3))
    {
      locale_t v4 = __error();
      uint64_t result = 0;
      *locale_t v4 = 63;
      return result;
    }
  }
  else
  {
    strcpy(v6, ".");
  }
  if ((*(unsigned char *)(a2 + 24) & 0x40) != 0) {
    return (DIR *)(*(uint64_t (**)(char *))(a2 + 64))(v6);
  }
  else {
    return opendir(v6);
  }
}

DIR *__cdecl opendir(const char *a1)
{
  return __opendir2(a1, 3);
}

DIR *__cdecl fdopendir(int a1)
{
  memset(&v4, 0, sizeof(v4));
  if (fstat(a1, &v4)) {
    return 0;
  }
  if ((v4.st_mode & 0xF000) == 0x4000)
  {
    if (fcntl_NOCANCEL() == -1) {
      return 0;
    }
    return (DIR *)__opendir_common(a1, 3, 1);
  }
  else
  {
    int v3 = __error();
    uint64_t result = 0;
    int *v3 = 20;
  }
  return result;
}

DIR *__cdecl __opendir2(const char *a1, int a2)
{
  if ((a2 & 0x18) != 0) {
    return 0;
  }
  int v4 = open_NOCANCEL();
  if (v4 == -1) {
    return 0;
  }
  uint64_t result = (DIR *)__opendir_common(v4, a2, 0);
  if (!result)
  {
    int v5 = *__error();
    close_NOCANCEL();
    unint64_t v6 = __error();
    uint64_t result = 0;
    *unint64_t v6 = v5;
  }
  return result;
}

uint64_t __opendir_common(int a1, int a2, int a3)
{
  unint64_t v6 = (char *)malloc_type_malloc(0xA0uLL, 0x7AC59056uLL);
  uint64_t v7 = (uint64_t)v6;
  if (!v6) {
    return v7;
  }
  *((void *)v6 + 3) = 0;
  *(_DWORD *)unint64_t v6 = a1;
  *((_DWORD *)v6 + 14) = a2;
  *((void *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *((void *)v6 + 8) = 850045863;
  *((void *)v6 + 17) = 0;
  *((void *)v6 + 15) = 0;
  *((void *)v6 + 16) = v6 + 136;
  *((void *)v6 + 18) = 0;
  if ((a2 & 2) != 0)
  {
    if (__kernel_supports_unionfs_kernel_supports_unionfs == 255)
    {
      int v15 = 0;
      *(void *)&v16.f_bsize = 4;
      sysctlbyname("kern.secure_kernel", &v15, (size_t *)&v16.f_bsize, 0, 0);
      __kernel_supports_unionfs_kernel_supports_unionfs = v15 == 0;
      if (v15) {
        goto LABEL_9;
      }
    }
    else if (!__kernel_supports_unionfs_kernel_supports_unionfs)
    {
      goto LABEL_9;
    }
    memset(&v16, 0, 512);
    if (fstatfs(a1, &v16) < 0)
    {
LABEL_19:
      int v13 = *__error();
      free(*(void **)(v7 + 24));
      free((void *)v7);
      uint64_t v7 = 0;
      *__error() = v13;
      return v7;
    }
    if ((v16.f_flags & 0x20) != 0)
    {
      if (_filldir(v7, a3))
      {
        int v12 = *(_DWORD *)(v7 + 56) | 8;
LABEL_22:
        *(_DWORD *)(v7 + 56) = v12;
        return v7;
      }
      goto LABEL_19;
    }
  }
LABEL_9:
  *(_DWORD *)(v7 + 32) = 2048;
  int v8 = (char *)malloc_type_malloc(0x800uLL, 0xDA37278AuLL);
  *(void *)(v7 + 24) = v8;
  if (!v8) {
    goto LABEL_19;
  }
  if (a3)
  {
    size_t v9 = &v8[*(int *)(v7 + 32)];
    *((_DWORD *)v9 - 1) = 0;
    unint64_t v10 = __getdirentries64();
    *(void *)(v7 + 16) = v10;
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 <= *(int *)(v7 + 32) - 4) {
        int v11 = (32 * (*((_DWORD *)v9 - 1) & 1)) | *(_DWORD *)(v7 + 56);
      }
      else {
        int v11 = *(_DWORD *)(v7 + 56);
      }
      int v12 = v11 | 0x10;
      goto LABEL_22;
    }
    if (*__error() == 22) {
      *__error() = 20;
    }
    goto LABEL_19;
  }
  *(void *)(v7 + 16) = 0;
  *(void *)(*(void *)(v7 + 128) + 16) = 0;
  return v7;
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  j__strsignal_r((int)a1, (char *)a2, (size_t)a3);
  int result = __sysctl();
  if ((result & 0x80000000) == 0) {
    return __sysctl();
  }
  return result;
}

__int32 *__gl_globtilde(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)MEMORY[0x1F41887A8](a1, a2);
  uint64_t v7 = v2;
  if (*v2 != 126 || (*(unsigned char *)(v5 + 25) & 8) == 0) {
    return (__int32 *)v7;
  }
  int v8 = v3;
  uint64_t v9 = v4 - 1;
  unint64_t v10 = &v3[2 * v4 - 2];
  int v11 = v2 + 1;
  if (v4 - 1 < 1)
  {
    int v12 = v3;
LABEL_13:
    uint64_t v13 = *v11;
  }
  else
  {
    int v12 = v3;
    while (1)
    {
      uint64_t v13 = *v11;
      if (!*v11) {
        break;
      }
      if (v13 == 47 || v13 == 0x400000002FLL) {
        break;
      }
      *(void *)int v12 = v13;
      v12 += 2;
      ++v11;
      if (v12 >= v10) {
        goto LABEL_13;
      }
    }
  }
  if (v13) {
    BOOL v15 = v13 == 0x400000002FLL;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15 && v13 != 47) {
    return 0;
  }
  __int32 v28 = 0;
  *(void *)int v12 = 0;
  if (*(void *)v3)
  {
    if (__gl_g_Ctoc(v3, v30, 0x1000uLL, v6)) {
      return 0;
    }
    statfs v16 = getpwnam(v30);
    if (!v16) {
      return (__int32 *)v7;
    }
  }
  else
  {
    if (!issetugid())
    {
      pw_dir = getenv("HOME");
      if (pw_dir) {
        goto LABEL_28;
      }
    }
    uint64_t v17 = getlogin();
    if (!v17 || (statfs v16 = getpwnam(v17)) == 0)
    {
      uid_t v18 = getuid();
      statfs v16 = getpwuid(v18);
      if (!v16) {
        return (__int32 *)v7;
      }
    }
  }
  pw_dir = v16->pw_dir;
LABEL_28:
  uint64_t v20 = 0;
  memset(&v29, 0, sizeof(v29));
  while (1)
  {
    size_t v21 = mbrtowc(&v28, pw_dir, 6uLL, &v29);
    if (v21 < 0xFFFFFFFFFFFFFFFELL)
    {
      __int32 v22 = v28;
    }
    else
    {
      __int32 v22 = *pw_dir;
      __int32 v28 = v22;
      memset(&v29, 0, sizeof(v29));
      size_t v21 = 1;
    }
    *(_DWORD *)&v30[v20] = v22;
    if (!v22) {
      break;
    }
    pw_dir += v21;
    v20 += 4;
    if (v20 == 4096) {
      return 0;
    }
  }
  uint64_t v23 = v30;
  int v24 = (uint64_t *)v8;
  if (v9 >= 1)
  {
    do
    {
      uint64_t v25 = *(int *)v23;
      if (!v25) {
        goto LABEL_43;
      }
      v23 += 4;
      *v24++ = v25 | 0x4000000000;
    }
    while (v24 < (uint64_t *)v10);
  }
  if (*(_DWORD *)v23) {
    return 0;
  }
LABEL_43:
  if (*v11)
  {
    while (v24 <= (uint64_t *)v10)
    {
      uint64_t v27 = *v11++;
      *v24++ = v27;
      if (!v27) {
        return v8;
      }
    }
    return 0;
  }
  *int v24 = 0;
  return v8;
}

int uuid_is_null(const uuid_t uu)
{
  uint64_t v1 = 0;
  while (!uu[v1])
  {
    if (++v1 == 16) {
      return 1;
    }
  }
  return 0;
}

size_t strspn(const char *__s, const char *__charset)
{
  if (!*__s) {
    return 0;
  }
  memset(v8, 0, sizeof(v8));
  unsigned int v2 = *(unsigned __int8 *)__charset;
  if (*__charset)
  {
    int v3 = __charset + 1;
    do
    {
      *((void *)v8 + (v2 >> 6)) |= 1 << v2;
      unsigned int v4 = *(unsigned __int8 *)v3++;
      unsigned int v2 = v4;
    }
    while (v4);
  }
  uint64_t v5 = 0;
  do
    unint64_t v6 = __s[v5++];
  while (((*(void *)((char *)v8 + ((v6 >> 3) & 0x18)) >> v6) & 1) != 0);
  return v5 - 1;
}

int __snprintf_chk(char *a1, size_t a2, int a3, size_t a4, const char *a5, ...)
{
  va_start(va, a5);
  if (a4 < a2) {
    __chk_fail_overflow();
  }
  return vsnprintf(a1, a2, a5, va);
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  va_start(va, a4);
  if (a3 >> 31) {
    return vsprintf(a1, a4, va);
  }
  int result = vsnprintf(a1, a3, a4, va);
  if ((result & 0x80000000) == 0 && result >= a3) {
    __chk_fail_overflow();
  }
  return result;
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  uint64_t v4 = __locale_key;
  uint64_t v5 = *(atomic_uint **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (atomic_uint *)&__global_locale;
  }
  return _vsnprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, __str, __size, v6, (unsigned __int8 *)__format, (__int16 *)a4);
}

filesec_t filesec_init(void)
{
  filesec_t result = (filesec_t)malloc_type_malloc(0x40uLL, 0x108004043B192EBuLL);
  if (result) {
    *(_DWORD *)filesec_t result = 0;
  }
  return result;
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  size_t v3 = __n;
  uint64_t v6 = j__strsignal_r((int)__s1, (char *)__s2, __n);
  unint64_t v7 = MEMORY[0x18C122FD0](__s2, v3);
  if (v7 < v3) {
    size_t v3 = v7;
  }
  j__mkdtempat_np(__s1 + v6, (char *)__s2);
  __s1[v3 + v6] = 0;
  return __s1;
}

uint64_t _mkpath(int a1, char *a2, mode_t a3, char **a4)
{
  int v8 = *__error();
  memset(&v31, 0, sizeof(v31));
  if (!mkdirat(a1, a2, a3))
  {
    if (!a4)
    {
      unint64_t v10 = 0;
      int v11 = 0;
      goto LABEL_27;
    }
    uint64_t v13 = strdup(a2);
    unint64_t v10 = 0;
    int v11 = 0;
    goto LABEL_9;
  }
  int v9 = *__error();
  switch(v9)
  {
    case 2:
      int v14 = strdup(a2);
      unint64_t v10 = v14;
      if (!v14)
      {
        int v11 = 0;
LABEL_32:
        uint64_t v12 = 12;
        break;
      }
      uint64_t v17 = &v14[j__strsignal_r((int)v14, v15, v16)];
      uint64_t v18 = -1;
      uint64_t v19 = -1;
      do
      {
        uint64_t v20 = &v17[v18 - 1];
        if (v20 > v10)
        {
          uint64_t v19 = v18;
          if (v17[v18] == 46)
          {
            if (*v20 == 47) {
              uint64_t v19 = v18 - 2;
            }
            else {
              uint64_t v19 = v18;
            }
          }
        }
        if (&v17[v19] > v10) {
          v19 -= v17[v19] == 47;
        }
        BOOL v21 = v19 < v18;
        uint64_t v18 = v19;
      }
      while (v21);
      if (v19 > -2)
      {
        int v11 = 0;
      }
      else
      {
        v17[v19 + 1] = 0;
        a2 = strdup(v10);
        int v11 = a2;
        if (!a2) {
          goto LABEL_32;
        }
      }
      if (mkdirat(a1, a2, a3))
      {
        unsigned int v23 = 1;
        while (1)
        {
          int v24 = strrchr(v10, 47);
          if (!v24) {
            goto LABEL_68;
          }
          *int v24 = 0;
          if (!mkdirat(a1, v10, 0x1FFu)) {
            break;
          }
          if (*__error() == 17)
          {
            if (fstatat(a1, v10, &v31, 0) || (v31.st_mode & 0xF000) != 0x4000)
            {
              uint64_t v12 = 20;
              goto LABEL_69;
            }
            if (a4)
            {
              __int32 v28 = strdup(v10);
              int v27 = 0;
              goto LABEL_54;
            }
            int v27 = 0;
            goto LABEL_55;
          }
          ++v23;
          if (*__error() != 2)
          {
LABEL_40:
            __int32 v22 = __error();
            goto LABEL_25;
          }
        }
        memset(&v30, 0, sizeof(v30));
        if (fstatat(a1, v10, &v30, 0) != -1)
        {
          if ((~v30.st_mode & 0xC0) == 0)
          {
            int v27 = 0;
            goto LABEL_52;
          }
          int v27 = v30.st_mode | 0xC0;
          if (fchmodat(a1, v10, v30.st_mode | 0xC0, 0) != -1)
          {
LABEL_52:
            if (a4)
            {
              __int32 v28 = strdup(v10);
LABEL_54:
              *a4 = v28;
            }
LABEL_55:
            if (v23 >= 2)
            {
              do
              {
                v10[j__strsignal_r((int)v10, v25, v26)] = 47;
                if (mkdirat(a1, v10, 0x1FFu) == -1)
                {
                  if (*__error() != 17) {
                    goto LABEL_40;
                  }
                }
                else if (v27 && fchmodat(a1, v10, v27, 0) == -1)
                {
                  goto LABEL_68;
                }
                --v23;
              }
              while (v23 > 1);
            }
            if (mkdirat(a1, a2, a3) == -1)
            {
              uint64_t v12 = *__error();
              if (*__error() == 17 && !fstatat(a1, a2, &v31, 0))
              {
                if ((v31.st_mode & 0xF000) == 0x4000) {
                  uint64_t v12 = v12;
                }
                else {
                  uint64_t v12 = 20;
                }
              }
              break;
            }
LABEL_27:
            uint64_t v12 = 0;
            break;
          }
        }
LABEL_68:
        uint64_t v12 = 2;
        break;
      }
      if (!a4) {
        goto LABEL_27;
      }
      uint64_t v13 = strdup(a2);
LABEL_9:
      uint64_t v12 = 0;
      *a4 = v13;
      break;
    case 21:
      unint64_t v10 = 0;
      int v11 = 0;
      uint64_t v12 = 17;
      break;
    case 17:
      unint64_t v10 = 0;
      int v11 = 0;
      if (fstatat(a1, a2, &v31, 0))
      {
        uint64_t v12 = 5;
      }
      else if ((v31.st_mode & 0xF000) == 0x4000)
      {
        uint64_t v12 = 17;
      }
      else
      {
        uint64_t v12 = 20;
      }
      break;
    default:
      __int32 v22 = __error();
      unint64_t v10 = 0;
      int v11 = 0;
LABEL_25:
      uint64_t v12 = *v22;
      break;
  }
LABEL_69:
  free(v10);
  free(v11);
  *__error() = v8;
  return v12;
}

char *__cdecl strdup(const char *__s1)
{
  uint64_t v4 = j__strsignal_r((int)__s1, v1, v2);
  uint64_t v5 = (char *)malloc_type_malloc(v4 + 1, 0x89005E5CuLL);
  uint64_t v6 = v5;
  if (v5) {
    j__mkdtempat_np((int)v5, (char *)__s1);
  }
  return v6;
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  va_start(va, a4);
  return vsnprintf_l(a1, a2, a3, a4, va);
}

uint64_t _vsnprintf(pthread_mutex_t *a1, pthread_rwlock_t *a2, unsigned char *a3, uint64_t a4, atomic_uint *a5, unsigned __int8 *a6, __int16 *a7)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  long long v20 = (unint64_t)v24;
  long long v25 = 0u;
  long long v26 = 0u;
  unint64_t v8 = a4 - 1;
  if (!a4) {
    unint64_t v8 = 0;
  }
  long long v27 = 0uLL;
  uint64_t v9 = 0x7FFFFFFFLL;
  if (v8 < 0x7FFFFFFF) {
    uint64_t v9 = v8;
  }
  v24[0] = 0;
  v24[1] = 850045858;
  if (v9) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 1;
  }
  int v11 = v23;
  if (v9) {
    int v11 = a3;
  }
  uint64_t v28 = 0;
  if (a4 && !v9)
  {
    *a3 = 0;
    int v11 = v23;
    unsigned int v10 = 1;
  }
  uint64_t v13 = v11;
  *(void *)&long long v15 = v11;
  *(void *)((char *)&v14 + 4) = v10 | 0xFFFF020800000000;
  DWORD2(v15) = v10;
  uint64_t v29 = 0;
  long long v30 = 0uLL;
  long long v31 = 0uLL;
  long long v32 = 0uLL;
  long long v33 = 0uLL;
  long long v34 = 0uLL;
  long long v35 = 0uLL;
  long long v36 = 0uLL;
  long long v37 = 0uLL;
  uint64_t result = __v2printf(a1, a2, (uint64_t)&v13, a5, a6, a7);
  if (a4) {
    *uint64_t v13 = 0;
  }
  return result;
}

uint64_t __v2printf(pthread_mutex_t *a1, pthread_rwlock_t *a2, uint64_t a3, atomic_uint *a4, unsigned __int8 *a5, __int16 *a6)
{
  if (off_1E911B930) {
    ((void (*)(atomic_uint *, uint64_t))off_1E911B930)(a4, 1472);
  }
  if (off_1E911B938) {
    ((void (*)(unsigned __int8 *))off_1E911B938)(a5);
  }
  if (((*(_WORD *)(a3 + 16) & 8) == 0 || (*(_WORD *)(a3 + 16) & 0x200) == 0 && !*(void *)(a3 + 24))
    && __swsetup(a3))
  {
    uint64_t v12 = __error();
    int v13 = 9;
LABEL_10:
    *uint64_t v12 = v13;
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = *(void *)(a3 + 104);
  if ((*(unsigned char *)(v15 + 72) & 7) != 0)
  {
    if (a1) {
      goto LABEL_14;
    }
LABEL_24:
    if (!a2)
    {
      uint64_t v12 = __error();
      int v13 = 22;
      goto LABEL_10;
    }
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    memset(v26, 0, 64);
    *(_OWORD *)long long v27 = 0u;
    *(_OWORD *)uint64_t v28 = 0u;
    *(_OWORD *)uint64_t v29 = 0u;
    v26[4] = (unint64_t)a5;
    if (a4)
    {
      if (a4 == (atomic_uint *)-1) {
        long long v19 = (atomic_uint *)&__global_locale;
      }
      else {
        long long v19 = a4;
      }
    }
    else
    {
      uint64_t v21 = __locale_key;
      long long v22 = *(atomic_uint **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v21);
      if (v22) {
        long long v19 = v22;
      }
      else {
        long long v19 = (atomic_uint *)&__global_locale;
      }
    }
    atomic_fetch_add(v19, 1u);
    v27[0] = v19;
    pthread_rwlock_rdlock(a2);
    if ((__printf_comp((uint64_t)v26, (uint64_t)a2) & 0x80000000) != 0)
    {
      int v24 = *__error();
      pthread_rwlock_unlock(a2);
      if (atomic_fetch_add(v19, 0xFFFFFFFF) == 1)
      {
        long long v25 = (void (*)(atomic_uint *))*((void *)v19 + 1);
        if (v25) {
          v25(v19);
        }
      }
      *__error() = v24;
      return 0xFFFFFFFFLL;
    }
    uint64_t v14 = __printf_exec((uint64_t)v26, a3, a6);
    int v20 = *__error();
    pthread_rwlock_unlock(a2);
    if (atomic_fetch_add(v19, 0xFFFFFFFF) == 1)
    {
      unsigned int v23 = (void (*)(atomic_uint *))*((void *)v19 + 1);
      if (v23) {
        v23(v19);
      }
    }
    free(v27[1]);
    free(v28[1]);
    free(v29[0]);
LABEL_39:
    *__error() = v20;
    return v14;
  }
  *(unsigned char *)(v15 + 72) |= 7u;
  if (!a1) {
    goto LABEL_24;
  }
LABEL_14:
  if (a1 != (pthread_mutex_t *)-1)
  {
    pthread_mutex_lock(a1);
    pthread_rwlock_rdlock(*(pthread_rwlock_t **)a1[1].__opaque);
    uint64_t v14 = __printf_exec((uint64_t)a1, a3, a6);
    int v20 = *__error();
    pthread_rwlock_unlock(*(pthread_rwlock_t **)a1[1].__opaque);
    pthread_mutex_unlock(a1);
    goto LABEL_39;
  }
  long long v16 = (_xlocale *)&__global_locale;
  if (a4 != (atomic_uint *)-1) {
    long long v16 = (_xlocale *)a4;
  }
  if (a4) {
    long long v17 = v16;
  }
  else {
    long long v17 = (_xlocale *)&__c_locale;
  }

  return __vfprintf(a3, v17, a5, (int *)a6);
}

int vsnprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, va_list a5)
{
  return _vsnprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, a1, a2, (atomic_uint *)a3, (unsigned __int8 *)a4, (__int16 *)a5);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  uint64_t v4 = __little + 1;
  int v5 = *(unsigned __int8 *)__little;
  if (*__little)
  {
    size_t v9 = j__strsignal_r(__little + 1, (char *)__little, __len);
    for (size_t i = __len - 1; i != -1 && *__big; --i)
    {
      if (*(unsigned __int8 *)__big == v5)
      {
        if (v9 > i) {
          return 0;
        }
        if (!j__strsvisx((char *)__big + 1, v4, v9, v7, v8)) {
          return (char *)__big;
        }
      }
      ++__big;
    }
    return 0;
  }
  return (char *)__big;
}

uint64_t __vfprintf(uint64_t a1, locale_t a2, unsigned __int8 *a3, int *a4)
{
  v434 = a4;
  unsigned __int8 v433 = 0;
  uint64_t v432 = 0;
  long long v430 = 0u;
  long long v431 = 0u;
  int v429 = 0;
  double v428 = 0.0;
  int v427 = 0;
  v426 = 0;
  long long v425 = 0uLL;
  char v424 = 0;
  v419 = 0;
  v423[0] = &v423[2];
  memset(&v423[1], 0, 136);
  uint64_t v422 = a1;
  decimal_point = localeconv_l(a2)->decimal_point;
  v387 = decimal_point;
  if (decimal_point[1]) {
    int v9 = j__strsignal_r((int)decimal_point, v7, v8);
  }
  else {
    int v9 = 1;
  }
  unsigned int v10 = 0;
  v400 = 0;
  uint64_t v401 = 0;
  unint64_t v393 = 0;
  int v390 = 0;
  unint64_t v391 = 0;
  int v388 = 0;
  char v399 = 0;
  char v386 = 0;
  uint64_t v11 = 0;
  v394 = 0;
  uint64_t v392 = v9;
  int v404 = 1;
  v389 = a3;
LABEL_5:
  v402 = v10;
LABEL_6:
  uint64_t v12 = (char *)a3;
LABEL_7:
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = ~(unint64_t)v12;
  for (size_t i = v12; ; ++i)
  {
    int v17 = v12[v14];
    if (!v12[v14] || v17 == 37) {
      break;
    }
    ++v14;
    v13 += 0x100000000;
    --v15;
  }
  if (!v14)
  {
    uint64_t v403 = v11;
    goto LABEL_18;
  }
  uint64_t v403 = v11 + v14;
  if (v11 + v14 >= 0x7FFFFFFF) {
    goto LABEL_860;
  }
  int v18 = v423[1];
  int v19 = HIDWORD(v423[1]);
  int v20 = &v423[2 * SLODWORD(v423[1]) - 1];
  v20[3] = v12;
  v20[4] = v13 >> 32;
  HIDWORD(v423[1]) = v19 + v14;
  LODWORD(v423[1]) = v18 + 1;
  if (v18 < 7) {
    goto LABEL_18;
  }
  if (v19 + v14)
  {
    int v21 = __sfvwrite(v422, (uint64_t)v423);
    v423[1] = 0;
    if (v21) {
      goto LABEL_870;
    }
LABEL_18:
    if (!v17) {
      goto LABEL_862;
    }
    goto LABEL_19;
  }
  LODWORD(v423[1]) = 0;
  if (!v17)
  {
LABEL_862:
    unsigned int v10 = v402;
    if (HIDWORD(v423[1]))
    {
      __sfvwrite(v422, (uint64_t)v423);
      HIDWORD(v423[1]) = 0;
    }
    LODWORD(v423[1]) = 0;
    goto LABEL_865;
  }
LABEL_19:
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *(void *)&long long v431 = 0;
  unsigned __int8 v433 = 0;
  a3 = (unsigned __int8 *)&v12[v14 + 1];
  char v421 = 0;
  char v424 = 88;
  uint64_t v24 = -1;
  __sig = v12;
LABEL_20:
  while (2)
  {
    unsigned int v26 = (char)*a3++;
    unsigned int v25 = v26;
LABEL_21:
    uint64_t v27 = v22;
    while (1)
    {
      uint64_t v22 = v27;
      if (v25 - 49 >= 9) {
        break;
      }
      uint64_t v27 = 0;
      do
      {
        uint64_t v27 = v25 - 48 + 10 * v27;
        unsigned int v28 = (char)*a3++;
        unsigned int v25 = v28;
      }
      while (v28 - 48 < 0xA);
      if (v25 == 36)
      {
        int v404 = v27;
        if (!v419)
        {
          v419 = v437;
          uint64_t v32 = v23;
          BOOL arguments = __find_arguments(v389, a4, (_DWORD **)&v419);
          uint64_t v23 = v32;
          int v404 = v27;
          if (arguments)
          {
LABEL_861:
            uint64_t v11 = -1;
            goto LABEL_870;
          }
        }
        goto LABEL_20;
      }
    }
    switch(v25)
    {
      case ' ':
        if (!v433) {
          unsigned __int8 v433 = 32;
        }
        continue;
      case '#':
        uint64_t v23 = v23 | 1;
        continue;
      case '\'':
        uint64_t v23 = v23 | 0x200;
        continue;
      case '*':
        unsigned int v34 = (char)*a3 - 48;
        if (v34 > 9)
        {
          unsigned int v35 = 0;
          int v37 = *a3;
          long long v36 = (char *)a3;
        }
        else
        {
          unsigned int v35 = 0;
          long long v36 = (char *)a3;
          do
          {
            unsigned int v35 = 10 * v35 + v34;
            int v38 = *++v36;
            LOBYTE(v37) = v38;
            unsigned int v34 = v38 - 48;
          }
          while ((v38 - 48) < 0xA);
          int v37 = v37;
        }
        int v39 = v419;
        if (v37 == 36)
        {
          if (v419) {
            goto LABEL_64;
          }
          unint64_t v40 = v36;
          uint64_t v41 = v23;
          v419 = v437;
          if (__find_arguments(v389, a4, (_DWORD **)&v419)) {
            goto LABEL_861;
          }
          int v39 = v419;
          uint64_t v23 = v41;
          long long v36 = v40;
          if (v419)
          {
LABEL_64:
            int v42 = v39[4 * v35];
          }
          else
          {
            int v45 = v434;
            v434 += 2;
            int v42 = *v45;
          }
          __sig = v36 + 1;
          a3 = (unsigned __int8 *)(v36 + 1);
        }
        else
        {
          if (v419)
          {
            int v43 = v404;
            int v42 = *((_DWORD *)v419 + 4 * v404);
          }
          else
          {
            char v44 = v434;
            v434 += 2;
            int v42 = *v44;
            int v43 = v404;
          }
          int v404 = v43 + 1;
          __sig = v36;
        }
        uint64_t v22 = v42;
        if (v42 < 0)
        {
          uint64_t v22 = -(uint64_t)v42;
LABEL_72:
          uint64_t v23 = v23 | 4;
        }
        continue;
      case '+':
        unsigned __int8 v433 = 43;
        continue;
      case ',':
      case ':':
      case ';':
      case '_':
        char v424 = v25;
        continue;
      case '-':
        goto LABEL_72;
      case '.':
        unsigned int v29 = (char)*a3++;
        unsigned int v25 = v29;
        if (v29 != 42)
        {
          uint64_t v24 = 0;
          unsigned int v30 = v25 - 48;
          if (v25 - 48 <= 9)
          {
            uint64_t v24 = 0;
            do
            {
              uint64_t v24 = 10 * v24 + v30;
              unsigned int v31 = (char)*a3++;
              unsigned int v25 = v31;
              unsigned int v30 = v31 - 48;
            }
            while (v31 - 48 < 0xA);
          }
          goto LABEL_21;
        }
        unsigned int v46 = (char)*a3 - 48;
        if (v46 > 9)
        {
          unsigned int v47 = 0;
          int v49 = *a3;
          __sig = (char *)a3;
        }
        else
        {
          unsigned int v47 = 0;
          uint64_t v48 = (char *)a3;
          do
          {
            unsigned int v47 = 10 * v47 + v46;
            int v50 = *++v48;
            LOBYTE(v49) = v50;
            unsigned int v46 = v50 - 48;
          }
          while ((v50 - 48) < 0xA);
          __sig = v48;
          int v49 = v49;
        }
        uint64_t v51 = v419;
        if (v49 == 36)
        {
          if (v419) {
            goto LABEL_83;
          }
          uint64_t v52 = v23;
          v419 = v437;
          if (__find_arguments(v389, a4, (_DWORD **)&v419)) {
            goto LABEL_861;
          }
          uint64_t v51 = v419;
          uint64_t v23 = v52;
          if (v419)
          {
LABEL_83:
            int v53 = v51[4 * v47];
          }
          else
          {
            uint64_t v56 = v434;
            v434 += 2;
            int v53 = *v56;
          }
          a3 = (unsigned __int8 *)++__sig;
        }
        else
        {
          if (v419)
          {
            int v54 = v404;
            int v53 = *((_DWORD *)v419 + 4 * v404);
          }
          else
          {
            int v55 = v434;
            v434 += 2;
            int v53 = *v55;
            int v54 = v404;
          }
          int v404 = v54 + 1;
        }
        uint64_t v24 = v53;
        continue;
      case '0':
        uint64_t v23 = v23 | 0x80;
        continue;
      case 'A':
      case 'a':
        if ((v23 & 0x4000) != 0) {
          goto LABEL_152;
        }
        if (v25 == 97) {
          char v62 = 120;
        }
        else {
          char v62 = 88;
        }
        if (v25 == 97) {
          int v63 = &__vfprintf_xdigs_lower;
        }
        else {
          int v63 = &__vfprintf_xdigs_upper;
        }
        v394 = v63;
        if (v25 == 97) {
          char v64 = 112;
        }
        else {
          char v64 = 80;
        }
        char v399 = v64;
        char v421 = v62;
        __int16 v397 = v23;
        if (v400)
        {
          __freedtoa((uint64_t)v400);
          LOBYTE(v23) = v397;
        }
        uint64_t v65 = v24 + (v24 >= 0);
        if ((v23 & 8) != 0)
        {
          if (v419)
          {
            double v84 = *((double *)v419 + 2 * v404);
          }
          else
          {
            unint64_t v109 = (double *)v434;
            v434 += 2;
            double v84 = *v109;
          }
          double v428 = v84;
          BOOL v104 = (char *)__hldtoa(v394, v65, &v427, &v429, &v426);
        }
        else
        {
          if (v419)
          {
            double v66 = *((double *)v419 + 2 * v404);
          }
          else
          {
            BOOL v103 = (double *)v434;
            v434 += 2;
            double v66 = *v103;
          }
          double v428 = v66;
          BOOL v104 = __hdtoa((uint64_t)v394, v65, &v427, &v429, &v426, v66);
        }
        v400 = v104;
        v110 = (char *)(v426 - v104);
        if (v65 >= 0) {
          v110 = (char *)v65;
        }
        uint64_t v409 = (uint64_t)v110;
        if (v427 == 0x7FFFFFFF) {
          char v421 = 0;
        }
        goto LABEL_282;
      case 'C':
        LOWORD(v23) = v23 | 0x10;
        goto LABEL_156;
      case 'D':
        LOWORD(v23) = v23 | 0x10;
        goto LABEL_171;
      case 'E':
      case 'e':
        if ((v23 & 0x4000) != 0) {
          goto LABEL_152;
        }
        if (v24 >= 0) {
          ++v24;
        }
        else {
          uint64_t v24 = 7;
        }
        char v399 = v25;
        goto LABEL_145;
      case 'F':
      case 'f':
        if ((v23 & 0x4000) != 0) {
          goto LABEL_152;
        }
        char v399 = 0;
        goto LABEL_145;
      case 'G':
      case 'g':
        if ((v23 & 0x4000) != 0)
        {
LABEL_152:
          int v69 = 0;
          LOWORD(v23) = v23 | 0x100;
          goto LABEL_419;
        }
        char v399 = v25 - 2;
        if ((unint64_t)v24 <= 1) {
          uint64_t v24 = 1;
        }
LABEL_145:
        if (v24 < 0) {
          uint64_t v24 = 6;
        }
        uint64_t v409 = v24;
        if (v400)
        {
          __int16 v67 = v23;
          __freedtoa((uint64_t)v400);
          LOWORD(v23) = v67;
        }
        __int16 v397 = v23;
        if ((v23 & 8) != 0)
        {
          if (v419)
          {
            double v70 = *((double *)v419 + 2 * v404);
          }
          else
          {
            int v80 = (double *)v434;
            v434 += 2;
            double v70 = *v80;
          }
          double v428 = v70;
          if (v399) {
            unsigned int v81 = 2;
          }
          else {
            unsigned int v81 = 3;
          }
          v400 = __ldtoa(&v428, v81, v409, &v427, &v429, &v426);
        }
        else
        {
          if (v419)
          {
            double v68 = *((double *)v419 + 2 * v404);
          }
          else
          {
            unint64_t v78 = (double *)v434;
            v434 += 2;
            double v68 = *v78;
          }
          double v428 = v68;
          if (v399) {
            unsigned int v79 = 2;
          }
          else {
            unsigned int v79 = 3;
          }
          v400 = __dtoa(v79, v409, &v427, &v429, &v426, v68);
          if (v427 == 9999) {
            int v427 = 0x7FFFFFFF;
          }
        }
LABEL_282:
        char v111 = v397;
        if (v429) {
          unsigned __int8 v433 = 45;
        }
        ++v404;
        int v7 = (char *)v427;
        if (v427 == 0x7FFFFFFF)
        {
          if (*v400 == 78)
          {
            unsigned int v112 = "NAN";
            if (v25 > 0x60) {
              unsigned int v112 = "nan";
            }
            __sig = (char *)v112;
            unsigned __int8 v433 = 0;
          }
          else
          {
            v123 = "INF";
            if (v25 > 0x60) {
              v123 = "inf";
            }
            __sig = (char *)v123;
          }
          uint64_t v24 = v409;
          int v69 = 0;
          LOWORD(v23) = v397 & 0xFF7F;
          uint64_t v77 = 3;
LABEL_311:
          uint64_t v401 = v77;
          goto LABEL_419;
        }
        __int16 v414 = v397 | 0x100;
        int v113 = v426 - v400;
        int v388 = v426 - v400;
        if ((v25 & 0xFFFFFFDF) != 0x47) {
          goto LABEL_294;
        }
        if (v427 >= -3 && (uint64_t v114 = v409 - v427, v409 >= v427))
        {
          int v124 = v397 & 1;
          if ((v397 & 1) == 0) {
            uint64_t v114 = v113 - v427;
          }
          uint64_t v24 = v114 & ~(v114 >> 63);
        }
        else
        {
          if ((v397 & 1) == 0) {
            uint64_t v409 = v113;
          }
LABEL_294:
          if (v399)
          {
            unsigned int v115 = v427 - 1;
            v440[0] = v399;
            if (v427 >= 1) {
              char v116 = 43;
            }
            else {
              char v116 = 45;
            }
            if (v427 - 1 < 0) {
              unsigned int v115 = 1 - v427;
            }
            v440[1] = v116;
            if (v115 < 0xA)
            {
              v125 = &v441;
              uint64_t v24 = v409;
              if ((v399 & 0xDF) == 0x45)
              {
                char v441 = 48;
                v125 = v442;
              }
              char *v125 = v115 + 48;
              v120 = v125 + 1;
            }
            else
            {
              uint64_t v117 = 0;
              do
              {
                unsigned int v118 = v115;
                unsigned int v119 = v115;
                v115 /= 0xAu;
                v443.__mbstate8[v117-- + 5] = (v119 % 0xA) | 0x30;
              }
              while (v118 > 0x63);
              int v7 = &v443.__mbstate8[v117 + 5];
              v443.__mbstate8[v117 + 5] = v115 + 48;
              v120 = &v441;
              uint64_t v24 = v409;
              if (v117 + 7 <= 7)
              {
                uint64_t v121 = v117 + 5;
                __sigb = &v440[-v117 - 2];
                j__mkdtempat_np((int)&v441, v7);
                char v111 = v397;
                uint64_t v122 = 5;
                if (v121 > 5) {
                  uint64_t v122 = v121;
                }
                uint64_t v24 = v409;
                v120 = &__sigb[v122];
              }
            }
            int64_t v126 = v120 - v440;
            BOOL v127 = (v111 & 1) == 0 && v24 < 2;
            uint64_t v128 = v392;
            if (v127) {
              uint64_t v128 = 0;
            }
            uint64_t v401 = v24 + (int)v126 + v128;
            int v69 = 0;
            int v390 = v126;
            goto LABEL_336;
          }
          int v124 = v397 & 1;
          uint64_t v24 = v409;
        }
        if (v427 <= 0) {
          uint64_t v129 = 1;
        }
        else {
          uint64_t v129 = v427;
        }
        if (v124) {
          BOOL v130 = 0;
        }
        else {
          BOOL v130 = v24 == 0;
        }
        uint64_t v131 = v24 + v392;
        if (v130) {
          uint64_t v131 = 0;
        }
        uint64_t v401 = v131 + v129;
        if ((v397 & 0x200) == 0 || v427 < 1)
        {
          char v399 = 0;
          __sig = v400;
          LOWORD(v23) = v397 | 0x100;
          int v69 = 0;
          goto LABEL_419;
        }
        int v132 = grouping_init((uint64_t)&v430, v427, a2);
        int v69 = 0;
        char v399 = 0;
        v401 += v132;
LABEL_336:
        __sig = v400;
        goto LABEL_337;
      case 'L':
        uint64_t v23 = v23 | 8;
        continue;
      case 'O':
        LOWORD(v23) = v23 | 0x10;
        goto LABEL_161;
      case 'S':
        LOWORD(v23) = v23 | 0x10;
        goto LABEL_177;
      case 'U':
        LOWORD(v23) = v23 | 0x10;
        goto LABEL_166;
      case 'X':
        unint64_t v75 = &__vfprintf_xdigs_upper;
        goto LABEL_185;
      case 'c':
LABEL_156:
        if ((v23 & 0x4000) != 0) {
          goto LABEL_189;
        }
        if ((v23 & 0x10) != 0)
        {
          __int16 v415 = v23;
          memset(&v443, 0, sizeof(v443));
          if (v419)
          {
            __int32 v83 = *((_DWORD *)v419 + 4 * v404);
          }
          else
          {
            unint64_t v107 = v434;
            v434 += 2;
            __int32 v83 = *v107;
          }
          size_t v108 = wcrtomb_l(v438, v83, &v443, a2);
          if (v108 == -1)
          {
            *(_WORD *)(a1 + 16) |= 0x40u;
LABEL_869:
            uint64_t v11 = v403;
            goto LABEL_870;
          }
          uint64_t v401 = (int)v108;
          LOWORD(v23) = v415;
        }
        else
        {
          if (v419)
          {
            int v71 = *((_DWORD *)v419 + 4 * v404);
          }
          else
          {
            int v105 = v434;
            v434 += 2;
            int v71 = *v105;
          }
          v438[0] = v71;
          uint64_t v401 = 1;
        }
        int v69 = 0;
        unsigned __int8 v433 = 0;
        ++v404;
        __sig = v438;
        goto LABEL_419;
      case 'd':
      case 'i':
LABEL_171:
        if ((v23 & 0x4000) != 0) {
          goto LABEL_189;
        }
        uint64_t v72 = v24;
        if ((v23 & 0x1C20) != 0)
        {
          if (v419)
          {
            unint64_t v73 = *((void *)v419 + 2 * v404);
            if ((v73 & 0x8000000000000000) == 0) {
              goto LABEL_381;
            }
          }
          else
          {
            unint64_t v91 = (unint64_t *)v434;
            v434 += 2;
            unint64_t v73 = *v91;
            if ((*v91 & 0x8000000000000000) == 0) {
              goto LABEL_381;
            }
          }
          unint64_t v73 = -(uint64_t)v73;
        }
        else
        {
          if ((v23 & 0x10) != 0)
          {
            if (v419)
            {
              uint64_t v82 = *((void *)v419 + 2 * v404);
            }
            else
            {
              v133 = (uint64_t *)v434;
              v434 += 2;
              uint64_t v82 = *v133;
            }
          }
          else if ((v23 & 0x40) != 0)
          {
            if (v419)
            {
              LODWORD(v82) = *((_DWORD *)v419 + 4 * v404);
            }
            else
            {
              uint64_t v82 = (uint64_t)v434;
              v434 += 2;
              LODWORD(v82) = *(_DWORD *)v82;
            }
            uint64_t v82 = (__int16)v82;
          }
          else if ((v23 & 0x2000) != 0)
          {
            if (v419)
            {
              LODWORD(v82) = *((_DWORD *)v419 + 4 * v404);
            }
            else
            {
              uint64_t v82 = (uint64_t)v434;
              v434 += 2;
              LODWORD(v82) = *(_DWORD *)v82;
            }
            uint64_t v82 = (char)v82;
          }
          else
          {
            if (v419)
            {
              LODWORD(v82) = *((_DWORD *)v419 + 4 * v404);
            }
            else
            {
              uint64_t v82 = (uint64_t)v434;
              v434 += 2;
              LODWORD(v82) = *(_DWORD *)v82;
            }
            uint64_t v82 = (int)v82;
          }
          unint64_t v73 = v393;
          if ((v82 & 0x8000000000000000) == 0)
          {
            unint64_t v391 = v82;
            goto LABEL_381;
          }
          unint64_t v391 = -v82;
        }
        unsigned __int8 v433 = 45;
LABEL_381:
        size_t v8 = 10;
        goto LABEL_404;
      case 'h':
        if ((v23 & 0x40) != 0) {
          uint64_t v23 = v23 & 0xFFFFDFBF | 0x2000;
        }
        else {
          uint64_t v23 = v23 | 0x40;
        }
        continue;
      case 'j':
        uint64_t v23 = v23 | 0x1000;
        continue;
      case 'l':
        if ((v23 & 0x10) != 0) {
          uint64_t v23 = v23 & 0xFFFFFFCF | 0x20;
        }
        else {
          uint64_t v23 = v23 | 0x10;
        }
        continue;
      case 'n':
        if (v419)
        {
          int v57 = v404;
          uint64_t v58 = (uint64_t *)*((void *)v419 + 2 * v404);
        }
        else
        {
          uint64_t v59 = (uint64_t **)v434;
          v434 += 2;
          uint64_t v58 = *v59;
          int v57 = v404;
        }
        int v404 = v57 + 1;
        uint64_t v11 = v403;
        uint64_t v12 = (char *)a3;
        if (!v58) {
          goto LABEL_7;
        }
        if ((v386 & 1) == 0)
        {
          __int16 v60 = v23;
          BOOL only = __printf_is_memory_read_only((vm_address_t)v389);
          LOWORD(v23) = v60;
          if (!only) {
            __vfprintf_cold_1((uint64_t *)&v435, &v443);
          }
        }
        if ((v23 & 0x20) != 0 || (v23 & 0x400) != 0 || (v23 & 0x800) != 0 || (v23 & 0x1000) != 0 || (v23 & 0x10) != 0)
        {
          if (off_1E911B948) {
            ((void (*)(uint64_t *, uint64_t))off_1E911B948)(v58, 8);
          }
          uint64_t v11 = v403;
          *uint64_t v58 = v403;
        }
        else if ((v23 & 0x40) != 0)
        {
          if (off_1E911B948) {
            ((void (*)(uint64_t *, uint64_t))off_1E911B948)(v58, 2);
          }
          uint64_t v11 = v403;
          *(_WORD *)uint64_t v58 = v403;
        }
        else if ((v23 & 0x2000) != 0)
        {
          if (off_1E911B948) {
            ((void (*)(uint64_t *, uint64_t))off_1E911B948)(v58, 1);
          }
          uint64_t v11 = v403;
          *(unsigned char *)uint64_t v58 = v403;
        }
        else
        {
          if (off_1E911B948) {
            ((void (*)(uint64_t *, uint64_t))off_1E911B948)(v58, 4);
          }
          uint64_t v11 = v403;
          *(_DWORD *)uint64_t v58 = v403;
        }
        char v386 = 1;
        goto LABEL_6;
      case 'o':
LABEL_161:
        if ((v23 & 0x4000) != 0) {
          goto LABEL_189;
        }
        uint64_t v72 = v24;
        if ((v23 & 0x1C20) != 0)
        {
          if (v419)
          {
            unint64_t v73 = *((void *)v419 + 2 * v404);
          }
          else
          {
            int v92 = (unint64_t *)v434;
            v434 += 2;
            unint64_t v73 = *v92;
          }
          size_t v8 = 8;
          goto LABEL_403;
        }
        if ((v23 & 0x10) != 0)
        {
          if (v419)
          {
            unint64_t v85 = *((void *)v419 + 2 * v404);
          }
          else
          {
            v134 = (unint64_t *)v434;
            v434 += 2;
            unint64_t v85 = *v134;
          }
        }
        else if ((v23 & 0x40) != 0)
        {
          if (v419)
          {
            LOWORD(v85) = *((_WORD *)v419 + 8 * v404);
          }
          else
          {
            unint64_t v85 = (unint64_t)v434;
            v434 += 2;
            LODWORD(v85) = *(_DWORD *)v85;
          }
          unint64_t v85 = (unsigned __int16)v85;
        }
        else if ((v23 & 0x2000) != 0)
        {
          if (v419)
          {
            LOBYTE(v85) = *((unsigned char *)v419 + 16 * v404);
          }
          else
          {
            unint64_t v85 = (unint64_t)v434;
            v434 += 2;
            LODWORD(v85) = *(_DWORD *)v85;
          }
          unint64_t v85 = v85;
        }
        else
        {
          if (v419)
          {
            LODWORD(v85) = *((_DWORD *)v419 + 4 * v404);
          }
          else
          {
            unint64_t v85 = (unint64_t)v434;
            v434 += 2;
            LODWORD(v85) = *(_DWORD *)v85;
          }
          unint64_t v85 = v85;
        }
        unint64_t v391 = v85;
        size_t v8 = 8;
        goto LABEL_394;
      case 'p':
        if ((v23 & 0x4000) != 0)
        {
          int v69 = 0;
          unsigned int v25 = 112;
          goto LABEL_419;
        }
        uint64_t v72 = v24;
        if (v419)
        {
          unint64_t v73 = *((void *)v419 + 2 * v404);
        }
        else
        {
          size_t v106 = (unint64_t *)v434;
          v434 += 2;
          unint64_t v73 = *v106;
        }
        LOWORD(v23) = v23 | 0x1000;
        char v421 = 120;
        size_t v8 = 16;
        v394 = &__vfprintf_xdigs_lower;
        goto LABEL_403;
      case 'q':
        uint64_t v23 = v23 | 0x20;
        continue;
      case 's':
LABEL_177:
        __int16 v414 = v23;
        if ((v23 & 0x10) == 0)
        {
          if (v419)
          {
            size_t v74 = (const char *)*((void *)v419 + 2 * v404);
          }
          else
          {
            unint64_t v87 = (const char **)v434;
            v434 += 2;
            size_t v74 = *v87;
          }
          if (!v74) {
            size_t v74 = "(null)";
          }
LABEL_239:
          __sig = (char *)v74;
          if (v24 < 0) {
            goto LABEL_261;
          }
          goto LABEL_240;
        }
        free(v402);
        if (v419)
        {
          v76 = (char *)*((void *)v419 + 2 * v404);
          if (!v76) {
            goto LABEL_238;
          }
        }
        else
        {
          unint64_t v89 = (char **)v434;
          v434 += 2;
          v76 = *v89;
          if (!*v89)
          {
LABEL_238:
            v402 = 0;
            size_t v74 = "(null)";
            goto LABEL_239;
          }
        }
        memset(&v443, 0, sizeof(v443));
        v435 = 0;
        uint64_t v410 = v24;
        __siga = v76;
        if ((v24 & 0x80000000) != 0)
        {
          v435 = (__int32 *)v76;
          memset(&v443, 0, sizeof(v443));
          uint64_t v24 = wcsrtombs_l(0, (const __int32 **)&v435, 0, &v443, a2);
          if (v24 == -1) {
            goto LABEL_867;
          }
        }
        else if (v24 > 0x7F)
        {
          unint64_t v95 = 0;
          v435 = (__int32 *)v76;
          memset(&v443, 0, sizeof(v443));
          unint64_t v96 = v24;
          do
          {
            uint64_t v24 = v95;
            __int32 v97 = *v435++;
            size_t v98 = wcrtomb_l(v436, v97, &v443, a2);
            unint64_t v95 = v98 + v24;
          }
          while (v98 + 1 >= 2 && v95 <= v96);
        }
        else
        {
          uint64_t v24 = v24;
        }
        BOOL v100 = (char *)malloc_type_malloc(v24 + 1, 0xFA50CE1uLL);
        if (!v100) {
          goto LABEL_867;
        }
        int v101 = v100;
        v435 = (__int32 *)__siga;
        memset(&v443, 0, sizeof(v443));
        size_t v102 = wcsrtombs_l(v100, (const __int32 **)&v435, v24, &v443, a2);
        if (v102 != -1)
        {
          v101[v102] = 0;
          v402 = v101;
          __sig = v101;
          uint64_t v24 = v410;
          if (v410 < 0)
          {
LABEL_261:
            unint64_t v90 = j__strsignal_r((int)__sig, v7, v8);
            goto LABEL_262;
          }
LABEL_240:
          unint64_t v90 = MEMORY[0x18C122FD0](__sig, v24);
LABEL_262:
          uint64_t v401 = v90;
          if (v90 > 0x7FFFFFFE) {
            goto LABEL_861;
          }
          if (off_1E911B930) {
            ((void (*)(char *, unint64_t))off_1E911B930)(__sig, v90);
          }
          int v69 = 0;
          ++v404;
          unsigned __int8 v433 = 0;
LABEL_337:
          LOWORD(v23) = v414;
LABEL_419:
          __int16 v416 = v23;
          if ((v23 & 0x4000) != 0)
          {
            v435 = 0;
            uint64_t v161 = v24;
            if (v419)
            {
              long long v162 = *((_OWORD *)v419 + v404);
            }
            else
            {
              v163 = (_OWORD *)(((unint64_t)v434 + 15) & 0xFFFFFFFFFFFFFFF0);
              v434 = (int *)(v163 + 1);
              long long v162 = *v163;
            }
            long long v425 = v162;
            v164 = (char *)(a3 - (unsigned __int8 *)&v12[v14]);
            if ((unint64_t)(v164 + 1) >= 0x22)
            {
              uint64_t __sigc = v162;
              v166 = (mbstate_t *)malloc_type_malloc((size_t)(v164 + 2), 0xF743125DuLL);
              *(void *)&long long v162 = __sigc;
              v165 = v166;
            }
            else
            {
              v165 = &v443;
            }
            if (v424 == 88)
            {
              if (v25 == 99) {
                char v424 = 0;
              }
              else {
                char v424 = 32;
              }
            }
            if ((uint64_t)(v164 - 1) >= 1)
            {
              int v167 = 0;
              int v168 = 0;
              int v169 = 0;
              v170 = (char *)&a3[v15];
              v171 = i;
              uint64_t v172 = v161;
              while (1)
              {
                int v174 = *v171++;
                int v173 = v174;
                uint64_t v175 = (v174 - 42);
                if (v175 > 0x3E) {
                  goto LABEL_466;
                }
                if (((1 << v175) & 0x4020000000030004) == 0) {
                  break;
                }
LABEL_469:
                size_t i = v171;
                if (!--v170) {
                  goto LABEL_472;
                }
              }
              if (v175)
              {
LABEL_466:
                if (v173 == 108 || v173 == 118) {
                  goto LABEL_469;
                }
              }
              else if (*(i - 1) == 46)
              {
                int v167 = 1;
              }
              else
              {
                int v168 = 1;
              }
              v165->__mbstate8[v169++] = v173;
              goto LABEL_469;
            }
            int v169 = 0;
            int v168 = 0;
            int v167 = 0;
            uint64_t v172 = v161;
LABEL_472:
            if ((v416 & 0x40) == 0)
            {
              if ((v416 & 0x10) != 0)
              {
                if (v25 == 112) {
                  int v177 = 5;
                }
                else {
                  int v177 = 2;
                }
                goto LABEL_483;
              }
              char v176 = v25 - 65;
              if (v25 - 65 > 0x2F) {
                goto LABEL_554;
              }
              if (((1 << v176) & 0x7100000051) != 0)
              {
                int v177 = 6;
LABEL_483:
                uint64_t v178 = 4;
                goto LABEL_487;
              }
              if (((1 << v176) & 0x800400000000) == 0)
              {
LABEL_554:
                *(_WORD *)&v165->__mbstate8[v169] = 26728;
                v169 += 2;
              }
              if (v25 == 112) {
                int v177 = 3;
              }
              else {
                int v177 = 0;
              }
              uint64_t v178 = 16;
LABEL_487:
              uint64_t v417 = v178;
              v179 = &v165->__mbstate8[v169];
              char *v179 = v25;
              v179[1] = 0;
              if (v168)
              {
                if (v167)
                {
                  uint64_t v412 = v172;
                  switch(v177)
                  {
                    case 0:
                      uint64_t v180 = v162;
                      goto LABEL_568;
                    case 1:
                      uint64_t v180 = (unsigned __int16)v162;
                      goto LABEL_568;
                    case 2:
                      int v230 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, v172, (void)v162);
                      goto LABEL_575;
                    case 3:
                      uint64_t v180 = v162;
                      goto LABEL_568;
                    case 4:
                      uint64_t v180 = (unsigned __int16)v162;
                      goto LABEL_568;
                    case 5:
                      uint64_t v180 = v162;
LABEL_568:
                      int v230 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, v172, v180);
                      goto LABEL_575;
                    case 6:
                      int v230 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, v172, *(float *)&v162);
LABEL_575:
                      int v229 = v230;
                      break;
                    default:
                      int v229 = 0;
                      break;
                  }
                  uint64_t v11 = v403 + v229;
                  int v231 = v423[1];
                  int v232 = HIDWORD(v423[1]);
                  v233 = &v423[2 * SLODWORD(v423[1]) - 1];
                  v233[3] = v435;
                  v233[4] = v229;
                  int v234 = v232 + v229;
                  HIDWORD(v423[1]) = v232 + v229;
                  LODWORD(v423[1]) = v231 + 1;
                  if (v231 >= 7)
                  {
                    if (v234)
                    {
                      int v235 = __sfvwrite(v422, (uint64_t)v423);
                      v423[1] = 0;
                      if (v235) {
                        goto LABEL_870;
                      }
                    }
                    goto LABEL_583;
                  }
                  if (!v234)
                  {
LABEL_583:
                    LODWORD(v423[1]) = 0;
                    goto LABEL_584;
                  }
                  int v236 = __sfvwrite(v422, (uint64_t)v423);
                  v423[1] = 0;
                  if (!v236)
                  {
LABEL_584:
                    free(v435);
                    v237 = (float *)&v425 + 1;
                    uint64_t v238 = 1;
                    while (1)
                    {
                      if (v424)
                      {
                        int v239 = v423[1];
                        int v240 = HIDWORD(v423[1]);
                        v241 = &v423[2 * SLODWORD(v423[1]) - 1];
                        v241[3] = &v424;
                        v241[4] = 1;
                        int v242 = v240 + 1;
                        HIDWORD(v423[1]) = v242;
                        LODWORD(v423[1]) = v239 + 1;
                        if (v239 >= 7)
                        {
                          if (v242)
                          {
                            int v243 = __sfvwrite(v422, (uint64_t)v423);
                            v423[1] = 0;
                            if (v243) {
                              break;
                            }
                          }
                          else
                          {
                            LODWORD(v423[1]) = 0;
                          }
                        }
                      }
                      switch(v177)
                      {
                        case 0:
                        case 3:
                          uint64_t v244 = *((unsigned __int8 *)&v425 + v238);
                          goto LABEL_595;
                        case 1:
                        case 4:
                          uint64_t v244 = *((unsigned __int16 *)&v425 + v238);
                          goto LABEL_595;
                        case 2:
                        case 5:
                          uint64_t v244 = *(unsigned int *)v237;
LABEL_595:
                          int v245 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, v412, v244);
                          goto LABEL_596;
                        case 6:
                          int v245 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, v412, *v237);
LABEL_596:
                          int v229 = v245;
                          break;
                        default:
                          break;
                      }
                      v11 += v229;
                      int v246 = v423[1];
                      int v247 = HIDWORD(v423[1]);
                      v248 = &v423[2 * SLODWORD(v423[1]) - 1];
                      v248[3] = v435;
                      v248[4] = v229;
                      int v249 = v247 + v229;
                      HIDWORD(v423[1]) = v247 + v229;
                      LODWORD(v423[1]) = v246 + 1;
                      if (v246 < 7)
                      {
                        if (v249)
                        {
                          int v251 = __sfvwrite(v422, (uint64_t)v423);
                          v423[1] = 0;
                          if (v251) {
                            break;
                          }
                          goto LABEL_605;
                        }
                      }
                      else if (v249)
                      {
                        int v250 = __sfvwrite(v422, (uint64_t)v423);
                        v423[1] = 0;
                        if (v250) {
                          break;
                        }
                      }
                      LODWORD(v423[1]) = 0;
LABEL_605:
                      free(v435);
                      ++v238;
                      ++v237;
                      if (v417 == v238) {
                        goto LABEL_768;
                      }
                    }
                  }
LABEL_870:
                  unsigned int v10 = v402;
                  goto LABEL_871;
                }
                switch(v177)
                {
                  case 0:
                    uint64_t v182 = v162;
                    goto LABEL_660;
                  case 1:
                    uint64_t v182 = (unsigned __int16)v162;
                    goto LABEL_660;
                  case 2:
                    int v282 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, (void)v162);
                    goto LABEL_667;
                  case 3:
                    uint64_t v182 = v162;
                    goto LABEL_660;
                  case 4:
                    uint64_t v182 = (unsigned __int16)v162;
                    goto LABEL_660;
                  case 5:
                    uint64_t v182 = v162;
LABEL_660:
                    int v282 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, v182);
                    goto LABEL_667;
                  case 6:
                    int v282 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, *(float *)&v162);
LABEL_667:
                    int v281 = v282;
                    break;
                  default:
                    int v281 = 0;
                    break;
                }
                uint64_t v11 = v403 + v281;
                int v283 = v423[1];
                int v284 = HIDWORD(v423[1]);
                v285 = &v423[2 * SLODWORD(v423[1]) - 1];
                v285[3] = v435;
                v285[4] = v281;
                int v286 = v284 + v281;
                HIDWORD(v423[1]) = v284 + v281;
                LODWORD(v423[1]) = v283 + 1;
                if (v283 < 7)
                {
                  if (v286)
                  {
                    int v288 = __sfvwrite(v422, (uint64_t)v423);
                    v423[1] = 0;
                    if (v288) {
                      goto LABEL_870;
                    }
                    goto LABEL_676;
                  }
                }
                else if (v286)
                {
                  int v287 = __sfvwrite(v422, (uint64_t)v423);
                  v423[1] = 0;
                  if (v287) {
                    goto LABEL_870;
                  }
                }
                LODWORD(v423[1]) = 0;
LABEL_676:
                free(v435);
                v289 = (float *)&v425 + 1;
                uint64_t v290 = 1;
                while (1)
                {
                  if (v424)
                  {
                    int v291 = v423[1];
                    int v292 = HIDWORD(v423[1]);
                    v293 = &v423[2 * SLODWORD(v423[1]) - 1];
                    v293[3] = &v424;
                    v293[4] = 1;
                    int v294 = v292 + 1;
                    HIDWORD(v423[1]) = v294;
                    LODWORD(v423[1]) = v291 + 1;
                    if (v291 >= 7)
                    {
                      if (v294)
                      {
                        int v295 = __sfvwrite(v422, (uint64_t)v423);
                        v423[1] = 0;
                        if (v295) {
                          goto LABEL_870;
                        }
                      }
                      else
                      {
                        LODWORD(v423[1]) = 0;
                      }
                    }
                  }
                  switch(v177)
                  {
                    case 0:
                    case 3:
                      uint64_t v296 = *((unsigned __int8 *)&v425 + v290);
                      goto LABEL_687;
                    case 1:
                    case 4:
                      uint64_t v296 = *((unsigned __int16 *)&v425 + v290);
                      goto LABEL_687;
                    case 2:
                    case 5:
                      uint64_t v296 = *(unsigned int *)v289;
LABEL_687:
                      int v297 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, v296);
                      goto LABEL_688;
                    case 6:
                      int v297 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v22, *v289);
LABEL_688:
                      int v281 = v297;
                      break;
                    default:
                      break;
                  }
                  v11 += v281;
                  int v298 = v423[1];
                  int v299 = HIDWORD(v423[1]);
                  v300 = &v423[2 * SLODWORD(v423[1]) - 1];
                  v300[3] = v435;
                  v300[4] = v281;
                  int v301 = v299 + v281;
                  HIDWORD(v423[1]) = v299 + v281;
                  LODWORD(v423[1]) = v298 + 1;
                  if (v298 < 7)
                  {
                    if (v301)
                    {
                      int v303 = __sfvwrite(v422, (uint64_t)v423);
                      v423[1] = 0;
                      if (v303) {
                        goto LABEL_870;
                      }
                      goto LABEL_697;
                    }
                  }
                  else if (v301)
                  {
                    int v302 = __sfvwrite(v422, (uint64_t)v423);
                    v423[1] = 0;
                    if (v302) {
                      goto LABEL_870;
                    }
                  }
                  LODWORD(v423[1]) = 0;
LABEL_697:
                  free(v435);
                  ++v290;
                  ++v289;
                  if (v417 == v290) {
                    goto LABEL_768;
                  }
                }
              }
              if (v167)
              {
                uint64_t v413 = v172;
                switch(v177)
                {
                  case 0:
                    uint64_t v181 = v162;
                    goto LABEL_618;
                  case 1:
                    uint64_t v181 = (unsigned __int16)v162;
                    goto LABEL_618;
                  case 2:
                    int v259 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v172, (void)v162);
                    goto LABEL_625;
                  case 3:
                    uint64_t v181 = v162;
                    goto LABEL_618;
                  case 4:
                    uint64_t v181 = (unsigned __int16)v162;
                    goto LABEL_618;
                  case 5:
                    uint64_t v181 = v162;
LABEL_618:
                    int v259 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v172, v181);
                    goto LABEL_625;
                  case 6:
                    int v259 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v172, *(float *)&v162);
LABEL_625:
                    int v258 = v259;
                    break;
                  default:
                    int v258 = 0;
                    break;
                }
                uint64_t v11 = v403 + v258;
                int v260 = v423[1];
                int v261 = HIDWORD(v423[1]);
                v262 = &v423[2 * SLODWORD(v423[1]) - 1];
                v262[3] = v435;
                v262[4] = v258;
                int v263 = v261 + v258;
                HIDWORD(v423[1]) = v261 + v258;
                LODWORD(v423[1]) = v260 + 1;
                if (v260 < 7)
                {
                  if (v263)
                  {
                    int v265 = __sfvwrite(v422, (uint64_t)v423);
                    v423[1] = 0;
                    if (v265) {
                      goto LABEL_870;
                    }
                    goto LABEL_634;
                  }
                }
                else if (v263)
                {
                  int v264 = __sfvwrite(v422, (uint64_t)v423);
                  v423[1] = 0;
                  if (v264) {
                    goto LABEL_870;
                  }
                }
                LODWORD(v423[1]) = 0;
LABEL_634:
                free(v435);
                v266 = (float *)&v425 + 1;
                uint64_t v267 = 1;
                while (1)
                {
                  if (v424)
                  {
                    int v268 = v423[1];
                    int v269 = HIDWORD(v423[1]);
                    v270 = &v423[2 * SLODWORD(v423[1]) - 1];
                    v270[3] = &v424;
                    v270[4] = 1;
                    int v271 = v269 + 1;
                    HIDWORD(v423[1]) = v271;
                    LODWORD(v423[1]) = v268 + 1;
                    if (v268 >= 7)
                    {
                      if (v271)
                      {
                        int v272 = __sfvwrite(v422, (uint64_t)v423);
                        v423[1] = 0;
                        if (v272) {
                          goto LABEL_870;
                        }
                      }
                      else
                      {
                        LODWORD(v423[1]) = 0;
                      }
                    }
                  }
                  switch(v177)
                  {
                    case 0:
                    case 3:
                      uint64_t v273 = *((unsigned __int8 *)&v425 + v267);
                      goto LABEL_645;
                    case 1:
                    case 4:
                      uint64_t v273 = *((unsigned __int16 *)&v425 + v267);
                      goto LABEL_645;
                    case 2:
                    case 5:
                      uint64_t v273 = *(unsigned int *)v266;
LABEL_645:
                      int v274 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v413, v273);
                      goto LABEL_646;
                    case 6:
                      int v274 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v413, *v266);
LABEL_646:
                      int v258 = v274;
                      break;
                    default:
                      break;
                  }
                  v11 += v258;
                  int v275 = v423[1];
                  int v276 = HIDWORD(v423[1]);
                  v277 = &v423[2 * SLODWORD(v423[1]) - 1];
                  v277[3] = v435;
                  v277[4] = v258;
                  int v278 = v276 + v258;
                  HIDWORD(v423[1]) = v276 + v258;
                  LODWORD(v423[1]) = v275 + 1;
                  if (v275 < 7)
                  {
                    if (v278)
                    {
                      int v280 = __sfvwrite(v422, (uint64_t)v423);
                      v423[1] = 0;
                      if (v280) {
                        goto LABEL_870;
                      }
                      goto LABEL_655;
                    }
                  }
                  else if (v278)
                  {
                    int v279 = __sfvwrite(v422, (uint64_t)v423);
                    v423[1] = 0;
                    if (v279) {
                      goto LABEL_870;
                    }
                  }
                  LODWORD(v423[1]) = 0;
LABEL_655:
                  free(v435);
                  ++v267;
                  ++v266;
                  if (v417 == v267) {
                    goto LABEL_768;
                  }
                }
              }
              switch(v177)
              {
                case 0:
                  uint64_t v183 = v162;
                  goto LABEL_734;
                case 1:
                  uint64_t v183 = (unsigned __int16)v162;
                  goto LABEL_734;
                case 2:
                  int v320 = asprintf_l((char **)&v435, a2, v165->__mbstate8, (void)v162);
                  goto LABEL_735;
                case 3:
                  uint64_t v183 = v162;
                  goto LABEL_734;
                case 4:
                  uint64_t v183 = (unsigned __int16)v162;
                  goto LABEL_734;
                case 5:
                  uint64_t v183 = v162;
LABEL_734:
                  int v320 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v183);
                  goto LABEL_735;
                case 6:
                  int v320 = asprintf_l((char **)&v435, a2, v165->__mbstate8, *(float *)&v162);
LABEL_735:
                  int v319 = v320;
                  break;
                default:
                  int v319 = 0;
                  break;
              }
              uint64_t v11 = v403 + v319;
              int v321 = v423[1];
              int v322 = HIDWORD(v423[1]);
              v323 = &v423[2 * SLODWORD(v423[1]) - 1];
              v323[3] = v435;
              v323[4] = v319;
              int v324 = v322 + v319;
              HIDWORD(v423[1]) = v322 + v319;
              LODWORD(v423[1]) = v321 + 1;
              if (v321 < 7)
              {
                if (v324)
                {
                  int v326 = __sfvwrite(v422, (uint64_t)v423);
                  v423[1] = 0;
                  if (v326) {
                    goto LABEL_870;
                  }
                  goto LABEL_744;
                }
              }
              else if (v324)
              {
                int v325 = __sfvwrite(v422, (uint64_t)v423);
                v423[1] = 0;
                if (v325) {
                  goto LABEL_870;
                }
              }
              LODWORD(v423[1]) = 0;
LABEL_744:
              free(v435);
              v327 = (float *)&v425 + 1;
              uint64_t v328 = 1;
              while (1)
              {
                if (v424)
                {
                  int v329 = v423[1];
                  int v330 = HIDWORD(v423[1]);
                  v331 = &v423[2 * SLODWORD(v423[1]) - 1];
                  v331[3] = &v424;
                  v331[4] = 1;
                  int v332 = v330 + 1;
                  HIDWORD(v423[1]) = v332;
                  LODWORD(v423[1]) = v329 + 1;
                  if (v329 >= 7)
                  {
                    if (v332)
                    {
                      int v333 = __sfvwrite(v422, (uint64_t)v423);
                      v423[1] = 0;
                      if (v333) {
                        goto LABEL_870;
                      }
                    }
                    else
                    {
                      LODWORD(v423[1]) = 0;
                    }
                  }
                }
                switch(v177)
                {
                  case 0:
                  case 3:
                    uint64_t v334 = *((unsigned __int8 *)&v425 + v328);
                    goto LABEL_755;
                  case 1:
                  case 4:
                    uint64_t v334 = *((unsigned __int16 *)&v425 + v328);
                    goto LABEL_755;
                  case 2:
                  case 5:
                    uint64_t v334 = *(unsigned int *)v327;
LABEL_755:
                    int v335 = asprintf_l((char **)&v435, a2, v165->__mbstate8, v334);
                    goto LABEL_756;
                  case 6:
                    int v335 = asprintf_l((char **)&v435, a2, v165->__mbstate8, *v327);
LABEL_756:
                    int v319 = v335;
                    break;
                  default:
                    break;
                }
                v11 += v319;
                int v336 = v423[1];
                int v337 = HIDWORD(v423[1]);
                v338 = &v423[2 * SLODWORD(v423[1]) - 1];
                v338[3] = v435;
                v338[4] = v319;
                int v339 = v337 + v319;
                HIDWORD(v423[1]) = v337 + v319;
                LODWORD(v423[1]) = v336 + 1;
                if (v336 < 7)
                {
                  if (v339)
                  {
                    int v341 = __sfvwrite(v422, (uint64_t)v423);
                    v423[1] = 0;
                    if (v341) {
                      goto LABEL_870;
                    }
                    goto LABEL_765;
                  }
                }
                else if (v339)
                {
                  int v340 = __sfvwrite(v422, (uint64_t)v423);
                  v423[1] = 0;
                  if (v340) {
                    goto LABEL_870;
                  }
                }
                LODWORD(v423[1]) = 0;
LABEL_765:
                free(v435);
                ++v328;
                ++v327;
                if (v417 == v328)
                {
LABEL_768:
                  if (v165 != &v443) {
                    free(v165);
                  }
                  ++v404;
                  unsigned int v10 = v402;
                  goto LABEL_5;
                }
              }
            }
            if (v25 != 99)
            {
              if (v25 == 112)
              {
                int v177 = 4;
LABEL_486:
                uint64_t v178 = 8;
                goto LABEL_487;
              }
              v165->__mbstate8[v169++] = 104;
            }
            int v177 = 1;
            goto LABEL_486;
          }
          uint64_t v142 = v24;
          int v143 = v69;
          uint64_t v144 = v69;
          uint64_t v145 = v401;
          if (v144 > v401) {
            uint64_t v145 = v144;
          }
          int v146 = v433;
          if (v433) {
            ++v145;
          }
          if (v421) {
            v145 += 2;
          }
          int v398 = v145;
          if (v22 > v145) {
            uint64_t v145 = v22;
          }
          uint64_t v395 = v145 + v403;
          if (v145 + v403 >= 0x7FFFFFFF)
          {
LABEL_860:
            *__error() = 84;
            goto LABEL_861;
          }
          int v147 = v23 & 0x84;
          if ((v23 & 0x84) == 0)
          {
            int v148 = v22 - v398;
            if ((int)v22 - v398 >= 1)
            {
              int v149 = v423[1];
              int v150 = HIDWORD(v423[1]);
              do
              {
                int v151 = v149;
                if (v148 >= 16) {
                  uint64_t v152 = 16;
                }
                else {
                  uint64_t v152 = v148;
                }
                v153 = &v423[2 * v149 - 1];
                v153[3] = &blanks;
                v153[4] = v152;
                v150 += v152;
                int v149 = v151 + 1;
                HIDWORD(v423[1]) = v150;
                LODWORD(v423[1]) = v151 + 1;
                if (v151 >= 7)
                {
                  if (v150)
                  {
                    int v154 = __sfvwrite(v422, (uint64_t)v423);
                    int v150 = 0;
                    int v149 = 0;
                    v423[1] = 0;
                    if (v154) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v149 = 0;
                    LODWORD(v423[1]) = 0;
                  }
                }
                BOOL v155 = __OFSUB__(v148, v152);
                v148 -= v152;
              }
              while (!((v148 < 0) ^ v155 | (v148 == 0)));
              int v146 = v433;
            }
          }
          if (v146)
          {
            int v156 = v423[1];
            int v157 = HIDWORD(v423[1]);
            v158 = &v423[2 * SLODWORD(v423[1]) - 1];
            v158[3] = &v433;
            v158[4] = 1;
            int v159 = v157 + 1;
            HIDWORD(v423[1]) = v159;
            LODWORD(v423[1]) = v156 + 1;
            if (v156 >= 7)
            {
              if (v159)
              {
                int v160 = __sfvwrite(v422, (uint64_t)v423);
                v423[1] = 0;
                if (v160) {
                  goto LABEL_869;
                }
              }
              else
              {
                LODWORD(v423[1]) = 0;
              }
            }
          }
          if (v421)
          {
            char v420 = 48;
            int v184 = v423[1];
            int v185 = HIDWORD(v423[1]);
            v186 = &v423[2 * SLODWORD(v423[1]) - 1];
            v186[3] = &v420;
            v186[4] = 2;
            int v187 = v185 + 2;
            HIDWORD(v423[1]) = v187;
            LODWORD(v423[1]) = v184 + 1;
            if (v184 >= 7)
            {
              if (v187)
              {
                int v188 = __sfvwrite(v422, (uint64_t)v423);
                v423[1] = 0;
                if (v188) {
                  goto LABEL_869;
                }
              }
              else
              {
                LODWORD(v423[1]) = 0;
              }
            }
          }
          if (v147 == 128)
          {
            int v189 = v22 - v398;
            if ((int)v22 - v398 >= 1)
            {
              int v190 = v423[1];
              int v191 = HIDWORD(v423[1]);
              do
              {
                int v192 = v190;
                if (v189 >= 16) {
                  uint64_t v193 = 16;
                }
                else {
                  uint64_t v193 = v189;
                }
                v194 = &v423[2 * v190 - 1];
                v194[3] = &zeroes;
                v194[4] = v193;
                v191 += v193;
                int v190 = v192 + 1;
                HIDWORD(v423[1]) = v191;
                LODWORD(v423[1]) = v192 + 1;
                if (v192 >= 7)
                {
                  if (v191)
                  {
                    int v195 = __sfvwrite(v422, (uint64_t)v423);
                    int v191 = 0;
                    int v190 = 0;
                    v423[1] = 0;
                    if (v195) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v190 = 0;
                    LODWORD(v423[1]) = 0;
                  }
                }
                BOOL v155 = __OFSUB__(v189, v193);
                v189 -= v193;
              }
              while (!((v189 < 0) ^ v155 | (v189 == 0)));
            }
          }
          if ((v416 & 0x100) != 0)
          {
            if (v399)
            {
              if (v142 > 1 || (v416 & 1) != 0)
              {
                int v217 = v423[1];
                int v218 = HIDWORD(v423[1]);
                v219 = &v423[2 * SLODWORD(v423[1]) - 1];
                v219[3] = __sig;
                v219[4] = 1;
                int v220 = v218 + 1;
                int v221 = v217 + 1;
                HIDWORD(v423[1]) = v220;
                LODWORD(v423[1]) = v217 + 1;
                if (v217 >= 7)
                {
                  if (v220)
                  {
                    int v222 = __sfvwrite(v422, (uint64_t)v423);
                    int v220 = 0;
                    int v221 = 0;
                    v423[1] = 0;
                    if (v222) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v221 = 0;
                  }
                }
                v304 = &v423[2 * v221 - 1];
                v304[3] = v387;
                v304[4] = v392;
                int v305 = v220 + v392;
                int v306 = v221 + 1;
                HIDWORD(v423[1]) = v305;
                LODWORD(v423[1]) = v221 + 1;
                if (v221 >= 7)
                {
                  if (v305)
                  {
                    int v307 = __sfvwrite(v422, (uint64_t)v423);
                    int v305 = 0;
                    int v306 = 0;
                    v423[1] = 0;
                    if (v307) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v306 = 0;
                  }
                }
                int v308 = v142;
                v309 = &v423[2 * v306 - 1];
                v309[3] = __sig + 1;
                v309[4] = v388 - 1;
                int v206 = v305 + v388 - 1;
                int v207 = v306 + 1;
                HIDWORD(v423[1]) = v206;
                LODWORD(v423[1]) = v306 + 1;
                if (v306 < 7)
                {
                  uint64_t v11 = v395;
                }
                else
                {
                  uint64_t v11 = v395;
                  if (v206)
                  {
                    int v310 = __sfvwrite(v422, (uint64_t)v423);
                    int v206 = 0;
                    int v207 = 0;
                    v423[1] = 0;
                    if (v310) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v207 = 0;
                  }
                }
                int v311 = v308 - v388;
                if (v308 - v388 >= 1)
                {
                  do
                  {
                    int v312 = v207;
                    if (v311 >= 16) {
                      uint64_t v313 = 16;
                    }
                    else {
                      uint64_t v313 = v311;
                    }
                    v314 = &v423[2 * v207 - 1];
                    v314[3] = &zeroes;
                    v314[4] = v313;
                    v206 += v313;
                    int v207 = v312 + 1;
                    HIDWORD(v423[1]) = v206;
                    LODWORD(v423[1]) = v312 + 1;
                    if (v312 >= 7)
                    {
                      if (v206)
                      {
                        int v315 = __sfvwrite(v422, (uint64_t)v423);
                        int v206 = 0;
                        int v207 = 0;
                        v423[1] = 0;
                        if (v315) {
                          goto LABEL_869;
                        }
                      }
                      else
                      {
                        int v207 = 0;
                        LODWORD(v423[1]) = 0;
                      }
                    }
                    BOOL v155 = __OFSUB__(v311, v313);
                    v311 -= v313;
                  }
                  while (!((v311 < 0) ^ v155 | (v311 == 0)));
                }
              }
              else
              {
                int v203 = v423[1];
                int v204 = HIDWORD(v423[1]);
                v205 = &v423[2 * SLODWORD(v423[1]) - 1];
                v205[3] = __sig;
                v205[4] = 1;
                int v206 = v204 + 1;
                int v207 = v203 + 1;
                HIDWORD(v423[1]) = v206;
                LODWORD(v423[1]) = v203 + 1;
                if (v203 < 7)
                {
                  uint64_t v11 = v395;
                }
                else
                {
                  uint64_t v11 = v395;
                  if (v206)
                  {
                    int v208 = __sfvwrite(v422, (uint64_t)v423);
                    int v206 = 0;
                    int v207 = 0;
                    v423[1] = 0;
                    if (v208) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v207 = 0;
                  }
                }
              }
              v316 = &v423[2 * v207 - 1];
              v316[3] = v440;
              v316[4] = v390;
              int v317 = v206 + v390;
              HIDWORD(v423[1]) = v317;
              LODWORD(v423[1]) = v207 + 1;
              if (v207 < 7) {
                goto LABEL_843;
              }
              if (v317)
              {
LABEL_726:
                int v318 = __sfvwrite(v422, (uint64_t)v423);
                v423[1] = 0;
                if (v318) {
                  goto LABEL_869;
                }
                goto LABEL_843;
              }
              goto LABEL_547;
            }
            int v209 = v427;
            uint64_t v210 = v142;
            if (v427 > 0)
            {
              if ((void)v431)
              {
                v211 = __sig;
                int v212 = grouping_print((uint64_t)&v430, (uint64_t)&v422, (uint64_t)__sig, (unint64_t)v426);
                uint64_t v11 = v395;
                if (v212 < 0) {
                  goto LABEL_869;
                }
              }
              else
              {
                if ((int)v426 - (int)__sig >= v427) {
                  uint64_t v252 = v427;
                }
                else {
                  uint64_t v252 = (v426 - __sig);
                }
                uint64_t v11 = v395;
                if ((int)v252 < 1)
                {
                  LODWORD(v252) = 0;
                }
                else
                {
                  int v253 = v423[1];
                  int v254 = HIDWORD(v423[1]);
                  v255 = &v423[2 * SLODWORD(v423[1]) - 1];
                  v255[3] = __sig;
                  v255[4] = v252;
                  int v256 = v254 + v252;
                  HIDWORD(v423[1]) = v256;
                  LODWORD(v423[1]) = v253 + 1;
                  if (v253 >= 7)
                  {
                    if (v256)
                    {
                      int v257 = __sfvwrite(v422, (uint64_t)v423);
                      v423[1] = 0;
                      if (v257) {
                        goto LABEL_869;
                      }
                    }
                    else
                    {
                      LODWORD(v423[1]) = 0;
                    }
                  }
                }
                int v350 = v209 - v252;
                if (v350 >= 1)
                {
                  int v351 = v423[1];
                  int v352 = HIDWORD(v423[1]);
                  do
                  {
                    int v353 = v351;
                    if (v350 >= 16) {
                      uint64_t v354 = 16;
                    }
                    else {
                      uint64_t v354 = v350;
                    }
                    v355 = &v423[2 * v351 - 1];
                    v355[3] = &zeroes;
                    v355[4] = v354;
                    v352 += v354;
                    int v351 = v353 + 1;
                    HIDWORD(v423[1]) = v352;
                    LODWORD(v423[1]) = v353 + 1;
                    if (v353 >= 7)
                    {
                      if (v352)
                      {
                        int v356 = __sfvwrite(v422, (uint64_t)v423);
                        int v352 = 0;
                        int v351 = 0;
                        v423[1] = 0;
                        if (v356) {
                          goto LABEL_869;
                        }
                      }
                      else
                      {
                        int v351 = 0;
                        LODWORD(v423[1]) = 0;
                      }
                    }
                    BOOL v155 = __OFSUB__(v350, v354);
                    v350 -= v354;
                  }
                  while (!((v350 < 0) ^ v155 | (v350 == 0)));
                }
                int v212 = v427;
                v211 = __sig;
              }
              __sig = &v211[v212];
              if (v210 || (v416 & 1) != 0)
              {
                int v357 = v423[1];
                int v358 = HIDWORD(v423[1]);
                v359 = &v423[2 * SLODWORD(v423[1]) - 1];
                v359[3] = v387;
                v359[4] = v392;
                int v360 = v358 + v392;
                HIDWORD(v423[1]) = v360;
                LODWORD(v423[1]) = v357 + 1;
                if (v357 >= 7)
                {
                  if (v360)
                  {
                    int v361 = __sfvwrite(v422, (uint64_t)v423);
                    v423[1] = 0;
                    if (v361) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    LODWORD(v423[1]) = 0;
                  }
                }
              }
              else
              {
                LODWORD(v210) = 0;
              }
              goto LABEL_821;
            }
            int v223 = v423[1];
            int v224 = HIDWORD(v423[1]);
            v225 = &v423[2 * SLODWORD(v423[1]) - 1];
            v225[3] = &zeroes;
            v225[4] = 1;
            int v226 = v224 + 1;
            int v227 = v223 + 1;
            HIDWORD(v423[1]) = v226;
            LODWORD(v423[1]) = v223 + 1;
            if (v223 >= 7)
            {
              if (v226)
              {
                int v228 = __sfvwrite(v422, (uint64_t)v423);
                int v226 = 0;
                int v227 = 0;
                v423[1] = 0;
                uint64_t v11 = v395;
                if (v228) {
                  goto LABEL_869;
                }
                goto LABEL_777;
              }
              int v227 = 0;
              LODWORD(v423[1]) = 0;
            }
            uint64_t v11 = v395;
LABEL_777:
            if (v210 || (v416 & 1) != 0)
            {
              v342 = &v423[2 * v227 - 1];
              v342[3] = v387;
              v342[4] = v392;
              v226 += v392;
              HIDWORD(v423[1]) = v226;
              LODWORD(v423[1]) = v227 + 1;
              if (v227 < 7)
              {
                ++v227;
              }
              else if (v226)
              {
                int v343 = __sfvwrite(v422, (uint64_t)v423);
                int v226 = 0;
                int v227 = 0;
                v423[1] = 0;
                if (v343) {
                  goto LABEL_869;
                }
              }
              else
              {
                int v227 = 0;
                LODWORD(v423[1]) = 0;
              }
            }
            int v344 = v427;
            if (v427 < 0)
            {
              int v345 = -v427;
              do
              {
                int v346 = v227;
                if (v345 >= 16) {
                  uint64_t v347 = 16;
                }
                else {
                  uint64_t v347 = v345;
                }
                v348 = &v423[2 * v227 - 1];
                v348[3] = &zeroes;
                v348[4] = v347;
                v226 += v347;
                int v227 = v346 + 1;
                HIDWORD(v423[1]) = v226;
                LODWORD(v423[1]) = v346 + 1;
                if (v346 >= 7)
                {
                  if (v226)
                  {
                    int v349 = __sfvwrite(v422, (uint64_t)v423);
                    int v226 = 0;
                    int v227 = 0;
                    v423[1] = 0;
                    if (v349) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v227 = 0;
                    LODWORD(v423[1]) = 0;
                  }
                }
                BOOL v155 = __OFSUB__(v345, v347);
                v345 -= v347;
              }
              while (!((v345 < 0) ^ v155 | (v345 == 0)));
              int v344 = v427;
            }
            LODWORD(v210) = v210 + v344;
LABEL_821:
            if ((int)v426 - (int)__sig >= (int)v210) {
              uint64_t v362 = v210;
            }
            else {
              uint64_t v362 = (v426 - __sig);
            }
            if ((int)v362 < 1)
            {
              LODWORD(v362) = 0;
            }
            else
            {
              int v363 = v423[1];
              int v364 = HIDWORD(v423[1]);
              v365 = &v423[2 * SLODWORD(v423[1]) - 1];
              v365[3] = __sig;
              v365[4] = v362;
              int v366 = v364 + v362;
              HIDWORD(v423[1]) = v366;
              LODWORD(v423[1]) = v363 + 1;
              if (v363 >= 7)
              {
                if (v366)
                {
                  int v367 = __sfvwrite(v422, (uint64_t)v423);
                  v423[1] = 0;
                  if (v367) {
                    goto LABEL_869;
                  }
                }
                else
                {
                  LODWORD(v423[1]) = 0;
                }
              }
            }
            int v368 = v210 - v362;
            if (v368 >= 1)
            {
              int v369 = v423[1];
              int v370 = HIDWORD(v423[1]);
              do
              {
                int v371 = v369;
                if (v368 >= 16) {
                  uint64_t v372 = 16;
                }
                else {
                  uint64_t v372 = v368;
                }
                v373 = &v423[2 * v369 - 1];
                v373[3] = &zeroes;
                v373[4] = v372;
                v370 += v372;
                int v369 = v371 + 1;
                HIDWORD(v423[1]) = v370;
                LODWORD(v423[1]) = v371 + 1;
                if (v371 >= 7)
                {
                  if (v370)
                  {
                    int v374 = __sfvwrite(v422, (uint64_t)v423);
                    int v370 = 0;
                    int v369 = 0;
                    v423[1] = 0;
                    if (v374) {
                      goto LABEL_869;
                    }
                  }
                  else
                  {
                    int v369 = 0;
                    LODWORD(v423[1]) = 0;
                  }
                }
                BOOL v155 = __OFSUB__(v368, v372);
                v368 -= v372;
              }
              while (!((v368 < 0) ^ v155 | (v368 == 0)));
            }
            goto LABEL_843;
          }
          int v196 = v143 - v401;
          uint64_t v11 = v395;
          if (v143 - (int)v401 >= 1)
          {
            int v197 = v423[1];
            int v198 = HIDWORD(v423[1]);
            do
            {
              int v199 = v197;
              if (v196 >= 16) {
                uint64_t v200 = 16;
              }
              else {
                uint64_t v200 = v196;
              }
              v201 = &v423[2 * v197 - 1];
              v201[3] = &zeroes;
              v201[4] = v200;
              v198 += v200;
              int v197 = v199 + 1;
              HIDWORD(v423[1]) = v198;
              LODWORD(v423[1]) = v199 + 1;
              if (v199 >= 7)
              {
                if (v198)
                {
                  int v202 = __sfvwrite(v422, (uint64_t)v423);
                  int v198 = 0;
                  int v197 = 0;
                  v423[1] = 0;
                  if (v202) {
                    goto LABEL_869;
                  }
                }
                else
                {
                  int v197 = 0;
                  LODWORD(v423[1]) = 0;
                }
              }
              BOOL v155 = __OFSUB__(v196, v200);
              v196 -= v200;
            }
            while (!((v196 < 0) ^ v155 | (v196 == 0)));
          }
          if ((void)v431)
          {
            if ((grouping_print((uint64_t)&v430, (uint64_t)&v422, (uint64_t)__sig, (unint64_t)v440) & 0x80000000) != 0) {
              goto LABEL_869;
            }
            goto LABEL_843;
          }
          int v213 = v423[1];
          int v214 = HIDWORD(v423[1]);
          v215 = &v423[2 * SLODWORD(v423[1]) - 1];
          v215[3] = __sig;
          v215[4] = (int)v401;
          int v216 = v214 + v401;
          HIDWORD(v423[1]) = v216;
          LODWORD(v423[1]) = v213 + 1;
          if (v213 >= 7)
          {
            if (v216) {
              goto LABEL_726;
            }
LABEL_547:
            LODWORD(v423[1]) = 0;
          }
LABEL_843:
          unsigned int v10 = v402;
          if ((v416 & 4) != 0)
          {
            int v375 = v22 - v398;
            if ((int)v22 - v398 >= 1)
            {
              int v376 = v423[1];
              int v377 = HIDWORD(v423[1]);
              do
              {
                int v378 = v376;
                if (v375 >= 16) {
                  uint64_t v379 = 16;
                }
                else {
                  uint64_t v379 = v375;
                }
                v380 = &v423[2 * v376 - 1];
                v380[3] = &blanks;
                v380[4] = v379;
                v377 += v379;
                int v376 = v378 + 1;
                HIDWORD(v423[1]) = v377;
                LODWORD(v423[1]) = v378 + 1;
                if (v378 >= 7)
                {
                  if (v377)
                  {
                    int v381 = __sfvwrite(v422, (uint64_t)v423);
                    int v377 = 0;
                    int v376 = 0;
                    v423[1] = 0;
                    if (v381) {
                      goto LABEL_865;
                    }
                  }
                  else
                  {
                    int v376 = 0;
                    LODWORD(v423[1]) = 0;
                  }
                }
                BOOL v155 = __OFSUB__(v375, v379);
                v375 -= v379;
              }
              while (!((v375 < 0) ^ v155 | (v375 == 0)));
            }
          }
          if (HIDWORD(v423[1]))
          {
            int v382 = __sfvwrite(v422, (uint64_t)v423);
            v423[1] = 0;
            if (v382) {
              goto LABEL_871;
            }
          }
          else
          {
            LODWORD(v423[1]) = 0;
          }
          goto LABEL_5;
        }
        free(v101);
LABEL_867:
        unsigned int v10 = 0;
        *(_WORD *)(a1 + 16) |= 0x40u;
LABEL_865:
        uint64_t v11 = v403;
LABEL_871:
        if (v400) {
          __freedtoa((uint64_t)v400);
        }
        free(v10);
        __int16 v383 = *(_WORD *)(a1 + 16);
        if (v419 && v419 != v437) {
          free(v419);
        }
        if ((v383 & 0x40) != 0) {
          unint64_t v384 = -1;
        }
        else {
          unint64_t v384 = v11;
        }
        if (v384 > 0x7FFFFFFE) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v384;
        }
      case 't':
        uint64_t v23 = v23 | 0x800;
        continue;
      case 'u':
LABEL_166:
        if ((v23 & 0x4000) != 0) {
          goto LABEL_189;
        }
        uint64_t v72 = v24;
        if ((v23 & 0x1C20) != 0)
        {
          if (v419)
          {
            unint64_t v73 = *((void *)v419 + 2 * v404);
          }
          else
          {
            uint64_t v93 = (unint64_t *)v434;
            v434 += 2;
            unint64_t v73 = *v93;
          }
          size_t v8 = 10;
        }
        else
        {
          if ((v23 & 0x10) != 0)
          {
            if (v419)
            {
              unint64_t v86 = *((void *)v419 + 2 * v404);
            }
            else
            {
              v135 = (unint64_t *)v434;
              v434 += 2;
              unint64_t v86 = *v135;
            }
          }
          else if ((v23 & 0x40) != 0)
          {
            if (v419)
            {
              LOWORD(v86) = *((_WORD *)v419 + 8 * v404);
            }
            else
            {
              unint64_t v86 = (unint64_t)v434;
              v434 += 2;
              LODWORD(v86) = *(_DWORD *)v86;
            }
            unint64_t v86 = (unsigned __int16)v86;
          }
          else if ((v23 & 0x2000) != 0)
          {
            if (v419)
            {
              LOBYTE(v86) = *((unsigned char *)v419 + 16 * v404);
            }
            else
            {
              unint64_t v86 = (unint64_t)v434;
              v434 += 2;
              LODWORD(v86) = *(_DWORD *)v86;
            }
            unint64_t v86 = v86;
          }
          else
          {
            if (v419)
            {
              LODWORD(v86) = *((_DWORD *)v419 + 4 * v404);
            }
            else
            {
              unint64_t v86 = (unint64_t)v434;
              v434 += 2;
              LODWORD(v86) = *(_DWORD *)v86;
            }
            unint64_t v86 = v86;
          }
          unint64_t v391 = v86;
          size_t v8 = 10;
LABEL_394:
          unint64_t v73 = v393;
        }
        goto LABEL_403;
      case 'v':
        uint64_t v23 = v23 | 0x4000;
        continue;
      case 'x':
        unint64_t v75 = &__vfprintf_xdigs_lower;
LABEL_185:
        v394 = v75;
        if ((v23 & 0x4000) != 0)
        {
LABEL_189:
          int v69 = 0;
          goto LABEL_419;
        }
        uint64_t v72 = v24;
        if ((v23 & 0x1C20) != 0)
        {
          if (v419)
          {
            unint64_t v73 = *((void *)v419 + 2 * v404);
          }
          else
          {
            char v94 = (unint64_t *)v434;
            v434 += 2;
            unint64_t v73 = *v94;
          }
        }
        else
        {
          if ((v23 & 0x10) != 0)
          {
            if (v419)
            {
              unint64_t v88 = *((void *)v419 + 2 * v404);
            }
            else
            {
              v136 = (unint64_t *)v434;
              v434 += 2;
              unint64_t v88 = *v136;
            }
          }
          else if ((v23 & 0x40) != 0)
          {
            if (v419)
            {
              LOWORD(v88) = *((_WORD *)v419 + 8 * v404);
            }
            else
            {
              unint64_t v88 = (unint64_t)v434;
              v434 += 2;
              LODWORD(v88) = *(_DWORD *)v88;
            }
            unint64_t v88 = (unsigned __int16)v88;
          }
          else if ((v23 & 0x2000) != 0)
          {
            if (v419)
            {
              LOBYTE(v88) = *((unsigned char *)v419 + 16 * v404);
            }
            else
            {
              unint64_t v88 = (unint64_t)v434;
              v434 += 2;
              LODWORD(v88) = *(_DWORD *)v88;
            }
            unint64_t v88 = v88;
          }
          else
          {
            if (v419)
            {
              LODWORD(v88) = *((_DWORD *)v419 + 4 * v404);
            }
            else
            {
              unint64_t v88 = (unint64_t)v434;
              v434 += 2;
              LODWORD(v88) = *(_DWORD *)v88;
            }
            unint64_t v88 = v88;
          }
          unint64_t v391 = v88;
          unint64_t v73 = v393;
        }
        if ((v23 & 1) == 0) {
          goto LABEL_402;
        }
        if ((v23 & 0x1C20) != 0)
        {
          if (!v73) {
            goto LABEL_402;
          }
LABEL_401:
          char v421 = v25;
          goto LABEL_402;
        }
        if (v391) {
          goto LABEL_401;
        }
LABEL_402:
        LOWORD(v23) = v23 & 0xFDFF;
        size_t v8 = 16;
LABEL_403:
        unsigned __int8 v433 = 0;
LABEL_404:
        if ((int)v72 >= 0) {
          LOWORD(v23) = v23 & 0xFF7F;
        }
        int v137 = v23 & 1;
        unint64_t v393 = v73;
        uint64_t v411 = v72;
        if ((v23 & 0x1C20) != 0)
        {
          if (v73 | v72) {
            goto LABEL_412;
          }
          v138 = v440;
          if (v8 == 8)
          {
            v138 = v440;
            if (v23)
            {
              __int16 v139 = v23;
              int v137 = 1;
              unint64_t v73 = v393;
LABEL_413:
              v138 = __ultoa(v73, v440, v8, v137, (uint64_t)v394);
              LOWORD(v23) = v139;
            }
          }
        }
        else
        {
          unint64_t v73 = v391;
          if (v391 | v72)
          {
LABEL_412:
            __int16 v139 = v23;
            goto LABEL_413;
          }
          v138 = v440;
          if (v8 == 8)
          {
            v138 = v440;
            if (v23)
            {
              __int16 v139 = v23;
              int v137 = 1;
              unint64_t v73 = v391;
              goto LABEL_413;
            }
          }
        }
        uint64_t v401 = v440 - v138;
        if (v440 - v138 >= 33) {
          abort_report_np((uint64_t)"%s:%s:%u: size (%zd) > BUF (%d)");
        }
        ++v404;
        __sig = v138;
        if ((v23 & 0x200) != 0 && v401)
        {
          __int16 v140 = v23;
          int v141 = grouping_init((uint64_t)&v430, v401, a2);
          LOWORD(v23) = v140;
          v401 += v141;
        }
        uint64_t v24 = v411;
        int v69 = v411;
        goto LABEL_419;
      case 'z':
        uint64_t v23 = v23 | 0x400;
        continue;
      default:
        if (!v25) {
          goto LABEL_862;
        }
        int v69 = 0;
        v438[0] = v25;
        unsigned __int8 v433 = 0;
        __sig = v438;
        uint64_t v77 = 1;
        goto LABEL_311;
    }
  }
}

uint64_t __sfvwrite(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 12)) {
    return 0;
  }
  __int16 v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 8) != 0 && ((*(_WORD *)(a1 + 16) & 0x200) != 0 || *(void *)(a1 + 24))) {
    goto LABEL_7;
  }
  if (!__swsetup(a1))
  {
    __int16 v4 = *(_WORD *)(a1 + 16);
LABEL_7:
    uint64_t v6 = **(char ***)a2;
    unint64_t v5 = *(void *)(*(void *)a2 + 8);
    uint64_t v7 = *(void *)a2 + 16;
    if ((v4 & 2) == 0)
    {
      if ((v4 & 1) == 0)
      {
        while (1)
        {
          if (!v5)
          {
            do
            {
              unint64_t v5 = *(void *)(v7 + 8);
              v7 += 16;
            }
            while (!v5);
            uint64_t v6 = *(char **)(v7 - 16);
          }
          int v8 = *(unsigned __int16 *)(a1 + 16);
          int v9 = *(_DWORD *)(a1 + 12);
          if ((~v8 & 0x4200) == 0 && v5 > v9)
          {
            uint64_t v12 = *(void **)(a1 + 24);
            uint64_t v13 = *(void *)a1 - (void)v12;
            *(_DWORD *)(a1 + 12) = v5 + 128;
            *(_DWORD *)(a1 + 32) = v13 + v5 + 128;
            uint64_t v14 = (char *)reallocf(v12, (int)v13 + (int)v5 + 129);
            *(void *)(a1 + 24) = v14;
            if (!v14) {
              goto LABEL_76;
            }
            *(void *)a1 = &v14[v13];
            int v9 = *(_DWORD *)(a1 + 12);
            if ((*(_WORD *)(a1 + 16) & 0x200) != 0)
            {
LABEL_23:
              if (v5 >= v9) {
                uint64_t v15 = v9;
              }
              else {
                uint64_t v15 = v5;
              }
              if ((int)v15 < 1)
              {
                int v9 = v5;
                goto LABEL_38;
              }
              j__mkdtempat_np(*(void *)a1, v6);
              uint64_t v16 = v15;
              goto LABEL_30;
            }
          }
          else if ((v8 & 0x200) != 0)
          {
            goto LABEL_23;
          }
          uint64_t v11 = *(void *)a1;
          if (*(void *)a1 > *(void *)(a1 + 24) && v5 > v9)
          {
            j__mkdtempat_np(v11, v6);
            *(void *)a1 += v9;
            if (__fflush(a1)) {
              goto LABEL_76;
            }
            goto LABEL_38;
          }
          unint64_t v17 = *(int *)(a1 + 32);
          if (v5 < v17)
          {
            uint64_t v16 = (int)v5;
            j__mkdtempat_np(v11, v6);
            LODWORD(v15) = v5;
LABEL_30:
            int v9 = v5;
            *(_DWORD *)(a1 + 12) -= v15;
            *(void *)a1 += v16;
            goto LABEL_38;
          }
          if (v17)
          {
            unint64_t v18 = v5 / v17 * v17;
            if (v18 >= 0x7FFFFFFF) {
              uint64_t v19 = 0x7FFFFFFFLL;
            }
            else {
              uint64_t v19 = v18;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
          int v9 = _swrite(a1, (uint64_t)v6, v19);
          if (v9 < 1) {
            goto LABEL_76;
          }
LABEL_38:
          v6 += v9;
          v5 -= v9;
          int v20 = *(_DWORD *)(a2 + 12) - v9;
          *(_DWORD *)(a2 + 12) = v20;
          if (!v20) {
            return 0;
          }
        }
      }
      int v24 = 0;
      int v25 = 0;
      while (1)
      {
        if (v5)
        {
          if (v24) {
            goto LABEL_58;
          }
        }
        else
        {
          do
          {
            unint64_t v5 = *(void *)(v7 + 8);
            v7 += 16;
          }
          while (!v5);
          uint64_t v6 = *(char **)(v7 - 16);
        }
        uint64_t v26 = j__mkdirx_np(v6, (filesec_t)0xA);
        if (v26) {
          int v25 = v26 - v6 + 1;
        }
        else {
          int v25 = v5 + 1;
        }
LABEL_58:
        if (v5 >= v25) {
          int v27 = v25;
        }
        else {
          int v27 = v5;
        }
        uint64_t v28 = *(int *)(a1 + 32);
        uint64_t v29 = v28 + *(int *)(a1 + 12);
        uint64_t v30 = *(void *)a1;
        if (*(void *)a1 > *(void *)(a1 + 24) && (int)v29 < v27)
        {
          j__mkdtempat_np(v30, v6);
          *(void *)a1 += v29;
          if (__fflush(a1)) {
            goto LABEL_76;
          }
        }
        else if ((int)v28 <= v27)
        {
          LODWORD(v29) = _swrite(a1, (uint64_t)v6, v28);
          if ((int)v29 < 1) {
            goto LABEL_76;
          }
        }
        else
        {
          j__mkdtempat_np(v30, v6);
          *(_DWORD *)(a1 + 12) -= v27;
          *(void *)a1 += v27;
          LODWORD(v29) = v27;
        }
        v25 -= v29;
        if (v25)
        {
          int v24 = 1;
        }
        else
        {
          if (__fflush(a1)) {
            goto LABEL_76;
          }
          int v24 = 0;
        }
        v6 += (int)v29;
        v5 -= (int)v29;
        int v32 = *(_DWORD *)(a2 + 12) - v29;
        *(_DWORD *)(a2 + 12) = v32;
        if (!v32) {
          return 0;
        }
      }
    }
    while (1)
    {
      if (!v5)
      {
        do
        {
          unint64_t v5 = *(void *)(v7 + 8);
          v7 += 16;
        }
        while (!v5);
        uint64_t v6 = *(char **)(v7 - 16);
      }
      uint64_t v21 = v5 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v5;
      int v22 = _swrite(a1, (uint64_t)v6, v21);
      if (v22 < 1) {
        break;
      }
      v6 += v22;
      v5 -= v22;
      int v23 = *(_DWORD *)(a2 + 12) - v22;
      *(_DWORD *)(a2 + 12) = v23;
      if (!v23) {
        return 0;
      }
    }
LABEL_76:
    *(_WORD *)(a1 + 16) |= 0x40u;
  }
  return 0xFFFFFFFFLL;
}

lconv *__cdecl localeconv_l(locale_t a1)
{
  locale_t v1 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1) {
    locale_t v1 = a1;
  }
  if (a1) {
    locale_t v2 = v1;
  }
  else {
    locale_t v2 = (locale_t)&__c_locale;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v2 + 324);
  if (*((unsigned char *)v2 + 1316))
  {
    current_monetary_locale = __get_current_monetary_locale((uint64_t)v2);
    *(_OWORD *)((char *)v2 + 1400) = *(_OWORD *)current_monetary_locale;
    *(_OWORD *)((char *)v2 + 1416) = *((_OWORD *)current_monetary_locale + 1);
    *(_OWORD *)((char *)v2 + 1432) = *((_OWORD *)current_monetary_locale + 2);
    __int16 v4 = current_monetary_locale[7];
    *((void *)v2 + 181) = current_monetary_locale[6];
    *((unsigned char *)v2 + 1456) = *v4;
    unint64_t v5 = current_monetary_locale[9];
    *((unsigned char *)v2 + 1457) = *(unsigned char *)current_monetary_locale[8];
    *((unsigned char *)v2 + 1458) = *v5;
    uint64_t v6 = current_monetary_locale[11];
    *((unsigned char *)v2 + 1459) = *(unsigned char *)current_monetary_locale[10];
    *((unsigned char *)v2 + 1460) = *v6;
    uint64_t v7 = current_monetary_locale[13];
    *((unsigned char *)v2 + 1461) = *(unsigned char *)current_monetary_locale[12];
    *((unsigned char *)v2 + 1462) = *v7;
    int v8 = current_monetary_locale[15];
    *((unsigned char *)v2 + 1463) = *(unsigned char *)current_monetary_locale[14];
    *((unsigned char *)v2 + 1464) = *v8;
    int v9 = current_monetary_locale[17];
    *((unsigned char *)v2 + 1465) = *(unsigned char *)current_monetary_locale[16];
    *((unsigned char *)v2 + 1466) = *v9;
    unsigned int v10 = current_monetary_locale[19];
    *((unsigned char *)v2 + 1467) = *(unsigned char *)current_monetary_locale[18];
    *((unsigned char *)v2 + 1468) = *v10;
    *((unsigned char *)v2 + 1469) = *(unsigned char *)current_monetary_locale[20];
    *((unsigned char *)v2 + 1316) = 0;
  }
  if (*((unsigned char *)v2 + 1317))
  {
    current_numeric_locale = __get_current_numeric_locale((uint64_t)v2);
    long long v12 = *(_OWORD *)current_numeric_locale;
    *((_OWORD *)v2 + 86) = *(_OWORD *)current_numeric_locale;
    *((void *)v2 + 174) = current_numeric_locale[2];
    *((unsigned char *)v2 + 1317) = 0;
    if (!(void)v12) {
      localeconv_l_cold_2();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v2 + 324);
  if (!*((void *)v2 + 172)) {
    localeconv_l_cold_1();
  }
  return (lconv *)((char *)v2 + 1376);
}

unsigned char *__ultoa(unint64_t a1, unsigned char *a2, int a3, int a4, uint64_t a5)
{
  switch(a3)
  {
    case 8:
      uint64_t v6 = a2 - 1;
      do
      {
        int v7 = a1 & 7 | 0x30;
        *v6-- = a1 & 7 | 0x30;
        BOOL v8 = a1 > 7;
        a1 >>= 3;
      }
      while (v8);
      a2 = v6 + 1;
      if (a4 && v7 != 48)
      {
        *uint64_t v6 = 48;
        return v6;
      }
      break;
    case 10:
      if (a1 > 9)
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
          *--a2 = (a1 % 0xA) | 0x30;
          a1 /= 0xAuLL;
        }
        do
        {
          *--a2 = (a1 % 0xA) | 0x30;
          BOOL v5 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }
        while (v5);
      }
      else
      {
        *--a2 = a1 + 48;
      }
      break;
    case 16:
      do
      {
        *--a2 = *(unsigned char *)(a5 + (a1 & 0xF));
        BOOL v5 = a1 >= 0x10;
        a1 >>= 4;
      }
      while (v5);
      break;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: __ultoa: invalid base=%d");
  }
  return a2;
}

_DWORD *__ultoa_0(unint64_t a1, _DWORD *a2, int a3, int a4, uint64_t a5)
{
  switch(a3)
  {
    case 8:
      uint64_t v6 = a2 - 1;
      do
      {
        int v7 = a1 & 7 | 0x30;
        *v6-- = v7;
        BOOL v8 = a1 > 7;
        a1 >>= 3;
      }
      while (v8);
      a2 = v6 + 1;
      if (a4 && v7 != 48)
      {
        *uint64_t v6 = 48;
        return v6;
      }
      break;
    case 10:
      if (a1 > 9)
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
          *--a2 = (a1 % 0xA) | 0x30;
          a1 /= 0xAuLL;
        }
        do
        {
          *--a2 = (a1 % 0xA) | 0x30;
          BOOL v5 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }
        while (v5);
      }
      else
      {
        *--a2 = a1 + 48;
      }
      break;
    case 16:
      do
      {
        *--a2 = *(char *)(a5 + (a1 & 0xF));
        BOOL v5 = a1 >= 0x10;
        a1 >>= 4;
      }
      while (v5);
      break;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: __ultoa: invalid base=%d");
  }
  return a2;
}

void __freedtoa(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 - 4);
  locale_t v1 = (int *)(a1 - 4);
  v1[2] = v2;
  v1[3] = 1 << v2;
  __Bfree_D2A(v1);
}

_DWORD *__nrv_alloc_D2A(unsigned __int8 *a1, void *a2, unsigned int a3)
{
  uint64_t result = __rv_alloc_D2A(a3);
  int v6 = *a1;
  *(unsigned char *)uint64_t result = v6;
  int v7 = result;
  if (v6)
  {
    BOOL v8 = a1 + 1;
    int v7 = result;
    do
    {
      int v9 = *v8++;
      *((unsigned char *)v7 + 1) = v9;
      int v7 = (_DWORD *)((char *)v7 + 1);
    }
    while (v9);
  }
  if (a2) {
    *a2 = v7;
  }
  return result;
}

char **__get_current_numeric_locale(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1314)) {
    return (char **)(*(void *)(a1 + 1344) + 72);
  }
  else {
    return &_C_numeric_locale;
  }
}

_UNKNOWN **__get_current_monetary_locale(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1313)) {
    return (_UNKNOWN **)(*(void *)(a1 + 1336) + 72);
  }
  else {
    return &_C_monetary_locale;
  }
}

uint64_t __swsetup(uint64_t a1)
{
  pthread_once(&__sdidinit, __sinit);
  __int16 v2 = *(_WORD *)(a1 + 16);
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x10) == 0)
    {
      *__error() = 9;
      *(_WORD *)(a1 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }
    if ((v2 & 4) != 0)
    {
      __int16 v4 = *(void **)(a1 + 88);
      if (v4)
      {
        if (v4 != (void *)(a1 + 116))
        {
          free(v4);
          __int16 v2 = *(_WORD *)(a1 + 16);
        }
        *(void *)(a1 + 88) = 0;
      }
      v2 &= 0xFFDBu;
      *(_DWORD *)(a1 + 8) = 0;
      *(void *)a1 = *(void *)(a1 + 24);
    }
    v2 |= 8u;
    *(_WORD *)(a1 + 16) = v2;
  }
  if (!*(void *)(a1 + 24))
  {
    __smakebuf(a1);
    __int16 v2 = *(_WORD *)(a1 + 16);
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 40) = -*(_DWORD *)(a1 + 32);
    return result;
  }
  if (v2) {
    goto LABEL_16;
  }
LABEL_13:
  if ((v2 & 2) != 0) {
    int v5 = 0;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 32);
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

void localeconv_l_cold_1()
{
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  __int16 v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return strncasecmp_l(a1, a2, a3, v5);
}

void uuid_clear(uuid_t uu)
{
  *(void *)uu = 0;
  *((void *)uu + 1) = 0;
}

time_t time(time_t *a1)
{
  v5.time_t tv_sec = 0;
  *(void *)&v5.tv_usec = 0;
  v4.__fpsr = 0;
  v4.__fpcr = 0;
  fegetenv(&v4);
  if (gettimeofday(&v5, 0) < 0) {
    time_t tv_sec = -1;
  }
  else {
    time_t tv_sec = v5.tv_sec;
  }
  if (a1) {
    *a1 = tv_sec;
  }
  fesetenv(&v4);
  return tv_sec;
}

uint64_t _mach_boottime_usec(uint64_t *a1, timeval *a2)
{
  while (1)
  {
    uint64_t v4 = mach_boottime_usec();
    if (!v4) {
      uint64_t v4 = _boottime_fallback_usec();
    }
    __dmb(0xBu);
    uint64_t v5 = gettimeofday(a2, 0);
    if (v5) {
      break;
    }
    __dmb(0xBu);
    uint64_t v6 = mach_boottime_usec();
    if (!v6) {
      uint64_t v6 = _boottime_fallback_usec();
    }
    if (v4 == v6)
    {
      *a1 = v4;
      return v5;
    }
  }
  return v5;
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  switch(__clock_id)
  {
    case _CLOCK_REALTIME:
      v11.ru_utime = 0uLL;
      int result = gettimeofday(&v11.ru_utime, 0);
      unint64_t tv_sec = v11.ru_utime.tv_sec;
      uint64_t v7 = 1000 * v11.ru_utime.tv_usec;
      goto LABEL_15;
    case _CLOCK_MONOTONIC_RAW:
    case _CLOCK_MONOTONIC_RAW_APPROX:
    case _CLOCK_UPTIME_RAW:
    case _CLOCK_UPTIME_RAW_APPROX:
    case _CLOCK_THREAD_CPUTIME_ID:
      __uint64_t v3 = clock_gettime_nsec_np(__clock_id);
      if (!v3) {
        goto LABEL_6;
      }
      __uint64_t v4 = v3;
      int result = 0;
      __tp->unint64_t tv_sec = v4 / 0x3B9ACA00;
      __tp->tv_nsec = v4 % 0x3B9ACA00;
      break;
    case _CLOCK_MONOTONIC:
      v11.ru_utime = 0uLL;
      unint64_t v12 = 0;
      int result = _mach_boottime_usec((uint64_t *)&v12, &v11.ru_utime);
      int v8 = v11.ru_utime.tv_usec + 1000000 * (v12 / 0xF4240) - v12;
      if (v8 < 0) {
        int v9 = v8 + 1000000;
      }
      else {
        int v9 = v11.ru_utime.tv_usec + 1000000 * (v12 / 0xF4240) - v12;
      }
      unint64_t tv_sec = v11.ru_utime.tv_sec - v12 / 0xF4240 + (v8 >> 31);
      LODWORD(v7) = 1000 * v9;
      goto LABEL_14;
    case _CLOCK_PROCESS_CPUTIME_ID:
      memset(&v11, 0, sizeof(v11));
      int result = getrusage(0, &v11);
      unint64_t tv_sec = v11.ru_stime.tv_sec + v11.ru_utime.tv_sec;
      int v10 = v11.ru_stime.tv_usec + v11.ru_utime.tv_usec;
      if (v11.ru_stime.tv_usec + v11.ru_utime.tv_usec > 999999)
      {
        int v10 = v11.ru_stime.tv_usec + v11.ru_utime.tv_usec - 1000000;
        ++tv_sec;
      }
      LODWORD(v7) = 1000 * v10;
LABEL_14:
      uint64_t v7 = (int)v7;
LABEL_15:
      __tp->unint64_t tv_sec = tv_sec;
      __tp->tv_nsec = v7;
      break;
    default:
      *__error() = 22;
LABEL_6:
      int result = -1;
      break;
  }
  return result;
}

int gettimeofday(timeval *a1, void *a2)
{
  __uint64_t v3 = a1;
  if (!a1)
  {
    if (!a2) {
      return 0;
    }
    __uint64_t v3 = (timeval *)v9;
  }
  v9[0] = 0;
  v9[1] = 0;
  if (__commpage_gettimeofday() && (__gettimeofday() & 0x80000000) != 0) {
    return -1;
  }
  if (!a2) {
    return 0;
  }
  if (gettimeofday_validtz == 1)
  {
    int tm_isdst = gettimeofday_cached_tz_1;
    int v5 = gettimeofday_cached_tz_0;
  }
  else
  {
    uint64_t v7 = localtime(&v3->tv_sec);
    int tm_isdst = v7->tm_isdst;
    gettimeofday_cached_tz_1 = tm_isdst;
    unint64_t v8 = ((unsigned __int128)(v7->tm_gmtoff * (__int128)0x7777777777777777) >> 64) - v7->tm_gmtoff;
    int v5 = (v8 >> 5) + (v8 >> 63) + 60 * tm_isdst;
    gettimeofday_cached_tz_0 = v5;
    gettimeofday_validtz = 1;
  }
  int result = 0;
  *(_DWORD *)a2 = v5;
  *((_DWORD *)a2 + 1) = tm_isdst;
  return result;
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  kern_return_t v5;
  uint64_t v6;
  int *v7;
  rusage v8;
  uint64_t v9;

  if (__clock_id == _CLOCK_PROCESS_CPUTIME_ID)
  {
    memset(&v8, 0, sizeof(v8));
    if (getrusage(0, &v8)) {
      return 0;
    }
    else {
      return 1000000000 * (v8.ru_stime.tv_sec + v8.ru_utime.tv_sec)
    }
           + 1000 * (v8.ru_stime.tv_usec + (uint64_t)v8.ru_utime.tv_usec);
  }
  else if (__clock_id == _CLOCK_MONOTONIC)
  {
    v8.ru_utime = 0uLL;
    int v9 = 0;
    int v4 = _mach_boottime_usec(&v9, &v8.ru_utime);
    __uint64_t result = 0;
    if (!v4) {
      return 1000000000 * v8.ru_utime.tv_sec - 1000 * v9 + 1000 * v8.ru_utime.tv_usec;
    }
  }
  else if (__clock_id)
  {
    v8.ru_utime.unint64_t tv_sec = 0;
    int v5 = mach_timebase_info((mach_timebase_info_t)&v8);
    __uint64_t result = 0;
    if (!v5)
    {
      switch(__clock_id)
      {
        case _CLOCK_MONOTONIC_RAW:
          uint64_t v6 = mach_continuous_time();
          goto LABEL_20;
        case _CLOCK_MONOTONIC_RAW_APPROX:
          uint64_t v6 = mach_continuous_approximate_time();
          goto LABEL_20;
        case _CLOCK_MONOTONIC:
        case _CLOCK_MONOTONIC_RAW_APPROX|0x2:
          goto LABEL_16;
        case _CLOCK_UPTIME_RAW:
          uint64_t v6 = mach_absolute_time();
          goto LABEL_20;
        case _CLOCK_UPTIME_RAW_APPROX:
          uint64_t v6 = mach_approximate_time();
          goto LABEL_20;
        default:
          if (__clock_id == _CLOCK_THREAD_CPUTIME_ID)
          {
            uint64_t v6 = __thread_selfusage();
LABEL_20:
            __uint64_t result = v6 * LODWORD(v8.ru_utime.tv_sec) / HIDWORD(v8.ru_utime.tv_sec);
          }
          else
          {
LABEL_16:
            uint64_t v7 = __error();
            __uint64_t result = 0;
            *uint64_t v7 = 22;
          }
          break;
      }
    }
  }
  else
  {
    v8.ru_utime = 0uLL;
    int v2 = gettimeofday(&v8.ru_utime, 0);
    __uint64_t result = 0;
    if (!v2) {
      return 1000000000 * v8.ru_utime.tv_sec + 1000 * v8.ru_utime.tv_usec;
    }
  }
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return strtoll_l(__str, __endptr, __base, v5);
}

uint64_t __memset_chk(char *a1, int a2, unint64_t a3, unint64_t a4)
{
  if (a4 < a3) {
    __chk_fail_overflow();
  }
  return j__mkostemps(a1, a2, a3);
}

uint64_t atol(const char *a1)
{
  uint64_t v1 = __locale_key;
  int v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtol_l(a1, 0, 10, v3);
}

const char *getprogname(void)
{
  return *_NSGetProgname();
}

char **_NSGetProgname(void)
{
  return (char **)__progname_pointer;
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return _vasprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (void **)a1);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2 = 0;
  do
  {
    if (v2 <= 0xA && ((1 << v2) & 0x550) != 0) {
      *out++ = 45;
    }
    *out = a0123456789abcd_0[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd_0[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }
  while (v2 != 16);
  *out = 0;
}

char *__cdecl mkdtemp(char *a1)
{
  if (find_temp_path(4294967294, a1, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkdtemp_action, 0, 0))return a1; {
  else
  }
    return 0;
}

int mkstemps(char *a1, int a2)
{
  int v3 = 0;
  if (find_temp_path(4294967294, a1, *(size_t *)&a2, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, 0, (uint64_t)&v3))return v3; {
  else
  }
    return -1;
}

int mkstemp(char *a1)
{
  int v2 = 0;
  if (find_temp_path(4294967294, a1, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, 0, (uint64_t)&v2))return v2; {
  else
  }
    return -1;
}

void *rb_tree_removal_rebalance(void *result, unint64_t a2, unsigned int a3)
{
  int v5 = result;
  while (1)
  {
    uint64_t v6 = *(void *)(a2 + 8 * a3);
    if (v6)
    {
      if (*(unsigned char *)(v6 + 16)) {
        return result;
      }
    }
    uint64_t v7 = a3 ^ 1;
    __uint64_t result = *(void **)(a2 + 8 * v7);
    uint64_t v8 = *(void *)(a2 + 16);
    if (v8)
    {
      unint64_t v12 = (void **)(a2 + 8 * v7);
      goto LABEL_15;
    }
    if (*result && (*(unsigned char *)(*result + 16) & 1) != 0 || (uint64_t v9 = result[1]) != 0 && (*(unsigned char *)(v9 + 16) & 1) != 0)
    {
      unint64_t v12 = (void **)(a2 + 8 * v7);
      goto LABEL_23;
    }
    uint64_t v10 = result[2];
    if (v10)
    {
      unint64_t v12 = (void **)(a2 + 8 * v7);
      rb_tree_reparent_nodes(a2, a3 ^ 1);
      __uint64_t result = *v12;
      uint64_t v8 = *(void *)(a2 + 16);
      if ((v8 & 1) == 0)
      {
LABEL_23:
        uint64_t v14 = result[v7];
        if (!v14 || (uint64_t v15 = *(void *)(v14 + 16), (v15 & 1) == 0))
        {
          rb_tree_reparent_nodes((uint64_t)result, a3);
          uint64_t v14 = (*v12)[v7];
          uint64_t v15 = *(void *)(v14 + 16);
        }
        *(void *)(v14 + 16) = v15 & 0xFFFFFFFFFFFFFFFELL;
        return (void *)rb_tree_reparent_nodes(a2, a3 ^ 1);
      }
LABEL_15:
      if ((!result || (result[2] & 1) == 0) && (!*result || (*(unsigned char *)(*result + 16) & 1) == 0))
      {
        uint64_t v13 = result[1];
        if (!v13 || (*(unsigned char *)(v13 + 16) & 1) == 0)
        {
          *(void *)(a2 + 16) = v8 & 0xFFFFFFFFFFFFFFFELL;
          result[2] |= 1uLL;
          return result;
        }
      }
      goto LABEL_23;
    }
    result[2] = v10 | 1;
    if (*v5 == a2) {
      return result;
    }
    uint64_t v11 = *(void *)(a2 + 16);
    a3 = (v11 >> 1) & 1;
    a2 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  }
}

void *__cdecl rb_tree_insert_node(rb_tree_t *a1, void *a2)
{
  int v2 = a2;
  uint64_t v4 = (rb_tree_t *)a1->opaque[0];
  int v5 = a1->opaque[1];
  uint64_t v6 = (unint64_t *)((char *)a2 + v5[2]);
  if (a1->opaque[0])
  {
    uint64_t v7 = (uint64_t (*)(void, char *, void *))*v5;
    do
    {
      uint64_t v8 = v4;
      uint64_t v9 = (char *)v4 - v5[2];
      unsigned int v10 = v7(v5[3], v9, v2);
      if (!v10) {
        return v9;
      }
      unsigned int v11 = v10 >> 31;
      uint64_t v4 = (rb_tree_t *)v8->opaque[v10 >> 31];
    }
    while (v4);
    unint64_t v12 = v6 + 2;
    unint64_t v13 = (unint64_t)v8 & 0xFFFFFFFFFFFFFFFDLL;
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    uint64_t v14 = 2;
  }
  else
  {
    unsigned int v11 = 0;
    unint64_t v12 = v6 + 2;
    unint64_t v13 = (unint64_t)a1 & 0xFFFFFFFFFFFFFFFDLL;
    uint64_t v8 = a1;
LABEL_8:
    uint64_t v14 = 0;
  }
  unint64_t v15 = v14 | v13;
  if (v8 == a1)
  {
    int v21 = 0;
    unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v6[2] = v20;
    a1->opaque[2] = v6;
    a1->opaque[3] = v6;
    uint64_t v16 = v11;
  }
  else
  {
    uint64_t v16 = v11;
    unint64_t v17 = &a1->opaque[v11];
    uint64_t v19 = (rb_tree_t *)v17[2];
    unint64_t v18 = (unint64_t **)(v17 + 2);
    if (v8 == v19) {
      *unint64_t v18 = v6;
    }
    unint64_t v20 = v15 | 1;
    *unint64_t v12 = v20;
    int v21 = (uint64_t)v8->opaque[2] & 1;
  }
  *uint64_t v6 = (unint64_t)v8->opaque[v16];
  v6[1] = (unint64_t)v8->opaque[v16];
  v8->opaque[v16] = v6;
  ++a1->opaque[4];
  if (v21)
  {
    unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    int v23 = (void *)((v20 & 0xFFFFFFFFFFFFFFFCLL) + 16);
    unint64_t v24 = *v23 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v25 = *(void *)(v24 + 8);
    unsigned int v26 = v25 == (v20 & 0xFFFFFFFFFFFFFFFCLL);
    BOOL v27 = v25 != (v20 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v28 = *(void *)(v24 + 8 * v27);
    if (v28 && (v31 = *(void *)(v28 + 16), uint64_t v29 = (unint64_t *)(v28 + 16), v30 = v31, (v31 & 1) != 0))
    {
      long long v33 = a1->opaque[0];
      while (1)
      {
        *uint64_t v29 = v30 & 0xFFFFFFFFFFFFFFFELL;
        *v23 &= ~1uLL;
        if (v33 == (void *)v24) {
          break;
        }
        uint64_t v6 = (unint64_t *)v24;
        uint64_t v34 = *(void *)(v24 + 16);
        *(void *)(v24 + 16) = v34 | 1;
        unint64_t v22 = v34 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v34 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
          break;
        }
        int v23 = (void *)(v22 + 16);
        uint64_t v35 = *(void *)(v22 + 16);
        if ((v35 & 1) == 0) {
          break;
        }
        unint64_t v24 = v35 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        unsigned int v26 = v36 == v22;
        BOOL v27 = v36 != v22;
        uint64_t v37 = *(void *)(v24 + 8 * v27);
        if (v37)
        {
          uint64_t v38 = *(void *)(v37 + 16);
          uint64_t v29 = (unint64_t *)(v37 + 16);
          uint64_t v30 = v38;
          if (v38) {
            continue;
          }
        }
        goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      if (v6 == *(unint64_t **)(v22 + 8 * v27)) {
        rb_tree_reparent_nodes(v22, v27);
      }
      rb_tree_reparent_nodes(v24, v26);
      *((void *)a1->opaque[0] + 2) &= ~1uLL;
    }
  }
  return v2;
}

uint64_t rb_tree_reparent_nodes(uint64_t result, unsigned int a2)
{
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void *)(result + 8 * a2);
  *(void *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + 8 * ((v2 >> 1) & 1)) = v3;
  *(void *)(result + 8 * a2) = *(void *)(v3 + 8 * (a2 ^ 1));
  *(void *)(v3 + 8 * (a2 ^ 1)) = result;
  *(void *)(v3 + 16) = v2 & 0xFFFFFFFFFFFFFFFCLL | *(void *)(v3 + 16) & 3;
  uint64_t v4 = *(void *)(result + 16) & 3 | v3;
  *(void *)(result + 16) = v4;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = (v5 ^ v4) & 3;
  *(void *)(v3 + 16) = v6 ^ v5;
  *(void *)(result + 16) = (*(void *)(result + 16) ^ v6) & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 1));
  uint64_t v7 = *(void *)(result + 8 * a2);
  if (v7) {
    *(void *)(v7 + 16) = *(void *)(v7 + 16) & 1 | result & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 0));
  }
  return result;
}

char *__cdecl mktemp(char *a1)
{
  if (find_temp_path(4294967294, a1, 0, 0, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mktemp_action, 0, 0))return a1; {
  else
  }
    return 0;
}

int mkostempsat_np(int dfd, char *path, int slen, int oflags)
{
  int v6 = oflags;
  int v5 = 0;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else if (find_temp_path(*(uint64_t *)&dfd, path, *(size_t *)&slen, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, (uint64_t)&v6, (uint64_t)&v5))
  {
    return v5;
  }
  else
  {
    return -1;
  }
}

int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)
{
  int v4 = 0;
  v5[0] = dpclass;
  v5[1] = dpflags;
  if (find_temp_path(4294967294, path, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkstemp_dprotected_np_action, (uint64_t)v5, (uint64_t)&v4))return v4; {
  else
  }
    return -1;
}

uint32_t arc4random(void)
{
  uint32_t v1 = 0;
  arc4_init();
  (*(void (**)(uint64_t, uint64_t, uint32_t *))rng)(rng, 4, &v1);
  return v1;
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  if (j__strsignal_r((int)in, (char *)uu, v2) != 36) {
    return -1;
  }
  uint64_t v5 = 0;
  do
  {
    if (v5 > 0x24) {
      goto LABEL_11;
    }
    if (((1 << v5) & 0x842100) != 0)
    {
      if (in[v5] != 45) {
        return -1;
      }
      goto LABEL_13;
    }
    if (v5 == 36)
    {
      int v6 = in[v5];
      if (!in[v5]) {
        break;
      }
      if ((v6 & 0x80) != 0) {
        return -1;
      }
    }
    else
    {
LABEL_11:
      int v6 = in[v5];
      if ((v6 & 0x80) != 0) {
        return -1;
      }
    }
    if ((_DefaultRuneLocale.__runetype[v6] & 0x10000) == 0) {
      return -1;
    }
LABEL_13:
    ++v5;
  }
  while (v5 != 37);
  int v13 = strtoul(in, 0, 16);
  __int16 v14 = strtoul(in + 9, 0, 16);
  __int16 v15 = strtoul(in + 14, 0, 16);
  uint64_t v16 = (unsigned __int16)strtoul(in + 19, 0, 16);
  const char *__attribute__((__org_typedef(uuid_string_t))) v7 = in + 24;
  char v12 = 0;
  for (uint64_t i = 10; i != 16; ++i)
  {
    __int16 v9 = *(_WORD *)v7;
    v7 += 2;
    *(_WORD *)__str = v9;
    *((unsigned char *)&v13 + i) = strtoul(__str, 0, 16);
  }
  uuid_pack((uint64_t)&v13, (uint64_t)uu);
  return 0;
}

unint64_t strtoul_l(const char *a1, char **a2, int a3, locale_t a4)
{
  int v6 = (char *)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v7 = (locale_t)&__global_locale;
  }
  else {
    locale_t v7 = a4;
  }
  if (!a4) {
    locale_t v7 = (locale_t)__c_locale;
  }
  if (v7 != (locale_t)-1) {
    int v6 = (char *)v7;
  }
  if (!v7) {
    int v6 = __c_locale;
  }
  uint64_t v8 = a1;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
    unsigned int v11 = &_DefaultRuneLocale;
    if (v10 < 0) {
      unsigned int v11 = *(_RuneLocale **)(*((void *)v6 + 166) + 120);
    }
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    char v13 = *v8++;
    char v12 = v13;
  }
  else
  {
    char v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    BOOL v16 = a3 == 0;
    if (v12 != 48)
    {
      int v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      char v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (unsigned int v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        unsigned int v15 = 16;
        goto LABEL_34;
      }
    }
    BOOL v16 = a3 == 0;
    char v12 = 48;
  }
  int v17 = 8;
LABEL_29:
  if (v16) {
    unsigned int v15 = v17;
  }
  else {
    unsigned int v15 = a3;
  }
  if (v15 - 37 < 0xFFFFFFDD)
  {
    unint64_t v18 = 0;
    goto LABEL_54;
  }
LABEL_34:
  unint64_t v18 = 0;
  int v19 = 0;
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    unsigned __int8 v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u) {
          break;
        }
        unsigned __int8 v21 = v12 - 87;
      }
      else
      {
        unsigned __int8 v21 = v12 - 55;
      }
    }
    if ((int)v15 <= v21) {
      break;
    }
    int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }
      else
      {
        unint64_t v18 = v18 * v15 + v21;
        int v22 = 1;
      }
    }
    char v23 = *v8++;
    char v12 = v23;
    int v19 = v22;
  }
  if (v19 < 0)
  {
    BOOL v27 = __error();
    int v24 = 0;
    int *v27 = 34;
    unint64_t v18 = -1;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    int v24 = 1;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }
  int v24 = 0;
  if (v9 == 45) {
    unint64_t v18 = -(uint64_t)v18;
  }
  if (a2)
  {
LABEL_55:
    uint64_t v25 = (char *)(v8 - 1);
    if (v24) {
      uint64_t v25 = (char *)a1;
    }
    *a2 = v25;
  }
  return v18;
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return strtoul_l(__str, __endptr, __base, v5);
}

void *__cdecl rb_tree_find_node(rb_tree_t *a1, const void *a2)
{
  size_t v2 = a1->opaque[0];
  if (!a1->opaque[0]) {
    return 0;
  }
  int v4 = a1->opaque[1];
  uint64_t v5 = (uint64_t (*)(void, char *, const void *))v4[1];
  while (1)
  {
    int v6 = (char *)v2 - v4[2];
    unsigned int v7 = v5(v4[3], v6, a2);
    if (!v7) {
      break;
    }
    size_t v2 = (void *)v2[v7 >> 31];
    if (!v2) {
      return 0;
    }
  }
  return v6;
}

uint64_t find_temp_path(uint64_t a1, const char *a2, size_t a3, int a4, uint64_t (*a5)(uint64_t, const char *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  memset(&v28, 0, sizeof(v28));
  if ((a3 & 0x80000000) != 0) {
    goto LABEL_8;
  }
  uint64_t v13 = 0;
  while (a2[v13++])
    ;
  if (v13 - 1 >= 1024)
  {
    unsigned int v15 = __error();
    uint64_t result = 0;
    int v17 = 63;
LABEL_9:
    *unsigned int v15 = v17;
    return result;
  }
  unint64_t v18 = &a2[v13 - a3];
  int v19 = (char *)(v18 - 2);
  if (v18 - 2 < a2 || (unint64_t v20 = v18 - 1, j__strncasecmp(v18 - 1, (const char *)0x2F, a3)))
  {
LABEL_8:
    unsigned int v15 = __error();
    uint64_t result = 0;
    int v17 = 22;
    goto LABEL_9;
  }
  do
  {
    if (*v19 != 88) {
      break;
    }
    *v19-- = padchar[arc4random_uniform(0x3Eu)];
  }
  while (v19 >= a2);
  BOOL v27 = v19 + 1;
  j__mkdtempat_np((int)v29, v19 + 1);
  if (v19 <= a2 || !a4)
  {
LABEL_17:
    int v21 = a5(a1, a2, a6, a7);
    if (!v21) {
      return 1;
    }
    if (v21 == 2) {
      return 0;
    }
    if (v20 == v27)
    {
LABEL_27:
      unsigned int v15 = __error();
      uint64_t result = 0;
      int v17 = 17;
    }
    else
    {
      int v22 = v29;
      char v23 = (char *)v27;
      while (1)
      {
        uint64_t v24 = j__mkdirx_np("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", (filesec_t)*v23);
        if (!v24) {
          break;
        }
        if (*(unsigned char *)(v24 + 1)) {
          int v25 = *(unsigned __int8 *)(v24 + 1);
        }
        else {
          int v25 = 48;
        }
        *char v23 = v25;
        if (v25 != *v22) {
          goto LABEL_17;
        }
        ++v23;
        ++v22;
        if (v20 == v23) {
          goto LABEL_27;
        }
      }
      unsigned int v15 = __error();
      uint64_t result = 0;
      int v17 = 5;
    }
    goto LABEL_9;
  }
  while (*v19 != 47)
  {
    if (--v19 <= a2) {
      goto LABEL_17;
    }
  }
  *int v19 = 0;
  int v26 = fstatat(a1, a2, &v28, 0);
  uint64_t result = 0;
  *int v19 = 47;
  if (!v26)
  {
    if ((v28.st_mode & 0xF000) != 0x4000)
    {
      unsigned int v15 = __error();
      uint64_t result = 0;
      int v17 = 20;
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  return result;
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return 0;
}

void uuid_generate_random(uuid_t out)
{
  __buf[0] = 0;
  __buf[1] = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  arc4random_buf(__buf, 0x10uLL);
  uuid_unpack((uint64_t)__buf, (uint64_t)&v2);
  LOWORD(v3) = v3 & 0x3FFF | 0x8000;
  HIWORD(v2) = HIWORD(v2) & 0xFFF | 0x4000;
  uuid_pack((uint64_t)&v2, (uint64_t)out);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uuid_unpack((uint64_t)uu1, (uint64_t)&v10);
  uuid_unpack((uint64_t)uu2, (uint64_t)&v8);
  BOOL v3 = v10 >= v8;
  if (v10 == v8)
  {
    BOOL v3 = WORD2(v10) >= WORD2(v8);
    if (WORD2(v10) == WORD2(v8))
    {
      BOOL v3 = HIWORD(v10) >= HIWORD(v8);
      if (HIWORD(v10) == HIWORD(v8))
      {
        BOOL v3 = (unsigned __int16)v11 >= (unsigned __int16)v9;
        if ((unsigned __int16)v11 == (unsigned __int16)v9)
        {
          unsigned int v4 = bswap32(*(unsigned int *)((char *)&v11 + 2));
          unsigned int v5 = bswap32(*(unsigned int *)((char *)&v9 + 2));
          if (v4 == v5)
          {
            unsigned int v4 = bswap32(HIWORD(v11)) >> 16;
            unsigned int v6 = bswap32(HIWORD(v9));
            if (v4 == HIWORD(v6)) {
              return 0;
            }
            unsigned int v5 = HIWORD(v6);
          }
          BOOL v3 = v4 >= v5;
        }
      }
    }
  }
  if (v3) {
    return 1;
  }
  else {
    return -1;
  }
}

uint64_t uuid_unpack(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)result);
  *(_WORD *)(a2 + 4) = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
  *(_WORD *)(a2 + 6) = bswap32(*(unsigned __int16 *)(result + 6)) >> 16;
  *(_WORD *)(a2 + 8) = bswap32(*(unsigned __int16 *)(result + 8)) >> 16;
  int v2 = *(_DWORD *)(result + 10);
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 14);
  *(_DWORD *)(a2 + 10) = v2;
  return result;
}

uint64_t uuid_pack(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)result);
  *(_WORD *)(a2 + 4) = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
  *(_WORD *)(a2 + 6) = bswap32(*(unsigned __int16 *)(result + 6)) >> 16;
  *(_WORD *)(a2 + 8) = bswap32(*(unsigned __int16 *)(result + 8)) >> 16;
  int v2 = *(_DWORD *)(result + 10);
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 14);
  *(_DWORD *)(a2 + 10) = v2;
  return result;
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  arc4_init();
  int v2 = *(void (**)(void))rng;

  v2();
}

void arc4_init()
{
  if (!rng)
  {
    int v1 = 0;
    rng = ccrng();
    if (!rng) {
      arc4_init_cold_1(&v0, v2);
    }
  }
}

uint64_t _mkstemp_dprotected_np_action(int a1, char *a2, int *a3, int *a4)
{
  if (a1 != -2) {
    _mkstemp_dprotected_np_action_cold_1();
  }
  int v5 = open_dprotected_np(a2, 2562, *a3, a3[1], 384);
  if (v5 < 0)
  {
    if (*__error() == 17) {
      return 1;
    }
    else {
      return 2;
    }
  }
  else
  {
    int v6 = v5;
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t _mkostemps_action(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v5 = openat_NOCANCEL();
  if (v5 < 0)
  {
    if (*__error() == 17) {
      return 1;
    }
    else {
      return 2;
    }
  }
  else
  {
    int v6 = v5;
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t _mktemp_action(int a1, const char *a2)
{
  memset(&v3, 0, sizeof(v3));
  if (fstatat(a1, a2, &v3, 32)) {
    return 2 * (*__error() != 2);
  }
  else {
    return 1;
  }
}

uint64_t _mkdtemp_action(int a1, const char *a2)
{
  uint64_t result = mkdirat(a1, a2, 0x1C0u);
  if (result)
  {
    if (*__error() == 17) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return result;
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CFDF8](*(void *)&a1, a2, a3, *(void *)&a4, 0, 0);
}

unint64_t __strcat_chk(unint64_t a1, char *a2, size_t a3)
{
  uint64_t v6 = j__strsignal_r(a1, a2, a3);
  uint64_t v9 = j__strsignal_r((int)a2, v7, v8) + 1;
  if (v9 + v6 > a3) {
    __chk_fail_overflow();
  }
  if (__chk_assert_no_overlap) {
    __chk_overlap(a1, v9 + v6, (unint64_t)a2, v9);
  }
  j__mkdtempat_np(a1 + v6, a2);
  return a1;
}

char *__stpcpy_chk(char *a1, const char *a2, unint64_t a3)
{
  uint64_t v6 = stpcpy(a1, a2);
  unint64_t v7 = v6 - a1 + 1;
  if (v7 > a3) {
    __chk_fail_overflow();
  }
  size_t v8 = v6;
  if (__chk_assert_no_overlap) {
    __chk_overlap((unint64_t)a1, v7, (unint64_t)a2, v7);
  }
  return v8;
}

unint64_t __strlcpy_chk(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a4 < a3) {
    __chk_fail_overflow();
  }
  unint64_t v7 = MEMORY[0x18C122F90]();
  unint64_t v8 = v7;
  if (v7 < a3) {
    uint64_t v9 = v7 + 1;
  }
  else {
    uint64_t v9 = a3;
  }
  __chk_overlap(a1, v9, a2, v9);
  return v8;
}

char *__strncpy_chk(char *a1, const char *a2, size_t a3, size_t a4)
{
  if (a4 < a3) {
    __chk_fail_overflow();
  }
  unint64_t v7 = stpncpy(a1, a2, a3);
  if (__chk_assert_no_overlap)
  {
    if (v7 - a1 == a3) {
      uint64_t v8 = v7 - a1;
    }
    else {
      uint64_t v8 = v7 - a1 + 1;
    }
    __chk_overlap((unint64_t)a1, v8, (unint64_t)a2, v8);
  }
  return a1;
}

char *__cdecl stpncpy(char *__dst, const char *__src, size_t __n)
{
  unint64_t v6 = MEMORY[0x18C122FD0](__src, __n);
  size_t v7 = __n - v6;
  if (__n <= v6)
  {
    j__mkdtempat_np((int)__dst, (char *)__src);
    return &__dst[__n];
  }
  else
  {
    unint64_t v8 = v6;
    j__mkdtempat_np((int)__dst, (char *)__src);
    uint64_t v9 = &__dst[v8];
    MEMORY[0x18C122530](v9, v7);
  }
  return v9;
}

unint64_t __strcpy_chk(unint64_t a1, const char *a2, unint64_t a3)
{
  unint64_t v6 = &stpcpy((char *)a1, a2)[-a1 + 1];
  if ((unint64_t)v6 > a3) {
    __chk_fail_overflow();
  }
  if (__chk_assert_no_overlap) {
    __chk_overlap(a1, (uint64_t)v6, (unint64_t)a2, (uint64_t)v6);
  }
  return a1;
}

size_t __strlcat_chk(unint64_t a1, char *__sig, size_t a3, size_t a4)
{
  if (a4 < a3) {
    __chk_fail_overflow();
  }
  size_t v7 = j__strsignal_r((int)__sig, __sig, a3);
  uint64_t v8 = MEMORY[0x18C122FD0](a1, a3);
  size_t v9 = a3 - v8;
  if (a3 == v8)
  {
    size_t v10 = a3;
  }
  else
  {
    size_t v10 = v8;
    if (v7 >= v9)
    {
      __chk_overlap(a1, a3, (unint64_t)__sig, v9 - 1);
      j__mkdtempat_np(a1 + v10, __sig);
      *(unsigned char *)(a3 + a1 - 1) = 0;
    }
    else
    {
      __chk_overlap(a1, v7 + 1 + v8, (unint64_t)__sig, v7 + 1);
      j__mkdtempat_np(a1 + v10, __sig);
    }
  }
  return v10 + v7;
}

unint64_t __chk_overlap(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 && a4)
  {
    if (result == a3) {
      goto LABEL_6;
    }
    if (result >= a3)
    {
      if (a3 + a4 > result) {
LABEL_6:
      }
        __chk_fail_overlap();
    }
    else if (result + a2 > a3)
    {
      goto LABEL_6;
    }
  }
  return result;
}

char *__cdecl stpcpy(char *__dst, const char *__src)
{
  uint64_t v5 = j__strsignal_r((int)__src, (char *)__src, v2);
  j__mkdtempat_np((int)__dst, (char *)__src);
  return &__dst[v5];
}

lconv *localeconv(void)
{
  uint64_t v0 = __locale_key;
  int v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1) {
    return localeconv_l(v1);
  }
  else {
    return localeconv_l((locale_t)&__global_locale);
  }
}

size_t mbrtowc(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4 = __locale_key;
  uint64_t v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5) {
    uint64_t v5 = (char *)&__global_locale;
  }
  if (v5 == (char *)-1) {
    unint64_t v6 = (char *)&__global_locale;
  }
  else {
    unint64_t v6 = v5;
  }
  if (!a4) {
    a4 = (mbstate_t *)(v6 + 272);
  }
  return (*(uint64_t (**)(__int32 *, const char *, size_t, mbstate_t *))(*((void *)v6 + 166) + 72))(a1, a2, a3, a4);
}

char *__cdecl strcasestr_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v4 = a3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__c_locale;
  }
  size_t v7 = a2 + 1;
  uint64_t v6 = *(unsigned __int8 *)a2;
  if (!*a2) {
    return (char *)a1;
  }
  if ((v6 & 0x80) != 0) {
    LOBYTE(v8) = ___tolower_l(v6, v5);
  }
  else {
    __darwin_rune_t v8 = _DefaultRuneLocale.__maplower[v6];
  }
  size_t v10 = j__strsignal_r((int)v7, (char *)a2, (size_t)a3);
  while (1)
  {
    size_t v9 = (char *)a1;
    unsigned int v12 = *(unsigned __int8 *)a1++;
    uint64_t v11 = v12;
    if (!v12) {
      break;
    }
    if ((v11 & 0x80) != 0) {
      LOBYTE(v13) = ___tolower_l(v11, v5);
    }
    else {
      __darwin_rune_t v13 = _DefaultRuneLocale.__maplower[v11];
    }
    if (v13 == v8 && !strncasecmp_l(a1, v7, v10, v5)) {
      return v9;
    }
  }
  return 0;
}

int strncasecmp_l(const char *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v4 = a4;
  }
  if (a4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__c_locale;
  }
  if (!a3) {
    return 0;
  }
  size_t v8 = a3 - 1;
  while (1)
  {
    size_t v9 = v8;
    uint64_t v10 = *(unsigned __int8 *)a1;
    __darwin_ct_rune_t v11 = *a1 < 0 ? ___tolower_l(v10, v5) : _DefaultRuneLocale.__maplower[v10];
    uint64_t v12 = *(unsigned __int8 *)a2;
    __darwin_ct_rune_t v13 = *a2 < 0 ? ___tolower_l(v12, v5) : _DefaultRuneLocale.__maplower[v12];
    uint64_t v14 = *(unsigned __int8 *)a1;
    if (v11 != v13) {
      break;
    }
    int result = 0;
    if (*a1)
    {
      ++a1;
      size_t v8 = v9 - 1;
      ++a2;
      if (v9) {
        continue;
      }
    }
    return result;
  }
  if ((v14 & 0x80) != 0) {
    __darwin_ct_rune_t v16 = ___tolower_l(*(unsigned __int8 *)a1, v5);
  }
  else {
    __darwin_ct_rune_t v16 = _DefaultRuneLocale.__maplower[v14];
  }
  uint64_t v17 = *(unsigned __int8 *)a2;
  if (*a2 < 0) {
    __darwin_ct_rune_t v18 = ___tolower_l(v17, v5);
  }
  else {
    __darwin_ct_rune_t v18 = _DefaultRuneLocale.__maplower[v17];
  }
  return v16 - v18;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return strtol_l(__str, __endptr, __base, v5);
}

int putchar(int a1)
{
  size_t v2 = __stdoutp;
  flockfile(__stdoutp);
  int w = v2->_w;
  v2->_int w = w - 1;
  int v4 = a1;
  if (w < 1 && (a1 == 10 || w <= v2->_lbfsize))
  {
    int v4 = __swbuf(a1, v2);
  }
  else
  {
    uint64_t v5 = v2->_p++;
    *uint64_t v5 = a1;
  }
  funlockfile(v2);
  return v4;
}

int fputc(int a1, FILE *a2)
{
  flockfile(a2);
  int w = a2->_w;
  a2->_int w = w - 1;
  int v5 = a1;
  if (w < 1 && (a1 == 10 || w <= a2->_lbfsize))
  {
    int v5 = __swbuf(a1, a2);
  }
  else
  {
    uint64_t v6 = a2->_p++;
    *uint64_t v6 = a1;
  }
  funlockfile(a2);
  return v5;
}

int puts(const char *a1)
{
  if (off_1E911B938) {
    ((void (*)(const char *))off_1E911B938)(a1);
  }
  if (a1) {
    int v4 = a1;
  }
  else {
    int v4 = "(null)";
  }
  uint64_t v12 = v4;
  uint64_t v13 = j__strsignal_r((int)v4, v1, v2);
  uint64_t v14 = "\n";
  uint64_t v15 = 1;
  size_t v9 = &v12;
  int v10 = 2;
  int v11 = v13 + 1;
  flockfile(__stdoutp);
  int v5 = __stdoutp;
  extra = __stdoutp->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  if (__sfvwrite((uint64_t)v5, (uint64_t)&v9)) {
    int v7 = -1;
  }
  else {
    int v7 = 10;
  }
  funlockfile(__stdoutp);
  return v7;
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  if (a2)
  {
    if (a3) {
      __int16 v10 = 16;
    }
    else {
      __int16 v10 = 4;
    }
  }
  else
  {
    if (!a3)
    {
      uint64_t v12 = __error();
      int result = 0;
      *uint64_t v12 = 22;
      return result;
    }
    __int16 v10 = 8;
  }
  int result = (FILE *)__sfp(0);
  if (result)
  {
    result->_flags = v10;
    result->_file = -1;
    result->_seek = a4;
    result->_write = a3;
    result->_close = a5;
    result->_read = a2;
    result->_cookie = (void *)a1;
  }
  return result;
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  if (off_1E911B938) {
    ((void (*)(const char *))off_1E911B938)(a2);
  }
  int v11 = 0;
  if (a1 >= 0x8000)
  {
    int v4 = __error();
    int result = 0;
    int v6 = 24;
LABEL_5:
    *int v4 = v6;
    return result;
  }
  int v7 = __sflags((char *)a2, &v11);
  if (!v7) {
    return 0;
  }
  __int16 v8 = v7;
  int v9 = fcntl_NOCANCEL();
  if (v9 < 0) {
    return 0;
  }
  char v10 = v9;
  if ((v9 & 3) != 2 && (v9 & 3) != (v11 & 3))
  {
    int v4 = __error();
    int result = 0;
    int v6 = 22;
    goto LABEL_5;
  }
  int result = (FILE *)__sfp(1);
  if (result)
  {
    result->_flags = v8;
    if ((v10 & 8) == 0 && (v11 & 8) != 0) {
      result->_flags = v8 | 0x100;
    }
    result->_file = a1;
    result->_read = (int (__cdecl *)(void *, char *, int))__sread;
    result->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    result->_seek = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    result->_cookie = result;
    result->_close = (int (__cdecl *)(void *))__sclose;
  }
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  if (off_1E911B938)
  {
    ((void (*)(const char *))off_1E911B938)(__filename);
    if (off_1E911B938) {
      ((void (*)(const char *))off_1E911B938)(__mode);
    }
  }
  int v8 = 0;
  int v3 = __sflags((char *)__mode, &v8);
  if (!v3) {
    return 0;
  }
  __int16 v4 = v3;
  int v5 = (FILE *)__sfp(1);
  if (!v5) {
    return v5;
  }
  unsigned int v6 = open_NOCANCEL();
  if ((v6 & 0x80000000) != 0)
  {
    __sfprelease((uint64_t)v5);
    return 0;
  }
  if (v6 < 0x8000)
  {
    v5->_file = v6;
    v5->_flags = v4;
    v5->_read = (int (__cdecl *)(void *, char *, int))__sread;
    v5->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    v5->_seek = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    v5->_cookie = v5;
    v5->_close = (int (__cdecl *)(void *))__sclose;
    if ((v8 & 8) != 0) {
      _sseek((uint64_t)v5, 0, 2);
    }
  }
  else
  {
    v5->_flags = 0;
    close_NOCANCEL();
    int v5 = 0;
    *__error() = 24;
  }
  return v5;
}

uint64_t __sfp(int a1)
{
  pthread_once(&__sdidinit, __sinit);
  if (a1)
  {
    uint64_t add_explicit = atomic_fetch_add_explicit(&__scounted, 1uLL, memory_order_relaxed);
    if (add_explicit >= sysconf(26))
    {
      atomic_fetch_add_explicit(&__scounted, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
      int v3 = __error();
      uint64_t v4 = 0;
      int v5 = 24;
      goto LABEL_15;
    }
    if (add_explicit <= -2)
    {
      atomic_fetch_add_explicit(&__scounted, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
      int v3 = __error();
      uint64_t v4 = 0;
      int v5 = 84;
LABEL_15:
      int *v3 = v5;
      return v4;
    }
  }
  pthread_mutex_lock(&filelist_lock);
  unsigned int v6 = &__sglue;
  do
  {
    int v7 = *((_DWORD *)v6 + 2);
    if (v7 >= 1)
    {
      uint64_t v4 = v6[2];
      int v8 = v7 + 1;
      while (*(_WORD *)(v4 + 16))
      {
        v4 += 152;
        if (--v8 <= 1) {
          goto LABEL_10;
        }
      }
      goto LABEL_13;
    }
LABEL_10:
    unsigned int v6 = (uint64_t *)*v6;
  }
  while (v6);
  pthread_mutex_unlock(&filelist_lock);
  int v9 = (uint64_t *)moreglue(1);
  if (v9)
  {
    char v10 = v9;
    pthread_mutex_lock(&filelist_lock);
    *lastglue = (uint64_t)v10;
    lastglue = v10;
    uint64_t v4 = v10[2];
LABEL_13:
    *(_WORD *)(v4 + 16) = 1;
    pthread_mutex_unlock(&filelist_lock);
    *(void *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 32) = 0;
    *(_DWORD *)(v4 + 40) = 0;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(_WORD *)(v4 + 18) = -1;
    *(void *)(v4 + 88) = 0;
    *(_DWORD *)(v4 + 96) = 0;
    *(void *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 128) = 0;
    uint64_t v11 = *(void *)(v4 + 104);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 850045858;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(void *)(v11 + 64) = 0;
    *(unsigned char *)(*(void *)(v4 + 104) + 72) &= 0xF8u;
    uint64_t v12 = *(_OWORD **)(v4 + 104);
    v12[5] = 0u;
    v12[6] = 0u;
    v12[7] = 0u;
    v12[8] = 0u;
    v12[9] = 0u;
    v12[10] = 0u;
    v12[11] = 0u;
    v12[12] = 0u;
    *(unsigned char *)(*(void *)(v4 + 104) + 72) &= ~8u;
    *(unsigned char *)(*(void *)(v4 + 104) + 72) = *(unsigned char *)(*(void *)(v4 + 104) + 72) & 0xF7 | (8 * (a1 != 0));
    return v4;
  }
  uint64_t v4 = 0;
  if (a1) {
    atomic_fetch_add_explicit(&__scounted, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  }
  return v4;
}

uint64_t sysconf(int a1)
{
  v17.uint64_t rlim_cur = 0;
  v17.rlim_max = 0;
  size_t v15 = 0;
  uint64_t v16 = 0;
  int v14 = 0;
  int v1 = "/var/db/timezone/zoneinfo";
  uint64_t rlim_cur = 100;
  switch(a1)
  {
    case 1:
      v18[0] = 1;
      int v3 = 8;
      goto LABEL_27;
    case 2:
      if (getrlimit(7, &v17)) {
        goto LABEL_2;
      }
      uint64_t rlim_cur = v17.rlim_cur;
      if (v17.rlim_cur == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_2;
      }
      if ((v17.rlim_cur & 0x8000000000000000) == 0) {
        return rlim_cur;
      }
      uint64_t v4 = __error();
      int v5 = 84;
LABEL_39:
      *uint64_t v4 = v5;
LABEL_2:
      uint64_t rlim_cur = -1;
      break;
    case 3:
      return rlim_cur;
    case 4:
      v18[0] = 1;
      int v3 = 18;
      goto LABEL_27;
    case 5:
    case 26:
      if (getrlimit(8, &v17)) {
        goto LABEL_2;
      }
      if ((v17.rlim_cur & 0x8000000000000000) != 0) {
        return -1;
      }
      else {
        return v17.rlim_cur;
      }
    case 6:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 32:
    case 38:
    case 47:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 90:
    case 91:
    case 96:
    case 118:
      return 200112;
    case 7:
      *(void *)__darwin_ct_rune_t v18 = 0x1400000001;
      size_t v15 = 4;
      if (sysctl(v18, 2u, &v14, &v15, 0, 0) == -1) {
        goto LABEL_2;
      }
      int v6 = v14;
      BOOL v7 = v14 == 0;
LABEL_33:
      if (v7) {
        return -1;
      }
      return v6;
    case 8:
      v18[0] = 1;
      int v3 = 17;
      goto LABEL_27;
    case 9:
    case 11:
      return 99;
    case 10:
    case 15:
      return 2048;
    case 12:
      return 1000;
    case 13:
      return 2;
    case 14:
    case 120:
    case 130:
      return 32;
    case 16:
    case 72:
    case 73:
      return 255;
    case 21:
    case 28:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 48:
    case 51:
    case 52:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 80:
    case 81:
    case 84:
    case 87:
    case 88:
    case 89:
    case 92:
    case 94:
    case 95:
    case 97:
    case 98:
    case 99:
    case 100:
    case 102:
    case 103:
    case 104:
    case 110:
    case 111:
    case 112:
    case 114:
    case 119:
    case 122:
    case 123:
      goto LABEL_2;
    case 27:
      goto LABEL_44;
    case 29:
      return getpagesize();
    case 42:
    case 43:
      v18[0] = 1;
      int v3 = 46;
      goto LABEL_27;
    case 49:
      size_t v15 = 4;
      int v8 = sysctlbyname("kern.sysv.semmns", &v14, &v15, 0, 0);
      int v6 = v14;
      BOOL v7 = v8 == -1;
      goto LABEL_33;
    case 50:
      return 0x7FFFLL;
    case 56:
      return 1024;
    case 57:
    case 58:
      v18[0] = 6;
      int v3 = 3;
LABEL_27:
      v18[1] = v3;
      size_t v15 = 4;
      if (sysctl(v18, 2u, &v14, &v15, 0, 0) == -1) {
        goto LABEL_2;
      }
      uint64_t rlim_cur = v14;
      break;
    case 69:
    case 70:
    case 71:
      return 4096;
    case 85:
    case 121:
    case 126:
      return 4;
    case 86:
      return 512;
    case 93:
      return 0x4000;
    case 101:
      int v1 = "/";
LABEL_44:
      int v9 = *__error();
      *__error() = 0;
      uint64_t rlim_cur = pathconf(v1, 4);
      if (rlim_cur == -1 && *__error()) {
        goto LABEL_2;
      }
      *__error() = v9;
      break;
    case 105:
    case 106:
    case 108:
    case 109:
    case 115:
    case 124:
    case 125:
      return 1;
    case 107:
      return 0x7FFFFFFFLL;
    case 113:
      int v10 = *__error();
      size_t v15 = 8;
      int v11 = sysctlbyname("kern.sysv.shmmin", &v16, &v15, 0, 0);
      *__error() = v10;
      if (v11 == -1) {
        return -1;
      }
      else {
        return 1;
      }
    case 116:
      return 600;
    case 127:
      return 30;
    case 128:
    case 129:
      return 8;
    case 131:
      return 128;
    case 200:
      *(void *)__darwin_ct_rune_t v18 = 0;
      uint64_t v13 = 0;
      size_t v15 = 8;
      if (sysctlbyname("hw.memsize", v18, &v15, 0, 0) == -1) {
        goto LABEL_2;
      }
      size_t v15 = 8;
      if (sysctlbyname("hw.pagesize", &v13, &v15, 0, 0) == -1) {
        goto LABEL_2;
      }
      uint64_t rlim_cur = *(void *)v18 / v13;
      break;
    default:
      uint64_t v4 = __error();
      int v5 = 22;
      goto LABEL_39;
  }
  return rlim_cur;
}

uint64_t __sflags(char *a1, int *a2)
{
  uint64_t v4 = a1 + 1;
  int v3 = *a1;
  switch(v3)
  {
    case 'a':
      int v5 = 520;
      break;
    case 'r':
      int v6 = 0;
      int v5 = 0;
      uint64_t result = 4;
      goto LABEL_8;
    case 'w':
      int v5 = 1536;
      break;
    default:
      uint64_t v12 = __error();
      uint64_t result = 0;
      *uint64_t v12 = 22;
      return result;
  }
  int v6 = 1;
  uint64_t result = 8;
LABEL_8:
  uint64_t v8 = 1;
  if (a1[1] == 98)
  {
    uint64_t v8 = 2;
    uint64_t v4 = a1 + 2;
  }
  int v9 = a1[v8];
  if (v9 == 43)
  {
    uint64_t v10 = 1;
    if (v4[1] == 98) {
      uint64_t v10 = 2;
    }
    int v9 = v4[v10];
    int v6 = 2;
    uint64_t result = 16;
  }
  if (v9 == 120) {
    int v11 = v5 | 0x800;
  }
  else {
    int v11 = v5;
  }
  *a2 = v11 | v6;
  return result;
}

int getpagesize(void)
{
  int result = getpagesize_value;
  if (!getpagesize_value)
  {
    *(void *)size_t v2 = 0x700000006;
    size_t v1 = 4;
    if (sysctl(v2, 2u, &getpagesize_value, &v1, 0, 0) == -1) {
      return -1;
    }
    else {
      return getpagesize_value;
    }
  }
  return result;
}

_DWORD *moreglue(int a1)
{
  int result = malloc_type_malloc(360 * a1 + 32, 0xA7ED9476uLL);
  if (result)
  {
    unint64_t v3 = (unint64_t)(result + 6);
    *(void *)int result = 0;
    if (((unint64_t)(result + 6) & 7) != 0) {
      unint64_t v3 = ((unint64_t)(result + 6) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    result[2] = a1;
    *((void *)result + 2) = v3;
    if (a1 >= 1)
    {
      unint64_t v4 = v3 + 152 * a1;
      unsigned int v5 = a1 + 1;
      do
      {
        *(void *)(v3 + 144) = 0;
        *(_OWORD *)(v3 + 112) = 0uLL;
        *(_OWORD *)(v3 + 128) = 0uLL;
        *(_OWORD *)(v3 + 80) = 0uLL;
        *(_OWORD *)(v3 + 96) = 0uLL;
        *(_OWORD *)(v3 + 48) = 0uLL;
        *(_OWORD *)(v3 + 64) = 0uLL;
        *(_OWORD *)(v3 + 16) = 0uLL;
        *(_OWORD *)(v3 + 32) = 0uLL;
        *(_OWORD *)unint64_t v3 = 0uLL;
        *(void *)(v3 + 104) = v4;
        *(void *)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 850045858;
        *(void *)(v4 + 64) = 0;
        *(_OWORD *)(v4 + 32) = 0uLL;
        *(_OWORD *)(v4 + 48) = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        *(unsigned char *)(*(void *)(v3 + 104) + 72) &= 0xF8u;
        int v6 = *(_OWORD **)(v3 + 104);
        v6[11] = 0uLL;
        v6[12] = 0uLL;
        v6[9] = 0uLL;
        v6[10] = 0uLL;
        v6[7] = 0uLL;
        v6[8] = 0uLL;
        v6[5] = 0uLL;
        v6[6] = 0uLL;
        *(unsigned char *)(*(void *)(v3 + 104) + 72) &= ~8u;
        --v5;
        v3 += 152;
        v4 += 208;
      }
      while (v5 > 1);
    }
  }
  return result;
}

void rewind(FILE *a1)
{
  int v2 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(a1);
  _fseeko((uint64_t)a1, 0, 0);
  if (!v3) {
    *__error() = v2;
  }
  a1->_flags &= 0xFF9Fu;

  funlockfile(a1);
}

int printf(const char *a1, ...)
{
  va_start(va, a1);
  int v2 = __stdoutp;
  uint64_t v3 = __locale_key;
  unint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (_xlocale *)&__global_locale;
  }
  return vfprintf_l(v2, v5, a1, va);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  unint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (_xlocale *)&__global_locale;
  }
  return vfprintf_l(a1, v5, a2, va);
}

int vfprintf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(a1, 152);
  }
  flockfile(a1);
  int v8 = __xvprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t)a1, (atomic_uint *)a2, (unsigned __int8 *)a3, (__int16 *)a4);
  funlockfile(a1);
  return v8;
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t, va_list))off_1E911B948)(a1, 152, a3);
  }
  flockfile(a1);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v4 = __xvprintf(-1, 0, (int)a1);
  funlockfile(a1);
  return v4;
}

uint64_t __xvprintf(pthread_mutex_t *a1, pthread_rwlock_t *a2, uint64_t a3, atomic_uint *a4, unsigned __int8 *a5, __int16 *a6)
{
  __int16 v7 = *(_WORD *)(a3 + 16);
  if ((v7 & 0x1A) != 0xA || (int v8 = *(__int16 *)(a3 + 18), v8 < 0))
  {
    return __v2printf(a1, a2, a3, a4, a5, a6);
  }
  else
  {
    long long v28 = 0u;
    long long v27 = 0u;
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    long long v20 = 0u;
    long long v19 = 0u;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v25 = v30;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    v30[0] = 0;
    v30[1] = 850045858;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    WORD4(v19) = v7 & 0xFFFD;
    WORD5(v19) = v8;
    *((void *)&v21 + 1) = *(void *)(a3 + 48);
    *((void *)&v23 + 1) = *(void *)(a3 + 80);
    uint64_t v9 = *(void *)(a3 + 104);
    LOBYTE(v35) = *(unsigned char *)(v9 + 72) & 7;
    long long v10 = *(_OWORD *)(v9 + 80);
    long long v11 = *(_OWORD *)(v9 + 96);
    long long v12 = *(_OWORD *)(v9 + 128);
    long long v38 = *(_OWORD *)(v9 + 112);
    long long v39 = v12;
    long long v36 = v10;
    long long v37 = v11;
    long long v13 = *(_OWORD *)(v9 + 144);
    long long v14 = *(_OWORD *)(v9 + 160);
    long long v15 = *(_OWORD *)(v9 + 192);
    long long v42 = *(_OWORD *)(v9 + 176);
    long long v43 = v15;
    long long v40 = v13;
    long long v41 = v14;
    __darwin_ct_rune_t v18 = v29;
    *(void *)&long long v20 = v29;
    DWORD1(v19) = 1024;
    DWORD2(v20) = 1024;
    LODWORD(v21) = 0;
    uint64_t v16 = __v2printf(a1, a2, (uint64_t)&v18, a4, a5, a6);
    if ((v16 & 0x80000000) == 0)
    {
      if (__fflush((uint64_t)&v18)) {
        uint64_t v16 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v16 = v16;
      }
    }
    if ((BYTE8(v19) & 0x40) != 0) {
      *(_WORD *)(a3 + 16) = v7 | 0x40;
    }
    return v16;
  }
}

uint64_t __fflush(uint64_t a1)
{
  if (!a1) {
    return _fwalk((unsigned int (*)(uint64_t))sflush_locked);
  }
  if ((*(_WORD *)(a1 + 16) & 0x18) != 0) {
    return __sflush(a1);
  }
  return 0;
}

int fputs(const char *a1, FILE *a2)
{
  if (off_1E911B938) {
    ((void (*)(const char *))off_1E911B938)(a1);
  }
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(a2, 152);
  }
  if (a1) {
    unsigned int v5 = a1;
  }
  else {
    unsigned int v5 = "(null)";
  }
  long long v10 = v5;
  int v6 = j__strsignal_r((int)v5, (char *)a2, v2);
  uint64_t v11 = v6;
  long long v12 = &v10;
  int v13 = 1;
  int v14 = v6;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  int v8 = __sfvwrite((uint64_t)a2, (uint64_t)&v12);
  funlockfile(a2);
  if (v8) {
    return v8;
  }
  else {
    return v11;
  }
}

int feof(FILE *a1)
{
  flockfile(a1);
  int v2 = ((unsigned __int16)a1->_flags >> 5) & 1;
  funlockfile(a1);
  return v2;
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  uint64_t v3 = *(void *)&__whence;
  int v6 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(__stream);
  _fseeko((uint64_t)__stream, a2, v3);
  int v8 = v7;
  funlockfile(__stream);
  if (!v8) {
    *__error() = v6;
  }
  return v8;
}

int fclose(FILE *a1)
{
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(a1, 152);
  }
  pthread_once(&__sdidinit, __sinit);
  if (!a1)
  {
    int v2 = -1;
    int v3 = 14;
LABEL_22:
    *__error() = v3;
    return v2;
  }
  if (!a1->_flags)
  {
    int v2 = -1;
    int v3 = 9;
    goto LABEL_22;
  }
  flockfile(a1);
  int v2 = __sflush((uint64_t)a1);
  if (v2 < 0) {
    int v3 = *__error();
  }
  else {
    int v3 = 0;
  }
  close = a1->_close;
  if (close && (((uint64_t (*)(void *))close)(a1->_cookie) & 0x80000000) != 0)
  {
    int v3 = *__error();
    int v2 = -1;
  }
  if ((a1->_flags & 0x80) != 0) {
    free(a1->_bf._base);
  }
  base = (FILE *)a1->_ub._base;
  if (base)
  {
    if (base != (FILE *)a1->_ubuf) {
      free(base);
    }
    a1->_ub._base = 0;
  }
  int v6 = a1->_lb._base;
  if (v6)
  {
    free(v6);
    a1->_lb._base = 0;
  }
  a1->_file = -1;
  *(void *)&a1->_r = 0;
  funlockfile(a1);
  __sfprelease((uint64_t)a1);
  if (v3) {
    goto LABEL_22;
  }
  return v2;
}

int fflush(FILE *a1)
{
  if (a1)
  {
    if (off_1E911B948) {
      ((void (*)(FILE *, uint64_t))off_1E911B948)(a1, 152);
    }
    flockfile(a1);
    int v3 = __sflush((uint64_t)a1);
    funlockfile(a1);
    return v3;
  }
  else
  {
    return _fwalk((unsigned int (*)(uint64_t))sflush_locked);
  }
}

uint64_t __sflush(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0;
  }
  __int16 v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 4) != 0)
  {
    if (*(void *)(a1 + 72))
    {
      uint64_t v6 = *(int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        if (_sseek(a1, -v6, 1) == -1)
        {
          if (*__error() == 29) {
            return 0;
          }
          else {
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
          int v7 = *(void **)(a1 + 88);
          if (v7)
          {
            if (v7 != (void *)(a1 + 116)) {
              free(v7);
            }
            *(void *)(a1 + 88) = 0;
          }
          uint64_t result = 0;
          *(void *)a1 = *(void *)(a1 + 24);
          *(_WORD *)(a1 + 16) &= ~0x20u;
          *(_DWORD *)(a1 + 8) = 0;
          uint64_t v9 = *(_OWORD **)(a1 + 104);
          v9[11] = 0u;
          v9[12] = 0u;
          v9[9] = 0u;
          v9[10] = 0u;
          v9[7] = 0u;
          v9[8] = 0u;
          v9[5] = 0u;
          v9[6] = 0u;
        }
        return result;
      }
    }
    return 0;
  }
  if ((v3 & 8) == 0) {
    return 0;
  }
  uint64_t v4 = (*(_DWORD *)a1 - v1);
  *(void *)a1 = v1;
  int v5 = (v3 & 3) != 0 ? 0 : *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 12) = v5;
  if ((int)v4 < 1) {
    return 0;
  }
  while (1)
  {
    int v10 = _swrite(a1, v1, v4);
    if (v10 <= 0) {
      break;
    }
    v1 += v10;
    BOOL v11 = __OFSUB__(v4, v10);
    uint64_t v4 = (v4 - v10);
    if (((int)v4 < 0) ^ v11 | (v4 == 0)) {
      return 0;
    }
  }
  long long v12 = *(char **)a1;
  if (v1 > *(void *)a1)
  {
    j__mkostemp(v12, v1);
    long long v12 = *(char **)a1;
  }
  *(void *)a1 = &v12[v4];
  __int16 v13 = *(_WORD *)(a1 + 16);
  if ((v13 & 2) == 0) {
    *(_DWORD *)(a1 + 12) -= v4;
  }
  *(_WORD *)(a1 + 16) = v13 | 0x40;
  return 0xFFFFFFFFLL;
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  size_t v4 = __nitems * __size;
  if (!(__nitems * __size)) {
    return 0;
  }
  size_t v6 = __nitems;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v14;
  int v17 = 1;
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(__stream, 152);
  }
  flockfile(__stream);
  extra = __stream->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  size_t v10 = v4;
  while (1)
  {
    int v11 = v10 >> 31 ? 2147482624 : v10;
    uint64_t v12 = v11;
    int v14 = __ptr;
    uint64_t v15 = v11;
    int v18 = v11;
    if (off_1E911B930) {
      ((void (*)(const void *, void))off_1E911B930)(__ptr, v11);
    }
    if (__sfvwrite((uint64_t)__stream, (uint64_t)&v16)) {
      break;
    }
    __ptr = (char *)__ptr + v12;
    v10 -= v12;
    if (!v10) {
      goto LABEL_17;
    }
  }
  size_t v6 = (v4 + v12 - (v10 + v18)) / __size;
LABEL_17:
  funlockfile(__stream);
  return v6;
}

int fileno(FILE *a1)
{
  flockfile(a1);
  int file = a1->_file;
  funlockfile(a1);
  return file;
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  if (a2 < 1) {
    return 0;
  }
  int v5 = a1;
  if (off_1E911B948)
  {
    ((void (*)(char *, void))off_1E911B948)(a1, a2);
    if (off_1E911B948) {
      ((void (*)(FILE *, uint64_t))off_1E911B948)(a3, 152);
    }
  }
  flockfile(a3);
  extra = a3->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  int v7 = v5;
  unsigned int v8 = a2 - 1;
  if (a2 == 1) {
    goto LABEL_20;
  }
  int v7 = v5;
  while (1)
  {
    unsigned int r = a3->_r;
    if (r) {
      goto LABEL_12;
    }
    if (__srefill((uint64_t)a3)) {
      break;
    }
    unsigned int r = a3->_r;
LABEL_12:
    p = a3->_p;
    if (r >= v8) {
      signed int v11 = v8;
    }
    else {
      signed int v11 = r;
    }
    uint64_t v12 = v11;
    uint64_t v13 = j__mkdirx_np((const char *)a3->_p, (filesec_t)0xA);
    if (v13)
    {
      uint64_t v14 = v13 + 1 - (void)p;
      a3->_unsigned int r = r - v14;
      a3->_p = (unsigned __int8 *)(v13 + 1);
      j__mkdtempat_np((int)v7, (char *)p);
      v7 += v14;
      goto LABEL_20;
    }
    a3->_unsigned int r = r - v12;
    a3->_p = &p[v12];
    j__mkdtempat_np((int)v7, (char *)p);
    v7 += v12;
    v8 -= v12;
    if (!v8) {
      goto LABEL_20;
    }
  }
  if (v7 != v5)
  {
LABEL_20:
    *int v7 = 0;
    goto LABEL_21;
  }
  int v5 = 0;
LABEL_21:
  funlockfile(a3);
  return v5;
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)&a3;
  int v6 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(a1);
  _fseeko((uint64_t)a1, a2, v3);
  int v8 = v7;
  funlockfile(a1);
  if (!v8) {
    *__error() = v6;
  }
  return v8;
}

off_t ftello(FILE *__stream)
{
  off_t v4 = 0;
  flockfile(__stream);
  int v2 = _ftello((uint64_t)__stream, &v4);
  funlockfile(__stream);
  if (v2) {
    return -1;
  }
  off_t result = v4;
  if (v4 < 0)
  {
    *__error() = 29;
    return -1;
  }
  return result;
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(__stream, 152);
  }
  flockfile(__stream);
  size_t v8 = __fread((uint64_t)__ptr, __size, __nitems, (uint64_t)__stream);
  funlockfile(__stream);
  return v8;
}

void flockfile(FILE *a1)
{
  int v2 = *__error();
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1->_extra + 8));
  *__error() = v2;
}

void funlockfile(FILE *a1)
{
  int v2 = *__error();
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a1->_extra + 8));
  *__error() = v2;
}

unint64_t __fread(uint64_t dfd, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = dfd;
  uint64_t v8 = a3 * a2;
  unint64_t v9 = a3 * a2;
  if (off_1E911B948) {
    ((void (*)(uint64_t, unint64_t))off_1E911B948)(dfd, a3 * a2);
  }
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(void *)(a4 + 104);
  if ((*(unsigned char *)(v10 + 72) & 7) == 0) {
    *(unsigned char *)(v10 + 72) |= 7u;
  }
  uint64_t v26 = v8;
  uint64_t v27 = a3;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0) {
    *(_DWORD *)(a4 + 8) = 0;
  }
  signed int v11 = (long long *)(a4 + 24);
  while (2)
  {
    if (v9 >> 31) {
      int v12 = 2147482624;
    }
    else {
      int v12 = v9;
    }
    int v13 = v12;
    uint64_t v14 = v7;
    while (1)
    {
      uint64_t v15 = *(int *)(a4 + 8);
      if (v13 <= (int)v15) {
        break;
      }
      uint64_t v16 = *(char **)a4;
      j__mkdtempat_np(v14, *(char **)a4);
      *(void *)a4 = &v16[v15];
      v14 += v15;
      v13 -= v15;
      int v17 = __srefill0(a4);
      if (v17 > 0) {
        break;
      }
      if (v17)
      {
LABEL_26:
        if (v13) {
          return (v26 - v9 + v12 - v13) / a2;
        }
        goto LABEL_30;
      }
    }
    if ((*(_WORD *)(a4 + 16) & 0x82) != 0 && v13 > *(_DWORD *)(a4 + 32))
    {
      long long v28 = *v11;
      *(void *)(a4 + 24) = v14;
      *(_DWORD *)(a4 + 32) = v13;
      if (v13 < 1)
      {
LABEL_23:
        *signed int v11 = v28;
        int v21 = (v13 - 1) / *(_DWORD *)(a4 + 32) * *(_DWORD *)(a4 + 32);
        int v22 = v13 - v21;
        j__mkdtempat_np(*(void *)(a4 + 24), (char *)(v14 + v21));
        *(void *)a4 = *(void *)(a4 + 24) + v22;
        *(_DWORD *)(a4 + 8) = 0;
      }
      else
      {
        while (!__srefill1(a4))
        {
          uint64_t v18 = *(int *)(a4 + 8);
          *(void *)(a4 + 24) += v18;
          int v19 = *(_DWORD *)(a4 + 32);
          BOOL v20 = __OFSUB__(v19, v18);
          LODWORD(v18) = v19 - v18;
          *(_DWORD *)(a4 + 32) = v18;
          if (((int)v18 < 0) ^ v20 | (v18 == 0)) {
            goto LABEL_23;
          }
        }
        int v13 = *(_DWORD *)(a4 + 32);
        *signed int v11 = v28;
        *(void *)a4 = *(void *)(a4 + 24);
        if (v13) {
          return (v26 - v9 + v12 - v13) / a2;
        }
      }
    }
    else
    {
      while (1)
      {
        uint64_t v23 = *(int *)(a4 + 8);
        long long v24 = *(char **)a4;
        if (v13 <= (int)v23) {
          break;
        }
        j__mkdtempat_np(v14, v24);
        *(void *)a4 += v23;
        LODWORD(v14) = v14 + v23;
        v13 -= v23;
        if (__srefill1(a4)) {
          goto LABEL_26;
        }
      }
      j__mkdtempat_np(v14, v24);
      *(_DWORD *)(a4 + 8) -= v13;
      *(void *)a4 += v13;
    }
LABEL_30:
    v7 += v12;
    v9 -= v12;
    if (v9) {
      continue;
    }
    return v27;
  }
}

double _fseeko(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v28 = 0;
  memset(&v27, 0, sizeof(v27));
  uint64_t v3 = *(off_t (**)(uint64_t, off_t, int))(a1 + 72);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  if (!a3)
  {
    if (a2 < 0) {
      goto LABEL_36;
    }
    goto LABEL_13;
  }
  if (a3 == 2)
  {
LABEL_13:
    unint64_t v28 = 0;
    int v8 = 1;
    goto LABEL_14;
  }
  if (a3 != 1) {
    goto LABEL_36;
  }
  if (_ftello(a1, (int64_t *)&v28)) {
    return result;
  }
  if ((v28 & 0x8000000000000000) != 0)
  {
LABEL_11:
    unint64_t v9 = __error();
    int v10 = 29;
LABEL_37:
    *unint64_t v9 = v10;
    return result;
  }
  if (v5 >= 1 && v28 > (v5 ^ 0x7FFFFFFFFFFFFFFFuLL))
  {
LABEL_29:
    unint64_t v9 = __error();
    int v10 = 84;
    goto LABEL_37;
  }
  v5 += v28;
  if (v5 < 0) {
    goto LABEL_36;
  }
  uint64_t v4 = 0;
  int v8 = 0;
LABEL_14:
  if (!*(void *)(a1 + 24)) {
    __smakebuf(a1);
  }
  __int16 v11 = *(_WORD *)(a1 + 16);
  if ((v11 & 0x81A) != 0) {
    goto LABEL_57;
  }
  if ((*(_WORD *)(a1 + 16) & 0x400) == 0)
  {
    if (v3 != __sseek || *(__int16 *)(a1 + 18) < 0) {
      goto LABEL_19;
    }
    if (fstat(*(unsigned __int16 *)(a1 + 18), &v27))
    {
      __int16 v11 = *(_WORD *)(a1 + 16);
LABEL_19:
      *(_WORD *)(a1 + 16) = v11 | 0x800;
      goto LABEL_57;
    }
    __int16 v11 = *(_WORD *)(a1 + 16);
    if ((v27.st_mode & 0xF000) != 0x8000) {
      goto LABEL_19;
    }
    *(_DWORD *)(a1 + 136) = v27.st_blksize;
    *(_WORD *)(a1 + 16) = v11 | 0x400;
  }
  uint64_t v12 = v5;
  if (v4)
  {
    if (fstat(*(__int16 *)(a1 + 18), &v27)) {
      goto LABEL_57;
    }
    if (v5 >= 1 && v27.st_size > (v5 ^ 0x7FFFFFFFFFFFFFFFLL)) {
      goto LABEL_29;
    }
    uint64_t v12 = v27.st_size + v5;
    if (v27.st_size + v5 < 0)
    {
LABEL_36:
      unint64_t v9 = __error();
      int v10 = 22;
      goto LABEL_37;
    }
  }
  if (!v8 || !_ftello(a1, (int64_t *)&v28))
  {
    __int16 v13 = *(_WORD *)(a1 + 16);
    if ((v13 & 0x2000) == 0)
    {
      uint64_t v14 = *(void **)(a1 + 88);
      uint64_t v15 = *(void *)(a1 + 24);
      if (v14)
      {
        uint64_t v16 = **(void **)(a1 + 104) - v15;
        int64_t v17 = v28 + *(int *)(a1 + 8) - v16;
        uint64_t v18 = (int *)(a1 + 112);
      }
      else
      {
        uint64_t v16 = *(void *)a1 - v15;
        int64_t v17 = v28 - v16;
        uint64_t v18 = (int *)(a1 + 8);
      }
      uint64_t v19 = *v18;
      unint64_t v28 = v17;
      uint64_t v20 = v12 - v17;
      if (v12 >= v17)
      {
        uint64_t v21 = v16 + v19;
        if (v12 < (unint64_t)(v17 + v21))
        {
          *(void *)a1 = v15 + v20;
          *(_DWORD *)(a1 + 8) = v21 - v20;
          if (v14)
          {
            if (v14 != (void *)(a1 + 116))
            {
              free(v14);
              __int16 v13 = *(_WORD *)(a1 + 16);
            }
            *(void *)(a1 + 88) = 0;
          }
          goto LABEL_54;
        }
      }
    }
    unint64_t v28 = v12 & -*(_DWORD *)(a1 + 136);
    if (_sseek(a1, v28, 0) == -1) {
      goto LABEL_57;
    }
    *(_DWORD *)(a1 + 8) = 0;
    *(void *)a1 = *(void *)(a1 + 24);
    int v22 = *(void **)(a1 + 88);
    if (v22)
    {
      if (v22 != (void *)(a1 + 116)) {
        free(v22);
      }
      *(void *)(a1 + 88) = 0;
    }
    unint64_t v23 = v12 - v28;
    if (!v23)
    {
LABEL_53:
      __int16 v13 = *(_WORD *)(a1 + 16);
LABEL_54:
      *(_WORD *)(a1 + 16) = v13 & 0xFFDF;
LABEL_64:
      uint64_t v26 = *(_OWORD **)(a1 + 104);
      double result = 0.0;
      v26[11] = 0u;
      v26[12] = 0u;
      v26[9] = 0u;
      v26[10] = 0u;
      v26[7] = 0u;
      v26[8] = 0u;
      _OWORD v26[5] = 0u;
      v26[6] = 0u;
      return result;
    }
    if (!__srefill(a1))
    {
      unint64_t v24 = *(int *)(a1 + 8);
      if (v23 <= v24)
      {
        *(void *)a1 += v23;
        *(_DWORD *)(a1 + 8) = v24 - v23;
        goto LABEL_53;
      }
    }
  }
LABEL_57:
  if (!__sflush(a1) && _sseek(a1, v5, v4) != -1)
  {
    int v25 = *(void **)(a1 + 88);
    if (v25)
    {
      if (v25 != (void *)(a1 + 116)) {
        free(v25);
      }
      *(void *)(a1 + 88) = 0;
    }
    *(void *)a1 = *(void *)(a1 + 24);
    *(_WORD *)(a1 + 16) &= ~0x20u;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_64;
  }
  return result;
}

uint64_t _ftello(uint64_t a1, int64_t *a2)
{
  if (*(void *)(a1 + 72))
  {
    if (__ftell_conformance_fix)
    {
      if ((*(_WORD *)(a1 + 16) & 0xC) == 8
        && *(void *)a1
        && (*(_WORD *)(a1 + 16) & 0x100) != 0
        && (uint64_t)(*(void *)a1 - *(void *)(a1 + 24)) >= 1)
      {
        int64_t v4 = _sseek(a1, 0, 2);
        if (v4 == -1) {
          return 1;
        }
LABEL_18:
        __int16 v8 = *(_WORD *)(a1 + 16);
        if ((v8 & 4) != 0)
        {
          uint64_t v10 = *(void *)(a1 + 88);
          uint64_t v11 = 112;
          if (!v10) {
            uint64_t v11 = 8;
          }
          v4 -= *(int *)(a1 + v11);
          if (v4 < 0)
          {
            *(_WORD *)(a1 + 16) = v8 | 0x40;
            uint64_t v5 = __error();
            int v6 = 5;
            goto LABEL_10;
          }
          if (v10) {
            v4 -= *(int *)(a1 + 8);
          }
        }
        else if ((v8 & 8) != 0)
        {
          if (*(void *)a1)
          {
            uint64_t v9 = *(void *)a1 - *(void *)(a1 + 24);
            if (!__ftell_conformance_fix || v9)
            {
              if (v4 > (v9 ^ 0x7FFFFFFFFFFFFFFFuLL))
              {
                uint64_t v5 = __error();
                int v6 = 84;
                goto LABEL_10;
              }
              v4 += v9;
            }
          }
        }
        uint64_t v7 = 0;
        *a2 = v4;
        return v7;
      }
      if ((*(_WORD *)(a1 + 16) & 0x1000) == 0)
      {
LABEL_12:
        uint64_t v7 = 1;
        int64_t v4 = _sseek(a1, 0, 1);
        if (v4 == -1) {
          return v7;
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (__sflush(a1)) {
        return 1;
      }
      if ((*(_WORD *)(a1 + 16) & 0x1000) == 0) {
        goto LABEL_12;
      }
    }
    int64_t v4 = *(void *)(a1 + 144);
    goto LABEL_18;
  }
  uint64_t v5 = __error();
  int v6 = 29;
LABEL_10:
  *uint64_t v5 = v6;
  return 1;
}

uint64_t __srefill1(uint64_t a1)
{
  *(void *)a1 = *(void *)(a1 + 24);
  int v2 = _sread(a1);
  *(_DWORD *)(a1 + 8) = v2;
  __int16 v3 = *(_WORD *)(a1 + 16) & 0xDFFF;
  *(_WORD *)(a1 + 16) = v3;
  if (v2 > 0) {
    return 0;
  }
  if (v2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    __int16 v5 = 64;
  }
  else
  {
    __int16 v5 = 32;
  }
  *(_WORD *)(a1 + 16) = v3 | v5;
  return 0xFFFFFFFFLL;
}

uint64_t _sread(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 64))(*(void *)(a1 + 48));
  if ((int)result < 1)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
    __int16 v3 = *(_WORD *)(a1 + 16);
  }
  else
  {
    __int16 v3 = *(_WORD *)(a1 + 16);
    if ((v3 & 0x1000) == 0) {
      return result;
    }
    uint64_t v4 = *(void *)(a1 + 144);
    if (v4 <= (result ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      *(void *)(a1 + 144) = v4 + result;
      return result;
    }
  }
  *(_WORD *)(a1 + 16) = v3 & 0xEFFF;
  return result;
}

uint64_t __sread()
{
  return read_NOCANCEL();
}

uint64_t _sseek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *__error();
  *__error() = 0;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 72))(*(void *)(a1 + 48), a2, a3);
  int v8 = *__error();
  if (*__error())
  {
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *__error() = v6;
    if ((v7 & 0x8000000000000000) == 0)
    {
LABEL_3:
      if ((*(_WORD *)(a1 + 16) & 0x400) != 0)
      {
        *(_WORD *)(a1 + 16) |= 0x1000u;
        *(void *)(a1 + 144) = v7;
      }
      return v7;
    }
  }
  if (v8 == 29)
  {
    *(_WORD *)(a1 + 16) &= ~0x100u;
  }
  else if (!v8)
  {
    if (a2 || a3 != 1)
    {
      uint64_t v10 = *(void **)(a1 + 88);
      if (v10)
      {
        if (v10 != (void *)(a1 + 116)) {
          free(v10);
        }
        *(void *)(a1 + 88) = 0;
      }
      *(void *)a1 = *(void *)(a1 + 24);
      *(_DWORD *)(a1 + 8) = 0;
      __int16 v9 = *(_WORD *)(a1 + 16) & 0xFFDF;
    }
    else
    {
      __int16 v9 = *(_WORD *)(a1 + 16);
    }
    *(_WORD *)(a1 + 16) = v9 | 0x40;
    *__error() = 22;
  }
  *(_WORD *)(a1 + 16) &= ~0x1000u;
  return -1;
}

off_t __sseek(uint64_t a1, off_t a2, int a3)
{
  return lseek(*(__int16 *)(a1 + 18), a2, a3);
}

uint64_t __srefill(uint64_t a1)
{
  uint64_t result = __srefill0(a1);
  if ((int)result >= 1)
  {
    return __srefill1(a1);
  }
  return result;
}

uint64_t __srefill0(uint64_t a1)
{
  pthread_once(&__sdidinit, __sinit);
  uint64_t v2 = *(void *)(a1 + 104);
  if ((*(unsigned char *)(v2 + 72) & 7) == 0) {
    *(unsigned char *)(v2 + 72) |= 7u;
  }
  *(_DWORD *)(a1 + 8) = 0;
  __int16 v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 0x20) != 0) {
    return 0xFFFFFFFFLL;
  }
  if ((v3 & 4) != 0)
  {
    uint64_t v4 = *(void **)(a1 + 88);
    if (v4)
    {
      if (v4 != (void *)(a1 + 116)) {
        free(v4);
      }
      *(void *)(a1 + 88) = 0;
      int v5 = *(_DWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 8) = v5;
      if (v5)
      {
        uint64_t result = 0;
        *(void *)a1 = **(void **)(a1 + 104);
        return result;
      }
    }
  }
  else
  {
    if ((v3 & 0x10) == 0)
    {
      *__error() = 9;
      *(_WORD *)(a1 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }
    if ((v3 & 8) != 0)
    {
      if (__sflush(a1)) {
        return 0xFFFFFFFFLL;
      }
      __int16 v3 = *(_WORD *)(a1 + 16) & 0xFFF7;
      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 40) = 0;
    }
    *(_WORD *)(a1 + 16) = v3 | 4;
  }
  if (!*(void *)(a1 + 24)) {
    __smakebuf(a1);
  }
  __int16 v7 = *(_WORD *)(a1 + 16);
  if ((v7 & 3) != 0)
  {
    *(_WORD *)(a1 + 16) = v7 | 0x8000;
    _fwalk((unsigned int (*)(uint64_t))lflush);
    int v8 = *(unsigned __int16 *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8 & 0x7FFF;
    if ((~v8 & 9) == 0) {
      __sflush(a1);
    }
  }
  return 1;
}

uint64_t _swrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 16) & 0x100) != 0)
  {
    int v6 = *__error();
    if (_sseek(a1, 0, 2) == -1 && (*(_WORD *)(a1 + 16) & 0x400) != 0) {
      return 0xFFFFFFFFLL;
    }
    *__error() = v6;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 80))(*(void *)(a1 + 48), a2, a3);
  int v8 = *(unsigned __int16 *)(a1 + 16);
  if ((result & 0x80000000) != 0
    || (~v8 & 0x1100) != 0
    || (uint64_t v9 = *(void *)(a1 + 144), v9 > (result ^ 0x7FFFFFFFFFFFFFFFLL)))
  {
    *(_WORD *)(a1 + 16) = v8 & 0xEFFF;
  }
  else
  {
    *(void *)(a1 + 144) = v9 + result;
  }
  return result;
}

uint64_t __swrite()
{
  return write_NOCANCEL();
}

uint64_t __sfprelease(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  char v3 = *(unsigned char *)(v2 + 72);
  if ((v3 & 8) != 0)
  {
    atomic_fetch_add_explicit(&__scounted, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
    *(unsigned char *)(v2 + 72) = v3 & 0xF7;
    uint64_t v2 = *(void *)(a1 + 104);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
  pthread_mutex_lock(&filelist_lock);
  *(_WORD *)(a1 + 16) = 0;

  return pthread_mutex_unlock(&filelist_lock);
}

uint64_t __sclose()
{
  return close_NOCANCEL();
}

uint64_t __smakebuf(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_WORD *)(result + 16) & 2) != 0) {
    goto LABEL_56;
  }
  size_t size = 0;
  int v17 = 0;
  uint64_t result = __swhatbuf(result, (uint64_t *)&size, &v17);
  __int16 v2 = result;
  int v3 = *(unsigned __int16 *)(v1 + 18);
  if ((v3 & 0x8000) != 0) {
    goto LABEL_48;
  }
  if (__getevp_predicate != -1) {
    uint64_t result = _os_once();
  }
  switch(v3)
  {
    case 2:
      uint64_t v4 = &__stderr_evp;
      goto LABEL_11;
    case 1:
      uint64_t v4 = &__stdout_evp;
LABEL_11:
      char v5 = *v4;
      if (*v4) {
        goto LABEL_13;
      }
      break;
    case 0:
      uint64_t v4 = &__stdin_evp;
      goto LABEL_11;
  }
  uint64_t v4 = &__fallback_evp;
  char v5 = __fallback_evp;
  if (!__fallback_evp) {
    goto LABEL_40;
  }
LABEL_13:
  unsigned int v6 = v5 - 66;
  if (v6 <= 0x33)
  {
    if (((1 << v6) & 0x1000000011) != 0)
    {
      __int16 v8 = 0;
      ++v4;
      goto LABEL_23;
    }
    if (((1 << v6) & 0x40000000400) != 0)
    {
      ++v4;
      __int16 v8 = 1;
      goto LABEL_23;
    }
    if (((1 << v6) & 0x8000000080000) != 0) {
      goto LABEL_18;
    }
  }
  if (v5 == 48)
  {
LABEL_18:
    if (!*++v4)
    {
      __int16 v8 = 2;
      goto LABEL_23;
    }
LABEL_40:
    __int16 v12 = 0;
    goto LABEL_44;
  }
  __int16 v8 = 0;
LABEL_23:
  int v9 = *v4;
  if ((v9 - 48) > 9)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      unint64_t v10 = 10 * v10 + (char)v9 - 48;
      int v11 = *++v4;
      LOBYTE(v9) = v11;
    }
    while ((v11 - 48) < 0xA);
  }
  __int16 v12 = 0;
  if ((char)v9 <= 74)
  {
    if ((_BYTE)v9 && (char)v9 != 66) {
      goto LABEL_44;
    }
  }
  else if ((char)v9 == 75 || (char)v9 == 107)
  {
    ++v4;
    v10 <<= 10;
  }
  else
  {
    if ((char)v9 != 77) {
      goto LABEL_44;
    }
    ++v4;
    v10 <<= 20;
  }
  if (*v4 == 66) {
    ++v4;
  }
  if (*v4) {
    goto LABEL_40;
  }
  int v17 = 0;
  size_t v13 = 4096;
  if (v10 < 0x1000) {
    size_t v13 = v10;
  }
  size_t size = v13;
  __int16 v12 = v8;
LABEL_44:
  v2 |= v12;
  if ((v2 & 2) == 0)
  {
    size_t v14 = size;
    if (!size) {
      size_t v14 = 1024;
    }
    size_t size = v14;
LABEL_48:
    if (v17)
    {
      int v15 = isatty(*(__int16 *)(v1 + 18));
      size_t v16 = size;
      if (v15)
      {
        v2 |= 1u;
        if (size > 0x1000)
        {
          size_t v16 = 4096;
          *(_DWORD *)(v1 + 136) = 4096;
        }
      }
    }
    else
    {
      size_t v16 = size;
    }
    uint64_t result = (uint64_t)malloc_type_malloc(v16, 0x1F05CC72uLL);
    if (result)
    {
      __cleanup = 1;
      *(void *)uint64_t v1 = result;
      *(void *)(v1 + 24) = result;
      *(_DWORD *)(v1 + 32) = v16;
      *(_WORD *)(v1 + 16) |= v2 | 0x80;
      return result;
    }
  }
  *(_WORD *)(v1 + 16) |= 2u;
LABEL_56:
  *(void *)uint64_t v1 = v1 + 119;
  *(void *)(v1 + 24) = v1 + 119;
  *(_DWORD *)(v1 + 32) = 1;
  return result;
}

uint64_t __swhatbuf(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  int v5 = *(__int16 *)(a1 + 18);
  if (v5 < 0 || (memset(&v10, 0, sizeof(v10)), fstat((unsigned __int16)v5, &v10) < 0))
  {
    *a3 = 0;
    goto LABEL_12;
  }
  int v7 = v10.st_mode & 0xF000;
  *a3 = v7 == 0x2000;
  if (v10.st_blksize <= 0)
  {
LABEL_12:
    *a2 = 1024;
    return 2048;
  }
  if (v10.st_blksize >= 4096) {
    st_blksize_t size = 4096;
  }
  else {
    st_blksize_t size = v10.st_blksize;
  }
  *a2 = st_blksize;
  *(_DWORD *)(a1 + 136) = st_blksize;
  uint64_t result = 2048;
  if (v7 == 0x8000)
  {
    if (*(off_t (**)(uint64_t, off_t, int))(a1 + 72) == __sseek) {
      return 1024;
    }
    else {
      return 2048;
    }
  }
  return result;
}

uint64_t eofread()
{
  return 0;
}

uint64_t eofread_0()
{
  return 0;
}

int isatty(int a1)
{
  int v4 = 0;
  memset(&v5, 0, sizeof(v5));
  if (ioctl(a1, 0x4004667AuLL, &v4) == -1) {
    return tcgetattr(a1, &v5) != -1;
  }
  if (v4 == 3) {
    return 1;
  }
  int v3 = __error();
  int result = 0;
  int *v3 = 25;
  return result;
}

_DWORD *__mult_D2A(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[5];
  int v3 = a2[5];
  if (v2 >= v3) {
    int v4 = a1;
  }
  else {
    int v4 = a2;
  }
  if (v2 >= v3) {
    termios v5 = a2;
  }
  else {
    termios v5 = a1;
  }
  uint64_t v6 = (int)v4[5];
  uint64_t v7 = (int)v5[5];
  int v8 = v7 + v6;
  if ((int)v7 + (int)v6 <= v4[3]) {
    int v9 = v4[2];
  }
  else {
    int v9 = v4[2] + 1;
  }
  stat v10 = __Balloc_D2A(v9);
  int v11 = v10;
  __int16 v12 = v10 + 6;
  if (v8 >= 1)
  {
    unint64_t v13 = (unint64_t)&v10[v8 + 6];
    if (v13 <= (unint64_t)(v10 + 7)) {
      unint64_t v13 = (unint64_t)(v10 + 7);
    }
    MEMORY[0x18C122530](v10 + 6, ((v13 - (void)v10 - 25) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  if ((int)v7 >= 1)
  {
    size_t v14 = v4 + 6;
    int v15 = v5 + 6;
    do
    {
      unsigned int v17 = *v15++;
      unsigned int v16 = v17;
      if (v17)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          unint64_t v20 = v19 + v12[v18] + v14[v18] * (unint64_t)v16;
          unint64_t v19 = HIDWORD(v20);
          v12[v18++] = v20;
        }
        while (&v14[v18] < &v4[v6 + 6]);
        v12[v18] = HIDWORD(v20);
      }
      ++v12;
    }
    while (v15 < &v5[v7 + 6]);
  }
  if (v8 >= 1)
  {
    uint64_t v21 = &v11[v8 + 5];
    while (!*v21--)
    {
      BOOL v23 = __OFSUB__(v8--, 1);
      if ((v8 < 0) ^ v23 | (v8 == 0))
      {
        int v8 = 0;
        break;
      }
    }
  }
  v11[5] = v8;
  return v11;
}

char *__pow5mult_D2A(char *a1, int a2)
{
  int v3 = a1;
  if ((a2 & 3) != 0) {
    int v3 = __multadd_D2A(a1, __pow5mult_D2A_p05[(a2 & 3) - 1], 0);
  }
  if (a2 >= 4)
  {
    int v5 = a2 >> 2;
    uint64_t v6 = (_DWORD *)p5s;
    if (p5s) {
      goto LABEL_10;
    }
    os_unfair_lock_lock(&stru_1EB1CD3A4);
    uint64_t v6 = (_DWORD *)p5s;
    if (!p5s)
    {
      uint64_t v6 = __Balloc_D2A(1);
      *(void *)(v6 + 5) = 0x27100000001;
      p5s = (uint64_t)v6;
LABEL_8:
      *(void *)uint64_t v6 = 0;
    }
LABEL_9:
    os_unfair_lock_unlock(&stru_1EB1CD3A4);
    while (1)
    {
LABEL_10:
      uint64_t v7 = v6;
      if (v5)
      {
        int v8 = (char *)__mult_D2A(v3, v6);
        __Bfree_D2A((int *)v3);
        int v3 = v8;
      }
      if (v5 < 2) {
        break;
      }
      v5 >>= 1;
      uint64_t v6 = *(_DWORD **)v7;
      if (!*(void *)v7)
      {
        os_unfair_lock_lock(&stru_1EB1CD3A4);
        uint64_t v6 = *(_DWORD **)v7;
        if (*(void *)v7) {
          goto LABEL_9;
        }
        uint64_t v6 = __mult_D2A(v7, v7);
        *(void *)uint64_t v7 = v6;
        goto LABEL_8;
      }
    }
  }
  return v3;
}

_DWORD *__i2b_D2A(int a1)
{
  int result = __Balloc_D2A(1);
  result[5] = 1;
  result[6] = a1;
  return result;
}

_DWORD *__lshift_D2A(int *a1, int a2)
{
  int v4 = a1[5] + (a2 >> 5);
  int v5 = a1[2];
  int v6 = a1[3];
  if (v4 >= v6)
  {
    do
    {
      ++v5;
      BOOL v7 = v4 < 2 * v6;
      v6 *= 2;
    }
    while (!v7);
  }
  int v8 = __Balloc_D2A(v5);
  int v9 = v8 + 6;
  if (a2 >= 32)
  {
    if (a2 >> 5 <= 1) {
      unsigned int v10 = 1;
    }
    else {
      unsigned int v10 = a2 >> 5;
    }
    MEMORY[0x18C122530](v9, 4 * v10);
    int v9 = &v8[v10 + 6];
  }
  int v11 = a1 + 6;
  unint64_t v12 = (unint64_t)&a1[a1[5] + 6];
  char v13 = a2 & 0x1F;
  if ((a2 & 0x1F) != 0)
  {
    int v14 = 0;
    do
    {
      *v9++ = (*v11 << v13) | v14;
      unsigned int v15 = *v11++;
      int v14 = v15 >> (32 - v13);
    }
    while ((unint64_t)v11 < v12);
    *int v9 = v14;
    if (v14) {
      ++v4;
    }
  }
  else
  {
    do
    {
      int v16 = *v11++;
      *v9++ = v16;
    }
    while ((unint64_t)v11 < v12);
  }
  v8[5] = v4;
  __Bfree_D2A(a1);
  return v8;
}

char *__dtoa(unsigned int a1, int a2, _DWORD *a3, _DWORD *a4, char **a5, double a6)
{
  int v6 = a5;
  int StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  double v10 = fabs(a6);
  if (a6 >= 0.0) {
    double v11 = a6;
  }
  else {
    double v11 = v10;
  }
  *a4 = *(void *)&a6 >> 63;
  uint64_t v12 = HIDWORD(*(void *)&a6) & 0x7FFFFFFFLL;
  if ((~v12 & 0x7FF00000) == 0)
  {
    *a3 = 9999;
    if (LODWORD(a6) || (HIDWORD(a6) & 0xFFFFF) != 0)
    {
      char v13 = "NaN";
      int v14 = a5;
      unsigned int v15 = 3;
    }
    else
    {
      char v13 = "Infinity";
      int v14 = a5;
      unsigned int v15 = 8;
    }
    goto LABEL_19;
  }
  if (v11 == 0.0)
  {
    *a3 = 1;
    char v13 = "0";
    int v14 = a5;
    unsigned int v15 = 1;
LABEL_19:
    return (char *)__nrv_alloc_D2A((unsigned __int8 *)v13, v14, v15);
  }
  signed int v18 = ((StatusReg + 0x400000) >> 22) & 3;
  int v19 = 2 * (v18 == 2);
  if (a6 < 0.0) {
    int v19 = 2 * (v18 != 2);
  }
  if (v18 >= 2) {
    signed int v18 = v19;
  }
  int v147 = v18;
  uint64_t v149 = 0;
  unint64_t v20 = __d2b_D2A(&v149, (_DWORD *)&v149 + 1, v11);
  int v141 = a3;
  if (v12 >= 0x100000)
  {
    uint64_t v22 = *(void *)&a6 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000;
    signed int v23 = (v12 >> 20) - 1023;
  }
  else
  {
    unsigned int v21 = LODWORD(a6) << (-18 - (v149 + BYTE4(v149)));
    if ((int)v149 + HIDWORD(v149) >= -1041) {
      unsigned int v21 = (v12 << (14 - (v149 + BYTE4(v149)))) | (LODWORD(a6) >> (v149 + BYTE4(v149) + 18));
    }
    uint64_t v22 = COERCE__INT64((double)v21) - 0x1F0000000000000;
    signed int v23 = v149 + HIDWORD(v149) - 1;
  }
  double v25 = (*(double *)&v22 + -1.5) * 0.289529655 + 0.176091259 + (double)v23 * 0.301029996;
  int v26 = (int)v25;
  BOOL v27 = v25 < 0.0;
  if (v25 == (double)(int)v25) {
    BOOL v27 = 0;
  }
  unsigned int v28 = v26 - v27;
  if ((v26 - v27) <= 0x16)
  {
    int v29 = v26 - v27;
    if (v11 < __tens_D2A[v28]) {
      int v29 = v28 - 1;
    }
  }
  else
  {
    int v29 = v26 - v27;
  }
  int v30 = HIDWORD(v149) + ~v23;
  if (v30 < 0) {
    int v31 = -v30;
  }
  else {
    int v31 = 0;
  }
  int v32 = v30 & ~(v30 >> 31);
  if (v29 >= 0) {
    int v33 = v31;
  }
  else {
    int v33 = v31 - v29;
  }
  if (v29 < 0) {
    int v34 = -v29;
  }
  else {
    int v34 = 0;
  }
  if (v29 >= 0) {
    int v35 = v32 + v29;
  }
  else {
    int v35 = v32;
  }
  if (v29 >= 0) {
    int v36 = v29;
  }
  else {
    int v36 = 0;
  }
  if (a1 <= 9) {
    unsigned int v37 = a1;
  }
  else {
    unsigned int v37 = 0;
  }
  if (v37 >= 6) {
    unsigned int v38 = v37 - 4;
  }
  else {
    unsigned int v38 = v37;
  }
  int v39 = 1;
  unsigned int v148 = v38;
  int v145 = v35;
  int v134 = v34;
  int v135 = v36;
  switch(v38)
  {
    case 0u:
    case 1u:
      a2 = 0;
      int v142 = -1;
      signed int v23 = 18;
      goto LABEL_53;
    case 2u:
      int v39 = 0;
      goto LABEL_55;
    case 3u:
      int v39 = 0;
      goto LABEL_59;
    case 4u:
LABEL_55:
      if (a2 <= 1) {
        a2 = 1;
      }
      signed int v23 = a2;
      int v142 = a2;
      int v139 = a2;
      break;
    case 5u:
LABEL_59:
      int v142 = v29 + a2 + 1;
      int v139 = v29 + a2;
      if (v142 > 1) {
        signed int v23 = v29 + a2 + 1;
      }
      else {
        signed int v23 = 1;
      }
      break;
    default:
      int v142 = -1;
LABEL_53:
      int v139 = -1;
      break;
  }
  uint64_t v144 = (char *)__rv_alloc_D2A(v23);
  BOOL v40 = v147 != 1 && v148 > 1;
  if (v40) {
    int v41 = 0;
  }
  else {
    int v41 = v39;
  }
  if (v37 <= 5 && v142 <= 0xE && v147 == 1)
  {
    int v42 = v29 - 1;
    if (v29 < 1)
    {
      if (v29)
      {
        double v46 = v11 * __tens_D2A[-v29 & 0xF];
        if (-v29 >= 0x10)
        {
          unsigned int v73 = -v29 >> 4;
          int v44 = 2;
          size_t v74 = (double *)&__bigtens_D2A;
          do
          {
            if (v73)
            {
              ++v44;
              double v46 = v46 * *v74;
            }
            ++v74;
            BOOL v40 = v73 > 1;
            v73 >>= 1;
          }
          while (v40);
        }
        else
        {
          int v44 = 2;
        }
      }
      else
      {
        int v44 = 2;
        double v46 = v11;
      }
    }
    else
    {
      if ((v29 & 0x100) != 0)
      {
        unsigned int v43 = v29 >> 4;
        double v45 = v11 / 1.0e256;
        int v44 = 3;
      }
      else
      {
        unsigned int v43 = v29 >> 4;
        int v44 = 2;
        double v45 = v11;
      }
      double v47 = __tens_D2A[v29 & 0xF];
      if (v43)
      {
        uint64_t v48 = (double *)&__bigtens_D2A;
        do
        {
          if (v43)
          {
            ++v44;
            double v47 = v47 * *v48;
          }
          ++v48;
          BOOL v40 = v43 > 1;
          v43 >>= 1;
        }
        while (v40);
      }
      double v46 = v45 / v47;
    }
    if (v28 < 0x17 || (v46 < 1.0 ? (BOOL v49 = v142 < 1) : (BOOL v49 = 1), v49))
    {
      int v50 = v142;
      int v42 = v29;
    }
    else
    {
      if (v139 < 1) {
        goto LABEL_129;
      }
      double v46 = v46 * 10.0;
      ++v44;
      int v50 = v139;
    }
    *(void *)&double v51 = COERCE__INT64((double)v44 * v46 + 7.0) - 0x340000000000000;
    double v52 = v51;
    if (v50)
    {
      double v53 = __tens_D2A[v50 - 1];
      uint64_t i = v144 + 1;
      int v55 = (int)v46;
      if (v41)
      {
        double v56 = 0.5 / v53 - v52;
        double v57 = v46 - (double)v55;
        *uint64_t v144 = v55 + 48;
        if (v57 >= v56)
        {
          if (v50 <= 1) {
            int v58 = 1;
          }
          else {
            int v58 = v50;
          }
          int v59 = v58 - 1;
          while (1.0 - v57 >= v56)
          {
            if (!v59) {
              goto LABEL_129;
            }
            double v56 = v56 * 10.0;
            double v60 = v57 * 10.0;
            int v61 = (int)v60;
            double v57 = v60 - (double)(int)v60;
            *i++ = v61 + 48;
            --v59;
            if (v57 < v56) {
              goto LABEL_102;
            }
          }
LABEL_116:
          int v29 = v42;
          char v62 = v141;
          int v63 = v144;
LABEL_165:
          unint64_t v91 = v63 + 1;
          int v92 = i - 1;
          while (1)
          {
            int v93 = *v92;
            if (v93 != 57) {
              break;
            }
            BOOL v69 = v92-- == v63;
            if (v69)
            {
              ++v29;
              *int v63 = 48;
              char v94 = 49;
              int v92 = v63;
              goto LABEL_224;
            }
          }
          char v94 = v93 + 1;
          unint64_t v91 = v92 + 1;
LABEL_224:
          *int v92 = v94;
          uint64_t i = v91;
          goto LABEL_298;
        }
LABEL_102:
        int v29 = v42;
        char v62 = v141;
LABEL_103:
        int v63 = v144;
        goto LABEL_298;
      }
      double v67 = v53 * v52;
      double v68 = v46 - (double)v55;
      *uint64_t v144 = v55 + 48;
      BOOL v69 = v68 == 0.0 || v50 == 1;
      if (!v69)
      {
        uint64_t v70 = 0;
        do
        {
          double v71 = v68 * 10.0;
          int v72 = (int)v71;
          double v68 = v71 - (double)(int)v71;
          if (v68 == 0.0) {
            int v50 = v70 + 2;
          }
          i[v70++] = v72 + 48;
        }
        while (v70 + 1 != v50);
        i += v70;
      }
      if (v68 > v67 + 0.5) {
        goto LABEL_116;
      }
      if (v68 < 0.5 - v67)
      {
        ++i;
        char v62 = v141;
        do
        {
          int v75 = *(i - 2);
          --i;
        }
        while (v75 == 48);
        int v29 = v42;
        goto LABEL_103;
      }
    }
    else
    {
      double v64 = v46 + -5.0;
      if (v64 > v51)
      {
        uint64_t v65 = 0;
        double v66 = 0;
        int v29 = v42;
        goto LABEL_213;
      }
      if (v64 < -v51)
      {
        uint64_t v65 = 0;
        double v66 = 0;
        goto LABEL_264;
      }
    }
  }
LABEL_129:
  if (v29 <= 14 && (v149 & 0x80000000) == 0)
  {
    double v76 = __tens_D2A[v29];
    if ((a2 & 0x80000000) == 0 || v142 >= 1)
    {
      int v81 = v142 - 1;
      int v63 = v144;
      uint64_t i = v144 + 1;
      char v62 = v141;
      while (1)
      {
        int v82 = (int)(v11 / v76);
        double v83 = v11 - (double)v82 * v76;
        double v84 = -0.0;
        if (v83 < 0.0) {
          double v84 = v76;
        }
        char v85 = v82 - (v83 < 0.0);
        double v86 = v83 + v84;
        *(i - 1) = v85 + 48;
        if (v86 == 0.0) {
          goto LABEL_298;
        }
        if (!v81)
        {
          if (v148 < 2) {
            goto LABEL_164;
          }
          if (!v147) {
            goto LABEL_298;
          }
          if (v147 != 2)
          {
LABEL_164:
            if (v86 + v86 <= v76 && (v86 + v86 != v76 || (v85 & 1) == 0)) {
              goto LABEL_298;
            }
          }
          goto LABEL_165;
        }
        double v11 = v86 * 10.0;
        --v81;
        ++i;
      }
    }
    uint64_t v65 = 0;
    if ((v142 & 0x80000000) == 0)
    {
      double v66 = 0;
      if (v11 <= v76 * 5.0) {
        goto LABEL_264;
      }
LABEL_213:
      char v111 = 0;
      int v63 = v144;
      *uint64_t v144 = 49;
      uint64_t i = v144 + 1;
      ++v29;
      goto LABEL_292;
    }
    double v66 = 0;
LABEL_264:
    char v111 = 0;
    int v29 = ~a2;
    int v63 = v144;
    uint64_t i = v144;
    goto LABEL_292;
  }
  int v137 = v41;
  if (v41)
  {
    int v77 = v149 + 1075;
    if (v12 >= 0x100000) {
      int v77 = 54 - HIDWORD(v149);
    }
    int v78 = v77 + v33;
    v145 += v77;
    unsigned int v79 = (char *)__i2b_D2A(1);
    int v80 = v33;
    v133 = v79;
  }
  else
  {
    int v80 = v33;
    v133 = 0;
    int v78 = v33;
  }
  int v136 = v80;
  if (v80 < 1)
  {
    int v88 = v137;
    int v87 = v145;
  }
  else
  {
    int v87 = v145;
    if (v145 >= 1)
    {
      if (v80 >= v145) {
        int v80 = v145;
      }
      v78 -= v80;
      v136 -= v80;
      int v87 = v145 - v80;
    }
    int v88 = v137;
  }
  if (v134 >= 1)
  {
    if (v88)
    {
      v133 = __pow5mult_D2A(v133, v134);
      unint64_t v89 = __mult_D2A(v133, v20);
      __Bfree_D2A(v20);
      unint64_t v20 = v89;
    }
    else
    {
      unint64_t v20 = (int *)__pow5mult_D2A((char *)v20, v134);
    }
  }
  unint64_t v95 = (char *)__i2b_D2A(1);
  int v96 = v135;
  if (v135 >= 1)
  {
    unint64_t v95 = __pow5mult_D2A(v95, v135);
    int v96 = v135;
  }
  int v146 = (int *)v95;
  BOOL v100 = ((int)v148 < 2 || v137 != 0) && v147 == 1 && (v12 & 0xFFFFF | LODWORD(a6)) == 0 && (v12 & 0x7FE00000) != 0;
  int v101 = v87 + v100;
  if (v96) {
    int v102 = 32 - __hi0bits_D2A(*(_DWORD *)&v95[4 * *((int *)v95 + 5) + 20]);
  }
  else {
    LOBYTE(v102) = 1;
  }
  int v103 = v78 + v100;
  char v104 = v102 + v101;
  if ((v104 & 0x1F) != 0) {
    unsigned int v105 = 32 - (v104 & 0x1F);
  }
  else {
    unsigned int v105 = 0;
  }
  if (v105 < 5)
  {
    if (v105 == 4) {
      goto LABEL_196;
    }
    unsigned int v106 = v105 + 28;
  }
  else
  {
    unsigned int v106 = v105 - 4;
  }
  v103 += v106;
  v136 += v106;
  v101 += v106;
LABEL_196:
  if (v103 >= 1) {
    unint64_t v20 = __lshift_D2A(v20, v103);
  }
  if (v101 >= 1) {
    int v146 = __lshift_D2A(v146, v101);
  }
  unsigned int v107 = v148;
  uint64_t v65 = (int *)v133;
  if (v28 < 0x17)
  {
    int v108 = v142;
    double v66 = (char *)v146;
  }
  else
  {
    double v66 = (char *)v146;
    if ((__cmp_D2A((uint64_t)v20, (uint64_t)v146) & 0x80000000) != 0)
    {
      --v29;
      unint64_t v20 = (int *)__multadd_D2A((char *)v20, 10, 0);
      int v109 = v137;
      if (v137)
      {
        uint64_t v65 = (int *)__multadd_D2A(v133, 10, 0);
        int v109 = v137;
      }
      unsigned int v107 = v148;
      int v108 = v139;
      goto LABEL_205;
    }
    int v108 = v142;
    unsigned int v107 = v148;
  }
  int v109 = v137;
LABEL_205:
  if (v108 <= 0 && (v107 == 5 || v107 == 3))
  {
    if (v108 < 0) {
      goto LABEL_264;
    }
    double v66 = __multadd_D2A(v66, 5, 0);
    if ((int)__cmp_D2A((uint64_t)v20, (uint64_t)v66) <= 0) {
      goto LABEL_264;
    }
    goto LABEL_213;
  }
  int v140 = v29;
  if (!v109)
  {
    if (v108 <= 1) {
      int v112 = 1;
    }
    else {
      int v112 = v108;
    }
    int v113 = v112 - 1;
    int v63 = v144;
    for (uint64_t i = v144 + 1; ; ++i)
    {
      char v114 = __quorem_D2A((uint64_t)v20, (uint64_t)v66) + 48;
      *(i - 1) = v114;
      if (!v20[6] && v20[5] < 2)
      {
        char v111 = 0;
LABEL_278:
        int v29 = v140;
        goto LABEL_292;
      }
      if (!v113) {
        break;
      }
      unint64_t v20 = (int *)__multadd_D2A((char *)v20, 10, 0);
      --v113;
    }
    char v111 = 0;
    int v115 = v147;
    goto LABEL_268;
  }
  int v110 = v108;
  if (v136 < 1)
  {
    char v111 = v65;
  }
  else
  {
    char v111 = __lshift_D2A(v65, v136);
    uint64_t v65 = v111;
  }
  v138 = v6;
  if (v100)
  {
    char v116 = __Balloc_D2A(v111[2]);
    j__mkdtempat_np(v116 + 16, (char *)v111 + 16);
    uint64_t v65 = __lshift_D2A(v116, 1);
  }
  int v143 = LOBYTE(a6) & 1;
  int v117 = v110 - 1;
  for (uint64_t i = v144 + 1; ; ++i)
  {
    int v118 = __quorem_D2A((uint64_t)v20, (uint64_t)v66);
    int v119 = __cmp_D2A((uint64_t)v20, (uint64_t)v111);
    uint64_t v120 = (uint64_t)v66;
    uint64_t v121 = (char *)v65;
    uint64_t v122 = __diff_D2A(v120, (uint64_t)v65);
    if (v122[4]) {
      int v123 = 1;
    }
    else {
      int v123 = __cmp_D2A((uint64_t)v20, (uint64_t)v122);
    }
    char v114 = v118 + 48;
    __Bfree_D2A(v122);
    int v115 = v147;
    if (!v143 && v148 != 1 && !v123 && v147 >= 1)
    {
      if (v118 == 9)
      {
        int v6 = v138;
        int v29 = v140;
        int v63 = v144;
        uint64_t v65 = (int *)v121;
        goto LABEL_286;
      }
      char v128 = v118 + 49;
      if (v119 <= 0) {
        char v128 = v118 + 48;
      }
      *(i - 1) = v128;
      int v6 = v138;
      int v29 = v140;
      uint64_t v65 = (int *)v121;
      goto LABEL_282;
    }
    if ((v119 & 0x80000000) == 0 && (v148 == 1 || v119 | v143))
    {
      if (v123 < 1) {
        goto LABEL_248;
      }
      int v6 = v138;
      if (!v147) {
        goto LABEL_261;
      }
      uint64_t v65 = (int *)v121;
      if (v118 == 9) {
        goto LABEL_285;
      }
      *(i - 1) = v118 + 49;
      int v29 = v140;
LABEL_282:
      int v63 = v144;
      double v66 = (char *)v146;
      goto LABEL_292;
    }
    if (!v20[6] && v20[5] < 2) {
      goto LABEL_260;
    }
    if (v148 < 2) {
      goto LABEL_253;
    }
    if (v147 != 2)
    {
      if (v147)
      {
LABEL_253:
        if (v123 >= 1)
        {
          unint64_t v20 = __lshift_D2A(v20, 1);
          int v125 = __cmp_D2A((uint64_t)v20, (uint64_t)v146);
          int v6 = v138;
          uint64_t v65 = (int *)v121;
          if (v125 > 0 || !v125 && (v118 & 1) != 0)
          {
            if (v118 != 9)
            {
              char v114 = v118 + 49;
              goto LABEL_259;
            }
LABEL_285:
            int v29 = v140;
            int v63 = v144;
LABEL_286:
            double v66 = (char *)v146;
            *(i - 1) = 57;
LABEL_287:
            uint64_t v129 = i;
            BOOL v130 = i;
            while (1)
            {
              int v132 = *--v130;
              char v131 = v132;
              if (v132 != 57) {
                break;
              }
              uint64_t v129 = v130;
              if (v130 == v63)
              {
                ++v29;
                *int v63 = 49;
                uint64_t i = v63 + 1;
                goto LABEL_292;
              }
            }
            *(v129 - 1) = v131 + 1;
            uint64_t i = v129;
            goto LABEL_292;
          }
LABEL_259:
          int v63 = v144;
LABEL_262:
          double v66 = (char *)v146;
          *(i - 1) = v114;
          goto LABEL_278;
        }
      }
LABEL_260:
      int v6 = v138;
LABEL_261:
      int v63 = v144;
      uint64_t v65 = (int *)v121;
      goto LABEL_262;
    }
LABEL_248:
    *(i - 1) = v114;
    if (!v117) {
      break;
    }
    unint64_t v20 = (int *)__multadd_D2A((char *)v20, 10, 0);
    int v124 = __multadd_D2A((char *)v111, 10, 0);
    uint64_t v65 = (int *)v124;
    if (v111 != (_DWORD *)v121) {
      uint64_t v65 = (int *)__multadd_D2A(v121, 10, 0);
    }
    --v117;
    char v111 = v124;
    double v66 = (char *)v146;
  }
  int v6 = v138;
  uint64_t v65 = (int *)v121;
  int v63 = v144;
  double v66 = (char *)v146;
LABEL_268:
  if (v115)
  {
    if (v115 == 2
      || (unint64_t v20 = __lshift_D2A(v20, 1), v126 = __cmp_D2A((uint64_t)v20, (uint64_t)v66), v126 > 0)
      || !v126 && (v114 & 1) != 0)
    {
      int v29 = v140;
      goto LABEL_287;
    }
  }
  int v29 = v140;
  ++i;
  do
  {
    int v127 = *(i - 2);
    --i;
  }
  while (v127 == 48);
LABEL_292:
  __Bfree_D2A((int *)v66);
  if (v65)
  {
    if (v111 && v111 != v65) {
      __Bfree_D2A(v111);
    }
    __Bfree_D2A(v65);
  }
  char v62 = v141;
LABEL_298:
  __Bfree_D2A(v20);
  *uint64_t i = 0;
  *char v62 = v29 + 1;
  if (v6) {
    *int v6 = i;
  }
  return v63;
}

void __Bfree_D2A(int *a1)
{
  if (a1)
  {
    if (a1[2] < 10)
    {
      if (gdtoa_tsd_key) {
        pthread_key_t v2 = 14;
      }
      else {
        pthread_key_t v2 = -1;
      }
      int v3 = pthread_getspecific(v2);
      uint64_t v4 = a1[2];
      *(void *)a1 = v3[v4];
      v3[v4] = a1;
    }
    else
    {
      free(a1);
    }
  }
}

char *__multadd_D2A(char *a1, int a2, int a3)
{
  int v3 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = *((int *)a1 + 5);
  unint64_t v6 = a3;
  if ((int)v5 <= 1) {
    int v7 = 1;
  }
  else {
    int v7 = *((_DWORD *)a1 + 5);
  }
  do
  {
    int v8 = &a1[4 * v4];
    unint64_t v9 = v6 + *((unsigned int *)v8 + 6) * (uint64_t)a2;
    unint64_t v6 = HIDWORD(v9);
    *((_DWORD *)v8 + 6) = v9;
    ++v4;
  }
  while (v7 != v4);
  if (v6)
  {
    if ((int)v5 >= *((_DWORD *)a1 + 3))
    {
      double v10 = (char *)__Balloc_D2A(*((_DWORD *)a1 + 2) + 1);
      j__mkdtempat_np(v10 + 16, v3 + 16);
      __Bfree_D2A((int *)v3);
      int v3 = v10;
    }
    *(_DWORD *)&v3[4 * v5 + 24] = v6;
    *((_DWORD *)v3 + 5) = v5 + 1;
  }
  return v3;
}

uint64_t __quorem_D2A(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 20) < v2) {
    return 0;
  }
  uint64_t v5 = (unsigned int *)(a2 + 24);
  int v6 = v2 - 1;
  int v7 = (unsigned int *)(a2 + 24 + 4 * (v2 - 1));
  int v8 = (unsigned int *)(a1 + 24);
  unint64_t v9 = (unsigned int *)(a1 + 24 + 4 * (v2 - 1));
  unsigned int v10 = *v7 + 1;
  uint64_t v3 = *v9 / v10;
  if (v10 <= *v9)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    char v13 = (_DWORD *)(a1 + 24);
    int v14 = (unsigned int *)(a2 + 24);
    do
    {
      unsigned int v15 = *v14++;
      unint64_t v16 = v12 + v15 * (unint64_t)v3;
      unint64_t v12 = HIDWORD(v16);
      uint64_t v17 = v11 - v16 + *v13;
      uint64_t v11 = v17 >> 32;
      *v13++ = v17;
    }
    while (v14 <= v7);
    if (!*v9)
    {
      while (--v9 > v8 && !*v9)
        --v6;
      *(_DWORD *)(a1 + 20) = v6;
    }
  }
  if ((__cmp_D2A(a1, a2) & 0x80000000) == 0)
  {
    uint64_t v18 = 0;
    int v19 = v8;
    do
    {
      unsigned int v20 = *v5++;
      uint64_t v21 = v18 - v20 + *v19;
      uint64_t v18 = v21 >> 32;
      *v19++ = v21;
    }
    while (v5 <= v7);
    uint64_t v3 = (v3 + 1);
    uint64_t v22 = &v8[v6];
    if (!*v22)
    {
      while (--v22 > v8 && !*v22)
        --v6;
      *(_DWORD *)(a1 + 20) = v6;
    }
  }
  return v3;
}

uint64_t __cmp_D2A(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(int *)(a2 + 20);
  uint64_t result = (v3 - v4);
  if (v3 == v4)
  {
    unint64_t v6 = a1 + 24;
    unint64_t v7 = v6 + 4 * v4;
    int v8 = (unsigned int *)(a2 + 4 * v4 + 20);
    while (1)
    {
      unsigned int v10 = *(_DWORD *)(v7 - 4);
      v7 -= 4;
      unsigned int v9 = v10;
      unsigned int v11 = *v8--;
      BOOL v12 = v9 >= v11;
      if (v9 != v11) {
        break;
      }
      if (v7 <= v6) {
        return 0;
      }
    }
    if (v12) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

_DWORD *__rv_alloc_D2A(unsigned int a1)
{
  if (a1 >= 0x1C)
  {
    int v1 = 0;
    int v2 = 4;
    do
    {
      ++v1;
      v2 *= 2;
    }
    while (v2 + 24 <= (unint64_t)(int)a1);
  }
  else
  {
    int v1 = 0;
  }
  int v3 = __Balloc_D2A(v1);
  _DWORD *v3 = v1;
  return v3 + 1;
}

_DWORD *__Balloc_D2A(int a1)
{
  if (gdtoa_tsd_key)
  {
    pthread_key_t v2 = 14;
  }
  else
  {
    pthread_mutex_lock(&gdtoa_tsd_lock);
    if ((gdtoa_tsd_key & 1) == 0)
    {
      gdtoa_tsd_key = 1;
      pthread_key_init_np();
    }
    pthread_mutex_unlock(&gdtoa_tsd_lock);
    if (gdtoa_tsd_key) {
      pthread_key_t v2 = 14;
    }
    else {
      pthread_key_t v2 = -1;
    }
  }
  int v3 = pthread_getspecific(v2);
  if (!v3)
  {
    int v3 = malloc_type_malloc(0x50uLL, 0x2004093837F09uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    v3[4] = 0u;
    if (gdtoa_tsd_key) {
      pthread_key_t v4 = 14;
    }
    else {
      pthread_key_t v4 = -1;
    }
    pthread_setspecific(v4, v3);
  }
  if (a1 <= 9 && (uint64_t result = (_DWORD *)*((void *)v3 + a1)) != 0)
  {
    *((void *)v3 + a1) = *(void *)result;
  }
  else
  {
    uint64_t result = malloc_type_malloc(4 * ((1 << a1) - 1) + 32, 0x8AE3CDFAuLL);
    result[2] = a1;
    result[3] = 1 << a1;
  }
  *((void *)result + 2) = 0;
  return result;
}

_DWORD *__d2b_D2A(_DWORD *a1, _DWORD *a2, double a3)
{
  int v6 = 1;
  unint64_t v7 = __Balloc_D2A(1);
  uint64_t v8 = (*(void *)&a3 >> 52) & 0x7FFLL;
  if (((*(void *)&a3 >> 52) & 0x7FF) != 0) {
    unsigned int v9 = HIDWORD(a3) & 0xFFFFF | 0x100000;
  }
  else {
    unsigned int v9 = HIDWORD(a3) & 0xFFFFF;
  }
  unsigned int v17 = v9;
  unsigned int v18 = LODWORD(a3);
  if (LODWORD(a3))
  {
    int v10 = __lo0bits_D2A(&v18);
    unsigned int v11 = v9 << -(char)v10;
    unsigned int v12 = v9 >> v10;
    if (!v10) {
      unsigned int v11 = 0;
    }
    v7[6] = v18 | v11;
    v7[7] = v12;
    if (v12) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
    v7[5] = v6;
    if (v8) {
      goto LABEL_11;
    }
LABEL_13:
    *a1 = v10 - 1074;
    int v13 = 32 * v6 - __hi0bits_D2A(v7[v6 - 1 + 6]);
    goto LABEL_14;
  }
  int v14 = __lo0bits_D2A(&v17);
  unsigned int v15 = v17;
  v7[5] = 1;
  v7[6] = v15;
  int v10 = v14 + 32;
  if (!v8) {
    goto LABEL_13;
  }
LABEL_11:
  *a1 = v8 + v10 - 1075;
  int v13 = 53 - v10;
LABEL_14:
  *a2 = v13;
  return v7;
}

uint64_t __lo0bits_D2A(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if ((*a1 & 7) != 0)
  {
    if ((v1 & 1) == 0)
    {
      unsigned int v2 = v1 >> 2;
      if ((v1 & 2) != 0)
      {
        unsigned int v2 = v1 >> 1;
        uint64_t v3 = 1;
      }
      else
      {
        uint64_t v3 = 2;
      }
      goto LABEL_25;
    }
    return 0;
  }
  else
  {
    if (!(unsigned __int16)*a1) {
      v1 >>= 16;
    }
    int v4 = (16 * ((unsigned __int16)*a1 == 0)) | 8;
    if ((_BYTE)v1) {
      int v4 = 16 * ((unsigned __int16)*a1 == 0);
    }
    else {
      v1 >>= 8;
    }
    unsigned int v5 = v4 | 4;
    if ((v1 & 0xF) != 0)
    {
      unsigned int v5 = v4;
      unsigned int v6 = v1;
    }
    else
    {
      unsigned int v6 = v1 >> 4;
    }
    LODWORD(v3) = v5 | 2;
    if ((v6 & 3) != 0) {
      uint64_t v3 = v5;
    }
    else {
      uint64_t v3 = v3;
    }
    if ((v6 & 3) != 0) {
      unsigned int v2 = v6;
    }
    else {
      unsigned int v2 = v6 >> 2;
    }
    if (v2) {
      goto LABEL_25;
    }
    if (v2 >= 2)
    {
      uint64_t v3 = (v3 + 1);
      v2 >>= 1;
LABEL_25:
      *a1 = v2;
      return v3;
    }
    return 32;
  }
}

_DWORD *__diff_D2A(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 20);
  int v3 = *(_DWORD *)(a1 + 20) - v2;
  if (!v3)
  {
    unint64_t v4 = a1 + 24 + 4 * v2;
    unsigned int v5 = (unsigned int *)(a2 + 4 * v2 + 20);
    while (1)
    {
      unsigned int v7 = *(_DWORD *)(v4 - 4);
      v4 -= 4;
      unsigned int v6 = v7;
      unsigned int v8 = *v5--;
      BOOL v9 = v6 >= v8;
      if (v6 != v8) {
        break;
      }
      if (v4 <= a1 + 24)
      {
        uint64_t result = __Balloc_D2A(0);
        *(void *)(result + 5) = 1;
        return result;
      }
    }
    if (v9) {
      int v3 = 1;
    }
    else {
      int v3 = -1;
    }
  }
  if (v3 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = a2;
  }
  if (v3 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = a1;
  }
  unsigned int v13 = v3 >> 31;
  uint64_t result = __Balloc_D2A(*(_DWORD *)(v11 + 8));
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = result + 6;
  result[4] = v13;
  uint64_t v17 = *(int *)(v11 + 20);
  uint64_t v18 = v12 + 24;
  unint64_t v19 = v12 + 24 + 4 * *(int *)(v12 + 20);
  do
  {
    unint64_t v20 = *(unsigned int *)(v11 + v14 + 24) - (v15 + *(unsigned int *)(v18 + v14));
    uint64_t v15 = HIDWORD(v20) & 1;
    v16[v14 / 4] = v20;
    v14 += 4;
  }
  while (v18 + v14 < v19);
  unint64_t v21 = v11 + 24 + 4 * v17;
  if (v11 + v14 + 24 >= v21)
  {
    int v26 = (char *)&v16[v14 / 4];
  }
  else
  {
    unint64_t v22 = 0;
    do
    {
      unint64_t v23 = *(unsigned int *)(v11 + v22 + v14 + 24) - v15;
      v16[v22 / 4 + v14 / 4] = v23;
      uint64_t v15 = HIDWORD(v23) & 1;
      unint64_t v24 = v22 + 4;
      unint64_t v25 = v11 + v14 + v22 + 28;
      v22 += 4;
    }
    while (v25 < v21);
    int v26 = (char *)&v16[v14 / 4] + v24;
  }
  int v27 = v17 + 1;
  unsigned int v28 = v26 - 4;
  do
  {
    int v29 = *(_DWORD *)v28;
    v28 -= 4;
    --v27;
  }
  while (!v29);
  result[5] = v27;
  return result;
}

uint64_t __hi0bits_D2A(unsigned int a1)
{
  unsigned int v1 = a1 << 16;
  if (a1 >= 0x10000) {
    unsigned int v1 = a1;
  }
  unsigned int v2 = v1 << 8;
  if (HIBYTE(v1))
  {
    unsigned int v2 = v1;
    unsigned int v3 = 16 * (a1 < 0x10000);
  }
  else
  {
    unsigned int v3 = (16 * (a1 < 0x10000)) | 8;
  }
  unsigned int v4 = v2 >> 28;
  if (!(v2 >> 28)) {
    v2 *= 16;
  }
  if (!v4) {
    v3 |= 4u;
  }
  unsigned int v5 = v2 >> 30;
  if (!(v2 >> 30)) {
    v2 *= 4;
  }
  if (v5) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = v3 | 2;
  }
  if ((v2 & 0x80000000) == 0)
  {
    if ((v2 & 0x40000000) != 0) {
      return (result + 1);
    }
    else {
      return 32;
    }
  }
  return result;
}

lldiv_t div(uint64_t __x, uint64_t __y)
{
  if ((int)__x >= 0 && (int)__x % (int)__y < 0) {
    int v2 = __y;
  }
  else {
    int v2 = 0;
  }
  unint64_t v3 = ((int)__x / (int)__y + ((int)__x >= 0 && (int)__x % (int)__y < 0)) | ((unint64_t)((int)__x % (int)__y - v2) << 32);
  result.rem = __y;
  result.quot = v3;
  return result;
}

int asprintf(char **a1, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  unsigned int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (_xlocale *)&__global_locale;
  }
  return vasprintf_l(a1, v5, a2, va);
}

uint64_t _vasprintf(pthread_mutex_t *a1, int a2, void **a3)
{
  long long v16 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  *(_OWORD *)BOOL v9 = 0u;
  long long v8 = 0u;
  long long v14 = (unint64_t)v17;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  v17[0] = 0;
  v17[1] = 850045858;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  DWORD2(v8) = -48632;
  unsigned int v7 = malloc_type_malloc(0x80uLL, 0x33A8D23uLL);
  v9[0] = v7;
  if (v7)
  {
    DWORD1(v8) = 127;
    LODWORD(v9[1]) = 127;
    LOBYTE(v22) = v22 & 0xF8;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t result = __v2printf(a1, a2, (int)&v7);
    if ((result & 0x80000000) == 0)
    {
      *unsigned int v7 = 0;
      *a3 = v9[0];
      return result;
    }
    free(v9[0]);
  }
  *a3 = 0;
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

int vasprintf_l(char **a1, locale_t a2, const char *a3, va_list a4)
{
  return _vasprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (void **)a1);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CFE20](*(void *)&a1, a2, a3, *(void *)&a4, 0, 0);
}

int heapsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  if (__nel < 2) {
    return 0;
  }
  if (!__width)
  {
    *__error() = 22;
    return -1;
  }
  size_t v7 = __nel;
  BOOL v9 = malloc_type_malloc(__width, 0x3778CCC5uLL);
  if (!v9) {
    return -1;
  }
  long long v10 = v9;
  BOOL v40 = (char *)__base;
  long long v11 = (char *)__base - __width;
  size_t v12 = v7 >> 1;
  do
  {
    size_t v41 = v12;
    unint64_t v13 = 2 * v12;
    if (2 * v12 <= v7)
    {
      size_t v14 = v12;
      do
      {
        long long v15 = &v11[v13 * __width];
        if (v13 >= v7)
        {
          unint64_t v17 = v13;
        }
        else
        {
          int v16 = ((uint64_t (*)(char *, char *))__compar)(&v11[v13 * __width], &v15[__width]);
          unint64_t v17 = v13 | (v16 >> 31);
          if (v16 < 0) {
            v15 += __width;
          }
        }
        long long v18 = &v11[v14 * __width];
        if (((int (*)(char *, char *))__compar)(v15, v18) < 1) {
          break;
        }
        size_t v19 = __width;
        do
        {
          char v20 = *v18;
          *v18++ = *v15;
          *v15++ = v20;
          --v19;
        }
        while (v19);
        unint64_t v13 = 2 * v17;
        size_t v14 = v17;
      }
      while (2 * v17 <= v7);
    }
    size_t v12 = v41 - 1;
  }
  while (v41 != 1);
  uint64_t i = v40;
  uint64_t v22 = &v40[__width * (v7 - 1)];
  int v42 = __compar;
  do
  {
    uint64_t v23 = 0;
    do
    {
      v10[v23] = v22[v23];
      ++v23;
    }
    while (__width != v23);
    uint64_t v24 = 0;
    do
    {
      v22[v24] = i[v24];
      ++v24;
    }
    while (__width != v24);
    --v7;
    long long v25 = i;
    if (v7 >= 2)
    {
      unint64_t v26 = 2;
      uint64_t v27 = 1;
      do
      {
        long long v28 = &v11[v26 * __width];
        if (v26 >= v7)
        {
          unint64_t v30 = v26;
        }
        else
        {
          int v29 = ((uint64_t (*)(char *, char *))v42)(&v11[v26 * __width], &v28[__width]);
          unint64_t v30 = v26 | (v29 >> 31);
          if (v29 < 0) {
            v28 += __width;
          }
        }
        int v31 = &v11[v27 * __width];
        size_t v32 = __width;
        do
        {
          char v33 = *v28++;
          *v31++ = v33;
          --v32;
        }
        while (v32);
        unint64_t v26 = 2 * v30;
        uint64_t v27 = v30;
      }
      while (2 * v30 <= v7);
      long long v25 = &v11[v30 * __width];
      int v34 = v25;
      for (i = v40; v30 != 1; long long v25 = &v11[v30 * __width])
      {
        long long v25 = v34;
        v30 >>= 1;
        int v34 = &v11[v30 * __width];
        int v35 = ((uint64_t (*)(unsigned char *, char *))v42)(v10, v34);
        size_t v36 = __width;
        unsigned int v37 = v34;
        if (v35 < 0) {
          break;
        }
        do
        {
          char v38 = *v37++;
          *v25++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    uint64_t v39 = 0;
    do
    {
      v25[v39] = v10[v39];
      ++v39;
    }
    while (__width != v39);
    v22 -= __width;
  }
  while (v7 > 1);
  free(v10);
  return 0;
}

double atof(const char *a1)
{
  uint64_t v1 = __locale_key;
  int v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtod_l(a1, 0, v3);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  uint64_t result = *__stringp;
  if (result)
  {
    unsigned int v4 = result;
    unsigned int v5 = result;
LABEL_3:
    int v7 = *v5++;
    int v6 = v7;
    long long v8 = __delim;
    while (1)
    {
      int v9 = *(unsigned __int8 *)v8;
      if (v9 == v6) {
        break;
      }
      ++v8;
      if (!v9)
      {
        unsigned int v4 = v5;
        goto LABEL_3;
      }
    }
    if (v6) {
      *unsigned int v4 = 0;
    }
    else {
      unsigned int v5 = 0;
    }
    *__stringp = v5;
  }
  return result;
}

int atoi(const char *a1)
{
  uint64_t v1 = __locale_key;
  int v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtol_l(a1, 0, 10, v3);
}

uint64_t strtol_l(const char *a1, char **a2, int a3, locale_t a4)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v7 = (locale_t)&__global_locale;
  }
  else {
    locale_t v7 = a4;
  }
  if (!a4) {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (v7 != (locale_t)-1) {
    locale_t v6 = v7;
  }
  if (!v7) {
    locale_t v6 = (locale_t)&__c_locale;
  }
  long long v8 = a1;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
    long long v11 = &_DefaultRuneLocale;
    if (v10 < 0) {
      long long v11 = *(_RuneLocale **)(*((void *)v6 + 166) + 120);
    }
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    char v13 = *v8++;
    char v12 = v13;
  }
  else
  {
    char v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    BOOL v16 = a3 == 0;
    if (v12 != 48)
    {
      int v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      char v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (unsigned int v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        unsigned int v15 = 16;
        goto LABEL_34;
      }
    }
    BOOL v16 = a3 == 0;
    char v12 = 48;
  }
  int v17 = 8;
LABEL_29:
  if (v16) {
    unsigned int v15 = v17;
  }
  else {
    unsigned int v15 = a3;
  }
  if (v15 - 37 < 0xFFFFFFDD)
  {
    unint64_t v18 = 0;
LABEL_58:
    *__error() = 22;
    int v25 = 1;
    unint64_t v20 = v18;
    if (!a2) {
      return v20;
    }
    goto LABEL_59;
  }
LABEL_34:
  unint64_t v18 = 0;
  int v19 = 0;
  if (v9 == 45) {
    unint64_t v20 = 0x8000000000000000;
  }
  else {
    unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v21 = v20 / v15;
  while (1)
  {
    unsigned __int8 v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u) {
          break;
        }
        unsigned __int8 v22 = v12 - 87;
      }
      else
      {
        unsigned __int8 v22 = v12 - 55;
      }
    }
    if ((int)v15 <= v22) {
      break;
    }
    int v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        unint64_t v18 = v20 / v15;
      }
      else
      {
        unint64_t v18 = v18 * v15 + v22;
        int v23 = 1;
      }
    }
    char v24 = *v8++;
    char v12 = v24;
    int v19 = v23;
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      int v25 = 0;
      if (v9 == 45) {
        unint64_t v20 = -(uint64_t)v18;
      }
      else {
        unint64_t v20 = v18;
      }
      if (!a2) {
        return v20;
      }
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  long long v28 = __error();
  int v25 = 0;
  *long long v28 = 34;
  if (!a2) {
    return v20;
  }
LABEL_59:
  unint64_t v26 = (char *)(v8 - 1);
  if (v25) {
    unint64_t v26 = (char *)a1;
  }
  *a2 = v26;
  return v20;
}

lldiv_t lldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 / a2;
  uint64_t v3 = (a1 >= 0) & (a1 % a2 < 0);
  if (a1 >= 0 && a1 % a2 < 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = a1 % a2 - v4;
  uint64_t v6 = v2 + v3;
  result.rem = v5;
  result.quot = v6;
  return result;
}

int mkpath_np(const char *path, mode_t omode)
{
  return _mkpath(-2, (char *)path, omode, 0);
}

uint64_t _mkpath_np(char *a1, mode_t a2, char **a3)
{
  return _mkpath(-2, a1, a2, a3);
}

uint64_t strtoll_l(const char *a1, char **a2, int a3, locale_t a4)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v7 = (locale_t)&__global_locale;
  }
  else {
    locale_t v7 = a4;
  }
  if (!a4) {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (v7 != (locale_t)-1) {
    locale_t v6 = v7;
  }
  if (!v7) {
    locale_t v6 = (locale_t)&__c_locale;
  }
  long long v8 = a1;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
    long long v11 = &_DefaultRuneLocale;
    if (v10 < 0) {
      long long v11 = *(_RuneLocale **)(*((void *)v6 + 166) + 120);
    }
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    char v13 = *v8++;
    char v12 = v13;
  }
  else
  {
    char v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    BOOL v16 = a3 == 0;
    if (v12 != 48)
    {
      int v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      char v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (unsigned int v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        unsigned int v15 = 16;
        goto LABEL_34;
      }
    }
    BOOL v16 = a3 == 0;
    char v12 = 48;
  }
  int v17 = 8;
LABEL_29:
  if (v16) {
    unsigned int v15 = v17;
  }
  else {
    unsigned int v15 = a3;
  }
  if (v15 - 37 < 0xFFFFFFDD)
  {
    unint64_t v18 = 0;
LABEL_58:
    *__error() = 22;
    int v25 = 1;
    unint64_t v20 = v18;
    if (!a2) {
      return v20;
    }
    goto LABEL_59;
  }
LABEL_34:
  unint64_t v18 = 0;
  int v19 = 0;
  if (v9 == 45) {
    unint64_t v20 = 0x8000000000000000;
  }
  else {
    unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v21 = v20 / v15;
  while (1)
  {
    unsigned __int8 v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u) {
          break;
        }
        unsigned __int8 v22 = v12 - 87;
      }
      else
      {
        unsigned __int8 v22 = v12 - 55;
      }
    }
    if ((int)v15 <= v22) {
      break;
    }
    int v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        unint64_t v18 = v20 / v15;
      }
      else
      {
        unint64_t v18 = v18 * v15 + v22;
        int v23 = 1;
      }
    }
    char v24 = *v8++;
    char v12 = v24;
    int v19 = v23;
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      int v25 = 0;
      if (v9 == 45) {
        unint64_t v20 = -(uint64_t)v18;
      }
      else {
        unint64_t v20 = v18;
      }
      if (!a2) {
        return v20;
      }
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  long long v28 = __error();
  int v25 = 0;
  *long long v28 = 34;
  if (!a2) {
    return v20;
  }
LABEL_59:
  unint64_t v26 = (char *)(v8 - 1);
  if (v25) {
    unint64_t v26 = (char *)a1;
  }
  *a2 = v26;
  return v20;
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  size_t v3 = 0;
  if (__n)
  {
    while (__s1[v3])
    {
      if (__n == ++v3)
      {
        size_t v3 = __n;
        break;
      }
    }
  }
  uint64_t v4 = (char *)malloc_type_malloc(v3 + 1, 0x66D67095uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    j__mkdtempat_np((int)v4, (char *)__s1);
    v5[v3] = 0;
  }
  return v5;
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  if (!__nel) {
    return 0;
  }
  size_t v7 = __nel;
  while (1)
  {
    int v10 = (char *)__base + (v7 >> 1) * __width;
    int v11 = (*((uint64_t (**)(void *, const void *, char *))__compar + 2))(__compar, __key, v10);
    if (!v11) {
      break;
    }
    if (v11 > 0) {
      __base = &v10[__width];
    }
    unint64_t v12 = v7 - (v11 > 0);
    size_t v7 = v12 >> 1;
    if (v12 <= 1) {
      return 0;
    }
  }
  return v10;
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  uint64_t v2 = __locale_key;
  size_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return strcasestr_l(__big, __little, v4);
}

char *__cdecl ctime(const time_t *a1)
{
  lldiv_t result = (char *)localtime(a1);
  if (result)
  {
    return asctime((const tm *)result);
  }
  return result;
}

char *__evpinit()
{
  __loadevp("STDBUF");
  __loadevp("STDBUF0");
  __loadevp("STDBUF1");
  __loadevp("STDBUF2");
  __loadevp("_STDBUF_I");
  __loadevp("_STDBUF_O");

  return __loadevp("_STDBUF_E");
}

char *__loadevp(const char *a1)
{
  lldiv_t result = getenv(a1);
  if (result)
  {
    JUMPOUT(0x18C122F90);
  }
  return result;
}

uint64_t gmtsub(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  notify_check_tz((unsigned int *)&gmt_notify);
  pthread_once(&gmt_once, (void (*)(void))gmt_init);
  uint64_t result = timesub(a1, a2, (unsigned int *)gmtptr, a3);
  if (result)
  {
    if (gmtptr) {
      size_t v7 = (const char *)(gmtptr + 16968);
    }
    else {
      size_t v7 = "UTC";
    }
    if (a2) {
      size_t v7 = (const char *)&wildabbr;
    }
    *(void *)(a3 + 48) = v7;
  }
  return result;
}

tm *__cdecl localtime(const time_t *a1)
{
  pthread_once(&localtime_once, (void (*)(void))localtime_key_init);
  int v2 = localtime_key_error;
  if (localtime_key_error)
  {
    *__error() = v2;
    return 0;
  }
  if (localtime_key) {
    pthread_key_t v4 = 12;
  }
  else {
    pthread_key_t v4 = 0;
  }
  uint64_t v5 = pthread_getspecific(v4);
  if (!v5)
  {
    locale_t v6 = malloc_type_malloc(0x38uLL, 0x10100404E507D7FuLL);
    if (!v6) {
      return 0;
    }
    uint64_t v5 = v6;
    if (localtime_key) {
      pthread_key_t v7 = 12;
    }
    else {
      pthread_key_t v7 = 0;
    }
    pthread_setspecific(v7, v5);
  }
  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  long long v8 = (tm *)_st_localsub((uint64_t *)a1, 0, (uint64_t)v5);
  pthread_rwlock_unlock(&lcl_rwlock);
  return v8;
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  memset(&v4, 0, sizeof(v4));
  uint64_t result = (char *)localtime_r(a1, &v4);
  if (result) {
    return asctime_r(&v4, a2);
  }
  return result;
}

char *__cdecl asctime_r(const tm *a1, char *a2)
{
  uint64_t tm_wday = a1->tm_wday;
  if (tm_wday <= 6) {
    tm v4 = (char *)&asctime_r_wday_name + 3 * tm_wday;
  }
  else {
    tm v4 = "???";
  }
  strftime_l(v13, 0xDuLL, "%Y", a1, 0);
  if ((unint64_t)j__strsignal_r((int)v13, v5, v6) >= 5) {
    sprintf(__little, "%.3s %.3s%3d %2.2d:%2.2d:%2.2d     %s\n", v4);
  }
  else {
    sprintf(__little, "%.3s %.3s%3d %2.2d:%2.2d:%2.2d %-4s\n", v4);
  }
  unint64_t v9 = j__strsignal_r((int)__little, v7, v8);
  if (a2 == (char *)&buf_asctime || v9 <= 0x19)
  {
    j__strnstr(a2, __little, v10);
  }
  else
  {
    a2 = 0;
    *__error() = 84;
  }
  return a2;
}

unsigned char *_yconv(int a1, int a2, int a3, int a4, unsigned char *a5, unsigned char *a6, locale_t a7)
{
  unint64_t v9 = a5;
  int v11 = 5243 * (__int16)(a2 % 100 + a1 % 100);
  int v12 = (v11 >> 19) + (v11 >> 31);
  int v13 = a2 / 100 + a1 / 100 + v12;
  int v14 = a2 % 100 + a1 % 100 - 100 * v12;
  int v15 = (__int16)(a2 % 100 + a1 % 100 - 100 * v12);
  if ((v14 & 0x8000) != 0 && (int v16 = v13 - 1, v13 >= 1))
  {
    int v17 = v15 + 100;
    if (!a3) {
      goto LABEL_30;
    }
  }
  else
  {
    if (v13 >= 0) {
      int v18 = v13;
    }
    else {
      int v18 = v13 + 1;
    }
    if (v13 < 0) {
      int v19 = v15 - 100;
    }
    else {
      int v19 = v15;
    }
    if (v15 >= 1) {
      int v16 = v18;
    }
    else {
      int v16 = v13;
    }
    if (v15 >= 1) {
      int v17 = v19;
    }
    else {
      int v17 = v15;
    }
    if (!a3) {
      goto LABEL_30;
    }
  }
  if (v16 || (v17 & 0x80000000) == 0)
  {
    sprintf_l(v29, a7, "%02d", v16);
    if (v9 < a6)
    {
      uint64_t v21 = a6 - v9;
      unsigned __int8 v22 = v29;
      while (1)
      {
        int v23 = *v22;
        *unint64_t v9 = v23;
        if (!v23) {
          break;
        }
        ++v22;
        ++v9;
        if (!--v21)
        {
LABEL_29:
          unint64_t v9 = a6;
          break;
        }
      }
    }
LABEL_30:
    if (!a4) {
      return v9;
    }
    goto LABEL_31;
  }
  if (a5 >= a6) {
    goto LABEL_30;
  }
  uint64_t v20 = 0;
  while (1)
  {
    a5[v20] = a0_1[v20];
    if (v20 == 2) {
      break;
    }
    if (a6 - a5 == ++v20) {
      goto LABEL_29;
    }
  }
  unint64_t v9 = a5 + 2;
  if (a4)
  {
LABEL_31:
    if (v17 >= 0) {
      int v24 = v17;
    }
    else {
      int v24 = -v17;
    }
    sprintf_l(v29, a7, "%02d", v24);
    if (v9 < a6)
    {
      uint64_t v25 = a6 - v9;
      for (uint64_t i = v29; ; ++i)
      {
        int v27 = *i;
        *unint64_t v9 = v27;
        if (!v27) {
          break;
        }
        ++v9;
        if (!--v25) {
          return a6;
        }
      }
    }
  }
  return v9;
}

size_t strftime_l(char *a1, size_t a2, const char *a3, const tm *a4, locale_t a5)
{
  locale_t v9 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1) {
    locale_t v9 = a5;
  }
  if (a5) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = (_xlocale *)&__c_locale;
  }
  tzset();
  int v18 = 0;
  if (a3) {
    int v11 = (char *)a3;
  }
  else {
    int v11 = "%c";
  }
  int v12 = &a1[a2];
  current_time_locale = __get_current_time_locale((uint64_t)v10);
  int v14 = _st_fmt(v11, (unsigned int *)a4, a1, v12, &v18, current_time_locale, v10);
  if (v18 && getenv("CHECK_STRFTIME_FORMATS_FOR_TWO_DIGIT_YEARS"))
  {
    fputs("\n", __stderrp);
    if (a3) {
      fprintf_l(__stderrp, v10, "strftime format \"%s\" ", a3);
    }
    else {
      fputs("NULL strftime format ", __stderrp);
    }
    fputs("yields only two digits of years in ", __stderrp);
    int v15 = "all locales";
    if (v18 == 2) {
      int v15 = "the current locale";
    }
    if (v18 == 1) {
      int v16 = "some locales";
    }
    else {
      int v16 = v15;
    }
    fputs(v16, __stderrp);
    fputs("\n", __stderrp);
  }
  if (v14 == v12) {
    return 0;
  }
  char *v14 = 0;
  return v14 - a1;
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  tm v4 = (tm *)_st_localsub((uint64_t *)a1, 0, (uint64_t)a2);
  pthread_rwlock_unlock(&lcl_rwlock);
  return v4;
}

uint64_t _st_tzset_basic(int a1)
{
  int v2 = getenv("TZ");
  if (v2)
  {
    size_t v3 = v2;
    notify_check_tz((unsigned int *)&lcl_notify);
    if (!a1) {
      pthread_rwlock_rdlock(&lcl_rwlock);
    }
    if (dword_1EB1CC3A4 < 1 || (uint64_t result = j__strncasecmp_l(lcl_TZname, v3, v4, v5), result))
    {
      pthread_rwlock_unlock(&lcl_rwlock);
      pthread_rwlock_wrlock(&lcl_rwlock);
      unint64_t v9 = j__strsignal_r((int)v3, v7, v8);
      dword_1EB1CC3A4 = v9 < 0x100;
      if (v9 <= 0xFF) {
        j__strnstr(lcl_TZname, v3, v10);
      }
      int v11 = (char *)lclptr;
      if (lclptr
        || (int v11 = (char *)malloc_type_calloc(1uLL, 0x4768uLL, 0x10000402151C985uLL), (lclptr = (uint64_t)v11) != 0))
      {
        if (*v3)
        {
          int v12 = v16;
          if (tzload(v3, (uint64_t)v11, v16, 1))
          {
            if (*v3 == 58 || tzparse((char **)v3, lclptr, 0))
            {
              int v12 = v16;
              if (v16[0]) {
                int v15 = 0;
              }
              else {
                int v15 = v16;
              }
              gmtload(lclptr, v15);
            }
            else
            {
              int v12 = 0;
            }
          }
          notify_register_tz((unint64_t)v12, &lcl_notify, v13, v14);
        }
        else
        {
          *(void *)int v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          *(_OWORD *)(v11 + 10824) = 0u;
          *((_DWORD *)v11 + 4242) = 4412501;
          if (*MEMORY[0x1E4F14C40])
          {
            if ((lcl_notify & 0x80000000) == 0) {
              notify_cancel(lcl_notify);
            }
            lcl_notify = -1;
          }
        }
        settzname();
        uint64_t result = pthread_rwlock_unlock(&lcl_rwlock);
        if (a1) {
          return pthread_rwlock_rdlock(&lcl_rwlock);
        }
      }
      else
      {
        settzname();
        uint64_t result = pthread_rwlock_unlock(&lcl_rwlock);
        if (a1)
        {
          return pthread_rwlock_rdlock(&lcl_rwlock);
        }
      }
    }
    else if (!a1)
    {
      return pthread_rwlock_unlock(&lcl_rwlock);
    }
  }
  else
  {
    return tzsetwall_basic(a1);
  }
  return result;
}

char *__cdecl getenv(const char *a1)
{
  os_unfair_lock_lock_with_options();
  int v2 = (char **)_NSGetEnviron();
  size_t v3 = __findenv_locked(a1, &v5, *v2);
  os_unfair_lock_unlock((os_unfair_lock_t)&__environ_lock_obj);
  return v3;
}

char ***_NSGetEnviron(void)
{
  return (char ***)environ_pointer;
}

unsigned char *__findenv_locked(unsigned char *a1, _DWORD *a2, char *a3)
{
  size_t v3 = 0;
  if (a1 && a3)
  {
    int v4 = 1;
    for (uint64_t i = a1; *i && *i != 61; ++i)
      --v4;
    size_t v6 = *(unsigned char **)a3;
    if (*(void *)a3)
    {
      pthread_key_t v7 = a3;
      do
      {
        if (v4 == 1)
        {
LABEL_16:
          if (*v6 == 61)
          {
            size_t v3 = v6 + 1;
            *a2 = (unint64_t)(v7 - a3) >> 3;
            return v3;
          }
        }
        else
        {
          uint64_t v8 = (uint64_t)&v6[-v4 + 1];
          int v9 = v4 - 1;
          size_t v10 = a1;
          while (*v6 && *v6 == *v10)
          {
            ++v6;
            ++v10;
            if (__CFADD__(v9++, 1))
            {
              size_t v6 = (unsigned char *)v8;
              goto LABEL_16;
            }
          }
        }
        int v12 = (unsigned char *)*((void *)v7 + 1);
        v7 += 8;
        size_t v6 = v12;
      }
      while (v12);
    }
    return 0;
  }
  return v3;
}

uint64_t tzsetwall_basic(int a1)
{
  if (*MEMORY[0x1E4F14C40])
  {
    uint64_t result = notify_check_tz((unsigned int *)&lcl_notify);
    if (!a1) {
      goto LABEL_13;
    }
LABEL_6:
    if (dword_1EB1CC3A4 < 0) {
      return result;
    }
    goto LABEL_14;
  }
  memset(v7, 0, 144);
  uint64_t result = lstat("/var/db/timezone/localtime", v7);
  if (result)
  {
    if (!a1) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  if (v7[0].st_mtimespec.tv_sec > (uint64_t)last_default_tzload_mtimespec
    || v7[0].st_mtimespec.tv_sec == (void)last_default_tzload_mtimespec
    && v7[0].st_mtimespec.tv_nsec > *((uint64_t *)&last_default_tzload_mtimespec + 1))
  {
    dword_1EB1CC3A4 = 0;
  }
  last_default_tzload_mtimespec = (__int128)v7[0].st_mtimespec;
  if (a1) {
    goto LABEL_6;
  }
LABEL_13:
  pthread_rwlock_rdlock(&lcl_rwlock);
  if (dword_1EB1CC3A4 < 0) {
    return pthread_rwlock_unlock(&lcl_rwlock);
  }
LABEL_14:
  pthread_rwlock_unlock(&lcl_rwlock);
  pthread_rwlock_wrlock(&lcl_rwlock);
  dword_1EB1CC3A4 = -1;
  size_t v3 = (void *)lclptr;
  if (lclptr || (size_t v3 = malloc_type_calloc(1uLL, 0x4768uLL, 0x10000402151C985uLL), (lclptr = (uint64_t)v3) != 0))
  {
    if (tzload(0, (uint64_t)v3, (const char *)v7, 1))
    {
      last_default_tzload_mtimespec = 0uLL;
      if (LOBYTE(v7[0].st_dev)) {
        size_t v6 = 0;
      }
      else {
        size_t v6 = (const char *)v7;
      }
      gmtload(lclptr, v6);
    }
    notify_register_tz((unint64_t)v7, &lcl_notify, v4, v5);
  }
  settzname();
  uint64_t result = pthread_rwlock_unlock(&lcl_rwlock);
  if (a1) {
    return pthread_rwlock_rdlock(&lcl_rwlock);
  }
  return result;
}

uint64_t notify_check_tz(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((result & 0x80000000) == 0)
  {
    int check = 0;
    uint64_t result = notify_check(result, &check);
    if (result | check) {
      a1[1] = 0;
    }
  }
  return result;
}

unsigned char *_st_fmt(unsigned char *a1, unsigned int *a2, unsigned char *a3, unsigned char *a4, int *a5, void *a6, _xlocale *a7)
{
  int v14 = a6 + 44;
  int v15 = a6 + 12;
  while (*a1 == 37)
  {
    int v16 = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    char v19 = 1;
    while (2)
    {
      switch(*++a1)
      {
        case '+':
          unsigned int v43 = (const char *)a6[43];
          goto LABEL_173;
        case ',':
        case '.':
        case '/':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'J':
        case 'K':
        case 'L':
        case 'N':
        case 'P':
        case 'Q':
        case '[':
        case '\\':
        case ']':
        case '^':
        case 'f':
        case 'i':
        case 'o':
        case 'q':
          goto LABEL_4;
        case '-':
          if (v18) {
            goto LABEL_4;
          }
          uint64_t v18 = 1;
          continue;
        case '0':
          if (v18) {
            goto LABEL_4;
          }
          uint64_t v18 = 3;
          continue;
        case 'A':
          uint64_t v44 = a2[6];
          if (v44 <= 6) {
            double v45 = (const char *)a6[v44 + 31];
          }
          else {
            double v45 = "?";
          }
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v119 = a4 - a3;
          while (1)
          {
            int v120 = *(unsigned __int8 *)v45;
            *a3 = v120;
            if (!v120) {
              goto LABEL_244;
            }
            ++v45;
            ++a3;
            if (!--v119) {
              goto LABEL_243;
            }
          }
        case 'B':
          uint64_t v46 = a2[4];
          if (v46 <= 0xB)
          {
            if (v19) {
              uint64_t v121 = v15;
            }
            else {
              uint64_t v121 = v14;
            }
            double v47 = (const char *)v121[v46];
          }
          else
          {
            double v47 = "?";
          }
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v122 = a4 - a3;
          while (1)
          {
            int v123 = *(unsigned __int8 *)v47;
            *a3 = v123;
            if (!v123) {
              goto LABEL_244;
            }
            ++v47;
            ++a3;
            if (!--v122) {
              goto LABEL_243;
            }
          }
        case 'C':
          int v24 = a2[5];
          int v26 = 1900;
          int v48 = 1;
          int v49 = 0;
          goto LABEL_198;
        case 'D':
          unsigned int v43 = "%m/%d/%y";
          goto LABEL_173;
        case 'E':
          char v19 = 1;
          int v20 = v16 | v17;
          int v17 = 0;
          int v16 = 1;
          if (v20) {
            goto LABEL_4;
          }
          continue;
        case 'F':
          unsigned int v43 = "%Y-%m-%d";
          goto LABEL_173;
        case 'G':
        case 'V':
        case 'g':
          int v22 = *a1;
          int v23 = a2[7];
          int v24 = a2[5];
          int v25 = v24 % 400;
          int v26 = 1901;
          while (2)
          {
            int v27 = (v26 - 1) % 400 + v25;
            int v28 = 365;
            if ((v27 & 3) == 0)
            {
              __int16 v29 = 23593 * v27;
              if ((unsigned __int16)(((v29 + 1296) << 12) | ((unsigned __int16)(v29 + 1296) >> 4)) < 0xA3u
                || (unsigned __int16)(((v29 + 1308) << 14) | ((unsigned __int16)(v29 + 1308) >> 2)) > 0x28Eu)
              {
                int v28 = 366;
              }
              else
              {
                int v28 = 365;
              }
            }
            int v31 = (int)(v23 - a2[6] + 11) % 7 - 3;
            int v32 = v31
                - (unsigned __int16)(v28
                                   - 7
                                   * ((((unsigned __int16)(v28 - ((9363 * (unsigned __int16)v28) >> 16)) >> 1)
                                     + ((9363 * (unsigned __int16)v28) >> 16)) >> 2));
            if (v32 < -3) {
              v32 += 7;
            }
            if (v23 >= v32 + v28)
            {
              uint64_t v39 = 1;
            }
            else
            {
              if (v23 < v31)
              {
                int v33 = (v26 - 2) % 400 + v25;
                int v34 = 365;
                if ((v33 & 3) == 0)
                {
                  __int16 v35 = 23593 * v33;
                  if ((unsigned __int16)(((v35 + 1296) << 12) | ((unsigned __int16)(v35 + 1296) >> 4)) < 0xA3u
                    || (unsigned __int16)(((v35 + 1308) << 14) | ((unsigned __int16)(v35 + 1308) >> 2)) > 0x28Eu)
                  {
                    int v34 = 366;
                  }
                  else
                  {
                    int v34 = 365;
                  }
                }
                v23 += v34;
                --v26;
                continue;
              }
              uint64_t v39 = ((v23 - v31) / 7 + 1);
              --v26;
            }
            break;
          }
          if (v22 == 103)
          {
            *a5 = 3;
LABEL_195:
            int v48 = 0;
            goto LABEL_197;
          }
          if (v22 != 86)
          {
LABEL_196:
            int v48 = 1;
LABEL_197:
            int v49 = 1;
LABEL_198:
            int v110 = _yconv(v24, v26, v48, v49, a3, a4, a7);
LABEL_199:
            a3 = v110;
            goto LABEL_244;
          }
          sprintf_l((char *)&v139, a7, fmt_padding[v18], v39);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v40 = a4 - a3;
          size_t v41 = &v139;
          do
          {
            tm_sec_loint w = LOBYTE(v41->tm_sec);
            *a3 = tm_sec_low;
            if (!tm_sec_low) {
              goto LABEL_244;
            }
            size_t v41 = (tm *)((char *)v41 + 1);
            ++a3;
            --v40;
          }
          while (v40);
LABEL_243:
          a3 = a4;
LABEL_244:
          ++a1;
          break;
        case 'H':
          sprintf_l((char *)&v139, a7, fmt_padding[v18], a2[2]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v50 = a4 - a3;
          double v51 = &v139;
          while (1)
          {
            int v52 = LOBYTE(v51->tm_sec);
            *a3 = v52;
            if (!v52) {
              goto LABEL_244;
            }
            double v51 = (tm *)((char *)v51 + 1);
            ++a3;
            if (!--v50) {
              goto LABEL_243;
            }
          }
        case 'I':
          LODWORD(v53) = (int)a2[2] % 12;
          if (v53) {
            uint64_t v53 = v53;
          }
          else {
            uint64_t v53 = 12;
          }
          sprintf_l((char *)&v139, a7, fmt_padding[v18], v53);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v54 = a4 - a3;
          int v55 = &v139;
          while (1)
          {
            int v56 = LOBYTE(v55->tm_sec);
            *a3 = v56;
            if (!v56) {
              goto LABEL_244;
            }
            int v55 = (tm *)((char *)v55 + 1);
            ++a3;
            if (!--v54) {
              goto LABEL_243;
            }
          }
        case 'M':
          sprintf_l((char *)&v139, a7, fmt_padding[v18], a2[1]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v57 = a4 - a3;
          int v58 = &v139;
          while (1)
          {
            int v59 = LOBYTE(v58->tm_sec);
            *a3 = v59;
            if (!v59) {
              goto LABEL_244;
            }
            int v58 = (tm *)((char *)v58 + 1);
            ++a3;
            if (!--v57) {
              goto LABEL_243;
            }
          }
        case 'O':
          char v19 = 0;
          int v21 = v16 | v17;
          int v16 = 0;
          int v17 = 1;
          if (v21) {
            goto LABEL_4;
          }
          continue;
        case 'R':
          unsigned int v43 = "%H:%M";
          goto LABEL_173;
        case 'S':
          sprintf_l((char *)&v139, a7, fmt_padding[v18], *a2);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v60 = a4 - a3;
          int v61 = &v139;
          while (1)
          {
            int v62 = LOBYTE(v61->tm_sec);
            *a3 = v62;
            if (!v62) {
              goto LABEL_244;
            }
            int v61 = (tm *)((char *)v61 + 1);
            ++a3;
            if (!--v60) {
              goto LABEL_243;
            }
          }
        case 'T':
          unsigned int v43 = "%H:%M:%S";
          goto LABEL_173;
        case 'U':
          sprintf_l((char *)&v139, a7, fmt_padding[v18], ((int)(a2[7] - a2[6] + 7) / 7));
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v63 = a4 - a3;
          double v64 = &v139;
          while (1)
          {
            int v65 = LOBYTE(v64->tm_sec);
            *a3 = v65;
            if (!v65) {
              goto LABEL_244;
            }
            double v64 = (tm *)((char *)v64 + 1);
            ++a3;
            if (!--v63) {
              goto LABEL_243;
            }
          }
        case 'W':
          unsigned int v66 = a2[6];
          if (v66) {
            int v67 = 1 - v66;
          }
          else {
            int v67 = -6;
          }
          sprintf_l((char *)&v139, a7, fmt_padding[v18], ((int)(a2[7] + v67 + 7) / 7));
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v68 = a4 - a3;
          BOOL v69 = &v139;
          while (1)
          {
            int v70 = LOBYTE(v69->tm_sec);
            *a3 = v70;
            if (!v70) {
              goto LABEL_244;
            }
            BOOL v69 = (tm *)((char *)v69 + 1);
            ++a3;
            if (!--v68) {
              goto LABEL_243;
            }
          }
        case 'X':
          unsigned int v43 = (const char *)a6[38];
          goto LABEL_173;
        case 'Y':
          int v24 = a2[5];
          int v26 = 1900;
          goto LABEL_196;
        case 'Z':
          double v71 = (unsigned __int8 *)*((void *)a2 + 6);
          if (v71)
          {
            if (a3 >= a4) {
              goto LABEL_244;
            }
            uint64_t v72 = a4 - a3;
            do
            {
              int v73 = *v71;
              *a3 = v73;
              if (!v73) {
                goto LABEL_244;
              }
              ++v71;
              ++a3;
              --v72;
            }
            while (v72);
          }
          else
          {
            unsigned int v126 = a2[8];
            if ((v126 & 0x80000000) != 0 || a3 >= a4) {
              goto LABEL_244;
            }
            int v127 = tzname[v126 != 0];
            uint64_t v128 = a4 - a3;
            do
            {
              int v129 = *v127;
              *a3 = v129;
              if (!v129) {
                goto LABEL_244;
              }
              ++v127;
              ++a3;
              --v128;
            }
            while (v128);
          }
          goto LABEL_243;
        case '_':
          if (v18) {
            goto LABEL_4;
          }
          uint64_t v18 = 2;
          continue;
        case 'a':
          uint64_t v74 = a2[6];
          if (v74 <= 6) {
            int v75 = (const char *)a6[v74 + 24];
          }
          else {
            int v75 = "?";
          }
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v124 = a4 - a3;
          while (1)
          {
            int v125 = *(unsigned __int8 *)v75;
            *a3 = v125;
            if (!v125) {
              goto LABEL_244;
            }
            ++v75;
            ++a3;
            if (!--v124) {
              goto LABEL_243;
            }
          }
        case 'b':
        case 'h':
          uint64_t v37 = a2[4];
          if (v37 <= 0xB) {
            char v38 = (const char *)a6[v37];
          }
          else {
            char v38 = "?";
          }
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v117 = a4 - a3;
          while (1)
          {
            int v118 = *(unsigned __int8 *)v38;
            *a3 = v118;
            if (!v118) {
              goto LABEL_244;
            }
            ++v38;
            ++a3;
            if (!--v117) {
              goto LABEL_243;
            }
          }
        case 'c':
          v139.int tm_sec = 1;
          uint64_t v76 = a6[40];
          goto LABEL_180;
        case 'd':
          sprintf_l((char *)&v139, a7, fmt_padding[v18], a2[3]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v77 = a4 - a3;
          int v78 = &v139;
          while (1)
          {
            int v79 = LOBYTE(v78->tm_sec);
            *a3 = v79;
            if (!v79) {
              goto LABEL_244;
            }
            int v78 = (tm *)((char *)v78 + 1);
            ++a3;
            if (!--v77) {
              goto LABEL_243;
            }
          }
        case 'e':
          sprintf_l((char *)&v139, a7, fmt_padding[v18 + 4], a2[3]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v80 = a4 - a3;
          int v81 = &v139;
          while (1)
          {
            int v82 = LOBYTE(v81->tm_sec);
            *a3 = v82;
            if (!v82) {
              goto LABEL_244;
            }
            int v81 = (tm *)((char *)v81 + 1);
            ++a3;
            if (!--v80) {
              goto LABEL_243;
            }
          }
        case 'j':
          sprintf_l((char *)&v139, a7, fmt_padding[v18 + 8], a2[7] + 1);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v83 = a4 - a3;
          double v84 = &v139;
          while (1)
          {
            int v85 = LOBYTE(v84->tm_sec);
            *a3 = v85;
            if (!v85) {
              goto LABEL_244;
            }
            double v84 = (tm *)((char *)v84 + 1);
            ++a3;
            if (!--v83) {
              goto LABEL_243;
            }
          }
        case 'k':
          sprintf_l((char *)&v139, a7, fmt_padding[v18 + 4], a2[2]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v86 = a4 - a3;
          int v87 = &v139;
          while (1)
          {
            int v88 = LOBYTE(v87->tm_sec);
            *a3 = v88;
            if (!v88) {
              goto LABEL_244;
            }
            int v87 = (tm *)((char *)v87 + 1);
            ++a3;
            if (!--v86) {
              goto LABEL_243;
            }
          }
        case 'l':
          LODWORD(v89) = (int)a2[2] % 12;
          if (v89) {
            uint64_t v89 = v89;
          }
          else {
            uint64_t v89 = 12;
          }
          sprintf_l((char *)&v139, a7, fmt_padding[v18 + 4], v89);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v90 = a4 - a3;
          unint64_t v91 = &v139;
          while (1)
          {
            int v92 = LOBYTE(v91->tm_sec);
            *a3 = v92;
            if (!v92) {
              goto LABEL_244;
            }
            unint64_t v91 = (tm *)((char *)v91 + 1);
            ++a3;
            if (!--v90) {
              goto LABEL_243;
            }
          }
        case 'm':
          sprintf_l((char *)&v139, a7, fmt_padding[v18], a2[4] + 1);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v93 = a4 - a3;
          char v94 = &v139;
          while (1)
          {
            int v95 = LOBYTE(v94->tm_sec);
            *a3 = v95;
            if (!v95) {
              goto LABEL_244;
            }
            char v94 = (tm *)((char *)v94 + 1);
            ++a3;
            if (!--v93) {
              goto LABEL_243;
            }
          }
        case 'n':
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v96 = 0;
          while (1)
          {
            a3[v96] = asc_18AA01BE9[v96];
            if (v96 == 1) {
              goto LABEL_200;
            }
            if (a4 - a3 == ++v96) {
              goto LABEL_243;
            }
          }
        case 'p':
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v97 = 41;
          if ((int)a2[2] > 11) {
            uint64_t v97 = 42;
          }
          size_t v98 = (unsigned __int8 *)a6[v97];
          uint64_t v99 = a4 - a3;
          while (1)
          {
            int v100 = *v98;
            *a3 = v100;
            if (!v100) {
              goto LABEL_244;
            }
            ++v98;
            ++a3;
            if (!--v99) {
              goto LABEL_243;
            }
          }
        case 'r':
          unsigned int v43 = (const char *)a6[57];
          goto LABEL_173;
        case 's':
          long long v101 = *((_OWORD *)a2 + 1);
          *(_OWORD *)&v139.int tm_sec = *(_OWORD *)a2;
          *(_OWORD *)&v139.tm_mon = v101;
          *(_OWORD *)&v139.int tm_isdst = *((_OWORD *)a2 + 2);
          v139.tm_zone = (char *)*((void *)a2 + 6);
          time_t v102 = mktime(&v139);
          sprintf_l(v138, a7, "%ld", v102);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v103 = a4 - a3;
          char v104 = v138;
          while (1)
          {
            int v105 = *v104;
            *a3 = v105;
            if (!v105) {
              goto LABEL_244;
            }
            ++v104;
            ++a3;
            if (!--v103) {
              goto LABEL_243;
            }
          }
        case 't':
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v96 = 0;
          while (1)
          {
            a3[v96] = asc_18AA0420E[v96];
            if (v96 == 1) {
              break;
            }
            if (a4 - a3 == ++v96) {
              goto LABEL_243;
            }
          }
LABEL_200:
          a3 += v96;
          goto LABEL_244;
        case 'u':
          int v106 = a2[6];
          if (!v106) {
            int v106 = 7;
          }
          sprintf_l((char *)&v139, a7, "%d", v106);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v107 = a4 - a3;
          int v108 = &v139;
          while (1)
          {
            int v109 = LOBYTE(v108->tm_sec);
            *a3 = v109;
            if (!v109) {
              goto LABEL_244;
            }
            int v108 = (tm *)((char *)v108 + 1);
            ++a3;
            if (!--v107) {
              goto LABEL_243;
            }
          }
        case 'v':
          unsigned int v43 = "%e-%b-%Y";
LABEL_173:
          int v110 = (unsigned char *)_st_fmt(v43, a2, a3, a4, a5, a6, a7);
          goto LABEL_199;
        case 'w':
          sprintf_l((char *)&v139, a7, "%d", a2[6]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v111 = a4 - a3;
          int v112 = &v139;
          while (1)
          {
            int v113 = LOBYTE(v112->tm_sec);
            *a3 = v113;
            if (!v113) {
              goto LABEL_244;
            }
            int v112 = (tm *)((char *)v112 + 1);
            ++a3;
            if (!--v111) {
              goto LABEL_243;
            }
          }
        case 'x':
          v139.int tm_sec = 1;
          uint64_t v76 = a6[39];
LABEL_180:
          a3 = (unsigned char *)_st_fmt(v76, a2, a3, a4, &v139, a6, a7);
          int tm_sec = v139.tm_sec;
          if (v139.tm_sec == 3) {
            int tm_sec = 2;
          }
          if (tm_sec > *a5) {
            *a5 = tm_sec;
          }
          goto LABEL_244;
        case 'y':
          *a5 = 3;
          int v24 = a2[5];
          int v26 = 1900;
          goto LABEL_195;
        case 'z':
          unsigned int v115 = a2[8];
          if ((v115 & 0x80000000) != 0) {
            goto LABEL_244;
          }
          if (v115) {
            int timezone = __darwin_altzone;
          }
          else {
            int timezone = _st_get_timezone();
          }
          if (timezone >= 0) {
            int v130 = timezone;
          }
          else {
            int v130 = -timezone;
          }
          if (a3 >= a4) {
            goto LABEL_239;
          }
          char v131 = "+";
          if (timezone > 0) {
            char v131 = "-";
          }
          uint64_t v132 = a4 - a3;
          while (1)
          {
            int v133 = *(unsigned __int8 *)v131;
            *a3 = v133;
            if (!v133) {
              break;
            }
            ++v131;
            ++a3;
            if (!--v132)
            {
              a3 = a4;
              break;
            }
          }
LABEL_239:
          sprintf_l((char *)&v139, a7, fmt_padding[v18 + 12], (v130 / 60 % 60 + 100 * (v130 / 3600)));
          if (a3 < a4)
          {
            uint64_t v134 = a4 - a3;
            int v135 = &v139;
            while (1)
            {
              int v136 = LOBYTE(v135->tm_sec);
              *a3 = v136;
              if (!v136) {
                break;
              }
              int v135 = (tm *)((char *)v135 + 1);
              ++a3;
              if (!--v134) {
                goto LABEL_243;
              }
            }
          }
          goto LABEL_244;
        default:
          if (!*a1) {
            --a1;
          }
          goto LABEL_4;
      }
      break;
    }
  }
  if (!*a1) {
    return a3;
  }
LABEL_4:
  if (a3 != a4)
  {
    *a3++ = *a1;
    goto LABEL_244;
  }
  return a4;
}

int sprintf_l(char *a1, locale_t a2, const char *a3, ...)
{
  va_start(va, a3);
  return vsprintf_l(a1, a2, a3, va);
}

int sprintf(char *a1, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vsprintf_l(a1, v5, a2, va);
}

int vsprintf_l(char *a1, locale_t a2, const char *a3, va_list a4)
{
  long long v15 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v13 = (unint64_t)v16;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  v16[0] = 0;
  v16[1] = 850045858;
  int v5 = a1;
  pthread_key_t v7 = a1;
  *(void *)((char *)&v6 + 4) = 0xFFFF02087FFFFFFFLL;
  uint64_t v8 = 0x7FFFFFFFLL;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int result = __v2printf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (int)&v5);
  *int v5 = 0;
  return result;
}

void tzset(void)
{
}

char **__get_current_time_locale(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1315)) {
    return (char **)(*(void *)(a1 + 1352) + 72);
  }
  else {
    return _C_time_locale;
  }
}

uint64_t time2sub(uint64_t a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, _DWORD *a4, int a5, int a6)
{
  pthread_key_t v7 = a4;
  uint64_t v60 = 0;
  uint64_t v54 = 0;
  long long v53 = 0u;
  memset(v52, 0, sizeof(v52));
  *a4 = 0;
  long long v11 = *(_OWORD *)(a1 + 16);
  long long v55 = *(_OWORD *)a1;
  long long v56 = v11;
  long long v57 = *(_OWORD *)(a1 + 32);
  uint64_t v58 = *(void *)(a1 + 48);
  if (a5)
  {
    if ((int)v55 < 0) {
      unsigned int v12 = ~(~v55 / 0x3Cu);
    }
    else {
      unsigned int v12 = v55 / 0x3C;
    }
    LODWORD(v55) = v55 - 60 * v12;
    int v13 = DWORD1(v55) + v12;
  }
  else
  {
    int v13 = DWORD1(v55);
  }
  if (v13 < 0) {
    unsigned int v14 = ~(~v13 / 0x3Cu);
  }
  else {
    unsigned int v14 = v13 / 0x3Cu;
  }
  unsigned int v15 = v13 - 60 * v14;
  int v16 = DWORD2(v55) + v14;
  if (v16 < 0) {
    unsigned int v17 = ~(~v16 / 0x18u);
  }
  else {
    unsigned int v17 = v16 / 0x18u;
  }
  DWORD1(v55) = v15;
  DWORD2(v55) = v16 - 24 * v17;
  int v18 = HIDWORD(v55) + v17;
  if ((int)v56 < 0) {
    signed int v19 = ~(~v56 / 0xCu);
  }
  else {
    signed int v19 = v56 / 0xC;
  }
  int v20 = v56 - 12 * v19;
  uint64_t v21 = SDWORD1(v56) + (uint64_t)v19 + 1900;
  if (v18 <= 0)
  {
    do
    {
      uint64_t v22 = (v20 > 1) + v21 - 1;
      if ((v22 & 3) != 0) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = __ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v22, 2) > 0x28F5C28F5C28F5CuLL
      }
           || __ROR8__(0x51EB851EB851EB0 - 0x70A3D70A3D70A3D7 * v22, 4) < 0xA3D70A3D70A3D7uLL;
      v18 += year_lengths[v23];
      --v21;
    }
    while (v18 < 1);
  }
  if (v18 >= 0x16F)
  {
    BOOL v24 = v20 > 1;
    do
    {
      uint64_t v25 = v24 + v21;
      if (((v24 + v21) & 3) != 0) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = __ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v25, 2) > 0x28F5C28F5C28F5CuLL
      }
           || __ROR8__(0x51EB851EB851EB0 - 0x70A3D70A3D70A3D7 * v25, 4) < 0xA3D70A3D70A3D7uLL;
      v18 -= year_lengths[v26];
      ++v21;
    }
    while (v18 > 366);
  }
  while (1)
  {
    BOOL v27 = (v21 & 3) == 0
       && (__ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v21, 2) > 0x28F5C28F5C28F5CuLL
        || __ROR8__(0x51EB851EB851EB0 - 0x70A3D70A3D70A3D7 * v21, 4) < 0xA3D70A3D70A3D7uLL);
    int v28 = mon_lengths[12 * v27 + v20];
    BOOL v29 = __OFSUB__(v18, v28);
    int v30 = v18 - v28;
    if ((v30 < 0) ^ v29 | (v30 == 0)) {
      break;
    }
    BOOL v31 = v20 <= 10;
    if (v20 <= 10) {
      ++v20;
    }
    else {
      int v20 = 0;
    }
    if (!v31) {
      ++v21;
    }
    int v18 = v30;
  }
  HIDWORD(v55) = v18;
  LODWORD(v56) = v20;
  DWORD1(v56) = v21 - 1900;
  uint64_t result = -1;
  if ((unint64_t)(v21 - 2147485548) < 0xFFFFFFFF00000000 || v21 - 1900 < 0) {
    return result;
  }
  int v33 = v55;
  if (v55 >= 0x3C)
  {
    if (v21 > 1969)
    {
      LODWORD(v55) = 0;
    }
    else
    {
      int v33 = v55 - 59;
      LODWORD(v55) = 59;
    }
  }
  else
  {
    int v33 = 0;
  }
  uint64_t v59 = 0;
  uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v35 = 0x8000000000000000;
  while (1)
  {
    uint64_t v36 = v35 >= 0 ? v35 : v35 + 1;
    uint64_t v37 = v34 >= 0 ? v34 : v34 + 1;
    uint64_t v38 = (v37 >> 1) + (v36 >> 1);
    uint64_t v59 = v38;
    if (v38 >= v35)
    {
      if (v38 > v34) {
        uint64_t v59 = v34;
      }
    }
    else
    {
      uint64_t v59 = v35;
    }
    if (a2(&v59, a3, (uint64_t)v52)) {
      break;
    }
    uint64_t v40 = v59;
    if (v59 > 0) {
      int v39 = 1;
    }
    else {
      int v39 = -1;
    }
LABEL_67:
    if (v40 == v35)
    {
      uint64_t v40 = v35 + 1;
      uint64_t v59 = ++v35;
    }
    else if (v40 == v34)
    {
      uint64_t v40 = v34 - 1;
      uint64_t v59 = --v34;
    }
    if (v35 > v34) {
      return -1;
    }
    if (v39 > 0) {
      uint64_t v34 = v40;
    }
    else {
      uint64_t v35 = v40;
    }
  }
  int v39 = tmcomp(v52, &v55);
  if (v39)
  {
    uint64_t v40 = v59;
    goto LABEL_67;
  }
  size_t v41 = &lclptr;
  if (a2 != _st_localsub) {
    size_t v41 = &gmtptr;
  }
  uint64_t v42 = *v41;
  if (!a6)
  {
    int v44 = v57;
    if ((v57 & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_103:
    v59 += v33;
    uint64_t v60 = v59;
    if (a2(&v59, a3, a1))
    {
      *pthread_key_t v7 = 1;
      return v59;
    }
    return -1;
  }
  if ((int)v57 > 0 && *(_DWORD *)(v42 + 8) == 1) {
    int v44 = 0;
  }
  else {
    int v44 = v57;
  }
  LODWORD(v57) = v44;
  if (v44 < 0) {
    goto LABEL_103;
  }
LABEL_87:
  if (v53 == v44) {
    goto LABEL_103;
  }
  if (v42)
  {
    uint64_t v45 = *(unsigned int *)(v42 + 8);
    if ((int)v45 >= 1)
    {
      int v50 = v33;
      double v51 = v7;
      while (1)
      {
        uint64_t v46 = v42 + 24 * (v45 - 1);
        if (*(_DWORD *)(v46 + 10832) == v44)
        {
          uint64_t v47 = *(unsigned int *)(v42 + 8);
          if ((int)v47 >= 1) {
            break;
          }
        }
LABEL_99:
        uint64_t result = -1;
        BOOL v31 = v45-- <= 1;
        if (v31) {
          return result;
        }
      }
      int v48 = (void *)(v46 + 10824);
      uint64_t v49 = v47 + 1;
      while (1)
      {
        if (*(_DWORD *)(v42 + 24 * (v49 - 2) + 10832) != v44)
        {
          uint64_t v60 = *(void *)(v42 + 24 * (v49 - 2) + 10824) + v59 - *v48;
          if (a2(&v60, a3, (uint64_t)v52))
          {
            if (!tmcomp(v52, &v55) && v53 == v44) {
              break;
            }
          }
        }
        if ((unint64_t)--v49 <= 1) {
          goto LABEL_99;
        }
      }
      uint64_t v59 = v60;
      pthread_key_t v7 = v51;
      int v33 = v50;
      goto LABEL_103;
    }
  }
  return -1;
}

uint64_t _st_localsub(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v25 = *a1;
  uint64_t v5 = lclptr;
  if (lclptr)
  {
    if (*(_DWORD *)(lclptr + 16))
    {
      uint64_t v6 = *(void *)(lclptr + 24);
      if (v4 < v6) {
        goto LABEL_7;
      }
    }
    int v7 = *(_DWORD *)(lclptr + 4);
    if (*(_DWORD *)(lclptr + 20) && v4 > *(void *)(lclptr + 8 * (v7 - 1) + 24))
    {
      uint64_t v6 = *(void *)(lclptr + 24);
LABEL_7:
      LODWORD(v8) = v6 - v4;
      if (v6 <= v4) {
        uint64_t v8 = v4 - *(void *)(lclptr + 8 * *(int *)(lclptr + 4) + 16);
      }
      uint64_t v9 = 400 * (((int)v8 - 1) / -262121088);
      uint64_t v10 = 31556952 * (v9 + 400);
      if (v6 <= v4) {
        uint64_t v10 = -31556952 * (v9 + 400);
      }
      uint64_t v11 = v10 + v4;
      uint64_t v24 = v11;
      if (v11 < v6 || v11 > *(void *)(lclptr + 8 * *(int *)(lclptr + 4) + 16)) {
        return 0;
      }
      uint64_t result = _st_localsub(&v24, a2, a3);
      if (result == a3)
      {
        uint64_t v18 = v4 >= *(void *)(v5 + 24) ? v9 + 400 : -400 - v9;
        uint64_t v19 = v18 + *(int *)(a3 + 20);
        *(_DWORD *)(a3 + 20) = v19;
        if (v19 != (int)v19) {
          return 0;
        }
      }
      return result;
    }
    if (v7 && v4 >= *(void *)(lclptr + 24))
    {
      if (v7 < 2)
      {
        uint64_t v13 = 0;
      }
      else
      {
        int v16 = 1;
        do
        {
          int v17 = (v7 + v16) >> 1;
          if (v4 < *(void *)(lclptr + 8 * v17 + 24)) {
            int v7 = (v7 + v16) >> 1;
          }
          else {
            int v16 = v17 + 1;
          }
        }
        while (v16 < v7);
        uint64_t v13 = v16 - 1;
      }
      LODWORD(v13) = *(unsigned __int8 *)(lclptr + v13 + 9624);
    }
    else
    {
      uint64_t v13 = 0;
      unsigned int v14 = (int *)(lclptr + 10832);
      while (1)
      {
        int v15 = *v14;
        v14 += 6;
        if (!v15) {
          break;
        }
        if (++v13 >= *(int *)(lclptr + 8))
        {
          LODWORD(v13) = 0;
          break;
        }
      }
    }
    unsigned int v20 = v13;
    uint64_t result = timesub(&v25, *(void *)(lclptr + 24 * v13 + 10824), (unsigned int *)lclptr, a3);
    if (result)
    {
      uint64_t v21 = v5 + 24 * v20;
      uint64_t v22 = *(int *)(v21 + 10832);
      *(_DWORD *)(a3 + 32) = v22;
      BOOL v23 = (char *)(v5 + 16968 + *(int *)(v21 + 10836));
      tzname[v22] = v23;
      *(void *)(a3 + 48) = v23;
    }
  }
  else
  {
    return gmtsub(a1, a2, a3);
  }
  return result;
}

uint64_t timesub(uint64_t *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = *a3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (v4 << 32) - 0x100000000;
  uint64_t v6 = (uint64_t *)&a3[4 * v4 + 4372];
  do
  {
    if ((int)v4 < 1)
    {
      uint64_t v10 = 0;
      int v9 = 0;
      uint64_t v7 = *a1;
      goto LABEL_13;
    }
    LODWORD(v4) = v4 - 1;
    uint64_t v7 = *a1;
    uint64_t v8 = *(v6 - 3);
    v5 -= 0x100000000;
    v6 -= 2;
  }
  while (*a1 < v8);
  if (*a1 == v8)
  {
    uint64_t v10 = *v6;
    if (v4 || v10 <= 0)
    {
      uint64_t v32 = *(void *)((char *)a3 + (v5 >> 28) + 17488);
      int v9 = v10 > v32;
      if ((v4 + 1) >= 2 && v10 > v32)
      {
        uint64_t v33 = *(void *)&a3[4 * v4 + 4370];
        do
        {
          uint64_t v34 = (v4 - 1);
          if (v33 != *(void *)&a3[4 * v34 + 4370] + 1) {
            break;
          }
          if (*(void *)&a3[4 * v4 + 4372] != *(void *)&a3[4 * v34 + 4372] + 1) {
            break;
          }
          ++v9;
          uint64_t v33 = *(void *)&a3[4 * v34 + 4370];
          LODWORD(v4) = v4 - 1;
        }
        while ((v34 + 1) > 1);
      }
    }
    else
    {
      int v9 = 1;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = *v6;
  }
LABEL_13:
  uint64_t v11 = v7 / 86400;
  uint64_t v12 = v7 % 86400;
  uint64_t v13 = a2 - v10 + v7 % 86400;
  if (v13 < 0)
  {
    uint64_t v14 = v12 + a2;
    if (v13 <= -86400) {
      uint64_t v13 = -86400;
    }
    uint64_t v15 = v10 + v13;
    if (v15 == v14) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = v14 + 1;
    }
    unint64_t v17 = v15 - v16;
    if (v15 == v14) {
      unint64_t v18 = v17 / 0x15180;
    }
    else {
      unint64_t v18 = v17 / 0x15180 + 1;
    }
    uint64_t v13 = v14 + 86400 * v18 + 86400 - v10;
    v11 += ~v18;
  }
  if (v13 > 86399)
  {
    uint64_t v19 = 172799;
    if (v13 < 172799) {
      uint64_t v19 = v13;
    }
    unint64_t v20 = (~v19 + v13 + 86400) / 0x15180uLL;
    uint64_t v13 = v13 - 86400 * v20 - 86400;
    v11 += v20 + 1;
  }
  *(_DWORD *)(a4 + 8) = v13 / 0xE10uLL;
  unsigned __int16 v21 = v13 % 0xE10uLL;
  *(_DWORD *)a4 = v9 + v21 % 0x3Cu;
  *(_DWORD *)(a4 + 4) = v21 / 0x3Cu;
  *(_DWORD *)(a4 + 24) = ((int)v11 + 4) % 7 + (((int)v11 + 4) % 7 < 0 ? 7 : 0);
  uint64_t v22 = 1970;
  if (v11 < 0) {
    goto LABEL_34;
  }
  while (1)
  {
    if ((v22 & 3) != 0)
    {
      BOOL v23 = 0;
    }
    else
    {
      BOOL v24 = __ROR8__(0x8F5C28F5C28F5C29 * v22 + 0x51EB851EB851EB0, 4) < 0xA3D70A3D70A3D7uLL;
      BOOL v23 = __ROR8__(0x51EB851EB851EB8 - 0x70A3D70A3D70A3D7 * v22, 2) > 0x28F5C28F5C28F5CuLL || v24;
    }
    if (v11 < *((int *)&year_lengths + v23)) {
      break;
    }
    do
    {
LABEL_34:
      uint64_t v25 = v22 + v11 / 365 + (v11 >> 63);
      if (v25 < 1) {
        unint64_t v26 = -v25 / 0x190uLL + ((unint64_t)-v25 >> 2) - -v25 / 0x64uLL + 1;
      }
      else {
        unint64_t v26 = (v25 - 1) / 0x64uLL - ((v25 - 1) / 0x190uLL + ((unint64_t)(v25 - 1) >> 2));
      }
      if (v22 >= 1) {
        unint64_t v27 = (v22 - 1) / 0x190uLL - (v22 - 1) / 0x64uLL + ((unint64_t)(v22 - 1) >> 2);
      }
      else {
        unint64_t v27 = ~(-v22 / 0x190uLL + ((unint64_t)-v22 >> 2)) + -v22 / 0x64uLL;
      }
      uint64_t v11 = v11 - 365 * (v11 / 365 + (v11 >> 63)) + v26 + v27;
      uint64_t v22 = v25;
    }
    while (v11 < 0);
  }
  if ((unint64_t)(v22 - 2147485548) > 0xFFFFFFFEFFFFFFFFLL)
  {
    *(_DWORD *)(a4 + 20) = v22 - 1900;
    *(_DWORD *)(a4 + 28) = v11;
    uint64_t v29 = (int)mon_lengths[12 * v23];
    if (v11 >= v29)
    {
      uint64_t v30 = 0;
      do
      {
        v11 -= v29;
        uint64_t v29 = (int)mon_lengths[12 * v23 + 1 + v30++];
      }
      while (v11 >= v29);
    }
    else
    {
      LODWORD(v30) = 0;
    }
    *(_DWORD *)(a4 + 12) = v11 + 1;
    *(_DWORD *)(a4 + 16) = v30;
    *(_DWORD *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = a2;
  }
  else
  {
    int v28 = __error();
    a4 = 0;
    *int v28 = 84;
  }
  return a4;
}

uint64_t tmcomp(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[5];
  int v3 = a2[5];
  if (v2 == v3)
  {
    int v5 = a1[4];
    int v6 = a2[4];
    uint64_t result = (v5 - v6);
    if (v5 == v6)
    {
      int v8 = a1[3];
      int v9 = a2[3];
      uint64_t result = (v8 - v9);
      if (v8 == v9)
      {
        int v10 = a1[2];
        int v11 = a2[2];
        uint64_t result = (v10 - v11);
        if (v10 == v11)
        {
          int v12 = a1[1];
          int v13 = a2[1];
          uint64_t result = (v12 - v13);
          if (v12 == v13) {
            return (*a1 - *a2);
          }
        }
      }
    }
  }
  else if (v2 > v3)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t tzparse(char **a1, uint64_t a2, size_t a3)
{
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  if (a3)
  {
    uint64_t v59 = a1;
    unint64_t v5 = j__strsignal_r((int)a1, (char *)a2, a3);
    int v6 = (char **)((char *)a1 + v5);
    uint64_t v7 = 511;
    if (v5 < 0x1FF) {
      uint64_t v7 = v5;
    }
    uint64_t v57 = v7;
    uint64_t v55 = 0;
  }
  else
  {
    int v10 = (unsigned __int8 *)getzname((unint64_t)a1, (unint64_t *)&v59, &v57);
    if (!*v10) {
      return 0xFFFFFFFFLL;
    }
    int v6 = (char **)getoffset(v10, &v55);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
  }
  int v8 = tzload("posixrules", a2, 0, 0);
  if (v8) {
    *(_DWORD *)a2 = 0;
  }
  uint64_t v56 = 0;
  uint64_t v54 = 0;
  if (!*(unsigned char *)v6)
  {
    uint64_t v56 = 0;
    *(void *)(a2 + 4) = 0x100000000;
    *(void *)(a2 + 10824) = -v55;
    *(void *)(a2 + 10832) = 0;
    uint64_t v11 = v57;
    unsigned int v12 = v57 + 1;
    goto LABEL_67;
  }
  if (*(unsigned char *)v6 == 60)
  {
    uint64_t v9 = 0;
    uint64_t v58 = (char **)((char *)v6 + 1);
    while (*((unsigned char *)v6 + v9 + 1))
    {
      if (*((unsigned char *)v6 + v9 + 1) == 62)
      {
        uint64_t v56 = v9;
        int v13 = (unsigned __int8 *)v6 + v9 + 2;
        goto LABEL_19;
      }
      ++v9;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v58 = v6;
  int v13 = (unsigned __int8 *)getzname((unint64_t)v6, (unint64_t *)&v58, &v56);
LABEL_19:
  unsigned int v14 = *v13;
  BOOL v15 = v14 > 0x3B;
  uint64_t v16 = (1 << v14) & 0x800100000000001;
  if (v15 || v16 == 0)
  {
    int v13 = (unsigned __int8 *)getoffset(v13, &v54);
    if (!v13) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v54 = v55 - 3600;
  }
  if (*v13) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = v8 == 0;
  }
  uint64_t v19 = ",M4.1.0,M10.5.0";
  if (v18) {
    uint64_t v19 = (const char *)v13;
  }
  int v20 = *(unsigned __int8 *)v19;
  if (v20 == 59 || v20 == 44)
  {
    memset(v53, 0, sizeof(v53));
    memset(v52, 0, sizeof(v52));
    unint64_t v27 = getrule((char *)v19 + 1, (uint64_t)v53);
    if (v27)
    {
      if (*v27 == 44)
      {
        int v28 = getrule(v27 + 1, (uint64_t)v52);
        if (v28)
        {
          if (!*v28)
          {
            int v29 = 0;
            uint64_t v30 = 0;
            uint64_t v51 = v54;
            *(void *)(a2 + 10824) = -v54;
            *(_DWORD *)(a2 + 10832) = 1;
            uint64_t v49 = v57;
            unsigned int v12 = v57 + 1;
            *(_DWORD *)(a2 + 10836) = v57 + 1;
            uint64_t v50 = v55;
            *(void *)(a2 + 10848) = -v55;
            *(void *)(a2 + 10856) = 0;
            BOOL v31 = (uint64_t *)(a2 + 24);
            uint64_t v32 = (BOOL *)(a2 + 9624);
            *(void *)(a2 + 4) = 0x200000000;
            unsigned int v33 = 1970;
            do
            {
              uint64_t v34 = transtime(v30, v29 + 1970, (int *)v53, v50);
              uint64_t v35 = transtime(v30, v29 + 1970, (int *)v52, v51);
              if (v34 <= v35) {
                uint64_t v36 = v34;
              }
              else {
                uint64_t v36 = v35;
              }
              if (v34 <= v35) {
                uint64_t v37 = v35;
              }
              else {
                uint64_t v37 = v34;
              }
              uint64_t *v31 = v36;
              *uint64_t v32 = v34 > v35;
              v31[1] = v37;
              v32[1] = v34 <= v35;
              int v38 = *(_DWORD *)(a2 + 4);
              *(_DWORD *)(a2 + 4) = v38 + 2;
              if ((((_BYTE)v29 - 78) & 3) != 0) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = 100 * (v33 / 0x64) - 1970 != v29 || 400 * (v33 / 0x190) - 1970 == v29;
              }
              v30 += 86400 * *((int *)&year_lengths + v39);
              ++v33;
              ++v29;
              v31 += 2;
              v32 += 2;
            }
            while (v38 < 1197);
            uint64_t v11 = v49;
            goto LABEL_67;
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (*v19) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v21 = *(unsigned int *)(a2 + 4);
  if ((int)v21 <= 0)
  {
    uint64_t v40 = v55;
  }
  else
  {
    uint64_t v22 = (unsigned __int8 *)(a2 + 9624);
    uint64_t v23 = *(unsigned int *)(a2 + 4);
    while (1)
    {
      unsigned int v25 = *v22++;
      unsigned int v24 = v25;
      if (!*(_DWORD *)(a2 + 24 * v25 + 10832)) {
        break;
      }
      if (!--v23)
      {
        uint64_t v26 = 0;
        goto LABEL_60;
      }
    }
    uint64_t v26 = -*(void *)(a2 + 24 * v24 + 10824);
LABEL_60:
    size_t v41 = (unsigned __int8 *)(a2 + 9624);
    uint64_t v40 = v55;
    uint64_t v42 = (void *)(a2 + 24);
    do
    {
      uint64_t v43 = a2 + 24 * *v41;
      *v41++ = *(_DWORD *)(v43 + 10832);
      if (!*(_DWORD *)(v43 + 10844)) {
        *v42 += v40 - v26;
      }
      if (!*(_DWORD *)(v43 + 10832)) {
        uint64_t v26 = -*(void *)(v43 + 10824);
      }
      ++v42;
      --v21;
    }
    while (v21);
  }
  *(void *)(a2 + 10824) = -v40;
  *(void *)(a2 + 10832) = 0;
  *(void *)(a2 + 10848) = -v54;
  *(_DWORD *)(a2 + 10856) = 1;
  uint64_t v11 = v57;
  unsigned int v12 = v57 + 1;
  *(_DWORD *)(a2 + 10860) = v57 + 1;
  *(_DWORD *)(a2 + 8) = 2;
LABEL_67:
  *(_DWORD *)(a2 + 12) = v12;
  uint64_t v44 = v56;
  if (v56)
  {
    unsigned int v12 = v11 + v56 + 2;
    *(_DWORD *)(a2 + 12) = v12;
  }
  if (v12 > 0x200) {
    return 0xFFFFFFFFLL;
  }
  j__strtod((const char *)(a2 + 16968), v59);
  uint64_t v47 = v46 + v11;
  *(unsigned char *)(v46 + v11) = 0;
  if (!v44) {
    return 0;
  }
  uint64_t v48 = v47 + 1;
  j__strtod((const char *)(v47 + 1), v58);
  uint64_t result = 0;
  *(unsigned char *)(v48 + v44) = 0;
  return result;
}

uint64_t transtime(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  HIDWORD(v5) = -1030792151 * a2 + 85899344;
  LODWORD(v5) = HIDWORD(v5);
  unsigned int v4 = v5 >> 2;
  LODWORD(v5) = HIDWORD(v5);
  BOOL v6 = (v5 >> 4) < 0xA3D70B;
  if (v4 > 0x28F5C28) {
    BOOL v6 = 1;
  }
  BOOL v7 = (a2 & 3) == 0 && v6;
  int v8 = *a3;
  if (*a3)
  {
    if (v8 == 1)
    {
      uint64_t v27 = a1 + 86400 * a3[1];
    }
    else if (v8 == 2)
    {
      int v9 = a3[3];
      int v10 = v9 - 1;
      if (v9 >= 2)
      {
        uint64_t v11 = &mon_lengths[12 * v7];
        uint64_t v12 = (v9 - 1);
        do
        {
          int v13 = *v11++;
          a1 += 86400 * v13;
          --v12;
        }
        while (v12);
      }
      int v14 = (v9 + 9) % 12;
      int v15 = a2 - (v9 < 3);
      unint64_t v16 = 1374389535 * v15;
      unint64_t v17 = HIDWORD(v16);
      v16 >>= 63;
      int v18 = (int)(((26215 * (__int16)(26 * v14 + 24)) >> 18)
                + ((26215 * (__int16)(26 * v14 + 24)) >> 31)
                + v16
                + ((int)v17 >> 7)
                + v15
                - 100 * (v16 + ((int)v17 >> 5))
                + 2 * (v15 / -100)
                + ((char)(v15
                        - 100 * (v16 + ((int)v17 >> 5))
                        + (((char)(v15 - 100 * (v16 + ((int)v17 >> 5))) >> 13) & 3)) >> 2)
                + 1)
          % 7;
      int v19 = v18 + (v18 < 0 ? 7 : 0);
      int v21 = a3[1];
      int v20 = a3[2];
      BOOL v22 = __OFSUB__(v21, v19);
      int v23 = v21 - v19;
      if (v23 < 0 != v22) {
        v23 += 7;
      }
      if (v20 >= 2)
      {
        int v24 = mon_lengths[12 * v7 + v10];
        int v25 = v23 - v20 + 8 * v20 - 7;
        int v26 = v20 - 1;
        while (v23 + 7 < v24)
        {
          v23 += 7;
          if (!--v26)
          {
            int v23 = v25;
            break;
          }
        }
      }
      uint64_t v27 = a1 + 86400 * v23;
    }
    else
    {
      uint64_t v27 = 0;
    }
  }
  else
  {
    uint64_t v28 = a3[1];
    BOOL v29 = v28 > 59;
    uint64_t v27 = a1 + 86400 * (v28 - 1);
    if (v7 && v29) {
      v27 += 86400;
    }
  }
  return v27 + a4 + *((void *)a3 + 2);
}

unint64_t getzname(unint64_t a1, unint64_t *a2, void *a3)
{
  if (*(unsigned char *)a1 == 60 && (uint64_t v6 = j__strncasecmp((const char *)a1, (const char *)0x3E, (size_t)a3)) != 0)
  {
    *a2 = a1 + 1;
    *a3 = v6 + ~a1;
    return v6 + 1;
  }
  else
  {
    *a2 = a1;
    char v8 = *(unsigned char *)a1;
    unint64_t result = a1;
    if (*(unsigned char *)a1)
    {
      unint64_t result = a1;
      do
      {
        if ((v8 - 46) > 0xFCu || (v8 - 58) > 0xFFFFFFF5) {
          break;
        }
        int v10 = *(unsigned __int8 *)++result;
        char v8 = v10;
      }
      while (v10);
    }
    *a3 = result - a1;
  }
  return result;
}

char *getrule(char *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 77)
  {
    *(_DWORD *)a2 = 2;
    if ((result[1] - 48) <= 9)
    {
      int v8 = 0;
      char v9 = result[1];
      result += 3;
      while (1)
      {
        int v8 = 10 * v8 + v9 - 48;
        if (v8 > 12) {
          break;
        }
        char v9 = *(result++ - 1);
        if ((v9 - 48) >= 0xA)
        {
          if (v8 >= 1)
          {
            *(_DWORD *)(a2 + 12) = v8;
            if (*(result - 2) == 46 && (*(result - 1) - 48) <= 9)
            {
              int v10 = 0;
              char v11 = *(result - 1);
              while (1)
              {
                int v10 = 10 * v10 + v11 - 48;
                if (v10 > 5) {
                  break;
                }
                int v12 = *result++;
                char v11 = v12;
                if ((v12 - 48) >= 0xA)
                {
                  if (v10 >= 1)
                  {
                    *(_DWORD *)(a2 + 8) = v10;
                    if (*(result - 1) == 46 && (*result - 48) <= 9)
                    {
                      int v5 = 0;
                      char v13 = *result;
                      while (1)
                      {
                        int v5 = 10 * v5 + v13 - 48;
                        if (v5 > 6) {
                          break;
                        }
                        int v14 = *++result;
                        char v13 = v14;
                        if ((v14 - 48) >= 0xA)
                        {
LABEL_31:
                          if (v5 < 0) {
                            return 0;
                          }
LABEL_32:
                          *(_DWORD *)(a2 + 4) = v5;
                          if (*result == 47) {
                            return getsecs(result + 1, (uint64_t *)(a2 + 16));
                          }
                          *(void *)(a2 + 16) = 7200;
                          return result;
                        }
                      }
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
    }
  }
  else if (v2 == 74)
  {
    *(_DWORD *)a2 = 0;
    int v4 = *++result;
    char v3 = v4;
    if ((v4 - 48) <= 9)
    {
      int v5 = 0;
      char v6 = v3;
      while (1)
      {
        int v5 = 10 * v5 + v6 - 48;
        if (v5 > 365) {
          break;
        }
        int v7 = *++result;
        char v6 = v7;
        if ((v7 - 48) >= 0xA)
        {
          if (v5 >= 1) {
            goto LABEL_32;
          }
          return 0;
        }
      }
    }
  }
  else if (((char)v2 - 48) <= 9)
  {
    *(_DWORD *)a2 = 1;
    if ((*result - 48) <= 9)
    {
      int v5 = 0;
      char v15 = *result;
      while (1)
      {
        int v5 = 10 * v5 + v15 - 48;
        if (v5 > 365) {
          break;
        }
        int v16 = *++result;
        char v15 = v16;
        if ((v16 - 48) >= 0xA) {
          goto LABEL_31;
        }
      }
    }
  }
  return 0;
}

uint64_t tzload(const char *a1, uint64_t a2, const char *a3, int a4)
{
  int v7 = a1;
  *(void *)(a2 + 16) = 0;
  if (a1 && issetugid())
  {
    if ((int v9 = *(unsigned __int8 *)v7, v9 == 47)
      || v9 == 58 && v7[1] == 47
      || j__strncasecmp(v7, (const char *)0x2E, v8))
    {
      int v7 = 0;
    }
  }
  if (a3) {
    *a3 = 0;
  }
  memset(&v103, 0, sizeof(v103));
  int v10 = (char *)malloc_type_malloc(0x401uLL, 0xC70EABD9uLL);
  if (!v10)
  {
    unint64_t v17 = 0;
    goto LABEL_21;
  }
  char v13 = v10;
  int v14 = "/var/db/timezone/localtime";
  if (v7) {
    int v14 = v7;
  }
  if (*v14 == 58) {
    char v15 = v14 + 1;
  }
  else {
    char v15 = v14;
  }
  if (*v15 == 47)
  {
    BOOL v16 = 1;
    if (!a3)
    {
LABEL_18:
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if ((unint64_t)(j__strsignal_r((int)v15, v11, v12) - 998) <= 0xFFFFFFFFFFFFFBFFLL) {
      goto LABEL_121;
    }
    strcpy(v13, "/var/db/timezone/zoneinfo");
    *(_WORD *)&v13[j__strsignal_r((int)v13, v19, v20)] = 47;
    strcat(v13, v15);
    BOOL v16 = j__strncasecmp(v15, (const char *)0x2E, v21) != 0;
    char v15 = v13;
    if (!a3) {
      goto LABEL_18;
    }
  }
  if ((unint64_t)j__strsignal_r((int)v15, v11, v12) > 0x400) {
    return 0xFFFFFFFFLL;
  }
  j__strnstr(a3, v15, v22);
  if (v16)
  {
LABEL_27:
    if (!access(v15, 4)) {
      goto LABEL_28;
    }
LABEL_121:
    free(v13);
    return 0xFFFFFFFFLL;
  }
LABEL_28:
  int v23 = open_NOCANCEL();
  if (v23 == -1) {
    goto LABEL_121;
  }
  if (fstat(v23, &v103) < 0 || (v103.st_mode & 0xF000) != 0x8000)
  {
    free(v13);
    close_NOCANCEL();
    return 0xFFFFFFFFLL;
  }
  free(v13);
  unint64_t v17 = (char *)malloc_type_malloc(0xA1E8uLL, 0x1000040BE76E700uLL);
  if (v17)
  {
    int NOCANCEL = read_NOCANCEL();
    uint64_t v18 = 0xFFFFFFFFLL;
    if ((close_NOCANCEL() & 0x80000000) != 0 || NOCANCEL < 1) {
      goto LABEL_22;
    }
    unsigned int v25 = 4;
LABEL_35:
    int v26 = v17[24] >> 7;
    for (i = 24; i != 28; int v26 = v17[i++] | (v26 << 8))
      ;
    int v28 = v17[20] >> 7;
    for (j = 20; j != 24; int v28 = v17[j++] | (v28 << 8))
      ;
    LODWORD(v30) = v17[28] >> 7;
    for (k = 28; k != 32; uint64_t v30 = v17[k++] | (v30 << 8))
      ;
    *(_DWORD *)a2 = v30;
    LODWORD(v32) = v17[32] >> 7;
    for (m = 32; m != 36; uint64_t v32 = (_xlocale *)(v17[m++] | (v32 << 8)))
      ;
    *(_DWORD *)(a2 + 4) = v32;
    LODWORD(v34) = v17[36] >> 7;
    for (n = 36; n != 40; uint64_t v34 = v17[n++] | (v34 << 8))
      ;
    *(_DWORD *)(a2 + 8) = v34;
    LODWORD(v36) = v17[40] >> 7;
    for (iuint64_t i = 40; ii != 44; v36 = v17[ii++] | (v36 << 8))
      ;
    *(_DWORD *)(a2 + 12) = v36;
    uint64_t v18 = 0xFFFFFFFFLL;
    if (v30 > 0x32
      || (v34 - 257) < 0xFFFFFF00
      || v32 > 0x4B0
      || (v36 & 0x80000000) != 0
      || (int)v36 > 50
      || v26 && v34 != v26)
    {
      goto LABEL_22;
    }
    if (v28 && v34 != v28) {
      goto LABEL_22;
    }
    if (NOCANCEL - 44 >= (int)(v28 + v26 + v30 * (v25 + 4) + v32 * (v25 | 1) + 6 * v34 + v36))
    {
      int v38 = v17 + 44;
      if (v32)
      {
        BOOL v39 = 0;
        uint64_t v40 = v17 + 44;
        do
        {
          uint64_t v41 = (uint64_t)*v40 >> 7;
          if (v25 == 4)
          {
            for (juint64_t j = 0; jj != 4; ++jj)
              uint64_t v41 = v40[jj] | (unint64_t)(v41 << 8);
          }
          else
          {
            for (kuint64_t k = 0; kk != 8; ++kk)
              uint64_t v41 = v40[kk] | (unint64_t)(v41 << 8);
          }
          *(void *)(a2 + 8 * (void)v39 + 24) = v41;
          v40 += v25;
          BOOL v39 = (_xlocale *)((char *)v39 + 1);
        }
        while (v39 != v32);
        uint64_t v44 = 0;
        while (1)
        {
          int v45 = v40[v44];
          *(unsigned char *)(a2 + 9624 + v44) = v45;
          if ((int)v34 <= v45) {
            break;
          }
          if (v32 == (_xlocale *)++v44)
          {
            int v38 = &v40[v44];
            if ((int)v34 >= 1) {
              goto LABEL_70;
            }
            int v52 = 0;
LABEL_78:
            if ((int)v36 < 1)
            {
              LODWORD(v36) = 0;
            }
            else
            {
              uint64_t v53 = v36;
              uint64_t v54 = (unsigned char *)(a2 + 16968);
              do
              {
                char v55 = *v38++;
                *v54++ = v55;
                --v53;
              }
              while (v53);
            }
            *(unsigned char *)(a2 + v36 + 16968) = 0;
            if ((int)v30 >= 1)
            {
              uint64_t v56 = 0;
              uint64_t v57 = &v38[v25];
              do
              {
                uint64_t v58 = (uint64_t)*v38 >> 7;
                if (v25 == 4)
                {
                  for (muint64_t m = 0; mm != 4; ++mm)
                    uint64_t v58 = v38[mm] | (unint64_t)(v58 << 8);
                }
                else
                {
                  for (nuint64_t n = 0; nn != 8; ++nn)
                    uint64_t v58 = v38[nn] | (unint64_t)(v58 << 8);
                }
                uint64_t v61 = 0;
                *(void *)(a2 + 16 * v56 + 17480) = v58;
                int v62 = &v38[v25];
                uint64_t v63 = (uint64_t)*v62 >> 7;
                do
                  uint64_t v63 = v57[v61++] | (unint64_t)(v63 << 8);
                while (v61 != 4);
                *(void *)(a2 + 16 * v56 + 17488) = v63;
                int v38 = v62 + 4;
                ++v56;
                v57 += v25 + 4;
              }
              while (v56 != v30);
            }
            if (v52)
            {
              uint64_t v64 = v34;
              int v65 = (unsigned int *)(a2 + 10840);
              do
              {
                if (v26)
                {
                  unsigned int v66 = *v38++;
                  *int v65 = v66;
                  if (v66 > 1) {
                    goto LABEL_21;
                  }
                }
                else
                {
                  *int v65 = 0;
                }
                v65 += 6;
                --v64;
              }
              while (v64);
              int v67 = (unsigned int *)(a2 + 10844);
              do
              {
                if (v28)
                {
                  unsigned int v68 = *v38++;
                  *int v67 = v68;
                  if (v68 > 1) {
                    goto LABEL_21;
                  }
                }
                else
                {
                  *int v67 = 0;
                }
                v67 += 6;
                --v34;
              }
              while (v34);
            }
            uint64_t v69 = 0;
            if ((int)v32 <= 2) {
              int v70 = 2;
            }
            else {
              int v70 = (int)v32;
            }
            uint64_t v71 = (v70 - 2);
            while (v71 != v69)
            {
              uint64_t v72 = a2 + 8 * v69++;
              uint64_t v32 = *(_xlocale **)(v72 + 24);
              if ((uint64_t)v32 > *(void *)(v72 + 32))
              {
                *(_DWORD *)(a2 + 4) = v69;
                break;
              }
            }
            if (v17[4])
            {
              int v73 = NOCANCEL + v17 - v38;
              if (v73 >= 1)
              {
                uint64_t v74 = (NOCANCEL + v17 - v38);
                uint64_t v32 = (_xlocale *)v17;
                do
                {
                  char v75 = *v38++;
                  *(unsigned char *)uint64_t v32 = v75;
                  uint64_t v32 = (_xlocale *)((char *)v32 + 1);
                  --v74;
                }
                while (v74);
              }
              int NOCANCEL = v73;
              BOOL v76 = v25 >= 8;
              v25 *= 2;
              if (!v76) {
                goto LABEL_35;
              }
            }
            else
            {
              int v73 = NOCANCEL;
            }
            if (a4)
            {
              if (v73 > 2 && *v17 == 10)
              {
                uint64_t v78 = (v73 - 1);
                if (v17[v78] == 10 && *(int *)(a2 + 8) <= 254)
                {
                  int v79 = (int *)malloc_type_malloc(0x4768uLL, 0x10000402151C985uLL);
                  if (!v79) {
                    break;
                  }
                  uint64_t v80 = v79;
                  v17[v78] = 0;
                  if (!tzparse((char **)(v17 + 1), (uint64_t)v79, 0) && v80[2] == 2)
                  {
                    int v81 = *(_DWORD *)(a2 + 12);
                    int v82 = v80[3];
                    if (v82 + v81 <= 50)
                    {
                      v80[2709] += v81;
                      v80[2715] += v81;
                      if (v82 >= 1)
                      {
                        uint64_t v83 = 0;
                        do
                        {
                          char v84 = *((unsigned char *)v80 + v83 + 16968);
                          uint64_t v85 = *(int *)(a2 + 12);
                          *(_DWORD *)(a2 + 12) = v85 + 1;
                          *(unsigned char *)(a2 + v85 + 16968) = v84;
                          ++v83;
                        }
                        while (v83 < v80[3]);
                      }
                      uint64_t v86 = v80[1];
                      if ((int)v86 < 1)
                      {
                        LODWORD(v87) = 0;
                      }
                      else
                      {
                        uint64_t v87 = 0;
                        while (*(void *)&v80[2 * v87 + 6] <= *(void *)(a2 + 8 * *(int *)(a2 + 4) + 16))
                        {
                          if (v86 == ++v87) {
                            goto LABEL_148;
                          }
                        }
                      }
                      if ((int)v87 < (int)v86)
                      {
                        uint64_t v88 = v87;
                        int v89 = *(_DWORD *)(a2 + 4);
                        do
                        {
                          if (v89 > 1199) {
                            break;
                          }
                          *(void *)(a2 + 8 * v89 + 24) = *(void *)&v80[2 * v88 + 6];
                          *(unsigned char *)(a2 + v89 + 9624) = *((unsigned char *)v80 + v88 + 9624) + *(unsigned char *)(a2 + 8);
                          int v89 = *(_DWORD *)(a2 + 4) + 1;
                          *(_DWORD *)(a2 + 4) = v89;
                          ++v88;
                        }
                        while (v80[1] > (int)v88);
                      }
LABEL_148:
                      int v90 = *(_DWORD *)(a2 + 8);
                      *(_DWORD *)(a2 + 8) = v90 + 1;
                      long long v91 = *(_OWORD *)(v80 + 2706);
                      uint64_t v92 = a2 + 10824 + 24 * v90;
                      *(void *)(v92 + 16) = *((void *)v80 + 1355);
                      *(_OWORD *)uint64_t v92 = v91;
                      LODWORD(v92) = *(_DWORD *)(a2 + 8);
                      *(_DWORD *)(a2 + 8) = v92 + 1;
                      uint64_t v93 = a2 + 10824 + 24 * (int)v92;
                      long long v94 = *((_OWORD *)v80 + 678);
                      *(void *)(v93 + 16) = *((void *)v80 + 1358);
                      *(_OWORD *)uint64_t v93 = v94;
                    }
                  }
                  free(v80);
                }
              }
            }
            uint64_t v95 = *(unsigned int *)(a2 + 4);
            if ((int)v95 < 2)
            {
LABEL_162:
              uint64_t v18 = 0;
            }
            else
            {
              uint64_t v96 = 0;
              size_t v97 = *(unsigned __int8 *)(a2 + 9624);
              while (!typesequiv(a2, *(unsigned __int8 *)(a2 + 9625 + v96), v97, v32)
                   || *(void *)(a2 + 8 * v96 + 32) - *(void *)(a2 + 24) != 0x2F0605980)
              {
                if (v95 - 1 == ++v96) {
                  goto LABEL_157;
                }
              }
              *(_DWORD *)(a2 + 16) = 1;
LABEL_157:
              uint64_t v98 = (v95 - 2);
              uint64_t v99 = (int)v95 - 1;
              unsigned int v100 = *(unsigned __int8 *)(a2 + 9624 + v99);
              long long v101 = (void *)(a2 + 8 * v99 + 24);
              while (!typesequiv(a2, v100, *(unsigned __int8 *)(a2 + 9624 + v98), v32)
                   || *v101 - *(void *)(a2 + 8 * v98 + 24) != 0x2F0605980)
              {
                if (v98-- <= 0) {
                  goto LABEL_162;
                }
              }
              uint64_t v18 = 0;
              *(_DWORD *)(a2 + 20) = 1;
            }
            goto LABEL_22;
          }
        }
      }
      else
      {
LABEL_70:
        uint64_t v46 = 0;
        while (1)
        {
          uint64_t v47 = 0;
          uint64_t v48 = (uint64_t)*v38 >> 7;
          do
            uint64_t v48 = v38[v47++] | (unint64_t)(v48 << 8);
          while (v47 != 4);
          uint64_t v49 = a2 + 24 * v46;
          *(void *)(v49 + 10824) = v48;
          unsigned int v50 = v38[4];
          *(_DWORD *)(v49 + 10832) = v50;
          if (v50 > 1) {
            break;
          }
          int v51 = v38[5];
          *(_DWORD *)(a2 + 24 * v46 + 10836) = v51;
          if ((int)v36 < v51) {
            break;
          }
          v38 += 6;
          if (++v46 == v34)
          {
            int v52 = 1;
            goto LABEL_78;
          }
        }
      }
    }
  }
LABEL_21:
  uint64_t v18 = 0xFFFFFFFFLL;
LABEL_22:
  free(v17);
  return v18;
}

BOOL typesequiv(BOOL result, unsigned int a2, size_t a3, _xlocale *a4)
{
  if (result)
  {
    int v4 = *(_DWORD *)(result + 8);
    BOOL v5 = v4 <= (int)a2 || v4 <= (int)a3;
    return !v5
        && *(void *)(result + 10824 + 24 * a2) == *(void *)(result + 10824 + 24 * a3)
        && *(_DWORD *)(result + 10824 + 24 * a2 + 8) == *(_DWORD *)(result + 10824 + 24 * a3 + 8)
        && *(_DWORD *)(result + 10824 + 24 * a2 + 16) == *(_DWORD *)(result + 10824 + 24 * a3 + 16)
        && *(_DWORD *)(result + 10824 + 24 * a2 + 20) == *(_DWORD *)(result + 10824 + 24 * a3 + 20)
        && j__strncasecmp_l((const char *)(result + 16968 + *(int *)(result + 10824 + 24 * a2 + 12)), (const char *)(result + 16968 + *(int *)(result + 10824 + 24 * a3 + 12)), a3, a4) == 0;
  }
  return result;
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  int v5 = j__strsignal_r((int)__s1, (char *)__s2, v2);
  j__strsignal_r((int)__s2, v6, v7);
  j__mkdtempat_np(__s1 + v5, (char *)__s2);
  return __s1;
}

int fts_close(FTS *a1)
{
  fts_cuunsigned int r = a1->fts_cur;
  if (fts_cur)
  {
    if (fts_cur->fts_level < 0)
    {
      fts_linuint64_t k = fts_cur;
    }
    else
    {
      do
      {
        fts_linuint64_t k = fts_cur->fts_link;
        if (!fts_link) {
          fts_linuint64_t k = fts_cur->fts_parent;
        }
        fts_free(fts_cur);
        fts_cuunsigned int r = fts_link;
      }
      while ((fts_link->fts_level & 0x80000000) == 0);
    }
    fts_free(fts_link);
  }
  if ((a1->fts_options & 4) != 0) {
    int fts_rfd = -1;
  }
  else {
    int fts_rfd = a1->fts_rfd;
  }
  fts_child = a1->fts_child;
  if (fts_child)
  {
    do
    {
      char v6 = fts_child->fts_link;
      fts_free(fts_child);
      fts_child = v6;
    }
    while (v6);
  }
  free(a1->fts_array);
  a1->fts_array = 0;
  free(a1->fts_path);
  a1->fts_path = 0;
  if (a1->fts_options < 0)
  {
    fts_compaunsigned int r = a1->fts_compar;
    if (fts_compar) {
      _Block_release(fts_compar);
    }
  }
  if (fts_rfd == -1)
  {
    int v9 = 0;
  }
  else
  {
    int v8 = *__error();
    if (fts_fchdir((uint64_t)a1, fts_rfd))
    {
      int v8 = *__error();
      int v9 = -1;
    }
    else
    {
      int v9 = 0;
    }
    if (close_NOCANCEL())
    {
      int v8 = *__error();
      int v9 = -1;
    }
    *__error() = v8;
  }
  free(a1);
  return v9;
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  fts_cuunsigned int r = a1->fts_cur;
  if (!a1->fts_cur) {
    return fts_cur;
  }
  int fts_options = a1->fts_options;
  if ((fts_options & 0x200) != 0) {
    return 0;
  }
  fts_instunsigned int r = fts_cur->fts_instr;
  fts_cur->fts_instunsigned int r = 3;
  if (fts_instr == 2)
  {
    p_int fts_info = &fts_cur->fts_info;
    int fts_info = fts_cur->fts_info;
    if ((fts_info & 0xFFFE) == 0xC)
    {
      int v7 = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 1, -1, 0);
      fts_cur->int fts_info = v7;
      if (v7 == 1 && (a1->fts_options & 4) == 0)
      {
        int v8 = open_NOCANCEL();
        fts_cur->fts_symfd = v8;
        if (v8 < 0)
        {
          fts_cur->fts_errno = *__error();
          fts_cur->int fts_info = 7;
        }
        else
        {
          fts_cur->fts_flags |= 2u;
        }
      }
      return fts_cur;
    }
    if (fts_info == 1) {
      goto LABEL_15;
    }
  }
  else
  {
    if (fts_instr == 1)
    {
      fts_cur->int fts_info = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 0, -1, 0);
      return fts_cur;
    }
    p_int fts_info = &fts_cur->fts_info;
    if (fts_cur->fts_info == 1)
    {
      if (fts_instr == 4)
      {
LABEL_33:
        if ((fts_cur->fts_flags & 2) != 0)
        {
          close_NOCANCEL();
          fts_cur->fts_symfd = -1;
        }
        fts_child = a1->fts_child;
        if (fts_child)
        {
          do
          {
            fts_linuint64_t k = fts_child->fts_link;
            fts_free(fts_child);
            fts_child = fts_link;
          }
          while (fts_link);
          a1->fts_child = 0;
        }
        *p_int fts_info = 6;
        return fts_cur;
      }
LABEL_15:
      if ((fts_options & 0x40) != 0 && fts_cur->fts_dev != a1->fts_dev) {
        goto LABEL_33;
      }
      int v9 = a1->fts_child;
      if (v9)
      {
        if ((fts_options & 0x100) == 0)
        {
          if (fts_safe_changedir((uint64_t)a1, (uint64_t)fts_cur, -1, fts_cur->fts_accpath))
          {
            fts_cur->fts_errno = *__error();
            fts_cur->fts_flags |= 1u;
            int v10 = a1->fts_child;
            if (v10)
            {
              char v11 = a1->fts_child;
              do
              {
                v11->fts_accpath = v11->fts_parent->fts_accpath;
                char v11 = v11->fts_link;
              }
              while (v11);
            }
          }
          else
          {
            int v10 = a1->fts_child;
          }
          goto LABEL_62;
        }
        a1->int fts_options = fts_options & 0xFFFFFEFF;
        do
        {
          int v19 = v9->fts_link;
          fts_free(v9);
          int v9 = v19;
        }
        while (v19);
        a1->fts_child = 0;
      }
      int v10 = (_ftsent *)fts_build((uint64_t)a1, 3);
      a1->fts_child = v10;
      if (!v10)
      {
        if ((a1->fts_options & 0x200) != 0) {
          return 0;
        }
        return fts_cur;
      }
LABEL_62:
      a1->fts_child = 0;
      fts_cuunsigned int r = v10;
      goto LABEL_76;
    }
  }
  size_t v12 = fts_cur;
  do
  {
    fts_cuunsigned int r = v12->fts_link;
    if (!fts_cur)
    {
      fts_cuunsigned int r = v12->fts_parent;
      fts_free(v12);
      if (fts_cur->fts_level == -1)
      {
        fts_free(fts_cur);
        fts_cuunsigned int r = 0;
        *__error() = 0;
        a1->fts_cuunsigned int r = 0;
        return fts_cur;
      }
      a1->fts_path[fts_cur->fts_pathlen] = 0;
      if (fts_cur->fts_level)
      {
        unsigned __int16 fts_flags = fts_cur->fts_flags;
        if ((fts_flags & 2) != 0)
        {
          if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, fts_cur->fts_symfd))
          {
            close_NOCANCEL();
            fts_cur->fts_symfd = -1;
            goto LABEL_70;
          }
          int v20 = *__error();
          close_NOCANCEL();
          fts_cur->fts_symfd = -1;
          *__error() = v20;
        }
        else if ((fts_flags & 1) != 0 || !fts_safe_changedir((uint64_t)a1, (uint64_t)fts_cur, -1, ".."))
        {
          goto LABEL_70;
        }
      }
      else if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, a1->fts_rfd))
      {
LABEL_70:
        if (fts_cur->fts_errno) {
          __int16 v22 = 7;
        }
        else {
          __int16 v22 = 6;
        }
        fts_cur->int fts_info = v22;
        goto LABEL_86;
      }
      a1->fts_options |= 0x200u;
      a1->fts_cuunsigned int r = fts_cur;
      return 0;
    }
    fts_free(v12);
    if (!fts_cur->fts_level)
    {
      a1->fts_cuunsigned int r = fts_cur;
      if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, a1->fts_rfd))
      {
        fts_load((uint64_t)a1, (uint64_t)fts_cur);
        return a1->fts_cur;
      }
      else
      {
        fts_cuunsigned int r = 0;
        a1->fts_options |= 0x200u;
      }
      return fts_cur;
    }
    int v13 = fts_cur->fts_instr;
    size_t v12 = fts_cur;
  }
  while (v13 == 4);
  if (v13 == 2)
  {
    int v14 = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 1, -1, 0);
    fts_cur->int fts_info = v14;
    if (v14 == 1 && (a1->fts_options & 4) == 0)
    {
      int v15 = open_NOCANCEL();
      fts_cur->fts_symfd = v15;
      if (v15 < 0)
      {
        fts_cur->fts_errno = *__error();
        fts_cur->int fts_info = 7;
      }
      else
      {
        fts_cur->fts_flags |= 2u;
      }
    }
    fts_cur->fts_instunsigned int r = 3;
  }
LABEL_76:
  fts_path = a1->fts_path;
  fts_parent = fts_cur->fts_parent;
  LODWORD(v25) = fts_parent->fts_pathlen;
  if (fts_parent->fts_level) {
    BOOL v26 = 0;
  }
  else {
    BOOL v26 = v25 == 1;
  }
  if (v26)
  {
    if (*fts_parent->fts_path != 47)
    {
      LODWORD(v25) = 1;
      goto LABEL_84;
    }
    uint64_t v25 = 0;
  }
  else
  {
LABEL_84:
    uint64_t v25 = v25;
  }
  fts_path[v25] = 47;
  j__mkostemp(&fts_path[v25 + 1], fts_cur + 104);
LABEL_86:
  a1->fts_cuunsigned int r = fts_cur;
  return fts_cur;
}

void fts_free(_DWORD *a1)
{
  if ((a1[15] & 0x80000000) == 0)
  {
    int v2 = *__error();
    close_NOCANCEL();
    *__error() = v2;
  }

  free(a1);
}

char *fts_load(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 64) = *(_WORD *)(a2 + 66);
  int v4 = (char *)(a2 + 104);
  j__mkostemp(*(char **)(a1 + 32), a2 + 104);
  unint64_t result = strrchr(v4, 47);
  if (result && (result != v4 || *(unsigned char *)(a2 + 105)))
  {
    int v8 = result + 1;
    __int16 v9 = j__strsignal_r(result + 1, v6, v7);
    unint64_t result = (char *)j__mkostemp(v4, v8);
    *(_WORD *)(a2 + 66) = v9;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = v10;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 80);
  return result;
}

uint64_t fts_fchdir(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(a1 + 65) & 4) != 0) {
    JUMPOUT(0x18C122C70);
  }
  return fchdir(a2);
}

int statx_np(const char *a1, stat *a2, filesec_t a3)
{
  int v4 = a1;
  if (a3) {
    return statx1((uint64_t)&v4, (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))statx_syscall, (uint64_t)a2, a3);
  }

  return stat(a1, a2);
}

int lstatx_np(const char *a1, stat *a2, filesec_t a3)
{
  int v4 = a1;
  if (a3) {
    return statx1((uint64_t)&v4, (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))lstatx_syscall, (uint64_t)a2, a3);
  }

  return lstat(a1, a2);
}

int fstatx_np(int a1, stat *a2, filesec_t a3)
{
  int v4 = a1;
  if (a3) {
    return statx1((uint64_t)&v4, (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))fstatx_syscall, (uint64_t)a2, a3);
  }

  return fstat(a1, a2);
}

char *__cdecl inet_ntoa(in_addr a1)
{
  s_addunsigned int r = a1.s_addr;
  strcpy((char *)&inet_ntoa_ret, "[inet_ntoa error]");
  inet_ntop(2, &s_addr, (char *)&inet_ntoa_ret, 0x12u);
  return (char *)&inet_ntoa_ret;
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  if (a1 == 30 && a2)
  {
    return inet_ntop6((uint64_t)a2, a3, a4);
  }
  else if (a1 == 2 && a2)
  {
    return (const char *)inet_ntop4((unsigned __int8 *)a2, (uint64_t)a3, a4);
  }
  else
  {
    *__error() = 47;
    return 0;
  }
}

uint64_t statx1(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _DWORD *, unint64_t *), uint64_t a3, _filesec *a4)
{
  int v8 = malloc_type_malloc(0x1ACuLL, 0x7CF20430uLL);
  uint64_t v18 = v8;
  if (!v8) {
    return 12;
  }
  __int16 v9 = v8;
  unint64_t v17 = 428;
  uint64_t v10 = a2(a1, a3, v8, &v17);
  if (v10)
  {
    uint64_t v11 = v10;
  }
  else
  {
    unint64_t v13 = 428;
    while (v17 > v13)
    {
      int v14 = malloc_type_realloc(v9, v17 + 48, 0x7A018A24uLL);
      uint64_t v18 = v14;
      if (!v14)
      {
        uint64_t v18 = v9;
        uint64_t v11 = 0;
        *__error() = 12;
        goto LABEL_4;
      }
      int v15 = v14;
      unint64_t v13 = v17;
      uint64_t v16 = a2(a1, a3, v14, &v17);
      __int16 v9 = v15;
      if (v16)
      {
        uint64_t v11 = v16;
        __int16 v9 = v15;
        goto LABEL_4;
      }
    }
    filesec_set_property(a4, FILESEC_OWNER, (const void *)(a3 + 16));
    filesec_set_property(a4, FILESEC_GROUP, (const void *)(a3 + 20));
    filesec_set_property(a4, FILESEC_MODE, (const void *)(a3 + 4));
    if (v17 < 0x44)
    {
      filesec_set_property(a4, FILESEC_UUID, 0);
      filesec_set_property(a4, FILESEC_GRPUUID, 0);
    }
    else
    {
      filesec_set_property(a4, FILESEC_UUID, v9 + 1);
      __int16 v9 = v18;
      filesec_set_property(a4, FILESEC_GRPUUID, v18 + 5);
      if (v9[9] != -1)
      {
        filesec_set_property(a4, FILESEC_ACL_ALLOCSIZE, &v17);
        filesec_set_property(a4, FILESEC_ACL_RAW, &v18);
        return 0;
      }
    }
    filesec_set_property(a4, FILESEC_ACL_ALLOCSIZE, 0);
    filesec_set_property(a4, FILESEC_ACL_RAW, 0);
    uint64_t v11 = 0;
  }
LABEL_4:
  free(v9);
  return v11;
}

int filesec_set_property(filesec_t a1, filesec_property_t a2, const void *a3)
{
  switch(a2)
  {
    case FILESEC_OWNER:
      int result = 0;
      if (!a3)
      {
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFFE;
        goto LABEL_33;
      }
      int v6 = *(_DWORD *)a3;
      *(_DWORD *)a1 |= 1u;
      *((_DWORD *)a1 + 1) = v6;
      return result;
    case FILESEC_GROUP:
      int result = 0;
      if (a3)
      {
        *((_DWORD *)a1 + 2) = *(_DWORD *)a3;
        unsigned int v7 = *(_DWORD *)a1 | 2;
      }
      else
      {
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFFD;
      }
      goto LABEL_33;
    case FILESEC_UUID:
      if (a3)
      {
        uuid_copy((unsigned __int8 *)a1 + 12, (const unsigned __int8 *)a3);
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 | 4;
      }
      else
      {
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFFB;
      }
      goto LABEL_33;
    case FILESEC_MODE:
      int result = 0;
      if (a3)
      {
        *((_WORD *)a1 + 22) = *(_WORD *)a3;
        unsigned int v7 = *(_DWORD *)a1 | 0x10;
      }
      else
      {
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFEF;
      }
      goto LABEL_33;
    case FILESEC_ACL:
      if (a3 == (const void *)1)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        int result = 0;
        *((void *)a1 + 6) = 0;
        *((void *)a1 + 7) = 1;
        goto LABEL_32;
      }
      if (!a3)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFDF;
        goto LABEL_33;
      }
      int v8 = *(_acl **)a3;
      ssize_t v9 = acl_size(*(acl_t *)a3);
      if ((v9 & 0x8000000000000000) == 0)
      {
        ssize_t v10 = v9;
        uint64_t v11 = malloc_type_malloc(v9, 0x7FAFF6C7uLL);
        if (v11)
        {
          size_t v12 = v11;
          if ((acl_copy_ext_native(v11, v8, v10) & 0x8000000000000000) == 0)
          {
            filesec_discard_aclbuf((unsigned int *)a1);
            int result = 0;
            *((void *)a1 + 6) = v10;
            *((void *)a1 + 7) = v12;
            goto LABEL_32;
          }
          free(v12);
          goto LABEL_37;
        }
      }
      int v13 = *__error();
      if (v13) {
        goto LABEL_38;
      }
      return 0;
    case FILESEC_GRPUUID:
      if (a3)
      {
        uuid_copy((unsigned __int8 *)a1 + 28, (const unsigned __int8 *)a3);
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 | 8;
      }
      else
      {
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFF7;
      }
      goto LABEL_33;
    default:
      if (a2 == FILESEC_ACL_RAW)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        if (a3 && *(void *)a3)
        {
          int result = 0;
          *((void *)a1 + 7) = *(void *)a3;
LABEL_32:
          unsigned int v7 = *(_DWORD *)a1 | 0x20;
LABEL_33:
          *(_DWORD *)a1 = v7;
        }
        else
        {
          return 0;
        }
      }
      else if (a2 == FILESEC_ACL_ALLOCSIZE && a3)
      {
        int result = 0;
        *((void *)a1 + 6) = *(void *)a3;
      }
      else
      {
LABEL_37:
        int v13 = 22;
LABEL_38:
        *__error() = v13;
        return -1;
      }
      return result;
  }
}

void filesec_free(filesec_t a1)
{
  filesec_discard_aclbuf((unsigned int *)a1);

  free(a1);
}

void filesec_discard_aclbuf(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if ((*a1 & 0x20) != 0)
  {
    char v3 = (void *)*((void *)a1 + 7);
    if (v3 != (void *)1)
    {
      free(v3);
      unsigned int v1 = *a1;
    }
    *((void *)a1 + 6) = 0;
    *((void *)a1 + 7) = 0;
    *a1 = v1 & 0xFFFFFFDF;
  }
}

char *_os_assumes_log()
{
  OUTLINED_FUNCTION_3(__stack_chk_guard);
  memset(&v28, 0, sizeof(v28));
  memset(out, 0, 37);
  uint64_t v2 = dladdr(v1, &v28);
  if (v2)
  {
    OUTLINED_FUNCTION_4(v2, v3, v4, v5, v6, v7, v8, v9, v22, v23, v24, v25, v26, v27, (uint64_t)v28.dli_fname, (uint64_t)v28.dli_fbase);
    uuid_unparse(uu, out);
    dli_fname = v28.dli_fname;
    strrchr((char *)v28.dli_fname, 47);
    OUTLINED_FUNCTION_2();
  }
  else
  {
    uint64_t v0 = 0;
    dli_fname = 0;
  }
  uint64_t v11 = OUTLINED_FUNCTION_5(v2, v3, "%s:%lu");
  OUTLINED_FUNCTION_7(v11, v12, "0x%llx");
  int build = _os_get_build(v31);
  OUTLINED_FUNCTION_6(build, v14, "assertion failed: %s: %s + %lu [%s]: %s", v15, v16, v17, v18, v19, (uint64_t)v31, (uint64_t)dli_fname, v0, (uint64_t)out, (uint64_t)v32, v27, (uint64_t)v28.dli_fname, (uint64_t)v28.dli_fbase, (uint64_t)v28.dli_sname, (uint64_t)v28.dli_saddr, v29,
    v30[0]);
  if ((_os_log_redirect((const mach_header_64 *)v28.dli_fbase, (uint64_t)v30) & 1) == 0) {
    _os_debug_log_error_offset(v30, (size_t)v1);
  }
  if (getpid() == 1) {
    int v20 = "OS_ASSUMES_FATAL_PID1";
  }
  else {
    int v20 = "OS_ASSUMES_FATAL";
  }
  int result = getenv(v20);
  if (result)
  {
    qword_1E9119F68 = (uint64_t)v30;
    if (_os_crash_callback) {
      _os_crash_callback(v30);
    }
    __break(1u);
  }
  return result;
}

char *_os_assumes_log_ctx(void (*a1)(void))
{
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_3(__stack_chk_guard);
  uint64_t v12 = OUTLINED_FUNCTION_0(v4, v5, v6, v7, v8, v9, v10, v11, v32, v34, v36, v38, v40, v42, __s, v47);
  if (v12)
  {
    OUTLINED_FUNCTION_4(v12, v13, v14, v15, v16, v17, v18, v19, v33, v35, v37, v39, v41, v43, (uint64_t)__sa, v46);
    uuid_unparse(uu, out);
    uint64_t v20 = (uint64_t)__sa;
    strrchr(__sa, 47);
    OUTLINED_FUNCTION_1();
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v21 = OUTLINED_FUNCTION_5(v12, v13, "%s:%lu");
  OUTLINED_FUNCTION_7(v21, v22, "0x%llx");
  int build = _os_get_build(v52);
  OUTLINED_FUNCTION_6(build, v24, "assertion failed: %s: %s + %lu [%s]: %s", v25, v26, v27, v28, v29, (uint64_t)v52, v20, v2, (uint64_t)out, (uint64_t)v53, v43, (uint64_t)__sa, v46, v48, v49, v50,
    v51[0]);
  _simple_asl_msg_new();
  a1();
  _simple_sfree();
  if (getpid() == 1) {
    uint64_t v30 = "OS_ASSUMES_FATAL_PID1";
  }
  else {
    uint64_t v30 = "OS_ASSUMES_FATAL";
  }
  int result = getenv(v30);
  if (result)
  {
    qword_1E9119F68 = (uint64_t)v51;
    if (_os_crash_callback) {
      _os_crash_callback(v51);
    }
    __break(1u);
  }
  return result;
}

void _os_get_image_uuid(uint64_t a1, uuid_t dst)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 32;
    while (1)
    {
      uint64_t v7 = v6 + a1;
      if (*(_DWORD *)(v6 + a1) == 27) {
        break;
      }
      v6 += *(unsigned int *)(v7 + 4);
      if (v3 == ++v5) {
        goto LABEL_9;
      }
    }
    uuid_copy(dst, (const unsigned __int8 *)(v7 + 8));
    uint64_t v8 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v5 = 0;
  }
  if (v5 == v8)
  {
LABEL_9:
    uuid_clear(dst);
  }
}

void backtrace_image_offsets(void *const *array, image_offset *image_offsets, int size)
{
  uint64_t v5 = size;
  MEMORY[0x1F41887A8](array, array);
  uint64_t v6 = (const unsigned __int8 *)(&v7 - 4 * v5);
  _dyld_images_for_addresses();
  if (size >= 1)
  {
    do
    {
      uuid_copy(image_offsets->uuid, v6);
      image_offsets->offset = *((void *)v6 + 2);
      v6 += 32;
      ++image_offsets;
      --v5;
    }
    while (v5);
  }
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  uint64_t v2 = 0;
  do
  {
    dst[v2] = src[v2];
    ++v2;
  }
  while (v2 != 16);
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1, uint64_t a2, const char *a3)
{
  return snprintf((char *)(v3 - 200), 0x18uLL, a3);
}

uint64_t OUTLINED_FUNCTION_6(int a1, int a2, const char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char __str)
{
  return snprintf(&__str, 0x100uLL, a3);
}

uint64_t OUTLINED_FUNCTION_5(uint64_t a1, uint64_t a2, const char *a3)
{
  return snprintf((char *)(v3 - 176), 0x40uLL, a3);
}

void OUTLINED_FUNCTION_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 - 176) = 0;
  *(void *)(v16 - 168) = 0;
  _os_get_image_uuid(a16, (unsigned __int8 *)(v16 - 176));
}

void OUTLINED_FUNCTION_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
  JUMPOUT(0x18C122530);
}

uint64_t OUTLINED_FUNCTION_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Dl_info *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, long long a16)
{
  a15 = 0u;
  a16 = 0u;
  *(void *)(v17 - 83) = 0;
  *(_OWORD *)(v17 - 112) = 0u;
  *(_OWORD *)(v17 - 96) = 0u;
  return dladdr(v16, (Dl_info *)&a15);
}

uint64_t OUTLINED_FUNCTION_0_0@<X0>(int a1@<W8>, uint64_t a2, int a3, sigset_t a4, uint64_t a5, int a6)
{
  a6 = a1;
  a4 = -1;
  return sigprocmask(3, &a4, 0);
}

uint64_t _os_log_redirect(const mach_header_64 *a1, uint64_t a2)
{
  unint64_t size = 0;
  uint64_t v3 = getsectiondata(a1, "__DATA", "__os_assumes_log", &size);
  if (v3) {
    BOOL v4 = size > 7;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4 && *(void *)v3) {
    return (*(uint64_t (**)(uint64_t))v3)(a2);
  }
  else {
    return 0;
  }
}

uint64_t _os_debug_log_write(int a1, char *__sig, size_t a3)
{
  if (*(void *)(MEMORY[0x1E4F14C38] + 192) == -1) {
    uint64_t v4 = *(void *)(MEMORY[0x1E4F14C38] + 200);
  }
  else {
    uint64_t v4 = _os_alloc_once();
  }
  int v5 = *(_DWORD *)(v4 + 16);
  uint64_t v6 = *(uint64_t (**)(char *))(v4 + 8);
  if (v6)
  {
    uint64_t result = v6(__sig);
    if (result) {
      return result;
    }
  }
  if (v5 < 0) {
    goto LABEL_13;
  }
  uint64_t v8 = j__strsignal_r((int)__sig, __sig, a3);
  unint64_t v9 = 0;
  unint64_t v10 = v8 + 1;
  __sig[v8] = 10;
  while (1)
  {
    uint64_t result = write_NOCANCEL();
    if (result == -1) {
      break;
    }
LABEL_10:
    v9 += result;
    if (v9 >= v10) {
      return result;
    }
  }
  if (*__error() == 4)
  {
    uint64_t result = 0;
    goto LABEL_10;
  }
  _os_debug_log_write_error();
  *(_DWORD *)(v4 + 16) = -1;
LABEL_13:
  dyld_image_header_containing_address();
  _dyld_get_image_uuid();
  if (_dyld_get_shared_cache_uuid()) {
    _dyld_get_shared_cache_range();
  }
  os_log_simple_type_from_asl();
  return __os_log_simple_offset();
}

uint64_t _os_debug_log_error_offset(char *__sig, size_t a2)
{
  return _os_debug_log_write(3, __sig, a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  uint64_t v4 = a2;
  int v5 = (char **)malloc_type_calloc(a2, 0x20uLL, 0xD004058BC3203uLL);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  size_t v7 = 8 * v4;
  if (a2 < 1)
  {
    uint64_t v20 = (char **)malloc_type_malloc(v7, 0xB0A8E4A8uLL);
    if (!v20) {
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  uint64_t v8 = 0;
  uint64_t v27 = a2;
  unint64_t v9 = (const void **)a1;
  size_t v10 = v7;
  do
  {
    uint64_t v11 = (const char **)&v6[v8];
    dladdr(*v9, (Dl_info *)&v6[v8]);
    uint64_t v14 = v6[v8 + 2];
    if (v14)
    {
      if (!j__strncasecmp_l(v11[2], "<redacted>", v12, v13))
      {
        uint64_t v17 = 36;
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v14 = (char *)*v11;
    if (*v11)
    {
      uint64_t v18 = strrchr((char *)*v11, 47);
      if (v18) {
        LODWORD(v14) = v18 + 1;
      }
LABEL_10:
      uint64_t v17 = j__strsignal_r((int)v14, v15, v16);
      goto LABEL_11;
    }
    uint64_t v17 = 18;
LABEL_11:
    v10 += 83 + v17;
    v8 += 4;
    ++v9;
  }
  while (4 * a2 != v8);
  uint64_t v19 = (char **)malloc_type_malloc(v10, 0xB0A8E4A8uLL);
  uint64_t v20 = v19;
  if (v19)
  {
    size_t v21 = 0;
    uint64_t v22 = (char *)v19 + v10;
    uint64_t v23 = (char *)&v19[v7 / 8];
    uint64_t v24 = (uint64_t)v6;
    while (1)
    {
      int v25 = _backtrace_snprintf(v23, v22 - v23, v21, (_xlocale *)a1[v21], v24);
      if (v25 < 0) {
        break;
      }
      v20[v21] = v23;
      v23 += (v25 + 1);
      ++v21;
      v24 += 32;
      if (v27 == v21) {
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  free(v6);
  uint64_t v6 = v20;
  uint64_t v20 = 0;
LABEL_22:
  free(v6);
  return v20;
}

uint64_t _backtrace_snprintf(char *a1, size_t a2, size_t a3, _xlocale *a4, uint64_t a5)
{
  int v7 = a3;
  memset(out, 0, 37);
  size_t v10 = *(char **)a5;
  if (*(void *)a5)
  {
    uint64_t v11 = strrchr(*(char **)a5, 47);
    if (v11) {
      size_t v12 = v11 + 1;
    }
    else {
      size_t v12 = v10;
    }
    uint64_t v13 = (const char *)v19;
    MEMORY[0x18C122F90](v19, v12, 36);
  }
  else
  {
    uint64_t v13 = "???";
  }
  uint64_t v14 = *(const char **)(a5 + 16);
  if (v14)
  {
    *(void *)uu = 0;
    uint64_t v21 = 0;
    if (!j__strncasecmp_l(v14, "<redacted>", a3, a4))
    {
      uint64_t v15 = (void *)(a5 + 8);
      if (_dyld_get_image_uuid())
      {
        uint64_t v14 = out;
        uuid_unparse(uu, out);
LABEL_17:
        size_t v16 = (_xlocale *)((char *)a4 - *v15);
        return snprintf(a1, a2, "%-4d%-35s 0x%016lx %s + %lu", v7, v13, a4, v14, v16);
      }
      uint64_t v14 = *(const char **)(a5 + 16);
    }
    uint64_t v15 = (void *)(a5 + 24);
    goto LABEL_17;
  }
  if (*(void *)a5)
  {
    size_t v16 = (_xlocale *)((char *)a4 - *(void *)(a5 + 8));
    uint64_t v14 = v13;
  }
  else if (snprintf((char *)uu, 0x13uLL, "0x%lx", *(void *)(a5 + 24)) < 1)
  {
    uint64_t v14 = "0x0";
    size_t v16 = a4;
  }
  else
  {
    size_t v16 = (_xlocale *)((char *)a4 - *(void *)(a5 + 24));
    uint64_t v14 = (const char *)uu;
  }
  return snprintf(a1, a2, "%-4d%-35s 0x%016lx %s + %lu", v7, v13, a4, v14, v16);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2 = 0;
  do
  {
    if (v2 <= 0xA && ((1 << v2) & 0x550) != 0) {
      *out++ = 45;
    }
    *out = a0123456789abcd_0[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd_0[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }
  while (v2 != 16);
  *out = 0;
}

uint64_t inet_ntop4(unsigned __int8 *a1, uint64_t a2, unsigned int a3)
{
  if (a1)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      *(void *)__stunsigned int r = 0;
      uint64_t v19 = 0;
      uint64_t v6 = __str;
      snprintf(__str, 4uLL, "%d", *a1);
      uint64_t v9 = j__strsignal_r((int)__str, v7, v8);
      unint64_t v10 = v9 + 4;
      uint64_t v11 = 1;
      do
      {
        size_t v12 = &v6[v9];
        *size_t v12 = 46;
        uint64_t v6 = v12 + 1;
        snprintf(v6, 4uLL, "%d", a1[v11]);
        uint64_t v9 = j__strsignal_r((int)v6, v13, v14);
        v10 += v9;
        ++v11;
      }
      while (v11 != 4);
      if (v10 <= a3)
      {
        j__mkdtempat_np(v3, __str);
        return v3;
      }
      uint64_t v15 = __error();
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v15 = __error();
    }
    int v16 = 28;
  }
  else
  {
    uint64_t v15 = __error();
    uint64_t v3 = 0;
    int v16 = 47;
  }
  *uint64_t v15 = v16;
  return v3;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  va_start(va, __format);
  uint64_t v4 = __locale_key;
  int v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = (_xlocale *)&__global_locale;
  }
  return vsnprintf_l(__str, __size, v6, __format, va);
}

int uname(utsname *a1)
{
  *(void *)size_t v12 = 0x100000001;
  size_t v11 = 256;
  int v2 = sysctl(v12, 2u, a1, &v11, 0, 0);
  *(void *)size_t v12 = 0xA00000001;
  size_t v11 = 256;
  int v3 = sysctl(v12, 2u, a1->nodename, &v11, 0, 0);
  *(void *)size_t v12 = 0x200000001;
  size_t v11 = 256;
  int v6 = sysctl(v12, 2u, a1->release, &v11, 0, 0) == -1 || v3 == -1 || v2 == -1;
  *(void *)size_t v12 = 0x400000001;
  size_t v11 = 256;
  versiouint64_t n = a1->version;
  if (sysctl(v12, 2u, a1->version, &v11, 0, 0) == -1)
  {
    int v8 = -1;
  }
  else
  {
    int v8 = v6 << 31 >> 31;
    if (v11)
    {
      size_t v9 = v11 - 1;
      do
      {
        if (*version - 9 <= 1) {
          *versiouint64_t n = 32 * (v9 > 1);
        }
        ++version;
        --v9;
      }
      while (v9 != -1);
    }
  }
  *(void *)size_t v12 = 0x100000006;
  size_t v11 = 256;
  if (sysctl(v12, 2u, a1->machine, &v11, 0, 0) == -1) {
    return -1;
  }
  else {
    return v8;
  }
}

uint64_t _os_get_build(void *a1)
{
  size_t v3 = 32;
  *(void *)uint64_t v4 = 0x4100000001;
  uint64_t result = sysctl(v4, 2u, a1, &v3, 0, 0);
  if (!result && v3 == 1) {
    strcpy((char *)a1, "99Z999");
  }
  return result;
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  if (*a1 != 8)
  {
    if (a2 != 2 || *a1 != 1 || a1[1] != 45) {
      return __sysctl();
    }
    if (!a5)
    {
      if (a3)
      {
        if (!a4)
        {
          int v8 = __error();
          int v9 = 14;
          goto LABEL_13;
        }
        if (*a4 <= 1) {
          goto LABEL_24;
        }
        int result = 0;
        *(_WORD *)a3 = 47;
      }
      else
      {
        int result = 0;
        if (!a4) {
          return result;
        }
      }
      size_t v10 = 2;
LABEL_32:
      *a4 = v10;
      return result;
    }
    goto LABEL_12;
  }
  if (a5)
  {
LABEL_12:
    int v8 = __error();
    int v9 = 1;
LABEL_13:
    int *v8 = v9;
    return -1;
  }
  if (a2 != 2)
  {
LABEL_20:
    int v8 = __error();
    int v9 = 22;
    goto LABEL_13;
  }
  int v6 = a1[1];
  if (v6 == 1)
  {
    if (a3)
    {
      if (*a4 > 0x1D)
      {
        int result = 0;
        *a4 = 30;
        strcpy((char *)a3, "/usr/bin:/bin:/usr/sbin:/sbin");
        return result;
      }
      goto LABEL_24;
    }
    int result = 0;
    size_t v10 = 30;
    goto LABEL_32;
  }
  if (!a3)
  {
    int result = 0;
    size_t v10 = 4;
    goto LABEL_32;
  }
  if (*a4 <= 3)
  {
LABEL_24:
    int v8 = __error();
    int v9 = 12;
    goto LABEL_13;
  }
  *a4 = 4;
  switch(v6)
  {
    case 2:
    case 4:
      int result = 0;
      int v11 = 99;
      goto LABEL_41;
    case 3:
    case 8:
      int result = 0;
      int v11 = 2048;
      goto LABEL_41;
    case 5:
      int result = 0;
      int v11 = 1000;
      goto LABEL_41;
    case 6:
      int result = 0;
      int v11 = 2;
      goto LABEL_41;
    case 7:
      int result = 0;
      int v11 = 32;
      goto LABEL_41;
    case 9:
    case 20:
      int result = 0;
      int v11 = 255;
      goto LABEL_41;
    case 10:
      int result = 0;
      int v11 = 200112;
      goto LABEL_41;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      int result = 0;
      *(_DWORD *)a3 = 0;
      return result;
    case 19:
      int result = 0;
      int v11 = 20;
LABEL_41:
      *(_DWORD *)a3 = v11;
      break;
    default:
      goto LABEL_20;
  }
  return result;
}

uint64_t fstatx_syscall(unsigned int *a1)
{
  return MEMORY[0x1F40CFD90](*a1);
}

uint64_t statx_syscall(void *a1)
{
  return MEMORY[0x1F40CFE48](*a1);
}

uint64_t lstatx_syscall(void *a1)
{
  return MEMORY[0x1F40CFDC8](*a1);
}

ssize_t acl_copy_ext_native(void *buf_p, acl_t acl, ssize_t size)
{
  ssize_t v6 = acl_size(acl);
  if (v6 < 0) {
    return -1;
  }
  ssize_t v7 = v6;
  if (v6 > size)
  {
    *__error() = 34;
    return -1;
  }
  MEMORY[0x18C122530](buf_p, v6);
  *(_DWORD *)buf_p = 19710317;
  if (acl == (acl_t)1)
  {
    *((_DWORD *)buf_p + 9) = -1;
  }
  else
  {
    int v9 = *((_DWORD *)acl + 1);
    int v10 = *((_DWORD *)acl + 3);
    *((_DWORD *)buf_p + 9) = v9;
    *((_DWORD *)buf_p + 10) = v10;
    if (v9)
    {
      unint64_t v11 = 0;
      size_t v12 = (char *)buf_p + 64;
      uint64_t v13 = (char *)acl + 24;
      do
      {
        *(_OWORD *)(v12 - 5) = *(_OWORD *)v13;
        int v14 = *((_DWORD *)v13 + 5);
        *(v12 - 1) = *((_DWORD *)v13 + 4) & 0xFFFFFFF0 | *((_DWORD *)v13 - 1) & 0xF;
        *size_t v12 = v14;
        ++v11;
        v12 += 6;
        v13 += 32;
      }
      while (v11 < *((unsigned int *)acl + 1));
    }
  }
  return v7;
}

ssize_t acl_size(acl_t acl)
{
  if (acl == (acl_t)1) {
    return 44;
  }
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17) && *(_DWORD *)acl == -1407532798) {
    return 24 * *((unsigned int *)acl + 1) + 44;
  }
  *__error() = 22;
  return -1;
}

char *__cdecl realpath(const char *a1, char *a2)
{
  int v2 = (unsigned char *)MEMORY[0x1F41887A8](a1, a2);
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  memset(&v43, 0, sizeof(v43));
  memset(&v45, 0, 512);
  if (!v2)
  {
    int v14 = __error();
    ssize_t v6 = 0;
    int v15 = 22;
LABEL_14:
    int *v14 = v15;
    return v6;
  }
  uint64_t v4 = v2;
  if (!*v2)
  {
    int v14 = __error();
    ssize_t v6 = 0;
    int v15 = 2;
    goto LABEL_14;
  }
  int v5 = v3;
  ssize_t v6 = v3;
  if (!v3)
  {
    ssize_t v6 = (char *)malloc_type_malloc(0x400uLL, 0x2E12113EuLL);
    if (!v6) {
      return v6;
    }
  }
  if ((realpath_rootdev_inited & 1) == 0)
  {
    realpath_rootdev_inited = 1;
    if (stat("/", &v43) < 0) {
      goto LABEL_86;
    }
    realpath_rootdev = v43.st_dev;
  }
  __error();
  if (*v4 == 47)
  {
    *(_WORD *)ssize_t v6 = 47;
    int v8 = v4[1];
    ssize_t v7 = v4 + 1;
    if (!v8) {
      return v6;
    }
    unint64_t v9 = MEMORY[0x18C122F90](v49, v7, 1024);
    if (v9 >= 0x400) {
      goto LABEL_83;
    }
    uint64_t v11 = v9;
    size_t v12 = (stat *)&realpath_rootdev;
    unint64_t v13 = 1;
  }
  else
  {
    if (!__private_getcwd(v6, 1024, 0))
    {
      *(_WORD *)ssize_t v6 = 46;
      goto LABEL_86;
    }
    unint64_t v13 = j__strsignal_r((int)v6, v17, v18);
    unint64_t v19 = MEMORY[0x18C122F90](v49, v4, 1024);
    if (v19 > 0x3FF || v13 > 0x3FF) {
      goto LABEL_83;
    }
    uint64_t v11 = v19;
    if (v13 < 2)
    {
      size_t v12 = (stat *)&realpath_rootdev;
    }
    else
    {
      size_t v12 = &v43;
      if (stat(v6, &v43) < 0) {
        goto LABEL_86;
      }
    }
  }
  if (!v11)
  {
    unint64_t v22 = v13;
LABEL_90:
    if (v22 >= 2 && v6[v22 - 1] == 47) {
      v6[v22 - 1] = 0;
    }
    return v6;
  }
  uint64_t v40 = 0;
  __darwin_ino64_t v41 = 0;
  LODWORD(v20) = 0;
  uint64_t st_dev = v12->st_dev;
  while (2)
  {
    unsigned int v42 = v20;
    uint64_t v20 = st_dev;
    unint64_t v22 = v13;
    while (1)
    {
      uint64_t v23 = j__strncasecmp(v49, (const char *)0x2F, v10);
      uint64_t v24 = v23;
      uint64_t v25 = v23 - (void)v49;
      if (v23) {
        uint64_t v26 = v23 - (void)v49;
      }
      else {
        uint64_t v26 = v11;
      }
      j__mkdtempat_np((int)&v47, v49);
      *((unsigned char *)&v47 + v26) = 0;
      if (v24)
      {
        j__mkostemp(v49, v24 + 1);
        v11 += ~v25;
      }
      else
      {
        uint64_t v11 = 0;
        v49[0] = 0;
      }
      if (v6[v22 - 1] != 47)
      {
        if (v22 + 1 >= 0x400) {
          goto LABEL_83;
        }
        v6[v22] = 47;
        v6[++v22] = 0;
      }
      if (!(_BYTE)v47 || v47 == 46) {
        goto LABEL_41;
      }
      if (v47 ^ 0x2E2E | v48) {
        break;
      }
      if (v22 >= 2)
      {
        v6[v22 - 1] = 0;
        uint64_t v27 = strrchr(v6, 47);
        v27[1] = 0;
        unint64_t v22 = v27 + 1 - v6;
      }
LABEL_41:
      if (!v11) {
        goto LABEL_90;
      }
    }
    unint64_t v28 = MEMORY[0x18C122F80](v6, &v47, 1024);
    if (v28 >= 0x400) {
      goto LABEL_83;
    }
    unint64_t v13 = v28;
    if (!getattrlist(v6, &_rp_alist, &v50, 0x41CuLL, 1u))
    {
      char v30 = 0;
      dev_t v31 = HIDWORD(v50);
      HIDWORD(v40) = v51 == 5;
      __darwin_ino64_t st_ino = DWORD1(v51);
      goto LABEL_52;
    }
    if (*__error() != 45 && *__error() != 22) {
      goto LABEL_86;
    }
    int v29 = lstat(v6, &v43);
    if (!v29)
    {
      HIDWORD(v40) = (v43.st_mode & 0xF000) == 40960;
      dev_t v31 = v43.st_dev;
      char v30 = 1;
      __darwin_ino64_t st_ino = v43.st_ino;
LABEL_52:
      __darwin_ino64_t v41 = st_ino;
LABEL_53:
      unsigned int v42 = v31;
      if (v31 != v20)
      {
        if (statfs(v6, &v45))
        {
          uint64_t v20 = v42;
        }
        else
        {
          uint64_t v20 = v42;
          if (!lstat(v45.f_mntonname, &v43) && v42 == v43.st_dev && v41 == v43.st_ino)
          {
            j__strnstr(__big, v45.f_mntonname, v10);
            do
            {
              uint64_t v33 = strrchr(__big, 47);
              if (!v33) {
                break;
              }
              if (v33 <= __big)
              {
                unint64_t v22 = MEMORY[0x18C122F90](v6, v45.f_mntonname, 1024);
                goto LABEL_41;
              }
              *uint64_t v33 = 0;
            }
            while ((lstat(__big, &v43) & 0x80000000) == 0 && (v43.st_mode & 0xF000) == 0x4000);
          }
        }
      }
      if (!HIDWORD(v40))
      {
        if (v30)
        {
          uint64_t st_dev = v20;
        }
        else
        {
          v6[v22] = 0;
          unint64_t v13 = MEMORY[0x18C122F80](v6, (char *)&v50 + SDWORD1(v50) + 4, 1024);
          uint64_t st_dev = v20;
          if (v13 >= 0x400) {
            goto LABEL_83;
          }
        }
LABEL_81:
        unint64_t v22 = v13;
        if (!v11) {
          goto LABEL_90;
        }
        continue;
      }
      if (v40 >= 0x21)
      {
        uint64_t v37 = __error();
        int v38 = 62;
        goto LABEL_85;
      }
      ssize_t v34 = readlink(v6, v46, 0x400uLL);
      unint64_t v35 = v34;
      if ((unint64_t)(v34 - 1024) <= 0xFFFFFFFFFFFFFC00)
      {
        if (v34 < 0) {
          goto LABEL_86;
        }
        uint64_t v37 = __error();
        if (!v35)
        {
          int v38 = 2;
          goto LABEL_85;
        }
        goto LABEL_84;
      }
      v46[v34] = 0;
      if (v46[0] == 47)
      {
        v6[1] = 0;
        uint64_t st_dev = realpath_rootdev;
        unint64_t v13 = 1;
      }
      else
      {
        uint64_t v36 = strrchr(v6, 47);
        v36[1] = 0;
        unint64_t v13 = v36 + 1 - v6;
        uint64_t st_dev = v20;
      }
      if (!v24) {
        goto LABEL_79;
      }
      if (v46[v35 - 1] != 47)
      {
        if (v35 >= 0x3FF) {
          goto LABEL_83;
        }
        *(_WORD *)&v46[v35] = 47;
      }
      if ((unint64_t)MEMORY[0x18C122F80](v46, v49, 1024) < 0x400)
      {
LABEL_79:
        LODWORD(v40) = v40 + 1;
        uint64_t v11 = MEMORY[0x18C122F90](v49, v46, 1024);
        goto LABEL_81;
      }
LABEL_83:
      uint64_t v37 = __error();
LABEL_84:
      int v38 = 63;
LABEL_85:
      *uint64_t v37 = v38;
      goto LABEL_86;
    }
    break;
  }
  if ((v29 & 0x80000000) == 0)
  {
    char v30 = 0;
    dev_t v31 = v42;
    goto LABEL_53;
  }
LABEL_86:
  if (v5) {
    return 0;
  }
  int v39 = *__error();
  free(v6);
  ssize_t v6 = 0;
  *__error() = v39;
  return v6;
}

int inet_pton(int a1, const char *a2, void *a3)
{
  uint64_t v4 = (char *)a2;
  if (a1 != 30)
  {
    if (a1 == 2)
    {
      return inet_pton4(a2, a3);
    }
    unint64_t v9 = __error();
    int v10 = 47;
LABEL_11:
    *unint64_t v9 = v10;
    return -1;
  }
  if (a2 && (ssize_t v6 = strrchr((char *)a2, 37)) != 0)
  {
    ssize_t v7 = v6;
    int v8 = strdup(v4);
    if (!v8)
    {
      unint64_t v9 = __error();
      int v10 = 12;
      goto LABEL_11;
    }
    int v34 = 0;
    uint64_t v32 = v7;
    v8[v7 - v4] = 0;
    uint64_t v4 = v8;
  }
  else
  {
    uint64_t v32 = 0;
    int v34 = 1;
  }
  long long v35 = 0uLL;
  int v11 = *v4;
  if (!*v4 || (size_t v12 = v4, v11 == 58) && (size_t v12 = v4 + 1, v4[1] != 58))
  {
LABEL_54:
    if ((v34 & 1) == 0) {
      free(v4);
    }
    return 0;
  }
  unsigned int v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  int v16 = (char *)&v35;
  while (2)
  {
    char v30 = v12;
    dev_t v31 = v14;
    uint64_t v33 = v15;
    uint64_t v17 = (char *)&v35 + v15;
    ++v12;
    char v18 = 1;
    unint64_t v19 = v16;
    while (1)
    {
      uint64_t v20 = (_filesec *)(char)v11;
      uint64_t v21 = j__mkdirx_np("0123456789abcdef", v20);
      if (!v21) {
        break;
      }
      unint64_t v22 = "0123456789abcdef";
LABEL_22:
      unsigned int v13 = (v21 - v22) | (16 * v13);
      if (HIWORD(v13)) {
        goto LABEL_54;
      }
      char v18 = 0;
      int v23 = *v12++;
      LOBYTE(v11) = v23;
      unint64_t v19 = v17;
      if (!v23)
      {
        if (v33 > 14) {
          goto LABEL_54;
        }
        *(_WORD *)((char *)&v35 + v33) = bswap32(v13) >> 16;
        uint64_t v15 = v33 + 2;
LABEL_36:
        unint64_t v19 = v31;
        goto LABEL_37;
      }
    }
    uint64_t v21 = j__mkdirx_np("0123456789ABCDEF", v20);
    if (v21)
    {
      unint64_t v22 = "0123456789ABCDEF";
      goto LABEL_22;
    }
    if (v20 != 58)
    {
      if (v20 != 46 || v33 > 12 || (int)inet_pton4(v30, v19) <= 0) {
        goto LABEL_54;
      }
      uint64_t v15 = v33 + 4;
      goto LABEL_36;
    }
    if (v18)
    {
      if (v31) {
        goto LABEL_54;
      }
    }
    else
    {
      if (!*v12 || v33 > 14) {
        goto LABEL_54;
      }
      uint64_t v24 = (char *)&v35 + v33;
      *unint64_t v19 = BYTE1(v13);
      v33 += 2;
      v24[1] = v13;
      unint64_t v19 = v31;
      unsigned int v13 = 0;
    }
    uint64_t v15 = v33;
    int v16 = (char *)&v35 + v33;
    LOBYTE(v11) = *v12;
    int v14 = v19;
    if (*v12) {
      continue;
    }
    break;
  }
LABEL_37:
  if (v19)
  {
    if (v15 == 16) {
      goto LABEL_54;
    }
    uint64_t v25 = (char *)&v35 + v15;
    uint64_t v26 = (char *)((char *)&v35 + v15 - v19);
    if ((int)v25 - (int)v19 >= 1)
    {
      uint64_t v27 = (v26 + 1) - 1;
      unint64_t v28 = (char *)&v35 + 15;
      int v29 = &v19[(int)v26 - 1];
      do
      {
        *v28-- = *v29;
        *v29-- = 0;
        --v27;
      }
      while (v27);
    }
  }
  else if (v15 != 16)
  {
    goto LABEL_54;
  }
  *(_OWORD *)a3 = v35;
  if ((v34 & 1) == 0)
  {
    free(v4);
    if (*(unsigned __int8 *)a3 == 254 && (*((unsigned char *)a3 + 1) & 0xC0) == 0x80) {
      *((_WORD *)a3 + 1) = bswap32(if_nametoindex(v32 + 1)) >> 16;
    }
  }
  return 1;
}

uint64_t inet_pton4(unsigned char *a1, _DWORD *a2)
{
  LOBYTE(v11) = 0;
  char v2 = *a1;
  if (!*a1) {
    return 0;
  }
  LOBYTE(v4) = 0;
  int v5 = 0;
  int v6 = 0;
  ssize_t v7 = a1 + 1;
  int v8 = &v11;
  do
  {
    uint64_t result = j__mkdirx_np("0123456789", (filesec_t)v2);
    if (result)
    {
      uint64_t v4 = result - (void)"0123456789" + 10 * v4;
      if ((v4 & 0xFFFFFF00) != 0) {
        return 0;
      }
      *(unsigned char *)int v8 = v4;
      if (!v6)
      {
        if (v5 > 3) {
          return 0;
        }
        ++v5;
      }
      int v6 = 1;
    }
    else
    {
      if (!v6 || v2 != 46 || v5 == 4) {
        return result;
      }
      LOBYTE(v4) = 0;
      int v6 = 0;
      *((unsigned char *)v8 + 1) = 0;
      int v8 = (int *)((char *)v8 + 1);
    }
    int v10 = *v7++;
    char v2 = v10;
  }
  while (v10);
  if (v5 < 4) {
    return 0;
  }
  *a2 = v11;
  return 1;
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  char v2 = (unsigned char *)MEMORY[0x1F41887A8](a1, a2);
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  memset(&v43, 0, sizeof(v43));
  memset(&v45, 0, 512);
  if (!v2)
  {
    int v14 = __error();
    int v6 = 0;
    int v15 = 22;
LABEL_14:
    int *v14 = v15;
    return v6;
  }
  uint64_t v4 = v2;
  if (!*v2)
  {
    int v14 = __error();
    int v6 = 0;
    int v15 = 2;
    goto LABEL_14;
  }
  int v5 = v3;
  int v6 = v3;
  if (!v3)
  {
    int v6 = (char *)malloc_type_malloc(0x400uLL, 0x2E12113EuLL);
    if (!v6) {
      return v6;
    }
  }
  if ((realpath_DARWIN_EXTSN_rootdev_inited & 1) == 0)
  {
    realpath_DARWIN_EXTSN_rootdev_inited = 1;
    if (stat("/", &v43) < 0) {
      goto LABEL_86;
    }
    realpath_DARWIN_EXTSN_rootdev = v43.st_dev;
  }
  __error();
  if (*v4 == 47)
  {
    *(_WORD *)int v6 = 47;
    int v8 = v4[1];
    ssize_t v7 = v4 + 1;
    if (!v8) {
      return v6;
    }
    unint64_t v9 = MEMORY[0x18C122F90](v49, v7, 1024);
    if (v9 >= 0x400) {
      goto LABEL_83;
    }
    uint64_t v11 = v9;
    size_t v12 = (stat *)&realpath_DARWIN_EXTSN_rootdev;
    unint64_t v13 = 1;
  }
  else
  {
    if (!__private_getcwd(v6, 1024, 1))
    {
      *(_WORD *)int v6 = 46;
      goto LABEL_86;
    }
    unint64_t v13 = j__strsignal_r((int)v6, v17, v18);
    unint64_t v19 = MEMORY[0x18C122F90](v49, v4, 1024);
    if (v19 > 0x3FF || v13 > 0x3FF) {
      goto LABEL_83;
    }
    uint64_t v11 = v19;
    if (v13 < 2)
    {
      size_t v12 = (stat *)&realpath_DARWIN_EXTSN_rootdev;
    }
    else
    {
      size_t v12 = &v43;
      if (stat(v6, &v43) < 0) {
        goto LABEL_86;
      }
    }
  }
  if (!v11)
  {
    unint64_t v22 = v13;
LABEL_90:
    if (v22 >= 2 && v6[v22 - 1] == 47) {
      v6[v22 - 1] = 0;
    }
    return v6;
  }
  uint64_t v40 = 0;
  __darwin_ino64_t v41 = 0;
  LODWORD(v20) = 0;
  uint64_t st_dev = v12->st_dev;
  while (2)
  {
    unsigned int v42 = v20;
    uint64_t v20 = st_dev;
    unint64_t v22 = v13;
    while (1)
    {
      uint64_t v23 = j__strncasecmp(v49, (const char *)0x2F, v10);
      uint64_t v24 = v23;
      uint64_t v25 = v23 - (void)v49;
      if (v23) {
        uint64_t v26 = v23 - (void)v49;
      }
      else {
        uint64_t v26 = v11;
      }
      j__mkdtempat_np((int)&v47, v49);
      *((unsigned char *)&v47 + v26) = 0;
      if (v24)
      {
        j__mkostemp(v49, v24 + 1);
        v11 += ~v25;
      }
      else
      {
        uint64_t v11 = 0;
        v49[0] = 0;
      }
      if (v6[v22 - 1] != 47)
      {
        if (v22 + 1 >= 0x400) {
          goto LABEL_83;
        }
        v6[v22] = 47;
        v6[++v22] = 0;
      }
      if (!(_BYTE)v47 || v47 == 46) {
        goto LABEL_41;
      }
      if (v47 ^ 0x2E2E | v48) {
        break;
      }
      if (v22 >= 2)
      {
        v6[v22 - 1] = 0;
        uint64_t v27 = strrchr(v6, 47);
        v27[1] = 0;
        unint64_t v22 = v27 + 1 - v6;
      }
LABEL_41:
      if (!v11) {
        goto LABEL_90;
      }
    }
    unint64_t v28 = MEMORY[0x18C122F80](v6, &v47, 1024);
    if (v28 >= 0x400) {
      goto LABEL_83;
    }
    unint64_t v13 = v28;
    if (!getattrlist(v6, &_rp_alist, &v50, 0x41CuLL, 1u))
    {
      char v30 = 0;
      dev_t v31 = HIDWORD(v50);
      HIDWORD(v40) = v51 == 5;
      __darwin_ino64_t st_ino = DWORD1(v51);
      goto LABEL_52;
    }
    if (*__error() != 45 && *__error() != 22) {
      goto LABEL_86;
    }
    int v29 = lstat(v6, &v43);
    if (!v29)
    {
      HIDWORD(v40) = (v43.st_mode & 0xF000) == 40960;
      dev_t v31 = v43.st_dev;
      char v30 = 1;
      __darwin_ino64_t st_ino = v43.st_ino;
LABEL_52:
      __darwin_ino64_t v41 = st_ino;
LABEL_53:
      unsigned int v42 = v31;
      if (v31 != v20)
      {
        if (statfs(v6, &v45))
        {
          uint64_t v20 = v42;
        }
        else
        {
          uint64_t v20 = v42;
          if (!lstat(v45.f_mntonname, &v43) && v42 == v43.st_dev && v41 == v43.st_ino)
          {
            j__strnstr(__big, v45.f_mntonname, v10);
            do
            {
              uint64_t v33 = strrchr(__big, 47);
              if (!v33) {
                break;
              }
              if (v33 <= __big)
              {
                unint64_t v22 = MEMORY[0x18C122F90](v6, v45.f_mntonname, 1024);
                goto LABEL_41;
              }
              *uint64_t v33 = 0;
            }
            while ((lstat(__big, &v43) & 0x80000000) == 0 && (v43.st_mode & 0xF000) == 0x4000);
          }
        }
      }
      if (!HIDWORD(v40))
      {
        if (v30)
        {
          uint64_t st_dev = v20;
        }
        else
        {
          v6[v22] = 0;
          unint64_t v13 = MEMORY[0x18C122F80](v6, (char *)&v50 + SDWORD1(v50) + 4, 1024);
          uint64_t st_dev = v20;
          if (v13 >= 0x400) {
            goto LABEL_83;
          }
        }
LABEL_81:
        unint64_t v22 = v13;
        if (!v11) {
          goto LABEL_90;
        }
        continue;
      }
      if (v40 >= 0x21)
      {
        uint64_t v37 = __error();
        int v38 = 62;
        goto LABEL_85;
      }
      ssize_t v34 = readlink(v6, v46, 0x400uLL);
      unint64_t v35 = v34;
      if ((unint64_t)(v34 - 1024) <= 0xFFFFFFFFFFFFFC00)
      {
        if (v34 < 0) {
          goto LABEL_86;
        }
        uint64_t v37 = __error();
        if (!v35)
        {
          int v38 = 2;
          goto LABEL_85;
        }
        goto LABEL_84;
      }
      v46[v34] = 0;
      if (v46[0] == 47)
      {
        v6[1] = 0;
        uint64_t st_dev = realpath_DARWIN_EXTSN_rootdev;
        unint64_t v13 = 1;
      }
      else
      {
        uint64_t v36 = strrchr(v6, 47);
        v36[1] = 0;
        unint64_t v13 = v36 + 1 - v6;
        uint64_t st_dev = v20;
      }
      if (!v24) {
        goto LABEL_79;
      }
      if (v46[v35 - 1] != 47)
      {
        if (v35 >= 0x3FF) {
          goto LABEL_83;
        }
        *(_WORD *)&v46[v35] = 47;
      }
      if ((unint64_t)MEMORY[0x18C122F80](v46, v49, 1024) < 0x400)
      {
LABEL_79:
        LODWORD(v40) = v40 + 1;
        uint64_t v11 = MEMORY[0x18C122F90](v49, v46, 1024);
        goto LABEL_81;
      }
LABEL_83:
      uint64_t v37 = __error();
LABEL_84:
      int v38 = 63;
LABEL_85:
      *uint64_t v37 = v38;
      goto LABEL_86;
    }
    break;
  }
  if ((v29 & 0x80000000) == 0)
  {
    char v30 = 0;
    dev_t v31 = v42;
    goto LABEL_53;
  }
LABEL_86:
  if (v5) {
    return 0;
  }
  int v39 = *__error();
  free(v6);
  int v6 = 0;
  *__error() = v39;
  return v6;
}

char *__cdecl strrchr(char *__s, int __c)
{
  uint64_t result = 0;
  uint64_t v4 = __s;
  do
  {
    int v6 = *v4++;
    int v5 = v6;
    if ((char)__c == v6) {
      uint64_t result = __s;
    }
    long long __s = v4;
  }
  while (v5);
  return result;
}

int rand(void)
{
  unint64_t v0 = next;
  if (!next) {
    unint64_t v0 = 123459876;
  }
  int64_t v1 = 16807 * (v0 % 0x1F31D) - 2836 * (v0 / 0x1F31D);
  next = v1 + (v1 < 0 ? 0x7FFFFFFFuLL : 0);
  return next & 0x7FFFFFFF;
}

unsigned int sleep(unsigned int a1)
{
  unsigned int v1 = a1;
  if ((a1 & 0x80000000) != 0) {
    return a1 - 0x7FFFFFFF + sleep(0x7FFFFFFFu);
  }
  v3.unint64_t tv_sec = 0;
  v3.tv_nsec = 0;
  __rqtp.unint64_t tv_sec = a1;
  __rqtp.tv_nsec = 0;
  if (nanosleep(&__rqtp, &v3) != -1) {
    return 0;
  }
  if (*__error() == 4)
  {
    if (v3.tv_nsec) {
      return LODWORD(v3.tv_sec) + 1;
    }
    else {
      return v3.tv_sec;
    }
  }
  return v1;
}

int usleep(useconds_t a1)
{
  v2.unint64_t tv_sec = a1 / 0xF4240uLL;
  v2.tv_nsec = 1000 * (a1 % 0xF4240);
  return nanosleep(&v2, 0);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  if (!*MEMORY[0x1E4F14CA8]) {
    *MEMORY[0x1E4F14CA8] = 1;
  }
  cur_mach_error_t time = 0;
  mach_timespec_t v19 = 0;
  pthread_testcancel();
  if (!__rqtp || __rqtp->tv_sec < 0 || __rqtp->tv_nsec >= 0x3B9ACA00uLL) {
    goto LABEL_9;
  }
  if (__rmtp)
  {
    mach_error_t time = clock_get_time(clock_port, &cur_time);
    if (time)
    {
      int v5 = __stderrp;
      int v6 = mach_error_string(time);
      fprintf(v5, "clock_get_time() failed: %s\n", v6);
      goto LABEL_9;
    }
  }
  if ((__semwait_signal() & 0x80000000) == 0) {
    return -1;
  }
  if (*__error() != 60)
  {
    if (*__error() == 4)
    {
      if (__rmtp)
      {
        mach_error_t v8 = clock_get_time(clock_port, &v19);
        if (!v8)
        {
          clock_res_t v11 = cur_time.tv_nsec + LODWORD(__rqtp->tv_nsec);
          if (v11 <= 999999999)
          {
            unsigned int tv_sec = cur_time.tv_sec;
          }
          else
          {
            v11 -= 1000000000;
            unsigned int tv_sec = cur_time.tv_sec + 1;
          }
          unsigned int v13 = tv_sec + LODWORD(__rqtp->tv_sec);
          if (v13 <= v19.tv_sec)
          {
            if (v13 < v19.tv_sec || (clock_res_t tv_nsec = v19.tv_nsec, v11 <= v19.tv_nsec))
            {
              __rmtp->unsigned int tv_sec = 0;
              __rmtp->clock_res_t tv_nsec = 0;
              return -1;
            }
          }
          else
          {
            clock_res_t tv_nsec = v19.tv_nsec;
          }
          BOOL v15 = __OFSUB__(v11, tv_nsec);
          int v16 = v11 - tv_nsec;
          if (v16 < 0 != v15) {
            int v17 = v16 + 1000000000;
          }
          else {
            int v17 = v16;
          }
          __rmtp->unsigned int tv_sec = v13 + (v16 >> 31) - v19.tv_sec;
          __rmtp->clock_res_t tv_nsec = v17;
          return -1;
        }
        unint64_t v9 = __stderrp;
        size_t v10 = mach_error_string(v8);
        fprintf(v9, "clock_get_time() failed: %s\n", v10);
      }
      return -1;
    }
LABEL_9:
    *__error() = 22;
    return -1;
  }
  return 0;
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  va_start(va, a3);
  return vsscanf_l(a1, a2, a3, va);
}

int sscanf(const char *a1, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vsscanf_l(a1, v5, a2, va);
}

int vsscanf_l(const char *a1, locale_t a2, const char *a3, va_list a4)
{
  long long v19 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v17 = (unint64_t)v20;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  v20[0] = 0;
  v20[1] = 850045858;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  if (off_1E911B938)
  {
    ((void (*)(const char *))off_1E911B938)(a1);
    char v8 = v25 & 0xF8;
  }
  else
  {
    char v8 = 0;
  }
  DWORD2(v11) = -65532;
  size_t v10 = (char *)a1;
  *(void *)&long long v12 = a1;
  LODWORD(v11) = j__strsignal_r((int)a1, (char *)a2, (size_t)a3);
  DWORD2(v12) = v11;
  *((void *)&v14 + 1) = eofread;
  *(void *)&long long v16 = 0;
  *(void *)&long long v18 = 0;
  LOBYTE(v25) = v8;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  return __svfscanf_l(&v10, a2, (unsigned __int8 *)a3, (wint_t **)a4);
}

uint64_t __svfscanf_l(char **a1, _xlocale *a2, unsigned __int8 *a3, wint_t **a4)
{
  int v177 = a4;
  if (off_1E911B948) {
    ((void (*)(_xlocale *, uint64_t))off_1E911B948)(a2, 1472);
  }
  if (off_1E911B938) {
    ((void (*)(unsigned __int8 *))off_1E911B938)(a3);
  }
  memset(&v178, 0, sizeof(v178));
  if (a2 == (_xlocale *)-1) {
    ssize_t v7 = (_xlocale *)&__global_locale;
  }
  else {
    ssize_t v7 = a2;
  }
  if (a2) {
    char v8 = v7;
  }
  else {
    char v8 = (_xlocale *)&__c_locale;
  }
  int v171 = *(_DWORD *)(*((void *)v8 + 166) + 64);
  unint64_t v9 = a1[13];
  if ((v9[72] & 7) == 0) {
    v9[72] |= 7u;
  }
  uint64_t v175 = v177;
  char v176 = 0;
  unsigned int v10 = *a3;
  if (!*a3) {
    return 0;
  }
  uint64_t v11 = 0;
  locale_t v172 = v8;
  wint_t v173 = 0;
  uint64_t v12 = 0;
  if (v8 == (_xlocale *)-1) {
    long long v13 = (_xlocale *)&__global_locale;
  }
  else {
    long long v13 = v8;
  }
  while (2)
  {
    *(void *)base = v12;
    long long v14 = a3;
    while (1)
    {
      a3 = v14;
LABEL_19:
      long long v15 = &_DefaultRuneLocale;
      if ((v10 & 0x80) != 0) {
        long long v15 = *(_RuneLocale **)(*((void *)v13 + 166) + 120);
      }
      long long v14 = a3 + 1;
      if ((v15->__runetype[v10] & 0x4000) != 0)
      {
        int v29 = *((_DWORD *)a1 + 2);
        while (v29 > 0 || !__srefill((uint64_t)a1))
        {
          long long v30 = *a1;
          long long v31 = &_DefaultRuneLocale;
          if (**a1 < 0) {
            long long v31 = *(_RuneLocale **)(*((void *)v13 + 166) + 120);
          }
          if ((v31->__runetype[**a1] & 0x4000) == 0) {
            break;
          }
          ++v173;
          int v29 = *((_DWORD *)a1 + 2) - 1;
          *((_DWORD *)a1 + 2) = v29;
          *a1 = v30 + 1;
        }
        goto LABEL_89;
      }
      if (v10 == 37) {
        break;
      }
      if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1)) {
        goto LABEL_483;
      }
LABEL_87:
      long long v32 = *a1;
      if (v10 != **a1) {
        return v11;
      }
      --*((_DWORD *)a1 + 2);
      *a1 = v32 + 1;
      ++v173;
LABEL_89:
      unsigned int v10 = *v14;
      if (!*v14) {
        return v11;
      }
    }
    unsigned int v16 = 0;
    unint64_t v17 = 0;
    while (2)
    {
      a3 = v14 + 1;
      switch(*v14)
      {
        case '$':
          if ((v17 - 10) < 0xFFFFFFF7 || *(v14 - 2) != 37) {
            goto LABEL_483;
          }
          unsigned int v18 = v17;
          unint64_t v17 = 0;
          int v177 = v175;
          ++v14;
          if (v18 < 2) {
            continue;
          }
          unsigned int v19 = v18 + 1;
          do
          {
            ++v177;
            --v19;
          }
          while (v19 > 2);
          unint64_t v17 = 0;
          goto LABEL_26;
        case '%':
          int v26 = *((_DWORD *)a1 + 2);
          while (2)
          {
            if (v26 <= 0 && __srefill((uint64_t)a1)) {
              goto LABEL_483;
            }
            long long v27 = *a1;
            if (**a1 < 0) {
              long long v28 = *(_RuneLocale **)(*((void *)v13 + 166) + 120);
            }
            else {
              long long v28 = &_DefaultRuneLocale;
            }
            if ((v28->__runetype[**a1] & 0x4000) != 0)
            {
              ++v173;
              int v26 = *((_DWORD *)a1 + 2) - 1;
              *((_DWORD *)a1 + 2) = v26;
              *a1 = v27 + 1;
              continue;
            }
            break;
          }
          unsigned int v10 = 37;
          ++v14;
          goto LABEL_87;
        case '&':
        case '\'':
        case '(':
        case ')':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'B':
        case 'D':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'Y':
        case 'Z':
        case '\\':
        case ']':
        case '^':
        case '_':
        case 'b':
        case 'k':
        case 'm':
        case 'r':
        case 'v':
        case 'w':
        case 'y':
          return v11;
        case '*':
          v16 |= 8u;
          goto LABEL_26;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          unint64_t v17 = *v14 + 10 * v17 - 48;
          goto LABEL_26;
        case 'A':
        case 'E':
        case 'F':
        case 'G':
        case 'a':
        case 'e':
        case 'f':
        case 'g':
          int v33 = 4;
          goto LABEL_106;
        case 'C':
          v16 |= 1u;
          goto LABEL_94;
        case 'L':
          v16 |= 2u;
          goto LABEL_26;
        case 'S':
          v16 |= 1u;
          goto LABEL_96;
        case 'X':
        case 'x':
          int v34 = 33024;
          goto LABEL_102;
        case '[':
          unsigned int v35 = v14[1];
          if (v35 == 94)
          {
            a3 = v14 + 3;
            unsigned int v35 = v14[2];
            unsigned int v36 = 1;
          }
          else
          {
            unsigned int v36 = 0;
            a3 = v14 + 2;
          }
          int v169 = v13;
          int8x16_t v181 = vdupq_n_s8(v36);
          int8x16_t v182 = v181;
          v180[12] = v181;
          v180[13] = v181;
          v180[10] = v181;
          v180[11] = v181;
          v180[8] = v181;
          v180[9] = v181;
          v180[6] = v181;
          v180[7] = v181;
          v180[4] = v181;
          v180[5] = v181;
          v180[2] = v181;
          v180[3] = v181;
          v180[0] = v181;
          v180[1] = v181;
          if (!v35)
          {
            --a3;
            goto LABEL_442;
          }
          int v144 = v36 ^ 1;
          unsigned int v164 = v11;
LABEL_412:
          while (2)
          {
            *((unsigned char *)v180 + v35) = v144;
            int v145 = a3;
            unsigned int v146 = v35;
            while (2)
            {
              a3 = v145 + 1;
              unsigned int v35 = *v145;
              if (v35 == 45)
              {
                int v147 = *a3;
                if (v147 != 93)
                {
                  if (*(unsigned char *)(*((void *)v172 + 165) + 64))
                  {
                    if (v146 <= v147)
                    {
                      v145 += 2;
                      goto LABEL_420;
                    }
                  }
                  else if ((__collate_range_cmp(*a3, v146, v172) & 0x80000000) == 0)
                  {
                    v145 += 2;
                    if (!*(unsigned char *)(*((void *)v172 + 165) + 64))
                    {
                      for (uint64_t i = 0; i != 256; ++i)
                      {
                        if ((__collate_range_cmp(v146, i, v172) & 0x80000000) != 0
                          && (int)__collate_range_cmp(i, v147, v172) <= 0)
                        {
                          *((unsigned char *)v180 + i) = v144;
                        }
                      }
                      goto LABEL_424;
                    }
LABEL_420:
                    if ((int)(v146 + 1) > v147) {
                      int v148 = v146 + 1;
                    }
                    else {
                      int v148 = v147;
                    }
                    j__mkostemps((char *)v180 + v146 + 1, v144, v148 + ~v146 + 1);
LABEL_424:
                    unsigned int v146 = v147;
                    continue;
                  }
                }
                unsigned int v35 = 45;
                goto LABEL_412;
              }
              break;
            }
            uint64_t v11 = v164;
            if (*v145)
            {
              if (v35 == 93) {
                goto LABEL_442;
              }
              continue;
            }
            break;
          }
          a3 = v145;
LABEL_442:
          v16 |= 0x20u;
          int v33 = 1;
          long long v13 = v169;
LABEL_106:
          if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1)) {
            goto LABEL_483;
          }
          if ((v16 & 0x20) == 0)
          {
            while (1)
            {
              int v38 = *a1;
              int v39 = **a1 < 0 ? *(_RuneLocale **)(*((void *)v13 + 166) + 120) : &_DefaultRuneLocale;
              if ((v39->__runetype[**a1] & 0x4000) == 0) {
                break;
              }
              int v40 = *((_DWORD *)a1 + 2);
              *((_DWORD *)a1 + 2) = v40 - 1;
              if (v40 < 2)
              {
                if (__srefill((uint64_t)a1)) {
                  goto LABEL_483;
                }
              }
              else
              {
                *a1 = v38 + 1;
              }
              ++v173;
            }
          }
          break;
        case 'c':
LABEL_94:
          int v33 = 0;
          v16 |= 0x20u;
          goto LABEL_106;
        case 'd':
          goto LABEL_104;
        case 'h':
          unsigned int v20 = v16 & 0xFFFFBFFB | 0x4000;
          int v21 = v16 | 4;
          BOOL v22 = (v16 & 4) == 0;
          goto LABEL_38;
        case 'i':
          *(void *)base = 0;
          int v33 = 3;
          goto LABEL_106;
        case 'j':
          v16 |= 0x800u;
          goto LABEL_26;
        case 'l':
          unsigned int v20 = v16 & 0xFFFFFBFE | 0x400;
          int v21 = v16 | 1;
          BOOL v22 = (v16 & 1) == 0;
LABEL_38:
          if (v22) {
            unsigned int v16 = v21;
          }
          else {
            unsigned int v16 = v20;
          }
          goto LABEL_26;
        case 'n':
          if ((v16 & 8) != 0) {
            goto LABEL_66;
          }
          long long v23 = v177++;
          uint64_t v24 = *v23;
          if (!*v23) {
            goto LABEL_66;
          }
          if ((v16 & 0x4000) != 0)
          {
            if (off_1E911B948) {
              ((void (*)(wint_t *, uint64_t))off_1E911B948)(v24, 1);
            }
            *(unsigned char *)uint64_t v24 = v173;
          }
          else if ((v16 & 4) != 0)
          {
            if (off_1E911B948) {
              ((void (*)(wint_t *, uint64_t))off_1E911B948)(v24, 2);
            }
            *(_WORD *)uint64_t v24 = v173;
          }
          else
          {
            if ((v16 & 1) != 0 || (v16 & 0x400) != 0 || (v16 & 0x800) != 0 || (v16 & 0x2000) != 0)
            {
              uint64_t v25 = (void (*)(wint_t *, uint64_t))off_1E911B948;
            }
            else
            {
              uint64_t v25 = (void (*)(wint_t *, uint64_t))off_1E911B948;
              if ((v16 & 0x1000) == 0)
              {
                if (off_1E911B948) {
                  ((void (*)(wint_t *, uint64_t))off_1E911B948)(v24, 4);
                }
                *uint64_t v24 = v173;
                goto LABEL_66;
              }
            }
            if (v25) {
              v25(v24, 8);
            }
            *(void *)uint64_t v24 = v173;
          }
LABEL_66:
          unsigned int v10 = *a3;
          if (!*a3) {
            return v11;
          }
          goto LABEL_19;
        case 'o':
          v16 |= 0x8000u;
          int v33 = 3;
          uint64_t v37 = 8;
          goto LABEL_105;
        case 'p':
          int v34 = 33040;
LABEL_102:
          v16 |= v34;
          int v33 = 3;
          uint64_t v37 = 16;
          goto LABEL_105;
        case 'q':
          v16 |= 0x400u;
          goto LABEL_26;
        case 's':
LABEL_96:
          int v33 = 2;
          goto LABEL_106;
        case 't':
          v16 |= 0x1000u;
          goto LABEL_26;
        case 'u':
          v16 |= 0x8000u;
LABEL_104:
          int v33 = 3;
          uint64_t v37 = 10;
LABEL_105:
          *(void *)base = v37;
          goto LABEL_106;
        case 'z':
          v16 |= 0x2000u;
LABEL_26:
          long long v14 = a3;
          continue;
        default:
          if (!*v14) {
            return 0xFFFFFFFFLL;
          }
          return v11;
      }
      break;
    }
    switch(v33)
    {
      case 0:
        if (v17 <= 1) {
          unint64_t v41 = 1;
        }
        else {
          unint64_t v41 = v17;
        }
        unsigned int v42 = v16 & 8;
        if (v16)
        {
          unsigned int v163 = v11;
          if ((v16 & 8) != 0)
          {
            uint64_t v87 = 0;
          }
          else
          {
            uint64_t v86 = v177++;
            uint64_t v87 = *v86;
          }
          int v124 = 0;
          while (1)
          {
            if (v124 == v171) {
              goto LABEL_482;
            }
            int v125 = v13;
            uint64_t v126 = (uint64_t)(*a1 + 1);
            int v127 = v124 + 1;
            nptr[v124] = **a1;
            *a1 = (char *)v126;
            --*((_DWORD *)a1 + 2);
            memset(&v178, 0, sizeof(v178));
            size_t v128 = mbrtowc_l(v87, nptr, v124 + 1, &v178, v172);
            if (v128 == -2)
            {
              ++v124;
            }
            else
            {
              if (v128)
              {
                if (v128 == -1) {
                  goto LABEL_482;
                }
              }
              else if ((v16 & 8) == 0)
              {
                __int32 *v87 = 0;
              }
              int v124 = 0;
              v173 += v127;
              --v41;
              v87 += v42 == 0;
            }
            long long v13 = v125;
            if (*((int *)a1 + 2) <= 0)
            {
              if (__srefill((uint64_t)a1)) {
                break;
              }
            }
            if (!v41) {
              goto LABEL_457;
            }
          }
          if (v124) {
            goto LABEL_482;
          }
LABEL_457:
          uint64_t v11 = ((v42 >> 3) ^ 1) + v11;
          goto LABEL_475;
        }
        if ((v16 & 8) == 0)
        {
          stat v43 = (uint64_t *)v177++;
          unint64_t v44 = __fread(*v43, 1uLL, v41, (uint64_t)a1);
          if (!v44) {
            goto LABEL_483;
          }
          v173 += v44;
          uint64_t v11 = (v11 + 1);
LABEL_475:
          uint64_t v12 = *(void *)base;
          goto LABEL_476;
        }
        uint64_t v114 = 0;
        do
        {
          unint64_t v115 = *((int *)a1 + 2);
          if (v41 <= v115)
          {
            LODWORD(v114) = v41 + v114;
            *((_DWORD *)a1 + 2) = v115 - v41;
            *a1 += v41;
            goto LABEL_437;
          }
          v114 += v115;
          *a1 += v115;
          v41 -= v115;
        }
        while (!__srefill((uint64_t)a1));
        if (!v114) {
          goto LABEL_483;
        }
LABEL_437:
        wint_t v150 = v173 + v114;
        goto LABEL_474;
      case 1:
        if (v17) {
          uint64_t v45 = v17;
        }
        else {
          uint64_t v45 = -1;
        }
        if ((v16 & 1) == 0)
        {
          if ((v16 & 8) != 0)
          {
            char v116 = *a1;
            if (*((unsigned char *)v180 + **a1))
            {
              int v52 = 0;
              uint64_t v117 = 1;
              uint64_t v12 = *(void *)base;
              while (1)
              {
                uint64_t v118 = v117;
                int v119 = *((_DWORD *)a1 + 2);
                *((_DWORD *)a1 + 2) = v119 - 1;
                *a1 = ++v116;
                if (v45 == v118) {
                  break;
                }
                ++v52;
                if (v119 <= 1)
                {
                  if (__srefill((uint64_t)a1)) {
                    goto LABEL_372;
                  }
                  char v116 = *a1;
                }
                uint64_t v117 = v118 + 1;
                if (!*((unsigned char *)v180 + *v116))
                {
                  int v52 = v118;
                  goto LABEL_372;
                }
              }
              int v52 = v45;
              goto LABEL_372;
            }
          }
          else
          {
            uint64_t v46 = (char **)v177++;
            unsigned __int16 v47 = *v46;
            char v176 = v47;
            unsigned __int8 v48 = *a1;
            uint64_t v49 = v47;
            if (*((unsigned char *)v180 + **a1))
            {
              while (1)
              {
                --*((_DWORD *)a1 + 2);
                *a1 = v48 + 1;
                char v50 = *v48;
                long long v51 = v176++;
                *long long v51 = v50;
                if (!--v45)
                {
LABEL_135:
                  uint64_t v49 = v176;
                  goto LABEL_136;
                }
                if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1)) {
                  break;
                }
                unsigned __int8 v48 = *a1;
                if (!*((unsigned char *)v180 + **a1)) {
                  goto LABEL_135;
                }
              }
              uint64_t v49 = v176;
              if (v176 == v47) {
                goto LABEL_483;
              }
            }
LABEL_136:
            int v52 = v49 - v47;
            if (v49 != v47)
            {
              *uint64_t v49 = 0;
              uint64_t v11 = (v11 + 1);
              if (off_1E911B938) {
                ((void (*)(char *))off_1E911B938)(v47);
              }
              goto LABEL_371;
            }
          }
          return v11;
        }
        wint_t v174 = 0;
        unsigned int v163 = v11;
        int v167 = v13;
        if ((v16 & 8) != 0)
        {
          int v89 = &v174;
        }
        else
        {
          uint64_t v88 = v177++;
          int v89 = *v88;
        }
        int v129 = 0;
        int v52 = 0;
        while (2)
        {
          if (v129 == v171) {
            goto LABEL_482;
          }
          uint64_t v130 = (uint64_t)(*a1 + 1);
          int v131 = v129 + 1;
          nptr[v129] = **a1;
          *a1 = (char *)v130;
          --*((_DWORD *)a1 + 2);
          memset(&v178, 0, sizeof(v178));
          size_t v132 = mbrtowc_l(&v174, nptr, v129 + 1, &v178, v172);
          if (v132 == -2)
          {
            ++v129;
            goto LABEL_363;
          }
          if (v132)
          {
            if (v132 == -1) {
              goto LABEL_482;
            }
            LODWORD(v132) = v174;
          }
          else
          {
            wint_t v174 = 0;
          }
          if (wctob_l(v132, v172) == -1 || *((unsigned char *)v180 + wctob_l(v174, v172)))
          {
            if ((v16 & 8) == 0) {
              *v89++ = v174;
            }
            int v129 = 0;
            v173 += v131;
            --v45;
            ++v52;
LABEL_363:
            if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1) || !v45)
            {
              if (!v129) {
                goto LABEL_367;
              }
              goto LABEL_482;
            }
            continue;
          }
          break;
        }
        if (v129 != -1)
        {
          uint64_t v154 = v129 + 1 - 1;
          do
            __ungetc(nptr[v154], (uint64_t)a1);
          while (v154--);
        }
LABEL_367:
        if (!v52) {
          return v163;
        }
        uint64_t v11 = v11;
        if ((v16 & 8) == 0)
        {
          *int v89 = 0;
          uint64_t v11 = (v11 + 1);
        }
        long long v13 = v167;
LABEL_371:
        uint64_t v12 = *(void *)base;
LABEL_372:
        wint_t v133 = v52 + v173;
LABEL_449:
        wint_t v173 = v133;
LABEL_476:
        unsigned int v10 = *a3;
        if (*a3) {
          continue;
        }
        return v11;
      case 2:
        if (!v17) {
          unint64_t v17 = -1;
        }
        if ((v16 & 1) == 0)
        {
          if ((v16 & 8) == 0)
          {
            long long v53 = (char **)v177++;
            long long v54 = *v53;
            char v176 = *v53;
            for (unint64_t j = v17 - 1; ; --j)
            {
              long long v56 = *a1;
              long long v57 = **a1 < 0 ? *(_RuneLocale **)(*((void *)v13 + 166) + 120) : &_DefaultRuneLocale;
              if ((v57->__runetype[**a1] & 0x4000) != 0) {
                break;
              }
              --*((_DWORD *)a1 + 2);
              *a1 = v56 + 1;
              char v58 = *v56;
              long long v59 = v176++;
              *long long v59 = v58;
              if (!j || *((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1)) {
                break;
              }
            }
            *char v176 = 0;
            v173 += v176 - v54;
            uint64_t v11 = (v11 + 1);
            if (off_1E911B938) {
              ((void (*)(char *))off_1E911B938)(v54);
            }
            goto LABEL_475;
          }
          for (uint64_t k = 0; ; ++k)
          {
            uint64_t v121 = *a1;
            if (**a1 < 0) {
              uint64_t v122 = *(_RuneLocale **)(*((void *)v13 + 166) + 120);
            }
            else {
              uint64_t v122 = &_DefaultRuneLocale;
            }
            if ((v122->__runetype[**a1] & 0x4000) != 0)
            {
              LODWORD(v17) = k;
              goto LABEL_473;
            }
            int v123 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v123 - 1;
            *a1 = v121 + 1;
            if (v17 - 1 == k) {
              goto LABEL_473;
            }
            if (v123 <= 1 && __srefill((uint64_t)a1)) {
              break;
            }
          }
          LODWORD(v17) = k + 1;
LABEL_473:
          wint_t v150 = v17 + v173;
LABEL_474:
          wint_t v173 = v150;
          goto LABEL_475;
        }
        wint_t v174 = 0;
        unsigned int v163 = v11;
        int v168 = v13;
        if ((v16 & 8) != 0)
        {
          long long v91 = &v174;
        }
        else
        {
          int v90 = v177++;
          long long v91 = *v90;
        }
        int v134 = 0;
        while (1)
        {
          if (v134 == v171) {
            goto LABEL_482;
          }
          uint64_t v135 = (uint64_t)(*a1 + 1);
          int v136 = v134 + 1;
          nptr[v134] = **a1;
          *a1 = (char *)v135;
          --*((_DWORD *)a1 + 2);
          memset(&v178, 0, sizeof(v178));
          size_t v137 = mbrtowc_l(v91, nptr, v134 + 1, &v178, v172);
          if (v137 == -2)
          {
            ++v134;
            goto LABEL_388;
          }
          if (!v137) {
            break;
          }
          if (v137 == -1) {
            goto LABEL_482;
          }
          size_t v137 = *v91;
          if (v137 <= 0x7F) {
            goto LABEL_384;
          }
          if (v137 < 0x100)
          {
            tm v139 = (char *)(*(void *)(*((void *)v168 + 166) + 120) + 4 * v137);
            goto LABEL_385;
          }
          LOWORD(v138) = ___runetype_l(v137, v172);
LABEL_386:
          if ((v138 & 0x4000) != 0)
          {
            if (v134 != -1)
            {
              uint64_t v152 = v134 + 1 - 1;
              do
                __ungetc(nptr[v152], (uint64_t)a1);
              while (v152--);
            }
LABEL_468:
            if ((v16 & 8) != 0)
            {
              uint64_t v11 = v11;
            }
            else
            {
              *long long v91 = 0;
              uint64_t v11 = (v11 + 1);
            }
            long long v13 = v168;
            goto LABEL_475;
          }
          int v134 = 0;
          v173 += v136;
          --v17;
          v91 += (v16 & 8) == 0;
LABEL_388:
          if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1))
          {
            if (!v134) {
              goto LABEL_468;
            }
LABEL_482:
            *((_WORD *)a1 + 8) |= 0x40u;
            LODWORD(v11) = v163;
LABEL_483:
            if (v11) {
              return v11;
            }
            else {
              return 0xFFFFFFFFLL;
            }
          }
          if (!v17) {
            goto LABEL_468;
          }
        }
        *long long v91 = 0;
LABEL_384:
        tm v139 = &_DefaultRuneLocale.__magic[4 * v137];
LABEL_385:
        int v138 = *((_DWORD *)v139 + 15);
        goto LABEL_386;
      case 3:
        uint64_t v60 = v17 - 1;
        if (v17 - 1 >= 0x1FF) {
          uint64_t v60 = 511;
        }
        uint64_t v61 = v60 + 1;
        unsigned int v62 = v16 | 0x2C0;
        char v176 = nptr;
        uint64_t v12 = *(void *)base;
        while (1)
        {
          int v63 = **a1;
          switch(**a1)
          {
            case '+':
            case '-':
              if ((v62 & 0x40) != 0)
              {
                unsigned int v62 = v62 & 0xFFFEFFBF | 0x10000;
                goto LABEL_163;
              }
              goto LABEL_191;
            case ',':
            case '.':
            case '/':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'Y':
            case 'Z':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
              goto LABEL_191;
            case '0':
              int v67 = v62 | 0x100;
              BOOL v68 = v12 == 0;
              if (v12) {
                uint64_t v12 = v12;
              }
              else {
                uint64_t v12 = 8;
              }
              if (!v68) {
                int v67 = v62;
              }
              if ((v67 & 0x200) != 0) {
                unsigned int v62 = v67 & 0xFFFFFD3F;
              }
              else {
                unsigned int v62 = v67 & 0xFFFFFE3F;
              }
              goto LABEL_163;
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
              uint64_t v12 = __svfscanf_l_basefix[(int)v12];
              goto LABEL_162;
            case '8':
            case '9':
              uint64_t v64 = (int)v12;
              uint64_t v12 = __svfscanf_l_basefix[(int)v12];
              if ((unint64_t)(v64 - 1) >= 8) {
                goto LABEL_162;
              }
              goto LABEL_191;
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
              if ((int)v12 < 11) {
                goto LABEL_191;
              }
LABEL_162:
              v62 &= 0xFFFFFE3F;
              goto LABEL_163;
            case 'X':
              goto LABEL_170;
            default:
              if (v63 != 120) {
                goto LABEL_191;
              }
LABEL_170:
              if ((v62 & 0x100) == 0 || v176 != &nptr[(HIWORD(v62) & 1) + 1]) {
                goto LABEL_191;
              }
              v62 &= ~0x100u;
              uint64_t v12 = 16;
LABEL_163:
              long long v65 = v176++;
              *long long v65 = v63;
              int v66 = *((_DWORD *)a1 + 2);
              *((_DWORD *)a1 + 2) = v66 - 1;
              if (v66 < 2)
              {
                if (__srefill((uint64_t)a1) || (--v61, !v61))
                {
LABEL_191:
                  long long v77 = v176;
                  if ((v62 & 0x80) != 0)
                  {
                    if (v176 > nptr)
                    {
                      --v176;
                      __ungetc(*(v77 - 1), (uint64_t)a1);
                    }
                    return v11;
                  }
                  int v78 = *(v176 - 1);
                  if ((v78 & 0xFFFFFFDF) == 0x58)
                  {
                    --v176;
                    __ungetc(v78, (uint64_t)a1);
                    long long v77 = v176;
                  }
                  if ((v62 & 8) == 0)
                  {
                    *long long v77 = 0;
                    uint64_t v79 = v12;
                    if ((v62 & 0x8000) != 0) {
                      uintmax_t v80 = strtoumax_l(nptr, 0, v12, v172);
                    }
                    else {
                      uintmax_t v80 = strtoimax_l(nptr, 0, v12, v172);
                    }
                    uintmax_t v140 = v80;
                    int v141 = v177++;
                    int v142 = *v141;
                    if ((v62 & 0x10) != 0) {
                      goto LABEL_405;
                    }
                    if ((v62 & 0x4000) != 0)
                    {
                      if (off_1E911B948) {
                        ((void (*)(wint_t *, uint64_t))off_1E911B948)(v142, 1);
                      }
                      *(unsigned char *)int v142 = v140;
                    }
                    else if ((v62 & 4) != 0)
                    {
                      if (off_1E911B948) {
                        ((void (*)(wint_t *, uint64_t))off_1E911B948)(v142, 2);
                      }
                      *(_WORD *)int v142 = v140;
                    }
                    else
                    {
                      if ((v62 & 1) == 0
                        && (v62 & 0x400) == 0
                        && (v62 & 0x800) == 0
                        && (v62 & 0x1000) == 0
                        && (v62 & 0x2000) == 0)
                      {
                        if (off_1E911B948) {
                          ((void (*)(wint_t *, uint64_t))off_1E911B948)(v142, 4);
                        }
                        *int v142 = v140;
                        goto LABEL_465;
                      }
LABEL_405:
                      if (off_1E911B948) {
                        ((void (*)(wint_t *, uint64_t))off_1E911B948)(v142, 8);
                      }
                      *(void *)int v142 = v140;
                    }
LABEL_465:
                    uint64_t v11 = (v11 + 1);
                    LODWORD(v77) = v176;
                    uint64_t v12 = v79;
                  }
                  v173 += v77 - nptr;
                  goto LABEL_476;
                }
              }
              else
              {
                ++*a1;
                if (!--v61) {
                  goto LABEL_191;
                }
              }
              break;
          }
        }
      case 4:
        decimal_point = localeconv_l(v172)->decimal_point;
        if (v17) {
          size_t v69 = v17 + 1;
        }
        else {
          size_t v69 = 513;
        }
        long long v70 = (char *)__parsefloat_buf(v69);
        if (!v70) {
          return v11;
        }
        v166 = v13;
        uint64_t v71 = v69 - 1;
        long long v72 = v70 - 1;
        BOOL v73 = (uint64_t)(v69 - 1) > 0;
        long long v162 = v70;
        if (v17 && v71 < 1)
        {
          long long v74 = v70;
          goto LABEL_188;
        }
        size_t v161 = v69;
        int v92 = 0;
        uint64_t v93 = 0;
        int v94 = 0;
        uint64_t v95 = 0;
        int v157 = 0;
        unint64_t v96 = (unint64_t)&v70[v71];
        long long v74 = v70;
        unsigned int v163 = v11;
        break;
      default:
        goto LABEL_475;
    }
    break;
  }
LABEL_211:
  uint64_t v97 = **a1;
  uint64_t v98 = &_DefaultRuneLocale.__runetype[v97];
  int v99 = v97 & 0xFFFFFFDF;
  uint64_t v100 = v93;
  while (2)
  {
    switch(v94)
    {
      case 0:
        int v94 = 1;
        goto LABEL_231;
      case 1:
        int v94 = 6;
        if ((int)v97 <= 77)
        {
          if (v97 == 48)
          {
            int v94 = 5;
LABEL_276:
            long long v72 = v74;
LABEL_289:
            uint64_t v93 = v100;
            if (!v73) {
              goto LABEL_290;
            }
            goto LABEL_292;
          }
          if (v97 == 73) {
            goto LABEL_247;
          }
        }
        else
        {
          switch(v97)
          {
            case 'N':
              goto LABEL_239;
            case 'i':
LABEL_247:
              int v94 = 2;
              goto LABEL_289;
            case 'n':
LABEL_239:
              int v94 = 3;
              goto LABEL_289;
          }
        }
        continue;
      case 2:
        if (v157 > 6 || v97 != aNfinity[v157] && v97 != aNfinity_0[v157]) {
          goto LABEL_188;
        }
        if (v157 == 6 || v157 == 1) {
          long long v72 = v74;
        }
        ++v157;
        goto LABEL_247;
      case 3:
        switch(v157)
        {
          case 2:
            if (v97 != 40) {
              goto LABEL_188;
            }
            goto LABEL_282;
          case 1:
            if (v99 != 78) {
              goto LABEL_188;
            }
            int v94 = 3;
            goto LABEL_287;
          case 0:
            if (v99 != 65) {
              goto LABEL_188;
            }
LABEL_282:
            int v94 = 3;
LABEL_288:
            ++v157;
            goto LABEL_289;
        }
        if (v97 == 41)
        {
          int v94 = 4;
LABEL_287:
          long long v72 = v74;
          goto LABEL_288;
        }
        if ((v97 & 0x80) != 0) {
          uint64_t v98 = (__uint32_t *)(*(void *)(*((void *)v166 + 166) + 120) + 4 * v97 + 60);
        }
        int v94 = 3;
        if ((*((unsigned char *)v98 + 1) & 5) != 0 || v97 == 95) {
          goto LABEL_288;
        }
LABEL_188:
        for (uint64_t m = v74 - 1; v72 < m; --m)
        {
          int v76 = *m;
          __ungetc(v76, (uint64_t)a1);
        }
        v72[1] = 0;
        int v81 = v72 + 1;
        int v82 = v81 - v162;
        long long v13 = v166;
        uint64_t v12 = *(void *)base;
        if (v81 == v162) {
          return v11;
        }
        if ((v16 & 8) != 0) {
          goto LABEL_448;
        }
        uint64_t v83 = (float **)v177++;
        char v84 = *v83;
        if ((v16 & 2) != 0)
        {
          double v143 = strtold_l(v162, &v176, v172);
        }
        else
        {
          if ((v16 & 1) == 0)
          {
            float v85 = strtof_l(v162, &v176, v172);
            if (off_1E911B948) {
              ((void (*)(float *, uint64_t))off_1E911B948)(v84, 4);
            }
            float *v84 = v85;
LABEL_447:
            uint64_t v11 = (v11 + 1);
LABEL_448:
            wint_t v133 = v173 + v82;
            goto LABEL_449;
          }
          double v143 = strtod_l(v162, &v176, v172);
        }
        double v151 = v143;
        if (off_1E911B948) {
          ((void (*)(float *, uint64_t))off_1E911B948)(v84, 8);
        }
        *(double *)char v84 = v151;
        goto LABEL_447;
      case 4:
        goto LABEL_188;
      case 5:
        uint64_t v100 = 1;
        int v94 = 6;
        if (v99 == 88) {
          goto LABEL_303;
        }
        continue;
      case 6:
        if (v92)
        {
          long long v101 = &_DefaultRuneLocale.__runetype[**a1];
          if ((v97 & 0x80) != 0) {
            long long v101 = (__uint32_t *)(*(void *)(*((void *)v166 + 166) + 120) + 4 * v97 + 60);
          }
          if (*((unsigned char *)v101 + 2))
          {
            uint64_t v93 = 1;
            int v94 = 6;
LABEL_302:
            long long v72 = v74;
LABEL_303:
            int v92 = 1;
            if (!v73)
            {
LABEL_290:
              unsigned int v158 = v93;
              uint64_t v160 = v95;
              int v106 = v74;
              uint64_t v107 = (char *)__parsefloat_buf(v161 + 513);
              if (v107)
              {
                unint64_t v96 = (unint64_t)&v107[v161 + 512];
                long long v74 = &v107[v106 - v162];
                long long v72 = &v107[v72 - v162];
                v161 += 513;
                long long v162 = v107;
                uint64_t v95 = v160;
                uint64_t v93 = v158;
                goto LABEL_292;
              }
              return v163;
            }
LABEL_292:
            *v74++ = v97;
            int v108 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v108 - 1;
            if (v108 < 2)
            {
              uint64_t v109 = v93;
              int v159 = v72;
              int v110 = v74;
              unint64_t v111 = v96;
              int v112 = __srefill((uint64_t)a1);
              long long v74 = v110;
              BOOL v73 = (unint64_t)v110 < v111;
              BOOL v113 = v17 == 0;
              if ((unint64_t)v110 < v111) {
                BOOL v113 = 1;
              }
              if (v112)
              {
                uint64_t v11 = v163;
                long long v72 = v159;
                goto LABEL_188;
              }
              unint64_t v96 = v111;
              uint64_t v11 = v163;
              long long v72 = v159;
              uint64_t v93 = v109;
              if (!v113) {
                goto LABEL_188;
              }
            }
            else
            {
              ++*a1;
              BOOL v73 = (unint64_t)v74 < v96;
              uint64_t v11 = v163;
              if (v17 && (unint64_t)v74 >= v96) {
                goto LABEL_188;
              }
            }
            goto LABEL_211;
          }
        }
        time_t v102 = &_DefaultRuneLocale.__runetype[**a1];
        if ((v97 & 0x80) != 0) {
          time_t v102 = (__uint32_t *)(*(void *)(*((void *)v166 + 166) + 120) + 4 * v97 + 60);
        }
        int v94 = 7;
        if ((*((unsigned char *)v102 + 1) & 4) != 0)
        {
          uint64_t v93 = 1;
          int v94 = 6;
          goto LABEL_273;
        }
        continue;
      case 7:
        if (v97 == decimal_point[(int)v95])
        {
          if (decimal_point[(int)v95 + 1]) {
            int v94 = 7;
          }
          else {
            int v94 = 8;
          }
          if (((decimal_point[(int)v95 + 1] == 0) & v100) != 0) {
            long long v72 = v74;
          }
          uint64_t v95 = (int)v95 + 1;
          goto LABEL_289;
        }
        int v94 = 8;
        if (v95) {
          goto LABEL_188;
        }
        continue;
      case 8:
        char v103 = (v99 != 69) | v92;
        BOOL v104 = v99 == 80;
        if ((v103 & 1) == 0 || (v104 & v92) != 0)
        {
          if (v100)
          {
            uint64_t v93 = 1;
            int v94 = 9;
            if (!v73) {
              goto LABEL_290;
            }
            goto LABEL_292;
          }
        }
        else
        {
          if (v92)
          {
            int v105 = &_DefaultRuneLocale.__runetype[**a1];
            if ((v97 & 0x80) != 0) {
              int v105 = (__uint32_t *)(*(void *)(*((void *)v166 + 166) + 120) + 4 * v97 + 60);
            }
            if (*((unsigned char *)v105 + 2))
            {
              uint64_t v93 = 1;
              int v94 = 8;
              goto LABEL_302;
            }
          }
          if ((v97 & 0x80) != 0) {
            uint64_t v98 = (__uint32_t *)(*(void *)(*((void *)v166 + 166) + 120) + 4 * v97 + 60);
          }
          if ((*((unsigned char *)v98 + 1) & 4) != 0)
          {
            uint64_t v93 = 1;
            int v94 = 8;
LABEL_273:
            long long v72 = v74;
            if (!v73) {
              goto LABEL_290;
            }
            goto LABEL_292;
          }
        }
        goto LABEL_188;
      case 9:
        int v94 = 10;
LABEL_231:
        if (v97 == 43 || v97 == 45) {
          goto LABEL_289;
        }
        continue;
      case 10:
        if ((v97 & 0x80) != 0) {
          uint64_t v98 = (__uint32_t *)(*(void *)(*((void *)v166 + 166) + 120) + 4 * v97 + 60);
        }
        if ((*((unsigned char *)v98 + 1) & 4) == 0) {
          goto LABEL_188;
        }
        int v94 = 10;
        goto LABEL_276;
      default:
        abort_report_np((uint64_t)"%s:%s:%u: unknown state %d");
    }
  }
}

uintmax_t strtoumax_l(const char *nptr, char **endptr, int base, locale_t a4)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v7 = (locale_t)&__global_locale;
  }
  else {
    locale_t v7 = a4;
  }
  if (!a4) {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (v7 != (locale_t)-1) {
    locale_t v6 = v7;
  }
  if (!v7) {
    locale_t v6 = (locale_t)&__c_locale;
  }
  char v8 = nptr;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
    uint64_t v11 = &_DefaultRuneLocale;
    if (v10 < 0) {
      uint64_t v11 = *(_RuneLocale **)(*((void *)v6 + 166) + 120);
    }
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    char v13 = *v8++;
    char v12 = v13;
  }
  else
  {
    char v12 = v9;
  }
  if ((base & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    BOOL v16 = base == 0;
    if (v12 != 48)
    {
      int v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      char v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (unsigned int v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        unsigned int v15 = 16;
        goto LABEL_34;
      }
    }
    BOOL v16 = base == 0;
    char v12 = 48;
  }
  int v17 = 8;
LABEL_29:
  if (v16) {
    unsigned int v15 = v17;
  }
  else {
    unsigned int v15 = base;
  }
  if (v15 - 37 < 0xFFFFFFDD)
  {
    uintmax_t v18 = 0;
    goto LABEL_54;
  }
LABEL_34:
  uintmax_t v18 = 0;
  int v19 = 0;
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    unsigned __int8 v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u) {
          break;
        }
        unsigned __int8 v21 = v12 - 87;
      }
      else
      {
        unsigned __int8 v21 = v12 - 55;
      }
    }
    if ((int)v15 <= v21) {
      break;
    }
    int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        uintmax_t v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }
      else
      {
        uintmax_t v18 = v18 * v15 + v21;
        int v22 = 1;
      }
    }
    char v23 = *v8++;
    char v12 = v23;
    int v19 = v22;
  }
  if (v19 < 0)
  {
    long long v27 = __error();
    int v24 = 0;
    int *v27 = 34;
    uintmax_t v18 = -1;
    if (!endptr) {
      return v18;
    }
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    int v24 = 1;
    if (!endptr) {
      return v18;
    }
    goto LABEL_55;
  }
  int v24 = 0;
  if (v9 == 45) {
    uintmax_t v18 = -(uint64_t)v18;
  }
  if (endptr)
  {
LABEL_55:
    uint64_t v25 = (char *)(v8 - 1);
    if (v24) {
      uint64_t v25 = (char *)nptr;
    }
    *endptunsigned int r = v25;
  }
  return v18;
}

intmax_t strtoimax_l(const char *nptr, char **endptr, int base, locale_t a4)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v7 = (locale_t)&__global_locale;
  }
  else {
    locale_t v7 = a4;
  }
  if (!a4) {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (v7 != (locale_t)-1) {
    locale_t v6 = v7;
  }
  if (!v7) {
    locale_t v6 = (locale_t)&__c_locale;
  }
  char v8 = nptr;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
    uint64_t v11 = &_DefaultRuneLocale;
    if (v10 < 0) {
      uint64_t v11 = *(_RuneLocale **)(*((void *)v6 + 166) + 120);
    }
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    char v13 = *v8++;
    char v12 = v13;
  }
  else
  {
    char v12 = v9;
  }
  if ((base & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    BOOL v16 = base == 0;
    if (v12 != 48)
    {
      int v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      char v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (unsigned int v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        unsigned int v15 = 16;
        goto LABEL_34;
      }
    }
    BOOL v16 = base == 0;
    char v12 = 48;
  }
  int v17 = 8;
LABEL_29:
  if (v16) {
    unsigned int v15 = v17;
  }
  else {
    unsigned int v15 = base;
  }
  if (v15 - 37 < 0xFFFFFFDD)
  {
    unint64_t v18 = 0;
LABEL_58:
    *__error() = 22;
    int v25 = 1;
    unint64_t v20 = v18;
    if (!endptr) {
      return v20;
    }
    goto LABEL_59;
  }
LABEL_34:
  unint64_t v18 = 0;
  int v19 = 0;
  if (v9 == 45) {
    unint64_t v20 = 0x8000000000000000;
  }
  else {
    unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v21 = v20 / v15;
  while (1)
  {
    unsigned __int8 v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u) {
          break;
        }
        unsigned __int8 v22 = v12 - 87;
      }
      else
      {
        unsigned __int8 v22 = v12 - 55;
      }
    }
    if ((int)v15 <= v22) {
      break;
    }
    int v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        unint64_t v18 = v20 / v15;
      }
      else
      {
        unint64_t v18 = v18 * v15 + v22;
        int v23 = 1;
      }
    }
    char v24 = *v8++;
    char v12 = v24;
    int v19 = v23;
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      int v25 = 0;
      if (v9 == 45) {
        unint64_t v20 = -(uint64_t)v18;
      }
      else {
        unint64_t v20 = v18;
      }
      if (!endptr) {
        return v20;
      }
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  long long v28 = __error();
  int v25 = 0;
  *long long v28 = 34;
  if (!endptr) {
    return v20;
  }
LABEL_59:
  int v26 = (char *)(v8 - 1);
  if (v25) {
    int v26 = (char *)nptr;
  }
  *endptunsigned int r = v26;
  return v20;
}

float strtof(const char *a1, char **a2)
{
  float v6 = 0.0;
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = &__global_locale;
  }
  _ffpp_strtoencf32_l(&v6, (uint64_t)a1, (uint64_t)a2, (unint64_t)v4);
  return v6;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  float v4 = 0.0;
  _ffpp_strtoencf32_l(&v4, (uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  return v4;
}

uint64_t _ffpp_strtoencf32_l(float *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  long long v24 = xmmword_18A9FF380;
  uint64_t v25 = 0x28FFFFFFD2;
  uint64_t v26 = 113;
  long long v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  long long v30 = a4;
  long long v31 = 0uLL;
  long long v32 = 0uLL;
  uint64_t result = fastParse64((uint64_t)&v24);
  if (result)
  {
    __int16 v5 = WORD2(v32);
    int v6 = v31;
    if ((DWORD1(v32) + 10) > 0x14 || (int)v31 > 7)
    {
      uint64_t result = fegetround();
      if (v6 >= 20) {
        uint64_t v10 = 36;
      }
      else {
        uint64_t v10 = 4;
      }
      unsigned int v11 = __clz(*((unint64_t *)&v30 + 1));
      if (v11 >= 5 && v6 >= 20) {
        _ffpp_strtoencf32_l_cold_1();
      }
      __int16 v12 = v6 + v5 - 19;
      if (v6 < 20) {
        __int16 v12 = v5;
      }
      unint64_t v13 = (powersOf10_Float[v12 + 70] * (unsigned __int128)(unint64_t)(*((void *)&v30 + 1) << v11)) >> 64;
      unsigned int v14 = __clz(v13);
      if (v14 >= 2) {
        _ffpp_strtoencf32_l_cold_2();
      }
      unint64_t v15 = (unint64_t)(55732705 * v12) >> 24;
      unint64_t v16 = v13 << v14;
      unint64_t v17 = v16 + v10;
      HIDWORD(v19) = result;
      LODWORD(v19) = result;
      int v18 = v19 >> 22;
      if (v18 == 1)
      {
        if (!BYTE8(v32))
        {
          v16 += 0xFFFFFFFFFFLL;
          v17 += 0x10000000000;
        }
      }
      else if (v18 != 3)
      {
        if (v18 == 2)
        {
          v17 += 0x10000000000;
          if (BYTE8(v32)) {
            v16 += 0xFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16 + 4;
          }
        }
        else
        {
          v16 += 0x7FFFFFFFFFLL;
          v17 += 0x8000000000;
        }
      }
      unint64_t v20 = v16 >> 40;
      int v21 = v15 - v11 - v14;
      if (!v20) {
        ++v21;
      }
      int v22 = v21 + 65;
      if (v22 >= 129) {
        return overflow((uint64_t)&v24);
      }
      if (v22 > -126)
      {
        if (v17 >> 40 == v20)
        {
          *(_DWORD *)long long v27 = (((v17 >> 40) & 0x7FFFFF | ((unsigned __int16)v22 << 23)) + 1056964608) | ((BYTE8(v32) != 0) << 31);
          return result;
        }
      }
      else if (v22 <= 0xFFFFFF6A)
      {
        return underflow((uint64_t)&v24);
      }
      int v23 = fegetround();
      return (uint64_t)generalSlowpath((uint64_t)&v24, v23, v33, 32);
    }
    else
    {
      if (BYTE8(v32)) {
        int v7 = -DWORD2(v30);
      }
      else {
        int v7 = DWORD2(v30);
      }
      float v8 = (float)v7;
      if ((DWORD1(v32) & 0x80000000) != 0) {
        float v9 = v8 / _ffpp_strtoencf32_l_floatPowerOf10[-DWORD1(v32)];
      }
      else {
        float v9 = v8 * _ffpp_strtoencf32_l_floatPowerOf10[DWORD1(v32)];
      }
      float *v27 = v9;
    }
  }
  return result;
}

double strtod(const char *a1, char **a2)
{
  double v6 = 0.0;
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    float v4 = v3;
  }
  else {
    float v4 = &__global_locale;
  }
  _ffpp_strtoencf64_l(&v6, (uint64_t)a1, (uint64_t)a2, (unint64_t)v4);
  return v6;
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  double v4 = 0.0;
  _ffpp_strtoencf64_l(&v4, (uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  return v4;
}

uint64_t _ffpp_strtoencf64_l(double *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  long long v34 = xmmword_18A9FF390;
  uint64_t v35 = 0x136FFFFFEBBLL;
  uint64_t v36 = 768;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  long long v40 = a4;
  long long v41 = 0uLL;
  long long v42 = 0uLL;
  uint64_t result = fastParse64((uint64_t)&v34);
  if (!result) {
    return result;
  }
  __int16 v5 = WORD2(v42);
  if ((DWORD1(v42) + 22) >= 0x29)
  {
    int v6 = v41;
    goto LABEL_10;
  }
  if ((DWORD1(v42) & 0x80000000) != 0)
  {
    int v6 = v41;
    if ((int)v41 <= 15)
    {
      uint64_t v26 = *((void *)&v40 + 1);
      int v7 = v37;
      if (BYTE8(v42)) {
        uint64_t v26 = -*((void *)&v40 + 1);
      }
      double v9 = (double)v26 / _ffpp_strtoencf64_l_doublePowerOf10[-DWORD1(v42)];
      goto LABEL_44;
    }
  }
  else
  {
    int v6 = v41;
    if (!DWORD1(v42))
    {
      if ((int)v41 > 19) {
        goto LABEL_10;
      }
      if (BYTE8(v42))
      {
        if ((*((void *)&v40 + 1) & 0x8000000000000000) != 0) {
          goto LABEL_10;
        }
        double v27 = (double)(uint64_t)-*((void *)&v40 + 1);
      }
      else
      {
        double v27 = (double)*((unint64_t *)&v40 + 1);
      }
      *uint64_t v37 = v27;
      return result;
    }
    if ((int)v41 <= 19)
    {
      int v7 = v37;
      double v8 = _ffpp_strtoencf64_l_doublePowerOf10[DWORD1(v42)];
      if (BYTE8(v42)) {
        double v8 = -v8;
      }
      double v9 = (double)(WORD4(v40) & 0x7FF) * v8 + (double)(*((void *)&v40 + 1) & 0xFFFFFFFFFFFFF800) * v8;
LABEL_44:
      *int v7 = v9;
      return result;
    }
  }
LABEL_10:
  uint64_t result = fegetround();
  if (v6 >= 20) {
    uint64_t v10 = 80;
  }
  else {
    uint64_t v10 = 12;
  }
  unsigned int v11 = __clz(*((unint64_t *)&v40 + 1));
  if (v11 >= 5 && v6 >= 20) {
    _ffpp_strtoencf64_l_cold_1();
  }
  __int16 v12 = v5 + v6 - 19;
  if (v6 < 20) {
    __int16 v12 = v5;
  }
  int v13 = (585 * v12 + 256) >> 14;
  __int16 v14 = v12 - 28 * v13;
  unint64_t v15 = (((powersOf10_Float[v14 + 70] * (unsigned __int128)powersOf10_CoarseBinary64[(__int16)v13 + 15]) >> 64)
       * (unint64_t)(*((void *)&v40 + 1) << v11)) >> 64;
  unsigned int v16 = __clz(v15);
  if (v16 >= 3) {
    _ffpp_strtoencf64_l_cold_2();
  }
  unint64_t v17 = v15 << v16;
  int v18 = ((unint64_t)(55732705 * (__int16)(28 * v13)) >> 24)
      - v11
      + ((unint64_t)(55732705 * v14) >> 24)
      - v16
      + 66;
  BOOL v19 = BYTE8(v42) != 0;
  HIDWORD(v21) = result;
  LODWORD(v21) = result;
  int v20 = v21 >> 22;
  if (v20 == 3)
  {
    uint64_t v22 = 0;
    unsigned int v23 = v10;
    goto LABEL_30;
  }
  if (v20 != 2)
  {
    if (v20 != 1)
    {
      unsigned int v23 = v10 | 0x400;
      uint64_t v22 = 1023;
      goto LABEL_30;
    }
    BOOL v19 = BYTE8(v42) == 0;
  }
  if (v19) {
    uint64_t v22 = 2047;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v19) {
    unsigned int v23 = v10 | 0x800;
  }
  else {
    unsigned int v23 = v10;
  }
LABEL_30:
  unint64_t v24 = v22 + v17;
  if (v24 >= 0x800) {
    int v25 = v18;
  }
  else {
    int v25 = v18 + 1;
  }
  if (v25 >= 1025) {
    return overflow((uint64_t)&v34);
  }
  if (v25 > -1022)
  {
    if ((v17 + v23) >> 11 == v24 >> 11)
    {
      *(void *)uint64_t v37 = ((unint64_t)(v25 + 1022) << 52) | ((unint64_t)(BYTE8(v42) != 0) << 63) | (v24 >> 11) & 0xFFFFFFFFFFFFFLL;
      return result;
    }
    return (uint64_t)generalSlowpath((uint64_t)&v34, result, v43, 164);
  }
  if (v25 <= 0xFFFFFBCD) {
    return underflow((uint64_t)&v34);
  }
  if (v18 < -1073) {
    return (uint64_t)generalSlowpath((uint64_t)&v34, result, v43, 164);
  }
  if (v18 >= -1010) {
    _ffpp_strtoencf64_l_cold_3();
  }
  char v28 = 14 - v18;
  switch(v20)
  {
    case 3:
      goto LABEL_55;
    case 2:
      if (!BYTE8(v42)) {
        goto LABEL_55;
      }
LABEL_59:
      uint64_t v29 = ~(-1 << v28);
      uint64_t v10 = v29 + v10;
      goto LABEL_61;
    case 1:
      if (BYTE8(v42))
      {
LABEL_55:
        uint64_t v29 = 0;
        goto LABEL_61;
      }
      goto LABEL_59;
  }
  uint64_t v30 = 1 << (13 - v18);
  uint64_t v29 = v30 - 1;
  uint64_t v10 = v30 + v10;
LABEL_61:
  unint64_t v31 = (v29 + v17) >> v28;
  if ((v10 + v17) >> v28 != v31) {
    return (uint64_t)generalSlowpath((uint64_t)&v34, result, v43, 164);
  }
  uint64_t v32 = 1 << (v18 + 50);
  if (v31) {
    uint64_t v32 = v31;
  }
  unint64_t v33 = v32 | ((unint64_t)(BYTE8(v42) != 0) << 63);
  if (v33 != 0x10000000000000)
  {
    uint64_t result = (uint64_t)__error();
    *(_DWORD *)uint64_t result = 34;
  }
  *(void *)uint64_t v37 = v33;
  return result;
}

uint64_t fastParse64(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 40);
  *(unsigned char *)(a1 + 96) = 0;
  int v3 = *v2;
  if ((v3 - 48) >= 0xA)
  {
    uint64_t v4 = __locale_key;
    ++v2;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v3 != 32)
      {
        if (v3 == 43) {
          goto LABEL_15;
        }
        if (v3 == 45)
        {
          *(unsigned char *)(a1 + 96) = 1;
          goto LABEL_15;
        }
        int v6 = &_DefaultRuneLocale;
        if ((v3 & 0x80) != 0)
        {
          int v7 = *(void **)(StatusReg + 8 * v4);
          if (!v7) {
            int v7 = &__global_locale;
          }
          int v6 = *(_RuneLocale **)(v7[166] + 120);
        }
        if ((v6->__runetype[v3] & 0x4000) == 0) {
          break;
        }
      }
      int v8 = *v2++;
      int v3 = v8;
      if ((v8 - 48) < 0xA)
      {
        --v2;
        goto LABEL_16;
      }
    }
    --v2;
LABEL_15:
    int v3 = *v2;
  }
LABEL_16:
  if (v3 > 77)
  {
    if (v3 == 78)
    {
LABEL_20:
      if ((v2[1] | 0x20) == 0x61 && (v2[2] | 0x20) == 0x6E)
      {
        *(void *)path = 0;
        uint64_t v142 = 0;
        int v143 = 0;
        double v9 = v2 + 3;
        if (v2[3] == 40)
        {
          unsigned int v11 = v2 + 4;
          unsigned int v10 = v2[4];
          if (v10 == 48)
          {
            uint64_t v12 = 5;
            if (v2[5] == 120)
            {
              uint64_t v12 = 6;
              unsigned int v11 = v2 + 6;
            }
            else
            {
              unsigned int v11 = v2 + 5;
            }
            if (v2[5] == 120) {
              unsigned int v13 = 16;
            }
            else {
              unsigned int v13 = 8;
            }
            unsigned int v10 = v2[v12];
          }
          else
          {
            unsigned int v13 = 10;
          }
          tm v139 = path;
          uintmax_t v140 = &v143;
          if (v13 > hexdigit[v10])
          {
            do
            {
              int v52 = v139;
              if (v139 < (char *)&v143)
              {
                unint64_t v53 = 0;
                do
                {
                  unint64_t v54 = v53 + *(unsigned int *)v52 * (unint64_t)v13;
                  *(_DWORD *)int v52 = v54;
                  v52 += 4;
                  unint64_t v53 = HIDWORD(v54);
                }
                while (v52 < (char *)&v143);
                if (v53)
                {
                  int v143 = v53;
                  uintmax_t v140 = &v144;
                }
              }
              addToMP((uint64_t)&v139, hexdigit[*v11]);
              uintmax_t v140 = &v143;
              unsigned int v55 = *++v11;
              unsigned int v10 = v55;
            }
            while (v13 > hexdigit[v55]);
          }
          if (v10 == 41)
          {
            double v9 = v11 + 1;
          }
          else
          {
            *(void *)path = 0;
            uint64_t v142 = 0;
            long long v56 = v11 + 1;
            int v143 = 0;
            while (1)
            {
              int v57 = *(v56 - 1);
              if (!*(v56 - 1) || v57 == 41) {
                break;
              }
              ++v56;
            }
            if (v57 == 41) {
              double v9 = v56;
            }
          }
        }
        j__mkdtempat_np(*(void *)(a1 + 32), path);
        int v58 = *(_DWORD *)(a1 + 12);
        switch(v58)
        {
          case 8:
            *(unsigned char *)(*(void *)(a1 + 32) + 6) |= 0xF8u;
            if (*(unsigned char *)(a1 + 96)) {
              char v60 = -1;
            }
            else {
              char v60 = 127;
            }
            *(unsigned char *)(*(void *)(a1 + 32) + 7) = v60;
            break;
          case 4:
            *(unsigned char *)(*(void *)(a1 + 32) + 2) |= 0xC0u;
            if (*(unsigned char *)(a1 + 96)) {
              char v61 = -1;
            }
            else {
              char v61 = 127;
            }
            *(unsigned char *)(*(void *)(a1 + 32) + 3) = v61;
            break;
          case 2:
            if (*(unsigned char *)(a1 + 96)) {
              char v59 = -2;
            }
            else {
              char v59 = 126;
            }
            *(unsigned char *)(*(void *)(a1 + 32) + 1) |= v59;
            break;
        }
        unsigned int v62 = *(unsigned __int8 ***)(a1 + 48);
        if (v62) {
          *unsigned int v62 = v9;
        }
        return 0;
      }
LABEL_150:
      long long v72 = *(void **)(a1 + 48);
      if (v72) {
        *long long v72 = *(void *)(a1 + 40);
      }
      MEMORY[0x18C122530](*(void *)(a1 + 32), *(int *)(a1 + 12));
      return 0;
    }
    if (v3 != 105)
    {
      if (v3 == 110) {
        goto LABEL_20;
      }
      goto LABEL_61;
    }
LABEL_33:
    if ((v2[1] | 0x20) == 0x6E && (v2[2] | 0x20) == 0x66)
    {
      __int16 v14 = v2 + 3;
      if ((v2[3] | 0x20) == 0x69
        && (v2[4] | 0x20) == 0x6E
        && (v2[5] | 0x20) == 0x69
        && (v2[6] | 0x20) == 0x74
        && (v2[7] | 0x20) == 0x79)
      {
        __int16 v14 = v2 + 8;
      }
      unint64_t v15 = *(unsigned __int8 ***)(a1 + 48);
      if (v15) {
        *unint64_t v15 = v14;
      }
      infinity(a1);
      return 0;
    }
    goto LABEL_150;
  }
  if (v3 == 48)
  {
    unsigned int v16 = v2 + 1;
    if ((v2[1] | 0x20) != 0x78)
    {
      long long v40 = v2 - 1;
      do
      {
        int v41 = *++v40;
        int v3 = v41;
      }
      while (v41 == 48);
      goto LABEL_72;
    }
    unsigned int v19 = v2[2];
    int v18 = v2 + 2;
    unsigned int v17 = v19;
    unsigned int v20 = hexdigit[v19];
    if (v20 > 0xF)
    {
      unint64_t v21 = 0;
      unint64_t v25 = 0;
      int v30 = 0;
      int v29 = 0;
      uint64_t v22 = v18;
      goto LABEL_130;
    }
    unint64_t v21 = 0;
    uint64_t v22 = v18;
    do
    {
      unsigned int v23 = *++v22;
      unsigned int v17 = v23;
      unint64_t v21 = 16 * v21 + v20;
      unsigned int v20 = hexdigit[v23];
    }
    while (v20 <= 0xF && v21 >> 60 == 0);
    if (v20 > 0xF)
    {
      unint64_t v25 = 0;
    }
    else
    {
      unint64_t v25 = 0;
      do
      {
        *((void *)&v26 + 1) = v25;
        *(void *)&long long v26 = v21;
        unint64_t v25 = v26 >> 60;
        unsigned int v27 = *++v22;
        unsigned int v17 = v27;
        unint64_t v21 = 16 * v21 + v20;
        unsigned int v20 = hexdigit[v27];
      }
      while (v20 <= 0xF && v25 >> 59 == 0);
      if (v20 <= 0xF)
      {
        int v29 = 0;
        int v30 = 0;
        do
        {
          v29 |= v20;
          v30 += 4;
          unsigned int v31 = *++v22;
          unsigned int v17 = v31;
          unsigned int v20 = hexdigit[v31];
        }
        while (v20 < 0x10);
LABEL_130:
        int v63 = v22 - v18;
        uint64_t v64 = *(_xlocale **)(a1 + 56);
        if (v64)
        {
          long long v65 = localeconv_l(v64);
          int v66 = *(unsigned __int8 *)v65->decimal_point;
          if (*v65->decimal_point)
          {
            uint64_t v67 = 0;
            while (v22[v67] == v66)
            {
              int v66 = v65->decimal_point[++v67];
              if (!v66)
              {
                v22 += v67;
                goto LABEL_138;
              }
            }
            unsigned int v17 = *v22;
LABEL_168:
            if ((v17 | 0x20) == 0x70)
            {
              int v81 = v22[1];
              BOOL v82 = v81 == 45 || v81 == 43;
              uint64_t v83 = 1;
              if (v82)
              {
                uint64_t v83 = 2;
                char v84 = v22 + 2;
              }
              else
              {
                char v84 = v22 + 1;
              }
              int v85 = v22[v83];
              if ((v85 - 58) >= 0xFFFFFFF6)
              {
                int v86 = 0;
                int v87 = v85 - 48;
                uint64_t v22 = v84;
                do
                {
                  int v88 = v87 + 10 * v86;
                  if (v86 <= 99999999) {
                    int v86 = v88;
                  }
                  else {
                    int v86 = 99999999;
                  }
                  int v89 = *++v22;
                  int v87 = v89 - 48;
                }
                while ((v89 - 48) < 0xA);
                if (v81 == 45) {
                  int v90 = -v86;
                }
                else {
                  int v90 = v86;
                }
                v30 += v90;
              }
            }
            if (!(v21 | v25))
            {
              unint64_t v91 = 0;
              if (!v63) {
                uint64_t v22 = v16;
              }
              int v92 = *(_DWORD *)(a1 + 4);
              goto LABEL_290;
            }
            if (!v25)
            {
              if ((v21 & 0x8000000000000000) != 0)
              {
                unint64_t v25 = v21 >> 1;
                v21 <<= 63;
                v30 -= 63;
              }
              else
              {
                v30 -= 64;
                unint64_t v25 = v21;
                unint64_t v21 = 0;
              }
            }
            unsigned int v93 = __clz(v25);
            unint64_t v94 = v21 << (v93 - 1);
            int v95 = v30 - (v93 - 1);
            BOOL v96 = v93 >= 2;
            if (v93 >= 2)
            {
              unint64_t v97 = (v25 << (v93 - 1)) | (v21 >> (65 - v93));
            }
            else
            {
              int v95 = v30;
              unint64_t v97 = v25;
            }
            if (v96) {
              unint64_t v98 = v94;
            }
            else {
              unint64_t v98 = v21;
            }
            int v92 = v95 + 127;
            unint64_t v91 = v98 | (v29 != 0);
            if (v95 + 127 > *(_DWORD *)(a1 + 8)) {
              goto LABEL_290;
            }
            int v100 = *(_DWORD *)a1;
            int v99 = *(_DWORD *)(a1 + 4);
            if (v92 <= v99 - *(_DWORD *)a1) {
              goto LABEL_290;
            }
            int v101 = v99 - (v95 + v100);
            if (v92 <= v99) {
              int v102 = v101 + 1;
            }
            else {
              int v102 = 127 - v100;
            }
            if (v92 <= v99) {
              int v92 = *(_DWORD *)(a1 + 4);
            }
            if (v102 > 63)
            {
              unint64_t v104 = 0;
              unint64_t v103 = (v97 << -(char)v102) | (v91 >> v102) | (v91 << -(char)v102 != 0);
              unint64_t v91 = v97 >> v102;
            }
            else
            {
              unint64_t v103 = v91 << -(char)v102;
              unint64_t v91 = (v97 << -(char)v102) | (v91 >> v102);
              unint64_t v104 = v97 >> v102;
            }
            HIDWORD(v106) = fegetround();
            LODWORD(v106) = HIDWORD(v106);
            int v105 = v106 >> 22;
            switch(v105)
            {
              case 1:
                if (*(unsigned char *)(a1 + 96)) {
                  goto LABEL_279;
                }
                break;
              case 3:
                goto LABEL_279;
              case 2:
                if (!*(unsigned char *)(a1 + 96)) {
                  goto LABEL_279;
                }
                break;
              default:
                if (v103 <= 0x8000000000000000 && (v103 != 0x8000000000000000 || (v91 & 1) == 0)) {
                  goto LABEL_279;
                }
                goto LABEL_277;
            }
            if (!v103) {
              goto LABEL_279;
            }
LABEL_277:
            BOOL v96 = __CFADD__(v91++, 1);
            if (v96) {
              ++v104;
            }
LABEL_279:
            int v134 = *(_DWORD *)(a1 + 4);
            int v135 = *(_DWORD *)a1 - (v92 == v134);
            if (v135 < 65)
            {
              if ((v135 != 64 || !v104) && (v135 > 63 || !(v104 | (v91 >> v135))))
              {
LABEL_287:
                if (v92 == v134 && v103) {
                  *__error() = 34;
                }
                goto LABEL_290;
              }
            }
            else if (!(v104 >> v135))
            {
              goto LABEL_287;
            }
            v91 >>= v92++ > v134;
LABEL_290:
            int v136 = *(void **)(a1 + 48);
            if (v136) {
              void *v136 = v22;
            }
            if (v92 > *(_DWORD *)(a1 + 8)) {
              goto LABEL_293;
            }
            int v137 = *(_DWORD *)(a1 + 4);
            if (v92 > v137 - *(_DWORD *)a1)
            {
              int v138 = *(_DWORD *)(a1 + 12);
              switch(v138)
              {
                case 8:
                  uint64_t result = 0;
                  **(void **)(a1 + 32) = v91 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v92 - v137) << 52) | ((unint64_t)(*(unsigned char *)(a1 + 96) != 0) << 63);
                  return result;
                case 4:
                  uint64_t result = 0;
                  **(_DWORD **)(a1 + 32) = v91 & 0x7FFFFF | ((unsigned __int16)(v92 - v137) << 23) | ((*(unsigned char *)(a1 + 96) != 0) << 31);
                  return result;
                case 2:
                  uint64_t result = 0;
                  **(_WORD **)(a1 + 32) = (*(unsigned __int8 *)(a1 + 96) << 15) | (((_WORD)v92 - (_WORD)v137) << 10) | v91 & 0x3FF;
                  return result;
              }
              return 0;
            }
LABEL_299:
            underflow(a1);
            return 0;
          }
        }
        else
        {
          if (v17 != 46) {
            goto LABEL_168;
          }
          ++v22;
        }
LABEL_138:
        unsigned int v17 = *v22;
        unsigned int v68 = hexdigit[*v22];
        if (!v25 && (v68 <= 0xF ? (BOOL v69 = v21 >> 60 == 0) : (BOOL v69 = 0), v69))
        {
          long long v70 = v22;
          do
          {
            unsigned int v74 = *++v70;
            unsigned int v17 = v74;
            unint64_t v21 = 16 * v21 + v68;
            unsigned int v68 = hexdigit[v74];
          }
          while (v68 <= 0xF && v21 >> 60 == 0);
        }
        else
        {
          long long v70 = v22;
        }
        while (v68 <= 0xF && v25 >> 59 == 0)
        {
          *((void *)&v76 + 1) = v25;
          *(void *)&long long v76 = v21;
          unint64_t v25 = v76 >> 60;
          unsigned int v77 = *++v70;
          unsigned int v17 = v77;
          unint64_t v21 = 16 * v21 + v68;
          unsigned int v68 = hexdigit[v77];
        }
        v30 += 4 * (v22 - v70);
        int v79 = (int)v70;
        if (v68 <= 0xF)
        {
          do
          {
            v29 |= v68;
            unsigned int v80 = *++v70;
            unsigned int v17 = v80;
            unsigned int v68 = hexdigit[v80];
            ++v79;
          }
          while (v68 < 0x10);
        }
        int v63 = v63 - v22 + v79;
        uint64_t v22 = v70;
        goto LABEL_168;
      }
    }
    int v30 = 0;
    int v29 = 0;
    goto LABEL_130;
  }
  if (v3 == 73) {
    goto LABEL_33;
  }
LABEL_61:
  if ((v3 - 58) <= 0xF5u)
  {
    uint64_t v32 = *(_xlocale **)(a1 + 56);
    if (v32)
    {
      unint64_t v33 = localeconv_l(v32);
      int v34 = *(unsigned __int8 *)v33->decimal_point;
      if (v33->decimal_point[1])
      {
        if (*v33->decimal_point)
        {
          uint64_t v35 = (unsigned __int8 *)(v33->decimal_point + 1);
          LOBYTE(v36) = 1;
          do
          {
            int v37 = *v2++;
            int v36 = v36 & (v37 == v34);
            int v38 = *v35++;
            int v34 = v38;
          }
          while (v38);
          if (!v36) {
            goto LABEL_150;
          }
        }
        int v39 = *v2;
        goto LABEL_148;
      }
      if (v34 != *v2) {
        goto LABEL_150;
      }
    }
    else if (v3 != 46)
    {
      goto LABEL_150;
    }
    int v71 = *++v2;
    int v39 = v71;
LABEL_148:
    if ((v39 - 48) >= 0xA) {
      goto LABEL_150;
    }
    uint64_t v42 = 0;
    goto LABEL_221;
  }
  long long v40 = v2;
LABEL_72:
  if ((v3 - 48) > 9)
  {
    uint64_t v42 = 0;
    int v45 = 0;
    uint64_t v2 = v40;
  }
  else
  {
    uint64_t v42 = (v3 - 48);
    uint64_t v2 = v40 + 1;
    int v3 = v40[1];
    unsigned __int8 v43 = v3 - 48;
    if ((v3 - 48) <= 9)
    {
      do
      {
        uint64_t v42 = 10 * v42 + v43;
        int v44 = *++v2;
        int v3 = v44;
        unsigned __int8 v43 = v44 - 48;
      }
      while ((v44 - 48) < 0xA);
    }
    int v45 = v2 - v40;
  }
  uint64_t v46 = *(_xlocale **)(a1 + 56);
  if (v46)
  {
    int v47 = 0;
    if (v3 > 68)
    {
      if (v3 == 69 || v3 == 101) {
        goto LABEL_231;
      }
    }
    else if (!v3 || v3 == 32)
    {
      goto LABEL_231;
    }
    unsigned __int8 v48 = localeconv_l(v46);
    int v49 = *(unsigned __int8 *)v48->decimal_point;
    if (v48->decimal_point[1])
    {
      if (*v48->decimal_point)
      {
        uint64_t v50 = 0;
        LOBYTE(v51) = 1;
        do
        {
          int v51 = v51 & (v2[v50] == v49);
          int v49 = v48->decimal_point[++v50];
        }
        while (v49);
        if (!v51)
        {
          int v47 = 0;
          int v3 = *v2;
          goto LABEL_231;
        }
        v2 += v50;
      }
    }
    else if (v49 == *v2)
    {
      ++v2;
    }
LABEL_216:
    if (v45)
    {
      int v3 = *v2;
      if ((v3 - 48) > 9)
      {
        uint64_t v107 = v2;
      }
      else
      {
        uint64_t v42 = 10 * v42 + (v3 - 48);
        uint64_t v107 = v2 + 1;
        int v3 = v2[1];
        unsigned int v108 = v3 - 48;
        if ((v3 - 48) <= 9)
        {
          do
          {
            uint64_t v42 = 10 * v42 + v108;
            int v109 = *++v107;
            int v3 = v109;
            unsigned int v108 = v109 - 48;
          }
          while ((v109 - 48) < 0xA);
        }
      }
      v45 += v107 - v2;
      goto LABEL_230;
    }
LABEL_221:
    int v110 = v2 - 1;
    unint64_t v111 = v2;
    do
    {
      int v112 = *v111++;
      int v3 = v112;
      ++v110;
      uint64_t v113 = (v112 - 48);
    }
    while (v112 == 48);
    long long v40 = v111 - 1;
    uint64_t v107 = v111 - 1;
    if (v113 <= 9)
    {
      int v3 = *v111;
      unsigned int v114 = v3 - 48;
      if ((v3 - 48) <= 9)
      {
        do
        {
          uint64_t v113 = 10 * v113 + v114;
          int v115 = *++v111;
          int v3 = v115;
          unsigned int v114 = v115 - 48;
        }
        while ((v115 - 48) < 0xA);
      }
      uint64_t v107 = v111;
      uint64_t v42 = v113;
    }
    int v45 = v107 - v110;
LABEL_230:
    int v47 = v2 - v107;
    uint64_t v2 = v107;
    goto LABEL_231;
  }
  if (v3 == 46)
  {
    ++v2;
    goto LABEL_216;
  }
  int v47 = 0;
LABEL_231:
  if ((v3 | 0x20) == 0x65
    && ((char v116 = v2 + 1, v117 = v2[1], v117 == 45) ? (v118 = v2 + 2) : (v118 = v2 + 1),
        v117 == 45 ? (int v119 = -1) : (int v119 = 1),
        v117 != 43 ? (int v120 = v118) : (int v120 = v2 + 2),
        v117 != 43 ? (int v121 = v119) : (int v121 = 1),
        *v120 - 48 <= 9))
  {
    int v122 = (*v120 - 48);
    int v124 = v120[1];
    int v123 = v120 + 1;
    unsigned __int8 v125 = v124 - 48;
    if ((v124 - 48) <= 9)
    {
      do
      {
        int v122 = 10 * v122 + v125;
        int v126 = *++v123;
        unsigned __int8 v125 = v126 - 48;
      }
      while ((v126 - 48) < 0xA);
    }
    if (v123 - v2 >= 10)
    {
      if (v117 == 45 || v117 == 43) {
        char v116 = v2 + 2;
      }
      uint64_t v127 = v123 - v116 + 1;
      do
      {
        int v128 = *v116++;
        --v127;
      }
      while (v128 == 48);
      if (v127 > 8) {
        int v122 = 99999999;
      }
    }
    v47 += v122 * v121;
  }
  else
  {
    int v123 = v2;
  }
  int v129 = *(unsigned __int8 ***)(a1 + 48);
  if (v129) {
    *int v129 = v123;
  }
  if (!v45)
  {
    MEMORY[0x18C122530](*(void *)(a1 + 32), *(int *)(a1 + 12));
    uint64_t result = 0;
    *(unsigned char *)(*(int *)(a1 + 12) + *(void *)(a1 + 32) - 1) = (*(unsigned char *)(a1 + 96) != 0) << 7;
    return result;
  }
  if (v47 + v45 < *(_DWORD *)(a1 + 16)) {
    goto LABEL_299;
  }
  if (v47 + v45 > *(_DWORD *)(a1 + 20))
  {
LABEL_293:
    overflow(a1);
    return 0;
  }
  if (v45 < 20)
  {
    long long v40 = 0;
    int v133 = 0;
  }
  else
  {
    unsigned int v130 = 0;
    uint64_t v42 = 0;
    do
    {
      int v131 = *v40++;
      uint64_t v132 = (v131 - 48);
      if (v132 < 0xA)
      {
        uint64_t v42 = v132 + 10 * v42;
        ++v130;
      }
    }
    while (v130 < 0x13);
    int v133 = v45 - 19;
  }
  *(_DWORD *)(a1 + 72) = v45;
  *(void *)(a1 + 80) = v40;
  *(void *)(a1 + 64) = v42;
  uint64_t result = 1;
  *(_DWORD *)(a1 + 88) = v133;
  *(_DWORD *)(a1 + 92) = v47;
  return result;
}

void *__parsefloat_buf(size_t a1)
{
  if (__parsefloat_buf_parsefloat_tsd_key)
  {
    pthread_key_t v2 = 15;
  }
  else
  {
    pthread_mutex_lock(&__parsefloat_buf_parsefloat_tsd_lock);
    if ((__parsefloat_buf_parsefloat_tsd_key & 1) == 0)
    {
      __parsefloat_buf_parsefloat_tsd_key = 1;
      pthread_key_init_np();
    }
    pthread_mutex_unlock(&__parsefloat_buf_parsefloat_tsd_lock);
    if (__parsefloat_buf_parsefloat_tsd_key) {
      pthread_key_t v2 = 15;
    }
    else {
      pthread_key_t v2 = -1;
    }
  }
  int v3 = pthread_getspecific(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    if (__parsefloat_buf_bsiz < a1)
    {
      uint64_t v4 = reallocf(v3, a1);
      if (__parsefloat_buf_parsefloat_tsd_key) {
        pthread_key_t v5 = 15;
      }
      else {
        pthread_key_t v5 = -1;
      }
      pthread_setspecific(v5, v4);
      if (v4) {
        __parsefloat_buf_bsiz = a1;
      }
      else {
        __parsefloat_buf_bsiz = 0;
      }
    }
  }
  else
  {
    if (a1 <= 0x201) {
      size_t v6 = 513;
    }
    else {
      size_t v6 = a1;
    }
    __parsefloat_buf_bsiz = v6;
    uint64_t v4 = malloc_type_malloc(v6, 0xB78CF628uLL);
    if (v4)
    {
      if (__parsefloat_buf_parsefloat_tsd_key) {
        pthread_key_t v7 = 15;
      }
      else {
        pthread_key_t v7 = -1;
      }
      pthread_setspecific(v7, v4);
    }
    else
    {
      __parsefloat_buf_bsiz = 0;
    }
  }
  return v4;
}

int atexit_b(void *a1)
{
  *(void *)&long long v2 = 3;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  *((void *)&v2 + 1) = _Block_copy(a1);
  return atexit_register(&v2);
}

int atexit(void (*a1)(void))
{
  *((void *)&v2 + 1) = a1;
  *(void *)&long long v2 = 1;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  return atexit_register(&v2);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  *((void *)&v4 + 1) = lpfunc;
  *(void *)&long long v4 = 2;
  pthread_key_t v5 = obj;
  size_t v6 = lpdso_handle;
  return atexit_register(&v4);
}

uint64_t atexit_register(_OWORD *a1)
{
  unsigned int v1 = (_DWORD *)__atexit;
  if (!__atexit) {
    atexit_register_cold_1();
  }
  pthread_mutex_lock(&atexit_mutex);
  int v3 = v1[2];
  if (v3 >= 32)
  {
    uint64_t v4 = __atexit;
    while (1)
    {
      pthread_mutex_unlock(&atexit_mutex);
      pthread_key_t v5 = malloc_type_malloc(0x410uLL, 0x10A00403E527AF6uLL);
      if (!v5) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v1 = v5;
      pthread_mutex_lock(&atexit_mutex);
      if (v4 == __atexit) {
        break;
      }
      pthread_mutex_unlock(&atexit_mutex);
      free(v1);
      pthread_mutex_lock(&atexit_mutex);
      uint64_t v4 = __atexit;
      int v3 = *(_DWORD *)(__atexit + 8);
      if (v3 <= 31)
      {
        unsigned int v1 = (_DWORD *)__atexit;
        goto LABEL_10;
      }
    }
    int v3 = 0;
    v1[2] = 0;
    *(void *)unsigned int v1 = v4;
    __atexit = (uint64_t)v1;
  }
LABEL_10:
  v1[2] = v3 + 1;
  pthread_key_t v7 = &v1[8 * v3];
  long long v8 = a1[1];
  *((_OWORD *)v7 + 1) = *a1;
  *((_OWORD *)v7 + 2) = v8;
  __atexit_new_registratiouint64_t n = 1;
  pthread_mutex_unlock(&atexit_mutex);
  return 0;
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return (mach_header_64 *)_mh_execute_header_pointer;
}

size_t wcslen(const __int32 *a1)
{
  uint64_t v1 = 0;
  while (a1[v1++])
    ;
  return (v1 * 4 - 4) >> 2;
}

int isspace(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 14) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 14) & 1;
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  uint64_t v3 = a2;
  if (!a1 || (int v5 = *(unsigned __int8 *)a1, !*a1))
  {
    __int16 v9 = 46;
    goto LABEL_10;
  }
  uint64_t v6 = j__strsignal_r((int)a1, a2, v2) - 1;
  do
  {
    uint64_t v7 = v6;
    long long v8 = &a1[v6];
    if (&a1[v6] <= a1) {
      break;
    }
    --v6;
  }
  while (*v8 == 47);
  if (!v7 && v5 == 47)
  {
    __int16 v9 = 47;
LABEL_10:
    *(_WORD *)uint64_t v3 = v9;
    return v3;
  }
  uint64_t v11 = 1;
  do
  {
    uint64_t v12 = (char *)v8;
    unint64_t v13 = v11;
    if (v8 <= a1) {
      break;
    }
    --v8;
    ++v11;
  }
  while (*(v12 - 1) != 47);
  if (v13 < 0x400)
  {
    j__mkdtempat_np((int)v3, v12);
    v3[v13] = 0;
  }
  else
  {
    uint64_t v3 = 0;
    *__error() = 63;
  }
  return v3;
}

char *__cdecl dirname_r(const char *a1, char *a2)
{
  uint64_t v3 = a2;
  if (a1 && (int v5 = *(unsigned __int8 *)a1, *a1))
  {
    uint64_t v6 = &a1[j__strsignal_r((int)a1, a2, v2) - 1];
    while (v6 > a1)
    {
      int v7 = *(unsigned __int8 *)v6--;
      if (v7 != 47)
      {
        while (v6 > a1)
        {
          int v8 = *(unsigned __int8 *)v6--;
          if (v8 == 47)
          {
            ++v6;
            goto LABEL_12;
          }
        }
        goto LABEL_18;
      }
    }
LABEL_12:
    unint64_t v9 = v6 - a1;
    if (v6 == a1)
    {
LABEL_18:
      if (v5 == 47) {
        char v13 = 47;
      }
      else {
        char v13 = 46;
      }
      char *v3 = v13;
      v3[1] = 0;
      return v3;
    }
    unsigned int v10 = v6 - 1;
    do
    {
      unint64_t v11 = v9;
      if (v10 <= a1) {
        break;
      }
      int v12 = *(unsigned __int8 *)v10--;
      --v9;
    }
    while (v12 == 47);
    if (v11 < 0x400)
    {
      j__mkostemp(v3, (int)a1);
      v3[v11] = 0;
    }
    else
    {
      uint64_t v3 = 0;
      *__error() = 63;
    }
  }
  else
  {
    *(_WORD *)a2 = 46;
  }
  return v3;
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return __private_getcwd(a1, a2, 1);
}

int rand_r(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (!*a1) {
    unsigned int v1 = 123459876;
  }
  uint64_t v2 = 16807 * (v1 % 0x1F31D) - 2836 * (v1 / 0x1F31D);
  unsigned int v3 = v2 + 0x7FFFFFFF;
  if (v2 >= 0) {
    unsigned int v3 = v2;
  }
  *a1 = v3;
  return v3 & 0x7FFFFFFF;
}

unint64_t strtouq(const char *__str, char **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return strtoull_l(__str, __endptr, __base, v5);
}

uint64_t _libc_initializer(void *a1, uint64_t a2, char **a3, uint64_t *a4)
{
  _program_vars_init(a4);
  _libc_fork_init(a1);
  __confstr_init((uint64_t)a1);
  __atexit_init();
  uint64_t inited = _init_clock_port();
  _arc4_fork_child(inited);
  __xlocale_init();
  __guard_setup(a3, v7, v8, v9, v10);
  uint64_t v11 = _subsystem_init();

  return _arc4_fork_child(v11);
}

uint64_t _subsystem_init()
{
  uint64_t result = _simple_getenv();
  if (result) {
    subsystem_root_path = result;
  }
  return result;
}

uint64_t *_program_vars_init(uint64_t *result)
{
  uint64_t v1 = result[1];
  NXArgv_pointeunsigned int r = result[2];
  NXArgc_pointeunsigned int r = v1;
  uint64_t v2 = result[4];
  environ_pointeunsigned int r = result[3];
  __progname_pointeunsigned int r = v2;
  _mh_execute_header_pointeunsigned int r = *result;
  return result;
}

void *_libc_fork_init(void *result)
{
  if (*result < 2uLL)
  {
    uint64_t v4 = (void *)result[2];
    _libSystem_atfork_prepare = (_UNKNOWN *)result[1];
    _libSystem_atfork_parent = v4;
    uint64_t v2 = result + 3;
    uint64_t v3 = &_libSystem_atfork_child;
  }
  else
  {
    uint64_t v1 = (void *)result[6];
    _libSystem_atfork_prepare_uint64_t v2 = (_UNKNOWN *)result[5];
    _libSystem_atfork_parent_uint64_t v2 = v1;
    uint64_t v2 = result + 7;
    uint64_t v3 = &_libSystem_atfork_child_v2;
  }
  uint64_t *v3 = *v2;
  return result;
}

uint64_t _init_clock_port()
{
  host_t v0 = MEMORY[0x18C122970]();
  if (host_get_clock_service(v0, 0, (clock_serv_t *)&clock_port)
    || (uint64_t v1 = (ipc_space_t *)MEMORY[0x1E4F14C48], semaphore_create(*MEMORY[0x1E4F14C48], (semaphore_t *)&clock_sem, 0, 0)))
  {
    abort();
  }
  ipc_space_t v2 = *v1;

  return mach_port_deallocate(v2, v0);
}

uint64_t __xlocale_init()
{
  if (__locale_key == -1)
  {
    __locale_key = 10;
    return pthread_key_init_np();
  }
  return result;
}

double __guard_setup(char **a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5 = a1;
  if (a1)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      do
      {
        if (!j__strsvisx(v6, "stack_guard", 0xBuLL, a4, a5))
        {
          uint64_t v8 = j__strncasecmp(v6, (const char *)0x3D, v7);
          if (v8)
          {
            unint64_t v11 = 0;
            int v12 = (const char *)(v8 + 1);
            do
            {
              MEMORY[0x18C122F90](__str, v12, 20);
              __int16 v14 = (unsigned char *)j__strncasecmp(__str, (const char *)0x2C, v13);
              if (v14) {
                unsigned char *v14 = 0;
              }
              __stack_chk_guard[v11] = strtoull(__str, 0, 0);
              uint64_t v16 = j__strncasecmp(v12, (const char *)0x2C, v15);
              if (v16) {
                int v12 = (const char *)(v16 + 1);
              }
              else {
                int v12 = 0;
              }
              if (!v16) {
                break;
              }
            }
            while (v11++ < 7);
            uint64_t v6 = *v5;
          }
          uint64_t v18 = j__strsignal_r((int)v6, v9, v10);
          MEMORY[0x18C122530](v6, v18);
        }
        unsigned int v19 = v5[1];
        ++v5;
        uint64_t v6 = v19;
      }
      while (v19);
    }
  }
  if (open_NOCANCEL() != -1)
  {
    read_NOCANCEL();
    close_NOCANCEL();
  }
  *(void *)&double result = 0xF5000000F5;
  LODWORD(__stack_chk_guard[0]) = 245;
  return result;
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v7 = (locale_t)&__global_locale;
  }
  else {
    locale_t v7 = a4;
  }
  if (!a4) {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (v7 != (locale_t)-1) {
    locale_t v6 = v7;
  }
  if (!v7) {
    locale_t v6 = (locale_t)&__c_locale;
  }
  uint64_t v8 = a1;
  do
  {
    int v10 = *v8++;
    int v9 = v10;
    unint64_t v11 = &_DefaultRuneLocale;
    if (v10 < 0) {
      unint64_t v11 = *(_RuneLocale **)(*((void *)v6 + 166) + 120);
    }
  }
  while ((v11->__runetype[v9] & 0x4000) != 0);
  if (v9 == 43 || v9 == 45)
  {
    char v13 = *v8++;
    char v12 = v13;
  }
  else
  {
    char v12 = v9;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v12 != 48)
  {
    BOOL v16 = a3 == 0;
    if (v12 != 48)
    {
      int v17 = 10;
      goto LABEL_29;
    }
  }
  else
  {
    if ((*(unsigned __int8 *)v8 | 0x20) == 0x78)
    {
      char v12 = v8[1];
      if ((v12 - 48) < 0xAu
        || (unsigned int v14 = *((unsigned __int8 *)v8 + 1) - 65, v14 <= 0x25) && ((1 << v14) & 0x3F0000003FLL) != 0)
      {
        v8 += 2;
        unsigned int v15 = 16;
        goto LABEL_34;
      }
    }
    BOOL v16 = a3 == 0;
    char v12 = 48;
  }
  int v17 = 8;
LABEL_29:
  if (v16) {
    unsigned int v15 = v17;
  }
  else {
    unsigned int v15 = a3;
  }
  if (v15 - 37 < 0xFFFFFFDD)
  {
    unint64_t v18 = 0;
    goto LABEL_54;
  }
LABEL_34:
  unint64_t v18 = 0;
  int v19 = 0;
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    unsigned __int8 v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        if ((v12 - 97) > 0x19u) {
          break;
        }
        unsigned __int8 v21 = v12 - 87;
      }
      else
      {
        unsigned __int8 v21 = v12 - 55;
      }
    }
    if ((int)v15 <= v21) {
      break;
    }
    int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }
      else
      {
        unint64_t v18 = v18 * v15 + v21;
        int v22 = 1;
      }
    }
    char v23 = *v8++;
    char v12 = v23;
    int v19 = v22;
  }
  if (v19 < 0)
  {
    unsigned int v27 = __error();
    int v24 = 0;
    int *v27 = 34;
    unint64_t v18 = -1;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    int v24 = 1;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }
  int v24 = 0;
  if (v9 == 45) {
    unint64_t v18 = -(uint64_t)v18;
  }
  if (a2)
  {
LABEL_55:
    unint64_t v25 = (char *)(v8 - 1);
    if (v24) {
      unint64_t v25 = (char *)a1;
    }
    *a2 = v25;
  }
  return v18;
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return strtoull_l(__str, __endptr, __base, v5);
}

uint64_t __confstr_init(uint64_t result)
{
  __dirhelper_func = *(_UNKNOWN **)(result + 32);
  return result;
}

uint64_t __atexit_init()
{
  if (*(void *)(MEMORY[0x1E4F14C38] + 32) == -1) {
    uint64_t result = *(void *)(MEMORY[0x1E4F14C38] + 40);
  }
  else {
    uint64_t result = _os_alloc_once();
  }
  __atexit = result;
  return result;
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return strtok_r(__str, __sep, &strtok_last);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  uint64_t v4 = __locale_key;
  int v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (_xlocale *)&__global_locale;
  }
  return strftime_l(a1, a2, a3, a4, v6);
}

void rb_tree_init(rb_tree_t *a1, const rb_tree_ops_t *a2)
{
  a1->opaque[0] = 0;
  a1->opaque[1] = (void *)a2;
  a1->opaque[3] = 0;
  a1->opaque[4] = 0;
  a1->opaque[2] = 0;
}

void *__cdecl rb_tree_iterate(rb_tree_t *a1, void *a2, const unsigned int a3)
{
  uint64_t v3 = a1->opaque[1];
  if (!a2)
  {
    if (a1->opaque[0]) {
      return (char *)a1->opaque[(a3 == 0) + 2] - v3[2];
    }
    return 0;
  }
  uint64_t v4 = a3 ^ 1;
  uint64_t v5 = v3[2];
  locale_t v6 = (char *)a2 + v5;
  locale_t v7 = *(void **)((char *)a2 + 8 * a3 + v5);
  if (!v7)
  {
    while (a1->opaque[0] != v6)
    {
      uint64_t v9 = v6[2];
      unsigned int v10 = (v9 >> 1) & 1;
      locale_t v6 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4 == v10) {
        return (char *)v6 - v5;
      }
    }
    return 0;
  }
  do
  {
    locale_t v6 = v7;
    locale_t v7 = (void *)v7[v4];
  }
  while (v7);
  return (char *)v6 - v5;
}

uint64_t signal__(uint64_t a1, __sigaction_u a2, int a3)
{
  v5.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v5.sa_masuint64_t k = 0;
  v6.__sigaction_u = a2;
  int v3 = 1 << (a1 - 1);
  if ((int)a1 > 32) {
    int v3 = 0;
  }
  v6.sa_masuint64_t k = 0;
  v6.sa_flags = 2 * ((_sigintr & v3) == 0);
  if (a3)
  {
    if ((sigaction(a1, &v6, &v5) & 0x80000000) == 0) {
      return (uint64_t)v5.__sigaction_u.__sa_handler;
    }
  }
  else if ((_sigaction_nobind(a1, (uint64_t)&v6, (uint64_t)&v5) & 0x80000000) == 0)
  {
    return (uint64_t)v5.__sigaction_u.__sa_handler;
  }
  return -1;
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1F40D0710](*(void *)&a1, a2, a3);
}

uint64_t _sigaction_nobind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40D0710](a1, a2, a3);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  *a3 *= 4;
  j__strsignal_r((int)a1, (char *)a2, (size_t)a3);
  int result = __sysctl();
  *a3 >>= 2;
  return result;
}

void (__cdecl *__cdecl signal(int a1, __sigaction_u a2))(int)
{
  return (void (__cdecl *)(int))signal__(*(uint64_t *)&a1, a2, 1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  if (!__len) {
    return 0;
  }
  unsigned __int8 v3 = 0;
  do
  {
    char v5 = *(unsigned char *)__b1;
    __b1 = (char *)__b1 + 1;
    char v4 = v5;
    char v6 = *(unsigned char *)__b2;
    __b2 = (char *)__b2 + 1;
    v3 |= v6 ^ v4;
    --__len;
  }
  while (__len);
  return (v3 + 255) >> 8;
}

char *__cdecl rindex(const char *a1, int a2)
{
  int result = 0;
  char v4 = a1;
  do
  {
    int v6 = *v4++;
    int v5 = v6;
    if ((char)a2 == v6) {
      int result = (char *)a1;
    }
    a1 = v4;
  }
  while (v5);
  return result;
}

char ***_NSGetArgv(void)
{
  return (char ***)NXArgv_pointer;
}

int *_NSGetArgc(void)
{
  return (int *)NXArgc_pointer;
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)gmtsub((uint64_t *)a1, 0, (uint64_t)a2);
}

int backtrace(void **a1, int a2)
{
  int v5 = 0;
  backtrace_get_pcs_func((uint64_t)a1, a2, (unsigned int *)&v5, 1, 0);
  int result = v5;
  if (v5)
  {
    while (1)
    {
      uint64_t v4 = (result - 1);
      if (a1[v4]) {
        break;
      }
      --result;
      if (!v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  return __thread_stack_pcs(a1, a2, a3, a4 + 1, a5, 0);
}

uint64_t thread_stack_async_pcs(uint64_t a1, int a2, unsigned int *a3)
{
  return __thread_stack_pcs(a1, a2, a3, 0, 0, 1);
}

uint64_t __thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5, int a6)
{
  uintptr_t return_addr;
  uint64_t vars0;

  unint64_t v11 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v11);
  size_t stacksize_np = pthread_get_stacksize_np(v11);
  *a3 = 0;
  uintptr_t v14 = pthread_stack_frame_decode_np((uintptr_t)&vars0, 0);
  uint64_t v15 = 0;
  if ((&vars0 & 1) == 0)
  {
    uintptr_t v16 = (uintptr_t)stackaddr_np - stacksize_np;
    if ((unint64_t)&vars0 >= v16)
    {
      uintptr_t v17 = v14;
      unint64_t v18 = (char *)&vars0 + (void)stackaddr_np - v14;
      if (&vars0 <= (uint64_t *)v18)
      {
        int v19 = &vars0;
        if (!a5) {
          goto LABEL_7;
        }
LABEL_5:
        if (v17 <= a5)
        {
          while (1)
          {
            uint64_t v15 = 0;
            if (v16 > v17 || (unint64_t)v18 < v17 || (v17 & 1) != 0 || (unint64_t)v19 >= v17) {
              break;
            }
            int v19 = (uint64_t *)v17;
            uintptr_t v17 = pthread_stack_frame_decode_np(v17, 0);
            if (a5) {
              goto LABEL_5;
            }
LABEL_7:
            if (!a4) {
              goto LABEL_15;
            }
            --a4;
          }
        }
        else
        {
LABEL_15:
          uint64_t v15 = 0;
          if (a2)
          {
            int v20 = 1 - a2;
            unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            while (1)
            {
              return_addunsigned int r = 0;
              if ((unint64_t)*v19 >> 60 == 1)
              {
                uint64_t v22 = *(void *)(StatusReg + 824);
                if (v22)
                {
                  uint64_t v23 = *(unsigned int *)(v22 + 36);
                  uint64_t v15 = v23 ? 1 : v15;
                  if (v23 && a6 != 0) {
                    break;
                  }
                }
              }
              uintptr_t v25 = pthread_stack_frame_decode_np((uintptr_t)v19, &return_addr);
              uint64_t v26 = *a3;
              *(void *)(a1 + 8 * v26) = return_addr;
              *a3 = v26 + 1;
              if ((v25 & 1) == 0 && v16 <= v25 && (unint64_t)v18 >= v25 && (unint64_t)v19 < v25)
              {
                ++v20;
                int v19 = (uint64_t *)v25;
                if (v20 != 1) {
                  continue;
                }
              }
              return v15;
            }
            __thread_stack_async_pcs(a1, -v20, a3, (uint64_t)v19);
            return v23;
          }
        }
      }
    }
  }
  return v15;
}

uintptr_t __thread_stack_async_pcs(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  uintptr_t return_addr;

  uintptr_t result = *(void *)(a4 - 8);
  return_addunsigned int r = 0;
  do
  {
    int v7 = a2;
    uintptr_t result = pthread_stack_frame_decode_np(result, &return_addr);
    if (!return_addr) {
      break;
    }
    uint64_t v8 = *a3;
    *(void *)(a1 + 8 * v8) = return_addr + 1;
    *a3 = v8 + 1;
    if (!result) {
      break;
    }
    if (result) {
      break;
    }
    a2 = v7 - 1;
  }
  while (v7);
  return result;
}

int unsetenv(const char *a1)
{
  if (!a1 || !*a1 || j__strncasecmp(a1, (const char *)0x3D, v1))
  {
    *__error() = 22;
    return -1;
  }
  environ_lock_np();
  if (!__env_owned)
  {
    __env_owned = (uint64_t)_owned_ptr_alloc();
    if (!__env_owned)
    {
      environ_unlock_np();
      return -1;
    }
  }
  uint64_t v4 = (char **)_NSGetEnviron();
  __unsetenv_locked(a1, *v4, __env_owned);
  environ_unlock_np();
  return 0;
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  if (!__name || !*__name || j__strncasecmp(__name, (const char *)0x3D, *(size_t *)&__overwrite))
  {
    *__error() = 22;
    return -1;
  }
  environ_lock_np();
  if (!__env_owned)
  {
    __env_owned = (uint64_t)_owned_ptr_alloc();
    if (!__env_owned)
    {
      environ_unlock_np();
      return -1;
    }
  }
  int v7 = (char **)_NSGetEnviron();
  int v8 = __setenv_locked((char *)__name, (unsigned __int8 *)__value, __overwrite, 1, v7, __env_owned);
  environ_unlock_np();
  return v8;
}

uint64_t environ_lock_np()
{
  return os_unfair_lock_lock_with_options();
}

void environ_unlock_np()
{
}

uint64_t __setenv_locked(char *a1, unsigned __int8 *a2, int a3, int a4, char **a5, uint64_t a6)
{
  unint64_t v11 = a1;
  uint64_t v43 = 0;
  char v12 = __findenv_locked(a1, (_DWORD *)&v43 + 1, *a5);
  if (!v12)
  {
    uint64_t v23 = *a5;
    if (*(void *)*a5)
    {
      uint64_t v24 = 0;
      while (*(void *)&v23[8 * v24++ + 8])
        ;
    }
    else
    {
      LODWORD(v24) = 0;
    }
    if (_owned_ptr_search(a6, (unint64_t)*a5, (int *)&v43))
    {
      uint64_t v26 = (char *)malloc_type_malloc(8 * (v24 + 2), 0x899C0F62uLL);
      if (!v26) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v27 = v26;
      _owned_ptr_add(a6, (unint64_t)v26);
      j__mkostemp(v27, (int)*a5);
    }
    else
    {
      char v28 = (char *)malloc_type_realloc(v23, 8 * (v24 + 2), 0x22F4FA58uLL);
      if (!v28) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v27 = v28;
      if (*a5 == v28) {
        goto LABEL_28;
      }
      if (v43 && *(_DWORD *)(a6 + 8) > (int)v43)
      {
        j__mkostemp((char *)(*(void *)a6 + 8 * (int)v43), *(_DWORD *)a6 + 8 * v43 + 8);
        --*(_DWORD *)(a6 + 8);
      }
      _owned_ptr_add(a6, (unint64_t)v27);
    }
    *a5 = v27;
LABEL_28:
    *(void *)&v27[8 * (v24 + 1)] = 0;
    HIDWORD(v43) = v24;
    goto LABEL_29;
  }
  if (a3)
  {
    char v13 = v12;
    uintptr_t v14 = *(char **)&(*a5)[8 * SHIDWORD(v43)];
    if (!_owned_ptr_search(a6, (unint64_t)v14, (int *)&v43))
    {
      if (a4 >= 1)
      {
        unint64_t v17 = j__strsignal_r((int)a2, v15, v16);
        if (j__strsignal_r((int)v13, v18, v19) >= v17) {
          goto LABEL_59;
        }
        int v20 = (char *)malloc_type_realloc(v14, v13 - v14 + v17 + 1, 0x66E2FC5EuLL);
        unint64_t v21 = (unint64_t)v20;
        if (v20) {
          BOOL v22 = v20 == v14;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22)
        {
          *(void *)&(*a5)[8 * SHIDWORD(v43)] = v20;
          char v13 = &v20[v13 - v14];
          if (v43 && *(_DWORD *)(a6 + 8) > (int)v43)
          {
            j__mkostemp((char *)(*(void *)a6 + 8 * (int)v43), *(_DWORD *)a6 + 8 * v43 + 8);
            --*(_DWORD *)(a6 + 8);
          }
          _owned_ptr_add(a6, v21);
          goto LABEL_55;
        }
        if (v20)
        {
LABEL_59:
          do
          {
LABEL_55:
            int v42 = *a2++;
            *v13++ = v42;
          }
          while (v42);
          return 0;
        }
        return 0xFFFFFFFFLL;
      }
      if (v43 && *(_DWORD *)(a6 + 8) > (int)v43)
      {
        j__mkostemp((char *)(*(void *)a6 + 8 * (int)v43), *(_DWORD *)a6 + 8 * v43 + 8);
        --*(_DWORD *)(a6 + 8);
      }
      free(v14);
      goto LABEL_46;
    }
LABEL_29:
    if (a4 >= 1)
    {
      uint64_t v29 = 0;
      for (uint64_t i = v11; *i && *i != 61; ++i)
        v29 += 0x100000000;
      uint64_t v31 = j__strsignal_r((int)a2, v15, v16);
      uint64_t v32 = malloc_type_malloc(v31 + (v29 >> 32) + 2, 0x571A916FuLL);
      uint64_t v33 = SHIDWORD(v43);
      *(void *)&(*a5)[8 * SHIDWORD(v43)] = v32;
      if (v32)
      {
        _owned_ptr_add(a6, *(void *)&(*a5)[8 * v33]);
        uint64_t v34 = *(void *)&(*a5)[8 * SHIDWORD(v43)];
        while (1)
        {
          ++v34;
          int v35 = *v11;
          *(unsigned char *)(v34 - 1) = v35;
          if (!v35 || v35 == 61) {
            break;
          }
          ++v11;
        }
        uint64_t v36 = 0;
        *(unsigned char *)(v34 - 1) = 61;
        do
        {
          int v37 = a2[v36];
          *(unsigned char *)(v34 + v36++) = v37;
        }
        while (v37);
        return 0;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_46:
    if (a4 < 0)
    {
      uint64_t v38 = j__strsignal_r((int)v11, v15, v16);
      int v39 = (char *)malloc_type_malloc(v38 + 1, 0xD68A719DuLL);
      if (!v39) {
        return 0xFFFFFFFFLL;
      }
      long long v40 = v39;
      _owned_ptr_add(a6, (unint64_t)v39);
      j__mkdtempat_np((int)v40, v11);
      unint64_t v11 = v40;
    }
    uint64_t result = 0;
    *(void *)&(*a5)[8 * SHIDWORD(v43)] = v11;
    return result;
  }
  return 0;
}

uint64_t _owned_ptr_add(uint64_t a1, unint64_t a2)
{
  int v8 = 0;
  uint64_t result = _owned_ptr_search(a1, a2, &v8);
  if (result)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    uint64_t v6 = *(int *)(a1 + 12);
    int v7 = *(char **)a1;
    if (v5 >= (int)v6)
    {
      uint64_t result = (uint64_t)malloc_type_realloc(*(void **)a1, 16 * v6, 0xC0040B8AA526DuLL);
      if (!result) {
        return result;
      }
      int v7 = (char *)result;
      *(void *)a1 = result;
      *(_DWORD *)(a1 + 12) = 2 * v6;
    }
    uint64_t result = j__mkostemp(&v7[8 * v8 + 16], v7 + 8 * v8 + 8);
    *(void *)&v7[8 * v8 + 8] = a2;
    *(_DWORD *)(a1 + 8) = v5 + 1;
  }
  return result;
}

uint64_t _owned_ptr_search(uint64_t a1, unint64_t a2, int *a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = v3 - 1;
  unint64_t v5 = *(void *)(*(void *)a1 + 8 * (v3 - 1));
  if (v5 < a2)
  {
    uint64_t result = 0xFFFFFFFFLL;
    if (!a3) {
      return result;
    }
    goto LABEL_3;
  }
  if (v5 == a2)
  {
LABEL_14:
    uint64_t result = 0;
    if (!a3) {
      return result;
    }
LABEL_3:
    *a3 = v4;
    return result;
  }
  if (v3 < 3)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    int v8 = v4;
    do
    {
      int v4 = (v8 + v7) / 2;
      unint64_t v9 = *(void *)(*(void *)a1 + 8 * v4);
      if (v9 >= a2)
      {
        if (v9 <= a2) {
          goto LABEL_14;
        }
        int v8 = (v8 + v7) / 2;
      }
      else
      {
        int v7 = (v8 + v7) / 2;
      }
    }
    while (v8 - v7 > 1);
  }
  uint64_t result = 0xFFFFFFFFLL;
  int v4 = v7;
  if (a3) {
    goto LABEL_3;
  }
  return result;
}

void *_owned_ptr_alloc()
{
  host_t v0 = malloc_type_malloc(0x10uLL, 0x1080040FC6463CFuLL);
  if (v0)
  {
    size_t v1 = malloc_type_malloc(0x40uLL, 0xC0040B8AA526DuLL);
    *host_t v0 = v1;
    if (v1)
    {
      *size_t v1 = 0;
      v0[1] = 0x800000001;
    }
    else
    {
      int v2 = *__error();
      free(v0);
      host_t v0 = 0;
      *__error() = v2;
    }
  }
  return v0;
}

unsigned char *__unsetenv_locked(unsigned char *a1, char *a2, uint64_t a3)
{
  uint64_t v11 = 0;
  for (uint64_t result = __findenv_locked(a1, (_DWORD *)&v11 + 1, a2); result; uint64_t result = __findenv_locked(a1, (_DWORD *)&v11 + 1, a2))
  {
    uint64_t v7 = SHIDWORD(v11);
    int v8 = *(void **)&a2[8 * SHIDWORD(v11)];
    if (!_owned_ptr_search(a3, (unint64_t)v8, (int *)&v11))
    {
      if (v11 && *(_DWORD *)(a3 + 8) > (int)v11)
      {
        j__mkostemp((char *)(*(void *)a3 + 8 * (int)v11), *(_DWORD *)a3 + 8 * v11 + 8);
        --*(_DWORD *)(a3 + 8);
        int v8 = *(void **)&a2[8 * SHIDWORD(v11)];
      }
      free(v8);
      uint64_t v7 = SHIDWORD(v11);
    }
    unint64_t v9 = &a2[8 * v7 + 8];
    do
    {
      uint64_t v10 = *(void *)v9;
      *((void *)v9 - 1) = *(void *)v9;
      v9 += 8;
    }
    while (v10);
  }
  return result;
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  if (__str || (__stunsigned int r = *__lasts) != 0)
  {
    int v3 = __str;
LABEL_4:
    int v5 = *v3++;
    int v4 = v5;
    uint64_t v6 = __sep;
    while (1)
    {
      int v7 = *(unsigned __int8 *)v6;
      if (!*v6) {
        break;
      }
      ++v6;
      if (v4 == v7)
      {
        __stunsigned int r = v3;
        goto LABEL_4;
      }
    }
    if (v4)
    {
      int v8 = v3;
LABEL_10:
      int v10 = *v8++;
      int v9 = v10;
      uint64_t v11 = __sep;
      while (1)
      {
        int v12 = *(unsigned __int8 *)v11;
        if (v12 == v9) {
          break;
        }
        ++v11;
        if (!v12)
        {
          int v3 = v8;
          goto LABEL_10;
        }
      }
      if (v9) {
        char *v3 = 0;
      }
      else {
        int v8 = 0;
      }
    }
    else
    {
      int v8 = 0;
      __stunsigned int r = 0;
    }
    *__lasts = v8;
  }
  return __str;
}

tm *__cdecl gmtime(const time_t *a1)
{
  pthread_once(&gmtime_once, (void (*)(void))gmtime_key_init);
  int v2 = gmtime_key_error;
  if (gmtime_key_error)
  {
    *__error() = v2;
    return 0;
  }
  if (gmtime_key) {
    pthread_key_t v4 = 13;
  }
  else {
    pthread_key_t v4 = 0;
  }
  int v5 = pthread_getspecific(v4);
  if (!v5)
  {
    uint64_t v6 = malloc_type_malloc(0x38uLL, 0x10100404E507D7FuLL);
    if (!v6) {
      return 0;
    }
    int v5 = v6;
    if (gmtime_key) {
      pthread_key_t v7 = 13;
    }
    else {
      pthread_key_t v7 = 0;
    }
    pthread_setspecific(v7, v5);
  }

  return (tm *)gmtsub((uint64_t *)a1, 0, (uint64_t)v5);
}

uint64_t send_NOCANCEL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F40CFE28](a1, a2, a3, a4, 0, 0);
}

uint64_t recv_NOCANCEL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F40CFE00](a1, a2, a3, a4, 0, 0);
}

uint64_t _inet_aton_check(unsigned __int8 *a1, _DWORD *a2, int a3)
{
  int v3 = *a1;
  if ((v3 - 48) > 9) {
    return 0;
  }
  unint64_t v4 = 0;
  while (2)
  {
    if (v3 == 48)
    {
      int v3 = a1[1];
      if ((v3 & 0xFFFFFFDF) == 0x58)
      {
        int v5 = 0;
        unsigned __int8 v6 = a1[2];
        a1 += 2;
        LOBYTE(v3) = v6;
        int v7 = 1;
        uint64_t v8 = 16;
      }
      else
      {
        int v7 = 0;
        int v5 = 1;
        ++a1;
        uint64_t v8 = 8;
      }
    }
    else
    {
      int v7 = 0;
      int v5 = 0;
      uint64_t v8 = 10;
    }
    int v9 = (char)v3;
    unint64_t v10 = 0;
    if ((v3 & 0x80) != 0)
    {
      char v16 = 0;
      goto LABEL_26;
    }
    int v11 = v5;
    while (1)
    {
      if (v3 - 48 <= 9)
      {
        if ((v3 & 0xFE) == 0x38) {
          char v12 = v5;
        }
        else {
          char v12 = 0;
        }
        if (v12) {
          return 0;
        }
        unint64_t v10 = v10 * v8 + v9 - 48;
        goto LABEL_22;
      }
      if (!v7) {
        break;
      }
      __uint32_t v13 = _DefaultRuneLocale.__runetype[v3];
      if ((v13 & 0x10000) == 0) {
        break;
      }
      if ((v13 & 0x1000) != 0) {
        int v14 = -97;
      }
      else {
        int v14 = -65;
      }
      unint64_t v10 = (v9 + v14 + 10) | (16 * v10);
LABEL_22:
      int v15 = (char)*++a1;
      int v9 = v15;
      int v11 = 1;
      LOBYTE(v3) = v15;
      if (v15 < 0)
      {
        char v16 = 0;
        LOBYTE(v3) = v9;
        int v5 = 1;
        goto LABEL_26;
      }
    }
    char v16 = 1;
    int v5 = v11;
LABEL_26:
    if (v3 != 46)
    {
      if ((_BYTE)v3)
      {
        char v19 = v16 ^ 1;
        if (a3) {
          char v19 = 1;
        }
        if (v19) {
          return 0;
        }
        uint64_t v17 = 0;
        if (!v5 || (_DefaultRuneLocale.__runetype[v9] & 0x4000) == 0) {
          return v17;
        }
      }
      else if (!v5)
      {
        return 0;
      }
      if (v4 == 3)
      {
        if (v10 > 0xFF) {
          return 0;
        }
        int v20 = (v22 << 24) | (v23 << 16) | (v24 << 8);
      }
      else
      {
        if (v4 != 2)
        {
          if (v4 == 1)
          {
            if (v10 >> 24) {
              return 0;
            }
            LODWORD(v10) = v10 | (v22 << 24);
          }
          goto LABEL_51;
        }
        if (v10 >> 16) {
          return 0;
        }
        int v20 = (v22 << 24) | (v23 << 16);
      }
      LODWORD(v10) = v10 | v20;
LABEL_51:
      if (a2) {
        *a2 = bswap32(v10);
      }
      return 1;
    }
    uint64_t v17 = 0;
    if (v4 <= 2 && v10 <= 0xFF)
    {
      *(&v22 + v4++) = v10;
      int v18 = *++a1;
      LOBYTE(v3) = v18;
      if ((v18 - 48) >= 0xA) {
        return 0;
      }
      continue;
    }
    return v17;
  }
}

time_t mktime(tm *a1)
{
  int v2 = *__error();
  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  time_t v3 = _st_time1(a1, _st_localsub, 0, 1);
  pthread_rwlock_unlock(&lcl_rwlock);
  *__error() = v2;
  return v3;
}

uint64_t _st_time1(_DWORD *a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, int a4)
{
  if (!a1)
  {
    *__error() = 22;
    return -1;
  }
  if ((int)a1[8] >= 2) {
    a1[8] = 1;
  }
  int v28 = 0;
  uint64_t result = time2((uint64_t)a1, a2, a3, &v28, a4);
  if (v28) {
    return result;
  }
  int v9 = a1[8];
  if (v9 < 0)
  {
    int v9 = 0;
    a1[8] = 0;
  }
  unint64_t v10 = &lclptr;
  if (a2 != _st_localsub) {
    unint64_t v10 = &gmtptr;
  }
  uint64_t v11 = *v10;
  if (!*v10) {
    return -1;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 8);
  if ((int)v12 >= 1) {
    MEMORY[0x18C122530](v30, 4 * v12);
  }
  uint64_t v13 = *(unsigned int *)(v11 + 4);
  if ((int)v13 < 1) {
    return -1;
  }
  int v14 = 0;
  unint64_t v15 = v13 + 1;
  do
  {
    uint64_t v16 = *(unsigned __int8 *)(v11 + (v15 - 2) + 9624);
    if (!v30[v16])
    {
      v30[v16] = 1;
      v29[v14++] = v16;
    }
    --v15;
  }
  while (v15 > 1);
  if (v14 < 1) {
    return -1;
  }
  int v27 = a4;
  uint64_t v17 = 0;
  uint64_t v25 = v14;
  uint64_t v26 = a3;
  do
  {
    uint64_t v18 = v11 + 24 * (int)v29[v17];
    if (*(_DWORD *)(v18 + 10832) == v9)
    {
      char v19 = (_DWORD *)(v18 + 10824);
      int v20 = v29;
      uint64_t v21 = v25;
      do
      {
        int v22 = *v20++;
        uint64_t v23 = v11 + 24 * v22;
        if (*(_DWORD *)(v23 + 10832) != v9)
        {
          unsigned __int8 v24 = (_DWORD *)(v23 + 10824);
          *a1 += *(_DWORD *)(v23 + 10824) - *v19;
          a1[8] = v9 == 0;
          uint64_t result = time2((uint64_t)a1, a2, v26, &v28, v27);
          if (v28) {
            return result;
          }
          *a1 += *v19 - *v24;
          int v9 = a1[8] == 0;
          a1[8] = v9;
        }
        --v21;
      }
      while (v21);
    }
    ++v17;
    uint64_t result = -1;
  }
  while (v17 != v25);
  return result;
}

uint64_t time2(uint64_t a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, _DWORD *a4, int a5)
{
  uint64_t result = time2sub(a1, a2, a3, a4, 0, a5);
  if (!*a4)
  {
    return time2sub(a1, a2, a3, a4, 1, a5);
  }
  return result;
}

void __sinit()
{
  __cleanup = 1;
  __scounted = 3;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  if (!a1) {
    return a2;
  }
  unint64_t v4 = a1;
  int v5 = 0;
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  while (1)
  {
    int next_format = get_next_format((unsigned __int8 **)&v12, v5, v2);
    if (next_format == 23) {
      break;
    }
    int v8 = next_format;
    if (next_format != 24)
    {
      int v9 = get_next_format((unsigned __int8 **)&v11, v5, v7);
      int v5 = v8;
      if (v8 == v9) {
        continue;
      }
    }
    return a2;
  }
  return v4;
}

uint64_t get_next_format(unsigned __int8 **a1, int a2, size_t a3)
{
  if (a2 != 22)
  {
    if (a2 == 21)
    {
      ++*a1;
LABEL_4:
      return get_next_format_from_width(a1);
    }
    for (uint64_t i = *a1; ; uint64_t i = (unsigned __int8 *)(v6 + 2))
    {
      uint64_t v6 = j__strncasecmp((const char *)i, (const char *)0x25, a3);
      if (!v6)
      {
        *a1 = 0;
        return 23;
      }
      int v7 = *(unsigned __int8 *)(v6 + 1);
      if (v7 != 37) {
        break;
      }
    }
    if (*(unsigned char *)(v6 + 1))
    {
      int v8 = (unsigned __int8 *)(v6 + 1);
      while (j__mkdirx_np("#'0- +", (filesec_t)(char)v7))
      {
        int v9 = *++v8;
        LOBYTE(v7) = v9;
        if (!v9) {
          goto LABEL_23;
        }
      }
      if (v7 == 42)
      {
        *a1 = v8;
        return 21;
      }
LABEL_23:
      unint64_t v10 = v8 - 1;
      do
      {
        int v12 = (char)*++v10;
        char v11 = v12;
      }
      while ((v12 - 48) < 0xA);
      *a1 = v10;
      if (v11) {
        goto LABEL_4;
      }
    }
    else
    {
      *a1 = (unsigned __int8 *)(v6 + 1);
    }
    return 24;
  }
  ++*a1;

  return get_next_format_from_precision(a1);
}

uint64_t get_next_format_from_width(unsigned __int8 **a1)
{
  size_t v1 = *a1;
  if (**a1 != 46) {
    goto LABEL_7;
  }
  int v3 = (char)*++v1;
  int v2 = v3;
  if (v3 == 42)
  {
    *a1 = v1;
    return 22;
  }
  if ((v2 - 48) <= 9)
  {
    do
    {
      int v5 = (char)*++v1;
      LOBYTE(v2) = v5;
    }
    while ((v5 - 48) < 0xA);
  }
  if (!(_BYTE)v2)
  {
    *a1 = v1;
    return 24;
  }
  else
  {
LABEL_7:
    *a1 = v1;
    return get_next_format_from_precision(a1);
  }
}

uint64_t get_next_format_from_precision(unsigned __int8 **a1)
{
  int v2 = 0;
  int v3 = *a1;
  unint64_t v4 = *a1;
  int v5 = (char)**a1;
  int v6 = **a1;
  uint64_t v7 = 1;
  if (v5 > 115)
  {
    if (v5 == 116)
    {
      int v9 = 7;
    }
    else
    {
      if (v5 != 122) {
        goto LABEL_16;
      }
      int v9 = 8;
    }
LABEL_14:
    uint64_t v7 = 1;
LABEL_15:
    unint64_t v4 = &v3[v7];
    int v6 = v3[v7];
    int v2 = v9;
    LODWORD(v7) = 0;
  }
  else
  {
    int v8 = v5 - 104;
    int v9 = 5;
    switch(v8)
    {
      case 0:
        int v10 = *++v4;
        int v6 = v10;
        uint64_t v7 = 2;
        if (v10 == 104)
        {
          int v9 = 1;
          goto LABEL_15;
        }
        if (!v6) {
          goto LABEL_59;
        }
        LODWORD(v7) = 0;
        int v2 = 2;
        break;
      case 2:
        goto LABEL_15;
      case 4:
        int v11 = *++v4;
        int v6 = v11;
        if (v11 == 108)
        {
          int v9 = 4;
          uint64_t v7 = 2;
          goto LABEL_15;
        }
        if (!v6) {
          goto LABEL_59;
        }
        LODWORD(v7) = 0;
        int v2 = 3;
        break;
      case 9:
        int v9 = 4;
        goto LABEL_14;
      default:
        break;
    }
  }
LABEL_16:
  if (!v6) {
    goto LABEL_59;
  }
  if (j__mkdirx_np("diouxX", (filesec_t)(char)v6))
  {
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_19;
      case 3:
        *a1 = v4;
        uint64_t result = 4;
        break;
      case 4:
        *a1 = v4;
        uint64_t result = 5;
        break;
      case 5:
        *a1 = v4;
        uint64_t result = 6;
        break;
      case 7:
        *a1 = v4;
        uint64_t result = 7;
        break;
      case 8:
        *a1 = v4;
        uint64_t result = 8;
        break;
      default:
        goto LABEL_59;
    }
    return result;
  }
  if (v6 != 110)
  {
    if (j__mkdirx_np("DOU", (filesec_t)(char)v6))
    {
      *a1 = v4;
      if (v7) {
        return 4;
      }
      else {
        return 24;
      }
    }
    if (j__mkdirx_np("aAeEfFgG", (filesec_t)(char)v6))
    {
      if (!v2 || v2 == 3)
      {
        *a1 = v4;
        return 17;
      }
      goto LABEL_59;
    }
    if (v6 > 98)
    {
      if (v6 == 115)
      {
        if (!v2)
        {
          *a1 = v4;
          return 19;
        }
        if (v2 == 3)
        {
          *a1 = v4;
          return 20;
        }
        goto LABEL_59;
      }
      if (v6 != 112)
      {
        if (v6 == 99)
        {
          if (!v2)
          {
LABEL_19:
            *a1 = v4;
            return 2;
          }
          if (v2 == 3)
          {
            *a1 = v4;
            return 3;
          }
        }
        goto LABEL_59;
      }
      *a1 = v4;
      BOOL v13 = v7 == 0;
      unsigned int v14 = 4;
LABEL_63:
      if (v13) {
        return 24;
      }
      else {
        return v14;
      }
    }
    if (v6 == 67)
    {
      *a1 = v4;
      BOOL v13 = v7 == 0;
      unsigned int v14 = 3;
      goto LABEL_63;
    }
    if (v6 == 83)
    {
      *a1 = v4;
      BOOL v13 = v7 == 0;
      unsigned int v14 = 20;
      goto LABEL_63;
    }
LABEL_59:
    *a1 = v4;
    return 24;
  }
  switch(v2)
  {
    case 0:
      *a1 = v4;
      uint64_t result = 11;
      break;
    case 1:
      *a1 = v4;
      uint64_t result = 9;
      break;
    case 2:
      *a1 = v4;
      uint64_t result = 10;
      break;
    case 3:
      *a1 = v4;
      uint64_t result = 12;
      break;
    case 4:
      *a1 = v4;
      uint64_t result = 13;
      break;
    case 5:
      *a1 = v4;
      uint64_t result = 14;
      break;
    case 7:
      *a1 = v4;
      uint64_t result = 15;
      break;
    case 8:
      *a1 = v4;
      uint64_t result = 16;
      break;
    default:
      goto LABEL_59;
  }
  return result;
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  if ((a2 & 0xFFFFF300) != 0)
  {
    *__error() = 22;
    return 0;
  }
  uint64_t v7 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B0040C1B4BCF7uLL);
  if (!v7) {
    return 0;
  }
  stat v7[7] = a3;
  *((_DWORD *)v7 + 16) = (a2 >> 8) & 8 | a2;

  return (FTS *)__fts_open(a1, (uint64_t)v7, v8);
}

char *__cdecl strerror(int __errnum)
{
  if ((__errnum & 0x80000000) == 0 && __errnum < 107) {
    return (char *)sys_errlist[__errnum];
  }
  int v3 = (char *)__strerror_ebuf;
  if (__strerror_ebuf
    || (uint64_t result = (char *)malloc_type_calloc(1uLL, 0x800uLL, 0x506FA8A7uLL),
        int v3 = result,
        (__strerror_ebuf = (uint64_t)result) != 0))
  {
    if (strerror_r(__errnum, v3, 0x800uLL)) {
      *__error() = 22;
    }
    return (char *)__strerror_ebuf;
  }
  return result;
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  if (__errnum < 0 || __errnum >= 107)
  {
    __errstr(__errnum, (uint64_t)"Unknown error", (uint64_t)__strerrbuf, __buflen);
    return 22;
  }
  else if (MEMORY[0x18C122F90](__strerrbuf, sys_errlist[__errnum], __buflen) >= __buflen)
  {
    return 34;
  }
  else
  {
    return 0;
  }
}

uint64_t __errstr(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[1] = 0;
  if (a1 >= 0) {
    unsigned int v6 = a1;
  }
  else {
    unsigned int v6 = -a1;
  }
  uint64_t v7 = v10;
  do
  {
    *v7-- = a0123456789[v6 % 0xA];
    BOOL v8 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v8);
  if (a1 < 0) {
    *uint64_t v7 = 45;
  }
  else {
    ++v7;
  }
  *((_WORD *)v7 - 1) = 8250;
  MEMORY[0x18C122F90](a3, a2, a4);
  return MEMORY[0x18C122F80](a3, v7 - 2, a4);
}

int getmntinfo_r_np(statfs **a1, int a2)
{
  memset(v6, 0, sizeof(v6));
  int v3 = getmntinfo_internal((uint64_t)v6, a2);
  if (v3)
  {
    *a1 = (statfs *)v6[0];
  }
  else
  {
    int v4 = *__error();
    free(v6[0]);
    *__error() = v4;
  }
  return v3;
}

statfs *getmntinfo_internal(uint64_t a1, int a2)
{
  uint64_t result = (statfs *)*(unsigned int *)(a1 + 8);
  if ((int)result <= 0)
  {
    uint64_t result = (statfs *)getfsstat(0, 0, 2);
    *(_DWORD *)(a1 + 8) = result;
    if ((result & 0x80000000) != 0) {
      return 0;
    }
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= 1)
  {
    uint64_t result = (statfs *)getfsstat(*(statfs **)a1, v5, a2);
    *(_DWORD *)(a1 + 8) = result;
    if ((result & 0x80000000) != 0) {
      return 0;
    }
  }
  while (*(void *)(a1 + 16) <= 2168 * (unint64_t)result)
  {
    if (*(void *)a1)
    {
      free(*(void **)a1);
      LODWORD(result) = *(_DWORD *)(a1 + 8);
    }
    size_t v6 = 2168 * ((int)result + 1);
    *(void *)(a1 + 16) = v6;
    uint64_t result = (statfs *)malloc_type_malloc(v6, 0x94535F7uLL);
    *(void *)a1 = result;
    if (!result) {
      break;
    }
    uint64_t result = (statfs *)getfsstat(result, *(_DWORD *)(a1 + 16), a2);
    *(_DWORD *)(a1 + 8) = result;
    if ((result & 0x80000000) != 0) {
      return 0;
    }
  }
  return result;
}

void rb_tree_remove_node(rb_tree_t *a1, void *a2)
{
  int v2 = a1;
  uint64_t v3 = *((void *)a1->opaque[1] + 2);
  int v4 = (char *)a2 + v3;
  if (!((char *)a2 + v3))
  {
    unint64_t v18 = MEMORY[0x10];
    uint64_t v19 = MEMORY[0];
    goto LABEL_18;
  }
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *((void *)v4 + 1);
  if (!*(void *)v4)
  {
    if (v6) {
      goto LABEL_25;
    }
    unint64_t v18 = *((void *)v4 + 2);
    if (v18)
    {
      uint64_t v19 = 0;
      BOOL v21 = 0;
      int v20 = (char *)a1->opaque[0];
      goto LABEL_19;
    }
    uint64_t v19 = 0;
LABEL_18:
    int v20 = (char *)a1->opaque[0];
    BOOL v21 = a1->opaque[0] != v4;
LABEL_19:
    LODWORD(v10) = (v18 >> 1) & 1;
    int v12 = (char *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    *(void *)((v18 & 0xFFFFFFFFFFFFFFFCLL) + 8 * v10) = v19;
    --a1->opaque[4];
    int v22 = &a1->opaque[(v18 >> 1) & 1];
    unsigned __int8 v24 = (char *)v22[2];
    uint64_t v23 = (char **)(v22 + 2);
    if (v24 == v4)
    {
      *uint64_t v23 = v12;
      if (v20 == v4) {
        a1->opaque[3] = v12;
      }
    }
    *((void *)v4 + 2) = v18 & 3;
    if (v21) {
      goto LABEL_41;
    }
    return;
  }
  if (!v6)
  {
LABEL_25:
    unint64_t v25 = *((void *)v4 + 2);
    uint64_t v26 = *(void **)&v4[8 * (v5 == 0)];
    int v27 = (char *)a1->opaque[0];
    *(void *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 8 * ((v25 >> 1) & 1)) = v26;
    v26[2] = v25;
    --a1->opaque[4];
    if (v27 == v4)
    {
      a1->opaque[(v5 != 0) + 2] = v26;
      unint64_t v28 = *((void *)v4 + 2);
    }
    else
    {
      unint64_t v28 = *((void *)v4 + 2);
      uint64_t v29 = &a1->opaque[(v28 >> 1) & 1];
      uint64_t v31 = (char *)v29[2];
      int v30 = v29 + 2;
      if (v31 == v4) {
        *int v30 = v26;
      }
    }
    *((void *)v4 + 2) = v28 & 3;
    return;
  }
  uint64_t v7 = (char *)rb_tree_iterate(a1, a2, ((*((_DWORD *)v4 + 4) >> 1) & 1) == 0);
  unint64_t v8 = (unint64_t)&v7[v3];
  unint64_t v9 = *(void *)&v7[v3 + 16];
  uint64_t v10 = (v9 >> 1) & 1;
  BOOL v11 = (v9 & 2) == 0;
  int v12 = (char *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
  BOOL v14 = (v9 & 1) == 0 || v8 == 0;
  if (v12 == v4) {
    BOOL v15 = (v9 >> 1) & 1;
  }
  else {
    BOOL v15 = (v9 & 2) == 0;
  }
  uint64_t v16 = *(void *)(v8 + 8 * v15);
  if (!v16 || (uint64_t v17 = *(void *)(v16 + 16), (v17 & 1) == 0))
  {
    if (v12 == v4) {
      goto LABEL_36;
    }
LABEL_33:
    *(void *)&v12[8 * v10] = v16;
    uint64_t v32 = *(void *)&v4[8 * ((v9 & 2) == 0)];
    *(void *)(v8 + 8 * ((v9 & 2) == 0)) = v32;
    *(void *)(v32 + 16) = *(void *)(v32 + 16) & 3 | v8;
    BOOL v11 = (v9 >> 1) & 1;
    goto LABEL_37;
  }
  *(void *)(v16 + 16) = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 != v4)
  {
    BOOL v14 = 0;
    *(void *)(v16 + 16) = v9 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }
  BOOL v14 = 0;
LABEL_36:
  int v12 = &v7[v3];
LABEL_37:
  uint64_t v33 = *(void *)&v4[8 * v11];
  *(void *)(v8 + 8 * v11) = v33;
  *(void *)(v33 + 16) = *(void *)(v33 + 16) & 3 | v8;
  unint64_t v34 = *((void *)v4 + 2);
  *(void *)(v8 + 16) = *(void *)(v8 + 16) & 0xFFFFFFFFFFFFFFFCLL | v34 & 3;
  unint64_t v35 = *((void *)v4 + 2) & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(v8 + 16) = v35 | v34 & 3;
  *(void *)(v35 + 8 * ((v34 >> 1) & 1)) = v8;
  --v2->opaque[4];
  unint64_t v36 = *((void *)v4 + 2);
  int v37 = &v2->opaque[(v36 >> 1) & 1];
  int v39 = (char *)v37[2];
  uint64_t v38 = (unint64_t *)(v37 + 2);
  if (v39 == v4) {
    *uint64_t v38 = v36 & 0xFFFFFFFFFFFFFFFCLL;
  }
  *((void *)v4 + 2) = v36 & 3;
  if (v14)
  {
    a1 = v2;
LABEL_41:
    rb_tree_removal_rebalance(a1, (unint64_t)v12, v10);
  }
}

void uuid_unparse_lower(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2 = 0;
  do
  {
    if (v2 <= 0xA && ((1 << v2) & 0x550) != 0) {
      *out++ = 45;
    }
    *out = a0123456789abcd[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }
  while (v2 != 16);
  *out = 0;
}

int mergesort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  if (__width <= 3)
  {
    *__error() = 22;
    return -1;
  }
  if (__nel)
  {
    size_t j = __width;
    size_t v73 = __width * __nel;
    unint64_t v8 = (char *)malloc_type_malloc(__width * __nel + 8, 0x8EFA8C07uLL);
    if (!v8) {
      return -1;
    }
    unint64_t v9 = v8;
    size_t v91 = j;
    if (__nel <= 5)
    {
      insertionsort((uint64_t)__base, __nel, j, (uint64_t (*)(unint64_t, unint64_t))__compar);
      *(void *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) = &v9[v73];
LABEL_43:
      int v37 = &v9[v73];
      if (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) == &v9[v73])
      {
        int v39 = (char *)__base;
      }
      else
      {
        BOOL v89 = 0;
        uint64_t v87 = (__base | j) & 3;
        uint64_t v81 = -(uint64_t)j;
        uint64_t v38 = (char *)__base;
        int v90 = __compar;
        do
        {
          int v39 = v9;
          unint64_t v9 = v38;
          if (v39 != v37)
          {
            long long v40 = v39;
            int v41 = v38;
            int v42 = v39;
            long long v76 = v37;
            int v78 = v38;
            long long v75 = v39;
            do
            {
              uint64_t v43 = *(char **)((unint64_t)(v40 + 7) & 0xFFFFFFFFFFFFFFF8);
              int v44 = v37;
              if (v43 != v37) {
                int v44 = *(char **)((unint64_t)(v43 + 7) & 0xFFFFFFFFFFFFFFF8);
              }
              uint64_t v45 = v43 - v39;
              uint64_t v46 = &v9[v43 - v39];
              int v79 = v44;
              unsigned int v80 = v41;
              uint64_t v47 = v44 - v39;
              unsigned __int8 v48 = &v9[v44 - v39];
              BOOL v49 = v43 - v39 < v44 - v39;
              BOOL v50 = v41 < v46;
              BOOL v51 = v41 < v46 && v45 < v47;
              int v52 = v46;
              if (v51)
              {
                unint64_t v83 = (unint64_t)v48;
                unint64_t v85 = (unint64_t)v46;
                do
                {
                  int v53 = ((uint64_t (*)(char *, char *))__compar)(v41, v52);
                  if (v53 >= 1) {
                    int v54 = 0;
                  }
                  else {
                    int v54 = -1;
                  }
                  if (v53 >= 1) {
                    unsigned int v55 = v48;
                  }
                  else {
                    unsigned int v55 = v46;
                  }
                  if (v53 >= 1) {
                    long long v56 = v52;
                  }
                  else {
                    long long v56 = v41;
                  }
                  if (v53 >= 1) {
                    int v57 = v41;
                  }
                  else {
                    int v57 = v52;
                  }
                  if (v89)
                  {
LABEL_68:
                    int v58 = &v56[j];
                    if (&v56[j] >= v55)
                    {
LABEL_85:
                      char v61 = &v55[v81];
                      if (&v55[v81] <= v56)
                      {
                        long long v56 = v55;
                      }
                      else
                      {
                        int v62 = ((uint64_t (*)(char *, char *))__compar)(v57, &v55[v81]);
                        if (v62 > v54) {
                          int v63 = v55;
                        }
                        else {
                          int v63 = &v55[v81];
                        }
                        if (v62 <= v54) {
                          char v61 = v56;
                        }
                        long long v56 = v63;
                      }
                      while (v56 > &v61[j])
                      {
                        if (((int (*)(char *, char *))__compar)(v57, &v61[(((v56 - v61) / j) >> 1) * j]) > v54) {
                          v61 += (((v56 - v61) / j) >> 1) * j;
                        }
                        else {
                          long long v56 = &v61[(((v56 - v61) / j) >> 1) * j];
                        }
                      }
                      BOOL v89 = 1;
                    }
                    else
                    {
                      while (((int (*)(char *, char *))__compar)(v57, v58) > v54)
                      {
                        long long v56 = v58;
                        v58 += 2 * j;
                        if (v58 >= v55)
                        {
                          size_t j = v91;
                          goto LABEL_85;
                        }
                        j *= 2;
                      }
                      BOOL v89 = j != v91;
                      if (j > v91)
                      {
                        do
                        {
                          size_t v60 = j >> 1;
                          if (((int (*)(char *, char *))v90)(v57, &v56[j >> 1]) > v54) {
                            v56 += j >> 1;
                          }
                          else {
                            int v58 = &v56[j >> 1];
                          }
                          j >>= 1;
                        }
                        while (v60 > v91);
                      }
                      long long v56 = v58;
                      __compaunsigned int r = v90;
                      size_t j = v91;
                    }
                  }
                  else
                  {
                    uint64_t v59 = 6;
                    while (1)
                    {
                      v56 += j;
                      if (v56 >= v55 || ((int (*)(char *, char *))__compar)(v57, v56) <= v54) {
                        break;
                      }
                      if (!--v59) {
                        goto LABEL_68;
                      }
                    }
                    BOOL v89 = 0;
                  }
                  unsigned __int8 v48 = (char *)v83;
                  if (v57 == v41)
                  {
                    if (v87)
                    {
                      do
                      {
                        char v67 = *v52++;
                        *v42++ = v67;
                      }
                      while (v52 < v56);
                      for (uint64_t i = 0; i != j; ++i)
                        v42[i] = v41[i];
                    }
                    else
                    {
                      do
                      {
                        int v68 = *(_DWORD *)v52;
                        v52 += 4;
                        *(_DWORD *)int v42 = v68;
                        v42 += 4;
                      }
                      while (v52 < v56);
                      for (uint64_t i = 0; i != j; i += 4)
                        *(_DWORD *)&v42[i] = *(_DWORD *)&v41[i];
                    }
                    v41 += i;
                  }
                  else
                  {
                    if (v87)
                    {
                      do
                      {
                        char v64 = *v41++;
                        *v42++ = v64;
                      }
                      while (v41 < v56);
                      for (uint64_t i = 0; i != j; ++i)
                        v42[i] = v52[i];
                    }
                    else
                    {
                      do
                      {
                        int v66 = *(_DWORD *)v41;
                        v41 += 4;
                        *(_DWORD *)int v42 = v66;
                        v42 += 4;
                      }
                      while (v41 < v56);
                      for (uint64_t i = 0; i != j; i += 4)
                        *(_DWORD *)&v42[i] = *(_DWORD *)&v52[i];
                    }
                    v52 += i;
                  }
                  v42 += i;
                  uint64_t v46 = (char *)v85;
                  BOOL v49 = (unint64_t)v52 < v83;
                  BOOL v50 = (unint64_t)v41 < v85;
                }
                while ((unint64_t)v41 < v85 && (unint64_t)v52 < v83);
              }
              if (v49)
              {
                long long v40 = v79;
                if (v87)
                {
                  unint64_t v9 = v78;
                  int v39 = v75;
                  do
                  {
                    char v69 = *v52++;
                    *v42++ = v69;
                  }
                  while (v52 < v48);
                }
                else
                {
                  unint64_t v9 = v78;
                  int v39 = v75;
                  do
                  {
                    int v71 = *(_DWORD *)v52;
                    v52 += 4;
                    *(_DWORD *)int v42 = v71;
                    v42 += 4;
                  }
                  while (v52 < v48);
                }
              }
              else if (v50)
              {
                if (v87)
                {
                  unint64_t v9 = v78;
                  long long v40 = v79;
                  int v39 = v75;
                  do
                  {
                    char v70 = *v41++;
                    *v42++ = v70;
                  }
                  while (v41 < v46);
                }
                else
                {
                  unint64_t v9 = v78;
                  long long v40 = v79;
                  int v39 = v75;
                  do
                  {
                    int v72 = *(_DWORD *)v41;
                    v41 += 4;
                    *(_DWORD *)int v42 = v72;
                    v42 += 4;
                  }
                  while (v41 < v46);
                }
              }
              else
              {
                unint64_t v9 = v78;
                long long v40 = v79;
                int v39 = v75;
              }
              *(void *)((unint64_t)(v80 + 7) & 0xFFFFFFFFFFFFFFF8) = v48;
              int v41 = v48;
              int v37 = v76;
            }
            while (v40 != v76);
          }
          int v37 = &v9[v73];
          uint64_t v38 = v39;
        }
        while (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) != &v9[v73]);
      }
      if (v9 == __base)
      {
        j__mkostemp((char *)__base, (int)v39);
        unint64_t v9 = v39;
      }
      free(v9);
      return 0;
    }
    size_t v10 = __nel & 1 | 4;
    int64_t v11 = (__nel - v10) * j;
    insertionsort((uint64_t)__base + v11, v10, j, (uint64_t (*)(unint64_t, unint64_t))__compar);
    BOOL v82 = &v9[v73];
    *(void *)((unint64_t)&v9[v11 + 7] & 0xFFFFFFFFFFFFFFF8) = &v9[v73];
    int v12 = ((uint64_t (*)(void *, char *))__compar)(__base, (char *)__base + j);
    if (v11 < 1) {
      goto LABEL_43;
    }
    BOOL v13 = (char *)__base + v11;
    uint64_t v14 = 2 * j;
    int v15 = v12 > 0;
    uint64_t v16 = -(uint64_t)j;
    uint64_t v17 = v9;
    unint64_t v18 = (char *)__base;
    uint64_t v86 = 3 * j;
    int v88 = v13;
    unsigned int v77 = v9;
    uint64_t v84 = -(uint64_t)j;
    while (1)
    {
      uint64_t v19 = &v18[v14];
      if (&v18[v14] < v13)
      {
        unsigned int v20 = 2;
        BOOL v21 = v18;
        while (1)
        {
          int v22 = &v21[v14];
          if ((v15 & 1) == ((int (*)(char *, char *))__compar)(&v21[v14], &v21[v86]) < 1) {
            break;
          }
          v20 += 2;
          uint64_t v23 = &v22[v14];
          BOOL v21 = v22;
          if (&v22[v14] >= v88) {
            goto LABEL_16;
          }
        }
        uint64_t v23 = v22;
LABEL_16:
        uint64_t v16 = v84;
        if (v20 > 0xF)
        {
          for (size_t j = v91; v19 < v23; v19 += v14)
          {
            unint64_t v28 = &v19[v16];
            if (((v15 ^ (((int (*)(char *, char *))__compar)(v28, v19) < 1)) & 1) == 0)
            {
              *(void *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = &v77[v19 - (unsigned char *)__base];
              if (v15)
              {
                uint64_t v29 = v18 + 1;
                size_t v30 = v91;
                while (1)
                {
                  char v31 = *(v29 - 1);
                  *(v29 - 1) = *v28;
                  *v28++ = v31;
                  if (!--v30)
                  {
                    v28 -= v14;
                    size_t v30 = v91;
                    if (v29 >= v28) {
                      break;
                    }
                  }
                  ++v29;
                }
              }
              unint64_t v18 = v19;
              uint64_t v17 = &v77[v19 - (unsigned char *)__base];
            }
            uint64_t v16 = v84;
          }
          unint64_t v9 = v77;
          if (v15)
          {
            uint64_t v32 = &v19[v16];
            uint64_t v33 = v18 + 1;
            size_t v34 = v91;
            while (1)
            {
              char v35 = *(v33 - 1);
              *(v33 - 1) = *v32;
              *v32++ = v35;
              if (!--v34)
              {
                v32 -= v14;
                size_t v34 = v91;
                if (v33 >= v32) {
                  break;
                }
              }
              ++v33;
            }
          }
          if (v19 < v88
            || (v36 = ((uint64_t (*)(char *, char *))__compar)(&v19[v16], v19), unsigned __int8 v24 = v82, v36 >= 1))
          {
            unsigned __int8 v24 = &v77[v19 - (unsigned char *)__base];
          }
          *(void *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
          unint64_t v18 = v19;
          goto LABEL_42;
        }
        uint64_t v19 = v23;
        size_t j = v91;
        unint64_t v9 = v77;
      }
      do
      {
        unsigned __int8 v24 = &v9[&v18[v14] - (unsigned char *)__base];
        *(void *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
        if (v15)
        {
          uint64_t v25 = 0;
          uint64_t v26 = &v18[j];
          do
          {
            char v27 = v18[v25];
            v18[v25] = v26[v25];
            v26[v25++] = v27;
          }
          while (j != v25);
          v18 += v16 + v25;
        }
        v18 += v14;
        uint64_t v17 = v24;
      }
      while (v18 < v19);
LABEL_42:
      v15 ^= 1u;
      uint64_t v17 = v24;
      BOOL v13 = v88;
      if (v18 >= v88) {
        goto LABEL_43;
      }
    }
  }
  return 0;
}

int mergesort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  if (__width <= 3)
  {
    *__error() = 22;
    return -1;
  }
  if (!__nel) {
    return 0;
  }
  size_t i = __width;
  size_t v77 = __width * __nel;
  unint64_t v8 = (char *)malloc_type_malloc(__width * __nel + 8, 0xEF852A90uLL);
  if (!v8) {
    return -1;
  }
  unint64_t v9 = v8;
  size_t v94 = i;
  if (__nel > 5)
  {
    size_t v10 = __nel & 1 | 4;
    int64_t v11 = (__nel - v10) * i;
    insertionsort_0((uint64_t)__base + v11, v10, i, (uint64_t)__compar);
    uint64_t v87 = &v9[v77];
    *(void *)((unint64_t)&v9[v11 + 7] & 0xFFFFFFFFFFFFFFF8) = &v9[v77];
    int v12 = (*((uint64_t (**)(void *, void *, char *))__compar + 2))(__compar, __base, (char *)__base + i);
    if (v11 < 1) {
      goto LABEL_43;
    }
    BOOL v13 = (char *)__base + v11;
    uint64_t v14 = 2 * i;
    int v15 = v12 > 0;
    uint64_t v16 = -(uint64_t)i;
    uint64_t v17 = v9;
    unint64_t v18 = (char *)__base;
    uint64_t v91 = 3 * i;
    unsigned int v93 = (char *)__base + v11;
    uint64_t v81 = v9;
    uint64_t v89 = -(uint64_t)i;
    while (1)
    {
      uint64_t v19 = &v18[v14];
      if (&v18[v14] < v13)
      {
        unsigned int v20 = 2;
        BOOL v21 = v18;
        while (1)
        {
          int v22 = &v21[v14];
          if ((v15 & 1) == (*((int (**)(void *, char *, char *))__compar + 2))(__compar, &v21[v14], &v21[v91]) < 1)break; {
          v20 += 2;
          }
          uint64_t v23 = &v22[v14];
          BOOL v21 = v22;
          if (&v22[v14] >= v93) {
            goto LABEL_16;
          }
        }
        uint64_t v23 = v22;
LABEL_16:
        uint64_t v16 = v89;
        if (v20 > 0xF)
        {
          for (size_t i = v94; v19 < v23; v19 += v14)
          {
            unint64_t v28 = &v19[v16];
            if (((v15 ^ ((*((int (**)(void *, char *, char *))__compar + 2))(__compar, v28, v19) < 1)) & 1) == 0)
            {
              *(void *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = &v81[v19 - (unsigned char *)__base];
              if (v15)
              {
                uint64_t v29 = v18 + 1;
                size_t v30 = v94;
                while (1)
                {
                  char v31 = *(v29 - 1);
                  *(v29 - 1) = *v28;
                  *v28++ = v31;
                  if (!--v30)
                  {
                    v28 -= v14;
                    size_t v30 = v94;
                    if (v29 >= v28) {
                      break;
                    }
                  }
                  ++v29;
                }
              }
              unint64_t v18 = v19;
              uint64_t v17 = &v81[v19 - (unsigned char *)__base];
            }
            uint64_t v16 = v89;
          }
          unint64_t v9 = v81;
          if (v15)
          {
            uint64_t v32 = &v19[v16];
            uint64_t v33 = v18 + 1;
            size_t v34 = v94;
            while (1)
            {
              char v35 = *(v33 - 1);
              *(v33 - 1) = *v32;
              *v32++ = v35;
              if (!--v34)
              {
                v32 -= v14;
                size_t v34 = v94;
                if (v33 >= v32) {
                  break;
                }
              }
              ++v33;
            }
          }
          if (v19 < v93
            || (int v36 = (*((uint64_t (**)(void *, char *, char *))__compar + 2))(__compar, &v19[v16], v19),
                unsigned __int8 v24 = v87,
                v36 >= 1))
          {
            unsigned __int8 v24 = &v81[v19 - (unsigned char *)__base];
          }
          *(void *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
          unint64_t v18 = v19;
          goto LABEL_42;
        }
        uint64_t v19 = v23;
        size_t i = v94;
        unint64_t v9 = v81;
      }
      do
      {
        unsigned __int8 v24 = &v9[&v18[v14] - (unsigned char *)__base];
        *(void *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) = v24;
        if (v15)
        {
          uint64_t v25 = 0;
          uint64_t v26 = &v18[i];
          do
          {
            char v27 = v18[v25];
            v18[v25] = v26[v25];
            v26[v25++] = v27;
          }
          while (i != v25);
          v18 += v16 + v25;
        }
        v18 += v14;
        uint64_t v17 = v24;
      }
      while (v18 < v19);
LABEL_42:
      v15 ^= 1u;
      uint64_t v17 = v24;
      BOOL v13 = (char *)__base + v11;
      if (v18 >= v93) {
        goto LABEL_43;
      }
    }
  }
  insertionsort_0((uint64_t)__base, __nel, i, (uint64_t)__compar);
  *(void *)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) = &v9[v77];
LABEL_43:
  int v37 = &v9[v77];
  if (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) != &v9[v77])
  {
    BOOL v92 = 0;
    uint64_t v90 = (__base | i) & 3;
    uint64_t v38 = (char *)__compar + 16;
    uint64_t v85 = -(uint64_t)i;
    int v39 = (char *)__base;
    while (1)
    {
      long long v40 = v9;
      unint64_t v9 = v39;
      if (v40 != v37) {
        break;
      }
LABEL_142:
      int v37 = &v9[v77];
      int v39 = v40;
      if (*(char **)((unint64_t)(v9 + 7) & 0xFFFFFFFFFFFFFFF8) == &v9[v77]) {
        goto LABEL_145;
      }
    }
    int v41 = v40;
    int v42 = v39;
    uint64_t v43 = v40;
    unsigned int v80 = v37;
    BOOL v82 = v39;
    int v79 = v40;
    while (1)
    {
      int v44 = *(char **)((unint64_t)(v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v45 = v37;
      if (v44 != v37) {
        uint64_t v45 = *(char **)((unint64_t)(v44 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v46 = v44 - v40;
      uint64_t v47 = &v9[v44 - v40];
      unint64_t v83 = v45;
      uint64_t v84 = v42;
      uint64_t v48 = v45 - v40;
      BOOL v49 = &v9[v45 - v40];
      BOOL v50 = v44 - v40 < v45 - v40;
      BOOL v51 = v42 < v47;
      BOOL v52 = v42 < v47 && v46 < v48;
      int v53 = v47;
      if (v52) {
        break;
      }
LABEL_125:
      if (v50)
      {
        int v41 = v83;
        if (v90)
        {
          unint64_t v9 = v82;
          long long v40 = v79;
          do
          {
            char v73 = *v53++;
            *v43++ = v73;
          }
          while (v53 < v49);
        }
        else
        {
          unint64_t v9 = v82;
          long long v40 = v79;
          do
          {
            int v75 = *(_DWORD *)v53;
            v53 += 4;
            *(_DWORD *)uint64_t v43 = v75;
            v43 += 4;
          }
          while (v53 < v49);
        }
      }
      else if (v51)
      {
        if (v90)
        {
          unint64_t v9 = v82;
          int v41 = v83;
          long long v40 = v79;
          do
          {
            char v74 = *v42++;
            *v43++ = v74;
          }
          while (v42 < v47);
        }
        else
        {
          unint64_t v9 = v82;
          int v41 = v83;
          long long v40 = v79;
          do
          {
            int v76 = *(_DWORD *)v42;
            v42 += 4;
            *(_DWORD *)uint64_t v43 = v76;
            v43 += 4;
          }
          while (v42 < v47);
        }
      }
      else
      {
        unint64_t v9 = v82;
        int v41 = v83;
        long long v40 = v79;
      }
      *(void *)((unint64_t)(v84 + 7) & 0xFFFFFFFFFFFFFFF8) = v49;
      int v42 = v49;
      int v37 = v80;
      if (v41 == v80) {
        goto LABEL_142;
      }
    }
    uint64_t v86 = v49;
    unint64_t v88 = (unint64_t)v47;
    while (1)
    {
      int v54 = v38;
      int v55 = (*((uint64_t (**)(void *, char *, char *))__compar + 2))(__compar, v42, v53);
      if (v55 >= 1) {
        int v56 = 0;
      }
      else {
        int v56 = -1;
      }
      int v95 = v56;
      if (v55 >= 1) {
        int v57 = v49;
      }
      else {
        int v57 = v47;
      }
      if (v55 >= 1) {
        int v58 = v53;
      }
      else {
        int v58 = v42;
      }
      if (v55 >= 1) {
        uint64_t v59 = v42;
      }
      else {
        uint64_t v59 = v53;
      }
      size_t v60 = v59;
      if (v92)
      {
LABEL_68:
        char v61 = &v58[i];
        if (&v58[i] >= v57)
        {
LABEL_88:
          long long v65 = &v57[v85];
          if (&v57[v85] <= v58)
          {
            int v58 = v57;
          }
          else
          {
            int v66 = (*((uint64_t (**)(void *, char *, char *))__compar + 2))(__compar, v60, &v57[v85]);
            uint64_t v59 = v60;
            if (v66 > v95) {
              char v67 = v57;
            }
            else {
              char v67 = &v57[v85];
            }
            if (v66 <= v95) {
              long long v65 = v58;
            }
            int v58 = v67;
          }
          if (v58 > &v65[i])
          {
            do
            {
              if ((*((int (**)(void *, char *, char *))__compar + 2))(__compar, v60, &v65[(((v58 - v65) / i) >> 1) * i]) > v95)v65 += (((v58 - v65) / i) >> 1) * i; {
              else
              }
                int v58 = &v65[(((v58 - v65) / i) >> 1) * i];
            }
            while (v58 > &v65[i]);
            uint64_t v59 = v60;
          }
          BOOL v92 = 1;
LABEL_103:
          uint64_t v38 = v54;
          BOOL v49 = v86;
          goto LABEL_104;
        }
        for (int j = (*((uint64_t (**)(void *))__compar + 2))(__compar);
              j > v95;
              int j = (*((uint64_t (**)(void *))__compar + 2))(__compar))
        {
          int v58 = v61;
          v61 += 2 * i;
          if (v61 >= v57)
          {
            size_t i = v94;
            uint64_t v59 = v60;
            goto LABEL_88;
          }
          i *= 2;
        }
        BOOL v92 = i != v94;
        if (i > v94)
        {
          do
          {
            size_t v64 = i >> 1;
            if ((*((int (**)(void *, char *, char *))__compar + 2))(__compar, v60, &v58[i >> 1]) > v95) {
              v58 += i >> 1;
            }
            else {
              char v61 = &v58[i >> 1];
            }
            i >>= 1;
          }
          while (v64 > v94);
        }
        int v58 = v61;
        size_t i = v94;
        uint64_t v38 = (char *)__compar + 16;
      }
      else
      {
        uint64_t v63 = 6;
        while (1)
        {
          v58 += i;
          if (v58 >= v57)
          {
            BOOL v92 = 0;
            goto LABEL_103;
          }
          if ((*((int (**)(void *))__compar + 2))(__compar) <= v95) {
            break;
          }
          --v63;
          uint64_t v59 = v60;
          if (!v63) {
            goto LABEL_68;
          }
        }
        BOOL v92 = 0;
        uint64_t v38 = v54;
      }
      BOOL v49 = v86;
      uint64_t v59 = v60;
LABEL_104:
      if (v59 == v42)
      {
        if (v90)
        {
          do
          {
            char v71 = *v53++;
            *v43++ = v71;
          }
          while (v53 < v58);
          for (uint64_t k = 0; k != i; ++k)
            v43[k] = v42[k];
        }
        else
        {
          do
          {
            int v72 = *(_DWORD *)v53;
            v53 += 4;
            *(_DWORD *)uint64_t v43 = v72;
            v43 += 4;
          }
          while (v53 < v58);
          for (uint64_t k = 0; k != i; k += 4)
            *(_DWORD *)&v43[k] = *(_DWORD *)&v42[k];
        }
        v42 += k;
      }
      else
      {
        if (v90)
        {
          do
          {
            char v68 = *v42++;
            *v43++ = v68;
          }
          while (v42 < v58);
          for (uint64_t k = 0; k != i; ++k)
            v43[k] = v53[k];
        }
        else
        {
          do
          {
            int v70 = *(_DWORD *)v42;
            v42 += 4;
            *(_DWORD *)uint64_t v43 = v70;
            v43 += 4;
          }
          while (v42 < v58);
          for (uint64_t k = 0; k != i; k += 4)
            *(_DWORD *)&v43[k] = *(_DWORD *)&v53[k];
        }
        v53 += k;
      }
      v43 += k;
      uint64_t v47 = (char *)v88;
      BOOL v50 = v53 < v49;
      BOOL v51 = (unint64_t)v42 < v88;
      if ((unint64_t)v42 >= v88 || v53 >= v49) {
        goto LABEL_125;
      }
    }
  }
  long long v40 = (char *)__base;
LABEL_145:
  if (v9 == __base)
  {
    j__mkostemp((char *)__base, (int)v40);
    unint64_t v9 = v40;
  }
  free(v9);
  return 0;
}

uint64_t insertionsort(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t, unint64_t))
{
  uint64_t v4 = a2 - 1;
  if (a2 != 1)
  {
    unint64_t v7 = result;
    uint64_t v8 = -a3;
    unint64_t v9 = result;
    do
    {
      unint64_t v10 = v9;
      v9 += a3;
      if (v9 > v7)
      {
        unint64_t v11 = v9;
        do
        {
          unint64_t v12 = v11 + v8;
          uint64_t result = a4(v11 + v8, v11);
          if ((int)result < 1) {
            break;
          }
          uint64_t v13 = 0;
          do
          {
            char v14 = *(unsigned char *)(v10 + v13);
            *(unsigned char *)(v10 + v13) = *(unsigned char *)(v11 + v13);
            *(unsigned char *)(v11 + v13++) = v14;
          }
          while (a3 != v13);
          v10 += v8;
          v11 += v8;
        }
        while (v12 > v7);
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t insertionsort_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - 1;
  if (a2 != 1)
  {
    unint64_t v7 = result;
    uint64_t v8 = -a3;
    unint64_t v9 = result;
    do
    {
      unint64_t v10 = v9;
      v9 += a3;
      if (v9 > v7)
      {
        unint64_t v11 = v9;
        do
        {
          unint64_t v12 = v11 + v8;
          uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a4 + 16))(a4, v11 + v8, v11);
          if ((int)result < 1) {
            break;
          }
          uint64_t v13 = 0;
          do
          {
            char v14 = *(unsigned char *)(v10 + v13);
            *(unsigned char *)(v10 + v13) = *(unsigned char *)(v11 + v13);
            *(unsigned char *)(v11 + v13++) = v14;
          }
          while (a3 != v13);
          v10 += v8;
          v11 += v8;
        }
        while (v12 > v7);
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t atoll(const char *a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtoll_l(a1, 0, 10, v3);
}

uint64_t strtoq(const char *__str, char **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return strtoll_l(__str, __endptr, __base, v5);
}

uint64_t (*backtrace_set_pcs_func(uint64_t (*result)(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)))(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  if (result) {
    uint64_t v1 = result;
  }
  else {
    uint64_t v1 = _thread_stack_pcs;
  }
  backtrace_get_pcs_func = v1;
  return result;
}

int inet_aton(const char *a1, in_addr *a2)
{
  return _inet_aton_check((unsigned __int8 *)a1, a2, 0);
}

void *__fts_open(void *a1, uint64_t a2, size_t a3)
{
  uint64_t v3 = (void *)a2;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 2) != 0) {
    *(_DWORD *)(a2 + 64) = v5 | 4;
  }
  uint64_t v6 = (char *)*a1;
  if (!*a1) {
    goto LABEL_9;
  }
  unint64_t v7 = 0;
  uint64_t v8 = a1 + 1;
  unint64_t v9 = (char *)*a1;
  do
  {
    unint64_t v10 = j__strsignal_r((int)v9, (char *)a2, a3);
    if (v10 > v7) {
      unint64_t v7 = v10;
    }
    uint64_t v11 = *v8++;
    LODWORD(v9) = v11;
  }
  while (v11);
  if (v7 + 1 >= 0x401)
  {
    unint64_t v13 = 0;
    char v14 = a1 + 1;
    do
    {
      unint64_t v15 = j__strsignal_r((int)v6, (char *)a2, a3);
      if (v15 > v13) {
        unint64_t v13 = v15;
      }
      uint64_t v16 = *v14++;
      LODWORD(v6) = v16;
    }
    while (v16);
    int v12 = v13 + 1;
  }
  else
  {
LABEL_9:
    int v12 = 1024;
  }
  if (fts_palloc((uint64_t)v3, v12)) {
    goto LABEL_50;
  }
  uint64_t v17 = fts_alloc((uint64_t)v3, "", 0);
  if (!v17)
  {
LABEL_49:
    free((void *)v3[4]);
LABEL_50:
    free(v3);
    return 0;
  }
  unsigned int v20 = v17;
  *((_WORD *)v17 + 43) = -1;
  BOOL v21 = (char *)*a1;
  if (*a1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = a1 + 1;
    uint64_t v26 = (char *)*a1;
    while (1)
    {
      uint64_t v27 = j__strsignal_r((int)v26, v18, v19);
      unint64_t v28 = fts_alloc((uint64_t)v3, v26, v27);
      if (!v28) {
        break;
      }
      uint64_t v29 = v28;
      *((_WORD *)v28 + 43) = 0;
      *((void *)v28 + 1) = v20;
      *((void *)v28 + 5) = v28 + 26;
      if ((v3[8] & 0x400) != 0) {
        int v30 = -1;
      }
      else {
        int v30 = v3[8] & 1;
      }
      int v31 = fts_stat2((uint64_t)v3, (uint64_t)v28, v30, -1, 0);
      if (v31 == 5) {
        __int16 v32 = 1;
      }
      else {
        __int16 v32 = v31;
      }
      *((_WORD *)v29 + 44) = v32;
      if (v3[7])
      {
        *((void *)v29 + 2) = v24;
        uint64_t v24 = (uint64_t)v29;
      }
      else
      {
        *((void *)v29 + 2) = 0;
        if (v24) {
          *((void *)v23 + 2) = v29;
        }
        else {
          uint64_t v24 = (uint64_t)v29;
        }
        uint64_t v23 = v29;
      }
      uint64_t v26 = (char *)v25[v22++];
      if (!v26)
      {
        if (v3[7] && v22 != 1) {
          uint64_t v24 = fts_sort((uint64_t)v3, v24, v22);
        }
        goto LABEL_37;
      }
    }
LABEL_46:
    if (v24)
    {
      do
      {
        uint64_t v36 = *(void *)(v24 + 16);
        fts_free((_DWORD *)v24);
        uint64_t v24 = v36;
      }
      while (v36);
    }
    fts_free(v20);
    goto LABEL_49;
  }
  uint64_t v24 = 0;
LABEL_37:
  uint64_t v33 = fts_alloc((uint64_t)v3, "", 0);
  void *v3 = v33;
  if (!v33) {
    goto LABEL_46;
  }
  *((void *)v33 + 2) = v24;
  *((_WORD *)v33 + 44) = 9;
  int v34 = *((_DWORD *)v3 + 16);
  if ((v34 & 4) == 0)
  {
    int v35 = open_NOCANCEL();
    *((_DWORD *)v3 + 10) = v35;
    int v34 = *((_DWORD *)v3 + 16);
    if (v35 < 0)
    {
      v34 |= 4u;
      *((_DWORD *)v3 + 16) = v34;
    }
  }
  if ((v34 & 4) == 0 && getenv("FTS_USE_THREAD_FCHDIR")) {
    *((_DWORD *)v3 + 16) = v34 | 0x400;
  }
  if (!v21) {
    fts_free(v20);
  }
  return v3;
}

uint64_t fts_palloc(uint64_t a1, int a2)
{
  size_t v3 = (a2 + *(_DWORD *)(a1 + 44) + 256);
  *(_DWORD *)(a1 + 44) = v3;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3 < 0xFFFF)
  {
    int v5 = malloc_type_realloc(v4, v3, 0x1F6B1213uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t result = 0;
      *(void *)(a1 + 32) = v6;
      return result;
    }
    free(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    free(v4);
    *(void *)(a1 + 32) = 0;
    *__error() = 63;
  }
  return 1;
}

uint64_t fts_build(uint64_t a1, int a2)
{
  uint64_t v92 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v4 = *(void *)a1;
  int v5 = *(const char **)(*(void *)a1 + 40);
  *(_OWORD *)dirp = 0u;
  long long v79 = 0u;
  *(_OWORD *)unsigned int v80 = 0u;
  *(_OWORD *)uint64_t v81 = 0u;
  unsigned int v6 = *(_DWORD *)(a1 + 64);
  int v7 = (v6 >> 3) & 1;
  BYTE1(v81[1]) = (v6 & 8) != 0;
  HIBYTE(v81[1]) = (v6 & 0x20) != 0;
  BYTE2(v81[1]) = HIBYTE(v81[1]);
  v81[0] = open_NOCANCEL();
  if (v81[0] != -1)
  {
    v80[0] = malloc_type_malloc(0x8000uLL, 0x48B28C96uLL);
    if (!v80[0]) {
      goto LABEL_11;
    }
    LOWORD(dirp[1]) = 5;
    if (v7) {
      int v8 = -2113929205;
    }
    else {
      int v8 = -2113430005;
    }
    if (v7) {
      int v9 = 1;
    }
    else {
      int v9 = 557;
    }
    HIDWORD(dirp[1]) = v8;
    DWORD2(v79) = v9;
    if (advance_directory((uint64_t)dirp))
    {
LABEL_13:
      if (a2 == 2)
      {
        BOOL v70 = 0;
        int v71 = 0;
        int v77 = 0;
      }
      else
      {
        int v10 = *(_DWORD *)(a1 + 64);
        if ((v10 & 0x800) != 0)
        {
          int v11 = *(_DWORD *)(a1 + 64) & 0x10 ^ 0x50;
        }
        else if ((v10 & 8) != 0)
        {
          if ((v10 & 0x10) != 0) {
            int v11 = 48;
          }
          else {
            int v11 = 16;
          }
        }
        else
        {
          int v11 = 32;
        }
        int v71 = v11;
        BOOL v70 = a2 == 3;
        if (dirp[0]) {
          int v13 = dirfd(dirp[0]);
        }
        else {
          int v13 = v81[0];
        }
        if (!fts_safe_changedir(a1, v4, v13, 0))
        {
          int v77 = 0;
          char v72 = 0;
LABEL_32:
          __int16 v14 = *(_WORD *)(v4 + 86);
          unsigned int v15 = *(unsigned __int16 *)(v4 + 64);
          if (!v14 && v15 == 1) {
            unsigned int v15 = **(unsigned __int8 **)(v4 + 48) != 47;
          }
          if ((*(unsigned char *)(a1 + 64) & 4) != 0)
          {
            uint64_t v16 = (unsigned char *)(*(void *)(a1 + 32) + v15);
            *uint64_t v16 = 47;
            path = v16 + 1;
            __int16 v14 = *(_WORD *)(v4 + 86);
          }
          else
          {
            path = 0;
          }
          uint64_t v12 = 0;
          unsigned int v17 = 0;
          unint64_t v18 = 0;
          int v74 = 0;
          uint64_t v19 = v15 + 1;
          int v20 = *(_DWORD *)(a1 + 44) - v19;
          __int16 v76 = v14 + 1;
          unsigned int v73 = v15 + 2;
          while (1)
          {
            if (dirp[0])
            {
              BOOL v21 = readdir(dirp[0]);
              if (!v21) {
                goto LABEL_128;
              }
              d_name = v21->d_name;
              d_namleuint64_t n = v21->d_namlen;
              *(void *)&long long v82 = v21->d_name;
              *((void *)&v82 + 1) = d_namlen;
              LODWORD(v92) = v21->d_type;
              goto LABEL_83;
            }
            if (v81[0] == -1) {
              goto LABEL_128;
            }
            if (BYTE2(v81[1])) {
              break;
            }
            if (HIBYTE(v81[1]))
            {
              HIBYTE(v81[1]) = 0;
              d_name = "..";
              *(void *)&long long v82 = "..";
              *((void *)&v82 + 1) = 2;
              LODWORD(v92) = 4;
              LODWORD(d_namlen) = 2;
              goto LABEL_83;
            }
            int v24 = v81[3];
            if (v81[3] == v81[2])
            {
              if (LOBYTE(v81[1]) || !advance_directory((uint64_t)dirp) || LOBYTE(v81[1]))
              {
LABEL_128:
                close_directory((uint64_t)dirp);
                if (v74)
                {
                  uint64_t v58 = *(void *)(a1 + 32);
                  for (size_t i = *(void **)(a1 + 8); i; size_t i = (void *)i[2])
                  {
                    size_t v60 = (void *)i[5];
                    if (v60 != i + 13) {
                      i[5] = (char *)v60 + v58 - i[6];
                    }
                    i[6] = v58;
                  }
                  if ((*(__int16 *)(v12 + 86) & 0x80000000) == 0)
                  {
                    char v61 = (void *)v12;
                    do
                    {
                      int v62 = (void *)v61[5];
                      if (v62 != v61 + 13) {
                        v61[5] = (char *)v62 + v58 - v61[6];
                      }
                      v61[6] = v58;
                      uint64_t v63 = v61[2];
                      if (!v63) {
                        uint64_t v63 = v61[1];
                      }
                      char v61 = (void *)v63;
                    }
                    while ((*(__int16 *)(v63 + 86) & 0x80000000) == 0);
                  }
                }
                if ((*(unsigned char *)(a1 + 64) & 4) != 0)
                {
                  BOOL v64 = v19 == *(_DWORD *)(a1 + 44) || v17 == 0;
                  uint64_t v65 = v64;
                  path[-v65] = 0;
                }
                if (v72)
                {
LABEL_149:
                  if (!v17)
                  {
                    if (!v70) {
                      return 0;
                    }
                    uint64_t v12 = 0;
                    *(_WORD *)(v4 + 88) = 6;
                    return v12;
                  }
                }
                else if (a2 == 1 || !v17)
                {
                  if (*(_WORD *)(v4 + 86))
                  {
                    if (!fts_safe_changedir(a1, v4, -1, "..")) {
                      goto LABEL_149;
                    }
                  }
                  else if ((*(unsigned char *)(a1 + 64) & 4) != 0 || !fts_fchdir(a1, *(_DWORD *)(a1 + 40)))
                  {
                    goto LABEL_149;
                  }
                  uint64_t v12 = 0;
                  *(_WORD *)(v4 + 88) = 7;
                  *(_DWORD *)(a1 + 64) |= 0x200u;
                  return v12;
                }
                if (*(void *)(a1 + 56) && v17 >= 2) {
                  return fts_sort(a1, v12, v17);
                }
                return v12;
              }
              int v24 = v81[3];
            }
            uint64_t v92 = 0;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            uint64_t v25 = (unsigned int *)v80[1];
            int v26 = v24 + 1;
            v81[3] = v26;
            if (BYTE1(v81[1]))
            {
              uint64_t v27 = (unsigned int *)((char *)v80[1] + *(unsigned int *)v80[1]);
              v80[1] = v27;
              if (v26 != v81[2] && (char *)v27 + *v27 > (char *)v80[0] + 0x8000) {
                fts_build_cold_1();
              }
              uint64_t v28 = v25[7];
              if (!v28) {
                fts_build_cold_1();
              }
              d_name = (char *)v25 + (int)v25[6] + 24;
              LODWORD(d_namlen) = v28 - 1;
              *(void *)&long long v82 = d_name;
              *((void *)&v82 + 1) = (v28 - 1);
              if (&d_name[v28] > (char *)v80[0] + 0x8000) {
                fts_build_cold_1();
              }
              uint64_t v29 = v25;
              uint64_t v25 = 0;
            }
            else
            {
              int v30 = (unsigned int *)((char *)v80[1] + *(unsigned int *)v80[1]);
              v80[1] = v30;
              if (v26 != v81[2] && (char *)v30 + *v30 > (char *)v80[0] + 0x8000) {
                fts_build_cold_1();
              }
              uint64_t v31 = v25[7];
              if (!v31) {
                fts_build_cold_1();
              }
              d_name = (char *)v25 + (int)v25[6] + 24;
              LODWORD(d_namlen) = v31 - 1;
              *(void *)&long long v82 = d_name;
              *((void *)&v82 + 1) = (v31 - 1);
              if (&d_name[v31] > (char *)v80[0] + 0x8000) {
                fts_build_cold_1();
              }
              uint64_t v29 = 0;
            }
            if (!BYTE1(v81[1])) {
              uint64_t v29 = v25;
            }
            int v32 = v29[9] - 1;
            int v33 = 4;
            __int16 v34 = 0x8000;
            int v35 = 8;
            switch(v32)
            {
              case 0:
                goto LABEL_73;
              case 1:
                goto LABEL_68;
              case 2:
                __int16 v34 = 24576;
                int v35 = 6;
                goto LABEL_73;
              case 3:
                __int16 v34 = 0x2000;
                int v35 = 2;
                goto LABEL_73;
              case 4:
                __int16 v34 = -24576;
                int v35 = 10;
                goto LABEL_73;
              case 5:
                __int16 v34 = -16384;
                int v35 = 12;
                goto LABEL_73;
              case 6:
                __int16 v34 = 4096;
                int v35 = 1;
LABEL_73:
                LODWORD(v92) = v35;
                if (BYTE1(v81[1])) {
                  goto LABEL_83;
                }
                BYTE4(v92) = 1;
                int v36 = DWORD2(v79);
                if ((v35 | 4) != 6)
                {
                  v25[36] = 0;
                  v36 &= ~0x20u;
                }
                unsigned int v37 = HIDWORD(dirp[1]);
                unsigned int v38 = v25[1];
                if ((v38 & 0x200) == 0)
                {
                  unsigned int v37 = HIDWORD(dirp[1]) & 0xFFFFFDFF;
                  *((void *)v25 + 5) = 0;
                  *((void *)v25 + 6) = 0;
                }
                if ((v37 & ~v38) != 0 || (v36 & ~v25[4]) != 0) {
                  goto LABEL_83;
                }
                LODWORD(v83) = v25[8];
                WORD3(v83) = v25[32];
                *((void *)&v83 + 1) = *((void *)v25 + 15);
                *(void *)&long long v84 = *((void *)v25 + 13);
                unsigned int v39 = v25[35];
                DWORD2(v84) = v25[36];
                long long v85 = *(_OWORD *)(v25 + 22);
                long long v86 = *(_OWORD *)(v25 + 14);
                long long v87 = *(_OWORD *)(v25 + 18);
                long long v40 = *(_OWORD *)(v25 + 10);
                *(void *)&long long v89 = *(void *)(v25 + 37);
                long long v88 = v40;
                LODWORD(v90) = v39;
                DWORD1(v90) = v25[29];
                WORD2(v83) = v25[28] & 0xFFF | v34;
                uint64_t v41 = *(void *)(v25 + 33);
                BOOL v64 = (v41 & 0x1FF) == 0;
                uint64_t v42 = v41 / 512;
                if (!v64) {
                  ++v42;
                }
                *((void *)&v89 + 1) = v42;
                break;
              default:
                int v33 = 0;
LABEL_68:
                LODWORD(v92) = v33;
                goto LABEL_83;
            }
LABEL_84:
            if ((*(unsigned char *)(a1 + 64) & 0x20) != 0 || *d_name != 46 || d_name[1] && (d_name[1] != 46 || d_name[2]))
            {
              uint64_t v43 = fts_alloc(a1, d_name, (int)d_namlen);
              if (!v43) {
                goto LABEL_162;
              }
              uint64_t v44 = *((void *)&v82 + 1);
              if (*((void *)&v82 + 1) >= (unint64_t)v20)
              {
                uint64_t v45 = *(void *)(a1 + 32);
                if (fts_palloc(a1, v73 + DWORD2(v82)))
                {
LABEL_162:
                  int v66 = *__error();
                  fts_free(v43);
                  if (v12)
                  {
                    do
                    {
                      uint64_t v67 = *(void *)(v12 + 16);
                      fts_free((_DWORD *)v12);
                      uint64_t v12 = v67;
                    }
                    while (v67);
                  }
                  close_directory((uint64_t)dirp);
                  *(_WORD *)(v4 + 88) = 7;
                  *(_DWORD *)(a1 + 64) |= 0x200u;
                  uint64_t v12 = 0;
                  *__error() = v66;
                  return v12;
                }
                uint64_t v46 = *(void *)(a1 + 32);
                if (v45 != v46)
                {
                  uint64_t v47 = (char *)(v46 + v19);
                  uint64_t v48 = path;
                  if ((*(unsigned char *)(a1 + 64) & 4) != 0) {
                    uint64_t v48 = v47;
                  }
                  path = v48;
                  int v74 = 1;
                }
                int v20 = *(_DWORD *)(a1 + 44) - v19;
                uint64_t v44 = *((void *)&v82 + 1);
              }
              unint64_t v49 = v44 + v19;
              if (v49 >= 0xFFFF)
              {
                fts_free(v43);
                if (v12)
                {
                  do
                  {
                    uint64_t v68 = *(void *)(v12 + 16);
                    fts_free((_DWORD *)v12);
                    uint64_t v12 = v68;
                  }
                  while (v68);
                }
                close_directory((uint64_t)dirp);
                *(_WORD *)(v4 + 88) = 7;
                *(_DWORD *)(a1 + 64) |= 0x200u;
                uint64_t v12 = 0;
                *__error() = 63;
                return v12;
              }
              *((_WORD *)v43 + 43) = v76;
              *((void *)v43 + 1) = *(void *)a1;
              *((_WORD *)v43 + 32) = v49;
              if (v77)
              {
                if (a2 == 2)
                {
                  __int16 v50 = 11;
                }
                else
                {
                  v43[14] = v77;
                  __int16 v50 = 10;
                }
                *((_WORD *)v43 + 44) = v50;
                int v56 = *(_DWORD **)(v4 + 40);
              }
              else
              {
                __int16 v51 = 3;
                switch(v92 | v71)
                {
                  case 0x10u:
                  case 0x14u:
                  case 0x1Au:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                  case 0x24u:
                  case 0x26u:
                  case 0x28u:
                  case 0x2Au:
                  case 0x2Cu:
                  case 0x2Eu:
                  case 0x30u:
                  case 0x34u:
                  case 0x40u:
                  case 0x44u:
                  case 0x50u:
                  case 0x54u:
                  case 0x5Au:
                    if ((*(unsigned char *)(a1 + 64) & 4) != 0)
                    {
                      *((void *)v43 + 5) = *((void *)v43 + 6);
                      j__mkostemp(path, v43 + 104);
                      if (dirp[0]) {
                        int v55 = dirfd(dirp[0]);
                      }
                      else {
                        int v55 = v81[0];
                      }
                      if (BYTE4(v92)) {
                        BOOL v52 = &v83;
                      }
                      else {
                        BOOL v52 = 0;
                      }
                      uint64_t v53 = a1;
                      uint64_t v54 = (uint64_t)v43;
                    }
                    else
                    {
                      *((void *)v43 + 5) = v43 + 26;
                      if (BYTE4(v92)) {
                        BOOL v52 = &v83;
                      }
                      else {
                        BOOL v52 = 0;
                      }
                      uint64_t v53 = a1;
                      uint64_t v54 = (uint64_t)v43;
                      int v55 = -1;
                    }
                    *((_WORD *)v43 + 44) = fts_stat2(v53, v54, 0, v55, (uint64_t)v52);
                    goto LABEL_118;
                  case 0x41u:
                  case 0x42u:
                  case 0x46u:
                  case 0x4Cu:
                  case 0x51u:
                  case 0x52u:
                  case 0x56u:
                  case 0x5Cu:
                    goto LABEL_125;
                  case 0x48u:
                  case 0x58u:
                    __int16 v51 = 8;
                    goto LABEL_125;
                  case 0x4Au:
                    __int16 v51 = 12;
                    goto LABEL_125;
                  case 0x4Eu:
                  case 0x5Eu:
                    __int16 v51 = 14;
                    goto LABEL_125;
                  default:
                    __int16 v51 = 11;
LABEL_125:
                    *((_WORD *)v43 + 44) = v51;
                    if ((*(unsigned char *)(a1 + 64) & 4) != 0) {
                      int v56 = (_DWORD *)*((void *)v43 + 6);
                    }
                    else {
                      int v56 = v43 + 26;
                    }
                    break;
                }
              }
              *((void *)v43 + 5) = v56;
LABEL_118:
              *((void *)v43 + 2) = 0;
              int v57 = v43;
              if (v12)
              {
                *((void *)v18 + 2) = v43;
                int v57 = (_DWORD *)v12;
              }
              ++v17;
              uint64_t v12 = (uint64_t)v57;
              unint64_t v18 = v43;
            }
          }
          BYTE2(v81[1]) = 0;
          *(void *)&long long v82 = ".";
          *((void *)&v82 + 1) = 1;
          LODWORD(v92) = 4;
          LODWORD(d_namlen) = 1;
          d_name = ".";
LABEL_83:
          BYTE4(v92) = 0;
          goto LABEL_84;
        }
        if (a2 == 3) {
          *(_DWORD *)(v4 + 56) = *__error();
        }
        *(_WORD *)(v4 + 90) |= 1u;
        int v77 = *__error();
        close_directory((uint64_t)dirp);
      }
      char v72 = 1;
      goto LABEL_32;
    }
    if (v81[0] != -1) {
LABEL_11:
    }
      close_NOCANCEL();
  }
  v81[0] = -1;
  free(v80[0]);
  v80[0] = 0;
  dirp[0] = opendir(v5);
  if (dirp[0]) {
    goto LABEL_13;
  }
  if (a2 != 3) {
    return 0;
  }
  *(_WORD *)(v4 + 88) = 4;
  uint64_t v12 = 0;
  *(_DWORD *)(v4 + 56) = *__error();
  return v12;
}

_DWORD *fts_alloc(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 112;
  if ((*(_DWORD *)(a1 + 64) & 8) == 0) {
    uint64_t v6 = 263;
  }
  int v7 = malloc_type_calloc(1uLL, v6 + a3, 0x24C28641uLL);
  int v8 = v7;
  if (v7)
  {
    v7[15] = -1;
    *((void *)v7 + 6) = *(void *)(a1 + 32);
    *((_WORD *)v7 + 33) = a3;
    *((_WORD *)v7 + 46) = 3;
    if ((*(unsigned char *)(a1 + 64) & 8) == 0) {
      *((void *)v7 + 12) = ((unint64_t)v7 + a3 + 113) & 0xFFFFFFFFFFFFFFF8;
    }
    j__mkdtempat_np(v7 + 104, a2);
  }
  return v8;
}

uint64_t fts_stat2(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  if (a4 == -1)
  {
    int v8 = *(const char **)(a2 + 40);
    int v7 = -2;
  }
  else
  {
    int v7 = a4;
    int v8 = (const char *)(a2 + 104);
  }
  if ((*(_DWORD *)(a1 + 64) & 8) != 0) {
    int v9 = (stat *)v23;
  }
  else {
    int v9 = *(stat **)(a2 + 96);
  }
  int v10 = *(_DWORD *)(a1 + 64) & 2;
  memset(v23, 0, sizeof(v23));
  if (!a3 && a5 && (!v10 || (~*(unsigned __int16 *)(a5 + 4) & 0xA000) != 0))
  {
    *(_OWORD *)&v9->dev_t st_dev = *(_OWORD *)a5;
    long long v13 = *(_OWORD *)(a5 + 16);
    timespec v14 = *(timespec *)(a5 + 32);
    timespec v15 = *(timespec *)(a5 + 64);
    v9->st_mtimespec = *(timespec *)(a5 + 48);
    v9->st_ctimespec = v15;
    *(_OWORD *)&v9->st_uid = v13;
    v9->st_atimespec = v14;
    timespec v16 = *(timespec *)(a5 + 80);
    long long v17 = *(_OWORD *)(a5 + 96);
    long long v18 = *(_OWORD *)(a5 + 128);
    *(_OWORD *)&v9->st_blkunint64_t size = *(_OWORD *)(a5 + 112);
    *(_OWORD *)v9->st_qspare = v18;
    v9->st_birthtimespec = v16;
    *(_OWORD *)&v9->st_unint64_t size = v17;
  }
  else
  {
    if (!(v10 | a3)) {
      goto LABEL_43;
    }
    if (fstatat(v7, v8, v9, 0))
    {
      int v11 = *__error();
      if (!fstatat(v7, v8, v9, 32))
      {
        if (v11 == 62) {
          *(_DWORD *)(a2 + 56) = 62;
        }
        *__error() = 0;
        return 13;
      }
LABEL_22:
      *(_DWORD *)(a2 + 56) = v11;
      *(_OWORD *)&v9->st_blkunint64_t size = 0u;
      *(_OWORD *)v9->st_qspare = 0u;
      v9->st_birthtimespec = 0u;
      *(_OWORD *)&v9->st_unint64_t size = 0u;
      v9->st_mtimespec = 0u;
      v9->st_ctimespec = 0u;
      *(_OWORD *)&v9->st_uid = 0u;
      v9->st_atimespec = 0u;
      uint64_t result = 10;
      *(_OWORD *)&v9->dev_t st_dev = 0u;
      return result;
    }
    if (a3 == -1 && (v9->st_mode & 0xF000) != 0x4000)
    {
LABEL_43:
      if (fstatat(v7, v8, v9, 32))
      {
        int v11 = *__error();
        goto LABEL_22;
      }
    }
  }
  int v19 = v9->st_mode & 0xF000;
  if (v19 == 40960) {
    return 12;
  }
  if (v19 == 0x8000) {
    return 8;
  }
  if (v19 != 0x4000) {
    return 3;
  }
  dev_t st_dev = v9->st_dev;
  *(_DWORD *)(a2 + 80) = v9->st_dev;
  __darwin_ino64_t st_ino = v9->st_ino;
  *(void *)(a2 + 72) = st_ino;
  *(_WORD *)(a2 + 84) = v9->st_nlink;
  if (*(unsigned char *)(a2 + 104) == 46 && (!*(unsigned char *)(a2 + 105) || *(unsigned char *)(a2 + 105) == 46 && !*(unsigned char *)(a2 + 106))) {
    return 5;
  }
  for (uint64_t i = *(void *)(a2 + 8); ; uint64_t i = *(void *)(i + 8))
  {
    if (*(__int16 *)(i + 86) < 0) {
      return 1;
    }
    if (st_ino == *(void *)(i + 72) && st_dev == *(_DWORD *)(i + 80)) {
      break;
    }
  }
  *(void *)a2 = i;
  return 2;
}

uint64_t advance_directory(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 52)) {
    return 1;
  }
  int v2 = *(_DWORD *)(a1 + 48);
  if (v2 == -1) {
    fts_build_cold_1();
  }
  int v3 = getattrlistbulk(v2, (void *)(a1 + 8), *(void **)(a1 + 32), 0x8000uLL, 8uLL);
  *(_DWORD *)(a1 + 56) = v3;
  if (v3 != -1)
  {
    if (!v3) {
      *(unsigned char *)(a1 + 52) = 1;
    }
    *(_DWORD *)(a1 + 60) = 0;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
    return 1;
  }
  int v5 = *__error();
  close_NOCANCEL();
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v6 = __error();
  uint64_t result = 0;
  *uint64_t v6 = v5;
  return result;
}

uint64_t fts_safe_changedir(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  if ((*(unsigned char *)(a1 + 64) & 4) != 0) {
    return 0;
  }
  int v8 = a3;
  if (a3 < 0)
  {
    int v8 = open_NOCANCEL();
    if (v8 < 0) {
      return 0xFFFFFFFFLL;
    }
  }
  memset(&v19, 0, sizeof(v19));
  if (fstat(v8, &v19)) {
    goto LABEL_5;
  }
  if (a3 == -1)
  {
    if (j__strncasecmp_l(a4, "..", v9, v10) || (*(_WORD *)(a2 + 90) & 8) == 0) {
      goto LABEL_23;
    }
    close_NOCANCEL();
    int v8 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = -1;
    __int16 v17 = *(_WORD *)(a2 + 90) & 0xFFF7;
    goto LABEL_22;
  }
  memset(&v18, 0, sizeof(v18));
  int v14 = open_NOCANCEL();
  if ((v14 & 0x80000000) == 0)
  {
    int v15 = v14;
    if (fstat(v14, &v18))
    {
      int v16 = *__error();
      close_NOCANCEL();
      *__error() = v16;
      goto LABEL_5;
    }
    if (v19.st_dev == v18.st_dev)
    {
      close_NOCANCEL();
LABEL_23:
      uint64_t v11 = fts_fchdir(a1, v8);
      goto LABEL_6;
    }
    *(_DWORD *)(a2 + 60) = v15;
    __int16 v17 = *(_WORD *)(a2 + 90) | 8;
LABEL_22:
    *(_WORD *)(a2 + 90) = v17;
    goto LABEL_23;
  }
LABEL_5:
  uint64_t v11 = 0xFFFFFFFFLL;
LABEL_6:
  int v12 = *__error();
  if (a3 < 0) {
    close_NOCANCEL();
  }
  *__error() = v12;
  return v11;
}

void close_directory(uint64_t a1)
{
  int v2 = *(DIR **)a1;
  if (v2)
  {
    closedir(v2);
    *(void *)a1 = 0;
  }
  if (*(_DWORD *)(a1 + 48) != -1)
  {
    close_NOCANCEL();
    *(_DWORD *)(a1 + 48) = -1;
  }
  free(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

int mbtowc_l(__int32 *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  if (a2)
  {
    unint64_t v6 = (*(uint64_t (**)(__int32 *, const char *, size_t, uint64_t))(*((void *)v5 + 166) + 72))(a1, a2, a3, (uint64_t)v5 + 656);
    if (v6 > 0xFFFFFFFFFFFFFFFDLL) {
      LODWORD(v6) = -1;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    *((_OWORD *)v5 + 47) = 0u;
    *((_OWORD *)v5 + 48) = 0u;
    *((_OWORD *)v5 + 45) = 0u;
    *((_OWORD *)v5 + 46) = 0u;
    *((_OWORD *)v5 + 43) = 0u;
    *((_OWORD *)v5 + 44) = 0u;
    *((_OWORD *)v5 + 41) = 0u;
    *((_OWORD *)v5 + 42) = 0u;
  }
  return v6;
}

char *__cdecl basename(char *a1)
{
  int v2 = (char *)basename_bname;
  if (basename_bname
    || (uint64_t result = (char *)malloc_type_malloc(0x400uLL, 0x820A11DBuLL),
        int v2 = result,
        (basename_bname = (uint64_t)result) != 0))
  {
    return basename_r(a1, v2);
  }
  return result;
}

const char *inet_ntop6(uint64_t a1, const char *a2, unsigned int a3)
{
  int v4 = 0;
  uint64_t v5 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  do
  {
    *((_DWORD *)&v35 + (v5 >> 1)) |= *(unsigned __int8 *)(a1 + v5) << (~(_BYTE)v4 & 8);
    ++v5;
    v4 += 8;
  }
  while (v5 != 16);
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = -1;
  int v10 = -1;
  do
  {
    BOOL v12 = v10 == -1 || v7 > v8;
    BOOL v13 = !v12;
    if (v12) {
      int v14 = v9;
    }
    else {
      int v14 = v10;
    }
    if (v13) {
      int v15 = v8;
    }
    else {
      int v15 = v7;
    }
    BOOL v16 = v9 == -1;
    if (v9 == -1)
    {
      int v14 = v10;
      int v15 = v8;
      int v9 = v6;
    }
    if (v16) {
      size_t v17 = 1;
    }
    else {
      size_t v17 = (v7 + 1);
    }
    if (*((_DWORD *)&v35 + v6))
    {
      int v10 = v14;
      int v8 = v15;
      int v9 = -1;
    }
    else
    {
      int v7 = v17;
    }
    ++v6;
  }
  while (v6 != 8);
  uint64_t v18 = 0;
  BOOL v20 = v10 == -1 || v7 > v8;
  BOOL v21 = !v20;
  if (v20) {
    unsigned int v22 = v9;
  }
  else {
    unsigned int v22 = v10;
  }
  if (v21) {
    int v7 = v8;
  }
  if (v9 == -1)
  {
    unsigned int v22 = v10;
    int v23 = v8;
  }
  else
  {
    int v23 = v7;
  }
  if (v23 >= 2 || v22 == -1) {
    uint64_t v25 = v22;
  }
  else {
    uint64_t v25 = 0xFFFFFFFFLL;
  }
  uint64_t v26 = (int)v25 + v23;
  uint64_t v27 = __little;
  while (1)
  {
    if (v25 != -1 && v18 >= (int)v25 && v18 < v26)
    {
      if (v25 == v18) {
        *v27++ = 58;
      }
      goto LABEL_61;
    }
    if (v18)
    {
      *v27++ = 58;
      if (!v25 && v18 == 6 && (v23 == 6 || v23 == 7 && HIDWORD(v36) != 1 || v23 == 5 && DWORD1(v36) == 0xFFFF)) {
        break;
      }
    }
    v27 += sprintf(v27, "%x", *((_DWORD *)&v35 + v18));
LABEL_61:
    if (++v18 == 8) {
      goto LABEL_65;
    }
  }
  int v34 = *(_DWORD *)(a1 + 12);
  if (!inet_ntop4((unsigned __int8 *)&v34, (uint64_t)v27, __little - v27 + 46)) {
    goto LABEL_69;
  }
  v27 += j__strsignal_r((int)v27, v28, v29);
LABEL_65:
  if (v25 != -1 && v26 == 8) {
    *v27++ = 58;
  }
  char *v27 = 0;
  if (v27 - __little + 1 > a3)
  {
LABEL_69:
    int v30 = 0;
    *__error() = 28;
    return v30;
  }
  int v30 = a2;
  j__strnstr(a2, __little, v17);
  return v30;
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 / a2;
  uint64_t v3 = (a1 >= 0) & (a1 % a2 < 0);
  if (a1 >= 0 && a1 % a2 < 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = a1 % a2 - v4;
  uint64_t v6 = v2 + v3;
  result.reuint64_t m = v5;
  result.quot = v6;
  return result;
}

char *__cdecl asctime(const tm *a1)
{
  return asctime_r(a1, buf_asctime);
}

double atof_l(const char *a1, locale_t a2)
{
  return strtod_l(a1, 0, a2);
}

uint64_t lrand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  return ((unint64_t)_rand48_seed >> 17) & 0x7FFFFFFF;
}

void gdtoa_freelist_free(void **a1)
{
  if (a1)
  {
    int v2 = 0;
    uint64_t v3 = a1;
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        do
        {
          uint64_t v5 = (void *)*v4;
          free(v4);
          uint64_t v4 = v5;
        }
        while (v5);
      }
      ++v3;
      ++v2;
    }
    while (v2 != 10);
    free(a1);
  }
}

char *__cdecl strsignal(int __sig)
{
  if (pthread_once(&sig_init_once, (void (*)(void))sig_keycreate)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = sig_keycreated == 0;
  }
  if (v2) {
    goto LABEL_6;
  }
  uint64_t v5 = pthread_getspecific(sig_key);
  uint64_t v3 = v5;
  if (!v5)
  {
    uint64_t v3 = malloc_type_malloc(0x800uLL, 0x100004077774924uLL);
    if (!v3) {
      goto LABEL_7;
    }
    if (!pthread_setspecific(sig_key, v3)) {
      goto LABEL_9;
    }
    free(v3);
LABEL_6:
    uint64_t v3 = 0;
LABEL_7:
    int v4 = 12;
LABEL_11:
    *__error() = v4;
    return (char *)v3;
  }
LABEL_9:
  if (strsignal_r(__sig, (char *)v3, 0x800uLL))
  {
    int v4 = 22;
    goto LABEL_11;
  }
  return (char *)v3;
}

int strsignal_r(int __sig, char *__strsignalbuf, size_t __buflen)
{
  uint64_t v16 = 0;
  v17[0] = 0;
  *(void *)((char *)v17 + 7) = 0;
  if (__sig >= 0) {
    unsigned int v6 = __sig;
  }
  else {
    unsigned int v6 = -__sig;
  }
  int v7 = &v16;
  do
  {
    *(unsigned char *)int v7 = a0123456789[v6 % 0xA];
    int v7 = (uint64_t *)((char *)v7 + 1);
    BOOL v8 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v8);
  if (__sig < 0)
  {
    *(unsigned char *)int v7 = 45;
    int v7 = (uint64_t *)((char *)v7 + 1);
  }
  int v9 = j__strsignal_r((int)&v16, __strsignalbuf, __buflen) + 2;
  if ((__sig - 1) > 0x1E)
  {
    unint64_t v10 = MEMORY[0x18C122F90](__strsignalbuf, "Unknown signal", __buflen);
    size_t v11 = __buflen - v9;
    int result = 22;
  }
  else
  {
    unint64_t v10 = MEMORY[0x18C122F90](__strsignalbuf, sys_siglist[__sig], __buflen);
    size_t v11 = __buflen - v9;
    if (v10 >= v11) {
      int result = 34;
    }
    else {
      int result = 0;
    }
  }
  if (v10 < v11)
  {
    BOOL v13 = &__strsignalbuf[v10];
    *(_WORD *)BOOL v13 = 8250;
    int v14 = v13 + 2;
    do
    {
      char v15 = *((unsigned char *)v7 - 1);
      int v7 = (uint64_t *)((char *)v7 - 1);
      *v14++ = v15;
    }
    while (v7 > &v16);
    unsigned char *v14 = 0;
  }
  return result;
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  if (a3 < 5)
  {
    int result = 0;
    a2->fts_instunsigned int r = a3;
  }
  else
  {
    *__error() = 22;
    return 1;
  }
  return result;
}

size_t confstr(int a1, char *a2, size_t a3)
{
  size_t v17 = 0;
  if (a1 >= 0x10000)
  {
    if (a1 != 0x10000)
    {
      if (a1 == 65537)
      {
        MEMORY[0x1F41887A8](*(void *)&a1, a2);
        uint64_t v5 = v16;
        MEMORY[0x18C122530](v16, 1024);
        if (__dirhelper_func && __dirhelper_func(1, v16, 1024)) {
          goto LABEL_5;
        }
        int v10 = *__error();
        size_t v11 = getenv("TMPDIR");
        if (v11)
        {
          uint64_t v5 = v11;
          if (!access(v11, 2)) {
            goto LABEL_5;
          }
        }
        uint64_t v5 = "/var/tmp/";
        if (!access("/var/tmp/", 2)) {
          goto LABEL_5;
        }
        BOOL v12 = __error();
        if (v10 != 12)
        {
LABEL_37:
          size_t result = 0;
          int v13 = 5;
          goto LABEL_38;
        }
        size_t result = 0;
        int v13 = 12;
      }
      else
      {
        if (a1 == 65538)
        {
          MEMORY[0x1F41887A8](*(void *)&a1, a2);
          uint64_t v5 = v16;
          MEMORY[0x18C122530](v16, 1024);
          int v7 = (uint64_t (*)(uint64_t, unsigned char *, uint64_t))__dirhelper_func;
          if (__dirhelper_func)
          {
            uint64_t v8 = 2;
            goto LABEL_25;
          }
          goto LABEL_26;
        }
LABEL_35:
        BOOL v12 = __error();
        size_t result = 0;
        int v13 = 22;
      }
LABEL_38:
      *BOOL v12 = v13;
      return result;
    }
    MEMORY[0x1F41887A8](*(void *)&a1, a2);
    uint64_t v5 = v16;
    MEMORY[0x18C122530](v16, 1024);
    int v7 = (uint64_t (*)(uint64_t, unsigned char *, uint64_t))__dirhelper_func;
    if (__dirhelper_func)
    {
      uint64_t v8 = 0;
LABEL_25:
      if (!v7(v8, v16, 1024)) {
        goto LABEL_26;
      }
LABEL_5:
      if (a2 && a3) {
        MEMORY[0x18C122F90](a2, v5, a3);
      }
      return j__strsignal_r((int)v5, a2, a3) + 1;
    }
LABEL_26:
    if (*__error() == 12) {
      return 0;
    }
    BOOL v12 = __error();
    goto LABEL_37;
  }
  uint64_t v5 = "";
  switch(a1)
  {
    case 1:
      *(void *)uint64_t v18 = 0x100000008;
      if (sysctl(v18, 2u, 0, &v17, 0, 0) == -1) {
        return 0;
      }
      if (!a2 || !a3) {
        goto LABEL_21;
      }
      size_t result = (size_t)malloc_type_malloc(v17, 0x63E3F025uLL);
      if (result)
      {
        int v9 = (void *)result;
        if (sysctl(v18, 2u, (void *)result, &v17, 0, 0) == -1)
        {
          int v14 = *__error();
          free(v9);
          char v15 = __error();
          size_t result = 0;
          *char v15 = v14;
        }
        else
        {
          j__strtod(a2, (char **)v9);
          a2[a3 - 1] = 0;
          free(v9);
LABEL_21:
          size_t result = v17;
        }
      }
      break;
    case 2:
    case 3:
    case 4:
    case 7:
    case 10:
    case 13:
    case 20:
    case 21:
    case 22:
    case 23:
    case 26:
    case 27:
    case 30:
    case 31:
    case 34:
    case 35:
      goto LABEL_5;
    case 5:
    case 6:
    case 24:
    case 25:
      uint64_t v5 = "-W 32";
      goto LABEL_5;
    case 8:
    case 9:
    case 11:
    case 12:
    case 28:
    case 29:
    case 32:
    case 33:
      uint64_t v5 = "-W 64";
      goto LABEL_5;
    case 14:
      uint64_t v5 = "_POSIX_V6_LP64_OFF64";
      goto LABEL_5;
    default:
      goto LABEL_35;
  }
  return result;
}

unint64_t settzname()
{
  host_t v0 = (_DWORD *)lclptr;
  tzname[0] = (char *)&wildabbr;
  off_1EB1CC478 = &wildabbr;
  daylight = 0;
  unint64_t result = _st_set_timezone(0);
  __darwin_altzone = 0;
  if (!v0)
  {
    tzname[0] = (char *)&gmt;
    off_1EB1CC478 = &gmt;
    return result;
  }
  int v4 = v0[1];
  if (v4)
  {
    BOOL v5 = __OFSUB__(v4, 1);
    int v6 = v4 - 1;
    if (v6 < 0 == v5)
    {
      int v7 = (const char *)(v0 + 2406);
      goto LABEL_8;
    }
  }
  else if (v0[2] == 1)
  {
    int v6 = 0;
    int v7 = "";
LABEL_8:
    int v8 = 7;
    uint64_t v9 = v6;
    while (1)
    {
      int v10 = v7[v9];
      if ((v8 & 4) != 0 && v0[6 * v7[v9] + 2708])
      {
        v8 &= ~4u;
        daylight = 1;
      }
      size_t v11 = &v0[6 * v10 + 2706];
      if (v0[6 * v10 + 2708])
      {
        if ((v8 & 2) != 0)
        {
          v8 &= ~2u;
          off_1EB1CC478 = (_UNKNOWN *)((char *)v0 + v0[6 * v10 + 2709] + 16968);
          __darwin_altzone = -*v11;
        }
      }
      else if (v8)
      {
        v8 &= ~1u;
        tzname[0] = (char *)v0 + v0[6 * v10 + 2709] + 16968;
        unint64_t result = _st_set_timezone(-*v11);
      }
      if (!v9) {
        break;
      }
      BOOL v12 = v9-- < 1;
      if (v12 || !v8) {
        goto LABEL_25;
      }
    }
    if ((v8 & 2) != 0) {
      __darwin_altzone = -*v11;
    }
    if (v8) {
      unint64_t result = _st_set_timezone(-*v11);
    }
  }
LABEL_25:
  uint64_t v13 = (int)v0[3];
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    char v15 = v0 + 4242;
    do
    {
      unint64_t result = j__mkdirx_np("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 :+-._", (filesec_t)*((char *)v15 + v14));
      if (!result) {
        *((unsigned char *)v15 + v14) = 95;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  int v16 = v0[2];
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v0 + 2709;
    stat v19 = v0 + 4242;
    do
    {
      uint64_t v20 = *v18;
      v18 += 6;
      BOOL v21 = (char *)v19 + v20;
      unint64_t result = j__strsignal_r(v19 + v20, v2, v3);
      if (result >= 0x100)
      {
        unint64_t result = j__strncasecmp_l(v21, "Local time zone must be set--see zic manual page", v3, v22);
        if (result)
        {
          *((unsigned char *)v21 + 255) = 0;
          int v16 = v0[2];
        }
      }
      ++v17;
    }
    while (v17 < v16);
  }
  return result;
}

uint64_t _st_set_timezone(uint64_t result)
{
  int timezone = result;
  return result;
}

double drand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  unint64_t v0 = _rand48_seed & 0xFFFFFFFFFFFFLL;
  if ((_rand48_seed & 0xFFFFFFFFFFFFLL) == 0) {
    return 0.0;
  }
  uint64_t v1 = 32 * v0;
  unint64_t v2 = v0 >> 47;
  unint64_t v3 = __clz(v1 & 0xFFFFFFFFFFFE0);
  uint64_t v4 = v1 << (v3 - 11);
  uint64_t v5 = 0x4090000000000000 - (v3 << 52);
  BOOL v6 = v2 == 0;
  if (v2) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 0x3FE0000000000000;
  }
  *(void *)&double result = v8 | v7 & 0x800FFFFFFFFFFFE0;
  return result;
}

uint64_t sig_keycreate()
{
  uint64_t result = pthread_key_create((pthread_key_t *)&sig_key, MEMORY[0x1E4F14C90]);
  sig_keycreated = result == 0;
  return result;
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  if ((a3 & 0xFFFFFFEC) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    return MEMORY[0x1F40CFE78](*(void *)&a1, a2, *(void *)&a3, 0);
  }
}

void srand(unsigned int a1)
{
  next = a1;
}

uint64_t __heapsort_r(unsigned char *a1, unint64_t a2, size_t size, uint64_t a4, uint64_t (*a5)(uint64_t, char *, char *))
{
  if (a2 < 2) {
    return 0;
  }
  if (!size)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  unint64_t v9 = a2;
  size_t v11 = malloc_type_malloc(size, 0xC8BE12E2uLL);
  if (!v11) {
    return 0xFFFFFFFFLL;
  }
  BOOL v12 = v11;
  uint64_t v48 = a4;
  uint64_t v44 = a1;
  uint64_t v13 = &a1[-size];
  unint64_t v14 = v9 >> 1;
  unint64_t v46 = v9;
  do
  {
    unint64_t v45 = v14;
    unint64_t v15 = 2 * v14;
    if (2 * v14 <= v9)
    {
      unint64_t v16 = v14;
      do
      {
        uint64_t v17 = &v13[v15 * size];
        if (v15 >= v9)
        {
          unint64_t v20 = v15;
          uint64_t v18 = v48;
        }
        else
        {
          uint64_t v18 = v48;
          int v19 = a5(v48, &v13[v15 * size], &v17[size]);
          unint64_t v20 = v15 | (v19 >> 31);
          if (v19 < 0) {
            v17 += size;
          }
        }
        BOOL v21 = &v13[v16 * size];
        int v22 = a5(v18, v17, v21);
        unint64_t v9 = v46;
        if (v22 < 1) {
          break;
        }
        size_t v23 = size;
        do
        {
          char v24 = *v21;
          *v21++ = *v17;
          *v17++ = v24;
          --v23;
        }
        while (v23);
        unint64_t v15 = 2 * v20;
        unint64_t v16 = v20;
      }
      while (2 * v20 <= v46);
    }
    unint64_t v14 = v45 - 1;
  }
  while (v45 != 1);
  uint64_t i = v44;
  uint64_t v26 = &v44[size * (v9 - 1)];
  uint64_t v47 = a5;
  do
  {
    uint64_t v27 = 0;
    do
    {
      v12[v27] = v26[v27];
      ++v27;
    }
    while (size != v27);
    uint64_t v28 = 0;
    do
    {
      v26[v28] = i[v28];
      ++v28;
    }
    while (size != v28);
    --v9;
    size_t v29 = i;
    if (v9 >= 2)
    {
      unint64_t v30 = 2;
      uint64_t v31 = 1;
      do
      {
        int v32 = &v13[v30 * size];
        if (v30 >= v9)
        {
          unint64_t v34 = v30;
        }
        else
        {
          int v33 = v47(v48, &v13[v30 * size], &v32[size]);
          unint64_t v34 = v30 | (v33 >> 31);
          if (v33 < 0) {
            v32 += size;
          }
        }
        long long v35 = &v13[v31 * size];
        size_t v36 = size;
        do
        {
          char v37 = *v32++;
          *v35++ = v37;
          --v36;
        }
        while (v36);
        unint64_t v30 = 2 * v34;
        uint64_t v31 = v34;
      }
      while (2 * v34 <= v9);
      size_t v29 = &v13[v34 * size];
      unsigned int v38 = v29;
      for (i = v44; v34 != 1; size_t v29 = &v13[v34 * size])
      {
        size_t v29 = v38;
        v34 >>= 1;
        unsigned int v38 = &v13[v34 * size];
        int v39 = v47(v48, v12, v38);
        size_t v40 = size;
        uint64_t v41 = v38;
        if (v39 < 0) {
          break;
        }
        do
        {
          char v42 = *v41++;
          *v29++ = v42;
          --v40;
        }
        while (v40);
      }
    }
    uint64_t v43 = 0;
    do
    {
      v29[v43] = v12[v43];
      ++v43;
    }
    while (size != v43);
    v26 -= size;
  }
  while (v9 > 1);
  free(v12);
  return 0;
}

char *__private_getcwd(char *a1, uint64_t a2, int a3)
{
  memset(&v44, 0, sizeof(v44));
  if (a1)
  {
    if (a2 == 1)
    {
      uint64_t v4 = __error();
      uint64_t v5 = 0;
      int v6 = 34;
      goto LABEL_9;
    }
    if (!a2)
    {
      uint64_t v4 = __error();
      uint64_t v5 = 0;
      int v6 = 22;
LABEL_9:
      *uint64_t v4 = v6;
      return v5;
    }
    uint64_t v5 = a1;
    size_t v9 = 0;
    uint64_t v8 = &a1[a2];
    if (!a3)
    {
LABEL_14:
      *(v8 - 1) = 0;
      int v10 = v8 - 1;
      if (stat("/", &v44))
      {
LABEL_15:
        size_t v11 = 0;
        goto LABEL_16;
      }
      dev_t st_dev = v44.st_dev;
      __darwin_ino64_t st_ino = v44.st_ino;
      size_t v11 = 0;
      char v16 = 0;
      *__error() = 0;
      dev_t v42 = st_dev;
      __darwin_ino64_t v41 = st_ino;
LABEL_23:
      char v43 = v16;
      if (v11)
      {
        int v17 = dirfd(v11);
        if (fstat(v17, &v44)) {
          goto LABEL_16;
        }
        __darwin_ino64_t v18 = v44.st_ino;
        dev_t v19 = v44.st_dev;
        if (st_dev == v44.st_dev && st_ino == v44.st_ino)
        {
          *(v10 - 1) = 47;
          j__mkostemp(v5, v10 - 1);
          closedir(v11);
          return v5;
        }
        dirfd(v11);
        int v21 = openat_NOCANCEL();
        if (v21 == -1) {
          goto LABEL_16;
        }
        int v22 = v21;
        closedir(v11);
      }
      else
      {
        if (lstat(".", &v44)) {
          goto LABEL_15;
        }
        __darwin_ino64_t v18 = v44.st_ino;
        dev_t v19 = v44.st_dev;
        if (st_dev == v44.st_dev && st_ino == v44.st_ino)
        {
          *(v10 - 1) = 47;
          j__mkostemp(v5, v10 - 1);
          return v5;
        }
        int v24 = openat_NOCANCEL();
        if (v24 == -1) {
          goto LABEL_15;
        }
        int v22 = v24;
      }
      uint64_t v25 = fdopendir(v22);
      size_t v11 = v25;
      if (!v25 || (int v26 = dirfd(v25), fstat(v26, &v44)))
      {
        close_NOCANCEL();
      }
      else
      {
        dev_t v27 = v44.st_dev;
        uint64_t v28 = readdir(v11);
        size_t v29 = v28;
        if (v27 == v19)
        {
          if (v28)
          {
            int v30 = 0;
            while (v29->d_ino != v18)
            {
              if ((v29->d_name[0] != 46 || v29->d_name[1] && (v29->d_name[1] != 46 || v29->d_name[2]))
                && v29->d_type == 4)
              {
                int v31 = dirfd(v11);
                if (fstatat(v31, v29->d_name, &v44, 32))
                {
                  if (!v30) {
                    int v30 = *__error();
                  }
                  *__error() = 0;
                }
                else if (v44.st_dev == v19 && v44.st_ino == v18)
                {
                  break;
                }
              }
              size_t v29 = readdir(v11);
              if (!v29) {
                goto LABEL_88;
              }
            }
LABEL_73:
            if (v43) {
              uint64_t v34 = 2;
            }
            else {
              uint64_t v34 = 1;
            }
            int64_t v35 = v10 - v5;
            d_namleuint64_t n = v29->d_namlen;
            for (int64_t i = v34 + d_namlen; ; int64_t i = v34 + d_namlen)
            {
              if (v35 >= i)
              {
                dev_t st_dev = v42;
                if (v43)
                {
                  *--int v10 = 47;
                  d_namleuint64_t n = v29->d_namlen;
                }
                v10 -= d_namlen;
                j__mkostemp(v10, v29 + 21);
                char v16 = 1;
                __darwin_ino64_t st_ino = v41;
                goto LABEL_23;
              }
              if (!v9) {
                break;
              }
              v9 *= 2;
              unsigned int v38 = (char *)reallocf(v5, v9);
              uint64_t v5 = v38;
              if (!v38) {
                goto LABEL_16;
              }
              int64_t v39 = v8 - v10;
              uint64_t v8 = &v38[v9];
              int v10 = &v38[v9 - v39];
              j__mkostemp(v10, v38 + v35);
              int64_t v35 = v10 - v5;
              d_namleuint64_t n = v29->d_namlen;
            }
            *__error() = 34;
            int v12 = *__error();
            if (v11) {
              goto LABEL_19;
            }
            goto LABEL_20;
          }
        }
        else if (v28)
        {
          int v30 = 0;
          while (1)
          {
            if (v29->d_name[0] != 46 || v29->d_name[1] && (v29->d_name[1] != 46 || v29->d_name[2]))
            {
              int v32 = dirfd(v11);
              if (fstatat(v32, v29->d_name, &v44, 32))
              {
                if (!v30) {
                  int v30 = *__error();
                }
                *__error() = 0;
              }
              else if (v44.st_dev == v19 && v44.st_ino == v18)
              {
                goto LABEL_73;
              }
            }
            size_t v29 = readdir(v11);
            if (!v29) {
              goto LABEL_88;
            }
          }
        }
        int v30 = 0;
LABEL_88:
        if (!*__error())
        {
          if (v30) {
            int v40 = v30;
          }
          else {
            int v40 = 2;
          }
          *__error() = v40;
        }
      }
LABEL_16:
      int v12 = *__error();
      if (v9) {
        free(v5);
      }
      if (v11) {
LABEL_19:
      }
        closedir(v11);
LABEL_20:
      uint64_t v5 = 0;
      *__error() = v12;
      return v5;
    }
LABEL_11:
    if (!__getcwd(v5, v8 - v5)) {
      return v5;
    }
    if (*__error() == 34) {
      return 0;
    }
    goto LABEL_14;
  }
  uint64_t v7 = (char *)malloc_type_malloc(0x400uLL, 0xAA37A9FFuLL);
  uint64_t v5 = v7;
  if (v7)
  {
    uint64_t v8 = v7 + 1024;
    size_t v9 = 1024;
    if (!a3) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  return v5;
}

uint64_t __getcwd(const char *a1, unint64_t a2)
{
  int v4 = open_NOCANCEL();
  if (v4 < 0) {
    return 0xFFFFFFFFLL;
  }
  memset(&v20, 0, sizeof(v20));
  memset(&v19, 0, sizeof(v19));
  uint64_t v5 = fstat(v4, &v20);
  if ((v5 & 0x80000000) != 0)
  {
    int v11 = *__error();
    close_NOCANCEL();
    *__error() = v11;
    return 0xFFFFFFFFLL;
  }
  if (!v20.st_dev || !v20.st_ino)
  {
    close_NOCANCEL();
    goto LABEL_11;
  }
  uint64_t v7 = a1;
  if (a2 <= 0x3FF)
  {
    MEMORY[0x1F41887A8](v5, v6);
    uint64_t v7 = v18;
    MEMORY[0x18C122530](v18, 1024);
  }
  uint64_t v8 = fcntl_NOCANCEL();
  if (!v8)
  {
    close_NOCANCEL();
    if (stat(v7, &v19) < 0) {
      return 0xFFFFFFFFLL;
    }
    if (v20.st_dev == v19.st_dev && v20.st_ino == v19.st_ino)
    {
      if (a2 > 0x3FF) {
        return 0;
      }
      if (j__strsignal_r((int)v7, v15, v16) < a2)
      {
        j__strnstr(a1, v7, v17);
        return 0;
      }
      int v12 = __error();
      int v13 = 34;
      goto LABEL_12;
    }
LABEL_11:
    int v12 = __error();
    int v13 = 22;
LABEL_12:
    *int v12 = v13;
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = v8;
  int v10 = *__error();
  close_NOCANCEL();
  *__error() = v10;
  return v9;
}

int freelocale(locale_t a1)
{
  if (a1 == (locale_t)-1)
  {
    BOOL v1 = 0;
  }
  else
  {
    if (!a1)
    {
LABEL_20:
      *__error() = 22;
      return -1;
    }
    BOOL v1 = *((void *)a1 + 163) != 0x786C6F63616C6530;
  }
  if (a1 == (locale_t)__c_locale || (locale_t)((char *)a1 + 1) == 0 || a1 == (locale_t)&__global_locale || v1) {
    goto LABEL_20;
  }
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    uint64_t v5 = (void (*)(void))*((void *)a1 + 1);
    if (v5) {
      v5();
    }
  }
  return 0;
}

void destruct_locale(void *a1)
{
  for (uint64_t i = 165; i != 171; ++i)
  {
    uint64_t v3 = a1[i];
    if (v3)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
      {
        int v4 = *(void (**)(void))(v3 + 8);
        if (v4) {
          v4();
        }
      }
    }
  }
  uint64_t v5 = a1[171];
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      uint64_t v6 = *(void (**)(void))(v5 + 8);
      if (v6) {
        v6();
      }
    }
  }

  free(a1);
}

filesec_t filesec_dup(filesec_t a1)
{
  unint64_t v2 = malloc_type_malloc(0x40uLL, 0x108004043B192EBuLL);
  uint64_t v3 = v2;
  if (v2)
  {
    long long v4 = *(_OWORD *)a1;
    long long v5 = *((_OWORD *)a1 + 1);
    long long v6 = *((_OWORD *)a1 + 3);
    int v2[2] = *((_OWORD *)a1 + 2);
    v2[3] = v6;
    *unint64_t v2 = v4;
    v2[1] = v5;
    if ((*(unsigned char *)a1 & 0x20) != 0 && *((void *)a1 + 7) != 1)
    {
      uint64_t v7 = (char *)malloc_type_malloc(*((void *)a1 + 6), 0x30B50D75uLL);
      v3[7] = v7;
      if (v7)
      {
        j__mkostemp(v7, *((void *)a1 + 7));
      }
      else
      {
        free(v3);
        return 0;
      }
    }
  }
  return (filesec_t)v3;
}

char *getoffset(unsigned __int8 *a1, uint64_t *a2)
{
  int v3 = *a1;
  BOOL v4 = v3 == 43 || v3 == 45;
  uint64_t result = getsecs((char *)&a1[v4], a2);
  if (v3 == 45 && result != 0) {
    *a2 = -*a2;
  }
  return result;
}

char *getsecs(char *result, uint64_t *a2)
{
  if (result)
  {
    if ((*result - 48) <= 9)
    {
      int v2 = 0;
      char v3 = *result;
      while (1)
      {
        int v2 = 10 * v2 + v3 - 48;
        if (v2 > 167) {
          break;
        }
        int v4 = *++result;
        char v3 = v4;
        if ((v4 - 48) >= 0xA)
        {
          if (v2 < 0) {
            return 0;
          }
          uint64_t v5 = 3600 * v2;
          *a2 = v5;
          if (*result == 58)
          {
            if ((result[1] - 48) <= 9)
            {
              int v6 = 0;
              uint64_t v7 = result + 2;
              char v8 = result[1];
              while (1)
              {
                int v6 = 10 * v6 + v8 - 48;
                if (v6 > 59) {
                  break;
                }
                int v9 = *v7++;
                char v8 = v9;
                if ((v9 - 48) >= 0xA)
                {
                  if (v6 < 0) {
                    return 0;
                  }
                  uint64_t result = v7 - 1;
                  uint64_t v10 = v5 + (60 * v6);
                  *a2 = v10;
                  if (*(v7 - 1) == 58)
                  {
                    if ((*v7 - 48) <= 9)
                    {
                      int v11 = 0;
                      char v12 = *v7;
                      while (1)
                      {
                        int v11 = 10 * v11 + v12 - 48;
                        if (v11 > 60) {
                          break;
                        }
                        int v13 = *++v7;
                        char v12 = v13;
                        if ((v13 - 48) >= 0xA)
                        {
                          if (v11 < 0) {
                            return 0;
                          }
                          *a2 = v10 + v11;
                          return v7;
                        }
                      }
                    }
                    return 0;
                  }
                  return result;
                }
              }
            }
            return 0;
          }
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

int raise(int a1)
{
  int v2 = pthread_self();
  int v3 = pthread_kill(v2, a1);
  int v4 = v3;
  if (!v3) {
    return v4;
  }
  if (v3 != 45)
  {
    *__error() = v3;
    return -1;
  }
  pid_t v5 = getpid();

  return kill(v5, a1);
}

uint64_t localtime_key_init()
{
  localtime_key = 1;
  uint64_t result = pthread_key_init_np();
  localtime_key_errounsigned int r = result;
  return result;
}

char *__cdecl setlocale(int a1, const char *a2)
{
  if (a1 >= 7)
  {
    int v2 = __error();
    uint64_t result = 0;
    *int v2 = 22;
    return result;
  }
  int v4 = a2;
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB1CD000);
    uint64_t v7 = 0x20u;
    do
    {
      j__strnstr(&new_categories[v7], &current_categories[v7], v6);
      v7 += 32;
    }
    while (v7 != 224);
    if (*v4)
    {
      LODWORD(v9) = v4;
      if (!a1)
      {
        uint64_t v10 = j__strncasecmp(v4, (const char *)0x2F, v6);
        if (v10)
        {
          int v13 = (const char *)(v10 - 1);
          do
            int v14 = *((unsigned __int8 *)v13++ + 2);
          while (v14 == 47);
          if (v14)
          {
            unint64_t v15 = &word_1EB1CD1F8;
            uint64_t v16 = 1;
            uint64_t v17 = 5;
            while (1)
            {
              uint64_t v18 = v16;
              if ((int)v13 - (int)v4 >= 32) {
                break;
              }
              stat v19 = (char *)v15;
              uint64_t v20 = v17;
              MEMORY[0x18C122F90](&new_categories[32 * v16], v4, (int)v13 - (int)v4 + 1);
              int v4 = v13 - 1;
              do
              {
                int v23 = *(unsigned __int8 *)++v4;
                int v22 = v23;
              }
              while (v23 == 47);
              uint64_t v16 = v18 + 1;
              int v24 = v22;
              int v13 = v4;
              if (v22)
              {
                do
                {
                  if (v24 == 47) {
                    break;
                  }
                  int v25 = *(unsigned __int8 *)++v13;
                  int v24 = v25;
                }
                while (v25);
              }
              if (v22)
              {
                unint64_t v15 = (__int16 *)(v19 + 32);
                uint64_t v17 = v20 - 1;
                if (v18 != 6) {
                  continue;
                }
              }
              if (v18 <= 5)
              {
                do
                {
                  stat v19 = j__strnstr(v19 + 32, v19, v21);
                  --v20;
                }
                while (v20);
              }
              goto LABEL_44;
            }
          }
        }
        else if ((unint64_t)j__strsignal_r((int)v4, v11, v12) <= 0x1F)
        {
          uint64_t v34 = 0x20u;
          do
          {
            j__strnstr(&new_categories[v34], v4, v21);
            v34 += 32;
          }
          while (v34 != 224);
LABEL_44:
          char v37 = byte_1EB1CD016;
          unsigned int v38 = (atomic_uint *)off_1EB1CD048;
          if (off_1EB1CD048) {
            atomic_fetch_add((atomic_uint *volatile)off_1EB1CD048, 1u);
          }
          uint64_t v39 = 0;
          int v40 = "C";
          __darwin_ino64_t v41 = (const char *)&unk_1EB1CD108;
          while (1)
          {
            j__strnstr(v41, v40, v21);
            if (!loadlocale((int)v39 + 1, v42, v43)) {
              break;
            }
            ++v39;
            v40 += 32;
            v41 += 32;
            if (v39 == 6)
            {
              if (v38)
              {
                if (atomic_fetch_add(v38, 0xFFFFFFFF) == 1)
                {
                  stat v44 = (void (*)(atomic_uint *))*((void *)v38 + 1);
                  if (v44) {
                    v44(v38);
                  }
                }
              }
              os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1CD000);
              goto LABEL_54;
            }
          }
          int v46 = *__error();
          if ((v39 + 1) >= 2)
          {
            int v47 = 1;
            uint64_t v48 = (const char *)&unk_1EB1CD108;
            unint64_t v49 = (char *)&word_1EB1CD1F8;
            do
            {
              j__strnstr(v49, v48, v45);
              if (!loadlocale(v47, v50, v51))
              {
                *(_WORD *)unint64_t v49 = 67;
                loadlocale(v47, v52, v45);
              }
              ++v47;
              v48 += 32;
              v49 += 32;
              --v39;
            }
            while (v39);
          }
          byte_1EB1CD016 = v37;
          off_1EB1CD048 = v38;
          if (v38)
          {
            if (atomic_fetch_add(v38, 0xFFFFFFFF) == 1)
            {
              uint64_t v53 = (void (*)(atomic_uint *))*((void *)v38 + 1);
              if (v53) {
                v53(v38);
              }
            }
          }
          *__error() = v46;
          goto LABEL_30;
        }
LABEL_29:
        *__error() = 22;
LABEL_30:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1CD000);
        return 0;
      }
    }
    else
    {
      if (!a1)
      {
        uint64_t v27 = -6;
        uint64_t v28 = (const char *)&word_1EB1CD1F8;
        while (1)
        {
          locale_env = __get_locale_env((int)v27 + 7);
          if ((unint64_t)j__strsignal_r((int)locale_env, v30, v31) >= 0x20) {
            goto LABEL_29;
          }
          j__strnstr(v28, locale_env, v32);
          v28 += 32;
          if (__CFADD__(v27++, 1)) {
            goto LABEL_44;
          }
        }
      }
      int v9 = __get_locale_env(a1);
      int v4 = v9;
    }
    if ((unint64_t)j__strsignal_r((int)v9, v8, v6) >= 0x20) {
      goto LABEL_29;
    }
    j__strnstr(&new_categories[32 * a1], v4, v26);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB1CD000);
    return (char *)loadlocale(a1, v35, v36);
  }
  else if (a1)
  {
    return &current_categories[32 * a1];
  }
  else
  {
LABEL_54:
    return (char *)currentlocale();
  }
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  int v2 = a2;
  if (a1 < 0x100)
  {
    uint64_t v4 = __locale_key;
    pid_t v5 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
    if (!v5) {
      pid_t v5 = &__global_locale;
    }
    int v3 = *(_DWORD *)(*(void *)(v5[166] + 120) + 4 * a1 + 60);
  }
  else
  {
    int v3 = ___runetype(a1);
  }
  return v3 & v2;
}

unint64_t ___runetype_l(__darwin_ct_rune_t a1, locale_t a2)
{
  if (a1 < 0) {
    return 0;
  }
  locale_t v2 = (locale_t)&__c_locale;
  locale_t v3 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v3 = a2;
  }
  if (a2) {
    locale_t v2 = v3;
  }
  uint64_t v4 = *(void *)(*((void *)v2 + 166) + 120);
  unint64_t v5 = *(int *)(v4 + 3136);
  if (!v5) {
    return 0;
  }
  size_t v6 = *(_DWORD **)(v4 + 3144);
  while (1)
  {
    unint64_t v7 = v5 >> 1;
    char v8 = &v6[6 * (v5 >> 1)];
    __darwin_ct_rune_t v9 = v8[1];
    if (a1 >= *v8 && v9 >= a1) {
      break;
    }
    if (v9 < a1) {
      size_t v6 = v8 + 6;
    }
    unint64_t v11 = v5 - (v9 < a1);
    unint64_t v5 = v11 >> 1;
    if (v11 <= 1) {
      return 0;
    }
  }
  uint64_t v13 = *(void *)&v6[6 * v7 + 4];
  if (v13) {
    return *(unsigned int *)(v13 + 4 * (a1 - *v8));
  }
  else {
    return (int)v6[6 * v7 + 2];
  }
}

unint64_t ___runetype(__darwin_ct_rune_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return ___runetype_l(a1, v3);
}

void srand48(uint64_t a1)
{
  _rand48_seed = ((unint64_t)a1 << 16) | 0x330E;
  _rand48_mult = 0x5DEECE66DLL;
  _rand48_add = 11;
}

size_t rb_tree_count(size_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t random(void)
{
  if (rand_type)
  {
    unint64_t v0 = fptr;
    uint64_t v1 = rptr[0] + 1;
    unsigned int v2 = *fptr + *rptr[0];
    *fptunsigned int r = v2;
    locale_t v3 = v0 + 1;
    unsigned int v4 = v2 >> 1;
    if ((unint64_t)v1 >= end_ptr) {
      unint64_t v5 = state;
    }
    else {
      unint64_t v5 = v1;
    }
    if ((unint64_t)v3 < end_ptr) {
      uint64_t v1 = v5;
    }
    else {
      locale_t v3 = state;
    }
    fptunsigned int r = v3;
    rptr[0] = v1;
  }
  else
  {
    int v6 = *state;
    if (!*state) {
      int v6 = 123459876;
    }
    int v7 = 16807 * (v6 % 127773) - 2836 * (v6 / 127773);
    if (v7 < 0) {
      --v7;
    }
    unsigned int v4 = v7 & 0x7FFFFFFF;
    *state = v4;
  }
  return v4;
}

int vprintf(const char *a1, va_list a2)
{
  unsigned int v4 = __stdoutp;
  uint64_t v5 = __locale_key;
  int v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)&__global_locale;
  }
  return vfprintf_l(v4, v7, a1, a2);
}

int getopt_long_only(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return getopt_internal(*(uint64_t *)&a1, (uint64_t)a2, (size_t)a3, a4, a5, 5u);
}

uint64_t _signal_nobind(uint64_t a1, __sigaction_u a2)
{
  return signal__(a1, a2, 0);
}

void exit(int a1)
{
  if (__cleanup) {
    _cleanup();
  }
  __exit();
}

uint64_t __cxa_finalize_ranges(uint64_t a1, unsigned int a2)
{
  pthread_mutex_lock(&atexit_mutex);
  uint64_t v4 = __atexit;
  if (!__atexit) {
    goto LABEL_36;
  }
LABEL_2:
  while (2)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 8);
    if ((int)v5 >= 1)
    {
      do
      {
        uint64_t v6 = (v5 - 1);
        uint64_t v7 = v4 + 32 * v6;
        int v10 = *(_DWORD *)(v7 + 16);
        char v8 = (_DWORD *)(v7 + 16);
        int v9 = v10;
        if (!v10) {
          continue;
        }
        if (a2)
        {
          switch(v9)
          {
            case 1:
              uint64_t v16 = 0;
              unint64_t v17 = *(void *)(v4 + 32 * v6 + 24);
              BOOL v13 = 1;
              uint64_t v18 = (void *)(a1 + 8);
              do
              {
                unint64_t v19 = *(v18 - 1);
                if (v17 >= v19 && v17 < *v18 + v19) {
                  break;
                }
                BOOL v13 = ++v16 < (unint64_t)a2;
                v18 += 2;
              }
              while (a2 != v16);
LABEL_17:
              if (!v13) {
                continue;
              }
              break;
            case 3:
              unint64_t v20 = *(void *)(*(void *)(v4 + 32 * v6 + 24) + 16);
              uint64_t v21 = 0;
              BOOL v22 = 1;
              int v23 = (void *)(a1 + 8);
              do
              {
                unint64_t v24 = *(v23 - 1);
                if (v20 >= v24 && v20 < *v23 + v24) {
                  break;
                }
                BOOL v22 = ++v21 < (unint64_t)a2;
                v23 += 2;
              }
              while (a2 != v21);
              if (!v22) {
                continue;
              }
              break;
            case 2:
              uint64_t v11 = 0;
              unint64_t v12 = *(void *)(v4 + 32 * v6 + 40);
              BOOL v13 = 1;
              int v14 = (void *)(a1 + 8);
              do
              {
                unint64_t v15 = *(v14 - 1);
                if (v12 >= v15 && v12 < *v14 + v15) {
                  break;
                }
                BOOL v13 = ++v11 < (unint64_t)a2;
                v14 += 2;
              }
              while (a2 != v11);
              goto LABEL_17;
          }
        }
        _DWORD *v8 = 0;
        __atexit_new_registratiouint64_t n = 0;
        uint64_t v25 = pthread_mutex_unlock(&atexit_mutex);
        switch(v9)
        {
          case 1:
            (*(void (**)(uint64_t))(v4 + 32 * v6 + 24))(v25);
            break;
          case 3:
            (*(void (**)(void))(*(void *)(v4 + 32 * v6 + 24) + 16))();
            break;
          case 2:
            (*(void (**)(void))(v4 + 32 * v6 + 24))(*(void *)(v4 + 32 * v6 + 32));
            break;
        }
        pthread_mutex_lock(&atexit_mutex);
        if (__atexit_new_registration)
        {
          uint64_t v4 = __atexit;
          if (!__atexit) {
            goto LABEL_36;
          }
          goto LABEL_2;
        }
      }
      while (v5-- > 1);
    }
    uint64_t v4 = *(void *)v4;
    if (v4) {
      continue;
    }
    break;
  }
LABEL_36:

  return pthread_mutex_unlock(&atexit_mutex);
}

int __cxa_finalize(void *a1)
{
  if (a1)
  {
    v3[0] = a1;
    v3[1] = 1;
    return __cxa_finalize_ranges((uint64_t)v3, 1u);
  }
  else
  {
    return __cxa_finalize_ranges(0, 0);
  }
}

int fchmodx_np(int a1, filesec_t a2)
{
  int v3 = a1;
  return chmodx1((uint64_t)&v3, (uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t))fchmodx_syscall, a2);
}

uint64_t chmodx1(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, uint64_t, uint64_t), filesec_t a3)
{
  unsigned int v17 = -101;
  unsigned int v18 = -101;
  uint64_t v15 = 0;
  unint64_t v14 = 0;
  memset(v13, 0, 68);
  if (!a3)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  unsigned __int16 v16 = 0;
  if (filesec_get_property(a3, FILESEC_OWNER, &v18) && *__error() != 2
    || filesec_get_property(a3, FILESEC_GROUP, &v17) && *__error() != 2)
  {
    return 0xFFFFFFFFLL;
  }
  if (!filesec_get_property(a3, FILESEC_MODE, &v16))
  {
    uint64_t v6 = v16;
    goto LABEL_13;
  }
  uint64_t v6 = 0xFFFFFFFFLL;
  if (*__error() == 2)
  {
LABEL_13:
    if (!filesec_get_property(a3, FILESEC_ACL_RAW, &v14) && !filesec_get_property(a3, FILESEC_ACL_ALLOCSIZE, &v15)
      || *__error() == 2)
    {
      unint64_t v8 = v14;
      if (v14 > 1)
      {
        int v9 = 1;
        int v10 = (_OWORD *)v14;
      }
      else
      {
        int v9 = 0;
        memset((char *)&v13[2] + 4, 0, 32);
        memset((char *)v13 + 4, 0, 32);
        int v10 = v13;
        unint64_t v14 = (unint64_t)v13;
        LODWORD(v13[0]) = 19710317;
        DWORD1(v13[2]) = -1;
      }
      if (!filesec_get_property(a3, FILESEC_UUID, (char *)v10 + 4))
      {
        int v9 = 1;
        unint64_t v11 = v14;
        goto LABEL_23;
      }
      if (*__error() == 2)
      {
        unint64_t v11 = v14;
        *(void *)(v14 + 12) = 0;
        *(void *)(v11 + 4) = 0;
LABEL_23:
        if (!filesec_get_property(a3, FILESEC_GRPUUID, (void *)(v11 + 20)))
        {
          uint64_t v12 = v14;
          return a2(a1, v18, v17, v6, v12);
        }
        if (*__error() == 2)
        {
          uint64_t v12 = v14;
          *(void *)(v14 + 28) = 0;
          *(void *)(v12 + 20) = 0;
          if (!v9)
          {
            if (v8 == 1)
            {
              uint64_t v12 = 1;
              unint64_t v14 = 1;
            }
            else
            {
              uint64_t v12 = 0;
              unint64_t v14 = 0;
            }
          }
          return a2(a1, v18, v17, v6, v12);
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v6;
}

int filesec_get_property(filesec_t a1, filesec_property_t a2, void *a3)
{
  switch(a2)
  {
    case FILESEC_OWNER:
      if ((*(unsigned char *)a1 & 1) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int result = 0;
      int v6 = *((_DWORD *)a1 + 1);
      goto LABEL_13;
    case FILESEC_GROUP:
      if ((*(unsigned char *)a1 & 2) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int result = 0;
      int v6 = *((_DWORD *)a1 + 2);
LABEL_13:
      *(_DWORD *)a3 = v6;
      return result;
    case FILESEC_UUID:
      if ((*(unsigned char *)a1 & 4) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      unint64_t v8 = (const unsigned __int8 *)a1 + 12;
      goto LABEL_29;
    case FILESEC_MODE:
      if ((*(unsigned char *)a1 & 0x10) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int result = 0;
      *(_WORD *)a3 = *((_WORD *)a1 + 22);
      return result;
    case FILESEC_ACL:
      if ((*(unsigned char *)a1 & 0x20) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int v9 = (const void *)*((void *)a1 + 7);
      if (v9 == (const void *)1)
      {
        int result = 0;
        uint64_t v7 = 1;
        goto LABEL_38;
      }
      acl_t v10 = acl_copy_int_native(v9);
      *(void *)a3 = v10;
      if (v10) {
        return 0;
      }
      int v11 = *__error();
      if (!v11) {
        return 0;
      }
      goto LABEL_33;
    case FILESEC_GRPUUID:
      if ((*(unsigned char *)a1 & 8) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      unint64_t v8 = (const unsigned __int8 *)a1 + 28;
LABEL_29:
      uuid_copy((unsigned __int8 *)a3, v8);
      return 0;
    default:
      if (a2 == FILESEC_ACL_RAW)
      {
        if ((*(unsigned char *)a1 & 0x20) != 0)
        {
          if (a3)
          {
            int result = 0;
            uint64_t v7 = *((void *)a1 + 7);
            goto LABEL_38;
          }
          return 0;
        }
        goto LABEL_31;
      }
      if (a2 != FILESEC_ACL_ALLOCSIZE)
      {
        int v11 = 22;
        goto LABEL_33;
      }
      if ((*(unsigned char *)a1 & 0x20) == 0)
      {
LABEL_31:
        int v11 = 2;
LABEL_33:
        *__error() = v11;
        return -1;
      }
      if (!a3) {
        return 0;
      }
      int result = 0;
      uint64_t v7 = *((void *)a1 + 6);
LABEL_38:
      *(void *)a3 = v7;
      return result;
  }
}

uint64_t fchmodx_syscall(unsigned int *a1)
{
  return MEMORY[0x1F40CFD70](*a1);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  locale_t v3 = a3;
  char v5 = a1;
  if (a2
    && ((unint64_t)j__strsignal_r((int)a2, (char *)a2, (size_t)a3) > 0x1F
     || *a2 == 46 && (!a2[1] || a2[1] == 46 && !a2[2])
     || j__strncasecmp(a2, (const char *)0x2F, v6)))
  {
    goto LABEL_27;
  }
  int v7 = v5 & 0x3F;
  if (v7 != 63)
  {
    if ((unint64_t)v3 + 1 < 2 || *((void *)v3 + 163) == 0x786C6F63616C6530) {
      goto LABEL_11;
    }
LABEL_27:
    unint64_t v8 = 0;
    *__error() = 22;
    return v8;
  }
  locale_t v3 = (locale_t)__c_locale;
LABEL_11:
  unint64_t v8 = (_xlocale *)_duplocale((char *)v3);
  if (!v8) {
    return v8;
  }
  BOOL v9 = v7 == 63 && a2 == 0;
  BOOL v10 = v9;
  if ((v5 & 0x3F) == 0 || v10) {
    return v8;
  }
  if (a2) {
    int v11 = a2;
  }
  else {
    int v11 = (const char *)&C;
  }
  int v14 = __detect_path_locale();
  if (v14)
  {
LABEL_24:
    *__error() = v14;
LABEL_25:
    freelocale(v8);
    return 0;
  }
  if (*v11) {
    unsigned __int16 v16 = (char *)v11;
  }
  else {
    unsigned __int16 v16 = 0;
  }
  int v17 = 1;
  while (2)
  {
    if ((v17 & v7) == 0) {
      goto LABEL_108;
    }
    switch(v17)
    {
      case 1:
        if (!*v11)
        {
          locale_env = __get_locale_env(1);
          unsigned __int16 v16 = locale_env;
          if (locale_env)
          {
            if ((unint64_t)j__strsignal_r((int)locale_env, v19, v12) > 0x1F) {
              goto LABEL_131;
            }
            if (*v16 == 46)
            {
              int v21 = v16[1];
              if (v21 == 46) {
                int v21 = v16[2];
              }
              if (!v21) {
                goto LABEL_131;
              }
            }
            if (j__strncasecmp(v16, (const char *)0x2F, v20)) {
              goto LABEL_131;
            }
          }
        }
        uint64_t v22 = *((void *)v8 + 165);
        if (*(unsigned char *)(v22 + 64)) {
          int v23 = (const char *)&C;
        }
        else {
          int v23 = (const char *)(v22 + 16);
        }
        if (!j__strncasecmp_l(v16, v23, v12, v13)) {
          goto LABEL_49;
        }
        if (__collate_load_tables(v16, (uint64_t)v8, v24, v25) == -1) {
          goto LABEL_25;
        }
        uint64_t v22 = *((void *)v8 + 165);
        if (!v22) {
          goto LABEL_108;
        }
LABEL_49:
        uint64_t v26 = v22 + 16;
        goto LABEL_107;
      case 2:
        if (!*v11)
        {
          uint64_t v27 = __get_locale_env(2);
          unsigned __int16 v16 = v27;
          if (v27)
          {
            if ((unint64_t)j__strsignal_r((int)v27, v28, v12) > 0x1F) {
              goto LABEL_131;
            }
            if (*v16 == 46)
            {
              int v30 = v16[1];
              if (v30 == 46) {
                int v30 = v16[2];
              }
              if (!v30) {
                goto LABEL_131;
              }
            }
            if (j__strncasecmp(v16, (const char *)0x2F, v29)) {
              goto LABEL_131;
            }
          }
        }
        if (!j__strncasecmp_l(v16, (const char *)(*((void *)v8 + 166) + 16), v12, v13)) {
          goto LABEL_108;
        }
        int v31 = __setrunelocale(v16, (uint64_t)v8, v12, v13);
        if (v31)
        {
          int v14 = v31;
          goto LABEL_24;
        }
        uint64_t v32 = *((void *)v8 + 166);
        if (v32) {
          MEMORY[0x18C122F90](v32 + 16, v16, 32);
        }
        if (*((unsigned char *)v8 + 1318) == 1) {
          *((unsigned char *)v8 + 1318) = 0;
        }
        goto LABEL_108;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_108;
      case 4:
        if (!*v11)
        {
          int v33 = __get_locale_env(6);
          unsigned __int16 v16 = v33;
          if (v33)
          {
            if ((unint64_t)j__strsignal_r((int)v33, v34, v12) > 0x1F) {
              goto LABEL_131;
            }
            if (*v16 == 46)
            {
              int v36 = v16[1];
              if (v36 == 46) {
                int v36 = v16[2];
              }
              if (!v36) {
                goto LABEL_131;
              }
            }
            if (j__strncasecmp(v16, (const char *)0x2F, v35)) {
              goto LABEL_131;
            }
          }
        }
        if (*((unsigned char *)v8 + 1312)) {
          char v37 = *(const char **)(*((void *)v8 + 170) + 64);
        }
        else {
          char v37 = (const char *)&C;
        }
        if (j__strncasecmp_l(v16, v37, v12, v13)
          && __messages_load_locale(v16, (uint64_t)v8, v12, v13) == -1)
        {
          goto LABEL_25;
        }
        uint64_t v48 = *((void *)v8 + 170);
        if (!v48) {
          goto LABEL_108;
        }
        goto LABEL_106;
      case 8:
        if (!*v11)
        {
          unsigned int v38 = __get_locale_env(3);
          unsigned __int16 v16 = v38;
          if (v38)
          {
            if ((unint64_t)j__strsignal_r((int)v38, v39, v12) > 0x1F) {
              goto LABEL_131;
            }
            if (*v16 == 46)
            {
              int v41 = v16[1];
              if (v41 == 46) {
                int v41 = v16[2];
              }
              if (!v41) {
                goto LABEL_131;
              }
            }
            if (j__strncasecmp(v16, (const char *)0x2F, v40)) {
              goto LABEL_131;
            }
          }
        }
        if (*((unsigned char *)v8 + 1313)) {
          uint64_t v42 = *(const char **)(*((void *)v8 + 167) + 64);
        }
        else {
          uint64_t v42 = (const char *)&C;
        }
        if (j__strncasecmp_l(v16, v42, v12, v13)
          && __monetary_load_locale(v16, (uint64_t)v8, v12, v13) == -1)
        {
          goto LABEL_25;
        }
        uint64_t v48 = *((void *)v8 + 167);
        if (!v48) {
          goto LABEL_108;
        }
LABEL_106:
        uint64_t v26 = v48 + 16;
LABEL_107:
        MEMORY[0x18C122F90](v26, v16, 32);
        goto LABEL_108;
      default:
        if (v17 == 16)
        {
          if (!*v11)
          {
            size_t v43 = __get_locale_env(4);
            unsigned __int16 v16 = v43;
            if (v43)
            {
              if ((unint64_t)j__strsignal_r((int)v43, v44, v12) > 0x1F) {
                goto LABEL_131;
              }
              if (*v16 == 46)
              {
                int v46 = v16[1];
                if (v46 == 46) {
                  int v46 = v16[2];
                }
                if (!v46) {
                  goto LABEL_131;
                }
              }
              if (j__strncasecmp(v16, (const char *)0x2F, v45)) {
                goto LABEL_131;
              }
            }
          }
          if (*((unsigned char *)v8 + 1314)) {
            int v47 = *(const char **)(*((void *)v8 + 168) + 64);
          }
          else {
            int v47 = (const char *)&C;
          }
          if (j__strncasecmp_l(v16, v47, v12, v13))
          {
            if (__numeric_load_locale(v16, (uint64_t)v8, v12, v13) == -1) {
              goto LABEL_25;
            }
            uint64_t v49 = *((void *)v8 + 168);
            if (v49) {
              MEMORY[0x18C122F90](v49 + 16, v16, 32);
            }
            *((unsigned char *)v8 + 1318) = 0;
            uint64_t v50 = *((void *)v8 + 171);
            if (v50)
            {
              if (atomic_fetch_add((atomic_uint *volatile)v50, 0xFFFFFFFF) == 1)
              {
                size_t v51 = *(void (**)(void))(v50 + 8);
                if (v51) {
                  v51();
                }
              }
            }
            *((void *)v8 + 171) = 0;
          }
LABEL_108:
          v17 *= 2;
          if (v17 >= 33) {
            return v8;
          }
          continue;
        }
        if (v17 != 32) {
          goto LABEL_108;
        }
        if (!*v11)
        {
          uint64_t v53 = __get_locale_env(5);
          unsigned __int16 v16 = v53;
          if (v53)
          {
            if ((unint64_t)j__strsignal_r((int)v53, v54, v12) > 0x1F
              || *v16 == 46 && (!v16[1] || v16[1] == 46 && !v16[2])
              || j__strncasecmp(v16, (const char *)0x2F, v55))
            {
LABEL_131:
              int v14 = 22;
              goto LABEL_24;
            }
          }
        }
        if (*((unsigned char *)v8 + 1315)) {
          uint64_t v52 = *(const char **)(*((void *)v8 + 169) + 64);
        }
        else {
          uint64_t v52 = (const char *)&C;
        }
        if (j__strncasecmp_l(v16, v52, v12, v13) && __time_load_locale(v16, (uint64_t)v8, v56, v57) == -1) {
          goto LABEL_25;
        }
        uint64_t v58 = *((void *)v8 + 169);
        if (v58) {
          MEMORY[0x18C122F90](v58 + 16, v16, 32);
        }
        return v8;
    }
  }
}

void *_duplocale(char *a1)
{
  unsigned int v2 = malloc_type_malloc(0x5C0uLL, 0x10B0040F94CF6B0uLL);
  locale_t v3 = v2;
  if (v2)
  {
    *(_DWORD *)unsigned int v2 = 1;
    v2[1] = destruct_locale;
    *((_DWORD *)v2 + 324) = 0;
    if (a1 == (char *)-1)
    {
      a1 = (char *)&__global_locale;
    }
    else if (a1)
    {
      if (a1 == __c_locale)
      {
        j__mkdtempat_np((int)v2, __c_locale);
        *(_DWORD *)locale_t v3 = 1;
        v3[1] = destruct_locale;
        *((_DWORD *)v3 + 324) = 0;
        return v3;
      }
    }
    else
    {
      uint64_t v4 = __locale_key;
      char v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
      if (v5) {
        a1 = v5;
      }
      else {
        a1 = (char *)&__global_locale;
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 324);
    long long v6 = *(_OWORD *)(a1 + 1304);
    long long v7 = *(_OWORD *)(a1 + 1336);
    *(_OWORD *)(v3 + 165) = *(_OWORD *)(a1 + 1320);
    *(_OWORD *)(v3 + 167) = v7;
    *(_OWORD *)(v3 + 163) = v6;
    long long v8 = *(_OWORD *)(a1 + 1352);
    long long v9 = *(_OWORD *)(a1 + 1368);
    long long v10 = *(_OWORD *)(a1 + 1400);
    *(_OWORD *)(v3 + 173) = *(_OWORD *)(a1 + 1384);
    *(_OWORD *)(v3 + 175) = v10;
    *(_OWORD *)(v3 + 169) = v8;
    *(_OWORD *)(v3 + 171) = v9;
    long long v11 = *(_OWORD *)(a1 + 1416);
    long long v12 = *(_OWORD *)(a1 + 1432);
    long long v13 = *(_OWORD *)(a1 + 1448);
    v3[183] = *((void *)a1 + 183);
    *(_OWORD *)(v3 + 179) = v12;
    *(_OWORD *)(v3 + 181) = v13;
    *(_OWORD *)(v3 + 177) = v11;
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 324);
    MEMORY[0x18C122530](v3 + 2, 1288);
    for (uint64_t i = 0; i != 6; ++i)
    {
      uint64_t v15 = (atomic_uint *)v3[i + 165];
      if (v15) {
        atomic_fetch_add(v15, 1u);
      }
    }
    unsigned __int16 v16 = (atomic_uint *)v3[171];
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
  }
  return v3;
}

uint64_t __detect_path_locale()
{
  if (_PathLocale) {
    return 0;
  }
  uint64_t v1 = getenv("PATH_LOCALE");
  if (v1 && (unsigned int v2 = v1, !issetugid()))
  {
    if ((unint64_t)(j__strsignal_r((int)v2, v3, v4) - 980) >= 0xFFFFFFFFFFFFFC00)
    {
      _PathLocale = (uint64_t)strdup(v2);
      if (_PathLocale) {
        return 0;
      }
      if (*__error()) {
        return *__error();
      }
      else {
        return 12;
      }
    }
    else
    {
      return 63;
    }
  }
  else
  {
    uint64_t result = 0;
    _PathLocale = (uint64_t)"/usr/share/locale";
  }
  return result;
}

int setlogin(const char *a1)
{
  pthread_mutex_lock(&__logname_mutex);
  int v1 = __setlogin();
  if (!v1 && __logname) {
    *(unsigned char *)__logname = 0;
  }
  pthread_mutex_unlock(&__logname_mutex);
  return v1;
}

void *gmt_init()
{
  uint64_t result = (void *)gmtptr;
  if (gmtptr || (uint64_t result = malloc_type_calloc(1uLL, 0x4768uLL, 0x10000402151C985uLL), (gmtptr = (uint64_t)result) != 0))
  {
    gmtload((uint64_t)result, v3);
    return (void *)notify_register_tz((unint64_t)v3, (int *)&gmt_notify, v1, v2);
  }
  return result;
}

unint64_t notify_register_tz(unint64_t result, int *a2, size_t a3, _xlocale *a4)
{
  if (*MEMORY[0x1E4F14C40])
  {
    char v5 = (const char *)result;
    uint64_t result = *a2;
    if ((result & 0x80000000) == 0) {
      uint64_t result = notify_cancel(result);
    }
    if (!v5 || !*v5)
    {
      *a2 = -1;
      return result;
    }
    HIDWORD(v14) = 0;
    if (j__strncasecmp_l(v5, "/var/db/timezone/localtime", a3, a4))
    {
      j__strsignal_r((int)v5, v6, v7);
      unint64_t v8 = MEMORY[0x1F41887A8]();
      long long v9 = (char *)&v14 - ((v8 + 42) & 0xFFFFFFFFFFFFFFF0);
      if (v8 <= 0xFFFFFFFFFFFFFFE4) {
        unint64_t v10 = v8 + 1;
      }
      else {
        unint64_t v10 = 0;
      }
      MEMORY[0x18C122530](v9 + 26, v10);
      strcpy(v9, "com.apple.system.timezone");
      *(_WORD *)&v9[j__strsignal_r((int)v9, v11, v12)] = 46;
      long long v13 = strcat(v9, v5);
      uint64_t result = notify_register_check(v13, a2);
      if (result) {
        goto LABEL_16;
      }
      if (v9 != "com.apple.system.timezone" && notify_monitor_file())
      {
        uint64_t result = notify_cancel(*a2);
LABEL_16:
        *(void *)a2 = 0xFFFFFFFFLL;
        return result;
      }
    }
    else
    {
      uint64_t result = notify_register_check("com.apple.system.timezone", a2);
      if (result) {
        goto LABEL_16;
      }
    }
    return notify_check(*a2, (int *)&v14 + 1);
  }
  return result;
}

uint64_t gmtload(uint64_t a1, const char *a2)
{
  uint64_t result = tzload("UTC", a1, a2, 1);
  if (result)
  {
    return tzparse((char **)"UTC", a1, 1uLL);
  }
  return result;
}

int glob(const char *a1, int a2, int (__cdecl *a3)(const char *, int), glob_t *a4)
{
  a4->gl_flags = a2 & 0x7FFFFEFF;
  a4->gl_errfunc = a3;
  return __glob((uint64_t)a1, (uint64_t)a4);
}

int acl_free(void *obj_p)
{
  if (obj_p != (void *)1) {
    free(obj_p);
  }
  return 0;
}

int posix_spawnp(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  char v37 = a4;
  char *const *__attribute__((__org_arrdim(0,0))) v38 = __envp;
  int v36 = a3;
  memset(&v39, 0, sizeof(v39));
  long long v9 = getenv("PATH");
  if (v9) {
    long long v11 = v9;
  }
  else {
    long long v11 = "/usr/bin:/bin";
  }
  if (j__strncasecmp(a2, (const char *)0x2F, v10))
  {
    int v35 = 0;
    size_t v40 = 0;
    uint64_t v14 = (char *)a2;
    while (1)
    {
      uint64_t v25 = posix_spawn(a1, v14, v36, v37, __argv, v38);
      int v18 = v25;
      if (v25 <= 0x3F)
      {
        if (((1 << v25) & 0xC000000000100004) != 0) {
          goto LABEL_9;
        }
        if (((1 << v25) & 0x4001080) != 0) {
          return v18;
        }
        if (v25 == 8)
        {
          uint64_t v27 = 0;
          int v28 = 1;
          do
          {
            size_t v29 = __argv[v27];
            --v28;
            ++v27;
          }
          while (v29);
          if (-v28 != 1 && v28 != 0) {
            int v30 = -v28;
          }
          else {
            int v30 = 1;
          }
          MEMORY[0x1F41887A8](v25, 8 * (v30 + 2));
          uint64_t v32 = &v34[-v31];
          MEMORY[0x18C122530](&v34[-v31]);
          if (v28)
          {
            int v33 = *__argv;
            j__mkdtempat_np(v32 + 16, (char *)__argv + 8);
          }
          else
          {
            *((void *)v32 + 2) = 0;
            int v33 = "sh";
          }
          *(void *)uint64_t v32 = v33;
          *((void *)v32 + 1) = v14;
          return posix_spawn(a1, "/bin/sh", v36, v37, (char *const *)v32, v38);
        }
      }
      if (!stat(v14, &v39))
      {
        int v35 = 1;
        if (v18 != 13) {
          return v18;
        }
      }
LABEL_9:
      unint64_t v19 = strsep(&v40, ":");
      if (!v19)
      {
        if (v35) {
          return 13;
        }
        else {
          return 2;
        }
      }
      int v22 = 1;
      int v23 = ".";
      if (*v19)
      {
        LODWORD(v23) = v19;
        int v22 = j__strsignal_r((int)v19, v20, v21);
      }
      uint64_t v24 = v22 + (uint64_t)j__strsignal_r((int)a2, v20, v21);
      if ((v24 - 1023) < 0xFFFFFBFF) {
        return 63;
      }
      j__mkostemp(v41, (int)v23);
      v41[v22] = 47;
      j__mkdtempat_np(v41 + v22 + 1, (char *)a2);
      v41[v24 + 1] = 0;
    }
  }
  if (*a2)
  {
    uint64_t v15 = j__strsignal_r((int)v11, v12, v13);
    unsigned __int16 v16 = &v34[-((MEMORY[0x1F41887A8](v15, v15 + 1) + 16) & 0xFFFFFFFFFFFFFFF0)];
    MEMORY[0x18C122530](v16);
    size_t v40 = v16;
    j__strnstr(v16, v11, v17);
    int v35 = 0;
    uint64_t v14 = v41;
    goto LABEL_9;
  }
  return 2;
}

int killpg(pid_t a1, int a2)
{
  if (a1 == 1)
  {
    *__error() = 1;
    return -1;
  }
  else
  {
    uint64_t v4 = -a1;
    return MEMORY[0x1F40CFDB8](v4, *(void *)&a2, 1);
  }
}

uint64_t sleep_NOCANCEL(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0x80000000) != 0) {
    return a1 - 0x7FFFFFFF + sleep_NOCANCEL(0x7FFFFFFFLL);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  v5[0] = a1;
  v5[1] = 0;
  if (nanosleep_NOCANCEL(v5, &v3) != -1) {
    return 0;
  }
  if (*__error() == 4)
  {
    if (v4) {
      return (v3 + 1);
    }
    else {
      return v3;
    }
  }
  return v1;
}

uint64_t nanosleep_NOCANCEL(void *a1, void *a2)
{
  if (!*MEMORY[0x1E4F14CA8]) {
    *MEMORY[0x1E4F14CA8] = 1;
  }
  cur_mach_error_t time = 0;
  mach_timespec_t v19 = 0;
  if (!a1 || (*a1 & 0x8000000000000000) != 0 || a1[1] >= 0x3B9ACA00uLL) {
    goto LABEL_9;
  }
  if (a2)
  {
    mach_error_t time = clock_get_time(clock_port, &cur_time);
    if (time)
    {
      char v5 = __stderrp;
      long long v6 = mach_error_string(time);
      fprintf(v5, "clock_get_time() failed: %s\n", v6);
      goto LABEL_9;
    }
  }
  if ((__semwait_signal_nocancel() & 0x80000000) == 0) {
    return 0xFFFFFFFFLL;
  }
  if (*__error() != 60)
  {
    if (*__error() == 4)
    {
      if (a2)
      {
        mach_error_t v8 = clock_get_time(clock_port, &v19);
        if (!v8)
        {
          clock_res_t v11 = cur_time.tv_nsec + *((_DWORD *)a1 + 2);
          if (v11 <= 999999999)
          {
            unsigned int tv_sec = cur_time.tv_sec;
          }
          else
          {
            v11 -= 1000000000;
            unsigned int tv_sec = cur_time.tv_sec + 1;
          }
          unsigned int v13 = tv_sec + *(_DWORD *)a1;
          if (v13 <= v19.tv_sec)
          {
            if (v13 < v19.tv_sec || (clock_res_t tv_nsec = v19.tv_nsec, v11 <= v19.tv_nsec))
            {
              *a2 = 0;
              a2[1] = 0;
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            clock_res_t tv_nsec = v19.tv_nsec;
          }
          BOOL v15 = __OFSUB__(v11, tv_nsec);
          int v16 = v11 - tv_nsec;
          if (v16 < 0 != v15) {
            int v17 = v16 + 1000000000;
          }
          else {
            int v17 = v16;
          }
          *a2 = v13 + (v16 >> 31) - v19.tv_sec;
          a2[1] = v17;
          return 0xFFFFFFFFLL;
        }
        long long v9 = __stderrp;
        size_t v10 = mach_error_string(v8);
        fprintf(v9, "clock_get_time() failed: %s\n", v10);
      }
      return 0xFFFFFFFFLL;
    }
LABEL_9:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t _os_debug_log_init(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 20);
  *(unsigned char *)(a1 + 20) = v2 & 0xFD;
  if ((unint64_t)_os_debug_log_redirect_func < (unint64_t)__memcpy_chk
    || (unint64_t)_os_debug_log_redirect_func >= (unint64_t)_Block_copy)
  {
    *(void *)(a1 + 8) = _os_debug_log_redirect_func;
  }
  long long v6 = getenv("LIBDISPATCH_LOG");
  if (!v6 && (long long v6 = getenv("OS_DEBUG_LOG")) == 0 || !j__strncasecmp_l(v6, "YES", v4, v5)) {
    long long v6 = "syslog";
  }
  uint64_t result = j__strncasecmp_l(v6, "NO", v4, v5);
  if (!result)
  {
    *(_DWORD *)(a1 + 16) = -1;
    char v16 = v2 | 2;
    goto LABEL_18;
  }
  uint64_t result = j__strncasecmp_l(v6, "syslog", v8, v9);
  if (!result)
  {
    *(_DWORD *)(a1 + 16) = -1;
    return result;
  }
  uint64_t result = j__strncasecmp_l(v6, "stderr", v10, v11);
  if (result)
  {
    uint64_t result = j__strncasecmp_l(v6, "stdout", v12, v13);
    if (result)
    {
      if (j__strncasecmp_l(v6, "file", v14, v15)) {
        uint64_t result = open_NOCANCEL();
      }
      else {
        uint64_t result = _os_debug_log_open_file(0);
      }
      *(_DWORD *)(a1 + 16) = result;
      if (result != -1)
      {
        if ((result & 0x80000000) != 0) {
          return result;
        }
        goto LABEL_23;
      }
      char v16 = *(unsigned char *)(a1 + 20) | 2;
LABEL_18:
      *(unsigned char *)(a1 + 20) = v16;
      return result;
    }
    int v17 = 1;
  }
  else
  {
    int v17 = 2;
  }
  *(_DWORD *)(a1 + 16) = v17;
LABEL_23:
  if (!*(void *)(a1 + 8))
  {
    *(unsigned char *)(a1 + 20) |= 1u;
    v22.unsigned int tv_sec = 0;
    *(void *)&v22.tv_usec = 0;
    gettimeofday(&v22, 0);
    *(void *)a1 = mach_absolute_time();
    int v18 = *(_DWORD *)(a1 + 16);
    mach_timespec_t v19 = getprogname();
    pid_t v20 = getpid();
    dprintf(v18, "=== os_debug_log log file opened for %s[%u] at %ld.%06u", v19, v20, v22.tv_sec, v22.tv_usec);
    if (*(unsigned char *)(a1 + 20))
    {
      mach_timebase_info info = 0;
      if (!mach_timebase_info(&info)) {
        dprintf(*(_DWORD *)(a1 + 16), " [ns=ticks*%u/%u]", info.numer, info.denom);
      }
    }
    return dprintf(*(_DWORD *)(a1 + 16), " ===\n");
  }
  return result;
}

void globfree(glob_t *a1)
{
  gl_pathv = a1->gl_pathv;
  if (gl_pathv)
  {
    size_t gl_pathc = a1->gl_pathc;
    if (a1->gl_pathc)
    {
      size_t v4 = (void **)&gl_pathv[a1->gl_offs];
      do
      {
        if (*v4) {
          free(*v4);
        }
        ++v4;
        --gl_pathc;
      }
      while (gl_pathc);
      gl_pathv = a1->gl_pathv;
    }
    free(gl_pathv);
    a1->gl_pathv = 0;
  }
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  memset(&v4, 0, sizeof(v4));
  if (lstat((const char *)__p, &v4) < 0) {
    return -1;
  }
  if ((v4.st_mode & 0xF000) == 0x4000) {
    return rmdir((const char *)__p);
  }
  return unlink((const char *)__p);
}

int statvfs(const char *a1, statvfs *a2)
{
  memset(&v9, 0, 512);
  int result = statfs(a1, &v9);
  if (!result)
  {
    f_bunint64_t size = v9.f_bsize;
    a2->f_bunint64_t size = v9.f_iosize;
    a2->f_frunint64_t size = f_bsize;
    *(int32x4_t *)&a2->f_blocks = vuzp1q_s32(*(int32x4_t *)&v9.f_blocks, *(int32x4_t *)&v9.f_bavail);
    fsfilcnt_t f_ffree = v9.f_ffree;
    unint64_t v6 = v9.f_fsid.val[0];
    a2->fsfilcnt_t f_ffree = v9.f_ffree;
    a2->f_favail = f_ffree;
    a2->f_namemax = 255;
    char f_flags = v9.f_flags;
    unint64_t v8 = v9.f_flags & 1;
    a2->f_fsid = v6;
    a2->f_flag = v8;
    if ((f_flags & 8) != 0) {
      a2->f_flag = v8 | 2;
    }
  }
  return result;
}

acl_t acl_copy_int_native(const void *buf_p)
{
  if (*(_DWORD *)buf_p == 19710317)
  {
    acl_t result = acl_init(*((_DWORD *)buf_p + 9));
    if (result)
    {
      unint64_t v3 = *((unsigned int *)buf_p + 9);
      *((_DWORD *)result + 3) = *((_DWORD *)buf_p + 10);
      *((_DWORD *)result + 1) = v3;
      if (v3)
      {
        unint64_t v4 = 0;
        char v5 = (char *)result + 24;
        unint64_t v6 = (int *)((char *)buf_p + 64);
        do
        {
          *((_DWORD *)v5 - 2) = -1407532799;
          *(_OWORD *)char v5 = *(_OWORD *)(v6 - 5);
          int v7 = *(v6 - 1);
          *((_DWORD *)v5 - 1) = v7 & 0xF;
          int v8 = *v6;
          v6 += 6;
          *((_DWORD *)v5 + 4) = v7 & 0xFFFFFFF0;
          *((_DWORD *)v5 + 5) = v8;
          ++v4;
          v5 += 32;
        }
        while (v4 < v3);
      }
    }
  }
  else
  {
    statfs v9 = __error();
    acl_t result = 0;
    *statfs v9 = 22;
  }
  return result;
}

acl_t acl_init(int count)
{
  if (count < 0)
  {
    uint64_t v1 = __error();
    char v2 = 0;
    int v3 = 22;
    goto LABEL_5;
  }
  if (count >= 0x81)
  {
    uint64_t v1 = __error();
    char v2 = 0;
    int v3 = 12;
LABEL_5:
    *uint64_t v1 = v3;
    return v2;
  }
  unint64_t v4 = (_acl *)malloc_type_malloc(0x1010uLL, 0x1000040A06A8C30uLL);
  char v2 = v4;
  if (v4)
  {
    MEMORY[0x18C122530]((char *)v4 + 4, 4108);
    *(_DWORD *)char v2 = -1407532798;
    *((_DWORD *)v2 + 2) = -1;
  }
  return v2;
}

void srandomdev(void)
{
  int v0 = rand_type;
  uint64_t v1 = rand_deg;
  if ((open_NOCANCEL() & 0x80000000) != 0
    || (v0 ? (uint64_t v2 = 4 * v1) : (uint64_t v2 = 4), NOCANCEL = read_NOCANCEL(), close_NOCANCEL(), NOCANCEL != v2))
  {
    v5.unsigned int tv_sec = 0;
    *(void *)&v5.tv_usec = 0;
    gettimeofday(&v5, 0);
    pid_t v4 = getpid();
    srandom(LODWORD(v5.tv_sec) ^ (v4 << 16) ^ v5.tv_usec);
  }
  else if (rand_type)
  {
    fptunsigned int r = &state[rand_sep];
    rptr[0] = state;
  }
}

char *generalSlowpath(uint64_t a1, int a2, int *a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 72);
  int v8 = *(_DWORD *)(a1 + 24);
  if (v7 > v8) {
    int v9 = v8 + 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 72);
  }
  int v10 = *(_DWORD *)(a1 + 92) - v9 + v7;
  int v11 = (1701 * v9) >> 9;
  if (v10 >= 0) {
    int v12 = v10;
  }
  else {
    int v12 = -v10;
  }
  int v13 = (1189 * v12 + 1189) >> 9;
  int v14 = v13 + 31;
  if (v13 < -31) {
    int v14 = v13 + 62;
  }
  int v15 = v14 >> 5;
  if ((v10 & 0x80000000) == 0)
  {
    int v17 = v11 + 31;
    BOOL v16 = v11 < -31;
    int v18 = v11 + 62;
    if (!v16) {
      int v18 = v17;
    }
    int v19 = v15 + (v18 >> 5);
    if (v19 > a4) {
      generalSlowpath_cold_1();
    }
    MEMORY[0x18C122530](a3, 4 * a4);
    uint64_t v113 = a3;
    unsigned int v114 = a3;
    initMPFromDigits((uint64_t)&v113, a1);
    multiplyByFiveToTheN(&v113, v10);
    size_t v21 = v113;
    unint64_t v20 = (unint64_t)v114;
    if (v19 < v114 - v113) {
      generalSlowpath_cold_2();
    }
    int v22 = bitCountMP((uint64_t)v113, (uint64_t)v114);
    int v23 = v22 + v10;
    uint64_t v24 = shiftRightMPWithRounding(v21, v20, v22 - *(_DWORD *)a1, 0, *(unsigned char *)(a1 + 96), a2);
    unint64_t v26 = v25;
    if ((int)bitCountMP((uint64_t)v24, v25) <= *(_DWORD *)a1)
    {
LABEL_88:
      if (v23 > *(_DWORD *)(a1 + 8)) {
        return (char *)overflow(a1);
      }
      goto LABEL_92;
    }
    uint64_t v27 = (unsigned int *)(v24 + 1);
    unint64_t v28 = (unint64_t)*v24 >> 1;
    if ((unint64_t)(v24 + 1) < v26)
    {
      do
      {
        unint64_t v29 = *v27;
        *(v27 - 1) = v28 | (v29 << 31);
        unint64_t v28 = v29 >> 1;
        ++v27;
      }
      while ((unint64_t)v27 < v26);
LABEL_80:
      uint64_t v92 = (int *)(v27 - 1);
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  int v30 = v13 + *(_DWORD *)a1 + 2;
  if (v11 <= v30) {
    int v11 = v30;
  }
  int v31 = v11 + 31;
  BOOL v16 = v11 < -31;
  int v32 = v11 + 62;
  if (!v16) {
    int v32 = v31;
  }
  int v33 = (v32 >> 5) + 2;
  if (v33 + v15 > a4) {
    generalSlowpath_cold_3();
  }
  MEMORY[0x18C122530](a3, 4 * a4);
  uint64_t v109 = (uint64_t)a3;
  int v110 = a3;
  uint64_t v34 = v33;
  int v35 = &a3[v33];
  uint64_t v107 = (char *)v35;
  if (-v10 >= 27) {
    int v36 = 27;
  }
  else {
    int v36 = -v10;
  }
  unint64_t v37 = powersOfFive[v36];
  do
  {
    *v35++ = v37;
    v37 >>= 32;
  }
  while (v37);
  unsigned int v108 = (char *)v35;
  multiplyByFiveToTheN(&v107, -v10 - v36);
  char *const *__attribute__((__org_arrdim(0,0))) v38 = (unsigned int *)v107;
  unint64_t v39 = (unint64_t)v108;
  int64_t v40 = v108 - v107;
  if (v15 < (v108 - v107) >> 2) {
    generalSlowpath_cold_4();
  }
  if (!*((_DWORD *)v108 - 1)) {
    generalSlowpath_cold_5();
  }
  initMPFromDigits((uint64_t)&v109, a1);
  int v41 = v110;
  if (!*(v110 - 1)) {
    generalSlowpath_cold_6();
  }
  int v42 = bitCountMP((uint64_t)v38, v39);
  size_t v43 = (int *)v109;
  int v44 = v42 - bitCountMP(v109, (uint64_t)v41) + *(_DWORD *)a1;
  if (v44 < -1)
  {
    int v45 = 0;
  }
  else
  {
    int v45 = v44 + 2;
    shiftLeftMP((unint64_t *)&v109, v44 + 2);
    int v41 = v110;
    if (!*(v110 - 1)) {
      generalSlowpath_cold_7();
    }
    size_t v43 = (int *)v109;
    if (v34 <= ((uint64_t)v110 - v109) >> 2) {
      generalSlowpath_cold_13();
    }
  }
  uint64_t v113 = v43;
  unsigned int v114 = v41;
  unint64_t v111 = v38;
  unint64_t v112 = v39;
  if (v41 <= v43) {
    generalSlowpath_cold_12();
  }
  if (v39 <= (unint64_t)v38) {
    generalSlowpath_cold_11();
  }
  if (!*(v41 - 1)) {
    generalSlowpath_cold_8();
  }
  unsigned int v46 = *(_DWORD *)(v39 - 4);
  if (!v46) {
    generalSlowpath_cold_9();
  }
  if (v40 == 4)
  {
    unint64_t v47 = 0;
    unint64_t v48 = *v38;
    uint64_t v49 = v41;
    do
    {
      unsigned int v50 = *--v49;
      unint64_t v51 = v50 | (v47 << 32);
      *uint64_t v49 = v51 / v48;
      unint64_t v47 = v51 - (v51 / v48) * (unint64_t)v48;
    }
    while (v49 > v43);
    unint64_t v52 = (unint64_t)(v41 + 1);
    do
    {
      int v53 = *(_DWORD *)(v52 - 8);
      v52 -= 4;
    }
    while (!v53);
    BOOL v54 = v47 != 0;
  }
  else
  {
    int v55 = __clz(v46);
    shiftLeftMP((unint64_t *)&v111, v55);
    shiftLeftMP((unint64_t *)&v113, v55);
    size_t v56 = v114;
    unint64_t v57 = v112;
    if (*(v114 - 1) >= *(_DWORD *)(v112 - 4))
    {
      *unsigned int v114 = 0;
      ++v56;
    }
    unint64_t v58 = (unint64_t)v111;
    uint64_t v59 = v113;
    if (v56 >= (int *)v111 && v57 >= (unint64_t)v113) {
      generalSlowpath_cold_10();
    }
    size_t v43 = v56 + 1;
    int v60 = ((unint64_t)((char *)v56 - (char *)v113) >> 2) - ((v57 - (unint64_t)v111) >> 2);
    if (v60 < 1)
    {
      int v62 = v56;
    }
    else
    {
      int v61 = 0;
      int v62 = v56;
      do
      {
        uint64_t v63 = (unsigned int *)v62;
        unsigned int v64 = *--v62;
        unint64_t v65 = *(v62 - 1) | ((unint64_t)v64 << 32);
        unint64_t v66 = *(unsigned int *)(v57 - 4);
        if (v64 == v66) {
          LODWORD(v67) = -1;
        }
        else {
          unint64_t v67 = v65 / v66;
        }
        do
        {
          int v68 = v67;
          unsigned int v69 = v67;
          unint64_t v67 = v65 - v66 * (unint64_t)v67;
          if (HIDWORD(v67)) {
            break;
          }
          unint64_t v70 = *(v63 - 3) | (v67 << 32);
          LODWORD(v67) = v68 - 1;
        }
        while (*(unsigned int *)(v57 - 8) * (unint64_t)v69 > v70);
        if (v58 < v57)
        {
          unint64_t v71 = 0;
          uint64_t v72 = ~((v57 - v58) >> 2);
          unsigned int v73 = (unsigned int *)v58;
          do
          {
            unsigned int v74 = *v73++;
            unint64_t v75 = v71 + v74 * (unint64_t)v69;
            unsigned int v76 = v63[v72];
            BOOL v77 = v76 >= v75;
            v63[v72] = v76 - v75;
            unint64_t v71 = HIDWORD(v75);
            if (!v77) {
              ++v71;
            }
            ++v72;
          }
          while ((unint64_t)v73 < v57);
          if (v71 > *v62)
          {
            unint64_t v78 = 0;
            uint64_t v79 = ~((v57 - v58) >> 2);
            unsigned int v80 = (unsigned int *)v58;
            do
            {
              unsigned int v81 = *v80++;
              unint64_t v82 = v78 + v81 + v63[v79];
              v63[v79] = v82;
              unint64_t v78 = HIDWORD(v82);
              ++v79;
            }
            while ((unint64_t)v80 < v57);
            --v68;
          }
        }
        *--size_t v43 = v68;
        ++v61;
      }
      while (v61 != v60);
    }
    if (v59 >= v62)
    {
      BOOL v54 = 0;
    }
    else
    {
      int v83 = 0;
      do
      {
        int v84 = *v59++;
        v83 |= v84;
      }
      while (v59 < v62);
      BOOL v54 = v83 != 0;
    }
    unint64_t v52 = (unint64_t)(v56 + 2);
    do
    {
      int v85 = *(_DWORD *)(v52 - 8);
      v52 -= 4;
    }
    while (!v85);
  }
  int v86 = bitCountMP((uint64_t)v43, v52);
  int v87 = v10 - v45;
  int v23 = v10 - v45 + v86;
  int v88 = *(_DWORD *)a1;
  int v89 = *(_DWORD *)(a1 + 4);
  if (v23 > v89)
  {
    uint64_t v24 = shiftRightMPWithRounding(v43, v52, v86 - v88, v54, *(unsigned char *)(a1 + 96), a2);
    unint64_t v26 = v90;
    if ((int)bitCountMP((uint64_t)v24, v90) <= *(_DWORD *)a1) {
      goto LABEL_88;
    }
    uint64_t v27 = (unsigned int *)(v24 + 1);
    unint64_t v28 = (unint64_t)*v24 >> 1;
    if ((unint64_t)(v24 + 1) < v26)
    {
      do
      {
        unint64_t v91 = *v27;
        *(v27 - 1) = v28 | (v91 << 31);
        unint64_t v28 = v91 >> 1;
        ++v27;
      }
      while ((unint64_t)v27 < v26);
      goto LABEL_80;
    }
LABEL_81:
    uint64_t v92 = v24;
LABEL_82:
    ++v23;
    if (v28) {
      *uint64_t v92 = v28;
    }
    else {
      v26 -= 4;
    }
    goto LABEL_88;
  }
  int v93 = v89 - v88;
  if (v23 <= v93) {
    return (char *)underflow(a1);
  }
  uint64_t v24 = shiftRightMPWithRounding(v43, v52, v93 - v87 + 1, v54, *(unsigned char *)(a1 + 96), a2);
  unint64_t v26 = v94;
  if ((int)bitCountMP((uint64_t)v24, v94) >= *(_DWORD *)a1)
  {
    int v23 = v89 + 1;
  }
  else
  {
    *__error() = 34;
    int v23 = v89;
  }
LABEL_92:
  uint64_t v96 = v26 - (void)v24;
  int v97 = *(_DWORD *)a1 + 31;
  if (*(int *)a1 < -31) {
    int v97 = *(_DWORD *)a1 + 62;
  }
  unint64_t v98 = (uint64_t)v97 >> 5;
  if (v98 > v96 >> 2) {
    MEMORY[0x18C122530](&v24[v96 >> 2], 4 * (v98 - (v96 >> 2)));
  }
  acl_t result = j__mkdtempat_np(*(void *)(a1 + 32), (char *)v24);
  int v99 = v23 - *(_DWORD *)(a1 + 4);
  uint64_t v100 = *(int *)(a1 + 12);
  if ((int)v100 <= 8) {
    int v99 = (unsigned __int16)(v23 - *(_WORD *)(a1 + 4)) << (*(unsigned char *)a1 - 8 * v100 + 15);
  }
  unsigned int v101 = v99 | (*(unsigned __int8 *)(a1 + 96) << 15);
  int v102 = *(unsigned char **)(a1 + 32);
  unint64_t v103 = &v102[v100];
  HIDWORD(v104) = *(_DWORD *)(a1 + 12);
  LODWORD(v104) = v100 - 2;
  switch((v104 >> 1))
  {
    case 0u:
      int v105 = v102[1] & 3 | (v101 >> 8);
      goto LABEL_105;
    case 1u:
      char v106 = v102[2] & 0x7F;
      goto LABEL_102;
    case 3u:
      char v106 = v102[6] & 0xF;
LABEL_102:
      LOBYTE(v99) = v106 | v99;
      goto LABEL_103;
    case 4u:
    case 7u:
LABEL_103:
      *(v103 - 2) = v99;
      break;
    default:
      break;
  }
  int v105 = v101 >> 8;
LABEL_105:
  *(v103 - 1) = v105;
  return result;
}

uint64_t bitCountMP(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a2 - 4);
  if (!v2) {
    bitCountMP_cold_1();
  }
  return 8 * (a2 - a1) - __clz(v2);
}

unint64_t *shiftLeftMP(unint64_t *result, int a2)
{
  unsigned int v2 = result;
  if (a2 <= 0) {
    int v3 = -(-a2 & 0x1F);
  }
  else {
    int v3 = a2 & 0x1F;
  }
  if (a2 >= 32)
  {
    unsigned int v4 = a2 >> 5;
    uint64_t v5 = 4 * (a2 >> 5);
    j__mkostemp((char *)(*result + v5), *result);
    acl_t result = (unint64_t *)MEMORY[0x18C122530](*v2, v5);
    v2[1] += 4 * v4;
  }
  if (v3 >= 1)
  {
    unint64_t v6 = (_DWORD *)*v2;
    unint64_t v7 = v2[1];
    if (*v2 < v7)
    {
      LODWORD(v8) = 0;
      do
      {
        unint64_t v9 = (unint64_t)*v6 << v3;
        *v6++ = v9 | v8;
        unint64_t v8 = HIDWORD(v9);
      }
      while ((unint64_t)v6 < v7);
      if (v8)
      {
        *unint64_t v6 = HIDWORD(v9);
        v2[1] = (unint64_t)(v6 + 1);
      }
    }
  }
  return result;
}

int heapsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  if (__nel < 2) {
    return 0;
  }
  if (!__width)
  {
    *__error() = 22;
    return -1;
  }
  size_t v7 = __nel;
  unint64_t v9 = malloc_type_malloc(__width, 0x62098E6BuLL);
  if (!v9) {
    return -1;
  }
  int v10 = v9;
  int64_t v40 = (char *)__base;
  int v11 = (char *)__base - __width;
  size_t v12 = v7 >> 1;
  int v42 = v9;
  do
  {
    size_t v41 = v12;
    unint64_t v13 = 2 * v12;
    if (2 * v12 <= v7)
    {
      size_t v14 = v12;
      do
      {
        int v15 = &v11[v13 * __width];
        if (v13 >= v7)
        {
          unint64_t v17 = v13;
        }
        else
        {
          int v16 = (*((uint64_t (**)(void *, char *, char *))__compar + 2))(__compar, &v11[v13 * __width], &v15[__width]);
          unint64_t v17 = v13 | (v16 >> 31);
          int v10 = v42;
          if (v16 < 0) {
            v15 += __width;
          }
        }
        int v18 = &v11[v14 * __width];
        if ((*((int (**)(void *, char *, char *))__compar + 2))(__compar, v15, v18) < 1) {
          break;
        }
        size_t v19 = __width;
        do
        {
          char v20 = *v18;
          *v18++ = *v15;
          *v15++ = v20;
          --v19;
        }
        while (v19);
        unint64_t v13 = 2 * v17;
        size_t v14 = v17;
      }
      while (2 * v17 <= v7);
    }
    size_t v12 = v41 - 1;
  }
  while (v41 != 1);
  uint64_t i = v40;
  int v22 = &v40[__width * (v7 - 1)];
  size_t v43 = (uint64_t (**)(void *, size_t, size_t))__compar;
  do
  {
    uint64_t v23 = 0;
    do
    {
      v10[v23] = v22[v23];
      ++v23;
    }
    while (__width != v23);
    uint64_t v24 = 0;
    do
    {
      v22[v24] = i[v24];
      ++v24;
    }
    while (__width != v24);
    --v7;
    uint64_t v25 = i;
    if (v7 >= 2)
    {
      unint64_t v26 = 2;
      uint64_t v27 = 1;
      do
      {
        unint64_t v28 = &v11[v26 * __width];
        if (v26 >= v7)
        {
          unint64_t v30 = v26;
        }
        else
        {
          int v29 = v43[2](v43, (size_t)&v11[v26 * __width], (size_t)&v28[__width]);
          unint64_t v30 = v26 | (v29 >> 31);
          if (v29 < 0) {
            v28 += __width;
          }
        }
        int v31 = &v11[v27 * __width];
        size_t v32 = __width;
        do
        {
          char v33 = *v28++;
          *v31++ = v33;
          --v32;
        }
        while (v32);
        unint64_t v26 = 2 * v30;
        uint64_t v27 = v30;
      }
      while (2 * v30 <= v7);
      uint64_t v25 = &v11[v30 * __width];
      uint64_t v34 = v25;
      for (i = v40; v30 != 1; uint64_t v25 = &v11[v30 * __width])
      {
        uint64_t v25 = v34;
        v30 >>= 1;
        uint64_t v34 = &v11[v30 * __width];
        int v35 = v43[2](v43, (size_t)v10, (size_t)v34);
        size_t v36 = __width;
        unint64_t v37 = v34;
        if (v35 < 0) {
          break;
        }
        do
        {
          char v38 = *v37++;
          *v25++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    uint64_t v39 = 0;
    do
    {
      v25[v39] = v10[v39];
      ++v39;
    }
    while (__width != v39);
    v22 -= __width;
  }
  while (v7 > 1);
  free(v10);
  return 0;
}

uint64_t getopt_internal(uint64_t a1, uint64_t a2, size_t a3, void *a4, int *a5, unsigned int a6)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v8 = (char *)a3;
  uint64_t v11 = optind;
  size_t v12 = &optreset;
  if (optind)
  {
    int v13 = optreset;
    int v14 = getopt_internal_posixly_correct;
    if (getopt_internal_posixly_correct != -1 && optreset == 0)
    {
      int v13 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = 1;
    optreset = 1;
    optind = 1;
    int v13 = 1;
  }
  int v14 = getenv("POSIXLY_CORRECT") != 0;
  getopt_internal_posixly_correct = v14;
LABEL_11:
  int v16 = *v8;
  if (v16 == 45)
  {
    uint64_t v17 = a6 | 2;
LABEL_20:
    ++v8;
    goto LABEL_22;
  }
  if (v14) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = v16 == 43;
  }
  uint64_t v17 = a6 & 0xFFFFFFFE;
  if (v18) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = a6;
  }
  if (v16 == 43) {
    goto LABEL_20;
  }
  uint64_t v17 = v19;
LABEL_22:
  int v55 = a4;
  size_t v56 = v8;
  optarg = 0;
  unint64_t v20 = 0x1E9119000uLL;
  unint64_t v21 = 0x1E9119000uLL;
  if (v13)
  {
    int v22 = -1;
    nonopt_end = -1;
    nonopt_start = -1;
    uint64_t v23 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v23 = nonopt_start;
    int v22 = nonopt_end;
  }
  unint64_t v24 = 0x1E9119000uLL;
  uint64_t v25 = place;
  unint64_t v26 = &EMSG_0;
  if (!v13)
  {
LABEL_26:
    int v27 = *v25;
    if (!*v25) {
      goto LABEL_27;
    }
    goto LABEL_48;
  }
  while (1)
  {
LABEL_27:
    *size_t v12 = 0;
    if ((int)v11 >= (int)a1)
    {
      *(void *)(v24 + 3120) = v26;
      if (v22 == -1)
      {
        if (v23 == -1)
        {
LABEL_58:
          uint64_t v42 = 0xFFFFFFFFLL;
          *(_DWORD *)(v21 + 3836) = -1;
          *(_DWORD *)(v20 + 3840) = -1;
          return v42;
        }
      }
      else
      {
        uint64_t v39 = a2;
        unint64_t v40 = v20;
        unint64_t v41 = v21;
        permute_args(v23, v22, v11, v39);
        unint64_t v21 = v41;
        unint64_t v20 = v40;
        LODWORD(v23) = v23 - v22 + optind;
      }
      optind = v23;
      goto LABEL_58;
    }
    unint64_t v28 = *(char **)(a2 + 8 * (int)v11);
    *(void *)(v24 + 3120) = v28;
    if (*v28 == 45)
    {
      int v27 = v28[1];
      if (v28[1]) {
        break;
      }
    }
    *(void *)(v24 + 3120) = v26;
    if ((v17 & 2) != 0)
    {
      optind = v11 + 1;
      optarg = v28;
      return 1;
    }
    if ((v17 & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
    if (v23 == -1)
    {
      int v29 = 0;
      *(_DWORD *)(v20 + 3840) = v11;
      uint64_t v23 = v11;
    }
    else if (v22 == -1)
    {
      int v29 = 0;
    }
    else
    {
      int v30 = v11;
      uint64_t v31 = a2;
      uint64_t v11 = v20;
      uint64_t v32 = v17;
      char v33 = v12;
      unint64_t v34 = v24;
      uint64_t v35 = a2;
      size_t v36 = v26;
      uint64_t v37 = a1;
      unint64_t v38 = v21;
      permute_args(v23, v22, v30, v31);
      unint64_t v21 = v38;
      a1 = v37;
      unint64_t v26 = v36;
      a2 = v35;
      unint64_t v24 = v34;
      size_t v12 = v33;
      uint64_t v17 = v32;
      unint64_t v20 = v11;
      LODWORD(v11) = optind;
      uint64_t v23 = (v23 - v22 + optind);
      *(_DWORD *)(v20 + 3840) = v23;
      *(_DWORD *)(v21 + 3836) = -1;
      int v29 = *v12;
      int v22 = -1;
    }
    uint64_t v11 = (v11 + 1);
    optind = v11;
    uint64_t v25 = v26;
    if (!v29) {
      goto LABEL_26;
    }
  }
  uint64_t v25 = v28 + 1;
  if (v23 != -1 && v22 == -1)
  {
    *(_DWORD *)(v21 + 3836) = v11;
    int v22 = v11;
  }
  *(void *)(v24 + 3120) = v25;
  if (v27 == 45)
  {
    if (v28[2])
    {
      int v27 = 45;
      goto LABEL_48;
    }
    optind = v11 + 1;
    *(void *)(v24 + 3120) = v26;
    if (v22 != -1)
    {
      uint64_t v44 = a2;
      unint64_t v45 = v20;
      unint64_t v46 = v21;
      permute_args(v23, v22, v11 + 1, v44);
      unint64_t v21 = v46;
      unint64_t v20 = v45;
      optind += v23 - v22;
    }
    goto LABEL_58;
  }
LABEL_48:
  if (!v55 || v25 == *(char **)(a2 + 8 * (int)v11) || (v17 & 4) == 0 && v27 != 45) {
    goto LABEL_66;
  }
  dash_prefix = 0;
  if (v27 == 58)
  {
    BOOL v43 = 0;
LABEL_63:
    uint64_t v47 = parse_long_options(a2, v56, v55, a5, v43, v17);
    if (v47 != -1)
    {
      uint64_t v42 = v47;
      *(void *)(v24 + 3120) = v26;
      return v42;
    }
    uint64_t v25 = *(char **)(v24 + 3120);
LABEL_66:
    unint64_t v48 = v25 + 1;
    *(void *)(v24 + 3120) = v25 + 1;
    int v49 = *v25;
    uint64_t v42 = (char)v49;
    if (v49 != 58)
    {
      if (v49 == 45)
      {
        if (!*v48)
        {
          uint64_t v50 = j__strncasecmp(v56, (const char *)v42, a3);
          if (!v50) {
            return 0xFFFFFFFFLL;
          }
LABEL_79:
          if (*(unsigned char *)(v50 + 1) == 58)
          {
            optarg = 0;
            if (*v48)
            {
              optarg = v48;
              int v53 = optind;
            }
            else
            {
              int v53 = optind;
              if (*(unsigned char *)(v50 + 2) != 58)
              {
                int v53 = optind + 1;
                optind = v53;
                if (v53 >= (int)a1)
                {
                  *(void *)(v24 + 3120) = v26;
                  if (opterr && *v56 != 58) {
                    warnx("option requires an argument -- %c", v42);
                  }
                  optopt = v42;
                  goto LABEL_106;
                }
                optarg = *(char **)(a2 + 8 * v53);
              }
            }
            *(void *)(v24 + 3120) = v26;
            optind = v53 + 1;
          }
          else if (!*v48)
          {
            ++optind;
          }
          return v42;
        }
LABEL_88:
        if (opterr && *v56 != 58) {
          getopt_internal_cold_1();
        }
        optopt = v42;
        return 63;
      }
      uint64_t v50 = j__strncasecmp(v56, (const char *)(char)v49, a3);
      if (v50)
      {
        if (v55 && v42 == 87 && *(unsigned char *)(v50 + 1) == 59)
        {
          if (!*v48)
          {
            uint64_t v51 = optind + 1;
            optind = v51;
            if ((int)v51 >= (int)a1)
            {
              *(void *)(v24 + 3120) = v26;
              if (opterr && *v56 != 58) {
                warnx("option requires an argument -- %c", 87);
              }
              optopt = 87;
              goto LABEL_106;
            }
            *(void *)(v24 + 3120) = *(void *)(a2 + 8 * v51);
          }
          dash_prefix = 2;
          uint64_t result = parse_long_options(a2, v56, v55, a5, 0, v17);
          *(void *)(v24 + 3120) = v26;
          return result;
        }
        goto LABEL_79;
      }
      if (v42 == 45)
      {
        if (!*v48) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_88;
      }
    }
    if (!*v48) {
      ++optind;
    }
    goto LABEL_88;
  }
  if (v27 != 45)
  {
    BOOL v43 = j__strncasecmp(v56, (const char *)(char)v27, a3) != 0;
    goto LABEL_63;
  }
  *(void *)(v24 + 3120) = v25 + 1;
  if (v25[1])
  {
    BOOL v43 = 0;
    dash_prefix = 1;
    goto LABEL_63;
  }
LABEL_106:
  if (*v56 == 58) {
    return 58;
  }
  else {
    return 63;
  }
}

int *shiftRightMPWithRounding(int *result, unint64_t a2, unsigned int a3, int a4, char a5, int a6)
{
  unint64_t v6 = result;
  v32[0] = (unint64_t)result;
  v32[1] = a2;
  if (!a3) {
    return result;
  }
  if ((a3 & 0x80000000) != 0)
  {
    shiftLeftMP(v32, -a3);
    return (int *)v32[0];
  }
  result += a3 >> 5;
  char v7 = a3 & 0x1F;
  if ((a3 & 0x1F) == 0)
  {
    HIDWORD(v14) = a6;
    LODWORD(v14) = a6;
    int v13 = v14 >> 22;
    if (v13 != 1)
    {
      if (v13 == 3) {
        return result;
      }
      if (v13 != 2)
      {
        int v29 = result - 1;
        int v30 = *(result - 1);
        if ((v30 & 0x80000000) == 0) {
          return result;
        }
        if (v30 == 0x80000000)
        {
          for (; v6 < v29; a4 |= v31)
            int v31 = *v6++;
          if (!a4 && ((unint64_t)result >= a2 || (*(unsigned char *)result & 1) == 0)) {
            return result;
          }
        }
LABEL_19:
        uint64_t v17 = 1;
        BOOL v18 = result;
        do
        {
          if ((unint64_t)v18 >= a2) {
            break;
          }
          unint64_t v19 = v17 + *v18;
          *v18++ = v19;
          uint64_t v17 = HIDWORD(v19);
        }
        while (v17);
        goto LABEL_46;
      }
      a5 ^= 1u;
    }
    if (a3 >= 0x20)
    {
      do
      {
        int v15 = *v6++;
        a4 |= v15;
      }
      while (v6 < result);
    }
    if (a4) {
      char v16 = a5;
    }
    else {
      char v16 = 1;
    }
    if (v16) {
      return result;
    }
    goto LABEL_19;
  }
  unint64_t v9 = (unsigned int *)(result + 1);
  int v8 = *result;
  unint64_t v10 = *result >> v7;
  if ((unint64_t)(result + 1) >= a2)
  {
    size_t v12 = (unsigned int *)&v6[a3 >> 5];
  }
  else
  {
    do
    {
      unint64_t v11 = (unint64_t)*v9 << (32 - v7);
      *(v9 - 1) = v11 | v10;
      unint64_t v10 = HIDWORD(v11);
      ++v9;
    }
    while ((unint64_t)v9 < a2);
    size_t v12 = v9 - 1;
  }
  if (v10) {
    *size_t v12 = v10;
  }
  else {
    a2 -= 4;
  }
  unsigned int v20 = v8 & ~(-1 << v7);
  HIDWORD(v22) = a6;
  LODWORD(v22) = a6;
  int v21 = v22 >> 22;
  switch(v21)
  {
    case 1:
      goto LABEL_31;
    case 3:
      return result;
    case 2:
      a5 ^= 1u;
LABEL_31:
      int v23 = v20 | a4;
      if (a3 >= 0x20)
      {
        do
        {
          int v24 = *v6++;
          v23 |= v24;
        }
        while (v6 < result);
      }
      if (v23) {
        char v25 = a5;
      }
      else {
        char v25 = 1;
      }
      if (v25) {
        return result;
      }
      goto LABEL_43;
  }
  unsigned int v26 = 1 << (v7 - 1);
  if (v20 >= v26)
  {
    if (v20 > v26) {
      goto LABEL_43;
    }
    if (a3 >= 0x20)
    {
      do
      {
        int v27 = *v6++;
        a4 |= v27;
      }
      while (v6 < result);
    }
    if (a4 || a2 > (unint64_t)result && (*(unsigned char *)result & 1) != 0)
    {
LABEL_43:
      uint64_t v17 = 1;
      BOOL v18 = result;
      do
      {
        if ((unint64_t)v18 >= a2) {
          break;
        }
        unint64_t v28 = v17 + *v18;
        *v18++ = v28;
        uint64_t v17 = HIDWORD(v28);
      }
      while (v17);
LABEL_46:
      if (v17) {
        *BOOL v18 = v17;
      }
    }
  }
  return result;
}

void *multiplyByFiveToTheN(void *result, int a2)
{
  if (a2 >= 41)
  {
    unsigned int v2 = (_DWORD *)*result;
    int v3 = (_DWORD *)result[1];
    do
    {
      int v4 = a2;
      uint64_t v5 = v3;
      int v3 = v2;
      if (v2 < v5)
      {
        unint64_t v6 = 0;
        unint64_t v7 = 0;
        int v3 = v2;
        do
        {
          signed long long v8 = __PAIR128__(493038065, 0xC35CA4BFABB9F561) * *v3 + __PAIR128__(v7, v6);
          *v3++ = v8;
          unint64_t v6 = v8 >> 32;
          unint64_t v7 = HIDWORD(*((void *)&v8 + 1));
        }
        while (v3 < v5);
        if (*((void *)&v8 + 1) | DWORD1(v8))
        {
          do
          {
            *v3++ = v6;
            *((void *)&v9 + 1) = v7;
            *(void *)&long long v9 = v6;
            unint64_t v6 = v9 >> 32;
            unint64_t v10 = v6 | HIDWORD(v7);
            v7 >>= 32;
          }
          while (v10);
        }
      }
      a2 -= 40;
    }
    while (v4 > 80);
    result[1] = v3;
  }
  if (a2 >= 1)
  {
    unint64_t v11 = (_DWORD *)*result;
    size_t v12 = (_DWORD *)result[1];
    do
    {
      int v13 = v12;
      if (a2 >= 27) {
        unsigned int v14 = 27;
      }
      else {
        unsigned int v14 = a2;
      }
      size_t v12 = v11;
      if (v11 < v13)
      {
        unint64_t v15 = 0;
        unint64_t v16 = 0;
        unint64_t v17 = powersOfFive[v14];
        size_t v12 = v11;
        do
        {
          signed long long v18 = *v12 * (unsigned __int128)v17 + __PAIR128__(v16, v15);
          *v12++ = v18;
          unint64_t v15 = v18 >> 32;
          unint64_t v16 = HIDWORD(*((void *)&v18 + 1));
        }
        while (v12 < v13);
        if (*((void *)&v18 + 1) | DWORD1(v18))
        {
          do
          {
            *v12++ = v15;
            *((void *)&v19 + 1) = v16;
            *(void *)&long long v19 = v15;
            unint64_t v15 = v19 >> 32;
            unint64_t v20 = v15 | HIDWORD(v16);
            v16 >>= 32;
          }
          while (v20);
        }
      }
      BOOL v21 = __OFSUB__(a2, 27);
      a2 -= 27;
    }
    while (!((a2 < 0) ^ v21 | (a2 == 0)));
    result[1] = v12;
  }
  return result;
}

uint64_t initMPFromDigits(uint64_t result, uint64_t a2)
{
  unsigned int v2 = (void *)result;
  int v3 = *(_DWORD **)result;
  for (unint64_t i = *(void *)(a2 + 64); i; i >>= 32)
    *v3++ = i;
  *(void *)(result + 8) = v3;
  int v5 = *(_DWORD *)(a2 + 72);
  int v6 = *(_DWORD *)(a2 + 24);
  if (v5 <= v6) {
    int v7 = *(_DWORD *)(a2 + 88);
  }
  else {
    int v7 = *(_DWORD *)(a2 + 88) - v5 + v6;
  }
  if (v5 <= v6) {
    int v8 = 0;
  }
  else {
    int v8 = v5 - v6;
  }
  long long v9 = *(unsigned __int8 **)(a2 + 80);
  if (v7 >= 1)
  {
    do
    {
      int v10 = 0;
      unint64_t v11 = 0;
      if (v7 >= 9) {
        unsigned int v12 = 9;
      }
      else {
        unsigned int v12 = v7;
      }
      do
      {
        do
        {
          int v13 = *v9++;
          unsigned int v14 = v13 - 48;
        }
        while ((v13 - 48) > 9);
        unint64_t v11 = 10 * v11 + v14;
        ++v10;
      }
      while (v10 != v12);
      unint64_t v16 = (_DWORD *)*v2;
      unint64_t v15 = (_DWORD *)v2[1];
      if (*v2 < (unint64_t)v15)
      {
        unint64_t v17 = 0;
        unsigned int v18 = initMPFromDigits_powersOfTen[v12];
        do
        {
          unint64_t v19 = v17 + *v16 * (unint64_t)v18;
          *v16++ = v19;
          unint64_t v17 = HIDWORD(v19);
        }
        while (v16 < v15);
        if (v17)
        {
          *unint64_t v15 = v17;
          v2[1] = v15 + 1;
        }
      }
      uint64_t result = addToMP((uint64_t)v2, v11);
      BOOL v20 = __OFSUB__(v7, v12);
      v7 -= v12;
    }
    while (!((v7 < 0) ^ v20 | (v7 == 0)));
  }
  if (v8 >= 1)
  {
    unint64_t v22 = (_DWORD *)*v2;
    BOOL v21 = (_DWORD *)v2[1];
    if (*v2 < (unint64_t)v21)
    {
      unint64_t v23 = 0;
      do
      {
        unint64_t v24 = v23 + 10 * *v22;
        *v22++ = v24;
        unint64_t v23 = HIDWORD(v24);
      }
      while (v22 < v21);
      if (v23)
      {
        *BOOL v21 = v23;
        v2[1] = v21 + 1;
      }
    }
    do
    {
      int v25 = *v9;
      if (v25 == 48)
      {
        --v8;
      }
      else if ((v25 - 49) <= 8)
      {
        return addToMP((uint64_t)v2, 1uLL);
      }
      ++v9;
    }
    while (v8 > 0);
  }
  return result;
}

char *__cdecl getbsize(int *a1, uint64_t *a2)
{
  int v4 = getenv("BLOCKSIZE");
  if (!v4) {
    goto LABEL_22;
  }
  int v5 = v4;
  if (!*v4) {
    goto LABEL_22;
  }
  __endptunsigned int r = 0;
  unint64_t v6 = strtol(v4, &__endptr, 10);
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_21:
    warnx("minimum blocksize is 512");
LABEL_22:
    int v10 = "";
    unint64_t v12 = 512;
    uint64_t v13 = 512;
    goto LABEL_23;
  }
  if (v6 <= 1) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = v6;
  }
  int v8 = *__endptr;
  if (*__endptr)
  {
    if (__endptr[1]) {
      goto LABEL_25;
    }
    char v9 = v8 - 71;
    if ((v8 - 71) <= 0x26)
    {
      if (((1 << v9) & 0x100000001) != 0)
      {
        int v10 = "G";
        uint64_t v11 = 0x40000000;
        unint64_t v12 = 1;
        goto LABEL_18;
      }
      if (((1 << v9) & 0x1000000010) != 0)
      {
        int v10 = "K";
        uint64_t v11 = 1024;
        unint64_t v12 = 0x100000;
        goto LABEL_18;
      }
      if (((1 << v9) & 0x4000000040) != 0)
      {
        int v10 = "M";
        uint64_t v11 = 0x100000;
        unint64_t v12 = 1024;
        goto LABEL_18;
      }
    }
    if (*__endptr)
    {
LABEL_25:
      warnx("%s: unknown blocksize", v5);
      int v10 = "";
      unint64_t v12 = 512;
      uint64_t v11 = 1;
      goto LABEL_20;
    }
  }
  int v10 = "";
  uint64_t v11 = 1;
  unint64_t v12 = 0x40000000;
LABEL_18:
  if (v7 > v12) {
    warnx("maximum blocksize is %ldG", 1);
  }
  else {
    unint64_t v12 = v7;
  }
LABEL_20:
  uint64_t v13 = v12 * v11;
  if ((uint64_t)(v12 * v11) <= 511) {
    goto LABEL_21;
  }
LABEL_23:
  snprintf(getbsize_header, 0x14uLL, "%ld%s-blocks", v12, v10);
  *a1 = j__strsignal_r((int)getbsize_header, v14, v15);
  *a2 = v13;
  return getbsize_header;
}

int sigaltstack(const stack_t *a1, stack_t *a2)
{
  if (!a1 || a1->ss_size >> 15)
  {
    return MEMORY[0x1F40CFE40]();
  }
  else
  {
    *__error() = 12;
    return -1;
  }
}

int sigvec(int a1, sigvec *a2, sigvec *a3)
{
  return sigvec__(*(uint64_t *)&a1, (const sigaction *)a2, (sigaction *)a3, 1);
}

uint64_t sigvec__(uint64_t a1, const sigaction *a2, sigaction *a3, int a4)
{
  if (a2) {
    a2->sa_flags ^= 2u;
  }
  if (a4)
  {
    uint64_t result = sigaction(a1, a2, a3);
    if (!a3) {
      return result;
    }
  }
  else
  {
    uint64_t result = _sigaction_nobind(a1, (uint64_t)a2, (uint64_t)a3);
    if (!a3) {
      return result;
    }
  }
  if (!result) {
    a3->sa_flags ^= 2u;
  }
  return result;
}

uint64_t _sigvec_nobind(uint64_t a1, const sigaction *a2, sigaction *a3)
{
  return sigvec__(a1, a2, a3, 0);
}

int sigsetmask(int a1)
{
  sigset_t v3 = a1;
  sigset_t v2 = 0;
  int result = sigprocmask(3, &v3, &v2);
  if (!result) {
    return v2;
  }
  return result;
}

int sigblock(int a1)
{
  sigset_t v3 = a1;
  sigset_t v2 = 0;
  int result = sigprocmask(1, &v3, &v2);
  if (!result) {
    return v2;
  }
  return result;
}

uint64_t sigpause_NOCANCEL(int a1)
{
  char v1 = a1;
  if (!*MEMORY[0x1E4F14CA8]) {
    *MEMORY[0x1E4F14CA8] = 1;
  }
  sigset_t v3 = 0;
  if ((a1 - 32) > 0xFFFFFFE0)
  {
    if ((sigprocmask(1, 0, &v3) & 0x80000000) == 0)
    {
      v3 &= ~(1 << (v1 - 1));
      return sigsuspend_NOCANCEL();
    }
  }
  else
  {
    *__error() = 22;
  }
  return 0xFFFFFFFFLL;
}

int sighold(int a1)
{
  if ((a1 - 32) > 0xFFFFFFE0)
  {
    sigset_t v2 = 1 << (a1 - 1);
    return sigprocmask(1, &v2, 0);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
}

int sigrelse(int a1)
{
  if ((a1 - 32) > 0xFFFFFFE0)
  {
    sigset_t v2 = 1 << (a1 - 1);
    return sigprocmask(2, &v2, 0);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
}

int sigignore(int a1)
{
  if (signal(a1, (void (__cdecl *)(int))1) == (void (__cdecl *)(int))-1) {
    return -1;
  }
  else {
    return 0;
  }
}

void (__cdecl *__cdecl sigset(int a1, void (__cdecl *a2)(int)))(int)
{
  sigset_t v9 = 0;
  v8.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v8.sa_masuint64_t k = 0;
  if ((a1 - 32) <= 0xFFFFFFE0)
  {
    *__error() = 22;
    return (void (__cdecl *)(int))-1;
  }
  if (sigprocmask(0, 0, &v9) == -1) {
    return (void (__cdecl *)(int))-1;
  }
  sigset_t v4 = v9 & (1 << (a1 - 1));
  if (a2 == (void (__cdecl *)(int))5)
  {
    if (v4) {
      return (void (__cdecl *)(int))5;
    }
    if (sigaction(a1, 0, &v8) != -1 && sighold(a1) != -1) {
      return v8.__sigaction_u.__sa_handler;
    }
    return (void (__cdecl *)(int))-1;
  }
  if (v4 && sigrelse(a1) == -1) {
    return (void (__cdecl *)(int))-1;
  }
  int v5 = signal(a1, a2);
  uint64_t v6 = 5;
  if (!v4) {
    uint64_t v6 = (uint64_t)v5;
  }
  if (v5 == (void (__cdecl *)(int))-1) {
    return (void (__cdecl *)(int))-1;
  }
  else {
    return (void (__cdecl *)(int))v6;
  }
}

int clock_getres(clockid_t __clock_id, timespec *__res)
{
  if (__clock_id > _CLOCK_THREAD_CPUTIME_ID)
  {
LABEL_10:
    *__error() = 22;
    return -1;
  }
  if (((1 << __clock_id) & 0x10330) == 0)
  {
    if (((1 << __clock_id) & 0x1041) != 0)
    {
      int result = 0;
      *__res = (timespec)xmmword_18A9FF360;
      return result;
    }
    goto LABEL_10;
  }
  mach_timebase_info info = 0;
  int result = mach_timebase_info(&info);
  if (result) {
    return -1;
  }
  uint32_t v4 = info.numer / info.denom;
  if (info.numer % info.denom) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = v4;
  }
  __res->unsigned int tv_sec = 0;
  __res->clock_res_t tv_nsec = v5;
  return result;
}

int clock_settime(clockid_t __clock_id, const timespec *__tp)
{
  if (__clock_id)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    uint64_t tv_nsec = __tp->tv_nsec;
    v4.unsigned int tv_sec = __tp->tv_sec;
    *(void *)&v4.tv_usec = ((int)tv_nsec / 1000);
    return settimeofday(&v4, 0);
  }
}

uint64_t _boottime_fallback_usec()
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  size_t v1 = 16;
  if (sysctlbyname("kern.boottime", &v2, &v1, 0, 0) == -1) {
    return 0;
  }
  else {
    return (int)v3 + 1000000 * v2;
  }
}

void *__cdecl sbrk(int a1)
{
  if ((sbrk_needs_init & 1) == 0)
  {
    sbrk_needs_init = 1;
    if (vm_allocate(*MEMORY[0x1E4F14C48], (vm_address_t *)&sbrk_curbrk, sbrk_region_size, 83886081)) {
      goto LABEL_5;
    }
  }
  if (a1 <= 0) {
    return (void *)sbrk_curbrk;
  }
  if (sbrk_region_size < (unint64_t)a1)
  {
LABEL_5:
    *__error() = 12;
    return (void *)-1;
  }
  int result = (void *)sbrk_curbrk;
  sbrk_curbrk += a1;
  sbrk_region_size -= a1;
  return result;
}

void *__cdecl brk(const void *a1)
{
  *__error() = 12;
  return (void *)-1;
}

void (__cdecl *__cdecl bsd_signal(int a1, void (__cdecl *a2)(int)))(int)
{
  v4.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v4.sa_masuint64_t k = 0;
  v5.__sigaction_u.__sa_handleunsigned int r = a2;
  sigset_t v2 = 1 << (a1 - 1);
  if (a1 > 32) {
    sigset_t v2 = 0;
  }
  v5.sa_masuint64_t k = v2;
  v5.sa_flags = 2;
  if (sigaction(a1, &v5, &v4) == -1) {
    return (void (__cdecl *)(int))-1;
  }
  else {
    return v4.__sigaction_u.__sa_handler;
  }
}

char *strtoencf16(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  sigaction v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  if (!v4) {
    sigaction v4 = &__global_locale;
  }
  long long v12 = 0uLL;
  long long v7 = xmmword_18A9FF370;
  uint64_t v8 = 0x5FFFFFFF9;
  LODWORD(v9) = 22;
  *((void *)&v9 + 1) = a1;
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  *(void *)&long long v11 = v4;
  long long v13 = 0uLL;
  int result = (char *)fastParse64((uint64_t)&v7);
  if (result)
  {
    int v6 = fegetround();
    return generalSlowpath((uint64_t)&v7, v6, v14, 8);
  }
  return result;
}

uint64_t strtoencf32(float *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  sigaction v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    sigaction v5 = v4;
  }
  else {
    sigaction v5 = &__global_locale;
  }
  return _ffpp_strtoencf32_l(a1, a2, a3, (unint64_t)v5);
}

uint64_t strtoencf64(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  sigaction v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    sigaction v5 = v4;
  }
  else {
    sigaction v5 = &__global_locale;
  }
  return _ffpp_strtoencf64_l(a1, a2, a3, (unint64_t)v5);
}

uint64_t strtoencf64x(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  sigaction v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    sigaction v5 = v4;
  }
  else {
    sigaction v5 = &__global_locale;
  }
  return _ffpp_strtoencf64_l(a1, a2, a3, (unint64_t)v5);
}

long double strtold(const char *a1, char **a2)
{
  double v6 = 0.0;
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    sigaction v4 = v3;
  }
  else {
    sigaction v4 = &__global_locale;
  }
  _ffpp_strtoencf64_l(&v6, (uint64_t)a1, (uint64_t)a2, (unint64_t)v4);
  return v6;
}

long double strtold_l(const char *a1, char **a2, locale_t a3)
{
  double v4 = 0.0;
  _ffpp_strtoencf64_l(&v4, (uint64_t)a1, (uint64_t)a2, (unint64_t)a3);
  return v4;
}

uint64_t infinity(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 12);
  switch(v1)
  {
    case 8:
      unint64_t v3 = 0xFFF0000000000000;
      if (!*(unsigned char *)(result + 96)) {
        unint64_t v3 = 0x7FF0000000000000;
      }
      **(void **)(result + 32) = v3;
      break;
    case 4:
      if (*(unsigned char *)(result + 96)) {
        int v4 = -8388608;
      }
      else {
        int v4 = 2139095040;
      }
      **(_DWORD **)(result + 32) = v4;
      break;
    case 2:
      if (*(unsigned char *)(result + 96)) {
        __int16 v2 = -1024;
      }
      else {
        __int16 v2 = 31744;
      }
      **(_WORD **)(result + 32) = v2;
      break;
    default:
      JUMPOUT(0x18C122530);
  }
  return result;
}

uint64_t underflow(uint64_t a1)
{
  *__error() = 34;
  uint64_t result = fegetround();
  if (result == 0x400000)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_7;
    }
LABEL_6:
    unsigned int v3 = 0;
    goto LABEL_8;
  }
  if (result != 0x800000) {
    goto LABEL_6;
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96)) {
LABEL_7:
  }
    unsigned int v3 = 1;
LABEL_8:
  int v4 = *(_DWORD *)(a1 + 12);
  switch(v4)
  {
    case 8:
      **(void **)(a1 + 32) = v3 | ((unint64_t)(*(unsigned char *)(a1 + 96) != 0) << 63);
      break;
    case 4:
      **(_DWORD **)(a1 + 32) = v3 | ((*(unsigned char *)(a1 + 96) != 0) << 31);
      break;
    case 2:
      **(_WORD **)(a1 + 32) = v3 | ((*(unsigned char *)(a1 + 96) != 0) << 15);
      break;
  }
  return result;
}

uint64_t overflow(uint64_t a1)
{
  *__error() = 34;
  uint64_t result = fegetround();
  BOOL v3 = result != 0x800000;
  BOOL v4 = result == 0x400000;
  if (*(unsigned char *)(a1 + 96)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4 || result == 12582912 || !v3)
  {
    int v5 = *(_DWORD *)(a1 + 12);
    switch(v5)
    {
      case 8:
        unint64_t v7 = 0xFFEFFFFFFFFFFFFFLL;
        if (!*(unsigned char *)(a1 + 96)) {
          unint64_t v7 = 0x7FEFFFFFFFFFFFFFLL;
        }
        **(void **)(a1 + 32) = v7;
        break;
      case 4:
        if (*(unsigned char *)(a1 + 96)) {
          int v8 = -8388609;
        }
        else {
          int v8 = 2139095039;
        }
        **(_DWORD **)(a1 + 32) = v8;
        break;
      case 2:
        if (*(unsigned char *)(a1 + 96)) {
          __int16 v6 = -1025;
        }
        else {
          __int16 v6 = 31743;
        }
        **(_WORD **)(a1 + 32) = v6;
        break;
      default:
        long long v9 = *(char **)(a1 + 32);
        return j__mkostemps(v9, 255, v5);
    }
  }
  else
  {
    return infinity(a1);
  }
  return result;
}

uint64_t addToMP(uint64_t result, unint64_t a2)
{
  __int16 v2 = *(_DWORD **)result;
  if (a2)
  {
    unint64_t v3 = *(void *)(result + 8);
    do
    {
      if ((unint64_t)v2 >= v3) {
        break;
      }
      unint64_t v4 = a2 + *v2;
      *v2++ = v4;
      a2 = HIDWORD(v4);
    }
    while (HIDWORD(v4));
    for (; a2; a2 >>= 32)
      *v2++ = a2;
  }
  if ((unint64_t)v2 > *(void *)(result + 8)) {
    *(void *)(result + 8) = v2;
  }
  return result;
}

int lchflags(const char *a1, __uint32_t a2)
{
  __uint32_t v5 = a2;
  long long v3 = xmmword_18A9FFB08;
  uint64_t v4 = 0;
  return setattrlist(a1, &v3, &v5, 4uLL, 1u);
}

int lchmod(const char *a1, mode_t a2)
{
  v4[1] = 0;
  int v4[2] = 0;
  v4[0] = 0x2000000000005;
  int v3 = a2;
  return setattrlist(a1, v4, &v3, 4uLL, 1u);
}

int lutimes(const char *a1, const timeval *a2)
{
  memset(&v12, 0, sizeof(v12));
  long long v9 = 0u;
  long long v10 = 0u;
  if ((lstat(a1, &v12) & 0x80000000) == 0)
  {
    if ((v12.st_mode & 0xF000) != 0xA000) {
      return utimes(a1, a2);
    }
    v11[1] = 0;
    v11[2] = 0;
    v11[0] = 0x140000000005;
    if (a2)
    {
      uint64_t v4 = 1000 * a2->tv_usec;
      *(void *)&long long v10 = a2->tv_sec;
      *((void *)&v10 + 1) = v4;
      __darwin_time_t tv_sec = a2[1].tv_sec;
      uint64_t v6 = 1000 * a2[1].tv_usec;
LABEL_8:
      *(void *)&long long v9 = tv_sec;
      *((void *)&v9 + 1) = v6;
      return setattrlist(a1, v11, &v9, 0x20uLL, 1u);
    }
    v8.__darwin_time_t tv_sec = 0;
    *(void *)&v8.tv_usec = 0;
    if ((gettimeofday(&v8, 0) & 0x80000000) == 0)
    {
      __darwin_time_t tv_sec = v8.tv_sec;
      uint64_t v6 = 1000 * v8.tv_usec;
      *(void *)&long long v10 = v8.tv_sec;
      *((void *)&v10 + 1) = v6;
      goto LABEL_8;
    }
  }
  return -1;
}

int fstatvfs(int a1, statvfs *a2)
{
  memset(&v9, 0, 512);
  int result = fstatfs(a1, &v9);
  if (!result)
  {
    f_bunint64_t size = v9.f_bsize;
    a2->f_bunint64_t size = v9.f_iosize;
    a2->f_frunint64_t size = f_bsize;
    *(int32x4_t *)&a2->f_blocks = vuzp1q_s32(*(int32x4_t *)&v9.f_blocks, *(int32x4_t *)&v9.f_bavail);
    fsfilcnt_t f_ffree = v9.f_ffree;
    unint64_t v6 = v9.f_fsid.val[0];
    a2->fsfilcnt_t f_ffree = v9.f_ffree;
    a2->f_favail = f_ffree;
    a2->f_namemax = 255;
    char f_flags = v9.f_flags;
    unint64_t v8 = v9.f_flags & 1;
    a2->f_fsid = v6;
    a2->f_flag = v8;
    if ((f_flags & 8) != 0) {
      a2->f_flag = v8 | 2;
    }
  }
  return result;
}

size_t backtrace_async(void **array, size_t length, uint32_t *task_id)
{
  unsigned int v9 = 0;
  uint32_t v5 = _thread_stack_async_pcs((uint64_t)array, length, &v9, 1, 0);
  unsigned int v6 = v9;
  if (v9)
  {
    while (1)
    {
      uint64_t v7 = v6 - 1;
      if (array[v7]) {
        break;
      }
      --v6;
      if (!v7) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    unsigned int v6 = 0;
  }
  if (task_id) {
    *task_id = v5;
  }
  return v6;
}

int backtrace_from_fp(void *startfp, void **array, int size)
{
  int v6 = 0;
  _thread_stack_pcs((uint64_t)array, size, (unsigned int *)&v6, 1, (uintptr_t)startfp);
  int result = v6;
  if (v6)
  {
    while (1)
    {
      uint64_t v5 = (result - 1);
      if (array[v5]) {
        break;
      }
      --result;
      if (!v5) {
        return 0;
      }
    }
  }
  return result;
}

void backtrace_symbols_fd(void *const *a1, int a2, int a3)
{
  uint64_t v7 = v11;
  unsigned int v9 = "\n";
  uint64_t v10 = 1;
  if (a2 >= 1)
  {
    size_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      memset(&v6, 0, sizeof(v6));
      dladdr(a1[v4], &v6);
      uint64_t v8 = (int)_backtrace_snprintf(v11, 0x400uLL, v4, (_xlocale *)a1[v4], (uint64_t)&v6);
      writev_NOCANCEL();
      ++v4;
    }
    while (v5 != v4);
  }
}

char *__cdecl crypt(const char *a1, const char *a2)
{
  uint64_t v4 = 0;
  uint64_t v31 = 0;
  do
  {
    char v5 = 2 * *a1;
    if (*a1) {
      ++a1;
    }
    *((unsigned char *)&v31 + v4++) = v5;
  }
  while (v4 != 8);
  uint64_t v30 = 0;
  __crypt_des_setkey((unsigned __int8 *)&v31);
  Dl_info v6 = cryptresult;
  if (*a2 == 95)
  {
    if (*a1)
    {
      do
      {
        __crypt_des_cipher(&v31, &v31, 0, 1);
        for (uint64_t i = 0; i != 8; ++i)
        {
          char v8 = *a1;
          if (*a1) {
            ++a1;
          }
          *((unsigned char *)&v31 + i) ^= 2 * v8;
        }
        __crypt_des_setkey((unsigned __int8 *)&v31);
      }
      while (*a1);
      char v9 = *a2;
    }
    else
    {
      char v9 = 95;
    }
    int v10 = 0;
    cryptresult[0] = v9;
    unint64_t v12 = 4u;
    do
    {
      unsigned int v13 = a2[v12];
      if (!a2[v12]) {
        unsigned int v13 = 46;
      }
      cryptresult[v12] = v13;
      int v10 = a64toi[v13] | (v10 << 6);
    }
    while (v12-- > 1);
    a2 += 5;
    Dl_info v6 = &byte_1E911AFFD;
    uint64_t v11 = 4;
  }
  else
  {
    int v10 = 25;
    uint64_t v11 = 2;
  }
  unint64_t v15 = 0;
  uint64_t v16 = v11 - 1;
  do
  {
    unsigned int v17 = a2[v16];
    if (!a2[v16]) {
      unsigned int v17 = 46;
    }
    v6[v16] = v17;
    unint64_t v15 = a64toi[v17] | (v15 << 6);
    unint64_t v18 = v16-- + 1;
  }
  while (v18 > 1);
  __crypt_des_cipher(&constdatablock, &v30, v15, v10);
  unint64_t v19 = &v6[v11];
  unint64_t v20 = v30;
  unint64_t v21 = (BYTE1(v30) << 8) | (v30 << 16);
  unint64_t v22 = BYTE2(v30) | (BYTE1(v30) << 8);
  v19[3] = itoa64[BYTE2(v30) & 0x3F];
  v19[2] = itoa64[(v22 >> 6) & 0x3F];
  v19[1] = itoa64[(v21 >> 12) & 0x3F];
  *unint64_t v19 = itoa64[v20 >> 2];
  unint64_t v23 = BYTE3(v30);
  unint64_t v24 = (BYTE4(v30) << 8) | (BYTE3(v30) << 16);
  char v25 = itoa64[((unint64_t)(BYTE5(v30) | (BYTE4(v30) << 8)) >> 6) & 0x3F];
  v19[7] = itoa64[BYTE5(v30) & 0x3F];
  v19[6] = v25;
  v19[5] = itoa64[(v24 >> 12) & 0x3F];
  v19[4] = itoa64[v23 >> 2];
  unint64_t v26 = BYTE6(v30);
  LODWORD(v20) = 4 * HIBYTE(v30);
  unint64_t v27 = v20 | (BYTE6(v30) << 10);
  v19[10] = itoa64[v20 & 0x3C];
  char v28 = itoa64[v26 >> 2];
  v19[9] = itoa64[(v27 >> 6) & 0x3F];
  v19[8] = v28;
  int result = cryptresult;
  v19[11] = 0;
  return result;
}

uint64_t __crypt_des_setkey(unsigned __int8 *a1)
{
  if ((__crypt_des_setkey_des_ready & 1) == 0)
  {
    uint64_t v2 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    do
    {
      if (((0x303030300000000uLL >> v2) & 1) == 0)
      {
        uint64_t v3 = PC2[v2];
        HIDWORD(v4) = -1227133513 * v3;
        LODWORD(v4) = -1227133513 * v3;
        if ((v4 >> 2) < 0x924924A) {
          v3 -= 28;
        }
        *((unsigned char *)&v46 + v2) = ((PC1[v3] - 1) ^ 7) + 1;
      }
      ++v2;
    }
    while (v2 != 64);
    PC1ROT = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x1469CAC2uLL);
    PC2ROT[0] = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x592ABC37uLL);
    qword_1E911B0B0 = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x592ABC37uLL);
    init_perm(PC1ROT, (uint64_t)&v46);
    unint64_t v5 = 0;
    char v6 = 1;
    do
    {
      uint64_t v7 = 0;
      char v8 = v6;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      do
      {
        if (((0x303030300000000uLL >> v7) & 1) == 0) {
          *((unsigned char *)&v42 + PC2[v7] - 1) = v7 + 1;
        }
        ++v7;
      }
      while (v7 != 64);
      for (uint64_t i = 0; i != 64; ++i)
      {
        if (((0x303030300000000uLL >> i) & 1) == 0)
        {
          unint64_t v10 = v5 + PC2[i];
          if (v10 % 0x1C <= v5) {
            v10 -= 28;
          }
          *((unsigned char *)&v46 + i) = *((unsigned char *)&v42 + v10);
        }
      }
      init_perm(PC2ROT[v5], (uint64_t)&v46);
      char v6 = 0;
      unint64_t v5 = 1;
    }
    while ((v8 & 1) != 0);
    uint64_t v11 = 0;
    unint64_t v12 = &IP[62];
    unsigned int v13 = &v46;
    do
    {
      for (unint64_t j = 0; j != 8; ++j)
      {
        if (j >= 2)
        {
          uint64_t v16 = v12[j] - 1;
          unsigned __int8 v17 = IP[v16];
          if ((0xF0F0F0F0F0F0F0FuLL >> v16)) {
            uint64_t v18 = -32;
          }
          else {
            uint64_t v18 = -1;
          }
          uint64_t v19 = v18 + v17;
          if (v19 > 0) {
            char v15 = ((v19 - 1) ^ 7) + 1;
          }
          else {
            char v15 = 0;
          }
        }
        else
        {
          char v15 = 0;
        }
        *((unsigned char *)v13 + j) = v15;
      }
      ++v11;
      unsigned int v13 = (long long *)((char *)v13 + 8);
      v12 += 6;
    }
    while (v11 != 8);
    IE3264 = (uint64_t)malloc_type_calloc(8uLL, 0x80uLL, 0x9E08E8F5uLL);
    init_perm(IE3264, (uint64_t)&v46);
    for (uint64_t k = 0; k != 64; *((unsigned char *)&v46 + v21) = k)
      uint64_t v21 = (IP[CIFP[k++] - 1] - 1) ^ 7;
    CF6464 = (uint64_t)malloc_type_calloc(8uLL, 0x100uLL, 0x9A2466B4uLL);
    unint64_t v22 = malloc_type_calloc(8uLL, 0x400uLL, 0xA094E4B6uLL);
    SPE = (uint64_t)v22;
    init_perm(CF6464, (uint64_t)&v46);
    for (uint64_t m = 0; m != 48; ++m)
      *((unsigned char *)&v46 + m) = P32Tr[ExpandTr[m] - 1];
    for (uint64_t n = 0; n != 8; ++n)
    {
      for (iuint64_t i = 0; ii != 64; ++ii)
      {
        unint64_t v26 = 0;
        long long v42 = 0uLL;
        long long v43 = 0uLL;
        uint64x2_t v27 = (uint64x2_t)vdupq_n_s64(__rbit32(S[64 * n
                                               + (ii & 4 | (8 * ((ii >> 1) & 1)) & 0xFFFFFFFFFFFFFFDCLL | (32 * (ii & 1)) | (ii >> 2) & 2 | (ii >> 4) & 1 | (ii >> 1) & 0x10)]) >> 28);
        int16x8_t v28 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_18A9FFB40), (int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_18A9FFB30));
        v28.i64[0] = *(void *)&vmovn_s32((int32x4_t)v28) & 0xFFF1FFF1FFF1FFF1;
        *((_DWORD *)&v42 + n) = vmovn_s16(v28).u32[0];
        uint64_t v29 = 23;
        do
        {
          unint64_t v30 = v26;
          unint64_t v26 = *((unsigned __int8 *)&v42 + *((unsigned __int8 *)&v46 + v29) - 1) | (2 * v26);
          unint64_t v31 = v29-- + 1;
        }
        while (v31 > 1);
        unint64_t v32 = 0;
        v22[64 * n + ii] = 4
                         * ((32 * (int)v30) & 0x3F0000 | (((v30 >> 17) & 0x3F) << 24) | v26 & 0x3F | (((v26 >> 6) & 0x3F) << 8));
        uint64_t v33 = 47;
        do
        {
          unint64_t v34 = v32;
          unint64_t v32 = *((unsigned __int8 *)&v42 + *((unsigned __int8 *)&v46 + v33) - 1) | (2 * v32);
          unint64_t v35 = v33 - 23;
          --v33;
        }
        while (v35 > 1);
        v22[64 * n + 512 + ii] = 4
                               * ((32 * (int)v34) & 0x3F0000 | (((v34 >> 17) & 0x3F) << 24) | v32 & 0x3F | (((v32 >> 6) & 0x3F) << 8));
      }
    }
    __crypt_des_setkey_des_ready = 1;
  }
  *(void *)&long long v46 = 0;
  uint64_t v36 = 1u;
  permute(a1, (unint64_t *)&v46, PC1ROT, 8);
  uint64_t v37 = v46;
  KS[0] = v46 & 0xFFFFFFFFFCFCFCFCLL;
  unint64_t v38 = &byte_18A9FFBD1;
  do
  {
    KS[v36] = v37;
    unsigned int v39 = *v38++;
    uint64_t v40 = PC2ROT[v39 - 1];
    *(void *)&long long v46 = 0;
    permute((unsigned __int8 *)&KS[v36], (unint64_t *)&v46, v40, 8);
    uint64_t v37 = v46;
    KS[v36++] = v46 & 0xFFFFFFFFFCFCFCFCLL;
  }
  while (v36 != 16);
  __crypt_des_setkey_called = 1;
  return 0;
}

unsigned __int8 *permute(unsigned __int8 *result, unint64_t *a2, uint64_t a3, int a4)
{
  unsigned int v4 = 0;
  uint64_t v5 = 0;
  int v6 = a4 + 1;
  do
  {
    unsigned int v7 = *result++;
    uint64_t v8 = *(void *)(a3 + 8 * (v7 & 0xF)) | *(void *)(a3 + (((unint64_t)v7 >> 1) & 0x78) + 128);
    v4 |= v8;
    v5 |= v8 >> 32;
    a3 += 256;
    --v6;
  }
  while (v6 > 1);
  *a2 = v4 | ((unint64_t)v5 << 32);
  return result;
}

uint64_t __crypt_des_cipher(void *a1, uint64_t *a2, unint64_t a3, int a4)
{
  uint64_t v6 = (2 * *a1) & 0xAAAAAAAA | HIDWORD(*a1) & 0x5555555555555555 | (((*a1 >> 33) & 0x55555555 | *(_DWORD *)a1 & 0xAAAAAAAA) << 32);
  uint64_t v85 = 0;
  unint64_t v86 = v6;
  uint64_t v7 = IE3264;
  permute((unsigned __int8 *)&v86, (unint64_t *)&v85, IE3264, 4);
  unint64_t v8 = (int)v85;
  uint64_t v9 = v85 >> 32;
  uint64_t v85 = 0;
  permute((unsigned __int8 *)&v86 + 4, (unint64_t *)&v85, v7, 4);
  uint64_t v10 = (int)v85;
  uint64_t v11 = v85 >> 32;
  if (a4 >= 0) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = -8;
  }
  if (a4)
  {
    unint64_t v13 = a3 & 0x3F | (((a3 >> 12) & 0x3F) << 16) & 0xFFFFFFFFC0FFC0FFLL | (((a3 >> 18) & 0x3F) << 24) | (((a3 >> 6) & 0x3F) << 8);
    int v14 = 4 * v13;
    if (a4 >= 0) {
      int v15 = a4;
    }
    else {
      int v15 = -a4;
    }
    if (a4 < 0) {
      uint64_t v16 = (uint64_t *)&unk_1E911B0A0;
    }
    else {
      uint64_t v16 = KS;
    }
    uint64_t v17 = SPE;
    uint64_t v77 = SPE + 1024;
    uint64_t v78 = SPE + 512;
    uint64_t v18 = SPE + 1536;
    uint64_t v19 = SPE + 5632;
    uint64_t v20 = SPE + 2048;
    uint64_t v21 = SPE + 6144;
    uint64_t v22 = SPE + 2560;
    uint64_t v23 = SPE + 6656;
    uint64_t v76 = SPE + 3072;
    uint64_t v24 = SPE + 3584;
    uint64_t v25 = SPE + 7168;
    unint64_t v26 = v8;
    uint64_t v83 = SPE + 4096;
    int v84 = 4 * v13;
    uint64_t v81 = SPE + 4608;
    uint64_t v82 = SPE + 7680;
    uint64_t v27 = SPE + 5120;
    do
    {
      int v75 = v15;
      unint64_t v28 = v10;
      uint64_t v29 = v11;
      int v30 = -8;
      uint64_t v10 = v26;
      uint64_t v11 = v9;
      unint64_t v26 = v28;
      uint64_t v9 = v29;
      do
      {
        int v80 = v30;
        unint64_t v31 = (v9 ^ v26) & v14;
        unint64_t v32 = v26;
        unint64_t v33 = *(_DWORD *)v16 ^ v26 ^ v31;
        uint64_t v34 = v9 ^ v31 ^ *((_DWORD *)v16 + 1);
        unint64_t v86 = v33 | (v34 << 32);
        unint64_t v35 = v33 >> 7;
        unint64_t v36 = v33 >> 15;
        unint64_t v37 = v33 >> 23;
        uint64_t v38 = 2 * v33;
        unsigned int v39 = &v16[(unint64_t)v12 / 8];
        uint64_t v40 = v35 & 0x1FE;
        uint64_t v41 = *(void *)(v83 + v38) ^ v11 ^ *(void *)(v81 + v40);
        uint64_t v42 = v37 & 0x1FE;
        uint64_t v43 = *(void *)(v17 + v38) ^ v10 ^ *(void *)(v78 + v40) ^ *(void *)(v77 + (v36 & 0x1FE)) ^ *(void *)(v18 + v42);
        uint64_t v44 = *(void *)(v27 + (v36 & 0x1FE)) ^ *(void *)(v19 + v42);
        uint64_t v45 = 2 * v34;
        uint64_t v46 = v41 ^ v44;
        uint64_t v47 = (v34 >> 7) & 0x1FELL;
        uint64_t v48 = (v34 >> 15) & 0x1FELL;
        uint64_t v49 = *(void *)(v20 + v45) ^ *(void *)(v22 + v47) ^ *(void *)(v76 + v48);
        uint64_t v50 = *(void *)(v21 + v45) ^ *(void *)(v23 + v47) ^ *(void *)(v25 + v48);
        uint64_t v51 = (v34 >> 23) & 0x1FELL;
        uint64_t v10 = v43 ^ v49 ^ *(void *)(v24 + v51);
        uint64_t v11 = v46 ^ v50 ^ *(void *)(v82 + v51);
        unint64_t v52 = (v11 ^ v10) & v84;
        LODWORD(v51) = *((_DWORD *)v39 + 1);
        unint64_t v53 = *(_DWORD *)v39 ^ v10 ^ v52;
        unint64_t v86 = v53 | v86 & 0xFFFFFFFF00000000;
        uint64_t v54 = v11 ^ v51 ^ v52;
        LODWORD(v51) = v54 >> 23;
        LODWORD(v45) = v54 >> 15;
        unint64_t v79 = v53 | (v54 << 32);
        unint64_t v55 = v53 >> 7;
        unint64_t v56 = v53 >> 15;
        unint64_t v57 = v53 >> 23;
        uint64_t v58 = 2 * v53;
        uint64_t v59 = *(void *)(v17 + v58);
        uint64_t v60 = v55 & 0x1FE;
        uint64_t v61 = v9;
        uint64_t v62 = v25;
        uint64_t v63 = v17;
        unsigned int v64 = v54 >> 7;
        uint64_t v65 = v56 & 0x1FE;
        uint64_t v66 = v57 & 0x1FE;
        uint64_t v67 = 2 * v54;
        uint64_t v68 = v64 & 0x1FE;
        uint64_t v69 = v45 & 0x1FE;
        uint64_t v70 = v51 & 0x1FE;
        unint64_t v26 = v59 ^ *(void *)(v78 + v60) ^ *(void *)(v77 + v65) ^ *(void *)(v18 + v66) ^ *(void *)(v20 + v67) ^ *(void *)(v22 + v68) ^ *(void *)(v76 + v69) ^ *(void *)(v24 + v70) ^ v32;
        uint64_t v71 = *(void *)(v83 + v58) ^ *(void *)(v81 + v60) ^ *(void *)(v27 + v65) ^ *(void *)(v19 + v66);
        uint64_t v72 = *(void *)(v23 + v68);
        uint64_t v17 = v63;
        uint64_t v25 = v62;
        uint64_t v9 = v71 ^ *(void *)(v21 + v67) ^ v72 ^ *(void *)(v62 + v69) ^ *(void *)(v82 + v70) ^ v61;
        int v14 = v84;
        unint64_t v86 = v79;
        uint64_t v16 = &v39[(unint64_t)v12 / 8];
        int v30 = v80 + 1;
      }
      while (v80 != -1);
      v16 -= 2 * v12;
      int v15 = v75 - 1;
    }
    while (v75 > 1);
  }
  else
  {
    unint64_t v26 = v8;
  }
  uint64_t v85 = 0;
  unint64_t v86 = (v26 >> 3) & 0xF0F0F0F | (2 * v9) & 0xF0F0F0F0 | ((unint64_t)((2 * v11) & 0xF0F0F0F0 | (v10 >> 3) & 0xF0F0F0F) << 32);
  permute((unsigned __int8 *)&v86, (unint64_t *)&v85, CF6464, 8);
  *a2 = v85;
  return 0;
}

void setkey(const char *a1)
{
  uint64_t v1 = 0;
  uint64_t v4 = 0;
  do
  {
    uint64_t v2 = 0;
    char v3 = 0;
    do
      char v3 = a1[v2++] | (2 * v3);
    while (v2 != 8);
    a1 += 8;
    *((unsigned char *)&v4 + v1++) = v3;
  }
  while (v1 != 8);
  __crypt_des_setkey((unsigned __int8 *)&v4);
}

void encrypt(char *a1, int a2)
{
  uint64_t v13 = 0;
  if (!__crypt_des_setkey_called) {
    __crypt_des_setkey((unsigned __int8 *)&v13);
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v5 = 0;
    char v6 = 0;
    do
      char v6 = a1[v5++] | (2 * v6);
    while (v5 != 8);
    a1 += 8;
    *((unsigned char *)&v13 + i) = v6;
  }
  if (a2) {
    int v7 = -1;
  }
  else {
    int v7 = 1;
  }
  __crypt_des_cipher(&v13, &v13, 0, v7);
  uint64_t v8 = 7;
  do
  {
    uint64_t v9 = v8;
    unsigned int v10 = *((unsigned __int8 *)&v13 + v8);
    int v11 = -8;
    do
    {
      *--a1 = v10 & 1;
      v10 >>= 1;
    }
    while (!__CFADD__(v11++, 1));
    uint64_t v8 = v9 - 1;
  }
  while (v9);
}

uint64_t init_perm(uint64_t result, uint64_t a2)
{
  for (unint64_t i = 0; i != 64; ++i)
  {
    int v3 = *(unsigned __int8 *)(a2 + i);
    if (*(unsigned char *)(a2 + i))
    {
      uint64_t v4 = 0;
      unint64_t v5 = (v3 - 1);
      int v6 = 1 << ((v3 - 1) & 3);
      int v7 = (unsigned char *)(result + (i >> 3) + (((v5 >> 2) & 0x7FFFFFF) << 7));
      do
      {
        if ((v6 & v4) != 0) {
          *v7 |= 1 << (i & 7);
        }
        ++v4;
        v7 += 8;
      }
      while (v4 != 16);
    }
  }
  return result;
}

char *__cdecl devname_r(dev_t a1, mode_t a2, char *buf, int len)
{
  int v6 = a2;
  strcpy(v15, "/dev/");
  uint64_t v8 = opendir("/dev/");
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  memset(&v14, 0, sizeof(v14));
  unsigned int v10 = readdir(v8);
  if (!v10) {
    goto LABEL_12;
  }
  int v11 = v10;
  while (1)
  {
    j__mkostemp(&v15[5], v11 + 21);
    if (!lstat(v15, &v14) && v14.st_rdev == a1 && (v14.st_mode & 0xF000) == v6) {
      break;
    }
    int v11 = readdir(v9);
    if (!v11) {
      goto LABEL_12;
    }
  }
  if (v11->d_namlen < len) {
    j__strnstr(buf, v11->d_name, v12);
  }
  else {
LABEL_12:
  }
    buf = 0;
  closedir(v9);
  return buf;
}

char *__cdecl devname(dev_t a1, mode_t a2)
{
  uint64_t v4 = (char *)devname_buf;
  if (devname_buf
    || (result = (char *)malloc_type_malloc(0xFFuLL, 0xCB90A72CuLL), uint64_t v4 = result, (devname_buf = (uint64_t)result) != 0))
  {
    return devname_r(a1, a2, v4, 255);
  }
  return result;
}

char *getdiskbyname(char *a1)
{
  uint64_t v58 = 0;
  *(_OWORD *)uint64_t v59 = xmmword_1E543DE78;
  if (cgetent(&v58, v59, a1) < 0) {
    return 0;
  }
  int result = (char *)getdiskbyname_dp;
  if (getdiskbyname_dp
    || (int result = (char *)malloc_type_malloc(0x118uLL, 0x101204068DD910EuLL), (getdiskbyname_dp = (uint64_t)result) != 0))
  {
    *((void *)result + 34) = 0;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)int result = 0u;
    uint64_t v2 = result + 8;
    unint64_t v57 = result + 8;
    int v3 = v58;
    do
    {
      int v4 = *v3;
      *uint64_t v2 = v4;
      uint64_t v2 = v57;
      if (!v4) {
        break;
      }
      int v5 = *v57;
      if (v5 == 58) {
        break;
      }
      if (v5 == 124) {
        break;
      }
      uint64_t v2 = v57 + 1;
      unint64_t v57 = v2;
      ++v3;
    }
    while ((unint64_t)v2 < getdiskbyname_dp + 23);
    *uint64_t v2 = 0;
    cgetstr(v58, "b0", (char **)(getdiskbyname_dp + 24));
    cgetstr(v58, "b1", (char **)(getdiskbyname_dp + 32));
    int v6 = cgetstr(v58, "ty", &v57);
    uint64_t v9 = v57;
    if (v6 < 1 || j__strncasecmp_l(v57, "removable", v7, v8))
    {
      if (!v9 || j__strncasecmp_l(v9, "simulated", v7, v8)) {
        goto LABEL_17;
      }
      int v10 = 8;
    }
    else
    {
      int v10 = 1;
    }
    *(_DWORD *)(getdiskbyname_dp + 88) |= v10;
LABEL_17:
    if (cgetcap(v58, "sf", 58)) {
      *(_DWORD *)(getdiskbyname_dp + 88) |= 4u;
    }
    uint64_t v53 = 0;
    int v11 = cgetnum(v58, "se", &v53);
    int v12 = v53;
    if (v11 == -1) {
      int v12 = 512;
    }
    uint64_t v13 = getdiskbyname_dp;
    *(_DWORD *)(getdiskbyname_dp + 40) = v12;
    cgetnum(v58, "nt", (uint64_t *)(v13 + 48));
    cgetnum(v58, "ns", (uint64_t *)(getdiskbyname_dp + 44));
    cgetnum(v58, "nc", (uint64_t *)(getdiskbyname_dp + 52));
    if (cgetstr(v58, "dt", &v57) < 1)
    {
      uint64_t v53 = 0;
      int v14 = cgetnum(v58, "dt", &v53);
      __int16 v15 = v53;
      if (v14 == -1) {
        __int16 v15 = 0;
      }
      *(_WORD *)(getdiskbyname_dp + 4) = v15;
    }
    else
    {
      *(_WORD *)(getdiskbyname_dp + 4) = gettype(v57, (const char **)dktypenames);
    }
    uint64_t v53 = 0;
    if (cgetnum(v58, "sc", &v53) == -1)
    {
      uint64_t v17 = (_DWORD *)getdiskbyname_dp;
      int v16 = v17[12] * v17[11];
    }
    else
    {
      int v16 = v53;
      uint64_t v17 = (_DWORD *)getdiskbyname_dp;
    }
    v17[14] = v16;
    uint64_t v53 = 0;
    if (cgetnum(v58, "su", &v53) == -1)
    {
      uint64_t v19 = (_DWORD *)getdiskbyname_dp;
      int v18 = v19[13] * v19[14];
    }
    else
    {
      int v18 = v53;
      uint64_t v19 = (_DWORD *)getdiskbyname_dp;
    }
    v19[15] = v18;
    uint64_t v53 = 0;
    int v20 = cgetnum(v58, "rm", &v53);
    __int16 v21 = v53;
    if (v20 == -1) {
      __int16 v21 = 3600;
    }
    *(_WORD *)(getdiskbyname_dp + 72) = v21;
    uint64_t v53 = 0;
    int v22 = cgetnum(v58, "il", &v53);
    __int16 v23 = v53;
    if (v22 == -1) {
      __int16 v23 = 1;
    }
    *(_WORD *)(getdiskbyname_dp + 74) = v23;
    uint64_t v53 = 0;
    int v24 = cgetnum(v58, "sk", &v53);
    __int16 v25 = v53;
    if (v24 == -1) {
      __int16 v25 = 0;
    }
    *(_WORD *)(getdiskbyname_dp + 76) = v25;
    uint64_t v53 = 0;
    int v26 = cgetnum(v58, "cs", &v53);
    __int16 v27 = v53;
    if (v26 == -1) {
      __int16 v27 = 0;
    }
    *(_WORD *)(getdiskbyname_dp + 78) = v27;
    uint64_t v53 = 0;
    int v28 = cgetnum(v58, "hs", &v53);
    int v29 = v53;
    if (v28 == -1) {
      int v29 = 0;
    }
    *(_DWORD *)(getdiskbyname_dp + 80) = v29;
    uint64_t v53 = 0;
    int v30 = cgetnum(v58, "ts", &v53);
    int v31 = v53;
    if (v30 == -1) {
      int v31 = 0;
    }
    *(_DWORD *)(getdiskbyname_dp + 84) = v31;
    uint64_t v53 = 0;
    int v32 = cgetnum(v58, "bs", &v53);
    int v33 = v53;
    if (v32 == -1) {
      int v33 = 0x2000;
    }
    *(_DWORD *)(getdiskbyname_dp + 140) = v33;
    uint64_t v53 = 0;
    int v34 = cgetnum(v58, "sb", &v53);
    int v35 = v53;
    if (v34 == -1) {
      int v35 = 0x2000;
    }
    uint64_t v36 = getdiskbyname_dp;
    *(_DWORD *)(getdiskbyname_dp + 144) = v35;
    strcpy(&v56[4], "px");
    strcpy(v56, "bx");
    strcpy(&v55[4], "fx");
    strcpy(v55, "ox");
    strcpy(v54, "tx");
    uint64_t v37 = v36 + 148;
    unsigned __int8 v38 = 97;
    char v39 = 96;
    do
    {
      v54[1] = v38;
      v55[1] = v38;
      v55[5] = v38;
      v56[1] = v38;
      v56[5] = v38;
      if (cgetnum(v58, &v56[4], (uint64_t *)v37) == -1)
      {
        *(_DWORD *)uint64_t v37 = 0;
      }
      else
      {
        cgetnum(v58, v55, (uint64_t *)(v37 + 4));
        uint64_t v53 = 0;
        int v40 = cgetnum(v58, &v55[4], &v53);
        int v41 = v53;
        if (v40 == -1) {
          int v41 = 0;
        }
        *(_DWORD *)(v37 + 8) = v41;
        if (v41)
        {
          uint64_t v53 = 0;
          if (cgetnum(v58, v56, &v53)) {
            LOBYTE(v42) = 8;
          }
          else {
            uint64_t v42 = v53 / *(unsigned int *)(v37 + 8);
          }
          *(unsigned char *)(v37 + 13) = v42;
        }
        uint64_t v53 = 0;
        int v43 = cgetnum(v58, v54, &v53);
        char v44 = v53;
        if (v43 == -1) {
          char v44 = 0;
        }
        *(unsigned char *)(v37 + 12) = v44;
        char v39 = v38;
        if (!v44)
        {
          char v39 = v38;
          if (cgetstr(v58, v54, &v57) >= 1)
          {
            *(unsigned char *)(v37 + 12) = gettype(v57, (const char **)fstypenames);
            char v39 = v38;
          }
        }
      }
      unsigned int v45 = v38++;
      v37 += 16;
    }
    while (v45 < 0x68);
    uint64_t v46 = getdiskbyname_dp;
    *(_WORD *)(getdiskbyname_dp + 138) = v39 - 96;
    strcpy(&v56[4], "dx");
    uint64_t v47 = (_DWORD *)(v46 + 92);
    unsigned int v48 = 48;
    do
    {
      v56[5] = v48;
      uint64_t v53 = 0;
      int v49 = cgetnum(v58, &v56[4], &v53);
      int v50 = v53;
      if (v49 == -1) {
        int v50 = 0;
      }
      *v47++ = v50;
    }
    while (v48++ < 0x34);
    uint64_t v52 = getdiskbyname_dp;
    *(_DWORD *)getdiskbyname_dp = -2108275369;
    *(_DWORD *)(v52 + 132) = -2108275369;
    free(v58);
    return (char *)getdiskbyname_dp;
  }
  return result;
}

uint64_t gettype(char *a1, const char **a2)
{
  int v4 = *a2;
  if (v4)
  {
    uint64_t v5 = 0;
    int v6 = a2 + 1;
    while (strcasecmp(a1, v4))
    {
      int v4 = v6[v5++];
      if (!v4) {
        goto LABEL_5;
      }
    }
    return v5;
  }
LABEL_5:
  if ((*a1 - 48) > 9) {
    return 0;
  }

  return atoi(a1);
}

int filesec_unset_property(filesec_t a1, filesec_property_t a2)
{
  return filesec_set_property(a1, a2, 0);
}

int filesec_query_property(filesec_t a1, filesec_property_t a2, int *a3)
{
  switch(a2)
  {
    case FILESEC_OWNER:
      goto LABEL_8;
    case FILESEC_GROUP:
      a2 = FILESEC_GROUP;
      goto LABEL_8;
    case FILESEC_UUID:
      a2 = FILESEC_MODE;
      goto LABEL_8;
    case FILESEC_MODE:
      a2 = 16;
      goto LABEL_8;
    case FILESEC_ACL:
      goto LABEL_4;
    case FILESEC_GRPUUID:
      a2 = 8;
      goto LABEL_8;
    default:
      if (a2 - 100 >= 2)
      {
        *__error() = 22;
        return -1;
      }
      else
      {
LABEL_4:
        a2 = 32;
LABEL_8:
        int v3 = 0;
        *a3 = *(_DWORD *)a1 & a2;
      }
      return v3;
  }
}

FTS *__cdecl fts_open_b(char *const *a1, int a2, void *a3)
{
  if ((a2 & 0xFFFFF300) != 0)
  {
    *__error() = 22;
    return 0;
  }
  size_t v7 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B0040C1B4BCF7uLL);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (uint64_t)v7;
  stat v7[7] = _Block_copy(a3);
  *(_DWORD *)(v8 + 64) = (a2 >> 8) & 8 | a2 | 0x80000000;

  return (FTS *)__fts_open(a1, v8, v9);
}

FTSENT *__cdecl fts_children(FTS *a1, int a2)
{
  if ((a2 & 0xFFFFFEFF) != 0)
  {
    uint64_t v2 = __error();
    int result = 0;
    *uint64_t v2 = 22;
    return result;
  }
  fts_cuunsigned int r = a1->fts_cur;
  *__error() = 0;
  if ((a1->fts_options & 0x200) != 0) {
    return 0;
  }
  int fts_info = fts_cur->fts_info;
  if (fts_info != 1)
  {
    if (fts_info == 9) {
      return fts_cur->fts_link;
    }
    return 0;
  }
  fts_child = a1->fts_child;
  if (fts_child)
  {
    do
    {
      fts_linuint64_t k = fts_child->fts_link;
      fts_free(fts_child);
      fts_child = fts_link;
    }
    while (fts_link);
  }
  if (a2 == 256)
  {
    a1->fts_options |= 0x100u;
    int v10 = 2;
  }
  else
  {
    int v10 = 1;
  }
  if (fts_cur->fts_level || *fts_cur->fts_accpath == 47 || (a1->fts_options & 4) != 0)
  {
    a1->fts_child = (_ftsent *)fts_build((uint64_t)a1, v10);
    if (*__error()) {
      fts_cur->fts_errno = *__error();
    }
  }
  else
  {
    int v11 = open_NOCANCEL();
    if (v11 < 0) {
      return 0;
    }
    int v12 = v11;
    a1->fts_child = (_ftsent *)fts_build((uint64_t)a1, v10);
    if (*__error()) {
      fts_cur->fts_errno = *__error();
    }
    int v13 = fts_fchdir((uint64_t)a1, v12);
    close_NOCANCEL();
    if (v13) {
      return 0;
    }
  }
  return a1->fts_child;
}

uint64_t fts_sort(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  if (*(_DWORD *)(a1 + 48) >= (signed int)a3)
  {
    int v6 = *(void **)(a1 + 16);
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 48) = a3 + 40;
  int v6 = (void *)reallocarray_DARWIN_EXTSN();
  if (!v6)
  {
    free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    return v4;
  }
  for (*(void *)(a1 + 16) = v6; v4; uint64_t v4 = *(void *)(v4 + 16))
LABEL_6:
    *v6++ = v4;
LABEL_7:
  size_t v7 = *(void **)(a1 + 16);
  uint64_t v8 = *(void **)(a1 + 56);
  if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0) {
    qsort_b(v7, a3, 8uLL, v8);
  }
  else {
    qsort(v7, a3, 8uLL, (int (__cdecl *)(const void *, const void *))v8);
  }
  size_t v9 = *(void **)(a1 + 16);
  uint64_t v4 = *v9;
  uint64_t v10 = *v9;
  unsigned int v11 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      int v12 = v9;
      uint64_t v13 = v9[1];
      ++v9;
      *(void *)(*v12 + 16) = v13;
      --v11;
    }
    while (v11);
    uint64_t v10 = *v9;
  }
  *(void *)(v10 + 16) = 0;
  return v4;
}

BOOL compat_mode(const char *function, const char *mode)
{
  uint64_t v2 = (char *)mode;
  char v3 = 0;
  uint64_t v4 = mode - 1;
  if ((parsed & 1) == 0)
  {
    pthread_once(&threadsafe, (void (*)(void))check_env_var);
    parsed = 1;
  }
  while (1)
  {
    if (!strcasecmp("unix2003", v2))
    {
      char v7 = unix2003_mode ^ 1;
      return (v3 ^ v7) & 1;
    }
    if (!strcasecmp("legacy", v2))
    {
      char v7 = unix2003_mode;
      return (v3 ^ v7) & 1;
    }
    if (!strcasecmp("bootstrap", v2)) {
      goto LABEL_19;
    }
    if (!strcasecmp("error", v2))
    {
      char v7 = parse_error;
      return (v3 ^ v7) & 1;
    }
    uint64_t v5 = strpbrk(v2, "!^&|");
    if (!v5) {
      goto LABEL_18;
    }
    int v6 = v5;
    if (*v5 != 33) {
      break;
    }
    if (v2 != v5) {
      goto LABEL_18;
    }
    ++v2;
    v3 ^= 1u;
    ++v4;
  }
  uint64_t v8 = (char *)malloc_type_malloc(v5 - v4, 0xA0BB79ABuLL);
  MEMORY[0x18C122F90](v8, v2, v6 - v4);
  BOOL v9 = compat_mode(function, v8);
  free(v8);
  BOOL v10 = compat_mode(function, v6 + 1);
  int v11 = *v6;
  switch(v11)
  {
    case '&':
      char v7 = v9 && v10;
      break;
    case '|':
      char v7 = v9 || v10;
      break;
    case '^':
      char v7 = v9 ^ v10;
      return (v3 ^ v7) & 1;
    default:
LABEL_18:
      fprintf(__stderrp, "invalid mode %s (while checking for %s)\n", v2, function);
LABEL_19:
      char v7 = 0;
      return (v3 ^ v7) & 1;
  }
  return (v3 ^ v7) & 1;
}

const char *check_env_var()
{
  int result = getenv("COMMAND_MODE");
  if (result)
  {
    uint64_t v1 = result;
    int result = (const char *)strcasecmp(result, "legacy");
    int v2 = (int)result;
    if (result)
    {
      int result = (const char *)strcasecmp(v1, "unix2003");
      if (result) {
        parse_errounsigned int r = 1;
      }
    }
    unix2003_mode = v2 == 0;
  }
  return result;
}

int getloadavg(double a1[], int a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  *(void *)uint64_t v13 = 0x200000002;
  size_t v10 = 24;
  if (sysctl(v13, 2u, v11, &v10, 0, 0) < 0)
  {
    LODWORD(v4) = -1;
  }
  else
  {
    if (a2 >= 3) {
      uint64_t v4 = 3;
    }
    else {
      uint64_t v4 = a2;
    }
    if (v4)
    {
      double v5 = (double)v12;
      int v6 = (unsigned int *)v11;
      uint64_t v7 = v4;
      do
      {
        unsigned int v8 = *v6++;
        *a1++ = (double)v8 / v5;
        --v7;
      }
      while (v7);
    }
  }
  return v4;
}

ttyent *__cdecl getttynam(const char *a1)
{
  setttyent();
  do
  {
    int v2 = getttyent();
    double v5 = v2;
  }
  while (v2 && j__strncasecmp_l(a1, v2->ty_name, v3, v4));
  if (tf)
  {
    fclose((FILE *)tf);
    tf = 0;
  }
  return v5;
}

int setttyent(void)
{
  int v0 = (void *)seq;
  if (seq) {
    goto LABEL_2;
  }
  if (regcomp(&brapreg, "\\[(.*)]", 1)) {
    return 0;
  }
  if (regcomp(&decpreg, "^([0-9]+)-([0-9]+)$", 1))
  {
LABEL_8:
    regfree(&brapreg);
    return 0;
  }
  if (regcomp(&hexpreg, "^0x([0-9a-f]+)-0x([0-9a-f]+)$", 3))
  {
LABEL_7:
    regfree(&decpreg);
    goto LABEL_8;
  }
  int v0 = malloc_type_malloc(0x11CuLL, 0x1000040F3ACBFE9uLL);
  seq = (uint64_t)v0;
  if (!v0)
  {
    regfree(&hexpreg);
    goto LABEL_7;
  }
LABEL_2:
  *int v0 = 0;
  slot = 1;
  if (tf)
  {
    rewind((FILE *)tf);
    return 1;
  }
  else
  {
    tf = (uint64_t)fopen("/etc/ttys", "r");
    return tf != 0;
  }
}

ttyent *getttyent(void)
{
  uint64_t v0 = __locale_key;
  uint64_t v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1) {
    int v2 = v1;
  }
  else {
    int v2 = (_xlocale *)&__global_locale;
  }
  if (!getttyent_line)
  {
    getttyent_line = (uint64_t)malloc_type_malloc(0x400uLL, 0x49ACCA7BuLL);
    if (!getttyent_line) {
      return 0;
    }
  }
  if (!tf && !setttyent()) {
    return 0;
  }
  int v3 = slot;
  uint64_t v4 = seq;
  int v5 = *(_DWORD *)seq;
  if (slot >= *(_DWORD *)seq)
  {
    int v6 = (ttyent *)&getttyent_tty;
    uint64_t v7 = &_DefaultRuneLocale.__runetype[9];
    do
    {
      if (*(int *)(v4 + 4) >= 1)
      {
        uint64_t v59 = (char *)getttyent_tty;
        uint64_t v60 = *(unsigned int *)(v4 + 8);
        *(_DWORD *)(v4 + 8) = v60 + 1;
        sprintf(v59, (const char *)(v4 + 12), v60);
        ++slot;
        --*(_DWORD *)(seq + 4);
        return v6;
      }
      if (v3 == v5)
      {
        int v61 = v5 + 1;
        goto LABEL_111;
      }
      do
      {
        while (1)
        {
          uint64_t v8 = getttyent_line;
          if (!fgets((char *)getttyent_line, 1024, (FILE *)tf)) {
            return 0;
          }
          v9.s_addunsigned int r = v8;
          if (j__inet_lnaof(v9)) {
            break;
          }
          do
            int v13 = getc((FILE *)tf);
          while (v13 != 10 && v13 != -1);
        }
        size_t v10 = (char *)(v8 - 1);
        do
        {
          __darwin_ct_rune_t v11 = v10[1];
          if (v11 < 0) {
            LOWORD(v12) = ___runetype_l(v11, v2);
          }
          else {
            __uint32_t v12 = _DefaultRuneLocale.__runetype[v11];
          }
          ++v10;
        }
        while ((v12 & 0x4000) != 0);
      }
      while (!*v10 || *v10 == 35);
      *((unsigned char *)v7 + 3568) = 0;
      getttyent_tty = (uint64_t)v10;
      __int16 v15 = skip(v10);
      int v18 = v15;
      qword_1E911AD88 = (uint64_t)v15;
      if (*v15)
      {
        uint64_t v19 = skip(v15);
        int v18 = v19;
        qword_1E911AD90 = (uint64_t)v19;
        if (*v19) {
          int v18 = skip(v19);
        }
        else {
          qword_1E911AD90 = 0;
        }
      }
      else
      {
        qword_1E911AD88 = 0;
        qword_1E911AD90 = 0;
      }
      dword_1E911AD98 = 0;
      qword_1E911ADA8 = 0;
      qword_1E911ADB0 = 0;
      qword_1E911ADA0 = 0;
      if (*v18)
      {
        int v65 = -1;
        while (1)
        {
          if (!j__strsvisx(v18, "off", 3uLL, v16, v17))
          {
            __darwin_ct_rune_t v36 = v18[3];
            if (v36 < 0)
            {
              if ((___runetype_l(v36, v2) & 0x4000) != 0)
              {
LABEL_71:
                int v46 = dword_1E911AD98 & 0xFFFFFFFE;
LABEL_76:
                dword_1E911AD98 = v46;
                goto LABEL_77;
              }
            }
            else if ((_DefaultRuneLocale.__runetype[v36] & 0x4000) != 0)
            {
              goto LABEL_71;
            }
          }
          if (!j__strsvisx(v18, "on", 2uLL, v20, v21))
          {
            __darwin_ct_rune_t v42 = v18[2];
            if (v42 < 0)
            {
              if ((___runetype_l(v42, v2) & 0x4000) != 0)
              {
LABEL_73:
                int v46 = dword_1E911AD98 | 1;
                goto LABEL_76;
              }
            }
            else if ((_DefaultRuneLocale.__runetype[v42] & 0x4000) != 0)
            {
              goto LABEL_73;
            }
          }
          if (!j__strsvisx(v18, "secure", 6uLL, v22, v23))
          {
            __darwin_ct_rune_t v45 = v18[6];
            if (v45 < 0)
            {
              if ((___runetype_l(v45, v2) & 0x4000) != 0)
              {
LABEL_75:
                int v46 = dword_1E911AD98 | 2;
                goto LABEL_76;
              }
            }
            else if ((_DefaultRuneLocale.__runetype[v45] & 0x4000) != 0)
            {
              goto LABEL_75;
            }
          }
          if (j__strsvisx(v18, "window", 6uLL, v24, v25) || v18[6] != 61)
          {
            if (j__strsvisx(v18, "onerror", 7uLL, v26, v27) || v18[7] != 61)
            {
              if (j__strsvisx(v18, "onoption", 8uLL, v31, v32) || v18[8] != 61)
              {
                if (j__strsvisx(v18, "slot", 4uLL, v37, v38) || v18[4] != 61) {
                  goto LABEL_80;
                }
                v43.s_addunsigned int r = v18;
                uint64_t v44 = j__inet_lnaof(v43);
                if (v44) {
                  int v65 = atoi((const char *)(v44 + 1));
                }
              }
              else
              {
                v39.s_addunsigned int r = v18;
                uint64_t v40 = j__inet_lnaof(v39);
                if (v40) {
                  uint64_t v41 = v40 + 1;
                }
                else {
                  uint64_t v41 = 0;
                }
                qword_1E911ADB0 = v41;
              }
            }
            else
            {
              v33.s_addunsigned int r = v18;
              uint64_t v34 = j__inet_lnaof(v33);
              if (v34) {
                uint64_t v35 = v34 + 1;
              }
              else {
                uint64_t v35 = 0;
              }
              qword_1E911ADA8 = v35;
            }
          }
          else
          {
            v28.s_addunsigned int r = v18;
            uint64_t v29 = j__inet_lnaof(v28);
            if (v29) {
              uint64_t v30 = v29 + 1;
            }
            else {
              uint64_t v30 = 0;
            }
            qword_1E911ADA0 = v30;
          }
LABEL_77:
          int v18 = skip(v18);
          if (!*v18) {
            goto LABEL_80;
          }
        }
      }
      int v65 = -1;
LABEL_80:
      if (zapchar == 35 || *v18 == 35)
      {
        do
        {
          int v48 = *++v18;
          int v47 = v48;
        }
        while (v48 == 32 || v47 == 9);
      }
      qword_1E911ADB8 = (uint64_t)v18;
      if (*v18) {
        uint64_t v50 = (uint64_t)v18;
      }
      else {
        uint64_t v50 = 0;
      }
      qword_1E911ADB8 = v50;
      v51.s_addunsigned int r = v18;
      uint64_t v52 = (unsigned char *)j__inet_lnaof(v51);
      if (v52) {
        *uint64_t v52 = 0;
      }
      if (regexec(&brapreg, (const char *)getttyent_tty, 3uLL, &__pmatch, 0)) {
        goto LABEL_92;
      }
      regoff_t rm_eo = __pmatch.rm_eo;
      int rm_so = __pmatch.rm_so;
      regmatch_t v66 = v68;
      regmatch_t __pmatch = v68;
      int v62 = regexec(&decpreg, (const char *)getttyent_tty, 3uLL, &__pmatch, 4);
      if (v62)
      {
        regmatch_t __pmatch = v66;
        if (regexec(&hexpreg, (const char *)getttyent_tty, 3uLL, &__pmatch, 4)) {
          goto LABEL_92;
        }
        int v53 = 16;
      }
      else
      {
        int v53 = 10;
      }
      uint64_t v54 = strtol((const char *)(getttyent_tty + v68.rm_so), 0, v53);
      uint64_t v55 = strtol((const char *)(getttyent_tty + v69), 0, v53);
      if (v55 < v54)
      {
        int v3 = slot;
        uint64_t v4 = seq;
        uint64_t v7 = (_DWORD *)(&_DefaultRuneLocale + 96);
        goto LABEL_102;
      }
      uint64_t v56 = seq;
      *(_DWORD *)(seq + 4) = v55 - v54 + 1;
      *(_DWORD *)(v56 + 8) = v54;
      uint64_t v57 = 120;
      if (!v62) {
        uint64_t v57 = 100;
      }
      sprintf((char *)(v56 + 12), "%.*s%%0%d%c%s", rm_so, (const char *)getttyent_tty, LODWORD(v68.rm_eo) - LODWORD(v68.rm_so), v57, (const char *)(getttyent_tty + rm_eo));
LABEL_92:
      int v3 = slot;
      uint64_t v4 = seq;
      if (v65 <= slot)
      {
        uint64_t v7 = (_DWORD *)(&_DefaultRuneLocale + 96);
        if (*(int *)(seq + 4) <= 0)
        {
          int v61 = slot + 1;
LABEL_111:
          slot = v61;
          return (ttyent *)&getttyent_tty;
        }
      }
      else
      {
        *(_DWORD *)seq = v65;
        uint64_t v7 = (_DWORD *)(&_DefaultRuneLocale + 96);
      }
LABEL_102:
      int v5 = *(_DWORD *)v4;
    }
    while (v3 >= *(_DWORD *)v4);
  }
  slot = v3 + 1;
  return (ttyent *)&getttyent_nonexistent;
}

int endttyent(void)
{
  if (!tf) {
    return 1;
  }
  int result = fclose((FILE *)tf) != -1;
  tf = 0;
  return result;
}

char *skip(char *result)
{
  int v1 = 0;
  int v2 = result;
  while (1)
  {
    int v3 = *result;
    if (v3 == 34)
    {
      v1 ^= 1u;
      goto LABEL_13;
    }
    if (!*result) {
      goto LABEL_26;
    }
    if (v1 == 1 && v3 == 92)
    {
      int v4 = result[1];
      BOOL v5 = v4 == 34;
      if (v4 == 34) {
        char v6 = 34;
      }
      else {
        char v6 = 92;
      }
      if (v5) {
        ++result;
      }
      *v2++ = v6;
      int v1 = 1;
      goto LABEL_13;
    }
    *v2++ = v3;
    if (v1 == 1) {
      goto LABEL_13;
    }
    if ((v3 - 9) < 2 || v3 == 32) {
      break;
    }
    if (v3 == 35)
    {
      zapchaunsigned int r = 35;
      *int result = 0;
      goto LABEL_26;
    }
    int v1 = 0;
LABEL_13:
    ++result;
  }
  zapchaunsigned int r = v3;
  *result++ = 0;
  while (1)
  {
    unsigned int v7 = *result;
    BOOL v8 = v7 > 0x20;
    uint64_t v9 = (1 << v7) & 0x100000600;
    if (v8 || v9 == 0) {
      break;
    }
    ++result;
  }
LABEL_26:
  *(v2 - 1) = 0;
  return result;
}

char *getusershell(void)
{
  uint64_t v0 = (char **)curshell;
  if (!curshell)
  {
    uint64_t v0 = initshells();
    curshell = (uint64_t)v0;
  }
  int v1 = *v0;
  if (*v0) {
    curshell = (uint64_t)(v0 + 1);
  }
  return v1;
}

char **initshells()
{
  memset(&v13, 0, sizeof(v13));
  uint64_t v0 = __locale_key;
  int v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1) {
    int v2 = v1;
  }
  else {
    int v2 = (_xlocale *)&__global_locale;
  }
  if (shells) {
    free((void *)shells);
  }
  shells = 0;
  if (strings) {
    free((void *)strings);
  }
  strings = 0;
  int v3 = fopen("/etc/shells", "r");
  if (!v3) {
    return okshells;
  }
  int v4 = v3;
  int v5 = fileno(v3);
  if (fstat(v5, &v13) == -1 || (strings = (uint64_t)malloc_type_malloc(LODWORD(v13.st_size), 0x768E90E3uLL)) == 0)
  {
    fclose(v4);
    return okshells;
  }
  char v6 = (char **)malloc_type_calloc(LODWORD(v13.st_size) / 3uLL, 8uLL, 0x10040436913F5uLL);
  shells = (uint64_t)v6;
  if (!v6)
  {
    fclose(v4);
    free((void *)strings);
    strings = 0;
    return okshells;
  }
  unsigned int v7 = v6;
  for (unint64_t i = (char *)strings; fgets(i, 1025, v4); *(i - 1) = 0)
  {
    for (unint64_t j = i; ; ++j)
    {
      ++i;
      while (1)
      {
        int v10 = *j;
        if (*j)
        {
          if (v10 != 35) {
            break;
          }
        }
        if (!fgets(j, 1025, v4)) {
          goto LABEL_30;
        }
      }
      if (v10 == 47) {
        break;
      }
    }
    *v7++ = j;
    while (1)
    {
      __darwin_ct_rune_t v11 = *(i - 1);
      if (v11 < 0)
      {
        if ((___runetype_l(v11, v2) & 0x4000) != 0) {
          break;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v11] & 0x4000) != 0)
      {
        break;
      }
      if (!*(i - 1) || *(i - 1) == 35) {
        break;
      }
      ++i;
    }
  }
LABEL_30:
  *unsigned int v7 = 0;
  fclose(v4);
  return (char **)shells;
}

void endusershell(void)
{
  if (shells) {
    free((void *)shells);
  }
  shells = 0;
  if (strings) {
    free((void *)strings);
  }
  strings = 0;
  curshell = 0;
}

void setusershell(void)
{
  curshell = (uint64_t)initshells();
}

int getvfsbyname(const char *a1, vfsconf *a2)
{
  int v9 = 0;
  *(void *)int v10 = 3;
  int v11 = 1;
  size_t v8 = 4;
  if ((sysctl(v10, 3u, &v9, &v8, 0, 0) & 0x80000000) == 0)
  {
    int v11 = 2;
    size_t v8 = 40;
    if (v9 >= 1)
    {
      for (int i = 0; i < v9; ++i)
      {
        int v12 = i;
        if (sysctl(v10, 4u, a2, &v8, 0, 0) < 0)
        {
          if (*__error() != 45) {
            return -1;
          }
        }
        else
        {
          int result = j__strncasecmp_l(a1, a2->vfc_name, v5, v6);
          if (!result) {
            return result;
          }
        }
      }
    }
    *__error() = 2;
  }
  return -1;
}

int ftw(const char *a1, int (__cdecl *a2)(const char *, const stat *, int), int a3)
{
  return both_ftw((char *)a1, (uint64_t (*)(char *, stat *, uint64_t))a2, 0, a3, 1);
}

uint64_t both_ftw(char *a1, uint64_t (*a2)(char *, stat *, uint64_t), uint64_t (*a3)(char *, stat *, uint64_t, uint64_t *), int a4, char a5)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  if ((a4 - 10241) <= 0xFFFFD7FF)
  {
    *__error() = 22;
    int v5 = -1;
    goto LABEL_3;
  }
  if ((a5 & 8) != 0) {
    int v13 = 1;
  }
  else {
    int v13 = 5;
  }
  unsigned int v14 = a5 & 2;
  unsigned int v15 = v13 & 0xFFFFFFBF | (((v14 >> 1) & 1) << 6);
  if (a5) {
    int v16 = 16;
  }
  else {
    int v16 = 2;
  }
  int v17 = v15 | v16;
  if ((a5 & 8) != 0)
  {
    int v5 = open_NOCANCEL();
    if (v5 < 0) {
      goto LABEL_3;
    }
    v17 |= 4u;
  }
  else
  {
    int v5 = -1;
  }
  memset(&v33, 0, sizeof(v33));
  if ((stat(a1, &v33) & 0x80000000) == 0)
  {
    if (!a3 || (v33.st_mode & 0xF000) == 0x4000) {
      goto LABEL_19;
    }
    *__error() = 20;
LABEL_3:
    int v6 = *__error();
    uint64_t v7 = 0xFFFFFFFFLL;
    if (v5 < 0) {
      goto LABEL_5;
    }
LABEL_4:
    close_NOCANCEL();
    goto LABEL_5;
  }
  if (*__error() == 62 || *__error() == 63 || *__error() == 2 || *__error() == 20 || *__error() == 13) {
    goto LABEL_3;
  }
LABEL_19:
  uint64_t v35 = a1;
  uint64_t v36 = 0;
  int v18 = fts_open(&v35, v17, 0);
  if (!v18) {
    goto LABEL_3;
  }
  uint64_t v19 = v18;
  int v20 = fts_read(v18);
  if (!v20)
  {
LABEL_71:
    uint64_t v7 = 0;
    goto LABEL_72;
  }
  __int16 v21 = v20;
  if (a3) {
    int v22 = 6;
  }
  else {
    int v22 = 5;
  }
  unsigned int v31 = v22;
  while (2)
  {
    uint64_t v7 = 0xFFFFFFFFLL;
    uint64_t v23 = 2;
    switch(v21->fts_info)
    {
      case 1u:
        if ((a5 & 4) != 0 || v14 && v21->fts_statp->st_dev != v33.st_dev || access(v21->fts_path, 4)) {
          goto LABEL_58;
        }
        goto LABEL_39;
      case 2u:
        if (!((a3 == 0) | a5 & 1))
        {
          if ((a5 & 4) == 0)
          {
LABEL_39:
            uint64_t v23 = 1;
            if ((v5 & 0x80000000) == 0)
            {
LABEL_48:
              fts_path = v21->fts_path;
              if (v23 == 1)
              {
                int v25 = chdir(fts_path);
              }
              else
              {
                int v26 = strdup(fts_path);
                v26[v21->fts_pathlen - v21->fts_namelen] = 0;
                int v25 = chdir(v26);
                free(v26);
              }
              if (v25 < 0)
              {
                uint64_t v7 = 0xFFFFFFFFLL;
                if (v23 == 2 && v21->fts_pathlen == v21->fts_namelen)
                {
                  uint64_t v29 = __error();
                  int v30 = 24;
                  goto LABEL_79;
                }
                goto LABEL_72;
              }
            }
LABEL_52:
            if (a3)
            {
              int fts_level = v21->fts_level;
              LODWORD(v34) = v21->fts_pathlen - v21->fts_namelen;
              HIDWORD(v34) = fts_level;
              uint64_t v28 = a3(v21->fts_path, v21->fts_statp, v23, &v34);
            }
            else
            {
              uint64_t v28 = a2(v21->fts_path, v21->fts_statp, v23);
            }
            uint64_t v7 = v28;
            if ((v5 & 0x80000000) == 0 && fchdir(v5) < 0)
            {
              uint64_t v7 = 0xFFFFFFFFLL;
              goto LABEL_72;
            }
            if (v7) {
              goto LABEL_72;
            }
          }
LABEL_58:
          __int16 v21 = fts_read(v19);
          if (!v21) {
            goto LABEL_71;
          }
          continue;
        }
        uint64_t v29 = __error();
        int v30 = 62;
LABEL_79:
        *uint64_t v29 = v30;
LABEL_72:
        int v6 = *__error();
        fts_close(v19);
        if ((v5 & 0x80000000) == 0) {
          goto LABEL_4;
        }
LABEL_5:
        *__error() = v6;
        return v7;
      case 3u:
      case 8u:
        if (v14 && v21->fts_statp->st_dev != v33.st_dev) {
          goto LABEL_58;
        }
        uint64_t v23 = 0;
        if (v5 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      case 4u:
        goto LABEL_47;
      case 6u:
        if ((a5 & 4) == 0 || v14 && v21->fts_statp->st_dev != v33.st_dev) {
          goto LABEL_58;
        }
        uint64_t v23 = 3;
        if (v5 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      case 0xAu:
      case 0xBu:
        uint64_t v23 = 4;
        if (v5 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      case 0xCu:
        uint64_t v23 = 5;
LABEL_47:
        if ((v5 & 0x80000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_52;
      case 0xDu:
        memset(&v32, 0, sizeof(v32));
        if (stat(v21->fts_path, &v32) < 0 && *__error() == 62) {
          goto LABEL_72;
        }
        uint64_t v23 = v31;
        if (v5 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      default:
        goto LABEL_72;
    }
  }
}

int nftw(const char *a1, int (__cdecl *a2)(const char *, const stat *, int, FTW *), int a3, int a4)
{
  return both_ftw((char *)a1, 0, (uint64_t (*)(char *, stat *, uint64_t, uint64_t *))a2, a3, a4);
}

int sigemptyset(sigset_t *a1)
{
  *a1 = 0;
  return 0;
}

int sigfillset(sigset_t *a1)
{
  *a1 = -1;
  return 0;
}

int sigaddset(sigset_t *a1, int a2)
{
  if (a2 < 0x21)
  {
    if (a2)
    {
      int result = 0;
      *a1 |= 1 << (a2 - 1);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return result;
}

int sigdelset(sigset_t *a1, int a2)
{
  if (a2 < 0x21)
  {
    if (a2)
    {
      int result = 0;
      *a1 &= ~(1 << (a2 - 1));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return result;
}

int sigismember(const sigset_t *a1, int a2)
{
  if (a2 < 0x21)
  {
    if (a2) {
      return (*a1 >> (a2 - 1)) & 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    *__error() = 22;
    return -1;
  }
}

char *__cdecl fflagstostr(unint64_t a1)
{
  int result = (char *)malloc_type_malloc(0x111uLL, 0x74B51EB3uLL);
  if (result)
  {
    uint64_t v3 = 0;
    int v4 = result;
    do
    {
      int v5 = &(&mapping)[3 * v3];
      unint64_t v6 = (unint64_t)v5[1];
      if ((v6 & a1) != 0)
      {
        if (v4 > result) {
          *v4++ = 44;
        }
        uint64_t v7 = (uint64_t)(*v5 + 2);
        if (v3 == 15) {
          size_t v8 = "nodump";
        }
        else {
          size_t v8 = (const char *)v7;
        }
        char v9 = *v8;
        if (*v8)
        {
          int v10 = (unsigned __int8 *)(v8 + 1);
          do
          {
            *v4++ = v9;
            int v11 = *v10++;
            char v9 = v11;
          }
          while (v11);
        }
        a1 &= ~v6;
      }
      ++v3;
    }
    while (v3 != 21);
    *int v4 = 0;
  }
  return result;
}

int strtofflags(char **a1, unint64_t *a2, unint64_t *a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  __stringp = *a1;
  unint64_t v6 = strsep(&__stringp, "\t ,");
  if (v6)
  {
    char v9 = v6;
    while (1)
    {
      *a1 = v9;
      if (*v9)
      {
        uint64_t v10 = 0;
        int v11 = &qword_1E543E240;
        while (1)
        {
          int v12 = (const char *)*(v11 - 1);
          if (!j__strncasecmp_l(v9, v12 + 2, v7, v8)) {
            break;
          }
          if (!j__strncasecmp_l(v9, v12, v13, v14))
          {
            if (v10 == 15)
            {
              unsigned int v15 = a2;
              if (!a2) {
                goto LABEL_25;
              }
              goto LABEL_18;
            }
            if (a3)
            {
              int v16 = a3;
              goto LABEL_23;
            }
            goto LABEL_24;
          }
          ++v10;
          v11 += 3;
          if (v10 == 21) {
            goto LABEL_27;
          }
        }
        if (v10 == 15)
        {
          unsigned int v15 = a3;
          if (!a3) {
            goto LABEL_25;
          }
LABEL_18:
          *v15 |= *v11;
          goto LABEL_25;
        }
        if (a2)
        {
          int v16 = a2;
LABEL_23:
          *v16 |= *v11;
        }
LABEL_24:
        if (v10 == 21) {
          break;
        }
      }
LABEL_25:
      unint64_t v6 = strsep(&__stringp, "\t ,");
      char v9 = v6;
      if (!v6) {
        return (int)v6;
      }
    }
LABEL_27:
    LODWORD(v6) = 1;
  }
  return (int)v6;
}

uint64_t _thread_stack_async_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  return __thread_stack_pcs(a1, a2, a3, a4 + 1, a5, 1);
}

uint64_t thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3)
{
  return __thread_stack_pcs(a1, a2, a3, 0, 0, 0);
}

lastlogx *__cdecl getlastlogx(uid_t a1, lastlogx *a2)
{
  memset(&v7, 0, sizeof(v7));
  uint64_t v3 = _pwuid_r(a1, &v7);
  if (!v3) {
    return 0;
  }
  int v4 = v3;
  int v5 = getlastlogxbyname(v7.pw_name, a2);
  free(v4);
  return v5;
}

char *_pwuid_r(uid_t a1, passwd *a2)
{
  size_t v4 = pw_size;
  if (!pw_size)
  {
    size_t v4 = sysconf(71);
    pw_unint64_t size = v4;
    if (!v4) {
      return 0;
    }
  }
  int v5 = (char *)malloc_type_malloc(v4, 0x2C9BF49DuLL);
  if (v5)
  {
    passwd v7 = 0;
    getpwuid_r(a1, a2, v5, pw_size, &v7);
    if (!v7)
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

lastlogx *__cdecl getlastlogxbyname(const char *a1, lastlogx *a2)
{
  if (!a1) {
    return 0;
  }
  if (!*a1) {
    return 0;
  }
  size_t v4 = asl_new(1u);
  if (!v4) {
    return 0;
  }
  int v5 = v4;
  asl_set_query(v4, "Facility", "com.apple.system.lastlog", 1u);
  asl_set_query(v5, "ut_user", a1, 1u);
  unint64_t v6 = asl_new(2u);
  if (!v6) {
    goto LABEL_18;
  }
  passwd v7 = v6;
  asl_append(v6, v5);
  asl_release(v5);
  uint64_t v15 = 0;
  int v5 = (__asl_object_s *)MEMORY[0x18C1224A0](0, v7, &v15, -1, 1, 4000000, 0xFFFFFFFFLL);
  asl_release(v7);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = MEMORY[0x18C1224C0](v5);
  if (!v8)
  {
LABEL_18:
    asl_release(v5);
    return 0;
  }
  char v9 = (__asl_object_s *)v8;
  if (a2 || (a2 = (lastlogx *)malloc_type_malloc(0x130uLL, 0x1000040DDA6C183uLL)) != 0)
  {
    *(_OWORD *)&a2->ll_host[224] = 0u;
    *(_OWORD *)&a2->ll_host[240] = 0u;
    *(_OWORD *)&a2->ll_host[192] = 0u;
    *(_OWORD *)&a2->ll_host[208] = 0u;
    *(_OWORD *)&a2->ll_host[160] = 0u;
    *(_OWORD *)&a2->ll_host[176] = 0u;
    *(_OWORD *)&a2->ll_host[128] = 0u;
    *(_OWORD *)&a2->ll_host[144] = 0u;
    *(_OWORD *)&a2->ll_host[96] = 0u;
    *(_OWORD *)&a2->ll_host[112] = 0u;
    *(_OWORD *)&a2->ll_host[64] = 0u;
    *(_OWORD *)&a2->ll_host[80] = 0u;
    *(_OWORD *)&a2->ll_host[32] = 0u;
    *(_OWORD *)&a2->ll_host[48] = 0u;
    *(_OWORD *)a2->ll_host = 0u;
    *(_OWORD *)&a2->ll_host[16] = 0u;
    *(_OWORD *)a2->ll_line = 0u;
    *(_OWORD *)&a2->ll_line[16] = 0u;
    a2->ll_tv = 0u;
    uint64_t v10 = (char **)asl_get(v9, "ut_line");
    if (v10) {
      j__strtod(a2->ll_line, v10);
    }
    int v11 = asl_get(v9, "ut_tv.tv_sec");
    if (v11) {
      a2->ll_tv.__darwin_time_t tv_sec = strtol(v11, 0, 10);
    }
    int v12 = asl_get(v9, "ut_tv.tv_usec");
    if (v12) {
      a2->ll_tv.tv_usec = strtol(v12, 0, 10);
    }
    size_t v13 = (char **)asl_get(v9, "ut_host");
    if (v13) {
      j__strtod(a2->ll_host, v13);
    }
  }
  asl_release(v5);
  return a2;
}

void _utmpx_asl(uint64_t a1)
{
  asl_object_t v2 = asl_open(0, 0, 4u);
  if (*(_WORD *)(a1 + 296))
  {
    uint64_t v3 = v2;
    size_t v4 = asl_new(0);
    if (v4)
    {
      int v5 = v4;
      if (*(_WORD *)(a1 + 296) == 7) {
        unint64_t v6 = "com.apple.system.lastlog";
      }
      else {
        unint64_t v6 = "com.apple.system.utmpx";
      }
      asl_set(v4, "Facility", v6);
      asl_set(v5, "Level", "5");
      if (*(unsigned char *)a1)
      {
        j__strtod(value, (char **)a1);
        char v14 = 0;
        asl_set(v5, "ut_user", value);
      }
      passwd v7 = (char *)(a1 + 256);
      uint64_t v8 = (char *)(a1 + 259);
      while (v8 >= v7)
      {
        __darwin_ct_rune_t v9 = *v8;
        if (v9 < 0) {
          unint64_t v10 = ___runetype(v9);
        }
        else {
          LODWORD(v10) = _DefaultRuneLocale.__runetype[v9];
        }
        --v8;
        if ((v10 & 0x40000) == 0)
        {
          snprintf(value, 0x101uLL, "0x%02x 0x%02x 0x%02x 0x%02x", *(char *)(a1 + 256), *(char *)(a1 + 257), *(char *)(a1 + 258), *(char *)(a1 + 259));
          goto LABEL_20;
        }
      }
      if (!*v7) {
        goto LABEL_21;
      }
      j__strtod(value, (char **)(a1 + 256));
      value[4] = 0;
LABEL_20:
      asl_set(v5, "ut_id", value);
LABEL_21:
      if (*(unsigned char *)(a1 + 260))
      {
        j__strtod(value, (char **)(a1 + 260));
        value[32] = 0;
        asl_set(v5, "ut_line", value);
      }
      if (*(int *)(a1 + 292) >= 1)
      {
        snprintf(value, 0x101uLL, "%d", *(_DWORD *)(a1 + 292));
        asl_set(v5, "ut_pid", value);
      }
      snprintf(value, 0x101uLL, "%d", *(__int16 *)(a1 + 296));
      asl_set(v5, "ut_type", value);
      snprintf(value, 0x101uLL, "%ld", *(void *)(a1 + 304));
      asl_set(v5, "ut_tv.tv_sec", value);
      snprintf(value, 0x101uLL, "%d", *(_DWORD *)(a1 + 312));
      asl_set(v5, "ut_tv.tv_usec", value);
      if (*(unsigned char *)(a1 + 320))
      {
        j__strtod(value, (char **)(a1 + 320));
        char v14 = 0;
        asl_set(v5, "ut_host", value);
      }
      unsigned int v12 = *(__int16 *)(a1 + 296);
      if (v12 <= 0xB)
      {
        if (((1 << v12) & 0x81C) != 0)
        {
          sprintf(value, "%s: %ld %d");
          goto LABEL_37;
        }
        if (((1 << v12) & 0x60) != 0)
        {
          sprintf(value, "%s: %d");
          goto LABEL_37;
        }
        if (((1 << v12) & 0x180) != 0)
        {
          sprintf(value, "%s: %d %.*s");
LABEL_37:
          asl_set(v5, "Message", value);
          asl_send(v3, v5);
          asl_release(v5);
          asl_release(v3);
          return;
        }
      }
      if (*(__int16 *)(a1 + 296) > 0xB) {
        sprintf(value, "ut_type=%d");
      }
      else {
        j__strnstr(value, utmpx_types[*(unsigned __int16 *)(a1 + 296)], v11);
      }
      goto LABEL_37;
    }
    asl_release(v3);
  }
}

char *_utmpx_working_copy(char *path, uint64_t dfd, int a3)
{
  if (*((unsigned __int16 *)path + 148) < 0x4000u) {
    return path;
  }
  uint64_t v4 = dfd;
  j__mkdtempat_np(dfd, path);
  int v6 = *(_WORD *)(v4 + 296) & 0x3FFF;
  *(_WORD *)(v4 + 296) = v6;
  if ((*((__int16 *)path + 148) & 0x80000000) == 0) {
    return (char *)v4;
  }
  int v7 = 16;
  switch(v6)
  {
    case 0:
      return (char *)v4;
    case 5:
      int v7 = 24;
      break;
    case 6:
      int v7 = 25;
      break;
    case 7:
      BOOL v8 = *(_DWORD *)(v4 + 256) == _utmpx_working_copy_idzero;
      int v7 = 31;
      int v9 = 29;
      goto LABEL_9;
    case 8:
      BOOL v8 = *(_DWORD *)(v4 + 256) == _utmpx_working_copy_idzero;
      int v7 = 30;
      int v9 = 24;
LABEL_9:
      if (!v8) {
        int v7 = v9;
      }
      break;
    default:
      break;
  }
  if (a3) {
    char v10 = (v7 << 30 >> 31) & 6;
  }
  else {
    char v10 = v7;
  }
  if ((v10 & 4) != 0 && !*(unsigned char *)(v4 + 260))
  {
    if (ttyname_r(0, (char *)v21, 0x100uLL)
      && ttyname_r(1, (char *)v21, 0x100uLL)
      && ttyname_r(2, (char *)v21, 0x100uLL))
    {
      return 0;
    }
    size_t v11 = strrchr((char *)v21, 47);
    if (v11) {
      unsigned int v12 = (passwd *)(v11 + 1);
    }
    else {
      unsigned int v12 = v21;
    }
    j__strtod((const char *)(v4 + 260), &v12->pw_name);
  }
  if ((v10 & 2) != 0)
  {
    size_t v13 = (char *)(v4 + 260);
    uint64_t v14 = 33;
    uint64_t v15 = (unsigned char *)(v4 + 260);
    while (*v15)
    {
      ++v15;
      if ((unint64_t)--v14 <= 1)
      {
        uint64_t v15 = (unsigned char *)(v4 + 292);
        break;
      }
    }
    int v16 = (_DWORD *)(v4 + 256);
    if ((unint64_t)(v15 - v13) < 4) {
      j__mkdtempat_np((int)v16, v13);
    }
    else {
      *int v16 = *((_DWORD *)v15 - 1);
    }
  }
  if ((v10 & 8) != 0 && !*(_DWORD *)(v4 + 292)) {
    *(_DWORD *)(v4 + 292) = getpid();
  }
  if ((v10 & 1) == 0 || *(unsigned char *)v4) {
    goto LABEL_38;
  }
  memset(v21, 0, 72);
  uid_t v17 = getuid();
  int v18 = _pwuid_r(v17, v21);
  if (!v18) {
    return 0;
  }
  uint64_t v19 = v18;
  j__strtod((const char *)v4, (char **)v21[0].pw_name);
  free(v19);
LABEL_38:
  if (!a3 && !*(void *)(v4 + 304) && !*(_DWORD *)(v4 + 312)) {
    gettimeofday((timeval *)(v4 + 304), 0);
  }
  return (char *)v4;
}

void endutxent_wtmp(void)
{
}

utmpx *getutxent_wtmp(void)
{
  return (utmpx *)wtmp_func_2();
}

void setutxent_wtmp(int a1)
{
}

int wtmpxname(const char *a1)
{
  if (a1)
  {
    unint64_t v4 = j__strsignal_r((int)a1, v1, v2);
    if (v4 <= 0x3FF && a1[v4 - 1] == 120)
    {
      if (wtmp_func_0)
      {
        if ((wtmp_file_0 & 0x80000000) == 0)
        {
          close_NOCANCEL();
          wtmp_file_0 = -1;
        }
      }
      else
      {
        if (wtmp_asl_2)
        {
          asl_release((asl_object_t)wtmp_asl_2);
          wtmp_asl_2 = 0;
        }
        wtmp_asl_3 = 0;
        wtmp_asl_4 = 0;
      }
      if (wtmp_file_2) {
        free((void *)wtmp_file_2);
      }
      int v5 = strdup(a1);
      wtmp_file_2 = (uint64_t)v5;
      if (v5)
      {
        LODWORD(v5) = 1;
        wtmp_func_0 = 1;
        wtmp_func_1 = end_file;
        wtmp_func_2 = (__asl_object_s *(*)())get_file;
        wtmp_func_3 = (void (*)(int))set_file;
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
  }
  else
  {
    if (wtmp_func_0)
    {
      end_file();
      wtmp_func_0 = 0;
      wtmp_func_1 = end_asl;
      wtmp_func_2 = get_asl;
      wtmp_func_3 = set_asl;
    }
    else
    {
      if (wtmp_asl_2)
      {
        asl_release((asl_object_t)wtmp_asl_2);
        wtmp_asl_2 = 0;
      }
      wtmp_asl_3 = 0;
      wtmp_asl_4 = 0;
    }
    LODWORD(v5) = 1;
  }
  return (int)v5;
}

void end_asl()
{
  if (wtmp_asl_2)
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0;
  }
  wtmp_asl_3 = 0;
  wtmp_asl_4 = 0;
}

void end_file()
{
  if ((wtmp_file_0 & 0x80000000) == 0)
  {
    close_NOCANCEL();
    wtmp_file_0 = -1;
  }
  if (wtmp_file_5)
  {
    free((void *)wtmp_file_5);
    wtmp_file_5 = 0;
  }
}

__asl_object_s *get_asl()
{
  if ((wtmp_asl_3 & 1) == 0) {
    set_asl(-1);
  }
  if (wtmp_asl_4) {
    return 0;
  }
  uint64_t v0 = (__asl_object_s *)MEMORY[0x18C1224C0](wtmp_asl_2);
  if (v0)
  {
    MEMORY[0x18C122530](get_asl_utx, 640);
    int v1 = (char **)asl_get(v0, "ut_user");
    if (v1) {
      j__strtod(get_asl_utx, v1);
    }
    size_t v2 = (char **)asl_get(v0, "ut_id");
    if (v2) {
      j__strtod(byte_1E911B260, v2);
    }
    uint64_t v3 = (char **)asl_get(v0, "ut_line");
    if (v3) {
      j__strtod(byte_1E911B264, v3);
    }
    unint64_t v4 = asl_get(v0, "ut_pid");
    if (v4) {
      dword_1E911B284 = strtol(v4, 0, 10);
    }
    int v5 = asl_get(v0, "ut_type");
    if (v5) {
      word_1E911B288 = strtol(v5, 0, 10);
    }
    int v6 = asl_get(v0, "ut_tv.tv_sec");
    if (v6) {
      qword_1E911B290 = strtol(v6, 0, 10);
    }
    int v7 = asl_get(v0, "ut_tv.tv_usec");
    if (v7) {
      dword_1E911B298 = strtol(v7, 0, 10);
    }
    BOOL v8 = (char **)asl_get(v0, "ut_host");
    uint64_t v0 = (__asl_object_s *)get_asl_utx;
    if (v8) {
      j__strtod(byte_1E911B2A0, v8);
    }
  }
  else
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0;
    wtmp_asl_4 = 1;
  }
  return v0;
}

void set_asl(int a1)
{
  if ((a1 & 0x80000000) == 0)
  {
    wtmp_asl_1 = a1 == 0;
    wtmp_asl_0 = a1 != 0;
    wtmp_file_1 = a1 != 0;
  }
  wtmp_asl_3 = 0;
  wtmp_asl_4 = 0;
  if (wtmp_asl_2)
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0;
  }
  int v1 = asl_new(1u);
  if (v1)
  {
    size_t v2 = v1;
    asl_set_query(v1, "Facility", "com.apple.system.utmpx", 1u);
    uint64_t v3 = asl_new(1u);
    if (v3)
    {
      unint64_t v4 = v3;
      asl_set_query(v3, "Facility", "com.apple.system.lastlog", 1u);
      int v5 = asl_new(2u);
      if (v5)
      {
        int v6 = v5;
        asl_append(v5, v2);
        asl_append(v6, v4);
        asl_release(v2);
        asl_release(v4);
        uint64_t v9 = 0;
        if (wtmp_asl_1) {
          uint64_t v7 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v7 = 1;
        }
        wtmp_asl_2 = MEMORY[0x18C1224A0](0, v6, &v9, wtmp_asl_0 - 1, 0, 4000000, v7);
        asl_release(v6);
        if (wtmp_asl_2)
        {
          wtmp_asl_3 = 1;
          wtmp_asl_4 = 0;
        }
        return;
      }
      asl_release(v2);
      BOOL v8 = v4;
    }
    else
    {
      BOOL v8 = v2;
    }
    asl_release(v8);
  }
}

void *get_file()
{
  while (1)
  {
    int v0 = wtmp_file_7 - 1;
    if (wtmp_file_7 >= 1) {
      break;
    }
    if ((wtmp_file_0 & 0x80000000) == 0)
    {
      if (!wtmp_file_4) {
        return 0;
      }
      uint64_t v1 = wtmp_file_5;
      if (wtmp_file_1 == 1)
      {
        wtmp_file_6 = wtmp_file_5;
      }
      else
      {
        wtmp_file_6 = wtmp_file_5 + 19468;
        wtmp_file_3 -= 20096;
        if (lseek(wtmp_file_0, wtmp_file_3, 0) < 0)
        {
LABEL_24:
          size_t v2 = 0;
          wtmp_file_4 = 0;
          return v2;
        }
        uint64_t v1 = wtmp_file_5;
      }
      int v3 = 20096;
      do
      {
        int NOCANCEL = read_NOCANCEL();
        int v5 = NOCANCEL;
        if (NOCANCEL <= 0)
        {
          if ((NOCANCEL & 0x80000000) == 0 || *__error() != 4 && *__error() != 35) {
            goto LABEL_24;
          }
        }
        else
        {
          v1 += NOCANCEL;
        }
        BOOL v6 = __OFSUB__(v3, v5);
        v3 -= v5;
      }
      while (!((v3 < 0) ^ v6 | (v3 == 0)));
      wtmp_file_4 -= 32;
      int v0 = 31;
      break;
    }
    set_file(-1);
    if (wtmp_file_0 < 0) {
      return 0;
    }
  }
  uint64_t v7 = wtmp_file_6;
  uint64_t v8 = 628;
  if (!wtmp_file_1) {
    uint64_t v8 = -628;
  }
  wtmp_file_6 += v8;
  wtmp_file_7 = v0;
  size_t v2 = &get_file_ux;
  MEMORY[0x18C122530](&get_file_ux, 640);
  j__mkdtempat_np((int)&get_file_ux, (char *)v7);
  qword_1E911B510 = *(int *)(v7 + 300);
  dword_1E911B518 = *(_DWORD *)(v7 + 304);
  j__mkdtempat_np((int)&unk_1E911B520, (char *)(v7 + 308));
  return v2;
}

uint64_t set_file(int a1)
{
  if ((a1 & 0x80000000) == 0)
  {
    wtmp_asl_1 = a1 == 0;
    wtmp_asl_0 = a1 != 0;
    wtmp_file_1 = a1 != 0;
  }
  if (!wtmp_file_5)
  {
    uint64_t result = (uint64_t)malloc_type_malloc(0x4E80uLL, 0x1000040EE4658C1uLL);
    wtmp_file_5 = result;
    if (!result) {
      return result;
    }
  }
  if ((wtmp_file_0 & 0x80000000) == 0) {
    close_NOCANCEL();
  }
  uint64_t result = open_NOCANCEL();
  wtmp_file_0 = result;
  if ((result & 0x80000000) != 0) {
    return result;
  }
  memset(&v11, 0, sizeof(v11));
  if (fstat(result, &v11) < 0) {
    goto LABEL_28;
  }
  wtmp_file_4 = v11.st_size / 0x274uLL;
  if (v11.st_size < 0x4E8uLL) {
    goto LABEL_28;
  }
  if (read_NOCANCEL() != 628) {
    goto LABEL_28;
  }
  uint64_t v4 = wtmp_file_5;
  if (j__strncasecmp_l((const char *)wtmp_file_5, "utmpx-1.00", v2, v3) || *(_WORD *)(v4 + 296) != 10) {
    goto LABEL_28;
  }
  unint64_t v5 = (wtmp_file_4 - 2) & 0xFFFFFFFFFFFFFFE0;
  int v6 = wtmp_file_4 - 1 - v5;
  wtmp_file_7 = v6;
  wtmp_file_4 = wtmp_file_4 - 1 - v6;
  if (wtmp_file_1) {
    goto LABEL_16;
  }
  wtmp_file_3 = 628 * v5 + 628;
  if (lseek(wtmp_file_0, 628 * v5 + 628, 0) < 0)
  {
LABEL_28:
    wtmp_file_7 = 0;
    uint64_t result = close_NOCANCEL();
    wtmp_file_0 = -1;
    return result;
  }
  int v6 = wtmp_file_7;
  uint64_t v4 = wtmp_file_5;
LABEL_16:
  int v7 = 628 * v6;
  do
  {
    uint64_t result = read_NOCANCEL();
    int v8 = result;
    if ((int)result <= 0)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_28;
      }
      uint64_t result = (uint64_t)__error();
      if (*(_DWORD *)result != 4)
      {
        uint64_t result = (uint64_t)__error();
        if (*(_DWORD *)result != 35) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      v4 += result;
    }
    BOOL v9 = __OFSUB__(v7, v8);
    v7 -= v8;
  }
  while (!((v7 < 0) ^ v9 | (v7 == 0)));
  if (wtmp_file_1) {
    uint64_t v10 = wtmp_file_5;
  }
  else {
    uint64_t v10 = wtmp_file_5 + 628 * wtmp_file_7 - 628;
  }
  wtmp_file_6 = v10;
  return result;
}

char *_utmpx32_64(uint64_t a1, uint64_t a2)
{
  MEMORY[0x18C122530](a2, 640);
  j__mkdtempat_np(a2, (char *)a1);
  *(void *)(a2 + 304) = *(int *)(a1 + 300);
  *(_DWORD *)(a2 + 312) = *(_DWORD *)(a1 + 304);

  return j__mkdtempat_np((int)a2 + 320, (char *)(a1 + 308));
}

char *_utmpx64_32(uint64_t a1, uint64_t a2)
{
  MEMORY[0x18C122530](a2, 628);
  j__mkdtempat_np(a2, (char *)a1);
  *(_DWORD *)(a2 + 300) = *(void *)(a1 + 304);
  *(_DWORD *)(a2 + 304) = *(_DWORD *)(a1 + 312);

  return j__mkdtempat_np((int)a2 + 308, (char *)(a1 + 320));
}

void **_openutx(char *a1)
{
  size_t v2 = (void **)malloc_type_calloc(1uLL, 0x2E0uLL, 0x10300404E040BDAuLL);
  uint64_t v4 = v2;
  if (v2)
  {
    *size_t v2 = (void *)0x17600787475;
    *((_OWORD *)v2 + 41) = 0u;
    *((_OWORD *)v2 + 42) = 0u;
    *((_OWORD *)v2 + 43) = 0u;
    v2[88] = 0;
    v2[81] = (void *)850045863;
    if (!__utmpxname((uint64_t)v2, a1, v3))
    {
      if (((_BYTE)v4[91] & 1) == 0) {
        free(v4[89]);
      }
      free(v4);
      uint64_t v4 = 0;
      *__error() = 22;
    }
  }
  return v4;
}

uint64_t _closeutx(void *a1)
{
  if (a1 && *a1 == 0x17600787475)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 81));
    __endutxent((uint64_t)a1);
    if ((a1[91] & 1) == 0) {
      free((void *)a1[89]);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 81));
    free(a1);
    return 0;
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

uint64_t _os_debug_log_redirect_func()
{
  return 0;
}

uint64_t _os_debug_log_write_error()
{
  v2[0] = 0;
  int v0 = __error();
  strerror_r(*v0, v2, 0xF0uLL);
  return _simple_asl_log();
}

uint64_t _os_debug_log_open_file(uint64_t a1)
{
  if (a1) {
    return open_NOCANCEL();
  }
  size_t v2 = getprogname();
  pid_t v3 = getpid();
  snprintf(__str, 0x400uLL, "os_debug_log.%s.%d.log", v2, v3);
  strcpy(v5, "/var/tmp/");
  if (access(v5, 2) || (MEMORY[0x18C122F80](v5, __str, 1024), uint64_t result = open_NOCANCEL(), (result & 0x80000000) != 0))
  {
    uint64_t v4 = getenv("TMPDIR");
    if (!v4) {
      return 0xFFFFFFFFLL;
    }
    MEMORY[0x18C122F90](v5, v4, 1024);
    if (access(v5, 2)) {
      return 0xFFFFFFFFLL;
    }
    MEMORY[0x18C122F80](v5, __str, 1024);
    uint64_t result = open_NOCANCEL();
    if ((result & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

int isascii(int _c)
{
  return _c < 0x80;
}

int isalnum(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 & 0x500) != 0;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  LOWORD(v2) = ___runetype(_c);
  return (v2 & 0x500) != 0;
}

int isalpha(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 8) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 8) & 1;
}

int isblank(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 17) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 17) & 1;
}

int iscntrl(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 9) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 9) & 1;
}

int isdigit(int _c)
{
  if (_c <= 0xFF) {
    return (_DefaultRuneLocale.__runetype[_c] >> 10) & 1;
  }
  else {
    return 0;
  }
}

int isgraph(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 11) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 11) & 1;
}

int islower(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 12) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 12) & 1;
}

int isprint(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 18) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 18) & 1;
}

int ispunct(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 13) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 13) & 1;
}

int isupper(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 15) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 15) & 1;
}

int isxdigit(int _c)
{
  if (_c <= 0xFF) {
    return HIWORD(_DefaultRuneLocale.__runetype[_c]) & 1;
  }
  else {
    return 0;
  }
}

int toascii(int _c)
{
  return _c & 0x7F;
}

int tolower(int _c)
{
  if (_c >= 0x100) {
    return ___tolower(_c);
  }
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120) + 4 * _c + 1084);
}

int toupper(int _c)
{
  if (_c >= 0x100) {
    return ___toupper(_c);
  }
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120) + 4 * _c + 2108);
}

int digittoint(int _c)
{
  if (_c < 0x100)
  {
    uint64_t v2 = __locale_key;
    uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
    if (!v3) {
      uint64_t v3 = &__global_locale;
    }
    int v1 = *(_DWORD *)(*(void *)(v3[166] + 120) + 4 * _c + 60);
  }
  else
  {
    LOBYTE(v1) = ___runetype(_c);
  }
  return v1 & 0xF;
}

int ishexnumber(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return HIWORD(v2) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return HIWORD(v2) & 1;
}

int isideogram(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 19) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 19) & 1;
}

int isnumber(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 10) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 10) & 1;
}

int isphonogram(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 21) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 21) & 1;
}

int isrune(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    unsigned int v2 = v1->__runetype[_c];
    return v2 > 0xF;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  unsigned int v2 = ___runetype(_c);
  return v2 > 0xF;
}

int isspecial(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 20) & 1;
  }
  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    uint64_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      uint64_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 20) & 1;
}

int digittoint_l(int c, locale_t l)
{
  if (c < 0x100)
  {
    locale_t v3 = (locale_t)&__c_locale;
    locale_t v4 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v4 = l;
    }
    if (l) {
      locale_t v3 = v4;
    }
    int v2 = *(_DWORD *)(*(void *)(*((void *)v3 + 166) + 120) + 4 * c + 60);
  }
  else
  {
    LOBYTE(v2) = ___runetype_l(c, l);
  }
  return v2 & 0xF;
}

int isalnum_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 & 0x500) != 0;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  LOWORD(v3) = ___runetype_l(c, l);
  return (v3 & 0x500) != 0;
}

int isalpha_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 8) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 8) & 1;
}

int isblank_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 17) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 17) & 1;
}

int iscntrl_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 9) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 9) & 1;
}

int isdigit_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 10) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 10) & 1;
}

int isgraph_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 11) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 11) & 1;
}

int ishexnumber_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return HIWORD(v3) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return HIWORD(v3) & 1;
}

int isideogram_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 19) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 19) & 1;
}

int islower_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 12) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 12) & 1;
}

int isnumber_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 10) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 10) & 1;
}

int isphonogram_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 21) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 21) & 1;
}

int isprint_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 18) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 18) & 1;
}

int ispunct_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 13) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 13) & 1;
}

int isrune_l(int c, locale_t l)
{
  if (c > 0x7F)
  {
    if (c < 0x100)
    {
      locale_t v4 = (locale_t)&__c_locale;
      locale_t v5 = (locale_t)&__global_locale;
      if (l != (locale_t)-1) {
        locale_t v5 = l;
      }
      if (l) {
        locale_t v4 = v5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)v4 + 166) + 120) + 4 * c + 60);
    }
    else
    {
      int v3 = ___runetype_l(c, l);
    }
    uint64_t v2 = (int)(v3 & 0xFFFFFFF0);
  }
  else
  {
    uint64_t v2 = _DefaultRuneLocale.__runetype[c] & 0xFFFFFFF0;
  }
  return v2 != 0;
}

int isspace_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 14) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 14) & 1;
}

int isspecial_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 20) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 20) & 1;
}

int isupper_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 15) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 15) & 1;
}

int isxdigit_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return HIWORD(v3) & 1;
  }
  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(c, l);
  return HIWORD(v3) & 1;
}

int tolower_l(int c, locale_t l)
{
  if (c > 0x7F) {
    return ___tolower_l(c, l);
  }
  else {
    return _DefaultRuneLocale.__maplower[c];
  }
}

int toupper_l(int c, locale_t l)
{
  if (c > 0x7F) {
    return ___toupper_l(c, l);
  }
  else {
    return _DefaultRuneLocale.__mapupper[c];
  }
}

void bcopy(const void *a1, void *a2, size_t a3)
{
}

int iswalnum(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 & 0x500) != 0;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  LOWORD(v2) = ___runetype(_wc);
  return (v2 & 0x500) != 0;
}

int iswalpha(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 8) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 8) & 1;
}

int iswcntrl(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 9) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 9) & 1;
}

int iswctype(wint_t _wc, wctype_t _charclass)
{
  if (_wc <= 0x7F)
  {
    uint64_t v3 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v4 = v3->__runetype[_wc];
    return (v4 & _charclass) != 0;
  }
  if (_wc < 0x100)
  {
    uint64_t v5 = __locale_key;
    int v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
    if (!v6) {
      int v6 = &__global_locale;
    }
    uint64_t v3 = *(_RuneLocale **)(v6[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v4 = ___runetype(_wc);
  return (v4 & _charclass) != 0;
}

int iswdigit(wint_t _wc)
{
  if (_wc <= 0xFF) {
    return (_DefaultRuneLocale.__runetype[_wc] >> 10) & 1;
  }
  else {
    return 0;
  }
}

int iswgraph(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 11) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 11) & 1;
}

int iswlower(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 12) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 12) & 1;
}

int iswprint(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 18) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 18) & 1;
}

int iswpunct(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 13) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 13) & 1;
}

int iswspace(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 14) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 14) & 1;
}

int iswupper(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 15) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 15) & 1;
}

int iswxdigit(wint_t _wc)
{
  if (_wc <= 0xFF) {
    return HIWORD(_DefaultRuneLocale.__runetype[_wc]) & 1;
  }
  else {
    return 0;
  }
}

wint_t towlower(wint_t _wc)
{
  if (_wc >= 0x100) {
    return ___tolower(_wc);
  }
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120) + 4 * _wc + 1084);
}

wint_t towupper(wint_t _wc)
{
  if (_wc >= 0x100) {
    return ___toupper(_wc);
  }
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120) + 4 * _wc + 2108);
}

int iswalnum_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 & 0x500) != 0;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  LOWORD(v3) = ___runetype_l(_wc, _l);
  return (v3 & 0x500) != 0;
}

int iswalpha_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 8) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 8) & 1;
}

int iswcntrl_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 9) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 9) & 1;
}

int iswctype_l(wint_t _wc, wctype_t _charclass, locale_t _l)
{
  if (_wc > 0x7F)
  {
    if (_wc < 0x100)
    {
      locale_t v6 = (locale_t)&__c_locale;
      locale_t v7 = (locale_t)&__global_locale;
      if (_l != (locale_t)-1) {
        locale_t v7 = _l;
      }
      if (_l) {
        locale_t v6 = v7;
      }
      int v5 = *(_DWORD *)(*(void *)(*((void *)v6 + 166) + 120) + 4 * _wc + 60);
    }
    else
    {
      int v5 = ___runetype_l(_wc, _l);
    }
    uint64_t v4 = (int)(v5 & _charclass);
  }
  else
  {
    uint64_t v4 = _DefaultRuneLocale.__runetype[_wc] & _charclass;
  }
  return v4 != 0;
}

int iswdigit_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 10) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 10) & 1;
}

int iswgraph_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 11) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 11) & 1;
}

int iswlower_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 12) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 12) & 1;
}

int iswprint_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 18) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 18) & 1;
}

int iswpunct_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 13) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 13) & 1;
}

int iswspace_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 14) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 14) & 1;
}

int iswupper_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 15) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 15) & 1;
}

int iswxdigit_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return HIWORD(v3) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return HIWORD(v3) & 1;
}

wint_t towlower_l(wint_t _wc, locale_t _l)
{
  if (_wc > 0x7F) {
    return ___tolower_l(_wc, _l);
  }
  else {
    return _DefaultRuneLocale.__maplower[_wc];
  }
}

wint_t towupper_l(wint_t _wc, locale_t _l)
{
  if (_wc > 0x7F) {
    return ___toupper_l(_wc, _l);
  }
  else {
    return _DefaultRuneLocale.__mapupper[_wc];
  }
}

int iswblank(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 17) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 17) & 1;
}

int iswascii(wint_t _wc)
{
  return _wc < 0x80;
}

int iswhexnumber(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return HIWORD(v2) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return HIWORD(v2) & 1;
}

int iswideogram(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 19) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 19) & 1;
}

int iswnumber(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 10) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 10) & 1;
}

int iswphonogram(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 21) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 21) & 1;
}

int iswrune(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    unsigned int v2 = v1->__runetype[_wc];
    return v2 > 0xF;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  unsigned int v2 = ___runetype(_wc);
  return v2 > 0xF;
}

int iswspecial(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 20) & 1;
  }
  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120);
    goto LABEL_8;
  }
  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 20) & 1;
}

int iswblank_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 17) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 17) & 1;
}

int iswhexnumber_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return HIWORD(v3) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return HIWORD(v3) & 1;
}

int iswideogram_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 19) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 19) & 1;
}

int iswnumber_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 10) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 10) & 1;
}

int iswphonogram_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 21) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 21) & 1;
}

int iswrune_l(wint_t _wc, locale_t _l)
{
  if (_wc > 0x7F)
  {
    if (_wc < 0x100)
    {
      locale_t v4 = (locale_t)&__c_locale;
      locale_t v5 = (locale_t)&__global_locale;
      if (_l != (locale_t)-1) {
        locale_t v5 = _l;
      }
      if (_l) {
        locale_t v4 = v5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)v4 + 166) + 120) + 4 * _wc + 60);
    }
    else
    {
      int v3 = ___runetype_l(_wc, _l);
    }
    uint64_t v2 = (int)(v3 & 0xFFFFFFF0);
  }
  else
  {
    uint64_t v2 = _DefaultRuneLocale.__runetype[_wc] & 0xFFFFFFF0;
  }
  return v2 != 0;
}

int iswspecial_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 20) & 1;
  }
  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120);
    goto LABEL_10;
  }
  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 20) & 1;
}

locale_t duplocale(locale_t a1)
{
  if ((unint64_t)a1 + 1 < 2 || *((void *)a1 + 163) == 0x786C6F63616C6530)
  {
    return (locale_t)_duplocale((char *)a1);
  }
  else
  {
    *__error() = 22;
    return 0;
  }
}

locale_t __numeric_ctype(uint64_t a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  uint64_t v4 = a1;
  if (*(unsigned char *)(a1 + 1318) == 2) {
    return *(locale_t *)(a1 + 1368);
  }
  if (!*(unsigned char *)(a1 + 1318))
  {
    locale_t v5 = (const char *)(*(void *)(a1 + 1328) + 16);
    if (*(unsigned char *)(v4 + 1314)) {
      locale_t v6 = *(const char **)(*(void *)(v4 + 1344) + 64);
    }
    else {
      locale_t v6 = (const char *)&C;
    }
    if (j__strncasecmp_l(v5, v6, a3, a4)
      && (locale_t v7 = newlocale(2, v6, (locale_t)__c_locale), (*(void *)(v4 + 1368) = v7) != 0))
    {
      *(unsigned char *)(v4 + 1318) = 2;
      return v7;
    }
    else
    {
      *(unsigned char *)(v4 + 1318) = 1;
    }
  }
  return (locale_t)v4;
}

const char *__cdecl querylocale(int a1, locale_t a2)
{
  BOOL v2 = (unint64_t)a2 + 1 >= 2 && *((void *)a2 + 163) != 0x786C6F63616C6530;
  if ((a1 & 0x3F) != 0
    && !v2
    && (!a2
      ? ((uint64_t v4 = __locale_key, (v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4)) != 0)
       ? (locale_t v3 = v5)
       : (locale_t v3 = (locale_t)&__global_locale))
      : a2 != (locale_t)-1
      ? (locale_t v3 = a2)
      : (locale_t v3 = (locale_t)&__global_locale),
        unsigned int v6 = __clz(__rbit32(a1)),
        v6 < 6))
  {
    uint64_t v8 = querylocale_mapping[v6];
    BOOL v9 = (os_unfair_lock_s *)((char *)v3 + 1296);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 324);
    uint64_t v10 = *((void *)v3 + v8 + 165);
    if (v10) {
      locale_t v7 = (const char *)(v10 + 16);
    }
    else {
      locale_t v7 = (const char *)&C;
    }
    os_unfair_lock_unlock(v9);
  }
  else
  {
    locale_t v7 = 0;
    *__error() = 22;
  }
  return v7;
}

locale_t uselocale(locale_t a1)
{
  if (a1 == (locale_t)-1)
  {
LABEL_5:
    BOOL v2 = a1 == (locale_t)-1 || a1 == (locale_t)&__global_locale;
    if (v2) {
      locale_t v3 = 0;
    }
    else {
      locale_t v3 = a1;
    }
    if (!v2) {
      atomic_fetch_add((atomic_uint *volatile)a1, 1u);
    }
    int v1 = (atomic_uint *)pthread_getspecific(__locale_key);
    pthread_setspecific(__locale_key, v3);
    if (v1)
    {
      if (atomic_fetch_add(v1, 0xFFFFFFFF) == 1)
      {
        uint64_t v4 = (void (*)(atomic_uint *))*((void *)v1 + 1);
        if (v4) {
          v4(v1);
        }
      }
    }
    goto LABEL_17;
  }
  if (a1)
  {
    if (*((void *)a1 + 163) != 0x786C6F63616C6530)
    {
      unsigned int v6 = __error();
      locale_t result = 0;
      *unsigned int v6 = 22;
      return result;
    }
    goto LABEL_5;
  }
  int v1 = (atomic_uint *)pthread_getspecific(__locale_key);
LABEL_17:
  if (v1) {
    return (locale_t)v1;
  }
  else {
    return (locale_t)-1;
  }
}

int ___mb_cur_max(void)
{
  uint64_t v0 = __locale_key;
  int v1 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    int v1 = &__global_locale;
  }
  return *(_DWORD *)(v1[166] + 64);
}

int ___mb_cur_max_l(locale_t a1)
{
  locale_t v1 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1) {
    locale_t v1 = a1;
  }
  if (!a1) {
    locale_t v1 = (locale_t)&__c_locale;
  }
  return *(_DWORD *)(*((void *)v1 + 166) + 64);
}

uint64_t __xlocale_release(uint64_t result)
{
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    locale_t v1 = *(uint64_t (**)(void))(result + 8);
    if (v1) {
      return v1();
    }
  }
  return result;
}

acl_t acl_dup(acl_t acl)
{
  int v1 = (int)acl;
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17) && *(_DWORD *)acl == -1407532798)
  {
    BOOL v2 = (char *)malloc_type_malloc(0x1010uLL, 0x1000040A06A8C30uLL);
    locale_t v3 = (_acl *)v2;
    if (v2) {
      j__mkostemp(v2, v1);
    }
  }
  else
  {
    locale_t v3 = 0;
    *__error() = 22;
  }
  return v3;
}

int acl_valid(acl_t acl)
{
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17) && *(_DWORD *)acl == -1407532798) {
    return 0;
  }
  *__error() = 22;
  return -1;
}

int acl_valid_fd_np(int fd, acl_type_t type, acl_t acl)
{
  *__error() = 45;
  return -1;
}

int acl_valid_file_np(const char *path, acl_type_t type, acl_t acl)
{
  *__error() = 45;
  return -1;
}

uint64_t acl_valid_link()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

int acl_calc_mask(acl_t *acl_p)
{
  *__error() = 45;
  return -1;
}

int acl_copy_entry(acl_entry_t dest_d, acl_entry_t src_d)
{
  if (((uint64_t)dest_d > 16 || (uint64_t)dest_d <= -17)
    && *(_DWORD *)dest_d == -1407532799
    && ((uint64_t)src_d > 16 || (uint64_t)src_d <= -17)
    && *(_DWORD *)src_d == -1407532799
    && dest_d != src_d)
  {
    int v2 = 0;
    long long v3 = *((_OWORD *)src_d + 1);
    *(_OWORD *)dest_d = *(_OWORD *)src_d;
    *((_OWORD *)dest_d + 1) = v3;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_create_entry_np(acl_t *acl_p, acl_entry_t *entry_p, int entry_index)
{
  acl_t v3 = *acl_p;
  BOOL v4 = (uint64_t)*acl_p > 16 || (uint64_t)v3 <= -17;
  if (!v4 || *(_DWORD *)v3 != -1407532798)
  {
    unsigned int v6 = __error();
    int v7 = 22;
    goto LABEL_10;
  }
  uint64_t v5 = *((unsigned int *)v3 + 1);
  if (v5 >= 0x80)
  {
    unsigned int v6 = __error();
    int v7 = 12;
LABEL_10:
    *unsigned int v6 = v7;
    return -1;
  }
  if (entry_index == -2) {
    LODWORD(v9) = *((_DWORD *)v3 + 1);
  }
  else {
    LODWORD(v9) = entry_index;
  }
  if (v9 > v5)
  {
    unsigned int v6 = __error();
    int v7 = 34;
    goto LABEL_10;
  }
  if ((int)v5 <= (int)v9)
  {
    uint64_t v9 = (int)v9;
  }
  else
  {
    uint64_t v9 = (int)v9;
    uint64_t v10 = (_OWORD *)((char *)v3 + 32 * v5 + 16);
    do
    {
      --v5;
      long long v11 = *(v10 - 1);
      _OWORD *v10 = *(v10 - 2);
      v10[1] = v11;
      v10 -= 2;
    }
    while (v5 > (int)v9);
    LODWORD(v5) = *((_DWORD *)v3 + 1);
  }
  int result = 0;
  *((_DWORD *)v3 + 1) = v5 + 1;
  unsigned int v12 = (char *)v3 + 32 * v9;
  *(void *)(v12 + 20) = 0;
  *((void *)v12 + 2) = 2887434497;
  v12 += 16;
  *((_DWORD *)v12 + 7) = 0;
  *(void *)(v12 + 20) = 0;
  *(void *)(v12 + 12) = 0;
  *entry_p = (acl_entry_t)v12;
  return result;
}

int acl_create_entry(acl_t *acl_p, acl_entry_t *entry_p)
{
  return acl_create_entry_np(acl_p, entry_p, -2);
}

int acl_delete_entry(acl_t acl, acl_entry_t entry_d)
{
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17)
    && *(_DWORD *)acl == -1407532798
    && ((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (int v2 = (acl_t)((char *)acl + 16), (acl_t)((char *)acl + 16) <= entry_d))
  {
    unsigned int v5 = *((_DWORD *)acl + 1) - 1;
    *((_DWORD *)acl + 1) = v5;
    uint64_t v6 = entry_d - v2;
    uint64_t v7 = (entry_d - v2) >> 5;
    if (v5 > v7)
    {
      unint64_t v8 = (unint64_t)v6 >> 5;
      uint64_t v9 = (_OWORD *)((char *)acl + 32 * (int)(v6 >> 5) + 48);
      do
      {
        long long v10 = v9[1];
        *(v9 - 2) = *v9;
        *(v9 - 1) = v10;
        unsigned int v5 = *((_DWORD *)acl + 1);
        v9 += 2;
        LODWORD(v8) = v8 + 1;
      }
      while (v5 > v8);
    }
    int v3 = 0;
    *((_DWORD *)acl + 8 * v5 + 4) = 0;
    uint64_t v11 = *((int *)acl + 2);
    if (v7 <= v11)
    {
      int v3 = 0;
      *((_DWORD *)acl + 2) = v11 - 1;
    }
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v3;
}

int acl_get_entry(acl_t acl, int entry_id, acl_entry_t *entry_p)
{
  if ((uint64_t)acl <= 16 && (uint64_t)acl > -17
    || *(_DWORD *)acl != -1407532798
    || (entry_id - 1) <= 0xFFFFFFFC && (entry_id < 0 || *((_DWORD *)acl + 1) <= entry_id))
  {
    goto LABEL_14;
  }
  if (entry_id == -2)
  {
    int v3 = (char *)acl + 4;
    int v4 = -1;
  }
  else
  {
    if (entry_id != -1) {
      goto LABEL_12;
    }
    int v3 = (char *)acl + 8;
    int v4 = 1;
  }
  entry_id = *(_DWORD *)v3 + v4;
LABEL_12:
  if (entry_id >= *((_DWORD *)acl + 1))
  {
LABEL_14:
    *__error() = 22;
    return -1;
  }
  int v5 = 0;
  *entry_p = (acl_t)((char *)acl + 32 * entry_id + 16);
  *((_DWORD *)acl + 2) = entry_id;
  return v5;
}

void *__cdecl acl_get_qualifier(acl_entry_t entry_d)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (*((_DWORD *)entry_d + 1) - 1) <= 1)
  {
    int result = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
    if (result) {
      *(_OWORD *)int result = *(_OWORD *)((char *)entry_d + 8);
    }
  }
  else
  {
    int v3 = __error();
    int result = 0;
    int *v3 = 22;
  }
  return result;
}

int acl_get_tag_type(acl_entry_t entry_d, acl_tag_t *tag_type_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *tag_type_p = *((acl_tag_t *)entry_d + 1);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_qualifier(acl_entry_t entry_d, const void *tag_qualifier_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (*((_DWORD *)entry_d + 1) - 1) <= 1)
  {
    int v2 = 0;
    *(_OWORD *)((char *)entry_d + 8) = *(_OWORD *)tag_qualifier_p;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_tag_type(acl_entry_t entry_d, acl_tag_t tag_type)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799 && tag_type - 1 <= 1)
  {
    int v2 = 0;
    *((_DWORD *)entry_d + 1) = tag_type;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

uint64_t acl_delete_fd_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

uint64_t acl_delete_file_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

uint64_t acl_delete_link_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

acl_t acl_get_fd(int fd)
{
  return acl_get_fd_np(fd, ACL_TYPE_EXTENDED);
}

acl_t acl_get_fd_np(int fd, acl_type_t type)
{
  memset(&v6, 0, sizeof(v6));
  if (type == ACL_TYPE_EXTENDED)
  {
    acl_t result = filesec_init();
    if (result)
    {
      int v4 = result;
      uint64_t v7 = 0;
      if (!fstatx_np(fd, &v6, result)) {
        filesec_get_property(v4, FILESEC_ACL, &v7);
      }
      filesec_free(v4);
      return v7;
    }
  }
  else
  {
    int v5 = __error();
    acl_t result = 0;
    *int v5 = 22;
  }
  return result;
}

acl_t acl_get_file(const char *path_p, acl_type_t type)
{
  return acl_get_file1(path_p, type, 1);
}

_filesec *acl_get_file1(const char *a1, int a2, int a3)
{
  memset(&v8, 0, sizeof(v8));
  if (a2 == 256)
  {
    acl_t result = filesec_init();
    if (result)
    {
      stat v6 = result;
      uint64_t v9 = 0;
      if (a3)
      {
        if (statx_np(a1, &v8, result))
        {
LABEL_6:
          filesec_free(v6);
          return (_filesec *)v9;
        }
      }
      else if (lstatx_np(a1, &v8, result))
      {
        goto LABEL_6;
      }
      filesec_get_property(v6, FILESEC_ACL, &v9);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = __error();
    acl_t result = 0;
    *uint64_t v7 = 22;
  }
  return result;
}

acl_t acl_get_link_np(const char *path_p, acl_type_t type)
{
  return acl_get_file1(path_p, type, 0);
}

int acl_set_fd_np(int fd, acl_t acl, acl_type_t acl_type)
{
  acl_t v8 = acl;
  int v4 = filesec_init();
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  if (filesec_set_property(v4, FILESEC_ACL, &v8))
  {
    filesec_free(v5);
    return -1;
  }
  int v7 = fchmodx_np(fd, v5);
  filesec_free(v5);
  if (v7) {
    return -1;
  }
  else {
    return 0;
  }
}

int acl_set_file(const char *path_p, acl_type_t type, acl_t acl)
{
  acl_t v8 = acl;
  int v4 = filesec_init();
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  if (filesec_set_property(v4, FILESEC_ACL, &v8))
  {
    filesec_free(v5);
    return -1;
  }
  int v7 = chmodx_np(path_p, v5);
  filesec_free(v5);
  if (v7) {
    return -1;
  }
  else {
    return 0;
  }
}

int acl_set_link_np(const char *path_p, acl_type_t type, acl_t acl)
{
  memset(&v7, 0, sizeof(v7));
  if (lstat(path_p, &v7) < 0) {
    return -1;
  }
  if ((v7.st_mode & 0xF000) == 0xA000)
  {
    *__error() = 45;
    return -1;
  }
  return acl_set_file(path_p, v5, acl);
}

int acl_delete_def_file(const char *path_p)
{
  *__error() = 45;
  return -1;
}

int acl_add_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  *(_DWORD *)flagset_d |= flag;
  return 0;
}

int acl_clear_flags_np(acl_flagset_t flagset_d)
{
  *(_DWORD *)flagset_d = 0;
  return 0;
}

int acl_delete_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  *(_DWORD *)flagset_d &= ~flag;
  return 0;
}

int acl_get_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  return (*(_DWORD *)flagset_d & flag) != 0;
}

int acl_get_flagset_np(void *obj_p, acl_flagset_t *flagset_p)
{
  if ((uint64_t)obj_p <= 16 && (uint64_t)obj_p > -17) {
    goto LABEL_6;
  }
  if (*(_DWORD *)obj_p == -1407532799)
  {
    int v2 = (_acl_flagset *)((char *)obj_p + 24);
    goto LABEL_8;
  }
  if (*(_DWORD *)obj_p != -1407532798)
  {
LABEL_6:
    *__error() = 22;
    return -1;
  }
  int v2 = (_acl_flagset *)((char *)obj_p + 12);
LABEL_8:
  int result = 0;
  *flagset_p = v2;
  return result;
}

int acl_set_flagset_np(void *obj_p, acl_flagset_t flagset_d)
{
  if ((uint64_t)obj_p <= 16 && (uint64_t)obj_p > -17) {
    goto LABEL_6;
  }
  if (*(_DWORD *)obj_p == -1407532799)
  {
    int v2 = 0;
    *((_DWORD *)obj_p + 6) = *(_DWORD *)flagset_d;
    return v2;
  }
  if (*(_DWORD *)obj_p == -1407532798)
  {
    int v2 = 0;
    *((_DWORD *)obj_p + 3) = *(_DWORD *)flagset_d;
  }
  else
  {
LABEL_6:
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_add_perm(acl_permset_t permset_d, acl_perm_t perm)
{
  if ((perm & 0xFFEFC001) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    int result = 0;
    *(_DWORD *)permset_d |= perm;
  }
  return result;
}

int acl_clear_perms(acl_permset_t permset_d)
{
  *(_DWORD *)permset_d = 0;
  return 0;
}

int acl_delete_perm(acl_permset_t permset_d, acl_perm_t perm)
{
  if ((perm & 0xFFEFC001) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    int result = 0;
    *(_DWORD *)permset_d &= ~perm;
  }
  return result;
}

int acl_get_perm_np(acl_permset_t permset_d, acl_perm_t perm)
{
  if ((perm & 0xFFEFC001) == 0) {
    return (*(_DWORD *)permset_d & perm) != 0;
  }
  *__error() = 22;
  return -1;
}

int acl_get_permset(acl_entry_t entry_d, acl_permset_t *permset_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *permset_p = (acl_entry_t)((char *)entry_d + 28);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_permset(acl_entry_t entry_d, acl_permset_t permset_d)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *((_DWORD *)entry_d + 7) = *(_DWORD *)permset_d;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_maximal_permset_mask_np(acl_permset_mask_t *mask_p)
{
  *mask_p = 1064958;
  return 0;
}

int acl_get_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t *mask_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *mask_p = *((unsigned int *)entry_d + 7);
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

int acl_set_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t mask)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (mask & 0xFFFFFFFFFFEFC001) == 0)
  {
    int v2 = 0;
    *((_DWORD *)entry_d + 7) = mask;
  }
  else
  {
    *__error() = 22;
    return -1;
  }
  return v2;
}

ssize_t acl_copy_ext(void *buf_p, acl_t acl, ssize_t size)
{
  ssize_t v6 = acl_size(acl);
  if (v6 < 0) {
    return -1;
  }
  ssize_t v7 = v6;
  if (v6 > size)
  {
    *__error() = 34;
    return -1;
  }
  MEMORY[0x18C122530](buf_p, v6);
  *(_DWORD *)buf_p = 1841376257;
  if (acl == (acl_t)1)
  {
    *((_DWORD *)buf_p + 9) = -1;
  }
  else
  {
    unsigned int v9 = *((_DWORD *)acl + 1);
    unsigned int v10 = bswap32(*((_DWORD *)acl + 3));
    *((_DWORD *)buf_p + 9) = bswap32(v9);
    *((_DWORD *)buf_p + 10) = v10;
    if (v9)
    {
      unint64_t v11 = 0;
      unsigned int v12 = (char *)buf_p + 64;
      size_t v13 = (char *)acl + 24;
      do
      {
        *(_OWORD *)(v12 - 5) = *(_OWORD *)v13;
        unsigned int v14 = *((_DWORD *)v13 + 5);
        *(v12 - 1) = bswap32(*((_DWORD *)v13 + 4) & 0xFFFFFFF0 | *((_DWORD *)v13 - 1) & 0xF);
        *unsigned int v12 = bswap32(v14);
        v12 += 6;
        ++v11;
        v13 += 32;
      }
      while (v11 < *((unsigned int *)acl + 1));
    }
  }
  return v7;
}

acl_t acl_copy_int(const void *buf_p)
{
  if (*(_DWORD *)buf_p == 1841376257)
  {
    acl_t result = acl_init(bswap32(*((_DWORD *)buf_p + 9)));
    if (result)
    {
      unsigned int v3 = *((_DWORD *)buf_p + 9);
      *((_DWORD *)result + 3) = bswap32(*((_DWORD *)buf_p + 10));
      unint64_t v4 = bswap32(v3);
      *((_DWORD *)result + 1) = v4;
      if (v3)
      {
        unint64_t v5 = 0;
        ssize_t v6 = (char *)result + 24;
        ssize_t v7 = (unsigned int *)((char *)buf_p + 64);
        do
        {
          *((_DWORD *)v6 - 2) = -1407532799;
          *(_OWORD *)ssize_t v6 = *(_OWORD *)(v7 - 5);
          unsigned int v8 = *(v7 - 1);
          *((_DWORD *)v6 - 1) = HIBYTE(v8) & 0xF;
          unsigned int v9 = *v7;
          v7 += 6;
          *((_DWORD *)v6 + 4) = bswap32(v8 & 0xF0FFFFFF);
          *((_DWORD *)v6 + 5) = bswap32(v9);
          ++v5;
          v6 += 32;
        }
        while (v5 < v4);
      }
    }
  }
  else
  {
    unsigned int v10 = __error();
    acl_t result = 0;
    int *v10 = 22;
  }
  return result;
}

acl_t acl_from_text(const char *buf_p)
{
  acl_entry_t entry_p = 0;
  __stunsigned int r = 0;
  acl_permset_t permset_p = 0;
  acl_flagset_t flagset_p = 0;
  if (!buf_p)
  {
    uint64_t v57 = __error();
    acl_t result = 0;
    *uint64_t v57 = 22;
    return result;
  }
  acl_t result = (acl_t)strdup(buf_p);
  __stringp = (char *)result;
  if (result)
  {
    acl_t v2 = result;
    acl_t result = acl_init(1);
    obj_p = result;
    if (result)
    {
      unsigned int v3 = strsep(&__stringp, "\n");
      int v65 = v3;
      if (v3
        && *v3
        && ((unint64_t v4 = strsep(&v65, " "), __str = v4, !*v4) || !j__strsvisx(v4, "!#acl", 5uLL, v5, v6))
        && (__stunsigned int r = strsep(&v65, " "), *__error() = 0, __str)
        && *__str
        && strtol(__str, 0, 0) == 1)
      {
        ssize_t v7 = strsep(&v65, " ");
        __stunsigned int r = v7;
        if (v7)
        {
          if (*v7)
          {
            acl_get_flagset_np(obj_p, &flagset_p);
            unsigned int v8 = strsep(&__str, ",");
            if (v8)
            {
              unint64_t v11 = v8;
              do
              {
                if (!*v11) {
                  break;
                }
                int v12 = 0;
                size_t v13 = (const char **)&off_1E543E4A0;
                while (v12 != 1 && v12 != 6)
                {
                  if (v12 == 7) {
                    goto LABEL_103;
                  }
LABEL_22:
                  v13 += 3;
                  ++v12;
                }
                if (j__strncasecmp_l(*v13, v11, v9, v10)) {
                  goto LABEL_22;
                }
                acl_add_flag_np(flagset_p, *((acl_flag_t *)v13 - 2));
                unint64_t v11 = strsep(&__str, ",");
              }
              while (v11);
            }
          }
        }
        unsigned int v14 = strsep(&__stringp, "\n");
        int v65 = v14;
        if (!v14)
        {
          free(v2);
          return (acl_t)obj_p;
        }
        uint64_t v15 = 0;
        int v16 = ":";
        uid_t v17 = "group";
        int v18 = ",";
        while (*v14)
        {
          __stunsigned int r = strsep(&v65, v16);
          if (v15)
          {
            *(void *)uint64_t v15 = 0;
            *((void *)v15 + 1) = 0;
          }
          else
          {
            uint64_t v15 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
            if (!v15)
            {
              int v56 = *__error();
              goto LABEL_110;
            }
          }
          if (acl_create_entry((acl_t *)&obj_p, &entry_p)
            || acl_get_flagset_np(entry_p, &flagset_p) == -1
            || acl_get_permset(entry_p, &permset_p) == -1)
          {
            int v56 = *__error();
            goto LABEL_109;
          }
          int v21 = *__str;
          if (v21 == 103)
          {
            if (j__strncasecmp_l(__str, v17, v19, v20)) {
              int v22 = -1;
            }
            else {
              int v22 = 1;
            }
          }
          else
          {
            if (v21 != 117) {
              goto LABEL_101;
            }
            if (j__strncasecmp_l(__str, "user", v19, v20)) {
              int v22 = -1;
            }
            else {
              int v22 = 0;
            }
          }
          uint64_t v23 = strsep(&v65, v16);
          __stunsigned int r = v23;
          if (v23 && *v23)
          {
            uuid_parse(v23, v15);
            int v24 = 0;
          }
          else
          {
            int v24 = 1;
          }
          int v25 = strsep(&v65, v16);
          __stunsigned int r = v25;
          if (v25)
          {
            char v26 = v24 ^ 1;
            if (!*v25) {
              char v26 = 1;
            }
            if ((v26 & 1) == 0)
            {
              if (v22 == 1)
              {
                uint64_t v28 = getgrnam(v25);
                if (v28 && mbr_gid_to_uuid(v28->gr_gid, v15))
                {
LABEL_101:
                  int v56 = 22;
LABEL_109:
                  free(v15);
                  goto LABEL_110;
                }
              }
              else
              {
                if (v22) {
                  goto LABEL_101;
                }
                __int16 v27 = getpwnam(v25);
                if (v27)
                {
                  if (mbr_uid_to_uuid(v27->pw_uid, v15)) {
                    goto LABEL_101;
                  }
                }
              }
              int v24 = 0;
            }
          }
          uint64_t v29 = strsep(&v65, v16);
          __stunsigned int r = v29;
          if (v29 && v24 && *v29)
          {
            gid_t v30 = strtol(v29, 0, 10);
            if (v22 == 1)
            {
              uint64_t v55 = getgrgid(v30);
              if (v55 && mbr_gid_to_uuid(v55->gr_gid, v15)) {
                goto LABEL_101;
              }
            }
            else if (!v22)
            {
              unsigned int v31 = getpwuid(v30);
              if (v31)
              {
                if (mbr_uid_to_uuid(v31->pw_uid, v15)) {
                  goto LABEL_101;
                }
              }
            }
          }
          else if (v24)
          {
            goto LABEL_101;
          }
          stat v32 = strsep(&v65, v16);
          __stunsigned int r = v32;
          if (!v32 || !*v32) {
            goto LABEL_101;
          }
          stat v33 = strsep(&__str, v18);
          if (v33)
          {
            uint64_t v36 = v33;
            acl_tag_t v37 = ACL_UNDEFINED_TAG;
LABEL_70:
            unsigned __int8 v38 = v36;
            acl_tag_t v58 = v37;
            while (*v38)
            {
              if (v37 == ACL_UNDEFINED_TAG)
              {
                if (j__strncasecmp_l(v36, "allow", v34, v35))
                {
                  if (j__strncasecmp_l(v36, "deny", v46, v47))
                  {
LABEL_107:
                    int v56 = 22;
                    goto LABEL_108;
                  }
                  acl_tag_t v37 = ACL_EXTENDED_DENY;
                }
                else
                {
                  acl_tag_t v37 = ACL_EXTENDED_ALLOW;
                }
                uint64_t v36 = strsep(&__str, v18);
                if (v36) {
                  goto LABEL_70;
                }
                break;
              }
              in_addr v39 = v16;
              uint64_t v40 = v18;
              uint64_t v41 = v17;
              uint64_t v42 = 0;
              in_addr v43 = &off_1E543E4B8;
              uint64_t v44 = "inherited";
              while (((0xC2uLL >> v42) & 1) != 0 || j__strncasecmp_l(v44, v38, v34, v35))
              {
                ++v42;
                __darwin_ct_rune_t v45 = *v43;
                v43 += 3;
                uint64_t v44 = v45;
                if (v42 == 7) {
                  goto LABEL_107;
                }
              }
              acl_add_flag_np(flagset_p, *((acl_flag_t *)v43 - 8));
              int v18 = v40;
              unsigned __int8 v38 = strsep(&__str, v40);
              uid_t v17 = v41;
              int v16 = v39;
              acl_tag_t v37 = v58;
              if (!v38) {
                break;
              }
            }
          }
          else
          {
            acl_tag_t v37 = ACL_UNDEFINED_TAG;
          }
          int v48 = strsep(&v65, v16);
          __stunsigned int r = v48;
          if (v48)
          {
            if (*v48)
            {
              int v49 = strsep(&__str, v18);
              if (v49)
              {
                uint64_t v52 = v49;
                acl_tag_t v59 = v37;
                do
                {
                  if (!*v52) {
                    break;
                  }
                  int v53 = v18;
                  uint64_t v54 = 0;
                  while (j__strncasecmp_l(*(const char **)&acl_perms[v54 + 2], v52, v50, v51))
                  {
                    v54 += 6;
                    if (v54 == 84) {
                      goto LABEL_107;
                    }
                  }
                  acl_add_perm(permset_p, (acl_perm_t)acl_perms[v54]);
                  int v18 = v53;
                  uint64_t v52 = strsep(&__str, v53);
                  acl_tag_t v37 = v59;
                }
                while (v52);
              }
            }
          }
          acl_set_tag_type(entry_p, v37);
          acl_set_qualifier(entry_p, v15);
          unsigned int v14 = strsep(&__stringp, "\n");
          int v65 = v14;
          if (!v14) {
            break;
          }
        }
        int v56 = 0;
LABEL_108:
        if (v15) {
          goto LABEL_109;
        }
LABEL_110:
        free(v2);
        if (!v56) {
          return (acl_t)obj_p;
        }
      }
      else
      {
LABEL_103:
        free(v2);
        int v56 = 22;
      }
      acl_free(obj_p);
      obj_p = 0;
      *__error() = v56;
      return (acl_t)obj_p;
    }
  }
  return result;
}

char *__cdecl acl_to_text(acl_t acl, ssize_t *len_p)
{
  acl_t v2 = len_p;
  acl_tag_t tag_type_p = ACL_UNDEFINED_TAG;
  acl_flagset_t flagset_p = 0;
  acl_entry_t entry_p = 0;
  *(void *)id_type = 0;
  acl_permset_t permset_p = 0;
  uint64_t v29 = 1024;
  if ((uint64_t)acl <= 16 && (uint64_t)acl > -17 || *(_DWORD *)acl != -1407532798)
  {
    ssize_t v6 = __error();
    acl_t result = 0;
    int v7 = 22;
    goto LABEL_72;
  }
  if (!len_p)
  {
    MEMORY[0x1F41887A8](acl, 0);
    acl_t v2 = &v27;
    uint64_t v27 = 0;
  }
  *acl_t v2 = 0;
  uint64_t v28 = (char *)malloc_type_malloc(0x400uLL, 0x5365B37uLL);
  if (!v28) {
    goto LABEL_71;
  }
  if (!raosnprintf((void **)&v28, &v29, v2, "!#acl %d", 1)) {
    goto LABEL_69;
  }
  if (!acl_get_flagset_np(acl, &flagset_p))
  {
    int v8 = 0;
    int v9 = 0;
    for (int i = (const char **)&off_1E543E4A0; ; i += 3)
    {
      if (v8 == 1 || v8 == 6)
      {
        if (acl_get_flag_np(flagset_p, *((acl_flag_t *)i - 2)))
        {
          if (v9) {
            unint64_t v11 = ",";
          }
          else {
            unint64_t v11 = " ";
          }
          if (!raosnprintf((void **)&v28, &v29, v2, "%s%s", v11, *i)) {
            goto LABEL_69;
          }
          ++v9;
        }
      }
      else if (v8 == 7)
      {
        break;
      }
      ++v8;
    }
  }
  if (entry_p) {
    int v4 = -1;
  }
  else {
    int v4 = 0;
  }
  if (acl_get_entry(acl, v4, &entry_p))
  {
LABEL_13:
    if (!raosnprintf((void **)&v28, &v29, v2, "\n", v27)) {
      goto LABEL_69;
    }
    return v28;
  }
  while (1)
  {
    qualifieunsigned int r = acl_get_qualifier(entry_p);
    if (qualifier) {
      break;
    }
LABEL_33:
    if (entry_p) {
      int v14 = -1;
    }
    else {
      int v14 = 0;
    }
    if (acl_get_entry(acl, v14, &entry_p)) {
      goto LABEL_13;
    }
  }
  size_t v13 = qualifier;
  if (acl_get_tag_type(entry_p, &tag_type_p)
    || acl_get_flagset_np(entry_p, &flagset_p)
    || acl_get_permset(entry_p, &permset_p))
  {
    acl_free(v13);
    goto LABEL_33;
  }
  uuid_unparse_upper((const unsigned __int8 *)v13, out);
  if (mbr_uuid_to_id((const unsigned __int8 *)v13, (id_t *)&id_type[1], id_type)) {
    goto LABEL_39;
  }
  if (id_type[0] == 1)
  {
    uint64_t v23 = (const char **)getgrgid(id_type[1]);
    if (v23) {
      goto LABEL_63;
    }
  }
  else
  {
    if (id_type[0]) {
      goto LABEL_39;
    }
    uint64_t v23 = (const char **)getpwuid(id_type[1]);
    if (!v23) {
      goto LABEL_39;
    }
LABEL_63:
    int v24 = strdup(*v23);
    if (v24)
    {
      uid_t v17 = v24;
      int v25 = "group";
      if (!id_type[0]) {
        int v25 = "user";
      }
      char v26 = "deny";
      if (tag_type_p == ACL_EXTENDED_ALLOW) {
        char v26 = "allow";
      }
      int v16 = raosnprintf((void **)&v28, &v29, v2, "\n%s:%s:%s:%d:%s", v25, out, v24, id_type[1], v26);
      goto LABEL_43;
    }
  }
LABEL_39:
  if (tag_type_p == ACL_EXTENDED_ALLOW) {
    uint64_t v15 = "allow";
  }
  else {
    uint64_t v15 = "deny";
  }
  int v16 = raosnprintf((void **)&v28, &v29, v2, "\nuser:%s:::%s", out, v15);
  uid_t v17 = 0;
LABEL_43:
  free(v17);
  acl_free(v13);
  if (v16)
  {
    uint64_t v18 = 0;
    size_t v19 = (const char **)&off_1E543E4A0;
    while (((0xC2uLL >> v18) & 1) != 0
         || !acl_get_flag_np(flagset_p, *((acl_flag_t *)v19 - 2))
         || raosnprintf((void **)&v28, &v29, v2, ",%s", *v19))
    {
      ++v18;
      v19 += 3;
      if (v18 == 7)
      {
        uint64_t v20 = 0;
        int v21 = 0;
        while (1)
        {
          if (acl_get_perm_np(permset_p, (acl_perm_t)acl_perms[v20]))
          {
            if (v21) {
              int v22 = ",";
            }
            else {
              int v22 = ":";
            }
            if (!raosnprintf((void **)&v28, &v29, v2, "%s%s", v22, *(const char **)&acl_perms[v20 + 2])) {
              goto LABEL_69;
            }
            ++v21;
          }
          v20 += 6;
          if (v20 == 84) {
            goto LABEL_33;
          }
        }
      }
    }
  }
LABEL_69:
  if (v28) {
    free(v28);
  }
LABEL_71:
  ssize_t v6 = __error();
  acl_t result = 0;
  int v7 = 12;
LABEL_72:
  *ssize_t v6 = v7;
  return result;
}

uint64_t raosnprintf(void **a1, uint64_t *a2, void *a3, char *__format, ...)
{
  va_start(va, __format);
  while (1)
  {
    uint64_t v8 = *a2;
    if (*a3 < (unint64_t)*a2)
    {
      uint64_t result = vsnprintf((char *)*a1 + *a3, *a2 - *a3, __format, va);
      uint64_t v8 = *a2;
      if (*a2 - *a3 > (unint64_t)(int)result) {
        break;
      }
    }
    unsigned int v10 = *a1;
    *a2 = 2 * v8;
    uint64_t result = (uint64_t)reallocf(v10, 2 * v8);
    *a1 = (void *)result;
    if (!result) {
      return result;
    }
  }
  *a3 += (int)result;
  return result;
}

uint64_t open_with_subsystem(uint64_t a1, __int16 a2)
{
  if ((a2 & 0x200) != 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v3 = open_NOCANCEL();
    if ((v3 & 0x80000000) != 0)
    {
      int v4 = __error();
      ssize_t v6 = (char *)subsystem_root_path;
      if (*v4 == 2 && subsystem_root_path != 0)
      {
        while (1)
        {
          uint64_t next_subsystem_root_path = extract_next_subsystem_root_path((uint64_t)v10, v6, v5);
          if ((unint64_t)MEMORY[0x18C122F80](v10, a1, 1024) > 0x3FF) {
            break;
          }
          uint64_t v3 = open_NOCANCEL();
          if ((v3 & 0x80000000) == 0) {
            return v3;
          }
          __error();
          if (!next_subsystem_root_path) {
            return v3;
          }
          ssize_t v6 = (char *)next_subsystem_root_path;
        }
        *__error() = 63;
      }
    }
  }
  return v3;
}

uint64_t extract_next_subsystem_root_path(uint64_t a1, char *__sig, size_t a3)
{
  unint64_t v5 = j__strsignal_r((int)__sig, __sig, a3);
  uint64_t v6 = j__mkdirx_np(__sig, (filesec_t)0x3A);
  if (v6) {
    unint64_t v5 = v6 - (void)__sig;
  }
  if (v5 > 0x3FF) {
    return 0;
  }
  uint64_t v8 = v6;
  j__mkdtempat_np(a1, __sig);
  *(unsigned char *)(a1 + v5) = 0;
  if (v8) {
    return v8 + 1;
  }
  else {
    return 0;
  }
}

uint64_t stat_with_subsystem(const char *a1, stat *a2)
{
  uint64_t v4 = stat(a1, a2);
  if ((v4 & 0x80000000) != 0)
  {
    unint64_t v5 = __error();
    int v7 = (char *)subsystem_root_path;
    if (*v5 == 2 && subsystem_root_path != 0)
    {
      while (1)
      {
        uint64_t next_subsystem_root_path = extract_next_subsystem_root_path((uint64_t)v11, v7, v6);
        if ((unint64_t)MEMORY[0x18C122F80](v11, a1, 1024) > 0x3FF) {
          break;
        }
        uint64_t v4 = stat(v11, a2);
        if ((v4 & 0x80000000) == 0) {
          return v4;
        }
        __error();
        if (!next_subsystem_root_path) {
          return v4;
        }
        int v7 = (char *)next_subsystem_root_path;
      }
      *__error() = 63;
    }
  }
  return v4;
}

tm *__cdecl getdate(const char *a1)
{
  acl_t v2 = getenv("DATEMSK");
  if (!v2 || (uint64_t v3 = v2, v37 = 0, memset(&v36, 0, sizeof(v36)), !*v2))
  {
    uint64_t v18 = 0;
    getdate_erunsigned int r = 1;
    return v18;
  }
  int v4 = *__error();
  unint64_t v5 = fopen(v3, "r");
  if (!v5)
  {
    getdate_erunsigned int r = 2;
    size_t v19 = __error();
    uint64_t v18 = 0;
    goto LABEL_29;
  }
  size_t v6 = v5;
  int v7 = fileno(v5);
  if (fstat(v7, &v36) < 0)
  {
    uint64_t v18 = 0;
    uint64_t v20 = &byte_1E911B000;
    int v21 = 3;
LABEL_27:
    *((_DWORD *)v20 + 584) = v21;
    goto LABEL_28;
  }
  if ((v36.st_mode & 0xF000) != 0x8000)
  {
    uint64_t v18 = 0;
    uint64_t v20 = &byte_1E911B000;
    int v21 = 4;
    goto LABEL_27;
  }
  uint64_t v8 = malloc_type_malloc(0x400uLL, 0xCC1E5ACFuLL);
  if (!v8)
  {
    uint64_t v18 = 0;
    uint64_t v20 = &byte_1E911B000;
    int v21 = 6;
    goto LABEL_27;
  }
  int v9 = 0;
  size_t v10 = 1024;
LABEL_8:
  unint64_t v11 = v8;
  do
  {
    if (fgets((char *)v11 + v9, (int)v10 - v9, v6))
    {
      int v14 = j__strsignal_r((int)v11, v12, v13);
      int v9 = v14;
      if (v10 - 1 == v14 && *((unsigned char *)v11 + v14 - 1) != 10)
      {
        v10 += 1024;
        uint64_t v8 = malloc_type_realloc(v11, v10, 0xCF7D8D3BuLL);
        if (!v8)
        {
          int v17 = 6;
LABEL_74:
          uint64_t v18 = 0;
          getdate_erunsigned int r = v17;
          goto LABEL_75;
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (ferror(v6))
      {
        int v17 = 5;
        goto LABEL_74;
      }
      if (!v9)
      {
        int v17 = 7;
        goto LABEL_74;
      }
      int v9 = j__strsignal_r((int)v11, v15, v16);
    }
    if (*((unsigned char *)v11 + v9 - 1) == 10) {
      *((unsigned char *)v11 + v9 - 1) = 0;
    }
    getdate_tuint64_t m = tmundef;
    *(_OWORD *)&qword_1E911B678 = unk_18A9FFF90;
    xmmword_1E911B688 = xmmword_18A9FFFA0;
    qword_1E911B698 = 0;
    int v9 = 0;
  }
  while (!strptime(a1, (const char *)v11, (tm *)&getdate_tm));
  time(&v37);
  uint64_t v23 = localtime(&v37);
  if (DWORD1(getdate_tm) == -1) {
    int v24 = getdate_tm != -1;
  }
  else {
    int v24 = (getdate_tm != -1) | 2;
  }
  tm_houunsigned int r = DWORD2(getdate_tm);
  if (DWORD2(getdate_tm) == -1) {
    int v26 = v24;
  }
  else {
    int v26 = v24 | 4;
  }
  int v27 = HIDWORD(getdate_tm) != -1;
  tm_mouint64_t n = qword_1E911B678;
  if (qword_1E911B678 != -1) {
    v27 |= 2u;
  }
  if (HIDWORD(qword_1E911B678) == -1) {
    int v29 = v27;
  }
  else {
    int v29 = v27 | 4;
  }
  int v30 = dword_1E911B680;
  switch(v26)
  {
    case 0:
      *(void *)&getdate_tuint64_t m = *(void *)&v23->tm_sec;
      tm_houunsigned int r = v23->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      break;
    case 1:
      tm_houunsigned int r = v23->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      tm_miuint64_t n = v23->tm_min;
      DWORD1(getdate_tm) = tm_min;
      if ((int)getdate_tm < v23->tm_sec) {
        DWORD1(getdate_tm) = tm_min + 1;
      }
      break;
    case 2:
      tm_houunsigned int r = v23->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      if (SDWORD1(getdate_tm) < v23->tm_min) {
        DWORD2(getdate_tm) = ++tm_hour;
      }
      goto LABEL_50;
    case 3:
      tm_houunsigned int r = v23->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      if ((int)getdate_tm + 60 * DWORD1(getdate_tm) < v23->tm_sec + 60 * v23->tm_min) {
        DWORD2(getdate_tm) = ++tm_hour;
      }
      break;
    case 4:
      *(void *)&getdate_tuint64_t m = 0;
      break;
    case 5:
      DWORD1(getdate_tm) = 0;
      break;
    case 6:
LABEL_50:
      LODWORD(getdate_tm) = 0;
      break;
    default:
      break;
  }
  switch(v29)
  {
    case 0:
      int tm_mday = v23->tm_mday;
      HIDWORD(getdate_tm) = tm_mday;
      if (tm_hour < v23->tm_hour) {
        HIDWORD(getdate_tm) = tm_mday + 1;
      }
      qword_1E911B678 = *(void *)&v23->tm_mon;
      tm_mouint64_t n = qword_1E911B678;
      break;
    case 1:
      qword_1E911B678 = *(void *)&v23->tm_mon;
      int v34 = v23->tm_mday;
      tm_mouint64_t n = qword_1E911B678;
      goto LABEL_68;
    case 2:
    case 3:
      tm_yeaunsigned int r = v23->tm_year;
      HIDWORD(qword_1E911B678) = tm_year;
      if ((int)qword_1E911B678 < v23->tm_mon) {
        HIDWORD(qword_1E911B678) = tm_year + 1;
      }
      if (v29) {
        break;
      }
      goto LABEL_62;
    case 4:
    case 6:
      if ((v29 & 2) == 0)
      {
        tm_mouint64_t n = 0;
        LODWORD(qword_1E911B678) = 0;
      }
LABEL_62:
      HIDWORD(getdate_tm) = 1;
      break;
    case 5:
      tm_mouint64_t n = v23->tm_mon;
      LODWORD(qword_1E911B678) = tm_mon;
      int v34 = v23->tm_mday;
LABEL_68:
      if (SHIDWORD(getdate_tm) < v34) {
        LODWORD(qword_1E911B678) = ++tm_mon;
      }
      break;
    default:
      break;
  }
  dword_1E911B680 = v23->tm_wday;
  *((void *)&xmmword_1E911B688 + 1) = v23->tm_gmtoff;
  LODWORD(xmmword_1E911B688) = -1;
  if (mktime((tm *)&getdate_tm) == -1 || (v29 & 2) != 0 && qword_1E911B678 != tm_mon) {
    goto LABEL_73;
  }
  uint64_t v18 = (tm *)&getdate_tm;
  if (v30 != -1 && v29 != 7)
  {
    int v35 = v30 - dword_1E911B680;
    if (v30 < dword_1E911B680) {
      int v35 = v30 - dword_1E911B680 + 7;
    }
    HIDWORD(getdate_tm) += v35;
    if (mktime((tm *)&getdate_tm) == -1)
    {
LABEL_73:
      int v17 = 8;
      goto LABEL_74;
    }
  }
LABEL_75:
  free(v11);
LABEL_28:
  fclose(v6);
  size_t v19 = __error();
LABEL_29:
  *size_t v19 = v4;
  return v18;
}

uint64_t _st_get_timezone()
{
  return timezone;
}

int asxprintf(char **__ret, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return _vasprintf(0, (int)__domain, (void **)__ret);
}

int dxprintf(int __fd, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  va_start(va, __format);
  return _vdprintf(0, (pthread_rwlock_t *)__domain, __fd, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)va);
}

int fxprintf(FILE *__stream, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  va_start(va, __format);
  return __xvprintf(0, (pthread_rwlock_t *)__domain, (uint64_t)__stream, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)va);
}

int sxprintf(char *__str, size_t __size, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  va_start(va, __format);
  return _vsnprintf(0, (pthread_rwlock_t *)__domain, __str, __size, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)va);
}

int xprintf(printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  va_start(va, __format);
  return __xvprintf(0, (pthread_rwlock_t *)__domain, (uint64_t)__stdoutp, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)va);
}

int vasxprintf(char **__ret, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vasprintf(0, (int)__domain, (void **)__ret);
}

int vdxprintf(int __fd, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vdprintf(0, (pthread_rwlock_t *)__domain, __fd, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)__ap);
}

int vfxprintf(FILE *__stream, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return __xvprintf(0, (pthread_rwlock_t *)__domain, (uint64_t)__stream, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)__ap);
}

int vsxprintf(char *__str, size_t __size, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vsnprintf(0, (pthread_rwlock_t *)__domain, __str, __size, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)__ap);
}

int vxprintf(printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return __xvprintf(0, (pthread_rwlock_t *)__domain, (uint64_t)__stdoutp, (atomic_uint *)__loc, (unsigned __int8 *)__format, (__int16 *)__ap);
}

void free_printf_comp(printf_comp_t __pc)
{
  if (__pc)
  {
    uint64_t v2 = *((void *)__pc + 10);
    if (v2)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
      {
        uint64_t v3 = *(void (**)(void))(v2 + 8);
        if (v3) {
          v3();
        }
      }
    }
    free(*((void **)__pc + 11));
    free(*((void **)__pc + 13));
    free(*((void **)__pc + 14));
    pthread_mutex_destroy((pthread_mutex_t *)__pc);
    free(__pc);
  }
}

printf_comp_t new_printf_comp(printf_domain_t __domain, locale_t __loc, const char *__fmt)
{
  locale_t v4 = __loc;
  uint64_t v6 = j__strsignal_r((int)__fmt, (char *)__loc, (size_t)__fmt);
  int v7 = (char *)malloc_type_malloc(v6 + 129, 0x222E5A4DuLL);
  uint64_t v9 = (uint64_t)v7;
  if (v7)
  {
    *((void *)v7 + 15) = 0;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(void *)int v7 = 850045863;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = v7 + 128;
    j__strnstr(v7 + 128, __fmt, v8);
    if (v4)
    {
      if (v4 == (locale_t)-1) {
        locale_t v4 = (locale_t)&__global_locale;
      }
    }
    else
    {
      uint64_t v10 = __locale_key;
      unint64_t v11 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v10);
      if (v11) {
        locale_t v4 = v11;
      }
      else {
        locale_t v4 = (locale_t)&__global_locale;
      }
    }
    atomic_fetch_add((atomic_uint *volatile)v4, 1u);
    *(void *)(v9 + 80) = v4;
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    pthread_rwlock_rdlock((pthread_rwlock_t *)__domain);
    int v12 = __printf_comp(v9, (uint64_t)__domain);
    int v13 = *__error();
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    if (v12 < 0)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
      {
        int v14 = (void (*)(locale_t))*((void *)v4 + 1);
        if (v14) {
          v14(v4);
        }
      }
      pthread_mutex_destroy((pthread_mutex_t *)v9);
      free((void *)v9);
      uint64_t v9 = 0;
      *__error() = v13;
    }
  }
  return (printf_comp_t)v9;
}

char *__xprintf_domain_init()
{
  uint64_t result = (char *)malloc_type_calloc(1uLL, 0x9F8uLL, 0x10800406116304FuLL);
  xprintf_domain_default = (uint64_t)result;
  if (!result) {
    __xprintf_domain_init_cold_1();
  }
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  char v1 = 35;
  uint64_t v2 = 1u;
  *(void *)uint64_t result = 766030772;
  *(_OWORD *)(result + 8) = 0u;
  do
  {
    result[v1 + 167] = 3;
    char v1 = _printf_tbl_flags[v2++];
  }
  while (v2 != 30);
  int v3 = 6;
  locale_t v4 = &_printf_tbl_defaults_fbsd;
  do
  {
    char v5 = **v4;
    if (v5)
    {
      long long v6 = *(_OWORD *)(v4 + 1);
      int v7 = (unsigned __int8 *)(*v4 + 1);
      do
      {
        result[v5 + 167] = 2;
        size_t v8 = &result[24 * (char)*(v7 - 1)];
        *((_OWORD *)v8 - 31) = v6;
        *((void *)v8 - 60) = 0;
        int v9 = *v7++;
        char v5 = v9;
      }
      while (v9);
    }
    v4 += 3;
    BOOL v10 = v3-- != 0;
  }
  while (v3 != 0 && v10);
  result[277] = 1;
  *((void *)result + 268) = __printf_arginfo_n;
  *((void *)result + 269) = __printf_render_n;
  *((void *)result + 270) = 0;
  return result;
}

printf_domain_t copy_printf_domain(printf_domain_t __domain)
{
  uint64_t v2 = (char *)malloc_type_malloc(0x9F8uLL, 0x10800406116304FuLL);
  if (v2)
  {
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    pthread_rwlock_rdlock((pthread_rwlock_t *)__domain);
    j__mkdtempat_np((int)v2, (char *)__domain);
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(void *)uint64_t v2 = 766030772;
  }
  return (printf_domain_t)v2;
}

void free_printf_domain(printf_domain_t __domain)
{
  if (__domain)
  {
    pthread_rwlock_destroy((pthread_rwlock_t *)__domain);
    free(__domain);
  }
}

printf_domain_t new_printf_domain(void)
{
  pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
  uint64_t v0 = (_printf_domain *)malloc_type_malloc(0x9F8uLL, 0x10800406116304FuLL);
  char v1 = v0;
  if (v0) {
    j__mkdtempat_np((int)v0, (char *)xprintf_domain_default);
  }
  return v1;
}

int register_printf_domain_function(printf_domain_t __domain, int __spec, printf_function *__render, printf_arginfo_function *__arginfo, void *__context)
{
  pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
  unsigned int v10 = __spec - 33;
  if (v10 >= 0x5E
    || (pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init),
        unint64_t v11 = (char *)__domain + v10,
        int v13 = v11[200],
        int v12 = v11 + 200,
        v13 == 3))
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    pthread_rwlock_wrlock((pthread_rwlock_t *)__domain);
    char v15 = 0;
    if (__render)
    {
      if (__arginfo)
      {
        size_t v16 = (void *)((char *)__domain + 24 * v10);
        v16[37] = __arginfo;
        v16[38] = __render;
        v16[39] = __context;
        char v15 = 1;
      }
    }
    *int v12 = v15;
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    return 0;
  }
}

uint64_t register_printf_domain_render(pthread_rwlock_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
  if (a1
    && (unsigned int v8 = a2 - 33, v8 < 0x5E)
    && (pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init),
        int v9 = (char *)a1 + v8,
        int v11 = v9[200],
        unsigned int v10 = v9 + 200,
        v11 != 3))
  {
    pthread_rwlock_wrlock(a1);
    char v13 = 0;
    if (a3)
    {
      if (a4)
      {
        int v14 = &a1->__sig + 3 * v8;
        v14[37] = a4;
        v14[38] = a3;
        v14[39] = 0;
        char v13 = 2;
      }
    }
    char *v10 = v13;
    pthread_rwlock_unlock(a1);
    return 0;
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

int register_printf_domain_render_std(printf_domain_t __domain, const char *__specs)
{
  char v2 = *__specs;
  if (!*__specs) {
    return 0;
  }
  locale_t v4 = __specs + 1;
  while (2)
  {
    switch(v2)
    {
      case 'M':
        char v5 = __printf_render_errno;
        long long v6 = __printf_arginfo_errno;
        int v7 = (pthread_rwlock_t *)__domain;
        int v8 = 77;
        goto LABEL_10;
      case 'N':
      case 'O':
      case 'P':
      case 'R':
      case 'S':
      case 'U':
        goto LABEL_13;
      case 'Q':
        char v5 = __printf_render_quote;
        long long v6 = __printf_arginfo_quote;
        int v7 = (pthread_rwlock_t *)__domain;
        int v8 = 81;
        goto LABEL_10;
      case 'T':
        char v5 = __printf_render_time;
        long long v6 = __printf_arginfo_time;
        int v7 = (pthread_rwlock_t *)__domain;
        int v8 = 84;
        goto LABEL_10;
      case 'V':
        char v5 = __printf_render_vis;
        long long v6 = __printf_arginfo_vis;
        int v7 = (pthread_rwlock_t *)__domain;
        int v8 = 86;
        goto LABEL_10;
      default:
        if (v2 == 72)
        {
          char v5 = __printf_render_hexdump;
          long long v6 = __printf_arginfo_hexdump;
          int v7 = (pthread_rwlock_t *)__domain;
          int v8 = 72;
LABEL_10:
          if ((register_printf_domain_render(v7, v8, (uint64_t)v5, (uint64_t)v6) & 0x80000000) != 0) {
            return -1;
          }
          int v9 = *(unsigned __int8 *)v4++;
          char v2 = v9;
          if (!v9) {
            return 0;
          }
          continue;
        }
LABEL_13:
        *__error() = 22;
        return -1;
    }
  }
}

int asxprintf_exec(char **__ret, printf_comp_t __pc, ...)
{
  return _vasprintf((pthread_mutex_t *)__pc, 0, (void **)__ret);
}

int dxprintf_exec(int __fd, printf_comp_t __pc, ...)
{
  va_start(va, __pc);
  return _vdprintf((pthread_mutex_t *)__pc, 0, __fd, 0, 0, (__int16 *)va);
}

int fxprintf_exec(FILE *__stream, printf_comp_t __pc, ...)
{
  va_start(va, __pc);
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stream, 0, 0, (__int16 *)va);
}

int sxprintf_exec(char *__str, size_t __size, printf_comp_t __pc, ...)
{
  va_start(va, __pc);
  return _vsnprintf((pthread_mutex_t *)__pc, 0, __str, __size, 0, 0, (__int16 *)va);
}

int xprintf_exec(printf_comp_t __pc, ...)
{
  va_start(va, __pc);
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stdoutp, 0, 0, (__int16 *)va);
}

int vasxprintf_exec(char **__ret, printf_comp_t __pc, va_list __ap)
{
  return _vasprintf((pthread_mutex_t *)__pc, 0, (void **)__ret);
}

int vdxprintf_exec(int __fd, printf_comp_t __pc, va_list __ap)
{
  return _vdprintf((pthread_mutex_t *)__pc, 0, __fd, 0, 0, (__int16 *)__ap);
}

int vfxprintf_exec(FILE *__stream, printf_comp_t __pc, va_list __ap)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stream, 0, 0, (__int16 *)__ap);
}

int vsxprintf_exec(char *__str, size_t __size, printf_comp_t __pc, va_list __ap)
{
  return _vsnprintf((pthread_mutex_t *)__pc, 0, __str, __size, 0, 0, (__int16 *)__ap);
}

int vxprintf_exec(printf_comp_t __pc, va_list __ap)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stdoutp, 0, 0, (__int16 *)__ap);
}

char *__cdecl fparseln(FILE *a1, size_t *a2, size_t *a3, const char a4[3], int a5)
{
  size_t v8 = 0;
  int v9 = 0;
  size_t v48 = 0;
  const char *__attribute__((__org_arrdim(0,3))) v10 = "\\\\#";
  if (a4) {
    const char *__attribute__((__org_arrdim(0,3))) v10 = a4;
  }
  unsigned int v46 = *v10;
  char v47 = a5;
  int v11 = *(unsigned __int8 *)v10;
  int v12 = *((unsigned __int8 *)v10 + 1);
  int v13 = *((unsigned __int8 *)v10 + 2);
  BOOL v14 = 1;
  while (v14)
  {
    if (a3) {
      ++*a3;
    }
    char v15 = fgetln(a1, &v48);
    if (!v15) {
      break;
    }
    size_t v16 = v15;
    BOOL v14 = 0;
    size_t v17 = v48;
    if (v48 && v13)
    {
      if ((uint64_t)v48 < 1)
      {
        BOOL v14 = 0;
      }
      else
      {
        uint64_t v18 = v15;
        while (1)
        {
          if (*v18 == v13 && v11 != 0)
          {
            uint64_t v20 = (unsigned __int8 *)(v18 - 1);
            if (v18 - 1 < v15) {
              break;
            }
            char v21 = 0;
            do
            {
              if (*v20 != v11) {
                break;
              }
              ++v21;
              --v20;
            }
            while (v20 >= (unsigned __int8 *)v15);
            if ((v21 & 1) == 0) {
              break;
            }
          }
          if (++v18 >= &v15[v48])
          {
            BOOL v14 = 0;
            goto LABEL_23;
          }
        }
        size_t v17 = v18 - v15;
        size_t v48 = v18 - v15;
        BOOL v14 = v18 == v15 && v9 == 0;
        if (!v17) {
          goto LABEL_45;
        }
      }
LABEL_33:
      if (v15[v17 - 1] == 10) {
        size_t v48 = --v17;
      }
      if (!v17 || !v12) {
        goto LABEL_45;
      }
      uint64_t v23 = &v15[v17 - 1];
      if (*v23 == v12 && v11)
      {
        int v24 = (unsigned __int8 *)(v23 - 1);
        if (v24 < (unsigned __int8 *)v15) {
          goto LABEL_44;
        }
        char v25 = 0;
        do
        {
          if (*v24 != v11) {
            break;
          }
          ++v25;
          --v24;
        }
        while (v24 >= (unsigned __int8 *)v15);
        if ((v25 & 1) == 0)
        {
LABEL_44:
          size_t v48 = v17 - 1;
          BOOL v14 = 1;
          --v17;
        }
        goto LABEL_45;
      }
LABEL_47:
      int v45 = v12;
      int v26 = a2;
      int v27 = malloc_type_realloc(v9, v8 + v17 + 1, 0xC5A92874uLL);
      if (!v27)
      {
        free(v9);
        return 0;
      }
      uint64_t v28 = v27;
      j__mkdtempat_np(v27 + v8, v16);
      v8 += v48;
      v28[v8] = 0;
      int v9 = v28;
      a2 = v26;
      int v12 = v45;
    }
    else
    {
LABEL_23:
      if (v48) {
        goto LABEL_33;
      }
LABEL_45:
      if (v17 || !v9) {
        goto LABEL_47;
      }
    }
  }
  if ((v47 & 0xF) != 0 && v11 && v9 && j__strncasecmp(v9, (const char *)v46, (size_t)a3))
  {
    LOBYTE(v31) = *v9;
    stat v32 = v9;
    if (*v9)
    {
      stat v33 = v9;
      stat v32 = v9;
      do
      {
        if (v11 == v31)
        {
          LOBYTE(v31) = v11;
        }
        else
        {
          do
          {
            *v32++ = v31;
            int v34 = *++v33;
            int v31 = v34;
            if (v34) {
              BOOL v35 = v31 == v11;
            }
            else {
              BOOL v35 = 1;
            }
          }
          while (!v35);
          if (!v31) {
            break;
          }
        }
        int v36 = v33[1];
        if (!v33[1]) {
          break;
        }
        if (v36 == v13) {
          int v37 = v47 & 4;
        }
        else {
          int v37 = 0;
        }
        if (v36 == v12) {
          int v38 = v47 & 2;
        }
        else {
          int v38 = 0;
        }
        if (v36 == v11) {
          int v39 = v47 & 1;
        }
        else {
          int v39 = 0;
        }
        BOOL v41 = v36 == v11 || v36 == v12 || v36 == v13;
        int v42 = v37 | v38 | v39;
        if (!v41) {
          int v42 = v47 & 8;
        }
        if (!v42)
        {
          *v32++ = v31;
          LOBYTE(v36) = v33[1];
        }
        *v32++ = v36;
        int v43 = v33[2];
        v33 += 2;
        LOBYTE(v31) = v43;
      }
      while (v43);
    }
    *stat v32 = 0;
    size_t v8 = j__strsignal_r((int)v9, v29, v30);
  }
  if (a2) {
    *a2 = v8;
  }
  return v9;
}

int login_tty(int a1)
{
  setsid();
  int result = ioctl(a1, 0x20007461uLL, 0);
  if (result != -1)
  {
    dup2(a1, 0);
    dup2(a1, 1);
    dup2(a1, 2);
    int result = 0;
    if (a1 >= 3)
    {
      close_NOCANCEL();
      return 0;
    }
  }
  return result;
}

void logwtmp(const char *a1, const char *a2, const char *a3)
{
  MEMORY[0x18C122530](v11, 640);
  if (j__strncasecmp_l(a1, "~", v6, v7))
  {
    j__strtod(v11, (char **)a2);
    j__strtod(v12, (char **)a1);
    pid_t v13 = getpid();
    if (*a2) {
      __int16 v10 = 7;
    }
    else {
      __int16 v10 = 8;
    }
    j__strtod(v16, (char **)a3);
  }
  else if (j__strncasecmp_l(a2, "reboot", v8, v9))
  {
    __int16 v10 = 11;
  }
  else
  {
    __int16 v10 = 2;
  }
  __int16 v14 = v10;
  gettimeofday(&v15, 0);
  _utmpx_asl((uint64_t)v11);
}

int mkpathat_np(int dfd, const char *path, mode_t omode)
{
  return _mkpath(dfd, (char *)path, omode, 0);
}

int opendev(char *a1, int a2, int a3, char **a4)
{
  char v5 = a3;
  if (a4) {
    *a4 = a1;
  }
  *__error() = 2;
  if (pthread_once(&opendev_namebuf_once, (void (*)(void))opendev_namebuf_init) || (size_t v8 = (char *)namebuf) == 0)
  {
    int v11 = __error();
    int v12 = 12;
    goto LABEL_13;
  }
  if ((v5 & 4) != 0) {
    int v9 = "";
  }
  else {
    int v9 = "r";
  }
  if (j__strncasecmp(a1, (const char *)0x2F, v7))
  {
    return open_NOCANCEL();
  }
  if ((v5 & 1) == 0)
  {
LABEL_26:
    if (*__error() != 2) {
      return -1;
    }
    if (snprintf((char *)namebuf, 0x400uLL, "%s%s%s", "/dev/", v9, a1) <= 1023)
    {
      int result = open_NOCANCEL();
      if (a4) {
        *a4 = (char *)namebuf;
      }
      return result;
    }
    int v11 = __error();
    int v12 = 63;
LABEL_13:
    *int v11 = v12;
    return -1;
  }
  if (snprintf(v8, 0x400uLL, "%s%s%s", "/dev/", v9, a1) > 1023)
  {
    *__error() = 63;
    goto LABEL_26;
  }
  pid_t v13 = (char *)namebuf;
  while (1)
  {
    __int16 v14 = strrchr(v13, 115);
    if (!v14 || (*(v14 - 1) - 48) > 9) {
      break;
    }
    char *v14 = 0;
  }
  int result = open_NOCANCEL();
  if (a4) {
    *a4 = (char *)namebuf;
  }
  if (result == -1) {
    goto LABEL_26;
  }
  return result;
}

void *opendev_namebuf_init()
{
  int result = malloc_type_malloc(0x400uLL, 0xD5E21FBBuLL);
  namebuf = (uint64_t)result;
  return result;
}

int openpty(int *a1, int *a2, char *a3, termios *a4, winsize *a5)
{
  int v10 = posix_openpt(131074);
  if (v10 < 0) {
    return -1;
  }
  int v11 = v10;
  if (grantpt(v10) < 0
    || unlockpt(v11) < 0
    || ptsname_r(v11, buffer, 0x80uLL) == -1
    || (int v12 = open_NOCANCEL(), v12 < 0))
  {
    int v16 = *__error();
    close_NOCANCEL();
    *__error() = v16;
    return -1;
  }
  int v14 = v12;
  *a1 = v11;
  *a2 = v12;
  if (a3) {
    j__strnstr(a3, buffer, v13);
  }
  if (a4) {
    tcsetattr(v14, 2, a4);
  }
  if (a5) {
    ioctl(v14, 0x80087467uLL, a5);
  }
  return 0;
}

pid_t forkpty(int *a1, char *a2, termios *a3, winsize *a4)
{
  *(void *)int v10 = 0;
  if (openpty(&v10[1], v10, a2, a3, a4) == -1) {
    return -1;
  }
  pid_t v5 = fork();
  if (!v5)
  {
    close_NOCANCEL();
    int v8 = v10[0];
    if (login_tty(v10[0]) < 0)
    {
      syslog(3, "forkpty: login_tty could't make controlling tty");
      dup2(v8, 0);
      dup2(v8, 1);
      dup2(v8, 2);
      pid_t v6 = 0;
      if (v8 < 3) {
        return v6;
      }
      close_NOCANCEL();
    }
    return 0;
  }
  pid_t v6 = v5;
  if (v5 == -1)
  {
    int v7 = *__error();
    close_NOCANCEL();
    close_NOCANCEL();
    *__error() = v7;
  }
  else
  {
    *a1 = v10[1];
    close_NOCANCEL();
  }
  return v6;
}

void uuid_generate_time(uuid_t out)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (uuid_generate_time_has_init) {
    goto LABEL_21;
  }
  int v2 = socket(2, 2, 0);
  if ((v2 & 0x80000000) == 0)
  {
    int v3 = v2;
    MEMORY[0x18C122530](&v21, 1024);
    int v19 = 1024;
    uint64_t v20 = &v21;
    if ((ioctl(v3, 0xC00C6924uLL, &v19, v17, v18) & 0x80000000) == 0 && v19 >= 1)
    {
      int v4 = 0;
      while (1)
      {
        pid_t v5 = (unsigned __int8 *)v20 + v4;
        if (v5[17] == 18 && v5[22] == 6)
        {
          pid_t v6 = &v5[v5[21]];
          int v8 = v6[24];
          int v7 = v6 + 24;
          if ((v8 | 2) != 2 || v7[1] || v7[2] || v7[3] || v7[4] || v7[5]) {
            break;
          }
        }
        unsigned int v9 = v5[16];
        if (v9 >= 0x10) {
          int v10 = v9 + 16;
        }
        else {
          int v10 = 32;
        }
        v4 += v10;
        if (v4 >= v19) {
          goto LABEL_18;
        }
      }
      int v16 = *(_DWORD *)v7;
      word_1E911B6AC = *((_WORD *)v7 + 2);
      uuid_generate_time_node_id = v16;
      close_NOCANCEL();
      goto LABEL_20;
    }
LABEL_18:
    close_NOCANCEL();
  }
  arc4random_buf(&uuid_generate_time_node_id, 6uLL);
  LOBYTE(uuid_generate_time_node_id) = uuid_generate_time_node_id | 1;
LABEL_20:
  uuid_generate_time_has_init = 1;
LABEL_21:
  v21.__darwin_time_t tv_sec = 0;
  *(void *)&v21.tv_usec = 0;
  while (1)
  {
    gettimeofday(&v21, 0);
    __darwin_time_t v11 = get_clock_last;
    if ((void)get_clock_last) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = DWORD2(get_clock_last) == 0;
    }
    if (v12)
    {
      arc4random_buf(&get_clock_clock_seq, 2uLL);
      get_clock_clock_seq &= 0x3FFFu;
      get_clock_last = (__int128)v21;
      __darwin_time_t v11 = v21.tv_sec - 1;
      *(void *)&get_clock_last = v21.tv_sec - 1;
    }
    __darwin_time_t tv_sec = v21.tv_sec;
    if (v21.tv_sec < v11)
    {
      __darwin_time_t v11 = v21.tv_sec;
LABEL_36:
      int v14 = 0;
      get_clock_clock_seq = (get_clock_clock_seq + 1) & 0x3FFF;
      get_clock_adjustment = 0;
      get_clock_last = (__int128)v21;
      goto LABEL_38;
    }
    if (v21.tv_sec != v11) {
      goto LABEL_37;
    }
    if (v21.tv_usec < SDWORD2(get_clock_last)) {
      goto LABEL_36;
    }
    if (v21.tv_usec != DWORD2(get_clock_last)) {
      break;
    }
    if (get_clock_adjustment <= 9)
    {
      int v14 = ++get_clock_adjustment;
      goto LABEL_38;
    }
  }
  __darwin_time_t tv_sec = v11;
LABEL_37:
  int v14 = 0;
  get_clock_adjustment = 0;
  get_clock_last = (__int128)v21;
  __darwin_time_t v11 = tv_sec;
LABEL_38:
  uint64_t v15 = 10 * v21.tv_usec + v14 + 10000000 * v11 + 122192928000000000;
  LODWORD(v17) = v15;
  LOWORD(v18) = get_clock_clock_seq | 0x8000;
  WORD2(v17) = WORD2(v15);
  HIWORD(v17) = HIWORD(v15) & 0xFFF | 0x1000;
  *(_DWORD *)((char *)&v18 + 2) = uuid_generate_time_node_id;
  HIWORD(v18) = word_1E911B6AC;
  uuid_pack((uint64_t)&v17, (uint64_t)out);
}

pid_t tcgetsid(int a1)
{
  pid_t v2 = 0;
  if (ioctl(a1, 0x40047463uLL, &v2) < 0) {
    return -1;
  }
  else {
    return v2;
  }
}

uint64_t __libc_init(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5)
{
  v6[0] = 1;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = a4;
  long long v7 = 0u;
  long long v8 = 0u;
  return _libc_initializer(v6, a2, a5, a1);
}

void _libc_fork_child(uint64_t a1)
{
  qword_1E9119F68 = (uint64_t)"crashed on child side of fork pre-exec";
  _arc4_fork_child(a1);
  _init_clock_port();
  __environ_lock_fork_child();

  _locale_lock_fork_child();
}

int chmodx_np(const char *a1, filesec_t a2)
{
  int v3 = a1;
  return chmodx1((uint64_t)&v3, (uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t))chmodx_syscall, a2);
}

uint64_t chmodx_syscall(void *a1)
{
  return MEMORY[0x1F40CFD48](*a1);
}

pid_t fork(void)
{
  if (_libSystem_atfork_prepare_v2) {
    _libSystem_atfork_prepare_v2(0);
  }
  else {
    _libSystem_atfork_prepare();
  }
  pid_t v0 = __fork();
  if (v0)
  {
    char v1 = (void (*)(void))_libSystem_atfork_parent_v2;
    if (!_libSystem_atfork_parent_v2)
    {
      pid_t v2 = (void (*)(void))_libSystem_atfork_parent;
LABEL_10:
      v2();
      return v0;
    }
  }
  else
  {
    char v1 = (void (*)(void))_libSystem_atfork_child_v2;
    if (!_libSystem_atfork_child_v2)
    {
      pid_t v2 = (void (*)(void))_libSystem_atfork_child;
      goto LABEL_10;
    }
  }
  v1(0);
  return v0;
}

pid_t vfork(void)
{
  if (_libSystem_atfork_prepare_v2) {
    _libSystem_atfork_prepare_v2(1);
  }
  else {
    _libSystem_atfork_prepare();
  }
  pid_t v0 = __fork();
  if (v0)
  {
    char v1 = (void (*)(uint64_t))_libSystem_atfork_parent_v2;
    if (!_libSystem_atfork_parent_v2)
    {
      pid_t v2 = (void (*)(void))_libSystem_atfork_parent;
LABEL_10:
      v2();
      return v0;
    }
  }
  else
  {
    char v1 = (void (*)(uint64_t))_libSystem_atfork_child_v2;
    if (!_libSystem_atfork_child_v2)
    {
      pid_t v2 = (void (*)(void))_libSystem_atfork_child;
      goto LABEL_10;
    }
  }
  v1(1);
  return v0;
}

int openx_np(const char *a1, int a2, filesec_t a3)
{
  if ((a2 & 0x200) != 0 && a3) {
    return _mkfilex_np(0, (int)a1, (unsigned __int16)a2, a3);
  }
  else {
    return open_NOCANCEL();
  }
}

uint64_t _mkfilex_np(int a1, int a2, int a3, filesec_t a4)
{
  int v15 = -101;
  int v16 = -101;
  __int16 v14 = 0;
  uint64_t v13 = 0;
  BOOL v12 = 0;
  memset(v11, 0, 68);
  if (!a4) {
    goto LABEL_23;
  }
  if (filesec_get_property(a4, FILESEC_OWNER, &v16) && *__error() != 2
    || filesec_get_property(a4, FILESEC_GROUP, &v15) && *__error() != 2
    || filesec_get_property(a4, FILESEC_MODE, &v14) && *__error() != 2
    || (filesec_get_property(a4, FILESEC_ACL_RAW, &v12) || filesec_get_property(a4, FILESEC_ACL_ALLOCSIZE, &v13))
    && *__error() != 2)
  {
    return 0xFFFFFFFFLL;
  }
  pid_t v6 = v12;
  if (v12)
  {
    if (v12 == (_OWORD *)1)
    {
LABEL_27:
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
    memset((char *)&v11[2] + 4, 0, 32);
    memset((char *)v11 + 4, 0, 32);
    pid_t v6 = v11;
    BOOL v12 = v11;
    LODWORD(v11[0]) = 19710317;
    DWORD1(v11[2]) = -1;
  }
  if (filesec_get_property(a4, FILESEC_UUID, (char *)v6 + 4))
  {
    if (*__error() != 2) {
      return 0xFFFFFFFFLL;
    }
    long long v8 = v12;
    *(void *)((char *)v12 + 12) = 0;
    *(void *)((char *)v8 + 4) = 0;
  }
  else
  {
    int v7 = 1;
    long long v8 = v12;
  }
  if (!filesec_get_property(a4, FILESEC_GRPUUID, (char *)v8 + 20))
  {
LABEL_23:
    switch(a1)
    {
      case 2:
        return __mkdir_extended();
      case 1:
        return __mkfifo_extended();
      case 0:
        return __open_extended();
    }
    goto LABEL_27;
  }
  if (*__error() == 2)
  {
    unsigned int v9 = v12;
    *(void *)((char *)v12 + 28) = 0;
    *(void *)((char *)v9 + 20) = 0;
    if (!v7) {
      BOOL v12 = 0;
    }
    goto LABEL_23;
  }
  return 0xFFFFFFFFLL;
}

int mkfifox_np(const char *a1, filesec_t a2)
{
  return _mkfilex_np(1, (int)a1, 0, a2);
}

int mkdirx_np(const char *a1, filesec_t a2)
{
  return _mkfilex_np(2, (int)a1, 0, a2);
}

int settimeofday(const timeval *a1, const timezone *a2)
{
  int v3 = __settimeofday();
  if (!v3)
  {
    notify_post("com.apple.system.clock_set");
    if (!a1) {
      return v3;
    }
    goto LABEL_3;
  }
  if (a1)
  {
LABEL_3:
    __darwin_time_t tv_sec = a1->tv_sec;
    __darwin_suseconds_t tv_usec = a1->tv_usec;
    int v7 = 0;
    asprintf(&v7, "settimeofday({%#lx,%#x}) == %d", tv_sec, tv_usec, v3);
    _simple_asl_log();
    free(v7);
  }
  return v3;
}

int umaskx_np(filesec_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  __int16 v3 = 0;
  if (a1)
  {
    if (filesec_get_property(a1, FILESEC_MODE, &v3) && *__error() != 2
      || (filesec_get_property(a1, FILESEC_ACL_RAW, &v5) || filesec_get_property(a1, FILESEC_ACL_ALLOCSIZE, &v4))
      && *__error() != 2)
    {
      return -1;
    }
    if (!v4) {
      uint64_t v5 = 0;
    }
  }
  return __umask_extended();
}

uint64_t OSMemoryNotificationCurrentLevel()
{
  return 0;
}

uint64_t _OSThermalNotificationLevelForBehavior(unsigned int a1)
{
  uint64_t state64 = -1;
  if (a1 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = a1;
  __int16 v3 = (dispatch_once_t *)((char *)&predicates + 8 * a1);
  v5[0] = MEMORY[0x1E4F14BE8];
  v5[1] = 0x40000000;
  void v5[2] = ___OSThermalNotificationLevelForBehavior_block_invoke;
  v5[3] = &__block_descriptor_tmp;
  unsigned int v6 = a1;
  if (*v3 != -1) {
    dispatch_once(v3, v5);
  }
  notify_get_state(tokens[v2], &state64);
  return state64;
}

uint64_t _OSThermalNotificationSetLevelForBehavior(uint64_t result, unsigned int a2)
{
  if (a2 <= 0xA)
  {
    uint64_t v10 = v2;
    uint64_t v11 = v3;
    uint64_t v5 = (int)result;
    uint64_t v6 = a2;
    int v7 = (dispatch_once_t *)((char *)&predicates + 8 * a2);
    block[0] = MEMORY[0x1E4F14BE8];
    block[1] = 0x40000000;
    block[2] = ___OSThermalNotificationSetLevelForBehavior_block_invoke;
    block[3] = &__block_descriptor_tmp_5;
    unsigned int v9 = a2;
    if (*v7 != -1) {
      dispatch_once(v7, block);
    }
    int result = notify_set_state(tokens[v6], v5);
    if (a2 == 8)
    {
      if (qword_1E911AEF0 != -1) {
        dispatch_once(&qword_1E911AEF0, &__block_literal_global);
      }
      return notify_set_state(dword_1E911AF20, 0xBuLL);
    }
  }
  return result;
}

uint64_t OSThermalNotificationCurrentLevel()
{
  if (thermalLevelsReady == 1)
  {
    return _OSThermalNotificationLevelForBehavior(0);
  }
  else
  {
    uint64_t state64 = 0;
    if (qword_1E911AEF0 != -1) {
      dispatch_once(&qword_1E911AEF0, &__block_literal_global_9);
    }
    notify_get_state(dword_1E911AF20, &state64);
    if (state64 == 11)
    {
      thermalLevelsReady = 1;
      return _OSThermalNotificationLevelForBehavior(0);
    }
    else
    {
      thermalLevelsReady = 0;
      return 0xFFFFFFFFLL;
    }
  }
}

uint64_t __OSThermalNotificationCurrentLevel_block_invoke()
{
  return notify_register_check("com.apple.system.thermalmitigation.thermaltableready", &dword_1E911AF20);
}

int sync_volume_np(const char *a1, int a2)
{
  int v7 = a2 & 3;
  int v3 = *__error();
  int v4 = fsctl(a1, 0x80044101uLL, &v7, 0);
  int v5 = 0;
  if (v4 == -1) {
    int v5 = *__error();
  }
  *__error() = v3;
  return v5;
}

int fsync_volume_np(int a1, int a2)
{
  int v7 = a2 & 3;
  int v3 = *__error();
  int v4 = ffsctl(a1, 0x80004101uLL, &v7, 0);
  int v5 = 0;
  if (v4 == -1) {
    int v5 = *__error();
  }
  *__error() = v3;
  return v5;
}

void *libc_set_introspection_hooks(void *result, void *a2, unint64_t a3)
{
  if (a3 <= 7) {
    libc_set_introspection_hooks_cold_1();
  }
  int v5 = result;
  if (a2)
  {
    if (a3 <= 0x27) {
      libc_set_introspection_hooks_cold_4();
    }
    if (a3 != 40) {
      MEMORY[0x18C122530](a2 + 200, a3 - 40);
    }
    int result = __copy_assignment_8_8_t0w8_pa0_28660_8_pa0_36689_16_pa0_31171_24_pa0_29245_32(a2, &libc_hooks);
  }
  if (v5)
  {
    if (!*v5) {
      libc_set_introspection_hooks_cold_2();
    }
    if (a3 <= 0x27) {
      libc_set_introspection_hooks_cold_3();
    }
    int result = __copy_assignment_8_8_t0w8_pa0_28660_8_pa0_36689_16_pa0_31171_24_pa0_29245_32(&libc_hooks, v5);
    libc_hooks = 1;
  }
  return result;
}

void *__copy_assignment_8_8_t0w8_pa0_28660_8_pa0_36689_16_pa0_31171_24_pa0_29245_32(void *result, void *a2)
{
  *int result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  return result;
}

int dirfd(DIR *dirp)
{
  if (!dirp || (int result = dirp->__dd_fd, result < 0))
  {
    *__error() = 22;
    return -1;
  }
  return result;
}

uint64_t _os_crash_msg(uint64_t a1)
{
  if (a1)
  {
    qword_1E9119F68 = a1;
    if (_os_crash_callback) {
      _os_crash_callback();
    }
  }
  uint64_t v1 = abort_with_payload();
  return _os_crash_fmt(v1);
}

void *_os_crash_fmt(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  qword_1E9119F68 = v1;
  if (_os_crash_callback) {
    _os_crash_callback(v1);
  }
  int result = dlopen("libsystem_trace.dylib", 17);
  if (result) {
    _os_crash_fmt_cold_1();
  }
  return result;
}

uint64_t creat_NOCANCEL(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F40CFDF0](a1, 1537, a2);
}

uint64_t gethostid(void)
{
  int v3 = 0;
  *(void *)int v5 = 0xB00000001;
  size_t v4 = 4;
  int v0 = sysctl(v5, 2u, &v3, &v4, 0, 0);
  int v1 = v3;
  if (v0 == -1) {
    return -1;
  }
  return v1;
}

char *__cdecl getwd(char *a1)
{
  uint64_t v2 = getcwd(a1, 0x400uLL);
  if (!v2)
  {
    int v3 = __error();
    strerror_r(*v3, a1, 0x400uLL);
  }
  return v2;
}

void sethostid(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)uint64_t v2 = 0xB00000001;
  sysctl(v2, 2u, 0, 0, &v1, 8uLL);
}

pid_t setpgrp(void)
{
  pid_t v0 = getpgrp();
  pid_t v1 = getpid();
  pid_t v2 = v1;
  if (v0 != v1) {
    setpgid(v1, v1);
  }
  return v2;
}

int setrgid(gid_t a1)
{
  return setregid(a1, 0xFFFFFFFF);
}

int setruid(uid_t a1)
{
  return setreuid(a1, 0xFFFFFFFF);
}

uint64_t __bt_close(void *a1)
{
  uint64_t v2 = a1[7];
  int v3 = *(void **)(v2 + 32);
  if (v3)
  {
    mpool_put(*(MPOOL **)v2, v3, 0);
    *(void *)(v2 + 32) = 0;
  }
  uint64_t result = __bt_sync((uint64_t)a1, 0);
  if (result != -1)
  {
    uint64_t result = mpool_close(*(MPOOL **)v2);
    if (result != -1)
    {
      int v5 = *(void **)(v2 + 48);
      if (v5)
      {
        free(v5);
        *(void *)(v2 + 48) = 0;
        *(void *)(v2 + 56) = 0;
      }
      uint64_t v6 = *(void **)(v2 + 480);
      if (v6)
      {
        free(v6);
        *(void *)(v2 + 480) = 0;
        *(void *)(v2 + 488) = 0;
      }
      int v7 = *(void **)(v2 + 496);
      if (v7) {
        free(v7);
      }
      free((void *)v2);
      free(a1);
      if (close_NOCANCEL()) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t __bt_sync(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  size_t v4 = *(void **)(v3 + 32);
  if (v4)
  {
    mpool_put(*(MPOOL **)v3, v4, 0);
    *(void *)(v3 + 32) = 0;
  }
  if (a2)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  int v6 = *(_DWORD *)(v3 + 636);
  if ((v6 & 0x15) != 4) {
    return 0;
  }
  if ((v6 & 2) != 0)
  {
    int v7 = mpool_get(*(MPOOL **)v3, 0, 0);
    if (!v7) {
      return 0xFFFFFFFFLL;
    }
    int v8 = *(_DWORD *)(v3 + 520);
    int v9 = *(_DWORD *)(v3 + 516);
    int v10 = *(_DWORD *)(v3 + 616);
    int v11 = *(_DWORD *)(v3 + 636) & 0xA0;
    *(void *)int v7 = 0x300053162;
    v7[2] = v8;
    v7[3] = v9;
    v7[4] = v10;
    v7[5] = v11;
    mpool_put(*(MPOOL **)v3, v7, 1u);
  }
  uint64_t result = mpool_sync(*(MPOOL **)v3);
  if (!result) {
    *(_DWORD *)(v3 + 636) &= ~4u;
  }
  return result;
}

unsigned int *__bt_pgin(unsigned int *result, int a2, uint64_t a3)
{
  if ((result[159] & 8) != 0)
  {
    if (a2)
    {
      unsigned int v3 = bswap32(*(_DWORD *)(a3 + 4));
      *(_DWORD *)a3 = bswap32(*(_DWORD *)a3);
      *(_DWORD *)(a3 + 4) = v3;
      unsigned int v4 = bswap32(*(_DWORD *)(a3 + 12));
      *(_DWORD *)(a3 + 8) = bswap32(*(_DWORD *)(a3 + 8));
      *(_DWORD *)(a3 + 12) = v4;
      uint64_t v5 = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
      *(_WORD *)(a3 + 16) = v5;
      *(_WORD *)(a3 + 18) = bswap32(*(unsigned __int16 *)(a3 + 18)) >> 16;
      unint64_t v6 = v5 + 131052;
      int v7 = v4 & 0x1F;
      if (v7 == 1)
      {
        uint64_t v18 = (unsigned __int16)(v6 >> 1);
        if (v18)
        {
          int v19 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v20 = bswap32((unsigned __int16)*v19) >> 16;
            *v19++ = v20;
            uint64_t v21 = a3 + v20;
            unsigned int v22 = bswap32(*(_DWORD *)(v21 + 4));
            *(_DWORD *)uint64_t v21 = bswap32(*(_DWORD *)v21);
            *(_DWORD *)(v21 + 4) = v22;
            if ((*(unsigned char *)(v21 + 8) & 2) != 0)
            {
              *(_DWORD *)(v21 + 9) = bswap32(*(_DWORD *)(v21 + 9));
              *(_DWORD *)(v21 + 13) = bswap32(*(_DWORD *)(v21 + 13));
            }
            --v18;
          }
          while (v18);
        }
      }
      else
      {
        uint64_t v8 = (unsigned __int16)(v6 >> 1);
        if (v7 == 2 && v8 != 0)
        {
          int v10 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v11 = bswap32((unsigned __int16)*v10) >> 16;
            *v10++ = v11;
            uint64_t v12 = a3 + v11;
            unsigned int v13 = bswap32(*(_DWORD *)(v12 + 4));
            *(_DWORD *)uint64_t v12 = bswap32(*(_DWORD *)v12);
            *(_DWORD *)(v12 + 4) = v13;
            char v14 = *(unsigned char *)(v12 + 8);
            if ((v14 & 3) != 0)
            {
              if ((*(unsigned char *)(v12 + 8) & 2) == 0)
              {
                int v15 = (_DWORD *)(v12 + 9);
                if ((v14 & 1) == 0) {
                  goto LABEL_15;
                }
LABEL_14:
                unsigned int v17 = bswap32(v15[2]);
                v15[1] = bswap32(v15[1]);
                v15[2] = v17;
                goto LABEL_15;
              }
              unsigned int v16 = *(_DWORD *)(v12 + 13);
              int v15 = (_DWORD *)(v12 + 13);
              *(v15 - 1) = bswap32(*(v15 - 1));
              *int v15 = bswap32(v16);
              if (v14) {
                goto LABEL_14;
              }
            }
LABEL_15:
            --v8;
          }
          while (v8);
        }
      }
    }
    else
    {
      return mswap((unsigned int *)a3);
    }
  }
  return result;
}

unsigned int *mswap(unsigned int *result)
{
  unsigned int v1 = bswap32(result[1]);
  *uint64_t result = bswap32(*result);
  result[1] = v1;
  unsigned int v2 = bswap32(result[3]);
  result[2] = bswap32(result[2]);
  result[3] = v2;
  unsigned int v3 = bswap32(result[5]);
  result[4] = bswap32(result[4]);
  result[5] = v3;
  return result;
}

unsigned int *__bt_pgout(unsigned int *result, int a2, uint64_t a3)
{
  if ((result[159] & 8) != 0)
  {
    if (a2)
    {
      unint64_t v3 = *(unsigned __int16 *)(a3 + 16) + 131052;
      if ((*(_DWORD *)(a3 + 12) & 0x1F) == 1)
      {
        uint64_t v13 = (unsigned __int16)(v3 >> 1);
        if (v13)
        {
          char v14 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v15 = a3 + (unsigned __int16)*v14;
            unsigned int v16 = bswap32(*(_DWORD *)(v15 + 4));
            *(_DWORD *)uint64_t v15 = bswap32(*(_DWORD *)v15);
            *(_DWORD *)(v15 + 4) = v16;
            if ((*(unsigned char *)(v15 + 8) & 2) != 0)
            {
              *(_DWORD *)(v15 + 9) = bswap32(*(_DWORD *)(v15 + 9));
              *(_DWORD *)(v15 + 13) = bswap32(*(_DWORD *)(v15 + 13));
            }
            _WORD *v14 = bswap32((unsigned __int16)*v14) >> 16;
            ++v14;
            --v13;
          }
          while (v13);
        }
      }
      else
      {
        uint64_t v4 = (unsigned __int16)(v3 >> 1);
        if ((*(_DWORD *)(a3 + 12) & 0x1F) == 2 && v4 != 0)
        {
          unint64_t v6 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v7 = a3 + (unsigned __int16)*v6;
            unsigned int v8 = bswap32(*(_DWORD *)(v7 + 4));
            *(_DWORD *)uint64_t v7 = bswap32(*(_DWORD *)v7);
            *(_DWORD *)(v7 + 4) = v8;
            char v9 = *(unsigned char *)(v7 + 8);
            if ((v9 & 3) != 0)
            {
              if ((*(unsigned char *)(v7 + 8) & 2) == 0)
              {
                int v10 = (_DWORD *)(v7 + 9);
                if ((v9 & 1) == 0) {
                  goto LABEL_15;
                }
LABEL_14:
                unsigned int v12 = bswap32(v10[2]);
                v10[1] = bswap32(v10[1]);
                int v10[2] = v12;
                goto LABEL_15;
              }
              unsigned int v11 = *(_DWORD *)(v7 + 13);
              int v10 = (_DWORD *)(v7 + 13);
              *(v10 - 1) = bswap32(*(v10 - 1));
              _DWORD *v10 = bswap32(v11);
              if (v9) {
                goto LABEL_14;
              }
            }
LABEL_15:
            *unint64_t v6 = bswap32((unsigned __int16)*v6) >> 16;
            ++v6;
            --v4;
          }
          while (v4);
        }
      }
      unsigned int v17 = bswap32(*(_DWORD *)(a3 + 4));
      *(_DWORD *)a3 = bswap32(*(_DWORD *)a3);
      *(_DWORD *)(a3 + 4) = v17;
      unsigned int v18 = bswap32(*(_DWORD *)(a3 + 12));
      *(_DWORD *)(a3 + 8) = bswap32(*(_DWORD *)(a3 + 8));
      *(_DWORD *)(a3 + 12) = v18;
      *(_WORD *)(a3 + 16) = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
      *(_WORD *)(a3 + 18) = bswap32(*(unsigned __int16 *)(a3 + 18)) >> 16;
    }
    else
    {
      return mswap((unsigned int *)a3);
    }
  }
  return result;
}

uint64_t __bt_delete(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void **)(v5 + 32);
  if (v6)
  {
    mpool_put(*(MPOOL **)v5, v6, 0);
    *(void *)(v5 + 32) = 0;
  }
  if ((*(unsigned char *)(v5 + 636) & 0x10) != 0)
  {
    unsigned int v17 = __error();
    int v18 = 1;
LABEL_30:
    *unsigned int v17 = v18;
    return 0xFFFFFFFFLL;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      int v28 = 0;
      uint64_t v7 = __bt_search(v5, a2, &v28);
      if (!v7) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v8 = v7;
      if (v28)
      {
        while (2)
        {
          char v9 = *v8;
          while (1)
          {
            if (__bt_dleaf(v5, a2, v9, *((unsigned __int16 *)v8 + 4)))
            {
LABEL_39:
              mpool_put(*(MPOOL **)v5, v9, 0);
              return 0xFFFFFFFFLL;
            }
            if ((*(unsigned char *)(v5 + 636) & 0x20) != 0)
            {
              if ((v9[4] & 0xFFFE) == 0x14)
              {
                if (__bt_pdelete(v5, v9)) {
                  return 0xFFFFFFFFLL;
                }
              }
              else
              {
                mpool_put(*(MPOOL **)v5, v9, 1u);
              }
              goto LABEL_41;
            }
            unint64_t v10 = *((unsigned __int16 *)v8 + 4);
            uint64_t v11 = *((unsigned __int16 *)v9 + 8);
            unint64_t v12 = (unint64_t)(v11 - 20) >> 1;
            if (v12 <= v10) {
              break;
            }
            if (__bt_cmp(v5, a2, (uint64_t *)v8))
            {
              unint64_t v10 = *((unsigned __int16 *)v8 + 4);
              uint64_t v11 = *((unsigned __int16 *)v9 + 8);
              unint64_t v12 = (unint64_t)(v11 - 20) >> 1;
              break;
            }
          }
          BOOL v13 = v12 == v10;
          *((_WORD *)v8 + 4) = v10 - 1;
          if (v10)
          {
            while (!__bt_cmp(v5, a2, (uint64_t *)v8))
            {
              if (__bt_dleaf(v5, a2, v9, *((unsigned __int16 *)v8 + 4)) == -1) {
                goto LABEL_39;
              }
              int v14 = *((unsigned __int16 *)v8 + 4);
              *((_WORD *)v8 + 4) = v14 - 1;
              if (!v14)
              {
                BOOL v13 = 1;
                break;
              }
            }
            LOWORD(v11) = *((_WORD *)v9 + 8);
          }
          if ((v11 & 0xFFFE) == 0x14)
          {
            if (__bt_pdelete(v5, v9)) {
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            mpool_put(*(MPOOL **)v5, v9, 1u);
            if (!v13) {
              goto LABEL_41;
            }
          }
          uint64_t v15 = __bt_search(v5, a2, &v28);
          if (!v15) {
            goto LABEL_41;
          }
          unsigned int v8 = v15;
          if (v28) {
            continue;
          }
          break;
        }
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = 1;
      }
      uint64_t v20 = *(MPOOL **)v5;
      uint64_t v21 = *v8;
      unsigned int v22 = 0;
      goto LABEL_37;
    }
    goto LABEL_29;
  }
  if ((*(unsigned char *)(v5 + 68) & 8) == 0)
  {
LABEL_29:
    unsigned int v17 = __error();
    int v18 = 22;
    goto LABEL_30;
  }
  if ((*(unsigned char *)(v5 + 68) & 7) != 0) {
    return 1;
  }
  uint64_t v23 = (pgno_t *)mpool_get(*(MPOOL **)v5, *(_DWORD *)(v5 + 40), 0);
  int v27 = v23;
  if (!v23) {
    return 0xFFFFFFFFLL;
  }
  int v24 = v23;
  if ((v23[4] & 0xFFFE) == 0x16)
  {
    if (__bt_stkacq(v5, (void **)&v27, (pgno_t *)(v5 + 40))) {
      return 0xFFFFFFFFLL;
    }
    int v24 = v27;
  }
  uint64_t v25 = __bt_dleaf(v5, 0, v24, *(unsigned __int16 *)(v5 + 44));
  if ((v24[4] & 0xFFFE) == 0x14 && v25 == 0)
  {
    if (!__bt_pdelete(v5, v24)) {
      goto LABEL_41;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = v25;
  unsigned int v22 = v25 == 0;
  uint64_t v20 = *(MPOOL **)v5;
  uint64_t v21 = v24;
LABEL_37:
  mpool_put(v20, v21, v22);
  if (!v16)
  {
LABEL_41:
    uint64_t v16 = 0;
    *(_DWORD *)(v5 + 636) |= 4u;
  }
  return v16;
}

BOOL __bt_stkacq(uint64_t a1, void **a2, pgno_t *a3)
{
  int v33 = 0;
  mpool_put(*(MPOOL **)a1, *a2, 0);
  unint64_t v6 = __bt_search(a1, (uint64_t)(a3 + 2), &v33);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = *v6;
  if (**v6 != *a3)
  {
    LOWORD(v10) = 0;
    uint64_t v11 = a1 + 72;
    while (*v7 != *a3)
    {
      pgno_t v12 = v7[2];
      mpool_put(*(MPOOL **)a1, v7, 0);
      if (!v12)
      {
        unsigned int v22 = __bt_search(a1, (uint64_t)(a3 + 2), &v33);
        if (!v22) {
          return 1;
        }
        uint64_t v7 = *v22;
        while (*v7 != *a3)
        {
          pgno_t v23 = v7[1];
          if (!v23) {
            break;
          }
          mpool_put(*(MPOOL **)a1, v7, 0);
          uint64_t v24 = *(void *)(a1 + 472);
          if (v24 != v11)
          {
            int v25 = 0;
            while (1)
            {
              pgno_t v26 = *(_DWORD *)(v24 - 8);
              *(void *)(a1 + 472) = v24 - 8;
              int v27 = mpool_get(*(MPOOL **)a1, v26, 0);
              if (!v27) {
                return 1;
              }
              uint64_t v7 = v27;
              __int16 v28 = *(_WORD *)(v24 - 4);
              if (v28)
              {
                LOWORD(v10) = v28 - 1;
                uint64_t v29 = *(void *)(a1 + 472);
                *(_DWORD *)uint64_t v29 = *v27;
                *(_WORD *)(v29 + 4) = v28 - 1;
                *(void *)(a1 + 472) = v29 + 8;
                if (v25) {
                  goto LABEL_32;
                }
                break;
              }
              mpool_put(*(MPOOL **)a1, v27, 0);
              ++v25;
              uint64_t v24 = *(void *)(a1 + 472);
              if (v24 == v11)
              {
LABEL_32:
                while (1)
                {
                  pgno_t v30 = *(_DWORD *)((char *)v7 + *((unsigned __int16 *)v7 + (unsigned __int16)v10 + 10) + 4);
                  mpool_put(*(MPOOL **)a1, v7, 0);
                  int v31 = mpool_get(*(MPOOL **)a1, v30, 0);
                  if (!v31) {
                    return 1;
                  }
                  uint64_t v7 = v31;
                  unsigned int v10 = ((*((unsigned __int16 *)v31 + 8) + 131052) >> 1) - 1;
                  uint64_t v32 = *(void *)(a1 + 472);
                  *(_DWORD *)uint64_t v32 = v30;
                  *(_WORD *)(v32 + 4) = v10;
                  *(void *)(a1 + 472) = v32 + 8;
                  if (!--v25) {
                    goto LABEL_34;
                  }
                }
              }
            }
          }
LABEL_34:
          mpool_put(*(MPOOL **)a1, v7, 0);
          uint64_t v7 = mpool_get(*(MPOOL **)a1, v23, 0);
          BOOL result = 1;
          if (!v7) {
            return result;
          }
        }
        break;
      }
      uint64_t v13 = *(void *)(a1 + 472);
      if (v13 != v11)
      {
        int v14 = 0;
        while (1)
        {
          pgno_t v15 = *(_DWORD *)(v13 - 8);
          *(void *)(a1 + 472) = v13 - 8;
          uint64_t v16 = mpool_get(*(MPOOL **)a1, v15, 0);
          if (!v16) {
            return 1;
          }
          uint64_t v7 = v16;
          uint64_t v17 = *(unsigned __int16 *)(v13 - 4);
          if ((((unint64_t)*((unsigned __int16 *)v16 + 8) - 20) >> 1) - 1 != v17)
          {
            LOWORD(v10) = v17 + 1;
            uint64_t v18 = *(void *)(a1 + 472);
            *(_DWORD *)uint64_t v18 = *v16;
            *(_WORD *)(v18 + 4) = v17 + 1;
            *(void *)(a1 + 472) = v18 + 8;
            goto LABEL_15;
          }
          mpool_put(*(MPOOL **)a1, v16, 0);
          ++v14;
          uint64_t v13 = *(void *)(a1 + 472);
          if (v13 == v11) {
            goto LABEL_15;
          }
        }
      }
      int v14 = 0;
LABEL_15:
      int v19 = v14 + 1;
      while (--v19)
      {
        pgno_t v20 = *(_DWORD *)((char *)v7 + *((unsigned __int16 *)v7 + (unsigned __int16)v10 + 10) + 4);
        uint64_t v21 = *(void *)(a1 + 472);
        *(_DWORD *)uint64_t v21 = v20;
        *(_WORD *)(v21 + 4) = 0;
        *(void *)(a1 + 472) = v21 + 8;
        mpool_put(*(MPOOL **)a1, v7, 0);
        uint64_t v7 = mpool_get(*(MPOOL **)a1, v20, 0);
        LOWORD(v10) = 0;
        if (!v7) {
          return 1;
        }
      }
      mpool_put(*(MPOOL **)a1, v7, 0);
      uint64_t v7 = mpool_get(*(MPOOL **)a1, v12, 0);
      BOOL result = 1;
      if (!v7) {
        return result;
      }
    }
  }
  mpool_put(*(MPOOL **)a1, v7, 0);
  unsigned int v8 = mpool_get(*(MPOOL **)a1, *a3, 0);
  *a2 = v8;
  return v8 == 0;
}

uint64_t __bt_dleaf(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  char v7 = *(unsigned char *)(a1 + 68);
  if ((v7 & 9) == 8 && *(_DWORD *)(a1 + 40) == *a3 && *(unsigned __int16 *)(a1 + 44) == a4)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    *(unsigned char *)(a1 + 68) = v7 & 0xF8;
    if ((*(unsigned char *)(a1 + 636) & 0x20) != 0)
    {
      uint64_t v32 = a3;
      LOWORD(v33) = a4;
      goto LABEL_19;
    }
    uint64_t v9 = a2;
    if (!a2)
    {
      uint64_t v32 = a3;
      LOWORD(v33) = a4;
      uint64_t v9 = a1 + 48;
      if (__bt_ret(a1, (uint64_t)&v32, (void *)(a1 + 48), a1 + 48, 0, 0, 1)) {
        return 0xFFFFFFFFLL;
      }
    }
    if (a4 && (uint64_t v32 = a3, LOWORD(v33) = a4 - 1, !__bt_cmp(a1, v9, (uint64_t *)&v32)))
    {
      char v14 = *(unsigned char *)(a1 + 68) | 4;
    }
    else
    {
      if ((((unint64_t)*((unsigned __int16 *)a3 + 8) - 20) >> 1) - 1 <= a4
        || (uint64_t v32 = a3, LOWORD(v33) = a4 + 1, __bt_cmp(a1, v9, (uint64_t *)&v32)))
      {
        if (!a4)
        {
          pgno_t v15 = a3[1];
          if (v15)
          {
            uint64_t v16 = mpool_get(*(MPOOL **)a1, v15, 0);
            if (!v16) {
              return 0xFFFFFFFFLL;
            }
            pgno_t v12 = v16;
            uint64_t v32 = v16;
            LOWORD(v33) = ((*((unsigned __int16 *)v16 + 8) + 131052) >> 1) - 1;
            if (!__bt_cmp(a1, v9, (uint64_t *)&v32))
            {
              char v31 = 4;
LABEL_56:
              *(unsigned char *)(a1 + 68) |= v31;
              mpool_put(*(MPOOL **)a1, v12, 0);
              goto LABEL_30;
            }
            mpool_put(*(MPOOL **)a1, v12, 0);
          }
        }
        if ((((unint64_t)*((unsigned __int16 *)a3 + 8) - 20) >> 1) - 1 != a4 || (pgno_t v10 = a3[2]) == 0)
        {
LABEL_16:
          uint64_t v32 = a3;
          LOWORD(v33) = a4;
          if (!a2) {
            goto LABEL_20;
          }
LABEL_19:
          if (!__bt_ret(a1, (uint64_t)&v32, (void *)(a1 + 48), a1 + 48, 0, 0, 1))
          {
LABEL_20:
            *(unsigned char *)(a1 + 68) |= 1u;
            goto LABEL_31;
          }
          return 0xFFFFFFFFLL;
        }
        uint64_t v11 = mpool_get(*(MPOOL **)a1, v10, 0);
        if (!v11) {
          return 0xFFFFFFFFLL;
        }
        pgno_t v12 = v11;
        uint64_t v32 = v11;
        LOWORD(v33) = 0;
        if (__bt_cmp(a1, v9, (uint64_t *)&v32))
        {
          mpool_put(*(MPOOL **)a1, v12, 0);
          goto LABEL_16;
        }
        char v31 = 2;
        goto LABEL_56;
      }
      char v14 = *(unsigned char *)(a1 + 68) | 2;
    }
    *(unsigned char *)(a1 + 68) = v14;
LABEL_30:
    *(_DWORD *)(a1 + 40) = *v32;
    *(_WORD *)(a1 + 44) = v33;
  }
LABEL_31:
  uint64_t v17 = a3 + 5;
  uint64_t v18 = (unsigned __int16 *)a3 + a4 + 10;
  int v19 = (_DWORD *)((char *)a3 + *v18);
  char v20 = *((unsigned char *)v19 + 8);
  if ((v20 & 2) != 0)
  {
    uint64_t result = __ovfl_delete(a1, (unsigned int *)((char *)v19 + 9));
    if (result == -1) {
      return result;
    }
    char v20 = *((unsigned char *)v19 + 8);
  }
  if ((v20 & 1) == 0 || (uint64_t result = __ovfl_delete(a1, (unsigned int *)((char *)v19 + *v19 + 9)), result != -1))
  {
    uint64_t v21 = (*v19 + v19[1] + 12) & 0xFFFFFFFC;
    j__mkostemp((char *)a3 + *((unsigned __int16 *)a3 + 9) + v21, a3 + *((unsigned __int16 *)a3 + 9));
    *((_WORD *)a3 + 9) += v21;
    unsigned int v22 = *v18;
    if ((_WORD)a4)
    {
      unsigned int v23 = a4;
      do
      {
        unsigned int v24 = (unsigned __int16)*v17;
        if (v24 < v22) {
          *uint64_t v17 = v24 + v21;
        }
        --v23;
        ++v17;
      }
      while ((_WORD)v23);
    }
    int v25 = *((unsigned __int16 *)a3 + 8);
    unsigned int v26 = ~a4 + ((v25 + 131052) >> 1);
    if (~(_WORD)a4 + (unsigned __int16)((v25 + 131052) >> 1))
    {
      int v27 = v17 + 1;
      do
      {
        unsigned int v28 = *v27;
        if (v28 >= v22) {
          __int16 v29 = 0;
        }
        else {
          __int16 v29 = v21;
        }
        *(v27 - 1) = v29 + v28;
        --v26;
        ++v27;
      }
      while ((_WORD)v26);
      LOWORD(v25) = *((_WORD *)a3 + 8);
    }
    *((_WORD *)a3 + 8) = v25 - 2;
    if ((*(unsigned char *)(a1 + 68) & 9) == 8
      && *(_DWORD *)(a1 + 40) == *a3
      && (unsigned int v30 = *(unsigned __int16 *)(a1 + 44), v30 > a4))
    {
      uint64_t result = 0;
      *(_WORD *)(a1 + 44) = v30 - 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t __bt_pdelete(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 72;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 472);
    if (v5 == v4) {
      break;
    }
    pgno_t v6 = *(_DWORD *)(v5 - 8);
    *(void *)(a1 + 472) = v5 - 8;
    char v7 = mpool_get(*(MPOOL **)a1, v6, 0);
    if (!v7) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v8 = v7;
    uint64_t v9 = *(unsigned __int16 *)(v5 - 4);
    pgno_t v10 = (char *)v7 + 2 * v9;
    unsigned int v12 = *((unsigned __int16 *)v10 + 10);
    uint64_t v11 = (unsigned __int16 *)(v10 + 20);
    uint64_t v13 = (char *)v7 + v12;
    if ((v13[8] & 2) != 0 && __ovfl_delete(a1, (pgno_t *)(v13 + 9)) == -1)
    {
      mpool_put(*(MPOOL **)a1, v8, 0);
      return 0xFFFFFFFFLL;
    }
    if ((v8[4] & 0xFFFE) != 0x16)
    {
      char v14 = v8 + 5;
      uint64_t v15 = (*(_DWORD *)v13 & 0xFFFFFFFC) + 12;
      j__mkostemp((char *)v8 + *((unsigned __int16 *)v8 + 9) + v15, v8 + *((unsigned __int16 *)v8 + 9));
      *((_WORD *)v8 + 9) += v15;
      unsigned int v16 = *v11;
      if (v9)
      {
        int v17 = v9;
        do
        {
          unsigned int v18 = (unsigned __int16)*v14;
          if (v18 < v16) {
            _WORD *v14 = v18 + v15;
          }
          --v17;
          ++v14;
        }
        while ((_WORD)v17);
      }
      int v19 = *((unsigned __int16 *)v8 + 8);
      unsigned int v20 = ~v9 + ((v19 + 131052) >> 1);
      if (~(_WORD)v9 + (unsigned __int16)((v19 + 131052) >> 1))
      {
        uint64_t v21 = v14 + 1;
        do
        {
          unsigned int v22 = *v21;
          if (v22 >= v16) {
            __int16 v23 = 0;
          }
          else {
            __int16 v23 = v15;
          }
          *(v21 - 1) = v23 + v22;
          --v20;
          ++v21;
        }
        while ((_WORD)v20);
        LOWORD(v19) = *((_WORD *)v8 + 8);
      }
      *((_WORD *)v8 + 8) = v19 - 2;
      goto LABEL_25;
    }
    if (*v8 == 1)
    {
      *((_WORD *)v8 + 8) = 20;
      *((_WORD *)v8 + 9) = *(_DWORD *)(a1 + 520);
      v8[3] = 2;
LABEL_25:
      mpool_put(*(MPOOL **)a1, v8, 1u);
      break;
    }
    if (__bt_relink((MPOOL **)a1, (uint64_t)v8) || __bt_free(a1, v8)) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*a2 == 1)
  {
    mpool_put(*(MPOOL **)a1, a2, 1u);
    return 0;
  }
  else
  {
    return __bt_relink((MPOOL **)a1, (uint64_t)a2) || __bt_free(a1, a2) != 0;
  }
}

uint64_t __bt_relink(MPOOL **a1, uint64_t a2)
{
  pgno_t v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = mpool_get(*a1, v4, 0);
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    v5[1] = *(_DWORD *)(a2 + 4);
    mpool_put(*a1, v5, 1u);
  }
  pgno_t v6 = *(_DWORD *)(a2 + 4);
  if (!v6) {
    return 0;
  }
  char v7 = mpool_get(*a1, v6, 0);
  if (v7)
  {
    v7[2] = *(_DWORD *)(a2 + 8);
    mpool_put(*a1, v7, 1u);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t __bt_get(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0;
  }
  int v13 = 0;
  if (a4)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = (void **)__bt_search(v7, a2, &v13);
  if (!v11) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v12 = v11;
  if (v13)
  {
    uint64_t v9 = __bt_ret(v7, (uint64_t)v11, 0, 0, a3, (char **)(v7 + 496), 0);
    if ((*(unsigned char *)(v7 + 637) & 0x40) != 0) {
      mpool_put(*(MPOOL **)v7, *v12, 0);
    }
    else {
      *(void *)(v7 + 32) = *v12;
    }
  }
  else
  {
    mpool_put(*(MPOOL **)v7, *v11, 0);
    return 1;
  }
  return v9;
}

MPOOL *__bt_open(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, int a5)
{
  memset(&v35, 0, sizeof(v35));
  uint64_t v7 = (MPOOL *)__bt_defpfx;
  if (a4)
  {
    unint64_t v8 = *a4;
    if ((unint64_t)*a4 > 1)
    {
LABEL_37:
      unsigned int v12 = 0;
      goto LABEL_38;
    }
    int v10 = *((_DWORD *)a4 + 4);
    pgno_t v9 = *((_DWORD *)a4 + 5);
    int v11 = *((_DWORD *)a4 + 10);
    if (v9)
    {
      unsigned int v12 = 0;
      if (v9 - 512 > 0xFE00 || (v9 & 1) != 0) {
        goto LABEL_38;
      }
    }
    if (v10)
    {
      if (v10 < 2) {
        goto LABEL_37;
      }
    }
    else
    {
      int v10 = 2;
    }
    if (*(_OWORD *)(a4 + 3) == 0) {
      uint64_t v7 = (MPOOL *)__bt_defpfx;
    }
    else {
      uint64_t v7 = (MPOOL *)a4[4];
    }
    if (a4[3]) {
      int v13 = (uint64_t (*)(unsigned __int8 **, unsigned __int8 **))a4[3];
    }
    else {
      int v13 = __bt_defcmp;
    }
    if (v11)
    {
      if (v11 != 4321 && v11 != 1234) {
        goto LABEL_37;
      }
      int v33 = a5;
      unsigned int v34 = *((_DWORD *)a4 + 2);
    }
    else
    {
      int v33 = a5;
      unsigned int v34 = *((_DWORD *)a4 + 2);
      int v11 = 1234;
    }
  }
  else
  {
    int v13 = __bt_defcmp;
    int v33 = a5;
    unsigned int v34 = 0;
    unint64_t v8 = 0;
    pgno_t v9 = 0;
    int v11 = 1234;
    int v10 = 2;
  }
  char v14 = (MPOOL **)malloc_type_calloc(1uLL, 0x280uLL, 0x10B004045B545B8uLL);
  if (!v14)
  {
    int v20 = *__error();
LABEL_84:
    unsigned int v16 = 0;
    *__error() = v20;
    return v16;
  }
  unsigned int v12 = v14;
  *((_DWORD *)v14 + 128) = -1;
  *((_DWORD *)v14 + 132) = v11;
  *((_DWORD *)v14 + 133) = 0;
  v14[68] = (MPOOL *)v13;
  v14[69] = v7;
  *((_DWORD *)v14 + 144) = -1;
  uint64_t v15 = (MPOOL *)malloc_type_calloc(1uLL, 0x48uLL, 0x10800406ECF7772uLL);
  v12[1] = v15;
  if (!v15) {
    goto LABEL_78;
  }
  unsigned int v16 = v15;
  if (*((_DWORD *)v12 + 132) != 1234) {
    *((_DWORD *)v12 + 159) |= 8u;
  }
  LODWORD(v15->lqh.tqh_first) = 0;
  v15->lqh.tqh_last = (_bkt **)__bt_close;
  v15->hqh[0].tqh_first = (_bkt *)__bt_delete;
  v15->hqh[2].tqh_last = (_bkt **)v12;
  v15->hqh[3].tqh_first = (_bkt *)__bt_fd;
  v15->hqh[0].tqh_last = (_bkt **)__bt_get;
  v15->hqh[1].tqh_first = (_bkt *)__bt_put;
  v15->hqh[1].tqh_last = (_bkt **)__bt_seq;
  v15->hqh[2].tqh_first = (_bkt *)__bt_sync;
  int v17 = a2 & 3;
  if (!a1)
  {
    if (v17 == 2)
    {
      if (issetugid()) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = getenv("TMPDIR");
      }
      sigset_t v36 = 0;
      unsigned int v22 = "/tmp";
      if (v21) {
        unsigned int v22 = v21;
      }
      if (snprintf(__str, 0x400uLL, "%s/bt.XXXXXXXXXX", v22) < 0x400)
      {
        sigset_t v37 = -1;
        sigprocmask(1, &v37, &v36);
        int v23 = mkstemp(__str);
        if (v23 != -1)
        {
          int v24 = v23;
          unlink(__str);
          sigprocmask(3, &v36, 0);
          *((_DWORD *)v12 + 128) = v24;
          *((_DWORD *)v12 + 159) |= 1u;
          goto LABEL_19;
        }
        sigprocmask(3, &v36, 0);
        *((_DWORD *)v12 + 128) = -1;
      }
      else
      {
        *__error() = 63;
        *((_DWORD *)v12 + 128) = -1;
      }
LABEL_78:
      int v20 = *__error();
      goto LABEL_79;
    }
LABEL_38:
    *__error() = 22;
    int v20 = *__error();
    if (!v12) {
      goto LABEL_84;
    }
LABEL_79:
    char v31 = v12[1];
    if (v31) {
      free(v31);
    }
    if (*((_DWORD *)v12 + 128) != -1) {
      close_NOCANCEL();
    }
    free(v12);
    goto LABEL_84;
  }
  if (v17 != 2)
  {
    if ((a2 & 3) != 0) {
      goto LABEL_38;
    }
    *((_DWORD *)v12 + 159) |= 0x10u;
  }
  int v18 = open_NOCANCEL();
  *((_DWORD *)v12 + 128) = v18;
  if (v18 < 0) {
    goto LABEL_78;
  }
LABEL_19:
  if (fcntl_NOCANCEL() == -1 || fstat(*((_DWORD *)v12 + 128), &v35)) {
    goto LABEL_78;
  }
  if (v35.st_size)
  {
    uint64_t NOCANCEL = read_NOCANCEL();
    if ((NOCANCEL & 0x8000000000000000) == 0)
    {
      if (NOCANCEL == 24) {
        *((_DWORD *)v12 + 159) |= 8u;
      }
      *__error() = 79;
    }
    goto LABEL_78;
  }
  if (!v9)
  {
    st_blkunint64_t size = v35.st_blksize;
    if (v35.st_blksize <= 0x200u) {
      st_blkunint64_t size = 512;
    }
    if (st_blksize >= 0x10000) {
      pgno_t v9 = 0x10000;
    }
    else {
      pgno_t v9 = st_blksize;
    }
  }
  int v26 = *((_DWORD *)v12 + 159);
  if (!v8) {
    v26 |= 0x20u;
  }
  *((_DWORD *)v12 + 129) = 0;
  *((_DWORD *)v12 + 154) = 0;
  *((_DWORD *)v12 + 159) = v26 | 2;
  *((_DWORD *)v12 + 130) = v9;
  if (((v9 - 1) & v34) != 0) {
    unsigned int v27 = ((v9 - 1) | v34) + 1;
  }
  else {
    unsigned int v27 = v34;
  }
  if (!v34) {
    unsigned int v27 = 0;
  }
  if (v27 <= 5 * v9) {
    unsigned int v27 = 5 * v9;
  }
  pgno_t v28 = v9 - 1 + v27;
  unsigned int v29 = (unsigned __int16)(((unint64_t)v9 - 20) / v10 - 14);
  if (v29 <= 0x1E) {
    LOWORD(v29) = 30;
  }
  *((_WORD *)v12 + 262) = v29;
  unsigned int v30 = mpool_open(0, *((_DWORD *)v12 + 128), v9, v28 / v9);
  *unsigned int v12 = v30;
  if (!v30) {
    goto LABEL_78;
  }
  if ((*((unsigned char *)v12 + 636) & 1) == 0) {
    mpool_filter(v30, (void (__cdecl *)(void *, pgno_t, void *))__bt_pgin, (void (__cdecl *)(void *, pgno_t, void *))__bt_pgout, v12);
  }
  if (nroot((uint64_t)v12) == -1) {
    goto LABEL_78;
  }
  if ((v33 & 0x20000000) == 0)
  {
    if ((v33 & 0x40000000) == 0) {
      goto LABEL_75;
    }
LABEL_87:
    *((_DWORD *)v12 + 159) |= 0x8000u;
    if ((v33 & 0x80000000) == 0) {
      return v16;
    }
LABEL_88:
    *((_DWORD *)v12 + 159) |= 0x10000u;
    return v16;
  }
  *((_DWORD *)v12 + 159) |= 0x4000u;
  if ((v33 & 0x40000000) != 0) {
    goto LABEL_87;
  }
LABEL_75:
  if (v33 < 0) {
    goto LABEL_88;
  }
  return v16;
}

uint64_t __bt_fd(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  unsigned int v2 = *(void **)(v1 + 32);
  if (v2)
  {
    mpool_put(*(MPOOL **)v1, v2, 0);
    *(void *)(v1 + 32) = 0;
  }
  if ((*(unsigned char *)(v1 + 636) & 1) == 0) {
    return *(unsigned int *)(v1 + 512);
  }
  *__error() = 2;
  return 0xFFFFFFFFLL;
}

uint64_t nroot(uint64_t a1)
{
  unsigned int v2 = mpool_get(*(MPOOL **)a1, 0, 0);
  if (v2)
  {
    unint64_t v3 = v2;
    pgno_t v4 = *(MPOOL **)a1;
    unsigned int v5 = 0;
LABEL_3:
    mpool_put(v4, v3, v5);
    return 0;
  }
  pgno_t v10 = 0;
  if (*__error() != 22) {
    return 0xFFFFFFFFLL;
  }
  *__error() = 0;
  uint64_t v7 = mpool_new(*(MPOOL **)a1, &v10);
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v8 = v7;
  pgno_t v9 = mpool_new(*(MPOOL **)a1, &v10);
  uint64_t result = 0xFFFFFFFFLL;
  if (v9 && v10 == 1)
  {
    v9[8] = 20;
    v9[9] = *(_DWORD *)(a1 + 520);
    *(_OWORD *)pgno_t v9 = xmmword_18AA00020;
    MEMORY[0x18C122530](v8);
    mpool_put(*(MPOOL **)a1, v8, 1u);
    pgno_t v4 = *(MPOOL **)a1;
    unint64_t v3 = v9;
    unsigned int v5 = 1;
    goto LABEL_3;
  }
  return result;
}

uint64_t __ovfl_get(uint64_t a1, pgno_t *a2, size_t *a3, void **a4, size_t *a5)
{
  pgno_t v7 = *a2;
  size_t v6 = a2[1];
  *a3 = v6;
  unint64_t v8 = (char *)*a4;
  if (*a5 < v6)
  {
    int v11 = reallocf(*a4, v6);
    *a4 = v11;
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v8 = (char *)v11;
    *a5 = v6;
  }
  uint64_t v12 = *(unsigned int *)(a1 + 520);
  int v13 = (pgno_t *)mpool_get(*(MPOOL **)a1, v7, 0);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  char v14 = v13;
  unint64_t v15 = v12 - 20;
  while (1)
  {
    unint64_t v16 = v15 >= v6 ? v6 : v15;
    j__mkostemp(v8, v14 + 20);
    mpool_put(*(MPOOL **)a1, v14, 0);
    LODWORD(v6) = v6 - v16;
    if (!v6) {
      break;
    }
    v8 += v16;
    char v14 = (pgno_t *)mpool_get(*(MPOOL **)a1, v14[2], 0);
    if (!v14) {
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

uint64_t __ovfl_put(uint64_t a1, uint64_t *a2, pgno_t *a3)
{
  pgno_t v15 = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 520);
  uint64_t v6 = *a2;
  unsigned int v7 = *((_DWORD *)a2 + 2);
  unint64_t v8 = __bt_new(a1, &v15);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  pgno_t v9 = 0;
  unint64_t v10 = v5 - 20;
  while (1)
  {
    int v11 = v8;
    pgno_t v12 = v15;
    v8[1] = 0;
    _OWORD v8[2] = 0;
    _DWORD *v8 = v12;
    *(void *)(v8 + 3) = 4;
    unsigned int v13 = v7;
    if (v7 >= v10) {
      unsigned int v7 = v10;
    }
    j__mkostemp((char *)v8 + 20, v6);
    if (v9)
    {
      void v9[2] = v12;
      mpool_put(*(MPOOL **)a1, v9, 1u);
    }
    else
    {
      *a3 = v12;
    }
    unsigned int v7 = v13 - v7;
    if (!v7) {
      break;
    }
    LODWORD(v6) = v6 + v10;
    unint64_t v8 = __bt_new(a1, &v15);
    pgno_t v9 = v11;
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
  }
  mpool_put(*(MPOOL **)a1, v11, 1u);
  return 0;
}

uint64_t __ovfl_delete(uint64_t a1, pgno_t *a2)
{
  unint64_t v3 = a2[1];
  pgno_t v4 = (pgno_t *)mpool_get(*(MPOOL **)a1, *a2, 0);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  if ((v4[3] & 0x20) != 0)
  {
    mpool_put(*(MPOOL **)a1, v4, 0);
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 520);
    unint64_t v6 = v5 - 20;
    pgno_t v7 = v4[2];
    __bt_free(a1, v4);
    if (v5 - 20 < v3)
    {
      unsigned int v8 = v3 - v5 + 20;
      int v9 = 20 - v5;
      while (1)
      {
        unint64_t v10 = mpool_get(*(MPOOL **)a1, v7, 0);
        if (!v10) {
          break;
        }
        pgno_t v7 = v10[2];
        __bt_free(a1, v10);
        BOOL v11 = v6 >= v8;
        v8 += v9;
        if (v11) {
          return 0;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return 0;
}

uint64_t __bt_free(uint64_t a1, _DWORD *a2)
{
  int v2 = *(_DWORD *)(a1 + 516);
  a2[1] = 0;
  a2[2] = v2;
  *(_DWORD *)(a1 + 516) = *a2;
  *(_DWORD *)(a1 + 636) |= 2u;
  return mpool_put(*(MPOOL **)a1, a2, 1u);
}

_DWORD *__bt_new(uint64_t a1, pgno_t *a2)
{
  pgno_t v4 = *(_DWORD *)(a1 + 516);
  if (v4 && (uint64_t result = mpool_get(*(MPOOL **)a1, v4, 0)) != 0)
  {
    *a2 = *(_DWORD *)(a1 + 516);
    *(_DWORD *)(a1 + 516) = result[2];
    *(_DWORD *)(a1 + 636) |= 2u;
  }
  else
  {
    unint64_t v6 = *(MPOOL **)a1;
    return mpool_new(v6, a2);
  }
  return result;
}

uint64_t __bt_put(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  int v42 = 0;
  uint64_t v43 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0;
  }
  uint64_t v39 = 0;
  if ((*(unsigned char *)(v7 + 636) & 0x10) != 0)
  {
    unsigned int v13 = __error();
    int v14 = 1;
LABEL_13:
    *unsigned int v13 = v14;
    return 0xFFFFFFFFLL;
  }
  if (a4 && a4 != 8 && (a4 != 1 || (*(unsigned char *)(v7 + 68) & 0xF) != 8))
  {
    unsigned int v13 = __error();
    int v14 = 22;
    goto LABEL_13;
  }
  unint64_t v9 = a2[1];
  uint64_t v10 = a3[1];
  unint64_t v11 = *(unsigned __int16 *)(v7 + 524);
  if (v10 + v9 <= v11)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    int v12 = 0;
    if (v9 > v11) {
      goto LABEL_17;
    }
    while (1)
    {
      if (v10 + v9 > v11)
      {
        uint64_t result = __ovfl_put(v7, a3, (pgno_t *)&v39 + 1);
        if (result == -1) {
          return result;
        }
        uint64_t v10 = 8;
        uint64_t v40 = v45;
        uint64_t v41 = 8;
        uint64_t v17 = a3[1];
        v45[0] = HIDWORD(v39);
        v45[1] = v17;
        v12 |= 1u;
        unint64_t v9 = a2[1];
        unint64_t v11 = *(unsigned __int16 *)(v7 + 524);
        a3 = (uint64_t *)&v40;
      }
      if (v10 + v9 <= v11) {
        break;
      }
LABEL_17:
      uint64_t result = __ovfl_put(v7, a2, (pgno_t *)&v39 + 1);
      if (result == -1) {
        return result;
      }
      unint64_t v9 = 8;
      int v42 = v44;
      uint64_t v43 = 8;
      uint64_t v16 = a2[1];
      v44[0] = HIDWORD(v39);
      v44[1] = v16;
      v12 |= 2u;
      uint64_t v10 = a3[1];
      unint64_t v11 = *(unsigned __int16 *)(v7 + 524);
      a2 = (uint64_t *)&v42;
    }
  }
  if (a4 == 1)
  {
    int v18 = (pgno_t *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 40), 0);
    if (v18)
    {
      int v19 = v18;
      unsigned int v20 = *(unsigned __int16 *)(v7 + 44);
      goto LABEL_26;
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(v7 + 532)) {
    goto LABEL_45;
  }
  uint64_t v21 = (unsigned __int16 *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 536), 0);
  if (!v21)
  {
    *(_DWORD *)(v7 + 532) = 0;
    goto LABEL_45;
  }
  unsigned int v22 = v21;
  *(void *)(v7 + 16) = v21;
  int v23 = (pgno_t **)(v7 + 16);
  uint64_t v24 = *(unsigned __int16 *)(v7 + 540);
  *(_WORD *)(v7 + 24) = v24;
  uint64_t v25 = v21[8];
  if (v21[9] - v25 < ((*((_DWORD *)a2 + 2) + *((_DWORD *)a3 + 2) + 12) & 0xFFFFFFFC | 2uLL)) {
    goto LABEL_44;
  }
  if (*(_DWORD *)(v7 + 532) == 2)
  {
    if (!*((_DWORD *)v21 + 2) && ((unint64_t)(v25 - 20) >> 1) - 1 == v24)
    {
      int v26 = __bt_cmp(v7, (uint64_t)a2, (uint64_t *)(v7 + 16));
      if ((v26 & 0x80000000) == 0)
      {
        __int16 v27 = *(_WORD *)(v7 + 24);
        if (v26)
        {
          *(_WORD *)(v7 + 24) = ++v27;
          int v26 = 1;
        }
        goto LABEL_71;
      }
    }
    goto LABEL_44;
  }
  BOOL v28 = !*((_DWORD *)v21 + 1) && v24 == 0;
  if (!v28 || (int v26 = __bt_cmp(v7, (uint64_t)a2, (uint64_t *)(v7 + 16)), v26 >= 1))
  {
LABEL_44:
    *(_DWORD *)(v7 + 532) = 0;
    mpool_put(*(MPOOL **)v7, v22, 0);
LABEL_45:
    int v23 = __bt_search(v7, (uint64_t)a2, &v39);
    if (!v23) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_46;
  }
  __int16 v27 = 0;
LABEL_71:
  *(_WORD *)(v7 + 540) = v27;
  LODWORD(v39) = v26 == 0;
LABEL_46:
  int v19 = *v23;
  unsigned int v20 = *((unsigned __int16 *)v23 + 4);
  if (a4 == 8)
  {
    if (v39)
    {
      mpool_put(*(MPOOL **)v7, *v23, 0);
      return 1;
    }
    goto LABEL_51;
  }
  if (!v39 || (*(unsigned char *)(v7 + 636) & 0x20) == 0) {
    goto LABEL_51;
  }
LABEL_26:
  if (__bt_dleaf(v7, (uint64_t)a2, v19, v20) == -1)
  {
    mpool_put(*(MPOOL **)v7, v19, 0);
    return 0xFFFFFFFFLL;
  }
LABEL_51:
  uint64_t v29 = a2[1];
  uint64_t v30 = a3[1];
  uint64_t v31 = (v29 + v30 + 12) & 0xFFFFFFFC;
  int v32 = *((unsigned __int16 *)v19 + 9);
  int v33 = *((unsigned __int16 *)v19 + 8);
  if ((v32 - v33) >= (v31 | 2uLL))
  {
    if ((unsigned __int16)((v33 + 131052) >> 1) > v20)
    {
      j__mkostemp((char *)v19 + 2 * v20 + 22, v19 + 2 * v20 + 20);
      LOWORD(v33) = *((_WORD *)v19 + 8);
      LOWORD(v32) = *((_WORD *)v19 + 9);
      uint64_t v29 = a2[1];
      uint64_t v30 = a3[1];
    }
    *((_WORD *)v19 + 8) = v33 + 2;
    unsigned __int16 v34 = v32 - v31;
    *((_WORD *)v19 + 9) = v34;
    *((_WORD *)v19 + v20 + 10) = v34;
    stat v35 = (char *)v19 + v34;
    *(_DWORD *)stat v35 = v29;
    *((_DWORD *)v35 + 1) = v30;
    v35[8] = v12;
    sigset_t v36 = v35 + 9;
    j__mkostemp(v35 + 9, *a2);
    j__mkostemp(&v36[a2[1]], *a3);
    if ((*(unsigned char *)(v7 + 68) & 9) == 8 && *(_DWORD *)(v7 + 40) == *v19)
    {
      unsigned int v37 = *(unsigned __int16 *)(v7 + 44);
      if (v37 >= v20) {
        *(_WORD *)(v7 + 44) = v37 + 1;
      }
    }
    if (*(_DWORD *)(v7 + 532)) {
      goto LABEL_68;
    }
    if (v19[2])
    {
      if (v19[1] || v20) {
        goto LABEL_68;
      }
      int v38 = 1;
    }
    else
    {
      if ((((unint64_t)*((unsigned __int16 *)v19 + 8) - 20) >> 1) - 1 != v20)
      {
LABEL_68:
        mpool_put(*(MPOOL **)v7, v19, 1u);
LABEL_69:
        uint64_t result = 0;
        *(_DWORD *)(v7 + 636) |= 4u;
        return result;
      }
      int v38 = 2;
    }
    *(_DWORD *)(v7 + 532) = v38;
    *(_WORD *)(v7 + 540) = v20;
    *(_DWORD *)(v7 + 536) = *v19;
    goto LABEL_68;
  }
  uint64_t result = __bt_split(v7, (char *)v19, a2, a3, v12, (v29 + v30 + 12) & 0xFFFC, v20);
  if (!result) {
    goto LABEL_69;
  }
  return result;
}

pgno_t **__bt_search(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 472) = a1 + 72;
  unint64_t v6 = (pgno_t *)mpool_get(*(MPOOL **)a1, 1u, 0);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  unsigned int v8 = (pgno_t **)(a1 + 16);
  while (1)
  {
    void *v8 = v7;
    unsigned int v9 = *((unsigned __int16 *)v7 + 8) + 131052;
    if ((v9 & 0x1FFFE) == 0) {
      break;
    }
    int v10 = 0;
    while (1)
    {
      int v11 = ((v9 >> 2) & 0x7FFF) + v10;
      *(_WORD *)(a1 + 24) = ((v9 >> 2) & 0x7FFF) + v10;
      int v12 = __bt_cmp(a1, a2, (uint64_t *)(a1 + 16));
      if (!v12) {
        break;
      }
      unsigned int v13 = v9 >> 1;
      if (v12 > 0)
      {
        int v10 = v11 + 1;
        LOWORD(v13) = (v9 >> 1) - 1;
      }
      unsigned int v9 = (unsigned __int16)v13;
      if ((v13 & 0xFFFE) == 0) {
        goto LABEL_11;
      }
    }
    if ((v7[3] & 2) != 0) {
      goto LABEL_31;
    }
LABEL_16:
    uint64_t v14 = *(void *)(a1 + 472);
    *(_DWORD *)uint64_t v14 = *v7;
    *(_WORD *)(v14 + 4) = v11;
    *(void *)(a1 + 472) = v14 + 8;
    pgno_t v15 = *(pgno_t *)((char *)v7 + *((unsigned __int16 *)v7 + (unsigned __int16)v11 + 10) + 4);
    mpool_put(*(MPOOL **)a1, v7, 0);
    uint64_t v7 = (pgno_t *)mpool_get(*(MPOOL **)a1, v15, 0);
    if (!v7) {
      return 0;
    }
  }
  LOWORD(v10) = 0;
LABEL_11:
  if ((v7[3] & 2) == 0)
  {
    if ((_WORD)v10) {
      LOWORD(v11) = v10 - 1;
    }
    else {
      LOWORD(v11) = 0;
    }
    goto LABEL_16;
  }
  if ((*(unsigned char *)(a1 + 636) & 0x20) != 0)
  {
LABEL_25:
    *a3 = 0;
    *(_WORD *)(a1 + 24) = v10;
    return v8;
  }
  if ((_WORD)v10
    || (pgno_t v19 = v7[1]) == 0
    || (unsigned int v20 = (unsigned __int16 *)mpool_get(*(MPOOL **)a1, v19, 0), (v23[0] = v20) == 0))
  {
LABEL_20:
    if (((unint64_t)*((unsigned __int16 *)v7 + 8) - 20) >> 1 == (unsigned __int16)v10)
    {
      pgno_t v16 = v7[2];
      if (v16)
      {
        v23[0] = mpool_get(*(MPOOL **)a1, v16, 0);
        if (v23[0])
        {
          v23[1] = 0;
          int v17 = __bt_cmp(a1, a2, (uint64_t *)v23);
          int v18 = *(MPOOL **)a1;
          if (!v17) {
            goto LABEL_30;
          }
          mpool_put(v18, v23[0], 0);
        }
      }
    }
    goto LABEL_25;
  }
  v23[1] = 0;
  LOWORD(v23[1]) = ((v20[8] + 131052) >> 1) - 1;
  int v21 = __bt_cmp(a1, a2, (uint64_t *)v23);
  int v18 = *(MPOOL **)a1;
  if (v21)
  {
    mpool_put(v18, v23[0], 0);
    goto LABEL_20;
  }
LABEL_30:
  mpool_put(v18, v7, 0);
  *(_OWORD *)unsigned int v8 = *(_OWORD *)v23;
LABEL_31:
  *a3 = 1;
  return v8;
}

uint64_t __bt_seq(uint64_t a1, void *a2, void *a3, unsigned int a4)
{
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0;
  }
  if (a4 > 9) {
    goto LABEL_20;
  }
  if (((1 << a4) & 0x4A) != 0)
  {
LABEL_7:
    uint64_t v9 = 0;
    int v35 = 0;
    switch(a4)
    {
      case 1u:
        if (*a2 && a2[1])
        {
          uint64_t v22 = v7;
          uint64_t v23 = (uint64_t)a2;
          goto LABEL_37;
        }
        *__error() = 22;
        goto LABEL_39;
      case 3u:
      case 7u:
        int v10 = mpool_get(*(MPOOL **)v7, 1u, 0);
        if (!v10) {
          goto LABEL_39;
        }
        int v11 = v10;
        while (2)
        {
          if ((v11[8] & 0xFFFE) == 0x14) {
            goto LABEL_34;
          }
          if ((v11[6] & 0x12) == 0)
          {
            pgno_t v12 = *(_DWORD *)((char *)v11 + (unsigned __int16)v11[10] + 4);
            mpool_put(*(MPOOL **)v7, v11, 0);
            int v11 = mpool_get(*(MPOOL **)v7, v12, 0);
            if (!v11) {
              goto LABEL_39;
            }
            continue;
          }
          break;
        }
        uint64_t v9 = 0;
        int v33 = v11;
        LOWORD(v34) = 0;
        goto LABEL_40;
      case 6u:
      case 9u:
        unsigned int v13 = mpool_get(*(MPOOL **)v7, 1u, 0);
        if (!v13) {
          goto LABEL_39;
        }
        int v11 = v13;
        break;
      default:
        goto LABEL_40;
    }
    while (1)
    {
      uint64_t v14 = (unsigned __int16)v11[8];
      if ((unint64_t)(v14 - 20) <= 1)
      {
LABEL_34:
        mpool_put(*(MPOOL **)v7, v11, 0);
        goto LABEL_35;
      }
      if ((v11[6] & 0x12) != 0) {
        break;
      }
      pgno_t v15 = *(_DWORD *)((char *)v11 + (unsigned __int16)v11[((unint64_t)(v14 - 20) >> 1) + 9] + 4);
      mpool_put(*(MPOOL **)v7, v11, 0);
      int v11 = mpool_get(*(MPOOL **)v7, v15, 0);
      if (!v11) {
        goto LABEL_39;
      }
    }
    uint64_t v9 = 0;
    int v33 = v11;
    unsigned int v29 = ((v14 + 131052) >> 1) - 1;
    goto LABEL_57;
  }
  if (((1 << a4) & 0x280) == 0)
  {
LABEL_20:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned char *)(v7 + 68) & 8) == 0) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(v7 + 68))
  {
    int v35 = 0;
    uint64_t v23 = v7 + 48;
    uint64_t v22 = v7;
LABEL_37:
    uint64_t v9 = __bt_first(v22, v23, (uint64_t)&v33, &v35);
    goto LABEL_40;
  }
  pgno_t v16 = (pgno_t *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 40), 0);
  if (!v16) {
    goto LABEL_39;
  }
  int v17 = v16;
  if (a4 == 9)
  {
    char v18 = *(unsigned char *)(v7 + 68);
    if ((v18 & 4) == 0)
    {
      LOWORD(v30) = *(_WORD *)(v7 + 44);
      if (!(_WORD)v30)
      {
        pgno_t v31 = v16[1];
        mpool_put(*(MPOOL **)v7, v16, 0);
        if (!v31) {
          goto LABEL_35;
        }
        int v32 = (pgno_t *)mpool_get(*(MPOOL **)v7, v31, 0);
        if (!v32) {
          goto LABEL_39;
        }
        int v17 = v32;
        unsigned int v30 = (*((unsigned __int16 *)v32 + 8) + 131052) >> 1;
      }
      unsigned __int16 v19 = v30 - 1;
      goto LABEL_55;
    }
  }
  else
  {
    if (a4 != 7)
    {
LABEL_30:
      unsigned __int16 v19 = 0;
      goto LABEL_55;
    }
    char v18 = *(unsigned char *)(v7 + 68);
    if ((v18 & 2) == 0)
    {
      unsigned __int16 v19 = *(_WORD *)(v7 + 44) + 1;
      if (((unint64_t)*((unsigned __int16 *)v16 + 8) - 20) >> 1 != v19)
      {
LABEL_55:
        uint64_t v9 = 0;
        int v33 = v17;
        LOWORD(v34) = v19;
        goto LABEL_40;
      }
      pgno_t v20 = v16[2];
      mpool_put(*(MPOOL **)v7, v16, 0);
      if (v20)
      {
        int v21 = (pgno_t *)mpool_get(*(MPOOL **)v7, v20, 0);
        if (v21)
        {
          int v17 = v21;
          goto LABEL_30;
        }
LABEL_39:
        uint64_t v9 = 0xFFFFFFFFLL;
        goto LABEL_40;
      }
LABEL_35:
      uint64_t v9 = 1;
      goto LABEL_40;
    }
  }
  uint64_t v9 = 0;
  *(unsigned char *)(v7 + 68) = v18 & 0xF9;
  int v33 = v16;
  LOWORD(v29) = *(_WORD *)(v7 + 44);
LABEL_57:
  LOWORD(v34) = v29;
LABEL_40:
  if (!v9)
  {
    int v24 = *(_DWORD *)v33;
    __int16 v25 = v34;
    int v26 = *(void **)(v7 + 48);
    if (v26)
    {
      free(v26);
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
    }
    char v27 = *(unsigned char *)(v7 + 68) & 0xF0;
    *(_DWORD *)(v7 + 40) = v24;
    *(_WORD *)(v7 + 44) = v25;
    *(unsigned char *)(v7 + 68) = v27 | 8;
    uint64_t v9 = __bt_ret(v7, (uint64_t)&v33, a2, v7 + 480, a3, (char **)(v7 + 496), 0);
    if ((*(unsigned char *)(v7 + 637) & 0x40) != 0) {
      mpool_put(*(MPOOL **)v7, v33, 0);
    }
    else {
      *(void *)(v7 + 32) = v33;
    }
  }
  return v9;
}

void __bt_setcur(uint64_t a1, int a2, __int16 a3)
{
  uint64_t v7 = (void *)(a1 + 48);
  unint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    free(v6);
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
  char v8 = *(unsigned char *)(a1 + 68) & 0xF0;
  *(_DWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 44) = a3;
  *(unsigned char *)(a1 + 68) = v8 | 8;
}

uint64_t __bt_first(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char v8 = __bt_search(a1, a2, a4);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (!*a4)
  {
    unsigned __int16 v19 = *v8;
    if (*((unsigned __int16 *)v8 + 4) != ((unint64_t)*((unsigned __int16 *)*v8 + 8) - 20) >> 1) {
      goto LABEL_23;
    }
    pgno_t v20 = v19[2];
    mpool_put(*(MPOOL **)a1, v19, 0);
    if (v20)
    {
      int v21 = (pgno_t *)mpool_get(*(MPOOL **)a1, v20, 0);
      if (!v21) {
        return 0xFFFFFFFFLL;
      }
      *((_WORD *)v9 + 4) = 0;
      *uint64_t v9 = v21;
      goto LABEL_23;
    }
    return 1;
  }
  if ((*(unsigned char *)(a1 + 636) & 0x20) != 0)
  {
LABEL_23:
    uint64_t result = 0;
    *(_OWORD *)a3 = *(_OWORD *)v9;
    return result;
  }
  int v10 = (int *)((char *)v8 + 10);
  int v11 = *v8;
  int v22 = *(_DWORD *)((char *)v8 + 10);
  __int16 v23 = *((_WORD *)v8 + 7);
  pgno_t v12 = *v8;
  while (*v12 == **v9)
  {
    __int16 v13 = *((_WORD *)v9 + 4);
    if (!v13) {
      goto LABEL_9;
    }
LABEL_7:
    LOWORD(v14) = v13;
LABEL_14:
    *((_WORD *)v9 + 4) = v14 - 1;
    if (__bt_cmp(a1, a2, (uint64_t *)v9))
    {
      pgno_t v16 = *v12;
LABEL_16:
      if (*v11 != v16) {
        mpool_put(*(MPOOL **)a1, v11, 0);
      }
      uint64_t result = 0;
      *(void *)a3 = v12;
      *(_WORD *)(a3 + 8) = v13;
      *(_DWORD *)(a3 + 10) = v22;
      *(_WORD *)(a3 + 14) = v23;
      return result;
    }
  }
  mpool_put(*(MPOOL **)a1, v12, 0);
  pgno_t v12 = *v9;
  __int16 v13 = *((_WORD *)v9 + 4);
  int v22 = *v10;
  __int16 v23 = *((_WORD *)v9 + 7);
  if (v13) {
    goto LABEL_7;
  }
LABEL_9:
  pgno_t v15 = v11[1];
  pgno_t v16 = *v12;
  if (!v15) {
    goto LABEL_16;
  }
  if (*v11 != v16)
  {
    mpool_put(*(MPOOL **)a1, v11, 0);
    pgno_t v15 = v11[1];
  }
  int v17 = (pgno_t *)mpool_get(*(MPOOL **)a1, v15, 0);
  if (v17)
  {
    *uint64_t v9 = v17;
    unsigned int v14 = (*((unsigned __int16 *)v17 + 8) + 131052) >> 1;
    int v11 = v17;
    goto LABEL_14;
  }
  if (*v11 == *v12) {
    mpool_put(*(MPOOL **)a1, v12, 0);
  }
  return 0xFFFFFFFFLL;
}

uint64_t __bt_split(uint64_t a1, char *a2, void *a3, void *a4, char a5, __int16 a6, unsigned __int16 a7)
{
  int v11 = a2;
  unsigned int v74 = 0;
  uint64_t v75 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  unsigned __int16 v69 = a7;
  if (*(_DWORD *)a2 == 1)
  {
    __int16 v13 = bt_root(a1, (uint64_t)a2, &v71, &v70, &v69, a6);
    if (!v13) {
      return 0xFFFFFFFFLL;
    }
LABEL_5:
    unsigned __int16 v14 = *((_WORD *)v13 + 9) - a6;
    *((_WORD *)v13 + 9) = v14;
    *((_WORD *)v13 + v69 + 10) = v14;
    pgno_t v15 = (char *)v13 + v14;
    if ((*(unsigned char *)(a1 + 636) & 0x80) != 0)
    {
      *(_DWORD *)pgno_t v15 = a4[1];
      v15[4] = a5;
      int v17 = v15 + 5;
    }
    else
    {
      *(_DWORD *)pgno_t v15 = a3[1];
      *((_DWORD *)v15 + 1) = a4[1];
      v15[8] = a5;
      pgno_t v16 = v15 + 9;
      j__mkostemp(v15 + 9, *a3);
      int v17 = &v16[a3[1]];
    }
    j__mkostemp(v17, *a4);
    if (*(_DWORD *)v11 == 1)
    {
      char v18 = (unsigned __int16 *)v70;
      unsigned __int16 v19 = (unsigned __int16 *)v71;
      if ((*(unsigned char *)(a1 + 636) & 0x80) != 0)
      {
        bt_rroot(a1, (uint64_t)v11, (uint64_t)v71, (uint64_t)v70);
      }
      else if (bt_broot(a1, (uint64_t)v11, v71, (uint64_t)v70) == -1)
      {
LABEL_87:
        mpool_put(*(MPOOL **)a1, v19, 0);
        mpool_put(*(MPOOL **)a1, v18, 0);
        __dbpanic(*(void **)(a1 + 8));
        return 0xFFFFFFFFLL;
      }
    }
    uint64_t v20 = *(void *)(a1 + 472);
    if (v20 == a1 + 72)
    {
LABEL_85:
      mpool_put(*(MPOOL **)a1, v71, 1u);
      mpool_put(*(MPOOL **)a1, v70, 1u);
      return 0;
    }
    int v67 = 0;
    int v21 = 0;
    LODWORD(oflags) = 0;
    while (1)
    {
      pgno_t v22 = *(_DWORD *)(v20 - 8);
      *(void *)(a1 + 472) = v20 - 8;
      char v18 = (unsigned __int16 *)v70;
      unsigned __int16 v19 = (unsigned __int16 *)v71;
      __int16 v23 = (char *)mpool_get(*(MPOOL **)a1, v22, 0);
      if (!v23) {
        goto LABEL_87;
      }
      int v24 = v23;
      unsigned __int16 v25 = *(_WORD *)(v20 - 4) + 1;
      unsigned __int16 v69 = v25;
      unsigned int v26 = *((_DWORD *)v18 + 3) & 0x1F;
      if (v26 > 7)
      {
        if (v26 != 8 && v26 != 16) {
LABEL_89:
        }
          abort_report_np((uint64_t)"%s:%s:%u: illegal rchild->flags & P_TYPE (0x%x)");
        unsigned int v28 = 8;
      }
      else if (v26 == 1)
      {
        oflags = (_DWORD *)((char *)v18 + v18[10]);
        unsigned int v28 = (*oflags & 0xFFFFFFFC) + 12;
      }
      else
      {
        if (v26 != 2) {
          goto LABEL_89;
        }
        int v21 = (unsigned int *)((char *)v18 + v18[10]);
        uint64_t v27 = *v21;
        unsigned int v28 = (v27 & 0xFFFFFFFC) + 12;
        unsigned int v29 = *(uint64_t (**)(char **, char **))(a1 + 552);
        if (v29 && (v21[2] & 2) == 0 && (!*((_DWORD *)v23 + 1) ? (BOOL v30 = v25 >= 2u) : (BOOL v30 = 1), v30))
        {
          pgno_t v31 = (unsigned int *)((char *)v19
                               + *(unsigned __int16 *)((char *)v19 + ((v19[8] - 20) & 0xFFFFFFFFFFFFFFFELL) + 18));
          uint64_t v32 = *v31;
          unsigned int v74 = (char *)v31 + 9;
          uint64_t v75 = v32;
          uint64_t v72 = (char *)v21 + 9;
          uint64_t v73 = v27;
          int v33 = v29(&v74, &v72);
          if ((v33 & 0xFFFFFFFC) + 12 >= v28)
          {
            int v34 = 0;
          }
          else
          {
            unsigned int v28 = (v33 & 0xFFFFFFFC) + 12;
            int v34 = v33;
          }
          int v67 = v34;
        }
        else
        {
          int v67 = 0;
        }
      }
      int v36 = *((unsigned __int16 *)v24 + 8);
      unint64_t v37 = *((unsigned __int16 *)v24 + 9) - v36;
      unint64_t v38 = v28 + 2;
      if (v37 >= v38)
      {
        if ((unsigned __int16)((v36 + 131052) >> 1) > v25)
        {
          j__mkostemp(&v24[2 * v25 + 22], v24 + 2 * v25 + 20);
          LOWORD(v36) = *((_WORD *)v24 + 8);
        }
        *((_WORD *)v24 + 8) = v36 + 2;
      }
      else
      {
        if (*(_DWORD *)v24 == 1) {
          uint64_t v39 = (char *)bt_root(a1, (uint64_t)v24, &v71, &v70, &v69, (unsigned __int16)v28);
        }
        else {
          uint64_t v39 = (char *)bt_page(a1, (uint64_t)v24, (uint64_t *)&v71, &v70, &v69, (unsigned __int16)v28);
        }
        int v11 = v24;
        int v24 = v39;
        if (!v39) {
          goto LABEL_86;
        }
      }
      unsigned int v40 = *((_DWORD *)v18 + 3) & 0x1F;
      if (v40 > 7)
      {
        if (v40 == 8)
        {
          uint64_t v48 = v69;
          if (v69)
          {
            int v49 = &v24[2 * v69 + 18];
            size_t v50 = v24;
          }
          else
          {
            size_t v50 = (char *)v71;
            int v49 = (char *)v71 + ((*((unsigned __int16 *)v71 + 8) - 20) & 0xFFFFFFFFFFFFFFFELL) + 18;
          }
          unsigned int v53 = v19[8] + 131052;
          uint64_t v54 = (unsigned __int16)(v53 >> 1);
          if ((unsigned __int16)(v53 >> 1))
          {
            int v55 = 0;
            int v56 = v19 + 10;
            do
            {
              unsigned int v57 = *v56++;
              v55 += *(_DWORD *)((char *)v19 + v57);
              --v54;
            }
            while (v54);
          }
          else
          {
            int v55 = 0;
          }
          acl_tag_t v58 = &v50[*(unsigned __int16 *)v49];
          *(_DWORD *)acl_tag_t v58 = v55;
          *((_DWORD *)v58 + 1) = *(_DWORD *)v19;
          __int16 v59 = *((_WORD *)v24 + 9) - v28;
          *((_WORD *)v24 + 9) = v59;
          *(_WORD *)&v24[2 * v48 + 20] = v59;
          unsigned int v60 = v18[8] + 131052;
          uint64_t v61 = (unsigned __int16)(v60 >> 1);
          if ((unsigned __int16)(v60 >> 1))
          {
            int v62 = 0;
            uint64_t v63 = v18 + 10;
            do
            {
              unsigned int v64 = *v63++;
              v62 += *(_DWORD *)((char *)v18 + v64);
              --v61;
            }
            while (v61);
          }
          else
          {
            int v62 = 0;
          }
          int v65 = &v24[*(unsigned __int16 *)&v24[2 * v69 + 20]];
          *(_DWORD *)int v65 = v62;
          *((_DWORD *)v65 + 1) = *(_DWORD *)v18;
        }
        else
        {
          if (v40 != 16) {
            goto LABEL_89;
          }
          uint64_t v43 = v69;
          if (v69)
          {
            uint64_t v44 = &v24[2 * v69 + 18];
            int v45 = v24;
          }
          else
          {
            int v45 = (char *)v71;
            uint64_t v44 = (char *)v71 + ((*((unsigned __int16 *)v71 + 8) - 20) & 0xFFFFFFFFFFFFFFFELL) + 18;
          }
          in_addr v51 = &v45[*(unsigned __int16 *)v44];
          *(_DWORD *)in_addr v51 = ((unint64_t)v19[8] + 0x1FFFFFFECLL) >> 1;
          *((_DWORD *)v51 + 1) = *(_DWORD *)v19;
          LOWORD(v51) = *((_WORD *)v24 + 9) - v28;
          *((_WORD *)v24 + 9) = (_WORD)v51;
          *(_WORD *)&v24[2 * v43 + 20] = (_WORD)v51;
          uint64_t v52 = &v24[*(unsigned __int16 *)&v24[2 * v69 + 20]];
          *(_DWORD *)uint64_t v52 = ((unint64_t)v18[8] + 0x1FFFFFFECLL) >> 1;
          *((_DWORD *)v52 + 1) = *(_DWORD *)v18;
        }
      }
      else if (v40 == 1)
      {
        __int16 v46 = *((_WORD *)v24 + 9) - v28;
        *((_WORD *)v24 + 9) = v46;
        *(_WORD *)&v24[2 * v69 + 20] = v46;
        char v47 = &v24[*(unsigned __int16 *)&v24[2 * v69 + 20]];
        j__mkostemp(v47, (int)oflags);
        *((_DWORD *)v47 + 1) = *(_DWORD *)v18;
      }
      else
      {
        if (v40 != 2) {
          goto LABEL_89;
        }
        __int16 v41 = *((_WORD *)v24 + 9) - v28;
        *((_WORD *)v24 + 9) = v41;
        *(_WORD *)&v24[2 * v69 + 20] = v41;
        int v42 = &v24[*(unsigned __int16 *)&v24[2 * v69 + 20]];
        if (v67) {
          *(_DWORD *)int v42 = v67;
        }
        else {
          *(_DWORD *)int v42 = *v21;
        }
        *((_DWORD *)v42 + 1) = *(_DWORD *)v18;
        v42[8] = v21[2] & 2;
        j__mkostemp(v42 + 9, v21 + 9);
        if ((v21[2] & 2) != 0 && bt_preserve((MPOOL **)a1, *(unsigned int *)((char *)v21 + 9)) == -1)
        {
LABEL_86:
          mpool_put(*(MPOOL **)a1, v19, 1u);
          mpool_put(*(MPOOL **)a1, v18, 1u);
          char v18 = (unsigned __int16 *)v70;
          unsigned __int16 v19 = (unsigned __int16 *)v71;
          goto LABEL_87;
        }
      }
      if (v37 >= v38)
      {
        mpool_put(*(MPOOL **)a1, v24, 1u);
        goto LABEL_85;
      }
      if (*(_DWORD *)v11 == 1)
      {
        if ((*(unsigned char *)(a1 + 636) & 0x80) != 0)
        {
          bt_rroot(a1, (uint64_t)v11, (uint64_t)v71, (uint64_t)v70);
        }
        else if (bt_broot(a1, (uint64_t)v11, v71, (uint64_t)v70) == -1)
        {
          goto LABEL_86;
        }
      }
      mpool_put(*(MPOOL **)a1, v19, 1u);
      mpool_put(*(MPOOL **)a1, v18, 1u);
      uint64_t v20 = *(void *)(a1 + 472);
      if (v20 == a1 + 72) {
        goto LABEL_85;
      }
    }
  }
  __int16 v13 = bt_page(a1, (uint64_t)a2, (uint64_t *)&v71, &v70, &v69, a6);
  if (v13) {
    goto LABEL_5;
  }
  return 0xFFFFFFFFLL;
}

_DWORD *bt_root(uint64_t a1, uint64_t a2, void *a3, void *a4, _WORD *a5, unsigned int a6)
{
  *(void *)int v17 = 0;
  uint64_t result = __bt_new(a1, &v17[1]);
  if (result)
  {
    __int16 v13 = result;
    uint64_t result = __bt_new(a1, v17);
    if (result)
    {
      unsigned __int16 v14 = result;
      *__int16 v13 = v17[1];
      pgno_t v15 = v17[0];
      *uint64_t result = v17[0];
      result[1] = *v13;
      v13[1] = 0;
      int v13[2] = v15;
      *((_WORD *)result + 8) = 20;
      *((_WORD *)v13 + 8) = 20;
      LOWORD(v15) = *(_WORD *)(a1 + 520);
      *((_WORD *)result + 9) = v15;
      *((_WORD *)v13 + 9) = v15;
      int v16 = *(_DWORD *)(a2 + 12) & 0x1F;
      result[2] = 0;
      result[3] = v16;
      v13[3] = v16;
      uint64_t result = bt_psplit(a1, a2, v13, result, a5, a6);
      *a3 = v13;
      *a4 = v14;
    }
  }
  return result;
}

_DWORD *bt_page(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, unsigned __int16 *a5, unsigned int a6)
{
  pgno_t v24 = 0;
  pgno_t v12 = __bt_new(a1, &v24);
  __int16 v13 = v12;
  if (!v12) {
    return v13;
  }
  pgno_t v14 = v24;
  *pgno_t v12 = v24;
  *((_WORD *)v12 + 8) = 20;
  size_t v15 = *(unsigned int *)(a1 + 520);
  *((_WORD *)v12 + 9) = v15;
  int v16 = *(_DWORD *)(a2 + 8);
  int v17 = *(_DWORD *)(a2 + 12);
  v12[1] = *(_DWORD *)a2;
  int v12[2] = v16;
  v12[3] = v17 & 0x1F;
  if (!*(_DWORD *)(a2 + 8) && *a5 == ((unint64_t)*(unsigned __int16 *)(a2 + 16) - 20) >> 1)
  {
    *(_DWORD *)(a2 + 8) = v14;
    *((_WORD *)v12 + 8) = 22;
    *a5 = 0;
    *a3 = a2;
    *a4 = v12;
    return v13;
  }
  char v18 = malloc_type_calloc(1uLL, v15, 0x2583D18FuLL);
  if (!v18)
  {
    mpool_put(*(MPOOL **)a1, v13, 0);
    return 0;
  }
  unsigned __int16 v19 = v18;
  *char v18 = *(void *)a2;
  *((_DWORD *)v18 + 2) = *v13;
  *((_WORD *)v18 + 8) = 20;
  *((_WORD *)v18 + 9) = *(_DWORD *)(a1 + 520);
  pgno_t v20 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v18 + 3) = *(_DWORD *)(a2 + 12) & 0x1F;
  if (v20)
  {
    int v21 = mpool_get(*(MPOOL **)a1, v20, 0);
    if (v21)
    {
      v21[1] = *v13;
      mpool_put(*(MPOOL **)a1, v21, 1u);
      goto LABEL_9;
    }
    free(v19);
    return 0;
  }
LABEL_9:
  pgno_t v22 = bt_psplit(a1, a2, v19, v13, a5, a6);
  j__mkostemp((char *)a2, (int)v19);
  if (v22 == v19) {
    pgno_t v22 = (_DWORD *)a2;
  }
  free(v19);
  *a3 = a2;
  *a4 = v13;
  return v22;
}

uint64_t bt_rroot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a1 + 520);
  *(_WORD *)(a2 + 18) = v4 - 8;
  *(_WORD *)(a2 + 20) = v4 - 8;
  uint64_t v5 = (_DWORD *)(a2 + (unsigned __int16)(v4 - 8));
  uint64_t v6 = *(unsigned __int16 *)(a3 + 16);
  if ((*(unsigned char *)(a3 + 12) & 0x10) != 0)
  {
    unint64_t v9 = (unint64_t)(v6 + 0x1FFFFFFECLL) >> 1;
  }
  else
  {
    unsigned int v7 = v6 + 131052;
    uint64_t v8 = (unsigned __int16)(v7 >> 1);
    if ((unsigned __int16)(v7 >> 1))
    {
      LODWORD(v9) = 0;
      int v10 = (unsigned __int16 *)(a3 + 20);
      do
      {
        unsigned int v11 = *v10++;
        LODWORD(v9) = *(_DWORD *)(a3 + v11) + v9;
        --v8;
      }
      while (v8);
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  *uint64_t v5 = v9;
  v5[1] = *(_DWORD *)a3;
  unsigned __int16 v12 = v4 - 16;
  *(_WORD *)(a2 + 18) = v12;
  *(_WORD *)(a2 + 22) = v12;
  uint64_t v13 = *(unsigned __int16 *)(a4 + 16);
  if ((*(unsigned char *)(a4 + 12) & 0x10) != 0)
  {
    unint64_t v16 = (unint64_t)(v13 + 0x1FFFFFFECLL) >> 1;
  }
  else
  {
    unsigned int v14 = v13 + 131052;
    uint64_t v15 = (unsigned __int16)(v14 >> 1);
    if ((unsigned __int16)(v14 >> 1))
    {
      LODWORD(v16) = 0;
      int v17 = (unsigned __int16 *)(a4 + 20);
      do
      {
        unsigned int v18 = *v17++;
        LODWORD(v16) = *(_DWORD *)(a4 + v18) + v16;
        --v15;
      }
      while (v15);
    }
    else
    {
      LODWORD(v16) = 0;
    }
  }
  unsigned __int16 v19 = (_DWORD *)(a2 + v12);
  *unsigned __int16 v19 = v16;
  v19[1] = *(_DWORD *)a4;
  *(_WORD *)(a2 + 16) = 24;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFE0 | 8;
  return mpool_put(*(MPOOL **)a1, (void *)a2, 1u);
}

uint64_t bt_broot(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int16 v7 = *(_WORD *)(a1 + 520) - 12;
  *(_WORD *)(a2 + 18) = v7;
  *(_WORD *)(a2 + 20) = v7;
  uint64_t v8 = a2 + v7;
  *(_DWORD *)uint64_t v8 = 0;
  *(_DWORD *)(v8 + 4) = *a3;
  *(unsigned char *)(v8 + 8) = 0;
  if ((*(_DWORD *)(a2 + 12) & 0x1F) == 1)
  {
    unsigned int v14 = (_WORD *)(a4 + *(unsigned __int16 *)(a4 + 20));
    unsigned __int16 v15 = *(_WORD *)(a2 + 18) - ((*v14 & 0xFFFC) + 12);
    *(_WORD *)(a2 + 18) = v15;
    *(_WORD *)(a2 + 22) = v15;
    uint64_t v16 = a2 + v15;
    j__mkostemp((char *)v16, (int)v14);
    *(_DWORD *)(v16 + 4) = *(_DWORD *)a4;
LABEL_7:
    *(_WORD *)(a2 + 16) = 24;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFE0 | 1;
    mpool_put(*(MPOOL **)a1, (void *)a2, 1u);
    return 0;
  }
  if ((*(_DWORD *)(a2 + 12) & 0x1F) != 2) {
    abort_report_np((uint64_t)"%s:%s:%u: illegal h->flags & P_TYPE (0x%x)");
  }
  unint64_t v9 = (int *)(a4 + *(unsigned __int16 *)(a4 + 20));
  int v10 = *v9;
  unsigned __int16 v11 = *(_WORD *)(a2 + 18) - (*(_WORD *)v9 & 0xFFFC) - 12;
  *(_WORD *)(a2 + 18) = v11;
  *(_WORD *)(a2 + 22) = v11;
  uint64_t v12 = a2 + v11;
  *(_DWORD *)uint64_t v12 = v10;
  *(_DWORD *)(v12 + 4) = *(_DWORD *)a4;
  *(unsigned char *)(v12 + 8) = 0;
  j__mkostemp((char *)(v12 + 9), v9 + 9);
  if ((v9[2] & 2) == 0) {
    goto LABEL_7;
  }
  uint64_t result = bt_preserve((MPOOL **)a1, *(int *)((char *)v9 + 9));
  if (result != -1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t bt_preserve(MPOOL **a1, pgno_t a2)
{
  unint64_t v3 = mpool_get(*a1, a2, 0);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  v3[3] |= 0x20u;
  mpool_put(*a1, v3, 1u);
  return 0;
}

_DWORD *bt_psplit(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _WORD *a5, unsigned int a6)
{
  uint64_t v6 = (_DWORD *)a2;
  unsigned int v7 = (unsigned __int16)*a5;
  unsigned int v39 = *(unsigned __int16 *)(a2 + 16) + 131052;
  unsigned int v8 = (unsigned __int16)(v39 >> 1);
  if ((unsigned __int16)(v39 >> 1))
  {
    int v9 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    unsigned __int16 v12 = 0;
    unsigned __int16 v13 = 0;
    LODWORD(v14) = 0;
    unsigned int v15 = (unsigned __int16)(*(_WORD *)(a1 + 520) - 20) >> 1;
    unint64_t v43 = (unsigned __int16)(*(_WORD *)(a1 + 520) - 20);
    uint64_t v16 = v8 - 1;
    unsigned int v42 = (unsigned __int16)*a5;
    while (1)
    {
      if (v7 == v12)
      {
        int v17 = 0;
        unsigned int v18 = a6;
      }
      else
      {
        unsigned int v19 = v6[3] & 0x1F;
        if (v19 > 7)
        {
          if (v19 == 8)
          {
            int v17 = 0;
            LODWORD(v14) = v6 + *((unsigned __int16 *)v6 + v13 + 10);
            unsigned int v18 = 8;
          }
          else
          {
            if (v19 != 16) {
LABEL_64:
            }
              abort_report_np((uint64_t)"%s:%s:%u: illegal h->flags & P_TYPE (0x%x)");
            int v17 = 0;
            unsigned int v14 = (char *)v6 + *((unsigned __int16 *)v6 + v13 + 10);
            unsigned int v18 = (*(_DWORD *)v14 & 0xFFFFFFFC) + 8;
          }
        }
        else
        {
          if (v19 == 1)
          {
            unsigned int v14 = (char *)v6 + *((unsigned __int16 *)v6 + v13 + 10);
            unsigned int v18 = (*(_DWORD *)v14 & 0xFFFFFFFC) + 12;
          }
          else
          {
            if (v19 != 2) {
              goto LABEL_64;
            }
            unsigned int v14 = (char *)v6 + *((unsigned __int16 *)v6 + v13 + 10);
            unsigned int v18 = (*(_DWORD *)v14 + *((_DWORD *)v14 + 1) + 12) & 0xFFFFFFFC;
          }
          int v17 = v14[8] & 2;
        }
      }
      if (v7 <= v12)
      {
        if ((unint64_t)(v18 + (unsigned __int16)v11) + 2 >= v43 || v16 == v9)
        {
LABEL_31:
          --v12;
          goto LABEL_32;
        }
      }
      else if (v16 == v9)
      {
        goto LABEL_31;
      }
      if (v7 != v12)
      {
        ++v13;
        unsigned __int16 v21 = *((_WORD *)a3 + 9) - v18;
        *((_WORD *)a3 + 9) = v21;
        *((_WORD *)a3 + v12 + 10) = v21;
        unsigned int v46 = v18;
        uint64_t v22 = v10;
        uint64_t v23 = v16;
        pgno_t v24 = v6;
        int v25 = v11;
        j__mkostemp((char *)a3 + v21, (int)v14);
        unsigned int v18 = v46;
        int v11 = v25;
        uint64_t v6 = v24;
        uint64_t v16 = v23;
        unsigned int v7 = v42;
        uint64_t v10 = v22;
      }
      __int16 v26 = v11 + v18;
      v11 += v18 + 2;
      if (v15 <= (unsigned __int16)(v26 + 2))
      {
        if (!v17 || v10 == 3) {
          goto LABEL_32;
        }
        uint64_t v10 = (v10 + 1);
      }
      ++v12;
      int v9 = v13;
      if (v8 <= v13) {
        goto LABEL_32;
      }
    }
  }
  unsigned __int16 v13 = 0;
  unsigned __int16 v12 = 0;
LABEL_32:
  *((_WORD *)a3 + 8) += 2 * v12 + 2;
  if ((*(unsigned char *)(a1 + 68) & 8) != 0 && *(_DWORD *)(a1 + 40) == *v6)
  {
    unsigned int v27 = *(unsigned __int16 *)(a1 + 44);
    if (v27 >= v7)
    {
      LOWORD(v27) = v27 + 1;
      *(_WORD *)(a1 + 44) = v27;
    }
    if ((unsigned __int16)v27 >= v13)
    {
      *(_DWORD *)(a1 + 40) = *a4;
      *(_WORD *)(a1 + 44) = v27 - v13;
    }
    else
    {
      *(_DWORD *)(a1 + 40) = *a3;
    }
  }
  if (v7 <= v12)
  {
    LOWORD(v7) = -1;
    unsigned int v28 = a4;
  }
  else
  {
    *a5 -= v13;
    unsigned int v28 = a4;
    a3 = a4;
  }
  if (v8 <= v13)
  {
    __int16 v35 = 0;
  }
  else
  {
    int v29 = 0;
    do
    {
      if ((unsigned __int16)v7 == v13) {
        int v30 = v29 + 1;
      }
      else {
        int v30 = v29;
      }
      if ((unsigned __int16)v7 == v13) {
        LOWORD(v7) = -1;
      }
      unsigned int v31 = v6[3] & 0x1F;
      if (v31 > 7)
      {
        if (v31 == 8)
        {
          LODWORD(v32) = v6 + *((unsigned __int16 *)v6 + v13 + 10);
          LOWORD(v33) = 8;
        }
        else
        {
          if (v31 != 16) {
            goto LABEL_64;
          }
          uint64_t v32 = (_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10));
          unsigned int v33 = (*v32 & 0xFFFFFFFC) + 8;
        }
      }
      else if (v31 == 1)
      {
        uint64_t v32 = (_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10));
        unsigned int v33 = (*v32 & 0xFFFFFFFC) + 12;
      }
      else
      {
        if (v31 != 2) {
          goto LABEL_64;
        }
        uint64_t v32 = (_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10));
        unsigned int v33 = (*v32 + v32[1] + 12) & 0xFFFFFFFC;
      }
      ++v13;
      unsigned __int16 v34 = *((_WORD *)v28 + 9) - v33;
      *((_WORD *)v28 + 9) = v34;
      *((_WORD *)v28 + (unsigned __int16)v30 + 10) = v34;
      j__mkostemp((char *)v28 + v34, (int)v32);
      int v29 = v30 + 1;
    }
    while (v8 > v13);
    __int16 v35 = 2 * v29;
  }
  __int16 v36 = *((_WORD *)v28 + 8) + v35;
  if ((unsigned __int16)v7 == (unsigned __int16)(v39 >> 1)) {
    v36 += 2;
  }
  *((_WORD *)v28 + 8) = v36;
  return a3;
}

uint64_t __bt_ret(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char **a6, int a7)
{
  int v11 = (unsigned int *)(*(void *)a2 + *(unsigned __int16 *)(*(void *)a2 + 2 * *(unsigned __int16 *)(a2 + 8) + 20));
  if (a3)
  {
    if ((v11[2] & 2) != 0)
    {
      if (__ovfl_get(a1, (unsigned int *)((char *)v11 + 9), a3 + 1, (void **)a4, (size_t *)(a4 + 8))) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      if (!a7 && (*(unsigned char *)(a1 + 637) & 0x40) == 0)
      {
        unsigned int v14 = (char *)v11 + 9;
        a3[1] = *v11;
LABEL_13:
        *a3 = v14;
        goto LABEL_14;
      }
      unsigned int v15 = *(void **)a4;
      if (*(void *)(a4 + 8) < (unint64_t)*v11)
      {
        unsigned int v15 = malloc_type_realloc(v15, *v11, 0x2744B127uLL);
        if (!v15) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v16 = *v11;
        *(void *)a4 = v15;
        *(void *)(a4 + 8) = v16;
      }
      j__mkostemp((char *)v15, v11 + 9);
      a3[1] = *v11;
    }
    unsigned int v14 = *(void **)a4;
    goto LABEL_13;
  }
LABEL_14:
  if (!a5) {
    return 0;
  }
  if (v11[2])
  {
    if (!__ovfl_get(a1, (unsigned int *)((char *)v11 + *v11 + 9), a5 + 1, (void **)a6, (size_t *)a6 + 1))
    {
LABEL_26:
      unsigned int v18 = *a6;
      goto LABEL_27;
    }
    return 0xFFFFFFFFLL;
  }
  if (a7 || (*(unsigned char *)(a1 + 637) & 0x40) != 0)
  {
    size_t v20 = v11[1] + 1;
    unsigned __int16 v21 = *a6;
    if ((unint64_t)a6[1] >= v20)
    {
LABEL_25:
      j__mkostemp(v21, v11 + *v11 + 9);
      a5[1] = v11[1];
      goto LABEL_26;
    }
    unsigned __int16 v21 = (char *)malloc_type_realloc(v21, v20, 0x880B4BD5uLL);
    if (v21)
    {
      unsigned int v22 = v11[1];
      *a6 = v21;
      a6[1] = (char *)(v22 + 1);
      goto LABEL_25;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = *v11;
  a5[1] = v11[1];
  unsigned int v18 = (char *)v11 + v17 + 9;
LABEL_27:
  uint64_t result = 0;
  *a5 = v18;
  return result;
}

uint64_t __bt_cmp(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v9 = 0;
  size_t v10 = 0;
  uint64_t v5 = *a3;
  if (!*((_WORD *)a3 + 4) && !*(_DWORD *)(v5 + 4) && (*(unsigned char *)(v5 + 12) & 2) == 0) {
    return 1;
  }
  unsigned int v7 = (unsigned int *)(v5 + *(unsigned __int16 *)(v5 + 2 * *((unsigned __int16 *)a3 + 4) + 20));
  if ((v7[2] & 2) != 0)
  {
    unsigned int v8 = (char **)(a1 + 496);
    if (__ovfl_get(a1, (unsigned int *)((char *)v7 + 9), &v10, (void **)(a1 + 496), (size_t *)(a1 + 504))) {
      return 0xFFFFFFFFLL;
    }
    int v9 = *v8;
  }
  else
  {
    int v9 = (char *)v7 + 9;
    size_t v10 = *v7;
  }
  return (*(uint64_t (**)(uint64_t, char **))(a1 + 544))(a2, &v9);
}

uint64_t __bt_defcmp(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 >= v3) {
    int v4 = a2[1];
  }
  else {
    int v4 = a1[1];
  }
  if (!v4) {
    return (v2 - v3);
  }
  uint64_t v5 = *a2;
  for (int i = *a1; ; ++i)
  {
    int v7 = *i;
    int v8 = *v5;
    uint64_t result = (v7 - v8);
    if (v7 != v8) {
      break;
    }
    ++v5;
    if (!--v4) {
      return (v2 - v3);
    }
  }
  return result;
}

unint64_t __bt_defpfx(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 >= v3) {
    uint64_t v4 = a2[1];
  }
  else {
    uint64_t v4 = a1[1];
  }
  if (v4)
  {
    uint64_t v5 = 0;
    while (*(unsigned __int8 *)(*a1 + v5) == *(unsigned __int8 *)(*a2 + v5))
    {
      if (v4 == ++v5) {
        goto LABEL_8;
      }
    }
    return v5 + 1;
  }
  else
  {
LABEL_8:
    if (v2 >= v3) {
      return a1[1];
    }
    else {
      return v2 + 1;
    }
  }
}

DB *__cdecl dbopen(const char *a1, int a2, int a3, DBTYPE a4, const void *a5)
{
  if ((a2 & 0x1FFFF1C9) != 0) {
    goto LABEL_2;
  }
  if (a4 == DB_RECNO)
  {
    unsigned int v9 = a2 & 0xE0000000;
    char v10 = a2 & 0x36;
    return (DB *)__rec_open((uint64_t)a1, v10, *(uint64_t *)&a3, (uint64_t)a5, v9);
  }
  else if (a4 == DB_HASH)
  {
    int v11 = a2 & 0xE36;
    return (DB *)__hash_open(a1, v11, *(uint64_t *)&a3, (uint64_t)a5);
  }
  else
  {
    if (a4)
    {
LABEL_2:
      *__error() = 22;
      return 0;
    }
    unsigned int v7 = a2 & 0xE0000000;
    char v8 = a2 & 0x36;
    return (DB *)__bt_open((uint64_t)a1, v8, *(uint64_t *)&a3, (uint64_t *)a5, v7);
  }
}

void *__dbpanic(void *result)
{
  result[8] = __dberr;
  result[2] = __dberr;
  result[3] = __dberr;
  result[4] = __dberr;
  result[5] = __dberr;
  result[6] = __dberr;
  return result;
}

uint64_t __dberr()
{
  return 0xFFFFFFFFLL;
}

_DWORD *__hash_open(const char *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 3) == 1) {
    int v6 = a2 + 1;
  }
  else {
    int v6 = a2;
  }
  uint64_t result = malloc_type_calloc(1uLL, 0x298uLL, 0x10B00404C34C173uLL);
  if (result)
  {
    char v8 = result;
    timespec v9 = (timespec)0;
    memset(&v44, 0, sizeof(v44));
    result[71] = -1;
    result[70] = v6;
    if (!a1) {
      goto LABEL_10;
    }
    int v10 = open_NOCANCEL();
    v8[71] = v10;
    if (v10 == -1)
    {
      unsigned int v18 = __error();
LABEL_50:
      int v31 = *v18;
LABEL_51:
      free(v8);
LABEL_52:
      unsigned int v42 = __error();
      uint64_t result = 0;
      *unsigned int v42 = v31;
      return result;
    }
    fcntl_NOCANCEL();
    int v11 = fstat(v8[71], &v44);
    timespec v9 = (timespec)0;
    if (!v11 && !v44.st_size && (v6 & 0x203) != 0)
    {
LABEL_10:
      *(timespec *)&v45.st_blkunint64_t size = v9;
      *(timespec *)v45.st_qspare = v9;
      v45.st_birthtimespec = v9;
      *(timespec *)&v45.st_unint64_t size = v9;
      v45.st_mtimespec = v9;
      v45.st_ctimespec = v9;
      *(timespec *)&v45.st_uid = v9;
      v45.st_atimespec = v9;
      *(timespec *)&v45.dev_t st_dev = v9;
      *((void *)v8 + 3) = 0x800000100;
      *(_OWORD *)(v8 + 2) = xmmword_18AA00050;
      *(void *)(v8 + 13) = 0x10000;
      *((uint64_t (**)())v8 + 34) = __default_hash[0];
      *(timespec *)(v8 + 17) = v9;
      *(timespec *)(v8 + 21) = v9;
      *(timespec *)(v8 + 25) = v9;
      *(timespec *)(v8 + 29) = v9;
      *(timespec *)(v8 + 33) = v9;
      *(timespec *)(v8 + 37) = v9;
      *(timespec *)(v8 + 41) = v9;
      *(timespec *)(v8 + 45) = v9;
      *(timespec *)(v8 + 49) = v9;
      *(timespec *)(v8 + 53) = v9;
      *(timespec *)(v8 + 57) = v9;
      *(timespec *)(v8 + 61) = v9;
      if (a1)
      {
        if (stat(a1, &v45)) {
          goto LABEL_49;
        }
        st_blkunint64_t size = v45.st_blksize;
        v8[3] = v45.st_blksize;
        void v8[4] = __log2(st_blksize);
      }
      if (!a4)
      {
        unsigned int v16 = 1;
        goto LABEL_36;
      }
      if (!*(_DWORD *)a4 || (v13 = __log2(*(_DWORD *)a4), v8[3] = 1 << v13, void v8[4] = v13, 1 << v13 <= 0x10000))
      {
        int v14 = *(_DWORD *)(a4 + 4);
        if (v14) {
          v8[13] = v14;
        }
        uint64_t v15 = *(void *)(a4 + 16);
        if (v15) {
          *((void *)v8 + 34) = v15;
        }
        unsigned int v16 = *(_DWORD *)(a4 + 8);
        if (v16 <= 1) {
          unsigned int v16 = 1;
        }
        int v17 = *(_DWORD *)(a4 + 24);
        if (!v17)
        {
LABEL_36:
          unsigned int v32 = (v16 - 1) / v8[13];
          if ((int)(v32 + 1) > 2) {
            unsigned int v33 = v32 + 1;
          }
          else {
            unsigned int v33 = 2;
          }
          int v34 = __log2(v33);
          char v35 = v34;
          uint64_t v36 = v34 + 1;
          v8[v34 + 17] = v36;
          v8[v36 + 17] = v36;
          v8[8] = v34;
          v8[9] = 2;
          if (!__ibitmap((uint64_t)v8, ((_WORD)v34 << 11) | 1u, v36, 0))
          {
            int v37 = ~(-1 << v35);
            v8[10] = v37;
            v8[11] = (2 << v35) - 1;
            v8[12] = v37;
            v8[15] = (0x1FFuLL >> v8[4]) + 1;
            int v38 = 1 << __log2(v37 / v8[6] + 1);
            if (v38 > v8[5]) {
              v8[5] = v38;
            }
            if (!alloc_segs((uint64_t)v8, v38))
            {
              int v39 = 1;
              if (!a4) {
                goto LABEL_45;
              }
              goto LABEL_44;
            }
          }
          goto LABEL_49;
        }
        if (v17 == 4321 || v17 == 1234)
        {
          _OWORD v8[2] = v17;
          goto LABEL_36;
        }
      }
      *__error() = 22;
LABEL_49:
      unsigned int v18 = __error();
      char v8 = 0;
      goto LABEL_50;
    }
    if (!a4 || (unsigned int v19 = *(uint64_t (**)())(a4 + 16)) == 0) {
      unsigned int v19 = __default_hash[0];
    }
    *((void *)v8 + 34) = v19;
    int NOCANCEL = read_NOCANCEL();
    uint64_t v21 = 0;
    unsigned int v22 = bswap32(v8[1]);
    _DWORD *v8 = bswap32(*v8);
    v8[1] = v22;
    unsigned int v23 = bswap32(v8[3]);
    _OWORD v8[2] = bswap32(v8[2]);
    v8[3] = v23;
    unsigned int v24 = bswap32(v8[5]);
    void v8[4] = bswap32(v8[4]);
    v8[5] = v24;
    unsigned int v25 = bswap32(v8[7]);
    v8[6] = bswap32(v8[6]);
    v8[7] = v25;
    unsigned int v26 = bswap32(v8[9]);
    v8[8] = bswap32(v8[8]);
    v8[9] = v26;
    unsigned int v27 = bswap32(v8[11]);
    v8[10] = bswap32(v8[10]);
    v8[11] = v27;
    unsigned int v28 = bswap32(v8[13]);
    v8[12] = bswap32(v8[12]);
    v8[13] = v28;
    unsigned int v29 = bswap32(v8[15]);
    v8[14] = bswap32(v8[14]);
    v8[15] = v29;
    v8[16] = bswap32(v8[16]);
    int v30 = (char *)v8 + 197;
    do
    {
      v8[v21 + 17] = bswap32(v8[v21 + 17]);
      *(_WORD *)(v30 - 1) = bswap32(*(unsigned __int16 *)(v30 - 1)) >> 16;
      ++v21;
      v30 += 2;
    }
    while (v21 != 32);
    if (NOCANCEL == 260)
    {
      if (*v8 == 398689
        && (v8[1] - 1) <= 1
        && (*((unsigned int (**)(const char *, ...))v8 + 34))("%$sniglet^&", 12, 1) == v8[16])
      {
        if (alloc_segs((uint64_t)v8, (v8[6] + v8[10]) / v8[6])) {
          return 0;
        }
        int v43 = (v8[v8[8] + 17] + 8 * v8[3] - 1) >> (v8[4] + 3);
        v8[148] = v43;
        MEMORY[0x18C122530](v8 + 84, 8 * v43);
        int v39 = 0;
        if (!a4) {
          goto LABEL_45;
        }
LABEL_44:
        int v40 = *(_DWORD *)(a4 + 12);
        if (v40)
        {
LABEL_46:
          __buf_init((uint64_t)v8, v40);
          v8[81] = v39;
          if (a1) {
            int v41 = (v8[70] >> 1) & 1;
          }
          else {
            int v41 = 0;
          }
          v8[82] = v41;
          v8[78] = -1;
          uint64_t result = malloc_type_malloc(0x48uLL, 0x10800406ECF7772uLL);
          if (result)
          {
            *((void *)result + 1) = hash_close;
            *((void *)result + 2) = hash_delete;
            *((void *)result + 7) = v8;
            *((void *)result + 8) = hash_fd;
            *((void *)result + 3) = hash_get;
            *((void *)result + 4) = hash_put;
            *((void *)result + 5) = hash_seq;
            *((void *)result + 6) = hash_sync;
            *uint64_t result = 1;
            return result;
          }
          int v31 = *__error();
          hdestroy();
          goto LABEL_52;
        }
LABEL_45:
        int v40 = 0x10000;
        goto LABEL_46;
      }
    }
    else if (NOCANCEL == -1)
    {
      int v31 = *__error();
LABEL_60:
      close_NOCANCEL();
      goto LABEL_51;
    }
    int v31 = 79;
    goto LABEL_60;
  }
  return result;
}

uint64_t alloc_segs(uint64_t a1, int a2)
{
  uint64_t v4 = malloc_type_calloc(*(int *)(a1 + 20), 8uLL, 0x80040B8603338uLL);
  *(void *)(a1 + 648) = v4;
  if (v4)
  {
    *(_DWORD *)(a1 + 260) = a2;
    if (!a2) {
      return 0;
    }
    uint64_t v5 = (char *)malloc_type_calloc(a2 << *(_DWORD *)(a1 + 28), 8uLL, 0x80040B8603338uLL);
    if (v5)
    {
      if (a2 >= 1)
      {
        uint64_t v6 = 0;
        int v7 = *(_DWORD *)(a1 + 28);
        do
        {
          *(void *)(*(void *)(a1 + 648) + 8 * v6) = &v5[8 * (v6 << v7)];
          ++v6;
        }
        while (a2 != v6);
      }
      return 0;
    }
  }
  int v9 = *__error();
  hdestroy();
  *__error() = v9;
  return 0xFFFFFFFFLL;
}

void hdestroy(void)
{
  uint64_t v1 = v0;
  if (__buf_free(v0, 1, *(_DWORD *)(v0 + 328))) {
    int v2 = *__error();
  }
  else {
    int v2 = 0;
  }
  unint64_t v3 = *(void ***)(v1 + 648);
  if (v3)
  {
    for (int i = *v3; ; int i = *(void **)(v6 + 8 * v7))
    {
      free(i);
      int v5 = *(_DWORD *)(v1 + 264);
      *(_DWORD *)(v1 + 264) = v5 - 1;
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(v1 + 648);
      uint64_t v7 = *(int *)(v1 + 260) - 1;
      *(_DWORD *)(v1 + 260) = v7;
    }
    free(*(void **)(v1 + 648));
  }
  if (flush_meta(v1) && !v2) {
    int v2 = *__error();
  }
  int v8 = *(_DWORD *)(v1 + 592);
  if (v8 >= 1)
  {
    for (uint64_t j = 0; j < v8; ++j)
    {
      int v10 = *(void **)(v1 + 336 + 8 * j);
      if (v10)
      {
        free(v10);
        int v8 = *(_DWORD *)(v1 + 592);
      }
    }
  }
  int v11 = *(void **)(v1 + 296);
  if (v11) {
    free(v11);
  }
  unsigned __int16 v12 = *(void **)(v1 + 288);
  if (v12) {
    free(v12);
  }
  if (*(_DWORD *)(v1 + 284) != -1) {
    close_NOCANCEL();
  }
  free((void *)v1);
  if (v2) {
    *__error() = v2;
  }
}

uint64_t hash_close(void *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  hdestroy();
  uint64_t v3 = v2;
  free(a1);
  return v3;
}

uint64_t hash_delete(uint64_t a1, char **a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (a3 >= 2)
  {
    uint64_t v4 = __error();
    int v5 = 22;
LABEL_8:
    *uint64_t v4 = v5;
    *(_DWORD *)(v3 + 320) = v5;
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned char *)(v3 + 280) & 3) == 0)
  {
    uint64_t v4 = __error();
    int v5 = 1;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(a1 + 56);

  return hash_access(v6, 3, a2, 0);
}

uint64_t hash_fd(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *(unsigned int *)(*(void *)(a1 + 56) + 284);
  if (result == -1)
  {
    *__error() = 2;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t hash_get(uint64_t a1, char **a2, uint64_t *a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a4)
  {
    *__error() = 22;
    *(_DWORD *)(v4 + 320) = 22;
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    return hash_access(v6, 0, a2, a3);
  }
}

uint64_t hash_put(uint64_t a1, char **a2, uint64_t *a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if ((a4 & 0xFFFFFFF7) != 0)
  {
    int v5 = __error();
    int v6 = 22;
LABEL_3:
    *int v5 = v6;
    *(_DWORD *)(v4 + 320) = v6;
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned char *)(v4 + 280) & 3) == 0)
  {
    int v5 = __error();
    int v6 = 1;
    goto LABEL_3;
  }
  if (a4 == 8) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  uint64_t v11 = *(void *)(a1 + 56);

  return hash_access(v11, v10, a2, a3);
}

uint64_t hash_seq(uint64_t a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a4 <= 7 && ((1 << a4) & 0x89) != 0)
  {
    if (a4 == 3 || (*(_DWORD *)(v4 + 312) & 0x80000000) != 0)
    {
      *(void *)(v4 + 312) = 0x100000000;
      *(void *)(v4 + 304) = 0;
    }
    unint64_t v8 = 0;
    int v9 = 0;
    while (1)
    {
      while (1)
      {
        if (v9 && *v9)
        {
          uint64_t v16 = *(unsigned __int16 *)(v4 + 316);
          unint64_t v17 = v9[v16 + 1];
          if (v17 > 3)
          {
            uint64_t v18 = *(void *)(v4 + 304);
            if (!v18) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v19 = *(void *)(v18 + 32);
            uint64_t v20 = v9[*(unsigned __int16 *)(v4 + 316)];
            *a2 = v19 + v20;
            if (v16 < 2) {
              int v21 = *(_DWORD *)(v4 + 12);
            }
            else {
              int v21 = v9[(v16 - 1)];
            }
            a2[1] = v21 - (int)v20;
            *a3 = v19 + v17;
            a3[1] = v20 - v17;
          }
          else if (__big_keydata(v4, v8, a2, a3, 1))
          {
            return 0xFFFFFFFFLL;
          }
          return 0;
        }
        unint64_t v8 = *(void *)(v4 + 304);
        if (v8) {
          break;
        }
        unsigned int v11 = *(_DWORD *)(v4 + 312);
        unsigned int v12 = *(_DWORD *)(v4 + 40);
        if (v11 <= v12)
        {
          while (1)
          {
            unint64_t buf = __get_buf(v4, v11, 0, 0);
            if (!buf) {
              return 0xFFFFFFFFLL;
            }
            unint64_t v8 = buf;
            *(void *)(v4 + 304) = buf;
            int v9 = *(unsigned __int16 **)(buf + 32);
            unsigned int v12 = *(_DWORD *)(v4 + 40);
            if (!*v9)
            {
              ++v11;
              *(_DWORD *)(v4 + 316) = 1;
              if (v11 <= v12) {
                continue;
              }
            }
            goto LABEL_18;
          }
        }
        unint64_t v8 = 0;
LABEL_18:
        *(_DWORD *)(v4 + 312) = v11;
        if (v11 > v12)
        {
          *(_DWORD *)(v4 + 312) = -1;
          return 1;
        }
        int v10 = *(_DWORD *)(v4 + 316);
LABEL_20:
        if (!v9[v10 + 1])
        {
          do
          {
            unint64_t v14 = __get_buf(v4, v9[v10], v8, 0);
            *(void *)(v4 + 304) = v14;
            if (!v14) {
              return 0xFFFFFFFFLL;
            }
            unint64_t v8 = v14;
            int v9 = *(unsigned __int16 **)(v14 + 32);
            int v10 = 1;
            *(_DWORD *)(v4 + 316) = 1;
          }
          while (!v9[2]);
        }
        if (!*v9)
        {
          *(void *)(v4 + 304) = 0;
          ++*(_DWORD *)(v4 + 312);
        }
      }
      int v9 = *(unsigned __int16 **)(v8 + 32);
      int v10 = *(_DWORD *)(v4 + 316);
      if (a4 != 7) {
        goto LABEL_20;
      }
      v10 += 2;
      *(_DWORD *)(v4 + 316) = v10;
      if (v10 <= *v9) {
        goto LABEL_20;
      }
      int v9 = 0;
      *(void *)(v4 + 304) = 0;
      ++*(_DWORD *)(v4 + 312);
      *(_DWORD *)(v4 + 316) = 1;
    }
  }
  *__error() = 22;
  *(_DWORD *)(v4 + 320) = 22;
  return 0xFFFFFFFFLL;
}

uint64_t hash_sync(uint64_t a1, int a2)
{
  if (a2)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (!*(_DWORD *)(v3 + 328)) {
    return 0;
  }
  if (__buf_free(*(void *)(a1 + 56), 0, 1)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = flush_meta(v3);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(v3 + 324) = 0;
  return result;
}

uint64_t __expand_table(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v2;
  int v3 = *(_DWORD *)(a1 + 48);
  signed int v4 = v2 >> *(_DWORD *)(a1 + 28);
  unsigned int v5 = v2;
  if (v4 < *(_DWORD *)(a1 + 260)) {
    goto LABEL_7;
  }
  signed int v6 = *(_DWORD *)(a1 + 20);
  if (v4 >= v6)
  {
    uint64_t v7 = (char *)malloc_type_malloc(16 * v6, 0xF06B25C7uLL);
    if (!v7) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v8 = v7;
    j__mkostemp(v7, *(void *)(a1 + 648));
    MEMORY[0x18C122530](&v8[8 * v6], 8 * v6);
    free(*(void **)(a1 + 648));
    *(void *)(a1 + 648) = v8;
    *(_DWORD *)(a1 + 20) = 16 * v6;
  }
  int v9 = malloc_type_calloc(*(int *)(a1 + 24), 8uLL, 0x80040B8603338uLL);
  *(void *)(*(void *)(a1 + 648) + 8 * v4) = v9;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  *(int32x2_t *)(a1 + 260) = vadd_s32(*(int32x2_t *)(a1 + 260), (int32x2_t)0x100000001);
  unsigned int v5 = *(_DWORD *)(a1 + 40);
LABEL_7:
  int v10 = __log2(v5 + 1);
  uint64_t v11 = *(int *)(a1 + 32);
  if (v10 > (int)v11)
  {
    *(_DWORD *)(a1 + 68 + 4 * v10) = *(_DWORD *)(a1 + 68 + 4 * v11);
    *(_DWORD *)(a1 + 32) = v10;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 44);
  if (v2 > v12)
  {
    *(_DWORD *)(a1 + 44) = v12 | v2;
    *(_DWORD *)(a1 + 48) = v12;
  }

  return __split_page(a1, v3 & v2, v2);
}

uint64_t __call_hash(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = *(_DWORD *)(a1 + 44) & (*(unsigned int (**)(uint64_t, void))(a1 + 272))(a2, a3);
  if (result > *(_DWORD *)(a1 + 40)) {
    return *(_DWORD *)(a1 + 48) & result;
  }
  return result;
}

uint64_t flush_meta(uint64_t a1)
{
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  if (!*(_DWORD *)(a1 + 328)) {
    return 0;
  }
  *(void *)a1 = 0x200061561;
  int v2 = (*(uint64_t (**)(const char *, ...))(a1 + 272))("%$sniglet^&", 12);
  uint64_t v3 = 0;
  *(_DWORD *)(a1 + 64) = v2;
  int8x16_t v4 = vrev32q_s8(*(int8x16_t *)(a1 + 32));
  v4.i32[0] = *(_DWORD *)(a1 + 64);
  int16x8_t v5 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  uint8x8_t v6 = (uint8x8_t)vmovn_s16(v5);
  uint64_t v7 = a1 + 197;
  uint64_t v8 = -128;
  do
  {
    v6.i32[0] = *(_DWORD *)(v7 + v8 - 1);
    int16x8_t v9 = (int16x8_t)vmovl_u8(v6);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    uint8x8_t v6 = (uint8x8_t)vmovn_s16(v9);
    *(_DWORD *)((char *)v22 + v8) = v6.i32[0];
    int v10 = (char *)v22 + v3;
    char *v10 = *(unsigned char *)(v7 + v3);
    v10[1] = *(unsigned char *)(v7 + v3 - 1);
    v3 += 2;
    v8 += 4;
  }
  while (v8);
  uint64_t result = pwrite_NOCANCEL();
  if (result != -1)
  {
    if (result == 260)
    {
      uint64_t v12 = 0;
      while (1)
      {
        int v13 = *(_WORD **)(a1 + 8 * v12 + 336);
        if (v13)
        {
          if (__put_page((_DWORD *)a1, v13, *(unsigned __int16 *)(a1 + 2 * v12 + 196), 0, 1)) {
            break;
          }
        }
        if (++v12 == 32) {
          return 0;
        }
      }
    }
    else
    {
      *__error() = 79;
      *(_DWORD *)(a1 + 320) = *__error();
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t hash_access(uint64_t a1, int a2, char **a3, uint64_t *a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  int16x8_t v9 = *a3;
  int v10 = a3[1];
  unsigned int v11 = *(_DWORD *)(a1 + 44) & (*(uint64_t (**)(char *, void))(a1 + 272))(*a3, v10);
  if (v11 > *(_DWORD *)(a1 + 40)) {
    v11 &= *(_DWORD *)(a1 + 48);
  }
  unint64_t buf = __get_buf(a1, v11, 0, 0);
  if (!buf) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v13 = buf;
  char v35 = a4;
  int v36 = a2;
  int v34 = (uint64_t *)a3;
  uint64_t v37 = 0;
  *(unsigned char *)(buf + 40) |= 8u;
  long long v14 = *(unsigned __int16 **)(buf + 32);
  unsigned int v15 = *v14;
  uint64_t v16 = buf;
  if (v15 < 2)
  {
LABEL_25:
    if ((v36 - 1) > 1)
    {
LABEL_29:
      *(unsigned char *)(v13 + 40) &= ~8u;
      return 1;
    }
    else
    {
      int v30 = __addel((_DWORD *)a1, v16, v34, v35);
      *(unsigned char *)(v13 + 40) &= ~8u;
      if (v30) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
  }
  long long v17 = v14 + 1;
  int v18 = 1;
  uint64_t v16 = buf;
  while (1)
  {
    unsigned int v19 = v17[1];
    if (v19 >= 4) {
      break;
    }
    if (v17[1])
    {
      bigpaiunsigned int r = __find_bigpair(a1, v16, v18, (uint64_t)v9, v10);
      int v18 = bigpair;
      if (bigpair > 0) {
        goto LABEL_20;
      }
      if (bigpair != -2)
      {
LABEL_32:
        *(unsigned char *)(v13 + 40) &= ~8u;
        return 0xFFFFFFFFLL;
      }
      uint64_t v37 = v16;
      unsigned int last_page = __find_last_page(a1, &v37);
      if (!last_page)
      {
        uint64_t v16 = v37;
        goto LABEL_25;
      }
      unsigned int v22 = last_page;
      uint64_t v23 = v37;
      uint64_t v24 = a1;
    }
    else
    {
      unsigned int v22 = *v17;
      uint64_t v24 = a1;
      uint64_t v23 = v16;
    }
    unint64_t v25 = __get_buf(v24, v22, v23, 0);
    if (!v25) {
      goto LABEL_32;
    }
    uint64_t v16 = v25;
    unsigned int v26 = *(unsigned __int16 **)(v25 + 32);
    unsigned int v27 = *v26;
    long long v17 = v26 + 1;
    unsigned int v15 = v27;
    unsigned int v8 = *(_DWORD *)(a1 + 12);
    int v18 = 1;
LABEL_18:
    if (v18 >= (int)v15) {
      goto LABEL_25;
    }
  }
  if (v8 - *v17 != v10 || j__mkdtemp(v9))
  {
    v17 += 2;
    v18 += 2;
    unsigned int v8 = v19;
    goto LABEL_18;
  }
LABEL_20:
  switch(v36)
  {
    case 0:
      uint64_t v28 = *(void *)(v16 + 32);
      unint64_t v29 = *(unsigned __int16 *)(v28 + 2 * v18 + 2);
      if (v29 > 3)
      {
        uint64_t v32 = v28 + v29;
        unint64_t v33 = *(unsigned __int16 *)(v28 + 2 * v18) - v29;
        *char v35 = v32;
        v35[1] = v33;
      }
      else if (__big_return(a1, v16, v18, v35, 0))
      {
        return 0xFFFFFFFFLL;
      }
LABEL_37:
      uint64_t result = 0;
      *(unsigned char *)(v13 + 40) &= ~8u;
      break;
    case 1:
      if (__delpair((_DWORD *)a1, v16, v18) || __addel((_DWORD *)a1, v16, v34, v35)) {
        goto LABEL_32;
      }
      goto LABEL_37;
    case 2:
      goto LABEL_29;
    case 3:
      if (!__delpair((_DWORD *)a1, v16, v18)) {
        goto LABEL_37;
      }
      return 0xFFFFFFFFLL;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: illegal action (%d)");
  }
  return result;
}

uint64_t __big_insert(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int8x16_t v4 = a4;
  uint64_t v5 = a2;
  uint64_t v7 = *(char **)(a2 + 32);
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  uint64_t v11 = *(unsigned __int16 *)v7;
  uint64_t v12 = v11 + 1;
  if (v8)
  {
    unint64_t v13 = &v7[2 * v12];
    uint64_t v14 = *a3;
    while (1)
    {
      unsigned __int16 v15 = *(_WORD *)v13 - 8;
      if (v8 >= v15) {
        unsigned __int16 v16 = v15;
      }
      else {
        unsigned __int16 v16 = v8;
      }
      unsigned __int16 v17 = *(_WORD *)&v7[2 * v11 + 4] - v16;
      j__mkostemp(&v7[v17], v14);
      uint64_t v18 = *(unsigned __int16 *)v7;
      *(_WORD *)&v7[2 * v18 + 2] = v17;
      *(_WORD *)uint64_t v7 = v18 + 2;
      *(_WORD *)&v7[2 * (unsigned __int16)(v18 + 2) + 2] = v17 - 2 * v18 - 10;
      *(_WORD *)&v7[2 * (unsigned __int16)(v18 + 2) + 4] = v17;
      *(_WORD *)&v7[2 * v18 + 4] = 1;
      unint64_t v19 = __add_ovflpage(a1, v5);
      if (!v19) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v5 = v19;
      v8 -= v16;
      if (!v8) {
        break;
      }
      LODWORD(v14) = v14 + v16;
      uint64_t v7 = *(char **)(v19 + 32);
      *(unsigned char *)(v19 + 40) |= 1u;
      uint64_t v11 = *(unsigned __int16 *)v7;
      unint64_t v13 = &v7[2 * v11 + 2];
    }
    uint64_t v20 = *(unsigned __int16 *)v7;
    unsigned int v21 = *(unsigned __int16 *)&v7[2 * v20 + 2];
    if (!*(_WORD *)&v7[2 * v20 + 2]
      || (v10 >= v21 ? (int v22 = *(unsigned __int16 *)&v7[2 * v20 + 2]) : (int v22 = v10),
          v10 == v21 && a4[1] == v10))
    {
      uint64_t v23 = v20 - 2;
      unsigned __int16 v24 = 2;
    }
    else
    {
      unint64_t v25 = (unsigned __int16 *)&v7[2 * *(unsigned __int16 *)v7];
      unsigned __int16 v24 = v25[2] - v22;
      j__mkostemp(&v7[v24], v9);
      LODWORD(v9) = v9 + v22;
      LODWORD(v10) = v10 - v22;
      *unint64_t v25 = v24;
      *(_WORD *)&v7[2 * v20 - 4] = 3;
      uint64_t v26 = *(unsigned __int16 *)v7;
      *(_WORD *)&v7[2 * v26 + 2] -= v22;
      uint64_t v23 = v26 + 2;
    }
    *(_WORD *)&v7[2 * v23] = v24;
    uint64_t v7 = *(char **)(v5 + 32);
    *(unsigned char *)(v5 + 40) |= 1u;
    uint64_t v11 = *(unsigned __int16 *)v7;
    uint64_t v12 = v11 + 1;
    int8x16_t v4 = a4;
  }
  if (!v10) {
    return 0;
  }
  for (int i = &v7[2 * v12]; ; int i = &v7[2 * v11 + 2])
  {
    unsigned __int16 v28 = *(_WORD *)i - 8;
    unsigned __int16 v29 = v10 >= v28 ? v28 : v10;
    if (v10 == v28) {
      v29 -= v4[1] == v10;
    }
    unsigned __int16 v30 = *(_WORD *)&v7[2 * v11 + 4] - v29;
    j__mkostemp(&v7[v30], v9);
    LODWORD(v10) = v10 - v29;
    uint64_t v31 = *(unsigned __int16 *)v7;
    *(_WORD *)&v7[2 * v31 + 2] = v30;
    uint64_t v32 = v31 + 2;
    *(_WORD *)uint64_t v7 = v31 + 2;
    *(_WORD *)&v7[2 * (unsigned __int16)(v31 + 2) + 2] = v30 - 2 * v31 - 10;
    *(_WORD *)&v7[2 * (unsigned __int16)(v31 + 2) + 4] = v30;
    if (!v10) {
      break;
    }
    *(_WORD *)&v7[2 * v32] = 2;
    unint64_t v33 = __add_ovflpage(a1, v5);
    if (!v33) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = v33;
    LODWORD(v9) = v9 + v29;
    uint64_t v7 = *(char **)(v33 + 32);
    uint64_t v11 = *(unsigned __int16 *)v7;
    *(unsigned char *)(v33 + 40) |= 1u;
  }
  uint64_t result = 0;
  *(_WORD *)&v7[2 * v32] = 3;
  *(unsigned char *)(v5 + 40) |= 1u;
  return result;
}

uint64_t __big_delete(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0;
  BOOL v5 = 0;
  unint64_t buf = a2;
  while (1)
  {
    uint64_t v7 = *(unsigned __int16 **)(buf + 32);
    int v8 = v7[2];
    if (v5) {
      break;
    }
    BOOL v5 = (v8 & 0xFFFE) == 2;
    uint64_t v9 = *v7;
    if (v8 != 3) {
      goto LABEL_10;
    }
    if (v7[v9 + 1]) {
      goto LABEL_16;
    }
LABEL_11:
    unsigned int v10 = v7[v9 - 1];
    *(unsigned char *)(buf + 40) |= 1u;
    unint64_t buf = __get_buf(a1, v10, buf, 0);
    if (v4) {
      __free_ovflpage((_DWORD *)a1, v4);
    }
    uint64_t v4 = buf;
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v8 != 3)
  {
    if ((v8 & 0xFFFE) == 2) {
      BOOL v5 = 1;
    }
    LODWORD(v9) = *v7;
LABEL_10:
    uint64_t v9 = v9;
    goto LABEL_11;
  }
  LODWORD(v9) = *v7;
LABEL_16:
  uint64_t v12 = *(_WORD **)(a2 + 32);
  if (v9 < 3)
  {
    uint64_t v13 = 0;
  }
  else
  {
    v12[1] = v7[v9 - 1];
    int v12[2] = 0;
    uint64_t v13 = *(void *)(buf + 16);
  }
  *(void *)(a2 + 16) = v13;
  *uint64_t v12 = v9 - 2;
  __int16 v14 = *(_WORD *)(a1 + 12);
  unsigned __int16 v15 = &v12[(unsigned __int16)(v9 - 2)];
  v15[1] = v14 - 2 * v9 - 2;
  v15[2] = v14;
  *(unsigned char *)(a2 + 40) |= 1u;
  if (buf) {
    __free_ovflpage((_DWORD *)a1, buf);
  }
  if (v4 && v4 != buf) {
    __free_ovflpage((_DWORD *)a1, v4);
  }
  uint64_t result = 0;
  --*(_DWORD *)(a1 + 56);
  return result;
}

uint64_t __find_bigpair(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v7 = a3;
  uint64_t v8 = *(void *)(a2 + 32);
  unsigned __int16 v9 = *(_WORD *)(v8 + 2 * a3);
  unsigned __int16 v10 = *(_WORD *)(a1 + 12) - v9;
  int v11 = v10;
  if (v10 <= a5)
  {
    uint64_t v14 = a2;
    int v12 = a5;
    while (*(_WORD *)(v8 + 2 * v7 + 2) == 1)
    {
      uint64_t v16 = v10;
      if (j__mkdtemp((char *)(v8 + v9))) {
        return 4294967294;
      }
      unint64_t buf = __get_buf(a1, *(unsigned __int16 *)(v8 + 2 * v7 + 4), v14, 0);
      if (!buf) {
        return 4294967293;
      }
      uint64_t v14 = buf;
      v12 -= v11;
      a4 += v16;
      uint64_t v8 = *(void *)(buf + 32);
      unsigned __int16 v9 = *(_WORD *)(v8 + 2);
      unsigned __int16 v10 = *(_WORD *)(a1 + 12) - v9;
      int v11 = v10;
      int v7 = 1;
      if (v10 > a5) {
        break;
      }
    }
  }
  else
  {
    int v12 = a5;
  }
  uint64_t v13 = 4294967294;
  if (v12 == v11)
  {
    if (j__mkdtemp((char *)(v8 + *(unsigned __int16 *)(v8 + 2 * v7)))) {
      return 4294967294;
    }
    else {
      return v7;
    }
  }
  return v13;
}

unint64_t __find_last_page(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  while (1)
  {
    BOOL v5 = *(unsigned __int16 **)(v4 + 32);
    uint64_t v6 = *v5;
    if (v5[2] == 3)
    {
      if (v6 == 2)
      {
        unint64_t result = 0;
        *a2 = v4;
        return result;
      }
      if (!v5[v6] || v5[v6 + 1]) {
        break;
      }
    }
    unint64_t result = __get_buf(a1, v5[v6 - 1], v4, 0);
    uint64_t v4 = result;
    if (!result) {
      return result;
    }
  }
  *a2 = v4;
  if (v6 < 3) {
    return 0;
  }
  else {
    return v5[3];
  }
}

uint64_t __big_return(uint64_t a1, unint64_t buf, int a3, void *a4, uint64_t a5)
{
  for (uint64_t i = a3 + 1; ; uint64_t i = 2)
  {
    unsigned __int16 v10 = *(unsigned __int16 **)(buf + 32);
    int v11 = v10[i];
    if (v11 != 1) {
      break;
    }
    unint64_t buf = __get_buf(a1, v10[*v10 - 1], buf, 0);
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v11 == 2)
  {
    unint64_t v12 = __get_buf(a1, v10[*v10 - 1], buf, 0);
    if (v12)
    {
      uint64_t v13 = v12;
      unsigned __int16 v14 = 0;
      int v15 = *(unsigned __int16 *)(v12 + 24);
      LODWORD(v16) = *(unsigned __int16 *)(*(void *)(v12 + 32) + 2);
      unint64_t buf = v12;
LABEL_14:
      uint64_t result = collect_data(a1, v13, v14, a5);
      a4[1] = (int)result;
      if (result == -1) {
        return result;
      }
      if (*(_DWORD *)(buf + 24) == v15)
      {
        j__mkostemp(*(char **)(a1 + 288), *(void *)(buf + 32) + v16);
        uint64_t result = 0;
        *a4 = *(void *)(a1 + 288);
        return result;
      }
      *__error() = 22;
    }
  }
  else
  {
    uint64_t v17 = *v10;
    uint64_t v18 = &v10[v17];
    uint64_t v16 = *v18;
    if (v18[1])
    {
      uint64_t v19 = v10[1] - v16;
      *a4 = (char *)v10 + v16;
      a4[1] = v19;
      if (a5)
      {
        if (v17 == 2)
        {
          uint64_t result = 0;
          *(void *)(a1 + 304) = 0;
          ++*(_DWORD *)(a1 + 312);
          *(_DWORD *)(a1 + 316) = 1;
          return result;
        }
        unint64_t v23 = __get_buf(a1, v10[v17 - 1], buf, 0);
        *(void *)(a1 + 304) = v23;
        if (!v23) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)(a1 + 316) = 1;
        if (!**(_WORD **)(v23 + 32))
        {
          uint64_t result = 0;
          ++*(_DWORD *)(a1 + 312);
          *(void *)(a1 + 304) = 0;
          return result;
        }
      }
      return 0;
    }
    unsigned __int16 v21 = v10[1];
    int v15 = *(unsigned __int16 *)(buf + 24);
    unint64_t v22 = __get_buf(a1, v10[v17 - 1], buf, 0);
    if (v22)
    {
      uint64_t v13 = v22;
      unsigned __int16 v14 = v21 - v16;
      goto LABEL_14;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t collect_data(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned __int16 **)(a2 + 32);
  int v9 = *(_DWORD *)(a1 + 12) - v8[1];
  int v10 = *(unsigned __int16 *)(a2 + 24);
  if (v8[2] == 3)
  {
    uint64_t v11 = (v9 + a3);
    unint64_t v12 = *(void **)(a1 + 288);
    if (v12) {
      free(v12);
    }
    uint64_t v13 = malloc_type_malloc((int)v11, 0xFFDE5386uLL);
    *(void *)(a1 + 288) = v13;
    if (!v13) {
      return 0xFFFFFFFFLL;
    }
    if (a4)
    {
      *(_DWORD *)(a1 + 316) = 1;
      uint64_t v14 = *v8;
      if (v14 == 2)
      {
        *(void *)(a1 + 304) = 0;
        ++*(_DWORD *)(a1 + 312);
      }
      else
      {
        unint64_t buf = __get_buf(a1, v8[v14 - 1], a2, 0);
        *(void *)(a1 + 304) = buf;
        if (!buf) {
          return 0xFFFFFFFFLL;
        }
        if (!**(_WORD **)(buf + 32))
        {
          ++*(_DWORD *)(a1 + 312);
          *(void *)(a1 + 304) = 0;
        }
      }
    }
  }
  else
  {
    unint64_t v15 = __get_buf(a1, v8[*v8 - 1], a2, 0);
    if (!v15) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = collect_data(a1, v15, (v9 + a3), a4);
    if ((int)v11 < 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*(_DWORD *)(a2 + 24) != v10)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  j__mkostemp((char *)(*(void *)(a1 + 288) + a3), *(void *)(a2 + 32) + v8[1]);
  return v11;
}

uint64_t __big_keydata(uint64_t a1, unint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t result = collect_key(a1, a2, 0, a4, a5);
  a3[1] = (int)result;
  if (result != -1)
  {
    uint64_t result = 0;
    *a3 = *(void *)(a1 + 296);
  }
  return result;
}

uint64_t collect_key(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5)
{
  int v10 = *(unsigned __int16 **)(a2 + 32);
  int v11 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v12 = *(_DWORD *)(a1 + 12) - v10[1] + a3;
  if ((v10[2] & 0xFFFE) == 2)
  {
    uint64_t v13 = *(void **)(a1 + 296);
    if (v13) {
      free(v13);
    }
    uint64_t v14 = malloc_type_malloc((int)v12, 0x42A49C15uLL);
    *(void *)(a1 + 296) = v14;
    if (!v14 || __big_return(a1, a2, 1, a4, a5)) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    unint64_t buf = __get_buf(a1, v10[*v10 - 1], a2, 0);
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v12 = collect_key(a1, buf, v12, a4, a5);
    if ((int)v12 < 1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*(_DWORD *)(a2 + 24) != v11)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  j__mkostemp((char *)(*(void *)(a1 + 296) + a3), *(void *)(a2 + 32) + v10[1]);
  return v12;
}

uint64_t __big_split(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, __int16 a5, int a6, uint64_t a7)
{
  unint64_t v34 = a4;
  uint64_t result = collect_key(a1, a4, 0, &v33, 0);
  if (result != -1)
  {
    int v15 = __call_hash(a1, *(void *)(a1 + 296), result);
    unsigned int last_page = __find_last_page(a1, (uint64_t *)&v34);
    *(_WORD *)(a7 + 24) = last_page;
    if (last_page)
    {
      uint64_t v17 = v34;
      unint64_t buf = __get_buf(a1, last_page, v34, 0);
      *(void *)(a7 + 16) = buf;
      if (!buf) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      *(void *)(a7 + 16) = 0;
      uint64_t v17 = v34;
    }
    if (v15 == a6) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = a3;
    }
    *(unsigned char *)(v19 + 40) |= 1u;
    *(void *)(v19 + 16) = a4;
    uint64_t v20 = *(_WORD **)(v19 + 32);
    uint64_t v21 = (unsigned __int16)*v20;
    unint64_t v22 = &v20[v21];
    __int16 v23 = v22[2];
    LOWORD(v22) = v22[1];
    v20[(unsigned __int16)(v21 + 1)] = a5;
    LOWORD(v21) = v21 + 2;
    unsigned __int16 v24 = &v20[(unsigned __int16)v21];
    *unsigned __int16 v24 = 0;
    _WORD *v20 = v21;
    void v24[2] = v23;
    v24[1] = (_WORD)v22 - 4;
    *(void *)a7 = a3;
    *(void *)(a7 + 8) = a2;
    unint64_t v25 = *(unsigned __int16 **)(v17 + 32);
    *(unsigned char *)(v17 + 40) |= 1u;
    uint64_t v26 = *v25;
    if (v26 >= 3)
    {
      unsigned __int16 v27 = v25[4];
      unsigned __int16 v28 = &v25[v26];
      unsigned __int16 v29 = v28[1];
      LOWORD(v28) = v28[2];
      unsigned __int16 v30 = v26 - 2;
      *unint64_t v25 = v30;
      uint64_t v31 = &v25[v30];
      v31[1] = v29 + 4;
      v31[2] = (unsigned __int16)v28;
      unint64_t v32 = __add_ovflpage(a1, v17);
      if (!v32) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v17 = v32;
      v25[4] = v27;
    }
    uint64_t result = 0;
    *(void *)(a7 + 8 * (v15 == a6)) = v17;
  }
  return result;
}

unint64_t __get_buf(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (!a3)
  {
    uint64_t v9 = (*(int *)(a1 + 24) - 1) & (int)a2;
    uint64_t v10 = *(void *)(*(void *)(a1 + 648) + 8 * (a2 >> *(_DWORD *)(a1 + 28)));
    uint64_t v12 = *(void *)(v10 + 8 * v9);
    unint64_t result = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v12 & 2) != 0)
    {
      uint64_t v8 = *(void *)(v10 + 8 * v9) & 2;
      int v11 = 1;
      if (!result) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v8 = 0;
      int v11 = *(_DWORD *)(a1 + 324) == 0;
      if (!result) {
        goto LABEL_12;
      }
    }
LABEL_9:
    uint64_t v13 = *(void *)result;
    *(void *)(v13 + 8) = *(void *)(result + 8);
    **(void **)(result + 8) = v13;
    uint64_t v14 = *(void *)(a1 + 608);
    *(void *)unint64_t result = a1 + 600;
    *(void *)(result + 8) = v14;
    *(void *)(a1 + 608) = result;
    **(void **)(result + 8) = result;
    return result;
  }
  unint64_t result = *(void *)(a3 + 16);
  if (!result || *(_DWORD *)(result + 24) != a2) {
    unint64_t result = 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 2 * (a4 == 0);
  if (result) {
    goto LABEL_9;
  }
LABEL_12:
  int v15 = (uint64_t *)(a1 + 600);
  unint64_t v16 = *(void *)(a1 + 600);
  uint64_t v17 = *(void **)(a1 + 304);
  if ((void *)v16 == v17)
  {
    uint64_t v18 = *(void *)v16;
    *(void *)(v18 + 8) = *(void *)(v16 + 8);
    **(void **)(v16 + 8) = v18;
    uint64_t v19 = *(void *)(a1 + 608);
    *(void *)unint64_t v16 = v15;
    *(void *)(v16 + 8) = v19;
    *(void *)(a1 + 608) = v16;
    **(void **)(v16 + 8) = v16;
    unint64_t v16 = *(void *)(a1 + 600);
  }
  int v20 = *(_DWORD *)(a1 + 596);
  if (!a3 || v20)
  {
    if (v20)
    {
LABEL_28:
      unint64_t result = (unint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0x1030040DD04DACBuLL);
      if (!result) {
        return result;
      }
      unint64_t v16 = result;
      unsigned __int16 v27 = malloc_type_calloc(1uLL, *(int *)(a1 + 12), 0x8FC98490uLL);
      *(void *)(v16 + 32) = v27;
      if (v27)
      {
        int v28 = *(_DWORD *)(a1 + 596);
        if (v28) {
          *(_DWORD *)(a1 + 596) = v28 - 1;
        }
        goto LABEL_53;
      }
      free((void *)v16);
      return 0;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(v16 + 16);
    if (v21)
    {
      while (v21 != a3)
      {
        uint64_t v21 = *(void *)(v21 + 16);
        if (!v21) {
          goto LABEL_21;
        }
      }
      *(_DWORD *)(a1 + 596) = 1;
      goto LABEL_28;
    }
  }
LABEL_21:
  char v22 = *(unsigned char *)(v16 + 40);
  if ((v22 & 8) != 0 || (void *)v16 == v17) {
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)v16;
  *(void *)(v23 + 8) = *(void *)(v16 + 8);
  **(void **)(v16 + 8) = v23;
  unsigned int v24 = *(_DWORD *)(v16 + 24);
  if (v22 & 4 | v24)
  {
    unint64_t v25 = *(unsigned __int16 **)(v16 + 32);
    if (*v25)
    {
      uint64_t v26 = v25[*v25 - 1];
      if ((v22 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v26 = 0;
      if ((v22 & 1) == 0) {
        goto LABEL_37;
      }
    }
    if (__put_page((_DWORD *)a1, v25, v24, v22 & 4, 0)) {
      return 0;
    }
    char v22 = *(unsigned char *)(v16 + 40);
LABEL_37:
    int v42 = v11;
    uint64_t v43 = v8;
    if ((v22 & 4) != 0)
    {
      uint64_t v29 = *(int *)(v16 + 24);
      uint64_t v30 = (*(int *)(a1 + 24) - 1) & v29;
      uint64_t v31 = *(void *)(*(void *)(a1 + 648) + 8 * (v29 >> *(_DWORD *)(a1 + 28)));
      if (*(_DWORD *)(a1 + 324) && ((uint64_t v30 = (int)v30, (v22 & 1) != 0) || (*(void *)(v31 + 8 * (int)v30) & 2) != 0)) {
        uint64_t v32 = 2;
      }
      else {
        uint64_t v32 = 0;
      }
      *(void *)(v31 + 8 * v30) = v32;
    }
    uint64_t v33 = (void *)(v16 + 16);
    for (i = *(uint64_t **)(v16 + 16); i; uint64_t v26 = v36)
    {
      *uint64_t v33 = 0;
      if ((i[5] & 4) != 0 || *((_DWORD *)i + 6) != v26) {
        break;
      }
      char v35 = (unsigned __int16 *)i[4];
      uint64_t v36 = v26;
      if (*v35) {
        uint64_t v36 = v35[*v35 - 1];
      }
      if ((i[5] & 1) != 0 && __put_page((_DWORD *)a1, v35, v26, 0, 0)) {
        return 0;
      }
      *((_DWORD *)i + 6) = 0;
      *((unsigned char *)i + 40) = 0;
      uint64_t v37 = *i;
      *(void *)(v37 + 8) = i[1];
      *(void *)i[1] = v37;
      uint64_t v38 = *(void *)(*v15 + 8);
      *uint64_t i = *v15;
      i[1] = v38;
      *(void *)(*v15 + 8) = i;
      *(void *)i[1] = i;
      uint64_t v33 = i + 2;
      uint64_t i = (uint64_t *)i[2];
    }
    uint64_t v8 = v43;
    int v11 = v42;
  }
LABEL_53:
  *(_DWORD *)(v16 + 24) = a2;
  *(void *)(v16 + 16) = 0;
  if (a3)
  {
    char v39 = 0;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    char v39 = 4;
  }
  *(unsigned char *)(v16 + 40) = v39;
  uint64_t v40 = *(void *)(a1 + 608);
  *(void *)unint64_t v16 = v15;
  *(void *)(v16 + 8) = v40;
  *(void *)(a1 + 608) = v16;
  **(void **)(v16 + 8) = v16;
  int page = __get_page((_DWORD *)a1, *(unsigned __int16 **)(v16 + 32), a2, a3 == 0, v11, 0);
  if (page) {
    unint64_t result = 0;
  }
  else {
    unint64_t result = v16;
  }
  if (!a3 && !page)
  {
    *(void *)(v10 + 8 * v9) = v8 | v16;
    return v16;
  }
  return result;
}

uint64_t __buf_init(uint64_t result, int a2)
{
  int v2 = (a2 + *(_DWORD *)(result + 12) - 1) >> *(_DWORD *)(result + 16);
  if (v2 <= 6) {
    int v2 = 6;
  }
  *(_DWORD *)(result + 596) = v2;
  *(void *)(result + 608) = result + 600;
  *(void *)(result + 600) = result + 600;
  return result;
}

uint64_t __buf_free(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = (uint64_t *)(a1 + 600);
  uint64_t v4 = *(uint64_t **)(a1 + 600);
  if (v4) {
    BOOL v5 = v4 == v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  while (1)
  {
    unsigned int v9 = *((_DWORD *)v4 + 6);
    if (!v9) {
      break;
    }
    if (a3)
    {
      char v10 = *((unsigned char *)v4 + 40);
      goto LABEL_10;
    }
LABEL_12:
    if (a2)
    {
      uint64_t v11 = v4[4];
      if (v11)
      {
        MEMORY[0x18C122530](v11, *(int *)(a1 + 12));
        free((void *)v4[4]);
      }
      uint64_t v12 = (uint64_t *)*v4;
      v12[1] = v4[1];
      *(void *)v4[1] = v12;
      free(v4);
      uint64_t v4 = v3;
    }
    uint64_t v4 = (uint64_t *)*v4;
    if (v4 == v3) {
      return 0;
    }
  }
  if (!a3) {
    goto LABEL_12;
  }
  char v10 = *((unsigned char *)v4 + 40);
  if ((v10 & 4) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  if ((v10 & 1) == 0 || !__put_page((_DWORD *)a1, (_WORD *)v4[4], v9, v10 & 4, 0)) {
    goto LABEL_12;
  }
  return 0xFFFFFFFFLL;
}

uint64_t __reclaim_buf(uint64_t result, uint64_t *a2)
{
  a2[2] = 0;
  *((_DWORD *)a2 + 6) = 0;
  *((unsigned char *)a2 + 40) = 0;
  uint64_t v2 = *a2;
  *(void *)(v2 + 8) = a2[1];
  *(void *)a2[1] = v2;
  uint64_t v3 = *(void *)(result + 600);
  uint64_t v4 = *(void *)(v3 + 8);
  *a2 = v3;
  a2[1] = v4;
  *(void *)(*(void *)(result + 600) + 8) = a2;
  *(void *)a2[1] = a2;
  return result;
}

uint64_t hash4(unsigned __int8 *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v2 = (unint64_t)(a2 + 7) >> 3;
  LODWORD(v3) = 0;
  switch(a2 & 7)
  {
    case 1:
      goto LABEL_11;
    case 2:
      goto LABEL_10;
    case 3:
      goto LABEL_9;
    case 4:
      goto LABEL_8;
    case 5:
      goto LABEL_7;
    case 6:
      goto LABEL_6;
    case 7:
      goto LABEL_5;
    default:
      do
      {
        int v4 = *a1++;
        LODWORD(v3) = 33 * v3 + v4;
LABEL_5:
        int v5 = *a1++;
        LODWORD(v3) = 33 * v3 + v5;
LABEL_6:
        int v6 = *a1++;
        LODWORD(v3) = 33 * v3 + v6;
LABEL_7:
        int v7 = *a1++;
        LODWORD(v3) = 33 * v3 + v7;
LABEL_8:
        int v8 = *a1++;
        LODWORD(v3) = 33 * v3 + v8;
LABEL_9:
        int v9 = *a1++;
        LODWORD(v3) = 33 * v3 + v9;
LABEL_10:
        int v10 = *a1++;
        LODWORD(v3) = 33 * v3 + v10;
LABEL_11:
        int v11 = *a1++;
        uint64_t v3 = (33 * v3 + v11);
        --v2;
      }
      while (v2);
      break;
  }
  return v3;
}

uint64_t __log2(unsigned int a1)
{
  if (a1 < 2) {
    return 0;
  }
  LODWORD(result) = 0;
  unsigned int v3 = 1;
  do
  {
    v3 *= 2;
    uint64_t result = (result + 1);
  }
  while (v3 < a1);
  return result;
}

uint64_t __delpair(_DWORD *a1, unint64_t a2, int a3)
{
  int v5 = *(char **)(a2 + 32);
  unint64_t v6 = *(unsigned __int16 *)&v5[2 * a3 + 2];
  if (v6 > 3)
  {
    uint64_t v9 = *(unsigned __int16 *)v5;
    if (a3 == 1) {
      int v10 = a1[3];
    }
    else {
      LOWORD(v10) = *(_WORD *)&v5[2 * a3 - 2];
    }
    unsigned __int16 v11 = v10 - v6;
    if (v9 - 1 != a3)
    {
      uint64_t v12 = *(unsigned __int16 *)&v5[2 * v9 + 4];
      j__mkostemp(&v5[v12 + v11], v5 + v12);
      LODWORD(v13) = a3 + 2;
      if (a3 + 2 <= (int)v9)
      {
        uint64_t v13 = (int)v13;
        int v14 = a3;
        do
        {
          __int16 v15 = *(_WORD *)&v5[2 * v14 + 6];
          __int16 v16 = *(_WORD *)&v5[2 * v13];
          if (v15)
          {
            *(_WORD *)&v5[2 * v14] = v16 + v11;
            v15 += v11;
          }
          else
          {
            *(_WORD *)&v5[2 * v14] = v16;
          }
          *(_WORD *)&v5[2 * v14 + 2] = v15;
          v13 += 2;
          v14 += 2;
        }
        while (v13 <= v9);
      }
      if (a1[79] == a3) {
        a1[79] = a3 - 2;
      }
    }
    *(_WORD *)&v5[2 * v9] = *(_WORD *)&v5[2 * *(unsigned __int16 *)v5 + 4] + v11;
    *(_WORD *)&v5[2 * v9 - 2] = v11 + *(_WORD *)&v5[2 * v9 + 2] + 4;
    *(_WORD *)int v5 = v9 - 2;
    --a1[14];
    *(unsigned char *)(a2 + 40) |= 1u;
    return 0;
  }
  else
  {
    return __big_delete((uint64_t)a1, a2);
  }
}

uint64_t __split_page(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v4 = a2;
  int v5 = (_DWORD *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  unint64_t buf = __get_buf(a1, a2, 0, 0);
  if (!buf) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v8 = buf;
  unint64_t v9 = __get_buf((uint64_t)v5, a3, 0, 0);
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v10 = v9;
  *(unsigned char *)(v8 + 40) |= 9u;
  *(unsigned char *)(v9 + 40) |= 9u;
  unsigned __int16 v11 = *(char **)(v8 + 32);
  LODWORD(v12) = *(unsigned __int16 *)v11;
  if (v12 < 2)
  {
    unsigned __int16 v32 = 0;
    goto LABEL_16;
  }
  unint64_t v75 = v9;
  unint64_t v76 = v8;
  uint64_t v13 = 0;
  int v14 = *(char **)(v9 + 32);
  int v82 = 1;
  unsigned __int16 oflags = 0;
  int v15 = v6;
  uint64_t v81 = v5;
  int v80 = v4;
  while (1)
  {
    __int16 v16 = &v11[2 * v13];
    if (*((unsigned __int16 *)v16 + 2) <= 3u) {
      break;
    }
    uint64_t v17 = *((unsigned __int16 *)v16 + 1);
    int v18 = v11 + v17;
    __int16 v19 = v15 - v17;
    if (__call_hash((uint64_t)v5, (uint64_t)&v11[v17], (unsigned __int16)v15 - v17) == v4)
    {
      if ((unsigned __int16)v6 == (unsigned __int16)v15)
      {
        uint64_t v6 = *((unsigned __int16 *)v16 + 2);
        int v20 = v82;
      }
      else
      {
        __int16 v28 = v6 - v15;
        int v29 = *((unsigned __int16 *)v16 + 2);
        uint64_t v6 = (v29 + v6 - v15);
        j__mkostemp(&v11[(unsigned __int16)(v29 + v28)], v11 + v29);
        int v20 = v82;
        uint64_t v30 = &v11[2 * v82];
        *(_WORD *)uint64_t v30 = *((_WORD *)v16 + 1) + v6 - *((_WORD *)v16 + 2);
        *((_WORD *)v30 + 1) = v6;
      }
      int v82 = v20 + 2;
    }
    else
    {
      int v21 = *((unsigned __int16 *)v16 + 2);
      int v22 = v11 + v21;
      __int16 v23 = *((_WORD *)v16 + 1) - v21;
      uint64_t v86 = v6;
      uint64_t v24 = *(unsigned __int16 *)v14;
      unsigned __int16 v25 = *(_WORD *)&v14[2 * v24 + 4] - v19;
      j__mkostemp(&v14[v25], v18);
      *(_WORD *)&v14[2 * (unsigned __int16)(v24 + 1)] = v25;
      unsigned __int16 v26 = v25 - v23;
      int v5 = v81;
      int v4 = v80;
      j__mkostemp(&v14[v26], v22);
      unsigned __int16 v27 = v24 + 2;
      uint64_t v6 = v86;
      *(_WORD *)&v14[2 * v27] = v26;
      *(_WORD *)int v14 = v27;
      *(_WORD *)&v14[2 * v27 + 2] = v26 - 2 * v27 - 6;
      *(_WORD *)&v14[2 * v27 + 4] = v26;
      oflags += 2;
    }
    int v15 = *((unsigned __int16 *)v16 + 2);
    unint64_t v12 = *(unsigned __int16 *)v11;
    unint64_t v31 = v13 + 3;
    v13 += 2;
    if (v31 >= v12)
    {
      unint64_t v10 = v75;
      unint64_t v8 = v76;
      unsigned __int16 v32 = oflags;
LABEL_16:
      uint64_t result = 0;
      unsigned __int16 v34 = v12 - v32;
      *(_WORD *)unsigned __int16 v11 = v34;
      __int16 v35 = v6 - 2 * v34 - 6;
      uint64_t v36 = &v11[2 * v34];
      *((_WORD *)v36 + 1) = v35;
      *((_WORD *)v36 + 2) = v6;
      goto LABEL_59;
    }
  }
  long long v88 = 0u;
  long long v89 = 0u;
  unint64_t v8 = v76;
  uint64_t v37 = *(unsigned __int16 **)(v76 + 32);
  LOWORD(v38) = *v37;
  if (*v37)
  {
    *(_DWORD *)&v73[8] = 0;
    unint64_t v74 = v76;
    *(void *)uint64_t v73 = oflags;
    unsigned __int16 v39 = v38 - 1;
    uint64_t v77 = *(char **)(v75 + 32);
    uint64_t v78 = *(char **)(v76 + 32);
    uint64_t v40 = v76;
    uint64_t v79 = v75;
    while (1)
    {
      if (v37[2] - 4 >= 0xFFFFFFFD)
      {
        if (__big_split((uint64_t)v5, v40, v79, v74, *(_DWORD *)(v74 + 24), v4, (uint64_t)&v88))
        {
LABEL_52:
          uint64_t result = 0xFFFFFFFFLL;
LABEL_57:
          unint64_t v8 = v76;
          goto LABEL_58;
        }
        uint64_t v40 = *((void *)&v88 + 1);
        unint64_t v10 = v75;
        unint64_t v8 = v76;
        if (!*((void *)&v88 + 1) || !(void)v88)
        {
          uint64_t result = 0xFFFFFFFFLL;
          goto LABEL_59;
        }
        if (!(void)v89)
        {
          uint64_t result = 0;
          goto LABEL_59;
        }
        uint64_t v78 = *(char **)(*((void *)&v88 + 1) + 32);
        uint64_t v79 = v88;
        uint64_t v77 = *(char **)(v88 + 32);
        *(void *)&v73[4] = v89;
        unint64_t v74 = v89;
        uint64_t v37 = *(unsigned __int16 **)(v89 + 32);
      }
      else if (!v37[v39 + 1])
      {
        unsigned int v41 = v37[v39];
        unsigned __int16 v42 = v38 - *(_WORD *)v73 - 2;
        *uint64_t v37 = v42;
        unsigned __int16 v43 = v6 - 2 * v42 - 6;
        stat v44 = &v37[v42];
        v44[1] = v43;
        _DWORD v44[2] = v6;
        unint64_t v45 = __get_buf((uint64_t)v5, v41, v74, 0);
        if (!v45) {
          goto LABEL_52;
        }
        uint64_t v37 = *(unsigned __int16 **)(v45 + 32);
        uint64_t v6 = v5[3];
        unint64_t v74 = v45;
        if (*(void *)&v73[4])
        {
          unint64_t v46 = v45;
          __free_ovflpage(v5, *(uint64_t *)&v73[4]);
          *(_WORD *)uint64_t v73 = 0;
          *(void *)&v73[4] = v46;
        }
        else
        {
          *(_WORD *)uint64_t v73 = 0;
          *(void *)&v73[4] = v45;
        }
      }
      unsigned int v38 = *v37;
      uint64_t v87 = v6;
      if (v38 < 2 || (unsigned int v47 = v37[2], v47 < 4))
      {
        unsigned __int16 v39 = 1;
      }
      else
      {
        unsigned int v48 = *((unsigned __int16 *)v5 + 6);
        uint64_t v49 = 1;
        unsigned __int16 v39 = 1;
        while (1)
        {
          unsigned int v50 = v47;
          uint64_t v51 = v37[v49];
          int v52 = v37 + v51;
          uint64_t v53 = v48 - v51;
          uint64_t v54 = v51 - v50;
          unsigned int v83 = v50;
          int oflagsa = v37 + v50;
          if (__call_hash((uint64_t)v5, (uint64_t)v37 + v51, v48 - v51) == v4)
          {
            if (*((unsigned __int16 *)v78 + 2) >= 4u
              && (uint64_t v55 = *(unsigned __int16 *)v78,
                  int v56 = (unsigned __int16 *)&v78[2 * v55],
                  v53 + v54 + 8 <= (unint64_t)v56[1]))
            {
              unsigned __int16 v71 = v56[2] - v53;
              j__mkostemp(&v78[v71], v52);
              *(_WORD *)&v78[2 * (unsigned __int16)(v55 + 1)] = v71;
              unsigned __int16 v62 = v71 - v54;
              j__mkostemp(&v78[(unsigned __int16)(v71 - v54)], oflagsa);
              unsigned __int16 v63 = v55 + 2;
              *(_WORD *)&v78[2 * (unsigned __int16)(v55 + 2)] = v71 - v54;
              *(_WORD *)uint64_t v78 = v55 + 2;
              __int16 v59 = v78;
              uint64_t v58 = v40;
            }
            else
            {
              unint64_t v57 = __add_ovflpage((uint64_t)v5, v40);
              if (!v57) {
                goto LABEL_52;
              }
              uint64_t v58 = v57;
              __int16 v59 = *(char **)(v57 + 32);
              uint64_t v60 = *(unsigned __int16 *)v59;
              unsigned __int16 v61 = *(_WORD *)&v59[2 * v60 + 4] - v53;
              j__mkostemp(&v59[v61], v52);
              *(_WORD *)&v59[2 * (unsigned __int16)(v60 + 1)] = v61;
              unsigned __int16 v62 = v61 - v54;
              j__mkostemp(&v59[(unsigned __int16)(v61 - v54)], oflagsa);
              unsigned __int16 v63 = v60 + 2;
              *(_WORD *)&v59[2 * (unsigned __int16)(v60 + 2)] = v61 - v54;
              *(_WORD *)__int16 v59 = v60 + 2;
              uint64_t v40 = v58;
              uint64_t v78 = v59;
            }
          }
          else if (*((unsigned __int16 *)v77 + 2) >= 4u {
                 && (uint64_t v64 = *(unsigned __int16 *)v77,
          }
                     int v65 = (unsigned __int16 *)&v77[2 * v64],
                     v53 + v54 + 8 <= (unint64_t)v65[1]))
          {
            unsigned __int16 v72 = v65[2] - v53;
            j__mkostemp(&v77[v72], v52);
            *(_WORD *)&v77[2 * (unsigned __int16)(v64 + 1)] = v72;
            unsigned __int16 v62 = v72 - v54;
            j__mkostemp(&v77[(unsigned __int16)(v72 - v54)], oflagsa);
            unsigned __int16 v63 = v64 + 2;
            *(_WORD *)&v77[2 * (unsigned __int16)(v64 + 2)] = v72 - v54;
            *(_WORD *)uint64_t v77 = v64 + 2;
            __int16 v59 = v77;
            uint64_t v58 = v79;
          }
          else
          {
            unint64_t v66 = __add_ovflpage((uint64_t)v5, v79);
            if (!v66) {
              goto LABEL_52;
            }
            uint64_t v58 = v66;
            __int16 v59 = *(char **)(v66 + 32);
            uint64_t v67 = *(unsigned __int16 *)v59;
            regmatch_t v68 = v37;
            uint64_t v69 = v40;
            unsigned __int16 v70 = *(_WORD *)&v59[2 * v67 + 4] - v53;
            j__mkostemp(&v59[v70], v52);
            *(_WORD *)&v59[2 * (unsigned __int16)(v67 + 1)] = v70;
            unsigned __int16 v62 = v70 - v54;
            uint64_t v40 = v69;
            uint64_t v37 = v68;
            j__mkostemp(&v59[v62], oflagsa);
            unsigned __int16 v63 = v67 + 2;
            *(_WORD *)&v59[2 * (unsigned __int16)(v67 + 2)] = v62;
            *(_WORD *)__int16 v59 = v67 + 2;
            uint64_t v79 = v58;
            uint64_t v77 = v59;
          }
          *(_WORD *)&v59[2 * v63 + 2] = v62 - 2 * v63 - 6;
          *(_WORD *)&v59[2 * v63 + 4] = v62;
          *(unsigned char *)(v58 + 40) |= 1u;
          v39 += 2;
          unsigned int v38 = *v37;
          if (v38 <= v39) {
            break;
          }
          uint64_t v49 = v39;
          unsigned int v47 = v37[v39 + 1];
          int v5 = v81;
          int v4 = v80;
          unsigned int v48 = v83;
          if (v47 < 4) {
            goto LABEL_47;
          }
        }
        int v5 = v81;
        int v4 = v80;
      }
LABEL_47:
      uint64_t v6 = v87;
      if (v38 <= v39)
      {
        if (*(void *)&v73[4]) {
          __free_ovflpage(v5, *(uint64_t *)&v73[4]);
        }
        uint64_t result = 0;
        goto LABEL_57;
      }
    }
  }
  uint64_t result = 0;
LABEL_58:
  unint64_t v10 = v75;
LABEL_59:
  *(unsigned char *)(v8 + 40) &= ~8u;
  *(unsigned char *)(v10 + 40) &= ~8u;
  return result;
}

uint64_t putpair(char *a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *(unsigned __int16 *)a1;
  unsigned __int16 v6 = *(_WORD *)&a1[2 * v5 + 4] - a2[1];
  j__mkostemp(&a1[v6], *a2);
  *(_WORD *)&a1[2 * (unsigned __int16)(v5 + 1)] = v6;
  uint64_t v7 = *a3;
  LOWORD(a3) = v6 - a3[1];
  uint64_t result = j__mkostemp(&a1[(unsigned __int16)a3], v7);
  *(_WORD *)&a1[2 * (unsigned __int16)(v5 + 2)] = (_WORD)a3;
  *(_WORD *)a1 = v5 + 2;
  int v9 = (unsigned __int16)(v5 + 2);
  *(_WORD *)&a1[2 * (v9 + 1)] = (_WORD)a3 - 2 * (v5 + 2) - 6;
  *(_WORD *)&a1[2 * (v9 + 2)] = (_WORD)a3;
  return result;
}

uint64_t __addel(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = a2;
  for (uint64_t i = *(char **)(a2 + 32); ; uint64_t i = *(char **)(buf + 32))
  {
    unsigned int v9 = *(unsigned __int16 *)i;
    if (!*(_WORD *)i) {
      goto LABEL_12;
    }
    unsigned int v10 = *((unsigned __int16 *)i + 2);
    if (v10 < 4)
    {
      if (v9 != 2 || v10 != 3)
      {
        uint64_t v11 = *(unsigned __int16 *)i;
        goto LABEL_9;
      }
      unsigned int v9 = 2;
LABEL_12:
      if (*((unsigned __int16 *)i + 2) >= 4u
        && a3[1] + a4[1] + 8 <= (unint64_t)*(unsigned __int16 *)&i[2 * v9 + 2])
      {
        putpair(i, a3, a4);
        goto LABEL_21;
      }
      unint64_t v14 = __add_ovflpage((uint64_t)a1, v6);
      if (v14)
      {
        uint64_t v15 = v14;
        __int16 v16 = *(char **)(v14 + 32);
        if (*((unsigned __int16 *)v16 + 2) >= 4u
          && a3[1] + a4[1] + 8 <= (unint64_t)*(unsigned __int16 *)&v16[2 * *(unsigned __int16 *)v16 + 2])
        {
          putpair(v16, a3, a4);
        }
        else if (__big_insert((uint64_t)a1, v15, a3, a4))
        {
          return 0xFFFFFFFFLL;
        }
        *(unsigned char *)(v15 + 40) |= 1u;
        ++a1[14];
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    }
    if (*(_WORD *)&i[2 * *(unsigned __int16 *)i]) {
      goto LABEL_12;
    }
    uint64_t v11 = *(unsigned __int16 *)i;
    uint64_t v12 = a3[1];
    if (v12 + a4[1] + 4 <= (unint64_t)*(unsigned __int16 *)&i[2 * v11 + 2]) {
      break;
    }
LABEL_9:
    unint64_t buf = __get_buf((uint64_t)a1, *(unsigned __int16 *)&i[2 * v11 - 2], v6, 0);
    uint64_t v6 = buf;
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
  }
  unsigned int v18 = v9 + 1;
  unsigned __int16 v29 = *(_WORD *)&i[2 * v9 + 2];
  unsigned int v19 = v9 + 2;
  unsigned __int16 v20 = *(_WORD *)&i[2 * v9 + 4];
  unsigned int v21 = v9 - 1;
  unsigned __int16 v22 = *(_WORD *)&i[2 * v21];
  __int16 v23 = v20 - v12;
  *(_WORD *)&i[2 * v21] = v20 - v12;
  j__mkostemp(&i[(unsigned __int16)(v20 - v12)], *a3);
  uint64_t v24 = *a4;
  unsigned __int16 v25 = v23 - a4[1];
  *(_WORD *)&i[2 * v11] = v25;
  j__mkostemp(&i[v25], v24);
  *(_WORD *)&i[2 * v18] = v22;
  *(_WORD *)uint64_t i = v19;
  *(_WORD *)&i[2 * v19] = 0;
  unsigned __int16 v26 = (unsigned __int16 *)&i[2 * (unsigned __int16)v19];
  v26[1] = v29 - (*((_WORD *)a3 + 4) + *((_WORD *)a4 + 4)) - 4;
  v26[2] = v25;
LABEL_21:
  *(unsigned char *)(v6 + 40) |= 1u;
  unsigned int v27 = a1[13];
  unsigned int v28 = a1[14] + 1;
  a1[14] = v28;
  if (v28 / (a1[10] + 1) <= v27) {
    return 0;
  }
LABEL_25:

  return __expand_table((uint64_t)a1);
}

unint64_t __add_ovflpage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v4 = *(_WORD **)(a2 + 32);
  if (*(_DWORD *)(a1 + 52) == 0x10000)
  {
    unsigned int v5 = (unsigned __int16)*v4;
    if (v5 >= 8) {
      int v6 = v5 >> 1;
    }
    else {
      int v6 = 4;
    }
    *(_DWORD *)(a1 + 52) = v6;
  }
  *(unsigned char *)(a2 + 40) |= 1u;
  uint64_t v7 = *(int *)(a1 + 32);
  uint64_t v8 = a1 + 4 * v7;
  int v11 = *(_DWORD *)(v8 + 68);
  unsigned int v10 = (int *)(v8 + 68);
  int v9 = v11;
  int v12 = (8 * *(_DWORD *)(a1 + 12) - 1) & (v11 - 1);
  int v13 = (v11 - 1) >> (*(unsigned char *)(a1 + 16) + 3);
  int v14 = *(int *)(a1 + 36) >> (*(unsigned char *)(a1 + 16) + 3);
  if (v14 <= v13)
  {
    uint64_t v54 = v4;
    uint64_t v18 = v14;
    uint64_t v19 = v13;
    int v52 = v13;
    int v20 = v13 + 1;
    int v21 = 8 * v14;
    uint64_t v22 = v14;
    while (1)
    {
      unint64_t result = *(void *)(a1 + 8 * v22 + 336);
      if (!result)
      {
        unint64_t result = (unint64_t)fetch_bitmap((_DWORD *)a1, v22);
        if (!result) {
          return result;
        }
      }
      int v23 = v12;
      if (v22 != v19) {
        int v23 = 8 * *(_DWORD *)(a1 + 12) - 1;
      }
      if (v22 == v18)
      {
        int v24 = (8 * *(_DWORD *)(a1 + 12) - 1) & *(_DWORD *)(a1 + 36);
        int v25 = v24 + 31;
        if (v24 < 0 == __OFSUB__(v22, v18)) {
          int v25 = (8 * *(_DWORD *)(a1 + 12) - 1) & *(_DWORD *)(a1 + 36);
        }
        int v26 = v25 >> 5;
        signed int v27 = v24 & 0xFFFFFFE0;
      }
      else
      {
        signed int v27 = 0;
        int v26 = 0;
      }
      if (v27 <= v23)
      {
        unsigned int v28 = (int *)(result + 4 * v26);
        while (1)
        {
          int v30 = *v28++;
          int v29 = v30;
          if (v30 != -1) {
            break;
          }
          v27 += 32;
          if (v27 > v23) {
            goto LABEL_26;
          }
        }
        unsigned int v31 = 0;
        if (v29)
        {
          int v32 = 1;
          int v4 = v54;
          do
          {
            unsigned int v33 = v31++;
            if (v33 > 0x1E) {
              break;
            }
            int v34 = v29 & (2 * v32);
            v32 *= 2;
          }
          while (v34);
        }
        else
        {
          int v4 = v54;
        }
        int v35 = v31 + v27 + 31;
        if ((int)(v31 + v27) >= 0) {
          int v35 = v31 + v27;
        }
        *(_DWORD *)(result + 4 * (v35 >> 5)) |= 1 << v31;
        int v36 = *(_DWORD *)(a1 + 12);
        int v37 = v31 + v27 + v36 * v21;
        int v38 = v37 + 1;
        if (v37 + 1 >= *(_DWORD *)(a1 + 36)) {
          *(_DWORD *)(a1 + 36) = v37;
        }
        if ((int)v7 < 1)
        {
          LOWORD(v39) = 0;
        }
        else
        {
          uint64_t v39 = 0;
          while (v38 > *(_DWORD *)(a1 + 68 + 4 * v39))
          {
            if (v7 == ++v39)
            {
              LODWORD(v39) = v7;
              break;
            }
          }
          if (v39) {
            int v38 = v31 + v36 * v21 - *(_DWORD *)(a1 + 4 * (int)v39 + 64) + v27 + 1;
          }
        }
        uint64_t v2 = a2;
        if (v38 < 2047)
        {
          LOWORD(v17) = (_WORD)v39 << 11;
          goto LABEL_57;
        }
        goto LABEL_52;
      }
LABEL_26:
      ++v22;
      v21 += 8;
      if (v20 == v22)
      {
        int v9 = *v10;
        uint64_t v2 = a2;
        int v4 = v54;
        int v13 = v52;
        goto LABEL_8;
      }
    }
  }
  unint64_t result = 0;
LABEL_8:
  *(_DWORD *)(a1 + 36) = v9;
  int v16 = *v10;
  int v17 = *v10 + 1;
  int *v10 = v17;
  if (!v7)
  {
    if (v16 <= 2046)
    {
      LODWORD(v7) = 0;
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  v17 -= *(_DWORD *)(a1 + 4 * ((int)v7 - 1) + 68);
  if (v17 > 2047)
  {
    if ((int)v7 >= 31) {
      goto LABEL_52;
    }
LABEL_45:
    LODWORD(v7) = v7 + 1;
    *(_DWORD *)(a1 + 32) = v7;
    int v40 = *v10;
    *(_DWORD *)(a1 + 4 * (int)v7 + 68) = *v10;
    int *v10 = v40 - 1;
    int v17 = 1;
  }
LABEL_50:
  if (v12 == 8 * *(_DWORD *)(a1 + 12) - 1)
  {
    if (v13 >= 31)
    {
LABEL_52:
      write_NOCANCEL();
      unsigned int v41 = __error();
      unint64_t result = 0;
      int *v41 = 27;
      return result;
    }
    if (__ibitmap(a1, v17 + ((_WORD)v7 << 11), 1, v13 + 1)) {
      return 0;
    }
    uint64_t v48 = a1 + 4 * (int)v7;
    int v50 = *(_DWORD *)(v48 + 68);
    uint64_t v49 = (int *)(v48 + 68);
    *uint64_t v49 = v50 + 1;
    if (v17 < 2047)
    {
      LOWORD(v17) = v17 + 1;
    }
    else
    {
      if ((int)v7 >= 31) {
        goto LABEL_52;
      }
      LOWORD(v17) = 0;
      uint64_t v7 = (int)v7 + 1;
      *(_DWORD *)(a1 + 32) = v7;
      int v51 = *v49;
      *(_DWORD *)(a1 + 4 * v7 + 68) = *v49;
      *uint64_t v49 = v51 - 1;
    }
  }
  else
  {
    int v42 = v12 + 32;
    if (v12 >= -1) {
      int v42 = v12 + 1;
    }
    *(_DWORD *)(result + 4 * (v42 >> 5)) |= 1 << (v12 + 1);
  }
  LOWORD(v38) = (_WORD)v7 << 11;
LABEL_57:
  __int16 v43 = v38 + v17;
  if (!((_WORD)v38 + (_WORD)v17)) {
    return 0;
  }
  unint64_t result = __get_buf(a1, (unsigned __int16)(v38 + v17), v2, 1);
  *(void *)(v2 + 16) = result;
  if (result)
  {
    *(unsigned char *)(result + 40) |= 1u;
    uint64_t v44 = (unsigned __int16)*v4;
    uint64_t v45 = v44 + 2;
    __int16 v46 = v4[v44 + 2];
    unsigned int v47 = &v4[v44];
    v47[4] = v46;
    v47[3] = v47[1] - 4;
    v47[1] = v43;
    v4[v45] = 0;
    *int v4 = v45;
  }
  return result;
}

uint64_t __get_page(_DWORD *a1, unsigned __int16 *a2, unsigned int a3, int a4, int a5, int a6)
{
  int v7 = a1[3];
  if (!a5 || a1[71] == -1)
  {
    uint64_t result = 0;
    *a2 = 0;
    a2[1] = v7 - 6;
    a2[2] = v7;
    return result;
  }
  if (a4)
  {
    if (a3) {
      __log2(a3 + 1);
    }
  }
  else
  {
    unsigned int v11 = 1 << (a3 >> 11);
    if (v11 != 1) {
      __log2(v11);
    }
  }
  uint64_t result = pread_NOCANCEL();
  if (result != -1)
  {
    if (result)
    {
      if (v7 != result)
      {
        *__error() = 79;
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      *a2 = 0;
    }
    if (a6)
    {
      if (a1[2] != 1234)
      {
        unint64_t v12 = a1[3];
        if ((int)v12 >= 4)
        {
          unint64_t v13 = v12 >> 2;
          int v14 = (char *)a2 + 1;
          do
          {
            *(_DWORD *)(v14 - 1) = bswap32(*(_DWORD *)(v14 - 1));
            v14 += 4;
            --v13;
          }
          while (v13);
        }
      }
      return 0;
    }
    __int16 v15 = *a2;
    if (*a2)
    {
      if (a1[2] == 1234) {
        return 0;
      }
      *(unsigned char *)a2 = HIBYTE(v15);
      *((unsigned char *)a2 + 1) = v15;
      uint64_t v17 = *a2 + 2;
      uint64_t v18 = (char *)a2 + 3;
      do
      {
        uint64_t result = 0;
        *(_WORD *)(v18 - 1) = bswap32(*(unsigned __int16 *)(v18 - 1)) >> 16;
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    else
    {
      uint64_t result = 0;
      *a2 = 0;
      unsigned __int16 v16 = *((_WORD *)a1 + 6);
      a2[1] = v16 - 6;
      a2[2] = v16;
    }
  }
  return result;
}

uint64_t __put_page(_DWORD *a1, _WORD *a2, unsigned int a3, int a4, int a5)
{
  int v10 = a1[3];
  if (a1[71] == -1)
  {
    if (issetugid()) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = getenv("TMPDIR");
    }
    sigset_t v28 = 0;
    unsigned __int16 v16 = "/tmp";
    if (v12) {
      unsigned __int16 v16 = v12;
    }
    if (snprintf(__str, 0x400uLL, "%s/_hash.XXXXXX", v16) >= 0x400)
    {
      uint64_t v17 = __error();
      int v18 = 63;
LABEL_41:
      *uint64_t v17 = v18;
      return 0xFFFFFFFFLL;
    }
    sigset_t v29 = -1;
    sigprocmask(1, &v29, &v28);
    int v19 = mkstemp(__str);
    a1[71] = v19;
    if (v19 != -1)
    {
      unlink(__str);
      fcntl_NOCANCEL();
    }
    sigprocmask(3, &v28, 0);
    if (a1[71] == -1) {
      return 0xFFFFFFFFLL;
    }
  }
  if (a1[2] == 1234)
  {
    int v11 = 0;
    if (!a4) {
      goto LABEL_30;
    }
  }
  else if (a5)
  {
    int v13 = a1[3];
    int v11 = v13 >> 2;
    if (v13 >= 4)
    {
      if (v11 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v11;
      }
      __int16 v15 = (char *)a2 + 1;
      do
      {
        *(_DWORD *)(v15 - 1) = bswap32(*(_DWORD *)(v15 - 1));
        v15 += 4;
        --v14;
      }
      while (v14);
    }
    if (!a4) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v20 = (unsigned __int16)*a2;
    uint64_t v21 = v20 + 3;
    uint64_t v22 = a2;
    do
    {
      *uint64_t v22 = bswap32((unsigned __int16)*v22) >> 16;
      ++v22;
      --v21;
    }
    while (v21);
    int v11 = v20 + 2;
    if (!a4)
    {
LABEL_30:
      unsigned int v23 = 1 << (a3 >> 11);
      if (v23 != 1) {
        __log2(v23);
      }
      goto LABEL_32;
    }
  }
  if (a3) {
    __log2(a3 + 1);
  }
LABEL_32:
  uint64_t result = pwrite_NOCANCEL();
  if (result == -1) {
    return result;
  }
  if (v10 != result)
  {
    uint64_t v17 = __error();
    int v18 = 79;
    goto LABEL_41;
  }
  if (a1[2] == 1234) {
    return 0;
  }
  if (a5)
  {
    if (v11 >= 1)
    {
      uint64_t v25 = v11;
      int v26 = (char *)a2 + 1;
      do
      {
        *(_DWORD *)(v26 - 1) = bswap32(*(_DWORD *)(v26 - 1));
        v26 += 4;
        --v25;
      }
      while (v25);
    }
    return 0;
  }
  if (v11 < 0) {
    return 0;
  }
  uint64_t v27 = (v11 + 1);
  uint64_t result = 0;
  do
  {
    *a2 = bswap32((unsigned __int16)*a2) >> 16;
    ++a2;
    --v27;
  }
  while (v27);
  return result;
}

uint64_t __ibitmap(uint64_t a1, __int16 a2, int a3, int a4)
{
  uint64_t v8 = malloc_type_malloc(*(int *)(a1 + 12), 0xA0BB9D05uLL);
  if (!v8) {
    return 1;
  }
  int v9 = v8;
  ++*(_DWORD *)(a1 + 592);
  int v10 = (a3 - 1) >> 5;
  MEMORY[0x18C122530](v8, 4 * v10 + 4);
  j__mkostemps((char *)&v9[v10 + 1], 255, *(_DWORD *)(a1 + 12) - (4 * v10 + 4));
  uint64_t result = 0;
  v9[v10] = -1 << a3;
  *v9 |= 1u;
  *(_WORD *)(a1 + 2 * a4 + 196) = a2;
  *(void *)(a1 + 8 * a4 + 336) = v9;
  return result;
}

uint64_t __free_ovflpage(_DWORD *a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 0x800) {
    int v5 = a1[(v4 >> 11) + 16];
  }
  else {
    int v5 = 0;
  }
  int v6 = v5 + (v4 & 0x7FF);
  int v7 = v6 - 1;
  int v8 = a1[9];
  BOOL v9 = __OFSUB__(v6, v8);
  if (v6 <= v8) {
    a1[9] = v7;
  }
  int v10 = a1[3];
  int v11 = v7 >> (a1[4] + 3);
  bitmap = *(unsigned __int16 **)&a1[2 * v11 + 84];
  if (!bitmap) {
    bitmap = fetch_bitmap(a1, v11);
  }
  int v13 = (8 * v10 - 1) & v7;
  int v14 = v13 + 31;
  if (v13 < 0 == v9) {
    int v14 = (8 * v10 - 1) & v7;
  }
  *(_DWORD *)&bitmap[2 * (v14 >> 5)] &= ~(1 << v13);

  return __reclaim_buf((uint64_t)a1, (uint64_t *)a2);
}

unsigned __int16 *fetch_bitmap(_DWORD *a1, int a2)
{
  if (a1[148] <= a2) {
    return 0;
  }
  uint64_t result = (unsigned __int16 *)malloc_type_malloc((int)a1[3], 0x2D21B9A9uLL);
  int v5 = &a1[2 * a2];
  *((void *)v5 + 42) = result;
  if (result)
  {
    uint64_t v6 = a2;
    int v7 = (unsigned __int16 **)(v5 + 84);
    int page = __get_page(a1, result, *((unsigned __int16 *)a1 + v6 + 98), 0, 1, 1);
    uint64_t result = *v7;
    if (page)
    {
      free(result);
      return 0;
    }
  }
  return result;
}

DBM *__cdecl dbm_open(const char *a1, int a2, mode_t a3)
{
  uint64_t v3 = a3;
  int v15 = 0;
  uint64_t v11 = 0x2800001000;
  int v12 = 1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if ((unint64_t)j__strsignal_r((int)a1, *(char **)&a2, a3) < 0x3FD)
  {
    j__strnstr(__big, a1, v6);
    *(_DWORD *)&__big[j__strsignal_r((int)__big, v9, v10)] = 6448174;
    return (DBM *)__hash_open(__big, a2, v3, (uint64_t)&v11);
  }
  else
  {
    int v7 = __error();
    uint64_t result = 0;
    *int v7 = 63;
  }
  return result;
}

void dbm_close(DBM *a1)
{
}

datum dbm_fetch(DBM *a1, datum a2)
{
  int v5 = 0;
  size_t v6 = 0;
  datum v7 = a2;
  int v2 = (*(uint64_t (**)(DBM *, datum *, void **, void))&a1->__opaque[24])(a1, &v7, &v5, 0);
  if (v2) {
    size_t v3 = 0;
  }
  else {
    size_t v3 = v6;
  }
  if (v2) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = v5;
  }
  result.dunint64_t size = v3;
  result.dptunsigned int r = v4;
  return result;
}

datum dbm_firstkey(DBM *a1)
{
  datum v7 = 0;
  size_t v8 = 0;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v1 = *(void *)&a1->__opaque[56];
  int v2 = (*(uint64_t (**)(DBM *, void **, void *, uint64_t))&a1->__opaque[40])(a1, &v7, v6, 3);
  char v3 = *(unsigned char *)(v1 + 656);
  if (v2)
  {
    unsigned int v4 = 0;
    *(unsigned char *)(v1 + 656) = v3 | 1;
  }
  else
  {
    *(unsigned char *)(v1 + 656) = v3 & 0xFE;
    unsigned int v4 = v7;
  }
  size_t v5 = v8;
  result.dunint64_t size = v5;
  result.dptunsigned int r = v4;
  return result;
}

datum dbm_nextkey(DBM *a1)
{
  int v2 = 0;
  size_t v6 = 0;
  size_t v7 = 0;
  uint64_t v3 = *(void *)&a1->__opaque[56];
  if ((*(unsigned char *)(v3 + 656) & 1) == 0)
  {
    v5[0] = 0;
    v5[1] = 0;
    if ((*(unsigned int (**)(DBM *, void **, void *, uint64_t))&a1->__opaque[40])(a1, &v6, v5, 7))
    {
      int v2 = 0;
      *(unsigned char *)(v3 + 656) |= 1u;
    }
    else
    {
      int v2 = v6;
    }
  }
  size_t v4 = v7;
  result.dunint64_t size = v4;
  result.dptunsigned int r = v2;
  return result;
}

int dbm_delete(DBM *a1, datum a2)
{
  datum v3 = a2;
  if ((*(unsigned int (**)(DBM *, datum *, void))&a1->__opaque[16])(a1, &v3, 0)) {
    return -1;
  }
  else {
    return 0;
  }
}

int dbm_store(DBM *a1, datum a2, datum a3, int a4)
{
  datum v6 = a2;
  datum v5 = a3;
  return (*(uint64_t (**)(DBM *, datum *, datum *, void))&a1->__opaque[32])(a1, &v6, &v5, 8 * (a4 == 0));
}

int dbm_error(DBM *a1)
{
  return *(_DWORD *)(*(void *)&a1->__opaque[56] + 320);
}

int dbm_clearerr(DBM *a1)
{
  *(_DWORD *)(*(void *)&a1->__opaque[56] + 320) = 0;
  return 0;
}

int dbm_dirfno(DBM *a1)
{
  return *(_DWORD *)(*(void *)&a1->__opaque[56] + 284);
}

MPOOL *__cdecl mpool_open(void *a1, int a2, pgno_t a3, pgno_t a4)
{
  memset(&v13, 0, sizeof(v13));
  if (fstat(a2, &v13)) {
    return 0;
  }
  if ((v13.st_mode & 0xF000) == 0x8000)
  {
    datum result = (MPOOL *)malloc_type_calloc(1uLL, 0x848uLL, 0x10A004011CD96E6uLL);
    if (result)
    {
      uint64_t v8 = 0;
      result->lqh.tqh_first = 0;
      result->lqh.tqh_last = &result->lqh.tqh_first;
      long long v9 = 0uLL;
      do
      {
        size_t v10 = (double *)&result->hqh[v8];
        uint64_t v11 = &result->hqh[v8 + 1];
        vst2q_f64(v10, *(float64x2x2_t *)&v9);
        v8 += 2;
      }
      while (v8 != 128);
      result->maxcache = a4;
      result->npages = v13.st_size / a3;
      result->pageunint64_t size = a3;
      result->fd = a2;
    }
  }
  else
  {
    int v12 = __error();
    datum result = 0;
    *int v12 = 29;
  }
  return result;
}

void mpool_filter(MPOOL *a1, void (__cdecl *a2)(void *, pgno_t, void *), void (__cdecl *a3)(void *, pgno_t, void *), void *a4)
{
  a1->pgiuint64_t n = a2;
  a1->pguuid_string_t out = a3;
  a1->pgcookie = a4;
}

void *__cdecl mpool_new(MPOOL *a1, pgno_t *a2)
{
  if (a1->npages == -1) {
    mpool_new_cold_1();
  }
  datum result = (void *)mpool_bkt((uint64_t)a1);
  if (result)
  {
    pgno_t npages = a1->npages;
    a1->pgno_t npages = npages + 1;
    *((_DWORD *)result + 10) = npages;
    *a2 = npages;
    *((unsigned char *)result + 44) = 2;
    datum v6 = &a1->lqh + ((*((_DWORD *)result + 10) - 1) & 0x7F);
    tqh_first = v6[1].tqh_first;
    p_tqh_first = (void **)&v6[1].tqh_first;
    *(void *)datum result = tqh_first;
    p_tqe_prev = (void **)&tqh_first->hq.tqe_prev;
    if (tqh_first) {
      size_t v10 = p_tqe_prev;
    }
    else {
      size_t v10 = p_tqh_first + 1;
    }
    double *v10 = result;
    *p_tqh_first = result;
    *((void *)result + 2) = 0;
    *((void *)result + 1) = p_tqh_first;
    tqh_last = a1->lqh.tqh_last;
    *((void *)result + 3) = tqh_last;
    *tqh_last = (_bkt *)result;
    a1->lqh.tqh_last = (_bkt **)((char *)result + 16);
    return (void *)*((void *)result + 4);
  }
  return result;
}

uint64_t mpool_bkt(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2064) >= *(_DWORD *)(a1 + 2068) && (uint64_t v2 = *(void *)a1) != 0)
  {
    while ((*(unsigned char *)(v2 + 44) & 2) != 0)
    {
      uint64_t v2 = *(void *)(v2 + 16);
      if (!v2) {
        goto LABEL_5;
      }
    }
    if ((*(unsigned char *)(v2 + 44) & 1) != 0 && mpool_write((void *)a1, v2) == -1)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = *(void *)v2;
      if (*(void *)v2)
      {
        *(void *)(v5 + 8) = *(void *)(v2 + 8);
        datum v6 = *(void **)(v2 + 8);
      }
      else
      {
        datum v6 = *(void **)(v2 + 8);
        *(void *)(a1 + 16 * ((*(_DWORD *)(v2 + 40) - 1) & 0x7F) + 24) = v6;
      }
      *datum v6 = v5;
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(void **)(v2 + 24);
      if (v7)
      {
        *(void *)(v7 + 24) = v8;
        uint64_t v8 = *(void **)(v2 + 24);
      }
      else
      {
        *(void *)(a1 + 8) = v8;
      }
      void *v8 = v7;
    }
  }
  else
  {
LABEL_5:
    datum v3 = malloc_type_calloc(1uLL, *(void *)(a1 + 2080) + 48, 0x4F5B7049uLL);
    uint64_t v2 = (uint64_t)v3;
    if (v3)
    {
      v3[4] = v3 + 6;
      ++*(_DWORD *)(a1 + 2064);
    }
  }
  return v2;
}

void *__cdecl mpool_get(MPOOL *a1, pgno_t a2, unsigned int a3)
{
  if (a1->npages <= a2)
  {
    size_t v10 = __error();
    datum result = 0;
    int v12 = 22;
LABEL_8:
    int *v10 = v12;
  }
  else
  {
    uint64_t v3 = *(void *)&a2;
    uint64_t v5 = ((_BYTE)a2 - 1) & 0x7F;
    datum v6 = &a1->hqh[v5];
    tqe_next = (_bkt *)v6;
    while (1)
    {
      tqe_next = tqe_next->hq.tqe_next;
      if (!tqe_next) {
        break;
      }
      if (tqe_next->pgno == a2)
      {
        uint64_t v8 = tqe_next->hq.tqe_next;
        tqe_prev = tqe_next->hq.tqe_prev;
        if (tqe_next->hq.tqe_next)
        {
          v8->hq.tqe_prev = tqe_prev;
          tqe_prev = tqe_next->hq.tqe_prev;
        }
        else
        {
          a1->hqh[v5].tqh_last = tqe_prev;
        }
        *tqe_prev = v8;
        tqh_first = v6->tqh_first;
        tqe_next->hq.tqe_next = v6->tqh_first;
        if (tqh_first) {
          p_tqe_prev = &tqh_first->hq.tqe_prev;
        }
        else {
          p_tqe_prev = &a1->hqh[v5].tqh_last;
        }
        *p_tqe_prev = &tqe_next->hq.tqe_next;
        v6->tqh_first = tqe_next;
        tqe_next->hq.tqe_prev = &v6->tqh_first;
        uint64_t v21 = tqe_next->q.tqe_next;
        uint64_t v22 = tqe_next->q.tqe_prev;
        if (v21)
        {
          v21->q.tqe_prev = v22;
          uint64_t v22 = tqe_next->q.tqe_prev;
        }
        else
        {
          a1->lqh.tqh_last = v22;
        }
        *uint64_t v22 = v21;
        tqh_last = a1->lqh.tqh_last;
        tqe_next->q.tqe_next = 0;
        tqe_next->q.tqe_prev = tqh_last;
        *tqh_last = tqe_next;
        a1->lqh.tqh_last = &tqe_next->q.tqe_next;
        tqe_next->flags |= 2u;
        return tqe_next->page;
      }
    }
    datum result = (void *)mpool_bkt((uint64_t)a1);
    if (!result) {
      return result;
    }
    stat v13 = (char *)result;
    int v14 = pread_NOCANCEL();
    if (a1->pagesize == v14)
    {
      *((_DWORD *)v13 + 10) = v3;
      v13[44] = 2;
      int v15 = v6->tqh_first;
      *(void *)stat v13 = v6->tqh_first;
      if (v15) {
        p_tqh_last = &v15->hq.tqe_prev;
      }
      else {
        p_tqh_last = &a1->hqh[v5].tqh_last;
      }
      *p_tqh_last = (_bkt **)v13;
      v6->tqh_first = (_bkt *)v13;
      *((void *)v13 + 2) = 0;
      *((void *)v13 + 1) = v6;
      uint64_t v17 = a1->lqh.tqh_last;
      *((void *)v13 + 3) = v17;
      *uint64_t v17 = (_bkt *)v13;
      a1->lqh.tqh_last = (_bkt **)(v13 + 16);
      pgiuint64_t n = a1->pgin;
      if (pgin) {
        ((void (*)(void *, uint64_t, void))pgin)(a1->pgcookie, v3, *((void *)v13 + 4));
      }
      return (void *)*((void *)v13 + 4);
    }
    else
    {
      if ((v14 & 0x80000000) == 0)
      {
        size_t v10 = __error();
        datum result = 0;
        int v12 = 79;
        goto LABEL_8;
      }
      return 0;
    }
  }
  return result;
}

int mpool_put(MPOOL *a1, void *a2, unsigned int a3)
{
  *((char *)a2 - 4) = *((char *)a2 - 4) & 0xFD | a3 & 1;
  return 0;
}

int mpool_close(MPOOL *a1)
{
  tqh_first = a1->lqh.tqh_first;
  if (tqh_first)
  {
    do
    {
      tqe_next = tqh_first->q.tqe_next;
      tqe_prev = tqh_first->q.tqe_prev;
      if (tqe_next)
      {
        tqe_next->q.tqe_prev = tqe_prev;
        tqe_prev = tqh_first->q.tqe_prev;
      }
      else
      {
        a1->lqh.tqh_last = tqe_prev;
      }
      *tqe_prev = tqe_next;
      free(tqh_first);
      tqh_first = a1->lqh.tqh_first;
    }
    while (a1->lqh.tqh_first);
  }
  free(a1);
  return 0;
}

int mpool_sync(MPOOL *a1)
{
  for (uint64_t i = a1->lqh.tqh_first; i; uint64_t i = i->q.tqe_next)
  {
    if (i->flags)
    {
      int result = mpool_write(a1, (uint64_t)i);
      if (result == -1) {
        return result;
      }
      pgiuint64_t n = a1->pgin;
      if (pgin) {
        ((void (*)(void *, void, void *))pgin)(a1->pgcookie, i->pgno, i->page);
      }
    }
  }
  if (fsync_NOCANCEL()) {
    return -1;
  }
  else {
    return 0;
  }
}

uint64_t mpool_write(void *a1, uint64_t a2)
{
  size_t v4 = (void (*)(void, void, void))a1[263];
  if (v4) {
    v4(a1[264], *(unsigned int *)(a2 + 40), *(void *)(a2 + 32));
  }
  if (pwrite_NOCANCEL() != a1[260]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(unsigned char *)(a2 + 44) &= ~1u;
  return result;
}

uint64_t __rec_close(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = *(void **)(v2 + 32);
  if (v3)
  {
    mpool_put(*(MPOOL **)v2, v3, 0);
    *(void *)(v2 + 32) = 0;
  }
  uint64_t result = __rec_sync((uint64_t)a1, 0);
  if (result != -1)
  {
    int v5 = *(_DWORD *)(v2 + 636);
    if ((v5 & 0x400) != 0)
    {
      if (munmap(*(void **)(v2 + 592), *(void *)(v2 + 608))) {
        unsigned int v6 = -1;
      }
      else {
        unsigned int v6 = 0;
      }
      int v5 = *(_DWORD *)(v2 + 636);
      if ((v5 & 0x800) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v6 = 0;
      if ((v5 & 0x800) != 0)
      {
LABEL_16:
        if (__bt_close(a1) == -1) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v6;
        }
      }
    }
    if ((v5 & 0x40) != 0) {
      int v7 = fclose(*(FILE **)(v2 + 568));
    }
    else {
      int v7 = close_NOCANCEL();
    }
    if (v7) {
      unsigned int v6 = -1;
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t __rec_sync(uint64_t a1, int a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(void **)(v4 + 32);
  if (v5)
  {
    mpool_put(*(MPOOL **)v4, v5, 0);
    *(void *)(v4 + 32) = 0;
  }
  if (a2 == 11)
  {
    return __bt_sync(a1, 0);
  }
  else
  {
    int v7 = *(_DWORD *)(v4 + 636);
    if ((v7 & 0x3800) != 0x1000) {
      return 0;
    }
    if ((v7 & 0x100) != 0
      || (uint64_t v8 = 0xFFFFFFFFLL, (*(unsigned int (**)(uint64_t, uint64_t))(v4 + 560))(v4, 0xFFFFFFFFLL) != -1))
    {
      if (lseek(*(_DWORD *)(v4 + 576), 0, 0)) {
        return 0xFFFFFFFFLL;
      }
      int v12 = 0;
      int v9 = *(_DWORD *)(v4 + 64);
      v13[0] = &v12;
      v13[1] = 4;
      if ((*(unsigned char *)(v4 + 637) & 2) != 0)
      {
        for (int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 3);
              !i;
              int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 7))
        {
          if (write_NOCANCEL() != v15) {
            return 0xFFFFFFFFLL;
          }
        }
      }
      else
      {
        uint64_t v18 = v4 + 632;
        uint64_t v19 = 1;
        for (int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 3);
              !i;
              int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 7))
        {
          uint64_t v16 = v14;
          uint64_t v17 = v15;
          if (writev_NOCANCEL() != v15 + 1) {
            return 0xFFFFFFFFLL;
          }
        }
      }
      *(_DWORD *)(v4 + 64) = v9;
      if (i == -1) {
        return 0xFFFFFFFFLL;
      }
      off_t v11 = lseek(*(_DWORD *)(v4 + 576), 0, 1);
      if (v11 == -1 || ftruncate(*(_DWORD *)(v4 + 576), v11))
      {
        return 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = 0;
        *(_DWORD *)(v4 + 636) &= ~0x1000u;
      }
    }
    return v8;
  }
}

uint64_t __rec_delete(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  unsigned int v6 = *(void **)(v5 + 32);
  if (v6)
  {
    mpool_put(*(MPOOL **)v5, v6, 0);
    *(void *)(v5 + 32) = 0;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      unsigned int v7 = **a2;
      if (v7)
      {
        if (v7 <= *(_DWORD *)(v5 + 616))
        {
          uint64_t result = rec_rdelete((MPOOL **)v5, v7 - 1);
          if (result) {
            return result;
          }
LABEL_14:
          uint64_t result = 0;
          *(_DWORD *)(v5 + 636) |= 0x1004u;
          return result;
        }
        return 1;
      }
    }
LABEL_10:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned char *)(v5 + 68) & 8) == 0) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(v5 + 616))
  {
    uint64_t result = rec_rdelete((MPOOL **)v5, *(_DWORD *)(v5 + 64) - 1);
    if (result) {
      return result;
    }
    --*(_DWORD *)(v5 + 64);
    goto LABEL_14;
  }
  return 1;
}

uint64_t rec_rdelete(MPOOL **a1, unsigned int a2)
{
  uint64_t v3 = __rec_search((uint64_t)a1, a2, 0);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(unsigned __int16 **)v3;
  BOOL v5 = __rec_dleaf((uint64_t)a1, *(unsigned __int16 **)v3, *(unsigned __int16 *)(v3 + 8)) == 0;
  unsigned int v6 = *a1;
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  mpool_put(v6, v4, v5);
  return v7;
}

uint64_t __rec_dleaf(uint64_t a1, unsigned __int16 *a2, int a3)
{
  __int16 v3 = a3;
  unsigned int v6 = a2 + 10;
  uint64_t v7 = &a2[a3 + 10];
  uint64_t v8 = (char *)a2 + *v7;
  if ((v8[4] & 1) == 0 || (uint64_t result = __ovfl_delete(a1, (pgno_t *)(v8 + 5)), result != -1))
  {
    uint64_t v10 = (*(_DWORD *)v8 & 0xFFFFFFFC) + 8;
    j__mkostemp((char *)a2 + a2[9] + v10, a2 + a2[9]);
    a2[9] += v10;
    unsigned int v11 = *v7;
    while (v3)
    {
      unsigned int v12 = (unsigned __int16)*v6;
      if (v12 < v11) {
        *unsigned int v6 = v12 + v10;
      }
      --v3;
      ++v6;
    }
    int v13 = a2[8];
    unsigned int v14 = ((a2 + ((v13 - 20) & 0x1FFFE) - v6 + 20) >> 1) - 1;
    if ((unsigned __int16)((a2 + ((v13 - 20) & 0x1FFFE) - v6 + 20) >> 1) != 1)
    {
      uint64_t v15 = v6 + 1;
      do
      {
        unsigned int v16 = *v15;
        if (v16 >= v11) {
          __int16 v17 = 0;
        }
        else {
          __int16 v17 = v10;
        }
        *(v15 - 1) = v17 + v16;
        --v14;
        ++v15;
      }
      while ((_WORD)v14);
      LOWORD(v13) = a2[8];
    }
    uint64_t result = 0;
    a2[8] = v13 - 2;
    --*(_DWORD *)(a1 + 616);
  }
  return result;
}

uint64_t __rec_get(uint64_t a1, unsigned int **a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0;
  }
  if (a4 || (unsigned int v11 = **a2) == 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  if (v11 > *(_DWORD *)(v7 + 616))
  {
    if ((*(unsigned char *)(v7 + 637) & 9) != 0) {
      return 1;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(v7 + 560))(v7, **a2);
    if (v9) {
      return v9;
    }
  }
  uint64_t v12 = __rec_search(v7, v11 - 1, 2);
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  int v13 = (void **)v12;
  uint64_t v9 = __rec_ret(v7, v12, 0, 0, a3);
  if ((*(unsigned char *)(v7 + 637) & 0x40) != 0) {
    mpool_put(*(MPOOL **)v7, *v13, 0);
  }
  else {
    *(void *)(v7 + 32) = *v13;
  }
  return v9;
}

uint64_t __rec_fpipe(uint64_t a1, unsigned int a2)
{
  size_t v4 = *(void *)(a1 + 624);
  uint64_t v6 = a1 + 496;
  BOOL v5 = *(void **)(a1 + 496);
  if (*(void *)(v6 + 8) < v4)
  {
    BOOL v5 = reallocf(v5, v4);
    *(void *)(a1 + 496) = v5;
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    size_t v4 = *(void *)(a1 + 624);
    *(void *)(a1 + 504) = v4;
  }
  v13[0] = (uint64_t)v5;
  v13[1] = v4;
  unsigned int v7 = *(_DWORD *)(a1 + 616);
  if (v7 <= a2) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 616);
  }
  while (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 624);
    uint64_t v10 = *(char **)(a1 + 496);
    int v11 = getc(*(FILE **)(a1 + 568));
    if (v11 == -1)
    {
      if (v9) {
LABEL_13:
      }
        j__mkostemps(v10, *(unsigned __int8 *)(a1 + 632), v9);
      LOBYTE(v9) = 1;
    }
    else
    {
      while (--v9)
      {
        *v10++ = v11;
        int v11 = getc(*(FILE **)(a1 + 568));
        if (v11 == -1) {
          goto LABEL_13;
        }
      }
      char *v10 = v11;
    }
    if (__rec_iput(a1, v7, v13, 0)) {
      return 0xFFFFFFFFLL;
    }
    ++v7;
    if (v9)
    {
      if (v7 < a2)
      {
        *(_DWORD *)(a1 + 636) |= 0x100u;
        return 1;
      }
      return 0;
    }
  }
  return 0;
}

uint64_t __rec_vpipe(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 616);
  if (v2 >= a2) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a1 + 632);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  while (1)
  {
    unsigned int v7 = *(char **)(a1 + 496);
    uint64_t v6 = *(void *)(a1 + 504);
    int v8 = getc(*(FILE **)(a1 + 568));
    BOOL v9 = v8 == -1;
    if (v8 != -1 && v8 != v5)
    {
      char v11 = v8;
      do
      {
        if (!v6)
        {
          uint64_t v12 = *(void **)(a1 + 496);
          size_t v13 = *(void *)(a1 + 504) + 256;
          *(void *)(a1 + 504) = v13;
          unsigned int v14 = (char *)reallocf(v12, v13);
          *(void *)(a1 + 496) = v14;
          if (!v14) {
            return 0xFFFFFFFFLL;
          }
          unsigned int v7 = &v14[v7 - (unsigned char *)v12];
          uint64_t v6 = 256;
        }
        *v7++ = v11;
        --v6;
        int v15 = getc(*(FILE **)(a1 + 568));
        char v11 = v15;
        BOOL v9 = v15 == -1;
      }
      while (v15 != -1 && v15 != v5);
    }
    uint64_t v19 = *(char **)(a1 + 496);
    uint64_t v20 = (char *)(v7 - v19);
    if (v9 && v7 == v19) {
      break;
    }
    if (__rec_iput(a1, v2, (uint64_t *)&v19, 0)) {
      return 0xFFFFFFFFLL;
    }
    if (v9) {
      break;
    }
    if (++v2 == a2) {
      return 0;
    }
  }
  *(_DWORD *)(a1 + 636) |= 0x100u;
  return 1;
}

uint64_t __rec_fmap(uint64_t a1, unsigned int a2)
{
  size_t v4 = *(void *)(a1 + 624);
  uint64_t v6 = a1 + 496;
  int v5 = *(void **)(a1 + 496);
  if (*(void *)(v6 + 8) < v4)
  {
    int v5 = reallocf(v5, v4);
    *(void *)(a1 + 496) = v5;
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    size_t v4 = *(void *)(a1 + 624);
    *(void *)(a1 + 504) = v4;
  }
  v16[0] = (uint64_t)v5;
  v16[1] = v4;
  unint64_t v7 = *(void *)(a1 + 584);
  unsigned int v8 = *(_DWORD *)(a1 + 616);
  if (v8 >= a2)
  {
LABEL_18:
    uint64_t result = 0;
    *(void *)(a1 + 584) = v7;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    while (v7 < v9)
    {
      uint64_t v10 = *(void *)(a1 + 624);
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 496);
        do
        {
          *(unsigned char *)(v12 + v11) = *(unsigned char *)(v7 + v11);
          uint64_t v13 = v11 + 1;
          BOOL v14 = v7 + v11 + 1 >= v9 || v10 - 1 == v11;
          ++v11;
        }
        while (!v14);
        v7 += v13;
        if (v10 != v13) {
          j__mkostemps((char *)(v12 + v13), *(unsigned __int8 *)(a1 + 632), v10 - v13);
        }
      }
      if (__rec_iput(a1, v8, v16, 0)) {
        return 0xFFFFFFFFLL;
      }
      if (++v8 == a2) {
        goto LABEL_18;
      }
    }
    *(_DWORD *)(a1 + 636) |= 0x100u;
    return 1;
  }
  return result;
}

uint64_t __rec_vmap(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = 0;
  unint64_t v3 = *(void *)(a1 + 584);
  unsigned int v4 = *(_DWORD *)(a1 + 616);
  if (v4 >= a2)
  {
LABEL_10:
    uint64_t result = 0;
    *(void *)(a1 + 584) = v3;
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 **)(a1 + 600);
    int v7 = *(unsigned __int8 *)(a1 + 632);
    while (1)
    {
      if (v3 >= (unint64_t)v6)
      {
        *(_DWORD *)(a1 + 636) |= 0x100u;
        return 1;
      }
      unint64_t v11 = v3;
      unsigned int v8 = &v6[-v3];
      unint64_t v9 = (unsigned __int8 *)v3;
      while (*v9 != v7)
      {
        ++v9;
        if (!--v8)
        {
          unint64_t v9 = v6;
          break;
        }
      }
      uint64_t v12 = &v9[-v3];
      if (__rec_iput(a1, v4, (uint64_t *)&v11, 0)) {
        return 0xFFFFFFFFLL;
      }
      unint64_t v3 = (unint64_t)(v9 + 1);
      if (++v4 == a2) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

MPOOL *__rec_open(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a1)
  {
    int v9 = open_NOCANCEL();
    if (v9 < 0) {
      return 0;
    }
  }
  else
  {
    int v9 = 0;
  }
  long long v29 = 0u;
  memset(v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  if (a4)
  {
    if (*(void *)a4 >= 8uLL)
    {
      uint64_t v10 = 0;
      goto LABEL_19;
    }
    *(void *)&v28[0] = 0;
    int v11 = *(_DWORD *)(a4 + 12);
    DWORD2(v28[0]) = *(_DWORD *)(a4 + 8);
    *(void *)((char *)v28 + 12) = 0;
    DWORD1(v28[1]) = v11;
    *((void *)&v28[1] + 1) = 0;
    *(void *)&long long v29 = 0;
    DWORD2(v29) = *(_DWORD *)(a4 + 16);
    uint64_t v12 = __bt_open(*(void *)(a4 + 40), 2, 384, (uint64_t *)v28, a5);
    if (v12)
    {
      uint64_t v10 = v12;
      tqh_last = v12->hqh[2].tqh_last;
      if (*(unsigned char *)a4)
      {
        *((_DWORD *)tqh_last + 159) |= 0x200u;
        BOOL v14 = *(_bkt **)(a4 + 24);
        tqh_last[78] = v14;
        if (!v14) {
          goto LABEL_19;
        }
      }
      char v15 = *(unsigned char *)(a4 + 32);
LABEL_13:
      *((unsigned char *)tqh_last + 632) = v15;
      int v17 = *((_DWORD *)tqh_last + 159);
      *((_DWORD *)tqh_last + 159) = v17 | 0x80;
      if (a1)
      {
        *((_DWORD *)tqh_last + 144) = v9;
        *__error() = 0;
        if (lseek(v9, 0, 1) == -1 && *__error() == 29)
        {
          if ((a2 & 3) == 0)
          {
            *((_DWORD *)tqh_last + 159) |= 0x2000u;
            goto LABEL_27;
          }
LABEL_19:
          *__error() = 22;
          int v18 = *__error();
          if (!v10) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
        if ((a2 & 3) != 2)
        {
          if ((a2 & 3) != 0) {
            goto LABEL_19;
          }
          *((_DWORD *)tqh_last + 159) |= 0x2000u;
        }
        if (fstat(v9, &v27)) {
          goto LABEL_41;
        }
        if (v27.st_size)
        {
LABEL_27:
          uint64_t v19 = fdopen_DARWIN_EXTSN(v9, "r");
          tqh_last[71] = (_bkt *)v19;
          if (v19)
          {
            int v20 = *((_DWORD *)tqh_last + 159);
            *((_DWORD *)tqh_last + 159) = v20 | 0x40;
            BOOL v21 = (v20 & 0x200) == 0;
            uint64_t v22 = __rec_fpipe;
            if (v21) {
              uint64_t v22 = __rec_vpipe;
            }
            tqh_last[70] = (_bkt *)v22;
LABEL_33:
            v10->lqh.tqh_last = (_bkt **)__rec_close;
            v10->hqh[0].tqh_first = (_bkt *)__rec_delete;
            v10->hqh[3].tqh_first = (_bkt *)__rec_fd;
            v10->hqh[0].tqh_last = (_bkt **)__rec_get;
            v10->hqh[1].tqh_first = (_bkt *)__rec_put;
            v10->hqh[1].tqh_last = (_bkt **)__rec_seq;
            v10->hqh[2].tqh_first = (_bkt *)__rec_sync;
            int v24 = mpool_get((MPOOL *)*tqh_last, 1u, 0);
            if (v24)
            {
              if ((v24[3] & 0x1F) == 2)
              {
                v24[3] = v24[3] & 0xFFFFFFE0 | 0x10;
                unsigned int v25 = 1;
              }
              else
              {
                unsigned int v25 = 0;
              }
              mpool_put((MPOOL *)*tqh_last, v24, v25);
              if (!a4
                || (*(unsigned char *)a4 & 4) == 0
                || (*((unsigned char *)tqh_last + 637) & 9) != 0
                || ((unsigned int (*)(_bkt **, uint64_t))tqh_last[70])(tqh_last, 0xFFFFFFFFLL) != -1)
              {
                return v10;
              }
            }
          }
LABEL_41:
          int v18 = *__error();
LABEL_42:
          __bt_close(v10);
          goto LABEL_43;
        }
        int v23 = *((_DWORD *)tqh_last + 159) | 0x100;
      }
      else
      {
        int v23 = v17 | 0x980;
      }
      *((_DWORD *)tqh_last + 159) = v23;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v16 = __bt_open(0, 2, 384, 0, a5);
    if (v16)
    {
      uint64_t v10 = v16;
      tqh_last = v16->hqh[2].tqh_last;
      char v15 = 10;
      goto LABEL_13;
    }
  }
  int v18 = *__error();
LABEL_43:
  if (a1) {
    close_NOCANCEL();
  }
  uint64_t v10 = 0;
  *__error() = v18;
  return v10;
}

uint64_t __rec_fd(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  unsigned int v2 = *(void **)(v1 + 32);
  if (v2)
  {
    mpool_put(*(MPOOL **)v1, v2, 0);
    *(void *)(v1 + 32) = 0;
  }
  if ((*(unsigned char *)(v1 + 637) & 8) == 0) {
    return *(unsigned int *)(v1 + 576);
  }
  *__error() = 2;
  return 0xFFFFFFFFLL;
}

uint64_t __rec_put(uint64_t a1, unsigned int **a2, uint64_t *a3, int a4)
{
  uint64_t v20 = 0;
  size_t v21 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0;
  }
  size_t v9 = a3[1];
  if ((*(unsigned char *)(v7 + 637) & 2) == 0 || (size_t v10 = *(void *)(v7 + 624), v9 == v10))
  {
    uint64_t v20 = *a3;
    goto LABEL_6;
  }
  if (v9 > v10)
  {
LABEL_34:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = *(void **)(v7 + 496);
  if (*(void *)(v7 + 504) < v10)
  {
    uint64_t v12 = reallocf(v12, v10);
    *(void *)(v7 + 496) = v12;
    if (v12)
    {
      *(void *)(v7 + 504) = *(void *)(v7 + 624);
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_13:
  j__mkostemp((char *)v12, *a3);
  j__mkostemps((char *)(*(void *)(v7 + 496) + a3[1]), *(unsigned __int8 *)(v7 + 632), *(void *)(v7 + 624) - a3[1]);
  uint64_t v20 = *(void *)(v7 + 496);
  size_t v9 = *(void *)(v7 + 624);
LABEL_6:
  size_t v21 = v9;
  switch(a4)
  {
    case 0:
    case 5:
      uint64_t v11 = **a2;
      if (!v11) {
        goto LABEL_34;
      }
      goto LABEL_27;
    case 1:
      if ((*(unsigned char *)(v7 + 68) & 8) == 0) {
        goto LABEL_34;
      }
      uint64_t v11 = *(unsigned int *)(v7 + 64);
      a4 = 1;
      goto LABEL_27;
    case 4:
      unsigned int v13 = **a2;
      if (v13) {
        a4 = 4;
      }
      else {
        a4 = 5;
      }
      if (v13 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v13;
      }
      goto LABEL_27;
    case 8:
      uint64_t v11 = **a2;
      if (!v11) {
        goto LABEL_34;
      }
      if (v11 <= *(_DWORD *)(v7 + 616))
      {
        uint64_t result = 1;
      }
      else
      {
        a4 = 8;
LABEL_27:
        unsigned int v14 = *(_DWORD *)(v7 + 616);
        if (v11 > v14)
        {
          if ((*(unsigned char *)(v7 + 637) & 9) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 560))(v7, v11);
            if (result == -1) {
              return result;
            }
            unsigned int v14 = *(_DWORD *)(v7 + 616);
          }
          if (v11 > v14 + 1)
          {
            if ((*(unsigned char *)(v7 + 637) & 2) != 0)
            {
              unsigned int v16 = malloc_type_malloc(*(void *)(v7 + 624), 0xEF533A9uLL);
              int v18 = v16;
              if (!v16) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v19 = *(void *)(v7 + 624);
              j__mkostemps((char *)v16, *(unsigned __int8 *)(v7 + 632), v19);
            }
            else
            {
              int v18 = 0;
              uint64_t v19 = 0;
            }
            while (1)
            {
              unsigned int v17 = *(_DWORD *)(v7 + 616);
              if (v11 <= v17 + 1) {
                break;
              }
              if (__rec_iput(v7, v17, (uint64_t *)&v18, 0)) {
                return 0xFFFFFFFFLL;
              }
            }
            if ((*(unsigned char *)(v7 + 637) & 2) != 0) {
              free(v18);
            }
          }
        }
        uint64_t result = __rec_iput(v7, (int)v11 - 1, &v20, a4);
        if (!result)
        {
          if (a4 == 10)
          {
            *(_DWORD *)(v7 + 64) = v11;
          }
          else if (a4 == 4)
          {
            LODWORD(v11) = v11 + 1;
          }
          *(_DWORD *)(v7 + 636) |= 0x1000u;
          uint64_t result = __rec_ret(v7, 0, v11, a2, 0);
        }
      }
      break;
    case 10:
      uint64_t v11 = **a2;
      if (!v11) {
        goto LABEL_34;
      }
      a4 = 10;
      goto LABEL_27;
    default:
      goto LABEL_34;
  }
  return result;
}

uint64_t __rec_iput(uint64_t a1, unsigned int a2, uint64_t *a3, int a4)
{
  int v5 = a3;
  int v23 = 0;
  uint64_t v24 = 0;
  pgno_t v22 = 0;
  if (a3[1] <= (unint64_t)*(unsigned __int16 *)(a1 + 524))
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = __ovfl_put(a1, a3, &v22);
    if (result == -1) {
      return result;
    }
    int v23 = v25;
    uint64_t v24 = 8;
    size_t v9 = (_DWORD *)v5[1];
    v25[0] = v22;
    v25[1] = v9;
    char v10 = 1;
    int v5 = (uint64_t *)&v23;
  }
  if (*(_DWORD *)(a1 + 616) < a2 || (a4 & 0xFFFFFFFE) == 4) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
  uint64_t v13 = __rec_search(a1, a2, v12);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = *(unsigned __int16 **)v13;
  int v15 = *(unsigned __int16 *)(v13 + 8);
  if (a4 == 5) {
    goto LABEL_17;
  }
  if (a4 == 4)
  {
    LOWORD(v15) = v15 + 1;
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 616) > a2 && __rec_dleaf(a1, v14, v15) == -1)
  {
    mpool_put(*(MPOOL **)a1, v14, 0);
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  int v16 = *((_DWORD *)v5 + 2);
  uint64_t v17 = (v16 & 0xFFFFFFFC) + 8;
  int v18 = v14[9];
  int v19 = v14[8];
  if ((v18 - v19) >= (v17 | 2uLL))
  {
    if ((unsigned __int16)((v19 + 131052) >> 1) > (unsigned __int16)v15)
    {
      j__mkostemp((char *)&v14[(unsigned __int16)v15 + 11], v14 + 2 * (unsigned __int16)v15 + 20);
      LOWORD(v19) = v14[8];
      LOWORD(v18) = v14[9];
      int v16 = *((_DWORD *)v5 + 2);
    }
    int v14[8] = v19 + 2;
    unsigned __int16 v20 = v18 - v17;
    v14[9] = v20;
    v14[(unsigned __int16)v15 + 10] = v20;
    size_t v21 = (char *)v14 + v20;
    *(_DWORD *)size_t v21 = v16;
    v21[4] = v10;
    j__mkostemp(v21 + 5, *v5);
    ++*(_DWORD *)(a1 + 616);
    *(_DWORD *)(a1 + 636) |= 4u;
    mpool_put(*(MPOOL **)a1, v14, 1u);
    return 0;
  }
  else
  {
    uint64_t result = __bt_split(a1, (char *)v14, 0, v5, v10, (v16 & 0xFFFCu) + 8, v15);
    if (!result) {
      ++*(_DWORD *)(a1 + 616);
    }
  }
  return result;
}

uint64_t __rec_search(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = a1 + 72;
  *(void *)(a1 + 472) = a1 + 72;
  uint64_t v7 = mpool_get(*(MPOOL **)a1, 1u, 0);
  if (v7)
  {
    unsigned int v8 = v7;
    uint64_t v9 = 0;
    pgno_t v10 = 1;
    while (1)
    {
      if ((v8[12] & 0x10) != 0)
      {
        *(void *)(a1 + 16) = v8;
        uint64_t v26 = a1 + 16;
        *(_WORD *)(v26 + 8) = a2 - v9;
        return v26;
      }
      LOWORD(v11) = 0;
      unsigned int v12 = *((unsigned __int16 *)v8 + 8) + 131052;
      uint64_t v13 = v9;
      while (1)
      {
        uint64_t v9 = v13;
        unsigned int v14 = &v8[*(unsigned __int16 *)&v8[2 * (unsigned __int16)v11 + 20]];
        LOWORD(v11) = v11 + 1;
        if ((unsigned __int16)v11 == (unsigned __int16)(v12 >> 1)) {
          break;
        }
        uint64_t v13 = (*v14 + v13);
        if (v13 > a2) {
          goto LABEL_9;
        }
      }
      unsigned int v11 = v12 >> 1;
LABEL_9:
      uint64_t v15 = *(void *)(a1 + 472);
      *(_DWORD *)uint64_t v15 = v10;
      uint64_t v16 = (unsigned __int16)v11 - 1;
      *(_WORD *)(v15 + 4) = v16;
      *(void *)(a1 + 472) = v15 + 8;
      pgno_t v10 = v14[1];
      if (!a3) {
        break;
      }
      if (a3 == 2)
      {
        unsigned int v19 = 0;
        goto LABEL_16;
      }
      if (a3 == 1)
      {
        int v17 = 1;
        goto LABEL_14;
      }
LABEL_17:
      unsigned int v8 = mpool_get(*(MPOOL **)a1, v10, 0);
      if (!v8) {
        goto LABEL_18;
      }
    }
    int v17 = -1;
LABEL_14:
    uint64_t v18 = *(unsigned __int16 *)&v8[2 * v16 + 20];
    *(_DWORD *)&v8[v18] += v17;
    unsigned int v19 = 1;
LABEL_16:
    mpool_put(*(MPOOL **)a1, v8, v19);
    goto LABEL_17;
  }
LABEL_18:
  int v20 = *__error();
  if (a3 != 2)
  {
    uint64_t v21 = *(void *)(a1 + 472);
    if (v21 != v6)
    {
      if (a3 == 1) {
        int v22 = -1;
      }
      else {
        int v22 = 1;
      }
      do
      {
        pgno_t v23 = *(_DWORD *)(v21 - 8);
        *(void *)(a1 + 472) = v21 - 8;
        uint64_t v24 = (unsigned __int16 *)mpool_get(*(MPOOL **)a1, v23, 0);
        if (!v24) {
          break;
        }
        uint64_t v25 = v24[*(unsigned __int16 *)(v21 - 4) + 10];
        *(_DWORD *)((char *)v24 + v25) += v22;
        mpool_put(*(MPOOL **)a1, v24, 1u);
        uint64_t v21 = *(void *)(a1 + 472);
      }
      while (v21 != v6);
    }
  }
  uint64_t v26 = 0;
  *__error() = v20;
  return v26;
}

uint64_t __rec_seq(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0;
  }
  int v9 = a4 - 1;
  uint64_t v10 = 1;
  switch(v9)
  {
    case 0:
      uint64_t v10 = *(unsigned int *)*a2;
      if (v10) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 2:
      goto LABEL_13;
    case 5:
      goto LABEL_9;
    case 6:
      if ((*(unsigned char *)(v7 + 68) & 8) != 0) {
        uint64_t v10 = (*(_DWORD *)(v7 + 64) + 1);
      }
      goto LABEL_13;
    case 8:
      if ((*(unsigned char *)(v7 + 68) & 8) != 0)
      {
        int v12 = *(_DWORD *)(v7 + 64);
        uint64_t v10 = (v12 - 1);
        if (v12 == 1) {
          return 1;
        }
      }
      else
      {
LABEL_9:
        if ((*(unsigned char *)(v7 + 637) & 9) == 0)
        {
          uint64_t v11 = 0xFFFFFFFFLL;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 560))(v7, 0xFFFFFFFFLL) == -1) {
            return v11;
          }
        }
        uint64_t v10 = *(unsigned int *)(v7 + 616);
      }
LABEL_13:
      unsigned int v13 = *(_DWORD *)(v7 + 616);
      if (v13) {
        BOOL v14 = v10 > v13;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
        if ((*(unsigned char *)(v7 + 637) & 9) == 0)
        {
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 560))(v7, v10);
          if (v11) {
            return v11;
          }
          unsigned int v13 = *(_DWORD *)(v7 + 616);
        }
        if (!v13 || v10 > v13) {
          return 1;
        }
      }
      uint64_t v16 = __rec_search(v7, (int)v10 - 1, 2);
      if (!v16) {
        return 0xFFFFFFFFLL;
      }
      int v17 = (void **)v16;
      *(unsigned char *)(v7 + 68) |= 8u;
      *(_DWORD *)(v7 + 64) = v10;
      uint64_t v11 = __rec_ret(v7, v16, v10, a2, a3);
      if ((*(unsigned char *)(v7 + 637) & 0x40) != 0) {
        mpool_put(*(MPOOL **)v7, *v17, 0);
      }
      else {
        *(void *)(v7 + 32) = *v17;
      }
      return v11;
    default:
LABEL_5:
      *__error() = 22;
      return 0xFFFFFFFFLL;
  }
}

uint64_t __rec_ret(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  if (a4)
  {
    uint64_t v10 = *(_DWORD **)(a1 + 480);
    if (*(void *)(a1 + 488) <= 3uLL)
    {
      uint64_t v10 = malloc_type_realloc(v10, 4uLL, 0x100004052888210uLL);
      if (!v10) {
        return 0xFFFFFFFFLL;
      }
      *(void *)(a1 + 480) = v10;
      *(void *)(a1 + 488) = 4;
    }
    _DWORD *v10 = a3;
    *a4 = *(void *)(a1 + 480);
    a4[1] = 4;
  }
  if (!a5) {
    return 0;
  }
  uint64_t v11 = (unsigned int *)(*(void *)a2 + *(unsigned __int16 *)(*(void *)a2 + 2 * *(unsigned __int16 *)(a2 + 8) + 20));
  if (v11[1])
  {
    if (!__ovfl_get(a1, (unsigned int *)((char *)v11 + 5), a5 + 1, (void **)(a1 + 496), (size_t *)(a1 + 504)))
    {
      unsigned int v13 = *(char **)(a1 + 496);
      goto LABEL_18;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = *v11;
  if ((*(unsigned char *)(a1 + 637) & 0x40) != 0)
  {
    size_t v15 = (v12 + 1);
    uint64_t v16 = *(char **)(a1 + 496);
    if (*(void *)(a1 + 504) >= v15)
    {
LABEL_16:
      j__mkostemp(v16, v11 + 5);
      a5[1] = *v11;
      unsigned int v13 = *(char **)(a1 + 496);
      goto LABEL_18;
    }
    uint64_t v16 = (char *)malloc_type_realloc(v16, v15, 0xAE52E42DuLL);
    if (v16)
    {
      int v17 = *v11;
      *(void *)(a1 + 496) = v16;
      *(void *)(a1 + 504) = (v17 + 1);
      goto LABEL_16;
    }
    return 0xFFFFFFFFLL;
  }
  a5[1] = v12;
  unsigned int v13 = (char *)v11 + 5;
LABEL_18:
  uint64_t result = 0;
  *a5 = v13;
  return result;
}

char *__hdtoa(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, char **a5, double a6)
{
  double v10 = a6;
  double v11 = a6;
  *a4 = *(void *)&a6 >> 63;
  int v12 = __fpclassifyd(a6);
  int v13 = -1022;
  switch(v12)
  {
    case 1:
      *a3 = 0x7FFFFFFF;
      BOOL v14 = "NaN";
      size_t v15 = a5;
      unsigned int v16 = 3;
      goto LABEL_6;
    case 2:
      *a3 = 0x7FFFFFFF;
      BOOL v14 = "Infinity";
      size_t v15 = a5;
      unsigned int v16 = 8;
      goto LABEL_6;
    case 3:
      goto LABEL_5;
    case 4:
      goto LABEL_10;
    case 5:
      if (v10 != 0.0)
      {
        double v10 = v10 * 5.36312317e154;
        double v11 = v10;
        int v13 = -1536;
LABEL_10:
        *a3 = ((*(void *)&v11 >> 52) & 0x7FF) + v13;
        if (a2 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = a2;
        }
        if (v18 <= 14) {
          uint64_t v19 = 14;
        }
        else {
          uint64_t v19 = v18;
        }
        int v20 = (char *)__rv_alloc_D2A(v19);
        uint64_t v21 = v20;
        if (v19 >= 0xF) {
          MEMORY[0x18C122530](v20 + 14, v19 - 14);
        }
        unint64_t v22 = 13;
        do
        {
          v21[v22] = LOBYTE(v10) & 0xF;
          unint64_t v23 = *(void *)&v10 & 0xFFFFFFFF00000000 | (LODWORD(v10) >> 4);
          double v10 = *(double *)&v23;
          unint64_t v24 = v22 - 1;
        }
        while (v22-- > 6);
        uint64_t v26 = &v21[v24];
        do
        {
          *v26-- = BYTE4(v23) & 0xF;
          uint64_t v27 = (v23 >> 4) & 0xFFFF00000000;
          unint64_t v23 = v27 | v23 & 0xFFF00000FFFFFFFFLL;
        }
        while (v26 > v21);
        *uint64_t v26 = BYTE4(v27) | 1;
        if (v18 < 0)
        {
          uint64_t v28 = 13;
          while (!v21[v28--])
            ;
          int v18 = v28 + 2;
        }
        if (v18 >= 14)
        {
          uint64_t v30 = v18;
        }
        else
        {
          uint64_t v30 = v18;
          unsigned int v31 = &v21[v18];
          int v32 = *v31;
          if (*v31)
          {
            unsigned int v33 = ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0)) + 0x400000) >> 22) & 3;
            if (v33 == 3)
            {
              if ((v23 & 0x8000000000000000) != 0)
              {
                int v40 = *(v31 - 1);
                int v34 = v31 - 1;
                LOBYTE(v35) = v40;
                if (v40 == 15)
                {
                  uint64_t v37 = v18 - 1;
                  do
                  {
                    if (!v37) {
                      goto LABEL_60;
                    }
                    v21[v37] = 0;
                    int v35 = v21[--v37];
                  }
                  while (v35 == 15);
LABEL_55:
                  int v34 = &v21[v37];
                }
                goto LABEL_56;
              }
            }
            else
            {
              if (v33 != 2)
              {
                if (v33 != 1 || (char)v32 <= 8 && (v32 != 8 || (v21[v18 + 1] & 1) == 0)) {
                  goto LABEL_38;
                }
                int v36 = *(v31 - 1);
                int v34 = v31 - 1;
                LOBYTE(v35) = v36;
                if (v36 == 15)
                {
                  uint64_t v37 = v18 - 1;
                  while (v37)
                  {
                    v21[v37] = 0;
                    int v35 = v21[--v37];
                    if (v35 != 15) {
                      goto LABEL_55;
                    }
                  }
LABEL_60:
                  char v43 = 1;
                  int v34 = v21;
                  int v42 = 1;
LABEL_61:
                  *int v34 = v43;
                  if (v42) {
                    *a3 += 4;
                  }
                  goto LABEL_38;
                }
                goto LABEL_56;
              }
              if ((v23 & 0x8000000000000000) == 0)
              {
                int v41 = *(v31 - 1);
                int v34 = v31 - 1;
                LOBYTE(v35) = v41;
                if (v41 == 15)
                {
                  uint64_t v37 = v18 - 1;
                  while (v37)
                  {
                    v21[v37] = 0;
                    int v35 = v21[--v37];
                    if (v35 != 15) {
                      goto LABEL_55;
                    }
                  }
                  goto LABEL_60;
                }
LABEL_56:
                int v42 = 0;
                char v43 = v35 + 1;
                goto LABEL_61;
              }
            }
          }
        }
LABEL_38:
        int v38 = &v21[v30];
        if (a5) {
          *a5 = v38;
        }
        *int v38 = 0;
        for (int i = v38 - 1; i >= v21; --i)
          *int i = *(unsigned char *)(a1 + *i);
        return v21;
      }
LABEL_5:
      *a3 = 1;
      BOOL v14 = "0";
      size_t v15 = a5;
      unsigned int v16 = 1;
LABEL_6:
      return (char *)__nrv_alloc_D2A((unsigned __int8 *)v14, v15, v16);
    default:
      abort_report_np((uint64_t)"%s:%s:%u: fpclassify returned %d");
  }
}

char *__gdtoa(int *a1, int a2, _DWORD *a3, _DWORD *a4, unsigned int a5, int a6, _DWORD *a7, void *a8)
{
  int v8 = *a4;
  *a4 &= 0xFFFFFFCF;
  switch(v8 & 7)
  {
    case 0:
      goto LABEL_28;
    case 1:
    case 2:
      double v10 = a4;
      int v14 = *a1;
      size_t v161 = a7;
      int v15 = 0;
      if (v14 >= 33)
      {
        for (int i = 32; i < v14; i *= 2)
          ++v15;
      }
      uint64_t v160 = a8;
      int v166 = 0;
      int v17 = __Balloc_D2A(v15);
      int v18 = v17;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      do
      {
        v17[v19 + 6] = a3[v19];
        v20 += 0x100000000;
        ++v19;
      }
      while (&a3[v19] <= &a3[(v14 - 1) >> 5]);
      uint64_t v21 = v20 >> 32;
      int v22 = 32 * v21;
      break;
    case 3:
      *a7 = -32768;
      uint64_t v28 = "Infinity";
      long long v29 = a8;
      unsigned int v30 = 8;
      goto LABEL_29;
    case 4:
      *a7 = -32768;
      uint64_t v28 = "NaN";
      long long v29 = a8;
      unsigned int v30 = 3;
      goto LABEL_29;
    default:
      return 0;
  }
  while (1)
  {
    unint64_t v23 = &v17[v21];
    if (v23[5]) {
      break;
    }
    v22 -= 32;
    if (!--v21)
    {
      int v164 = 0;
      v17[5] = 0;
      goto LABEL_12;
    }
  }
  v17[5] = v21;
  int v164 = v22 - __hi0bits_D2A(v23[5]);
LABEL_12:
  int v24 = __trailz_D2A((uint64_t)v18);
  int v166 = v24;
  if (v24)
  {
    int v25 = v24;
    __rshift_D2A((uint64_t)v18, v24);
    int v26 = v25 + a2;
    v164 -= v25;
  }
  else
  {
    int v26 = a2;
  }
  if (!v18[5])
  {
    __Bfree_D2A(v18);
    a8 = v160;
    a7 = v161;
LABEL_28:
    *a7 = 1;
    uint64_t v28 = "0";
    long long v29 = a8;
    unsigned int v30 = 1;
LABEL_29:
    return (char *)__nrv_alloc_D2A((unsigned __int8 *)v28, v29, v30);
  }
  double v31 = __b2d_D2A((uint64_t)v18, &v166);
  int v32 = 1 - (v26 + v164);
  signed int v33 = v26 + v164 - 1;
  int v166 = v33;
  unsigned int v34 = LODWORD(v31);
  unint64_t v35 = (*(void *)&v31 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000uLL) >> 32;
  double v36 = (COERCE_DOUBLE(*(void *)&v31 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000) + -1.5) * 0.289529655
      + 0.176091259
      + (double)v33 * 0.301029996;
  if (v26 + v164 >= 1) {
    int v32 = v26 + v164 - 1;
  }
  if (v32 > 1077) {
    double v36 = v36 + (double)(v32 - 1077) * 7.0e-17;
  }
  BOOL v37 = v36 < 0.0;
  if (v36 == (double)(int)v36) {
    BOOL v37 = 0;
  }
  unsigned int v38 = (int)v36 - v37;
  *(void *)&double v39 = v34 | ((unint64_t)(v35 + ((v26 + v164) << 20) - 0x100000) << 32);
  if (v38 <= 0x16)
  {
    if (__tens_D2A[v38] <= v39)
    {
      if (v26 > 0) {
        int v42 = v26;
      }
      else {
        int v42 = 0;
      }
      int v43 = -v26 & ~(-v26 >> 31);
      unsigned int v40 = v38;
      goto LABEL_43;
    }
    unsigned int v40 = v38 - 1;
  }
  else
  {
    unsigned int v40 = v38;
  }
  if (v26 > 0) {
    int v42 = v26;
  }
  else {
    int v42 = 0;
  }
  int v43 = -v26 & ~(-v26 >> 31);
  if ((v40 & 0x80000000) == 0)
  {
LABEL_43:
    int v153 = v42;
    int v145 = 0;
    v43 += v40;
    int v44 = v40;
    goto LABEL_44;
  }
  int v44 = 0;
  int v153 = v42 - v40;
  int v145 = -v40;
LABEL_44:
  if (a5 <= 9) {
    unsigned int v45 = a5;
  }
  else {
    unsigned int v45 = 0;
  }
  if (v45 <= 5) {
    unsigned int v46 = v45;
  }
  else {
    unsigned int v46 = v45 - 4;
  }
  int v156 = v40;
  int v158 = 1;
  int v159 = v46;
  int v150 = v44;
  unsigned int v151 = v38;
  int v148 = v43;
  switch(v46)
  {
    case 0u:
    case 1u:
      a6 = 0;
      signed int v33 = (int)((double)v14 * 0.30103) + 3;
      int v166 = v33;
      int v158 = 1;
      goto LABEL_52;
    case 2u:
      int v158 = 0;
      goto LABEL_54;
    case 3u:
      int v158 = 0;
      goto LABEL_59;
    case 4u:
LABEL_54:
      if (a6 <= 1) {
        signed int v33 = 1;
      }
      else {
        signed int v33 = a6;
      }
      int v166 = v33;
      a6 = v33;
      int v47 = v33;
      int v154 = v33;
      break;
    case 5u:
LABEL_59:
      BOOL v48 = __OFADD__(v40, a6);
      int v49 = v40 + a6;
      int v47 = v49 + 1;
      int v154 = v49;
      if (v49 < 0 != v48) {
        signed int v33 = 1;
      }
      else {
        signed int v33 = v49 + 1;
      }
      int v166 = v33;
      break;
    default:
LABEL_52:
      int v47 = -1;
      int v154 = -1;
      break;
  }
  uint64_t v152 = (char *)__rv_alloc_D2A(v33);
  int v50 = a1[3];
  int v51 = v50 - 1;
  if (v50 == 1)
  {
    int v52 = 0;
  }
  else
  {
    if (v50 < 1) {
      int v51 = 2;
    }
    if ((v8 & 8) != 0) {
      int v52 = 3 - v51;
    }
    else {
      int v52 = v51;
    }
  }
  int v53 = v156;
  if (v45 <= 5 && v47 <= 0xE && !(v52 | v156))
  {
    int v166 = 0;
    BOOL v55 = v151 < 0x17 || v39 >= 1.0 || v47 == 0;
    if (v55)
    {
      int v56 = 0;
      double v57 = 2.0;
      int v58 = v47;
      double v59 = v39;
    }
    else
    {
      if (v154 < 1) {
        goto LABEL_105;
      }
      double v59 = v39 * 10.0;
      int v56 = -1;
      double v57 = 3.0;
      int v58 = v154;
    }
    *(void *)&double v60 = COERCE__INT64(v57 * v59 + 7.0) - 0x340000000000000;
    if (v58)
    {
      double v61 = __tens_D2A[v58 - 1];
      int v62 = (int)v59;
      double v63 = v59 - (double)(int)v59;
      char v64 = v62 + 48;
      int v65 = v152 + 1;
      if (v158)
      {
        double v66 = 0.5 / v61 - v60;
        *uint64_t v152 = v64;
        if (v63 < v66)
        {
LABEL_90:
          if (v63 == 0.0) {
            int v69 = 0;
          }
          else {
            int v69 = 16;
          }
          unsigned __int16 v70 = (char **)v160;
          uint64_t v27 = v152;
          int v71 = v56;
          goto LABEL_307;
        }
        while (1.0 - v63 >= v66)
        {
          if (++v166 >= v58) {
            goto LABEL_105;
          }
          double v67 = v63 * 10.0;
          int v68 = (int)v67;
          double v66 = v66 * 10.0;
          double v63 = v67 - (double)(int)v67;
          *v65++ = v68 + 48;
          if (v63 < v66) {
            goto LABEL_90;
          }
        }
        goto LABEL_99;
      }
      double v75 = v61 * v60;
      int v166 = 1;
      *uint64_t v152 = v64;
      for (int j = v166; v166 != v58; int j = v166)
      {
        int v166 = j + 1;
        double v77 = v63 * 10.0;
        int v78 = (int)v77;
        double v63 = v77 - (double)(int)v77;
        *v65++ = v78 + 48;
      }
      if (v63 > v75 + 0.5)
      {
LABEL_99:
        unsigned __int16 v70 = (char **)v160;
        uint64_t v27 = v152;
        int v71 = v56;
        goto LABEL_231;
      }
      if (v63 < 0.5 - v75)
      {
        int v71 = v56;
        if (v63 == 0.0) {
          int v69 = 0;
        }
        else {
          int v69 = 16;
        }
        unsigned __int16 v70 = (char **)v160;
        uint64_t v27 = v152;
        goto LABEL_251;
      }
    }
    else
    {
      double v72 = v59 + -5.0;
      if (v72 > v60)
      {
        uint64_t v73 = 0;
        unint64_t v74 = 0;
        int v53 = v56;
        unsigned __int16 v70 = (char **)v160;
        uint64_t v27 = v152;
        goto LABEL_177;
      }
      if (v72 < -v60)
      {
        uint64_t v73 = 0;
        unint64_t v74 = 0;
        goto LABEL_182;
      }
    }
  }
LABEL_105:
  if ((v26 & 0x80000000) == 0 && v156 <= 14)
  {
    double v79 = __tens_D2A[v156];
    if (a6 < 0 && v47 <= 0)
    {
      uint64_t v73 = 0;
      unsigned __int16 v70 = (char **)v160;
      uint64_t v27 = v152;
      if ((v47 & 0x80000000) == 0)
      {
        unint64_t v74 = 0;
        if (v79 * 5.0 >= v39) {
          goto LABEL_183;
        }
LABEL_177:
        uint64_t v109 = 0;
        char *v27 = 49;
        int v65 = v27 + 1;
        int v71 = v53 + 1;
        int v69 = 32;
        goto LABEL_302;
      }
      unint64_t v74 = 0;
LABEL_183:
      uint64_t v109 = 0;
      int v71 = ~a6;
      int v69 = 16;
      int v65 = v27;
      goto LABEL_302;
    }
    int v166 = 1;
    int v86 = (int)(v39 / v79);
    double v87 = v39 - (double)v86 * v79;
    uint64_t v27 = v152;
    *uint64_t v152 = v86 + 48;
    int v65 = v152 + 1;
    unsigned __int16 v70 = (char **)v160;
    if (v87 != 0.0)
    {
      int v91 = v166;
      if (v166 == v47)
      {
LABEL_135:
        if (v52)
        {
          if (v52 != 1)
          {
            int v69 = 16;
            goto LABEL_119;
          }
        }
        else
        {
          double v127 = v87 + v87;
          if (v127 <= v79)
          {
            int v128 = v86 & 1;
            if (v127 != v79 || v128 == 0)
            {
              int v69 = 16;
              int v71 = v156;
LABEL_251:
              ++v65;
              do
              {
                int v138 = *(v65 - 2);
                --v65;
              }
              while (v138 == 48);
              goto LABEL_307;
            }
          }
        }
        int v71 = v156;
LABEL_231:
        unsigned int v130 = v27 + 1;
        int v131 = v65 - 1;
        while (1)
        {
          int v132 = *v131;
          if (v132 != 57) {
            break;
          }
          BOOL v55 = v131-- == v27;
          if (v55)
          {
            ++v71;
            char *v27 = 48;
            char v133 = 49;
            int v131 = v27;
            goto LABEL_237;
          }
        }
        char v133 = v132 + 1;
        unsigned int v130 = v131 + 1;
LABEL_237:
        *int v131 = v133;
        int v69 = 32;
        int v65 = v130;
        goto LABEL_307;
      }
      while (1)
      {
        double v92 = v87 * 10.0;
        int v86 = (int)(v92 / v79);
        int v166 = v91 + 1;
        double v87 = v92 - (double)v86 * v79;
        *v65++ = v86 + 48;
        if (v87 == 0.0) {
          break;
        }
        int v91 = v166;
        if (v166 == v47) {
          goto LABEL_135;
        }
      }
    }
    int v69 = 0;
LABEL_119:
    int v71 = v156;
    goto LABEL_307;
  }
  int v147 = v52;
  if (v158)
  {
    if (v159 > 1)
    {
      int v89 = v47 - 1;
      if (v145 <= v47 - 1) {
        int v84 = v47 - 1;
      }
      else {
        int v84 = v145;
      }
      if (v145 >= v89) {
        int v85 = v145 - (v47 - 1);
      }
      else {
        int v85 = 0;
      }
      if (v145 >= v89) {
        int v90 = 0;
      }
      else {
        int v90 = v47 - 1 - v145;
      }
      int v166 = v47;
      int v82 = v153;
      v150 += v90;
      if (v47 < 0)
      {
        int v80 = 0;
        int v83 = v153 - v47;
        int v166 = 0;
      }
      else
      {
        int v80 = v47;
        int v83 = v153;
      }
    }
    else
    {
      int v80 = v14 - v164 + 1;
      int v166 = v80;
      int v81 = a1[1];
      int v82 = v153;
      if (v26 - (v14 - v164) < v81)
      {
        int v80 = v26 - v81 + 1;
        int v166 = v80;
      }
      int v83 = v153;
      int v84 = v145;
      int v85 = v145;
    }
    int v153 = v80 + v82;
    v148 += v80;
    uint64_t v73 = (char *)__i2b_D2A(1);
    int v88 = v85;
  }
  else
  {
    uint64_t v73 = 0;
    int v83 = v153;
    int v84 = v145;
    int v88 = v145;
  }
  if (v83 < 1)
  {
    int v93 = v148;
  }
  else
  {
    int v93 = v148;
    if (v148 >= 1)
    {
      if (v83 >= v148) {
        int v94 = v148;
      }
      else {
        int v94 = v83;
      }
      int v166 = v94;
      v153 -= v94;
      v83 -= v94;
      int v93 = v148 - v94;
    }
  }
  int v149 = v83;
  if (v84 >= 1)
  {
    if (!v158)
    {
      int v97 = (char *)v18;
      int v96 = v84;
      goto LABEL_155;
    }
    if (v88 >= 1)
    {
      int v146 = v88;
      uint64_t v73 = __pow5mult_D2A(v73, v88);
      int v95 = __mult_D2A(v73, v18);
      __Bfree_D2A(v18);
      int v88 = v146;
      int v18 = v95;
    }
    int v96 = v84 - v88;
    if (v84 != v88)
    {
      int v97 = (char *)v18;
LABEL_155:
      int v18 = (int *)__pow5mult_D2A(v97, v96);
    }
  }
  unint64_t v98 = (char *)__i2b_D2A(1);
  unint64_t v74 = (int *)v98;
  int v99 = v150;
  if (v150 >= 1)
  {
    uint64_t v100 = __pow5mult_D2A(v98, v150);
    int v99 = v150;
    unint64_t v74 = (int *)v100;
  }
  char v101 = 1;
  if (v159 <= 1 && v164 == 1 && a1[1] + 1 < a2)
  {
    char v101 = 0;
    ++v153;
    ++v93;
  }
  if (v99) {
    char v102 = __hi0bits_D2A(v74[v74[5] + 5]);
  }
  else {
    char v102 = 31;
  }
  int v103 = (v102 - (_BYTE)v93 + 28) & 0x1F;
  int v166 = v103;
  if (v103 + v153 < 1)
  {
    int v104 = (v102 - (_BYTE)v93 + 28) & 0x1F;
  }
  else
  {
    int v18 = __lshift_D2A(v18, v103 + v153);
    int v104 = v166;
  }
  if (v104 + v93 >= 1) {
    unint64_t v74 = __lshift_D2A(v74, v104 + v93);
  }
  int v105 = v156;
  int v106 = v159;
  if (v151 >= 0x17)
  {
    int v107 = __cmp_D2A((uint64_t)v18, (uint64_t)v74);
    int v106 = v159;
    int v105 = v156;
    if (v107 < 0)
    {
      int v157 = v156 - 1;
      int v18 = (int *)__multadd_D2A((char *)v18, 10, 0);
      if (v158)
      {
        uint64_t v73 = __multadd_D2A(v73, 10, 0);
        if (v159 < 3)
        {
          int v47 = v154;
          goto LABEL_180;
        }
        int v47 = v154;
        if (v154 > 0) {
          goto LABEL_180;
        }
LABEL_175:
        if ((v47 & 0x80000000) == 0)
        {
          unint64_t v74 = (int *)__multadd_D2A((char *)v74, 5, 0);
          int v108 = __cmp_D2A((uint64_t)v18, (uint64_t)v74);
          int v53 = v157;
          unsigned __int16 v70 = (char **)v160;
          uint64_t v27 = v152;
          if (v108 > 0) {
            goto LABEL_177;
          }
          goto LABEL_183;
        }
LABEL_182:
        unsigned __int16 v70 = (char **)v160;
        uint64_t v27 = v152;
        goto LABEL_183;
      }
      if (v159 < 3)
      {
        int v47 = v154;
      }
      else
      {
        int v47 = v154;
        if (v154 < 1) {
          goto LABEL_175;
        }
      }
      int v105 = v157;
      goto LABEL_260;
    }
  }
  if (v106 >= 3 && v47 < 1)
  {
    int v157 = v105;
    goto LABEL_175;
  }
  if (!v158)
  {
LABEL_260:
    int v71 = v105;
    int v166 = 1;
    LOBYTE(v122) = __quorem_D2A((uint64_t)v18, (uint64_t)v74) + 48;
    uint64_t v27 = v152;
    unsigned __int8 v125 = v152;
    while (1)
    {
      *v125++ = v122;
      if (v166 >= v47) {
        break;
      }
      int v18 = (int *)__multadd_D2A((char *)v18, 10, 0);
      ++v166;
      LOBYTE(v122) = __quorem_D2A((uint64_t)v18, (uint64_t)v74) + 48;
    }
    v165 = 0;
    int v123 = v147;
LABEL_264:
    if (v123)
    {
      if (v123 == 2)
      {
LABEL_266:
        uint64_t v109 = (int *)v165;
LABEL_267:
        if (v18[5] > 1 || v18[6]) {
          int v69 = 16;
        }
        else {
          int v69 = 0;
        }
        int v65 = v125 + 1;
        do
        {
          int v139 = *(v65 - 2);
          --v65;
        }
        while (v139 == 48);
LABEL_292:
        unsigned __int16 v70 = (char **)v160;
        goto LABEL_302;
      }
      uint64_t v109 = (int *)v165;
      if (v18[5] <= 1 && !v18[6]) {
        goto LABEL_267;
      }
    }
    else
    {
      int v18 = __lshift_D2A(v18, 1);
      int v140 = __cmp_D2A((uint64_t)v18, (uint64_t)v74);
      if (v140 <= 0 && (v140 || (v122 & 1) == 0)) {
        goto LABEL_266;
      }
      uint64_t v109 = (int *)v165;
    }
LABEL_287:
    int v65 = v27 + 1;
    int v141 = v125;
    uint64_t v142 = v125;
    while (1)
    {
      int v144 = *--v142;
      char v143 = v144;
      if (v144 != 57) {
        break;
      }
      int v141 = v142;
      if (v142 == v27)
      {
        ++v71;
        char *v27 = 49;
        int v69 = 32;
        goto LABEL_292;
      }
    }
    *(v141 - 1) = v143 + 1;
    int v69 = 32;
    int v65 = v141;
    goto LABEL_292;
  }
  int v157 = v105;
LABEL_180:
  int v155 = v47;
  if (v103 + v149 < 1)
  {
    int v110 = v73;
  }
  else
  {
    int v110 = (char *)__lshift_D2A((int *)v73, v103 + v149);
    uint64_t v73 = v110;
  }
  unsigned int v163 = v10;
  if ((v101 & 1) == 0)
  {
    unint64_t v111 = __Balloc_D2A(*((_DWORD *)v110 + 2));
    j__mkdtempat_np(v111 + 16, v110 + 16);
    uint64_t v73 = (char *)__lshift_D2A(v111, 1);
  }
  int v112 = 1;
  for (uint64_t k = v152; ; ++k)
  {
    int v166 = v112;
    int v114 = __quorem_D2A((uint64_t)v18, (uint64_t)v74);
    int v115 = __cmp_D2A((uint64_t)v18, (uint64_t)v110);
    uint64_t v116 = (uint64_t)v74;
    int v117 = v115;
    uint64_t v118 = v116;
    int v119 = v73;
    int v120 = __diff_D2A(v116, (uint64_t)v73);
    v165 = v110;
    if (v120[4]) {
      int v121 = 1;
    }
    else {
      int v121 = __cmp_D2A((uint64_t)v18, (uint64_t)v120);
    }
    int v122 = v114 + 48;
    __Bfree_D2A(v120);
    int v123 = v147;
    if (!(v121 | v159) && !(*a3 & 1 | v147))
    {
      uint64_t v73 = v119;
      if (v114 != 9)
      {
        uint64_t v27 = v152;
        double v10 = v163;
        if (v117 <= 0)
        {
          unint64_t v74 = (int *)v118;
          if (v18[5] > 1 || v18[6]) {
            int v69 = 16;
          }
          else {
            int v69 = 0;
          }
          unsigned __int16 v70 = (char **)v160;
        }
        else
        {
          LOBYTE(v122) = v114 + 49;
          int v69 = 32;
          unsigned __int16 v70 = (char **)v160;
          unint64_t v74 = (int *)v118;
        }
LABEL_299:
        int v71 = v157;
        goto LABEL_300;
      }
      uint64_t v27 = v152;
      double v10 = v163;
      unint64_t v74 = (int *)v118;
LABEL_241:
      int v71 = v157;
      goto LABEL_286;
    }
    uint64_t v73 = v119;
    if (v117 < 0 || !(v117 | v159) && (*(unsigned char *)a3 & 1) == 0) {
      break;
    }
    double v10 = v163;
    if (v121 >= 1 && v147 != 2)
    {
      unint64_t v74 = (int *)v118;
      if (v114 != 9)
      {
        *uint64_t k = v114 + 49;
        int v65 = k + 1;
        int v69 = 32;
        unsigned __int16 v70 = (char **)v160;
        uint64_t v27 = v152;
        int v71 = v157;
        goto LABEL_301;
      }
      uint64_t v27 = v152;
      goto LABEL_241;
    }
    *uint64_t k = v122;
    unint64_t v74 = (int *)v118;
    if (v166 == v155)
    {
      unsigned __int8 v125 = k + 1;
      int v71 = v157;
      uint64_t v27 = v152;
      goto LABEL_264;
    }
    int v18 = (int *)__multadd_D2A((char *)v18, 10, 0);
    int v124 = __multadd_D2A(v165, 10, 0);
    int v110 = v124;
    if (v165 != v73) {
      int v124 = __multadd_D2A(v73, 10, 0);
    }
    int v112 = v166 + 1;
    uint64_t v73 = v124;
  }
  double v10 = v163;
  if (!v147 || v18[5] <= 1 && !v18[6])
  {
    unint64_t v74 = (int *)v118;
    if (v121 < 1)
    {
      int v69 = 0;
      uint64_t v27 = v152;
      int v71 = v157;
    }
    else
    {
      int v18 = __lshift_D2A(v18, 1);
      int v126 = __cmp_D2A((uint64_t)v18, v118);
      uint64_t v27 = v152;
      int v71 = v157;
      if (v126 > 0 || (int v69 = 32, !v126) && (v114 & 1) != 0)
      {
        if (v114 == 9)
        {
LABEL_286:
          uint64_t v109 = (int *)v165;
          *uint64_t k = 57;
          unsigned __int8 v125 = k + 1;
          goto LABEL_287;
        }
        LOBYTE(v122) = v114 + 49;
        int v69 = 32;
      }
    }
    unsigned __int16 v70 = (char **)v160;
    if (v18[5] > 1 || v18[6]) {
      int v69 = 16;
    }
    goto LABEL_300;
  }
  unint64_t v74 = (int *)v118;
  if (v147 == 2)
  {
    int v69 = 16;
    unsigned __int16 v70 = (char **)v160;
    uint64_t v27 = v152;
    goto LABEL_299;
  }
  int v134 = __cmp_D2A(v118, (uint64_t)v73);
  uint64_t v27 = v152;
  int v71 = v157;
  if (v134 < 1)
  {
    uint64_t v137 = (uint64_t)v73;
    int v135 = v165;
  }
  else
  {
    int v135 = v165;
    do
    {
      *k++ = v122;
      int v136 = __multadd_D2A(v73, 10, 0);
      uint64_t v137 = (uint64_t)v136;
      if (v135 == v73) {
        int v135 = v136;
      }
      int v18 = (int *)__multadd_D2A((char *)v18, 10, 0);
      int v122 = __quorem_D2A((uint64_t)v18, (uint64_t)v74) + 48;
      uint64_t v73 = (char *)v137;
    }
    while ((int)__cmp_D2A((uint64_t)v74, v137) > 0);
  }
  v165 = v135;
  if (v122 == 57)
  {
    uint64_t v73 = (char *)v137;
    goto LABEL_286;
  }
  LOBYTE(v122) = v122 + 1;
  int v69 = 32;
  uint64_t v73 = (char *)v137;
  unsigned __int16 v70 = (char **)v160;
LABEL_300:
  *uint64_t k = v122;
  int v65 = k + 1;
LABEL_301:
  uint64_t v109 = (int *)v165;
LABEL_302:
  __Bfree_D2A(v74);
  if (v73)
  {
    if (v109 && v109 != (int *)v73) {
      __Bfree_D2A(v109);
    }
    __Bfree_D2A((int *)v73);
  }
LABEL_307:
  __Bfree_D2A(v18);
  *int v65 = 0;
  *size_t v161 = v71 + 1;
  if (v70) {
    *unsigned __int16 v70 = v65;
  }
  *v10 |= v69;
  return v27;
}

uint64_t __rshift_D2A(uint64_t result, int a2)
{
  unsigned int v2 = (char *)(result + 24);
  int v3 = a2 >> 5;
  uint64_t v4 = *(int *)(result + 20);
  int v5 = (char *)(result + 24);
  if (a2 >> 5 < (int)v4)
  {
    uint64_t v6 = v3;
    unint64_t v7 = (unint64_t)&v2[4 * v4];
    char v8 = a2 & 0x1F;
    if ((a2 & 0x1F) != 0)
    {
      int v9 = &v2[4 * v3];
      int v10 = *(_DWORD *)v9 >> v8;
      if ((unint64_t)(v9 + 4) >= v7)
      {
        int v13 = (_DWORD *)(result + 24);
      }
      else
      {
        uint64_t v11 = 4 * v6;
        uint64_t v12 = result + 28;
        do
        {
          *(_DWORD *)(v12 - 4) = (*(_DWORD *)(v12 + v11) << (32 - v8)) | v10;
          int v10 = *(_DWORD *)(v12 + v11) >> v8;
          v12 += 4;
        }
        while (v12 + v11 < v7);
        int v13 = (_DWORD *)(v12 - 4);
      }
      *int v13 = v10;
      int v5 = (char *)&v13[v10 != 0];
    }
    else
    {
      uint64_t v14 = v3;
      int v15 = (_DWORD *)(result + 24);
      do
      {
        int v5 = (char *)(v15 + 1);
        *int v15 = v15[v14];
        unsigned int v16 = &v15[v14 + 1];
        ++v15;
      }
      while ((unint64_t)v16 < v7);
    }
  }
  unint64_t v17 = (unint64_t)(v5 - v2) >> 2;
  *(_DWORD *)(result + 20) = v17;
  if (!v17) {
    *(_DWORD *)unsigned int v2 = 0;
  }
  return result;
}

uint64_t __trailz_D2A(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 20);
  if ((int)v1 < 1) {
    return 0;
  }
  LODWORD(v2) = 0;
  int v3 = (unsigned int *)(a1 + 24);
  unint64_t v4 = a1 + 24 + 4 * v1;
  while (!*v3)
  {
    uint64_t v2 = (v2 + 32);
    if ((unint64_t)++v3 >= v4) {
      return v2;
    }
  }
  unsigned int v6 = *v3;
  return __lo0bits_D2A(&v6) + v2;
}

double __b2d_D2A(uint64_t a1, _DWORD *a2)
{
  unint64_t v3 = a1 + 24;
  uint64_t v4 = a1 + 24 + 4 * *(int *)(a1 + 20);
  unint64_t v6 = v4 - 4;
  unsigned int v5 = *(_DWORD *)(v4 - 4);
  unsigned int v7 = __hi0bits_D2A(v5);
  *a2 = 32 - v7;
  if (v7 > 0xA)
  {
    if (v6 <= v3)
    {
      unsigned int v10 = 0;
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(v4 - 8);
      unint64_t v6 = v4 - 8;
    }
    char v11 = v7 - 11;
    if (v7 == 11)
    {
      int v8 = v5;
    }
    else
    {
      int v8 = (v5 << v11) | (v10 >> (43 - v7));
      if (v6 <= v3) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = *(_DWORD *)(v6 - 4);
      }
      unsigned int v10 = (v12 >> (43 - v7)) | (v10 << v11);
    }
  }
  else
  {
    int v8 = v5 >> (11 - v7);
    if (v6 <= v3) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = *(_DWORD *)(v4 - 8);
    }
    unsigned int v10 = (v9 >> (11 - v7)) | (v5 << (v7 + 21));
  }
  *(void *)&double result = v10 | ((unint64_t)(v8 | 0x3FF00000u) << 32);
  return result;
}

unsigned char *__strcp_D2A(unsigned char *result, unsigned __int8 *a2)
{
  int v2 = *a2;
  *double result = v2;
  if (v2)
  {
    unint64_t v3 = a2 + 1;
    do
    {
      int v4 = *v3++;
      *++double result = v4;
    }
    while (v4);
  }
  return result;
}

char *__s2b_D2A(char *a1, int a2, int a3, int a4, int a5)
{
  if (a3 < 10)
  {
    int v10 = 0;
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
    do
    {
      BOOL v12 = (a3 + 8) / 9 <= 2 * v11;
      v11 *= 2;
      ++v10;
    }
    while (!v12);
  }
  double result = (char *)__Balloc_D2A(v10);
  *((_DWORD *)result + 5) = 1;
  *((_DWORD *)result + 6) = a4;
  if (a2 < 10)
  {
    a5 += 9;
    a2 = 9;
  }
  else
  {
    a1 += 9;
    int v14 = a2 - 9;
    do
    {
      int v15 = *a1++;
      double result = __multadd_D2A(result, 10, v15 - 48);
      --v14;
    }
    while (v14);
  }
  BOOL v16 = __OFSUB__(a3, a2);
  int v17 = a3 - a2;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = &a1[a5];
    do
    {
      int v19 = *v18++;
      double result = __multadd_D2A(result, 10, v19 - 48);
      --v17;
    }
    while (v17);
  }
  return result;
}

double __ratio_D2A(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  double v4 = __b2d_D2A(a1, (_DWORD *)&v9 + 1);
  double v5 = __b2d_D2A(a2, &v9);
  int v6 = HIDWORD(v9) - v9 + 32 * (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a2 + 20));
  *(void *)&double v7 = LODWORD(v4) | ((unint64_t)(HIDWORD(v4) + (v6 << 20)) << 32);
  if (v6 < 1)
  {
    double v7 = v4;
    *(void *)&double v5 = LODWORD(v5) | ((unint64_t)(HIDWORD(v5) - (v6 << 20)) << 32);
  }
  return v7 / v5;
}

uint64_t __match_D2A(void *a1, unsigned char *a2)
{
  int v2 = (char *)(*a1 + 1);
  while (1)
  {
    int v3 = (char)*a2;
    if (!*a2) {
      break;
    }
    int v5 = *v2++;
    int v4 = v5;
    ++a2;
    int v6 = v5 + 32;
    if ((v5 - 65) < 0x1A) {
      int v4 = v6;
    }
    if (v4 != v3) {
      return 0;
    }
  }
  *a1 = v2;
  return 1;
}

_DWORD *__copybits_D2A(_DWORD *result, int a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  if ((int)v3 < 1)
  {
    double v7 = result;
  }
  else
  {
    int v4 = (int *)(a3 + 24);
    unint64_t v5 = a3 + 24 + 4 * v3;
    int v6 = result;
    double v7 = result;
    do
    {
      int v8 = *v4++;
      *v7++ = v8;
      ++v6;
    }
    while ((unint64_t)v4 < v5);
  }
  if (v7 < &result[((a2 - 1) >> 5) + 1]) {
    JUMPOUT(0x18C122530);
  }
  return result;
}

uint64_t __any_on_D2A(uint64_t a1, int a2)
{
  unint64_t v2 = a1 + 24;
  int v3 = *(_DWORD *)(a1 + 20);
  BOOL v4 = a2 >> 5 < v3;
  if (a2 >> 5 <= v3)
  {
    int v5 = a2 & 0x1F;
    if (!v4 || v5 == 0)
    {
      int v3 = a2 >> 5;
    }
    else
    {
      int v7 = -1 << v5;
      int v3 = a2 >> 5;
      if ((*(_DWORD *)(v2 + 4 * (a2 >> 5)) & ~v7) != 0) {
        return 1;
      }
    }
  }
  for (unint64_t i = v2 + 4 * v3; i > v2; i -= 4)
  {
    if (*(_DWORD *)(i - 4)) {
      return 1;
    }
  }
  return 0;
}

char *__sum_D2A(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = *(_DWORD *)(a2 + 20);
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  int v6 = (char *)__Balloc_D2A(*(_DWORD *)(v4 + 8));
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  int v9 = *(_DWORD *)(v4 + 20);
  *((_DWORD *)v6 + 5) = v9;
  uint64_t v10 = v4 + 24;
  uint64_t v11 = *(int *)(v5 + 20);
  unint64_t v12 = (unint64_t)&v6[4 * v11 + 24];
  do
  {
    int v13 = &v6[v7];
    unsigned int v14 = *(_DWORD *)(v10 + v7);
    unsigned int v15 = *(_DWORD *)(v5 + 24 + v7);
    unsigned int v16 = v8 + (unsigned __int16)v14 + (unsigned __int16)v15;
    unsigned int v17 = HIWORD(v15) + HIWORD(v14) + (HIWORD(v16) & 1);
    unsigned int v8 = HIWORD(v17);
    *((_WORD *)v13 + 13) = v17;
    *((_WORD *)v13 + 12) = v16;
    v7 += 4;
    int v18 = &v6[v7 + 24];
  }
  while ((unint64_t)v18 < v12);
  unint64_t v19 = v12 + 4 * (*(_DWORD *)(v4 + 20) - (int)v11);
  if ((unint64_t)v18 < v19)
  {
    uint64_t v20 = (unsigned int *)(v10 + v7);
    do
    {
      unsigned int v21 = *v20++;
      unsigned int v22 = v8 + (unsigned __int16)v21;
      unsigned int v8 = (HIWORD(v22) + HIWORD(v21)) >> 16;
      *((_WORD *)v18 + 1) = HIWORD(v22) + HIWORD(v21);
      *(_WORD *)int v18 = v22;
      v18 += 4;
    }
    while ((unint64_t)v18 < v19);
  }
  if (v8)
  {
    if (v9 == *((_DWORD *)v6 + 3))
    {
      unint64_t v23 = (char *)__Balloc_D2A(*((_DWORD *)v6 + 2) + 1);
      j__mkdtempat_np(v23 + 16, v6 + 16);
      __Bfree_D2A((int *)v6);
      int v9 = *((_DWORD *)v23 + 5);
      int v6 = v23;
    }
    *((_DWORD *)v6 + 5) = v9 + 1;
    *(_DWORD *)&v6[4 * v9 + 24] = 1;
  }
  return v6;
}

double __ulp_D2A(uint64_t a1)
{
  uint64_t v1 = *(_DWORD *)(a1 + 4) & 0x7FF00000;
  unint64_t v2 = (unint64_t)(54525952 - v1) >> 20;
  LODWORD(v3) = 1 << (51 - v2);
  if (v1 < 0x200000) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v3;
  }
  unint64_t v4 = 0x80000uLL >> v2 << 32;
  if (v1 < 0x2000001) {
    unint64_t v4 = v3;
  }
  if (v1 < 0x3400001) {
    return *(double *)&v4;
  }
  *(void *)&double v5 = (unint64_t)(v1 - 54525952) << 32;
  return v5;
}

unsigned int alarm(unsigned int a1)
{
  v5.it_interval = 0u;
  *(&v5.it_value.tv_usec + 1) = 0;
  memset(&v4, 0, sizeof(v4));
  v5.it_interval.__darwin_suseconds_t tv_usec = 0;
  v5.it_value.unsigned int tv_sec = a1;
  v5.it_value.__darwin_suseconds_t tv_usec = 0;
  int v1 = setitimer(0, &v5, &v4);
  if (v4.it_value.tv_usec) {
    unsigned int tv_sec = LODWORD(v4.it_value.tv_sec) + 1;
  }
  else {
    unsigned int tv_sec = v4.it_value.tv_sec;
  }
  if (v1 < 0) {
    return -1;
  }
  else {
    return tv_sec;
  }
}

clock_t clock(void)
{
  memset(&v1, 0, sizeof(v1));
  if (getrusage(0, &v1)) {
    return -1;
  }
  else {
    return v1.ru_stime.tv_usec + (uint64_t)v1.ru_utime.tv_usec + 1000000 * (v1.ru_stime.tv_sec + v1.ru_utime.tv_sec);
  }
}

char *__cdecl ctermid(char *result)
{
  if (!result) {
    return ctermid_def;
  }
  uint64_t v1 = *(void *)ctermid_def;
  result[8] = ctermid_def[8];
  *(void *)double result = v1;
  return result;
}

char *__cdecl ctermid_r(char *result)
{
  if (result)
  {
    uint64_t v1 = *(void *)ctermid_def;
    result[8] = ctermid_def[8];
    *(void *)double result = v1;
  }
  return result;
}

int daemon(int a1, int a2)
{
  v15.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v15.sa_masuint64_t k = 0;
  v14.__sigaction_u.__sa_handleunsigned int r = (void (__cdecl *)(int))1;
  *(void *)&v14.sa_masuint64_t k = 0;
  int v4 = sigaction(1, &v14, &v15);
  mach_port_name_t v5 = 0;
  mach_port_t parent_port = 0;
  int v6 = (mach_port_t *)MEMORY[0x1E4F14C40];
  uint64_t v7 = (ipc_space_t *)MEMORY[0x1E4F14C48];
  while (1)
  {
    if (v5)
    {
      mach_port_deallocate(*v7, v5);
      p_mach_port_t parent_port = &parent_port;
    }
    else
    {
      p_mach_port_t parent_port = v6;
    }
    mach_port_name_t v5 = *p_parent_port;
    if (bootstrap_parent(*p_parent_port, &parent_port)) {
      break;
    }
    if (parent_port == v5)
    {
      task_set_special_port(*v7, 4, v5);
      *int v6 = parent_port;
      break;
    }
  }
  int result = fork();
  if (result != -1)
  {
    if (result) {
      __exit();
    }
    pid_t v10 = setsid();
    int v11 = *__error();
    if (v4 != -1) {
      sigaction(1, &v15, 0);
    }
    if (v10 == -1)
    {
      *__error() = v11;
      return -1;
    }
    if (a1)
    {
      if (!a2)
      {
LABEL_18:
        int v12 = open_NOCANCEL();
        if (v12 != -1)
        {
          int v13 = v12;
          dup2(v12, 0);
          dup2(v13, 1);
          dup2(v13, 2);
          int result = 0;
          if (v13 < 3) {
            return result;
          }
          close_NOCANCEL();
        }
      }
    }
    else
    {
      chdir("/");
      if (!a2) {
        goto LABEL_18;
      }
    }
    return 0;
  }
  return result;
}

char *__cdecl dirname(char *a1)
{
  unint64_t v2 = (char *)dirname_dname;
  if (dirname_dname
    || (result = (char *)malloc_type_malloc(0x400uLL, 0xCE9BD9BCuLL), unint64_t v2 = result,
                                                                      (dirname_dname = (uint64_t)result) != 0))
  {
    return dirname_r(a1, v2);
  }
  return result;
}

double erand48(unsigned __int16 a1[3])
{
  unint64_t v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFLL;
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = 32 * v2;
  unint64_t v4 = v2 >> 47;
  unint64_t v5 = __clz(v3 & 0xFFFFFFFFFFFE0);
  uint64_t v6 = v3 << (v5 - 11);
  uint64_t v7 = 0x4090000000000000 - (v5 << 52);
  BOOL v8 = v4 == 0;
  if (v4) {
    uint64_t v9 = v3;
  }
  else {
    uint64_t v9 = v6;
  }
  if (v8) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0x3FE0000000000000;
  }
  *(void *)&double result = v10 | v9 & 0x800FFFFFFFFFFFE0;
  return result;
}

void _e_visprintf(FILE *a1, const char *a2, char *a3)
{
  v14[0] = 0;
  v14[1] = a3;
  vasprintf(v14, a2, a3);
  if (!v14[0]) {
    goto LABEL_13;
  }
  uint64_t v7 = j__strsignal_r((int)v14[0], v5, v6);
  BOOL v8 = (char *)malloc_type_malloc((4 * v7) | 1, 0x1EC10F68uLL);
  if (!v8)
  {
    free(v14[0]);
LABEL_13:
    vfprintf(a1, a2, a3);
    return;
  }
  int v9 = *v14[0];
  uint64_t v10 = v8;
  if (*v14[0])
  {
    int v11 = v14[0] + 1;
    uint64_t v10 = v8;
    do
    {
      if (escape[v9] == 255)
      {
        sprintf(v10, "\\%03o", v9);
        v10 += 4;
      }
      else if (escape[v9])
      {
        char *v10 = 92;
        v10[1] = escape[*(v11 - 1)];
        v10 += 2;
      }
      else
      {
        *v10++ = v9;
      }
      int v12 = *v11++;
      int v9 = v12;
    }
    while (v12);
  }
  char *v10 = 0;
  fputs(v8, a1);
  free(v8);
  free(v14[0]);
}

void err_set_file(void *a1)
{
  unint64_t v1 = __stderrp;
  if (a1) {
    unint64_t v1 = a1;
  }
  _e_err_int file = (uint64_t)v1;
}

void err_set_exit(void (__cdecl *a1)(int))
{
  if (_e_err_exit == 1) {
    _Block_release(off_1E911B8E0);
  }
  _e_err_exit = 2 * (a1 != 0);
  off_1E911B8E0 = (uint64_t (*)(void))a1;
}

void err_set_exit_b(void *a1)
{
  if (_e_err_exit == 1) {
    _Block_release(off_1E911B8E0);
  }
  _e_err_exit = a1 != 0;
  off_1E911B8E0 = (uint64_t (*)(void))_Block_copy(a1);
}

int execl(const char *__path, const char *__arg0, ...)
{
  va_start(va, __arg0);
  va_copy(v13, va);
  uint64_t v4 = 8;
  do
  {
    unint64_t v5 = v13;
    v13 += 8;
    v4 += 8;
  }
  while (*v5);
  MEMORY[0x1F41887A8](__path, v4);
  uint64_t v7 = (va_list *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x18C122530](v7);
  va_copy(v13, va);
  *uint64_t v7 = (char *)__arg0;
  uint64_t v8 = 1;
  do
  {
    int v9 = (char **)v13;
    v13 += 8;
    uint64_t v10 = *v9;
    v7[v8++] = v10;
  }
  while (v10);
  int v11 = _NSGetEnviron();
  return execve(__path, v7, *v11);
}

int execle(const char *__path, const char *__arg0, ...)
{
  va_start(va, __arg0);
  va_copy(v13, va);
  uint64_t v4 = 8;
  do
  {
    unint64_t v5 = v13;
    v13 += 8;
    v4 += 8;
  }
  while (*v5);
  MEMORY[0x1F41887A8](__path, v4);
  uint64_t v7 = (va_list *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x18C122530](v7);
  va_copy(v13, va);
  *uint64_t v7 = (char *)__arg0;
  uint64_t v8 = 1;
  do
  {
    int v9 = (char **)v13;
    v13 += 8;
    uint64_t v10 = *v9;
    v7[v8++] = v10;
  }
  while (v10);
  int v11 = (char *const **)v13;
  v13 += 8;
  return execve(__path, v7, *v11);
}

int execlp(const char *__file, const char *__arg0, ...)
{
  va_start(va, __arg0);
  va_copy(v12, va);
  uint64_t v4 = 8;
  do
  {
    unint64_t v5 = v12;
    v12 += 8;
    v4 += 8;
  }
  while (*v5);
  MEMORY[0x1F41887A8](__file, v4);
  uint64_t v7 = (va_list *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x18C122530](v7);
  va_copy(v12, va);
  *uint64_t v7 = (char *)__arg0;
  uint64_t v8 = 1;
  do
  {
    int v9 = (char **)v12;
    v12 += 8;
    uint64_t v10 = *v9;
    v7[v8++] = v10;
  }
  while (v10);
  execvp(__file, v7);
  return -1;
}

int execvp(const char *__file, char *const *__argv)
{
  uint64_t v4 = *_NSGetEnviron();
  unint64_t v5 = getenv("PATH");
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "/usr/bin:/bin";
  }
  execvPe((char *)__file, v6, (size_t)__argv, v4);
  return -1;
}

int execv(const char *__path, char *const *__argv)
{
  uint64_t v4 = _NSGetEnviron();
  execve(__path, __argv, *v4);
  return -1;
}

int execvP(const char *__file, const char *__searchpath, char *const *__argv)
{
  uint64_t v6 = _NSGetEnviron();
  execvPe((char *)__file, __searchpath, (size_t)__argv, *v6);
  return -1;
}

char *execvPe(char *a1, const char *a2, size_t a3, char *const *a4)
{
  double v31 = a4;
  size_t v4 = a3;
  memset(&v33, 0, sizeof(v33));
  size_t v29 = a3;
  if (!j__strncasecmp(a1, (const char *)0x2F, a3))
  {
    if (*a1)
    {
      uint64_t v10 = j__strsignal_r((int)a2, v7, v8);
      int v11 = (char *)&v29 - ((MEMORY[0x1F41887A8](v10, v10 + 1) + 16) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x18C122530](v11);
      unsigned int v34 = v11;
      j__strnstr(v11, a2, v12);
      int v30 = 0;
      int v32 = v35;
      goto LABEL_5;
    }
    goto LABEL_23;
  }
  int v30 = 0;
  unsigned int v34 = 0;
  for (unint64_t i = a1; ; unint64_t i = v32)
  {
    execve(i, (char *const *)v4, v31);
    double result = (char *)__error();
    uint64_t v20 = *(unsigned int *)result;
    int v32 = (char *)i;
    if (v20 <= 0x3F)
    {
      if (((1 << v20) & 0xC000000000100004) != 0) {
        goto LABEL_5;
      }
      if (((1 << v20) & 0x4001080) != 0) {
        return result;
      }
      if (v20 == 8)
      {
        uint64_t v22 = 0;
        unint64_t v23 = 1;
        do
        {
          uint64_t v24 = *(void *)(v4 + v22);
          v22 += 8;
          ++v23;
        }
        while (v24);
        uint64_t v25 = 3;
        if (v23 > 3) {
          uint64_t v25 = v23;
        }
        MEMORY[0x1F41887A8](result, 8 * v25);
        uint64_t v27 = (char *)&v29 - v26;
        MEMORY[0x18C122530]((char *)&v29 - v26);
        if (v23 == 2)
        {
          *((void *)v27 + 2) = 0;
          uint64_t v28 = "sh";
        }
        else
        {
          uint64_t v28 = *(const char **)v4;
          j__mkdtempat_np(v27 + 16, (char *)(v4 + 8));
        }
        *(void *)uint64_t v27 = v28;
        *((void *)v27 + 1) = i;
        return (char *)execve("/bin/sh", (char *const *)v27, v31);
      }
    }
    int v21 = *__error();
    if (!stat(i, &v33))
    {
      int v30 = 1;
      if (v21 != 13)
      {
        double result = (char *)__error();
        *(_DWORD *)double result = v21;
        return result;
      }
    }
LABEL_5:
    double result = strsep(&v34, ":");
    if (!result) {
      break;
    }
    unsigned int v16 = result;
    while (1)
    {
      if (*v16)
      {
        uint64_t v17 = j__strsignal_r((int)v16, v14, v15);
      }
      else
      {
        uint64_t v17 = 1;
        unsigned int v16 = ".";
      }
      uint64_t v18 = j__strsignal_r((int)a1, v14, v15) + v17;
      if ((unint64_t)(v18 - 1023) > 0xFFFFFFFFFFFFFBFELL) {
        break;
      }
      write_NOCANCEL();
      write_NOCANCEL();
      write_NOCANCEL();
      double result = strsep(&v34, ":");
      unsigned int v16 = result;
      if (!result) {
        goto LABEL_12;
      }
    }
    j__mkostemp(v35, (int)v16);
    v35[v17] = 47;
    j__mkdtempat_np(v35 + v17 + 1, a1);
    v35[v18 + 1] = 0;
    size_t v4 = v29;
  }
LABEL_12:
  if (v30)
  {
    double result = (char *)__error();
    int v19 = 13;
    goto LABEL_24;
  }
  if (v34)
  {
LABEL_23:
    double result = (char *)__error();
    int v19 = 2;
LABEL_24:
    *(_DWORD *)double result = v19;
  }
  return result;
}

int fmtmsg(uint64_t a1, const char *a2, int a3, const char *a4, const char *a5, const char *a6)
{
  size_t v8 = *(void *)&a3;
  __int16 v10 = a1;
  if (a5) {
    int v11 = (char *)a5;
  }
  else {
    int v11 = "";
  }
  if ((a1 & 0x100) != 0)
  {
    va_list v13 = getenv("MSGVERB");
    if (v13)
    {
      unsigned int v16 = v13;
      if (*v13)
      {
        if ((unint64_t)j__strsignal_r((int)v13, v14, v15) <= 0x1E)
        {
          uint64_t v17 = strdup(v16);
          if (!v17) {
            return 3;
          }
          uint64_t v18 = v17;
          int v19 = nextcomp((uint64_t)v17);
          if (v19)
          {
            uint64_t v22 = v19;
            unint64_t v35 = a6;
            int v23 = 0;
            do
            {
              uint64_t v24 = 0;
              --v23;
              do
              {
                if (!j__strncasecmp_l(v22, validlist[v24], v20, v21)) {
                  ++v23;
                }
                ++v24;
              }
              while (v24 != 5);
              uint64_t v22 = nextcomp((uint64_t)v18);
            }
            while (v22);
            if (v23)
            {
              free(v18);
              a6 = v35;
              goto LABEL_20;
            }
            a6 = v35;
          }
LABEL_21:
          uint64_t v25 = printfmt((uint64_t)v18, (char *)a2, v8, (char *)a4, v11, (char *)a6);
          if (v25)
          {
            uint64_t v26 = (char *)v25;
            if (*v25) {
              unsigned int v12 = fprintf(__stderrp, "%s", v25) >> 31;
            }
            else {
              unsigned int v12 = 0;
            }
            free(v18);
            free(v26);
            if ((v10 & 0x200) == 0) {
              return v12;
            }
            goto LABEL_28;
          }
          free(v18);
          return 3;
        }
      }
    }
LABEL_20:
    uint64_t v18 = strdup("label:severity:text:action:tag");
    if (!v18) {
      return 3;
    }
    goto LABEL_21;
  }
  unsigned int v12 = 0;
  if ((a1 & 0x200) == 0) {
    return v12;
  }
LABEL_28:
  uint64_t v27 = printfmt((uint64_t)"label:severity:text:action:tag", (char *)a2, v8, (char *)a4, v11, (char *)a6);
  if (!v27) {
    return 2;
  }
  uint64_t v28 = v27;
  if (*v27)
  {
    memset(&v36, 0, sizeof(v36));
    int v29 = stat("/var/log/console", &v36);
    if ((v36.st_mode & 0xF000) == 0x4000 && v29 == 0) {
      double v31 = "/var/log/console";
    }
    else {
      double v31 = "/dev/console";
    }
    int v32 = fopen(v31, "a");
    if (v32)
    {
      stat v33 = v32;
      fputs(v28, v32);
      fclose(v33);
    }
    else if (v12)
    {
      unsigned int v12 = 3;
    }
    else
    {
      unsigned int v12 = 2;
    }
  }
  free(v28);
  return v12;
}

unsigned char *printfmt(uint64_t a1, char *__sig, size_t a3, char *a4, char *a5, char *a6)
{
  int v9 = a3;
  if (__sig) {
    size_t v12 = j__strsignal_r((int)__sig, __sig, a3) + 32;
  }
  else {
    size_t v12 = 32;
  }
  unsigned int v13 = v9 - 1;
  if ((v9 - 1) <= 3) {
    v12 += j__strsignal_r((int)off_1E543E7E8[v13], __sig, a3);
  }
  if (a4) {
    v12 += j__strsignal_r((int)a4, __sig, a3);
  }
  if (a5) {
    v12 += j__strsignal_r((int)a5, __sig, a3);
  }
  if (a6) {
    v12 += j__strsignal_r((int)a6, __sig, a3);
  }
  sigaction v14 = malloc_type_malloc(v12, 0x967A92F5uLL);
  size_t v15 = v14;
  if (v14)
  {
    unsigned char *v14 = 0;
    unsigned int v16 = nextcomp(a1);
    if (v16)
    {
      int v19 = v16;
      do
      {
        int v20 = j__strncasecmp_l(v19, "label", v17, v18);
        if (!__sig || v20)
        {
          int v25 = j__strncasecmp_l(v19, "severity", v21, v22);
          if (v13 > 3 || v25)
          {
            int v28 = j__strncasecmp_l(v19, "text", v26, v27);
            if (!a4 || v28)
            {
              int v31 = j__strncasecmp_l(v19, "action", v29, v30);
              if (!a5 || v31)
              {
                int v34 = j__strncasecmp_l(v19, "tag", v32, v33);
                if (!a6 || v34) {
                  goto LABEL_31;
                }
                if (*v15) {
                  MEMORY[0x18C122F80](v15, " ", v12);
                }
                int v23 = v15;
                uint64_t v24 = a6;
              }
              else
              {
                if (*v15) {
                  MEMORY[0x18C122F80](v15, "\n", v12);
                }
                MEMORY[0x18C122F80](v15, "TO FIX: ", v12);
                int v23 = v15;
                uint64_t v24 = a5;
              }
            }
            else
            {
              if (*v15) {
                MEMORY[0x18C122F80](v15, ": ", v12);
              }
              int v23 = v15;
              uint64_t v24 = a4;
            }
          }
          else
          {
            if (*v15) {
              MEMORY[0x18C122F80](v15, ": ", v12);
            }
            uint64_t v24 = off_1E543E7E8[v13];
            int v23 = v15;
          }
        }
        else
        {
          if (*v15) {
            MEMORY[0x18C122F80](v15, ": ", v12);
          }
          int v23 = v15;
          uint64_t v24 = __sig;
        }
        MEMORY[0x18C122F80](v23, v24, v12);
LABEL_31:
        int v19 = nextcomp(a1);
      }
      while (v19);
    }
    if (*v15) {
      MEMORY[0x18C122F80](v15, "\n", v12);
    }
  }
  return v15;
}

char *nextcomp(uint64_t a1)
{
  if (nextcomp_lmsgverb)
  {
    unint64_t v1 = 0;
  }
  else
  {
    MEMORY[0x18C122F90](&nextcomp_lmsgverb, a1, 31);
    unint64_t v1 = &nextcomp_lmsgverb;
  }
  double result = strtok_r(v1, ":", &nextcomp_state);
  if (!result) {
    nextcomp_lmsgverb = 0;
  }
  return result;
}

uint64_t rangematch(const char *a1, unsigned int a2, size_t a3, char a4, void *a5, const char **a6, mbstate_t *a7, mbstate_t *a8, locale_t a9)
{
  size_t v12 = (const char *)a3;
  unsigned int v13 = a1;
  __darwin_ct_rune_t v95 = 0;
  uint64_t v94 = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  int v14 = *(unsigned __int8 *)a1;
  if (v14 == 94 || v14 == 33)
  {
    unsigned int v13 = a1 + 1;
    int v91 = 1;
  }
  else
  {
    int v91 = 0;
  }
  if ((a4 & 0x10) != 0)
  {
    if (a2 > 0x7F) {
      a2 = ___tolower_l(a2, a9);
    }
    else {
      a2 = _DefaultRuneLocale.__maplower[a2];
    }
  }
  LODWORD(v15) = 0;
  __darwin_ct_rune_t v96 = 0;
  int v16 = *(unsigned __int8 *)v13;
  locale_t v17 = (locale_t)&__global_locale;
  if (a9 != (locale_t)-1) {
    locale_t v17 = a9;
  }
  if (a9) {
    locale_t v18 = v17;
  }
  else {
    locale_t v18 = (locale_t)&__c_locale;
  }
  uint64_t v19 = a2;
  locale_t v87 = v18;
  int v88 = &_DefaultRuneLocale.__runetype[a2];
  int v20 = v13;
  while (1)
  {
    if (v16 == 47)
    {
      BOOL v21 = (a4 & 1) == 0;
      if ((a4 & 2) != 0) {
        return 0;
      }
    }
    else
    {
      if (!v16) {
        return 0xFFFFFFFFLL;
      }
      if ((a4 & 1) != 0 || v16 != 92)
      {
        if (v16 == 91)
        {
          unsigned int v22 = *((unsigned __int8 *)v20 + 1);
          unint64_t v15 = (char)v22;
          if (v22 <= 0x3D && ((1 << v22) & 0x2400400000000000) != 0)
          {
            int v89 = a8;
            __sig = (char *)v12;
            int v23 = (char *)(v20 + 2);
            uint64_t v24 = v20 + 2;
            do
            {
              uint64_t v25 = j__strncasecmp(v24, (const char *)v15, a3);
              if (!v25) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v26 = v25;
              int v27 = *(unsigned __int8 *)(v25 + 1);
              uint64_t v24 = (const char *)(v25 + 1);
            }
            while (v27 != 93);
            if (v15 == 61)
            {
              long long v41 = *((_OWORD *)&a7->_mbstateL + 5);
              long long v102 = *((_OWORD *)&a7->_mbstateL + 4);
              long long v103 = v41;
              long long v42 = *((_OWORD *)&a7->_mbstateL + 7);
              long long v104 = *((_OWORD *)&a7->_mbstateL + 6);
              long long v105 = v42;
              long long v43 = *((_OWORD *)&a7->_mbstateL + 1);
              long long v98 = *(_OWORD *)a7->__mbstate8;
              long long v99 = v43;
              long long v44 = *((_OWORD *)&a7->_mbstateL + 3);
              size_t v28 = v26 - (void)v23;
              long long v100 = *((_OWORD *)&a7->_mbstateL + 2);
              long long v101 = v44;
              int v45 = __collate_equiv_class(v23, v26 - (void)v23, a7, a9);
              if (v45 < 0) {
                return 0xFFFFFFFFLL;
              }
              int v48 = v45;
              if (v45)
              {
                int v20 = (const char *)(v26 + 2);
                if (*(unsigned char *)(v26 + 2) != 45 || *(unsigned char *)(v26 + 3) == 93 || !*(unsigned char *)(v26 + 3))
                {
                  size_t v12 = __sig;
                  size_t v49 = j__strsignal_r((int)__sig, v46, v47);
                  a8 = v89;
                  unint64_t v50 = __collate_equiv_match(v48, 0, 0, v19, __sig, v49, v89, &v94, a9);
                  if (!v50)
                  {
                    LODWORD(v15) = 61;
                    goto LABEL_43;
                  }
                  if (v50 != -1)
                  {
                    size_t v12 = &__sig[v94];
                    goto LABEL_118;
                  }
                }
                return 0xFFFFFFFFLL;
              }
              long long v55 = v103;
              *((_OWORD *)&a7->_mbstateL + 4) = v102;
              *((_OWORD *)&a7->_mbstateL + 5) = v55;
              long long v56 = v105;
              *((_OWORD *)&a7->_mbstateL + 6) = v104;
              *((_OWORD *)&a7->_mbstateL + 7) = v56;
              long long v57 = v99;
              *(_OWORD *)a7->__mbstate8 = v98;
              *((_OWORD *)&a7->_mbstateL + 1) = v57;
              long long v58 = v101;
              *((_OWORD *)&a7->_mbstateL + 2) = v100;
              *((_OWORD *)&a7->_mbstateL + 3) = v58;
              goto LABEL_93;
            }
            if (v15 == 46)
            {
              size_t v28 = v26 - (void)v23;
LABEL_93:
              unint64_t v59 = __collate_collating_symbol(&v106, 0x18uLL, v23, v28, a7, a9);
              if (v59 + 1 < 2) {
                return 0xFFFFFFFFLL;
              }
              int v20 = (const char *)(v26 + 2);
              if (v59 < 2)
              {
                __darwin_ct_rune_t v96 = v106;
                BOOL v21 = (a4 & 1) == 0;
                size_t v12 = __sig;
                a8 = v89;
                if (v106) {
                  goto LABEL_34;
                }
                goto LABEL_32;
              }
              *(_DWORD *)int v97 = 0;
              a8 = v89;
              if (*v20 == 45 && *(unsigned char *)(v26 + 3) && *(unsigned char *)(v26 + 3) != 93) {
                return 0xFFFFFFFFLL;
              }
              if (v19 == v106)
              {
                long long v60 = *(_OWORD *)v89->__mbstate8;
                long long v61 = *((_OWORD *)&v89->_mbstateL + 1);
                long long v62 = *((_OWORD *)&v89->_mbstateL + 3);
                long long v100 = *((_OWORD *)&v89->_mbstateL + 2);
                long long v101 = v62;
                long long v98 = v60;
                long long v99 = v61;
                long long v63 = *((_OWORD *)&v89->_mbstateL + 4);
                long long v64 = *((_OWORD *)&v89->_mbstateL + 5);
                long long v65 = *((_OWORD *)&v89->_mbstateL + 7);
                long long v104 = *((_OWORD *)&v89->_mbstateL + 6);
                long long v105 = v65;
                long long v102 = v63;
                long long v103 = v64;
                unint64_t v66 = v59 - 1;
                size_t v12 = __sig;
                double v67 = &v107;
                while (1)
                {
                  size_t v68 = mbrtowc_l((__int32 *)v97, v12, 6uLL, v89, a9);
                  uint64_t v94 = v68;
                  if (v68 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    int v69 = *(_DWORD *)v97;
                  }
                  else
                  {
                    int v89 = 0;
                    int v69 = *(unsigned __int8 *)v12;
                    *(_DWORD *)int v97 = v69;
                    uint64_t v94 = 1;
                    size_t v68 = 1;
                  }
                  if (v69 != *v67) {
                    break;
                  }
                  v12 += v68;
                  ++v67;
                  if (!--v66) {
                    goto LABEL_118;
                  }
                }
                long long v70 = v98;
                long long v71 = v99;
                long long v72 = v101;
                a8 = v89;
                *((_OWORD *)&v89->_mbstateL + 2) = v100;
                *((_OWORD *)&v89->_mbstateL + 3) = v72;
                *(_OWORD *)v89->__mbstate8 = v70;
                *((_OWORD *)&v89->_mbstateL + 1) = v71;
                long long v73 = v102;
                long long v74 = v103;
                long long v75 = v105;
                *((_OWORD *)&v89->_mbstateL + 6) = v104;
                *((_OWORD *)&v89->_mbstateL + 7) = v75;
                *((_OWORD *)&v89->_mbstateL + 4) = v73;
                *((_OWORD *)&v89->_mbstateL + 5) = v74;
              }
              size_t v12 = __sig;
              goto LABEL_43;
            }
            int v20 = (const char *)(v26 + 2);
            if (*(unsigned char *)(v26 + 2) == 45 && *(unsigned char *)(v26 + 3) != 93 && *(unsigned char *)(v26 + 3)) {
              return 0xFFFFFFFFLL;
            }
            if (v26 - (uint64_t)v23 > 14) {
              return 0xFFFFFFFFLL;
            }
            MEMORY[0x18C122F90](v97, v23, v26 - (void)v23 + 1);
            wctype_t v51 = wctype(v97);
            if (!v51) {
              return 0xFFFFFFFFLL;
            }
            wctype_t v52 = v51;
            if (v19 > 0x7F)
            {
              size_t v12 = __sig;
              a8 = v89;
              if (v19 < 0x100) {
                int v54 = *(_DWORD *)(*(void *)(*((void *)v87 + 166) + 120) + 4 * v19 + 60);
              }
              else {
                int v54 = ___runetype_l(v19, a9);
              }
              uint64_t v53 = (int)(v54 & v52);
            }
            else
            {
              a8 = v89;
              uint64_t v53 = *v88 & v51;
              size_t v12 = __sig;
            }
            if (!v53) {
              goto LABEL_43;
            }
LABEL_118:
            int v76 = 1;
LABEL_119:
            unsigned int v78 = 0;
            while (1)
            {
              int v79 = *(unsigned __int8 *)v20;
              if (!*v20) {
                break;
              }
              if (v79 == 93)
              {
                *a5 = v20 + 1;
                *a6 = v12;
                return v76 != v91;
              }
              if (v78 == (char)v79)
              {
                int v81 = *(unsigned __int8 *)++v20;
                if (v81 == 93)
                {
                  ++v20;
                  unsigned int v78 = 0;
                }
              }
              else if (!v78 && (char)v79 == 91)
              {
                int v82 = (unsigned __int8 *)(v20 + 2);
                unsigned int v84 = *(unsigned __int8 *)++v20;
                unsigned int v83 = v84;
                if (((1 << v84) & 0x2400400000000000) != 0)
                {
                  unsigned int v85 = v83;
                }
                else
                {
                  int v82 = (unsigned __int8 *)v20;
                  unsigned int v85 = 0;
                }
                if (v83 > 0x3D)
                {
                  unsigned int v78 = 0;
                }
                else
                {
                  int v20 = (const char *)v82;
                  unsigned int v78 = v85;
                }
              }
              else
              {
                size_t v80 = mbrtowc_l(&v96, v20, 6uLL, a7, a9);
                if (v80 > 0xFFFFFFFFFFFFFFFDLL) {
                  return 0xFFFFFFFFLL;
                }
                v20 += v80;
              }
            }
            return 0xFFFFFFFFLL;
          }
        }
        BOOL v21 = (a4 & 1) == 0;
      }
      else
      {
        ++v20;
        BOOL v21 = 1;
      }
    }
LABEL_32:
    size_t v29 = mbrtowc_l(&v96, v20, 6uLL, a7, a9);
    if (v29 > 0xFFFFFFFFFFFFFFFDLL) {
      return 0xFFFFFFFFLL;
    }
    v20 += v29;
LABEL_34:
    if ((a4 & 0x10) != 0)
    {
      if (v96 > 0x7F) {
        __darwin_rune_t v30 = ___tolower_l(v96, a9);
      }
      else {
        __darwin_rune_t v30 = _DefaultRuneLocale.__maplower[v96];
      }
      __darwin_ct_rune_t v96 = v30;
    }
    if (*v20 == 45)
    {
      int v31 = *((unsigned __int8 *)v20 + 1);
      if (v20[1])
      {
        if (v31 != 93) {
          break;
        }
      }
    }
    if (v96 == v19) {
      goto LABEL_118;
    }
LABEL_43:
    __darwin_ct_rune_t v96 = 0;
    int v16 = *(unsigned __int8 *)v20;
    if (v16 == 93 && v20 > v13)
    {
      int v76 = 0;
      goto LABEL_119;
    }
  }
  if (v21 && v31 == 92) {
    size_t v32 = v20 + 2;
  }
  else {
    size_t v32 = v20 + 1;
  }
  size_t v33 = mbrtowc_l(&v95, v32, 6uLL, a7, a9);
  if (v33 > 0xFFFFFFFFFFFFFFFDLL) {
    return 0xFFFFFFFFLL;
  }
  int v20 = &v32[v33];
  int v34 = v95;
  if (v95 != 91)
  {
    if (!v95 || v15 == 61) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_63;
  }
  int v35 = *(unsigned __int8 *)v20;
  unint64_t v15 = (char)v35;
  if (v35 != 46 && v35 != 61)
  {
LABEL_63:
    if (v15 == 58) {
      return 0xFFFFFFFFLL;
    }
LABEL_64:
    if ((a4 & 0x10) != 0)
    {
      if (v34 > 0x7F) {
        int v34 = ___tolower_l(v34, a9);
      }
      else {
        int v34 = _DefaultRuneLocale.__maplower[v34];
      }
      __darwin_ct_rune_t v95 = v34;
    }
    if (*(unsigned char *)(*((void *)a9 + 165) + 64))
    {
      if (v96 <= (int)v19 && (int)v19 <= v34) {
        goto LABEL_118;
      }
    }
    else if ((int)__collate_range_cmp(v96, v19, a9) <= 0 && (int)__collate_range_cmp(v19, v95, a9) < 1)
    {
      goto LABEL_118;
    }
    goto LABEL_43;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (v15 != 58 && v15 != 61)
  {
    int v90 = a8;
    stat v36 = v12;
    BOOL v37 = v20 + 1;
    while (1)
    {
      uint64_t v38 = j__strncasecmp(v37, (const char *)v15, a3);
      if (!v38) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v39 = v38;
      int v40 = *(unsigned __int8 *)(v38 + 1);
      BOOL v37 = (const char *)(v38 + 1);
      if (v40 == 93)
      {
        if (__collate_collating_symbol(&v106, 0x18uLL, (char *)v20 + 1, v39 - (void)(v20 + 1), a7, a9) != 1) {
          return 0xFFFFFFFFLL;
        }
        int v20 = (const char *)(v39 + 2);
        int v34 = v106;
        __darwin_ct_rune_t v95 = v106;
        size_t v12 = v36;
        a8 = v90;
        goto LABEL_64;
      }
    }
  }
  return result;
}

key_t ftok(const char *a1, int a2)
{
  memset(&v4, 0, sizeof(v4));
  if (stat(a1, &v4) < 0) {
    return -1;
  }
  else {
    return LOWORD(v4.st_ino) | (a2 << 24) | (LOBYTE(v4.st_dev) << 16);
  }
}

int cgetset(const char *a1)
{
  if (a1)
  {
    toprecleuint64_t n = j__strsignal_r((int)a1, v1, v2);
    stat v4 = (const char *)malloc_type_malloc(topreclen + 1, 0xD42BBA7AuLL);
    toprec = (uint64_t)v4;
    if (v4)
    {
      gottoprec = 0;
      j__strnstr(v4, a1, v5);
      return 0;
    }
    else
    {
      *__error() = 12;
      return -1;
    }
  }
  else
  {
    if (toprec) {
      free((void *)toprec);
    }
    int result = 0;
    toprec = 0;
    toprecleuint64_t n = 0;
  }
  return result;
}

char *__cdecl cgetcap(char *result, const char *a2, int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v3 = *result;
        if (!*result) {
          return 0;
        }
        ++result;
        if (v3 == 58)
        {
          int v4 = *(unsigned __int8 *)a2;
          int v5 = *result;
          if (v4 == v5 && v5 != 0)
          {
            uint64_t v7 = a2 + 1;
            do
            {
              int v8 = *++result;
              int v5 = v8;
              int v9 = *(unsigned __int8 *)v7++;
              int v4 = v9;
            }
            while (v9 == v5 && v5 != 0);
          }
          if (!v4) {
            break;
          }
        }
      }
      if (v5 == 64) {
        return 0;
      }
      if (a3 != 58) {
        break;
      }
      if (!v5 || v5 == 58) {
        return result;
      }
    }
  }
  while ((char)v5 != a3);
  int v11 = *++result;
  if (v11 == 64) {
    return 0;
  }
  return result;
}

int cgetent(char **a1, char **a2, const char *a3)
{
  return getent(a1, &v4, (const char **)a2, 0xFFFFFFFFLL, a3, 0);
}

uint64_t getent(char **a1, int *a2, const char **a3, uint64_t a4, const char *a5, int a6)
{
  if (a6 > 32) {
    return 4294967293;
  }
  if (a6 || !toprec || cgetmatch((const char *)toprec, a5))
  {
    __int16 v10 = (char *)malloc_type_malloc(0x400uLL, 0x940EBFDDuLL);
    if (v10)
    {
      int v11 = v10;
      size_t v12 = *a3;
      if (!*a3) {
        goto LABEL_33;
      }
      unint64_t v13 = (unint64_t)(v10 + 1024);
LABEL_9:
      if ((a4 & 0x80000000) != 0)
      {
        snprintf(__str, 0x100uLL, "%s.db", v12);
        unint64_t v15 = dbopen(__str, 0, 0, DB_HASH, 0);
        if (v15)
        {
          unint64_t v50 = v15;
          free(v11);
          wctype_t v51 = strdup(a5);
          if (v51)
          {
            int v54 = v51;
            size_t v68 = 0;
            uint64_t v69 = 0;
            v70[0] = v51;
            for (unint64_t i = (void *)j__strsignal_r((int)v51, v52, v53); ; unint64_t i = (void *)(v69 - 1))
            {
              v70[1] = i;
              int v56 = ((uint64_t (*)(DB *, void **, unsigned char **, void))v50->get)(v50, v70, &v68, 0);
              if (v56 == -1)
              {
                uint64_t v6 = 4294967294;
                goto LABEL_80;
              }
              if (v56 == 1) {
                break;
              }
              long long v57 = v68;
              long long v58 = v68 + 1;
              if (*v68 != 2)
              {
                free(v54);
                uint64_t v6 = *v57 == 1;
                int v11 = strdup(v58);
                if ((((uint64_t (*)(DB *))v50->close)(v50) & 0x80000000) != 0) {
                  goto LABEL_91;
                }
                if (v11)
                {
                  *a2 = j__strsignal_r((int)v11, v59, v60);
                  *a1 = v11;
                  return v6;
                }
                goto LABEL_88;
              }
              v70[0] = v68 + 1;
            }
            uint64_t v6 = 0xFFFFFFFFLL;
LABEL_80:
            free(v54);
          }
          else
          {
            uint64_t v6 = 4294967294;
          }
          ((void (*)(DB *))v50->close)(v50);
          return v6;
        }
        uint64_t v14 = open_NOCANCEL();
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_32;
        }
        int v67 = 1;
      }
      else
      {
        lseek(a4, 0, 0);
        int v67 = 0;
        uint64_t v14 = a4;
      }
      int v16 = v70;
      locale_t v17 = v11;
      locale_t v18 = v70;
      while (1)
      {
        uint64_t v19 = v17;
        if (v18 >= v16)
        {
          int NOCANCEL = read_NOCANCEL();
          int v21 = NOCANCEL;
          if (NOCANCEL <= 0)
          {
            if ((a4 & 0x80000000) != 0) {
              close_NOCANCEL();
            }
            if ((v21 & 0x80000000) == 0)
            {
              *locale_t v17 = 0;
              uint64_t v14 = 0xFFFFFFFFLL;
LABEL_32:
              uint64_t v26 = a3[1];
              ++a3;
              size_t v12 = v26;
              a4 = v14;
              if (!v26)
              {
LABEL_33:
                free(v11);
                return 0xFFFFFFFFLL;
              }
              goto LABEL_9;
            }
LABEL_91:
            free(v11);
            return 4294967294;
          }
          locale_t v18 = v70;
          int v16 = (void **)((char *)v70 + NOCANCEL);
        }
        int v23 = *(unsigned __int8 *)v18;
        locale_t v18 = (void **)((char *)v18 + 1);
        char v22 = v23;
        if (v23 == 10)
        {
          if (v17 <= v11 || (--v17, *(v19 - 1) != 92))
          {
            *uint64_t v19 = 0;
            locale_t v17 = v11;
            if (*v11)
            {
              locale_t v17 = v11;
              if (*v11 != 35)
              {
                locale_t v17 = v11;
                if (!cgetmatch(v11, a5))
                {
                  a4 = v14;
                  goto LABEL_36;
                }
              }
            }
          }
        }
        else
        {
          *v17++ = v22;
          if ((unint64_t)(v19 + 1) >= v13)
          {
            size_t v24 = v13 - (void)v11 + 1024;
            uint64_t v25 = (char *)reallocf(v11, v24);
            if (!v25)
            {
              *__error() = 12;
              if ((a4 & 0x80000000) != 0) {
                close_NOCANCEL();
              }
              return 4294967294;
            }
            unint64_t v13 = (unint64_t)&v25[v24];
            locale_t v17 = &v25[v17 - v11];
            int v11 = v25;
          }
        }
      }
    }
LABEL_88:
    *__error() = 12;
    return 4294967294;
  }
  int v27 = (const char *)malloc_type_malloc(topreclen + 1024, 0xB0DCE9B3uLL);
  if (!v27) {
    goto LABEL_88;
  }
  int v11 = (char *)v27;
  int v67 = 0;
  uint64_t v19 = &j__strnstr(v27, (const char *)toprec, v28)[topreclen];
  unint64_t v13 = (unint64_t)(v19 + 1025);
LABEL_36:
  long long v62 = v19 + 1;
  LODWORD(v68) = 0;
  v70[0] = 0;
  size_t v29 = cgetcap(v11, "tc", 61);
  if (!v29)
  {
    int v31 = 0;
LABEL_61:
    if (v67) {
      close_NOCANCEL();
    }
    *a2 = v62 + ~v11;
    if (v13 <= (unint64_t)v62 || (int v11 = (char *)reallocf(v11, v62 - v11)) != 0)
    {
      *a1 = v11;
      return v31 != 0;
    }
    goto LABEL_88;
  }
  __darwin_rune_t v30 = v29;
  int v31 = 0;
  uint64_t v32 = (a6 + 1);
  while (1)
  {
    size_t v33 = v30;
    while (1)
    {
      int v34 = v33;
      int v35 = *v33;
      if (!*v33) {
        break;
      }
      ++v33;
      if (v35 == 58)
      {
        *int v34 = 0;
        break;
      }
    }
    uint64_t v36 = getent(v70, &v68, a3, a4, v30, v32);
    if (!v36)
    {
      BOOL v37 = v30 - 3;
      int v38 = v37 - v33;
      goto LABEL_50;
    }
    uint64_t v6 = v36;
    if ((int)v36 <= -2) {
      break;
    }
    if (v36 == -1)
    {
      *(v33 - 1) = 58;
      __darwin_rune_t v30 = cgetcap(v33 - 1, "tc", 61);
      int v31 = 1;
      if (!v30) {
        goto LABEL_61;
      }
    }
    else
    {
      BOOL v37 = v30 - 3;
      int v38 = v37 - v33;
      if (v36 == 1) {
        int v31 = 1;
      }
LABEL_50:
      uint64_t v39 = v70[0];
      do
      {
        int v40 = *v39;
        if (!*v39) {
          break;
        }
        ++v39;
      }
      while (v40 != 58);
      int v41 = v68 + LODWORD(v70[0]) - v39;
      long long v42 = &v39[v41];
      if (*(v42 - 1) != 58)
      {
        *long long v42 = 58;
        ++v41;
      }
      int v43 = v41 + v38;
      long long v44 = v62;
      uint64_t v65 = v43;
      if ((uint64_t)(v13 - (void)v62) <= v43)
      {
        size_t v45 = v13 - (void)v11 + v43 + 1024;
        unsigned int v46 = (char *)reallocf(v11, v45);
        if (!v46)
        {
          *__error() = 12;
          if (v67) {
            close_NOCANCEL();
          }
          uint64_t v6 = 4294967294;
          int v11 = (char *)v70[0];
          goto LABEL_68;
        }
        unint64_t v13 = (unint64_t)&v46[v45];
        long long v44 = &v46[v62 - v11];
        BOOL v37 = &v46[v37 - v11];
        LODWORD(v33) = v46 + v33 - v11;
        int v11 = v46;
      }
      size_t v47 = &v37[v41];
      int v48 = (int)v33;
      size_t v49 = v44;
      j__mkostemp(v47, v48);
      j__mkostemp(v37, (int)v39);
      long long v62 = &v49[v65];
      free(v70[0]);
      __darwin_rune_t v30 = cgetcap(v47 - 1, "tc", 61);
      if (!v30) {
        goto LABEL_61;
      }
    }
  }
  if (v67) {
    close_NOCANCEL();
  }
LABEL_68:
  free(v11);
  return v6;
}

int cgetmatch(const char *a1, const char *a2)
{
  if (a2 && *a2)
  {
LABEL_3:
    size_t v2 = a2;
    while (1)
    {
      int v3 = *(unsigned __int8 *)v2;
      if (!*v2) {
        break;
      }
      int v4 = *(unsigned __int8 *)a1++;
      ++v2;
      if (v4 != v3) {
        goto LABEL_10;
      }
    }
    int v5 = *(unsigned __int8 *)a1;
    if (!*a1 || v5 == 58 || v5 == 124) {
      return 0;
    }
LABEL_10:
    --a1;
    while (1)
    {
      int v6 = *(unsigned __int8 *)a1;
      if (!*a1 || v6 == 58) {
        break;
      }
      ++a1;
      if (v6 == 124) {
        goto LABEL_3;
      }
    }
  }
  return -1;
}

int cgetfirst(char **a1, char **a2)
{
  if (pfp)
  {
    fclose((FILE *)pfp);
    pfp = 0;
  }
  dbp = 0;
  gottoprec = 0;
  slash = 0;

  return cgetnext(a1, a2);
}

int cgetclose(void)
{
  if (pfp)
  {
    fclose((FILE *)pfp);
    pfp = 0;
  }
  dbp = 0;
  gottoprec = 0;
  slash = 0;
  return 0;
}

int cgetnext(char **a1, char **a2)
{
  size_t v29 = 0;
  uint64_t v4 = __locale_key;
  int v5 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = &__global_locale;
  }
  uint64_t v7 = (char **)dbp;
  if (!dbp)
  {
    dbp = (uint64_t)a2;
    uint64_t v7 = a2;
  }
  int v8 = (FILE *)pfp;
  if (pfp || (int v8 = fopen(*v7, "r"), (pfp = (uint64_t)v8) != 0))
  {
    int v28 = 0;
    int v9 = (char *)toprec;
    if (toprec) {
      BOOL v10 = gottoprec == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      if (v6 == (void *)-1) {
        int v11 = &__global_locale;
      }
      else {
        int v11 = v6;
      }
      do
      {
        int v9 = fgetln(v8, &v29);
        int v8 = (FILE *)pfp;
        if (v9 || !pfp)
        {
          BOOL v13 = 0;
          v9[v29 - 1] = 0;
          if (v29 != 1)
          {
            uint64_t v14 = &_DefaultRuneLocale;
            if (*v9 < 0) {
              uint64_t v14 = *(_RuneLocale **)(v11[166] + 120);
            }
            int v15 = *v9;
            int v16 = v14->__runetype[*v9] & 0x4000;
            if (v15 != 58 && v16 == 0 && v15 != 35 && slash == 0)
            {
              slash = v9[v29 - 2] == 92;
              goto LABEL_38;
            }
            BOOL v13 = v9[v29 - 2] == 92;
          }
          slash = v13;
        }
        else
        {
          if (ferror((FILE *)pfp))
          {
LABEL_63:
            int v26 = *__error();
            fclose((FILE *)pfp);
            pfp = 0;
            dbp = 0;
            gottoprec = 0;
            slash = 0;
            *__error() = v26;
            goto LABEL_64;
          }
          fclose(v8);
          pfp = 0;
          size_t v12 = *(const char **)(dbp + 8);
          dbp += 8;
          if (!v12)
          {
            dbp = 0;
            gottoprec = 0;
            goto LABEL_66;
          }
          int v8 = fopen(v12, "r");
          pfp = (uint64_t)v8;
          if (!v8)
          {
            dbp = 0;
            gottoprec = 0;
            LODWORD(v12) = -1;
LABEL_66:
            slash = 0;
            return (int)v12;
          }
        }
        int v9 = (char *)toprec;
      }
      while (!toprec || (gottoprec & 1) != 0);
    }
    gottoprec = 1;
LABEL_38:
    uint64_t v19 = v30;
    while (1)
    {
      while (1)
      {
        int v20 = *v9;
        if (!*v9 || v20 == 92) {
          break;
        }
        if (v20 == 58)
        {
          uint64_t v23 = 0;
          *(_WORD *)uint64_t v19 = 58;
          while (1)
          {
            int v24 = v30[v23];
            if (!v30[v23] || v24 == 58 || v24 == 124) {
              break;
            }
            v31[v23++] = v24;
          }
          v31[v23] = 0;
          int v25 = getent(a1, &v28, (const char **)a2, 0xFFFFFFFFLL, v31, 0);
          if ((v25 + 3) <= 1)
          {
            if (pfp)
            {
              fclose((FILE *)pfp);
              pfp = 0;
            }
            dbp = 0;
            gottoprec = 0;
            slash = 0;
          }
          LODWORD(v12) = v25 + 1;
          return (int)v12;
        }
        *v19++ = v20;
        ++v9;
      }
      int v9 = fgetln((FILE *)pfp, &v29);
      int v21 = (FILE *)pfp;
      if (!v9 && pfp != 0) {
        break;
      }
      v9[v29 - 1] = 0;
    }
    if (ferror((FILE *)pfp)) {
      goto LABEL_63;
    }
    fclose(v21);
    pfp = 0;
  }
  dbp = 0;
  gottoprec = 0;
  slash = 0;
LABEL_64:
  LODWORD(v12) = -1;
  return (int)v12;
}

int cgetstr(char *a1, const char *a2, char **a3)
{
  uint64_t v4 = cgetcap(a1, a2, 61);
  if (!v4) {
    return -1;
  }
  int v5 = (unsigned __int8 *)v4;
  int v6 = (char *)malloc_type_malloc(0x64uLL, 0xC13B5E1FuLL);
  if (v6)
  {
    uint64_t v7 = v6;
LABEL_4:
    int v8 = 100;
    while (1)
    {
      unsigned int v9 = *v5;
      if (v9 <= 0x5D) {
        break;
      }
      if (v9 != 94) {
        goto LABEL_22;
      }
      unsigned int v9 = v5[1];
      if (v9 == 63)
      {
        *uint64_t v7 = 127;
        v5 += 2;
        goto LABEL_25;
      }
      if (!v5[1] || v9 == 58)
      {
LABEL_49:
        *uint64_t v7 = 0;
        int64_t v16 = v7 - v6;
        int v17 = v16 + 1;
        if (v8 == 1 || (int v6 = (char *)reallocf(v6, v16 + 1)) != 0)
        {
          int v15 = v17 - 1;
          *a3 = v6;
          return v15;
        }
        return -2;
      }
      v5 += 2;
      LOBYTE(v9) = v9 & 0x1F;
LABEL_23:
      *uint64_t v7 = v9;
LABEL_25:
      ++v7;
      if (!--v8)
      {
        int64_t v14 = v7 - v6;
        int v6 = (char *)reallocf(v6, v7 - v6 + 100);
        uint64_t v7 = &v6[v14];
        int v15 = -2;
        if (v6) {
          goto LABEL_4;
        }
        return v15;
      }
    }
    if (v9 == 92)
    {
      int v10 = (char)v5[1];
      if (!v5[1]) {
        goto LABEL_49;
      }
      LOBYTE(v9) = v5[1];
      if (v9 == 58) {
        goto LABEL_49;
      }
      if ((v10 & 0xF8) == 0x30)
      {
        uint64_t v11 = 0;
        char v12 = 0;
        uint64_t v13 = (uint64_t)(v5 + 4);
        while (1)
        {
          char v12 = 8 * v12 + v9 - 48;
          if (v11 == 2) {
            break;
          }
          LOBYTE(v9) = v5[v11++ + 2];
          if ((v9 & 0xF8) != 0x30)
          {
            uint64_t v13 = (uint64_t)&v5[v11 + 1];
            break;
          }
        }
        *uint64_t v7 = v12;
        int v5 = (unsigned __int8 *)v13;
        goto LABEL_25;
      }
      v5 += 2;
      if (v10 > 97)
      {
        if (v10 <= 109)
        {
          switch(v10)
          {
            case 'b':
LABEL_32:
              *uint64_t v7 = 8;
              break;
            case 'c':
LABEL_41:
              *uint64_t v7 = 58;
              break;
            case 'e':
LABEL_42:
              *uint64_t v7 = 27;
              break;
            case 'f':
LABEL_43:
              *uint64_t v7 = 12;
              break;
            default:
              goto LABEL_23;
          }
          goto LABEL_25;
        }
        switch(v10)
        {
          case 'n':
LABEL_44:
            *uint64_t v7 = 10;
            goto LABEL_25;
          case 'r':
LABEL_45:
            *uint64_t v7 = 13;
            goto LABEL_25;
          case 't':
LABEL_40:
            *uint64_t v7 = 9;
            goto LABEL_25;
        }
      }
      else
      {
        if (v10 <= 77)
        {
          switch(v10)
          {
            case 'B':
              goto LABEL_32;
            case 'C':
              goto LABEL_41;
            case 'E':
              goto LABEL_42;
            case 'F':
              goto LABEL_43;
            default:
              goto LABEL_23;
          }
        }
        switch(v10)
        {
          case 'N':
            goto LABEL_44;
          case 'R':
            goto LABEL_45;
          case 'T':
            goto LABEL_40;
        }
      }
      goto LABEL_23;
    }
    if (!*v5 || v9 == 58) {
      goto LABEL_49;
    }
LABEL_22:
    ++v5;
    goto LABEL_23;
  }
  *__error() = 12;
  return -2;
}

int cgetustr(char *a1, const char *a2, char **a3)
{
  uint64_t v4 = cgetcap(a1, a2, 61);
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  int v6 = (char *)malloc_type_malloc(0x64uLL, 0xA83E6FC3uLL);
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = v6;
LABEL_4:
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = v5[v9];
      if (!v5[v9] || v10 == 58) {
        break;
      }
      v7[v9++] = v10;
      if (v9 == 100)
      {
        uint64_t v11 = v7 - v8 + v9;
        int v8 = (char *)reallocf(v8, v11 + 100);
        uint64_t v7 = &v8[v11];
        v5 += v9;
        int result = -2;
        if (v8) {
          goto LABEL_4;
        }
        return result;
      }
    }
    v7[v9] = 0;
    uint64_t v13 = v8;
    if (v9 == 99 || (uint64_t v13 = (char *)reallocf(v8, v7 - v8 + v9 + 1)) != 0)
    {
      int result = v7 - v8 + v9;
      *a3 = v13;
      return result;
    }
  }
  else
  {
    *__error() = 12;
  }
  return -2;
}

int cgetnum(char *a1, const char *a2, uint64_t *a3)
{
  uint64_t v4 = cgetcap(a1, a2, 35);
  if (!v4) {
    return -1;
  }
  if (*v4 == 48)
  {
    int v5 = v4 + 2;
    int v6 = *++v4;
    BOOL v7 = (v6 | 0x20) == 120;
    if ((v6 | 0x20) == 0x78) {
      int v8 = 16;
    }
    else {
      int v8 = 8;
    }
    if (v7) {
      uint64_t v4 = v5;
    }
  }
  else
  {
    int v8 = 10;
  }
  uint64_t v10 = 0;
  while (1)
  {
    int v11 = *v4;
    if ((v11 - 48) >= 0xA)
    {
      if ((v11 - 97) >= 6)
      {
        if ((v11 - 65) > 5) {
          break;
        }
        int v12 = -55;
      }
      else
      {
        int v12 = -87;
      }
    }
    else
    {
      int v12 = -48;
    }
    int v13 = v12 + v11;
    if (v13 >= v8) {
      break;
    }
    uint64_t v10 = v10 * v8 + v13;
    ++v4;
  }
  int result = 0;
  *a3 = v10;
  return result;
}

int gethostname(char *a1, size_t a2)
{
  size_t v6 = a2;
  *(void *)int v8 = 0xA00000001;
  if (a2 > 0x100)
  {
    if (sysctl(v8, 2u, a1, &v6, 0, 0) != -1) {
      return 0;
    }
  }
  else
  {
    size_t v5 = 257;
    if (sysctl(v8, 2u, v7, &v5, 0, 0) != -1)
    {
      j__strtod(a1, v7);
      int result = 0;
      a1[a2 - 1] = 0;
      return result;
    }
  }
  if (*__error() == 12) {
    *__error() = 63;
  }
  return -1;
}

char *getlogin(void)
{
  pthread_mutex_lock(&__logname_mutex);
  uint64_t v0 = getlogin_basic(&v2);
  pthread_mutex_unlock(&__logname_mutex);
  return v0;
}

unsigned char *getlogin_basic(int *a1)
{
  int result = (unsigned char *)__logname;
  if (!__logname)
  {
    int result = malloc_type_calloc(1uLL, 0xFFuLL, 0xB6832FCAuLL);
    __logname = (uint64_t)result;
    if (!result)
    {
      int v3 = 12;
LABEL_10:
      *a1 = v3;
      return result;
    }
  }
  if (!*result && (__getlogin() & 0x80000000) != 0)
  {
    uint64_t v4 = __error();
    int result = 0;
    int v3 = *v4;
    goto LABEL_10;
  }
  *a1 = 0;
  if (*(unsigned char *)__logname) {
    return (unsigned char *)__logname;
  }
  else {
    return 0;
  }
}

int getlogin_r(char *a1, size_t a2)
{
  int v6 = 0;
  pthread_mutex_lock(&__logname_mutex);
  getlogin_basic(&v6);
  int v4 = v6;
  if (!v6)
  {
    if (MEMORY[0x18C122F90](a1, __logname, a2) <= a2) {
      int v4 = 0;
    }
    else {
      int v4 = 34;
    }
  }
  pthread_mutex_unlock(&__logname_mutex);
  return v4;
}

int getmntinfo(statfs **a1, int a2)
{
  int result = getmntinfo_internal((uint64_t)&getmntinfo_vars, a2);
  *a1 = (statfs *)getmntinfo_vars;
  return result;
}

int getpeereid(int a1, uid_t *a2, gid_t *a3)
{
  memset(v8, 0, 76);
  socklen_t v7 = 76;
  int result = getsockopt(a1, 0, 1, v8, &v7);
  if (!result)
  {
    if (LODWORD(v8[0]))
    {
      *__error() = 22;
      return -1;
    }
    else
    {
      int result = 0;
      gid_t v6 = HIDWORD(v8[0]);
      *a2 = DWORD1(v8[0]);
      *a3 = v6;
    }
  }
  return result;
}

int glob_b(const char *a1, int a2, void *a3, glob_t *a4)
{
  a4->gl_flags = a2 & 0x7FFFFEFF | 0x80000000;
  a4->gl_errfunc = (int (__cdecl *)(const char *, int))a3;
  return __glob((uint64_t)a1, (uint64_t)a4);
}

uint64_t globexp1(uint64_t a1, uint64_t a2)
{
  int v2 = (char *)MEMORY[0x1F41887A8](a1, a2);
  uint64_t v6 = v5;
  socklen_t v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = (uint64_t)v2;
  uint64_t v10 = 0;
  do
  {
    uint64_t v11 = *(void *)&v2[v10];
    if (v11 == 123)
    {
      if ((*(unsigned char *)(v3 + 25) & 0x10) != 0)
      {
        unint64_t v13 = (*v4)++;
        if (v13 >= 0x80)
        {
          *__error() = 7;
          return 0xFFFFFFFFLL;
        }
      }
      int64_t v14 = v34;
      if (v10)
      {
        j__mkdtempat_np((int)v34, v2);
        int64_t v14 = &v34[v10];
      }
      int v15 = 0;
      *(void *)int64_t v14 = 0;
      int64_t v16 = (uint64_t *)(v9 + v10 + 8);
      for (unint64_t i = v16; ; ++i)
      {
        uint64_t v18 = *i;
        if (*i <= 122)
        {
          if (v18 == 91)
          {
            uint64_t v19 = i;
            do
            {
              uint64_t v21 = v19[1];
              ++v19;
              uint64_t v20 = v21;
            }
            while (v21 != 93 && v20 != 0);
            if (v20) {
              unint64_t i = v19;
            }
          }
          else if (!v18)
          {
            return glob0(v9, v8);
          }
        }
        else if (v18 == 123)
        {
          ++v15;
        }
        else if (v18 == 125)
        {
          if (!v15)
          {
            if (v16 > i) {
              return 0;
            }
            int v23 = 0;
            int v24 = v16;
            while (2)
            {
              uint64_t v25 = *v24;
              if (*v24 > 122)
              {
                if (v25 == 123)
                {
                  ++v23;
                  goto LABEL_59;
                }
                if (v25 != 125) {
                  goto LABEL_59;
                }
                if (v23)
                {
                  --v23;
                  goto LABEL_59;
                }
              }
              else
              {
                if (v25 != 44)
                {
                  if (v25 == 91)
                  {
                    int v26 = v24;
                    do
                    {
                      uint64_t v28 = v26[1];
                      ++v26;
                      uint64_t v27 = v28;
                    }
                    while (v28 != 93 && v27 != 0);
                    if (v27) {
                      int v24 = v26;
                    }
                  }
LABEL_59:
                  if (++v24 > i) {
                    return 0;
                  }
                  continue;
                }
                if (v23) {
                  goto LABEL_59;
                }
              }
              break;
            }
            __darwin_rune_t v30 = v14;
            if (v16 < v24)
            {
              __darwin_rune_t v30 = v14;
              do
              {
                uint64_t v31 = *v16++;
                *v30++ = v31;
              }
              while (v16 < v24);
            }
            uint64_t v32 = i + 1;
            do
            {
              uint64_t v33 = *v32++;
              *v30++ = v33;
            }
            while (v33);
            uint64_t result = globexp1(v34, v8, v7, v6);
            if (result) {
              return result;
            }
            int64_t v16 = v24 + 1;
            goto LABEL_59;
          }
          --v15;
        }
      }
    }
    v10 += 8;
  }
  while (v11);

  return glob0((uint64_t)v2, v3);
}

uint64_t g_stat(__int32 *a1, stat *a2, uint64_t a3, _xlocale *a4)
{
  if (__gl_g_Ctoc(a1, v7, 0x405uLL, a4))
  {
    *__error() = 63;
    return 0xFFFFFFFFLL;
  }
  else if ((*(unsigned char *)(a3 + 24) & 0x40) != 0)
  {
    return (*(uint64_t (**)(char *, stat *))(a3 + 80))(v7, a2);
  }
  else
  {
    return stat(v7, a2);
  }
}

uint64_t err_aborted(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = __error();
    if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v4 + 16))(v4, a2, *v5)) {
      return 4294967294;
    }
  }
  uint64_t v6 = *(unsigned int (**)(uint64_t, void))(a1 + 40);
  if (v6 && (socklen_t v7 = __error(), v6(a2, *v7))) {
    return 4294967294;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 24) << 29 >> 31) & 0xFFFFFFFE;
  }
}

uint64_t jrand48(unsigned __int16 a1[3])
{
  int64_t v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  return (int)(v1 >> 16);
}

void lcong48(unsigned __int16 a1[7])
{
  _rand48_seed = *(unsigned int *)a1 | ((unint64_t)a1[2] << 32);
  _rand48_mult = *(unsigned int *)(a1 + 3) | ((unint64_t)a1[5] << 32);
  _rand48_add = a1[6];
}

uint64_t lockf_NOCANCEL(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      uint64_t result = __fcntl_nocancel();
      break;
    case 3:
      uint64_t result = __fcntl_nocancel();
      if (result != -1)
      {
        if (getpid())
        {
          uint64_t v3 = __error();
          int v4 = 35;
          goto LABEL_4;
        }
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t v3 = __error();
      int v4 = 22;
LABEL_4:
      int *v3 = v4;
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t mrand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  return (int)(_rand48_seed >> 16);
}

int nice(int a1)
{
  *__error() = 0;
  int v2 = getpriority(0, 0);
  if (v2 == -1 && *__error()) {
    return -1;
  }
  if (v2 + a1 <= 19) {
    int v3 = a1;
  }
  else {
    int v3 = 19 - v2;
  }
  if (setpriority(0, 0, v3 + v2) == -1)
  {
    if (*__error() == 13) {
      *__error() = 1;
    }
    return -1;
  }

  return getpriority(0, 0);
}

uint64_t nrand48(unsigned __int16 a1[3])
{
  unint64_t v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  return (v1 >> 17) & 0x7FFFFFFF;
}

uint64_t _filldir(uint64_t a1, int a2)
{
  int v4 = getpagesize();
  if ((v4 & 0x3FF) != 0) {
    int v5 = 1024;
  }
  else {
    int v5 = v4;
  }
  int v6 = openat_NOCANCEL();
  if (v6 == -1) {
    return 0;
  }
  int v7 = v6;
  if (!a2 || (off_t v8 = lseek(*(_DWORD *)a1, 0, 1), v8 != -1) && lseek(v7, v8, 0) != -1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    while (1)
    {
      if (v12 > 1023)
      {
        int64_t v14 = v10;
      }
      else
      {
        v11 += v5;
        unint64_t v13 = (char *)reallocf(v9, v11);
        if (!v13) {
          break;
        }
        uint64_t v9 = v13;
        v12 += v5;
        int64_t v14 = &v13[v11 - v12];
      }
      int v15 = __getdirentries64();
      if (v15 < 0) {
        break;
      }
      uint64_t v10 = &v14[v15];
      v12 -= v15;
      if (!v15)
      {
        close_NOCANCEL();
        int64_t v16 = 0;
        *(void *)(a1 + 24) = v9;
        while (1)
        {
          if (v9 >= v14)
          {
            int v17 = 0;
            uint64_t v18 = v9;
          }
          else
          {
            int v17 = 0;
            uint64_t v18 = v9;
            do
            {
              if ((v18 & 3) != 0) {
                break;
              }
              int64_t v19 = *((unsigned __int16 *)v18 + 8);
              if (!*((_WORD *)v18 + 8) || v14 + 1 - v18 < v19) {
                break;
              }
              if (*(void *)v18)
              {
                if (v16) {
                  v16[v17] = (uint64_t)v18;
                }
                ++v17;
              }
              v18 += v19;
            }
            while (v18 < v14);
          }
          if (v16) {
            break;
          }
          int64_t v16 = (uint64_t *)malloc_type_malloc(8 * (v17 + 1), 0x2004093837F09uLL);
          if (!v16) {
            goto LABEL_45;
          }
        }
        mergesort(v16, v17, 8uLL, (int (__cdecl *)(const void *, const void *))opendir_compar);
        v16[v17] = 0;
        uint64_t v26 = *v16;
        if (*v16)
        {
          uint64_t v27 = 0;
          uint64_t v28 = v16 + 1;
          do
          {
            uint64_t v29 = v27;
            uint64_t v27 = v26;
            if (v29)
            {
              int v30 = j__strncasecmp_l((const char *)(v26 + 21), (const char *)(v29 + 21), v24, v25);
              uint64_t v27 = v26;
              if (!v30)
              {
                *(void *)uint64_t v26 = 0;
                uint64_t v27 = v29;
              }
            }
            if (*(unsigned char *)(v26 + 20) == 14 && (*(unsigned char *)(a1 + 56) & 1) != 0) {
              *(void *)uint64_t v26 = 0;
            }
            uint64_t v31 = *v28++;
            uint64_t v26 = v31;
          }
          while (v31);
        }
        free(v16);
LABEL_45:
        *(_DWORD *)(a1 + 32) = v11;
        *(void *)(a1 + 16) = &v18[-*(void *)(a1 + 24)];
        return 1;
      }
    }
  }
  int v21 = *__error();
  close_NOCANCEL();
  char v22 = __error();
  uint64_t result = 0;
  *char v22 = v21;
  return result;
}

uint64_t opendir_compar(uint64_t a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  return j__strncasecmp_l((const char *)(*(void *)a1 + 21), (const char *)(*(void *)a2 + 21), a3, a4);
}

uint64_t pause_NOCANCEL()
{
  sigset_t v1 = 0;
  sigprocmask(0, 0, &v1);
  return sigsuspend_NOCANCEL();
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  if (off_1E911B938)
  {
    ((void (*)(const char *))off_1E911B938)(a1);
    if (off_1E911B938) {
      ((void (*)(const char *))off_1E911B938)(a2);
    }
  }
  pid_t v20 = 0;
  *(_OWORD *)__argv = 0u;
  long long v22 = 0u;
  posix_spawn_file_actions_t v19 = 0;
  if (!a2) {
    goto LABEL_9;
  }
  int v6 = j__strncasecmp_l(a2, "r+", v2, v3);
  if (!v6)
  {
    if ((socketpair(1, 1, 0, &v23) & 0x80000000) == 0)
    {
      a2 = "r+";
      goto LABEL_13;
    }
    return 0;
  }
  int v7 = *(unsigned __int8 *)a2;
  if (v7 != 119 && v7 != 114 || a2[1])
  {
LABEL_9:
    off_t v8 = 0;
    *__error() = 22;
    return v8;
  }
  if (pipe(&v23) < 0) {
    return 0;
  }
LABEL_13:
  if (*a2 == 114)
  {
    off_t v8 = fdopen(v23, a2);
    if (v8) {
      goto LABEL_15;
    }
LABEL_19:
    close_NOCANCEL();
    close_NOCANCEL();
    return v8;
  }
  off_t v8 = fdopen(v24, a2);
  if (!v8) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v9 = malloc_type_malloc(0x18uLL, 0x102004062D53EE8uLL);
  if (!v9)
  {
    fclose(v8);
    close_NOCANCEL();
    return 0;
  }
  uint64_t v10 = v9;
  int v11 = posix_spawn_file_actions_init(&v19);
  if (v11)
  {
    int v12 = v11;
    fclose(v8);
    close_NOCANCEL();
    free(v10);
    off_t v8 = 0;
    *__error() = v12;
  }
  else
  {
    if (*a2 == 114)
    {
      posix_spawn_file_actions_addclose(&v19, v23);
      if (v24 != 1)
      {
        posix_spawn_file_actions_adddup2(&v19, v24, 1);
        posix_spawn_file_actions_addclose(&v19, v24);
      }
      if (!v6) {
        posix_spawn_file_actions_adddup2(&v19, 1, 0);
      }
    }
    else
    {
      if (v23)
      {
        posix_spawn_file_actions_adddup2(&v19, v23, 0);
        posix_spawn_file_actions_addclose(&v19, v23);
      }
      posix_spawn_file_actions_addclose(&v19, v24);
    }
    pthread_mutex_lock(&__popen_pidlist_mutex);
    for (uint64_t i = __popen_pidlist; i; uint64_t i = *(void *)i)
      posix_spawn_file_actions_addclose(&v19, *(_DWORD *)(i + 16));
    __argv[0] = "sh";
    __argv[1] = "-c";
    long long v22 = (unint64_t)a1;
    int v15 = _NSGetEnviron();
    int v16 = posix_spawn(&v20, "/bin/sh", &v19, 0, __argv, *v15);
    pthread_mutex_unlock(&__popen_pidlist_mutex);
    posix_spawn_file_actions_destroy(&v19);
    if (v16)
    {
      if (v16 == 35 || v16 == 12)
      {
        fclose(v8);
        close_NOCANCEL();
        free(v10);
        off_t v8 = 0;
        *__error() = v16;
        return v8;
      }
      pid_t v20 = -1;
    }
    if (*a2 == 114) {
      int v18 = v23;
    }
    else {
      int v18 = v24;
    }
    *((_DWORD *)v10 + 4) = v18;
    close_NOCANCEL();
    v10[1] = v8;
    *((_DWORD *)v10 + 5) = v20;
    pthread_mutex_lock(&__popen_pidlist_mutex);
    void *v10 = __popen_pidlist;
    __popen_pidlist = (uint64_t)v10;
    pthread_mutex_unlock(&__popen_pidlist_mutex);
    fwide(v8, -1);
  }
  return v8;
}

int pclose(FILE *a1)
{
  if (off_1E911B930) {
    ((void (*)(FILE *, uint64_t))off_1E911B930)(a1, 152);
  }
  pthread_mutex_lock(&__popen_pidlist_mutex);
  size_t v2 = 0;
  int v3 = &__popen_pidlist;
  int v4 = (pid_t *)&__popen_pidlist;
  do
  {
    int v4 = *(pid_t **)v4;
    if (!v4)
    {
      pthread_mutex_unlock(&__popen_pidlist_mutex);
      return -1;
    }
    int v5 = (uint64_t *)v2;
    size_t v2 = v4;
  }
  while (*((FILE **)v4 + 1) != a1);
  if (v5) {
    int v3 = v5;
  }
  uint64_t *v3 = *(void *)*v3;
  pthread_mutex_unlock(&__popen_pidlist_mutex);
  fclose(a1);
  if (v4[5] < 0)
  {
    free(v4);
    return 32512;
  }
  else
  {
    int v8 = 0;
    do
      pid_t v6 = wait4(v4[5], &v8, 0, 0);
    while (v6 == -1 && *__error() == 4);
    free(v4);
    if (v6 == -1) {
      return -1;
    }
    else {
      return v8;
    }
  }
}

void psignal(int a1, const char *a2)
{
  if (a1 > 0x1F)
  {
    int v3 = "Unknown signal";
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = sys_siglist[a1];
    if (!a2) {
      goto LABEL_7;
    }
  }
  if (*a2)
  {
    j__strsignal_r((int)a2, (char *)a2, v2);
    write_NOCANCEL();
    write_NOCANCEL();
  }
LABEL_7:
  j__strsignal_r((int)v3, (char *)a2, v2);
  write_NOCANCEL();

  write_NOCANCEL();
}

char *__cdecl readpassphrase(const char *a1, char *a2, size_t a3, int a4)
{
  int __sig = (int)a1;
  memset(&v44, 0, sizeof(v44));
  memset(&v43[1], 0, 72);
  v42.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v42.sa_masuint64_t k = 0;
  v41.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v41.sa_masuint64_t k = 0;
  v40.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v40.sa_masuint64_t k = 0;
  v39.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v39.sa_masuint64_t k = 0;
  v38.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v38.sa_masuint64_t k = 0;
  v37.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v37.sa_masuint64_t k = 0;
  v36.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v36.sa_masuint64_t k = 0;
  v35.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v35.sa_masuint64_t k = 0;
  v34.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v34.sa_masuint64_t k = 0;
  v33.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v33.sa_masuint64_t k = 0;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v5 = *(_xlocale **)(StatusReg + 8 * __locale_key);
  if (!v5) {
    int v5 = (_xlocale *)&__global_locale;
  }
  int v30 = v5;
  v43[0] = 0;
  if (a3)
  {
    char v6 = a4;
    uint64_t v7 = 0;
    int v8 = &a2[a3 - 1];
    while (1)
    {
      do
        signo[v7++] = 0;
      while (v7 != 32);
      if ((v6 & 0x20) != 0) {
        goto LABEL_11;
      }
      int v9 = open_NOCANCEL();
      if (v9 == -1) {
        break;
      }
      int v10 = v9;
      if (!tcgetattr(v9, (termios *)&v43[1]))
      {
        termios v44 = *(termios *)&v43[1];
        int v12 = a2;
        if ((v6 & 1) == 0) {
          v44.c_lflag &= 0xFFFFFFFFFFFFFFE7;
        }
        if (v44.c_cc[18] != 255) {
          v44.c_cc[18] = -1;
        }
        tcsetattr(v10, 18, &v44);
        char v32 = 0;
        int v11 = v10;
        goto LABEL_13;
      }
      char v32 = 0;
      int v11 = v10;
LABEL_12:
      int v12 = a2;
      memset(v44.c_cc, 0, 40);
      memset(&v44, 0, 24);
      v44.c_lflag = 8;
      memset(&v43[1], 0, 24);
      memset(&v43[33], 0, 40);
      *(void *)&v43[25] = 8;
LABEL_13:
      v42.__sigaction_u.__sa_handleunsigned int r = (void (__cdecl *)(int))handler;
      *(void *)&v42.sa_masuint64_t k = 0;
      sigaction(14, &v42, &v41);
      sigaction(1, &v42, &v39);
      sigaction(2, &v42, &v40);
      sigaction(13, &v42, &v33);
      sigaction(3, &v42, &v38);
      sigaction(15, &v42, &v37);
      sigaction(18, &v42, &v36);
      sigaction(21, &v42, &v35);
      sigaction(22, &v42, &v34);
      if ((v6 & 0x20) == 0)
      {
        j__strsignal_r(__sig, v13, v14);
        write_NOCANCEL();
      }
      uint64_t NOCANCEL = read_NOCANCEL();
      if (NOCANCEL == 1)
      {
        int v12 = a2;
        while (1)
        {
          if (v43[0] == 10 || v43[0] == 13)
          {
            uint64_t NOCANCEL = 1;
            goto LABEL_42;
          }
          if (v12 < v8) {
            break;
          }
LABEL_39:
          uint64_t v20 = read_NOCANCEL();
          if (v20 != 1)
          {
            uint64_t NOCANCEL = v20;
            goto LABEL_42;
          }
        }
        if ((v6 & 0x10) != 0)
        {
          int v17 = v43[0] & 0x7F;
          v43[0] &= ~0x80u;
        }
        else
        {
          int v17 = v43[0];
          if ((v43[0] & 0x80) != 0)
          {
            LOWORD(v18) = ___runetype_l(v43[0], v30);
LABEL_27:
            LOBYTE(v19) = v43[0];
            if ((v18 & 0x100) != 0)
            {
              if ((v6 & 4) != 0)
              {
                if ((v43[0] & 0x80000000) != 0) {
                  LOBYTE(v19) = ___tolower_l(v43[0], v30);
                }
                else {
                  __darwin_rune_t v19 = _DefaultRuneLocale.__maplower[v43[0]];
                }
                v43[0] = v19;
              }
              if ((v6 & 8) != 0)
              {
                if ((v19 & 0x80) != 0) {
                  LOBYTE(v19) = ___toupper_l((char)v19, v30);
                }
                else {
                  __darwin_rune_t v19 = _DefaultRuneLocale.__mapupper[(char)v19];
                }
                v43[0] = v19;
              }
            }
            *v12++ = v19;
            goto LABEL_39;
          }
        }
        __uint32_t v18 = _DefaultRuneLocale.__runetype[v17];
        goto LABEL_27;
      }
LABEL_42:
      *int v12 = 0;
      int v29 = *__error();
      if ((v44.c_lflag & 8) == 0) {
        write_NOCANCEL();
      }
      if (j__mkdtemp((char *)&v44))
      {
        while (tcsetattr(v11, 18, (const termios *)&v43[1]) == -1 && *__error() == 4 && !dword_1E911B780)
          ;
      }
      sigaction(14, &v41, 0);
      sigaction(1, &v39, 0);
      sigaction(2, &v40, 0);
      sigaction(3, &v38, 0);
      sigaction(13, &v33, 0);
      sigaction(15, &v37, 0);
      sigaction(18, &v36, 0);
      sigaction(21, &v35, 0);
      sigaction(22, &v34, 0);
      if ((v32 & 1) == 0) {
        close_NOCANCEL();
      }
      uint64_t v21 = 0;
      int v22 = 0;
      do
      {
        if (signo[v21])
        {
          pid_t v23 = getpid();
          kill(v23, v21);
          int v24 = ((1 << v21) & 0x640000) != 0 ? 1 : v22;
          if (v21 <= 0x16) {
            int v22 = v24;
          }
        }
        ++v21;
      }
      while (v21 != 32);
      uint64_t v7 = 0;
      if (!v22)
      {
        if (v29) {
          *__error() = v29;
        }
        if (NOCANCEL == -1) {
          return 0;
        }
        else {
          return a2;
        }
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v26 = __error();
      uint64_t result = 0;
      int v27 = 25;
      goto LABEL_72;
    }
LABEL_11:
    int v11 = 0;
    char v32 = 1;
    goto LABEL_12;
  }
  uint64_t v26 = __error();
  uint64_t result = 0;
  int v27 = 22;
LABEL_72:
  *uint64_t v26 = v27;
  return result;
}

uint64_t handler(uint64_t result)
{
  signo[(int)result] = 1;
  return result;
}

char *__cdecl getpass(const char *a1)
{
  size_t v2 = (char *)getpass_buf;
  if (getpass_buf
    || (result = (char *)malloc_type_malloc(0x81uLL, 0x5A93915FuLL), size_t v2 = result, (getpass_buf = (uint64_t)result) != 0))
  {
    int v4 = readpassphrase(a1, v2, 0x81uLL, 0);
    uint64_t result = (char *)getpass_buf;
    if (!v4) {
      *(unsigned char *)getpass_unint64_t buf = 0;
    }
  }
  return result;
}

int scandir(const char *a1, dirent ***a2, int (__cdecl *a3)(const dirent *), int (__cdecl *a4)(const dirent **, const dirent **))
{
  uint64_t v7 = opendir(a1);
  if (!v7) {
    goto LABEL_20;
  }
  int v8 = v7;
  int v9 = malloc_type_malloc(0x100uLL, 0x2004093837F09uLL);
  if (!v9)
  {
LABEL_19:
    free(v9);
    closedir(v8);
LABEL_20:
    LODWORD(v10) = -1;
    return v10;
  }
  size_t v10 = 0;
  uint64_t v11 = -1;
  unint64_t v12 = 32;
  while (1)
  {
    unint64_t v13 = readdir(v8);
    if (!v13) {
      break;
    }
    size_t v14 = v13;
    if (!a3 || ((unsigned int (*)(dirent *))a3)(v13))
    {
      int v15 = (char *)malloc_type_malloc(((v14->d_namlen + 4) & 0x1FFFC) + 24, 0xD5DB3AF2uLL);
      if (!v15) {
        goto LABEL_17;
      }
      int v16 = v15;
      *(void *)int v15 = v14->d_ino;
      v15[20] = v14->d_type;
      *((_WORD *)v15 + 8) = v14->d_reclen;
      *((_WORD *)v15 + 9) = v14->d_namlen;
      j__mkostemp(v15 + 21, v14 + 21);
      if (v10 >= v12)
      {
        int v17 = malloc_type_realloc(v9, 16 * v12, 0x2004093837F09uLL);
        if (!v17)
        {
          free(v16);
LABEL_17:
          if (v10)
          {
            do
              free(*((void **)v9 + v11--));
            while (v11 != -1);
          }
          goto LABEL_19;
        }
        v12 *= 2;
        int v9 = v17;
      }
      *((void *)v9 + v10++) = v16;
      ++v11;
    }
  }
  closedir(v8);
  if (a4 && v10) {
    qsort(v9, v10, 8uLL, (int (__cdecl *)(const void *, const void *))a4);
  }
  *a2 = (dirent **)v9;
  return v10;
}

unsigned __int16 *__cdecl seed48(unsigned __int16 a1[3])
{
  seed48_sseed = _rand48_seed;
  word_1E911B7B4 = WORD2(_rand48_seed);
  _rand48_seed = *(unsigned int *)a1 | ((unint64_t)a1[2] << 32);
  _rand48_mult = 0x5DEECE66DLL;
  _rand48_add = 11;
  return (unsigned __int16 *)&seed48_sseed;
}

void seekdir(DIR *a1, uint64_t a2)
{
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  _seekdir((unint64_t)a1, a2);

  pthread_mutex_unlock(p_dd_lock);
}

int sethostname(const char *a1, int a2)
{
  uint64_t v3 = 0xA00000001;
  if (sysctl((int *)&v3, 2u, 0, 0, (void *)a1, a2) == -1) {
    return -1;
  }
  else {
    return 0;
  }
}

mode_t getmode(const void *a1, mode_t a2)
{
  int v2 = a2 & 0x4049;
  for (uint64_t i = (char *)a1 + 2; ; i += 2)
  {
    int v4 = *((char *)i - 2);
    if (v4 > 102) {
      break;
    }
    if (v4 == 43) {
      goto LABEL_7;
    }
    if (v4 == 45)
    {
      *(_DWORD *)&a2 = a2 & ~(unsigned __int16)*i;
      continue;
    }
    if (v4 != 88) {
      return a2;
    }
    if (v2)
    {
LABEL_7:
      int v5 = (unsigned __int16)*i;
LABEL_33:
      *(_DWORD *)&a2 = v5 | a2;
      continue;
    }
LABEL_34:
    ;
  }
  if (v4 == 103)
  {
    __int16 v6 = a2 >> 3;
LABEL_14:
    int v7 = v6 & 7;
    if ((*((unsigned char *)i - 1) & 1) == 0) {
      goto LABEL_22;
    }
    if ((*((unsigned char *)i - 1) & 2) != 0) {
      int v8 = 7;
    }
    else {
      int v8 = v6 & 7;
    }
    if ((*((unsigned char *)i - 1) & 0x10) != 0)
    {
      *(_DWORD *)&a2 = a2 & ~((unsigned __int16)*i & (v8 << 6));
      if ((*((unsigned char *)i - 1) & 4) == 0)
      {
LABEL_20:
        if ((*((unsigned char *)i - 1) & 8) == 0) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    else if ((*((unsigned char *)i - 1) & 4) == 0)
    {
      goto LABEL_20;
    }
    *(_DWORD *)&a2 = a2 & ~((unsigned __int16)*i & (8 * v8));
    if ((*((unsigned char *)i - 1) & 8) == 0)
    {
LABEL_22:
      if ((*((unsigned char *)i - 1) & 2) == 0) {
        goto LABEL_34;
      }
      if ((*((unsigned char *)i - 1) & 0x10) != 0)
      {
        *(_DWORD *)&a2 = (unsigned __int16)*i & (v7 << 6) | a2;
        if ((*((unsigned char *)i - 1) & 4) == 0)
        {
LABEL_25:
          if ((*((unsigned char *)i - 1) & 8) == 0) {
            goto LABEL_34;
          }
LABEL_32:
          int v5 = (unsigned __int16)(*i & v7);
          goto LABEL_33;
        }
      }
      else if ((*((unsigned char *)i - 1) & 4) == 0)
      {
        goto LABEL_25;
      }
      *(_DWORD *)&a2 = (unsigned __int16)*i & (8 * v7) | a2;
      if ((*((unsigned char *)i - 1) & 8) == 0) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }
LABEL_21:
    *(_DWORD *)&a2 = a2 & ~(unsigned __int16)(*i & v8);
    goto LABEL_22;
  }
  LOBYTE(v6) = a2;
  if (v4 == 111) {
    goto LABEL_14;
  }
  if (v4 == 117)
  {
    __int16 v6 = a2 >> 6;
    goto LABEL_14;
  }
  return a2;
}

void *__cdecl setmode(const char *a1)
{
  if (!*a1) {
    return 0;
  }
  sigset_t v1 = a1;
  sigset_t v32 = 0;
  sigset_t v33 = -1;
  sigprocmask(1, &v33, &v32);
  mode_t v2 = umask(0);
  umask(v2);
  sigprocmask(3, &v32, 0);
  uint64_t v3 = (char *)malloc_type_malloc(0x20uLL, 0x994EF0B7uLL);
  int v4 = v3;
  if (v3)
  {
    __endptunsigned int r = 0;
    if (*(unsigned __int8 *)v1 - 48 < 0xA)
    {
      unint64_t v5 = strtol(v1, &__endptr, 8);
      if (*__endptr || (v5 & 0x8000000000000000) != 0 || v5 >= 0x1000)
      {
        int v27 = v4;
        goto LABEL_81;
      }
      *int v4 = 45;
      *((_WORD *)v4 + 1) = 4095;
      v4[4] = 43;
      *((_WORD *)v4 + 3) = v5;
      v4[8] = 0;
      return v4;
    }
    int v6 = 0;
    unint64_t v7 = (unint64_t)(v3 + 24);
    __int16 v8 = ~v2;
    int v31 = 8;
    int v9 = v3;
    __int16 v29 = ~v2;
LABEL_9:
    unsigned int v10 = 0;
    while (1)
    {
      int v11 = *v1;
      if (v11 > 110)
      {
        if (v11 == 111)
        {
          v10 |= 7u;
        }
        else
        {
          if (v11 != 117)
          {
LABEL_20:
            if (v10) {
              __int16 v12 = v10;
            }
            else {
              __int16 v12 = v8;
            }
            __int16 v30 = v12;
LABEL_24:
            if (v11 <= 0x3Du && ((1 << v11) & 0x2000280000000000) != 0)
            {
              uint64_t v13 = 0;
              int v14 = (char)v11;
              if ((char)v11 == 61) {
                int v6 = 0;
              }
              while (2)
              {
                int v15 = 0;
LABEL_29:
                uint64_t v16 = v13;
                do
                {
                  uint64_t v13 = v16;
                  int v18 = *++v1;
                  int v17 = v18;
                  uint64_t v16 = 73;
                }
                while (v18 == 88);
                switch(v17)
                {
                  case 'g':
                  case 'o':
                  case 'u':
                    if (!v15) {
                      goto LABEL_44;
                    }
                    if ((unint64_t)v4 < v7) {
                      goto LABEL_43;
                    }
                    uint64_t v20 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                    if (!v20) {
                      goto LABEL_79;
                    }
                    int v4 = &v20[v4 - v9];
                    unint64_t v7 = (unint64_t)&v20[4 * v31 + 8];
                    int v9 = v20;
                    v31 += 4;
                    __int16 v8 = v29;
LABEL_43:
                    int v4 = (char *)addcmd((uint64_t)v4, v14, v10, v15, v8);
LABEL_44:
                    if (v14 == 61) {
                      int v6 = 1;
                    }
                    if (v14 != 43 || !v13) {
                      goto LABEL_52;
                    }
                    if ((unint64_t)v4 < v7) {
                      goto LABEL_51;
                    }
                    uint64_t v21 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                    if (!v21) {
                      goto LABEL_79;
                    }
                    int v4 = &v21[v4 - v9];
                    unint64_t v7 = (unint64_t)&v21[4 * v31 + 8];
                    int v9 = v21;
                    v31 += 4;
LABEL_51:
                    *int v4 = 88;
                    *((_WORD *)v4 + 1) = v13 & v30;
                    v4 += 4;
                    uint64_t v13 = 0;
LABEL_52:
                    if ((unint64_t)v4 < v7) {
                      goto LABEL_55;
                    }
                    int v22 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                    if (!v22) {
                      goto LABEL_79;
                    }
                    int v4 = &v22[v4 - v9];
                    unint64_t v7 = (unint64_t)&v22[4 * v31 + 8];
                    int v9 = v22;
                    v31 += 4;
LABEL_55:
                    int v4 = (char *)addcmd((uint64_t)v4, *v1, v10, v14, v8);
                    continue;
                  case 'r':
                    v15 |= 0x124u;
                    goto LABEL_29;
                  case 's':
                    int v19 = v15 | 0xC00;
                    goto LABEL_35;
                  case 't':
                    int v19 = v15 | 0x200;
LABEL_35:
                    if (v10 - 1 >= 7) {
                      int v15 = v19;
                    }
                    goto LABEL_29;
                  case 'w':
                    v15 |= 0x92u;
                    goto LABEL_29;
                  case 'x':
                    v15 |= 0x49u;
                    goto LABEL_29;
                  default:
                    BOOL v24 = v14 != 61 || v6 != 0;
                    if (v15 || !v24)
                    {
                      if (v14 == 61) {
                        int v6 = 1;
                      }
                      if ((unint64_t)v4 >= v7)
                      {
                        uint64_t v25 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                        if (!v25) {
                          goto LABEL_79;
                        }
                        int v4 = &v25[v4 - v9];
                        unint64_t v7 = (unint64_t)&v25[4 * v31 + 8];
                        int v9 = v25;
                        v31 += 4;
                        __int16 v8 = v29;
                      }
                      int v4 = (char *)addcmd((uint64_t)v4, v14, v10, v15, v8);
                      if (!v13) {
                        goto LABEL_76;
                      }
                    }
                    else if (!v13)
                    {
                      goto LABEL_76;
                    }
                    if ((unint64_t)v4 >= v7)
                    {
                      uint64_t v26 = (char *)malloc_type_realloc(v9, 4 * (v31 + 4), 0x100004052888210uLL);
                      if (!v26) {
                        goto LABEL_79;
                      }
                      int v4 = &v26[v4 - v9];
                      unint64_t v7 = (unint64_t)&v26[4 * v31 + 8];
                      int v9 = v26;
                      v31 += 4;
                    }
                    *int v4 = 88;
                    *((_WORD *)v4 + 1) = v13 & v30;
                    v4 += 4;
LABEL_76:
                    int v11 = *(unsigned __int8 *)v1;
                    if (!*v1)
                    {
                      *int v4 = 0;
                      _sm_compress_mode((unsigned __int8 *)v9);
                      return v9;
                    }
                    if (v11 != 44) {
                      goto LABEL_24;
                    }
                    ++v1;
                    break;
                }
                goto LABEL_9;
              }
            }
LABEL_79:
            int v27 = v9;
LABEL_81:
            free(v27);
            return 0;
          }
          v10 |= 0x9C0u;
        }
      }
      else if (v11 == 97)
      {
        unsigned int v10 = 4095;
      }
      else
      {
        if (v11 != 103) {
          goto LABEL_20;
        }
        v10 |= 0x438u;
      }
      ++v1;
    }
  }
  return v4;
}

uint64_t addcmd(uint64_t a1, int a2, unsigned int a3, int a4, __int16 a5)
{
  if (a2 <= 87)
  {
    if (a2 != 43 && a2 != 45)
    {
      if (a2 != 61) {
        return a1 + 4;
      }
      *(unsigned char *)a1 = 45;
      if (a3) {
        __int16 v5 = a3;
      }
      else {
        __int16 v5 = 4095;
      }
      *(_WORD *)(a1 + 2) = v5;
      a1 += 4;
      LOBYTE(a2) = 43;
    }
    goto LABEL_13;
  }
  if (a2 > 110)
  {
    if (a2 != 111 && a2 != 117) {
      return a1 + 4;
    }
    goto LABEL_19;
  }
  if (a2 == 88)
  {
LABEL_13:
    *(unsigned char *)a1 = a2;
    if (a3) {
      __int16 v6 = a3;
    }
    else {
      __int16 v6 = a5;
    }
    *(_WORD *)(a1 + 2) = v6 & a4;
    return a1 + 4;
  }
  if (a2 != 103) {
    return a1 + 4;
  }
LABEL_19:
  *(unsigned char *)a1 = a2;
  if (a3) {
    int v7 = (a3 >> 4) & 0x10 | (a3 >> 3) & 4 | (8 * ((a3 >> 2) & 1));
  }
  else {
    LOBYTE(v7) = 28;
  }
  if (a3) {
    __int16 v8 = -1;
  }
  else {
    __int16 v8 = a5;
  }
  *(unsigned char *)(a1 + 1) = v7;
  *(_WORD *)(a1 + 2) = v8;
  switch(a4)
  {
    case '=':
      char v9 = v7 | 3;
      goto LABEL_31;
    case '-':
      char v9 = v7 | 1;
      goto LABEL_31;
    case '+':
      char v9 = v7 | 2;
LABEL_31:
      *(unsigned char *)(a1 + 1) = v9;
      break;
  }
  return a1 + 4;
}

unsigned __int8 *_sm_compress_mode(unsigned __int8 *result)
{
  sigset_t v1 = result;
  do
  {
    while (1)
    {
      int v2 = *v1;
      if ((v2 - 43) > 0x2D || ((1 << (v2 - 43)) & 0x200000000005) == 0) {
        break;
      }
      int v4 = 0;
      int v5 = 0;
      int v6 = 0;
      while (1)
      {
        if (v2 == 43)
        {
          int v7 = *((unsigned __int16 *)v1 + 1);
          v4 |= v7;
          v5 &= ~v7;
          goto LABEL_12;
        }
        if (v2 != 88) {
          break;
        }
        v6 |= *((unsigned __int16 *)v1 + 1) & ~v4;
LABEL_14:
        int v8 = v1[4];
        v1 += 4;
        int v2 = v8;
      }
      if (v2 == 45)
      {
        int v7 = *((unsigned __int16 *)v1 + 1);
        v5 |= v7;
        v4 &= ~v7;
LABEL_12:
        v6 &= ~v7;
        goto LABEL_14;
      }
      if (v5)
      {
        *(_WORD *)uint64_t result = 45;
        *((_WORD *)result + 1) = v5;
        result += 4;
      }
      if (v4)
      {
        *(_WORD *)uint64_t result = 43;
        *((_WORD *)result + 1) = v4;
        result += 4;
      }
      if (v6)
      {
        *(_WORD *)uint64_t result = 88;
        *((_WORD *)result + 1) = v6;
        result += 4;
      }
    }
    int v9 = *(_DWORD *)v1;
    v1 += 4;
    *(_DWORD *)uint64_t result = v9;
    result += 4;
  }
  while (v2);
  return result;
}

void setprogname(const char *a1)
{
  sigset_t v1 = (char *)a1;
  int v2 = strrchr((char *)a1, 47);
  if (v2) {
    sigset_t v1 = v2 + 1;
  }
  *_NSGetProgname() = v1;
  MEMORY[0x18C122F90](v7, v1, 33);
  *(void *)int v6 = 0x3E00000001;
  size_t v5 = j__strsignal_r((int)v7, v3, v4);
  sysctl(v6, 2u, 0, 0, v7, v5);
}

int siginterrupt(int a1, int a2)
{
  v8.__sigaction_u.__sa_handleunsigned int r = 0;
  *(void *)&v8.sa_masuint64_t k = 0;
  int result = sigaction(a1, 0, &v8);
  if ((result & 0x80000000) == 0)
  {
    int v5 = 1 << (a1 - 1);
    if (a2)
    {
      if (a1 > 32) {
        int v5 = 0;
      }
      _sigintr |= v5;
      int v6 = v8.sa_flags & 0xFFFFFFFD;
    }
    else
    {
      if (a1 <= 32) {
        int v7 = ~v5;
      }
      else {
        int v7 = -1;
      }
      _sigintr &= v7;
      int v6 = v8.sa_flags | 2;
    }
    v8.sa_flags = v6;
    return sigaction(a1, &v8, 0);
  }
  return result;
}

StringList *sl_init(void)
{
  uint64_t v0 = (char *)malloc_type_malloc(0x18uLL, 0x1080040468F112EuLL);
  if (!v0) {
    sl_init_cold_1();
  }
  sigset_t v1 = (StringList *)v0;
  *(_OWORD *)(v0 + 8) = xmmword_18AA00330;
  int v2 = (char **)malloc_type_malloc(0xA0uLL, 0x10040436913F5uLL);
  v1->sl_stunsigned int r = v2;
  if (!v2) {
    sl_init_cold_1();
  }
  return v1;
}

int sl_add(StringList *a1, char *a2)
{
  size_t sl_max = a1->sl_max;
  sl_cuunsigned int r = a1->sl_cur;
  sl_stunsigned int r = a1->sl_str;
  if (sl_cur == sl_max - 1)
  {
    size_t v7 = sl_max + 20;
    a1->size_t sl_max = v7;
    sl_stunsigned int r = reallocf(sl_str, 8 * v7);
    a1->sl_stunsigned int r = (char **)sl_str;
    if (!sl_str) {
      return -1;
    }
    sl_cuunsigned int r = a1->sl_cur;
  }
  int v8 = 0;
  a1->sl_cuunsigned int r = sl_cur + 1;
  *((void *)sl_str + sl_cur) = a2;
  return v8;
}

void sl_free(StringList *a1, int a2)
{
  if (a1)
  {
    sl_stunsigned int r = a1->sl_str;
    if (sl_str)
    {
      if (a2 && a1->sl_cur)
      {
        size_t v4 = 0;
        do
          free(a1->sl_str[v4++]);
        while (v4 < a1->sl_cur);
        sl_stunsigned int r = a1->sl_str;
      }
      free(sl_str);
    }
    free(a1);
  }
}

char *__cdecl sl_find(StringList *a1, char *a2)
{
  sl_cuunsigned int r = a1->sl_cur;
  if (!sl_cur) {
    return 0;
  }
  for (uint64_t i = (const char **)a1->sl_str; ; ++i)
  {
    size_t v7 = (char *)*i;
    if (!j__strncasecmp_l(*i, a2, v2, v3)) {
      break;
    }
    if (!--sl_cur) {
      return 0;
    }
  }
  return v7;
}

uint64_t telldir(DIR *a1)
{
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  dd_td = a1->__dd_td;
  size_t v4 = *(void **)dd_td;
  if (*(void *)dd_td)
  {
    uint64_t v5 = *((void *)dd_td + 2);
    while (v4[3] != v5 || v4[4] != a1->__dd_loc)
    {
      size_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    uint64_t v9 = v4[2];
  }
  else
  {
LABEL_6:
    int v6 = malloc_type_malloc(0x28uLL, 0x10A00404BF391D6uLL);
    if (v6)
    {
      size_t v7 = a1->__dd_td;
      long long v8 = *(_OWORD *)((char *)v7 + 8);
      uint64_t v9 = *((void *)v7 + 1);
      *((void *)v7 + 1) = v9 + 1;
      v6[1] = v8;
      *((void *)v6 + 4) = a1->__dd_loc;
      uint64_t v10 = *(void *)v7;
      *(void *)int v6 = *(void *)v7;
      if (v10) {
        *(void *)(v10 + 8) = v6;
      }
      *(void *)size_t v7 = v6;
      *((void *)v6 + 1) = v7;
    }
    else
    {
      uint64_t v9 = -1;
    }
  }
  pthread_mutex_unlock(p_dd_lock);
  return v9;
}

unint64_t _seekdir(unint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void **)(result + 128);
  while (1)
  {
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    if (v3[2] == a2)
    {
      off_t v4 = v3[3];
      uint64_t v5 = v3[4];
      uint64_t v6 = *(void *)(*(void *)(result + 128) + 16);
      if (v5 != *(void *)(result + 8) || v4 != v6)
      {
        if (v4 == v6)
        {
          if (!v5) {
            *(_DWORD *)(result + 56) |= 0x10u;
          }
          *(void *)(result + 8) = v5;
        }
        else
        {
          int result = lseek(*(_DWORD *)result, v4, 0);
          *(void *)(*(void *)(v2 + 128) + 16) = v3[3];
          *(void *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 56) &= 0xFFFFFFCF;
          do
          {
            if (*(void *)(v2 + 8) >= v3[4]) {
              break;
            }
            int result = _readdir_unlocked(v2, 0);
          }
          while (result);
        }
      }
      return result;
    }
  }
  return result;
}

int tcgetattr(int a1, termios *a2)
{
  return ioctl(a1, 0x40487413uLL, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  speed_t c_ospeed = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  if ((a2 & 0x10) != 0)
  {
    long long v3 = *(_OWORD *)&a3->c_cc[16];
    long long v10 = *(_OWORD *)a3->c_cc;
    long long v11 = v3;
    speed_t c_ospeed = a3->c_ospeed;
    long long v4 = *(_OWORD *)&a3->c_cflag;
    long long v8 = *(_OWORD *)&a3->c_iflag;
    *((void *)&v9 + 1) = *((void *)&v4 + 1);
    *(void *)&long long v9 = v4 | 1;
    a3 = (const termios *)&v8;
  }
  unsigned int v5 = a2 & 0xFFFFFFEF;
  if ((a2 & 0xFFFFFFEF) == 2)
  {
    unint64_t v7 = 2152231958;
    return ioctl(a1, v7, a3);
  }
  if (v5 == 1)
  {
    unint64_t v7 = 2152231957;
    return ioctl(a1, v7, a3);
  }
  if (!v5) {
    return ioctl(a1, 0x80487414uLL, a3);
  }
  *__error() = 22;
  return -1;
}

int tcsetpgrp(int a1, pid_t a2)
{
  if (!isatty(a1)) {
    return -1;
  }
  pid_t v5 = a2;
  return ioctl(a1, 0x80047476uLL, &v5);
}

pid_t tcgetpgrp(int a1)
{
  if (!isatty(a1)) {
    return -1;
  }
  pid_t v3 = 0;
  if (ioctl(a1, 0x40047477uLL, &v3) < 0) {
    return -1;
  }
  else {
    return v3;
  }
}

speed_t cfgetospeed(const termios *a1)
{
  return a1->c_ospeed;
}

speed_t cfgetispeed(const termios *a1)
{
  return a1->c_ispeed;
}

int cfsetospeed(termios *a1, speed_t a2)
{
  a1->speed_t c_ospeed = a2;
  return 0;
}

int cfsetispeed(termios *a1, speed_t a2)
{
  a1->c_ispeed = a2;
  return 0;
}

int cfsetspeed(termios *a1, speed_t a2)
{
  a1->c_ispeed = a2;
  a1->speed_t c_ospeed = a2;
  return 0;
}

void cfmakeraw(termios *a1)
{
  tcflag_t v1 = a1->c_oflag & 0xFFFFFFFFFFFFFFFELL;
  a1->c_iflag = a1->c_iflag & 0xFFFFFFFFFFFFD800 | 1;
  a1->c_oflag = v1;
  tcflag_t v2 = a1->c_lflag & 0x5FBFFA61;
  a1->c_cflag = a1->c_cflag & 0xFFFFFFFFFFFFE4FFLL | 0xB00;
  a1->c_lflag = v2;
  *(_WORD *)&a1->c_cc[16] = 1;
}

int tcsendbreak(int a1, int a2)
{
  int result = ioctl(a1, 0x2000747BuLL, 0);
  if (result != -1)
  {
    select_NOCANCEL();
    if (ioctl(a1, 0x2000747AuLL, 0) == -1) {
      return -1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t tcdrain_NOCANCEL(int a1)
{
  return ioctl(a1, 0x2000745EuLL, 0);
}

int tcflush(int a1, int a2)
{
  switch(a2)
  {
    case 3:
      int v2 = 3;
      goto LABEL_7;
    case 2:
      int v2 = 2;
      goto LABEL_7;
    case 1:
      int v2 = 1;
LABEL_7:
      int v4 = v2;
      return ioctl(a1, 0x80047410uLL, &v4);
  }
  *__error() = 22;
  return -1;
}

int tcflow(int a1, int a2)
{
  switch(a2)
  {
    case 1:
      unint64_t v2 = 536900719;
      goto LABEL_7;
    case 2:
      return ioctl(a1, 0x2000746EuLL, 0);
    case 3:
      unint64_t v2 = 536900736;
      goto LABEL_7;
    case 4:
      unint64_t v2 = 536900737;
LABEL_7:
      int result = ioctl(a1, v2, 0);
      break;
    default:
      *__error() = 22;
      int result = -1;
      break;
  }
  return result;
}

clock_t times(tms *a1)
{
  memset(&v6, 0, sizeof(v6));
  if (getrusage(0, &v6) < 0) {
    return -1;
  }
  clock_t v2 = 100 * v6.ru_stime.tv_sec + v6.ru_stime.tv_usec / 10000;
  a1->tms_umach_error_t time = 100 * v6.ru_utime.tv_sec + v6.ru_utime.tv_usec / 10000;
  a1->tms_smach_error_t time = v2;
  if (getrusage(-1, &v6) < 0) {
    return -1;
  }
  v5.unsigned int tv_sec = 0;
  *(void *)&v5.__darwin_suseconds_t tv_usec = 0;
  clock_t v3 = 100 * v6.ru_stime.tv_sec + v6.ru_stime.tv_usec / 10000;
  a1->tms_cumach_error_t time = 100 * v6.ru_utime.tv_sec + v6.ru_utime.tv_usec / 10000;
  a1->tms_csmach_error_t time = v3;
  if (gettimeofday(&v5, 0)) {
    return -1;
  }
  else {
    return 100 * v5.tv_sec + v5.tv_usec / 10000;
  }
}

char *__cdecl ttyname(int a1)
{
  if ((ttyname_init & 1) == 0)
  {
    pthread_mutex_lock(&ttyname_lock);
    if ((ttyname_init & 1) == 0)
    {
      ttyname_key = 1;
      if (pthread_key_init_np())
      {
        int v2 = *__error();
        pthread_mutex_unlock(&ttyname_lock);
LABEL_20:
        unint64_t v7 = __error();
        int result = 0;
        *unint64_t v7 = v2;
        return result;
      }
      ttyname_init = 1;
    }
    pthread_mutex_unlock(&ttyname_lock);
  }
  if (ttyname_key) {
    pthread_key_t v3 = 16;
  }
  else {
    pthread_key_t v3 = 0;
  }
  int v4 = pthread_getspecific(v3);
  if (!v4)
  {
    int result = (char *)malloc_type_malloc(0x105uLL, 0x5EE5DFC8uLL);
    if (!result) {
      return result;
    }
    int v4 = result;
    pthread_key_t v6 = ttyname_key ? 16 : 0;
    if (pthread_setspecific(v6, v4))
    {
      int v2 = *__error();
      free(v4);
      goto LABEL_20;
    }
  }
  if (ttyname_r(a1, (char *)v4, 0x105uLL)) {
    return 0;
  }
  else {
    return (char *)v4;
  }
}

int ttyname_r(int a1, char *a2, size_t a3)
{
  memset(&v12, 0, sizeof(v12));
  if (fstat(a1, &v12) < 0) {
    return 9;
  }
  if (!isatty(a1) || (v12.st_mode & 0xF000) != 0x2000) {
    return 25;
  }
  int v6 = 34;
  if (a3 >= 7)
  {
    MEMORY[0x18C122F90](a2, "/dev/", a3);
    dev_t st_rdev = v12.st_rdev;
    uint64_t v10 = j__strsignal_r((int)a2, v8, v9);
    if (devname_r(st_rdev, 0x2000u, &a2[v10], (int)a3 - (int)v10)) {
      return 0;
    }
    else {
      return 34;
    }
  }
  return v6;
}

int ttyslot(void)
{
  return 0;
}

useconds_t ualarm(useconds_t a1, useconds_t a2)
{
  *(&v4.it_value.tv_usec + 1) = 0;
  memset(&v3, 0, sizeof(v3));
  v4.it_interval.unsigned int tv_sec = a2 / 0xF4240uLL;
  *(&v4.it_interval.tv_usec + 1) = 0;
  v4.it_interval.__darwin_suseconds_t tv_usec = a2 % 0xF4240;
  v4.it_value.__darwin_suseconds_t tv_usec = a1 % 0xF4240;
  v4.it_value.unsigned int tv_sec = a1 / 0xF4240uLL;
  if (setitimer(0, &v4, &v3)) {
    return -1;
  }
  else {
    return v3.it_value.tv_usec + 1000000 * LODWORD(v3.it_value.tv_sec);
  }
}

uint64_t ulimit(int a1, ...)
{
  va_start(va, a1);
  uint64_t v3 = va_arg(va, void);
  v2.uint64_t rlim_cur = 0;
  v2.rlim_max = 0;
  if (a1 == 2)
  {
    v2.uint64_t rlim_cur = v3 << 9;
    v2.rlim_max = v3 << 9;
    if (setrlimit(1, &v2) == -1) {
      return -1;
    }
    else {
      return v3;
    }
  }
  else
  {
    if (a1 == 1)
    {
      if (getrlimit(1, &v2) != -1) {
        return v2.rlim_cur >> 9;
      }
    }
    else
    {
      *__error() = 22;
    }
    return -1;
  }
}

int unvis(char *a1, int a2, int *a3, int a4)
{
  if (!a1) {
    unvis_cold_1();
  }
  if (!a3) {
    unvis_cold_2();
  }
  unsigned int v5 = *a3;
  if ((a4 & 0x1000) != 0)
  {
    int v9 = *a3;
    if ((v9 - 5) >= 2)
    {
      if (!*a3) {
        return 3;
      }
      if (v9 != 9) {
        return -1;
      }
    }
  }
  else
  {
    char v6 = a2;
    switch(*a3)
    {
      case 0u:
        *a1 = 0;
        if (a2 == 92 && (a4 & 0x800) == 0)
        {
          int v8 = 1;
          goto LABEL_111;
        }
        if (a2 == 37 && (a4 & 0x80) != 0)
        {
          int v8 = 8;
          goto LABEL_111;
        }
        if (a2 == 38 && (a4 & 0x400) != 0)
        {
          int v8 = 13;
          goto LABEL_111;
        }
        if (a2 == 61 && (a4 & 0x200) != 0)
        {
          int v8 = 10;
          goto LABEL_111;
        }
        *a1 = a2;
        return 1;
      case 1u:
        if (a2 > 76)
        {
          switch(a2)
          {
            case '\\':
              goto LABEL_115;
            case ']':
            case '_':
            case 'c':
            case 'd':
            case 'e':
              goto LABEL_114;
            case '^':
              goto LABEL_17;
            case 'a':
              char v10 = 7;
              goto LABEL_89;
            case 'b':
              char v10 = 8;
              goto LABEL_89;
            case 'f':
              char v10 = 12;
              goto LABEL_89;
            default:
              if (a2 != 77) {
                goto LABEL_114;
              }
              *a1 = 0x80;
              int v8 = 2;
              break;
          }
          goto LABEL_111;
        }
        if (a2 <= 47)
        {
          if (a2 == 10 || a2 == 36)
          {
            *a3 = 0;
            return 3;
          }
        }
        else
        {
          if ((a2 - 48) < 8)
          {
            *a1 = a2 - 48;
            int v8 = 5;
            goto LABEL_111;
          }
          if (a2 == 69)
          {
            char v10 = 27;
            goto LABEL_89;
          }
        }
LABEL_114:
        if (isgraph(a2))
        {
LABEL_115:
          *a1 = v6;
          goto LABEL_90;
        }
        goto LABEL_83;
      case 2u:
        if (a2 == 45)
        {
          int v8 = 3;
        }
        else
        {
          if (a2 != 94) {
            goto LABEL_83;
          }
LABEL_17:
          int v8 = 4;
        }
        goto LABEL_111;
      case 3u:
        *a3 = 0;
        char v11 = *a1 | a2;
        goto LABEL_62;
      case 4u:
        char v12 = a2 & 0x1F;
        if (a2 == 63) {
          char v12 = 127;
        }
        char v10 = *a1 | v12;
        goto LABEL_89;
      case 5u:
        if ((a2 & 0xF8) != 0x30) {
          goto LABEL_30;
        }
        *a1 = a2 + 8 * *a1 - 48;
        int v8 = 6;
        goto LABEL_111;
      case 6u:
        *a3 = 0;
        if ((a2 & 0xF8) != 0x30) {
          return 2;
        }
        char v11 = a2 + 8 * *a1 - 48;
        goto LABEL_62;
      case 7u:
        uint64_t v13 = a2;
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0) {
          goto LABEL_83;
        }
        goto LABEL_29;
      case 8u:
        uint64_t v13 = a2;
LABEL_29:
        if ((_DefaultRuneLocale.__runetype[v13] & 0x10000) != 0)
        {
          char v20 = v13 - 48;
          if ((v13 - 48) >= 0xA) {
            char v20 = tolower(v13) - 87;
          }
          *a1 = v20;
          int v8 = 9;
          goto LABEL_111;
        }
LABEL_30:
        *a3 = 0;
        return 2;
      case 9u:
        *a3 = 0;
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0) {
          return 2;
        }
        LOBYTE(v16) = a2 - 48;
        if (a2 - 48 >= 0xA) {
          int v16 = tolower(a2) - 87;
        }
        goto LABEL_61;
      case 0xAu:
        if (a2 == 13 || a2 == 10)
        {
          int v8 = 12;
          goto LABEL_111;
        }
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0) {
          goto LABEL_83;
        }
        unsigned int v27 = a2 - 48;
        if (v27 >= 0xA && !isupper(a2)) {
          goto LABEL_83;
        }
        char v28 = v6 - 55;
        if (v27 < 0xA) {
          char v28 = v27;
        }
        *a1 = v28;
        int v8 = 11;
        goto LABEL_111;
      case 0xBu:
        if ((_DefaultRuneLocale.__runetype[a2] & 0x10000) == 0) {
          goto LABEL_83;
        }
        unsigned int v15 = a2 - 48;
        if (v15 >= 0xA && !isupper(a2)) {
          goto LABEL_83;
        }
        *a3 = 0;
        LOBYTE(v16) = v6 - 55;
        if (v15 < 0xA) {
          LOBYTE(v16) = v15;
        }
LABEL_61:
        char v11 = v16 | (16 * *a1);
LABEL_62:
        *a1 = v11;
        return 1;
      case 0xCu:
        int result = 3;
        if (a2 == 10 || a2 == 13) {
          return result;
        }
        if (a2 != 61) {
          goto LABEL_115;
        }
        *a3 = 10;
        return result;
      case 0xDu:
        *a1 = 0;
        if (a2 == 35)
        {
          int v8 = 14;
          goto LABEL_111;
        }
        unsigned int v18 = 0;
        int v19 = 0;
        unsigned int v5 = 15;
        *a3 = 15;
        LODWORD(v17) = *a1;
        goto LABEL_64;
      case 0xEu:
        if (a2 == 59) {
          return 1;
        }
        if (a2 - 48 > 9) {
          goto LABEL_83;
        }
        *a1 = *a1 + a2 + 10 * *a1 - 48;
        return 3;
      case 0xFu:
        uint64_t v17 = *a1;
        unsigned int v18 = HIBYTE(v5);
        if (HIBYTE(v5))
        {
          char v21 = 0;
          int v19 = nv[8 * v17 - 1 + v18];
        }
        else
        {
          int v19 = 0;
LABEL_64:
          char v21 = 1;
        }
        if (a2 == 59) {
          unsigned __int8 v22 = 0;
        }
        else {
          unsigned __int8 v22 = a2;
        }
        uint64_t v23 = v17;
        if (v17 > 0x63) {
          goto LABEL_76;
        }
        uint64_t v24 = v18 - 1;
        uint64_t v25 = &nv[8 * v17 + v18];
        uint64_t v26 = &nv[8 * v17 + v24];
        break;
      default:
        goto LABEL_83;
    }
    do
    {
      if ((v21 & 1) == 0 && v19 != *v26) {
        goto LABEL_83;
      }
      if (*v25 == v22)
      {
        LOBYTE(v17) = v23;
        goto LABEL_86;
      }
      ++v23;
      v25 += 8;
      v26 += 8;
    }
    while (v23 != 100);
    uint64_t v23 = 100;
    LODWORD(v17) = 100;
LABEL_76:
    if (v17 == 100)
    {
LABEL_83:
      *a3 = 0;
      return -1;
    }
LABEL_86:
    if (v22)
    {
      *a1 = v17;
      int v8 = (v5 & 0xFF000000) + 16777231;
LABEL_111:
      *a3 = v8;
      return 3;
    }
    char v10 = nv[8 * v23 + 7];
LABEL_89:
    *a1 = v10;
  }
LABEL_90:
  *a3 = 0;
  return 1;
}

int strnunvisx(char *a1, size_t a2, const char *a3, int a4)
{
  char v16 = 0;
  int v15 = 0;
  if (!a3) {
    strnunvisx_cold_1();
  }
  int v4 = (int)a1;
  if (!a1) {
    strnunvisx_cold_2();
  }
  unsigned int v5 = a3;
  char v7 = *a3;
  if (*a3)
  {
    int v9 = a1;
    while (2)
    {
      ++v5;
      int v10 = v7;
      while (1)
      {
        int v11 = unvis(&v16, v10, &v15, a4);
        if (v11 != 2) {
          break;
        }
        if (!a2) {
          goto LABEL_20;
        }
        --a2;
        *v9++ = v16;
      }
      switch(v11)
      {
        case -1:
          uint64_t v13 = __error();
          int v14 = 22;
          goto LABEL_22;
        case 0:
        case 3:
          goto LABEL_12;
        case 1:
          if (!a2) {
            goto LABEL_20;
          }
          --a2;
          *v9++ = v16;
LABEL_12:
          char v7 = *v5;
          if (*v5) {
            continue;
          }
          if (v15 > 9u || ((1 << v15) & 0x260) == 0) {
            goto LABEL_18;
          }
          int v15 = 0;
          if (!a2) {
            goto LABEL_20;
          }
          --a2;
          *v9++ = v16;
          break;
        default:
          strnunvisx_cold_3();
      }
      break;
    }
  }
  else
  {
    int v9 = a1;
  }
LABEL_18:
  if (a2)
  {
    *int v9 = 0;
    return v9 - v4;
  }
  else
  {
LABEL_20:
    uint64_t v13 = __error();
    int v14 = 28;
LABEL_22:
    *uint64_t v13 = v14;
    return -1;
  }
}

int strunvisx(char *a1, const char *a2, int a3)
{
  return strnunvisx(a1, 0xFFFFFFFFFFFFFFFFLL, a2, a3);
}

int strunvis(char *a1, const char *a2)
{
  return strnunvisx(a1, 0xFFFFFFFFFFFFFFFFLL, a2, 0);
}

int strnunvis(char *a1, size_t a2, const char *a3)
{
  return strnunvisx(a1, a2, a3, 0);
}

uint64_t usleep_NOCANCEL(unsigned int a1)
{
  v2[0] = a1 / 0xF4240uLL;
  v2[1] = 1000 * (a1 % 0xF4240);
  return nanosleep_NOCANCEL(v2, 0);
}

int utime(const char *a1, const utimbuf *a2)
{
  if (a2)
  {
    modmach_error_t time = a2->modtime;
    v4.unsigned int tv_sec = a2->actime;
    time_t v5 = modtime;
    int v6 = 0;
    v4.__darwin_suseconds_t tv_usec = 0;
    a2 = (const utimbuf *)&v4;
  }
  return utimes(a1, (const timeval *)a2);
}

char *__cdecl svis(char *a1, int a2, int a3, int a4, const char *a5)
{
  int v8 = a1;
  v7[0] = a2;
  v7[1] = a4;
  int v5 = istrsenvisx(&v8, 0, v7, 1uLL, a3, a5, 0);
  if (v5 >= 0) {
    return &v8[v5];
  }
  else {
    return 0;
  }
}

uint64_t istrsenvisx(char **a1, uint64_t a2, const char *a3, unint64_t a4, unsigned int a5, const char *a6, _DWORD *a7)
{
  unsigned int v69 = a5;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v13 = MEMORY[0x1F41887A8](a1, a2);
  char v16 = (char *)&v61 - v15;
  if (!v13) {
    istrsenvisx_cold_1();
  }
  if (!a3 && a4) {
    istrsenvisx_cold_2();
  }
  if (!a6) {
    istrsenvisx_cold_3();
  }
  unint64_t v66 = v14;
  if (a4 == 1) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = a4;
  }
  unsigned int v18 = (__int32 *)malloc_type_calloc(v17 + 1, 4uLL, 0x100004052888210uLL);
  if (v18)
  {
    int v19 = v18;
    uint64_t v65 = v16;
    memset(&v71, 0, sizeof(v71));
    int v67 = (__int32 *)malloc_type_calloc((16 * v17) | 1, 4uLL, 0x100004052888210uLL);
    if (v67)
    {
      unint64_t v63 = StatusReg;
      unsigned __int8 v22 = *a1;
      if (*a1)
      {
        long long v64 = 0;
LABEL_15:
        size_t v68 = v19;
        long long v62 = a7;
        if ((v69 & 0x4000) != 0)
        {
          LODWORD(a7) = 1;
        }
        else if (a7)
        {
          LODWORD(a7) = *a7;
        }
        memset(&v71, 0, sizeof(v71));
        if (v17 < 1)
        {
          char v28 = v68;
        }
        else
        {
          char v28 = v68;
          do
          {
            if (a7
              || (v17 >= 6 ? (v30 = 6) : (v30 = v17), unsigned int v29 = mbrtowc(v28, a3, v30, &v71), (v29 & 0x80000000) != 0))
            {
              *char v28 = *(unsigned __int8 *)a3;
              unsigned int v29 = 1;
              LODWORD(a7) = 1;
            }
            else
            {
              LODWORD(a7) = 0;
            }
            if (v29 <= 1) {
              uint64_t v31 = 1;
            }
            else {
              uint64_t v31 = v29;
            }
            ++v28;
            a3 += v31;
            BOOL v32 = v17 <= v31;
            v17 -= v31;
          }
          while (!v32);
        }
        long long v70 = a6;
        if (v28 - v68 >= a4) {
          uint64_t v33 = a4;
        }
        else {
          uint64_t v33 = v28 - v68;
        }
        memset(&v72, 0, sizeof(v72));
        size_t v34 = j__strsignal_r((int)a6, v20, v21);
        sigaction v35 = (__int32 *)malloc_type_calloc(v34 + 30, 4uLL, 0x100004052888210uLL);
        if (v35)
        {
          uint64_t v25 = v35;
          unsigned int v27 = v67;
          uint64_t v36 = v69;
          if ((v69 & 0x4000) != 0 || mbsrtowcs(v35, &v70, v34, &v72) == -1)
          {
            int v19 = v68;
            if (v34)
            {
              uint64_t v37 = 0;
              sigaction v38 = v70;
              do
              {
                v25[v37] = v38[v37];
                ++v37;
              }
              while (v34 != v37);
            }
          }
          else
          {
            size_t v34 = wcslen(v25);
            int v19 = v68;
          }
          sigaction v39 = &v25[v34];
          if ((v36 & 0x100) != 0)
          {
            *(_OWORD *)sigaction v39 = xmmword_18AA00670;
            v39 += 4;
          }
          if ((v36 & 0x2000) != 0)
          {
            int v40 = 39;
            sigaction v41 = &dword_18AA006DC;
            do
            {
              *v39++ = v40;
              int v42 = *v41++;
              int v40 = v42;
            }
            while (v42);
          }
          if ((v36 & 4) != 0)
          {
            *v39++ = 32;
            if ((v36 & 8) == 0)
            {
LABEL_53:
              if ((v36 & 0x10) == 0) {
                goto LABEL_54;
              }
              goto LABEL_73;
            }
          }
          else if ((v36 & 8) == 0)
          {
            goto LABEL_53;
          }
          *v39++ = 9;
          if ((v36 & 0x10) == 0)
          {
LABEL_54:
            if ((v36 & 0x8000) == 0) {
              goto LABEL_55;
            }
            goto LABEL_74;
          }
LABEL_73:
          *v39++ = 10;
          if ((v36 & 0x8000) == 0)
          {
LABEL_55:
            if ((v36 & 0x40) != 0)
            {
LABEL_57:
              *sigaction v39 = 0;
              int v43 = (_DWORD *(*)(__int32 *, unsigned int, __int16, char, __int32 *))do_mvis;
              if ((v36 & 0x200) == 0) {
                int v43 = (_DWORD *(*)(__int32 *, unsigned int, __int16, char, __int32 *))do_svis;
              }
              if ((v36 & 0x80) != 0) {
                termios v44 = do_hvis;
              }
              else {
                termios v44 = v43;
              }
              size_t v45 = v27;
              if (v33)
              {
                unsigned int v46 = (unsigned int *)(v19 + 1);
                size_t v45 = v27;
                do
                {
                  size_t v45 = v44(v45, *(v46 - 1), v36, *v46, v25);
                  if (!v45)
                  {
                    *__error() = 28;
                    unint64_t v23 = 0xFFFFFFFFLL;
                    goto LABEL_111;
                  }
                  ++v46;
                  --v33;
                }
                while (v33);
              }
              *size_t v45 = 0;
              size_t v47 = wcslen(v27);
              size_t v48 = v47;
              if (v66) {
                unint64_t v49 = *v66;
              }
              else {
                unint64_t v49 = (6 * v47) | 1;
              }
              memset(&v71, 0, sizeof(v71));
              if (v47)
              {
                unint64_t v23 = 0;
                unint64_t v50 = v27;
                while (1)
                {
                  if (a7) {
                    goto LABEL_81;
                  }
                  int v56 = *(void **)(v63 + 8 * __locale_key);
                  if (!v56) {
                    int v56 = &__global_locale;
                  }
                  if (v49 - v23 <= *(int *)(v56[166] + 64)) {
                    long long v57 = v65;
                  }
                  else {
                    long long v57 = v22;
                  }
                  int v58 = wcrtomb(v57, *v50, &v71);
                  int v51 = v58;
                  if (v58 >= 1 && v57 != v22)
                  {
                    if (v23 + v58 >= v49)
                    {
LABEL_104:
                      *__error() = 28;
                      unint64_t v23 = 0xFFFFFFFFLL;
                      unsigned int v27 = v67;
                      int v19 = v68;
                      goto LABEL_111;
                    }
                    j__mkdtempat_np((int)v22, v57);
                  }
                  if (v51 < 0)
                  {
LABEL_81:
                    int v51 = 0;
                    uint64_t v52 = 0;
                    for (uint64_t i = 56; i != -8; i -= 8)
                    {
                      v52 |= 255 << i;
                      unint64_t v54 = *v50;
                      if (!i || (v52 & v54) != 0)
                      {
                        if (v23 + 1 + v51 >= v49) {
                          goto LABEL_104;
                        }
                        uint64_t v55 = v51++;
                        v22[v55] = ((255 << i) & v54) >> i;
                      }
                    }
                    LODWORD(a7) = 1;
                  }
                  else
                  {
                    LODWORD(a7) = 0;
                  }
                  v23 += v51;
                  if (v23 >= v49) {
                    istrsenvisx_cold_4();
                  }
                  v22 += v51;
                  ++v50;
                  if (!--v48)
                  {
                    unsigned int v27 = v67;
                    int v19 = v68;
                    goto LABEL_106;
                  }
                }
              }
              unint64_t v23 = 0;
LABEL_106:
              *unsigned __int8 v22 = 0;
              if ((v69 & 0x4000) != 0 && v62) {
                *long long v62 = a7;
              }
              goto LABEL_113;
            }
LABEL_56:
            *v39++ = 92;
            goto LABEL_57;
          }
LABEL_74:
          *v39++ = 34;
          if ((v36 & 0x40) != 0) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        unsigned int v27 = v67;
        if (v66 && !*v66)
        {
          uint64_t v25 = 0;
          *__error() = 28;
          unint64_t v23 = 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t v25 = 0;
          unint64_t v23 = 0;
          *unsigned __int8 v22 = 0;
        }
        int v19 = v68;
LABEL_111:
        uint64_t v26 = v64;
LABEL_112:
        free(v25);
        uint64_t v25 = v27;
        unsigned int v27 = v19;
        int v19 = v26;
LABEL_113:
        free(v25);
        free(v27);
        free(v19);
        return v23;
      }
      uint64_t v24 = (char *)malloc_type_calloc((16 * v17) | 1, 1uLL, 0x100004077774924uLL);
      if (v24)
      {
        unsigned __int8 v22 = v24;
        *a1 = v24;
        long long v64 = (__int32 *)v24;
        goto LABEL_15;
      }
    }
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unint64_t v23 = 0xFFFFFFFFLL;
    unsigned int v27 = v67;
    goto LABEL_112;
  }
  return 0xFFFFFFFFLL;
}

char *__cdecl snvis(char *a1, size_t a2, int a3, int a4, int a5, const char *a6)
{
  int v10 = a1;
  size_t v9 = a2;
  v8[0] = a3;
  v8[1] = a5;
  int v6 = istrsenvisx(&v10, (uint64_t)&v9, v8, 1uLL, a4, a6, 0);
  if (v6 >= 0) {
    return &v10[v6];
  }
  else {
    return 0;
  }
}

int strsvis(char *a1, const char *a2, int a3, const char *a4)
{
  int v5 = a1;
  return istrsenvisxl(&v5, 0, a2, a3, a4);
}

uint64_t istrsenvisxl(char **a1, char *a2, const char *__sig, unsigned int a4, const char *a5)
{
  if (__sig) {
    unint64_t v10 = j__strsignal_r((int)__sig, a2, (size_t)__sig);
  }
  else {
    unint64_t v10 = 0;
  }

  return istrsenvisx(a1, (uint64_t)a2, __sig, v10, a4, a5, 0);
}

int strsnvis(char *a1, size_t a2, const char *a3, int a4, const char *a5)
{
  size_t v6 = a2;
  char v7 = a1;
  return istrsenvisxl(&v7, (char *)&v6, a3, a4, a5);
}

int strsvisx(char *a1, const char *a2, size_t a3, int a4, const char *a5)
{
  size_t v6 = a1;
  return istrsenvisx(&v6, 0, a2, a3, a4, a5, 0);
}

int strsnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6)
{
  size_t v7 = a2;
  int v8 = a1;
  return istrsenvisx(&v8, (uint64_t)&v7, a3, a4, a5, a6, 0);
}

int strsenvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6, int *a7)
{
  size_t v8 = a2;
  size_t v9 = a1;
  return istrsenvisx(&v9, (uint64_t)&v8, a3, a4, a5, a6, a7);
}

char *__cdecl vis(char *a1, int a2, int a3, int a4)
{
  size_t v7 = a1;
  v6[0] = a2;
  v6[1] = a4;
  int v4 = istrsenvisx(&v7, 0, v6, 1uLL, a3, "", 0);
  if (v4 >= 0) {
    return &v7[v4];
  }
  else {
    return 0;
  }
}

char *__cdecl nvis(char *a1, size_t a2, int a3, int a4, int a5)
{
  size_t v9 = a1;
  size_t v8 = a2;
  v7[0] = a3;
  v7[1] = a5;
  int v5 = istrsenvisx(&v9, (uint64_t)&v8, v7, 1uLL, a4, "", 0);
  if (v5 >= 0) {
    return &v9[v5];
  }
  else {
    return 0;
  }
}

int strvis(char *a1, const char *a2, int a3)
{
  int v4 = a1;
  return istrsenvisxl(&v4, 0, a2, a3, "");
}

int strnvis(char *a1, size_t a2, const char *a3, int a4)
{
  size_t v5 = a2;
  size_t v6 = a1;
  return istrsenvisxl(&v6, (char *)&v5, a3, a4, "");
}

int stravis(char **a1, const char *a2, int a3)
{
  *a1 = 0;
  return istrsenvisxl(a1, 0, a2, a3, "");
}

int strvisx(char *a1, const char *a2, size_t a3, int a4)
{
  size_t v5 = a1;
  return istrsenvisx(&v5, 0, a2, a3, a4, "", 0);
}

int strnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5)
{
  size_t v6 = a2;
  size_t v7 = a1;
  return istrsenvisx(&v7, (uint64_t)&v6, a3, a4, a5, "", 0);
}

int strenvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, int *a6)
{
  size_t v7 = a2;
  size_t v8 = a1;
  return istrsenvisx(&v8, (uint64_t)&v7, a3, a4, a5, "", a6);
}

_DWORD *do_hvis(_DWORD *a1, unsigned int a2, __int16 a3, char a4, __int32 *a5)
{
  if (a2 <= 0x7F)
  {
    unint64_t v10 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v11 = v10->__runetype[a2];
    goto LABEL_9;
  }
  if (a2 < 0x100)
  {
    uint64_t v12 = __locale_key;
    uint64_t v13 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v12);
    if (!v13) {
      uint64_t v13 = &__global_locale;
    }
    unint64_t v10 = *(_RuneLocale **)(v13[166] + 120);
    goto LABEL_8;
  }
  LOWORD(v11) = ___runetype(a2);
LABEL_9:
  if ((v11 & 0x500) != 0
    || a2 - 39 < 8
    || a2 - 33 <= 0x3E && ((1 << (a2 - 33)) & 0x4000000000000009) != 0)
  {
    return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, a5);
  }
  else
  {
    *a1 = 37;
    a1[1] = dword_18AA00724[a2 >> 4];
    int result = a1 + 3;
    a1[2] = dword_18AA00724[a2 & 0xF];
  }
  return result;
}

_DWORD *do_mvis(_DWORD *a1, unsigned int a2, __int16 a3, int a4, __int32 *__s)
{
  if (a2 != 10)
  {
    if (a2 > 0x7F)
    {
      if (a2 >= 0x100)
      {
        if ((___runetype(a2) & 0x4000) == 0) {
          goto LABEL_16;
        }
        goto LABEL_14;
      }
      uint64_t v12 = __locale_key;
      uint64_t v13 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v12);
      if (!v13) {
        uint64_t v13 = &__global_locale;
      }
      __uint32_t v11 = *(_RuneLocale **)(v13[166] + 120);
    }
    else
    {
      __uint32_t v11 = &_DefaultRuneLocale;
    }
    if ((v11->__runetype[a2] & 0x4000) == 0) {
      goto LABEL_16;
    }
LABEL_14:
    if (a4 == 10 || a4 == 13) {
      goto LABEL_29;
    }
LABEL_16:
    if (a2 > 0x7F)
    {
      if (a2 >= 0x100)
      {
        if ((___runetype(a2) & 0x4000) == 0)
        {
LABEL_25:
          if ((int)a2 < 33 || a2 == 61 || a2 > 0x7E) {
            goto LABEL_29;
          }
        }
LABEL_28:
        if (!wcschr(dword_18AA00768, a2)) {
          goto LABEL_2;
        }
LABEL_29:
        *a1 = 61;
        a1[1] = dword_18AA0079C[a2 >> 4];
        int result = a1 + 3;
        a1[2] = dword_18AA0079C[a2 & 0xF];
        return result;
      }
      uint64_t v15 = __locale_key;
      char v16 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v15);
      if (!v16) {
        char v16 = &__global_locale;
      }
      int v14 = *(_RuneLocale **)(v16[166] + 120);
    }
    else
    {
      int v14 = &_DefaultRuneLocale;
    }
    if ((v14->__runetype[a2] & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
LABEL_2:

  return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, __s);
}

uint64_t do_svis(uint64_t a1, unsigned __int32 a2, __int16 a3, char a4, __int32 *__s)
{
  __uint32_t v11 = wcschr(__s, a2);
  if (v11)
  {
LABEL_2:
    uint64_t v12 = 0;
    int v13 = a4 & 0xF8;
    uint64_t v14 = 56;
    uint64_t v15 = off_1EB1CC000;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v17 = &_DefaultRuneLocale;
    uint64_t v18 = 0x730000005CLL;
    uint64_t v19 = 0x300000005CLL;
    uint64_t v20 = 0x610000005CLL;
    uint64_t v21 = 0x620000005CLL;
    uint64_t v22 = 0x740000005CLL;
    uint64_t v23 = 0x6E0000005CLL;
    uint64_t v24 = 0x760000005CLL;
    uint64_t v25 = 0x660000005CLL;
    uint64_t v26 = 0x720000005CLL;
    while (1)
    {
      v12 |= 255 << v14;
      if (v14 && (v12 & (int)a2) == 0) {
        goto LABEL_15;
      }
      unint64_t v27 = ((255 << v14) & (unint64_t)(int)a2) >> v14;
      if ((a3 & 2) == 0) {
        goto LABEL_12;
      }
      if (v10 || !v9)
      {
        switch((int)v27)
        {
          case 0:
            *(void *)a1 = v19;
            if (v13 == 48)
            {
              *(void *)(a1 + 8) = 0x3000000030;
              goto LABEL_14;
            }
            a1 += 8;
            break;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
            goto LABEL_39;
          case 7:
            *(void *)a1 = v20;
            a1 += 8;
            goto LABEL_15;
          case 8:
            *(void *)a1 = v21;
            a1 += 8;
            goto LABEL_15;
          case 9:
            *(void *)a1 = v22;
            a1 += 8;
            goto LABEL_15;
          case 10:
            *(void *)a1 = v23;
            a1 += 8;
            goto LABEL_15;
          case 11:
            *(void *)a1 = v24;
            a1 += 8;
            goto LABEL_15;
          case 12:
            *(void *)a1 = v25;
            a1 += 8;
            goto LABEL_15;
          case 13:
            *(void *)a1 = v26;
            a1 += 8;
            goto LABEL_15;
          default:
            JUMPOUT(0);
        }
        goto LABEL_15;
      }
      if ((v27 - 97) <= 0x15 && ((1 << (v27 - 97)) & 0x2E2023) != 0) {
        goto LABEL_12;
      }
      if ((v27 - 32) <= 0x3E)
      {
        if (((1 << (v27 - 32)) & 0x4000200000010010) != 0) {
          goto LABEL_12;
        }
        if (v27 == 32)
        {
          *(void *)a1 = v18;
          a1 += 8;
          goto LABEL_15;
        }
      }
LABEL_39:
      if ((a3 & 0x4000) != 0)
      {
        if (v27 <= 0x7F)
        {
LABEL_54:
          uint64_t v40 = (uint64_t)&v17->__magic[4 * v27];
          goto LABEL_65;
        }
        if (v27 >= 0x100)
        {
          int v59 = v13;
          unint64_t v57 = StatusReg;
          uint64_t v49 = v19;
          uint64_t v52 = v26;
          uint64_t v41 = v18;
          uint64_t v55 = v25;
          __int16 v38 = ___runetype_l(v27, 0);
          uint64_t v26 = v52;
          uint64_t v25 = v55;
          uint64_t v18 = v41;
          uint64_t v19 = v49;
LABEL_58:
          uint64_t v17 = &_DefaultRuneLocale;
          unint64_t StatusReg = v57;
          int v13 = v59;
          if ((v38 & 0x800) == 0) {
            goto LABEL_12;
          }
          goto LABEL_66;
        }
        int v42 = __c_locale;
      }
      else
      {
        if (v27 <= 0x7F) {
          goto LABEL_54;
        }
        if (v27 >= 0x100)
        {
          int v59 = v13;
          unint64_t v57 = StatusReg;
          uint64_t v48 = v18;
          uint64_t v51 = v26;
          uint64_t v54 = v25;
          __int16 v38 = ___runetype(v27);
          uint64_t v26 = v51;
          uint64_t v25 = v54;
          uint64_t v18 = v48;
          goto LABEL_58;
        }
        int v42 = *(char **)(StatusReg + 8 * (void)v15[157]);
        if (!v42) {
          int v42 = (char *)&__global_locale;
        }
      }
      uint64_t v40 = *(void *)(*((void *)v42 + 166) + 120) + 4 * v27;
LABEL_65:
      if ((*(_DWORD *)(v40 + 60) & 0x800) == 0) {
        goto LABEL_12;
      }
LABEL_66:
      if ((v27 & 0xF8) != 0x30)
      {
        *(_DWORD *)a1 = 92;
        goto LABEL_34;
      }
LABEL_12:
      if (v11 || (a3 & 1) != 0 || (v27 & 0x7F) == 0x20)
      {
        *(_DWORD *)a1 = 92;
        *(void *)(a1 + 4) = *(void *)&vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v27), (uint32x2_t)0xFFFFFFFDFFFFFFFALL), (int8x8_t)0x700000003) | 0x3000000030;
        *(_DWORD *)(a1 + 12) = v27 & 7 | 0x30;
LABEL_14:
        a1 += 16;
        goto LABEL_15;
      }
      if ((a3 & 0x40) == 0)
      {
        *(_DWORD *)a1 = 92;
        a1 += 4;
      }
      if ((v27 & 0x80) != 0)
      {
        *(_DWORD *)a1 = 77;
        a1 += 4;
        LODWORD(v27) = v27 & 0x7F;
LABEL_31:
        uint64_t v37 = (uint64_t)&v17->__magic[4 * v27];
LABEL_32:
        if ((*(_DWORD *)(v37 + 60) & 0x200) != 0)
        {
LABEL_25:
          *(_DWORD *)a1 = 94;
          if (v27 == 127) {
            *(_DWORD *)(a1 + 4) = 63;
          }
          else {
            *(_DWORD *)(a1 + 4) = v27 + 64;
          }
          goto LABEL_36;
        }
        goto LABEL_33;
      }
      if (v27 <= 0x7F) {
        goto LABEL_31;
      }
      if (v27 < 0x100)
      {
        sigaction v39 = *(void **)(StatusReg + 8 * (void)v15[157]);
        if (!v39) {
          sigaction v39 = &__global_locale;
        }
        uint64_t v37 = *(void *)(v39[166] + 120) + 4 * v27;
        goto LABEL_32;
      }
      int v58 = v13;
      char v28 = v15;
      unint64_t v56 = StatusReg;
      unsigned int v29 = v17;
      uint64_t v50 = v23;
      uint64_t v53 = v24;
      uint64_t v47 = v22;
      uint64_t v30 = v21;
      uint64_t v31 = v20;
      uint64_t v32 = v19;
      uint64_t v33 = v18;
      uint64_t v34 = v25;
      uint64_t v35 = v26;
      __int16 v36 = ___runetype(v27);
      uint64_t v26 = v35;
      uint64_t v25 = v34;
      uint64_t v18 = v33;
      uint64_t v19 = v32;
      uint64_t v20 = v31;
      uint64_t v21 = v30;
      uint64_t v22 = v47;
      uint64_t v23 = v50;
      uint64_t v24 = v53;
      uint64_t v17 = v29;
      unint64_t StatusReg = v56;
      uint64_t v15 = v28;
      int v13 = v58;
      if ((v36 & 0x200) != 0) {
        goto LABEL_25;
      }
LABEL_33:
      *(_DWORD *)a1 = 45;
LABEL_34:
      *(_DWORD *)(a1 + 4) = v27;
LABEL_36:
      a1 += 8;
LABEL_15:
      v14 -= 8;
      BOOL v9 = __CFADD__(v14, 8);
      BOOL v10 = v14 == -8;
      if (v14 == -8) {
        return a1;
      }
    }
  }
  if ((a3 & 0x4000) == 0)
  {
    if (a2 > 0x7F)
    {
      if (a2 >= 0x100)
      {
        if ((___runetype(a2) & 0x800) != 0) {
          goto LABEL_86;
        }
        goto LABEL_84;
      }
      uint64_t v44 = __locale_key;
      size_t v45 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v44);
      if (!v45) {
        size_t v45 = (char *)&__global_locale;
      }
      goto LABEL_82;
    }
LABEL_74:
    int v43 = &_DefaultRuneLocale;
    goto LABEL_83;
  }
  if (a2 <= 0x7F) {
    goto LABEL_74;
  }
  if (a2 < 0x100)
  {
    size_t v45 = __c_locale;
LABEL_82:
    int v43 = *(_RuneLocale **)(*((void *)v45 + 166) + 120);
LABEL_83:
    if ((v43->__runetype[a2] & 0x800) != 0) {
      goto LABEL_86;
    }
    goto LABEL_84;
  }
  if ((___runetype_l(a2, 0) & 0x800) != 0) {
    goto LABEL_86;
  }
LABEL_84:
  if (a2 > 0x20 || ((1 << a2) & 0x100000600) == 0)
  {
    BOOL v9 = a2 >= 0x80;
    BOOL v10 = a2 == 128;
    if ((int)a2 < 128 || (a3 & 0x4000) != 0 || !iswspace(a2))
    {
      if ((a3 & 0x20) == 0) {
        goto LABEL_2;
      }
      BOOL v9 = a2 >= 0xD;
      BOOL v10 = a2 == 13;
      if (a2 > 0xD) {
        goto LABEL_2;
      }
      BOOL v10 = ((1 << a2) & 0x2180) == 0;
      if (((1 << a2) & 0x2180) == 0) {
        goto LABEL_2;
      }
    }
  }
LABEL_86:
  *(_DWORD *)a1 = a2;
  a1 += 4;
  return a1;
}

uint64_t wait_NOCANCEL(uint64_t a1)
{
  return MEMORY[0x1F40CFE80](0xFFFFFFFFLL, a1, 0, 0);
}

pid_t wait3(int *a1, int a2, rusage *a3)
{
  return wait4(-1, a1, a2, a3);
}

uint64_t waitpid_NOCANCEL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xFFFFFFEC) != 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  else
  {
    return MEMORY[0x1F40CFE80](a1, a2, a3, 0);
  }
}

uint64_t _ascii_init(void *a1)
{
  a1[9] = _ascii_mbrtowc;
  a1[10] = _ascii_mbsinit;
  a1[11] = _ascii_mbsnrtowcs;
  a1[12] = _ascii_wcrtomb;
  a1[13] = _ascii_wcsnrtombs;
  a1[8] = 0x8000000001;
  return 0;
}

uint64_t _ascii_mbrtowc(_DWORD *a1, char *a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  if (!a3) {
    return -2;
  }
  if (*a2 < 0)
  {
    *__error() = 92;
    return -1;
  }
  else
  {
    int v3 = *a2;
    if (a1) {
      *a1 = v3;
    }
    return v3 != 0;
  }
}

uint64_t _ascii_mbsinit()
{
  return 1;
}

uint64_t _ascii_mbsnrtowcs(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = (unsigned char *)*a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0;
      while (1)
      {
        if (a3 == result)
        {
          v4 += result;
          a4 = a3;
          goto LABEL_18;
        }
        if ((char)v4[result] < 0)
        {
          *a2 = &v4[result];
          goto LABEL_20;
        }
        int v7 = v4[result];
        *(_DWORD *)(a1 + 4 * result) = v7;
        if (!v7) {
          break;
        }
        if (a4 == ++result)
        {
          v4 += result;
          goto LABEL_18;
        }
      }
      *a2 = 0;
    }
    else
    {
LABEL_18:
      *a2 = v4;
      return a4;
    }
  }
  else
  {
    if (a3)
    {
      size_t v8 = &v4[a3];
      BOOL v9 = (unsigned char *)*a2;
      while (*v9)
      {
        if ((char)*v9 < 0)
        {
LABEL_20:
          *__error() = 92;
          return -1;
        }
        ++v9;
        if (!--a3)
        {
          BOOL v9 = v8;
          return v9 - v4;
        }
      }
    }
    else
    {
      BOOL v9 = (unsigned char *)*a2;
    }
    return v9 - v4;
  }
  return result;
}

uint64_t _ascii_wcrtomb(unsigned char *a1, unsigned int a2)
{
  if (!a1) {
    return 1;
  }
  if (a2 < 0x80)
  {
    *a1 = a2;
    return 1;
  }
  else
  {
    *__error() = 92;
    return -1;
  }
}

uint64_t _ascii_wcsnrtombs(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0;
      while (a3 != result)
      {
        int v7 = *v4;
        if (*v4 >= 0x80)
        {
          *a2 = v4;
          goto LABEL_20;
        }
        *(unsigned char *)(a1 + result) = v7;
        if (!v7)
        {
          *a2 = 0;
          return result;
        }
        ++v4;
        if (a4 == ++result)
        {
          a3 = a4;
          break;
        }
      }
    }
    else
    {
      a3 = 0;
    }
    *a2 = v4;
    return a3;
  }
  else
  {
    if (a3)
    {
      size_t v8 = &v4[a3];
      BOOL v9 = *a2;
      while (*v9)
      {
        if (*v9 >= 0x80)
        {
LABEL_20:
          *__error() = 92;
          return -1;
        }
        ++v9;
        if (!--a3)
        {
          BOOL v9 = v8;
          return v9 - v4;
        }
      }
    }
    else
    {
      BOOL v9 = *a2;
    }
    return v9 - v4;
  }
}

uint64_t _BIG5_init(void *a1)
{
  a1[9] = _BIG5_mbrtowc;
  a1[12] = _BIG5_wcrtomb;
  a1[10] = _BIG5_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _BIG5_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= 0x100)
  {
    BOOL v10 = __error();
    int v11 = 22;
LABEL_18:
    int *v10 = v11;
    return -1;
  }
  if (a2) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = "";
  }
  if (!a2) {
    a3 = 1;
  }
  if (a2) {
    int v7 = a1;
  }
  else {
    int v7 = 0;
  }
  if (!a3) {
    return -2;
  }
  int v8 = *(unsigned __int8 *)v5;
  if (v4)
  {
    if (*v5)
    {
      if (v7) {
        *int v7 = v8 | (v4 << 8);
      }
      *a4 = 0;
      return 1;
    }
    goto LABEL_31;
  }
  if ((v8 + 95) > 0x5Du)
  {
    if (v7) {
      *int v7 = v8;
    }
    return v8 != 0;
  }
  else
  {
    if (a3 <= 1)
    {
      *a4 = v8;
      return -2;
    }
    if (!v5[1])
    {
LABEL_31:
      BOOL v10 = __error();
      int v11 = 92;
      goto LABEL_18;
    }
    if (v7) {
      *int v7 = *((unsigned __int8 *)v5 + 1) | (v8 << 8);
    }
    return 2;
  }
}

uint64_t _BIG5_wcrtomb(unsigned char *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  if (!a1) {
    return 1;
  }
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1;
  }
  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2;
}

BOOL _BIG5_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

wint_t btowc_l(wint_t result, locale_t a2)
{
  memset(v6, 0, sizeof(v6));
  if (result != -1)
  {
    wint_t v4 = 0;
    locale_t v2 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1) {
      locale_t v2 = a2;
    }
    if (a2) {
      locale_t v3 = v2;
    }
    else {
      locale_t v3 = (locale_t)&__c_locale;
    }
    char v5 = result;
    if ((unint64_t)(*(uint64_t (**)(wint_t *, char *, uint64_t, _OWORD *))(*((void *)v3 + 166) + 72))(&v4, &v5, 1, v6) > 1)return -1; {
    else
    }
      return v4;
  }
  return result;
}

wint_t btowc(int a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return btowc_l(a1, v3);
}

uint64_t __collate_load_tables(char *a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  memset(&v69, 0, sizeof(v69));
  if (!j__strncasecmp_l(a1, "C", a3, a4)
    || !j__strncasecmp_l(a1, "POSIX", v7, v8)
    || !j__strsvisx(a1, "C.", 2uLL, (int)v8, v9))
  {
    if ((_UNKNOWN *)a2 == &__global_locale) {
      __collate_load_errounsigned int r = 1;
    }
    uint64_t v27 = *(void *)(a2 + 1320);
    if (v27)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v27, 0xFFFFFFFF) == 1)
      {
        char v28 = *(void (**)(uint64_t, uint64_t, size_t, _xlocale *, const char *, uint64_t, uint64_t, uint64_t, void, __darwin_ino64_t, void, void))(v27 + 8);
        if (v28) {
          v28(v27, v6, v7, v8, v9, v10, v11, v12, *(void *)&v69.st_dev, v69.st_ino, *(void *)&v69.st_uid, *(void *)&v69.st_rdev);
        }
      }
    }
    unsigned int v29 = (atomic_uint *)&__xlocale_C_collate;
    *(void *)(a2 + 1320) = &__xlocale_C_collate;
    uint64_t result = 1;
    goto LABEL_18;
  }
  if (__collate_load_tables_cache && !j__strncasecmp_l(a1, (const char *)(__collate_load_tables_cache + 16), v7, v8))
  {
    if ((_UNKNOWN *)a2 == &__global_locale) {
      __collate_load_errounsigned int r = 0;
    }
    uint64_t v30 = *(void *)(a2 + 1320);
    if (v30)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
      {
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, size_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, __darwin_ino64_t, void, void))(v30 + 8);
        if (v31) {
          v31(v30, v13, v7, v14, v15, v16, v17, v18, *(void *)&v69.st_dev, v69.st_ino, *(void *)&v69.st_uid, *(void *)&v69.st_rdev);
        }
      }
    }
    unsigned int v29 = (atomic_uint *)__collate_load_tables_cache;
    *(void *)(a2 + 1320) = __collate_load_tables_cache;
    uint64_t result = 1;
    if (!v29) {
      return result;
    }
LABEL_18:
    atomic_fetch_add(v29, 1u);
    return result;
  }
  j__strnstr(__big, a1, v7);
  strcpy(&__big[j__strsignal_r((int)__big, v19, v20)], "/LC_COLLATE");
  uint64_t result = __open_path_locale(__big, v21, v22);
  if (result == -1) {
    return result;
  }
  int v24 = result;
  if (fstat(result, &v69) < 0)
  {
    close_NOCANCEL();
    return 0xFFFFFFFFLL;
  }
  if (v69.st_size <= 0xA7uLL)
  {
    close_NOCANCEL();
LABEL_10:
    uint64_t v25 = __error();
    int v26 = 22;
LABEL_33:
    *uint64_t v25 = v26;
    return 0xFFFFFFFFLL;
  }
  uint64_t v32 = (unsigned int *)mmap(0, v69.st_size, 3, 2, v24, 0);
  close_NOCANCEL();
  if (v32 == (unsigned int *)-1) {
    return 0xFFFFFFFFLL;
  }
  if (!j__strsvisx((char *)v32, "1.1A\n", 0xCuLL, v33, v34)) {
    return __collate_load_tables_legacy(a1, a2, (uint64_t)v32, (char *)v32, (uint64_t)&v69);
  }
  if (j__strsvisx((char *)v32, "DARWIN 1.0\n", 0xCuLL, v35, v36) || (uint64_t v37 = v32[20], (v37 & 0x80000000) != 0))
  {
    munmap(v32, v69.st_size);
    uint64_t v25 = __error();
    int v26 = 79;
    goto LABEL_33;
  }
  if (v32[19])
  {
    st_unint64_t size = v69.st_size;
LABEL_71:
    munmap(v32, st_size);
    goto LABEL_10;
  }
  int v38 = 136 * v37 + 44 * v32[21] + 10240;
  uint64_t v39 = *((unsigned __int8 *)v32 + 24);
  if (*((unsigned char *)v32 + 24))
  {
    uint64_t v40 = (int *)(v32 + 22);
    do
    {
      int v41 = *v40++;
      v38 += 100 * v41;
      --v39;
    }
    while (v39);
  }
  st_unint64_t size = v69.st_size;
  if (v69.st_size - 168 != v38) {
    goto LABEL_71;
  }
  int v43 = (char *)malloc_type_malloc(0xC8uLL, 0x10B004021DA7767uLL);
  if (!v43)
  {
    munmap(v32, v69.st_size);
    uint64_t v25 = __error();
    int v26 = 12;
    goto LABEL_33;
  }
  uint64_t v45 = (uint64_t)v43;
  off_t v46 = v69.st_size;
  *((void *)v43 + 9) = v32;
  *((void *)v43 + 10) = v46;
  *(_DWORD *)int v43 = 2;
  *((void *)v43 + 1) = destruct_collate;
  *((void *)v43 + 24) = v32 + 42;
  uint64_t v47 = (char *)(v32 + 2602);
  uint64_t v48 = *((unsigned __int8 *)v32 + 24);
  if (*((unsigned char *)v32 + 24))
  {
    uint64_t v49 = (int *)(v32 + 22);
    uint64_t v50 = v43 + 96;
    do
    {
      int v51 = *v49++;
      uint64_t v52 = 100 * v51;
      BOOL v53 = v51 <= 0;
      if (v51 <= 0) {
        uint64_t v54 = 0;
      }
      else {
        uint64_t v54 = v47;
      }
      if (v53) {
        uint64_t v52 = 0;
      }
      v47 += v52;
      *v50++ = v54;
      --v48;
    }
    while (v48);
  }
  if ((int)v37 <= 0) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = v47;
  }
  if ((int)v37 <= 0) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = 136 * v37;
  }
  unint64_t v57 = &v47[v56];
  *((void *)v43 + 22) = v55;
  if ((int)v32[21] <= 0) {
    unint64_t v57 = 0;
  }
  *((void *)v43 + 23) = v57;
  j__strnstr(v43 + 16, a1, v44);
  *(void *)(v45 + 88) = v32 + 6;
  uint64_t v65 = __collate_load_tables_cache;
  if (__collate_load_tables_cache)
  {
    if (atomic_fetch_add((atomic_uint *volatile)__collate_load_tables_cache, 0xFFFFFFFF) == 1)
    {
      unint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, __darwin_ino64_t, void, void))(v65 + 8);
      if (v66) {
        v66(v65, v58, v59, v60, v61, v62, v63, v64, *(void *)&v69.st_dev, v69.st_ino, *(void *)&v69.st_uid, *(void *)&v69.st_rdev);
      }
    }
  }
  __collate_load_tables_cache = v45;
  uint64_t v67 = *(void *)(a2 + 1320);
  if (v67)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v67, 0xFFFFFFFF) == 1)
    {
      size_t v68 = *(void (**)(void))(v67 + 8);
      if (v68) {
        v68();
      }
    }
  }
  uint64_t result = 0;
  *(void *)(a2 + 1320) = __collate_load_tables_cache;
  *(unsigned char *)(v45 + 64) = 0;
  if ((_UNKNOWN *)a2 == &__global_locale)
  {
    uint64_t result = 0;
    __collate_load_errounsigned int r = 0;
  }
  return result;
}

uint64_t __collate_load_tables_legacy(const char *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v79 = 0;
  size_t v80 = 0;
  LODWORD(v10) = *(unsigned char *)(a3 + 13) & 0xF;
  if ((*(unsigned char *)(a3 + 13) & 0xF) != 0)
  {
    uint64_t v11 = (unsigned int *)(a3 + 22);
    uint64_t v12 = *(unsigned char *)(a3 + 13) & 0xF;
    do
    {
      *(v11 - 2) = bswap32(*(v11 - 2));
      *uint64_t v11 = bswap32(*v11);
      ++v11;
      --v12;
    }
    while (v12);
  }
  uint64_t v13 = bswap32(*(_DWORD *)(a3 + 30));
  *(_DWORD *)(a3 + 30) = v13;
  unsigned int v14 = bswap32(*(_DWORD *)(a3 + 34));
  *(_DWORD *)(a3 + 34) = v14;
  if ((v13 & 0x80000000) != 0)
  {
    munmap(a4, *(void *)(a5 + 96));
    int v33 = __error();
    int v34 = 79;
LABEL_21:
    *int v33 = v34;
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = a3 + 38;
  int v16 = 48 * v13 + 12 * v14 + 2048;
  if (v10)
  {
    uint64_t v17 = (int *)(a3 + 22);
    uint64_t v10 = v10;
    do
    {
      int v18 = *v17++;
      v16 += 44 * v18;
      --v10;
    }
    while (v10);
  }
  size_t v19 = *(void *)(a5 + 96);
  if (&a4[v19 - v15] != (char *)v16)
  {
    munmap(a4, v19);
    int v33 = __error();
    int v34 = 22;
    goto LABEL_21;
  }
  size_t v20 = malloc_type_malloc(0xC8uLL, 0x10B004021DA7767uLL);
  if (!v20)
  {
    munmap(a4, *(void *)(a5 + 96));
LABEL_20:
    int v33 = __error();
    int v34 = 12;
    goto LABEL_21;
  }
  uint64_t v21 = v20;
  *((void *)v20 + 9) = a4;
  *((void *)v20 + 10) = *(void *)(a5 + 96);
  int v22 = 136 * v13 + 44 * *(_DWORD *)(a3 + 34) + 10384;
  uint64_t v23 = *(unsigned char *)(a3 + 13) & 0xF;
  if ((*(unsigned char *)(a3 + 13) & 0xF) != 0)
  {
    int v24 = (int *)(a3 + 22);
    do
    {
      int v25 = *v24++;
      v22 += 100 * v25;
      --v23;
    }
    while (v23);
  }
  int v26 = (char *)malloc_type_calloc(1uLL, v22, 0x8FAB21C2uLL);
  *((void *)v21 + 11) = v26;
  if (!v26)
  {
    munmap(a4, *(void *)(a5 + 96));
    free(v21);
    goto LABEL_20;
  }
  char v28 = v26 + 144;
  *uint64_t v21 = 2;
  *((void *)v21 + 1) = destruct_collate;
  *((void *)v21 + 24) = v26 + 144;
  int v29 = *(_DWORD *)(a3 + 22);
  uint64_t v30 = (unsigned int *)(a3 + 2086);
  uint64_t v31 = v26 + 10384;
  if (v29 < 1)
  {
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v79 = a3 + 2086;
    v30 += 11 * v29;
    uint64_t v32 = v26 + 10384;
    v31 += 100 * v29;
  }
  *((void *)v21 + 12) = v32;
  if (*(unsigned char *)(a3 + 12))
  {
    *((void *)v21 + 13) = v32;
  }
  else
  {
    int v36 = *(_DWORD *)(a3 + 26);
    if (v36 < 1)
    {
      *((void *)v21 + 13) = 0;
    }
    else
    {
      size_t v80 = v30;
      *((void *)v21 + 13) = v31;
      v30 += 11 * v36;
      v31 += 100 * v36;
    }
  }
  if ((int)v13 >= 1) {
    uint64_t v37 = v31;
  }
  else {
    uint64_t v37 = 0;
  }
  if ((int)v13 >= 1) {
    int v38 = &v30[12 * v13];
  }
  else {
    int v38 = v30;
  }
  if ((int)v13 >= 1) {
    uint64_t v39 = v30;
  }
  else {
    uint64_t v39 = 0;
  }
  if ((int)v13 >= 1) {
    uint64_t v40 = &v31[136 * v13];
  }
  else {
    uint64_t v40 = v31;
  }
  *((void *)v21 + 22) = v37;
  int v41 = *(_DWORD *)(a3 + 34);
  BOOL v42 = v41 <= 0;
  if (v41 <= 0) {
    int v43 = 0;
  }
  else {
    int v43 = v40;
  }
  if (v42) {
    size_t v44 = 0;
  }
  else {
    size_t v44 = v38;
  }
  *((void *)v21 + 23) = v43;
  char v45 = *(unsigned char *)(a3 + 13);
  int v46 = 255;
  do
  {
    int v47 = v46;
    if ((v45 & 0xF) != 0)
    {
      unint64_t v48 = 0;
      do
      {
        *(_DWORD *)&v28[4 * v48] = bswap32(*(_DWORD *)(v15 + 4 * v48));
        ++v48;
        char v45 = *(unsigned char *)(a3 + 13);
      }
      while (v48 < (v45 & 0xFu));
    }
    v28 += 40;
    v15 += 8;
    int v46 = v47 - 1;
  }
  while (v47);
  if ((v45 & 0xF) != 0)
  {
    unint64_t v49 = 0;
    do
    {
      int v50 = *(_DWORD *)(a3 + 22 + 4 * v49);
      if (v50 >= 1)
      {
        uint64_t v51 = *(&v79 + v49);
        uint64_t v52 = *(void *)&v21[2 * v49 + 24];
        BOOL v53 = (unsigned int *)(v52 + 8);
        do
        {
          long long v54 = *(_OWORD *)(v51 + 4);
          long long v55 = *(_OWORD *)(v51 + 20);
          *(void *)(v52 + 36) = *(void *)(v51 + 36);
          *(_OWORD *)(v52 + 20) = v55;
          *(_OWORD *)(v52 + 4) = v54;
          *(_DWORD *)uint64_t v52 = bswap32(*(_DWORD *)v51);
          unsigned int v56 = *(_DWORD *)(v52 + 4);
          if (v56)
          {
            unsigned int v57 = 10;
            uint64_t v58 = v53;
            do
            {
              *(v58 - 1) = bswap32(v56);
              unsigned int v59 = *v58++;
              unsigned int v56 = v59;
              if (v59) {
                BOOL v60 = v57 > 1;
              }
              else {
                BOOL v60 = 0;
              }
              --v57;
            }
            while (v60);
          }
          v51 += 44;
          v52 += 100;
          v53 += 25;
          BOOL v42 = v50-- <= 1;
        }
        while (!v42);
        char v45 = *(unsigned char *)(a3 + 13);
      }
      ++v49;
    }
    while (v49 < (v45 & 0xFu));
    uint64_t v37 = (char *)*((void *)v21 + 22);
  }
  if ((int)v13 >= 1)
  {
    uint64_t v61 = (unsigned int *)(v37 + 4);
    do
    {
      long long v63 = *(_OWORD *)v39;
      long long v62 = *((_OWORD *)v39 + 1);
      *((void *)v37 + 4) = *((void *)v39 + 4);
      *(_OWORD *)uint64_t v37 = v63;
      *((_OWORD *)v37 + 1) = v62;
      unsigned int v64 = *(_DWORD *)v37;
      if (*(_DWORD *)v37)
      {
        unsigned int v65 = 10;
        unint64_t v66 = v61;
        do
        {
          *(v66 - 1) = bswap32(v64);
          unsigned int v67 = *v66++;
          unsigned int v64 = v67;
          if (v67) {
            BOOL v68 = v65 > 1;
          }
          else {
            BOOL v68 = 0;
          }
          --v65;
        }
        while (v68);
      }
      if ((*(unsigned char *)(a3 + 13) & 0xF) != 0)
      {
        unint64_t v69 = 0;
        do
        {
          *(_DWORD *)&v37[4 * v69 + 96] = bswap32(v39[v69 + 10]);
          ++v69;
        }
        while (v69 < (*(unsigned char *)(a3 + 13) & 0xFu));
      }
      v37 += 136;
      v39 += 12;
      v61 += 34;
      BOOL v42 = (int)v13 <= 1;
      LODWORD(v13) = v13 - 1;
    }
    while (!v42);
  }
  int v70 = *(_DWORD *)(a3 + 34);
  if (v70 >= 1)
  {
    mbstate_t v71 = (_DWORD *)*((void *)v21 + 23);
    do
    {
      *mbstate_t v71 = bswap32(*v44);
      if ((*(unsigned char *)(a3 + 13) & 0xF) != 0)
      {
        unint64_t v72 = 1;
        do
          v71[v72] = bswap32(v44[v72]);
        while (v72++ < (*(unsigned char *)(a3 + 13) & 0xFu));
      }
      v71 += 11;
      v44 += 3;
      BOOL v42 = v70-- <= 1;
    }
    while (!v42);
  }
  j__strnstr((const char *)v21 + 16, a1, v27);
  uint64_t v74 = *((void *)v21 + 11);
  *(_OWORD *)(v74 + 112) = 0u;
  *(_OWORD *)(v74 + 128) = 0u;
  *(_OWORD *)(v74 + 80) = 0u;
  *(_OWORD *)(v74 + 96) = 0u;
  *(_OWORD *)(v74 + 48) = 0u;
  *(_OWORD *)(v74 + 64) = 0u;
  *(_OWORD *)(v74 + 16) = 0u;
  *(_OWORD *)(v74 + 32) = 0u;
  *(_OWORD *)uint64_t v74 = 0u;
  *(unsigned char *)uint64_t v74 = *(unsigned char *)(a3 + 13) & 0xF;
  *(unsigned char *)(v74 + 11) = *(unsigned char *)(a3 + 13) >> 4;
  *(_DWORD *)(v74 + 52) = *(unsigned __int8 *)(a3 + 12) | 2;
  *(void *)(v74 + 56) = *(void *)(a3 + 30);
  *(_WORD *)(v74 + 1) = *(_WORD *)(a3 + 10);
  *(void *)(v74 + 64) = *(void *)(a3 + 22);
  *(void *)(v74 + 104) = *(void *)(a3 + 14);
  uint64_t v75 = __collate_load_tables_cache;
  if (__collate_load_tables_cache)
  {
    if (atomic_fetch_add((atomic_uint *volatile)__collate_load_tables_cache, 0xFFFFFFFF) == 1)
    {
      int v76 = *(void (**)(void))(v75 + 8);
      if (v76) {
        v76();
      }
    }
  }
  __collate_load_tables_cache = (uint64_t)v21;
  uint64_t v77 = *(void *)(a2 + 1320);
  if (v77)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v77, 0xFFFFFFFF) == 1)
    {
      unsigned int v78 = *(void (**)(void))(v77 + 8);
      if (v78) {
        v78();
      }
    }
  }
  uint64_t result = 0;
  *(void *)(a2 + 1320) = v21;
  *((unsigned char *)v21 + 64) = 0;
  if ((_UNKNOWN *)a2 == &__global_locale)
  {
    uint64_t result = 0;
    __collate_load_errounsigned int r = 0;
  }
  return result;
}

void destruct_collate(void *a1)
{
  locale_t v2 = (unsigned char *)a1[11];
  if ((v2[52] & 2) != 0) {
    free(v2);
  }
  locale_t v3 = (void *)a1[9];
  if (v3)
  {
    size_t v4 = a1[10];
    if (v4) {
      munmap(v3, v4);
    }
  }

  free(a1);
}

__int32 *__collate_substitute(__int32 *a1, int a2, uint64_t a3)
{
  if (!a1 || (locale_t v3 = a1, !*a1))
  {
    a1 = (__int32 *)&unk_18AA007F0;
LABEL_33:
    return __collate_wcsdup(a1);
  }
  uint64_t v4 = *(void *)(a3 + 1320);
  int v5 = *(_DWORD *)(*(void *)(v4 + 88) + 4 * a2 + 64);
  if (v5 <= 0) {
    goto LABEL_33;
  }
  uint64_t v6 = a2;
  int v7 = wcslen(a1);
  uint64_t v8 = *(void *)(v4 + 8 * v6 + 96);
  int v9 = v7 / 4;
  if (v7 / 4 <= 2) {
    int v9 = 2;
  }
  int v34 = v9;
  int v10 = v9 + v7;
  uint64_t v11 = malloc_type_malloc(4 * (v9 + v7), 0x100004052888210uLL);
  if (!v11) {
LABEL_39:
  }
    __collate_err(71, (int)"__collate_substitute");
  uint64_t v12 = v11;
  __int32 v13 = *v3;
  if (*v3)
  {
    int v14 = 0;
    int v15 = v5 - 1;
    do
    {
      int v16 = 0;
      int v17 = v15;
      while (1)
      {
        int v18 = v16 + v17;
        if (v16 + v17 < 0 != __OFADD__(v16, v17)) {
          ++v18;
        }
        int v19 = v18 >> 1;
        uint64_t v20 = (uint64_t)v18 >> 1;
        __int32 v21 = *(_DWORD *)(v8 + 100 * v19);
        if (v21 == v13) {
          break;
        }
        if (v21 >= v13) {
          int v17 = v20 - 1;
        }
        else {
          int v16 = v20 + 1;
        }
        if (v16 > v17)
        {
          LODWORD(v22) = 1;
          uint64_t v23 = v3;
          goto LABEL_27;
        }
      }
      uint64_t v24 = v8 + 100 * (int)v20;
      int v25 = *(_DWORD *)(v24 + 4);
      uint64_t v23 = (const __int32 *)(v24 + 4);
      if (v25)
      {
        uint64_t v22 = 0;
        do
        {
          int v26 = *(_DWORD *)(v8 + 8 + 100 * (int)v20 + 4 * v22);
          unsigned int v27 = v22++;
          if (v26) {
            BOOL v28 = v27 >= 0x17;
          }
          else {
            BOOL v28 = 1;
          }
        }
        while (!v28);
      }
      else
      {
        LODWORD(v22) = 0;
      }
LABEL_27:
      int v29 = v22 + v14;
      if (v10 <= (int)v22 + v14)
      {
        int v10 = v29 + v34;
        uint64_t v30 = reallocf(v12, 4 * (v29 + v34));
        if (!v30) {
          goto LABEL_39;
        }
        uint64_t v12 = v30;
      }
      wcsncpy((__int32 *)v12 + v14, v23, v22);
      __int32 v31 = v3[1];
      ++v3;
      __int32 v13 = v31;
      v14 += v22;
    }
    while (v31);
    uint64_t v32 = v29;
  }
  else
  {
    uint64_t v32 = 0;
  }
  *((_DWORD *)v12 + v32) = 0;
  return (__int32 *)v12;
}

__int32 *__collate_wcsdup(const __int32 *a1)
{
  size_t v2 = wcslen(a1);
  locale_t v3 = (__int32 *)malloc_type_malloc(4 * v2 + 4, 0x100004052888210uLL);
  if (!v3) {
    __collate_err(71, (int)"__collate_wcsdup");
  }
  uint64_t v4 = v3;
  wcscpy(v3, a1);
  return v4;
}

void __collate_err(int a1, int a2)
{
  int v4 = *__error();
  int v5 = getprogname();
  j__strsignal_r(v5, v6, v7);
  write_NOCANCEL();
  write_NOCANCEL();
  j__strsignal_r(a2, v8, v9);
  write_NOCANCEL();
  write_NOCANCEL();
  int v10 = strerror(v4);
  j__strsignal_r(v10, v11, v12);
  write_NOCANCEL();
  write_NOCANCEL();
  exit(a1);
}

__int32 *__collate_lookup_l(__int32 *result, _DWORD *a2, int *a3, int *a4, void *a5)
{
  __int32 v8 = *result;
  if (!*result)
  {
    *a2 = 0;
    *a3 = 0;
    goto LABEL_10;
  }
  size_t v9 = result;
  int v10 = &__global_locale;
  if (a5 != (void *)-1) {
    int v10 = a5;
  }
  if (a5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = &__c_locale;
  }
  uint64_t v12 = v11[165];
  if (*(unsigned char *)(v12 + 64))
  {
    __int32 v8 = 0;
    *a2 = 1;
    *a3 = *result;
LABEL_10:
    *a4 = v8;
    return result;
  }
  int v19 = 0;
  *a2 = 1;
  uint64_t result = (__int32 *)chainsearch(result, &v19, (uint64_t)v11);
  if (!result || result[24] < 0)
  {
    int v14 = *v9;
    uint64_t v15 = v11[165];
    if (*v9 > 255)
    {
      int v17 = *(int **)(v15 + 88);
      if (v17[15] < 1 || (uint64_t result = largesearch(*v9, (uint64_t)v11)) == 0)
      {
        int v18 = v17[26];
        if (v18 < 0) {
          int v18 = v14 - v18;
        }
        *a3 = v18;
        __int32 v8 = v17[27];
        if (v8 < 0) {
          __int32 v8 = *v9 - v8;
        }
        goto LABEL_10;
      }
      *a3 = result[1];
      __int32 v13 = result + 2;
    }
    else
    {
      uint64_t v16 = *(void *)(v15 + 192);
      *a3 = *(_DWORD *)(v16 + 40 * v14);
      __int32 v13 = (int *)(v16 + 40 * *v9 + 4);
    }
  }
  else
  {
    *a2 = v19;
    *a3 = result[24];
    __int32 v13 = result + 25;
  }
  *a4 = *v13;
  if ((*a3 & 0x80000000) == 0)
  {
    uint64_t result = (__int32 *)lookup_substsearch(v12, *a3, 0);
    if (result) {
      *a3 = *result;
    }
  }
  if ((*a4 & 0x80000000) == 0)
  {
    uint64_t result = (__int32 *)lookup_substsearch(v12, *a4, 1);
    if (result)
    {
      __int32 v8 = result[1];
      goto LABEL_10;
    }
  }
  return result;
}

const __int32 *chainsearch(__int32 *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 1320);
  int v4 = *(_DWORD *)(*(void *)(v3 + 88) + 56);
  int v5 = v4 - 1;
  if (v4 < 1) {
    return 0;
  }
  int v8 = 0;
  uint64_t v9 = *(void *)(v3 + 176);
  while (1)
  {
    int v10 = v5 + v8;
    if (v5 + v8 < 0 != __OFADD__(v5, v8)) {
      ++v10;
    }
    uint64_t v11 = (uint64_t)v10 >> 1;
    uint64_t v12 = (const __int32 *)(v9 + 136 * (v10 >> 1));
    int v13 = *a1 - *v12;
    if (*a1 == *v12)
    {
      if (*v12)
      {
        uint64_t v14 = 0;
        do
        {
          unsigned int v15 = v14 + 1;
          if (*(_DWORD *)(v9 + 4 + 136 * (int)v11 + 4 * v14)) {
            BOOL v16 = v14 >= 0x17;
          }
          else {
            BOOL v16 = 1;
          }
          ++v14;
        }
        while (!v16);
        size_t v17 = v15;
      }
      else
      {
        size_t v17 = 0;
      }
      int v13 = wcsncmp(a1, v12, v17);
      if (!v13) {
        break;
      }
    }
    if (v13 <= 0) {
      int v5 = v11 - 1;
    }
    else {
      int v8 = v11 + 1;
    }
    if (v8 > v5) {
      return 0;
    }
  }
  *a2 = v17;
  return v12;
}

_DWORD *largesearch(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 1320);
  int v3 = *(_DWORD *)(*(void *)(v2 + 88) + 60);
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 != v4) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = *(void *)(v2 + 184);
  while (1)
  {
    int v8 = v5 + v6;
    if (v5 + v6 < 0 != __OFADD__(v5, v6)) {
      ++v8;
    }
    int v9 = v8 >> 1;
    int v10 = (_DWORD *)(v7 + 44 * (v8 >> 1));
    if (*v10 == a1) {
      break;
    }
    if (*v10 >= a1) {
      int v5 = v9 - 1;
    }
    else {
      int v6 = v9 + 1;
    }
    if (v6 > v5) {
      return 0;
    }
  }
  return v10;
}

uint64_t lookup_substsearch(uint64_t a1, int a2, int a3)
{
  int v3 = *(unsigned __int8 **)(a1 + 88);
  if (!*(_DWORD *)&v3[4 * a3 + 64]) {
    return 0;
  }
  uint64_t v4 = 0;
  if ((a2 & 0x40000000) != 0 && *v3 > a3)
  {
    uint64_t v5 = *(void *)(a1 + 8 * a3 + 96);
    if (*(_DWORD *)(v5 + 100 * (int)(a2 & 0xBFFFFFFF)) != a2) {
      lookup_substsearch_cold_1();
    }
    return v5 + 100 * (int)(a2 & 0xBFFFFFFF) + 4;
  }
  return v4;
}

int *__collate_lookup(int *result, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v7 = __locale_key;
  int v8 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if (v8) {
    int v9 = v8;
  }
  else {
    int v9 = (_xlocale *)&__global_locale;
  }
  if (*(unsigned char *)result)
  {
    int v10 = result;
    if (*(unsigned char *)(*((void *)v9 + 165) + 64) || (uint64_t v12 = __collate_mbstowcs((char *)result, v9)) == 0)
    {
      *a2 = 1;
      *a3 = *(unsigned __int8 *)v10;
      *a4 = 0;
      int v11 = *__error();
    }
    else
    {
      int v13 = v12;
      __collate_lookup_l(v12, a2, a3, a4, v9);
      int v11 = *__error();
      free(v13);
    }
    uint64_t result = __error();
    *uint64_t result = v11;
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

__int32 *__collate_mbstowcs(char *a1, locale_t a2)
{
  int v8 = a1;
  int v9 = a1;
  memset(&v10, 0, sizeof(v10));
  size_t v3 = mbsrtowcs_l(0, (const char **)&v8, 0, &v10, a2);
  if (v3 == -1) {
    return 0;
  }
  size_t v4 = v3;
  uint64_t v5 = (__int32 *)malloc_type_malloc(4 * v3 + 4, 0x100004052888210uLL);
  if (!v5) {
    __collate_err(71, (int)"__collate_mbstowcs");
  }
  int v6 = v5;
  memset(&v10, 0, sizeof(v10));
  mbsrtowcs_l(v5, (const char **)&v9, v4, &v10, a2);
  v6[v4] = 0;
  return v6;
}

int *__collate_lookup_which(__int32 *a1, _DWORD *a2, int *a3, int a4, uint64_t a5)
{
  int v17 = 0;
  uint64_t v10 = *(void *)(a5 + 1320);
  *a2 = 1;
  uint64_t result = (int *)chainsearch(a1, &v17, a5);
  if (!result || (int v12 = result[a4 + 24], v12 < 0))
  {
    int v13 = *a1;
    uint64_t v14 = *(void *)(a5 + 1320);
    if (*a1 > 255)
    {
      uint64_t v15 = *(void *)(v14 + 88);
      if (*(int *)(v15 + 60) < 1 || (uint64_t result = largesearch(v13, a5)) == 0)
      {
        if ((*(unsigned char *)(v15 + a4 + 1) & 8) != 0) {
          int v16 = v13 & 0xFFFFFF;
        }
        else {
          int v16 = *(_DWORD *)(v15 + 4 * a4 + 104);
        }
        goto LABEL_11;
      }
      int v12 = result[a4 + 1];
    }
    else
    {
      int v12 = *(_DWORD *)(*(void *)(v14 + 192) + 40 * v13 + 4 * a4);
    }
  }
  else
  {
    *a2 = v17;
  }
  *a3 = v12;
  uint64_t result = (int *)lookup_substsearch(v10, v12, 0);
  if (!result) {
    return result;
  }
  int v16 = *result;
LABEL_11:
  *a3 = v16;
  return result;
}

int *__collate_xfrm(__int32 *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v26 = 0;
  size_t v3 = *(unsigned __int8 **)(*(void *)(a3 + 1320) + 88);
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  if (*v3)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    int v9 = 0;
    while (1)
    {
      unsigned __int8 v10 = v3[v7 + 1];
      if (!v7 || (v3[52] & 1) == 0)
      {
        int v11 = *__error();
        free(v9);
        *__error() = v11;
        int v9 = __collate_substitute(a1, v7, a3);
      }
      if ((v10 & 2) != 0)
      {
        int v13 = *__error();
        free(v8);
        *__error() = v13;
        uint64_t v14 = v9 ? v9 : a1;
        int v12 = __collate_wcsdup(v14);
        uint64_t v15 = &v12[wcslen(v12) - 1];
        if (v12 < v15)
        {
          int v16 = v12 + 1;
          do
          {
            __int32 v17 = *(v16 - 1);
            *(v16 - 1) = *v15;
            *v15-- = v17;
          }
          while (v16++ < v15);
        }
        int v8 = v12;
      }
      else
      {
        int v12 = v9 ? v9 : a1;
      }
      int v19 = *__error();
      size_t v20 = wcslen(v12);
      __int32 v21 = malloc_type_malloc(4 * v20 + 4, 0x100004052888210uLL);
      *((void *)a2 + v7) = v21;
      if (!v21) {
        break;
      }
      *__error() = v19;
      uint64_t v22 = (int *)*((void *)a2 + v7);
      if ((v10 & 4) != 0)
      {
        while (*v12)
        {
          __collate_lookup_which(v12, &v26, (int *)&v26 + 1, v7, a3);
          int v23 = HIDWORD(v26);
          if (SHIDWORD(v26) <= 0)
          {
            if (v26 < 0)
            {
LABEL_32:
              int v19 = 22;
              goto LABEL_33;
            }
            int v23 = 0xFFFFFF;
            HIDWORD(v26) = 0xFFFFFF;
          }
          v12 += (int)v26;
          *v22++ = v23;
        }
      }
      else
      {
        while (*v12)
        {
          __collate_lookup_which(v12, &v26, (int *)&v26 + 1, v7, a3);
          v12 += (int)v26;
          if (SHIDWORD(v26) > 0)
          {
            *v22++ = HIDWORD(v26);
          }
          else if (v26 < 0)
          {
            goto LABEL_32;
          }
        }
      }
      *uint64_t v22 = 0;
      if (++v7 >= (unint64_t)*v3) {
        goto LABEL_35;
      }
    }
LABEL_33:
    *__error() = v19;
  }
  else
  {
    int v9 = 0;
    int v8 = 0;
  }
LABEL_35:
  int v24 = *__error();
  free(v9);
  free(v8);
  uint64_t result = __error();
  *uint64_t result = v24;
  return result;
}

uint64_t __collate_collating_symbol(__int32 *a1, unint64_t a2, char *a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  size_t v6 = a4;
  uint64_t v7 = a3;
  if (!*(unsigned char *)(*((void *)a6 + 165) + 64))
  {
    if (a4)
    {
      uint64_t v13 = 0;
      __int32 v22 = 0;
      uint64_t v14 = v23;
      do
      {
        size_t v15 = mbrtowc_l(&v22, v7, v6, a5, a6);
        if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
          return -1;
        }
        if (!v15) {
          break;
        }
        if (v13 == 24) {
          return -1;
        }
        *v14++ = v22;
        v7 += v15;
        ++v13;
        v6 -= v15;
      }
      while (v6);
      if (v13 - 1 >= a2) {
        return -1;
      }
      if (v13 == 1)
      {
        __int32 v16 = v23[0];
        uint64_t v17 = *((void *)a6 + 165);
        if (v23[0] > 255)
        {
          if (*(int *)(*(void *)(v17 + 88) + 60) < 1) {
            return 0;
          }
          int v19 = largesearch(v23[0], (uint64_t)a6);
          if (!v19 || (v19[1] & 0x80000000) != 0) {
            return 0;
          }
        }
        else if ((*(_DWORD *)(*(void *)(v17 + 192) + 40 * v23[0]) & 0x80000000) != 0)
        {
          return 0;
        }
        *a1 = v16;
        return 1;
      }
      __int32 *v14 = 0;
      if (*(int *)(*(void *)(*((void *)a6 + 165) + 88) + 56) >= 1)
      {
        int v21 = 0;
        if (chainsearch(v23, &v21, (uint64_t)a6))
        {
          uint64_t v10 = v21;
          if (v21 >= a2) {
            size_t v18 = a2;
          }
          else {
            size_t v18 = v21;
          }
          wcsncpy(a1, v23, v18);
          return v10;
        }
      }
      return 0;
    }
    return -1;
  }
  if (!a2) {
    return -1;
  }
  if (a4 != 1 || *a3 < 0) {
    return 0;
  }
  *a1 = *a3;
  return 1;
}

uint64_t __collate_equiv_class(char *a1, size_t a2, mbstate_t *a3, _xlocale *a4)
{
  if (*(unsigned char *)(*((void *)a4 + 165) + 64)) {
    return 0;
  }
  size_t v5 = a2;
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = 0;
  __int32 v18 = 0;
  uint64_t v10 = v19;
  do
  {
    size_t v11 = mbrtowc_l(&v18, a1, v5, a3, a4);
    if (v11 > 0xFFFFFFFFFFFFFFFDLL) {
      return 0xFFFFFFFFLL;
    }
    if (!v11) {
      break;
    }
    if (v9 == 24) {
      return 0xFFFFFFFFLL;
    }
    *v10++ = v18;
    a1 += v11;
    ++v9;
    v5 -= v11;
  }
  while (v5);
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  if (v9 == 1)
  {
    uint64_t v12 = *((void *)a4 + 165);
    if (v19[0] <= 255)
    {
      uint64_t v13 = (int *)(*(void *)(v12 + 192) + 40 * v19[0]);
      goto LABEL_25;
    }
    if (*(int *)(*(void *)(v12 + 88) + 60) < 1) {
      return 0;
    }
    uint64_t result = (uint64_t)largesearch(v19[0], (uint64_t)a4);
    if (result)
    {
      uint64_t v13 = (int *)(result + 4);
LABEL_25:
      int v16 = *v13;
      if (v16) {
        return v16 & ~(v16 >> 31);
      }
      else {
        return 1;
      }
    }
  }
  else
  {
    __int32 *v10 = 0;
    if (*(int *)(*(void *)(*((void *)a4 + 165) + 88) + 56) < 1) {
      return 0;
    }
    uint64_t result = (uint64_t)chainsearch(v19, &v17, (uint64_t)a4);
    if (result)
    {
      int v14 = *(_DWORD *)(result + 96);
      BOOL v15 = v14 == 0;
      if (v14 < 0) {
        int v14 = -v14;
      }
      if (v15) {
        return 1;
      }
      else {
        return v14;
      }
    }
  }
  return result;
}

unint64_t __collate_equiv_match(int a1, uint64_t a2, unint64_t a3, int a4, char *a5, size_t a6, mbstate_t *a7, void *a8, locale_t a9)
{
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  if (*(unsigned char *)(*((void *)a9 + 165) + 64)) {
    return -1;
  }
  size_t v11 = a8;
  size_t v13 = a6;
  int v14 = a5;
  uint64_t v16 = a2;
  if (a1 == 1) {
    int v17 = 0;
  }
  else {
    int v17 = a1;
  }
  int v50 = v17;
  if (a7)
  {
    long long v18 = *((_OWORD *)&a7->_mbstateL + 5);
    long long v57 = *((_OWORD *)&a7->_mbstateL + 4);
    long long v58 = v18;
    long long v19 = *((_OWORD *)&a7->_mbstateL + 7);
    long long v59 = *((_OWORD *)&a7->_mbstateL + 6);
    long long v60 = v19;
    long long v20 = *((_OWORD *)&a7->_mbstateL + 1);
    long long v53 = *(_OWORD *)a7->__mbstate8;
    long long v54 = v20;
    long long v21 = *((_OWORD *)&a7->_mbstateL + 3);
    long long v55 = *((_OWORD *)&a7->_mbstateL + 2);
    long long v56 = v21;
  }
  __int32 v22 = path;
  if (a4)
  {
    __int32 v22 = (char *)&v62;
    *(_DWORD *)path = a4;
    unint64_t v9 = 1;
  }
  else
  {
    unint64_t v9 = 0;
  }
  __int32 v52 = 0;
  if (a6)
  {
    uint64_t v23 = 0;
    size_t v24 = a6;
    int v25 = a5;
    do
    {
      if (v9 >= *(unsigned __int8 *)(*(void *)(*((void *)a9 + 165) + 88) + 11)) {
        break;
      }
      size_t v26 = mbrtowc_l(&v52, v25, v24, a7, a9);
      if (v26 + 2 < 3) {
        break;
      }
      *(_DWORD *)__int32 v22 = v52;
      v22 += 4;
      v25 += v26;
      v23 += v26;
      ++v9;
      v24 -= v26;
    }
    while (v24);
    int v51 = 0;
    *(_DWORD *)__int32 v22 = 0;
    uint64_t v16 = a2;
    if (v9 < 2)
    {
      size_t v11 = a8;
    }
    else
    {
      unsigned int v27 = chainsearch((__int32 *)path, &v51, (uint64_t)a9);
      size_t v11 = a8;
      if (v27)
      {
        int v28 = v27[24];
        if (v28 < 0) {
          int v28 = -v28;
        }
        if (v28 == v50)
        {
          int v29 = v51;
          goto LABEL_32;
        }
      }
    }
  }
  else
  {
    uint64_t v23 = 0;
    *(_DWORD *)__int32 v22 = 0;
  }
  uint64_t v30 = *((void *)a9 + 165);
  if (*(int *)path > 255)
  {
    if (*(int *)(*(void *)(v30 + 88) + 60) < 1) {
      goto LABEL_42;
    }
    uint64_t v32 = largesearch(*(int *)path, (uint64_t)a9);
    if (!v32) {
      goto LABEL_42;
    }
    int v31 = v32[1];
  }
  else
  {
    int v31 = *(_DWORD *)(*(void *)(v30 + 192) + 40 * *(int *)path);
  }
  if (v50 == v31)
  {
    int v29 = 1;
LABEL_32:
    if (v9 > v29)
    {
      unint64_t v9 = v29;
      if (a7)
      {
        long long v33 = v58;
        *((_OWORD *)&a7->_mbstateL + 4) = v57;
        *((_OWORD *)&a7->_mbstateL + 5) = v33;
        long long v34 = v60;
        *((_OWORD *)&a7->_mbstateL + 6) = v59;
        *((_OWORD *)&a7->_mbstateL + 7) = v34;
        long long v35 = v54;
        *(_OWORD *)a7->__mbstate8 = v53;
        *((_OWORD *)&a7->_mbstateL + 1) = v35;
        long long v36 = v56;
        *((_OWORD *)&a7->_mbstateL + 2) = v55;
        *((_OWORD *)&a7->_mbstateL + 3) = v36;
      }
      int v37 = v29 - (a4 != 0);
      if (v37 < 1)
      {
        uint64_t v23 = 0;
        if (v16) {
          goto LABEL_39;
        }
        goto LABEL_47;
      }
      uint64_t v23 = 0;
      do
      {
        --v37;
        size_t v38 = mbrtowc_l(&v52, v14, v13, a7, a9);
        v14 += v38;
        v23 += v38;
        v13 -= v38;
      }
      while (v37);
    }
    if (v16)
    {
LABEL_39:
      if (v9 > a3)
      {
        if (a7)
        {
          long long v39 = v58;
          *((_OWORD *)&a7->_mbstateL + 4) = v57;
          *((_OWORD *)&a7->_mbstateL + 5) = v39;
          long long v40 = v60;
          *((_OWORD *)&a7->_mbstateL + 6) = v59;
          *((_OWORD *)&a7->_mbstateL + 7) = v40;
          long long v41 = v54;
          *(_OWORD *)a7->__mbstate8 = v53;
          *((_OWORD *)&a7->_mbstateL + 1) = v41;
          long long v42 = v56;
          *((_OWORD *)&a7->_mbstateL + 2) = v55;
          *((_OWORD *)&a7->_mbstateL + 3) = v42;
        }
        return -1;
      }
      if (v9)
      {
        j__mkdtempat_np(v16, path);
        unint64_t v9 = 0;
      }
    }
LABEL_47:
    if (v11) {
      *size_t v11 = v23;
    }
    return v9;
  }
LABEL_42:
  unint64_t v9 = 0;
  if (a7)
  {
    long long v43 = v58;
    *((_OWORD *)&a7->_mbstateL + 4) = v57;
    *((_OWORD *)&a7->_mbstateL + 5) = v43;
    long long v44 = v60;
    *((_OWORD *)&a7->_mbstateL + 6) = v59;
    *((_OWORD *)&a7->_mbstateL + 7) = v44;
    long long v45 = v54;
    *(_OWORD *)a7->__mbstate8 = v53;
    *((_OWORD *)&a7->_mbstateL + 1) = v45;
    long long v46 = v56;
    *((_OWORD *)&a7->_mbstateL + 2) = v55;
    *((_OWORD *)&a7->_mbstateL + 3) = v46;
  }
  return v9;
}

uint64_t __collate_equiv_value(uint64_t a1, const __int32 *a2, size_t a3)
{
  if (a3 - 24 < 0xFFFFFFFFFFFFFFE9) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a1 + 1320);
  if (*(unsigned char *)(v5 + 64))
  {
    if (a3 == 1)
    {
      if (*a2 >= 256) {
        return 0xFFFFFFFFLL;
      }
      else {
        return *(unsigned int *)a2;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (a3 == 1)
  {
    int v7 = *a2;
    if (*a2 <= 255)
    {
      int v8 = (int *)(*(void *)(v5 + 192) + 40 * v7);
LABEL_22:
      int v11 = *v8;
      if (v11) {
        return v11 & ~(v11 >> 31);
      }
      else {
        return 1;
      }
    }
    if (*(int *)(*(void *)(v5 + 88) + 60) >= 1)
    {
      uint64_t result = (uint64_t)largesearch(v7, a1);
      if (!result) {
        return result;
      }
      int v8 = (int *)(result + 4);
      goto LABEL_22;
    }
    return 0;
  }
  if (*(int *)(*(void *)(v5 + 88) + 56) < 1) {
    return 0;
  }
  wcsncpy(v13, a2, a3);
  v13[a3] = 0;
  uint64_t result = (uint64_t)chainsearch(v13, &v12, a1);
  if (result)
  {
    int v9 = *(_DWORD *)(result + 96);
    BOOL v10 = v9 == 0;
    if (v9 < 0) {
      int v9 = -v9;
    }
    if (v10) {
      return 1;
    }
    else {
      return v9;
    }
  }
  return result;
}

uint64_t __collate_range_cmp(int a1, int a2, _xlocale *a3)
{
  __collate_range_cmp_s1 = a1;
  __collate_range_cmp_s2 = a2;
  return wcscoll_l(&__collate_range_cmp_s1, &__collate_range_cmp_s2, a3);
}

uint64_t _EUC_CN_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[9] = _EUC_CN_mbrtowc;
  a1[12] = _EUC_CN_wcrtomb;
  a1[11] = _EUC_CN_mbsnrtowcs;
  a1[13] = _EUC_CN_wcsnrtombs;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _EUC_CN_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 0, 0, 0, 0, a5);
}

uint64_t _EUC_CN_wcrtomb(unsigned char *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 0, 0, 0, 0);
}

BOOL _EUC_mbsinit(uint64_t a1)
{
  return !a1 || *(_DWORD *)(a1 + 4) == 0;
}

uint64_t _EUC_KR_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[9] = _EUC_KR_mbrtowc;
  a1[12] = _EUC_KR_wcrtomb;
  a1[11] = _EUC_KR_mbsnrtowcs;
  a1[13] = _EUC_KR_wcsnrtombs;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _EUC_KR_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 0, 0, 0, 0, a5);
}

uint64_t _EUC_KR_wcrtomb(unsigned char *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 0, 0, 0, 0);
}

uint64_t _EUC_JP_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[9] = _EUC_JP_mbrtowc;
  a1[12] = _EUC_JP_wcrtomb;
  a1[11] = _EUC_JP_mbsnrtowcs;
  a1[13] = _EUC_JP_wcsnrtombs;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000003;
  return 0;
}

uint64_t _EUC_JP_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 142, 2, 143, 3, a5);
}

uint64_t _EUC_JP_wcrtomb(unsigned char *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 142, 2, 143, 3);
}

uint64_t _EUC_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[9] = _EUC_JP_mbrtowc;
  a1[12] = _EUC_JP_wcrtomb;
  a1[11] = _EUC_JP_mbsnrtowcs;
  a1[13] = _EUC_JP_wcsnrtombs;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x10000000003;
  return 0;
}

uint64_t _EUC_TW_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[9] = _EUC_TW_mbrtowc;
  a1[12] = _EUC_TW_wcrtomb;
  a1[11] = _EUC_TW_mbsnrtowcs;
  a1[13] = _EUC_TW_wcsnrtombs;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000004;
  return 0;
}

uint64_t _EUC_TW_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 142, 4, 0, 0, a5);
}

uint64_t _EUC_TW_wcrtomb(unsigned char *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 142, 4, 0, 0);
}

uint64_t _EUC_mbrtowc_impl(_DWORD *a1, const char *a2, unint64_t a3, int *a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  int v9 = a4[1];
  if (v9 < 0 || v9 > *(_DWORD *)(*(void *)(a9 + 1328) + 64))
  {
    BOOL v10 = __error();
    int v11 = 22;
LABEL_4:
    int *v10 = v11;
    return -1;
  }
  if (!a2) {
    a3 = 1;
  }
  if (a2) {
    int v14 = a2;
  }
  else {
    int v14 = "";
  }
  if (a2) {
    BOOL v15 = a1;
  }
  else {
    BOOL v15 = 0;
  }
  if (!a3) {
    return -2;
  }
  if (v9)
  {
    int v16 = *a4;
  }
  else
  {
    unsigned int v19 = *(unsigned __int8 *)v14;
    if ((*v14 & 0x80000000) == 0)
    {
      if (v15) {
        *BOOL v15 = v19;
      }
      return v19 != 0;
    }
    if (v19 <= 0xA0)
    {
      int v9 = a6;
      if (v19 != a5)
      {
        int v9 = a8;
        if (v19 != a7)
        {
          BOOL v10 = __error();
          int v11 = 92;
          goto LABEL_4;
        }
      }
    }
    else
    {
      int v9 = 2;
    }
    int v16 = 0;
    *a4 = 0;
  }
  if (a3 >= v9) {
    a3 = v9;
  }
  if (a3)
  {
    unint64_t v17 = a3;
    do
    {
      int v18 = *(unsigned __int8 *)v14++;
      int v16 = v18 | (v16 << 8);
      --v17;
    }
    while (v17);
  }
  if (v9 > (int)a3)
  {
    *a4 = v16;
    a4[1] = v9 - a3;
    *__error() = 92;
    return -2;
  }
  if (v15) {
    *BOOL v15 = v16;
  }
  a4[1] = 0;
  if (!v16) {
    return 0;
  }
  return v9;
}

uint64_t _EUC_wcrtomb_impl(unsigned char *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (*(_DWORD *)(a3 + 4))
  {
    int v7 = __error();
    int v8 = 22;
LABEL_3:
    *int v7 = v8;
    return -1;
  }
  if (!a1) {
    return 1;
  }
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1;
  }
  if (a2 <= 0xFF) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  if (HIWORD(a2)) {
    unsigned int v12 = 3;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = __locale_key;
  int v14 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v13);
  if (HIBYTE(a2)) {
    uint64_t result = 4;
  }
  else {
    uint64_t result = v12;
  }
  if (v14) {
    BOOL v15 = v14;
  }
  else {
    BOOL v15 = &__global_locale;
  }
  if ((int)result > *(_DWORD *)(v15[166] + 64))
  {
LABEL_21:
    int v7 = __error();
    int v8 = 92;
    goto LABEL_3;
  }
  if ((a2 - 0x10000) <= 0xFFFFA0FF)
  {
    int v16 = (a2 >> (8 * result - 8));
    if (v16 == a4)
    {
      if (result != a5) {
        goto LABEL_21;
      }
    }
    else if (v16 != a6 || result != a7)
    {
      goto LABEL_21;
    }
  }
  unint64_t v17 = result + 1;
  do
  {
    a1[(v17 - 2)] = a2;
    a2 >>= 8;
    --v17;
  }
  while (v17 > 1);
  return result;
}

unsigned __int8 *__fix_locale_grouping_str(unsigned __int8 *result)
{
  if (!result) {
    return (unsigned __int8 *)&nogrouping;
  }
  unsigned __int8 v1 = *result;
  if (!*result) {
    return (unsigned __int8 *)&nogrouping;
  }
  uint64_t v2 = result;
  size_t v3 = result;
  while (v1 == 45)
  {
    int v6 = *++v2;
    if (v6 != 49) {
      return (unsigned __int8 *)&nogrouping;
    }
    *v3++ = 127;
LABEL_16:
    unsigned __int8 v7 = *++v2;
    unsigned __int8 v1 = v7;
  }
  if (v1 == 59) {
    goto LABEL_16;
  }
  if (!v1)
  {
    unsigned __int8 *v3 = 0;
    return result;
  }
  if (v1 - 48 > 9) {
    return (unsigned __int8 *)&nogrouping;
  }
  unsigned __int8 v4 = v1 - 48;
  unsigned int v5 = v2[1] - 48;
  if (v5 < 0xA) {
    unsigned __int8 v4 = v5 + 10 * (v1 - 48);
  }
  unsigned __int8 *v3 = v4;
  if (v4)
  {
    if (v5 < 0xA) {
      ++v2;
    }
    ++v3;
    goto LABEL_16;
  }
  if (v3 == result) {
    return (unsigned __int8 *)&nogrouping;
  }
  return result;
}

unsigned char *__fix_nogrouping(unsigned char *a1)
{
  uint64_t result = &__nogrouping;
  if (a1)
  {
    if (*a1) {
      return a1;
    }
  }
  return result;
}

uint64_t _GB18030_init(void *a1)
{
  a1[9] = _GB18030_mbrtowc;
  a1[12] = _GB18030_wcrtomb;
  a1[10] = _GB18030_mbsinit;
  a1[8] = 0x8000000004;
  return 0;
}

uint64_t _GB18030_mbrtowc(unsigned int *a1, char **a2, unint64_t a3, const char *a4)
{
  uint64_t v4 = *(unsigned int *)a4;
  if (v4 >= 5)
  {
    unsigned int v5 = __error();
    int v6 = 22;
LABEL_3:
    *unsigned int v5 = v6;
    return -1;
  }
  if (a3 >= 4) {
    uint64_t v9 = 4;
  }
  else {
    uint64_t v9 = a3;
  }
  BOOL v10 = a2 == 0;
  if (a2)
  {
    int v11 = a1;
  }
  else
  {
    a2 = (char **)"";
    int v11 = 0;
  }
  if (v10) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = v9;
  }
  if (v12 >= 4 - v4) {
    int v13 = 4 - v4;
  }
  else {
    int v13 = v12;
  }
  j__strtod(&a4[v4 + 4], a2);
  int v14 = *(_DWORD *)a4;
  unsigned int v15 = v14 + v13;
  *(_DWORD *)a4 += v13;
  if (!(v14 + v13)) {
    return -2;
  }
  unsigned int v16 = *((unsigned __int8 *)a4 + 4);
  if (a4[4] < 0)
  {
    if (v16 == 128 || v16 == 255) {
      goto LABEL_26;
    }
    if (v15 < 2) {
      return -2;
    }
    int v19 = *((unsigned __int8 *)a4 + 5);
    if (a4[5] < -1 || (v19 - 64) <= 0x3E)
    {
      unsigned int v16 = v19 | (v16 << 8);
      int v17 = 2;
      goto LABEL_19;
    }
    if ((v19 - 48) <= 9)
    {
      if (v15 < 3) {
        return -2;
      }
      int v20 = *((unsigned __int8 *)a4 + 6);
      if ((v20 + 1) >= 0x82u)
      {
        if (v15 < 4) {
          return -2;
        }
        int v21 = *((unsigned __int8 *)a4 + 7);
        if ((v21 - 58) >= 0xFFFFFFF6)
        {
          unsigned int v16 = ((v19 & 0xFFFF80FF | ((v16 & 0x7F) << 8)) << 16) | (v20 << 8) | v21;
          int v17 = 4;
          goto LABEL_19;
        }
      }
    }
LABEL_26:
    unsigned int v5 = __error();
    int v6 = 92;
    goto LABEL_3;
  }
  int v17 = 1;
LABEL_19:
  if (v11) {
    *int v11 = v16;
  }
  *(_DWORD *)a4 = 0;
  int v18 = v17 - v14;
  if (!v16) {
    return 0;
  }
  return v18;
}

uint64_t _GB18030_wcrtomb(unsigned char *a1, unsigned int a2, _DWORD *a3)
{
  if (!*a3)
  {
    if (a1)
    {
      if ((a2 & 0x80000000) != 0) {
        goto LABEL_13;
      }
      if ((a2 & 0x7F000000) != 0)
      {
        if (HIBYTE(a2) != 127)
        {
          *a1 = HIBYTE(a2) | 0x80;
          if ((HIWORD(a2) & 0xFE) - 58 >= 0xFFFFFFF6)
          {
            a1[1] = BYTE2(a2);
            if (BYTE1(a2) >= 0x81u && BYTE1(a2) != 255)
            {
              a1[2] = BYTE1(a2);
              if ((a2 & 0xFE) - 58 >= 0xFFFFFFF6)
              {
                a1[3] = a2;
                return 4;
              }
            }
          }
        }
        goto LABEL_13;
      }
      if ((a2 & 0xFF0000) != 0) {
        goto LABEL_13;
      }
      if ((a2 & 0xFF00) != 0)
      {
        if (BYTE1(a2) >= 0x81u && BYTE1(a2) != 255)
        {
          *a1 = BYTE1(a2);
          if ((a2 & 0xC0) != 0 && (a2 & 0x7F) != 0x7F)
          {
            a1[1] = a2;
            return 2;
          }
        }
        goto LABEL_13;
      }
      if (a2 > 0x7F)
      {
LABEL_13:
        size_t v3 = __error();
        int v4 = 92;
        goto LABEL_14;
      }
      *a1 = a2;
    }
    return 1;
  }
  size_t v3 = __error();
  int v4 = 22;
LABEL_14:
  int *v3 = v4;
  return -1;
}

BOOL _GB18030_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t _GB2312_init(void *a1)
{
  a1[9] = _GB2312_mbrtowc;
  a1[12] = _GB2312_wcrtomb;
  a1[10] = _GB2312_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _GB2312_mbrtowc(int *a1, char **a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4 = *a4;
  if (v4 >= 3)
  {
    *__error() = 22;
    return -1;
  }
  if (a3 >= 2) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = a3;
  }
  BOOL v8 = a2 == 0;
  if (a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    a2 = (char **)"";
    uint64_t v9 = 0;
  }
  if (v8) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10 >= 2 - v4) {
    int v11 = 2 - v4;
  }
  else {
    int v11 = v10;
  }
  unint64_t v12 = a4 + 1;
  j__strtod((const char *)a4 + v4 + 4, a2);
  int v13 = *a4;
  *a4 += v11;
  if (!(v13 + v11)) {
    return -2;
  }
  if ((*v12 + 1) < 0xA2u)
  {
    if ((char)*v12 < 0) {
      return -1;
    }
    int v14 = 1;
    goto LABEL_24;
  }
  if ((v13 + v11) < 2) {
    return -2;
  }
  if ((*((unsigned char *)a4 + 5) + 1) < 0xA2u) {
    return -1;
  }
  int v14 = 2;
LABEL_24:
  int v15 = 0;
  unsigned int v16 = v14 + 1;
  uint64_t v17 = 4;
  do
  {
    int v15 = *((unsigned __int8 *)a4 + v17) | (v15 << 8);
    --v16;
    ++v17;
  }
  while (v16 > 1);
  if (v9) {
    *uint64_t v9 = v15;
  }
  *a4 = 0;
  int v18 = v14 - v13;
  if (!v15) {
    return 0;
  }
  return v18;
}

uint64_t _GB2312_wcrtomb(unsigned char *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  if (!a1) {
    return 1;
  }
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1;
  }
  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2;
}

BOOL _GB2312_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t _GBK_init(void *a1)
{
  a1[9] = _GBK_mbrtowc;
  a1[12] = _GBK_wcrtomb;
  a1[10] = _GBK_mbsinit;
  a1[8] = 0x8000000002;
  return 0;
}

uint64_t _GBK_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= 0x100)
  {
    unint64_t v10 = __error();
    int v11 = 22;
LABEL_18:
    int *v10 = v11;
    return -1;
  }
  if (a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = "";
  }
  if (!a2) {
    a3 = 1;
  }
  if (a2) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (!a3) {
    return -2;
  }
  int v8 = *(unsigned __int8 *)v5;
  if (v4)
  {
    if (*v5)
    {
      if (v7) {
        *uint64_t v7 = v8 | (v4 << 8);
      }
      *a4 = 0;
      return 1;
    }
    goto LABEL_31;
  }
  if ((v8 + 127) > 0x7Du)
  {
    if (v7) {
      *uint64_t v7 = v8;
    }
    return v8 != 0;
  }
  else
  {
    if (a3 <= 1)
    {
      *a4 = v8;
      return -2;
    }
    if (!v5[1])
    {
LABEL_31:
      unint64_t v10 = __error();
      int v11 = 92;
      goto LABEL_18;
    }
    if (v7) {
      *uint64_t v7 = *((unsigned __int8 *)v5 + 1) | (v8 << 8);
    }
    return 2;
  }
}

uint64_t _GBK_wcrtomb(unsigned char *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  if (!a1) {
    return 1;
  }
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1;
  }
  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2;
}

BOOL _GBK_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t __part_load_locale(const char *a1, char *a2, void **a3, const char *a4, int a5, int a6, char **a7)
{
  memset(&v37, 0, sizeof(v37));
  uint64_t v14 = j__strsignal_r((int)a1, a2, (size_t)a3);
  j__strnstr(__big, a1, v15);
  *(_WORD *)&__big[j__strsignal_r((int)__big, v16, v17)] = 47;
  strcat(__big, a4);
  int v20 = __open_path_locale(__big, v18, v19);
  if (v20 < 0) {
    return 0xFFFFFFFFLL;
  }
  if (fstat(v20, &v37))
  {
LABEL_21:
    int v30 = *__error();
    close_NOCANCEL();
    *__error() = v30;
    return 0xFFFFFFFFLL;
  }
  if (v37.st_size < 1)
  {
    int v28 = 79;
LABEL_20:
    *__error() = v28;
    goto LABEL_21;
  }
  uint64_t v21 = v14 + 1;
  __int32 v22 = (const char *)malloc_type_malloc(v37.st_size + v14 + 1, 0x5EABB9ABuLL);
  if (!v22)
  {
    int v28 = 12;
    goto LABEL_20;
  }
  size_t v24 = (char *)v22;
  int v25 = &j__strnstr(v22, a1, v23)[v21];
  st_unint64_t size = v37.st_size;
  if (read_NOCANCEL() != v37.st_size)
  {
LABEL_19:
    int v28 = *__error();
    free(v24);
    goto LABEL_20;
  }
  if (v25[st_size - 1] != 10) {
    goto LABEL_18;
  }
  if (st_size < 1)
  {
    int v27 = 0;
  }
  else
  {
    int v27 = 0;
    do
    {
      if (*v25 == 10)
      {
        *int v25 = 0;
        ++v27;
      }
      ++v25;
      --st_size;
    }
    while (st_size);
  }
  int v29 = a5;
  if (v27 < a5)
  {
    int v29 = v27;
    if (v27 < a6)
    {
LABEL_18:
      *__error() = 79;
      goto LABEL_19;
    }
  }
  close_NOCANCEL();
  if (*a3) {
    free(*a3);
  }
  *a3 = v24;
  if (v29 >= 1)
  {
    uint64_t v34 = v29;
    long long v35 = a7;
    do
    {
      v24 += j__strsignal_r((int)v24, v32, v33) + 1;
      *v35++ = v24;
      --v34;
    }
    while (v34);
  }
  if (v29 < a5)
  {
    if (v27 >= a5) {
      int v36 = a5;
    }
    else {
      int v36 = v27;
    }
    MEMORY[0x18C122530](&a7[v36], 8 * (~v29 + a5) + 8);
  }
  uint64_t result = 0;
  *a2 = 1;
  return result;
}

void destruct_ldpart(void **a1)
{
  if (a1) {
    free(a1[8]);
  }

  free(a1);
}

uint64_t __messages_load_locale(char *a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  if (j__strncasecmp_l(a1, "C", a3, a4) && j__strncasecmp_l(a1, "POSIX", v6, v7) && j__strsvisx(a1, "C.", 2uLL, v8, v9))
  {
    if (!__messages_load_locale_cache
      || (unint64_t v12 = *(const char **)(__messages_load_locale_cache + 64)) == 0
      || j__strncasecmp_l(a1, v12, v10, v11))
    {
      int v13 = malloc_type_malloc(0x68uLL, 0x10D0040B9A2EC5AuLL);
      if (v13)
      {
        uint64_t v14 = (uint64_t)v13;
        *(_DWORD *)int v13 = 1;
        *((void *)v13 + 1) = destruct_ldpart;
        *((void *)v13 + 8) = 0;
        uint64_t result = __part_load_locale(a1, (char *)(a2 + 1312), (void **)v13 + 8, "LC_MESSAGES/LC_MESSAGES", 4, 2, (char **)v13 + 9);
        if (result != -1)
        {
          if (!result)
          {
            if (!*(void *)(v14 + 88)) {
              *(void *)(v14 + 88) = &empty;
            }
            if (!*(void *)(v14 + 96)) {
              *(void *)(v14 + 96) = &empty;
            }
            uint64_t v16 = *(void *)(a2 + 1360);
            if (v16)
            {
              if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
              {
                size_t v17 = *(void (**)(void))(v16 + 8);
                if (v17) {
                  v17();
                }
              }
            }
            *(void *)(a2 + 1360) = v14;
            uint64_t v18 = __messages_load_locale_cache;
            if (__messages_load_locale_cache
              && atomic_fetch_add((atomic_uint *volatile)__messages_load_locale_cache, 0xFFFFFFFF) == 1)
            {
              size_t v19 = *(void (**)(void))(v18 + 8);
              if (v19) {
                v19();
              }
            }
            uint64_t result = 0;
            __messages_load_locale_cache = v14;
            atomic_fetch_add((atomic_uint *volatile)v14, 1u);
          }
          return result;
        }
        free((void *)v14);
      }
      return 0xFFFFFFFFLL;
    }
    *(unsigned char *)(a2 + 1312) = 1;
    uint64_t v22 = *(void *)(a2 + 1360);
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        size_t v23 = *(void (**)(void))(v22 + 8);
        if (v23) {
          v23();
        }
      }
    }
    size_t v24 = (atomic_uint *)__messages_load_locale_cache;
    *(void *)(a2 + 1360) = __messages_load_locale_cache;
    uint64_t result = 1;
    if (v24) {
      atomic_fetch_add(v24, 1u);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 1312) = 0;
    uint64_t v20 = *(void *)(a2 + 1360);
    if (v20)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
      {
        uint64_t v21 = *(void (**)(void))(v20 + 8);
        if (v21) {
          v21();
        }
      }
    }
    *(void *)(a2 + 1360) = 0;
    return 1;
  }
  return result;
}

char **__get_current_messages_locale(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1312)) {
    return (char **)(*(void *)(a1 + 1360) + 72);
  }
  else {
    return _C_messages_locale;
  }
}

uint64_t __monetary_load_locale(char *a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  if (!j__strncasecmp_l(a1, "C", a3, a4)
    || !j__strncasecmp_l(a1, "POSIX", v6, v7)
    || !j__strsvisx(a1, "C.", 2uLL, v8, v9))
  {
    if (*(unsigned char *)(a2 + 1313))
    {
      *(unsigned char *)(a2 + 1313) = 0;
      uint64_t v35 = *(void *)(a2 + 1336);
      if (v35)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v35, 0xFFFFFFFF) == 1)
        {
          int v36 = *(void (**)(void))(v35 + 8);
          if (v36) {
            v36();
          }
        }
      }
      *(void *)(a2 + 1336) = 0;
      goto LABEL_47;
    }
    return 1;
  }
  if (*(unsigned char *)(a2 + 1313) && !j__strncasecmp_l(a1, *(const char **)(*(void *)(a2 + 1336) + 64), v10, v11)) {
    return 1;
  }
  if (__monetary_load_locale_cache)
  {
    unint64_t v12 = *(const char **)(__monetary_load_locale_cache + 64);
    if (v12)
    {
      if (!j__strncasecmp_l(a1, v12, v10, v11))
      {
        *(unsigned char *)(a2 + 1313) = 1;
        uint64_t v37 = *(void *)(a2 + 1336);
        if (v37)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v37, 0xFFFFFFFF) == 1)
          {
            size_t v38 = *(void (**)(void))(v37 + 8);
            if (v38) {
              v38();
            }
          }
        }
        long long v39 = (atomic_uint *)__monetary_load_locale_cache;
        *(void *)(a2 + 1336) = __monetary_load_locale_cache;
        if (v39) {
          atomic_fetch_add(v39, 1u);
        }
LABEL_47:
        uint64_t result = 1;
        *(unsigned char *)(a2 + 1316) = 1;
        return result;
      }
    }
  }
  int v13 = malloc_type_malloc(0xF0uLL, 0x10D0040AB25FCE3uLL);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = (uint64_t)v13;
  *(_DWORD *)int v13 = 1;
  *((void *)v13 + 1) = destruct_ldpart;
  *((void *)v13 + 8) = 0;
  uint64_t result = __part_load_locale(a1, (char *)(a2 + 1313), (void **)v13 + 8, "LC_MONETARY", 21, 15, (char **)v13 + 9);
  if (result == -1)
  {
    free((void *)v14);
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(a2 + 1316) = 1;
  if (!result)
  {
    *(void *)(v14 + 104) = __fix_locale_grouping_str(*(unsigned __int8 **)(v14 + 104));
    int v16 = strtol(*(const char **)(v14 + 128), 0, 10);
    if (v16 == -1) {
      char v17 = 127;
    }
    else {
      char v17 = v16;
    }
    **(unsigned char **)(v14 + 128) = v17;
    int v18 = strtol(*(const char **)(v14 + 136), 0, 10);
    if (v18 == -1) {
      char v19 = 127;
    }
    else {
      char v19 = v18;
    }
    **(unsigned char **)(v14 + 136) = v19;
    int v20 = strtol(*(const char **)(v14 + 144), 0, 10);
    if (v20 == -1) {
      char v21 = 127;
    }
    else {
      char v21 = v20;
    }
    **(unsigned char **)(v14 + 144) = v21;
    int v22 = strtol(*(const char **)(v14 + 152), 0, 10);
    if (v22 == -1) {
      char v23 = 127;
    }
    else {
      char v23 = v22;
    }
    **(unsigned char **)(v14 + 152) = v23;
    int v24 = strtol(*(const char **)(v14 + 160), 0, 10);
    if (v24 == -1) {
      char v25 = 127;
    }
    else {
      char v25 = v24;
    }
    **(unsigned char **)(v14 + 160) = v25;
    int v26 = strtol(*(const char **)(v14 + 168), 0, 10);
    if (v26 == -1) {
      char v27 = 127;
    }
    else {
      char v27 = v26;
    }
    **(unsigned char **)(v14 + 168) = v27;
    int v28 = strtol(*(const char **)(v14 + 176), 0, 10);
    if (v28 == -1) {
      char v29 = 127;
    }
    else {
      char v29 = v28;
    }
    **(unsigned char **)(v14 + 176) = v29;
    int v30 = strtol(*(const char **)(v14 + 184), 0, 10);
    if (v30 == -1) {
      char v31 = 127;
    }
    else {
      char v31 = v30;
    }
    **(unsigned char **)(v14 + 184) = v31;
    uint64_t v32 = *(const char **)(v14 + 192);
    if (v32)
    {
      int v33 = strtol(v32, 0, 10);
      if (v33 == -1) {
        char v34 = 127;
      }
      else {
        char v34 = v33;
      }
      **(unsigned char **)(v14 + 192) = v34;
    }
    else
    {
      *(void *)(v14 + 192) = *(void *)(v14 + 144);
    }
    long long v40 = *(const char **)(v14 + 200);
    if (v40)
    {
      int v41 = strtol(v40, 0, 10);
      if (v41 == -1) {
        char v42 = 127;
      }
      else {
        char v42 = v41;
      }
      **(unsigned char **)(v14 + 200) = v42;
    }
    else
    {
      *(void *)(v14 + 200) = *(void *)(v14 + 160);
    }
    long long v43 = *(const char **)(v14 + 208);
    if (v43)
    {
      int v44 = strtol(v43, 0, 10);
      if (v44 == -1) {
        char v45 = 127;
      }
      else {
        char v45 = v44;
      }
      **(unsigned char **)(v14 + 208) = v45;
    }
    else
    {
      *(void *)(v14 + 208) = *(void *)(v14 + 152);
    }
    long long v46 = *(const char **)(v14 + 216);
    if (v46)
    {
      int v47 = strtol(v46, 0, 10);
      if (v47 == -1) {
        char v48 = 127;
      }
      else {
        char v48 = v47;
      }
      **(unsigned char **)(v14 + 216) = v48;
    }
    else
    {
      *(void *)(v14 + 216) = *(void *)(v14 + 168);
    }
    unint64_t v49 = *(const char **)(v14 + 224);
    if (v49)
    {
      int v50 = strtol(v49, 0, 10);
      if (v50 == -1) {
        char v51 = 127;
      }
      else {
        char v51 = v50;
      }
      **(unsigned char **)(v14 + 224) = v51;
    }
    else
    {
      *(void *)(v14 + 224) = *(void *)(v14 + 176);
    }
    __int32 v52 = *(const char **)(v14 + 232);
    if (v52)
    {
      int v53 = strtol(v52, 0, 10);
      if (v53 == -1) {
        char v54 = 127;
      }
      else {
        char v54 = v53;
      }
      **(unsigned char **)(v14 + 232) = v54;
    }
    else
    {
      *(void *)(v14 + 232) = *(void *)(v14 + 184);
    }
    uint64_t v55 = *(void *)(a2 + 1336);
    if (v55)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v55, 0xFFFFFFFF) == 1)
      {
        long long v56 = *(void (**)(void))(v55 + 8);
        if (v56) {
          v56();
        }
      }
    }
    *(void *)(a2 + 1336) = v14;
    uint64_t v57 = __monetary_load_locale_cache;
    if (__monetary_load_locale_cache
      && atomic_fetch_add((atomic_uint *volatile)__monetary_load_locale_cache, 0xFFFFFFFF) == 1)
    {
      long long v58 = *(void (**)(void))(v57 + 8);
      if (v58) {
        v58();
      }
    }
    uint64_t result = 0;
    __monetary_load_locale_cache = v14;
    atomic_fetch_add((atomic_uint *volatile)v14, 1u);
  }
  return result;
}

uint64_t __numeric_load_locale(char *a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  if (!j__strncasecmp_l(a1, "C", a3, a4)
    || !j__strncasecmp_l(a1, "POSIX", v6, v7)
    || !j__strsvisx(a1, "C.", 2uLL, v8, v9))
  {
    if (*(unsigned char *)(a2 + 1314))
    {
      *(unsigned char *)(a2 + 1314) = 0;
      uint64_t v21 = *(void *)(a2 + 1344);
      if (v21)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
        {
          int v22 = *(void (**)(void))(v21 + 8);
          if (v22) {
            v22();
          }
        }
      }
      *(void *)(a2 + 1344) = 0;
      goto LABEL_29;
    }
    return 1;
  }
  if (*(unsigned char *)(a2 + 1314) && !j__strncasecmp_l(a1, *(const char **)(*(void *)(a2 + 1344) + 64), v10, v11)) {
    return 1;
  }
  if (__numeric_load_locale_cache)
  {
    unint64_t v12 = *(const char **)(__numeric_load_locale_cache + 64);
    if (v12)
    {
      if (!j__strncasecmp_l(a1, v12, v10, v11))
      {
        *(unsigned char *)(a2 + 1314) = 1;
        uint64_t v23 = *(void *)(a2 + 1344);
        if (v23)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v23, 0xFFFFFFFF) == 1)
          {
            int v24 = *(void (**)(void))(v23 + 8);
            if (v24) {
              v24();
            }
          }
        }
        char v25 = (atomic_uint *)__numeric_load_locale_cache;
        *(void *)(a2 + 1344) = __numeric_load_locale_cache;
        if (v25) {
          atomic_fetch_add(v25, 1u);
        }
LABEL_29:
        uint64_t result = 1;
        *(unsigned char *)(a2 + 1317) = 1;
        return result;
      }
    }
  }
  int v13 = (char *)malloc_type_malloc(0x60uLL, 0x10D0040E5D34ACFuLL);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = (unsigned __int8 **)v13;
  *(_DWORD *)int v13 = 1;
  *((void *)v13 + 1) = destruct_ldpart;
  *((void *)v13 + 8) = 0;
  size_t v15 = v13 + 72;
  uint64_t result = __part_load_locale(a1, (char *)(a2 + 1314), (void **)v13 + 8, "LC_NUMERIC", 3, 3, (char **)v13 + 9);
  if (result == -1)
  {
    free(v14);
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(a2 + 1317) = 1;
  if (!result)
  {
    if (!*(unsigned char *)*v15) {
      *size_t v15 = ".";
    }
    v14[11] = __fix_locale_grouping_str(v14[11]);
    uint64_t v17 = *(void *)(a2 + 1344);
    if (v17)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
      {
        int v18 = *(void (**)(void))(v17 + 8);
        if (v18) {
          v18();
        }
      }
    }
    *(void *)(a2 + 1344) = v14;
    uint64_t v19 = __numeric_load_locale_cache;
    if (__numeric_load_locale_cache
      && atomic_fetch_add((atomic_uint *volatile)__numeric_load_locale_cache, 0xFFFFFFFF) == 1)
    {
      int v20 = *(void (**)(void))(v19 + 8);
      if (v20) {
        v20();
      }
    }
    uint64_t result = 0;
    __numeric_load_locale_cache = (uint64_t)v14;
    atomic_fetch_add((atomic_uint *volatile)v14, 1u);
  }
  return result;
}

void _locale_lock_fork_prepare()
{
  uint64_t v0 = __locale_key;
  unsigned __int8 v1 = *(os_unfair_lock_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    unsigned __int8 v1 = (os_unfair_lock_s *)&__global_locale;
  }
  os_unfair_lock_lock(v1 + 324);
}

void _locale_lock_fork_parent()
{
  uint64_t v0 = __locale_key;
  unsigned __int8 v1 = *(os_unfair_lock_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    unsigned __int8 v1 = (os_unfair_lock_s *)&__global_locale;
  }
  os_unfair_lock_unlock(v1 + 324);
}

void _locale_lock_fork_child()
{
  uint64_t v0 = __locale_key;
  unsigned __int8 v1 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    unsigned __int8 v1 = &__global_locale;
  }
  v1[324] = 0;
}

int mblen_l(const char *a1, size_t a2, locale_t a3)
{
  locale_t v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v3 = a3;
  }
  if (a3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (locale_t)&__c_locale;
  }
  if (a1)
  {
    a1 = (const char *)(*(uint64_t (**)(void, const char *, size_t, uint64_t))(*((void *)v4 + 166) + 72))(0, a1, a2, (uint64_t)v4 + 16);
    if ((unint64_t)a1 > 0xFFFFFFFFFFFFFFFDLL) {
      LODWORD(a1) = -1;
    }
  }
  else
  {
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
  }
  return (int)a1;
}

int mblen(const char *__s, size_t __n)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    locale_t v3 = &__global_locale;
  }
  if (v3 == (void *)-1) {
    locale_t v4 = &__global_locale;
  }
  else {
    locale_t v4 = v3;
  }
  if (__s)
  {
    long long __s = (const char *)(*(uint64_t (**)(void, const char *, size_t, void *))(v4[166] + 72))(0, __s, __n, v4 + 2);
    if ((unint64_t)__s > 0xFFFFFFFFFFFFFFFDLL) {
      LODWORD(__s) = -1;
    }
  }
  else
  {
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
  }
  return (int)__s;
}

size_t mbrlen_l(const char *a1, size_t a2, mbstate_t *a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  if (a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = (mbstate_t *)((char *)v5 + 144);
  }
  return (*(uint64_t (**)(void, const char *, size_t, mbstate_t *))(*((void *)v5 + 166) + 72))(0, a1, a2, v6);
}

size_t mbrlen(const char *a1, size_t a2, mbstate_t *a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = (char *)&__global_locale;
  }
  if (v4 == (char *)-1) {
    locale_t v5 = (char *)&__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  if (a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = (mbstate_t *)(v5 + 144);
  }
  return (*(uint64_t (**)(void, const char *, size_t, mbstate_t *))(*((void *)v5 + 166) + 72))(0, a1, a2, v6);
}

int mbsinit_l(const mbstate_t *a1, locale_t a2)
{
  locale_t v2 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v2 = a2;
  }
  if (a2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (locale_t)&__c_locale;
  }
  return (*(uint64_t (**)(const mbstate_t *))(*((void *)v3 + 166) + 80))(a1);
}

int mbsinit(const mbstate_t *a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (!v2) {
    locale_t v2 = &__global_locale;
  }
  if (v2 == (void *)-1) {
    locale_t v3 = &__global_locale;
  }
  else {
    locale_t v3 = v2;
  }
  return (*(uint64_t (**)(const mbstate_t *))(v3[166] + 80))(a1);
}

size_t mbsnrtowcs_l(__int32 *a1, const char **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a6 != (locale_t)-1) {
    locale_t v6 = a6;
  }
  if (a6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (!a5) {
    a5 = (mbstate_t *)((char *)v7 + 400);
  }
  return (*(uint64_t (**)(__int32 *, const char **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 88))(a1, a2, a3, a4, a5);
}

size_t mbsnrtowcs(__int32 *a1, const char **a2, size_t a3, size_t a4, mbstate_t *a5)
{
  uint64_t v5 = __locale_key;
  locale_t v6 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (!v6) {
    locale_t v6 = (char *)&__global_locale;
  }
  if (v6 == (char *)-1) {
    locale_t v7 = (char *)&__global_locale;
  }
  else {
    locale_t v7 = v6;
  }
  if (!a5) {
    a5 = (mbstate_t *)(v7 + 400);
  }
  return (*(uint64_t (**)(__int32 *, const char **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 88))(a1, a2, a3, a4, a5);
}

uint64_t __mbsnrtowcs_std(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(uint64_t (**)(int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 1328) + 72);
  uint64_t v10 = *a2;
  if (a1)
  {
    uint64_t v11 = a4;
    if (a4)
    {
      int v13 = a1;
      uint64_t v14 = 0;
      while (1)
      {
        uint64_t v15 = v9(v13, v10, a3, a5, a6);
        if (v15 == -2) {
          break;
        }
        if (!v15)
        {
          *a2 = 0;
          return v14;
        }
        if (v15 == -1)
        {
          *a2 = v10;
          return -1;
        }
        v10 += v15;
        a3 -= v15;
        ++v14;
        ++v13;
        if (v11 == v14) {
          goto LABEL_8;
        }
      }
      *a2 = v10 + a3;
      return v14;
    }
LABEL_8:
    *a2 = v10;
  }
  else
  {
    uint64_t v11 = 0;
    int v18 = 0;
    while (1)
    {
      uint64_t v16 = v9(&v18, v10, a3, a5, a6);
      if (v16 == -2) {
        break;
      }
      if (v16 == -1) {
        return -1;
      }
      if (!v16) {
        return v11;
      }
      v10 += v16;
      a3 -= v16;
      ++v11;
    }
  }
  return v11;
}

size_t mbsrtowcs_l(__int32 *a1, const char **a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1) {
    locale_t v5 = a5;
  }
  if (a5) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)((char *)v6 + 528);
  }
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166) + 88))(a1, a2, -1, a3, v7);
}

size_t mbsrtowcs(__int32 *a1, const char **a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4 = __locale_key;
  locale_t v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5) {
    locale_t v5 = (char *)&__global_locale;
  }
  if (v5 == (char *)-1) {
    locale_t v6 = (char *)&__global_locale;
  }
  else {
    locale_t v6 = v5;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)(v6 + 528);
  }
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166) + 88))(a1, a2, -1, a3, v7);
}

size_t mbstowcs_l(__int32 *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, _OWORD *))(*((void *)v5 + 166) + 88))(a1, &v7, -1, a3, v8);
}

size_t mbstowcs(__int32 *a1, const char *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = &__global_locale;
  }
  if (v4 == (void *)-1) {
    locale_t v5 = &__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, _OWORD *))(v5[166] + 88))(a1, &v7, -1, a3, v8);
}

int mbtowc(__int32 *a1, const char *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = &__global_locale;
  }
  if (v4 == (void *)-1) {
    locale_t v5 = &__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  if (a2)
  {
    unint64_t v6 = (*(uint64_t (**)(__int32 *, const char *, size_t, void *))(v5[166] + 72))(a1, a2, a3, v5 + 82);
    if (v6 > 0xFFFFFFFFFFFFFFFDLL) {
      LODWORD(v6) = -1;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    *((_OWORD *)v5 + 47) = 0u;
    *((_OWORD *)v5 + 48) = 0u;
    *((_OWORD *)v5 + 45) = 0u;
    *((_OWORD *)v5 + 46) = 0u;
    *((_OWORD *)v5 + 43) = 0u;
    *((_OWORD *)v5 + 44) = 0u;
    *((_OWORD *)v5 + 41) = 0u;
    *((_OWORD *)v5 + 42) = 0u;
  }
  return v6;
}

uint64_t _MSKanji_init(void *a1)
{
  a1[9] = _MSKanji_mbrtowc;
  a1[12] = _MSKanji_wcrtomb;
  a1[10] = _MSKanji_mbsinit;
  a1[8] = 0x10000000002;
  return 0;
}

uint64_t _MSKanji_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= 0x100)
  {
    uint64_t v10 = __error();
    int v11 = 22;
LABEL_18:
    int *v10 = v11;
    return -1;
  }
  if (a2) {
    locale_t v5 = a2;
  }
  else {
    locale_t v5 = "";
  }
  if (!a2) {
    a3 = 1;
  }
  if (a2) {
    locale_t v7 = a1;
  }
  else {
    locale_t v7 = 0;
  }
  if (!a3) {
    return -2;
  }
  if (v4)
  {
    int v8 = *(unsigned __int8 *)v5;
    if (v8)
    {
      if (v7) {
        *locale_t v7 = v8 | (v4 << 8);
      }
      *a4 = 0;
      return 1;
    }
    goto LABEL_34;
  }
  int v12 = *(unsigned __int8 *)v5;
  if ((v12 + 127) >= 0x1Fu && (v12 + 32) > 0x1Cu)
  {
    if (v7) {
      *locale_t v7 = v12;
    }
    return v12 != 0;
  }
  else
  {
    if (a3 <= 1)
    {
      *a4 = v12;
      return -2;
    }
    int v14 = *((unsigned __int8 *)v5 + 1);
    if (!v14)
    {
LABEL_34:
      uint64_t v10 = __error();
      int v11 = 92;
      goto LABEL_18;
    }
    if (v7) {
      *locale_t v7 = v14 | (v12 << 8);
    }
    return 2;
  }
}

uint64_t _MSKanji_wcrtomb(unsigned char *a1, int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    uint64_t result = 1;
    if (a1)
    {
      if (a2 <= 256) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = 2;
      }
      unsigned int v5 = result + 1;
      int v6 = 8 * result - 8;
      do
      {
        *a1++ = a2 >> v6;
        --v5;
        v6 -= 8;
      }
      while (v5 > 1);
    }
  }
  return result;
}

BOOL _MSKanji_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

wint_t nextwctype_l(wint_t a1, wctype_t a2, locale_t a3)
{
  uint64_t v3 = *(void *)(*((void *)a3 + 166) + 120);
  if (a1 <= 255)
  {
    uint64_t v4 = a1;
    while (v4 != 255)
    {
      wint_t result = v4 + 1;
      int v6 = *(_DWORD *)(v3 + 64 + 4 * v4++);
      if ((v6 & a2) != 0) {
        return result;
      }
    }
    a1 = 255;
  }
  locale_t v7 = *(wint_t **)(v3 + 3144);
  if (v7)
  {
    BOOL v8 = a1 >= *v7;
    if (a1 <= *v7) {
      a1 = *v7;
    }
  }
  else
  {
    BOOL v8 = 1;
  }
  int v9 = *(_DWORD *)(v3 + 3136);
  if (!v9) {
    return -1;
  }
  uint64_t v10 = *(int **)(v3 + 3144);
  unint64_t v11 = *(int *)(v3 + 3136);
  while (1)
  {
    unint64_t v12 = v11 >> 1;
    int v13 = &v10[6 * (v11 >> 1)];
    wint_t v14 = v13[1];
    uint64_t v15 = *v13;
    if ((int)v15 <= a1 && a1 <= v14) {
      break;
    }
    BOOL v17 = a1 > v14;
    int v18 = v13 + 6;
    if (a1 > v14) {
      uint64_t v10 = v18;
    }
    unint64_t v19 = v11 - v17;
    unint64_t v11 = (v11 - v17) >> 1;
    if (v19 < 2) {
      return -1;
    }
  }
  wint_t result = v8 + a1;
  if ((int)v15 <= result && result <= v14)
  {
    uint64_t v21 = *(void *)&v10[6 * v12 + 4];
    if (v21)
    {
      int v22 = (int *)(v21 + 4 * result - 4 * v15);
      do
      {
        int v23 = *v22++;
        if ((v23 & a2) != 0) {
          return result;
        }
        ++result;
      }
      while (v14 + 1 != result);
    }
    else if ((v10[6 * v12 + 2] & a2) != 0)
    {
      return result;
    }
  }
  unint64_t v24 = (unint64_t)&v7[6 * v9];
  char v25 = v13 + 6;
  if ((unint64_t)(v13 + 6) >= v24) {
    return -1;
  }
  while (1)
  {
    int v26 = v13;
    int v13 = v25;
    wint_t result = v26[6];
    char v27 = (int *)*((void *)v26 + 5);
    if (!v27)
    {
      if ((v26[8] & a2) != 0) {
        return result;
      }
      goto LABEL_40;
    }
    wint_t v28 = v26[7];
    if (result <= v28) {
      break;
    }
LABEL_40:
    char v25 = v13 + 6;
    wint_t result = -1;
    if ((unint64_t)(v13 + 6) >= v24) {
      return result;
    }
  }
  int v29 = v28 + 1;
  while (1)
  {
    int v30 = *v27++;
    if ((v30 & a2) != 0) {
      return result;
    }
    if (v29 == ++result) {
      goto LABEL_40;
    }
  }
}

wint_t nextwctype(wint_t a1, wctype_t a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return nextwctype_l(a1, a2, v4);
}

char *__cdecl nl_langinfo_l(nl_item a1, locale_t a2)
{
  wint_t result = "";
  if (a1 <= 0x39)
  {
    while (1)
    {
      if (a2 == (locale_t)-1) {
        locale_t v4 = (locale_t)&__global_locale;
      }
      else {
        locale_t v4 = a2;
      }
      if (a2) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = (_xlocale *)__c_locale;
      }
      wint_t result = "";
      switch(a1)
      {
        case 0:
          locale_t v7 = querylocale(2, v5);
          if (!v7) {
            goto LABEL_43;
          }
          int v9 = v7;
          uint64_t v10 = j__strncasecmp(v7, (const char *)0x2E, v8);
          if (v10)
          {
            wint_t result = (char *)(v10 + 1);
          }
          else if (j__strncasecmp_l(v9, "C", v11, v12) && j__strncasecmp_l(v9, "POSIX", v25, v26))
          {
            if (j__strncasecmp_l(v9, "UTF-8", v27, v28)) {
              wint_t result = "";
            }
            else {
              wint_t result = "UTF-8";
            }
          }
          else
          {
            wint_t result = "US-ASCII";
          }
          goto LABEL_31;
        case 1:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 40;
          goto LABEL_30;
        case 2:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 39;
          goto LABEL_30;
        case 3:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 38;
          goto LABEL_30;
        case 4:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 57;
          goto LABEL_30;
        case 5:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 41;
          goto LABEL_30;
        case 6:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 42;
          goto LABEL_30;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 7) + 31];
          goto LABEL_30;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 14) + 24];
          goto LABEL_30;
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 21) + 12];
          goto LABEL_30;
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[a1 - 33];
          goto LABEL_30;
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
          goto LABEL_31;
        case 50:
          current_numeric_locale = __get_current_numeric_locale((uint64_t)v5);
          goto LABEL_30;
        case 51:
          current_messages_locale = __get_current_numeric_locale((uint64_t)v5);
          goto LABEL_27;
        case 52:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5);
          goto LABEL_30;
        case 53:
          current_messages_locale = __get_current_messages_locale((uint64_t)v5);
LABEL_27:
          current_numeric_locale = current_messages_locale + 1;
          goto LABEL_30;
        case 54:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5) + 2;
          goto LABEL_30;
        case 55:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5) + 3;
          goto LABEL_30;
        case 56:
          current_monetary_locale = __get_current_monetary_locale((uint64_t)v5);
          if (!*(unsigned char *)current_monetary_locale[1])
          {
LABEL_43:
            wint_t result = "";
            goto LABEL_31;
          }
          __little = (char *)current_monetary_locale[1];
          int p_cs_precedes = localeconv_l(v5)->p_cs_precedes;
          int n_cs_precedes = localeconv_l(v5)->n_cs_precedes;
          wint_t result = "";
          if (p_cs_precedes != n_cs_precedes) {
            goto LABEL_31;
          }
          if (p_cs_precedes == 127)
          {
            int v20 = __get_current_monetary_locale((uint64_t)v5);
            int v23 = j__strncasecmp_l(__little, (const char *)v20[2], v21, v22);
            wint_t result = "";
            if (v23) {
              goto LABEL_31;
            }
            char v24 = 46;
          }
          else if (p_cs_precedes)
          {
            char v24 = 45;
          }
          else
          {
            char v24 = 43;
          }
          char v32 = v24;
          int v29 = j__strsignal_r((int)__little, v17, v18);
          char v31 = (char *)reallocf((void *)nl_langinfo_l_csym, v29 + 2);
          nl_langinfo_l_csyuint64_t m = (uint64_t)v31;
          wint_t result = "";
          if (v31)
          {
            char *v31 = v32;
            j__strnstr(v31 + 1, __little, v30);
            return v31;
          }
LABEL_31:
          if (*result) {
            BOOL v14 = 1;
          }
          else {
            BOOL v14 = a1 == 0;
          }
          if (v14) {
            return result;
          }
          if (a1 == 57) {
            return result;
          }
          a2 = (locale_t)__c_locale;
          if (v5 == (_xlocale *)__c_locale) {
            return result;
          }
          break;
        default:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 56;
LABEL_30:
          wint_t result = *current_numeric_locale;
          if (result) {
            goto LABEL_31;
          }
          return result;
      }
    }
  }
  return result;
}

char *__cdecl nl_langinfo(nl_item a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return nl_langinfo_l(a1, v3);
}

int __istype(__darwin_ct_rune_t _c, unint64_t _f)
{
  if (_c > 0x7F) {
    BOOL v2 = __maskrune(_c, _f) == 0;
  }
  else {
    BOOL v2 = (_DefaultRuneLocale.__runetype[_c] & _f) == 0;
  }
  return !v2;
}

__darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c, unint64_t _f)
{
  return _c <= 0xFF && (_DefaultRuneLocale.__runetype[_c] & _f) != 0;
}

int __wcwidth(int _c)
{
  if (_c)
  {
    unsigned int v1 = __maskrune(_c, 0xE0040000uLL);
    if ((v1 & 0x40000) != 0) {
      int v2 = 1;
    }
    else {
      int v2 = -1;
    }
    if (v1 >> 29) {
      return v1 >> 30;
    }
    else {
      return v2;
    }
  }
  return _c;
}

int __maskrune_l(__darwin_ct_rune_t a1, unint64_t a2, locale_t a3)
{
  int v3 = a2;
  if (a1 < 0x100)
  {
    unsigned int v5 = __c_locale;
    locale_t v6 = (locale_t)&__global_locale;
    if (a3 != (locale_t)-1) {
      locale_t v6 = a3;
    }
    if (a3) {
      unsigned int v5 = (char *)v6;
    }
    int v4 = *(_DWORD *)(*(void *)(*((void *)v5 + 166) + 120) + 4 * a1 + 60);
  }
  else
  {
    int v4 = ___runetype_l(a1, a3);
  }
  return v4 & v3;
}

int __istype_l(__darwin_ct_rune_t _c, unint64_t _f, locale_t _l)
{
  if (_c > 0x7F) {
    uint64_t v3 = __maskrune_l(_c, _f, _l);
  }
  else {
    uint64_t v3 = _DefaultRuneLocale.__runetype[_c] & _f;
  }
  return v3 != 0;
}

__darwin_ct_rune_t __toupper_l(__darwin_ct_rune_t _c, locale_t _l)
{
  if (_c > 0x7F) {
    return ___toupper_l(_c, _l);
  }
  else {
    return _DefaultRuneLocale.__mapupper[_c];
  }
}

__darwin_ct_rune_t __tolower_l(__darwin_ct_rune_t _c, locale_t _l)
{
  if (_c > 0x7F) {
    return ___tolower_l(_c, _l);
  }
  else {
    return _DefaultRuneLocale.__maplower[_c];
  }
}

int __wcwidth_l(int _c, locale_t _l)
{
  if (_c)
  {
    unsigned int v2 = __maskrune_l(_c, 0xE0040000uLL, _l);
    if ((v2 & 0x40000) != 0) {
      int v3 = 1;
    }
    else {
      int v3 = -1;
    }
    if (v2 >> 29) {
      return v2 >> 30;
    }
    else {
      return v3;
    }
  }
  return _c;
}

uint64_t _none_init(void *a1)
{
  a1[9] = _none_mbrtowc;
  a1[10] = _none_mbsinit;
  a1[11] = _none_mbsnrtowcs;
  a1[12] = _none_wcrtomb;
  a1[13] = _none_wcsnrtombs;
  a1[8] = 0x10000000001;
  return 0;
}

uint64_t _none_mbsinit()
{
  return 1;
}

uint64_t _none_mbsnrtowcs(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = *a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0;
      while (1)
      {
        if (a3 == result)
        {
          v5 += result;
          a4 = a3;
          goto LABEL_12;
        }
        int v8 = v5[result];
        *(_DWORD *)(a1 + 4 * result) = v8;
        if (!v8) {
          break;
        }
        if (a4 == ++result)
        {
          v5 += result;
          goto LABEL_12;
        }
      }
      *a2 = 0;
    }
    else
    {
LABEL_12:
      *a2 = v5;
      return a4;
    }
  }
  else
  {
    uint64_t v9 = j__mkdirx_np(*a2, 0);
    if (v9) {
      return v9 - (void)v5;
    }
    else {
      return a3;
    }
  }
  return result;
}

uint64_t _none_wcsnrtombs(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0;
      while (a3 != result)
      {
        int v7 = *v4;
        if (*v4 >= 0x100)
        {
          *a2 = v4;
          goto LABEL_20;
        }
        *(unsigned char *)(a1 + result) = v7;
        if (!v7)
        {
          *a2 = 0;
          return result;
        }
        ++v4;
        if (a4 == ++result)
        {
          a3 = a4;
          break;
        }
      }
    }
    else
    {
      a3 = 0;
    }
    *a2 = v4;
    return a3;
  }
  else
  {
    if (a3)
    {
      int v8 = &v4[a3];
      uint64_t v9 = *a2;
      while (*v9)
      {
        if (*v9 >= 0x100)
        {
LABEL_20:
          *__error() = 92;
          return -1;
        }
        ++v9;
        if (!--a3)
        {
          uint64_t v9 = v8;
          return v9 - v4;
        }
      }
    }
    else
    {
      uint64_t v9 = *a2;
    }
    return v9 - v4;
  }
}

uint64_t currentlocale()
{
  uint64_t v0 = (void *)currentlocale_current_locale_string;
  if (!currentlocale_current_locale_string)
  {
    uint64_t v0 = malloc_type_malloc(0xE7uLL, 0xF88A08B2uLL);
    currentlocale_current_locale_string = (uint64_t)v0;
    if (!v0) {
      return 0;
    }
  }
  MEMORY[0x18C122F90](v0, "C", 231);
  uint64_t v3 = 0x40u;
  while (!j__strncasecmp_l("C", &current_categories[v3], v1, v2))
  {
    v3 += 32;
    if (v3 == 224) {
      return currentlocale_current_locale_string;
    }
  }
  unsigned int v5 = (char *)currentlocale_current_locale_string;
  uint64_t v6 = 0x40u;
  do
  {
    *(_WORD *)&v5[j__strsignal_r((int)v5, v4, v1)] = 47;
    strcat(v5, &current_categories[v6]);
    v6 += 32;
  }
  while (v6 != 224);
  return (uint64_t)v5;
}

char *__get_locale_env(int a1)
{
  uint64_t result = getenv("LC_ALL");
  if (!result || !*result)
  {
    uint64_t result = getenv(categories[a1]);
    if (!result || !*result)
    {
      uint64_t result = getenv("LANG");
      if (!result || !*result) {
        return "C";
      }
    }
  }
  return result;
}

const char *loadlocale(int a1, uint64_t a2, size_t a3)
{
  uint64_t v4 = a1;
  unsigned int v5 = &new_categories[32 * a1];
  if (*v5 == 46 && (!v5[1] || v5[1] == 46 && !v5[2])
    || j__strncasecmp(&new_categories[32 * a1], (const char *)0x2F, a3))
  {
    goto LABEL_6;
  }
  int v7 = *__error();
  int v8 = __detect_path_locale();
  *__error() = v8;
  if (*__error()) {
    return 0;
  }
  *__error() = v7;
  unsigned int v12 = a1 - 1;
  if ((a1 - 1) >= 6)
  {
LABEL_6:
    uint64_t v6 = 0;
    *__error() = 22;
    return v6;
  }
  uint64_t v6 = &current_categories[32 * v4];
  if (!j__strncasecmp_l(v5, v6, v10, v11)) {
    return v6;
  }
  if (((unsigned int (*)(const char *, void *))*(&off_1ED7533A8 + (int)v12))(v5, &__global_locale) == -1) {
    return 0;
  }
  j__strnstr(v6, v5, v13);
  uint64_t v14 = *((void *)&__global_locale + v12 + 165);
  if (v14) {
    MEMORY[0x18C122F90](v14 + 16, v5, 32);
  }
  if (a1 == 4)
  {
    byte_1EB1CD016 = 0;
    uint64_t v15 = off_1EB1CD048;
    if (off_1EB1CD048)
    {
      if (atomic_fetch_add((atomic_uint *volatile)off_1EB1CD048, 0xFFFFFFFF) == 1)
      {
        uint64_t v16 = (void (*)(void))*((void *)v15 + 1);
        if (v16) {
          v16();
        }
      }
    }
    off_1EB1CD048 = 0;
  }
  else if (a1 == 2 && byte_1EB1CD016 == 1)
  {
    byte_1EB1CD016 = 0;
  }
  return v6;
}

uint64_t __open_path_locale(const char *a1, uint64_t a2, size_t a3)
{
  j__strnstr(v11, (const char *)_PathLocale, a3);
  *(_WORD *)&v11[j__strsignal_r((int)v11, v4, v5)] = 47;
  strcat(v11, a1);
  uint64_t result = open_NOCANCEL();
  if ((result & 0x80000000) != 0)
  {
    strcpy(v11, "/usr/share/locale");
    *(_WORD *)&v11[j__strsignal_r((int)v11, v7, v8)] = 47;
    strcat(v11, a1);
    uint64_t result = open_NOCANCEL();
    if ((result & 0x80000000) != 0)
    {
      strcpy(v11, "/usr/local/share/locale");
      *(_WORD *)&v11[j__strsignal_r((int)v11, v9, v10)] = 47;
      strcat(v11, a1);
      return open_NOCANCEL();
    }
  }
  return result;
}

uint64_t __setrunelocale(const char *a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  if (!j__strncasecmp_l(a1, "C", a3, a4) || !j__strncasecmp_l(a1, "POSIX", v6, v7))
  {
    uint64_t v53 = *(void *)(a2 + 1328);
    if (v53)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v53, 0xFFFFFFFF) == 1)
      {
        char v54 = *(void (**)(void))(v53 + 8);
        if (v54) {
          v54();
        }
      }
    }
    *(void *)(a2 + 1328) = &_DefaultRuneXLocale;
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      uint64_t v52 = 0;
      _CurrentRuneLocale = (_RuneLocale *)qword_1EC15C7D8;
      __mb_cur_max = dword_1EC15C7A0;
      __mb_sb_limit = unk_1EC15C7A4;
      return v52;
    }
    return 0;
  }
  os_unfair_lock_lock(&__setrunelocale_cache_lock);
  if (__setrunelocale_CachedRuneLocale
    && !j__strncasecmp_l(a1, (const char *)(__setrunelocale_CachedRuneLocale + 16), v8, v9))
  {
    uint64_t v55 = *(void *)(a2 + 1328);
    if (v55)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v55, 0xFFFFFFFF) == 1)
      {
        long long v56 = *(void (**)(void))(v55 + 8);
        if (v56) {
          v56();
        }
      }
    }
    uint64_t v57 = (atomic_uint *)__setrunelocale_CachedRuneLocale;
    *(void *)(a2 + 1328) = __setrunelocale_CachedRuneLocale;
    if (v57) {
      atomic_fetch_add(v57, 1u);
    }
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      uint64_t v58 = *(void *)(a2 + 1328);
      _CurrentRuneLocale = *(_RuneLocale **)(v58 + 120);
      int v59 = *(_DWORD *)(v58 + 64);
      LODWORD(v58) = *(_DWORD *)(v58 + 68);
      __mb_cur_max = v59;
      __mb_sb_limit = v58;
    }
LABEL_57:
    os_unfair_lock_unlock(&__setrunelocale_cache_lock);
    return 0;
  }
  os_unfair_lock_unlock(&__setrunelocale_cache_lock);
  j__strnstr(__big, a1, v10);
  strcpy(&__big[j__strsignal_r((int)__big, v11, v12)], "/LC_CTYPE");
  int v15 = __open_path_locale(__big, v13, v14);
  uint64_t v16 = (FILE *)fdopen_DARWIN_EXTSN(v15, "r");
  if (!v16)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 2;
    }
  }
  BOOL v17 = v16;
  RuneMaguint64_t i = _Read_RuneMagi(v16);
  if (RuneMagi)
  {
    uint64_t v19 = (uint64_t)RuneMagi;
    fclose(v17);
    *(void *)(v19 + 72) = 0;
    *(void *)(v19 + 80) = 0;
    *(void *)(v19 + 88) = __mbsnrtowcs_std;
    *(void *)(v19 + 96) = 0;
    *(void *)(v19 + 104) = __wcsnrtombs_std;
    uint64_t v20 = *(void *)(v19 + 120);
    size_t v21 = (char *)(v20 + 8);
    *(void *)(v20 + 40) = 0;
    *(void *)(v20 + 48) = 0;
    if (j__strncasecmp_l((const char *)(v20 + 8), "NONE:US-ASCII", v22, v23)
      && j__strncasecmp_l(v21, "ASCII", v24, v25))
    {
      if (j__strsvisx(v21, "NONE", 4uLL, v26, v27))
      {
        if (j__strncasecmp_l(v21, "UTF-8", v28, v29))
        {
          if (j__strncasecmp_l(v21, "EUC-CN", v30, v31))
          {
            if (j__strncasecmp_l(v21, "EUC-JP", v32, v33))
            {
              if (j__strncasecmp_l(v21, "EUC-KR", v34, v35))
              {
                if (j__strncasecmp_l(v21, "EUC-TW", v36, v37))
                {
                  if (j__strncasecmp_l(v21, "EUC", v38, v39))
                  {
                    if (j__strncasecmp_l(v21, "GB18030", v40, v41))
                    {
                      if (j__strncasecmp_l(v21, "GB2312", v42, v43))
                      {
                        if (j__strncasecmp_l(v21, "GBK", v44, v45))
                        {
                          if (j__strncasecmp_l(v21, "BIG5", v46, v47))
                          {
                            if (j__strncasecmp_l(v21, "MSKanji", v48, v49))
                            {
                              if (j__strncasecmp_l(v21, "UTF2", v50, v51))
                              {
                                uint64_t v52 = 79;
LABEL_41:
                                if (atomic_fetch_add((atomic_uint *volatile)v19, 0xFFFFFFFF) == 1)
                                {
                                  int v62 = *(void (**)(uint64_t))(v19 + 8);
                                  if (v62) {
                                    v62(v19);
                                  }
                                }
                                return v52;
                              }
                              uint64_t v60 = _UTF2_init((void *)v19);
                            }
                            else
                            {
                              uint64_t v60 = _MSKanji_init((void *)v19);
                            }
                          }
                          else
                          {
                            uint64_t v60 = _BIG5_init((void *)v19);
                          }
                        }
                        else
                        {
                          uint64_t v60 = _GBK_init((void *)v19);
                        }
                      }
                      else
                      {
                        uint64_t v60 = _GB2312_init((void *)v19);
                      }
                    }
                    else
                    {
                      uint64_t v60 = _GB18030_init((void *)v19);
                    }
                  }
                  else
                  {
                    uint64_t v60 = _EUC_init((void *)v19);
                  }
                }
                else
                {
                  uint64_t v60 = _EUC_TW_init((void *)v19);
                }
              }
              else
              {
                uint64_t v60 = _EUC_KR_init((void *)v19);
              }
            }
            else
            {
              uint64_t v60 = _EUC_JP_init((void *)v19);
            }
          }
          else
          {
            uint64_t v60 = _EUC_CN_init((void *)v19);
          }
        }
        else
        {
          uint64_t v60 = _UTF8_init((void *)v19);
        }
      }
      else
      {
        uint64_t v60 = _none_init((void *)v19);
      }
    }
    else
    {
      uint64_t v60 = _ascii_init((void *)v19);
    }
    uint64_t v52 = v60;
    if (v60) {
      goto LABEL_41;
    }
    j__strnstr((const char *)(v19 + 16), a1, v61);
    uint64_t v63 = *(void *)(a2 + 1328);
    if (v63)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v63, 0xFFFFFFFF) == 1)
      {
        unsigned int v64 = *(void (**)(void))(v63 + 8);
        if (v64) {
          v64();
        }
      }
    }
    *(void *)(a2 + 1328) = v19;
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      _CurrentRuneLocale = *(_RuneLocale **)(v19 + 120);
      int v65 = *(_DWORD *)(v19 + 68);
      __mb_cur_max = *(_DWORD *)(v19 + 64);
      __mb_sb_limit = v65;
    }
    os_unfair_lock_lock(&__setrunelocale_cache_lock);
    uint64_t v66 = __setrunelocale_CachedRuneLocale;
    if (__setrunelocale_CachedRuneLocale)
    {
      if (atomic_fetch_add((atomic_uint *volatile)__setrunelocale_CachedRuneLocale, 0xFFFFFFFF) == 1)
      {
        unsigned int v67 = *(void (**)(void))(v66 + 8);
        if (v67) {
          v67();
        }
      }
    }
    __setrunelocale_CachedRuneLocale = v19;
    atomic_fetch_add((atomic_uint *volatile)v19, 1u);
    goto LABEL_57;
  }
  if (*__error()) {
    uint64_t v52 = *__error();
  }
  else {
    uint64_t v52 = 79;
  }
  fclose(v17);
  return v52;
}

uint64_t __wrap_setrunelocale(const char *a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  uint64_t result = __setrunelocale(a1, a2, a3, a4);
  if (result)
  {
    *__error() = result;
    return 0xFFFFFFFFLL;
  }
  return result;
}

__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t result, locale_t a2)
{
  if ((result & 0x80000000) == 0)
  {
    locale_t v2 = (locale_t)&__c_locale;
    locale_t v3 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1) {
      locale_t v3 = a2;
    }
    if (a2) {
      locale_t v2 = v3;
    }
    uint64_t v4 = *(void *)(*((void *)v2 + 166) + 120);
    if (result > 0xFF)
    {
      unint64_t v5 = *(int *)(v4 + 3152);
      if (v5)
      {
        size_t v6 = *(_DWORD **)(v4 + 3160);
        while (1)
        {
          int v7 = &v6[6 * (v5 >> 1)];
          __darwin_ct_rune_t v8 = v7[1];
          if (result >= *v7 && v8 >= result) {
            break;
          }
          size_t v10 = v7 + 6;
          if (v8 < result) {
            size_t v6 = v10;
          }
          unint64_t v11 = v5 - (v8 < result);
          unint64_t v5 = v11 >> 1;
          if (v11 <= 1) {
            return result;
          }
        }
        return result - *v7 + v6[6 * (v5 >> 1) + 2];
      }
    }
    else
    {
      return *(_DWORD *)(v4 + 4 * result + 1084);
    }
  }
  return result;
}

__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return ___tolower_l(a1, v3);
}

__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t result, locale_t a2)
{
  if ((result & 0x80000000) == 0)
  {
    locale_t v2 = (locale_t)&__c_locale;
    locale_t v3 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1) {
      locale_t v3 = a2;
    }
    if (a2) {
      locale_t v2 = v3;
    }
    uint64_t v4 = *(void *)(*((void *)v2 + 166) + 120);
    if (result > 0xFF)
    {
      unint64_t v5 = *(int *)(v4 + 3168);
      if (v5)
      {
        size_t v6 = *(_DWORD **)(v4 + 3176);
        while (1)
        {
          int v7 = &v6[6 * (v5 >> 1)];
          __darwin_ct_rune_t v8 = v7[1];
          if (result >= *v7 && v8 >= result) {
            break;
          }
          size_t v10 = v7 + 6;
          if (v8 < result) {
            size_t v6 = v10;
          }
          unint64_t v11 = v5 - (v8 < result);
          unint64_t v5 = v11 >> 1;
          if (v11 <= 1) {
            return result;
          }
        }
        return result - *v7 + v6[6 * (v5 >> 1) + 2];
      }
    }
    else
    {
      return *(_DWORD *)(v4 + 4 * result + 2108);
    }
  }
  return result;
}

__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return ___toupper_l(a1, v3);
}

uint64_t _UTF8_init(void *a1)
{
  a1[9] = _UTF8_mbrtowc;
  a1[12] = _UTF8_wcrtomb;
  a1[10] = _UTF8_mbsinit;
  a1[11] = _UTF8_mbsnrtowcs;
  a1[13] = _UTF8_wcsnrtombs;
  a1[8] = 0x8000000004;
  return 0;
}

uint64_t _UTF8_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a4 + 4);
  if (v4 >= 5)
  {
    unint64_t v5 = __error();
    int v6 = 22;
LABEL_3:
    *unint64_t v5 = v6;
    return -1;
  }
  if (a2) {
    __darwin_ct_rune_t v8 = a2;
  }
  else {
    __darwin_ct_rune_t v8 = "";
  }
  if (!a2) {
    a3 = 1;
  }
  if (a2) {
    size_t v10 = a1;
  }
  else {
    size_t v10 = 0;
  }
  if (!a3) {
    return -2;
  }
  if (!v4)
  {
    unsigned int v20 = *(unsigned __int8 *)v8;
    if ((*v8 & 0x80000000) == 0)
    {
      if (v10) {
        _DWORD *v10 = v20;
      }
      return v20 != 0;
    }
    if ((v20 & 0xE0) == 0xC0)
    {
      if (v20 >= 0xC2)
      {
        unsigned int v12 = 191;
        unsigned int v11 = 128;
        int v13 = 2;
        int v22 = 31;
LABEL_63:
        ++v8;
        int v14 = v22 & v20;
        goto LABEL_16;
      }
    }
    else
    {
      if ((v20 & 0xF0) == 0xE0)
      {
        if (v20 == 224)
        {
          unsigned int v12 = 191;
          unsigned int v11 = 160;
        }
        else
        {
          if (v20 == 237) {
            unsigned int v12 = 159;
          }
          else {
            unsigned int v12 = 191;
          }
          unsigned int v11 = 128;
        }
        int v13 = 3;
        int v22 = 15;
        goto LABEL_63;
      }
      if (v20 <= 0xF4 && (v20 & 0xF8) == 0xF0)
      {
        if (v20 == 240)
        {
          unsigned int v12 = 191;
          unsigned int v11 = 144;
        }
        else
        {
          if (v20 == 244) {
            unsigned int v12 = 143;
          }
          else {
            unsigned int v12 = 191;
          }
          unsigned int v11 = 128;
        }
        int v13 = 4;
        int v22 = 7;
        goto LABEL_63;
      }
    }
LABEL_54:
    unint64_t v5 = __error();
    int v6 = 92;
    goto LABEL_3;
  }
  unsigned int v11 = *(unsigned __int8 *)(a4 + 8);
  unsigned int v12 = *(unsigned __int8 *)(a4 + 9);
  int v13 = *(_DWORD *)(a4 + 4);
  int v14 = *(_DWORD *)a4;
LABEL_16:
  unint64_t v15 = v4 == 0;
  unint64_t v16 = v13;
  if (a3 < v13) {
    unint64_t v16 = a3;
  }
  uint64_t v17 = v16 - v15;
  if (v16 > v15)
  {
    do
    {
      unsigned int v18 = *(unsigned __int8 *)v8;
      if (v11)
      {
        if (v18 < v11 || v18 > v12) {
          goto LABEL_54;
        }
        unsigned int v12 = 0;
      }
      else if ((v18 & 0xC0) != 0x80)
      {
        goto LABEL_54;
      }
      unsigned int v11 = 0;
      ++v8;
      int v14 = v18 & 0x3F | (v14 << 6);
      --v17;
    }
    while (v17);
    LOBYTE(v11) = 0;
    LODWORD(v15) = v16;
  }
  if (v13 <= (int)v15)
  {
    if (v10) {
      _DWORD *v10 = v14;
    }
    *(_DWORD *)(a4 + 4) = 0;
    if (v14) {
      return v13;
    }
    else {
      return 0;
    }
  }
  else
  {
    *(unsigned char *)(a4 + 8) = v11;
    *(unsigned char *)(a4 + 9) = v12;
    uint64_t result = -2;
    *(_DWORD *)a4 = v14;
    *(_DWORD *)(a4 + 4) = v13 - v15;
  }
  return result;
}

uint64_t _UTF8_wcrtomb(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4))
  {
    locale_t v3 = __error();
    int v4 = 22;
LABEL_3:
    int *v3 = v4;
    return -1;
  }
  if (!a1) {
    return 1;
  }
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1;
  }
  if (a2 < 0x800)
  {
    char v6 = -64;
    uint64_t v5 = 2;
    goto LABEL_16;
  }
  if (!HIWORD(a2))
  {
    if (a2 >> 11 != 27)
    {
      char v6 = -32;
      uint64_t v5 = 3;
      goto LABEL_16;
    }
LABEL_14:
    locale_t v3 = __error();
    int v4 = 92;
    goto LABEL_3;
  }
  if (a2 >= 0x110000) {
    goto LABEL_14;
  }
  char v6 = -16;
  uint64_t v5 = 4;
LABEL_16:
  uint64_t v7 = v5 - 1;
  do
  {
    a1[v7] = a2 & 0x3F | 0x80;
    a2 = (int)a2 >> 6;
    unint64_t v8 = v7-- + 1;
  }
  while (v8 > 2);
  *a1 = a2 | v6;
  return v5;
}

BOOL _UTF8_mbsinit(uint64_t a1)
{
  return !a1 || *(_DWORD *)(a1 + 4) == 0;
}

uint64_t _UTF8_mbsnrtowcs(_DWORD *a1, const char **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a3;
  int v16 = 0;
  uint64_t v7 = *a2;
  if (a1)
  {
    uint64_t v8 = a4;
    size_t v10 = a1;
    if (!a3 || !a4)
    {
      if (!a4)
      {
LABEL_20:
        *a2 = v7;
        return v8;
      }
      goto LABEL_12;
    }
    if (*(int *)(a5 + 4) < 1 || *v7 < 1)
    {
LABEL_12:
      uint64_t v11 = 0;
      uint64_t v12 = -a4;
      while (1)
      {
        if (v6 && *v7 >= 1)
        {
          _DWORD *v10 = *(unsigned __int8 *)v7;
          uint64_t v13 = 1;
        }
        else
        {
          uint64_t v13 = _UTF8_mbrtowc(v10, v7, v6, a5);
          switch(v13)
          {
            case -2:
              *a2 = &v7[v6];
              return -v11;
            case 0:
              *a2 = 0;
              return -v11;
            case -1:
              *a2 = v7;
              return -1;
          }
        }
        v7 += v13;
        v6 -= v13;
        ++v10;
        if (v12 == --v11) {
          goto LABEL_20;
        }
      }
    }
LABEL_10:
    *__error() = 92;
    return -1;
  }
  if (a3 && *(int *)(a5 + 4) >= 1 && *v7 >= 1) {
    goto LABEL_10;
  }
  uint64_t v8 = 0;
  if (!a3) {
    goto LABEL_24;
  }
LABEL_22:
  if (*v7 > 0)
  {
    uint64_t v14 = 1;
    goto LABEL_27;
  }
LABEL_24:
  while (1)
  {
    uint64_t v14 = _UTF8_mbrtowc(&v16, v7, v6, a5);
    switch(v14)
    {
      case -2:
        return v8;
      case -1:
        return -1;
      case 0:
        return v8;
    }
LABEL_27:
    v7 += v14;
    v6 -= v14;
    ++v8;
    if (v6) {
      goto LABEL_22;
    }
  }
}

uint64_t _UTF8_wcsnrtombs(unsigned char *a1, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a5 + 4))
  {
    *__error() = 22;
    return -1;
  }
  else
  {
    uint64_t v9 = a1;
    size_t v10 = *a2;
    uint64_t v5 = 0;
    if (a1)
    {
      unint64_t v11 = a4;
      if (a4)
      {
        while (a3)
        {
          unsigned int v12 = *v10;
          if (*v10 > 0x7F)
          {
            if (v11 < 5)
            {
              unint64_t v14 = _UTF8_wcrtomb(path, v12, a5);
              if (v14 == -1)
              {
LABEL_30:
                *a2 = v10;
                return -1;
              }
              uint64_t v13 = v14;
              if (v14 > v11) {
                break;
              }
              j__mkdtempat_np((int)v9, path);
            }
            else
            {
              uint64_t v13 = _UTF8_wcrtomb(v9, v12, a5);
              if (v13 == -1) {
                goto LABEL_30;
              }
            }
          }
          else
          {
            *uint64_t v9 = v12;
            uint64_t v13 = 1;
          }
          if (!*v10)
          {
            *a2 = 0;
            uint64_t v17 = v5 + v13;
            return v17 - 1;
          }
          ++v10;
          v9 += v13;
          v5 += v13;
          --a3;
          v11 -= v13;
          if (!v11) {
            break;
          }
        }
      }
      *a2 = v10;
    }
    else
    {
      while (a3)
      {
        unsigned int v15 = *v10;
        if (*v10 >= 0x80)
        {
          uint64_t v16 = _UTF8_wcrtomb(path, v15, a5);
          if (v16 == -1) {
            return -1;
          }
          if (!*v10)
          {
LABEL_27:
            uint64_t v17 = v5 + v16;
            return v17 - 1;
          }
        }
        else
        {
          uint64_t v16 = 1;
          if (!v15) {
            goto LABEL_27;
          }
        }
        ++v10;
        v5 += v16;
        --a3;
      }
    }
  }
  return v5;
}

size_t wcrtomb(char *a1, __int32 a2, mbstate_t *a3)
{
  uint64_t v3 = __locale_key;
  int v4 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    int v4 = (char *)&__global_locale;
  }
  if (v4 == (char *)-1) {
    uint64_t v5 = (char *)&__global_locale;
  }
  else {
    uint64_t v5 = v4;
  }
  if (!a3) {
    a3 = (mbstate_t *)(v5 + 784);
  }
  return (*(uint64_t (**)(char *, void, mbstate_t *))(*((void *)v5 + 166) + 96))(a1, *(void *)&a2, a3);
}

size_t wcsftime_l(__int32 *a1, size_t a2, const __int32 *a3, const tm *a4, locale_t a5)
{
  size_t v21 = a3;
  int v22 = 0;
  locale_t v8 = (locale_t)&__global_locale;
  memset(&v23, 0, 32);
  if (a5 != (locale_t)-1) {
    locale_t v8 = a5;
  }
  if (a5) {
    uint64_t v9 = (char *)v8;
  }
  else {
    uint64_t v9 = __c_locale;
  }
  memset(&v23._mbstateL + 4, 0, 96);
  size_t v10 = wcsrtombs_l(0, &v21, 0, &v23, (locale_t)v9);
  if (v10 == -1)
  {
    uint64_t v16 = 0;
    uint64_t v13 = 0;
LABEL_17:
    int v19 = *__error();
    free(v13);
    free(v16);
    size_t v18 = 0;
    *__error() = v19;
    return v18;
  }
  size_t v11 = v10 + 1;
  unsigned int v12 = (char *)malloc_type_malloc(v10 + 1, 0x5EBEA26FuLL);
  uint64_t v13 = v12;
  if (!v12)
  {
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  memset(&v23, 0, sizeof(v23));
  wcsrtombs_l(v12, &v21, v11, &v23, (locale_t)v9);
  unint64_t v14 = *(int *)(*((void *)v9 + 166) + 64);
  if (0xFFFFFFFFFFFFFFFFLL / v14 <= a2)
  {
    uint64_t v16 = 0;
    *__error() = 22;
    goto LABEL_17;
  }
  unsigned int v15 = (char *)malloc_type_malloc(v14 * a2, 0x2DD30755uLL);
  uint64_t v16 = v15;
  if (!v15) {
    goto LABEL_17;
  }
  if (!strftime_l(v15, a2, v13, a4, (locale_t)v9)) {
    goto LABEL_17;
  }
  int v22 = v16;
  memset(&v23, 0, sizeof(v23));
  size_t v17 = mbsrtowcs_l(a1, (const char **)&v22, a2, &v23, (locale_t)v9);
  if (v17 > 0xFFFFFFFFFFFFFFFDLL || v22) {
    goto LABEL_17;
  }
  size_t v18 = v17;
  free(v13);
  free(v16);
  return v18;
}

size_t wcsftime(__int32 *a1, size_t a2, const __int32 *a3, const tm *a4)
{
  uint64_t v4 = __locale_key;
  uint64_t v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (_xlocale *)&__global_locale;
  }
  return wcsftime_l(a1, a2, a3, a4, v6);
}

size_t wcsnrtombs_l(char *a1, const __int32 **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a6 != (locale_t)-1) {
    locale_t v6 = a6;
  }
  if (a6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (!a5) {
    a5 = (mbstate_t *)((char *)v7 + 912);
  }
  return (*(uint64_t (**)(char *, const __int32 **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 104))(a1, a2, a3, a4, a5);
}

size_t wcsnrtombs(char *a1, const __int32 **a2, size_t a3, size_t a4, mbstate_t *a5)
{
  uint64_t v5 = __locale_key;
  locale_t v6 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (!v6) {
    locale_t v6 = (char *)&__global_locale;
  }
  if (v6 == (char *)-1) {
    locale_t v7 = (char *)&__global_locale;
  }
  else {
    locale_t v7 = v6;
  }
  if (!a5) {
    a5 = (mbstate_t *)(v7 + 912);
  }
  return (*(uint64_t (**)(char *, const __int32 **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 104))(a1, a2, a3, a4, a5);
}

uint64_t __wcsnrtombs_std(char *a1, _DWORD **a2, uint64_t a3, unint64_t a4, long long *a5, uint64_t a6)
{
  uint64_t v8 = a3;
  uint64_t v9 = *(void *)(a6 + 1328);
  size_t v10 = *(uint64_t (**)(char *, void, long long *, uint64_t))(v9 + 96);
  size_t v11 = *a2;
  if (a1)
  {
    unint64_t v12 = a4;
    if (a4)
    {
      uint64_t v13 = a1;
      uint64_t v14 = 0;
      unint64_t v15 = *(int *)(v9 + 64);
      while (v8)
      {
        if (v12 <= v15)
        {
          long long v17 = a5[5];
          long long v35 = a5[4];
          long long v36 = v17;
          long long v18 = a5[7];
          long long v37 = a5[6];
          long long v38 = v18;
          long long v19 = a5[1];
          long long v31 = *a5;
          long long v32 = v19;
          long long v20 = a5[3];
          long long v33 = a5[2];
          long long v34 = v20;
          unint64_t v21 = v10(path, *v11, a5, a6);
          if (v21 == -1)
          {
LABEL_21:
            *a2 = v11;
            return -1;
          }
          uint64_t v16 = v21;
          if (v21 > (int)v12)
          {
            long long v25 = v36;
            a5[4] = v35;
            a5[5] = v25;
            long long v26 = v38;
            a5[6] = v37;
            a5[7] = v26;
            long long v27 = v32;
            *a5 = v31;
            a5[1] = v27;
            long long v28 = v34;
            a5[2] = v33;
            a5[3] = v28;
            break;
          }
          j__mkdtempat_np((int)v13, path);
        }
        else
        {
          uint64_t v16 = v10(v13, *v11, a5, a6);
          if (v16 == -1) {
            goto LABEL_21;
          }
        }
        if (!*v11)
        {
          *a2 = 0;
          uint64_t v23 = v14 + v16;
          return v23 - 1;
        }
        ++v11;
        v13 += v16;
        v14 += v16;
        --v8;
        v12 -= v16;
        if (!v12) {
          break;
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    *a2 = v11;
  }
  else
  {
    uint64_t v14 = 0;
    if (a3)
    {
      while (1)
      {
        uint64_t v22 = v10(path, *v11, a5, a6);
        if (v22 == -1) {
          return -1;
        }
        if (!*v11) {
          break;
        }
        ++v11;
        v14 += v22;
        if (!--v8) {
          return v14;
        }
      }
      uint64_t v23 = v14 + v22;
      return v23 - 1;
    }
  }
  return v14;
}

size_t wcsrtombs_l(char *a1, const __int32 **a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1) {
    locale_t v5 = a5;
  }
  if (a5) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)((char *)v6 + 1040);
  }
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166)
                                                                                           + 104))(a1, a2, -1, a3, v7);
}

size_t wcsrtombs(char *a1, const __int32 **a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4 = __locale_key;
  locale_t v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5) {
    locale_t v5 = (char *)&__global_locale;
  }
  if (v5 == (char *)-1) {
    locale_t v6 = (char *)&__global_locale;
  }
  else {
    locale_t v6 = v5;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)(v6 + 1040);
  }
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166)
                                                                                           + 104))(a1, a2, -1, a3, v7);
}

size_t __wcs_end_offset(const char *a1, uint64_t a2, locale_t a3)
{
  decimal_point = localeconv_l(a3)->decimal_point;
  size_t v6 = a2 - (void)a1;
  if (strnstr(a1, decimal_point, v6)) {
    return v6 - j__strsignal_r((int)decimal_point, v7, v8) + 1;
  }
  return v6;
}

double wcstod_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  uint64_t v4 = (__int32 *)a1;
  memset(&v29, 0, sizeof(v29));
  long long v28 = 0;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1F41887A8](a1, a2);
  uint64_t v9 = (char *)&v27 - v8;
  if (v6 == -1) {
    size_t v10 = (_xlocale *)&__global_locale;
  }
  else {
    size_t v10 = (_xlocale *)v6;
  }
  if (v6) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = (_xlocale *)__c_locale;
  }
  locale_t v12 = __numeric_ctype((uint64_t)v11, v5, v6, v7);
  uint64_t v13 = v12;
  if (v12 == (locale_t)-1) {
    uint64_t v14 = (char *)&__global_locale;
  }
  else {
    uint64_t v14 = (char *)v12;
  }
  if (v12) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = __c_locale;
  }
  uint64_t v16 = v4;
  do
  {
    uint64_t v17 = *v16;
    if (v17 > 0x7F)
    {
      if (v17 >= 0x100)
      {
        LOWORD(v19) = ___runetype_l(v17, v13);
        goto LABEL_20;
      }
      long long v18 = (char *)(*(void *)(*((void *)v15 + 166) + 120) + 4 * v17);
    }
    else
    {
      long long v18 = &_DefaultRuneLocale.__magic[4 * v17];
    }
    int v19 = *((_DWORD *)v18 + 15);
LABEL_20:
    ++v16;
  }
  while ((v19 & 0x4000) != 0);
  if (!_simple_salloc()) {
    return 0.0;
  }
  memset(&v29, 0, sizeof(v29));
  __int32 v20 = *(v16 - 1);
  if (v20)
  {
    unint64_t v21 = v16;
    do
    {
      size_t v22 = wcrtomb_l(v9, v20, &v29, v13);
      if (v22 == -1) {
        break;
      }
      v9[v22] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        double v25 = 0.0;
        goto LABEL_33;
      }
      __int32 v23 = *v21++;
      __int32 v20 = v23;
    }
    while (v23);
  }
  size_t v24 = (const char *)_simple_string();
  double v25 = strtod_l(v24, &v28, v11);
  if (a2)
  {
    if (v28 != v24) {
      uint64_t v4 = &v16[__wcs_end_offset(v24, (uint64_t)v28, v11) - 1];
    }
    *a2 = v4;
  }
LABEL_33:
  _simple_sfree();
  return v25;
}

double wcstod(const __int32 *a1, __int32 **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcstod_l(a1, a2, v4);
}

float wcstof_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  uint64_t v4 = (__int32 *)a1;
  memset(&v29, 0, sizeof(v29));
  long long v28 = 0;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1F41887A8](a1, a2);
  uint64_t v9 = (char *)&v27 - v8;
  if (v6 == -1) {
    size_t v10 = (_xlocale *)&__global_locale;
  }
  else {
    size_t v10 = (_xlocale *)v6;
  }
  if (v6) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = (_xlocale *)__c_locale;
  }
  locale_t v12 = __numeric_ctype((uint64_t)v11, v5, v6, v7);
  uint64_t v13 = v12;
  if (v12 == (locale_t)-1) {
    uint64_t v14 = (char *)&__global_locale;
  }
  else {
    uint64_t v14 = (char *)v12;
  }
  if (v12) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = __c_locale;
  }
  uint64_t v16 = v4;
  do
  {
    uint64_t v17 = *v16;
    if (v17 > 0x7F)
    {
      if (v17 >= 0x100)
      {
        LOWORD(v19) = ___runetype_l(v17, v13);
        goto LABEL_20;
      }
      long long v18 = (char *)(*(void *)(*((void *)v15 + 166) + 120) + 4 * v17);
    }
    else
    {
      long long v18 = &_DefaultRuneLocale.__magic[4 * v17];
    }
    int v19 = *((_DWORD *)v18 + 15);
LABEL_20:
    ++v16;
  }
  while ((v19 & 0x4000) != 0);
  if (!_simple_salloc()) {
    return 0.0;
  }
  memset(&v29, 0, sizeof(v29));
  __int32 v20 = *(v16 - 1);
  if (v20)
  {
    unint64_t v21 = v16;
    do
    {
      size_t v22 = wcrtomb_l(v9, v20, &v29, v13);
      if (v22 == -1) {
        break;
      }
      v9[v22] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        float v25 = 0.0;
        goto LABEL_33;
      }
      __int32 v23 = *v21++;
      __int32 v20 = v23;
    }
    while (v23);
  }
  size_t v24 = (const char *)_simple_string();
  float v25 = strtof_l(v24, &v28, v11);
  if (a2)
  {
    if (v28 != v24) {
      uint64_t v4 = &v16[__wcs_end_offset(v24, (uint64_t)v28, v11) - 1];
    }
    *a2 = v4;
  }
LABEL_33:
  _simple_sfree();
  return v25;
}

float wcstof(const __int32 *a1, __int32 **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcstof_l(a1, a2, v4);
}

intmax_t wcstoimax_l(const __int32 *nptr, __int32 **endptr, int base, locale_t a4)
{
  locale_t v7 = (char *)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)__c_locale;
  }
  if (v9 != (_xlocale *)-1) {
    locale_t v7 = (char *)v9;
  }
  if (v9) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = __c_locale;
  }
  size_t v11 = nptr;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100) {
        break;
      }
      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if (v12 == 43 || v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }
  else
  {
    int v15 = v12;
  }
  if ((base & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48) {
      int v17 = 8;
    }
    else {
      int v17 = 10;
    }
    if (!base) {
      base = v17;
    }
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    int v15 = 48;
    if (!base) {
      base = 8;
    }
LABEL_35:
    if ((base - 37) >= 0xFFFFFFDD) {
      goto LABEL_37;
    }
    unint64_t v18 = 0;
    goto LABEL_61;
  }
  int v15 = v11[1];
  v11 += 2;
  base = 16;
LABEL_37:
  unint64_t v18 = 0;
  int v19 = 0;
  if (v12 == 45) {
    unint64_t v20 = 0x8000000000000000;
  }
  else {
    unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v21 = v20 / base;
  while (1)
  {
    int v22 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19) {
          break;
        }
        int v22 = v15 - 87;
      }
      else
      {
        int v22 = v15 - 55;
      }
    }
    if (v22 >= base) {
      break;
    }
    int v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % base))
      {
        unint64_t v18 = v20 / base;
      }
      else
      {
        unint64_t v18 = v18 * base + v22;
        int v23 = 1;
      }
    }
    int v24 = *v11++;
    int v15 = v24;
    int v19 = v23;
  }
  if (v19 < 0)
  {
    long long v28 = __error();
    int v25 = 0;
    *long long v28 = 34;
    if (!endptr) {
      return v20;
    }
    goto LABEL_62;
  }
  if (!v19)
  {
LABEL_61:
    *__error() = 22;
    int v25 = 1;
    unint64_t v20 = v18;
    if (!endptr) {
      return v20;
    }
    goto LABEL_62;
  }
  int v25 = 0;
  if (v12 == 45) {
    unint64_t v20 = -(uint64_t)v18;
  }
  else {
    unint64_t v20 = v18;
  }
  if (endptr)
  {
LABEL_62:
    if (v25) {
      long long v26 = (__int32 *)nptr;
    }
    else {
      long long v26 = (__int32 *)(v11 - 1);
    }
    *endptunsigned int r = v26;
  }
  return v20;
}

intmax_t wcstoimax(const __int32 *__nptr, __int32 **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoimax_l(__nptr, __endptr, __base, v5);
}

uint64_t wcstol_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (char *)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)__c_locale;
  }
  if (v9 != (_xlocale *)-1) {
    locale_t v7 = (char *)v9;
  }
  if (v9) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = __c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100) {
        break;
      }
      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if (v12 == 43 || v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }
  else
  {
    int v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48) {
      int v17 = 8;
    }
    else {
      int v17 = 10;
    }
    if (!a3) {
      a3 = v17;
    }
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    int v15 = 48;
    if (!a3) {
      a3 = 8;
    }
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD) {
      goto LABEL_37;
    }
    unint64_t v18 = 0;
    goto LABEL_61;
  }
  int v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  unint64_t v18 = 0;
  int v19 = 0;
  if (v12 == 45) {
    unint64_t v20 = 0x8000000000000000;
  }
  else {
    unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v21 = v20 / a3;
  while (1)
  {
    int v22 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19) {
          break;
        }
        int v22 = v15 - 87;
      }
      else
      {
        int v22 = v15 - 55;
      }
    }
    if (v22 >= a3) {
      break;
    }
    int v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % a3))
      {
        unint64_t v18 = v20 / a3;
      }
      else
      {
        unint64_t v18 = v18 * a3 + v22;
        int v23 = 1;
      }
    }
    int v24 = *v11++;
    int v15 = v24;
    int v19 = v23;
  }
  if (v19 < 0)
  {
    long long v28 = __error();
    int v25 = 0;
    *long long v28 = 34;
    if (!a2) {
      return v20;
    }
    goto LABEL_62;
  }
  if (!v19)
  {
LABEL_61:
    *__error() = 22;
    int v25 = 1;
    unint64_t v20 = v18;
    if (!a2) {
      return v20;
    }
    goto LABEL_62;
  }
  int v25 = 0;
  if (v12 == 45) {
    unint64_t v20 = -(uint64_t)v18;
  }
  else {
    unint64_t v20 = v18;
  }
  if (a2)
  {
LABEL_62:
    if (v25) {
      long long v26 = (__int32 *)a1;
    }
    else {
      long long v26 = (__int32 *)(v11 - 1);
    }
    *a2 = v26;
  }
  return v20;
}

uint64_t wcstol(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstol_l(a1, a2, a3, v5);
}

long double wcstold_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  uint64_t v4 = (__int32 *)a1;
  memset(&v29, 0, sizeof(v29));
  long long v28 = 0;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1F41887A8](a1, a2);
  uint64_t v9 = (char *)&v27 - v8;
  if (v6 == -1) {
    size_t v10 = (_xlocale *)&__global_locale;
  }
  else {
    size_t v10 = (_xlocale *)v6;
  }
  if (v6) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = (_xlocale *)__c_locale;
  }
  locale_t v12 = __numeric_ctype((uint64_t)v11, v5, v6, v7);
  unsigned int v13 = v12;
  if (v12 == (locale_t)-1) {
    uint64_t v14 = (char *)&__global_locale;
  }
  else {
    uint64_t v14 = (char *)v12;
  }
  if (v12) {
    int v15 = v14;
  }
  else {
    int v15 = __c_locale;
  }
  int v16 = v4;
  do
  {
    uint64_t v17 = *v16;
    if (v17 > 0x7F)
    {
      if (v17 >= 0x100)
      {
        LOWORD(v19) = ___runetype_l(v17, v13);
        goto LABEL_20;
      }
      unint64_t v18 = (char *)(*(void *)(*((void *)v15 + 166) + 120) + 4 * v17);
    }
    else
    {
      unint64_t v18 = &_DefaultRuneLocale.__magic[4 * v17];
    }
    int v19 = *((_DWORD *)v18 + 15);
LABEL_20:
    ++v16;
  }
  while ((v19 & 0x4000) != 0);
  if (!_simple_salloc()) {
    return 0.0;
  }
  memset(&v29, 0, sizeof(v29));
  __int32 v20 = *(v16 - 1);
  if (v20)
  {
    unint64_t v21 = v16;
    do
    {
      size_t v22 = wcrtomb_l(v9, v20, &v29, v13);
      if (v22 == -1) {
        break;
      }
      v9[v22] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        double v25 = 0.0;
        goto LABEL_33;
      }
      __int32 v23 = *v21++;
      __int32 v20 = v23;
    }
    while (v23);
  }
  int v24 = (const char *)_simple_string();
  double v25 = strtold_l(v24, &v28, v11);
  if (a2)
  {
    if (v28 != v24) {
      uint64_t v4 = &v16[__wcs_end_offset(v24, (uint64_t)v28, v11) - 1];
    }
    *a2 = v4;
  }
LABEL_33:
  _simple_sfree();
  return v25;
}

long double wcstold(const __int32 *a1, __int32 **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcstold_l(a1, a2, v4);
}

uint64_t wcstoll_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (char *)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)__c_locale;
  }
  if (v9 != (_xlocale *)-1) {
    locale_t v7 = (char *)v9;
  }
  if (v9) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = __c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100) {
        break;
      }
      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if (v12 == 43 || v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }
  else
  {
    int v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48) {
      int v17 = 8;
    }
    else {
      int v17 = 10;
    }
    if (!a3) {
      a3 = v17;
    }
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    int v15 = 48;
    if (!a3) {
      a3 = 8;
    }
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD) {
      goto LABEL_37;
    }
    unint64_t v18 = 0;
    goto LABEL_61;
  }
  int v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  unint64_t v18 = 0;
  int v19 = 0;
  if (v12 == 45) {
    unint64_t v20 = 0x8000000000000000;
  }
  else {
    unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v21 = v20 / a3;
  while (1)
  {
    int v22 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19) {
          break;
        }
        int v22 = v15 - 87;
      }
      else
      {
        int v22 = v15 - 55;
      }
    }
    if (v22 >= a3) {
      break;
    }
    int v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % a3))
      {
        unint64_t v18 = v20 / a3;
      }
      else
      {
        unint64_t v18 = v18 * a3 + v22;
        int v23 = 1;
      }
    }
    int v24 = *v11++;
    int v15 = v24;
    int v19 = v23;
  }
  if (v19 < 0)
  {
    long long v28 = __error();
    int v25 = 0;
    *long long v28 = 34;
    if (!a2) {
      return v20;
    }
    goto LABEL_62;
  }
  if (!v19)
  {
LABEL_61:
    *__error() = 22;
    int v25 = 1;
    unint64_t v20 = v18;
    if (!a2) {
      return v20;
    }
    goto LABEL_62;
  }
  int v25 = 0;
  if (v12 == 45) {
    unint64_t v20 = -(uint64_t)v18;
  }
  else {
    unint64_t v20 = v18;
  }
  if (a2)
  {
LABEL_62:
    if (v25) {
      long long v26 = (__int32 *)a1;
    }
    else {
      long long v26 = (__int32 *)(v11 - 1);
    }
    *a2 = v26;
  }
  return v20;
}

uint64_t wcstoll(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoll_l(a1, a2, a3, v5);
}

size_t wcstombs_l(char *a1, const __int32 *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, _OWORD *))(*((void *)v5 + 166) + 104))(a1, &v7, -1, a3, v8);
}

size_t wcstombs(char *a1, const __int32 *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = &__global_locale;
  }
  if (v4 == (void *)-1) {
    locale_t v5 = &__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, _OWORD *))(v5[166] + 104))(a1, &v7, -1, a3, v8);
}

unint64_t wcstoul_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (char *)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)__c_locale;
  }
  if (v9 != (_xlocale *)-1) {
    locale_t v7 = (char *)v9;
  }
  if (v9) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = __c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100) {
        break;
      }
      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if (v12 == 43 || v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }
  else
  {
    int v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48) {
      int v17 = 8;
    }
    else {
      int v17 = 10;
    }
    if (!a3) {
      a3 = v17;
    }
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    int v15 = 48;
    if (!a3) {
      a3 = 8;
    }
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD) {
      goto LABEL_37;
    }
    unint64_t v18 = 0;
    goto LABEL_57;
  }
  int v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  unint64_t v18 = 0;
  int v19 = 0;
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / a3;
  while (1)
  {
    int v21 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19) {
          break;
        }
        int v21 = v15 - 87;
      }
      else
      {
        int v21 = v15 - 55;
      }
    }
    if (v21 >= a3) {
      break;
    }
    int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > ~((int)v20 * a3))
      {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL / a3;
      }
      else
      {
        unint64_t v18 = v18 * a3 + v21;
        int v22 = 1;
      }
    }
    int v23 = *v11++;
    int v15 = v23;
    int v19 = v22;
  }
  if (v19 < 0)
  {
    uint64_t v27 = __error();
    int v24 = 0;
    int *v27 = 34;
    unint64_t v18 = -1;
    if (!a2) {
      return v18;
    }
    goto LABEL_58;
  }
  if (!v19)
  {
LABEL_57:
    *__error() = 22;
    int v24 = 1;
    if (!a2) {
      return v18;
    }
    goto LABEL_58;
  }
  int v24 = 0;
  if (v12 == 45) {
    unint64_t v18 = -(uint64_t)v18;
  }
  if (a2)
  {
LABEL_58:
    if (v24) {
      int v25 = (__int32 *)a1;
    }
    else {
      int v25 = (__int32 *)(v11 - 1);
    }
    *a2 = v25;
  }
  return v18;
}

unint64_t wcstoul(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoul_l(a1, a2, a3, v5);
}

unint64_t wcstoull_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (char *)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)__c_locale;
  }
  if (v9 != (_xlocale *)-1) {
    locale_t v7 = (char *)v9;
  }
  if (v9) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = __c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100) {
        break;
      }
      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if (v12 == 43 || v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }
  else
  {
    int v15 = v12;
  }
  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48) {
      int v17 = 8;
    }
    else {
      int v17 = 10;
    }
    if (!a3) {
      a3 = v17;
    }
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    int v15 = 48;
    if (!a3) {
      a3 = 8;
    }
LABEL_35:
    if ((a3 - 37) >= 0xFFFFFFDD) {
      goto LABEL_37;
    }
    unint64_t v18 = 0;
    goto LABEL_57;
  }
  int v15 = v11[1];
  v11 += 2;
  a3 = 16;
LABEL_37:
  unint64_t v18 = 0;
  int v19 = 0;
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / a3;
  while (1)
  {
    int v21 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19) {
          break;
        }
        int v21 = v15 - 87;
      }
      else
      {
        int v21 = v15 - 55;
      }
    }
    if (v21 >= a3) {
      break;
    }
    int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > ~((int)v20 * a3))
      {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL / a3;
      }
      else
      {
        unint64_t v18 = v18 * a3 + v21;
        int v22 = 1;
      }
    }
    int v23 = *v11++;
    int v15 = v23;
    int v19 = v22;
  }
  if (v19 < 0)
  {
    uint64_t v27 = __error();
    int v24 = 0;
    int *v27 = 34;
    unint64_t v18 = -1;
    if (!a2) {
      return v18;
    }
    goto LABEL_58;
  }
  if (!v19)
  {
LABEL_57:
    *__error() = 22;
    int v24 = 1;
    if (!a2) {
      return v18;
    }
    goto LABEL_58;
  }
  int v24 = 0;
  if (v12 == 45) {
    unint64_t v18 = -(uint64_t)v18;
  }
  if (a2)
  {
LABEL_58:
    if (v24) {
      int v25 = (__int32 *)a1;
    }
    else {
      int v25 = (__int32 *)(v11 - 1);
    }
    *a2 = v25;
  }
  return v18;
}

unint64_t wcstoull(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoull_l(a1, a2, a3, v5);
}

uintmax_t wcstoumax_l(const __int32 *nptr, __int32 **endptr, int base, locale_t a4)
{
  locale_t v7 = (char *)&__global_locale;
  if (a4 == (locale_t)-1) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)__c_locale;
  }
  if (v9 != (_xlocale *)-1) {
    locale_t v7 = (char *)v9;
  }
  if (v9) {
    size_t v10 = v7;
  }
  else {
    size_t v10 = __c_locale;
  }
  size_t v11 = nptr;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }
      if (v12 < 0x100) {
        break;
      }
      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120) + 4 * v12);
LABEL_19:
    ;
  }
  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if (v12 == 43 || v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }
  else
  {
    int v15 = v12;
  }
  if ((base & 0xFFFFFFEF) != 0 || v15 != 48)
  {
    if (v15 == 48) {
      int v17 = 8;
    }
    else {
      int v17 = 10;
    }
    if (!base) {
      base = v17;
    }
    goto LABEL_35;
  }
  if ((*v11 | 0x20) != 0x78)
  {
    int v15 = 48;
    if (!base) {
      base = 8;
    }
LABEL_35:
    if ((base - 37) >= 0xFFFFFFDD) {
      goto LABEL_37;
    }
    uintmax_t v18 = 0;
    goto LABEL_57;
  }
  int v15 = v11[1];
  v11 += 2;
  base = 16;
LABEL_37:
  uintmax_t v18 = 0;
  int v19 = 0;
  unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / base;
  while (1)
  {
    int v21 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        if ((v15 - 97) > 0x19) {
          break;
        }
        int v21 = v15 - 87;
      }
      else
      {
        int v21 = v15 - 55;
      }
    }
    if (v21 >= base) {
      break;
    }
    int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > ~((int)v20 * base))
      {
        uintmax_t v18 = 0xFFFFFFFFFFFFFFFFLL / base;
      }
      else
      {
        uintmax_t v18 = v18 * base + v21;
        int v22 = 1;
      }
    }
    int v23 = *v11++;
    int v15 = v23;
    int v19 = v22;
  }
  if (v19 < 0)
  {
    uint64_t v27 = __error();
    int v24 = 0;
    int *v27 = 34;
    uintmax_t v18 = -1;
    if (!endptr) {
      return v18;
    }
    goto LABEL_58;
  }
  if (!v19)
  {
LABEL_57:
    *__error() = 22;
    int v24 = 1;
    if (!endptr) {
      return v18;
    }
    goto LABEL_58;
  }
  int v24 = 0;
  if (v12 == 45) {
    uintmax_t v18 = -(uint64_t)v18;
  }
  if (endptr)
  {
LABEL_58:
    if (v24) {
      int v25 = (__int32 *)nptr;
    }
    else {
      int v25 = (__int32 *)(v11 - 1);
    }
    *endptunsigned int r = v25;
  }
  return v18;
}

uintmax_t wcstoumax(const __int32 *__nptr, __int32 **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoumax_l(__nptr, __endptr, __base, v5);
}

int wctob_l(int result, locale_t a2)
{
  memset(v5, 0, sizeof(v5));
  if (result != -1)
  {
    locale_t v2 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1) {
      locale_t v2 = a2;
    }
    if (a2) {
      locale_t v3 = v2;
    }
    else {
      locale_t v3 = (locale_t)&__c_locale;
    }
    if ((*(uint64_t (**)(unsigned char *, void, _OWORD *))(*((void *)v3 + 166) + 96))(v4, *(void *)&result, v5) == 1)return v4[0]; {
    else
    }
      return -1;
  }
  return result;
}

int wctob(wint_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return wctob_l(a1, v3);
}

int wctomb_l(char *a1, __int32 a2, locale_t a3)
{
  locale_t v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v3 = a3;
  }
  if (a3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (locale_t)&__c_locale;
  }
  if (a1)
  {
    LODWORD(a1) = (*(uint64_t (**)(char *, void, uint64_t))(*((void *)v4 + 166) + 96))(a1, *(void *)&a2, (uint64_t)v4 + 1168);
  }
  else
  {
    *((_OWORD *)v4 + 80) = 0u;
    *((_OWORD *)v4 + 79) = 0u;
    *((_OWORD *)v4 + 78) = 0u;
    *((_OWORD *)v4 + 77) = 0u;
    *((_OWORD *)v4 + 76) = 0u;
    *((_OWORD *)v4 + 75) = 0u;
    *((_OWORD *)v4 + 74) = 0u;
    *((_OWORD *)v4 + 73) = 0u;
  }
  return (int)a1;
}

int wctomb(char *a1, __int32 a2)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    locale_t v3 = &__global_locale;
  }
  if (v3 == (void *)-1) {
    locale_t v4 = &__global_locale;
  }
  else {
    locale_t v4 = v3;
  }
  if (a1)
  {
    LODWORD(a1) = (*(uint64_t (**)(char *, void, void *))(v4[166] + 96))(a1, *(void *)&a2, v4 + 146);
  }
  else
  {
    *((_OWORD *)v4 + 80) = 0u;
    *((_OWORD *)v4 + 79) = 0u;
    *((_OWORD *)v4 + 78) = 0u;
    *((_OWORD *)v4 + 77) = 0u;
    *((_OWORD *)v4 + 76) = 0u;
    *((_OWORD *)v4 + 75) = 0u;
    *((_OWORD *)v4 + 74) = 0u;
    *((_OWORD *)v4 + 73) = 0u;
  }
  return (int)a1;
}

wint_t towctrans_l(wint_t a1, wctrans_t a2, locale_t a3)
{
  wint_t v4 = a1;
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v5 = a3;
  }
  if (a3) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = (_xlocale *)__c_locale;
  }
  if (a2 == 2)
  {
    if (a1 <= 0x7F) {
      return _DefaultRuneLocale.__mapupper[a1];
    }
    return ___toupper_l(a1, v6);
  }
  else
  {
    if (a2 != 1)
    {
      *__error() = 22;
      return v4;
    }
    if (a1 <= 0x7F) {
      return _DefaultRuneLocale.__maplower[a1];
    }
    return ___tolower_l(a1, v6);
  }
}

wint_t towctrans(wint_t a1, wctrans_t a2)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    wint_t v4 = v3;
  }
  else {
    wint_t v4 = (_xlocale *)&__global_locale;
  }
  return towctrans_l(a1, a2, v4);
}

wctrans_t wctrans(const char *a1)
{
  uint64_t v4 = 0;
  locale_t v5 = "tolower";
  size_t v6 = &off_1E543EB30;
  do
  {
    if (!j__strncasecmp_l(v5, a1, v1, v2)) {
      break;
    }
    ++v4;
    locale_t v7 = *v6;
    v6 += 2;
    locale_t v5 = v7;
  }
  while (v4 != 2);
  wctrans_t v8 = (wctrans_t)(&off_1E543EB20)[2 * v4 + 1];
  if (!v8) {
    *__error() = 22;
  }
  return v8;
}

wctype_t wctype_l(const char *a1, locale_t a2)
{
  uint64_t v6 = 0;
  locale_t v7 = "alnum";
  do
  {
    if (!j__strncasecmp_l(v7, a1, v2, v3)) {
      return (wctype_t)(&wctype_l_props)[v6 + 1];
    }
    locale_t v7 = (&wctype_l_props)[v6 + 2];
    v6 += 2;
  }
  while (v6 != 32);
  locale_t v9 = (locale_t)&__c_locale;
  locale_t v10 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v10 = a2;
  }
  if (a2) {
    locale_t v9 = v10;
  }
  uint64_t v11 = *(void *)(*((void *)v9 + 166) + 120);
  int v12 = *(_DWORD *)(v11 + 3196);
  if (v12 < 1) {
    return 0;
  }
  uint64_t v13 = *(void *)(v11 + 3200);
  int v14 = v12 + 1;
  while (j__strsvisx((char *)v13, a1, 0xEuLL, (int)v3, v8))
  {
    v13 += 20;
    if (--v14 < 2) {
      return 0;
    }
  }
  return *(_DWORD *)(v13 + 16);
}

wctype_t wctype(const char *a1)
{
  uint64_t v1 = __locale_key;
  size_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return wctype_l(a1, v3);
}

int wcwidth(int result)
{
  uint64_t v1 = __locale_key;
  size_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  locale_t v3 = (_xlocale *)&__global_locale;
  if (v2) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  if (result)
  {
    if (result < 0x100)
    {
      if (v4 != (_xlocale *)-1) {
        locale_t v3 = v4;
      }
      unsigned int v5 = *(_DWORD *)(*(void *)(*((void *)v3 + 166) + 120) + 4 * result + 60);
    }
    else
    {
      unsigned int v5 = ___runetype_l(result, v4);
    }
    if (v5 >> 29)
    {
      return v5 >> 30;
    }
    else if ((v5 & 0x40000) != 0)
    {
      return 1;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

int wcwidth_l(int result, locale_t a2)
{
  size_t v2 = __c_locale;
  locale_t v3 = (char *)&__global_locale;
  if (a2 == (locale_t)-1) {
    locale_t v4 = (locale_t)&__global_locale;
  }
  else {
    locale_t v4 = a2;
  }
  if (a2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (_xlocale *)__c_locale;
  }
  if (result)
  {
    if (result < 0x100)
    {
      if (v5 != (_xlocale *)-1) {
        locale_t v3 = (char *)v5;
      }
      if (v5) {
        size_t v2 = v3;
      }
      unsigned int v6 = *(_DWORD *)(*(void *)(*((void *)v2 + 166) + 120) + 4 * result + 60);
    }
    else
    {
      unsigned int v6 = ___runetype_l(result, v5);
    }
    if (v6 >> 29)
    {
      return v6 >> 30;
    }
    else if ((v6 & 0x40000) != 0)
    {
      return 1;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

char *__cdecl addr2ascii(int a1, const void *a2, int a3, char *a4)
{
  locale_t v4 = a4;
  if (a4
    || (locale_t v4 = (char *)addr2ascii_staticbuf) != 0
    || (locale_t v4 = (char *)malloc_type_malloc(0x40uLL, 0x4FC188A6uLL), (addr2ascii_staticbuf = (uint64_t)v4) != 0))
  {
    if (a1 == 18)
    {
      if (a3 == 20)
      {
        locale_t v9 = link_ntoa((const sockaddr_dl *)a2);
        goto LABEL_10;
      }
    }
    else
    {
      if (a1 != 2)
      {
        uint64_t v11 = __error();
        locale_t v4 = 0;
        int v12 = 43;
LABEL_13:
        *uint64_t v11 = v12;
        return v4;
      }
      if (a3 == 4)
      {
        v8.s_addunsigned int r = *(_DWORD *)a2;
        locale_t v9 = inet_ntoa(v8);
LABEL_10:
        j__strnstr(v4, v9, v10);
        return v4;
      }
    }
    uint64_t v11 = __error();
    locale_t v4 = 0;
    int v12 = 63;
    goto LABEL_13;
  }
  return v4;
}

int ascii2addr(int a1, const char *a2, void *a3)
{
  if (a1 == 18)
  {
    link_addr(a2, (sockaddr_dl *)a3);
    return 20;
  }
  else
  {
    if (a1 == 2)
    {
      __s1[0] = 0;
      strncat(__s1, a2, 0xFuLL);
      if (inet_aton(__s1, (in_addr *)a3)) {
        return 4;
      }
      unsigned int v5 = __error();
      int v6 = 22;
    }
    else
    {
      unsigned int v5 = __error();
      int v6 = 43;
    }
    *unsigned int v5 = v6;
    return -1;
  }
}

in_addr_t inet_addr(const char *a1)
{
  in_addr_t v2 = 0;
  if (_inet_aton_check((unsigned __int8 *)a1, &v2, 0)) {
    return v2;
  }
  else {
    return -1;
  }
}

FILE *__cdecl open_memstream(char **__bufp, size_t *__sizep)
{
  if (__bufp && __sizep)
  {
    locale_t v4 = (char *)malloc_type_calloc(1uLL, 1uLL, 0x81DA3B52uLL);
    *__bufp = v4;
    if (v4)
    {
      unsigned int v5 = malloc_type_malloc(0x20uLL, 0x10900405C4C9827uLL);
      if (v5)
      {
        int v6 = v5;
        *unsigned int v5 = __bufp;
        v5[1] = __sizep;
        void v5[2] = 0;
        v5[3] = 0;
        memstream_update((uint64_t)v5);
        locale_t v7 = funopen(v6, 0, (int (__cdecl *)(void *, const char *, int))memstream_write, (fpos_t (__cdecl *)(void *, fpos_t, int))memstream_seek, (int (__cdecl *)(void *))memstream_close);
        in_addr v8 = v7;
        if (v7)
        {
          fwide(v7, -1);
        }
        else
        {
          int v10 = *__error();
          free(v6);
          free(*__bufp);
          *__bufp = 0;
          *__error() = v10;
        }
      }
      else
      {
        int v9 = *__error();
        free(*__bufp);
        *__bufp = 0;
        in_addr v8 = 0;
        *__error() = v9;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    in_addr v8 = 0;
    *__error() = 22;
  }
  return v8;
}

uint64_t memstream_update(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if ((v1 & 0x8000000000000000) != 0 || (unint64_t v2 = *(void *)(result + 24), (v2 & 0x8000000000000000) != 0)) {
    memstream_update_cold_1();
  }
  if (v1 >= v2) {
    unint64_t v1 = *(void *)(result + 24);
  }
  **(void **)(result + 8) = v1;
  return result;
}

uint64_t memstream_write(uint64_t a1, char *path, int a3)
{
  LODWORD(v3) = a3;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  int64_t v8 = v6 + a3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFELL) {
    int64_t v8 = 0x7FFFFFFFFFFFFFFELL;
  }
  if (v8 > v7)
  {
    uint64_t v9 = 15 * v7 / 10;
    if ((unsigned __int128)(v7 * (__int128)15) >> 64 != (15 * v7) >> 63) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFELL;
    }
    if (v9 <= v8) {
      int64_t v7 = v8;
    }
    else {
      int64_t v7 = v9;
    }
    int v10 = (char *)malloc_type_realloc(**(void ***)a1, v7 + 1, 0xFDA2F0F9uLL);
    if (!v10) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = v10;
    MEMORY[0x18C122530](&v10[*(void *)(a1 + 16) + 1], v7 - *(void *)(a1 + 16));
    **(void **)a1 = v11;
    *(void *)(a1 + 16) = v7;
    uint64_t v6 = *(void *)(a1 + 24);
  }
  if (v7 - v6 >= (int)v3) {
    uint64_t v3 = (int)v3;
  }
  else {
    uint64_t v3 = v7 - v6;
  }
  j__mkdtempat_np(**(void **)a1 + v6, path);
  *(void *)(a1 + 24) += v3;
  memstream_update(a1);
  return v3;
}

uint64_t memstream_seek(uint64_t a1, int64_t a2, int a3)
{
  switch(a3)
  {
    case 2:
      uint64_t v4 = *(void *)(a1 + 16);
      if (a2 < 0)
      {
        a2 += v4;
        if (a2 < 0)
        {
          unsigned int v5 = __error();
          int v6 = 22;
          goto LABEL_13;
        }
      }
      else
      {
        if ((v4 ^ 0x7FFFFFFFFFFFFFFFuLL) < a2)
        {
          unsigned int v5 = __error();
          int v6 = 84;
LABEL_13:
          *unsigned int v5 = v6;
          return -1;
        }
        a2 += v4;
      }
LABEL_15:
      *(void *)(a1 + 24) = a2;
      break;
    case 1:
      if (a2) {
        memstream_seek_cold_2();
      }
      break;
    case 0:
      if (a2 < 0) {
        memstream_seek_cold_1();
      }
      goto LABEL_15;
  }
  memstream_update(a1);
  return *(void *)(a1 + 24);
}

uint64_t memstream_close(void *a1)
{
  return 0;
}

in_addr_t inet_lnaof(in_addr a1)
{
  int v1 = bswap32(a1.s_addr);
  if (v1 >> 30 == 2) {
    int v2 = 0xFFFF;
  }
  else {
    int v2 = 255;
  }
  if (v1 >= 0) {
    int v2 = 0xFFFFFF;
  }
  return v1 & v2;
}

in_addr inet_makeaddr(in_addr_t a1, in_addr_t a2)
{
  if (HIBYTE(a1)) {
    in_addr_t v2 = a2 | a1;
  }
  else {
    in_addr_t v2 = a2 | (a1 << 8);
  }
  if (HIWORD(a1)) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = (unsigned __int16)a2 | ((unsigned __int16)a1 << 16);
  }
  in_addr_t v4 = a2 & 0xFFFFFF | (a1 << 24);
  if (a1 <= 0x7F) {
    unsigned int v3 = v4;
  }
  return (in_addr)bswap32(v3);
}

char *__cdecl inet_net_ntop(int a1, const void *a2, int a3, char *a4, __darwin_size_t a5)
{
  __darwin_size_t v5 = a5;
  int v6 = a4;
  int64_t v8 = (unsigned __int8 *)a2;
  if (a1 == 30)
  {
    if (a3 >= 0x81) {
      goto LABEL_8;
    }
    if (!a3)
    {
      strcpy(__little, "::");
      size_t v30 = &__little[2];
      goto LABEL_88;
    }
    unsigned int v12 = a3 + 7;
    uint64_t v13 = (a3 + 7) >> 3;
    j__mkdtempat_np((int)v54, (char *)a2);
    MEMORY[0x18C122530](&v54[v13], 16 - (v12 >> 3));
    if ((a3 & 7) != 0) {
      v54[(v13 - 1)] &= -1 << (8 - (a3 & 7));
    }
    int v14 = 0;
    unint64_t v15 = 0;
    int v16 = 0;
    signed int v17 = 0;
    int v18 = 0;
    signed int v19 = 0;
    unsigned int v20 = (a3 + 15) >> 4;
    if (v20 == 1) {
      unsigned int v20 = 2;
    }
    do
    {
      if (v18 < v16) {
        signed int v21 = v17;
      }
      else {
        signed int v21 = v19;
      }
      if (v18 < v16) {
        int v22 = v16;
      }
      else {
        int v22 = v18;
      }
      if (v18 < v16) {
        int v23 = 0;
      }
      else {
        int v23 = v16;
      }
      if (v16)
      {
        signed int v24 = v17;
      }
      else
      {
        signed int v21 = v19;
        int v22 = v18;
        int v23 = 0;
        signed int v24 = v14;
      }
      if (v54[v15 + 1] | v54[v15])
      {
        signed int v19 = v21;
        int v18 = v22;
        int v16 = v23;
      }
      else
      {
        signed int v17 = v24;
        ++v16;
      }
      v15 += 2;
      ++v14;
    }
    while (v15 < 2 * v20);
    char v25 = 0;
    BOOL v26 = v16 != 0;
    BOOL v27 = v18 < v16;
    if (v26 && v27) {
      signed int v28 = v17;
    }
    else {
      signed int v28 = v19;
    }
    if (v26 && v27) {
      int v29 = v16;
    }
    else {
      int v29 = v18;
    }
    if (v29 == v20 || v28) {
      goto LABEL_65;
    }
    if (v29 == 7)
    {
      char v25 = 0;
      if (!v54[14] || v54[15] == 1) {
        goto LABEL_65;
      }
    }
    else if (v29 != 6)
    {
      if (v29 != 5)
      {
        char v25 = 0;
        goto LABEL_65;
      }
      char v25 = 0;
      if (v54[10] != 255 || v54[11] != 255)
      {
LABEL_65:
        signed int v38 = 0;
        int v39 = -v20;
        size_t v30 = __little;
        size_t v40 = v54;
        char v41 = v25 ^ 1;
        do
        {
          if (v29 && v38 >= v28 && v38 < v28 + v29)
          {
            if (v28 == v38) {
              *v30++ = 58;
            }
            if (v39 + v38 == -1) {
              *v30++ = 58;
            }
            size_t v42 = v40 + 2;
          }
          else
          {
            if (v38 < 6) {
              char v43 = 1;
            }
            else {
              char v43 = v41;
            }
            if (v43)
            {
              char v45 = __little;
              if (v30 != __little)
              {
                *size_t v30 = 58;
                char v45 = v30 + 1;
              }
              size_t v30 = &v45[sprintf(v45, "%x", __rev16(*(unsigned __int16 *)v40))];
              size_t v42 = v40 + 2;
            }
            else
            {
              if (v38 == 6) {
                char v44 = 58;
              }
              else {
                char v44 = 46;
              }
              *size_t v30 = v44;
              size_t v42 = v40 + 1;
              v30 += sprintf(v30 + 1, "%u", *v40) + 1;
              if (a3 > 120 || v38 != 7)
              {
                *size_t v30 = 46;
                size_t v42 = v40 + 2;
                v30 += sprintf(v30 + 1, "%u", v40[1]) + 1;
              }
            }
          }
          ++v38;
          size_t v40 = v42;
        }
        while (v39 + v38);
LABEL_88:
        sprintf(v30, "/%u", a3);
        if (j__strsignal_r((int)__little, v46, v47) + 1 <= a5)
        {
          int v6 = a4;
          j__strnstr(a4, __little, v48);
          return v6;
        }
        goto LABEL_89;
      }
    }
    char v25 = 1;
    goto LABEL_65;
  }
  if (a1 != 2)
  {
    int v10 = __error();
    int v6 = 0;
    int v11 = 47;
    goto LABEL_90;
  }
  if (a3 >= 0x21)
  {
LABEL_8:
    int v10 = __error();
    int v6 = 0;
    int v11 = 22;
LABEL_90:
    int *v10 = v11;
    return v6;
  }
  if (!a3)
  {
    if (a5 >= 2)
    {
      *(_WORD *)a4 = 48;
      uint64_t v9 = a4 + 1;
      __darwin_size_t v5 = a5 - 1;
      goto LABEL_59;
    }
    goto LABEL_89;
  }
  if (a3 >= 8)
  {
    if (a5 < 6) {
      goto LABEL_89;
    }
    signed int v31 = a3 >> 3;
    int64_t v8 = (unsigned __int8 *)a2 + 1;
    long long v32 = a4;
    while (1)
    {
      int v33 = sprintf(v32, "%u", *(v8 - 1));
      uint64_t v9 = &v32[v33];
      if (v31 < 2) {
        break;
      }
      *(_WORD *)uint64_t v9 = 46;
      long long v34 = v9 + 1;
      __darwin_size_t v5 = &v32[v5] - v34;
      --v31;
      ++v8;
      long long v32 = v34;
      if (v5 < 6) {
        goto LABEL_89;
      }
    }
    v5 -= v33;
  }
  else
  {
    uint64_t v9 = a4;
  }
  if ((a3 & 7) == 0) {
    goto LABEL_59;
  }
  if (v5 < 6)
  {
LABEL_89:
    int v10 = __error();
    int v6 = 0;
    int v11 = 40;
    goto LABEL_90;
  }
  long long v35 = v6;
  if (v9 != v6)
  {
    *uint64_t v9 = 46;
    long long v35 = v9 + 1;
  }
  int v36 = sprintf(v35, "%u", (~(-1 << (a3 & 7)) << (8 - (a3 & 7))) & *v8);
  long long v37 = &v9[v5];
  uint64_t v9 = &v35[v36];
  __darwin_size_t v5 = v37 - v9;
LABEL_59:
  if (v5 < 5) {
    goto LABEL_89;
  }
  sprintf(v9, "/%u", a3);
  return v6;
}

int inet_net_pton(int a1, const char *a2, void *a3, __darwin_size_t a4)
{
  __darwin_size_t v4 = a4;
  int v6 = a2;
  if (a1 != 30)
  {
    if (a1 != 2)
    {
      int v16 = __error();
      int v17 = 47;
      goto LABEL_84;
    }
    int64_t v8 = a2 + 1;
    unint64_t v7 = *a2;
    if (v7 != 48
      || (*(unsigned __int8 *)v8 | 0x20) != 0x78
      || v6[2] < 0
      || (_DefaultRuneLocale.__runetype[*((unsigned __int8 *)v6 + 2)] & 0x10000) == 0)
    {
      int v9 = 2;
      if ((v7 & 0x80000000) != 0 || (v7 - 48) > 9) {
        goto LABEL_151;
      }
      int v10 = a3;
LABEL_10:
      int v11 = 0;
      while (1)
      {
        unsigned int v12 = j__mkdirx_np("0123456789", (filesec_t)v7) - "0123456789";
        if (v12 >= 0xA) {
          inet_net_pton_cold_1();
        }
        int v11 = v12 + 10 * v11;
        if (v11 > 255) {
          goto LABEL_150;
        }
        int v13 = *v8++;
        unint64_t v7 = v13;
        if (v13 < 1 || (v7 - 48) >= 0xA)
        {
          if (!v4) {
            goto LABEL_154;
          }
          --v4;
          *v10++ = v11;
          if (v7 == 46)
          {
            unsigned int v14 = *v8++;
            unint64_t v7 = v14;
            int v9 = 2;
            if ((v14 & 0x80000000) == 0 && (v7 - 48) < 0xA) {
              goto LABEL_10;
            }
            goto LABEL_151;
          }
          if ((_BYTE)v7 && v7 != 47) {
            goto LABEL_150;
          }
          goto LABEL_92;
        }
      }
    }
    if (a4)
    {
      if (!v6[2]) {
        goto LABEL_150;
      }
      int v31 = 0;
      int v32 = 0;
      unint64_t v7 = *((unsigned __int8 *)v6 + 2);
      int64_t v8 = v6 + 3;
      int v10 = a3;
      do
      {
        __uint32_t v33 = _DefaultRuneLocale.__runetype[v7];
        if ((v33 & 0x10000) == 0) {
          break;
        }
        if ((v33 & 0x8000) != 0) {
          unint64_t v7 = _DefaultRuneLocale.__maplower[v7];
        }
        unsigned int v34 = j__mkdirx_np("0123456789abcdef", (filesec_t)v7) - "0123456789abcdef";
        if (v34 >= 0x10) {
          inet_net_pton_cold_3();
        }
        int v35 = 16 * v32;
        if (!v31) {
          int v35 = 0;
        }
        int v32 = v34 | v35;
        if (v31 == 1)
        {
          if (!v4) {
            goto LABEL_154;
          }
          int v31 = 0;
          --v4;
          *v10++ = v32;
        }
        else
        {
          int v31 = 1;
        }
        int v36 = *v8++;
        unint64_t v7 = v36;
      }
      while (v36 > 0);
      if (!v31)
      {
LABEL_92:
        if (v7)
        {
          if (v7 == 47 && (*v8 & 0x80000000) == 0)
          {
            unint64_t v49 = *(unsigned __int8 *)v8;
            if ((v49 - 48) <= 9 && v10 > a3)
            {
              int v37 = 0;
              char v51 = (char *)(v8 + 1);
              while (1)
              {
                unsigned int v52 = j__mkdirx_np("0123456789", (filesec_t)v49) - "0123456789";
                if (v52 >= 0xA) {
                  inet_net_pton_cold_2();
                }
                int v37 = v52 + 10 * v37;
                if (v37 > 32) {
                  break;
                }
                int v53 = *v51++;
                unint64_t v49 = v53;
                if (v53 < 1 || (v49 - 48) >= 0xA)
                {
                  int v9 = 2;
                  if (v49 || v10 == a3) {
                    goto LABEL_151;
                  }
                  if (v37 == -1) {
                    goto LABEL_128;
                  }
                  uint64_t v54 = 8 * (v10 - (unsigned char *)a3);
                  goto LABEL_146;
                }
              }
            }
          }
          goto LABEL_150;
        }
        if (v10 != a3)
        {
LABEL_128:
          unsigned int v63 = *(unsigned __int8 *)a3;
          if ((v63 & 0x80u) == 0) {
            int v64 = 8;
          }
          else {
            int v64 = 16;
          }
          if (v63 <= 0xBF) {
            unsigned int v65 = v64;
          }
          else {
            unsigned int v65 = 24;
          }
          if (v63 > 0xDF) {
            unsigned int v65 = 8;
          }
          if (v63 > 0xEF) {
            unsigned int v65 = 32;
          }
          uint64_t v54 = 8 * (v10 - (unsigned char *)a3);
          if (v54 > v65) {
            unsigned int v65 = 8 * (v10 - a3);
          }
          if (v63 == 224) {
            int v66 = 4;
          }
          else {
            int v66 = 8;
          }
          if (v65 == 8) {
            int v37 = v66;
          }
          else {
            int v37 = v65;
          }
LABEL_146:
          if (v54 >= v37) {
            return v37;
          }
          while (v4)
          {
            --v4;
            *v10++ = 0;
            if (v37 <= 8 * (v10 - (unsigned char *)a3)) {
              return v37;
            }
          }
          goto LABEL_154;
        }
LABEL_150:
        int v9 = 2;
LABEL_151:
        *__error() = v9;
        return -1;
      }
      if (v4)
      {
        --v4;
        *v10++ = 16 * v32;
        goto LABEL_92;
      }
    }
LABEL_154:
    int v9 = 40;
    goto LABEL_151;
  }
  int dfd = (int)a3;
  *(void *)path = 0;
  uint64_t v74 = 0;
  int v15 = *(unsigned __int8 *)a2;
  if (v15 == 58)
  {
    int v6 = a2 + 1;
    if (a2[1] != 58) {
      goto LABEL_83;
    }
    int v72 = -1;
  }
  else
  {
    int v72 = -1;
    if (!v15)
    {
      signed int v28 = 0;
      int v29 = path;
      int v30 = 1;
      goto LABEL_67;
    }
  }
  int v18 = 0;
  unsigned int v19 = 0;
  int v20 = 0;
  int v70 = 0;
  mbstate_t v71 = v6;
  uint64_t v21 = 0;
  int v22 = v6 + 1;
  int v23 = path;
  while (1)
  {
    signed int v24 = (_filesec *)(char)v15;
    uint64_t v25 = j__mkdirx_np("0123456789abcdef", v24);
    if (!v25) {
      break;
    }
    BOOL v26 = "0123456789abcdef";
LABEL_30:
    if (v18 > 3) {
      goto LABEL_83;
    }
    unsigned int v19 = (v25 - v26) | (16 * v19);
    ++v18;
    int v20 = 1;
LABEL_32:
    int v23 = &path[v21];
    int v27 = *(unsigned __int8 *)v22++;
    LOBYTE(v15) = v27;
    if (!v27) {
      goto LABEL_62;
    }
  }
  uint64_t v25 = j__mkdirx_np("0123456789ABCDEF", v24);
  if (v25)
  {
    LODWORD(v26) = "0123456789ABCDEF";
    goto LABEL_30;
  }
  if (v24 == 58)
  {
    if (v20)
    {
      if (!*v22) {
        goto LABEL_83;
      }
      if (v21 > 14) {
        return 0;
      }
      int v20 = 0;
      int v18 = 0;
      *(_WORD *)&path[v21] = bswap32(v19) >> 16;
      v21 += 2;
      mbstate_t v71 = v22;
      unsigned int v19 = 0;
    }
    else
    {
      if (v70) {
        goto LABEL_83;
      }
      int v20 = 0;
      int v70 = v23;
      mbstate_t v71 = v22;
    }
    goto LABEL_32;
  }
  if (v24 == 46)
  {
    if (v21 > 12) {
      goto LABEL_83;
    }
    uint64_t v55 = v21 + 4;
    long long v56 = v23;
LABEL_111:
    uint64_t v57 = 0;
    unsigned int v58 = 0;
    int v59 = v71;
    while (1)
    {
      int v60 = v71[v57];
      if (!v71[v57]) {
        break;
      }
      uint64_t v61 = j__mkdirx_np("0123456789", (filesec_t)v71[v57]);
      if (!v61)
      {
        if ((v60 & 0xFFFFFFFE) != 0x2E || v56 - v23 > 3) {
          goto LABEL_83;
        }
        v71 += v57 + 1;
        *v56++ = v58;
        if (v60 != 47) {
          goto LABEL_111;
        }
        if ((int)getbits((uint64_t)&v59[v57 + 1], &v72) <= 0)
        {
LABEL_83:
          int v16 = __error();
          int v17 = 2;
          goto LABEL_84;
        }
LABEL_159:
        int v30 = 0;
        int v29 = &path[v55];
        goto LABEL_66;
      }
      if (!v57 || v58)
      {
        unsigned int v58 = v61 - "0123456789" + 10 * v58;
        ++v57;
        if (v58 < 0x100) {
          continue;
        }
      }
      goto LABEL_83;
    }
    if (!v57 || v56 - v23 > 3) {
      goto LABEL_83;
    }
    *long long v56 = v58;
    goto LABEL_159;
  }
  if (v24 != 47 || (int)getbits((uint64_t)v22, &v72) <= 0) {
    goto LABEL_83;
  }
LABEL_62:
  int v29 = &path[v21];
  if (v20)
  {
    if (v21 > 14) {
      goto LABEL_83;
    }
    *(_WORD *)int v29 = bswap32(v19) >> 16;
    v29 += 2;
  }
  int v30 = 1;
LABEL_66:
  signed int v28 = v70;
LABEL_67:
  if (v72 == -1) {
    int v37 = 128;
  }
  else {
    int v37 = v72;
  }
  int v72 = v37;
  int v38 = v37 + 15;
  if (v37 < -15) {
    int v38 = v37 + 30;
  }
  int v39 = v38 >> 4;
  if (v39 <= 2) {
    int v39 = 2;
  }
  uint64_t v40 = (2 * v39);
  BOOL v41 = v30 == 0;
  uint64_t v42 = 16;
  if (!v41) {
    uint64_t v42 = v40;
  }
  char v43 = &path[v42];
  if (v28)
  {
    if (v29 == v43) {
      goto LABEL_83;
    }
    int v44 = v29 - v28;
    if ((int)v29 - (int)v28 >= 1)
    {
      uint64_t v45 = (v44 + 1) - 1;
      size_t v46 = &path[v42 - 1];
      size_t v47 = &v28[v44 - 1];
      do
      {
        *v46-- = *v47;
        *v47-- = 0;
        --v45;
      }
      while (v45);
      int v37 = v72;
    }
  }
  else if (v29 != v43)
  {
    goto LABEL_83;
  }
  int v48 = v37 + 7;
  if (v37 < -7) {
    int v48 = v37 + 14;
  }
  if ((uint64_t)v48 >> 3 <= a4)
  {
    j__mkdtempat_np(dfd, path);
  }
  else
  {
    int v16 = __error();
    int v17 = 40;
LABEL_84:
    *int v16 = v17;
    return -1;
  }
  return v37;
}

uint64_t getbits(uint64_t a1, int *a2)
{
  uint64_t v4 = 0;
  int v5 = 0;
  while (*(unsigned char *)(a1 + v4))
  {
    uint64_t result = j__mkdirx_np("0123456789", (filesec_t)*(char *)(a1 + v4));
    if (!result) {
      return result;
    }
    if (!v4 || v5)
    {
      int v5 = result - "0123456789" + 10 * v5;
      ++v4;
      if (v5 < 129) {
        continue;
      }
    }
    return 0;
  }
  if (v4)
  {
    *a2 = v5;
    return 1;
  }
  return 0;
}

char *__cdecl inet_neta(in_addr_t a1, char *a2, __darwin_size_t a3)
{
  uint64_t v4 = a2;
  if (!a1) {
    goto LABEL_10;
  }
  in_addr_t v5 = a1;
  int v6 = a2;
  do
  {
    unsigned int v8 = v5;
    int v7 = (unint64_t)v5 >> 24;
    v5 <<= 8;
    if (!is_mul_ok(0x100u, v8))
    {
      if (a3 < 5) {
        goto LABEL_11;
      }
      int v9 = &v6[sprintf(v6, "%u", v7)];
      if (v5) {
        *(_WORD *)v9++ = 46;
      }
      a3 = &v6[a3] - v9;
      int v6 = v9;
    }
  }
  while (v5);
  if (v6 == v4)
  {
LABEL_10:
    if (a3 >= 8)
    {
      *(void *)uint64_t v4 = 0x302E302E302E30;
    }
    else
    {
LABEL_11:
      uint64_t v4 = 0;
      *__error() = 40;
    }
  }
  return v4;
}

in_addr_t inet_netof(in_addr a1)
{
  int v1 = bswap32(a1.s_addr);
  if (v1 >> 30 == 2) {
    char v2 = 16;
  }
  else {
    char v2 = 8;
  }
  if (v1 >= 0) {
    char v2 = 24;
  }
  return v1 >> v2;
}

in_addr_t inet_network(const char *a1)
{
  unint64_t v1 = 0;
  uint64_t v2 = __locale_key;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    uint64_t v4 = a1 + 1;
    int v5 = *(unsigned __int8 *)a1;
    BOOL v6 = v5 == 48;
    if (v5 == 48)
    {
      int v7 = 8;
    }
    else
    {
      uint64_t v4 = a1;
      int v7 = 10;
    }
    int v8 = *(unsigned __int8 *)v4;
    if ((v8 | 0x20) == 0x78)
    {
      int v9 = *(unsigned __int8 *)++v4;
      int v8 = v9;
      int v7 = 16;
    }
    unsigned int v10 = 0;
    if (v8)
    {
      while (1)
      {
        int v11 = (char)v8;
        if (v8 - 48 > 9)
        {
          if (v7 != 16) {
            break;
          }
          __uint32_t v12 = _DefaultRuneLocale.__runetype[v8];
          if ((v12 & 0x10000) == 0) {
            break;
          }
          if ((v8 & 0x80) != 0)
          {
            int v13 = *(void **)(StatusReg + 8 * v2);
            if (!v13) {
              int v13 = &__global_locale;
            }
            __uint32_t v12 = *(_DWORD *)(*(void *)(v13[166] + 120) + 4 * v8 + 60);
          }
          int v14 = 16 * v10;
          if ((v12 & 0x1000) != 0) {
            int v15 = -97;
          }
          else {
            int v15 = -65;
          }
          unsigned int v10 = (v14 | 0xA) + v11 + v15;
        }
        else
        {
          if (v7 == 8 && (v8 & 0xFE) == 0x38) {
            return -1;
          }
          unsigned int v10 = (char)v8 + v10 * v7 - 48;
        }
        int v16 = *(unsigned __int8 *)++v4;
        LOBYTE(v8) = v16;
        BOOL v6 = 1;
        if (!v16) {
          goto LABEL_25;
        }
      }
    }
    if (!v6) {
      return -1;
    }
LABEL_25:
    in_addr_t result = -1;
    if (v1 > 3 || v10 > 0xFF) {
      return result;
    }
    if (v8 != 46) {
      break;
    }
    *(_DWORD *)&v23[4 * v1++] = v10;
    a1 = v4 + 1;
  }
  if ((_BYTE)v8)
  {
    if ((v8 & 0x80) != 0)
    {
      unsigned int v19 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
      if (!v19) {
        unsigned int v19 = &__global_locale;
      }
      int v18 = *(_RuneLocale **)(v19[166] + 120);
    }
    else
    {
      int v18 = &_DefaultRuneLocale;
    }
    if ((v18->__runetype[v8] & 0x4000) == 0) {
      return -1;
    }
  }
  *(_DWORD *)&v23[4 * v1] = v10;
  unint64_t v20 = (4 * v1 + 4) >> 2;
  if (v20 > 4) {
    return -1;
  }
  if (!v20) {
    return 0;
  }
  uint64_t v21 = 0;
  in_addr_t result = 0;
  unint64_t v22 = v1 + 1;
  do
    in_addr_t result = v23[4 * v21++] | (result << 8);
  while (v22 != v21);
  return result;
}

void link_addr(const char *a1, sockaddr_dl *a2)
{
  sdl_data = a2->sdl_data;
  sdl_leuint64_t n = a2->sdl_len;
  BOOL v6 = &a2->sdl_len + sdl_len;
  MEMORY[0x18C122530](&a2->sdl_family, sdl_len - 1);
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  a2->sdl_family = 18;
  unsigned int v10 = sdl_data;
  while (1)
  {
    unsigned int v11 = v8 & 0xFFFFFFF3;
    int v12 = *(unsigned __int8 *)a1;
    if ((v12 - 48) <= 9)
    {
      uint64_t v9 = (v12 - 48);
      goto LABEL_14;
    }
    if ((v12 - 97) <= 5)
    {
      uint64_t v9 = (v12 - 87);
      goto LABEL_14;
    }
    if ((v12 - 65) <= 5)
    {
      uint64_t v9 = (v12 - 55);
      goto LABEL_14;
    }
    if (!*a1) {
      break;
    }
    if (v11 || (v12 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      v11 |= 8u;
      goto LABEL_14;
    }
    ++a1;
    unsigned int v11 = 12;
LABEL_15:
    *v10++ = v12;
    uint64_t v13 = v7;
    int v8 = v11;
LABEL_20:
    uint64_t v7 = v13;
    if (v10 >= (char *)v6) {
      goto LABEL_23;
    }
  }
  v11 |= 4u;
LABEL_14:
  ++a1;
  int v8 = 1;
  uint64_t v13 = v9;
  switch(v11)
  {
    case 0u:
    case 0xCu:
      goto LABEL_15;
    case 1u:
      uint64_t v13 = (v9 + 16 * v7);
      int v8 = 2;
      goto LABEL_20;
    case 2u:
      *v10++ = v7;
      uint64_t v13 = v9;
      goto LABEL_20;
    case 3u:
      goto LABEL_20;
    case 5u:
    case 6u:
      char *v10 = v7;
      LODWORD(v10) = v10 + 1;
      break;
    case 7u:
      break;
    case 8u:
      a2->sdl_nleuint64_t n = (_BYTE)v10 - (_BYTE)sdl_data;
      int v8 = 3;
      uint64_t v13 = v7;
      goto LABEL_20;
    default:
      uint64_t v13 = 0;
      *v10++ = v7;
      int v8 = 3;
      goto LABEL_20;
  }
LABEL_23:
  a2->sdl_aleuint64_t n = (_BYTE)v10 - (_BYTE)sdl_data - a2->sdl_nlen;
  unsigned int v14 = v10 - a2;
  if (v14 >= 0x15) {
    a2->sdl_leuint64_t n = v14;
  }
}

char *__cdecl link_ntoa(const sockaddr_dl *a1)
{
  sdl_nleuint64_t n = a1->sdl_nlen;
  sdl_aleuint64_t n = a1->sdl_alen;
  if ((unint64_t)(3 * sdl_alen + sdl_nlen) <= 0x3F)
  {
    sdl_data = a1->sdl_data;
    BOOL v6 = link_ntoa_obuf;
    if (a1->sdl_nlen)
    {
      j__mkostemp(link_ntoa_obuf, (int)sdl_data);
      BOOL v6 = &link_ntoa_obuf[a1->sdl_nlen];
      if (a1->sdl_alen) {
        *v6++ = 58;
      }
    }
    if (sdl_alen)
    {
      char v7 = 0;
      int v8 = (unsigned __int8 *)&sdl_data[sdl_nlen];
      do
      {
        if (v7) {
          *v6++ = 46;
        }
        unsigned int v10 = *v8++;
        unint64_t v9 = v10;
        if (v10 < 0x10)
        {
          uint64_t v11 = 1;
        }
        else
        {
          v6[1] = hexlist[v9 & 0xF];
          v9 >>= 4;
          uint64_t v11 = 2;
        }
        unsigned int v3 = &v6[v11];
        *BOOL v6 = hexlist[v9];
        char v7 = 1;
        BOOL v6 = v3;
      }
      while (v8 < (unsigned __int8 *)&sdl_data[sdl_nlen + sdl_alen]);
    }
    else
    {
      unsigned int v3 = v6;
    }
  }
  else
  {
    unsigned int v3 = link_ntoa_obuf;
  }
  char *v3 = 0;
  return link_ntoa_obuf;
}

unsigned int inet_nsap_addr(const char *a1, unsigned __int8 *a2, int a3)
{
  if (*a1 == 48)
  {
    unsigned int v3 = a1;
    if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x78)
    {
      int v5 = a1 + 2;
      LOBYTE(v4) = a1[2];
      if ((_BYTE)v4 && a3 != 0)
      {
        unsigned int result = 0;
        unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        while (1)
        {
          unint64_t v9 = v3 + 3;
          unsigned int v3 = v5;
          while (1)
          {
            unsigned int v10 = v9;
            if (v4 > 0x2Fu || ((1 << v4) & 0xC80000000000) == 0) {
              break;
            }
            ++v9;
            LOBYTE(v4) = *v10;
            unsigned int v3 = v10;
            if (!*v10) {
              return result;
            }
          }
          if ((v4 & 0x80) != 0) {
            break;
          }
          __uint32_t v11 = _DefaultRuneLocale.__runetype[v4];
          if ((v11 & 0x1000) != 0)
          {
            int v12 = *(void **)(StatusReg + 8 * __locale_key);
            if (!v12) {
              int v12 = &__global_locale;
            }
            uint64_t v4 = *(unsigned __int8 *)(*(void *)(v12[166] + 120) + 4 * v4 + 2108);
            __uint32_t v11 = _DefaultRuneLocale.__runetype[v4];
          }
          if ((v11 & 0x10000) == 0) {
            break;
          }
          char v13 = v4 - 48 >= 0xA ? 9 : 0;
          uint64_t v14 = *(unsigned __int8 *)v10;
          if (!v14) {
            break;
          }
          int v15 = *(void **)(StatusReg + 8 * __locale_key);
          if (!v15) {
            int v15 = &__global_locale;
          }
          int v16 = *(_DWORD *)(*(void *)(v15[166] + 120) + 4 * v14 + 2108);
          if ((_DefaultRuneLocale.__runetype[v16] & 0x10000) == 0) {
            break;
          }
          char v17 = v13 + v4;
          int v5 = v3 + 2;
          if (v16 - 48 >= 0xA) {
            char v18 = -55;
          }
          else {
            char v18 = -48;
          }
          *a2++ = (v18 + v16) | (16 * v17);
          ++result;
          LOBYTE(v4) = *v5;
          if (!*v5 || result >= a3) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

char *__cdecl inet_nsap_ntoa(int a1, const unsigned __int8 *a2, char *a3)
{
  unsigned int result = (char *)malloc_type_malloc(0x2FDuLL, 0x54CF7871uLL);
  if (result)
  {
    if (a3) {
      unsigned int result = a3;
    }
    *(_WORD *)unsigned int result = 30768;
    char v7 = result + 2;
    if (a1 >= 255) {
      int v8 = 255;
    }
    else {
      int v8 = a1;
    }
    if (a1 < 1)
    {
      int v15 = result + 2;
    }
    else
    {
      uint64_t v9 = 0;
      if (v8 <= 1) {
        int v10 = 1;
      }
      else {
        int v10 = v8;
      }
      do
      {
        if (a2[v9] >= 0xA0u) {
          char v11 = 55;
        }
        else {
          char v11 = 48;
        }
        *char v7 = v11 + (a2[v9] >> 4);
        unsigned int v12 = a2[v9] & 0xF;
        if (v12 >= 0xA) {
          char v13 = 55;
        }
        else {
          char v13 = 48;
        }
        char v14 = v13 + v12;
        int v15 = v7 + 2;
        v7[1] = v14;
        if ((v9 & 1) == 0 && (int)v9 + 1 < v8)
        {
          int v15 = v7 + 3;
          char v7[2] = 46;
        }
        ++v9;
        char v7 = v15;
      }
      while (v10 != v9);
    }
    *int v15 = 0;
  }
  return result;
}

int sockatmark(int a1)
{
  int v2 = 0;
  if (ioctl(a1, 0x40047307uLL, &v2) == -1) {
    return -1;
  }
  else {
    return v2;
  }
}

int setipv4sourcefilter(int a1, in_addr a2, in_addr a3, uint32_t a4, uint32_t a5, in_addr *a6)
{
  if (a1 == -1) {
    setipv4sourcefilter_cold_1();
  }
  if ((a3.s_addr & 0xF0) != 0xE0 || a4 - 3 <= 0xFFFFFFFD)
  {
    char v14 = __error();
    int v15 = 22;
LABEL_16:
    int *v14 = v15;
    return -1;
  }
  uint32_t v11 = __inaddr_to_index(a2.s_addr);
  if (!v11)
  {
    char v14 = __error();
    int v15 = 49;
    goto LABEL_16;
  }
  uint32_t v12 = v11;
  memset(&v22, 0, 128);
  *(_WORD *)&v22.sa_leuint64_t n = 528;
  *(in_addr *)&v22.sa_data[2] = a3;
  if (!a5 && !a6) {
    return setsourcefilter(a1, v11, &v22, 0x10u, a4, 0, 0);
  }
  uint64_t v16 = a5;
  char v17 = (sockaddr_storage *)malloc_type_calloc(a5, 0x80uLL, 0x1000040AE2C30F4uLL);
  if (!v17)
  {
    char v14 = __error();
    int v15 = 12;
    goto LABEL_16;
  }
  char v18 = v17;
  if (a5)
  {
    unsigned int v19 = v17;
    do
    {
      *(_WORD *)&v19->ss_leuint64_t n = 528;
      s_addunsigned int r = a6->s_addr;
      ++a6;
      *(_DWORD *)&v19->__ss_pad1[2] = s_addr;
      ++v19;
      --v16;
    }
    while (v16);
  }
  int v13 = setsourcefilter(a1, v12, &v22, 0x10u, a4, a5, v17);
  free(v18);
  return v13;
}

char *__inaddr_to_index(int a1)
{
  uint32_t v11 = 0;
  if (getifaddrs(&v11) < 0) {
    return 0;
  }
  uint64_t v4 = v11;
  if (v11)
  {
    int v5 = v11;
    while (1)
    {
      ifa_addunsigned int r = v5->ifa_addr;
      if (ifa_addr)
      {
        if (ifa_addr->sa_family == 2 && *(_DWORD *)&ifa_addr->sa_data[2] == a1) {
          break;
        }
      }
      int v5 = v5->ifa_next;
      if (!v5) {
        goto LABEL_8;
      }
    }
    ifa_name = v5->ifa_name;
    if (ifa_name)
    {
      uint64_t v9 = v11;
      while (1)
      {
        int v10 = v9->ifa_addr;
        if (v10)
        {
          if (v10->sa_family == 18 && !j__strncasecmp_l(v9->ifa_name, ifa_name, v2, v3)) {
            break;
          }
        }
        uint64_t v9 = v9->ifa_next;
        if (!v9) {
          goto LABEL_18;
        }
      }
      ifa_name = (char *)*(unsigned __int16 *)v10->sa_data;
      if (!*(_WORD *)v10->sa_data) {
LABEL_18:
      }
        __inaddr_to_index_cold_1();
    }
  }
  else
  {
LABEL_8:
    ifa_name = 0;
  }
  MEMORY[0x18C1226D0](v4);
  return ifa_name;
}

int setsourcefilter(int a1, uint32_t a2, sockaddr *a3, socklen_t a4, uint32_t a5, uint32_t a6, sockaddr_storage *a7)
{
  if (a5 - 3 <= 0xFFFFFFFD) {
    goto LABEL_2;
  }
  int sa_family = a3->sa_family;
  if (sa_family == 30)
  {
    if (a4 == 28 && a3->sa_data[6] == 255)
    {
      int v13 = 41;
      goto LABEL_13;
    }
  }
  else
  {
    if (sa_family != 2)
    {
      char v7 = __error();
      int v8 = 47;
      goto LABEL_3;
    }
    if (a4 == 16 && (*(_DWORD *)&a3->sa_data[2] & 0xF0) == 0xE0)
    {
      int v13 = 0;
LABEL_13:
      memset(&v14[3], 0, 132);
      v14[0] = a2;
      v14[1] = a5;
      v14[2] = a6;
      j__mkdtempat_np((int)&v14[4], (char *)a3);
      int v15 = a7;
      return setsockopt(a1, v13, 74, v14, 0x98u);
    }
  }
LABEL_2:
  char v7 = __error();
  int v8 = 22;
LABEL_3:
  *char v7 = v8;
  return -1;
}

int getipv4sourcefilter(int a1, in_addr a2, in_addr a3, uint32_t *a4, uint32_t *a5, in_addr *a6)
{
  if (a1 == -1) {
    getipv4sourcefilter_cold_1();
  }
  if (!a4) {
    getipv4sourcefilter_cold_2();
  }
  if (!a5) {
    getipv4sourcefilter_cold_3();
  }
  size_t v9 = *a5;
  *a5 = 0;
  if ((a3.s_addr & 0xF0) != 0xE0 || (int v10 = a6) == 0 && v9)
  {
    uint32_t v12 = __error();
    int v13 = 22;
LABEL_8:
    *uint32_t v12 = v13;
    return -1;
  }
  uint32_t v16 = __inaddr_to_index(a2.s_addr);
  if (!v16)
  {
    uint32_t v12 = __error();
    int v13 = 49;
    goto LABEL_8;
  }
  uint32_t v17 = v16;
  memset(&v25, 0, 128);
  *(_WORD *)&v25.sa_leuint64_t n = 528;
  *(in_addr *)&v25.sa_data[2] = a3;
  if (!v10 && !v9) {
    return getsourcefilter(a1, v16, &v25, 0x10u, a4, a5, 0);
  }
  char v18 = (sockaddr_storage *)malloc_type_calloc(v9, 0x80uLL, 0x1000040AE2C30F4uLL);
  if (!v18)
  {
    uint32_t v12 = __error();
    int v13 = 12;
    goto LABEL_8;
  }
  unsigned int v19 = v18;
  int v14 = getsourcefilter(a1, v17, &v25, 0x10u, a4, a5, v18);
  uint32_t v20 = *a5;
  if (*a5)
  {
    if (v9 >= v20) {
      uint32_t v21 = *a5;
    }
    else {
      uint32_t v21 = v9;
    }
    if (v21)
    {
      unint64_t v22 = 0;
      int v23 = (in_addr_t *)&v19->__ss_pad1[2];
      do
      {
        if (*((unsigned char *)v23 - 3) == 2)
        {
          v10->s_addunsigned int r = *v23;
          ++v10;
          uint32_t v20 = *a5;
        }
        v23 += 32;
        ++v22;
        if (v9 >= v20) {
          unint64_t v24 = v20;
        }
        else {
          unint64_t v24 = v9;
        }
      }
      while (v22 < v24);
    }
    free(v19);
  }
  return v14;
}

int getsourcefilter(int a1, uint32_t a2, sockaddr *a3, socklen_t a4, uint32_t *a5, uint32_t *a6, sockaddr_storage *a7)
{
  if (!a5 || !a2 || !a3 || !a6) {
    goto LABEL_12;
  }
  uint32_t v11 = *a6;
  *a6 = 0;
  *a5 = 0;
  int sa_family = a3->sa_family;
  if (sa_family != 30)
  {
    if (sa_family != 2)
    {
      int v14 = __error();
      int v15 = 47;
      goto LABEL_13;
    }
    if (a4 == 16 && (*(_DWORD *)&a3->sa_data[2] & 0xF0) == 0xE0)
    {
      int v13 = 0;
      goto LABEL_17;
    }
LABEL_12:
    int v14 = __error();
    int v15 = 22;
LABEL_13:
    int *v14 = v15;
    return -1;
  }
  if (a4 != 28 || a3->sa_data[6] != 255) {
    goto LABEL_12;
  }
  int v13 = 41;
LABEL_17:
  socklen_t v18 = 152;
  uint32_t v19 = a2;
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  uint32_t v20 = 0;
  uint32_t v21 = v11;
  j__mkdtempat_np((int)v22 + 4, (char *)a3);
  unint64_t v24 = a7;
  int result = getsockopt(a1, v13, 74, &v19, &v18);
  if (!result)
  {
    uint32_t v17 = v20;
    *a6 = v21;
    *a5 = v17;
  }
  return result;
}

nl_catd catopen(const char *a1, int a2)
{
  memset(&v39, 0, sizeof(v39));
  if (!a1 || !*a1)
  {
    BOOL v6 = __error();
    int v7 = 22;
LABEL_8:
    *BOOL v6 = v7;
    return (nl_catd)-1;
  }
  if (j__strncasecmp(a1, (const char *)0x2F, v2))
  {
    return (nl_catd)loadCat();
  }
  if (a2 == 1) {
    int v8 = querylocale(4, 0);
  }
  else {
    int v8 = getenv("LANG");
  }
  uint32_t v11 = v8;
  if (!v8
    || (int v12 = *(unsigned __int8 *)v8, !*v8)
    || (unint64_t)j__strsignal_r((int)v8, v9, v10) > 0x1F
    || v12 == 46 && (!v11[1] || v11[1] == 46 && !v11[2])
    || j__strncasecmp(v11, (const char *)0x2F, v13))
  {
    uint32_t v11 = "C";
  }
  int v14 = strdup(v11);
  if (!v14) {
    return (nl_catd)-1;
  }
  uint32_t v16 = v14;
  uint32_t v17 = (unsigned char *)j__strncasecmp(v14, (const char *)0x40, v15);
  if (v17) {
    *uint32_t v17 = 0;
  }
  uint32_t v19 = (unsigned char *)j__strncasecmp(v16, (const char *)0x5F, v18);
  if (v19)
  {
    *uint32_t v19 = 0;
    uint32_t v21 = v19 + 1;
    int v38 = v21;
  }
  else
  {
    int v38 = "";
    uint32_t v21 = v16;
  }
  unint64_t v22 = (unsigned char *)j__strncasecmp(v21, (const char *)0x2E, v20);
  if (v22)
  {
    *unint64_t v22 = 0;
    int v23 = v22 + 1;
  }
  else
  {
    int v23 = "";
  }
  unint64_t v24 = getenv("NLSPATH");
  if (!v24 || (sockaddr v25 = v24, issetugid())) {
    sockaddr v25 = "/usr/share/nls/%L/%N.cat:/usr/share/nls/%N/%L:/usr/local/share/nls/%L/%N.cat:/usr/local/share/nls/%N/%L";
  }
  BOOL v26 = strdup(v25);
  __stringp = v26;
  if (!v26)
  {
    int v37 = *__error();
    free(v16);
    *__error() = v37;
    return (nl_catd)-1;
  }
  int v27 = v26;
  while (2)
  {
    signed int v28 = strsep(&__stringp, ":");
    if (!v28)
    {
      free(v16);
      free(v27);
      BOOL v6 = __error();
      int v7 = 2;
      goto LABEL_8;
    }
    int v29 = v28;
    int v30 = *v28;
    if (*v28)
    {
      int v31 = v41;
      goto LABEL_42;
    }
    int v29 = v28 - 1;
    int v31 = v41;
LABEL_48:
    __uint32_t v33 = a1;
LABEL_62:
    if (MEMORY[0x18C122F90](v31, v33, (int)(v41 - v31 + 1023)) >= (unint64_t)(int)(v41 - v31 + 1023))
    {
LABEL_66:
      free(v16);
      free(v27);
      BOOL v6 = __error();
      int v7 = 63;
      goto LABEL_8;
    }
    for (v31 += j__strsignal_r((int)v33, v34, v35); ; ++v31)
    {
      int v36 = *++v29;
      int v30 = v36;
      if (!v36) {
        break;
      }
LABEL_42:
      if (v30 == 37)
      {
        int v32 = v29[1];
        if (v32 > 98)
        {
          switch(v32)
          {
            case 'c':
              ++v29;
              __uint32_t v33 = v23;
              goto LABEL_62;
            case 'l':
              ++v29;
              __uint32_t v33 = v16;
              goto LABEL_62;
            case 't':
              ++v29;
              __uint32_t v33 = v38;
              goto LABEL_62;
          }
        }
        else
        {
          switch(v32)
          {
            case '%':
              ++v29;
              break;
            case 'L':
              ++v29;
              __uint32_t v33 = v11;
              goto LABEL_62;
            case 'N':
              ++v29;
              goto LABEL_48;
          }
        }
        if ((unint64_t)(v31 - v41) > 0x3FE) {
          goto LABEL_66;
        }
        LOBYTE(v30) = *v29;
      }
      else if ((unint64_t)(v31 - v41) > 0x3FE)
      {
        goto LABEL_66;
      }
      char *v31 = v30;
    }
    char *v31 = 0;
    if (stat(v41, &v39)) {
      continue;
    }
    break;
  }
  free(v16);
  free(v27);
  return (nl_catd)loadCat();
}

uint64_t loadCat()
{
  uint64_t v0 = (FILE **)malloc_type_malloc(0x20uLL, 0x1020040DE3E3027uLL);
  if (!v0) {
    return -1;
  }
  unint64_t v1 = v0;
  int v2 = open_NOCANCEL();
  if (v2 == -1)
  {
    int v13 = *__error();
LABEL_20:
    free(v1);
LABEL_30:
    *__error() = v13;
    return -1;
  }
  unsigned int v3 = fdopen(v2, "r");
  *unint64_t v1 = v3;
  if (!v3)
  {
    int v13 = *__error();
    close_NOCANCEL();
    goto LABEL_20;
  }
  __ptunsigned int r = 0u;
  long long v16 = 0u;
  if (fread(&__ptr, 0x20uLL, 1uLL, v3) != 1 || (void)__ptr != 0x2A6C75677A616E2ALL)
  {
LABEL_28:
    fclose(*v1);
    fprintf(__stderrp, "%s: corrupt file.", "Message Catalog System");
    free(v1);
LABEL_29:
    int v13 = 79;
    goto LABEL_30;
  }
  int v4 = DWORD2(__ptr);
  if (DWORD2(__ptr) != 0x1000000)
  {
    fclose(*v1);
    free(v1);
    if (v4 == 1) {
      fprintf(__stderrp, "%s: %s is the wrong byte ordering.\n");
    }
    else {
      fprintf(__stderrp, "%s: %s is version %d, we need %d.\n");
    }
    goto LABEL_29;
  }
  if (!DWORD1(v16))
  {
    fclose(*v1);
    free(v1);
    fprintf(__stderrp, "%s: %s has %d sets!\n");
    goto LABEL_29;
  }
  signed int v5 = bswap32(DWORD1(v16));
  *((_DWORD *)v1 + 2) = v5;
  BOOL v6 = (FILE *)malloc_type_malloc(40 * v5, 0x10B2040D468A13DuLL);
  v1[2] = v6;
  if (!v6)
  {
    int v13 = *__error();
    fclose(*v1);
    fprintf(__stderrp, "%s: no more memory.", "Message Catalog System");
    goto LABEL_20;
  }
  if (*((int *)v1 + 2) >= 1)
  {
    int v7 = 0;
    off_t v8 = bswap64(*((unint64_t *)&v16 + 1));
    while (fseeko(*v1, v8, 0) != -1)
    {
      size_t v9 = v1[2];
      if (fread((char *)v9 + 40 * v7, 0x28uLL, 1uLL, *v1) != 1) {
        break;
      }
      uint64_t v10 = (uint64_t)v9 + 40 * v7;
      int v12 = *(_DWORD *)(v10 + 36);
      uint32_t v11 = (_DWORD *)(v10 + 36);
      if (v12) {
        --v7;
      }
      else {
        *uint32_t v11 = 1;
      }
      off_t v8 = bswap64(*((void *)v11 - 4));
      if (++v7 >= *((_DWORD *)v1 + 2)) {
        return (uint64_t)v1;
      }
    }
    __nls_free_resources((uint64_t)v1, v7);
    goto LABEL_28;
  }
  return (uint64_t)v1;
}

char *__cdecl catgets(nl_catd a1, int a2, int a3, const char *a4)
{
  if ((unint64_t)&a1->__data + 1 < 2 || a1 == 0 || a2 < 1) {
    return (char *)a4;
  }
  int size = a1->__size;
  if (size >= 0) {
    int v11 = a1->__size;
  }
  else {
    int v11 = size + 1;
  }
  int v12 = v11 >> 1;
  if (size >= a2) {
    int v13 = a2;
  }
  else {
    int v13 = a1->__size;
  }
  if (size >= a2) {
    int v14 = a2 - 1;
  }
  else {
    int v14 = v12;
  }
  data = a1[1].__data;
  unsigned int v16 = bswap32(data[10 * v14]);
  if (v16 == a2)
  {
LABEL_36:
    int v22 = v14;
    int v23 = (char *)&data[10 * v14];
    int v25 = *((_DWORD *)v23 + 9);
    unint64_t v24 = v23 + 36;
    if (v25)
    {
      BOOL v26 = (char *)&data[10 * v14];
      unint64_t v28 = *(void *)(v26 + 20);
      int v27 = (void **)(v26 + 20);
      if (fseeko((FILE *)a1->__data, bswap64(v28), 0) == -1) {
        return (char *)a4;
      }
      int v29 = (char *)&data[10 * v22];
      unsigned int v31 = *((_DWORD *)v29 + 7);
      int v30 = (unsigned int *)(v29 + 28);
      int v32 = malloc_type_malloc(bswap32(v31), 0x34535F66uLL);
      char *v27 = v32;
      if (!v32) {
        return (char *)a4;
      }
      if (fread(v32, bswap32(*v30), 1uLL, (FILE *)a1->__data) != 1) {
        goto LABEL_77;
      }
      __uint32_t v33 = (char *)&data[10 * v22];
      unint64_t v35 = *(void *)(v33 + 12);
      unsigned int v34 = (void **)(v33 + 12);
      if (fseeko((FILE *)a1->__data, bswap64(v35), 0) == -1
        || (int v36 = (char *)&data[10 * v22],
            unsigned int v38 = *((_DWORD *)v36 + 8),
            int v37 = (unsigned int *)(v36 + 32),
            stat v39 = malloc_type_malloc(16 * bswap32(v38), 0x10B2040ACE959A4uLL),
            (*unsigned int v34 = v39) == 0))
      {
LABEL_77:
        int v58 = *__error();
        int v59 = *v27;
LABEL_78:
        free(v59);
        *__error() = v58;
        return (char *)a4;
      }
      int v60 = v27;
      if (*v37)
      {
        int v40 = 0;
        while (1)
        {
          BOOL v41 = v34;
          uint64_t v42 = (char *)*v34;
          if (fread(&v42[16 * v40], 0x10uLL, 1uLL, (FILE *)a1->__data) != 1) {
            break;
          }
          char v43 = &v42[16 * v40];
          if (*((_DWORD *)v43 + 3)) {
            --v40;
          }
          else {
            *(void *)(v43 + 4) = (char *)*v60 + bswap64(*(void *)(v43 + 4));
          }
          unsigned int v34 = v41;
          if (++v40 >= bswap32(*v37)) {
            goto LABEL_49;
          }
        }
        int v58 = *__error();
        free(*v41);
        int v59 = *v60;
        goto LABEL_78;
      }
LABEL_49:
      *unint64_t v24 = 0;
    }
    unsigned int v44 = a3 - 1;
    if (a3 >= 1)
    {
      uint64_t v45 = (char *)&data[10 * v22];
      int v46 = bswap32(*((_DWORD *)v45 + 8));
      if (v46 >= 0) {
        int v47 = v46;
      }
      else {
        int v47 = v46 + 1;
      }
      int v48 = v47 >> 1;
      if (v44 >= v46) {
        int v49 = v48;
      }
      else {
        int v49 = a3 - 1;
      }
      uint64_t v50 = *(void *)(v45 + 12);
      unsigned int v51 = bswap32(*(_DWORD *)(v50 + 16 * v49));
      if (v51 == a3)
      {
        return *(char **)(v50 + 16 * v49 + 4);
      }
      else
      {
        int v52 = 0;
        if (v44 >= v46) {
          int v53 = v46;
        }
        else {
          int v53 = a3;
        }
        while (1)
        {
          if (v53 >= a3 + 1 + v49 - v51) {
            int v53 = a3 + 1 + v49 - v51;
          }
          if (v51 >= a3) {
            int v53 = v49;
          }
          else {
            int v52 = v49 + 1;
          }
          int v54 = v51 < a3 ? 1 : -1;
          int v55 = v53 - v52;
          if (v53 <= v52) {
            break;
          }
          if (v55 >= 0) {
            int v56 = v53 - v52;
          }
          else {
            int v56 = v55 + 1;
          }
          int v57 = (v56 >> 1) * v54;
          if (v55 != 1) {
            int v54 = v57;
          }
          v49 += v54;
          unsigned int v51 = bswap32(*(_DWORD *)(v50 + 16 * v49));
          if (v51 == a3) {
            return *(char **)(v50 + 16 * v49 + 4);
          }
        }
      }
    }
    return (char *)a4;
  }
  int v17 = 0;
  while (1)
  {
    if (v13 >= a2 + 1 + v14 - v16) {
      int v13 = a2 + 1 + v14 - v16;
    }
    if (v16 >= a2) {
      int v13 = v14;
    }
    else {
      int v17 = v14 + 1;
    }
    int v18 = v16 < a2 ? 1 : -1;
    int v19 = v13 - v17;
    if (v13 <= v17) {
      return (char *)a4;
    }
    if (v19 >= 0) {
      int v20 = v13 - v17;
    }
    else {
      int v20 = v19 + 1;
    }
    int v21 = (v20 >> 1) * v18;
    if (v19 != 1) {
      int v18 = v21;
    }
    v14 += v18;
    unsigned int v16 = bswap32(data[10 * v14]);
    if (v16 == a2) {
      goto LABEL_36;
    }
  }
}

int catclose(nl_catd a1)
{
  if ((unint64_t)&a1->__data + 1 > 1)
  {
    fclose((FILE *)a1->__data);
    __nls_free_resources((uint64_t)a1, a1->__size);
    free(a1);
    return 0;
  }
  else
  {
    *__error() = 9;
    return -1;
  }
}

void __nls_free_resources(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 40 * a2;
    do
    {
      uint64_t v5 = *(void *)(a1 + 16) + v3;
      if (!*(_DWORD *)(v5 + 36))
      {
        free(*(void **)(v5 + 20));
        free(*(void **)(v5 + 12));
      }
      v3 += 40;
    }
    while (v4 != v3);
  }
  BOOL v6 = *(void **)(a1 + 16);

  free(v6);
}

int ftrylockfile(FILE *a1)
{
  int v2 = *__error();
  if (pthread_mutex_trylock((pthread_mutex_t *)((char *)a1->_extra + 8))) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  *__error() = v2;
  return v3;
}

int asprintf_l(char **a1, locale_t a2, const char *a3, ...)
{
  va_start(va, a3);
  return vasprintf_l(a1, a2, a3, va);
}

void clearerr(FILE *a1)
{
  flockfile(a1);
  a1->_flags &= 0xFF9Fu;

  funlockfile(a1);
}

uint64_t clearerr_unlocked(uint64_t result)
{
  *(_WORD *)(result + 16) &= 0xFF9Fu;
  return result;
}

int dprintf(int a1, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return vdprintf_l(a1, v5, a2, va);
}

int dprintf_l(int a1, locale_t a2, const char *a3, ...)
{
  va_start(va, a3);
  return vdprintf_l(a1, a2, a3, va);
}

uint64_t feof_unlocked(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 16) >> 5) & 1;
}

int ferror(FILE *a1)
{
  flockfile(a1);
  int v2 = ((unsigned __int16)a1->_flags >> 6) & 1;
  funlockfile(a1);
  return v2;
}

uint64_t ferror_unlocked(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 16) >> 6) & 1;
}

uint64_t sflush_locked(FILE *a1)
{
  flockfile(a1);
  uint64_t v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

int fgetc(FILE *a1)
{
  flockfile(a1);
  int r = a1->_r;
  a1->_int r = r - 1;
  if (r <= 0)
  {
    int v4 = __srget(a1);
  }
  else
  {
    uint64_t v3 = a1->_p++;
    int v4 = *v3;
  }
  funlockfile(a1);
  return v4;
}

uint64_t __slbexpand(uint64_t a1, size_t size)
{
  if (*(int *)(a1 + 128) >= size) {
    return 0;
  }
  int v2 = size;
  if (size >> 31)
  {
    *__error() = 12;
  }
  else
  {
    uint64_t v5 = malloc_type_realloc(*(void **)(a1 + 120), size, 0xABA27493uLL);
    if (v5)
    {
      BOOL v6 = v5;
      uint64_t result = 0;
      *(void *)(a1 + 120) = v6;
      *(_DWORD *)(a1 + 128) = v2;
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

char *__cdecl fgetln(FILE *a1, size_t *a2)
{
  flockfile(a1);
  extra = a1->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  int r = a1->_r;
  if (r <= 0)
  {
    if (__srefill((uint64_t)a1))
    {
      *a2 = 0;
LABEL_10:
      funlockfile(a1);
      return 0;
    }
    int r = a1->_r;
  }
  p = a1->_p;
  size_t v7 = r;
  uint64_t v8 = j__mkdirx_np((const char *)a1->_p, (filesec_t)0xA);
  if (v8)
  {
    size_t v9 = v8 + 1 - (void)p;
    *a2 = v9;
    a1->_flags |= 0x2000u;
    a1->_int r = v7 - v9;
    a1->_p = (unsigned __int8 *)(v8 + 1);
    funlockfile(a1);
    return (char *)p;
  }
  if (__slbexpand((uint64_t)a1, v7 + 80))
  {
LABEL_9:
    *a2 = 0;
    a1->_flags |= 0x40u;
    goto LABEL_10;
  }
  int v11 = 0;
  while (1)
  {
    j__mkdtempat_np((int)&a1->_lb._base[v11], (char *)a1->_p);
    if (__srefill((uint64_t)a1)) {
      break;
    }
    int v12 = a1->_p;
    uint64_t v13 = a1->_r;
    uint64_t v14 = j__mkdirx_np((const char *)a1->_p, (filesec_t)0xA);
    if (v14)
    {
      unsigned int v16 = (unsigned __int8 *)(v14 + 1);
      uint64_t v17 = v14 + 1 - (void)v12;
      if (__slbexpand((uint64_t)a1, v17 + v7)) {
        goto LABEL_9;
      }
      j__mkdtempat_np((int)&a1->_lb._base[v7], (char *)a1->_p);
      a1->_r -= v17;
      a1->_p = v16;
      v7 += v17;
      break;
    }
    int v15 = __slbexpand((uint64_t)a1, v7 + v13 + 80);
    int v11 = v7;
    v7 += v13;
    if (v15) {
      goto LABEL_9;
    }
  }
  *a2 = v7;
  funlockfile(a1);
  return (char *)a1->_lb._base;
}

int fgetpos(FILE *a1, fpos_t *a2)
{
  off_t v3 = ftello(a1);
  *a2 = v3;
  if (v3 == -1) {
    return -1;
  }
  else {
    return 0;
  }
}

wint_t fgetwc(FILE *a1)
{
  flockfile(a1);
  extra = a1->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v3 = __locale_key;
  int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = &__global_locale;
  }
  wint_t v6 = __fgetwc((uint64_t)a1, (uint64_t)v5);
  funlockfile(a1);
  return v6;
}

uint64_t __fgetwc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 1328);
  uint64_t v5 = *(uint64_t (**)(unsigned int *, void, void, uint64_t, uint64_t))(v4 + 72);
  if (*(int *)(a1 + 8) <= 0 && __srefill(a1)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = 0;
  if (*(_DWORD *)(v4 + 64) == 1)
  {
    wint_t v6 = (unsigned __int8 *)(*(void *)a1)++;
    uint64_t result = *v6;
LABEL_12:
    --*(_DWORD *)(a1 + 8);
  }
  else
  {
    while (1)
    {
      uint64_t result = v5(&v8, *(void *)a1, *(int *)(a1 + 8), *(void *)(a1 + 104) + 80, a2);
      if (result != -2) {
        break;
      }
      if (__srefill(a1)) {
        goto LABEL_13;
      }
    }
    if (result == -1)
    {
LABEL_13:
      *(_WORD *)(a1 + 16) |= 0x40u;
      *__error() = 92;
      return 0xFFFFFFFFLL;
    }
    if (!result)
    {
      ++*(void *)a1;
      goto LABEL_12;
    }
    *(void *)a1 += result;
    *(_DWORD *)(a1 + 8) -= result;
    return v8;
  }
  return result;
}

wint_t fgetwc_l(FILE *a1, locale_t a2)
{
  flockfile(a1);
  extra = a1->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  locale_t v5 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v5 = a2;
  }
  if (a2) {
    wint_t v6 = (char *)v5;
  }
  else {
    wint_t v6 = __c_locale;
  }
  wint_t v7 = __fgetwc((uint64_t)a1, (uint64_t)v6);
  funlockfile(a1);
  return v7;
}

__int32 *__cdecl fgetwln_l(FILE *a1, size_t *a2, locale_t a3)
{
  flockfile(a1);
  extra = a1->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  size_t v7 = 0;
  do
  {
    int v8 = __fgetwc((uint64_t)a1, (uint64_t)a3);
    if (v8 == -1)
    {
      size_t v10 = v7;
      if (v7) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
    int v9 = v8;
    if (4 * v7 >= a1->_lb._size && __slbexpand((uint64_t)a1, 4 * v7 + 2048)) {
      goto LABEL_11;
    }
    size_t v10 = v7 + 1;
    *(_DWORD *)&a1->_lb._base[4 * v7++] = v9;
  }
  while (v9 != 10);
  if (v10)
  {
LABEL_9:
    funlockfile(a1);
    *a2 = v10;
    return (__int32 *)a1->_lb._base;
  }
LABEL_11:
  funlockfile(a1);
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

__int32 *__cdecl fgetwln(FILE *a1, size_t *a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return fgetwln_l(a1, a2, v4);
}

__int32 *__cdecl fgetws_l(__int32 *a1, int a2, FILE *a3, locale_t a4)
{
  locale_t v7 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v7 = a4;
  }
  if (a4) {
    int v8 = (char *)v7;
  }
  else {
    int v8 = __c_locale;
  }
  uint64_t v9 = *((void *)v8 + 166);
  size_t v10 = *(uint64_t (**)(__int32 *, unsigned __int8 **, uint64_t, void, char *, char *))(v9 + 88);
  flockfile(a3);
  extra = a3->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  int v25 = 0;
  if (a2 <= 0)
  {
    a1 = 0;
    *__error() = 22;
  }
  else
  {
    if (a3->_r > 0 || !__srefill((uint64_t)a3))
    {
      int v12 = a1;
      while (1)
      {
        p = a3->_p;
        int v25 = p;
        uint64_t r = a3->_r;
        uint64_t v15 = j__mkdirx_np((const char *)p, (filesec_t)0xA);
        uint64_t v16 = v15 ? v15 - (void)p + 1 : r;
        uint64_t v17 = v10(v12, &v25, v16, (a2 - 1), (char *)a3->_extra + 80, v8);
        if (v17 == -1) {
          break;
        }
        uint64_t v18 = v17;
        int v19 = v25;
        int v20 = a3->_p;
        int v21 = a3->_r;
        if (!v25)
        {
          uint64_t v18 = v17 + 1;
          int v19 = (unsigned __int8 *)(j__mkdirx_np((const char *)v20, 0) + 1);
          int v25 = v19;
        }
        int v22 = v21 + v20 - v19;
        a3->_uint64_t r = v22;
        a3->_p = v19;
        a2 -= v18;
        v12 += v18;
        BOOL v23 = a2 < 2 || *(v12 - 1) == 10;
        if (v23 || v22 <= 0 && __srefill((uint64_t)a3))
        {
          if (v12 != a1 && (*(unsigned int (**)(char *, char *))(v9 + 80))((char *)a3->_extra + 80, v8))
          {
            *int v12 = 0;
            goto LABEL_29;
          }
          break;
        }
      }
    }
    a1 = 0;
  }
LABEL_29:
  funlockfile(a3);
  return a1;
}

__int32 *__cdecl fgetws(__int32 *a1, int a2, FILE *a3)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return fgetws_l(a1, a2, a3, v5);
}

uint64_t fileno_unlocked(uint64_t a1)
{
  return *(__int16 *)(a1 + 18);
}

uint64_t f_prealloc()
{
  uint64_t v0 = &__sglue;
  LODWORD(result) = getdtablesize();
  while (1)
  {
    uint64_t result = (result - *((_DWORD *)v0 + 2));
    if ((int)result < 1) {
      break;
    }
    uint64_t v0 = (uint64_t *)*v0;
    if (!v0)
    {
      uint64_t result = (uint64_t)moreglue(result);
      if (result)
      {
        uint64_t v2 = (uint64_t *)result;
        pthread_mutex_lock(&filelist_lock);
        *lastglue = (uint64_t)v2;
        lastglue = v2;
        return pthread_mutex_unlock(&filelist_lock);
      }
      return result;
    }
  }
  return result;
}

uint64_t _cleanup()
{
  return _fwalk((unsigned int (*)(uint64_t))__sflush);
}

int fprintf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  va_start(va, a3);
  return vfprintf_l(a1, a2, a3, va);
}

int fpurge(FILE *a1)
{
  flockfile(a1);
  __int16 flags = a1->_flags;
  if (flags)
  {
    base = (FILE *)a1->_ub._base;
    if (base)
    {
      if (base != (FILE *)a1->_ubuf)
      {
        free(base);
        __int16 flags = a1->_flags;
      }
      a1->_ub._base = 0;
    }
    int size = 0;
    a1->_p = a1->_bf._base;
    a1->_uint64_t r = 0;
    if ((flags & 3) == 0) {
      int size = a1->_bf._size;
    }
    int v5 = 0;
    a1->_int w = size;
  }
  else
  {
    *__error() = 9;
    int v5 = -1;
  }
  funlockfile(a1);
  return v5;
}

uint64_t __fputwc(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 1328);
  if ((a1 - 1) <= 0xFE && *(_DWORD *)(v5 + 64) == 1)
  {
    v16[0] = a1;
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v5 + 96))(v16, a1, (uint64_t)a2->_extra + 80, a3);
    if (!v7) {
      return v4;
    }
    uint64_t v8 = v7;
    if (v7 == -1)
    {
      a2->_flags |= 0x40u;
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v9 = v16;
  do
  {
    int v11 = *v9++;
    int v10 = v11;
    int w = a2->_w;
    a2->_int w = w - 1;
    if (w <= 0 && (v10 != 10 ? (BOOL v13 = w <= a2->_lbfsize) : (BOOL v13 = 1), v13))
    {
      if (__swbuf(v10, a2) == -1) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v14 = a2->_p++;
      unsigned __int8 *v14 = v10;
    }
    --v8;
  }
  while (v8);
  return v4;
}

wint_t fputwc(__int32 a1, FILE *a2)
{
  uint64_t v3 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v5 = __locale_key;
  wint_t v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = &__global_locale;
  }
  wint_t v8 = __fputwc(v3, a2, (uint64_t)v7);
  funlockfile(a2);
  return v8;
}

wint_t fputwc_l(__int32 a1, FILE *a2, locale_t a3)
{
  uint64_t v5 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  locale_t v7 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v7 = a3;
  }
  if (a3) {
    wint_t v8 = (char *)v7;
  }
  else {
    wint_t v8 = __c_locale;
  }
  wint_t v9 = __fputwc(v5, a2, (uint64_t)v8);
  funlockfile(a2);
  return v9;
}

int fputws_l(const __int32 *a1, FILE *a2, locale_t a3)
{
  int v11 = a1;
  locale_t v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v4 = a3;
  }
  if (a3) {
    uint64_t v5 = (char *)v4;
  }
  else {
    uint64_t v5 = __c_locale;
  }
  wint_t v6 = *(uint64_t (**)(unsigned char *, const __int32 **, uint64_t, uint64_t, char *, char *))(*((void *)v5 + 166)
                                                                                             + 104);
  flockfile(a2);
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  if ((a2->_flags & 8) != 0 && ((a2->_flags & 0x200) != 0 || a2->_bf._base) || !__swsetup((uint64_t)a2))
  {
    uint64_t v14 = &v12;
    LODWORD(v15) = 1;
    int v12 = v16;
    while (1)
    {
      uint64_t v10 = v6(v16, &v11, -1, 1024, (char *)a2->_extra + 80, v5);
      if (v10 == -1) {
        break;
      }
      HIDWORD(v15) = v10;
      uint64_t v13 = (int)v10;
      if (__sfvwrite((uint64_t)a2, (uint64_t)&v14)) {
        break;
      }
      if (!v11)
      {
        int v8 = 0;
        goto LABEL_13;
      }
    }
  }
  int v8 = -1;
LABEL_13:
  funlockfile(a2);
  return v8;
}

int fputws(const __int32 *a1, FILE *a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (_xlocale *)&__global_locale;
  }
  return fputws_l(a1, a2, v4);
}

uint64_t strtonum(const char *__numstr, uint64_t __minval, uint64_t __maxval, const char **__errstrp)
{
  v15[0] = xmmword_1E543EC60;
  v15[1] = *(_OWORD *)&off_1E543EC70;
  v15[2] = xmmword_1E543EC80;
  v15[3] = *(_OWORD *)&off_1E543EC90;
  DWORD2(v15[0]) = *__error();
  *__error() = 0;
  if (__minval > __maxval
    || (__endptr = 0, uint64_t v8 = strtoll(__numstr, &__endptr, 10), *__error() == 22)
    || __endptr == __numstr
    || *__endptr)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 1;
    goto LABEL_6;
  }
  if (v8 != 0x8000000000000000)
  {
    if (v8 < __minval)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 2;
      goto LABEL_6;
    }
    if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*__error() != 34)
      {
        uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        if (__maxval == 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v10 = 0;
          goto LABEL_6;
        }
      }
      goto LABEL_20;
    }
LABEL_19:
    if (v8 <= __maxval)
    {
      uint64_t v10 = 0;
      uint64_t v9 = v8;
      goto LABEL_6;
    }
LABEL_20:
    uint64_t v9 = 0;
    uint64_t v10 = 3;
    goto LABEL_6;
  }
  uint64_t v13 = __error();
  uint64_t v9 = 0;
  uint64_t v10 = 2;
  if (*v13 != 34 && __minval == 0x8000000000000000) {
    goto LABEL_19;
  }
LABEL_6:
  if (__errstrp) {
    *__errstrp = *(const char **)&v15[v10];
  }
  int v11 = DWORD2(v15[v10]);
  *__error() = v11;
  return v9;
}

FILE *__cdecl freopen(const char *a1, const char *a2, FILE *a3)
{
  if (off_1E911B938)
  {
    ((void (*)(const char *))off_1E911B938)(a1);
    if (off_1E911B938) {
      ((void (*)(const char *))off_1E911B938)(a2);
    }
  }
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(a3, 152);
  }
  int v21 = 0;
  int v6 = __sflags((char *)a2, &v21);
  if (!v6)
  {
    int v9 = *__error();
    fclose(a3);
LABEL_14:
    a3 = 0;
    *__error() = v9;
    return a3;
  }
  __int16 v7 = v6;
  pthread_once(&__sdidinit, __sinit);
  flockfile(a3);
  if (a1)
  {
    if (a3->_flags)
    {
      if ((a3->_flags & 8) != 0) {
        __sflush((uint64_t)a3);
      }
      close = a3->_close;
      if (close) {
        ((void (*)(void *))close)(a3->_cookie);
      }
    }
    else
    {
      a3->___int16 flags = 32;
    }
    unsigned int file = open_NOCANCEL();
    int v13 = *__error();
    goto LABEL_31;
  }
  if (!a3->_flags)
  {
    funlockfile(a3);
    uint64_t v18 = __error();
    a3 = 0;
    int v19 = 22;
    goto LABEL_49;
  }
  int v10 = fcntl_NOCANCEL();
  if (v10 < 0) {
    goto LABEL_47;
  }
  int v11 = v10;
  if ((v10 & 3) != 2 && (v10 & 3) != (v21 & 3))
  {
    fclose(a3);
    funlockfile(a3);
    uint64_t v18 = __error();
    a3 = 0;
    int v19 = 9;
    goto LABEL_49;
  }
  if ((a3->_flags & 8) != 0) {
    __sflush((uint64_t)a3);
  }
  __int16 v12 = v21;
  if (((v21 ^ v11) & 8) == 0) {
    goto LABEL_24;
  }
  if ((fcntl_NOCANCEL() & 0x80000000) != 0)
  {
LABEL_47:
    int v9 = *__error();
    fclose(a3);
    funlockfile(a3);
    goto LABEL_14;
  }
  __int16 v12 = v21;
LABEL_24:
  if ((v12 & 0x400) != 0)
  {
    ftruncate(a3->_file, 0);
    LOBYTE(v12) = v21;
  }
  if ((v12 & 8) == 0) {
    _sseek((uint64_t)a3, 0, 0);
  }
  int v13 = 0;
  unsigned int file = a3->_file;
LABEL_31:
  if ((a3->_flags & 0x80) != 0) {
    free(a3->_bf._base);
  }
  a3->_bf._base = 0;
  a3->_bf._int size = 0;
  a3->_lbfint size = 0;
  a3->_p = 0;
  *(void *)&a3->_uint64_t r = 0;
  base = (FILE *)a3->_ub._base;
  if (base)
  {
    if (base != (FILE *)a3->_ubuf) {
      free(base);
    }
    a3->_ub._base = 0;
  }
  a3->_ub._int size = 0;
  uint64_t v16 = a3->_lb._base;
  if (v16)
  {
    free(v16);
    a3->_lb._base = 0;
  }
  a3->_lb._int size = 0;
  *((unsigned char *)a3->_extra + 72) &= 0xF8u;
  extra = a3->_extra;
  *((_OWORD *)extra + 11) = 0u;
  *((_OWORD *)extra + 12) = 0u;
  *((_OWORD *)extra + 9) = 0u;
  *((_OWORD *)extra + 10) = 0u;
  *((_OWORD *)extra + 7) = 0u;
  *((_OWORD *)extra + 8) = 0u;
  *((_OWORD *)extra + 5) = 0u;
  *((_OWORD *)extra + 6) = 0u;
  if ((file & 0x80000000) != 0)
  {
    funlockfile(a3);
    __sfprelease((uint64_t)a3);
    a3 = 0;
    *__error() = v13;
  }
  else
  {
    if (file >= 0x8000)
    {
      funlockfile(a3);
      __sfprelease((uint64_t)a3);
      uint64_t v18 = __error();
      a3 = 0;
      int v19 = 24;
LABEL_49:
      *uint64_t v18 = v19;
      return a3;
    }
    a3->___int16 flags = v7;
    a3->_unsigned int file = file;
    a3->_read = (int (__cdecl *)(void *, char *, int))__sread;
    a3->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    a3->_seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    a3->_cookie = a3;
    a3->_close = (int (__cdecl *)(void *))__sclose;
    if ((v21 & 8) != 0) {
      _sseek((uint64_t)a3, 0, 2);
    }
    funlockfile(a3);
  }
  return a3;
}

int fscanf(FILE *a1, const char *a2, ...)
{
  va_start(va, a2);
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(a1, 152);
  }
  flockfile(a1);
  uint64_t v4 = __locale_key;
  uint64_t v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = (_xlocale *)&__global_locale;
  }
  int v7 = __svfscanf_l((char **)a1, v6, (unsigned __int8 *)a2, (wint_t **)va);
  funlockfile(a1);
  return v7;
}

int fscanf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  va_start(va, a3);
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(a1, 152);
  }
  locale_t v6 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v6 = a2;
  }
  if (a2) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)__c_locale;
  }
  flockfile(a1);
  int v8 = __svfscanf_l((char **)a1, v7, (unsigned __int8 *)a3, (wint_t **)va);
  funlockfile(a1);
  return v8;
}

int fsetpos(FILE *a1, const fpos_t *a2)
{
  return fseeko(a1, *a2, 0);
}

uint64_t _fwalk(unsigned int (*a1)(uint64_t))
{
  uint64_t v2 = 0;
  uint64_t v3 = &__sglue;
  do
  {
    int v4 = *((_DWORD *)v3 + 2);
    if (v4 >= 1)
    {
      uint64_t v5 = v3[2];
      unsigned int v6 = v4 + 1;
      do
      {
        if (*(__int16 *)(v5 + 16) >= 1) {
          uint64_t v2 = a1(v5) | v2;
        }
        v5 += 152;
        --v6;
      }
      while (v6 > 1);
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  return v2;
}

int fwide(FILE *a1, int a2)
{
  flockfile(a1);
  if (a2)
  {
    extra = a1->_extra;
    if ((*((unsigned char *)extra + 72) & 7) == 0)
    {
      if (a2 >= 1) {
        char v5 = 1;
      }
      else {
        char v5 = 7;
      }
      *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | v5;
    }
  }
  int v6 = *((unsigned __int8 *)a1->_extra + 72) << 29 >> 29;
  funlockfile(a1);
  return v6;
}

int fwprintf(FILE *a1, const __int32 *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    char v5 = v4;
  }
  else {
    char v5 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(a1, v5, a2, va);
}

int fwprintf_l(FILE *a1, locale_t a2, const __int32 *a3, ...)
{
  va_start(va, a3);
  return vfwprintf_l(a1, a2, a3, va);
}

int fwscanf(FILE *a1, const __int32 *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    char v5 = v4;
  }
  else {
    char v5 = (_xlocale *)&__global_locale;
  }
  return vfwscanf_l(a1, v5, a2, va);
}

int fwscanf_l(FILE *a1, locale_t a2, const __int32 *a3, ...)
{
  va_start(va, a3);
  return vfwscanf_l(a1, a2, a3, va);
}

int getc(FILE *a1)
{
  flockfile(a1);
  int r = a1->_r;
  a1->_int r = r - 1;
  if (r <= 0)
  {
    int v4 = __srget(a1);
  }
  else
  {
    uint64_t v3 = a1->_p++;
    int v4 = *v3;
  }
  funlockfile(a1);
  return v4;
}

int getc_unlocked(FILE *a1)
{
  int r = a1->_r;
  a1->_int r = r - 1;
  if (r <= 0) {
    return __srget(a1);
  }
  uint64_t v2 = a1->_p++;
  return *v2;
}

int getchar(void)
{
  flockfile(__stdinp);
  uint64_t v0 = __stdinp;
  int r = __stdinp->_r;
  __stdinp->_int r = r - 1;
  if (r <= 0)
  {
    int v3 = __srget(v0);
  }
  else
  {
    uint64_t v2 = v0->_p++;
    int v3 = *v2;
  }
  funlockfile(__stdinp);
  return v3;
}

int getchar_unlocked(void)
{
  uint64_t v0 = __stdinp;
  int r = __stdinp->_r;
  __stdinp->_int r = r - 1;
  if (r <= 0) {
    return __srget(v0);
  }
  uint64_t v2 = v0->_p++;
  return *v2;
}

ssize_t getdelim(char **__linep, size_t *__linecapp, int __delimiter, FILE *__stream)
{
  char v5 = *(_filesec **)&__delimiter;
  flockfile(__stream);
  extra = __stream->_extra;
  if ((*((unsigned char *)extra + 72) & 7) != 0)
  {
    if (!__linep) {
      goto LABEL_15;
    }
  }
  else
  {
    *((unsigned char *)extra + 72) |= 7u;
    if (!__linep)
    {
LABEL_15:
      *__error() = 22;
      goto LABEL_16;
    }
  }
  if (!__linecapp) {
    goto LABEL_15;
  }
  if (!*__linep) {
    *__linecapp = 0;
  }
  if (__stream->_r <= 0 && __srefill((uint64_t)__stream))
  {
    if ((__stream->_flags & 0x40) == 0)
    {
      if (!*__linecapp)
      {
        uint64_t v14 = (char *)malloc_type_realloc(*__linep, 1uLL, 0x79E47995uLL);
        if (!v14) {
          goto LABEL_16;
        }
        *__linecapp = 1;
        *__linep = v14;
      }
      funlockfile(__stream);
      **__linep = 0;
      return -1;
    }
LABEL_16:
    __stream->_flags |= 0x40u;
    funlockfile(__stream);
    return -1;
  }
  ssize_t v17 = 0;
  while (1)
  {
    p = __stream->_p;
    uint64_t r = __stream->_r;
    uint64_t v11 = j__mkdirx_np((const char *)__stream->_p, v5);
    if (v11) {
      break;
    }
    if (sappend((void **)__linep, &v17, __linecapp, (char *)p, r)) {
      goto LABEL_16;
    }
    if (__srefill((uint64_t)__stream))
    {
      if ((__stream->_flags & 0x40) != 0) {
        goto LABEL_16;
      }
      goto LABEL_27;
    }
  }
  uint64_t v15 = (unsigned __int8 *)(v11 + 1);
  if (sappend((void **)__linep, &v17, __linecapp, (char *)p, v11 + 1 - (void)p)) {
    goto LABEL_16;
  }
  __stream->_r += LODWORD(__stream->_p) - v15;
  __stream->_p = v15;
LABEL_27:
  uint64_t v16 = *__linep;
  ssize_t v12 = v17;
  v16[v17] = 0;
  funlockfile(__stream);
  return v12;
}

uint64_t sappend(void **a1, void *a2, unint64_t *a3, char *a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a5 + *a2;
  BOOL v7 = __CFADD__(a5, *a2);
  BOOL v8 = __CFADD__(v6, 1);
  unint64_t v9 = v6 + 1;
  uint64_t v10 = v8;
  uint64_t v11 = v10 << 63 >> 63;
  BOOL v12 = v11 != v10;
  if (v7 || v12 || v11 < 0 || v9 >= 0x8000000000000001)
  {
    *__error() = 84;
    return 0xFFFFFFFFLL;
  }
  if (*a3 >= v9)
  {
    int v22 = *a1;
  }
  else
  {
    size_t v19 = 0x8000000000000000;
    if (v9 != 0x8000000000000000)
    {
      size_t v19 = v9;
      if ((v9 & (v9 - 1)) != 0)
      {
        unint64_t v20 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
        unint64_t v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
        size_t v19 = (v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32)) + 1;
      }
    }
    int v22 = malloc_type_realloc(*a1, v19, 0x79E47995uLL);
    if (!v22) {
      return 0xFFFFFFFFLL;
    }
    *a3 = v19;
    *a1 = v22;
  }
  j__mkdtempat_np(v22 + v5, a4);
  uint64_t result = 0;
  *a2 = v5 + a5;
  return result;
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return getdelim(__linep, __linecapp, 10, __stream);
}

char *__cdecl gets(char *a1)
{
  flockfile(__stdinp);
  extra = __stdinp->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  if ((gets_warned & 1) == 0)
  {
    write_NOCANCEL();
    gets_warned = 1;
  }
  for (uint64_t i = 0; ; ++i)
  {
    int v4 = __stdinp;
    int r = __stdinp->_r;
    __stdinp->_int r = r - 1;
    if (r <= 0)
    {
      int v7 = __srget(v4);
    }
    else
    {
      uint64_t v6 = v4->_p++;
      int v7 = *v6;
    }
    if (v7 == 10) {
      goto LABEL_13;
    }
    if (v7 == -1) {
      break;
    }
    a1[i] = v7;
  }
  if (i)
  {
LABEL_13:
    a1[i] = 0;
    goto LABEL_15;
  }
  a1 = 0;
LABEL_15:
  funlockfile(__stdinp);
  return a1;
}

int getw(FILE *a1)
{
  __ptint r = 0;
  if (fread(&__ptr, 4uLL, 1uLL, a1) == 1) {
    return __ptr;
  }
  else {
    return -1;
  }
}

wint_t getwc(FILE *a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    int v3 = v2;
  }
  else {
    int v3 = (_xlocale *)&__global_locale;
  }
  return fgetwc_l(a1, v3);
}

wint_t getwchar(void)
{
  uint64_t v0 = __stdinp;
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    int v3 = v2;
  }
  else {
    int v3 = (_xlocale *)&__global_locale;
  }
  return fgetwc_l(v0, v3);
}

wint_t getwchar_l(locale_t a1)
{
  return fgetwc_l(__stdinp, a1);
}

int mkostemps(char *path, int slen, int oflags)
{
  int v5 = oflags;
  int v4 = 0;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else if (find_temp_path(4294967294, path, *(size_t *)&slen, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, (uint64_t)&v5, (uint64_t)&v4))
  {
    return v4;
  }
  else
  {
    return -1;
  }
}

int mkstempsat_np(int dfd, char *path, int slen)
{
  int v4 = 0;
  if (find_temp_path(*(uint64_t *)&dfd, path, *(size_t *)&slen, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, 0, (uint64_t)&v4))return v4; {
  else
  }
    return -1;
}

int mkostemp(char *path, int oflags)
{
  int v4 = oflags;
  int v3 = 0;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }
  else if (find_temp_path(4294967294, path, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action, (uint64_t)&v4, (uint64_t)&v3))
  {
    return v3;
  }
  else
  {
    return -1;
  }
}

char *__cdecl mkdtempat_np(int dfd, char *path)
{
  if (find_temp_path(*(uint64_t *)&dfd, path, 0, 1, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkdtemp_action, 0, 0))return path; {
  else
  }
    return 0;
}

const char *_mktemp(const char *a1)
{
  if (find_temp_path(4294967294, a1, 0, 0, (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mktemp_action, 0, 0))return a1; {
  else
  }
    return 0;
}

int rpmatch(const char *a1)
{
  memset(&v8, 0, sizeof(v8));
  memset(&v7, 0, sizeof(v7));
  uint64_t v2 = nl_langinfo(52);
  if (regcomp(&v8, v2, 5)) {
    return -1;
  }
  int v4 = nl_langinfo(53);
  if (regcomp(&v7, v4, 5))
  {
    int v3 = -1;
    int v5 = &v8;
  }
  else
  {
    if (regexec(&v8, a1, 0, 0, 0))
    {
      if (regexec(&v7, a1, 0, 0, 0)) {
        int v3 = -1;
      }
      else {
        int v3 = 0;
      }
    }
    else
    {
      int v3 = 1;
    }
    regfree(&v8);
    int v5 = &v7;
  }
  regfree(v5);
  return v3;
}

BOOL __find_arguments(unsigned __int8 *a1, _DWORD *a2, _DWORD **a3)
{
  int v5 = a1;
  uint64_t v6 = 0;
  long long v70 = 0u;
  LODWORD(v70) = 8;
  DWORD2(v70) = 1;
  memset(v69, 0, sizeof(v69));
  mbstate_t v71 = a1;
  ptint r = v69;
  do
  {
    *(_DWORD *)((char *)ptr + v6) = 0;
    v6 += 4;
  }
  while (v6 != 32);
LABEL_3:
  while (*v5 != 37)
  {
    if (!*v5)
    {
LABEL_181:
      build_arg_table((uint64_t)&ptr, a2, a3);
      int v66 = 1;
      goto LABEL_183;
    }
    ++v5;
  }
  unsigned int v7 = 0;
  regex_t v8 = v5 + 1;
LABEL_7:
  int v5 = v8 + 1;
  mbstate_t v71 = v8 + 1;
  int v9 = (char)*v8;
  while (2)
  {
    while ((v9 - 49) < 9)
    {
      int v10 = 0;
      do
      {
        int v10 = v9 + 10 * v10 - 48;
        int v11 = (char)*v5++;
        int v9 = v11;
      }
      while ((v11 - 48) < 0xA);
      if (v9 == 36)
      {
        mbstate_t v71 = v5;
        DWORD2(v70) = v10;
        goto LABEL_31;
      }
    }
    switch(v9)
    {
      case ' ':
      case '#':
      case '\'':
      case '+':
      case '-':
      case '0':
        mbstate_t v71 = v5;
        goto LABEL_31;
      case '*':
        goto LABEL_19;
      case '.':
        int v12 = (char)*v5++;
        int v9 = v12;
        if (v12 != 42)
        {
          if ((v9 - 48) <= 9)
          {
            do
            {
              int v13 = (char)*v5++;
              int v9 = v13;
            }
            while ((v13 - 48) < 0xA);
          }
          continue;
        }
LABEL_19:
        mbstate_t v71 = v5;
        if (addaster((uint64_t)&ptr, &v71)) {
          goto LABEL_182;
        }
LABEL_31:
        regex_t v8 = v71;
        goto LABEL_7;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        mbstate_t v71 = v5;
        if ((v7 & 8) != 0) {
          int v17 = 23;
        }
        else {
          int v17 = 22;
        }
        goto LABEL_83;
      case 'C':
        mbstate_t v71 = v5;
        LOWORD(v7) = v7 | 0x10;
        goto LABEL_77;
      case 'D':
        mbstate_t v71 = v5;
        LOWORD(v7) = v7 | 0x10;
        goto LABEL_41;
      case 'L':
        mbstate_t v71 = v5;
        v7 |= 8u;
        goto LABEL_31;
      case 'O':
        mbstate_t v71 = v5;
        LOWORD(v7) = v7 | 0x10;
        goto LABEL_119;
      case 'S':
        LOBYTE(v7) = 16;
        goto LABEL_50;
      case 'U':
        mbstate_t v71 = v5;
        LOWORD(v7) = v7 | 0x10;
        goto LABEL_54;
      case 'X':
      case 'u':
      case 'x':
        mbstate_t v71 = v5;
LABEL_54:
        int v25 = DWORD2(v70);
        uint64_t v26 = (int)v70;
        BOOL v27 = SDWORD2(v70) < (int)v70;
        goto LABEL_55;
      case 'c':
        mbstate_t v71 = v5;
LABEL_77:
        if ((v7 & 0x4000) != 0) {
          int v33 = 26;
        }
        else {
          int v33 = 2;
        }
        if ((v7 & 0x10) != 0) {
          int v17 = 24;
        }
        else {
          int v17 = v33;
        }
        goto LABEL_83;
      case 'd':
      case 'i':
        mbstate_t v71 = v5;
LABEL_41:
        int v18 = DWORD2(v70);
        uint64_t v19 = (int)v70;
        if (SDWORD2(v70) < (int)v70) {
          goto LABEL_138;
        }
        unint64_t v20 = ptr;
        if (2 * (int)v70 <= SDWORD2(v70)) {
          int v21 = DWORD2(v70) + 1;
        }
        else {
          int v21 = 2 * v70;
        }
        if (v70 == 8)
        {
          int v22 = (char *)malloc_type_malloc(4 * v21, 0x100004052888210uLL);
          if (!v22) {
            goto LABEL_182;
          }
          BOOL v23 = v22;
          long long v24 = v20[1];
          *(_OWORD *)int v22 = *v20;
          *((_OWORD *)v22 + 1) = v24;
        }
        else
        {
          BOOL v23 = (char *)malloc_type_realloc(ptr, 4 * v21, 0x100004052888210uLL);
          if (!v23) {
            goto LABEL_182;
          }
        }
        if ((int)v19 < v21) {
          MEMORY[0x18C122530](&v23[4 * v19], 4 * (v21 + ~v19) + 4);
        }
        ptint r = v23;
        LODWORD(v70) = v21;
        int v18 = DWORD2(v70);
LABEL_138:
        if (v18 > SDWORD1(v70)) {
          DWORD1(v70) = v18;
        }
        if ((v7 & 0x1000) != 0)
        {
          DWORD2(v70) = v18 + 1;
          *((_DWORD *)ptr + v18) = 16;
        }
        else if ((v7 & 0x400) != 0)
        {
          DWORD2(v70) = v18 + 1;
          *((_DWORD *)ptr + v18) = 13;
        }
        else if ((v7 & 0x800) != 0)
        {
          DWORD2(v70) = v18 + 1;
          *((_DWORD *)ptr + v18) = 11;
        }
        else if ((v7 & 0x20) != 0)
        {
          DWORD2(v70) = v18 + 1;
          *((_DWORD *)ptr + v18) = 8;
        }
        else
        {
          DWORD2(v70) = v18 + 1;
          if ((v7 & 0x10) != 0) {
            *((_DWORD *)ptr + v18) = 5;
          }
          else {
            *((_DWORD *)ptr + v18) = 2;
          }
        }
        goto LABEL_3;
      case 'h':
        mbstate_t v71 = v5;
        unsigned int v14 = v7 & 0xFFFFDFBF | 0x2000;
        int v15 = v7 | 0x40;
        BOOL v16 = (v7 & 0x40) == 0;
        goto LABEL_25;
      case 'j':
        mbstate_t v71 = v5;
        v7 |= 0x1000u;
        goto LABEL_31;
      case 'l':
        mbstate_t v71 = v5;
        unsigned int v14 = v7 & 0xFFFFFFCF | 0x20;
        int v15 = v7 | 0x10;
        BOOL v16 = (v7 & 0x10) == 0;
LABEL_25:
        if (v16) {
          unsigned int v7 = v15;
        }
        else {
          unsigned int v7 = v14;
        }
        goto LABEL_31;
      case 'n':
        mbstate_t v71 = v5;
        if ((v7 & 0x1000) != 0)
        {
          int v59 = DWORD2(v70);
          uint64_t v60 = (int)v70;
          if (SDWORD2(v70) >= (int)v70)
          {
            uint64_t v61 = ptr;
            if (2 * (int)v70 <= SDWORD2(v70)) {
              int v62 = DWORD2(v70) + 1;
            }
            else {
              int v62 = 2 * v70;
            }
            if (v70 == 8)
            {
              unsigned int v63 = (char *)malloc_type_malloc(4 * v62, 0x100004052888210uLL);
              if (!v63) {
                goto LABEL_182;
              }
              int v64 = v63;
              long long v65 = v61[1];
              *(_OWORD *)unsigned int v63 = *v61;
              *((_OWORD *)v63 + 1) = v65;
            }
            else
            {
              int v64 = (char *)malloc_type_realloc(ptr, 4 * v62, 0x100004052888210uLL);
              if (!v64) {
                goto LABEL_182;
              }
            }
            if ((int)v60 < v62) {
              MEMORY[0x18C122530](&v64[4 * v60], 4 * (v62 + ~v60) + 4);
            }
            ptint r = v64;
            LODWORD(v70) = v62;
            int v59 = DWORD2(v70);
          }
          if (v59 > SDWORD1(v70)) {
            DWORD1(v70) = v59;
          }
          DWORD2(v70) = v59 + 1;
          *((_DWORD *)ptr + v59) = 18;
          goto LABEL_3;
        }
        if ((v7 & 0x2000) != 0) {
          int v41 = 21;
        }
        else {
          int v41 = 4;
        }
        if ((v7 & 0x40) != 0) {
          int v42 = 1;
        }
        else {
          int v42 = v41;
        }
        if ((v7 & 0x10) != 0) {
          int v43 = 7;
        }
        else {
          int v43 = v42;
        }
        if ((v7 & 0x20) != 0) {
          int v44 = 10;
        }
        else {
          int v44 = v43;
        }
        if ((v7 & 0x400) != 0) {
          int v45 = 15;
        }
        else {
          int v45 = v44;
        }
        if ((v7 & 0x800) != 0) {
          int v46 = 12;
        }
        else {
          int v46 = v45;
        }
        if (!addtype((uint64_t)&ptr, v46)) {
          goto LABEL_3;
        }
LABEL_182:
        int v66 = 0;
LABEL_183:
        if (ptr != v69) {
          free(ptr);
        }
        return !v66 || *a3 == 0;
      case 'o':
        mbstate_t v71 = v5;
LABEL_119:
        int v25 = DWORD2(v70);
        uint64_t v26 = (int)v70;
        BOOL v27 = SDWORD2(v70) < (int)v70;
        if ((v7 & 0x4000) != 0)
        {
          if (SDWORD2(v70) >= (int)v70)
          {
            int v47 = ptr;
            if (2 * (int)v70 <= SDWORD2(v70)) {
              int v48 = DWORD2(v70) + 1;
            }
            else {
              int v48 = 2 * v70;
            }
            if (v70 == 8)
            {
              int v49 = (char *)malloc_type_malloc(4 * v48, 0x100004052888210uLL);
              if (!v49) {
                goto LABEL_182;
              }
              uint64_t v50 = v49;
              long long v51 = v47[1];
              *(_OWORD *)int v49 = *v47;
              *((_OWORD *)v49 + 1) = v51;
            }
            else
            {
              uint64_t v50 = (char *)malloc_type_realloc(ptr, 4 * v48, 0x100004052888210uLL);
              if (!v50) {
                goto LABEL_182;
              }
            }
            if ((int)v26 < v48) {
              MEMORY[0x18C122530](&v50[4 * v26], 4 * (v48 + ~v26) + 4);
            }
            ptint r = v50;
            LODWORD(v70) = v48;
            int v25 = DWORD2(v70);
          }
          if (v25 > SDWORD1(v70)) {
            DWORD1(v70) = v25;
          }
          DWORD2(v70) = v25 + 1;
          *((_DWORD *)ptr + v25) = 26;
        }
        else
        {
LABEL_55:
          if (!v27)
          {
            unint64_t v28 = ptr;
            if (2 * (int)v26 <= v25) {
              int v29 = v25 + 1;
            }
            else {
              int v29 = 2 * v26;
            }
            if (v26 == 8)
            {
              int v30 = (char *)malloc_type_malloc(4 * v29, 0x100004052888210uLL);
              if (!v30) {
                goto LABEL_182;
              }
              unsigned int v31 = v30;
              long long v32 = v28[1];
              *(_OWORD *)int v30 = *v28;
              *((_OWORD *)v30 + 1) = v32;
            }
            else
            {
              unsigned int v31 = (char *)malloc_type_realloc(ptr, 4 * v29, 0x100004052888210uLL);
              if (!v31) {
                goto LABEL_182;
              }
            }
            if ((int)v26 < v29) {
              MEMORY[0x18C122530](&v31[4 * v26], 4 * (v29 + ~v26) + 4);
            }
            ptint r = v31;
            LODWORD(v70) = v29;
            int v25 = DWORD2(v70);
          }
          if (v25 > SDWORD1(v70)) {
            DWORD1(v70) = v25;
          }
          if ((v7 & 0x1000) != 0)
          {
            DWORD2(v70) = v25 + 1;
            *((_DWORD *)ptr + v25) = 17;
          }
          else if ((v7 & 0x400) != 0 || (v7 & 0x800) != 0)
          {
            DWORD2(v70) = v25 + 1;
            *((_DWORD *)ptr + v25) = 14;
          }
          else if ((v7 & 0x20) != 0)
          {
            DWORD2(v70) = v25 + 1;
            *((_DWORD *)ptr + v25) = 9;
          }
          else
          {
            DWORD2(v70) = v25 + 1;
            if ((v7 & 0x10) != 0) {
              *((_DWORD *)ptr + v25) = 6;
            }
            else {
              *((_DWORD *)ptr + v25) = 3;
            }
          }
        }
        goto LABEL_3;
      case 'p':
        mbstate_t v71 = v5;
        int v52 = DWORD2(v70);
        uint64_t v53 = (int)v70;
        if (SDWORD2(v70) < (int)v70) {
          goto LABEL_168;
        }
        int v54 = ptr;
        if (2 * (int)v70 <= SDWORD2(v70)) {
          int v55 = DWORD2(v70) + 1;
        }
        else {
          int v55 = 2 * v70;
        }
        if (v70 == 8)
        {
          int v56 = (char *)malloc_type_malloc(4 * v55, 0x100004052888210uLL);
          if (!v56) {
            goto LABEL_182;
          }
          int v57 = v56;
          long long v58 = v54[1];
          *(_OWORD *)int v56 = *v54;
          *((_OWORD *)v56 + 1) = v58;
        }
        else
        {
          int v57 = (char *)malloc_type_realloc(ptr, 4 * v55, 0x100004052888210uLL);
          if (!v57) {
            goto LABEL_182;
          }
        }
        if ((int)v53 < v55) {
          MEMORY[0x18C122530](&v57[4 * v53], 4 * (v55 + ~v53) + 4);
        }
        ptint r = v57;
        LODWORD(v70) = v55;
        int v52 = DWORD2(v70);
LABEL_168:
        if (v52 > SDWORD1(v70)) {
          DWORD1(v70) = v52;
        }
        DWORD2(v70) = v52 + 1;
        *((_DWORD *)ptr + v52) = 19;
        goto LABEL_3;
      case 'q':
        mbstate_t v71 = v5;
        v7 |= 0x20u;
        goto LABEL_31;
      case 's':
LABEL_50:
        mbstate_t v71 = v5;
        if ((v7 & 0x10) != 0) {
          int v17 = 25;
        }
        else {
          int v17 = 20;
        }
LABEL_83:
        int v34 = DWORD2(v70);
        uint64_t v35 = (int)v70;
        if (SDWORD2(v70) < (int)v70) {
          goto LABEL_94;
        }
        int v36 = ptr;
        if (2 * (int)v70 <= SDWORD2(v70)) {
          int v37 = DWORD2(v70) + 1;
        }
        else {
          int v37 = 2 * v70;
        }
        if (v70 == 8)
        {
          unsigned int v38 = (char *)malloc_type_malloc(4 * v37, 0x100004052888210uLL);
          if (!v38) {
            goto LABEL_182;
          }
          stat v39 = v38;
          long long v40 = v36[1];
          *(_OWORD *)unsigned int v38 = *v36;
          *((_OWORD *)v38 + 1) = v40;
        }
        else
        {
          stat v39 = (char *)malloc_type_realloc(ptr, 4 * v37, 0x100004052888210uLL);
          if (!v39) {
            goto LABEL_182;
          }
        }
        if ((int)v35 < v37) {
          MEMORY[0x18C122530](&v39[4 * v35], 4 * (v37 + ~v35) + 4);
        }
        ptint r = v39;
        LODWORD(v70) = v37;
        int v34 = DWORD2(v70);
LABEL_94:
        if (v34 > SDWORD1(v70)) {
          DWORD1(v70) = v34;
        }
        DWORD2(v70) = v34 + 1;
        *((_DWORD *)ptr + v34) = v17;
        goto LABEL_3;
      case 't':
        mbstate_t v71 = v5;
        v7 |= 0x800u;
        goto LABEL_31;
      case 'z':
        mbstate_t v71 = v5;
        v7 |= 0x400u;
        goto LABEL_31;
      default:
        mbstate_t v71 = v5;
        if (!v9) {
          goto LABEL_181;
        }
        goto LABEL_3;
    }
  }
}

uint64_t addaster(uint64_t a1, unsigned __int8 **a2)
{
  int v4 = *a2;
  unsigned int v5 = (char)**a2 - 48;
  if (v5 > 9)
  {
    int v6 = 0;
    int v9 = **a2;
  }
  else
  {
    int v6 = 0;
    do
    {
      int v6 = v5 + 10 * v6;
      int v8 = (char)*++v4;
      unsigned __int8 v7 = v8;
      unsigned int v5 = v8 - 48;
    }
    while ((v8 - 48) < 0xA);
    int v9 = v7;
  }
  int v10 = *(_DWORD *)(a1 + 48);
  if (v9 == 36)
  {
    *(_DWORD *)(a1 + 48) = v6;
    uint64_t v11 = *(int *)(a1 + 40);
    if (v6 < (int)v11)
    {
LABEL_25:
      if (v6 > *(_DWORD *)(a1 + 44)) {
        *(_DWORD *)(a1 + 44) = v6;
      }
      uint64_t result = 0;
      *(_DWORD *)(*(void *)a1 + 4 * v6) = 2;
      *(_DWORD *)(a1 + 48) = v10;
      *a2 = v4 + 1;
      return result;
    }
    int v12 = *(_OWORD **)a1;
    if (2 * (int)v11 <= v6) {
      int v13 = v6 + 1;
    }
    else {
      int v13 = 2 * v11;
    }
    if (v11 == 8)
    {
      unsigned int v14 = (char *)malloc_type_malloc(4 * v13, 0x100004052888210uLL);
      if (v14)
      {
        int v15 = v14;
        long long v16 = v12[1];
        *(_OWORD *)unsigned int v14 = *v12;
        *((_OWORD *)v14 + 1) = v16;
LABEL_22:
        if ((int)v11 < v13) {
          MEMORY[0x18C122530](&v15[4 * v11], 4 * (v13 + ~v11) + 4);
        }
        *(void *)a1 = v15;
        *(_DWORD *)(a1 + 40) = v13;
        int v6 = *(_DWORD *)(a1 + 48);
        goto LABEL_25;
      }
    }
    else
    {
      int v15 = (char *)malloc_type_realloc(*(void **)a1, 4 * v13, 0x100004052888210uLL);
      if (v15) {
        goto LABEL_22;
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = *(int *)(a1 + 40);
  if (v10 >= (int)v17)
  {
    int v18 = *(_OWORD **)a1;
    if (2 * (int)v17 <= v10) {
      int v19 = v10 + 1;
    }
    else {
      int v19 = 2 * v17;
    }
    if (v17 == 8)
    {
      unint64_t v20 = (char *)malloc_type_malloc(4 * v19, 0x100004052888210uLL);
      if (!v20) {
        return 0xFFFFFFFFLL;
      }
      int v21 = v20;
      long long v22 = v18[1];
      *(_OWORD *)unint64_t v20 = *v18;
      *((_OWORD *)v20 + 1) = v22;
    }
    else
    {
      int v21 = (char *)malloc_type_realloc(*(void **)a1, 4 * v19, 0x100004052888210uLL);
      if (!v21) {
        return 0xFFFFFFFFLL;
      }
    }
    if ((int)v17 < v19) {
      MEMORY[0x18C122530](&v21[4 * v17], 4 * (v19 + ~v17) + 4);
    }
    *(void *)a1 = v21;
    *(_DWORD *)(a1 + 40) = v19;
    int v10 = *(_DWORD *)(a1 + 48);
  }
  if (v10 > *(_DWORD *)(a1 + 44)) {
    *(_DWORD *)(a1 + 44) = v10;
  }
  uint64_t result = 0;
  long long v24 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v10 + 1;
  v24[v10] = 2;
  return result;
}

uint64_t addtype(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = *(int *)(a1 + 40);
  if (v4 >= (int)v5)
  {
    int v6 = *(_OWORD **)a1;
    if (2 * (int)v5 <= v4) {
      int v7 = v4 + 1;
    }
    else {
      int v7 = 2 * v5;
    }
    if (v5 == 8)
    {
      int v8 = (char *)malloc_type_malloc(4 * v7, 0x100004052888210uLL);
      if (v8)
      {
        int v9 = v8;
        long long v10 = v6[1];
        *(_OWORD *)int v8 = *v6;
        *((_OWORD *)v8 + 1) = v10;
LABEL_9:
        if ((int)v5 < v7) {
          MEMORY[0x18C122530](&v9[4 * v5], 4 * (v7 + ~v5) + 4);
        }
        *(void *)a1 = v9;
        *(_DWORD *)(a1 + 40) = v7;
        int v4 = *(_DWORD *)(a1 + 48);
        goto LABEL_12;
      }
    }
    else
    {
      int v9 = (char *)malloc_type_realloc(*(void **)a1, 4 * v7, 0x100004052888210uLL);
      if (v9) {
        goto LABEL_9;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  if (v4 > *(_DWORD *)(a1 + 44)) {
    *(_DWORD *)(a1 + 44) = v4;
  }
  uint64_t result = 0;
  int v12 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v4 + 1;
  v12[v4] = a2;
  return result;
}

_DWORD *build_arg_table(uint64_t a1, _DWORD *a2, _DWORD **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 44);
  if ((int)v5 <= 7)
  {
    uint64_t result = *a3;
  }
  else
  {
    uint64_t result = malloc_type_malloc(16 * v5 + 16, 0x1092040C99D0F4CuLL);
    *a3 = result;
    if (!result) {
      return result;
    }
  }
  *uint64_t result = 0;
  if (*(int *)(a1 + 44) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 4;
    do
    {
      switch(*(_DWORD *)(*(void *)a1 + 4 * v7 + 4))
      {
        case 0:
        case 2:
        case 3:
        case 0x18:
          long long v10 = a2;
          a2 += 2;
          (*a3)[v8] = *v10;
          break;
        case 1:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x19:
          int v9 = a2;
          a2 += 2;
          *(void *)&(*a3)[v8] = *v9;
          break;
        case 0x16:
        case 0x17:
          uint64_t v11 = a2;
          a2 += 2;
          *(void *)&(*a3)[v8] = *v11;
          break;
        case 0x1A:
          int v12 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0);
          a2 = v12 + 1;
          *(_OWORD *)&(*a3)[v8] = *v12;
          break;
        default:
          break;
      }
      ++v7;
      v8 += 4;
    }
    while (v7 < *(int *)(a1 + 44));
  }
  return result;
}

BOOL __find_warguments(int *a1, _DWORD *a2, _DWORD **a3)
{
  uint64_t v6 = 0;
  BOOL v68 = 0;
  long long v67 = 0u;
  LODWORD(v67) = 8;
  DWORD2(v67) = 1;
  memset(v66, 0, sizeof(v66));
  ptint r = v66;
  do
  {
    *(_DWORD *)((char *)ptr + v6) = 0;
    v6 += 4;
  }
  while (v6 != 32);
LABEL_3:
  while (*a1 != 37)
  {
    if (!*a1)
    {
LABEL_158:
      build_arg_table((uint64_t)&ptr, a2, a3);
      int v63 = 1;
      goto LABEL_160;
    }
    ++a1;
  }
  unsigned int v7 = 0;
  uint64_t v8 = a1 + 1;
LABEL_7:
  int v10 = *v8;
  a1 = v8 + 1;
  int v9 = v10;
  while (2)
  {
    while ((v9 - 49) < 9)
    {
      int v11 = 0;
      do
      {
        int v11 = v9 + 10 * v11 - 48;
        int v12 = *a1++;
        int v9 = v12;
      }
      while ((v12 - 48) < 0xA);
      if (v9 == 36)
      {
        BOOL v68 = a1;
        DWORD2(v67) = v11;
        goto LABEL_31;
      }
    }
    switch(v9)
    {
      case ' ':
      case '#':
      case '\'':
      case '+':
      case '-':
      case '0':
        BOOL v68 = a1;
        goto LABEL_31;
      case '*':
        goto LABEL_19;
      case '.':
        int v13 = *a1++;
        int v9 = v13;
        if (v13 != 42)
        {
          if ((v9 - 48) <= 9)
          {
            do
            {
              int v14 = *a1++;
              int v9 = v14;
            }
            while ((v14 - 48) < 0xA);
          }
          continue;
        }
LABEL_19:
        BOOL v68 = a1;
        if (addwaster((uint64_t)&ptr, &v68)) {
          goto LABEL_159;
        }
LABEL_31:
        uint64_t v8 = v68;
        goto LABEL_7;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        BOOL v68 = a1;
        if ((v7 & 8) != 0) {
          int v18 = 23;
        }
        else {
          int v18 = 22;
        }
        goto LABEL_76;
      case 'C':
        LOBYTE(v7) = 16;
        goto LABEL_62;
      case 'D':
        BOOL v68 = a1;
        LOWORD(v7) = v7 | 0x10;
        goto LABEL_64;
      case 'L':
        BOOL v68 = a1;
        v7 |= 8u;
        goto LABEL_31;
      case 'O':
      case 'U':
        BOOL v68 = a1;
        LOWORD(v7) = v7 | 0x10;
        goto LABEL_37;
      case 'S':
        LOBYTE(v7) = 16;
        goto LABEL_72;
      case 'X':
      case 'o':
      case 'u':
      case 'x':
        BOOL v68 = a1;
LABEL_37:
        int v19 = DWORD2(v67);
        uint64_t v20 = (int)v67;
        if (SDWORD2(v67) < (int)v67) {
          goto LABEL_49;
        }
        int v21 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67)) {
          int v22 = DWORD2(v67) + 1;
        }
        else {
          int v22 = 2 * v67;
        }
        if (v67 == 8)
        {
          BOOL v23 = (char *)malloc_type_malloc(4 * v22, 0x100004052888210uLL);
          if (!v23) {
            goto LABEL_159;
          }
          long long v24 = v23;
          long long v25 = v21[1];
          *(_OWORD *)BOOL v23 = *v21;
          *((_OWORD *)v23 + 1) = v25;
        }
        else
        {
          long long v24 = (char *)malloc_type_realloc(ptr, 4 * v22, 0x100004052888210uLL);
          if (!v24) {
            goto LABEL_159;
          }
        }
        if ((int)v20 < v22) {
          MEMORY[0x18C122530](&v24[4 * v20], 4 * (v22 + ~v20) + 4);
        }
        ptint r = v24;
        LODWORD(v67) = v22;
        int v19 = DWORD2(v67);
LABEL_49:
        if (v19 > SDWORD1(v67)) {
          DWORD1(v67) = v19;
        }
        if ((v7 & 0x1000) != 0)
        {
          DWORD2(v67) = v19 + 1;
          *((_DWORD *)ptr + v19) = 17;
        }
        else if ((v7 & 0x400) != 0 || (v7 & 0x800) != 0)
        {
          DWORD2(v67) = v19 + 1;
          *((_DWORD *)ptr + v19) = 14;
        }
        else if ((v7 & 0x20) != 0)
        {
          DWORD2(v67) = v19 + 1;
          *((_DWORD *)ptr + v19) = 9;
        }
        else
        {
          DWORD2(v67) = v19 + 1;
          if ((v7 & 0x10) != 0) {
            *((_DWORD *)ptr + v19) = 6;
          }
          else {
            *((_DWORD *)ptr + v19) = 3;
          }
        }
        goto LABEL_3;
      case 'c':
LABEL_62:
        BOOL v68 = a1;
        BOOL v26 = (v7 & 0x10) == 0;
        int v27 = 24;
        int v28 = 2;
        goto LABEL_73;
      case 'd':
      case 'i':
        BOOL v68 = a1;
LABEL_64:
        int v29 = DWORD2(v67);
        uint64_t v30 = (int)v67;
        if (SDWORD2(v67) < (int)v67) {
          goto LABEL_122;
        }
        unsigned int v31 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67)) {
          int v32 = DWORD2(v67) + 1;
        }
        else {
          int v32 = 2 * v67;
        }
        if (v67 == 8)
        {
          int v33 = (char *)malloc_type_malloc(4 * v32, 0x100004052888210uLL);
          if (!v33) {
            goto LABEL_159;
          }
          int v34 = v33;
          long long v35 = v31[1];
          *(_OWORD *)int v33 = *v31;
          *((_OWORD *)v33 + 1) = v35;
        }
        else
        {
          int v34 = (char *)malloc_type_realloc(ptr, 4 * v32, 0x100004052888210uLL);
          if (!v34) {
            goto LABEL_159;
          }
        }
        if ((int)v30 < v32) {
          MEMORY[0x18C122530](&v34[4 * v30], 4 * (v32 + ~v30) + 4);
        }
        ptint r = v34;
        LODWORD(v67) = v32;
        int v29 = DWORD2(v67);
LABEL_122:
        if (v29 > SDWORD1(v67)) {
          DWORD1(v67) = v29;
        }
        if ((v7 & 0x1000) != 0)
        {
          DWORD2(v67) = v29 + 1;
          *((_DWORD *)ptr + v29) = 16;
        }
        else if ((v7 & 0x400) != 0)
        {
          DWORD2(v67) = v29 + 1;
          *((_DWORD *)ptr + v29) = 13;
        }
        else if ((v7 & 0x800) != 0)
        {
          DWORD2(v67) = v29 + 1;
          *((_DWORD *)ptr + v29) = 11;
        }
        else if ((v7 & 0x20) != 0)
        {
          DWORD2(v67) = v29 + 1;
          *((_DWORD *)ptr + v29) = 8;
        }
        else
        {
          DWORD2(v67) = v29 + 1;
          if ((v7 & 0x10) != 0) {
            *((_DWORD *)ptr + v29) = 5;
          }
          else {
            *((_DWORD *)ptr + v29) = 2;
          }
        }
        goto LABEL_3;
      case 'h':
        BOOL v68 = a1;
        unsigned int v15 = v7 & 0xFFFFDFBF | 0x2000;
        int v16 = v7 | 0x40;
        BOOL v17 = (v7 & 0x40) == 0;
        goto LABEL_25;
      case 'j':
        BOOL v68 = a1;
        v7 |= 0x1000u;
        goto LABEL_31;
      case 'l':
        BOOL v68 = a1;
        unsigned int v15 = v7 & 0xFFFFFFCF | 0x20;
        int v16 = v7 | 0x10;
        BOOL v17 = (v7 & 0x10) == 0;
LABEL_25:
        if (v17) {
          unsigned int v7 = v16;
        }
        else {
          unsigned int v7 = v15;
        }
        goto LABEL_31;
      case 'n':
        BOOL v68 = a1;
        if ((v7 & 0x1000) != 0)
        {
          int v56 = DWORD2(v67);
          uint64_t v57 = (int)v67;
          if (SDWORD2(v67) >= (int)v67)
          {
            long long v58 = ptr;
            if (2 * (int)v67 <= SDWORD2(v67)) {
              int v59 = DWORD2(v67) + 1;
            }
            else {
              int v59 = 2 * v67;
            }
            if (v67 == 8)
            {
              uint64_t v60 = (char *)malloc_type_malloc(4 * v59, 0x100004052888210uLL);
              if (!v60) {
                goto LABEL_159;
              }
              uint64_t v61 = v60;
              long long v62 = v58[1];
              *(_OWORD *)uint64_t v60 = *v58;
              *((_OWORD *)v60 + 1) = v62;
            }
            else
            {
              uint64_t v61 = (char *)malloc_type_realloc(ptr, 4 * v59, 0x100004052888210uLL);
              if (!v61) {
                goto LABEL_159;
              }
            }
            if ((int)v57 < v59) {
              MEMORY[0x18C122530](&v61[4 * v57], 4 * (v59 + ~v57) + 4);
            }
            ptint r = v61;
            LODWORD(v67) = v59;
            int v56 = DWORD2(v67);
          }
          if (v56 > SDWORD1(v67)) {
            DWORD1(v67) = v56;
          }
          DWORD2(v67) = v56 + 1;
          *((_DWORD *)ptr + v56) = 18;
          goto LABEL_3;
        }
        if ((v7 & 0x2000) != 0) {
          int v43 = 21;
        }
        else {
          int v43 = 4;
        }
        if ((v7 & 0x40) != 0) {
          int v44 = 1;
        }
        else {
          int v44 = v43;
        }
        if ((v7 & 0x10) != 0) {
          int v45 = 7;
        }
        else {
          int v45 = v44;
        }
        if ((v7 & 0x20) != 0) {
          int v46 = 10;
        }
        else {
          int v46 = v45;
        }
        if ((v7 & 0x400) != 0) {
          int v47 = 15;
        }
        else {
          int v47 = v46;
        }
        if ((v7 & 0x800) != 0) {
          int v48 = 12;
        }
        else {
          int v48 = v47;
        }
        if (!addtype((uint64_t)&ptr, v48)) {
          goto LABEL_3;
        }
LABEL_159:
        int v63 = 0;
LABEL_160:
        if (ptr != v66) {
          free(ptr);
        }
        return !v63 || *a3 == 0;
      case 'p':
        BOOL v68 = a1;
        int v49 = DWORD2(v67);
        uint64_t v50 = (int)v67;
        if (SDWORD2(v67) < (int)v67) {
          goto LABEL_145;
        }
        long long v51 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67)) {
          int v52 = DWORD2(v67) + 1;
        }
        else {
          int v52 = 2 * v67;
        }
        if (v67 == 8)
        {
          uint64_t v53 = (char *)malloc_type_malloc(4 * v52, 0x100004052888210uLL);
          if (!v53) {
            goto LABEL_159;
          }
          int v54 = v53;
          long long v55 = v51[1];
          *(_OWORD *)uint64_t v53 = *v51;
          *((_OWORD *)v53 + 1) = v55;
        }
        else
        {
          int v54 = (char *)malloc_type_realloc(ptr, 4 * v52, 0x100004052888210uLL);
          if (!v54) {
            goto LABEL_159;
          }
        }
        if ((int)v50 < v52) {
          MEMORY[0x18C122530](&v54[4 * v50], 4 * (v52 + ~v50) + 4);
        }
        ptint r = v54;
        LODWORD(v67) = v52;
        int v49 = DWORD2(v67);
LABEL_145:
        if (v49 > SDWORD1(v67)) {
          DWORD1(v67) = v49;
        }
        DWORD2(v67) = v49 + 1;
        *((_DWORD *)ptr + v49) = 19;
        goto LABEL_3;
      case 'q':
        BOOL v68 = a1;
        v7 |= 0x20u;
        goto LABEL_31;
      case 's':
LABEL_72:
        BOOL v68 = a1;
        BOOL v26 = (v7 & 0x10) == 0;
        int v27 = 25;
        int v28 = 20;
LABEL_73:
        if (v26) {
          int v18 = v28;
        }
        else {
          int v18 = v27;
        }
LABEL_76:
        int v36 = DWORD2(v67);
        uint64_t v37 = (int)v67;
        if (SDWORD2(v67) < (int)v67) {
          goto LABEL_87;
        }
        unsigned int v38 = ptr;
        if (2 * (int)v67 <= SDWORD2(v67)) {
          int v39 = DWORD2(v67) + 1;
        }
        else {
          int v39 = 2 * v67;
        }
        if (v67 == 8)
        {
          long long v40 = (char *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
          if (!v40) {
            goto LABEL_159;
          }
          int v41 = v40;
          long long v42 = v38[1];
          *(_OWORD *)long long v40 = *v38;
          *((_OWORD *)v40 + 1) = v42;
        }
        else
        {
          int v41 = (char *)malloc_type_realloc(ptr, 4 * v39, 0x100004052888210uLL);
          if (!v41) {
            goto LABEL_159;
          }
        }
        if ((int)v37 < v39) {
          MEMORY[0x18C122530](&v41[4 * v37], 4 * (v39 + ~v37) + 4);
        }
        ptint r = v41;
        LODWORD(v67) = v39;
        int v36 = DWORD2(v67);
LABEL_87:
        if (v36 > SDWORD1(v67)) {
          DWORD1(v67) = v36;
        }
        DWORD2(v67) = v36 + 1;
        *((_DWORD *)ptr + v36) = v18;
        goto LABEL_3;
      case 't':
        BOOL v68 = a1;
        v7 |= 0x800u;
        goto LABEL_31;
      case 'z':
        BOOL v68 = a1;
        v7 |= 0x400u;
        goto LABEL_31;
      default:
        BOOL v68 = a1;
        if (!v9) {
          goto LABEL_158;
        }
        goto LABEL_3;
    }
  }
}

uint64_t addwaster(uint64_t a1, int **a2)
{
  int v4 = *a2;
  int v5 = **a2;
  int v6 = v5 - 48;
  if ((v5 - 48) > 9)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      int v7 = v6 + 10 * v7;
      int v8 = v4[1];
      ++v4;
      int v5 = v8;
      int v6 = v8 - 48;
    }
    while ((v8 - 48) < 0xA);
  }
  int v9 = *(_DWORD *)(a1 + 48);
  if (v5 == 36)
  {
    *(_DWORD *)(a1 + 48) = v7;
    uint64_t v10 = *(int *)(a1 + 40);
    if (v7 < (int)v10)
    {
LABEL_25:
      if (v7 > *(_DWORD *)(a1 + 44)) {
        *(_DWORD *)(a1 + 44) = v7;
      }
      uint64_t result = 0;
      *(_DWORD *)(*(void *)a1 + 4 * v7) = 2;
      *(_DWORD *)(a1 + 48) = v9;
      *a2 = v4 + 1;
      return result;
    }
    int v11 = *(_OWORD **)a1;
    if (2 * (int)v10 <= v7) {
      int v12 = v7 + 1;
    }
    else {
      int v12 = 2 * v10;
    }
    if (v10 == 8)
    {
      int v13 = (char *)malloc_type_malloc(4 * v12, 0x100004052888210uLL);
      if (v13)
      {
        int v14 = v13;
        long long v15 = v11[1];
        *(_OWORD *)int v13 = *v11;
        *((_OWORD *)v13 + 1) = v15;
LABEL_22:
        if ((int)v10 < v12) {
          MEMORY[0x18C122530](&v14[4 * v10], 4 * (v12 + ~v10) + 4);
        }
        *(void *)a1 = v14;
        *(_DWORD *)(a1 + 40) = v12;
        int v7 = *(_DWORD *)(a1 + 48);
        goto LABEL_25;
      }
    }
    else
    {
      int v14 = (char *)malloc_type_realloc(*(void **)a1, 4 * v12, 0x100004052888210uLL);
      if (v14) {
        goto LABEL_22;
      }
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = *(int *)(a1 + 40);
  if (v9 >= (int)v16)
  {
    BOOL v17 = *(_OWORD **)a1;
    if (2 * (int)v16 <= v9) {
      int v18 = v9 + 1;
    }
    else {
      int v18 = 2 * v16;
    }
    if (v16 == 8)
    {
      int v19 = (char *)malloc_type_malloc(4 * v18, 0x100004052888210uLL);
      if (!v19) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v20 = v19;
      long long v21 = v17[1];
      *(_OWORD *)int v19 = *v17;
      *((_OWORD *)v19 + 1) = v21;
    }
    else
    {
      uint64_t v20 = (char *)malloc_type_realloc(*(void **)a1, 4 * v18, 0x100004052888210uLL);
      if (!v20) {
        return 0xFFFFFFFFLL;
      }
    }
    if ((int)v16 < v18) {
      MEMORY[0x18C122530](&v20[4 * v16], 4 * (v18 + ~v16) + 4);
    }
    *(void *)a1 = v20;
    *(_DWORD *)(a1 + 40) = v18;
    int v9 = *(_DWORD *)(a1 + 48);
  }
  if (v9 > *(_DWORD *)(a1 + 44)) {
    *(_DWORD *)(a1 + 44) = v9;
  }
  uint64_t result = 0;
  BOOL v23 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v9 + 1;
  v23[v9] = 2;
  return result;
}

int printf_l(locale_t a1, const char *a2, ...)
{
  va_start(va, a2);
  return vfprintf_l(__stdoutp, a1, a2, va);
}

int putc(int a1, FILE *a2)
{
  flockfile(a2);
  int w = a2->_w;
  a2->_int w = w - 1;
  int v5 = a1;
  if (w < 1 && (a1 == 10 || w <= a2->_lbfsize))
  {
    int v5 = __swbuf(a1, a2);
  }
  else
  {
    int v6 = a2->_p++;
    *int v6 = a1;
  }
  funlockfile(a2);
  return v5;
}

int putc_unlocked(int result, FILE *a2)
{
  int w = a2->_w;
  a2->_int w = w - 1;
  if (w < 1 && (result == 10 || w <= a2->_lbfsize)) {
    return __swbuf(result, a2);
  }
  int v3 = a2->_p++;
  unsigned __int8 *v3 = result;
  return result;
}

int putchar_unlocked(int result)
{
  uint64_t v1 = __stdoutp;
  int w = __stdoutp->_w;
  __stdoutp->_int w = w - 1;
  if (w < 1 && (result == 10 || w <= v1->_lbfsize)) {
    return __swbuf(result, v1);
  }
  int v3 = v1->_p++;
  unsigned __int8 *v3 = result;
  return result;
}

int putw(int a1, FILE *a2)
{
  int v7 = a1;
  v5[0] = &v7;
  v5[1] = 4;
  v6[0] = v5;
  v6[1] = 0x400000001;
  flockfile(a2);
  int v3 = __sfvwrite((uint64_t)a2, (uint64_t)v6);
  funlockfile(a2);
  return v3;
}

wint_t putwc(__int32 a1, FILE *a2)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = (_xlocale *)&__global_locale;
  }
  return fputwc_l(a1, a2, v4);
}

wint_t putwchar(__int32 a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    int v3 = v2;
  }
  else {
    int v3 = (_xlocale *)&__global_locale;
  }
  return fputwc_l(a1, __stdoutp, v3);
}

wint_t putwchar_l(__int32 a1, locale_t a2)
{
  return fputwc_l(a1, __stdoutp, a2);
}

uint64_t lflush(FILE *a1)
{
  if ((~(unsigned __int16)a1->_flags & 9) != 0) {
    return 0;
  }
  flockfile(a1);
  uint64_t v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

int __srget(FILE *a1)
{
  if (__srefill((uint64_t)a1)) {
    return -1;
  }
  --a1->_r;
  int v3 = a1->_p++;
  return *v3;
}

int scanf(const char *a1, ...)
{
  va_start(va, a1);
  flockfile(__stdinp);
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = (_xlocale *)&__global_locale;
  }
  int v5 = __svfscanf_l((char **)__stdinp, v4, (unsigned __int8 *)a1, (wint_t **)va);
  funlockfile(__stdinp);
  return v5;
}

int scanf_l(locale_t a1, const char *a2, ...)
{
  va_start(va, a2);
  locale_t v3 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1) {
    locale_t v3 = a1;
  }
  if (a1) {
    int v4 = v3;
  }
  else {
    int v4 = (_xlocale *)__c_locale;
  }
  flockfile(__stdinp);
  int v5 = __svfscanf_l((char **)__stdinp, v4, (unsigned __int8 *)a2, (wint_t **)va);
  funlockfile(__stdinp);
  return v5;
}

void setbuf(FILE *a1, char *a2)
{
  setvbuf(a1, a2, 2 * (a2 == 0), 0x400uLL);
}

void setbuffer(FILE *a1, char *a2, int a3)
{
  setvbuf(a1, a2, 2 * (a2 == 0), a3);
}

int setlinebuf(FILE *a1)
{
  return setvbuf(a1, 0, 1, 0);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  if (a3 == 2 || (int v8 = -1, a3 <= 1) && (a4 & 0x80000000) == 0)
  {
    if (off_1E911B948)
    {
      ((void (*)(FILE *, uint64_t))off_1E911B948)(a1, 152);
      if (off_1E911B948) {
        ((void (*)(char *, size_t))off_1E911B948)(a2, a4);
      }
    }
    flockfile(a1);
    __sflush((uint64_t)a1);
    base = (FILE *)a1->_ub._base;
    if (base)
    {
      if (base != (FILE *)a1->_ubuf) {
        free(base);
      }
      a1->_ub._base = 0;
    }
    a1->_lbfsize_t size = 0;
    a1->_int r = 0;
    __int16 flags = a1->_flags;
    if ((flags & 0x80) != 0) {
      free(a1->_bf._base);
    }
    size_t size = 0;
    int v18 = 0;
    int v11 = flags & 0xE35C;
    if (a3 == 2)
    {
      int v8 = 0;
LABEL_15:
      a1->___int16 flags = v11 | 2;
      a1->_int w = 0;
      a1->_p = a1->_nbuf;
      a1->_bf._base = a1->_nbuf;
      a1->_bf._size_t size = 1;
LABEL_33:
      funlockfile(a1);
      return v8;
    }
    v11 |= __swhatbuf((uint64_t)a1, (uint64_t *)&size, &v18);
    size_t v12 = size;
    if (a4) {
      size_t v13 = a4;
    }
    else {
      size_t v13 = size;
    }
    if (a2 && a4)
    {
      int v8 = 0;
    }
    else
    {
      int v14 = (char *)malloc_type_malloc(v13, 0x3AF4FA4DuLL);
      if (v14)
      {
        a2 = v14;
        int v8 = 0;
      }
      else
      {
        size_t v17 = size;
        if (v13 == size)
        {
          int v8 = -1;
          goto LABEL_15;
        }
        a2 = (char *)malloc_type_malloc(size, 0xAC2A956FuLL);
        int v8 = -1;
        size_t v13 = v17;
        if (!a2) {
          goto LABEL_15;
        }
      }
      LOWORD(v11) = v11 | 0x80;
      size_t v12 = size;
    }
    __int16 v15 = v11 | 0x800;
    if (v13 == v12) {
      __int16 v15 = v11;
    }
    a1->___int16 flags = v15 | (a3 == 1);
    a1->_p = (unsigned __int8 *)a2;
    a1->_bf._base = (unsigned __int8 *)a2;
    a1->_bf._size_t size = v13;
    if ((v15 & 8) != 0)
    {
      if (v15 & 1 | (a3 == 1))
      {
        a1->_int w = 0;
        a1->_lbfsize_t size = -(int)v13;
      }
      else
      {
        a1->_int w = v13;
      }
    }
    else
    {
      a1->_int w = 0;
    }
    __cleanup = 1;
    goto LABEL_33;
  }
  return v8;
}

int swprintf(__int32 *a1, size_t a2, const __int32 *a3, ...)
{
  va_start(va, a3);
  uint64_t v4 = __locale_key;
  int v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = (_xlocale *)&__global_locale;
  }
  return vswprintf_l(a1, a2, v6, a3, va);
}

int swprintf_l(__int32 *a1, size_t n, locale_t a3, const __int32 *a4, ...)
{
  va_start(va, a4);
  return vswprintf_l(a1, n, a3, a4, va);
}

int swscanf(const __int32 *a1, const __int32 *a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vswscanf_l(a1, v5, a2, va);
}

int swscanf_l(const __int32 *a1, locale_t a2, const __int32 *a3, ...)
{
  va_start(va, a3);
  return vswscanf_l(a1, a2, a3, va);
}

char *__cdecl tempnam(const char *__dir, const char *__prefix)
{
  if (off_1E911B938)
  {
    ((void (*)(const char *))off_1E911B938)(__dir);
    if (off_1E911B938) {
      ((void (*)(const char *))off_1E911B938)(__prefix);
    }
  }
  uint64_t result = (char *)malloc_type_malloc(0x400uLL, 0xBD580526uLL);
  if (result)
  {
    int v5 = result;
    if (!__prefix) {
      __prefix = "tmp.";
    }
    if (!__dir
      || access(__dir, 2)
      || (__dir[j__strsignal_r((int)__dir, v6, v7) - 1] != 47 ? (__int16 v15 = "/") : (__int16 v15 = ""),
          snprintf(v5, 0x400uLL, "%s%s%sXXXXXX", __dir, v15, __prefix),
          (uint64_t result = (char *)_mktemp(v5)) == 0))
    {
      if (access("/var/tmp/", 2)
        || (snprintf(v5, 0x400uLL, "%s%sXXXXXX", "/var/tmp/", __prefix), (uint64_t result = (char *)_mktemp(v5)) == 0))
      {
        if (issetugid()
          || (uint64_t v10 = getenv("TMPDIR")) == 0
          || (int v11 = v10, access(v10, 2))
          || (v11[j__strsignal_r((int)v11, v12, v13) - 1] != 47 ? (int v14 = "/") : (int v14 = ""),
              snprintf(v5, 0x400uLL, "%s%s%sXXXXXX", v11, v14, __prefix),
              (uint64_t result = (char *)_mktemp(v5)) == 0))
        {
          snprintf(v5, 0x400uLL, "%s%sXXXXXX", "/tmp/", __prefix);
          uint64_t result = (char *)_mktemp(v5);
          if (!result)
          {
            int v8 = *__error();
            free(v5);
            int v9 = __error();
            uint64_t result = 0;
            *int v9 = v8;
          }
        }
      }
    }
  }
  return result;
}

FILE *tmpfile(void)
{
  if (issetugid()) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = getenv("TMPDIR");
  }
  sigset_t v10 = 0;
  int v9 = 0;
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = "/tmp/";
  }
  if (!*v3) {
    return 0;
  }
  uint64_t v4 = v3[j__strsignal_r((int)v3, v0, v1) - 1] == 47 ? "" : "/";
  asprintf(&v9, "%s%s%s", v3, v4, "tmp.XXXXXX");
  if (!v9) {
    return 0;
  }
  sigset_t v11 = -1;
  sigprocmask(1, &v11, &v10);
  int v5 = mkstemp(v9);
  if (v5 == -1)
  {
    free(v9);
    sigprocmask(3, &v10, 0);
    return 0;
  }
  unlink(v9);
  free(v9);
  sigprocmask(3, &v10, 0);
  uint64_t result = fdopen(v5, "w+");
  if (!result)
  {
    int v7 = *__error();
    close_NOCANCEL();
    int v8 = __error();
    uint64_t result = 0;
    int *v8 = v7;
  }
  return result;
}

char *__cdecl tmpnam(char *a1)
{
  size_t v1 = a1;
  if (!a1)
  {
    if (pthread_once(&tmpnam_buf_control, (void (*)(void))tmpnam_buf_allocate)) {
      return 0;
    }
    size_t v1 = (char *)tmpnam_buf;
    if (!tmpnam_buf) {
      return 0;
    }
  }
  if (off_1E911B948) {
    ((void (*)(char *, uint64_t))off_1E911B948)(v1, 1024);
  }
  snprintf(v1, 0x400uLL, "%stmp.%lu.XXXXXX", "/var/tmp/", tmpnam_tmpcount);
  ++tmpnam_tmpcount;

  return (char *)_mktemp(v1);
}

void *tmpnam_buf_allocate()
{
  uint64_t result = malloc_type_malloc(0x400uLL, 0xBFAF40B0uLL);
  tmpnam_unint64_t buf = (uint64_t)result;
  return result;
}

int ungetc(int a1, FILE *a2)
{
  pthread_once(&__sdidinit, __sinit);
  flockfile(a2);
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  int v5 = __ungetc(a1, (uint64_t)a2);
  funlockfile(a2);
  return v5;
}

uint64_t __ungetc(int a1, uint64_t a2)
{
  if (a1 == -1) {
    return 0xFFFFFFFFLL;
  }
  unsigned __int8 v3 = a1;
  __int16 v4 = *(_WORD *)(a2 + 16);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    if ((v4 & 8) != 0)
    {
      if (__sflush(a2)) {
        return 0xFFFFFFFFLL;
      }
      __int16 v4 = *(_WORD *)(a2 + 16) & 0xFFF7;
      *(_DWORD *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 40) = 0;
    }
    v4 |= 4u;
    *(_WORD *)(a2 + 16) = v4;
  }
  uint64_t v5 = v3;
  int v6 = *(void **)(a2 + 88);
  if (v6)
  {
    uint64_t v7 = *(int *)(a2 + 96);
    if (*(_DWORD *)(a2 + 8) < (int)v7)
    {
      int v8 = *(char **)a2;
LABEL_22:
      *(void *)a2 = v8 - 1;
      *(v8 - 1) = v3;
      goto LABEL_23;
    }
    if (v6 == (void *)(a2 + 116))
    {
      int v14 = malloc_type_malloc(0x400uLL, 0x5E060C20uLL);
      if (v14)
      {
        uint64_t v15 = 0;
        *(void *)(a2 + 88) = v14;
        *(_DWORD *)(a2 + 96) = 1024;
        int v8 = v14 + 1021;
        do
        {
          v14[v15 + 1023] = *(unsigned char *)(a2 + 118 + v15);
          unint64_t v16 = v15 + 3;
          --v15;
        }
        while (v16 > 1);
        goto LABEL_22;
      }
    }
    else
    {
      sigset_t v11 = (char *)malloc_type_realloc(v6, 2 * (int)v7, 0x1D909C43uLL);
      if (v11)
      {
        size_t v12 = v11;
        int v8 = &v11[v7];
        j__mkdtempat_np(v11 + v7, v11);
        *(void *)(a2 + 88) = v12;
        *(_DWORD *)(a2 + 96) = 2 * v7;
        goto LABEL_22;
      }
    }
    return 0xFFFFFFFFLL;
  }
  *(_WORD *)(a2 + 16) = v4 & 0xFFDF;
  unint64_t v9 = *(void *)(a2 + 24);
  sigset_t v10 = *(char **)a2;
  if (v9 && (unint64_t)v10 > v9 && *(v10 - 1) == v3)
  {
    *(void *)a2 = v10 - 1;
LABEL_23:
    int v13 = *(_DWORD *)(a2 + 8) + 1;
    goto LABEL_24;
  }
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
  **(void **)(a2 + 104) = v10;
  *(void *)(a2 + 88) = a2 + 116;
  *(_DWORD *)(a2 + 96) = 3;
  *(unsigned char *)(a2 + 118) = v3;
  *(void *)a2 = a2 + 118;
  int v13 = 1;
LABEL_24:
  *(_DWORD *)(a2 + 8) = v13;
  return v5;
}

uint64_t __ungetwc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 1328) + 96))(v10, a1, *(void *)(a2 + 104) + 80, a3);
    if (v5 == -1)
    {
      *(_WORD *)(a2 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (v5)
      {
        uint64_t v6 = v5 - 1;
        int v7 = __ungetc(v10[v5 - 1], a2);
        uint64_t v5 = v6;
        if (v7 == -1) {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v3;
}

wint_t ungetwc(wint_t a1, FILE *a2)
{
  uint64_t v3 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = &__global_locale;
  }
  wint_t v8 = __ungetwc(v3, (uint64_t)a2, (uint64_t)v7);
  funlockfile(a2);
  return v8;
}

wint_t ungetwc_l(wint_t a1, FILE *a2, locale_t a3)
{
  uint64_t v5 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  locale_t v7 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v7 = a3;
  }
  if (a3) {
    wint_t v8 = (char *)v7;
  }
  else {
    wint_t v8 = __c_locale;
  }
  wint_t v9 = __ungetwc(v5, (uint64_t)a2, (uint64_t)v8);
  funlockfile(a2);
  return v9;
}

uint64_t _vdprintf(pthread_mutex_t *a1, pthread_rwlock_t *a2, int a3, atomic_uint *a4, unsigned __int8 *a5, __int16 *a6)
{
  long long v17 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v15 = (unint64_t)v18;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  v18[0] = 0;
  v18[1] = 850045858;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  if (a3 < 0x8000)
  {
    wint_t v8 = v32;
    DWORD1(v9) = 1024;
    WORD4(v9) = 8;
    WORD5(v9) = a3;
    *((void *)&v11 + 1) = &v8;
    *((void *)&v13 + 1) = __swrite;
    *(void *)&long long v10 = v32;
    DWORD2(v10) = 1024;
    LOBYTE(v23) = 0;
    long long v24 = 0uLL;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    long long v28 = 0uLL;
    long long v29 = 0uLL;
    long long v30 = 0uLL;
    long long v31 = 0uLL;
    uint64_t v6 = __v2printf(a1, a2, (uint64_t)&v8, a4, a5, a6);
    if ((v6 & 0x80000000) == 0)
    {
      if (__fflush((uint64_t)&v8)) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v6;
      }
    }
  }
  else
  {
    *__error() = 24;
    return 0xFFFFFFFFLL;
  }
  return v6;
}

int vdprintf_l(int a1, locale_t a2, const char *a3, va_list a4)
{
  return _vdprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, a1, (atomic_uint *)a2, (unsigned __int8 *)a3, (__int16 *)a4);
}

int vdprintf(int a1, const char *a2, va_list a3)
{
  uint64_t v3 = __locale_key;
  __int16 v4 = *(atomic_uint **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (atomic_uint *)&__global_locale;
  }
  return _vdprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, a1, v5, (unsigned __int8 *)a2, (__int16 *)a3);
}

BOOL __printf_is_memory_read_only(vm_address_t a1)
{
  kern_return_t v1;
  mach_port_t object_name;
  mach_msg_type_number_t infoCnt;
  int info[4];
  long long v6;
  int v7;
  vm_size_t size;
  vm_address_t address;

  size_t size = 0;
  address = a1;
  locale_t v7 = 0;
  *(_OWORD *)mach_timebase_info info = 0u;
  uint64_t v6 = 0u;
  object_name = 0;
  infoCnt = 9;
  size_t v1 = vm_region_64(*MEMORY[0x1E4F14C48], &address, &size, 9, info, &infoCnt, &object_name);
  return (v1 | info[0] & 2) == 0;
}

uint64_t grouping_init(uint64_t a1, int a2, locale_t a3)
{
  uint64_t v5 = localeconv_l(a3);
  fixed = __fix_nogrouping(v5->grouping);
  *(void *)(a1 + 16) = fixed;
  thousands_sep = v5->thousands_sep;
  *(void *)a1 = thousands_sep;
  int v10 = j__strsignal_r((int)thousands_sep, v8, v9);
  int v11 = 0;
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  int v12 = *fixed;
  if (v12 != 127)
  {
    int v13 = 0;
    int v14 = 0;
    do
    {
      if (a2 <= (char)v12) {
        break;
      }
      a2 -= (char)v12;
      *(_DWORD *)(a1 + 24) = a2;
      if (fixed[1])
      {
        *(_DWORD *)(a1 + 28) = ++v14;
        *(void *)(a1 + 16) = ++fixed;
      }
      else
      {
        *(_DWORD *)(a1 + 32) = ++v13;
      }
      int v12 = *fixed;
    }
    while (v12 != 127);
    int v11 = v13 + v14;
  }
  return (v11 * v10);
}

uint64_t grouping_print(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v8 = *(_DWORD *)(a1 + 24);
  if ((int)a4 - (int)a3 >= v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (a4 - a3);
  }
  if ((int)v9 < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    int v10 = *(_DWORD *)(a2 + 20);
    uint64_t v11 = *(int *)(a2 + 16);
    uint64_t v12 = a2 + 16 * v11;
    *(void *)(v12 + 24) = a3;
    *(void *)(v12 + 32) = v9;
    int v13 = v10 + v9;
    *(_DWORD *)(a2 + 16) = v11 + 1;
    *(_DWORD *)(a2 + 20) = v13;
    if ((int)v11 >= 7)
    {
      if (v13)
      {
        int v14 = __sfvwrite(*(void *)a2, a2 + 8);
        *(void *)(a2 + 16) = 0;
        if (v14) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
  }
  int v16 = v8 - v9;
  if (v8 - (int)v9 >= 1)
  {
    int v18 = *(_DWORD *)(a2 + 16);
    int v17 = *(_DWORD *)(a2 + 20);
    do
    {
      int v19 = v18;
      if (v16 >= 16) {
        uint64_t v20 = 16;
      }
      else {
        uint64_t v20 = v16;
      }
      uint64_t v21 = a2 + 16 * v18;
      *(void *)(v21 + 24) = &zeroes;
      *(void *)(v21 + 32) = v20;
      v17 += v20;
      int v18 = v19 + 1;
      *(_DWORD *)(a2 + 16) = v19 + 1;
      *(_DWORD *)(a2 + 20) = v17;
      if (v19 >= 7)
      {
        if (v17)
        {
          int v22 = __sfvwrite(*(void *)a2, a2 + 8);
          int v17 = 0;
          int v18 = 0;
          *(void *)(a2 + 16) = 0;
          if (v22) {
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
          int v18 = 0;
          *(_DWORD *)(a2 + 16) = 0;
        }
      }
      BOOL v23 = __OFSUB__(v16, v20);
      v16 -= v20;
    }
    while (!((v16 < 0) ^ v23 | (v16 == 0)));
  }
  for (unint64_t i = a3 + *(int *)(a1 + 24); ; i += **(char **)(a1 + 16))
  {
    int v25 = *(_DWORD *)(a1 + 28);
    int v26 = *(_DWORD *)(a1 + 32);
    if (v25 <= 0) {
      break;
    }
    if (v26 < 1)
    {
      --*(void *)(a1 + 16);
      *(_DWORD *)(a1 + 28) = v25 - 1;
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 32) = v26 - 1;
LABEL_29:
    uint64_t v27 = *(int *)(a1 + 8);
    int v28 = *(_DWORD *)(a2 + 20);
    uint64_t v29 = *(int *)(a2 + 16);
    uint64_t v30 = a2 + 16 * v29;
    *(void *)(v30 + 24) = *(void *)a1;
    *(void *)(v30 + 32) = v27;
    int v31 = v28 + v27;
    int v32 = v29 + 1;
    *(_DWORD *)(a2 + 16) = v29 + 1;
    *(_DWORD *)(a2 + 20) = v31;
    if ((int)v29 >= 7)
    {
      if (v31)
      {
        int v33 = __sfvwrite(*(void *)a2, a2 + 8);
        int v31 = 0;
        int v32 = 0;
        *(void *)(a2 + 16) = 0;
        if (v33) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        int v32 = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
    int v34 = **(char **)(a1 + 16);
    if ((int)a4 - (int)i >= v34) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = (a4 - i);
    }
    if ((int)v35 < 1)
    {
      LODWORD(v35) = 0;
    }
    else
    {
      uint64_t v36 = a2 + 16 * v32;
      *(void *)(v36 + 24) = i;
      *(void *)(v36 + 32) = v35;
      v31 += v35;
      *(_DWORD *)(a2 + 16) = v32 + 1;
      *(_DWORD *)(a2 + 20) = v31;
      if (v32 < 7)
      {
        ++v32;
      }
      else if (v31)
      {
        int v37 = __sfvwrite(*(void *)a2, a2 + 8);
        int v31 = 0;
        int v32 = 0;
        *(void *)(a2 + 16) = 0;
        if (v37) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        int v32 = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
    int v38 = v34 - v35;
    if (v38 >= 1)
    {
      do
      {
        int v39 = v32;
        if (v38 >= 16) {
          uint64_t v40 = 16;
        }
        else {
          uint64_t v40 = v38;
        }
        uint64_t v41 = a2 + 16 * v32;
        *(void *)(v41 + 24) = &zeroes;
        *(void *)(v41 + 32) = v40;
        v31 += v40;
        int v32 = v39 + 1;
        *(_DWORD *)(a2 + 16) = v39 + 1;
        *(_DWORD *)(a2 + 20) = v31;
        if (v39 >= 7)
        {
          if (v31)
          {
            int v42 = __sfvwrite(*(void *)a2, a2 + 8);
            int v31 = 0;
            int v32 = 0;
            *(void *)(a2 + 16) = 0;
            if (v42) {
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            int v32 = 0;
            *(_DWORD *)(a2 + 16) = 0;
          }
        }
        BOOL v23 = __OFSUB__(v38, v40);
        v38 -= v40;
      }
      while (!((v38 < 0) ^ v23 | (v38 == 0)));
    }
  }
  if (v26 > 0) {
    goto LABEL_28;
  }
  if (i <= a4) {
    int v43 = i;
  }
  else {
    int v43 = a4;
  }
  return (v43 - a3);
}

int vfscanf(FILE *__stream, const char *__format, va_list a3)
{
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(__stream, 152);
  }
  flockfile(__stream);
  uint64_t v6 = __locale_key;
  locale_t v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = (_xlocale *)&__global_locale;
  }
  int v9 = __svfscanf_l((char **)__stream, v8, (unsigned __int8 *)__format, (wint_t **)a3);
  funlockfile(__stream);
  return v9;
}

int vfscanf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  if (off_1E911B948) {
    ((void (*)(FILE *, uint64_t))off_1E911B948)(a1, 152);
  }
  locale_t v8 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v8 = a2;
  }
  if (a2) {
    int v9 = v8;
  }
  else {
    int v9 = (_xlocale *)__c_locale;
  }
  flockfile(a1);
  int v10 = __svfscanf_l((char **)a1, v9, (unsigned __int8 *)a3, (wint_t **)a4);
  funlockfile(a1);
  return v10;
}

int __svfscanf(FILE *a1, const char *a2, va_list a3)
{
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return __svfscanf_l((char **)a1, v7, (unsigned __int8 *)a2, (wint_t **)a3);
}

int vfwprintf_l(FILE *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  locale_t v7 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v7 = a2;
  }
  if (a2) {
    locale_t v8 = v7;
  }
  else {
    locale_t v8 = (_xlocale *)__c_locale;
  }
  flockfile(a1);
  __int16 flags = a1->_flags;
  if ((flags & 0x1A) != 0xA || (int file = a1->_file, file < 0))
  {
    int v12 = __vfwprintf((uint64_t)a1, v8, (unsigned int *)a3, a4);
    goto LABEL_14;
  }
  long long v31 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v29 = (unint64_t)v32;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  v32[0] = 0;
  v32[1] = 850045858;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  if ((flags & 8) == 0 || (char v11 = 0, (flags & 0x200) == 0) && !a1->_bf._base)
  {
    if (__swsetup((uint64_t)a1))
    {
      int v12 = -1;
      goto LABEL_14;
    }
    __int16 flags = a1->_flags;
    char v11 = v37 & 0xF8;
    LOWORD(file) = a1->_file;
  }
  WORD4(v23) = flags & 0xFFFD;
  WORD5(v23) = file;
  write = a1->_write;
  *((void *)&v25 + 1) = a1->_cookie;
  *((void *)&v27 + 1) = write;
  extra = a1->_extra;
  LOBYTE(v37) = *((unsigned char *)extra + 72) & 7 | v11;
  long long v16 = *((_OWORD *)extra + 8);
  long long v18 = *((_OWORD *)extra + 5);
  long long v17 = *((_OWORD *)extra + 6);
  long long v40 = *((_OWORD *)extra + 7);
  long long v41 = v16;
  long long v38 = v18;
  long long v39 = v17;
  long long v19 = *((_OWORD *)extra + 12);
  long long v21 = *((_OWORD *)extra + 9);
  long long v20 = *((_OWORD *)extra + 10);
  long long v44 = *((_OWORD *)extra + 11);
  long long v45 = v19;
  long long v42 = v21;
  long long v43 = v20;
  int v22 = v46;
  *(void *)&long long v24 = v46;
  DWORD1(v23) = 1024;
  DWORD2(v24) = 1024;
  LODWORD(v25) = 0;
  int v12 = __vfwprintf((uint64_t)&v22, v8, (unsigned int *)a3, a4);
  if ((v12 & 0x80000000) == 0 && __fflush((uint64_t)&v22)) {
    int v12 = -1;
  }
  if ((BYTE8(v23) & 0x40) != 0) {
    a1->_flags |= 0x40u;
  }
LABEL_14:
  funlockfile(a1);
  return v12;
}

uint64_t __vfwprintf(uint64_t a1, _xlocale *a2, unsigned int *a3, _DWORD *a4)
{
  int v344 = a4;
  int v343 = 0;
  memset(v342, 0, 32);
  double v340 = 0.0;
  uint64_t v341 = 0;
  int v339 = 0;
  v338 = 0;
  long long v337 = 0uLL;
  int v336 = 0;
  uint64_t v335 = 0;
  memset(v334, 0, sizeof(v334));
  *(_OWORD *)int v333 = 0u;
  v331 = 0;
  if (((*(_WORD *)(a1 + 16) & 8) == 0 || (*(_WORD *)(a1 + 16) & 0x200) == 0 && !*(void *)(a1 + 24))
    && __swsetup(a1))
  {
    *__error() = 9;
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(void *)(a1 + 104);
  if ((*(unsigned char *)(v7 + 72) & 7) == 0) {
    *(unsigned char *)(v7 + 72) = *(unsigned char *)(v7 + 72) & 0xF8 | 1;
  }
  v331 = v344;
  int v332 = 0;
  *(void *)&v333[2] = (char *)v334 + 8;
  *(void *)&v334[0] = 0;
  *(void *)int v333 = a1;
  v347[0] = 0;
  memset(&v353, 0, sizeof(v353));
  locale_t v8 = localeconv_l(a2);
  int v321 = 0;
  uint64_t v322 = 0;
  unint64_t v317 = 0;
  int v318 = 0;
  unint64_t v316 = 0;
  int v319 = 0;
  unsigned __int8 v320 = 0;
  uint64_t v9 = 0;
  if ((~mbrtowc_l(v347, v8->decimal_point, *(int *)(*((void *)a2 + 166) + 64), &v353, a2) & 0xFFFFFFFE) != 0) {
    __int32 v10 = v347[0];
  }
  else {
    __int32 v10 = 46;
  }
  HIDWORD(v341) = v10;
  LODWORD(v314) = 0;
  uint64_t v324 = 1;
  int v315 = (int *)a3;
LABEL_12:
  for (unint64_t i = a3; ; ++i)
  {
    unsigned int v12 = *i;
    if (!*i || v12 == 37) {
      break;
    }
  }
  uint64_t v13 = (char *)i - (char *)a3;
  if (i == a3)
  {
    uint64_t v323 = v9;
  }
  else
  {
    uint64_t v323 = (v13 >> 2) + v9;
    if (v323 >= 0x80000000) {
      goto LABEL_721;
    }
    int v14 = v334[0];
    int v15 = DWORD1(v334[0]);
    long long v16 = &v333[4 * SLODWORD(v334[0])];
    *((void *)v16 + 3) = a3;
    *((void *)v16 + 4) = (int)(v13 >> 2);
    DWORD1(v334[0]) = v15 + ((unint64_t)v13 >> 2);
    LODWORD(v334[0]) = v14 + 1;
    if (v14 >= 7 && __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
      goto LABEL_725;
    }
  }
  uint64_t v17 = v324;
  if (!v12)
  {
LABEL_723:
    __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2]);
    goto LABEL_724;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v342[1] = 0;
  int v343 = 0;
  long long v20 = (char *)a3;
  a3 = i + 1;
  int v349 = 0;
  int v336 = 88;
  uint64_t v21 = -1;
LABEL_24:
  while (2)
  {
    unsigned int v23 = *a3++;
    unsigned int v22 = v23;
LABEL_25:
    uint64_t v24 = v18;
    while (1)
    {
      uint64_t v18 = v24;
      if (v22 - 49 >= 9) {
        break;
      }
      uint64_t v24 = 0;
      do
      {
        uint64_t v24 = v22 - 48 + 10 * v24;
        unsigned int v25 = *a3++;
        unsigned int v22 = v25;
      }
      while (v25 - 48 < 0xA);
      if (v22 == 36)
      {
        uint64_t v17 = v24;
        if (!v332)
        {
          int v332 = v347;
          uint64_t v29 = v21;
          uint64_t v30 = v19;
          wBOOL arguments = __find_warguments(v315, v331, (_DWORD **)&v332);
          uint64_t v19 = v30;
          uint64_t v21 = v29;
          uint64_t v17 = v24;
          if (warguments) {
            goto LABEL_722;
          }
        }
        goto LABEL_24;
      }
    }
    switch(v22)
    {
      case ' ':
        if (!v343) {
          int v343 = 32;
        }
        continue;
      case '#':
        uint64_t v19 = v19 | 1;
        continue;
      case '\'':
        uint64_t v19 = v19 | 0x200;
        continue;
      case '*':
        int v32 = *a3;
        unsigned int v33 = *a3 - 48;
        if (v33 > 9)
        {
          unsigned int v34 = 0;
          long long v20 = (char *)a3;
        }
        else
        {
          unsigned int v34 = 0;
          long long v20 = (char *)a3;
          do
          {
            unsigned int v34 = 10 * v34 + v33;
            int v35 = *((_DWORD *)v20 + 1);
            v20 += 4;
            int v32 = v35;
            unsigned int v33 = v35 - 48;
          }
          while ((v35 - 48) < 0xA);
        }
        uint64_t v36 = v332;
        if (v32 != 36)
        {
          if (v332)
          {
            int v39 = *((_DWORD *)v332 + 4 * (int)v17);
          }
          else
          {
            long long v40 = v344;
            v344 += 2;
            int v39 = *v40;
          }
          uint64_t v17 = (v17 + 1);
LABEL_74:
          uint64_t v18 = v39;
          if (v39 < 0)
          {
            uint64_t v18 = -(uint64_t)v39;
LABEL_76:
            uint64_t v19 = v19 | 4;
          }
          continue;
        }
        if (v332) {
          goto LABEL_68;
        }
        uint64_t v37 = v19;
        uint64_t v38 = v21;
        int v332 = v347;
        if (!__find_warguments(v315, v331, (_DWORD **)&v332))
        {
          uint64_t v36 = v332;
          uint64_t v21 = v38;
          uint64_t v19 = v37;
          if (v332)
          {
LABEL_68:
            int v39 = v36[4 * v34];
          }
          else
          {
            long long v41 = v344;
            v344 += 2;
            int v39 = *v41;
          }
          v20 += 4;
          a3 = (unsigned int *)v20;
          goto LABEL_74;
        }
        goto LABEL_722;
      case '+':
        int v343 = 43;
        continue;
      case ',':
      case ':':
      case ';':
      case '_':
        int v336 = v22;
        continue;
      case '-':
        goto LABEL_76;
      case '.':
        unsigned int v26 = *a3++;
        unsigned int v22 = v26;
        if (v26 != 42)
        {
          uint64_t v21 = 0;
          unsigned int v27 = v22 - 48;
          if (v22 - 48 <= 9)
          {
            uint64_t v21 = 0;
            do
            {
              uint64_t v21 = 10 * v21 + v27;
              unsigned int v28 = *a3++;
              unsigned int v22 = v28;
              unsigned int v27 = v28 - 48;
            }
            while (v28 - 48 < 0xA);
          }
          goto LABEL_25;
        }
        int v42 = *a3;
        unsigned int v43 = *a3 - 48;
        if (v43 > 9)
        {
          unsigned int v44 = 0;
          long long v20 = (char *)a3;
        }
        else
        {
          unsigned int v44 = 0;
          long long v20 = (char *)a3;
          do
          {
            unsigned int v44 = 10 * v44 + v43;
            int v45 = *((_DWORD *)v20 + 1);
            v20 += 4;
            int v42 = v45;
            unsigned int v43 = v45 - 48;
          }
          while ((v45 - 48) < 0xA);
        }
        int v46 = v332;
        if (v42 != 36)
        {
          if (v332)
          {
            int v48 = *((_DWORD *)v332 + 4 * (int)v17);
          }
          else
          {
            int v49 = v344;
            v344 += 2;
            int v48 = *v49;
          }
          uint64_t v17 = (v17 + 1);
LABEL_93:
          uint64_t v21 = v48;
          continue;
        }
        if (v332) {
          goto LABEL_87;
        }
        uint64_t v47 = v19;
        int v332 = v347;
        if (!__find_warguments(v315, v331, (_DWORD **)&v332))
        {
          int v46 = v332;
          uint64_t v19 = v47;
          if (v332)
          {
LABEL_87:
            int v48 = v46[4 * v44];
          }
          else
          {
            uint64_t v50 = v344;
            v344 += 2;
            int v48 = *v50;
          }
          v20 += 4;
          a3 = (unsigned int *)v20;
          goto LABEL_93;
        }
        goto LABEL_722;
      case '0':
        uint64_t v19 = v19 | 0x80;
        continue;
      case 'A':
      case 'a':
        if ((v19 & 0x4000) != 0) {
          goto LABEL_123;
        }
        if (v22 == 97) {
          int v51 = 120;
        }
        else {
          int v51 = 88;
        }
        int v52 = "0123456789ABCDEFn";
        if (v22 == 97) {
          int v52 = (const char *)&__vfwprintf_xdigs_lower;
        }
        int v318 = v52;
        if (v22 == 97) {
          char v53 = 112;
        }
        else {
          char v53 = 80;
        }
        int v349 = v51;
        uint64_t v54 = v21 + (v21 >= 0);
        unsigned __int8 v320 = v53;
        __int16 v55 = v19;
        if ((v19 & 8) != 0)
        {
          if (v332)
          {
            double v77 = *((double *)v332 + 2 * (int)v17);
          }
          else
          {
            int v97 = (double *)v344;
            v344 += 2;
            double v77 = *v97;
          }
          double v340 = v77;
          uint64_t v94 = (char *)__hldtoa(v52, v21 + (v21 >= 0), &v339, &v341, &v338);
        }
        else
        {
          if (v332)
          {
            double v56 = *((double *)v332 + 2 * (int)v17);
          }
          else
          {
            int v93 = (double *)v344;
            v344 += 2;
            double v56 = *v93;
          }
          double v340 = v56;
          uint64_t v94 = __hdtoa((uint64_t)v52, v21 + (v21 >= 0), &v339, &v341, &v338, v56);
        }
        long long v73 = v94;
        if (v54 < 0) {
          uint64_t v54 = v338 - v94;
        }
        if (v339 == 0x7FFFFFFF) {
          int v349 = 0;
        }
        free(v321);
        goto LABEL_255;
      case 'C':
        __int16 v61 = v19 | 0x10;
        if ((v19 & 0x4000) != 0) {
          goto LABEL_127;
        }
        goto LABEL_149;
      case 'D':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_129;
      case 'E':
      case 'e':
        if ((v19 & 0x4000) != 0) {
          goto LABEL_123;
        }
        __int16 v57 = v19;
        if (v21 >= 0) {
          ++v21;
        }
        else {
          uint64_t v21 = 7;
        }
        unsigned __int8 v58 = v22;
        goto LABEL_117;
      case 'F':
      case 'f':
        if ((v19 & 0x4000) != 0) {
          goto LABEL_123;
        }
        __int16 v57 = v19;
        unsigned __int8 v58 = 0;
        goto LABEL_117;
      case 'G':
      case 'g':
        if ((v19 & 0x4000) != 0)
        {
LABEL_123:
          int v60 = 0;
          __int16 v61 = v19 | 0x100;
          goto LABEL_391;
        }
        __int16 v57 = v19;
        unsigned __int8 v58 = v22 - 2;
        if ((unint64_t)v21 <= 1) {
          uint64_t v21 = 1;
        }
LABEL_117:
        if (v21 >= 0) {
          uint64_t v54 = v21;
        }
        else {
          uint64_t v54 = 6;
        }
        free(v321);
        unsigned __int8 v320 = v58;
        __int16 v55 = v57;
        if ((v57 & 8) != 0)
        {
          if (v332)
          {
            double v62 = *((double *)v332 + 2 * (int)v17);
          }
          else
          {
            uint64_t v74 = (double *)v344;
            v344 += 2;
            double v62 = *v74;
          }
          double v340 = v62;
          if (v58) {
            unsigned int v75 = 2;
          }
          else {
            unsigned int v75 = 3;
          }
          long long v73 = __ldtoa(&v340, v75, v54, &v339, &v341, &v338);
        }
        else
        {
          if (v332)
          {
            double v59 = *((double *)v332 + 2 * (int)v17);
          }
          else
          {
            mbstate_t v71 = (double *)v344;
            v344 += 2;
            double v59 = *v71;
          }
          double v340 = v59;
          if (v58) {
            unsigned int v72 = 2;
          }
          else {
            unsigned int v72 = 3;
          }
          long long v73 = __dtoa(v72, v54, &v339, &v341, &v338, v59);
          if (v339 == 9999) {
            int v339 = 0x7FFFFFFF;
          }
        }
LABEL_255:
        int v98 = (int)v338;
        int v321 = __mbsconv(v73, (char *)0xFFFFFFFFLL, a2);
        __freedtoa((uint64_t)v73);
        if (v341) {
          int v343 = 45;
        }
        int v319 = v98 - v73;
        uint64_t v17 = (v17 + 1);
        uint64_t v21 = v54;
        __int16 v99 = v55;
        if (v339 == 0x7FFFFFFF)
        {
          if (*v321 == 78)
          {
            if (v22 <= 0x60) {
              long long v20 = "N";
            }
            else {
              long long v20 = "n";
            }
            int v343 = 0;
          }
          else if (v22 <= 0x60)
          {
            long long v20 = "I";
          }
          else
          {
            long long v20 = "i";
          }
          int v60 = 0;
          __int16 v61 = v99 & 0xFF7F;
          uint64_t v111 = 3;
LABEL_309:
          uint64_t v322 = v111;
          goto LABEL_391;
        }
        __int16 v61 = v55 | 0x100;
        if ((v22 & 0xFFFFFFDF) != 0x47) {
          goto LABEL_268;
        }
        if (v339 >= -3 && (uint64_t v100 = v54 - v339, v54 >= v339))
        {
          int v112 = v55 & 1;
          if ((v55 & 1) == 0) {
            uint64_t v100 = v319 - v339;
          }
          uint64_t v21 = v100 & ~(v100 >> 63);
        }
        else
        {
          if ((v55 & 1) == 0) {
            uint64_t v21 = v319;
          }
LABEL_268:
          if (v320)
          {
            uint64_t v101 = v21;
            unsigned int v102 = v339 - 1;
            if (v339 >= 1) {
              int v103 = 43;
            }
            else {
              int v103 = 45;
            }
            if (v339 - 1 < 0) {
              unsigned int v102 = 1 - v339;
            }
            v350[0] = v320;
            v350[1] = v103;
            if (v102 < 0xA)
            {
              uint64_t v113 = &v351;
              if ((v320 & 0xDF) == 0x45)
              {
                int v351 = 48;
                uint64_t v113 = v352;
              }
              *uint64_t v113 = v102 + 48;
              int v108 = v113 + 1;
            }
            else
            {
              uint64_t v104 = 0;
              long long v105 = (char *)&v346;
              do
              {
                unsigned int v106 = v102;
                unsigned int v107 = v102;
                v102 /= 0xAu;
                *(_DWORD *)long long v105 = (v107 % 0xA) | 0x30;
                v105 -= 4;
                ++v104;
              }
              while (v106 > 0x63);
              *(_DWORD *)long long v105 = v102 + 48;
              int v108 = &v351;
              if (7 - v104 <= 7)
              {
                uint64_t v109 = 5 - v104;
                uint64_t v326 = v104 - 5;
                j__mkdtempat_np((int)&v351, v105);
                LOBYTE(v99) = v55;
                uint64_t v21 = v101;
                uint64_t v110 = 5;
                if (v109 > 5) {
                  uint64_t v110 = v109;
                }
                int v108 = &v352[v110 + v326];
              }
            }
            int v60 = 0;
            unint64_t v314 = (unint64_t)((char *)v108 - (char *)v350) >> 2;
            uint64_t v114 = v21 + ((v21 > 1) | (v99 & 1)) + (int)v314;
            goto LABEL_305;
          }
          int v112 = v55 & 1;
        }
        unsigned __int8 v320 = 0;
        int v60 = 0;
        if (v339 <= 0) {
          uint64_t v115 = 1;
        }
        else {
          uint64_t v115 = v339;
        }
        if (v112) {
          BOOL v116 = 0;
        }
        else {
          BOOL v116 = v21 == 0;
        }
        if (v116) {
          uint64_t v117 = 0;
        }
        else {
          uint64_t v117 = v21 + 1;
        }
        uint64_t v322 = v117 + v115;
        if ((v99 & 0x200) == 0 || v339 < 1) {
          goto LABEL_306;
        }
        uint64_t v118 = v21;
        int inited = grouping_init_0((uint64_t)v342, v339, a2);
        uint64_t v21 = v118;
        int v60 = 0;
        unsigned __int8 v320 = 0;
        uint64_t v114 = v322 + inited;
LABEL_305:
        uint64_t v322 = v114;
LABEL_306:
        long long v20 = (char *)v321;
        goto LABEL_391;
      case 'L':
        uint64_t v19 = v19 | 8;
        continue;
      case 'O':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_134;
      case 'S':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_139;
      case 'U':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_143;
      case 'X':
        int v66 = "0123456789ABCDEFn";
        goto LABEL_158;
      case 'c':
        __int16 v61 = v19;
        if ((v19 & 0x4000) != 0)
        {
LABEL_127:
          int v60 = 0;
          goto LABEL_391;
        }
LABEL_149:
        if ((v61 & 0x10) != 0)
        {
          if (v332)
          {
            wint_t v78 = *((_DWORD *)v332 + 4 * (int)v17);
          }
          else
          {
            int v120 = v344;
            v344 += 2;
            wint_t v78 = *v120;
          }
        }
        else
        {
          uint64_t v67 = v21;
          if (v332)
          {
            int v68 = *((_DWORD *)v332 + 4 * (int)v17);
          }
          else
          {
            __darwin_ct_rune_t v95 = v344;
            v344 += 2;
            int v68 = *v95;
          }
          wint_t v78 = btowc_l(v68, a2);
          uint64_t v21 = v67;
        }
        int v60 = 0;
        uint64_t v17 = (v17 + 1);
        *(_DWORD *)v353.__mbstate8 = v78;
        int v343 = 0;
        long long v20 = (char *)&v353;
        uint64_t v111 = 1;
        goto LABEL_309;
      case 'd':
      case 'i':
LABEL_129:
        if ((v19 & 0x4000) != 0) {
          goto LABEL_162;
        }
        if ((v19 & 0x1C20) == 0)
        {
          if ((v19 & 0x10) != 0)
          {
            if (v332)
            {
              uint64_t v76 = *((void *)v332 + 2 * (int)v17);
            }
            else
            {
              int v121 = (uint64_t *)v344;
              v344 += 2;
              uint64_t v76 = *v121;
            }
          }
          else if ((v19 & 0x40) != 0)
          {
            if (v332)
            {
              LODWORD(v76) = *((_DWORD *)v332 + 4 * (int)v17);
            }
            else
            {
              uint64_t v76 = (uint64_t)v344;
              v344 += 2;
              LODWORD(v76) = *(_DWORD *)v76;
            }
            uint64_t v76 = (__int16)v76;
          }
          else if ((v19 & 0x2000) != 0)
          {
            if (v332)
            {
              LODWORD(v76) = *((_DWORD *)v332 + 4 * (int)v17);
            }
            else
            {
              uint64_t v76 = (uint64_t)v344;
              v344 += 2;
              LODWORD(v76) = *(_DWORD *)v76;
            }
            uint64_t v76 = (char)v76;
          }
          else
          {
            if (v332)
            {
              LODWORD(v76) = *((_DWORD *)v332 + 4 * (int)v17);
            }
            else
            {
              uint64_t v76 = (uint64_t)v344;
              v344 += 2;
              LODWORD(v76) = *(_DWORD *)v76;
            }
            uint64_t v76 = (int)v76;
          }
          unint64_t v63 = v317;
          if ((v76 & 0x8000000000000000) == 0)
          {
            unint64_t v316 = v76;
            goto LABEL_352;
          }
          unint64_t v316 = -v76;
          goto LABEL_351;
        }
        if (v332)
        {
          unint64_t v63 = *((void *)v332 + 2 * (int)v17);
        }
        else
        {
          int v88 = (unint64_t *)v344;
          v344 += 2;
          unint64_t v63 = *v88;
        }
        if ((v63 & 0x8000000000000000) != 0)
        {
          unint64_t v63 = -(uint64_t)v63;
LABEL_351:
          int v343 = 45;
        }
LABEL_352:
        int v90 = 10;
LABEL_375:
        if ((int)v21 < 0) {
          __int16 v61 = v19;
        }
        else {
          __int16 v61 = v19 & 0xFF7F;
        }
        int v125 = v61 & 1;
        unint64_t v317 = v63;
        if ((v61 & 0x1C20) != 0)
        {
          if (!(v63 | v21))
          {
            long long v20 = (char *)&v354;
            if (v90 != 8) {
              goto LABEL_386;
            }
            long long v20 = (char *)&v354;
            if ((v61 & 1) == 0) {
              goto LABEL_386;
            }
            uint64_t v126 = v21;
            int v125 = 1;
LABEL_385:
            long long v20 = (char *)__ultoa_0(v63, &v354, v90, v125, (uint64_t)v318);
            uint64_t v21 = v126;
LABEL_386:
            uint64_t v322 = ((char *)&v354 - v20) >> 2;
            if ((char *)&v354 - v20 >= 129) {
              abort_report_np((uint64_t)"%s:%s:%u: size (%zd) > BUF (%d)");
            }
            uint64_t v17 = (v17 + 1);
            if ((v61 & 0x200) == 0 || &v354 == (int *)v20)
            {
              int v60 = v21;
            }
            else
            {
              uint64_t v127 = v21;
              int v128 = grouping_init_0((uint64_t)v342, (unint64_t)((char *)&v354 - v20) >> 2, a2);
              uint64_t v21 = v127;
              v322 += v128;
              int v60 = v127;
            }
            goto LABEL_391;
          }
        }
        else
        {
          unint64_t v63 = v316;
          if (!(v316 | v21))
          {
            long long v20 = (char *)&v354;
            if (v90 != 8) {
              goto LABEL_386;
            }
            long long v20 = (char *)&v354;
            if ((v61 & 1) == 0) {
              goto LABEL_386;
            }
            uint64_t v126 = v21;
            int v125 = 1;
            unint64_t v63 = v316;
            goto LABEL_385;
          }
        }
        uint64_t v126 = v21;
        goto LABEL_385;
      case 'h':
        if ((v19 & 0x40) != 0) {
          uint64_t v19 = v19 & 0xFFFFDFBF | 0x2000;
        }
        else {
          uint64_t v19 = v19 | 0x40;
        }
        continue;
      case 'j':
        uint64_t v19 = v19 | 0x1000;
        continue;
      case 'l':
        if ((v19 & 0x10) != 0) {
          uint64_t v19 = v19 & 0xFFFFFFCF | 0x20;
        }
        else {
          uint64_t v19 = v19 | 0x10;
        }
        continue;
      case 'n':
        if (v332)
        {
          unint64_t v69 = (uint64_t *)*((void *)v332 + 2 * (int)v17);
        }
        else
        {
          int v82 = (uint64_t **)v344;
          v344 += 2;
          unint64_t v69 = *v82;
        }
        uint64_t v324 = (v17 + 1);
        uint64_t v9 = v323;
        if (v69)
        {
          if ((v19 & 0x20) != 0 || (v19 & 0x400) != 0 || (v19 & 0x800) != 0 || (v19 & 0x1000) != 0 || (v19 & 0x10) != 0)
          {
            uint64_t v9 = v323;
            *unint64_t v69 = v323;
          }
          else if ((v19 & 0x40) != 0)
          {
            uint64_t v9 = v323;
            *(_WORD *)unint64_t v69 = v323;
          }
          else
          {
            uint64_t v9 = v323;
            if ((v19 & 0x2000) != 0) {
              *(unsigned char *)unint64_t v69 = v323;
            }
            else {
              *(_DWORD *)unint64_t v69 = v323;
            }
          }
        }
        goto LABEL_12;
      case 'o':
LABEL_134:
        if ((v19 & 0x4000) != 0) {
          goto LABEL_162;
        }
        if ((v19 & 0x1C20) != 0)
        {
          if (v332)
          {
            unint64_t v63 = *((void *)v332 + 2 * (int)v17);
          }
          else
          {
            int v89 = (unint64_t *)v344;
            v344 += 2;
            unint64_t v63 = *v89;
          }
          int v90 = 8;
          goto LABEL_374;
        }
        if ((v19 & 0x10) != 0)
        {
          if (v332)
          {
            unint64_t v79 = *((void *)v332 + 2 * (int)v17);
          }
          else
          {
            int v122 = (unint64_t *)v344;
            v344 += 2;
            unint64_t v79 = *v122;
          }
        }
        else if ((v19 & 0x40) != 0)
        {
          if (v332)
          {
            LOWORD(v79) = *((_WORD *)v332 + 8 * (int)v17);
          }
          else
          {
            unint64_t v79 = (unint64_t)v344;
            v344 += 2;
            LODWORD(v79) = *(_DWORD *)v79;
          }
          unint64_t v79 = (unsigned __int16)v79;
        }
        else if ((v19 & 0x2000) != 0)
        {
          if (v332)
          {
            LOBYTE(v79) = *((unsigned char *)v332 + 16 * (int)v17);
          }
          else
          {
            unint64_t v79 = (unint64_t)v344;
            v344 += 2;
            LODWORD(v79) = *(_DWORD *)v79;
          }
          unint64_t v79 = v79;
        }
        else
        {
          if (v332)
          {
            LODWORD(v79) = *((_DWORD *)v332 + 4 * (int)v17);
          }
          else
          {
            unint64_t v79 = (unint64_t)v344;
            v344 += 2;
            LODWORD(v79) = *(_DWORD *)v79;
          }
          unint64_t v79 = v79;
        }
        unint64_t v316 = v79;
        int v90 = 8;
        goto LABEL_365;
      case 'p':
        if ((v19 & 0x4000) != 0)
        {
          int v60 = 0;
          unsigned int v22 = 112;
          goto LABEL_163;
        }
        if (v332)
        {
          unint64_t v63 = *((void *)v332 + 2 * (int)v17);
        }
        else
        {
          __darwin_ct_rune_t v96 = (unint64_t *)v344;
          v344 += 2;
          unint64_t v63 = *v96;
        }
        LOWORD(v19) = v19 | 0x1000;
        int v349 = 120;
        int v90 = 16;
        int v318 = (const char *)&__vfwprintf_xdigs_lower;
        goto LABEL_374;
      case 'q':
        uint64_t v19 = v19 | 0x20;
        continue;
      case 's':
LABEL_139:
        if ((v19 & 0x10) != 0)
        {
          __int16 v61 = v19;
          uint64_t v64 = v21;
          if (v332)
          {
            long long v70 = (char *)*((void *)v332 + 2 * (int)v17);
          }
          else
          {
            unsigned int v84 = (char **)v344;
            v344 += 2;
            long long v70 = *v84;
          }
          if (v70) {
            long long v20 = v70;
          }
          else {
            long long v20 = (char *)&dword_18AA009C4;
          }
        }
        else
        {
          __int16 v61 = v19;
          uint64_t v64 = v21;
          free(v321);
          if (v332)
          {
            long long v65 = (const char *)*((void *)v332 + 2 * (int)v17);
          }
          else
          {
            size_t v80 = (const char **)v344;
            v344 += 2;
            long long v65 = *v80;
          }
          if (v65)
          {
            long long v20 = (char *)__mbsconv(v65, (char *)v64, a2);
            int v321 = v20;
            if (!v20)
            {
              int v321 = 0;
              *(_WORD *)(a1 + 16) |= 0x40u;
LABEL_724:
              uint64_t v9 = v323;
              goto LABEL_725;
            }
          }
          else
          {
            int v321 = 0;
            long long v20 = (char *)&dword_18AA009C4;
          }
        }
        int64_t v85 = wcslen((const __int32 *)v20);
        if (v85 >= 0x7FFFFFFF) {
          goto LABEL_721;
        }
        int v60 = 0;
        uint64_t v17 = (v17 + 1);
        uint64_t v21 = v64;
        if (v64 >= v85 || v64 <= -1) {
          locale_t v87 = (char *)v85;
        }
        else {
          locale_t v87 = (char *)v64;
        }
        uint64_t v322 = (uint64_t)v87;
        int v343 = 0;
LABEL_391:
        uint64_t v324 = v17;
        uint64_t v325 = v21;
        if ((v61 & 0x4000) == 0)
        {
          uint64_t v129 = v322;
          if (v60 > v322) {
            uint64_t v129 = v60;
          }
          int v130 = v343;
          if (v343) {
            ++v129;
          }
          if (v349) {
            v129 += 2;
          }
          if (v18 <= v129) {
            uint64_t v131 = v129;
          }
          else {
            uint64_t v131 = v18;
          }
          uint64_t v9 = v131 + v323;
          if (v131 + v323 >= 0x80000000)
          {
LABEL_721:
            *__error() = 84;
LABEL_722:
            uint64_t v9 = -1;
            goto LABEL_725;
          }
          int v132 = v18 - v129;
          if ((v61 & 0x84) != 0)
          {
            if (!v343) {
              goto LABEL_456;
            }
          }
          else
          {
            if (v132 >= 1)
            {
              int v133 = v18 - v129;
              do
              {
                if (v133 >= 16) {
                  uint64_t v134 = 16;
                }
                else {
                  uint64_t v134 = v133;
                }
                int v135 = v334[0];
                int v136 = DWORD1(v334[0]);
                uint64_t v137 = &v333[4 * SLODWORD(v334[0])];
                *((void *)v137 + 3) = &blanks_0;
                *((void *)v137 + 4) = v134;
                DWORD1(v334[0]) = v136 + v134;
                LODWORD(v334[0]) = v135 + 1;
                if (v135 >= 7 && __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
                BOOL v138 = __OFSUB__(v133, v134);
                v133 -= v134;
              }
              while (!((v133 < 0) ^ v138 | (v133 == 0)));
              int v130 = v343;
            }
            if (!v130) {
              goto LABEL_456;
            }
          }
          int32x2_t v155 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
          int v156 = v334[0];
          int v157 = &v333[4 * SLODWORD(v334[0])];
          *((void *)v157 + 3) = &v343;
          *((void *)v157 + 4) = 1;
          *(int32x2_t *)&v334[0] = v155;
          if (v156 >= 7 && __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
            goto LABEL_724;
          }
LABEL_456:
          if (v349)
          {
            int v348 = 48;
            int32x2_t v158 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x200000001);
            int v159 = v334[0];
            uint64_t v160 = &v333[4 * SLODWORD(v334[0])];
            *((void *)v160 + 3) = &v348;
            *((void *)v160 + 4) = 2;
            *(int32x2_t *)&v334[0] = v158;
            if (v159 >= 7)
            {
              if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                goto LABEL_724;
              }
            }
          }
          if ((v61 & 0x84) == 0x80 && v132 >= 1)
          {
            int v161 = v132;
            do
            {
              uint64_t v162 = v161 >= 16 ? 16 : v161;
              int v163 = v334[0];
              int v164 = DWORD1(v334[0]);
              v165 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v165 + 3) = &zeroes_0;
              *((void *)v165 + 4) = v162;
              DWORD1(v334[0]) = v164 + v162;
              LODWORD(v334[0]) = v163 + 1;
              if (v163 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
              }
              BOOL v138 = __OFSUB__(v161, v162);
              v161 -= v162;
            }
            while (!((v161 < 0) ^ v138 | (v161 == 0)));
          }
          if ((v61 & 0x100) == 0)
          {
            int v166 = v60 - v322;
            if (v166 >= 1)
            {
              do
              {
                uint64_t v167 = v166 >= 16 ? 16 : v166;
                int v168 = v334[0];
                int v169 = DWORD1(v334[0]);
                v170 = &v333[4 * SLODWORD(v334[0])];
                *((void *)v170 + 3) = &zeroes_0;
                *((void *)v170 + 4) = v167;
                DWORD1(v334[0]) = v169 + v167;
                LODWORD(v334[0]) = v168 + 1;
                if (v168 >= 7)
                {
                  if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                    goto LABEL_724;
                  }
                }
                BOOL v138 = __OFSUB__(v166, v167);
                v166 -= v167;
              }
              while (!((v166 < 0) ^ v138 | (v166 == 0)));
            }
            if (v342[1])
            {
              if ((grouping_print_0((uint64_t)v342, (uint64_t)v333, (uint64_t)v20, (unint64_t)&v354, a2) & 0x80000000) != 0) {
                goto LABEL_724;
              }
              goto LABEL_708;
            }
            int v197 = v334[0];
            int v198 = DWORD1(v334[0]);
            int v199 = &v333[4 * SLODWORD(v334[0])];
            *((void *)v199 + 3) = v20;
            *((void *)v199 + 4) = (int)v322;
            DWORD1(v334[0]) = v198 + v322;
            LODWORD(v334[0]) = v197 + 1;
            if (v197 < 7) {
              goto LABEL_708;
            }
            goto LABEL_522;
          }
          if (v320)
          {
            if (v325 > 1 || (v61 & 1) != 0)
            {
              *(_DWORD *)v353.__mbstate8 = *(_DWORD *)v20;
              HIDWORD(v353._mbstateL) = HIDWORD(v341);
              int v185 = v334[0];
              int v186 = DWORD1(v334[0]);
              int v187 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v187 + 3) = &v353;
              *((void *)v187 + 4) = 2;
              int v188 = v186 + 2;
              int v189 = v185 + 1;
              DWORD1(v334[0]) = v188;
              LODWORD(v334[0]) = v185 + 1;
              if (v185 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
                int v189 = v334[0];
                int v188 = DWORD1(v334[0]);
              }
              int v190 = &v333[4 * v189];
              *((void *)v190 + 3) = v20 + 4;
              *((void *)v190 + 4) = v319 - 1;
              DWORD1(v334[0]) = v188 + v319 - 1;
              LODWORD(v334[0]) = v189 + 1;
              if (v189 >= 7 && __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                goto LABEL_724;
              }
              int v191 = v325 - v319;
              if ((int)v325 - v319 >= 1)
              {
                do
                {
                  uint64_t v192 = v191 >= 16 ? 16 : v191;
                  int v193 = v334[0];
                  int v194 = DWORD1(v334[0]);
                  int v195 = &v333[4 * SLODWORD(v334[0])];
                  *((void *)v195 + 3) = &zeroes_0;
                  *((void *)v195 + 4) = v192;
                  DWORD1(v334[0]) = v194 + v192;
                  LODWORD(v334[0]) = v193 + 1;
                  if (v193 >= 7)
                  {
                    if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                      goto LABEL_724;
                    }
                  }
                  BOOL v138 = __OFSUB__(v191, v192);
                  v191 -= v192;
                }
                while (!((v191 < 0) ^ v138 | (v191 == 0)));
              }
LABEL_518:
              int v175 = v334[0];
              int v174 = DWORD1(v334[0]);
            }
            else
            {
              int v171 = v334[0];
              int v172 = DWORD1(v334[0]);
              wint_t v173 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v173 + 3) = v20;
              *((void *)v173 + 4) = 1;
              int v174 = v172 + 1;
              int v175 = v171 + 1;
              DWORD1(v334[0]) = v174;
              LODWORD(v334[0]) = v171 + 1;
              if (v171 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
                goto LABEL_518;
              }
            }
            int v196 = &v333[4 * v175];
            *((void *)v196 + 3) = v350;
            *((void *)v196 + 4) = (int)v314;
            DWORD1(v334[0]) = v174 + v314;
            LODWORD(v334[0]) = v175 + 1;
            if (v175 < 7) {
              goto LABEL_708;
            }
LABEL_522:
            if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
              goto LABEL_724;
            }
            goto LABEL_708;
          }
          int v181 = v339;
          uint64_t v182 = v325;
          if (v339 <= 0)
          {
            int32x2_t v217 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
            int v218 = v334[0];
            v219 = &v333[4 * SLODWORD(v334[0])];
            *((void *)v219 + 3) = &zeroes_0;
            *((void *)v219 + 4) = 1;
            *(int32x2_t *)&v334[0] = v217;
            if (v218 >= 7)
            {
              int v220 = __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2]);
              uint64_t v182 = v325;
              if (v220) {
                goto LABEL_724;
              }
            }
            if (v182 || (v61 & 1) != 0)
            {
              int32x2_t v221 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
              int v222 = v334[0];
              int v223 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v223 + 3) = (char *)&v341 + 4;
              *((void *)v223 + 4) = 1;
              *(int32x2_t *)&v334[0] = v221;
              if (v222 >= 7)
              {
                int v224 = __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2]);
                LODWORD(v182) = v325;
                if (v224) {
                  goto LABEL_724;
                }
              }
            }
            int v225 = v339;
            if (v339 < 0)
            {
              int v226 = -v339;
              do
              {
                if (v226 >= 16) {
                  uint64_t v227 = 16;
                }
                else {
                  uint64_t v227 = v226;
                }
                int v228 = v334[0];
                int v229 = DWORD1(v334[0]);
                int v230 = &v333[4 * SLODWORD(v334[0])];
                *((void *)v230 + 3) = &zeroes_0;
                *((void *)v230 + 4) = v227;
                DWORD1(v334[0]) = v229 + v227;
                LODWORD(v334[0]) = v228 + 1;
                if (v228 >= 7 && __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
                BOOL v138 = __OFSUB__(v226, v227);
                v226 -= v227;
              }
              while (!((v226 < 0) ^ v138 | (v226 == 0)));
              int v225 = v339;
              LODWORD(v182) = v325;
            }
            int v231 = v182 + v225;
          }
          else
          {
            unint64_t v183 = (unint64_t)&v321[v319];
            if (v342[1])
            {
              int v184 = grouping_print_0((uint64_t)v342, (uint64_t)v333, (uint64_t)v20, v183, a2);
              if (v184 < 0) {
                goto LABEL_724;
              }
            }
            else
            {
              unint64_t v266 = (v183 - (unint64_t)v20) >> 2;
              if ((int)v266 >= v339) {
                uint64_t v267 = v339;
              }
              else {
                uint64_t v267 = v266;
              }
              if ((int)v267 < 1)
              {
                LODWORD(v267) = 0;
              }
              else
              {
                int v268 = v334[0];
                int v269 = DWORD1(v334[0]);
                v270 = &v333[4 * SLODWORD(v334[0])];
                *((void *)v270 + 3) = v20;
                *((void *)v270 + 4) = v267;
                DWORD1(v334[0]) = v269 + v267;
                LODWORD(v334[0]) = v268 + 1;
                if (v268 >= 7 && __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
              }
              int v288 = v181 - v267;
              if (v288 >= 1)
              {
                do
                {
                  uint64_t v289 = v288 >= 16 ? 16 : v288;
                  int v290 = v334[0];
                  int v291 = DWORD1(v334[0]);
                  int v292 = &v333[4 * SLODWORD(v334[0])];
                  *((void *)v292 + 3) = &zeroes_0;
                  *((void *)v292 + 4) = v289;
                  DWORD1(v334[0]) = v291 + v289;
                  LODWORD(v334[0]) = v290 + 1;
                  if (v290 >= 7)
                  {
                    if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                      goto LABEL_724;
                    }
                  }
                  BOOL v138 = __OFSUB__(v288, v289);
                  v288 -= v289;
                }
                while (!((v288 < 0) ^ v138 | (v288 == 0)));
              }
              int v184 = v339;
            }
            v20 += 4 * v184;
            int v231 = v325;
            if (v325 || (v61 & 1) != 0)
            {
              int32x2_t v293 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
              int v294 = v334[0];
              int v295 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v295 + 3) = (char *)&v341 + 4;
              *((void *)v295 + 4) = 1;
              *(int32x2_t *)&v334[0] = v293;
              if (v294 >= 7)
              {
                int v296 = __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2]);
                int v231 = v325;
                if (v296) {
                  goto LABEL_724;
                }
              }
            }
            else
            {
              int v231 = 0;
            }
          }
          unint64_t v297 = (unint64_t)((char *)&v321[v319] - v20) >> 2;
          if ((int)v297 >= v231) {
            uint64_t v298 = v231;
          }
          else {
            uint64_t v298 = v297;
          }
          if ((int)v298 < 1)
          {
            LODWORD(v298) = 0;
          }
          else
          {
            int v299 = v334[0];
            int v300 = DWORD1(v334[0]);
            int v301 = &v333[4 * SLODWORD(v334[0])];
            *((void *)v301 + 3) = v20;
            *((void *)v301 + 4) = v298;
            DWORD1(v334[0]) = v300 + v298;
            LODWORD(v334[0]) = v299 + 1;
            if (v299 >= 7)
            {
              int v302 = v231;
              int v303 = __sprint(*(FILE **)v333, a2, (uint64_t)&v333[2]);
              int v231 = v302;
              if (v303) {
                goto LABEL_724;
              }
            }
          }
          int v304 = v231 - v298;
          if (v231 - (int)v298 >= 1)
          {
            do
            {
              uint64_t v305 = v304 >= 16 ? 16 : v304;
              int v306 = v334[0];
              int v307 = DWORD1(v334[0]);
              int v308 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v308 + 3) = &zeroes_0;
              *((void *)v308 + 4) = v305;
              DWORD1(v334[0]) = v307 + v305;
              LODWORD(v334[0]) = v306 + 1;
              if (v306 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
              }
              BOOL v138 = __OFSUB__(v304, v305);
              v304 -= v305;
            }
            while (!((v304 < 0) ^ v138 | (v304 == 0)));
          }
LABEL_708:
          if ((v61 & 4) != 0 && v132 >= 1)
          {
            do
            {
              uint64_t v309 = v132 >= 16 ? 16 : v132;
              int v310 = v334[0];
              int v311 = DWORD1(v334[0]);
              int v312 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v312 + 3) = &blanks_0;
              *((void *)v312 + 4) = v309;
              DWORD1(v334[0]) = v311 + v309;
              LODWORD(v334[0]) = v310 + 1;
              if (v310 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_724;
                }
              }
              BOOL v138 = __OFSUB__(v132, v309);
              v132 -= v309;
            }
            while (!((v132 < 0) ^ v138 | (v132 == 0)));
          }
          if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
            goto LABEL_725;
          }
          goto LABEL_12;
        }
        int v330 = 0;
        if (v332)
        {
          long long v139 = *((_OWORD *)v332 + (int)v17);
        }
        else
        {
          int v140 = (_OWORD *)(((unint64_t)v344 + 15) & 0xFFFFFFFFFFFFFFF0);
          int v344 = v140 + 1;
          long long v139 = *v140;
        }
        long long v337 = v139;
        uint64_t v141 = (char *)a3 - (char *)i - 4;
        uint64_t v142 = v141 >> 2;
        if ((unint64_t)((v141 >> 2) + 2) >= 0x22)
        {
          uint64_t v327 = v139;
          int v144 = (char *)malloc_type_malloc(v142 + 3, 0xF22491AFuLL);
          *(void *)&long long v139 = v327;
          char v143 = v144;
        }
        else
        {
          char v143 = v345;
        }
        if (v336 == 88)
        {
          if (v22 == 99) {
            int v336 = 0;
          }
          else {
            int v336 = 32;
          }
        }
        if (v141 < 1)
        {
          int v148 = 0;
          int v147 = 0;
          int v146 = 0;
          if ((v61 & 0x40) != 0) {
            goto LABEL_446;
          }
LABEL_441:
          if ((v61 & 0x10) == 0)
          {
            char v152 = v22 - 65;
            if (v22 - 65 > 0x2F) {
              goto LABEL_525;
            }
            if (((1 << v152) & 0x7100000051) != 0)
            {
              int v153 = 6;
LABEL_452:
              uint64_t v154 = 4;
              goto LABEL_490;
            }
            if (((1 << v152) & 0x800400000000) == 0)
            {
LABEL_525:
              *(_WORD *)&v143[v148] = 26728;
              v148 += 2;
            }
            if (v22 == 112) {
              int v153 = 3;
            }
            else {
              int v153 = 0;
            }
            uint64_t v154 = 16;
            goto LABEL_490;
          }
          if (v22 == 112) {
            int v153 = 5;
          }
          else {
            int v153 = 2;
          }
          goto LABEL_452;
        }
        unint64_t v145 = 0;
        int v146 = 0;
        int v147 = 0;
        int v148 = 0;
        if (v142 <= 1) {
          uint64_t v149 = 1;
        }
        else {
          uint64_t v149 = v141 >> 2;
        }
        uint64_t v150 = 4 * v149;
        do
        {
          unsigned int v151 = i[v145 / 4];
          if (v151 - 42 <= 0x3E)
          {
            if (((1 << (v151 - 42)) & 0x4020000000030004) != 0) {
              goto LABEL_439;
            }
            if (v151 == 42)
            {
              if (i[v145 / 4 - 1] == 46) {
                int v146 = 1;
              }
              else {
                int v147 = 1;
              }
LABEL_438:
              v143[v148++] = v151;
              goto LABEL_439;
            }
          }
          if (v151 != 108 && v151 != 118) {
            goto LABEL_438;
          }
LABEL_439:
          v145 += 4;
        }
        while (v150 != v145);
        if ((v61 & 0x40) == 0) {
          goto LABEL_441;
        }
LABEL_446:
        if (v22 != 99)
        {
          if (v22 == 112)
          {
            int v153 = 4;
            goto LABEL_489;
          }
          v143[v148++] = 104;
        }
        int v153 = 1;
LABEL_489:
        uint64_t v154 = 8;
LABEL_490:
        uint64_t v328 = v154;
        char v176 = &v143[v148];
        *char v176 = v22;
        v176[1] = 0;
        if (!v147)
        {
          if (v146)
          {
            switch(v153)
            {
              case 0:
                uint64_t v178 = v139;
                goto LABEL_581;
              case 1:
                uint64_t v178 = (unsigned __int16)v139;
                goto LABEL_581;
              case 2:
                int v233 = asprintf_l(&v330, a2, v143, v325, (void)v139);
                goto LABEL_588;
              case 3:
                uint64_t v178 = v139;
                goto LABEL_581;
              case 4:
                uint64_t v178 = (unsigned __int16)v139;
                goto LABEL_581;
              case 5:
                uint64_t v178 = v139;
LABEL_581:
                int v233 = asprintf_l(&v330, a2, v143, v325, v178);
                goto LABEL_588;
              case 6:
                int v233 = asprintf_l(&v330, a2, v143, v325, *(float *)&v139);
LABEL_588:
                int v232 = v233;
                break;
              default:
                int v232 = 0;
                break;
            }
            uint64_t v9 = v323 + v232;
            int v234 = v330;
            int v235 = v334[0];
            int v236 = DWORD1(v334[0]);
            v237 = &v333[4 * SLODWORD(v334[0])];
            *((void *)v237 + 3) = v330;
            *((void *)v237 + 4) = v232;
            DWORD1(v334[0]) = v236 + v232;
            LODWORD(v334[0]) = v235 + 1;
            if (v235 >= 7)
            {
              if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                goto LABEL_725;
              }
              int v234 = v330;
            }
            free(v234);
            uint64_t v238 = (float *)&v337 + 1;
            uint64_t v239 = 1;
            while (1)
            {
              if (v336)
              {
                int32x2_t v240 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
                int v241 = v334[0];
                int v242 = &v333[4 * SLODWORD(v334[0])];
                *((void *)v242 + 3) = &v336;
                *((void *)v242 + 4) = 1;
                *(int32x2_t *)&v334[0] = v240;
                if (v241 >= 7)
                {
                  if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                    goto LABEL_725;
                  }
                }
              }
              switch(v153)
              {
                case 0:
                case 3:
                  uint64_t v243 = *((unsigned __int8 *)&v337 + v239);
                  goto LABEL_600;
                case 1:
                case 4:
                  uint64_t v243 = *((unsigned __int16 *)&v337 + v239);
                  goto LABEL_600;
                case 2:
                case 5:
                  uint64_t v243 = *(unsigned int *)v238;
LABEL_600:
                  int v244 = asprintf_l(&v330, a2, v143, v325, v243);
                  goto LABEL_601;
                case 6:
                  int v244 = asprintf_l(&v330, a2, v143, v325, *v238);
LABEL_601:
                  int v232 = v244;
                  break;
                default:
                  break;
              }
              v9 += v232;
              int v245 = v330;
              int v246 = v334[0];
              int v247 = DWORD1(v334[0]);
              v248 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v248 + 3) = v330;
              *((void *)v248 + 4) = v232;
              DWORD1(v334[0]) = v247 + v232;
              LODWORD(v334[0]) = v246 + 1;
              if (v246 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_725;
                }
                int v245 = v330;
              }
              free(v245);
              ++v239;
              ++v238;
              if (v328 == v239) {
                goto LABEL_671;
              }
            }
          }
          switch(v153)
          {
            case 0:
              uint64_t v180 = v139;
              goto LABEL_650;
            case 1:
              uint64_t v180 = (unsigned __int16)v139;
              goto LABEL_650;
            case 2:
              int v272 = asprintf_l(&v330, a2, v143, (void)v139);
              goto LABEL_651;
            case 3:
              uint64_t v180 = v139;
              goto LABEL_650;
            case 4:
              uint64_t v180 = (unsigned __int16)v139;
              goto LABEL_650;
            case 5:
              uint64_t v180 = v139;
LABEL_650:
              int v272 = asprintf_l(&v330, a2, v143, v180);
              goto LABEL_651;
            case 6:
              int v272 = asprintf_l(&v330, a2, v143, *(float *)&v139);
LABEL_651:
              int v271 = v272;
              break;
            default:
              int v271 = 0;
              break;
          }
          uint64_t v9 = v323 + v271;
          uint64_t v273 = v330;
          int v274 = v334[0];
          int v275 = DWORD1(v334[0]);
          int v276 = &v333[4 * SLODWORD(v334[0])];
          *((void *)v276 + 3) = v330;
          *((void *)v276 + 4) = v271;
          DWORD1(v334[0]) = v275 + v271;
          LODWORD(v334[0]) = v274 + 1;
          if (v274 >= 7)
          {
            if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
              goto LABEL_725;
            }
            uint64_t v273 = v330;
          }
          free(v273);
          v277 = (float *)&v337 + 1;
          for (uint64_t j = 1; j != v328; ++j)
          {
            if (v336)
            {
              int32x2_t v279 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
              int v280 = v334[0];
              int v281 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v281 + 3) = &v336;
              *((void *)v281 + 4) = 1;
              *(int32x2_t *)&v334[0] = v279;
              if (v280 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  goto LABEL_725;
                }
              }
            }
            switch(v153)
            {
              case 0:
              case 3:
                uint64_t v282 = *((unsigned __int8 *)&v337 + j);
                goto LABEL_663;
              case 1:
              case 4:
                uint64_t v282 = *((unsigned __int16 *)&v337 + j);
                goto LABEL_663;
              case 2:
              case 5:
                uint64_t v282 = *(unsigned int *)v277;
LABEL_663:
                int v283 = asprintf_l(&v330, a2, v143, v282);
                goto LABEL_664;
              case 6:
                int v283 = asprintf_l(&v330, a2, v143, *v277);
LABEL_664:
                int v271 = v283;
                break;
              default:
                break;
            }
            v9 += v271;
            int v284 = v330;
            int v285 = v334[0];
            int v286 = DWORD1(v334[0]);
            int v287 = &v333[4 * SLODWORD(v334[0])];
            *((void *)v287 + 3) = v330;
            *((void *)v287 + 4) = v271;
            DWORD1(v334[0]) = v286 + v271;
            LODWORD(v334[0]) = v285 + 1;
            if (v285 >= 7)
            {
              if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                goto LABEL_725;
              }
              int v284 = v330;
            }
            free(v284);
            ++v277;
          }
LABEL_671:
          if (v143 != v345) {
            free(v143);
          }
          uint64_t v324 = (v324 + 1);
          goto LABEL_12;
        }
        if (v146)
        {
          switch(v153)
          {
            case 0:
              uint64_t v177 = v139;
              goto LABEL_535;
            case 1:
              uint64_t v177 = (unsigned __int16)v139;
              goto LABEL_535;
            case 2:
              int v201 = asprintf_l(&v330, a2, v143, v18, v325, (void)v139);
              goto LABEL_542;
            case 3:
              uint64_t v177 = v139;
              goto LABEL_535;
            case 4:
              uint64_t v177 = (unsigned __int16)v139;
              goto LABEL_535;
            case 5:
              uint64_t v177 = v139;
LABEL_535:
              int v201 = asprintf_l(&v330, a2, v143, v18, v325, v177);
              goto LABEL_542;
            case 6:
              int v201 = asprintf_l(&v330, a2, v143, v18, v325, *(float *)&v139);
LABEL_542:
              int v200 = v201;
              break;
            default:
              int v200 = 0;
              break;
          }
          uint64_t v9 = v323 + v200;
          int v202 = v330;
          int v203 = v334[0];
          int v204 = DWORD1(v334[0]);
          v205 = &v333[4 * SLODWORD(v334[0])];
          *((void *)v205 + 3) = v330;
          *((void *)v205 + 4) = v200;
          DWORD1(v334[0]) = v204 + v200;
          LODWORD(v334[0]) = v203 + 1;
          if (v203 < 7) {
            goto LABEL_546;
          }
          if (!__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2]))
          {
            int v202 = v330;
LABEL_546:
            free(v202);
            int v206 = (float *)&v337 + 1;
            uint64_t v207 = 1;
            while (1)
            {
              if (v336)
              {
                int32x2_t v208 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
                int v209 = v334[0];
                uint64_t v210 = &v333[4 * SLODWORD(v334[0])];
                *((void *)v210 + 3) = &v336;
                *((void *)v210 + 4) = 1;
                *(int32x2_t *)&v334[0] = v208;
                if (v209 >= 7)
                {
                  if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                    break;
                  }
                }
              }
              switch(v153)
              {
                case 0:
                case 3:
                  uint64_t v211 = *((unsigned __int8 *)&v337 + v207);
                  goto LABEL_554;
                case 1:
                case 4:
                  uint64_t v211 = *((unsigned __int16 *)&v337 + v207);
                  goto LABEL_554;
                case 2:
                case 5:
                  uint64_t v211 = *(unsigned int *)v206;
LABEL_554:
                  int v212 = asprintf_l(&v330, a2, v143, v18, v325, v211);
                  goto LABEL_555;
                case 6:
                  int v212 = asprintf_l(&v330, a2, v143, v18, v325, *v206);
LABEL_555:
                  int v200 = v212;
                  break;
                default:
                  break;
              }
              v9 += v200;
              int v213 = v330;
              int v214 = v334[0];
              int v215 = DWORD1(v334[0]);
              int v216 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v216 + 3) = v330;
              *((void *)v216 + 4) = v200;
              DWORD1(v334[0]) = v215 + v200;
              LODWORD(v334[0]) = v214 + 1;
              if (v214 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  break;
                }
                int v213 = v330;
              }
              free(v213);
              ++v207;
              ++v206;
              if (v328 == v207) {
                goto LABEL_671;
              }
            }
          }
        }
        else
        {
          switch(v153)
          {
            case 0:
              uint64_t v179 = v139;
              goto LABEL_610;
            case 1:
              uint64_t v179 = (unsigned __int16)v139;
              goto LABEL_610;
            case 2:
              int v250 = asprintf_l(&v330, a2, v143, v18, (void)v139);
              goto LABEL_617;
            case 3:
              uint64_t v179 = v139;
              goto LABEL_610;
            case 4:
              uint64_t v179 = (unsigned __int16)v139;
              goto LABEL_610;
            case 5:
              uint64_t v179 = v139;
LABEL_610:
              int v250 = asprintf_l(&v330, a2, v143, v18, v179);
              goto LABEL_617;
            case 6:
              int v250 = asprintf_l(&v330, a2, v143, v18, *(float *)&v139);
LABEL_617:
              int v249 = v250;
              break;
            default:
              int v249 = 0;
              break;
          }
          uint64_t v9 = v323 + v249;
          int v251 = v330;
          int v252 = v334[0];
          int v253 = DWORD1(v334[0]);
          int v254 = &v333[4 * SLODWORD(v334[0])];
          *((void *)v254 + 3) = v330;
          *((void *)v254 + 4) = v249;
          DWORD1(v334[0]) = v253 + v249;
          LODWORD(v334[0]) = v252 + 1;
          if (v252 >= 7)
          {
            if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
              goto LABEL_725;
            }
            int v251 = v330;
          }
          free(v251);
          v255 = (float *)&v337 + 1;
          uint64_t v256 = 1;
          while (1)
          {
            if (v336)
            {
              int32x2_t v257 = vadd_s32(*(int32x2_t *)&v334[0], (int32x2_t)0x100000001);
              int v258 = v334[0];
              int v259 = &v333[4 * SLODWORD(v334[0])];
              *((void *)v259 + 3) = &v336;
              *((void *)v259 + 4) = 1;
              *(int32x2_t *)&v334[0] = v257;
              if (v258 >= 7)
              {
                if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                  break;
                }
              }
            }
            switch(v153)
            {
              case 0:
              case 3:
                uint64_t v260 = *((unsigned __int8 *)&v337 + v256);
                goto LABEL_629;
              case 1:
              case 4:
                uint64_t v260 = *((unsigned __int16 *)&v337 + v256);
                goto LABEL_629;
              case 2:
              case 5:
                uint64_t v260 = *(unsigned int *)v255;
LABEL_629:
                int v261 = asprintf_l(&v330, a2, v143, v18, v260);
                goto LABEL_630;
              case 6:
                int v261 = asprintf_l(&v330, a2, v143, v18, *v255);
LABEL_630:
                int v249 = v261;
                break;
              default:
                break;
            }
            v9 += v249;
            v262 = v330;
            int v263 = v334[0];
            int v264 = DWORD1(v334[0]);
            int v265 = &v333[4 * SLODWORD(v334[0])];
            *((void *)v265 + 3) = v330;
            *((void *)v265 + 4) = v249;
            DWORD1(v334[0]) = v264 + v249;
            LODWORD(v334[0]) = v263 + 1;
            if (v263 >= 7)
            {
              if (__sprint(*(FILE **)v333, a2, (uint64_t)&v333[2])) {
                break;
              }
              v262 = v330;
            }
            free(v262);
            ++v256;
            ++v255;
            if (v328 == v256) {
              goto LABEL_671;
            }
          }
        }
LABEL_725:
        free(v321);
        if ((*(_WORD *)(a1 + 16) & 0x40) != 0) {
          unint64_t v313 = -1;
        }
        else {
          unint64_t v313 = v9;
        }
        if (v332 && v332 != v347) {
          free(v332);
        }
        if (v313 > 0x7FFFFFFE) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v313;
        }
      case 't':
        uint64_t v19 = v19 | 0x800;
        continue;
      case 'u':
LABEL_143:
        if ((v19 & 0x4000) != 0) {
          goto LABEL_162;
        }
        if ((v19 & 0x1C20) != 0)
        {
          if (v332)
          {
            unint64_t v63 = *((void *)v332 + 2 * (int)v17);
          }
          else
          {
            int v91 = (unint64_t *)v344;
            v344 += 2;
            unint64_t v63 = *v91;
          }
          int v90 = 10;
        }
        else
        {
          if ((v19 & 0x10) != 0)
          {
            if (v332)
            {
              unint64_t v81 = *((void *)v332 + 2 * (int)v17);
            }
            else
            {
              int v123 = (unint64_t *)v344;
              v344 += 2;
              unint64_t v81 = *v123;
            }
          }
          else if ((v19 & 0x40) != 0)
          {
            if (v332)
            {
              LOWORD(v81) = *((_WORD *)v332 + 8 * (int)v17);
            }
            else
            {
              unint64_t v81 = (unint64_t)v344;
              v344 += 2;
              LODWORD(v81) = *(_DWORD *)v81;
            }
            unint64_t v81 = (unsigned __int16)v81;
          }
          else if ((v19 & 0x2000) != 0)
          {
            if (v332)
            {
              LOBYTE(v81) = *((unsigned char *)v332 + 16 * (int)v17);
            }
            else
            {
              unint64_t v81 = (unint64_t)v344;
              v344 += 2;
              LODWORD(v81) = *(_DWORD *)v81;
            }
            unint64_t v81 = v81;
          }
          else
          {
            if (v332)
            {
              LODWORD(v81) = *((_DWORD *)v332 + 4 * (int)v17);
            }
            else
            {
              unint64_t v81 = (unint64_t)v344;
              v344 += 2;
              LODWORD(v81) = *(_DWORD *)v81;
            }
            unint64_t v81 = v81;
          }
          unint64_t v316 = v81;
          int v90 = 10;
LABEL_365:
          unint64_t v63 = v317;
        }
        goto LABEL_374;
      case 'v':
        uint64_t v19 = v19 | 0x4000;
        continue;
      case 'x':
        int v66 = (const char *)&__vfwprintf_xdigs_lower;
LABEL_158:
        int v318 = v66;
        if ((v19 & 0x4000) != 0)
        {
LABEL_162:
          int v60 = 0;
LABEL_163:
          __int16 v61 = v19;
          goto LABEL_391;
        }
        if ((v19 & 0x1C20) != 0)
        {
          if (v332)
          {
            unint64_t v63 = *((void *)v332 + 2 * (int)v17);
          }
          else
          {
            double v92 = (unint64_t *)v344;
            v344 += 2;
            unint64_t v63 = *v92;
          }
        }
        else
        {
          if ((v19 & 0x10) != 0)
          {
            if (v332)
            {
              unint64_t v83 = *((void *)v332 + 2 * (int)v17);
            }
            else
            {
              int v124 = (unint64_t *)v344;
              v344 += 2;
              unint64_t v83 = *v124;
            }
          }
          else if ((v19 & 0x40) != 0)
          {
            if (v332)
            {
              LOWORD(v83) = *((_WORD *)v332 + 8 * (int)v17);
            }
            else
            {
              unint64_t v83 = (unint64_t)v344;
              v344 += 2;
              LODWORD(v83) = *(_DWORD *)v83;
            }
            unint64_t v83 = (unsigned __int16)v83;
          }
          else if ((v19 & 0x2000) != 0)
          {
            if (v332)
            {
              LOBYTE(v83) = *((unsigned char *)v332 + 16 * (int)v17);
            }
            else
            {
              unint64_t v83 = (unint64_t)v344;
              v344 += 2;
              LODWORD(v83) = *(_DWORD *)v83;
            }
            unint64_t v83 = v83;
          }
          else
          {
            if (v332)
            {
              LODWORD(v83) = *((_DWORD *)v332 + 4 * (int)v17);
            }
            else
            {
              unint64_t v83 = (unint64_t)v344;
              v344 += 2;
              LODWORD(v83) = *(_DWORD *)v83;
            }
            unint64_t v83 = v83;
          }
          unint64_t v316 = v83;
          unint64_t v63 = v317;
        }
        if ((v19 & 1) == 0) {
          goto LABEL_373;
        }
        if ((v19 & 0x1C20) != 0)
        {
          if (!v63) {
            goto LABEL_373;
          }
LABEL_372:
          int v349 = v22;
          goto LABEL_373;
        }
        if (v316) {
          goto LABEL_372;
        }
LABEL_373:
        LOWORD(v19) = v19 & 0xFDFF;
        int v90 = 16;
LABEL_374:
        int v343 = 0;
        goto LABEL_375;
      case 'z':
        uint64_t v19 = v19 | 0x400;
        continue;
      default:
        if (!v22) {
          goto LABEL_723;
        }
        int v60 = 0;
        *(_DWORD *)v353.__mbstate8 = v22;
        int v343 = 0;
        long long v20 = (char *)&v353;
        uint64_t v322 = 1;
        goto LABEL_163;
    }
  }
}

int vfwprintf(FILE *a1, const __int32 *a2, __darwin_va_list a3)
{
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(a1, v7, a2, a3);
}

void *__mbsconv(const char *__sig, char *a2, _xlocale *a3)
{
  memset(&v15, 0, sizeof(v15));
  if (!__sig) {
    return 0;
  }
  __int16 v4 = __sig;
  if ((a2 & 0x80000000) != 0)
  {
    size_t v6 = j__strsignal_r((int)__sig, a2, (size_t)a3);
    goto LABEL_10;
  }
  size_t v5 = *(int *)(*((void *)a3 + 166) + 64);
  memset(&v15, 0, sizeof(v15));
  size_t v6 = 0;
  if (a2)
  {
    uint64_t v7 = a2;
    locale_t v8 = __sig;
    do
    {
      size_t v9 = mbrlen_l(v8, v5, &v15, a3);
      if (v9 + 2 < 3) {
        break;
      }
      v8 += v9;
      v6 += v9;
      --v7;
    }
    while (v7);
    if (v9 > 0xFFFFFFFFFFFFFFFDLL) {
      return 0;
    }
  }
LABEL_10:
  __int32 v10 = malloc_type_malloc(4 * v6 + 4, 0x100004052888210uLL);
  char v11 = v10;
  if (v10)
  {
    unsigned int v12 = (__int32 *)v10;
    memset(&v15, 0, sizeof(v15));
    if (!v6) {
      goto LABEL_19;
    }
    unsigned int v12 = (__int32 *)v10;
    while (1)
    {
      size_t v13 = mbrtowc_l(v12, v4, v6, &v15, a3);
      if (v13 + 2 < 3) {
        break;
      }
      ++v12;
      v4 += v13;
      v6 -= v13;
      if (!v6) {
        goto LABEL_19;
      }
    }
    if (v13 < 0xFFFFFFFFFFFFFFFELL)
    {
LABEL_19:
      *unsigned int v12 = 0;
      return v11;
    }
    free(v11);
    return 0;
  }
  return v11;
}

uint64_t grouping_init_0(uint64_t a1, int a2, locale_t a3)
{
  size_t v6 = localeconv_l(a3);
  *(void *)(a1 + 8) = __fix_nogrouping(v6->grouping);
  __int32 v15 = 0;
  memset(&v16, 0, sizeof(v16));
  uint64_t v7 = localeconv_l(a3);
  int v8 = mbrtowc_l(&v15, v7->thousands_sep, *(int *)(*((void *)a3 + 166) + 64), &v16, a3);
  uint64_t result = 0;
  if ((~v8 & 0xFFFFFFFE) != 0) {
    __int32 v10 = v15;
  }
  else {
    __int32 v10 = 0;
  }
  *(_DWORD *)a1 = v10;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  char v11 = *(unsigned __int8 **)(a1 + 8);
  int v12 = *v11;
  if (v12 != 127)
  {
    int v13 = 0;
    int v14 = 0;
    do
    {
      if (a2 <= (char)v12) {
        break;
      }
      a2 -= (char)v12;
      *(_DWORD *)(a1 + 16) = a2;
      if (v11[1])
      {
        *(_DWORD *)(a1 + 20) = ++v14;
        *(void *)(a1 + 8) = ++v11;
      }
      else
      {
        *(_DWORD *)(a1 + 24) = ++v13;
      }
      int v12 = *v11;
    }
    while (v12 != 127);
    return (v13 + v14);
  }
  return result;
}

unint64_t grouping_print_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, locale_t a5)
{
  int v10 = *(_DWORD *)(a1 + 16);
  unint64_t v11 = (a4 - a3) >> 2;
  if ((int)v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  if ((int)v12 < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    int v13 = *(_DWORD *)(a2 + 20);
    uint64_t v14 = *(int *)(a2 + 16);
    uint64_t v15 = a2 + 16 * v14;
    *(void *)(v15 + 24) = a3;
    *(void *)(v15 + 32) = v12;
    *(_DWORD *)(a2 + 16) = v14 + 1;
    *(_DWORD *)(a2 + 20) = v13 + v12;
    if ((int)v14 >= 7 && __sprint(*(FILE **)a2, a5, a2 + 8)) {
      return 0xFFFFFFFFLL;
    }
  }
  int v17 = v10 - v12;
  if (v10 - (int)v12 < 1)
  {
LABEL_17:
    for (unint64_t i = a3 + 4 * *(int *)(a1 + 16); ; i += 4 * **(char **)(a1 + 8))
    {
      int v24 = *(_DWORD *)(a1 + 20);
      int v25 = *(_DWORD *)(a1 + 24);
      if (v24 <= 0) {
        break;
      }
      if (v25 >= 1) {
        goto LABEL_22;
      }
      --*(void *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v24 - 1;
LABEL_23:
      int32x2_t v26 = *(int32x2_t *)(a2 + 16);
      uint64_t v27 = a2 + 16 * v26.i32[0];
      *(void *)(v27 + 24) = a1;
      *(void *)(v27 + 32) = 1;
      *(int32x2_t *)(a2 + 16) = vadd_s32(v26, (int32x2_t)0x100000001);
      if (v26.i32[0] >= 7 && __sprint(*(FILE **)a2, a5, a2 + 8)) {
        return 0xFFFFFFFFLL;
      }
      int v28 = **(char **)(a1 + 8);
      unint64_t v29 = (a4 - i) >> 2;
      if ((int)v29 >= v28) {
        uint64_t v30 = v28;
      }
      else {
        uint64_t v30 = v29;
      }
      if ((int)v30 < 1)
      {
        LODWORD(v30) = 0;
      }
      else
      {
        int v31 = *(_DWORD *)(a2 + 20);
        uint64_t v32 = *(int *)(a2 + 16);
        uint64_t v33 = a2 + 16 * v32;
        *(void *)(v33 + 24) = i;
        *(void *)(v33 + 32) = v30;
        *(_DWORD *)(a2 + 16) = v32 + 1;
        *(_DWORD *)(a2 + 20) = v31 + v30;
        if ((int)v32 >= 7 && __sprint(*(FILE **)a2, a5, a2 + 8)) {
          return 0xFFFFFFFFLL;
        }
      }
      int v34 = v28 - v30;
      if (v34 >= 1)
      {
        do
        {
          uint64_t v35 = v34 >= 16 ? 16 : v34;
          int v36 = *(_DWORD *)(a2 + 20);
          uint64_t v37 = *(int *)(a2 + 16);
          uint64_t v38 = a2 + 16 * v37;
          *(void *)(v38 + 24) = &zeroes_0;
          *(void *)(v38 + 32) = v35;
          *(_DWORD *)(a2 + 16) = v37 + 1;
          *(_DWORD *)(a2 + 20) = v36 + v35;
          if ((int)v37 >= 7)
          {
            if (__sprint(*(FILE **)a2, a5, a2 + 8)) {
              return 0xFFFFFFFFLL;
            }
          }
          BOOL v22 = __OFSUB__(v34, v35);
          v34 -= v35;
        }
        while (!((v34 < 0) ^ v22 | (v34 == 0)));
      }
    }
    if (v25 <= 0)
    {
      if (i <= a4) {
        unint64_t v39 = i;
      }
      else {
        unint64_t v39 = a4;
      }
      return (v39 - a3) >> 2;
    }
LABEL_22:
    *(_DWORD *)(a1 + 24) = v25 - 1;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v18 = v17 >= 16 ? 16 : v17;
    int v19 = *(_DWORD *)(a2 + 20);
    uint64_t v20 = *(int *)(a2 + 16);
    uint64_t v21 = a2 + 16 * v20;
    *(void *)(v21 + 24) = &zeroes_0;
    *(void *)(v21 + 32) = v18;
    *(_DWORD *)(a2 + 16) = v20 + 1;
    *(_DWORD *)(a2 + 20) = v19 + v18;
    if ((int)v20 >= 7)
    {
      if (__sprint(*(FILE **)a2, a5, a2 + 8)) {
        return 0xFFFFFFFFLL;
      }
    }
    BOOL v22 = __OFSUB__(v17, v18);
    v17 -= v18;
    if ((v17 < 0) ^ v22 | (v17 == 0)) {
      goto LABEL_17;
    }
  }
}

uint64_t __sprint(FILE *a1, locale_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 12);
  if (!v4)
  {
LABEL_13:
    uint64_t result = 0;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }
  uint64_t v7 = *(unsigned int ***)a3;
  while (1)
  {
    int v8 = v7[1];
    if ((int)v8 >= 1) {
      break;
    }
LABEL_12:
    v7 += 2;
    v4 -= (int)v8;
    *(_DWORD *)(a3 + 12) = v4;
    if (!v4) {
      goto LABEL_13;
    }
  }
  size_t v9 = *v7;
  uint64_t v10 = v7[1];
  while (1)
  {
    unsigned int v12 = *v9++;
    uint64_t v11 = v12;
    if ((a1->_flags & 0x200) == 0)
    {
      LODWORD(v11) = __fputwc(v11, a1, (uint64_t)a2);
      goto LABEL_9;
    }
    memset(&v20, 0, sizeof(v20));
    size_t v13 = wcrtomb_l(v19, v11, &v20, a2);
    if (v13 == -1) {
      break;
    }
    v15[1] = v13;
    mbstate_t v16 = v15;
    int v17 = 1;
    int v18 = v13;
    v15[0] = v19;
    if (__sfvwrite((uint64_t)a1, (uint64_t)&v16) == -1) {
      return 0xFFFFFFFFLL;
    }
LABEL_9:
    if (v11 == -1) {
      return 0xFFFFFFFFLL;
    }
    if (!--v10)
    {
      int v4 = *(_DWORD *)(a3 + 12);
      goto LABEL_12;
    }
  }
  a1->_flags |= 0x40u;
  return 0xFFFFFFFFLL;
}

int vfwscanf(FILE *a1, const __int32 *a2, __darwin_va_list a3)
{
  flockfile(a1);
  extra = a1->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v7 = __locale_key;
  int v8 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if (v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = (_xlocale *)&__global_locale;
  }
  int v10 = __vfwscanf((uint64_t)a1, v9, (unsigned int *)a2, (__int32 **)a3);
  funlockfile(a1);
  return v10;
}

uint64_t __vfwscanf(uint64_t a1, locale_t a2, unsigned int *a3, __int32 **a4)
{
  int v171 = 0;
  int v172 = a4;
  memset(&v174, 0, sizeof(v174));
  unint64_t v161 = *(int *)(*((void *)a2 + 166) + 64);
  unsigned int v4 = *a3;
  if (!*a3) {
    return 0;
  }
  size_t v5 = a3;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int base = 0;
  uint64_t v167 = 0;
  long long __s = 0;
  BOOL v162 = 0;
  locale_t v10 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v10 = a2;
  }
  locale_t v168 = v10;
  int v157 = 0;
LABEL_5:
  uint64_t v11 = v5;
  unsigned int v164 = v8;
  while (1)
  {
    size_t v5 = v11;
LABEL_7:
    if (v4 > 0x7F)
    {
      if (v4 >= 0x100)
      {
        LOWORD(v13) = ___runetype_l(v4, a2);
        goto LABEL_13;
      }
      unsigned int v12 = *(_RuneLocale **)(*((void *)v168 + 166) + 120);
    }
    else
    {
      unsigned int v12 = &_DefaultRuneLocale;
    }
    __uint32_t v13 = v12->__runetype[v4];
LABEL_13:
    uint64_t v11 = v5 + 1;
    if ((v13 & 0x4000) != 0)
    {
      uint64_t v28 = __fgetwc(a1, (uint64_t)a2);
      if (v28 == -1) {
        goto LABEL_78;
      }
      uint64_t v29 = v28;
      while (1)
      {
        if (v29 > 0x7F)
        {
          if (v29 >= 0x100)
          {
            LOWORD(v31) = ___runetype_l(v29, a2);
            goto LABEL_70;
          }
          uint64_t v30 = *(_RuneLocale **)(*((void *)v168 + 166) + 120);
        }
        else
        {
          uint64_t v30 = &_DefaultRuneLocale;
        }
        __uint32_t v31 = v30->__runetype[v29];
LABEL_70:
        if ((v31 & 0x4000) == 0)
        {
          __ungetwc(v29, a1, (uint64_t)a2);
          goto LABEL_78;
        }
        uint64_t v9 = (v9 + 1);
        uint64_t v29 = __fgetwc(a1, (uint64_t)a2);
        if (v29 == -1) {
          goto LABEL_78;
        }
      }
    }
    if (v4 == 37) {
      break;
    }
    uint64_t v25 = __fgetwc(a1, (uint64_t)a2);
    if (v25 == -1)
    {
LABEL_468:
      if (v164) {
        return v164;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
LABEL_76:
    if (v25 != v4)
    {
      uint64_t v149 = v25;
LABEL_477:
      __ungetwc(v149, a1, (uint64_t)a2);
      return v164;
    }
    uint64_t v9 = (v9 + 1);
    uint64_t v8 = v164;
LABEL_78:
    unsigned int v4 = *v11;
    if (!*v11) {
      return v8;
    }
  }
  unsigned int v14 = 0;
  unint64_t v15 = 0;
  while (2)
  {
    size_t v5 = v11 + 1;
    uint64_t v16 = *v11;
    switch((int)v16)
    {
      case '$':
        if ((v15 - 10) < 0xFFFFFFF7 || *(v11 - 2) != 37) {
          goto LABEL_468;
        }
        unsigned int v17 = v15;
        unint64_t v15 = 0;
        int v172 = a4;
        ++v11;
        if (v17 >= 2)
        {
          unsigned int v18 = v17 + 1;
          do
          {
            ++v172;
            --v18;
          }
          while (v18 > 2);
          unint64_t v15 = 0;
          uint64_t v11 = v5;
        }
        continue;
      case '%':
        uint64_t v24 = __fgetwc(a1, (uint64_t)a2);
        if (v24 == -1) {
          goto LABEL_468;
        }
        uint64_t v25 = v24;
        while (2)
        {
          if (v25 > 0x7F)
          {
            if (v25 >= 0x100)
            {
              LOWORD(v27) = ___runetype_l(v25, a2);
              goto LABEL_59;
            }
            int32x2_t v26 = *(_RuneLocale **)(*((void *)v168 + 166) + 120);
          }
          else
          {
            int32x2_t v26 = &_DefaultRuneLocale;
          }
          __uint32_t v27 = v26->__runetype[v25];
LABEL_59:
          if ((v27 & 0x4000) != 0)
          {
            LODWORD(v9) = v9 + 1;
            uint64_t v25 = __fgetwc(a1, (uint64_t)a2);
            if (v25 == -1) {
              goto LABEL_468;
            }
            continue;
          }
          break;
        }
        unsigned int v4 = 37;
        ++v11;
        goto LABEL_76;
      case '&':
      case '\'':
      case '(':
      case ')':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'D':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'Y':
      case 'Z':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'b':
      case 'k':
      case 'm':
      case 'r':
      case 'v':
      case 'w':
      case 'y':
        return v164;
      case '*':
        v14 |= 8u;
        ++v11;
        continue;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        unint64_t v15 = v16 + 10 * v15 - 48;
        ++v11;
        continue;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        int v32 = 4;
        if ((v14 & 0x20) != 0) {
          goto LABEL_117;
        }
        goto LABEL_105;
      case 'C':
        v14 |= 1u;
        goto LABEL_85;
      case 'L':
        v14 |= 2u;
        ++v11;
        continue;
      case 'S':
        v14 |= 1u;
        goto LABEL_88;
      case 'X':
      case 'x':
        int v33 = 33024;
        goto LABEL_101;
      case '[':
        BOOL v162 = v11[1] == 94;
        int v34 = v11 + 2;
        uint64_t v35 = 1;
        if (v11[1] == 94) {
          uint64_t v35 = 2;
        }
        else {
          int v34 = v11 + 1;
        }
        for (unint64_t i = &v34[v11[v35] == 93]; *i && *i != 93; ++i)
          ;
        long long __s = (__int32 *)(v11 + 1);
        int v157 = i;
        size_t v5 = i + 1;
        v14 |= 0x20u;
        int v32 = 1;
        if ((v14 & 0x20) == 0) {
          goto LABEL_105;
        }
        goto LABEL_117;
      case 'c':
LABEL_85:
        int v32 = 0;
        v14 |= 0x20u;
        if ((v14 & 0x20) != 0) {
          goto LABEL_117;
        }
        goto LABEL_105;
      case 'd':
        goto LABEL_103;
      case 'h':
        unsigned int v19 = v14 & 0xFFFFBFFB | 0x4000;
        int v20 = v14 | 4;
        BOOL v21 = (v14 & 4) == 0;
        goto LABEL_29;
      case 'i':
        int base = 0;
        int v32 = 3;
        if ((v14 & 0x20) != 0) {
          goto LABEL_117;
        }
        goto LABEL_105;
      case 'j':
        v14 |= 0x800u;
        ++v11;
        continue;
      case 'l':
        unsigned int v19 = v14 & 0xFFFFFBFE | 0x400;
        int v20 = v14 | 1;
        BOOL v21 = (v14 & 1) == 0;
LABEL_29:
        if (v21) {
          unsigned int v14 = v20;
        }
        else {
          unsigned int v14 = v19;
        }
        ++v11;
        continue;
      case 'n':
        if ((v14 & 8) == 0)
        {
          BOOL v22 = v172++;
          unsigned int v23 = *v22;
          if (v23)
          {
            if ((v14 & 0x4000) != 0)
            {
              *(unsigned char *)unsigned int v23 = v9;
            }
            else if ((v14 & 4) != 0)
            {
              *(_WORD *)unsigned int v23 = v9;
            }
            else if ((v14 & 1) != 0 {
                   || (v14 & 0x400) != 0
            }
                   || (v14 & 0x800) != 0
                   || (v14 & 0x2000) != 0
                   || (v14 & 0x1000) != 0)
            {
              *(void *)unsigned int v23 = (int)v9;
            }
            else
            {
              *unsigned int v23 = v9;
            }
          }
        }
        unsigned int v4 = *v5;
        uint64_t v8 = v164;
        if (!*v5) {
          return v8;
        }
        goto LABEL_7;
      case 'o':
        v14 |= 0x8000u;
        int v32 = 3;
        int v37 = 8;
        goto LABEL_104;
      case 'p':
        int v33 = 33040;
LABEL_101:
        v14 |= v33;
        int v32 = 3;
        int v37 = 16;
        goto LABEL_104;
      case 'q':
        v14 |= 0x400u;
        ++v11;
        continue;
      case 's':
LABEL_88:
        int v32 = 2;
        if ((v14 & 0x20) != 0) {
          goto LABEL_117;
        }
        goto LABEL_105;
      case 't':
        v14 |= 0x1000u;
        ++v11;
        continue;
      case 'u':
        v14 |= 0x8000u;
LABEL_103:
        int v32 = 3;
        int v37 = 10;
LABEL_104:
        int base = v37;
        if ((v14 & 0x20) != 0) {
          goto LABEL_117;
        }
LABEL_105:
        uint64_t v38 = __fgetwc(a1, (uint64_t)a2);
        if (v38 == -1) {
          goto LABEL_468;
        }
        uint64_t v39 = v38;
        break;
      case 'z':
        v14 |= 0x2000u;
        ++v11;
        continue;
      default:
        if (!v16) {
          return 0xFFFFFFFFLL;
        }
        return v164;
    }
    break;
  }
  while (1)
  {
    if (v39 > 0x7F)
    {
      if (v39 >= 0x100)
      {
        if ((___runetype_l(v39, a2) & 0x4000) == 0) {
          break;
        }
        goto LABEL_114;
      }
      long long v40 = *(_RuneLocale **)(*((void *)v168 + 166) + 120);
    }
    else
    {
      long long v40 = &_DefaultRuneLocale;
    }
    if ((v40->__runetype[v39] & 0x4000) == 0) {
      break;
    }
LABEL_114:
    uint64_t v9 = (v9 + 1);
    uint64_t v39 = __fgetwc(a1, (uint64_t)a2);
    if (v39 == -1) {
      goto LABEL_468;
    }
  }
  __ungetwc(v39, a1, (uint64_t)a2);
LABEL_117:
  switch(v32)
  {
    case 0:
      if (v15 <= 1) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = v15;
      }
      unsigned int v42 = v14 & 8;
      if (v14)
      {
        if ((v14 & 8) == 0)
        {
          unsigned int v75 = v172++;
          int v171 = *v75;
        }
        uint64_t v76 = 0;
        while (1)
        {
          __int32 v77 = __fgetwc(a1, (uint64_t)a2);
          if (v77 == -1) {
            break;
          }
          if (!v42)
          {
            wint_t v78 = v171;
            __int32 *v171 = v77;
            int v171 = v78 + 1;
          }
          if (v41 == ++v76) {
            goto LABEL_376;
          }
        }
        LODWORD(v41) = v76;
LABEL_376:
        if (v41)
        {
          uint64_t v9 = (v41 + v9);
          uint64_t v8 = ((v42 >> 3) ^ 1) + v164;
          goto LABEL_466;
        }
      }
      else
      {
        if ((v14 & 8) == 0)
        {
          unsigned int v43 = (char **)v172++;
          uint64_t v167 = *v43;
        }
        int v44 = 0;
        memset(&v174, 0, sizeof(v174));
        while (1)
        {
          uint64_t v45 = __fgetwc(a1, (uint64_t)a2);
          if (v45 == -1) {
            break;
          }
          uint64_t v46 = v45;
          if (v42 || v41 < v161)
          {
            size_t v48 = wcrtomb_l(path, v45, &v174, a2);
            if (v48 == -1) {
              goto LABEL_468;
            }
            size_t v47 = v48;
            if (v48 > v41)
            {
              __ungetwc(v46, a1, (uint64_t)a2);
              break;
            }
            if (!v42) {
              j__mkdtempat_np((int)v167, path);
            }
          }
          else
          {
            size_t v47 = wcrtomb_l(v167, v45, &v174, a2);
            if (v47 == -1) {
              goto LABEL_468;
            }
          }
          if (v42) {
            size_t v49 = 0;
          }
          else {
            size_t v49 = v47;
          }
          v167 += v49;
          --v44;
          v41 -= v47;
          if (!v41) {
            goto LABEL_418;
          }
        }
        if (v44)
        {
LABEL_418:
          uint64_t v9 = (v9 - v44);
          if (v42) {
            uint64_t v8 = v164;
          }
          else {
            uint64_t v8 = v164 + 1;
          }
          goto LABEL_466;
        }
      }
      goto LABEL_468;
    case 1:
      if (v15) {
        unint64_t v50 = v15;
      }
      else {
        unint64_t v50 = -1;
      }
      if ((~v14 & 9) != 0)
      {
        if (v14)
        {
          int v121 = v172++;
          int v122 = *v121;
          int v171 = *v121;
          uint64_t v123 = __fgetwc(a1, (uint64_t)a2);
          if (v123 != -1)
          {
            uint64_t v124 = v123;
            unint64_t v125 = v50 + 1;
            while (--v125)
            {
              uint64_t v126 = wmemchr(__s, v124, ((char *)v157 - (char *)__s) >> 2);
              if (v162)
              {
                if (v126) {
                  break;
                }
              }
              else if (!v126)
              {
                break;
              }
              uint64_t v127 = v171;
              __int32 *v171 = v124;
              int v171 = v127 + 1;
              uint64_t v124 = __fgetwc(a1, (uint64_t)a2);
              if (v124 == -1) {
                goto LABEL_403;
              }
            }
            __ungetwc(v124, a1, (uint64_t)a2);
          }
LABEL_403:
          unint64_t v50 = (unint64_t)((char *)v171 - (char *)v122) >> 2;
          if (!v50) {
            return v164;
          }
          __int32 *v171 = 0;
        }
        else
        {
          if ((v14 & 8) == 0)
          {
            unint64_t v79 = (char **)v172++;
            uint64_t v167 = *v79;
          }
          memset(&v174, 0, sizeof(v174));
          uint64_t v80 = __fgetwc(a1, (uint64_t)a2);
          if (v80 == -1)
          {
            int v82 = 0;
LABEL_409:
            LODWORD(v50) = v82;
            if (!v164) {
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            uint64_t v81 = v80;
            int v82 = 0;
            do
            {
              unint64_t v83 = wmemchr(__s, v81, ((char *)v157 - (char *)__s) >> 2);
              if (v162)
              {
                if (v83) {
                  goto LABEL_234;
                }
              }
              else if (!v83)
              {
                goto LABEL_234;
              }
              if ((v14 & 8) != 0 || v50 < v161)
              {
                size_t v85 = wcrtomb_l(path, v81, &v174, a2);
                if (v85 == -1) {
                  goto LABEL_468;
                }
                size_t v84 = v85;
                if (v85 > v50) {
                  goto LABEL_234;
                }
                if ((v14 & 8) == 0) {
                  j__mkdtempat_np((int)v167, path);
                }
              }
              else
              {
                size_t v84 = wcrtomb_l(v167, v81, &v174, a2);
                if (v84 == -1) {
                  goto LABEL_468;
                }
              }
              if ((v14 & 8) != 0) {
                size_t v86 = 0;
              }
              else {
                size_t v86 = v84;
              }
              v167 += v86;
              ++v82;
              uint64_t v87 = __fgetwc(a1, (uint64_t)a2);
              uint64_t v81 = v87;
              if (v87 == -1) {
                break;
              }
              v50 -= v84;
            }
            while (v50);
            if (v87 == -1) {
              goto LABEL_409;
            }
LABEL_234:
            __ungetwc(v81, a1, (uint64_t)a2);
            LODWORD(v50) = v82;
          }
          if (!v50) {
            return v164;
          }
          if ((v14 & 8) != 0)
          {
LABEL_412:
            uint64_t v8 = v164;
            goto LABEL_415;
          }
          *uint64_t v167 = 0;
        }
        uint64_t v8 = v164 + 1;
        goto LABEL_415;
      }
      uint64_t v51 = __fgetwc(a1, (uint64_t)a2);
      if (v51 == -1) {
        return v164;
      }
      uint64_t v52 = v51;
      uint64_t v53 = 0;
      while (1)
      {
        if (v50 == v53) {
          goto LABEL_400;
        }
        uint64_t v54 = wmemchr(__s, v52, ((char *)v157 - (char *)__s) >> 2);
        if (v162)
        {
          if (v54) {
            break;
          }
          goto LABEL_150;
        }
        if (!v54) {
          break;
        }
LABEL_150:
        ++v53;
        uint64_t v52 = __fgetwc(a1, (uint64_t)a2);
        if (v52 == -1)
        {
          LODWORD(v50) = v53;
          goto LABEL_412;
        }
      }
      LODWORD(v50) = v53;
LABEL_400:
      __ungetwc(v52, a1, (uint64_t)a2);
      uint64_t v8 = v164;
      if (v50)
      {
LABEL_415:
        uint64_t v9 = (v50 + v9);
        goto LABEL_466;
      }
      return v8;
    case 2:
      if (v15) {
        unint64_t v55 = v15;
      }
      else {
        unint64_t v55 = -1;
      }
      if ((~v14 & 9) == 0)
      {
        uint64_t v56 = __fgetwc(a1, (uint64_t)a2);
        if (v56 == -1) {
          goto LABEL_407;
        }
        uint64_t v57 = v56;
        uint64_t v58 = (v9 + v55);
        while (1)
        {
          if (!v55)
          {
LABEL_406:
            __ungetwc(v57, a1, (uint64_t)a2);
            uint64_t v9 = v58;
LABEL_407:
            uint64_t v8 = v164;
LABEL_466:
            unsigned int v4 = *v5;
            if (!*v5) {
              return v8;
            }
            goto LABEL_5;
          }
          if (v57 > 0x7F)
          {
            if (v57 >= 0x100)
            {
              LOWORD(v60) = ___runetype_l(v57, a2);
              goto LABEL_165;
            }
            double v59 = *(_RuneLocale **)(*((void *)v168 + 166) + 120);
          }
          else
          {
            double v59 = &_DefaultRuneLocale;
          }
          __uint32_t v60 = v59->__runetype[v57];
LABEL_165:
          if ((v60 & 0x4000) != 0)
          {
            uint64_t v58 = v9;
            goto LABEL_406;
          }
          uint64_t v9 = (v9 + 1);
          uint64_t v57 = __fgetwc(a1, (uint64_t)a2);
          --v55;
          if (v57 == -1) {
            goto LABEL_407;
          }
        }
      }
      if ((v14 & 1) == 0)
      {
        if ((v14 & 8) == 0)
        {
          int v88 = (char **)v172++;
          uint64_t v167 = *v88;
        }
        memset(&v174, 0, sizeof(v174));
        uint64_t v89 = __fgetwc(a1, (uint64_t)a2);
        if (v89 == -1) {
          goto LABEL_262;
        }
        uint64_t v90 = v89;
        while (v90 > 0x7F)
        {
          if (v90 < 0x100)
          {
            int v91 = *(_RuneLocale **)(*((void *)v168 + 166) + 120);
            goto LABEL_245;
          }
          LOWORD(v92) = ___runetype_l(v90, a2);
LABEL_246:
          if ((v92 & 0x4000) != 0) {
            goto LABEL_261;
          }
          if ((v14 & 8) != 0 || v55 < v161)
          {
            size_t v94 = wcrtomb_l(path, v90, &v174, a2);
            if (v94 == -1) {
              goto LABEL_468;
            }
            size_t v93 = v94;
            if (v94 > v55) {
              goto LABEL_261;
            }
            if ((v14 & 8) == 0) {
              j__mkdtempat_np((int)v167, path);
            }
          }
          else
          {
            size_t v93 = wcrtomb_l(v167, v90, &v174, a2);
            if (v93 == -1) {
              goto LABEL_468;
            }
          }
          if ((v14 & 8) != 0) {
            size_t v95 = 0;
          }
          else {
            size_t v95 = v93;
          }
          v167 += v95;
          uint64_t v9 = (v9 + 1);
          uint64_t v96 = __fgetwc(a1, (uint64_t)a2);
          uint64_t v90 = v96;
          if (v96 != -1)
          {
            v55 -= v93;
            if (v55) {
              continue;
            }
          }
          if (v96 != -1) {
LABEL_261:
          }
            __ungetwc(v90, a1, (uint64_t)a2);
LABEL_262:
          if ((v14 & 8) != 0) {
            goto LABEL_407;
          }
          *uint64_t v167 = 0;
LABEL_424:
          uint64_t v8 = v164 + 1;
          goto LABEL_466;
        }
        int v91 = &_DefaultRuneLocale;
LABEL_245:
        __uint32_t v92 = v91->__runetype[v90];
        goto LABEL_246;
      }
      int v128 = v172++;
      int v171 = *v128;
      uint64_t v129 = __fgetwc(a1, (uint64_t)a2);
      if (v129 == -1) {
        goto LABEL_423;
      }
      uint64_t v130 = v129;
      uint64_t v131 = (v9 + v55);
      while (1)
      {
        if (!v55) {
          goto LABEL_422;
        }
        if (v130 > 0x7F)
        {
          if (v130 >= 0x100)
          {
            LOWORD(v133) = ___runetype_l(v130, a2);
            goto LABEL_396;
          }
          int v132 = *(_RuneLocale **)(*((void *)v168 + 166) + 120);
        }
        else
        {
          int v132 = &_DefaultRuneLocale;
        }
        __uint32_t v133 = v132->__runetype[v130];
LABEL_396:
        if ((v133 & 0x4000) != 0)
        {
          uint64_t v131 = v9;
LABEL_422:
          __ungetwc(v130, a1, (uint64_t)a2);
          uint64_t v9 = v131;
LABEL_423:
          __int32 *v171 = 0;
          goto LABEL_424;
        }
        uint64_t v134 = v171;
        __int32 *v171 = v130;
        int v171 = v134 + 1;
        uint64_t v9 = (v9 + 1);
        uint64_t v130 = __fgetwc(a1, (uint64_t)a2);
        --v55;
        if (v130 == -1) {
          goto LABEL_423;
        }
      }
    case 3:
      unsigned int v61 = v14 | 0x2C0;
      int v171 = nptr;
      if (v15 - 513 >= 0xFFFFFFFFFFFFFE00) {
        uint64_t v62 = v15;
      }
      else {
        uint64_t v62 = 512;
      }
      if (!v62) {
        goto LABEL_427;
      }
      while (1)
      {
        uint64_t v63 = __fgetwc(a1, (uint64_t)a2);
        switch((int)v63)
        {
          case '+':
          case '-':
            if ((v61 & 0x40) == 0) {
              goto LABEL_426;
            }
            unsigned int v61 = v61 & 0xFFFEFFBF | 0x10000;
            goto LABEL_180;
          case ',':
          case '.':
          case '/':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
            goto LABEL_426;
          case '0':
            int v66 = v61 | 0x100;
            BOOL v67 = base == 0;
            if (base) {
              int v68 = base;
            }
            else {
              int v68 = 8;
            }
            int base = v68;
            if (!v67) {
              int v66 = v61;
            }
            if ((v66 & 0x200) != 0) {
              unsigned int v61 = v66 & 0xFFFFFD3F;
            }
            else {
              unsigned int v61 = v66 & 0xFFFFFE3F;
            }
            goto LABEL_180;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
            int base = __vfwscanf_basefix[base];
            goto LABEL_179;
          case '8':
          case '9':
            uint64_t v64 = base;
            int base = __vfwscanf_basefix[base];
            if ((unint64_t)(v64 - 1) >= 8) {
              goto LABEL_179;
            }
            goto LABEL_426;
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
            if (base < 11) {
              goto LABEL_426;
            }
LABEL_179:
            v61 &= 0xFFFFFE3F;
            goto LABEL_180;
          case 'X':
            goto LABEL_183;
          default:
            if (v63 != 120)
            {
              if (v63 != -1) {
LABEL_426:
              }
                __ungetwc(v63, a1, (uint64_t)a2);
LABEL_427:
              int v135 = v171;
              if ((v61 & 0x80) == 0)
              {
                uint64_t v136 = *(v171 - 1);
                if ((v136 & 0xFFFFFFDF) == 0x58)
                {
                  --v171;
                  __ungetwc(v136, a1, (uint64_t)a2);
                  int v135 = v171;
                }
                if ((v61 & 8) != 0)
                {
                  uint64_t v8 = v164;
                }
                else
                {
                  __int32 *v135 = 0;
                  if ((v61 & 0x8000) != 0)
                  {
                    uintmax_t v137 = wcstoumax_l(nptr, 0, base, a2);
                    if ((v61 & 0x10) != 0) {
                      goto LABEL_444;
                    }
                  }
                  else
                  {
                    uintmax_t v137 = wcstoimax_l(nptr, 0, base, a2);
                    if ((v61 & 0x10) != 0) {
                      goto LABEL_444;
                    }
                  }
                  if ((v61 & 0x4000) != 0)
                  {
                    int v140 = v172++;
                    *(unsigned char *)*int v140 = v137;
                  }
                  else if ((v61 & 4) != 0)
                  {
                    uint64_t v141 = v172++;
                    *(_WORD *)*uint64_t v141 = v137;
                  }
                  else if ((v61 & 1) != 0 {
                         || (v61 & 0x400) != 0
                  }
                         || (v61 & 0x800) != 0
                         || (v61 & 0x1000) != 0
                         || (v61 & 0x2000) != 0)
                  {
LABEL_444:
                    long long v139 = (uintmax_t **)v172++;
                    **long long v139 = v137;
                  }
                  else
                  {
                    BOOL v138 = v172++;
                    *char *v138 = v137;
                  }
                  uint64_t v8 = v164 + 1;
                  int v135 = v171;
                }
                uint64_t v9 = v9 + ((unint64_t)((char *)v135 - (char *)nptr) >> 2);
                goto LABEL_466;
              }
              if (v171 > nptr)
              {
                uint64_t v149 = *--v171;
                goto LABEL_477;
              }
              return v164;
            }
LABEL_183:
            if ((v61 & 0x100) == 0 || v171 != &nptr[(HIWORD(v61) & 1) + 1]) {
              goto LABEL_426;
            }
            v61 &= ~0x100u;
            int base = 16;
LABEL_180:
            long long v65 = v171;
            __int32 *v171 = v63;
            int v171 = v65 + 1;
            if (!--v62) {
              goto LABEL_427;
            }
            break;
        }
      }
    case 4:
      uint64_t v152 = a1;
      __int32 v173 = 0;
      memset(&v176, 0, sizeof(v176));
      unint64_t v69 = localeconv();
      if (mbrtowc_l(&v173, v69->decimal_point, *(int *)(*((void *)a2 + 166) + 64), &v176, a2) >= 0xFFFFFFFFFFFFFFFELL) {
        __int32 v173 = 46;
      }
      if (v15) {
        uint64_t v70 = v15 + 1;
      }
      else {
        uint64_t v70 = 513;
      }
      mbstate_t v71 = (__int32 *)__parsefloat_buf(4 * v70);
      if (!v71) {
        return v164;
      }
      uint64_t v72 = v70 - 1;
      v165 = v71 - 1;
      BOOL v73 = v70 - 1 > 0;
      int32x2_t v155 = v71;
      if (v15 && v72 < 1)
      {
        uint64_t v74 = v71;
        goto LABEL_452;
      }
      uint64_t v153 = v70;
      uint64_t v159 = 0;
      int v97 = 0;
      int v151 = 0;
      uint64_t v74 = v71;
      unint64_t v98 = (unint64_t)&v71[v72];
      break;
    default:
      goto LABEL_407;
  }
  while (2)
  {
    BOOL v158 = v73;
    unint64_t v156 = v98;
    uint64_t v99 = __fgetwc(a1, (uint64_t)a2);
    if (v99 == -1) {
      goto LABEL_452;
    }
    uint64_t v100 = v99;
    uint64_t v160 = v74;
    uint64_t v101 = v99;
    unsigned int v102 = &_DefaultRuneLocale.__runetype[v99];
    int v154 = v99 & 0xFFFFFFDF;
    uint64_t v103 = v159;
LABEL_267:
    switch(v97)
    {
      case 0:
        int v97 = 1;
        goto LABEL_278;
      case 1:
        int v97 = 6;
        if ((int)v100 <= 77)
        {
          if (v100 == 48)
          {
            int v97 = 5;
LABEL_342:
            uint64_t v110 = v160;
            v165 = v160;
            goto LABEL_343;
          }
          if (v100 == 73) {
            goto LABEL_299;
          }
        }
        else
        {
          switch(v100)
          {
            case 'N':
              goto LABEL_298;
            case 'i':
LABEL_299:
              int v97 = 2;
LABEL_300:
              LODWORD(v159) = v103;
LABEL_301:
              uint64_t v110 = v160;
LABEL_360:
              if (v158)
              {
                unint64_t v98 = v156;
              }
              else
              {
                uint64_t v118 = (__int32 *)__parsefloat_buf(4 * (v153 + 513));
                if (!v118) {
                  return v164;
                }
                unint64_t v98 = (unint64_t)&v118[v153 + 512];
                int v119 = (__int32 *)((char *)v118 + (char *)v160 - (char *)v155);
                v165 = (__int32 *)((char *)v118 + (char *)v165 - (char *)v155);
                int32x2_t v155 = v118;
                v153 += 513;
                uint64_t v110 = v119;
                a1 = v152;
              }
              __int32 *v110 = v100;
              uint64_t v74 = v110 + 1;
              BOOL v73 = (unint64_t)v74 < v98;
              if (v15 && (unint64_t)v74 >= v98)
              {
LABEL_452:
                for (uint64_t j = (char *)(v74 - 1); v165 < (__int32 *)j; j -= 4)
                {
                  unsigned int v143 = *(_DWORD *)j;
                  __ungetwc(v143, a1, (uint64_t)a2);
                }
                v165[1] = 0;
                unint64_t v144 = (unint64_t)((char *)(v165 + 1) - (char *)v155) >> 2;
                if (!v144) {
                  return v164;
                }
                if ((v14 & 8) != 0)
                {
                  uint64_t v8 = v164;
                }
                else
                {
                  if ((v14 & 2) != 0)
                  {
                    double v147 = wcstold_l(v155, &v171, a2);
                  }
                  else
                  {
                    if ((v14 & 1) == 0)
                    {
                      float v145 = wcstof_l(v155, &v171, a2);
                      int v146 = (float **)v172++;
                      **int v146 = v145;
                      goto LABEL_464;
                    }
                    double v147 = wcstod_l(v155, &v171, a2);
                  }
                  int v148 = (double **)v172++;
                  **int v148 = v147;
LABEL_464:
                  uint64_t v8 = v164 + 1;
                }
                uint64_t v9 = (v9 + v144);
                goto LABEL_466;
              }
              continue;
            case 'n':
LABEL_298:
              int v97 = 3;
              goto LABEL_300;
          }
        }
        goto LABEL_267;
      case 2:
        if (v151 > 6 || v100 != aNfinity[v151] && v100 != aNfinity_0[v151]) {
          goto LABEL_450;
        }
        uint64_t v110 = v160;
        if (v151 == 6 || v151 == 1) {
          v165 = v160;
        }
        ++v151;
        int v97 = 2;
        goto LABEL_343;
      case 3:
        int v111 = v151;
        if (v151 == 2)
        {
          if (v100 == 40)
          {
            int v97 = 3;
            uint64_t v110 = v160;
LABEL_336:
            int v151 = v111 + 1;
LABEL_343:
            LODWORD(v159) = v103;
            goto LABEL_360;
          }
          if (v100 == -1)
          {
LABEL_451:
            uint64_t v74 = v160;
            goto LABEL_452;
          }
        }
        else if (v151 == 1)
        {
          if (v154 == 78)
          {
            int v97 = 3;
            uint64_t v110 = v160;
            v165 = v160;
            goto LABEL_335;
          }
        }
        else if (v151)
        {
          if (v100 == 41)
          {
            int v97 = 4;
            uint64_t v110 = v160;
            v165 = v160;
            goto LABEL_336;
          }
          if (v100 > 0x7F)
          {
            if (v100 < 0x100)
            {
              __uint32_t v116 = *(_DWORD *)(*(void *)(*((void *)v168 + 166) + 120) + 4 * v101 + 60);
            }
            else
            {
              int v120 = v103;
              LOWORD(v116) = ___runetype_l(v100, a2);
              LODWORD(v103) = v120;
            }
          }
          else
          {
            __uint32_t v116 = *v102;
          }
          int v97 = 3;
          if (v100 == 95 || (v116 & 0x500) != 0) {
            goto LABEL_315;
          }
        }
        else if (v154 == 65)
        {
          int v97 = 3;
LABEL_315:
          uint64_t v110 = v160;
LABEL_335:
          int v111 = v151;
          goto LABEL_336;
        }
        goto LABEL_450;
      case 4:
        goto LABEL_450;
      case 5:
        uint64_t v103 = 1;
        int v97 = 6;
        if (v154 != 88) {
          goto LABEL_267;
        }
        BYTE4(v159) = 1;
        goto LABEL_301;
      case 6:
        if ((v159 & 0x100000000) != 0)
        {
          if (v100 > 0x7F)
          {
            if (v100 < 0x100)
            {
              LODWORD(v104) = *(_DWORD *)(*(void *)(*((void *)v168 + 166) + 120) + 4 * v101 + 60);
            }
            else
            {
              uint64_t v105 = v103;
              uint64_t v106 = v101;
              unint64_t v104 = ___runetype_l(v100, a2);
              uint64_t v101 = v106;
              uint64_t v103 = v105;
            }
          }
          else
          {
            LODWORD(v104) = *v102;
          }
          if ((v104 & 0x10000) != 0) {
            goto LABEL_302;
          }
        }
        if (v100 > 0x7F)
        {
          if (v100 < 0x100)
          {
            __uint32_t v107 = *(_DWORD *)(*(void *)(*((void *)v168 + 166) + 120) + 4 * v101 + 60);
          }
          else
          {
            uint64_t v108 = v103;
            uint64_t v109 = v101;
            LOWORD(v107) = ___runetype_l(v100, a2);
            uint64_t v101 = v109;
            uint64_t v103 = v108;
          }
        }
        else
        {
          __uint32_t v107 = *v102;
        }
        if ((v107 & 0x400) != 0)
        {
LABEL_302:
          int v97 = 6;
          goto LABEL_324;
        }
        int v97 = 7;
        if (v100 != v173) {
          goto LABEL_267;
        }
        int v97 = 7;
        if ((v103 & 1) == 0)
        {
          LODWORD(v159) = 0;
          goto LABEL_301;
        }
LABEL_324:
        uint64_t v110 = v160;
        LODWORD(v159) = 1;
        goto LABEL_359;
      case 7:
        if (!((v154 != 69) | BYTE4(v159) & 1) || ((v154 == 80) & BYTE4(v159)) != 0)
        {
          if (v103)
          {
            LODWORD(v159) = 1;
            int v97 = 8;
            goto LABEL_301;
          }
        }
        else
        {
          if ((v159 & 0x100000000) != 0)
          {
            if (v100 > 0x7F)
            {
              if (v100 < 0x100)
              {
                LODWORD(v112) = *(_DWORD *)(*(void *)(*((void *)v168 + 166) + 120) + 4 * v101 + 60);
              }
              else
              {
                uint64_t v115 = v101;
                unint64_t v112 = ___runetype_l(v100, a2);
                uint64_t v101 = v115;
              }
            }
            else
            {
              LODWORD(v112) = *v102;
            }
            if ((v112 & 0x10000) != 0)
            {
              uint64_t v159 = 0x100000001;
LABEL_358:
              int v97 = 7;
              uint64_t v110 = v160;
LABEL_359:
              v165 = v110;
              goto LABEL_360;
            }
          }
          if (v100 > 0x7F)
          {
            if (v100 < 0x100) {
              __uint32_t v117 = *(_DWORD *)(*(void *)(*((void *)v168 + 166) + 120) + 4 * v101 + 60);
            }
            else {
              LOWORD(v117) = ___runetype_l(v100, a2);
            }
          }
          else
          {
            __uint32_t v117 = *v102;
          }
          if ((v117 & 0x400) != 0)
          {
            LODWORD(v159) = 1;
            goto LABEL_358;
          }
        }
LABEL_450:
        __ungetwc(v100, a1, (uint64_t)a2);
        goto LABEL_451;
      case 8:
        int v97 = 9;
LABEL_278:
        if (v100 == 43 || v100 == 45) {
          goto LABEL_300;
        }
        goto LABEL_267;
      case 9:
        if (v100 > 0x7F)
        {
          if (v100 < 0x100)
          {
            __uint32_t v113 = *(_DWORD *)(*(void *)(*((void *)v168 + 166) + 120) + 4 * v101 + 60);
          }
          else
          {
            int v114 = v103;
            LOWORD(v113) = ___runetype_l(v100, a2);
            LODWORD(v103) = v114;
          }
        }
        else
        {
          __uint32_t v113 = *v102;
        }
        if ((v113 & 0x400) == 0) {
          goto LABEL_450;
        }
        int v97 = 9;
        goto LABEL_342;
      default:
        abort_report_np((uint64_t)"%s:%s:%u: unknown state %d");
    }
  }
}

int vfwscanf_l(FILE *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  flockfile(a1);
  extra = a1->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) = *((unsigned char *)extra + 72) & 0xF8 | 1;
  }
  locale_t v9 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v9 = a2;
  }
  if (a2) {
    locale_t v10 = v9;
  }
  else {
    locale_t v10 = (_xlocale *)__c_locale;
  }
  int v11 = __vfwscanf((uint64_t)a1, v10, (unsigned int *)a3, (__int32 **)a4);
  funlockfile(a1);
  return v11;
}

int vprintf_l(locale_t a1, const char *a2, va_list a3)
{
  return vfprintf_l(__stdoutp, a1, a2, a3);
}

int vscanf(const char *__format, va_list a2)
{
  flockfile(__stdinp);
  unsigned int v4 = __stdinp;
  uint64_t v5 = __locale_key;
  size_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = (_xlocale *)&__global_locale;
  }
  int v8 = __svfscanf_l((char **)v4, v7, (unsigned __int8 *)__format, (wint_t **)a2);
  funlockfile(__stdinp);
  return v8;
}

int vscanf_l(locale_t a1, const char *a2, va_list a3)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1) {
    locale_t v5 = a1;
  }
  if (a1) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = (_xlocale *)__c_locale;
  }
  flockfile(__stdinp);
  int v7 = __svfscanf_l((char **)__stdinp, v6, (unsigned __int8 *)a2, (wint_t **)a3);
  funlockfile(__stdinp);
  return v7;
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  uint64_t v5 = __locale_key;
  size_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)&__global_locale;
  }
  return vsprintf_l(a1, v7, a2, a3);
}

int vsscanf(const char *__str, const char *__format, va_list a3)
{
  uint64_t v5 = __locale_key;
  size_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)&__global_locale;
  }
  return vsscanf_l(__str, v7, __format, a3);
}

int vswprintf_l(__int32 *a1, size_t n, locale_t a3, const __int32 *a4, __darwin_va_list a5)
{
  long long v26 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)unsigned int v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v24 = (unint64_t)v27;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  v27[0] = 0;
  v27[1] = 850045858;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v5 = a3;
  }
  if (a3) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = (_xlocale *)__c_locale;
  }
  long long v39 = 0uLL;
  long long v40 = 0uLL;
  if (!n)
  {
    int v14 = 22;
    goto LABEL_16;
  }
  DWORD2(v18) = -48632;
  unsigned int v17 = malloc_type_malloc(0x80uLL, 0x47C141C3uLL);
  v19[0] = v17;
  if (!v17)
  {
    int v14 = 12;
    goto LABEL_16;
  }
  DWORD1(v18) = 127;
  LODWORD(v19[1]) = 127;
  LOBYTE(v32) = v32 & 0xF8;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  int v11 = __vfwprintf((uint64_t)&v17, v6, (unsigned int *)a4, a5);
  if (v11 < 0)
  {
    int v14 = *__error();
    free(v19[0]);
    goto LABEL_16;
  }
  int v12 = v11;
  *unsigned int v17 = 0;
  uint64_t v16 = (const char *)v19[0];
  memset(&v41, 0, sizeof(v41));
  size_t v13 = mbsrtowcs_l(a1, &v16, n, &v41, v6);
  free(v19[0]);
  if (v13 == -1)
  {
    int v14 = 92;
    goto LABEL_16;
  }
  if (v13 == n)
  {
    a1[n - 1] = 0;
    int v14 = 84;
LABEL_16:
    *__error() = v14;
    return -1;
  }
  return v12;
}

int vswprintf(__int32 *a1, size_t a2, const __int32 *a3, __darwin_va_list a4)
{
  uint64_t v6 = __locale_key;
  int v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = (_xlocale *)&__global_locale;
  }
  return vswprintf_l(a1, a2, v8, a3, a4);
}

int vswscanf_l(const __int32 *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  long long v25 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  long long v23 = (unint64_t)v26;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  v26[0] = 0;
  v26[1] = 850045858;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  locale_t v7 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1) {
    locale_t v7 = a2;
  }
  if (a2) {
    int v8 = (char *)v7;
  }
  else {
    int v8 = __c_locale;
  }
  long long v38 = 0uLL;
  long long v39 = 0uLL;
  size_t v9 = wcslen(a1);
  locale_t v10 = (char *)malloc_type_malloc(v9 * *(int *)(*((void *)v8 + 166) + 64) + 1, 0x52C4B3CuLL);
  if (!v10) {
    return -1;
  }
  int v11 = v10;
  memset(&v40, 0, sizeof(v40));
  unint64_t v15 = a1;
  size_t v12 = wcsrtombs_l(v10, &v15, 0xFFFFFFFFFFFFFFFFLL, &v40, (locale_t)v8);
  if (v12 == -1)
  {
    int v13 = -1;
  }
  else
  {
    uint64_t v16 = v11;
    *(void *)&long long v18 = v11;
    DWORD2(v17) = -65532;
    LODWORD(v17) = v12;
    DWORD2(v18) = v12;
    *((void *)&v20 + 1) = eofread_0;
    *(void *)&long long v22 = 0;
    *(void *)&long long v24 = 0;
    LOBYTE(v31) = v31 & 0xF8;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    int v13 = __vfwscanf((uint64_t)&v16, (locale_t)v8, (unsigned int *)a3, (__int32 **)a4);
  }
  free(v11);
  return v13;
}

int vswscanf(const __int32 *a1, const __int32 *a2, __darwin_va_list a3)
{
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return vswscanf_l(a1, v7, a2, a3);
}

int vwprintf(const __int32 *a1, __darwin_va_list a2)
{
  unsigned int v4 = __stdoutp;
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(v4, v7, a1, a2);
}

int vwprintf_l(locale_t a1, const __int32 *a2, __darwin_va_list a3)
{
  return vfwprintf_l(__stdoutp, a1, a2, a3);
}

int vwscanf(const __int32 *a1, __darwin_va_list a2)
{
  unsigned int v4 = __stdinp;
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return vfwscanf_l(v4, v7, a1, a2);
}

int vwscanf_l(locale_t a1, const __int32 *a2, __darwin_va_list a3)
{
  return vfwscanf_l(__stdinp, a1, a2, a3);
}

int __swbuf(int a1, FILE *a2)
{
  unsigned __int8 v3 = a1;
  a2->_int w = a2->_lbfsize;
  if (((a2->_flags & 8) == 0 || (a2->_flags & 0x200) == 0 && !a2->_bf._base) && __swsetup((uint64_t)a2))
  {
    *__error() = 9;
    return -1;
  }
  extra = a2->_extra;
  if ((*((unsigned char *)extra + 72) & 7) == 0) {
    *((unsigned char *)extra + 72) |= 7u;
  }
  p = a2->_p;
  int v6 = (int)&a2->_p[-LODWORD(a2->_bf._base)];
  if (a2->_bf._size <= v6)
  {
    if (__fflush((uint64_t)a2)) {
      return -1;
    }
    int v6 = 0;
    p = a2->_p;
  }
  int v7 = v3;
  --a2->_w;
  a2->_p = p + 1;
  unsigned __int8 *p = v3;
  if (v6 + 1 == a2->_bf._size || v3 == 10 && (a2->_flags) && __fflush((uint64_t)a2)) {
    return -1;
  }
  return v7;
}

int wprintf(const __int32 *a1, ...)
{
  va_start(va, a1);
  uint64_t v2 = __stdoutp;
  uint64_t v3 = __locale_key;
  unsigned int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(v2, v5, a1, va);
}

int wprintf_l(locale_t a1, const __int32 *a2, ...)
{
  va_start(va, a2);
  return vfwprintf_l(__stdoutp, a1, a2, va);
}

int wscanf(const __int32 *a1, ...)
{
  va_start(va, a1);
  uint64_t v2 = __stdinp;
  uint64_t v3 = __locale_key;
  unsigned int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return vfwscanf_l(v2, v5, a1, va);
}

int wscanf_l(locale_t a1, const __int32 *a2, ...)
{
  va_start(va, a2);
  return vfwscanf_l(__stdinp, a1, a2, va);
}

FILE *__cdecl open_wmemstream(__int32 **__bufp, size_t *__sizep)
{
  if (__bufp && __sizep)
  {
    unsigned int v4 = (__int32 *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *__bufp = v4;
    if (v4)
    {
      uint64_t v5 = malloc_type_malloc(0xA0uLL, 0x1090040970F6AABuLL);
      if (v5)
      {
        int v6 = v5;
        *uint64_t v5 = __bufp;
        v5[1] = __sizep;
        *((_OWORD *)v5 + 1) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        *((_OWORD *)v5 + 3) = 0u;
        *((_OWORD *)v5 + 4) = 0u;
        *((_OWORD *)v5 + 5) = 0u;
        *((_OWORD *)v5 + 6) = 0u;
        *((_OWORD *)v5 + 7) = 0u;
        *((_OWORD *)v5 + 8) = 0u;
        *((_OWORD *)v5 + 9) = 0u;
        wmemstream_update((uint64_t)v5);
        int v7 = funopen(v6, 0, (int (__cdecl *)(void *, const char *, int))wmemstream_write, (fpos_t (__cdecl *)(void *, fpos_t, int))wmemstream_seek, (int (__cdecl *)(void *))wmemstream_close);
        int v8 = v7;
        if (v7)
        {
          fwide(v7, 1);
        }
        else
        {
          int v10 = *__error();
          free(v6);
          free(*__bufp);
          *__bufp = 0;
          *__error() = v10;
        }
      }
      else
      {
        int v9 = *__error();
        free(*__bufp);
        *__bufp = 0;
        int v8 = 0;
        *__error() = v9;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    int v8 = 0;
    *__error() = 22;
  }
  return v8;
}

uint64_t wmemstream_update(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if ((v1 & 0x8000000000000000) != 0 || (unint64_t v2 = *(void *)(result + 24), (v2 & 0x8000000000000000) != 0)) {
    wmemstream_update_cold_1();
  }
  if (v1 >= v2) {
    unint64_t v1 = *(void *)(result + 24);
  }
  **(void **)(result + 8) = v1;
  return result;
}

uint64_t wmemstream_write(uint64_t a1, char *a2, int a3)
{
  int v3 = a3;
  unsigned int v4 = a2;
  long long v6 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)&v23._mbstateL + 4) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)&v23._mbstateL + 5) = v6;
  long long v7 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)&v23._mbstateL + 6) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)&v23._mbstateL + 7) = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)v23.__mbstate8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)&v23._mbstateL + 1) = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)&v23._mbstateL + 2) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)&v23._mbstateL + 3) = v9;
  if (a3 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = a3;
    size_t v12 = a2;
    do
    {
      size_t v13 = mbrlen(v12, v11, &v23);
      if (v13 == -2) {
        break;
      }
      if (v13 == -1) {
        goto LABEL_10;
      }
      uint64_t v14 = v13 <= 1 ? 1 : v13;
      v11 -= v14;
      v12 += v14;
      ++v10;
    }
    while (v11 > 0);
    if ((v10 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    *__error() = 92;
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = 0;
LABEL_12:
  if ((unint64_t)(*(void *)(a1 + 24) + v10) >= 0x1FFFFFFFFFFFFFFELL) {
    uint64_t v15 = 0x1FFFFFFFFFFFFFFELL;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24) + v10;
  }
  if (v15 > *(void *)(a1 + 16))
  {
    uint64_t v16 = reallocarray_DARWIN_EXTSN();
    if (!v16) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v17 = v16;
    wmemset((__int32 *)(v16 + 4 * *(void *)(a1 + 16) + 4), 0, v15 - *(void *)(a1 + 16));
    **(void **)a1 = v17;
    *(void *)(a1 + 16) = v15;
  }
  if (v3 < 1)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(void *)(a1 + 24);
      if (v19 >= *(void *)(a1 + 16)) {
        break;
      }
      size_t v20 = mbrtowc((__int32 *)(**(void **)a1 + 4 * v19), v4, v3, (mbstate_t *)(a1 + 32));
      if (v20 == -1)
      {
        if (v18) {
          break;
        }
        goto LABEL_10;
      }
      if (v20 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v20;
      }
      if (v21 == -2)
      {
        v18 += v3;
        break;
      }
      v4 += v21;
      v3 -= v21;
      ++*(void *)(a1 + 24);
      v18 += v21;
    }
    while (v3 > 0);
  }
  wmemstream_update(a1);
  return v18;
}

uint64_t wmemstream_seek(uint64_t a1, int64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  switch(a3)
  {
    case 2:
      uint64_t v5 = *(void *)(a1 + 16);
      if (a2 < 0)
      {
        a2 += v5;
        if (a2 < 0)
        {
          long long v6 = __error();
          int v7 = 22;
          goto LABEL_13;
        }
      }
      else
      {
        if ((v5 ^ 0x7FFFFFFFFFFFFFFFuLL) < a2)
        {
          long long v6 = __error();
          int v7 = 84;
LABEL_13:
          *long long v6 = v7;
          return -1;
        }
        a2 += v5;
      }
LABEL_15:
      *(void *)(a1 + 24) = a2;
      if (a2 != v4)
      {
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 96) = 0u;
        *(_OWORD *)(a1 + 112) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 80) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
      }
      break;
    case 1:
      if (a2) {
        wmemstream_seek_cold_2();
      }
      break;
    case 0:
      if (a2 < 0) {
        wmemstream_seek_cold_1();
      }
      goto LABEL_15;
  }
  wmemstream_update(a1);
  return *(void *)(a1 + 24);
}

uint64_t wmemstream_close(void *a1)
{
  return 0;
}

double difftime(time_t a1, time_t a2)
{
  double result = -(double)(unint64_t)(a2 - a1);
  if (a1 >= 0) {
    double result = (double)(unint64_t)(a1 - a2);
  }
  if ((unint64_t)a1 >> 63 == (unint64_t)a2 >> 63) {
    return (double)(a1 - a2);
  }
  return result;
}

int ftime(timeb *a1)
{
  *(void *)&v4.__darwin_suseconds_t tv_usec = 0;
  uint64_t v5 = 0;
  v4.unsigned int tv_sec = 0;
  if (gettimeofday(&v4, &v5) < 0) {
    return -1;
  }
  int result = 0;
  a1->millituint64_t m = ((unint64_t)(274877907 * v4.tv_usec) >> 38)
              + ((unint64_t)(274877907 * v4.tv_usec) >> 63);
  a1->mach_error_t time = v4.tv_sec;
  __int16 v3 = WORD2(v5);
  a1->int timezone = v5;
  a1->dstflag = v3;
  return result;
}

void tzsetwall(void)
{
}

uint64_t gmtime_key_init()
{
  gmtime_key = 1;
  uint64_t result = pthread_key_init_np();
  gmtime_key_erroint r = result;
  return result;
}

uint64_t offtime(uint64_t *a1, uint64_t a2)
{
  return gmtsub(a1, a2, (uint64_t)&tm);
}

time_t timelocal(tm *const a1)
{
  if (a1) {
    a1->int tm_isdst = -1;
  }
  return mktime(a1);
}

time_t timegm(tm *const a1)
{
  if (a1) {
    a1->int tm_isdst = 0;
  }
  return _st_time1(a1, gmtsub, 0, 1);
}

uint64_t timeoff(_DWORD *a1, uint64_t a2)
{
  if (a1) {
    a1[8] = 0;
  }
  return _st_time1(a1, gmtsub, a2, 1);
}

time_t time2posix(time_t a1)
{
  _st_tzset_basic(0);
  uint64_t v2 = *(unsigned int *)lclptr;
  uint64_t v3 = lclptr + 16 * v2 + 17488;
  int v4 = v2 + 1;
  while (--v4 >= 1)
  {
    uint64_t v5 = (uint64_t *)(v3 - 16);
    time_t v6 = *(void *)(v3 - 24);
    v3 -= 16;
    if (v6 <= a1)
    {
      uint64_t v7 = *v5;
      return a1 - v7;
    }
  }
  uint64_t v7 = 0;
  return a1 - v7;
}

time_t posix2time(time_t a1)
{
  _st_tzset_basic(0);
  uint64_t v2 = *(unsigned int *)lclptr;
  uint64_t v3 = lclptr + 16 * v2 + 17488;
  int v4 = v2 + 1;
  while (--v4 >= 1)
  {
    uint64_t v5 = (uint64_t *)(v3 - 16);
    time_t v6 = *(void *)(v3 - 24);
    v3 -= 16;
    if (v6 <= a1)
    {
      uint64_t v7 = *v5;
      goto LABEL_6;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  time_t v8 = v7 + a1;
  uint64_t v9 = lclptr + 16 * v2 + 17488;
  int v10 = v2 + 1;
  while (--v10 >= 1)
  {
    int v11 = (uint64_t *)(v9 - 16);
    time_t v12 = *(void *)(v9 - 24);
    v9 -= 16;
    if (v8 >= v12)
    {
      uint64_t v13 = *v11;
      goto LABEL_11;
    }
  }
  uint64_t v13 = 0;
LABEL_11:
  time_t v14 = v8 - v13;
  if (v14 >= a1)
  {
    if (v14 <= a1) {
      return v8;
    }
    uint64_t v25 = lclptr + 16 * v2 + 17488;
    int v26 = v2 + 1;
    do
    {
      time_t result = v8--;
      int v27 = v26;
      uint64_t v28 = v25;
      while (--v27 >= 1)
      {
        long long v29 = (uint64_t *)(v28 - 16);
        time_t v30 = *(void *)(v28 - 24);
        v28 -= 16;
        if (result > v30)
        {
          uint64_t v31 = *v29;
          goto LABEL_27;
        }
      }
      uint64_t v31 = 0;
LABEL_27:
      time_t v32 = v8 - v31;
      BOOL v24 = v32 == a1;
    }
    while (v32 > a1);
  }
  else
  {
    uint64_t v15 = lclptr + 16 * v2 + 17488;
    int v16 = v2 + 1;
    do
    {
      time_t result = v8++;
      int v18 = v16;
      uint64_t v19 = v15;
      while (--v18 >= 1)
      {
        size_t v20 = (uint64_t *)(v19 - 16);
        time_t v21 = *(void *)(v19 - 24);
        v19 -= 16;
        if (v8 >= v21)
        {
          uint64_t v22 = *v20;
          goto LABEL_18;
        }
      }
      uint64_t v22 = 0;
LABEL_18:
      time_t v23 = v8 - v22;
      BOOL v24 = v23 == a1;
    }
    while (v23 < a1);
  }
  if (v24) {
    return v8;
  }
  return result;
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  uint64_t v3 = __locale_key;
  int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return strptime_l(a1, a2, a3, v5);
}

char *__cdecl strptime_l(const char *a1, const char *a2, tm *a3, locale_t a4)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1) {
    locale_t v5 = a4;
  }
  if (a4) {
    time_t v6 = (char *)v5;
  }
  else {
    time_t v6 = __c_locale;
  }
  int v12 = 0;
  a3->tm_zone = 0;
  uint64_t v7 = (char *)_strptime0((char *)a1, (unsigned __int8 *)a2, a3, &v12, (uint64_t)v6);
  if (v7)
  {
    time_t v11 = 0;
    if (v12 == 2)
    {
      uint64_t tm_gmtoff = a3->tm_gmtoff;
      a3->uint64_t tm_gmtoff = 0;
      uint64_t v8 = timeoff(a3, tm_gmtoff);
      goto LABEL_11;
    }
    if (v12 == 1)
    {
      uint64_t v8 = timegm(a3);
LABEL_11:
      time_t v11 = v8;
      localtime_r(&v11, a3);
    }
  }
  return v7;
}

uint64_t _strptime0(char *a1, unsigned __int8 *a2, tm *a3, _DWORD *a4, uint64_t a5)
{
  current_time_locale = __get_current_time_locale(a5);
  int v13 = *a2;
  if (!*a2) {
    return (uint64_t)a1;
  }
  int v189 = 0;
  time_t v14 = (char *)&__global_locale;
  if (a5 != -1) {
    time_t v14 = (char *)a5;
  }
  int v190 = (_xlocale *)a5;
  if (a5) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = __c_locale;
  }
  int v188 = 1;
  int v183 = 85;
  int v184 = current_time_locale;
  int v187 = v15;
  while (2)
  {
    ++a2;
    if (v13 != 37)
    {
      long long v29 = &_DefaultRuneLocale;
      if ((v13 & 0x80) != 0) {
        long long v29 = *(_RuneLocale **)(*((void *)v15 + 166) + 120);
      }
      if ((v29->__runetype[v13] & 0x4000) != 0)
      {
        int v31 = *a1;
        if (*a1)
        {
          do
          {
            time_t v32 = &_DefaultRuneLocale;
            if ((v31 & 0x80) != 0) {
              time_t v32 = *(_RuneLocale **)(*((void *)v15 + 166) + 120);
            }
            if ((v32->__runetype[v31] & 0x4000) == 0) {
              break;
            }
            int v33 = *++a1;
            int v31 = v33;
          }
          while (v33);
        }
        goto LABEL_394;
      }
      int v30 = *a1++;
      if (v13 == v30) {
        goto LABEL_394;
      }
      return 0;
    }
    int v16 = 0;
    int v17 = 0;
    int v18 = 0;
    LOBYTE(v19) = *a2;
    char v20 = 1;
LABEL_10:
    if (v19 == 48) {
      goto LABEL_16;
    }
    time_t v21 = a2 + 1;
    if (v19 != 43) {
      goto LABEL_17;
    }
    int v22 = *v21;
    int v23 = 43;
    if (!*v21 || v22 == 37) {
      goto LABEL_30;
    }
    if ((char)v22 < 0)
    {
      if ((___runetype_l((char)v22, v190) & 0x4000) == 0) {
        goto LABEL_16;
      }
LABEL_30:
      LOBYTE(v19) = 43;
      BOOL v24 = v190;
      goto LABEL_31;
    }
    if ((_DefaultRuneLocale.__runetype[(char)v22] & 0x4000) != 0) {
      goto LABEL_30;
    }
LABEL_16:
    time_t v21 = a2 + 2;
    LOBYTE(v19) = a2[1];
LABEL_17:
    int v23 = (char)v19;
    BOOL v24 = v190;
    if ((v19 & 0x80) != 0)
    {
      if ((___runetype_l((char)v19, v190) & 0x400) == 0) {
        goto LABEL_32;
      }
      goto LABEL_19;
    }
LABEL_31:
    if ((_DefaultRuneLocale.__runetype[v23] & 0x400) == 0)
    {
LABEL_32:
      a2 = v21;
      goto LABEL_33;
    }
LABEL_19:
    int v18 = v23 - 48;
    LOBYTE(v25) = *v21;
    if (!*v21)
    {
      LOBYTE(v19) = 0;
      goto LABEL_28;
    }
    while ((v25 & 0x80) == 0)
    {
      if ((_DefaultRuneLocale.__runetype[(char)v25] & 0x400) == 0) {
        goto LABEL_27;
      }
LABEL_24:
      int v26 = v21 + 1;
      int v25 = v21[1];
      int v18 = (char)*v21++ + 10 * v18 - 48;
      if (!v25)
      {
        LOBYTE(v19) = 0;
        time_t v21 = v26;
        goto LABEL_28;
      }
    }
    if ((___runetype_l((char)v25, v24) & 0x400) != 0) {
      goto LABEL_24;
    }
LABEL_27:
    LOBYTE(v19) = *v21;
LABEL_28:
    a2 = v21 + 1;
LABEL_33:
    uint64_t result = 0;
    int v28 = (char)v19;
    switch((char)v19)
    {
      case '%':
        int v62 = *a1++;
        if (v62 != 37) {
          return 0;
        }
        goto LABEL_175;
      case '+':
        uint64_t result = _strptime0(a1, v184[43], a3, a4, v190);
        if (!result) {
          return result;
        }
        a1 = (char *)result;
        v188 |= 0x36u;
        goto LABEL_175;
      case 'A':
      case 'a':
        uint64_t v40 = 0;
        while (1)
        {
          mbstate_t v41 = &v184[v40];
          unsigned int v42 = v41[31];
          int v43 = j__strsignal_r((int)v42, v9, v10);
          if (!strncasecmp_l(a1, v42, v43, v190)) {
            break;
          }
          int v44 = v41[24];
          int v43 = j__strsignal_r((int)v44, v9, v10);
          if (!strncasecmp_l(a1, v44, v43, v190)) {
            break;
          }
          if (++v40 == 7) {
            return 0;
          }
        }
        uint64_t v15 = v187;
        a1 += v43;
        a3->int tm_wday = v40;
        unsigned int v57 = v188 | 0x20;
        goto LABEL_393;
      case 'B':
      case 'b':
      case 'h':
        for (uint64_t i = 0; i != 12; ++i)
        {
          if (v20)
          {
            long long v36 = v184[i + 12];
          }
          else
          {
            if (v28 != 66) {
              continue;
            }
            long long v36 = v184[i + 44];
          }
          int v37 = j__strsignal_r((int)v36, v9, v10);
          if (!strncasecmp_l(a1, v36, v37, v190))
          {
            uint64_t v15 = v187;
            goto LABEL_101;
          }
        }
        if (v17) {
          return 0;
        }
        uint64_t i = 0;
        uint64_t v15 = v187;
        while (1)
        {
          long long v38 = v184[i];
          int v37 = j__strsignal_r((int)v38, v9, v10);
          if (!strncasecmp_l(a1, v38, v37, v190)) {
            break;
          }
          if (++i == 12) {
            return 0;
          }
        }
LABEL_101:
        a3->tm_mouint64_t n = i;
        a1 += v37;
LABEL_272:
        unsigned int v57 = v188 | 4;
LABEL_393:
        int v188 = v57;
LABEL_394:
        int v13 = *a2;
        if (*a2) {
          continue;
        }
        int v153 = v188;
        if ((v188 & 0xA) != 2)
        {
          int v154 = a3;
          goto LABEL_411;
        }
        int v154 = a3;
        if ((~v188 & 0x14) == 0)
        {
          tm_yeaint r = a3->tm_year;
          if ((tm_year & 3) != 0)
          {
            BOOL v156 = 0;
          }
          else
          {
            int v159 = -1030792151 * (tm_year + 1900) + 85899344;
            HIDWORD(v160) = v159;
            LODWORD(v160) = v159;
            if ((v160 >> 2) <= 0x28F5C28)
            {
              HIDWORD(v162) = v159;
              LODWORD(v162) = v159;
              BOOL v156 = (v162 >> 4) < 0xA3D70B;
            }
            else
            {
              BOOL v156 = 1;
            }
          }
          int v163 = _strptime0_start_of_month[13 * v156 + a3->tm_mon] + a3->tm_mday - 1;
          goto LABEL_410;
        }
        if ((v188 & 0x40) == 0)
        {
LABEL_411:
          if ((~v153 & 0xA) != 0) {
            return (uint64_t)a1;
          }
          if ((v153 & 4) != 0)
          {
            if ((v153 & 0x10) != 0) {
              goto LABEL_424;
            }
          }
          else
          {
            int tm_yday = v154->tm_yday;
            int v165 = v154->tm_year;
            HIDWORD(v166) = -1030792151 * v165 + 85899420;
            LODWORD(v166) = HIDWORD(v166);
            BOOL v179 = (v166 >> 2) > 0x28F5C28;
            LODWORD(v166) = HIDWORD(v166);
            unsigned int v167 = v166 >> 4;
            BOOL v169 = (v179 || v167 < 0xA3D70B) && (v154->tm_year & 3) == 0;
            v170 = &_strptime0_start_of_month[13 * v169];
            unsigned int v171 = -1;
            do
            {
              int v172 = *v170++;
              ++v171;
            }
            while (tm_yday >= v172);
            if (v171 >= 0xD)
            {
              v154->int tm_yday = tm_yday - _strptime0_start_of_month[13 * v169 + 12];
              v154->tm_yeaint r = v165 + 1;
              unsigned int v171 = 1;
            }
            v154->tm_mouint64_t n = v171 - 1;
            LOBYTE(v153) = v153 | 4;
            if ((v153 & 0x10) != 0)
            {
LABEL_424:
              if ((v153 & 0x20) == 0) {
LABEL_425:
              }
                v154->int tm_wday = (int)(v154->tm_yday + first_wday_of(v154->tm_year + 1900)) % 7;
              return (uint64_t)a1;
            }
          }
          int v173 = v154->tm_year;
          if ((v173 & 3) != 0)
          {
            BOOL v174 = 0;
          }
          else
          {
            int v175 = -1030792151 * (v173 + 1900) + 85899344;
            HIDWORD(v176) = v175;
            LODWORD(v176) = v175;
            if ((v176 >> 2) <= 0x28F5C28)
            {
              HIDWORD(v177) = v175;
              LODWORD(v177) = v175;
              BOOL v174 = (v177 >> 4) < 0xA3D70B;
            }
            else
            {
              BOOL v174 = 1;
            }
          }
          v154->int tm_mday = v154->tm_yday - _strptime0_start_of_month[13 * v174 + v154->tm_mon] + 1;
          if ((v153 & 0x20) != 0) {
            return (uint64_t)a1;
          }
          goto LABEL_425;
        }
        int v157 = v183 != 85;
        int wday_of = first_wday_of(a3->tm_year + 1900);
        if (!v189 && v157 == wday_of) {
          return 0;
        }
        if ((v188 & 0x20) != 0)
        {
          int tm_wday = a3->tm_wday;
        }
        else
        {
          a3->int tm_wday = v157;
          int v153 = v188 | 0x20;
          int tm_wday = v183 != 85;
        }
        int v178 = (v157
                               - wday_of
                               + 7
                               - 7
                               * ((((v157
                                                    - wday_of
                                                    + 7
                                                    - ((unsigned __int16)(37 * (v157 - wday_of + 7)) >> 8)) >> 1)
                                 + ((37 * (v157 - wday_of + 7)) >> 8)) >> 2));
        BOOL v179 = wday_of >= 5 || wday_of <= 1;
        if (!v179 && v183 == 86) {
          v178 -= 7;
        }
        int v181 = v178 - v189 + 8 * v189;
        if (v183 == 85) {
          int v182 = 7;
        }
        else {
          int v182 = 6;
        }
        int v163 = v181 + (v182 + tm_wday) % 7 - 7;
        if (v163 >= 0)
        {
LABEL_410:
          a3->int tm_yday = v163;
          v153 |= 8u;
          goto LABEL_411;
        }
        if ((v153 & 0x20) == 0)
        {
          int v163 = 0;
          goto LABEL_410;
        }
        return 0;
      case 'C':
        if (*a1 < 0)
        {
          uint64_t v15 = v187;
          uint64_t v63 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
        }
        else
        {
          uint64_t v63 = &_DefaultRuneLocale;
          uint64_t v15 = v187;
        }
        int v110 = *a1;
        if ((v63->__runetype[*a1] & 0x400) != 0)
        {
          int v111 = 0;
          if (v18) {
            int v112 = v18;
          }
          else {
            int v112 = 2;
          }
          if (v110 == 43) {
            goto LABEL_306;
          }
          if (v110 != 45) {
            goto LABEL_307;
          }
        }
        else
        {
          if (v110 != 45)
          {
            if (v110 != 43) {
              return 0;
            }
            int v111 = 0;
            if (v18) {
              int v112 = v18;
            }
            else {
              int v112 = 2;
            }
LABEL_306:
            ++a1;
            if (!--v112)
            {
              int v130 = 0;
              goto LABEL_316;
            }
LABEL_307:
            int v130 = 0;
            uint64_t v131 = (uint64_t)&a1[v112 - 1 + 1];
            do
            {
              uint64_t v132 = *a1;
              if (!*a1) {
                goto LABEL_316;
              }
              __uint32_t v133 = (v132 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v15 + 166) + 120) : &_DefaultRuneLocale;
              if ((v133->__runetype[v132] & 0x400) == 0) {
                goto LABEL_316;
              }
              int v130 = (char)v132 + 10 * v130 - 48;
              ++a1;
              --v112;
            }
            while (v112);
            a1 = (char *)v131;
LABEL_316:
            if (v111) {
              int v134 = -v130;
            }
            else {
              int v134 = v130;
            }
            int v135 = 100 * v134;
            if ((v188 & 0x200) != 0)
            {
              a3->tm_yeaint r = v135 + a3->tm_year % 100 - 1900;
              unsigned int v136 = v188 & 0xFFFFFDFF;
            }
            else
            {
              a3->tm_yeaint r = v135 - 1900;
              unsigned int v136 = v188 | 0x102;
            }
            int v188 = v136;
            goto LABEL_394;
          }
          if (v18) {
            int v112 = v18;
          }
          else {
            int v112 = 2;
          }
        }
        int v111 = 1;
        goto LABEL_306;
      case 'D':
        uint64_t v64 = "%m/%d/%y";
        goto LABEL_171;
      case 'E':
        if ((v16 | v17)) {
          goto LABEL_175;
        }
        int v17 = 0;
        int v19 = *a2;
        int v16 = 1;
        char v20 = 1;
        goto LABEL_38;
      case 'F':
        uint64_t v64 = "%Y-%m-%d";
        goto LABEL_171;
      case 'H':
      case 'I':
      case 'k':
      case 'l':
        if (*a1 < 0)
        {
          uint64_t v15 = v187;
          long long v34 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
        }
        else
        {
          long long v34 = &_DefaultRuneLocale;
          uint64_t v15 = v187;
        }
        if ((v34->__runetype[*a1] & 0x400) == 0) {
          return 0;
        }
        int v52 = 0;
        if (v18) {
          int v53 = v18;
        }
        else {
          int v53 = 2;
        }
        uint64_t v54 = (uint64_t)&a1[v53 - 1 + 1];
        do
        {
          uint64_t v55 = *a1;
          if (!*a1) {
            goto LABEL_95;
          }
          uint64_t v56 = (v55 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v15 + 166) + 120) : &_DefaultRuneLocale;
          if ((v56->__runetype[v55] & 0x400) == 0) {
            goto LABEL_95;
          }
          int v52 = (char)v55 + 10 * v52 - 48;
          ++a1;
          --v53;
        }
        while (v53);
        a1 = (char *)v54;
LABEL_95:
        if ((char)v19 == 107 || v19 == 72)
        {
          if (v52 > 23) {
            return 0;
          }
        }
        else if (v52 > 12)
        {
          return 0;
        }
        a3->tm_houint r = v52;
        goto LABEL_394;
      case 'M':
      case 'S':
        uint64_t v45 = *a1;
        if (!*a1) {
          goto LABEL_175;
        }
        uint64_t v15 = v187;
        if ((v45 & 0x80) != 0) {
          uint64_t v46 = (char *)(*(void *)(*((void *)v187 + 166) + 120) + 4 * v45);
        }
        else {
          uint64_t v46 = &_DefaultRuneLocale.__magic[4 * v45];
        }
        int v100 = *((_DWORD *)v46 + 15);
        if ((v100 & 0x4000) != 0) {
          goto LABEL_394;
        }
        if ((v100 & 0x400) == 0) {
          return 0;
        }
        int v101 = 0;
        if (v18) {
          int v102 = v18;
        }
        else {
          int v102 = 2;
        }
        uint64_t v103 = (uint64_t)&a1[v102 - 1 + 1];
        do
        {
          uint64_t v104 = *a1;
          if (!*a1) {
            goto LABEL_212;
          }
          uint64_t v105 = (v104 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v187 + 166) + 120) : &_DefaultRuneLocale;
          if ((v105->__runetype[v104] & 0x400) == 0) {
            goto LABEL_212;
          }
          int v101 = (char)v104 + 10 * v101 - 48;
          ++a1;
          --v102;
        }
        while (v102);
        a1 = (char *)v103;
LABEL_212:
        if ((char)v19 == 77)
        {
          if (v101 <= 59)
          {
            a3->tm_miuint64_t n = v101;
            goto LABEL_394;
          }
        }
        else if (v101 <= 60)
        {
          a3->int tm_sec = v101;
          goto LABEL_394;
        }
        return 0;
      case 'O':
        if ((v16 | v17)) {
          goto LABEL_175;
        }
        int v16 = 0;
        char v20 = 0;
        int v19 = *a2;
        int v17 = 1;
LABEL_38:
        if (v19 == 37) {
          return 0;
        }
        goto LABEL_10;
      case 'R':
        long long v65 = "%H:%M";
        goto LABEL_165;
      case 'T':
        long long v65 = "%H:%M:%S";
        goto LABEL_165;
      case 'U':
      case 'V':
      case 'W':
        if (*a1 < 0)
        {
          uint64_t v15 = v187;
          long long v39 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
        }
        else
        {
          long long v39 = &_DefaultRuneLocale;
          uint64_t v15 = v187;
        }
        if ((v39->__runetype[*a1] & 0x400) == 0) {
          return 0;
        }
        int v189 = 0;
        if (v18) {
          int v58 = v18;
        }
        else {
          int v58 = 2;
        }
        uint64_t v59 = (uint64_t)&a1[v58 - 1 + 1];
        do
        {
          uint64_t v60 = *a1;
          if (!*a1) {
            goto LABEL_117;
          }
          unsigned int v61 = (v60 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v15 + 166) + 120) : &_DefaultRuneLocale;
          if ((v61->__runetype[v60] & 0x400) == 0) {
            goto LABEL_117;
          }
          int v189 = (char)v60 + 10 * v189 - 48;
          ++a1;
          --v58;
        }
        while (v58);
        a1 = (char *)v59;
LABEL_117:
        if (v189 <= 53 && ((char)v19 != 86 || v189 >= 1))
        {
          v188 |= 0x40u;
          int v183 = (char)v19;
          goto LABEL_394;
        }
        return 0;
      case 'X':
        long long v65 = v184[38];
        goto LABEL_165;
      case 'Y':
      case 'y':
        uint64_t v47 = *a1;
        if (!*a1) {
          goto LABEL_175;
        }
        uint64_t v15 = v187;
        if ((v47 & 0x80) != 0) {
          size_t v48 = (char *)(*(void *)(*((void *)v187 + 166) + 120) + 4 * v47);
        }
        else {
          size_t v48 = &_DefaultRuneLocale.__magic[4 * v47];
        }
        int v106 = *((_DWORD *)v48 + 15);
        if ((v106 & 0x4000) != 0) {
          goto LABEL_394;
        }
        if ((v106 & 0x400) != 0)
        {
          int v107 = 0;
          BOOL v108 = (char)v19 == 89;
          if ((char)v19 == 89) {
            int v109 = 4;
          }
          else {
            int v109 = 2;
          }
          if (v18) {
            int v109 = v18;
          }
          if (v47 == 43) {
            goto LABEL_366;
          }
          if (v47 != 45) {
            goto LABEL_367;
          }
        }
        else
        {
          if (v47 != 45)
          {
            if (v47 != 43) {
              return 0;
            }
            int v107 = 0;
            BOOL v108 = (char)v19 == 89;
            if ((char)v19 == 89) {
              int v109 = 4;
            }
            else {
              int v109 = 2;
            }
            if (v18) {
              int v109 = v18;
            }
LABEL_366:
            ++a1;
            if (!--v109)
            {
              int v149 = 0;
              if (v108)
              {
LABEL_380:
                v149 -= 1900;
                int v150 = 1;
                unsigned int v151 = v188;
LABEL_390:
                a3->tm_yeaint r = v149;
                if (v150) {
                  unsigned int v57 = v151 & 0xFFFFFCFD | 2;
                }
                else {
                  unsigned int v57 = v151 | 2;
                }
                goto LABEL_393;
              }
LABEL_382:
              unsigned int v151 = v188;
              if ((char)v19 == 121 && (v188 & 0x100) != 0)
              {
                int v150 = 0;
                int v149 = a3->tm_year + v149 % 100;
                unsigned int v151 = v188 & 0xFFFFFEFF;
              }
              else
              {
                if (v149 >= 69) {
                  int v152 = v149;
                }
                else {
                  int v152 = v149 + 100;
                }
                int v150 = 0;
                if ((char)v19 == 121)
                {
                  unsigned int v151 = v188 | 0x200;
                  int v149 = v152;
                }
              }
              goto LABEL_390;
            }
LABEL_367:
            int v145 = 0;
            uint64_t v146 = (uint64_t)&a1[v109 - 1 + 1];
            do
            {
              uint64_t v147 = *a1;
              if (!*a1) {
                goto LABEL_375;
              }
              int v148 = (v147 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v187 + 166) + 120) : &_DefaultRuneLocale;
              if ((v148->__runetype[v147] & 0x400) == 0) {
                goto LABEL_375;
              }
              int v145 = (char)v147 + 10 * v145 - 48;
              ++a1;
              --v109;
            }
            while (v109);
            a1 = (char *)v146;
LABEL_375:
            if (v145 < 0) {
              return 0;
            }
            if (v107) {
              int v149 = -v145;
            }
            else {
              int v149 = v145;
            }
            if (v108) {
              goto LABEL_380;
            }
            goto LABEL_382;
          }
          BOOL v108 = (char)v19 == 89;
          if ((char)v19 == 89) {
            int v144 = 4;
          }
          else {
            int v144 = 2;
          }
          if (v18) {
            int v109 = v18;
          }
          else {
            int v109 = v144;
          }
        }
        int v107 = 1;
        goto LABEL_366;
      case 'Z':
        int v66 = *a1;
        BOOL v67 = a1;
        uint64_t v15 = v187;
        if (*a1)
        {
          do
          {
            if ((v66 & 0x80) != 0) {
              int v68 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
            }
            else {
              int v68 = &_DefaultRuneLocale;
            }
            if ((v68->__runetype[v66] & 0x8000) == 0) {
              break;
            }
            int v69 = *++v67;
            int v66 = v69;
          }
          while (v69);
        }
        size_t v70 = v67 - a1;
        if (v18) {
          size_t v71 = v18;
        }
        else {
          size_t v71 = v70;
        }
        if (v71 == 3 && !j__strsvisx(a1, "GMT", 3uLL, v11, v12))
        {
          *a4 = 1;
          a1 += 3;
          goto LABEL_394;
        }
        tzset();
        uint64_t v72 = tzname[0];
        if (v71 == j__strsignal_r((int)tzname[0], v73, v74) && !j__strsvisx(a1, v72, v71, v75, v76))
        {
          a3->int tm_isdst = 0;
        }
        else
        {
          __int32 v77 = (const char *)off_1EB1CC478;
          if (v71 != j__strsignal_r((int)off_1EB1CC478, v9, v10) || j__strsvisx(a1, v77, v71, v78, v79)) {
            return 0;
          }
          a3->int tm_isdst = 1;
        }
LABEL_358:
        a1 += v71;
        goto LABEL_394;
      case 'c':
        uint64_t result = _strptime0(a1, v184[40], a3, a4, v190);
        if (!result) {
          return result;
        }
        a1 = (char *)result;
        unsigned int v80 = v188 & 0xFFFFFCFF;
        int v81 = 54;
        goto LABEL_173;
      case 'd':
        uint64_t v15 = v187;
        goto LABEL_325;
      case 'e':
        uint64_t v82 = *a1;
        if (*a1)
        {
          uint64_t v15 = v187;
          if ((v82 & 0x80) != 0) {
            unint64_t v83 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
          }
          else {
            unint64_t v83 = &_DefaultRuneLocale;
          }
          a1 += ((unint64_t)v83->__runetype[v82] >> 14) & 1;
LABEL_325:
          uint64_t v113 = *a1;
          if (v18) {
            int v114 = v18;
          }
          else {
            int v114 = 2;
          }
          if (*a1 < 0) {
            uint64_t v115 = *(_RuneLocale **)(*((void *)v15 + 166) + 120);
          }
          else {
            uint64_t v115 = &_DefaultRuneLocale;
          }
        }
        else
        {
          uint64_t v113 = 0;
          if (v18) {
            int v114 = v18;
          }
          else {
            int v114 = 2;
          }
          uint64_t v115 = &_DefaultRuneLocale;
          uint64_t v15 = v187;
        }
        if ((v115->__runetype[v113] & 0x4000) != 0)
        {
          uintmax_t v137 = a1[1] < 0 ? *(_RuneLocale **)(*((void *)v15 + 166) + 120) : &_DefaultRuneLocale;
          if ((v137->__runetype[a1[1]] & 0x400) != 0)
          {
            if (a1[2] < 0) {
              BOOL v138 = *(_RuneLocale **)(*((void *)v15 + 166) + 120);
            }
            else {
              BOOL v138 = &_DefaultRuneLocale;
            }
            if ((v138->__runetype[a1[2]] & 0x400) == 0)
            {
              ++a1;
              int v114 = 1;
            }
            uint64_t v113 = *a1;
          }
        }
        if ((v113 & 0x80) != 0) {
          long long v139 = *(_RuneLocale **)(*((void *)v15 + 166) + 120);
        }
        else {
          long long v139 = &_DefaultRuneLocale;
        }
        if ((v139->__runetype[v113] & 0x400) == 0) {
          return 0;
        }
        int v140 = 0;
        uint64_t v141 = (uint64_t)&a1[v114 - 1 + 1];
        do
        {
          uint64_t v142 = *a1;
          if (!*a1) {
            goto LABEL_355;
          }
          unsigned int v143 = (v142 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v15 + 166) + 120) : &_DefaultRuneLocale;
          if ((v143->__runetype[v142] & 0x400) == 0) {
            goto LABEL_355;
          }
          int v140 = (char)v142 + 10 * v140 - 48;
          ++a1;
          --v114;
        }
        while (v114);
        a1 = (char *)v141;
LABEL_355:
        if (v140 <= 31)
        {
          a3->int tm_mday = v140;
          unsigned int v57 = v188 | 0x10;
          goto LABEL_393;
        }
        return 0;
      case 'j':
        if (*a1 < 0)
        {
          uint64_t v15 = v187;
          size_t v84 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
        }
        else
        {
          size_t v84 = &_DefaultRuneLocale;
          uint64_t v15 = v187;
        }
        if ((v84->__runetype[*a1] & 0x400) == 0) {
          return 0;
        }
        int v116 = 0;
        if (v18) {
          int v117 = v18;
        }
        else {
          int v117 = 3;
        }
        uint64_t v118 = (uint64_t)&a1[v117 - 1 + 1];
        do
        {
          uint64_t v119 = *a1;
          if (!*a1) {
            goto LABEL_255;
          }
          int v120 = (v119 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v15 + 166) + 120) : &_DefaultRuneLocale;
          if ((v120->__runetype[v119] & 0x400) == 0) {
            goto LABEL_255;
          }
          int v116 = (char)v119 + 10 * v116 - 48;
          ++a1;
          --v117;
        }
        while (v117);
        a1 = (char *)v118;
LABEL_255:
        if ((v116 - 367) >= 0xFFFFFE92)
        {
          a3->int tm_yday = v116 - 1;
          unsigned int v57 = v188 | 8;
          goto LABEL_393;
        }
        return 0;
      case 'm':
        if (*a1 < 0)
        {
          uint64_t v15 = v187;
          size_t v85 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
        }
        else
        {
          size_t v85 = &_DefaultRuneLocale;
          uint64_t v15 = v187;
        }
        if ((v85->__runetype[*a1] & 0x400) == 0) {
          return 0;
        }
        int v121 = 0;
        if (v18) {
          int v122 = v18;
        }
        else {
          int v122 = 2;
        }
        uint64_t v123 = (uint64_t)&a1[v122 - 1 + 1];
        do
        {
          uint64_t v124 = *a1;
          if (!*a1) {
            goto LABEL_270;
          }
          unint64_t v125 = (v124 & 0x80) != 0 ? *(_RuneLocale **)(*((void *)v15 + 166) + 120) : &_DefaultRuneLocale;
          if ((v125->__runetype[v124] & 0x400) == 0) {
            goto LABEL_270;
          }
          int v121 = (char)v124 + 10 * v121 - 48;
          ++a1;
          --v122;
        }
        while (v122);
        a1 = (char *)v123;
LABEL_270:
        if ((v121 - 13) >= 0xFFFFFFF4)
        {
          a3->tm_mouint64_t n = v121 - 1;
          goto LABEL_272;
        }
        return 0;
      case 'n':
      case 't':
        int v49 = *a1;
        if (v49 < 0)
        {
          uint64_t v95 = __locale_key;
          uint64_t v96 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v95);
          if (!v96) {
            uint64_t v96 = &__global_locale;
          }
          unint64_t v50 = *(_RuneLocale **)(v96[166] + 120);
        }
        else
        {
          unint64_t v50 = &_DefaultRuneLocale;
        }
        uint64_t v15 = v187;
        if ((v50->__runetype[v49] & 0x4000) == 0) {
          return 0;
        }
        --a1;
        do
        {
          int v97 = a1[1];
          if (v97 < 0) {
            unint64_t v98 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
          }
          else {
            unint64_t v98 = &_DefaultRuneLocale;
          }
          ++a1;
        }
        while ((v98->__runetype[v97] & 0x4000) != 0);
        goto LABEL_394;
      case 'p':
        if (a3->tm_hour > 12) {
          return 0;
        }
        size_t v86 = v184[41];
        size_t v71 = j__strsignal_r((int)v86, v9, v10);
        if (strncasecmp_l(a1, v86, v71, v190))
        {
          uint64_t v87 = v184[42];
          size_t v88 = j__strsignal_r((int)v87, v9, v10);
          if (strncasecmp_l(a1, v87, v88, v190)) {
            return 0;
          }
          tm_houint r = a3->tm_hour;
          if (tm_hour != 12) {
            a3->tm_houint r = tm_hour + 12;
          }
          a1 += v88;
LABEL_175:
          uint64_t v15 = v187;
          goto LABEL_394;
        }
        uint64_t v15 = v187;
        if (a3->tm_hour == 12) {
          a3->tm_houint r = 0;
        }
        goto LABEL_358;
      case 'r':
        long long v65 = v184[57];
LABEL_165:
        uint64_t result = _strptime0(a1, v65, a3, a4, v190);
        a1 = (char *)result;
        uint64_t v15 = v187;
        if (!result) {
          return result;
        }
        goto LABEL_394;
      case 's':
        int v193 = 0;
        time_t v192 = 0;
        int v90 = *__error();
        *__error() = 0;
        time_t v91 = strtol_l(a1, &v193, 10, v190);
        if (*__error() == 34)
        {
          *__error() = v90;
          return 0;
        }
        time_t v192 = v91;
        *__error() = v90;
        a1 = v193;
        if (!gmtime_r(&v192, a3)) {
          return 0;
        }
        *a4 = 1;
        unsigned int v92 = v188 & 0xFFFFFCC1 | 0x3E;
LABEL_174:
        int v188 = v92;
        goto LABEL_175;
      case 'u':
      case 'w':
        if (*a1 < 0)
        {
          uint64_t v15 = v187;
          uint64_t v51 = *(_RuneLocale **)(*((void *)v187 + 166) + 120);
        }
        else
        {
          uint64_t v51 = &_DefaultRuneLocale;
          uint64_t v15 = v187;
        }
        uint64_t v99 = *a1;
        if ((v51->__runetype[v99] & 0x400) == 0
          || (v99 - 56) < 0xF8u
          || (char)v19 == 117 && v99 < 0x31
          || (char)v19 == 119 && v99 > 0x36)
        {
          return 0;
        }
        a3->int tm_wday = ((char)v99 - 48) % 7u;
        v188 |= 0x20u;
        ++a1;
        goto LABEL_394;
      case 'x':
        uint64_t v64 = v184[39];
LABEL_171:
        uint64_t result = _strptime0(a1, v64, a3, a4, v190);
        if (!result) {
          return result;
        }
        a1 = (char *)result;
        unsigned int v80 = v188 & 0xFFFFFCFF;
        int v81 = 22;
LABEL_173:
        unsigned int v92 = v80 | v81;
        goto LABEL_174;
      case 'z':
        char v191 = 0;
        LODWORD(v193) = 0;
        LODWORD(v192) = 0;
        int v93 = *a1;
        uint64_t v15 = v187;
        if (v93 != 45 && v93 != 43) {
          return 0;
        }
        size_t v94 = a1[1] < 0 ? *(_RuneLocale **)(*((void *)v187 + 166) + 120) : &_DefaultRuneLocale;
        if ((v94->__runetype[a1[1]] & 0x400) == 0) {
          return 0;
        }
        uint64_t v126 = a1[2] < 0 ? *(_RuneLocale **)(*((void *)v187 + 166) + 120) : &_DefaultRuneLocale;
        if ((v126->__runetype[a1[2]] & 0x400) == 0) {
          return 0;
        }
        uint64_t v127 = a1[3] < 0 ? *(_RuneLocale **)(*((void *)v187 + 166) + 120) : &_DefaultRuneLocale;
        if ((v127->__runetype[a1[3]] & 0x400) == 0) {
          return 0;
        }
        int v128 = a1[4] < 0 ? *(_RuneLocale **)(*((void *)v187 + 166) + 120) : &_DefaultRuneLocale;
        if ((v128->__runetype[a1[4]] & 0x400) == 0) {
          return 0;
        }
        sscanf(a1, "%c%2d%2d", &v191, &v193, &v192);
        *a4 = 2;
        uint64_t v129 = 60 * ((int)v192 + 60 * (int)v193);
        a3->uint64_t tm_gmtoff = v129;
        if (v191 == 45) {
          a3->uint64_t tm_gmtoff = -v129;
        }
        a1 += 5;
        goto LABEL_394;
      default:
        return result;
    }
  }
}

uint64_t first_wday_of(int a1)
{
  int v1 = a1 % 100;
  HIDWORD(v2) = -1030792151 * a1 + 85899344;
  LODWORD(v2) = HIDWORD(v2);
  if ((v2 >> 4) >= 0xA3D70B) {
    int v3 = 0;
  }
  else {
    int v3 = 6;
  }
  if (v1) {
    int v4 = 6;
  }
  else {
    int v4 = v3;
  }
  if ((a1 & 3) != 0) {
    int v4 = 0;
  }
  int v5 = (a1 / 100) & 3;
  if (a1 / -100 >= 0) {
    int v5 = -((a1 / -100) & 3);
  }
  return ((v1 - 2 * v5 + ((char)(v1 + (((char)v1 >> 13) & 3)) >> 2) + v4 + 7) % 7);
}

time_t _time32_to_time(int32_t t32)
{
  *(void *)&t32 = t32;
  LODWORD(result) = t32;
  return result;
}

time_t _int_to_time(int tint)
{
  *(void *)&tint = tint;
  LODWORD(result) = tint;
  return result;
}

uint64_t __time_load_locale(char *a1, uint64_t a2, size_t a3, _xlocale *a4)
{
  if (j__strncasecmp_l(a1, "C", a3, a4) && j__strncasecmp_l(a1, "POSIX", v6, v7) && j__strsvisx(a1, "C.", 2uLL, v8, v9))
  {
    if (!__time_load_locale_cache
      || (int v12 = *(const char **)(__time_load_locale_cache + 64)) == 0
      || j__strncasecmp_l(a1, v12, v10, v11))
    {
      int v13 = malloc_type_malloc(0x218uLL, 0x10D00403D7458CFuLL);
      if (v13)
      {
        time_t v14 = (atomic_uint *)v13;
        *(_DWORD *)int v13 = 1;
        *((void *)v13 + 1) = destruct_ldpart;
        *((void *)v13 + 8) = 0;
        uint64_t result = __part_load_locale(a1, (char *)(a2 + 1315), (void **)v13 + 8, "LC_TIME", 58, 58, (char **)v13 + 9);
        if (result != -1)
        {
          if (!result)
          {
            uint64_t v16 = *(void *)(a2 + 1352);
            if (v16)
            {
              if (atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
              {
                int v17 = *(void (**)(void))(v16 + 8);
                if (v17) {
                  v17();
                }
              }
            }
            *(void *)(a2 + 1352) = v14;
            uint64_t v18 = __time_load_locale_cache;
            if (__time_load_locale_cache
              && atomic_fetch_add((atomic_uint *volatile)__time_load_locale_cache, 0xFFFFFFFF) == 1)
            {
              int v19 = *(void (**)(void))(v18 + 8);
              if (v19) {
                v19();
              }
            }
            uint64_t result = 0;
            __time_load_locale_cache = (uint64_t)v14;
            atomic_fetch_add(v14, 1u);
          }
          return result;
        }
        free(v14);
      }
      return 0xFFFFFFFFLL;
    }
    *(unsigned char *)(a2 + 1315) = 1;
    uint64_t v22 = *(void *)(a2 + 1352);
    if (v22)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
      {
        int v23 = *(void (**)(void))(v22 + 8);
        if (v23) {
          v23();
        }
      }
    }
    BOOL v24 = (atomic_uint *)__time_load_locale_cache;
    *(void *)(a2 + 1352) = __time_load_locale_cache;
    uint64_t result = 1;
    if (v24) {
      atomic_fetch_add(v24, 1u);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 1315) = 0;
    uint64_t v20 = *(void *)(a2 + 1352);
    if (v20)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v20, 0xFFFFFFFF) == 1)
      {
        time_t v21 = *(void (**)(void))(v20 + 8);
        if (v21) {
          v21();
        }
      }
    }
    *(void *)(a2 + 1352) = 0;
    return 1;
  }
  return result;
}

void *__cdecl memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len)
{
  if (__little_len - 1 >= __big_len) {
    return 0;
  }
  int v4 = (char *)__big;
  if (__little_len != 1)
  {
    uint64_t v7 = (char *)__big + __big_len - __little_len;
    if (v7 >= __big)
    {
      int v8 = *(unsigned __int8 *)__little;
      while (*v4 != v8 || j__mkdtemp(v4))
      {
        if (++v4 > v7) {
          return 0;
        }
      }
      return v4;
    }
    return 0;
  }
  int v5 = (_filesec *)*(char *)__little;

  return (void *)j__mkdirx_np((const char *)__big, v5);
}

void strmode(int __mode, char *__bp)
{
  unint64_t v2 = (__mode & 0xF000u) - 4096;
  if (v2 >> 13 > 6) {
    char v3 = 63;
  }
  else {
    char v3 = byte_18AA00BBC[v2 >> 12];
  }
  *__bp = v3;
  char v4 = 45;
  if ((__mode & 0x100) != 0) {
    char v5 = 114;
  }
  else {
    char v5 = 45;
  }
  __bp[1] = v5;
  if ((__mode & 0x80) != 0) {
    char v6 = 119;
  }
  else {
    char v6 = 45;
  }
  __bp[2] = v6;
  if ((__mode & 0x840u) > 0x7FF)
  {
    if ((__mode & 0x840) == 0x800) {
      char v4 = 83;
    }
    else {
      char v4 = 115;
    }
  }
  else if ((__mode & 0x840) != 0)
  {
    char v4 = 120;
  }
  __bp[3] = v4;
  char v7 = 45;
  if ((__mode & 0x20) != 0) {
    char v8 = 114;
  }
  else {
    char v8 = 45;
  }
  __bp[4] = v8;
  if ((__mode & 0x10) != 0) {
    char v9 = 119;
  }
  else {
    char v9 = 45;
  }
  __bp[5] = v9;
  if ((__mode & 0x408u) > 0x3FF)
  {
    if ((__mode & 0x408) == 0x400) {
      char v7 = 83;
    }
    else {
      char v7 = 115;
    }
  }
  else if ((__mode & 0x408) != 0)
  {
    char v7 = 120;
  }
  __bp[6] = v7;
  char v10 = 45;
  if ((__mode & 4) != 0) {
    char v11 = 114;
  }
  else {
    char v11 = 45;
  }
  __bp[7] = v11;
  if ((__mode & 2) != 0) {
    char v12 = 119;
  }
  else {
    char v12 = 45;
  }
  __bp[8] = v12;
  if ((__mode & 0x201u) > 0x1FF)
  {
    if ((__mode & 0x201) == 0x200) {
      char v10 = 84;
    }
    else {
      char v10 = 116;
    }
  }
  else if ((__mode & 0x201) != 0)
  {
    char v10 = 120;
  }
  __bp[9] = v10;
  *((_WORD *)__bp + 5) = 32;
}

char *__cdecl strpbrk(char *__s1, const char *__s2)
{
  while (1)
  {
    int v2 = *__s1;
    if (!*__s1) {
      break;
    }
    char v3 = __s1++;
    for (uint64_t i = __s2; ; ++i)
    {
      int v5 = *(unsigned __int8 *)i;
      if (!*i) {
        break;
      }
      if (v5 == v2) {
        return v3;
      }
    }
  }
  return 0;
}

size_t strxfrm_l(char *a1, const char *a2, size_t a3, locale_t a4)
{
  size_t v4 = a3;
  int v5 = a1;
  if (!a1 || *a2)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)int v28 = 0u;
    locale_t v7 = (locale_t)&__global_locale;
    if (a4 != (locale_t)-1) {
      locale_t v7 = a4;
    }
    if (a4) {
      char v8 = (char *)v7;
    }
    else {
      char v8 = __c_locale;
    }
    if (*(unsigned char *)(*((void *)v8 + 165) + 64) || (char v9 = __collate_mbstowcs((char *)a2, (locale_t)v8)) == 0)
    {
      JUMPOUT(0x18C122F90);
    }
    char v10 = v9;
    __collate_xfrm(v9, v28, (uint64_t)v8);
    char v11 = (unsigned int *)v28[0];
    size_t v6 = 4 * wcslen((const __int32 *)v28[0]);
    char v12 = (unsigned int *)v28[1];
    if (v28[1]) {
      v6 += 4 * wcslen((const __int32 *)v28[1]) + 4;
    }
    if (v4)
    {
      if (v4 != 1)
      {
        int v13 = 0;
        int v14 = 0;
        do
        {
          if (v14)
          {
            LOBYTE(v15) = *(unsigned char *)v13;
          }
          else
          {
            unsigned int v16 = *v11;
            if (!*v11) {
              goto LABEL_26;
            }
            ++v11;
            HIBYTE(v27) = (v16 & 0x3F) + 48;
            BYTE2(v27) = ((v16 >> 6) & 0x3F) + 48;
            BYTE1(v27) = ((v16 >> 12) & 0x3F) + 48;
            int v15 = ((v16 >> 18) & 0x3F) + 48;
            LOBYTE(v27) = ((v16 >> 18) & 0x3F) + 48;
            int v13 = &v27;
            int v14 = 4;
          }
          int v13 = (int *)((char *)v13 + 1);
          *v5++ = v15;
          --v14;
          --v4;
        }
        while (v4 > 1);
        size_t v4 = 1;
      }
LABEL_26:
      if (v12)
      {
        int v27 = 808464432;
        unint64_t v17 = v4 - 2;
        if (v4 >= 2)
        {
          uint64_t v18 = 0;
          if (v17 >= 3) {
            unint64_t v17 = 3;
          }
          unint64_t v19 = v17 + 1;
          do
          {
            v5[v18] = *((unsigned char *)&v27 + v18);
            ++v18;
          }
          while (v19 != v18);
          unint64_t v20 = v4 - v18;
          v5 += v18;
          if (v4 - v18 >= 2)
          {
            int v21 = 0;
            uint64_t v22 = (int *)((char *)&v27 + v18);
            do
            {
              if (v21)
              {
                LOBYTE(v23) = *(unsigned char *)v22;
              }
              else
              {
                unsigned int v24 = *v12;
                if (!*v12) {
                  break;
                }
                ++v12;
                HIBYTE(v27) = (v24 & 0x3F) + 48;
                BYTE2(v27) = ((v24 >> 6) & 0x3F) + 48;
                BYTE1(v27) = ((v24 >> 12) & 0x3F) + 48;
                int v23 = ((v24 >> 18) & 0x3F) + 48;
                LOBYTE(v27) = ((v24 >> 18) & 0x3F) + 48;
                uint64_t v22 = &v27;
                int v21 = 4;
              }
              uint64_t v22 = (int *)((char *)v22 + 1);
              *v5++ = v23;
              --v21;
              --v20;
            }
            while (v20 > 1);
          }
        }
      }
      *int v5 = 0;
    }
    int v25 = *__error();
    free(v10);
    free(v28[0]);
    free(v28[1]);
    *__error() = v25;
  }
  else
  {
    size_t v6 = 0;
    if (a3) {
      *a1 = 0;
    }
  }
  return v6;
}

size_t strxfrm(char *__s1, const char *__s2, size_t __n)
{
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return strxfrm_l(__s1, __s2, __n, v5);
}

void swab(const void *a1, void *a2, ssize_t a3)
{
  if (a3 >= 1)
  {
    unint64_t v3 = (unint64_t)a3 >> 1;
    if ((((unint64_t)a3 >> 1) & 7) != 0)
    {
      do
      {
        char v4 = *(unsigned char *)a1;
        int v5 = (char *)a1 + 2;
        *(unsigned char *)a2 = *((unsigned char *)a1 + 1);
        size_t v6 = (char *)a2 + 2;
        *((unsigned char *)a2 + 1) = v4;
        LODWORD(v3) = v3 - 1;
        a2 = (char *)a2 + 2;
        a1 = (char *)a1 + 2;
      }
      while ((v3 & 7) != 0);
      a1 = v5;
      a2 = v6;
    }
    if ((int)v3 >= 8)
    {
      unsigned int v7 = (v3 >> 3) + 1;
      do
      {
        int8x16_t v8 = *(int8x16_t *)a1;
        a1 = (char *)a1 + 16;
        *(int8x16_t *)a2 = vrev16q_s8(v8);
        a2 = (char *)a2 + 16;
        --v7;
      }
      while (v7 > 1);
    }
  }
}

__int32 *__cdecl wcpcpy(__int32 *result, const __int32 *a2)
{
  __int32 v2 = *a2;
  *uint64_t result = *a2;
  if (v2)
  {
    unint64_t v3 = a2 + 1;
    do
    {
      __int32 v4 = *v3++;
      result[1] = v4;
      ++result;
    }
    while (v4);
  }
  return result;
}

__int32 *__cdecl wcpncpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  unint64_t v3 = a1;
  if (a3)
  {
    uint64_t v4 = 0;
    size_t v5 = a3;
    while (1)
    {
      __int32 v6 = a2[v4];
      a1[v4] = v6;
      if (!v6) {
        break;
      }
      ++v4;
      if (!--v5) {
        return &a1[v4];
      }
    }
    unint64_t v3 = &a1[v4];
    if (v5 != 1) {
      MEMORY[0x18C122530](v3 + 1, 4 * a3 - v4 * 4 - 4);
    }
  }
  return v3;
}

int wcscasecmp_l(const __int32 *a1, const __int32 *a2, locale_t a3)
{
  unsigned __int32 v5 = *a1;
  if (!v5) {
    return -*a2;
  }
  for (uint64_t i = a1 + 1; ; ++i)
  {
    __darwin_ct_rune_t v8 = v5 > 0x7F ? ___tolower_l(v5, a3) : _DefaultRuneLocale.__maplower[v5];
    uint64_t v9 = *(unsigned int *)a2;
    __darwin_ct_rune_t v10 = v9 > 0x7F ? ___tolower_l(v9, a3) : _DefaultRuneLocale.__maplower[v9];
    int result = v8 - v10;
    if (result) {
      break;
    }
    ++a2;
    __int32 v12 = *i;
    unsigned __int32 v5 = v12;
    if (!v12) {
      return -*a2;
    }
  }
  return result;
}

int wcscasecmp(const __int32 *a1, const __int32 *a2)
{
  uint64_t v2 = __locale_key;
  unint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcscasecmp_l(a1, a2, v4);
}

__int32 *__cdecl wcscat(__int32 *result, const __int32 *a2)
{
  uint64_t v2 = result - 1;
  do
  {
    __int32 v3 = v2[1];
    ++v2;
  }
  while (v3);
  uint64_t v4 = 0;
  do
  {
    __int32 v5 = a2[v4];
    v2[v4++] = v5;
  }
  while (v5);
  return result;
}

__int32 *__cdecl wcschr(__int32 *__s, __int32 __c)
{
  uint64_t v2 = __s - 1;
  do
  {
    __int32 v4 = v2[1];
    ++v2;
    __int32 v3 = v4;
  }
  while (v4 != __c && v3 != 0);
  if (v3 == __c) {
    return v2;
  }
  else {
    return 0;
  }
}

int wcscmp(const __int32 *a1, const __int32 *a2)
{
  while (1)
  {
    __int32 v2 = *a1;
    int v3 = *a1 - *a2;
    if (*a1 != *a2) {
      break;
    }
    ++a2;
    ++a1;
    if (!v2) {
      return 0;
    }
  }
  return v3;
}

int wcscoll_l(const __int32 *a1, const __int32 *a2, locale_t a3)
{
  int v3 = (__int32 *)a2;
  __int32 v4 = (__int32 *)a1;
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v5 = a3;
  }
  if (a3) {
    __int32 v6 = v5;
  }
  else {
    __int32 v6 = &__c_locale;
  }
  uint64_t v7 = v6[165];
  if (*(unsigned char *)(v7 + 64))
  {
    return wcscmp(a1, a2);
  }
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v9 = *(unsigned __int8 **)(v7 + 88);
  int v39 = 1;
  int v40 = 1;
  if ((v9[1] & 6) == 0 && (v9[2] & 6) == 0 && (*((_DWORD *)v9 + 13) || *((int *)v9 + 16) <= 0 && *((int *)v9 + 17) < 1))
  {
    __int32 v12 = __collate_substitute((__int32 *)a1, 0, (uint64_t)v6);
    if (v12)
    {
      int v3 = __collate_substitute(v3, 0, (uint64_t)v6);
      __int32 v4 = v12;
      char v11 = v3;
    }
    else
    {
      char v11 = 0;
    }
    int v23 = *v4;
    if (!*v4)
    {
      int v30 = 0;
      goto LABEL_109;
    }
    if (*v3)
    {
      int v30 = 0;
      while (2)
      {
        uint64_t v38 = 0;
        while (*v4)
        {
          __collate_lookup_l(v4, &v40, (int *)&v38 + 1, (int *)&v37 + 1, v6);
          int v31 = HIDWORD(v38);
          if (SHIDWORD(v38) > 0) {
            goto LABEL_94;
          }
          if (v38 < 0)
          {
LABEL_112:
            int v27 = 0;
            int v28 = 0;
            *__error() = 22;
            int v23 = -1;
            goto LABEL_77;
          }
          v4 += v40;
        }
        int v31 = 0;
LABEL_94:
        if (*v3)
        {
          do
          {
            __collate_lookup_l(v3, &v39, (int *)&v38, (int *)&v37, v6);
            int v32 = v38;
            if ((int)v38 > 0) {
              break;
            }
            if ((v38 & 0x80000000) != 0) {
              goto LABEL_112;
            }
            v3 += v39;
          }
          while (*v3);
          int v31 = HIDWORD(v38);
        }
        else
        {
          int v32 = v38;
        }
        if (v31 && v32)
        {
          int v23 = v31 - v32;
          if (v31 != v32) {
            goto LABEL_73;
          }
          if (!v30) {
            int v30 = HIDWORD(v37) - v37;
          }
          v4 += v40;
          v3 += v39;
          int v23 = *v4;
          if (*v4)
          {
            if (*v3) {
              continue;
            }
            goto LABEL_73;
          }
        }
        else
        {
          __int32 v33 = *v4;
          if (*v4)
          {
            int v27 = 0;
            int v28 = 0;
            if (*v3) {
              int v23 = 0;
            }
            else {
              int v23 = v33;
            }
            goto LABEL_77;
          }
        }
        break;
      }
LABEL_109:
      int v27 = 0;
      int v28 = 0;
      if (*v3) {
        int v23 = -*v3;
      }
      else {
        int v23 = v30;
      }
      goto LABEL_77;
    }
LABEL_73:
    int v27 = 0;
    int v28 = 0;
    goto LABEL_77;
  }
  if (!*v9)
  {
    int v23 = 0;
    __int32 v12 = 0;
    char v11 = 0;
    goto LABEL_73;
  }
  unint64_t v10 = 0;
  long long v34 = 0;
  long long v35 = 0;
  char v11 = 0;
  __int32 v12 = 0;
  while (1)
  {
    unsigned __int8 v13 = v9[v10 + 1];
    if (!v10 || (v9[52] & 1) == 0)
    {
      free(v12);
      __int32 v12 = __collate_substitute(v4, v10, (uint64_t)v6);
      free(v11);
      if (v12) {
        char v11 = __collate_substitute(v3, v10, (uint64_t)v6);
      }
      else {
        char v11 = 0;
      }
    }
    int v14 = v12 ? v12 : v4;
    long long v36 = v11;
    if ((v13 & 2) != 0)
    {
      int v14 = __collate_wcsdup(v14);
      int v15 = &v14[wcslen(v14) - 1];
      if (v14 < v15)
      {
        unsigned int v16 = v14 + 1;
        do
        {
          __int32 v17 = *(v16 - 1);
          *(v16 - 1) = *v15;
          *v15-- = v17;
          BOOL v18 = v16++ >= v15;
        }
        while (!v18);
      }
      if (v11) {
        unint64_t v19 = v11;
      }
      else {
        unint64_t v19 = v3;
      }
      char v11 = __collate_wcsdup(v19);
      unint64_t v20 = &v11[wcslen(v11) - 1];
      if (v11 < v20)
      {
        int v21 = v11 + 1;
        do
        {
          __int32 v22 = *(v21 - 1);
          *(v21 - 1) = *v20;
          *v20-- = v22;
          BOOL v18 = v21++ >= v20;
        }
        while (!v18);
      }
      long long v34 = v11;
      long long v35 = v14;
    }
    else if (!v12)
    {
      char v11 = v3;
    }
    int v23 = *v14;
    if ((v13 & 4) == 0) {
      break;
    }
    while (v23)
    {
      if (!*v11) {
        goto LABEL_75;
      }
      uint64_t v38 = 0;
      __collate_lookup_which(v14, &v40, (int *)&v38 + 1, v10, (uint64_t)v6);
      if (SHIDWORD(v38) <= 0)
      {
        if (v38 < 0) {
          goto LABEL_74;
        }
        HIDWORD(v38) = 0xFFFFFF;
      }
      __collate_lookup_which(v11, &v39, (int *)&v38, v10, (uint64_t)v6);
      int v26 = v38;
      if ((int)v38 <= 0)
      {
        if ((v38 & 0x80000000) != 0)
        {
LABEL_74:
          *__error() = 22;
          int v23 = -1;
          goto LABEL_75;
        }
        int v26 = 0xFFFFFF;
        LODWORD(v38) = 0xFFFFFF;
      }
      int v23 = HIDWORD(v38) - v26;
      if (HIDWORD(v38) != v26) {
        goto LABEL_75;
      }
      v14 += v40;
      v11 += v39;
      int v23 = *v14;
    }
LABEL_57:
    if (*v11)
    {
      int v23 = -*v11;
      goto LABEL_75;
    }
    ++v10;
    char v11 = v36;
    if (v10 >= *v9)
    {
      int v23 = 0;
      goto LABEL_76;
    }
  }
  if (!v23) {
    goto LABEL_57;
  }
  while (*v11)
  {
    uint64_t v38 = 0;
    while (*v14)
    {
      __collate_lookup_which(v14, &v40, (int *)&v38 + 1, v10, (uint64_t)v6);
      int v24 = HIDWORD(v38);
      if (SHIDWORD(v38) > 0) {
        goto LABEL_47;
      }
      if (v38 < 0) {
        goto LABEL_74;
      }
      v14 += v40;
    }
    int v24 = 0;
LABEL_47:
    if (*v11)
    {
      do
      {
        __collate_lookup_which(v11, &v39, (int *)&v38, v10, (uint64_t)v6);
        int v25 = v38;
        if ((int)v38 > 0) {
          break;
        }
        if ((v38 & 0x80000000) != 0) {
          goto LABEL_74;
        }
        v11 += v39;
      }
      while (*v11);
      int v24 = HIDWORD(v38);
    }
    else
    {
      int v25 = v38;
    }
    if (!v24 || !v25)
    {
      int v23 = *v14;
      if (!*v14) {
        goto LABEL_57;
      }
      break;
    }
    int v23 = v24 - v25;
    if (v24 != v25) {
      break;
    }
    v14 += v40;
    v11 += v39;
    int v23 = *v14;
    if (!*v14) {
      goto LABEL_57;
    }
  }
LABEL_75:
  char v11 = v36;
LABEL_76:
  int v28 = v34;
  int v27 = v35;
LABEL_77:
  int v29 = *__error();
  free(v12);
  free(v11);
  free(v27);
  free(v28);
  *__error() = v29;
  return v23;
}

int wcscoll(const __int32 *a1, const __int32 *a2)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    __int32 v4 = v3;
  }
  else {
    __int32 v4 = (_xlocale *)&__global_locale;
  }
  return wcscoll_l(a1, a2, v4);
}

__int32 *__cdecl wcscpy(__int32 *result, const __int32 *a2)
{
  uint64_t v2 = 0;
  do
  {
    __int32 v3 = a2[v2];
    result[v2++] = v3;
  }
  while (v3);
  return result;
}

size_t wcscspn(const __int32 *a1, const __int32 *a2)
{
  __int32 v2 = *a1;
  __int32 v3 = a1;
  if (*a1)
  {
    __int32 v6 = *a2;
    __int32 v4 = a2 + 1;
    __int32 v5 = v6;
    __int32 v3 = a1;
    while (1)
    {
      uint64_t v7 = v4;
      __int32 v8 = v5;
      if (v5) {
        break;
      }
LABEL_6:
      __int32 v10 = v3[1];
      ++v3;
      __int32 v2 = v10;
      if (!v10) {
        return v3 - a1;
      }
    }
    while (v2 != v8)
    {
      __int32 v9 = *v7++;
      __int32 v8 = v9;
      if (!v9) {
        goto LABEL_6;
      }
    }
  }
  return v3 - a1;
}

__int32 *__cdecl wcsdup(const __int32 *a1)
{
  size_t v2 = wcslen(a1) + 1;
  int result = (__int32 *)malloc_type_malloc(4 * v2, 0x100004052888210uLL);
  if (result)
  {
    return wmemcpy(result, a1, v2);
  }
  return result;
}

size_t wcslcat(__int32 *a1, const __int32 *a2, size_t a3)
{
  if (*a1) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  __int32 v4 = a1;
  if (!v3)
  {
    size_t v5 = a3 - 1;
    __int32 v4 = a1;
    do
    {
      __int32 v6 = v4[1];
      ++v4;
      if (v6) {
        BOOL v7 = v5 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      --v5;
    }
    while (!v7);
  }
  uint64_t v8 = v4 - a1;
  uint64_t v9 = a3 - v8;
  if (a3 == v8)
  {
    size_t v13 = wcslen(a2);
  }
  else
  {
    __int32 v10 = *a2;
    if (*a2)
    {
      char v11 = a2;
      do
      {
        if (--v9) {
          *v4++ = v10;
        }
        else {
          uint64_t v9 = 1;
        }
        __int32 v12 = v11[1];
        ++v11;
        __int32 v10 = v12;
      }
      while (v12);
    }
    else
    {
      char v11 = a2;
    }
    *__int32 v4 = 0;
    size_t v13 = v11 - a2;
  }
  return v13 + v8;
}

size_t wcslcpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  if (a3 >= 2)
  {
    size_t v4 = a3 - 1;
    BOOL v3 = a2;
    while (1)
    {
      __int32 v5 = *v3++;
      *a1 = v5;
      if (!v5) {
        break;
      }
      ++a1;
      if (!--v4) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    BOOL v3 = a2;
LABEL_6:
    if (a3) {
      *a1 = 0;
    }
    while (*v3++)
      ;
  }
  return v3 - a2 - 1;
}

int wcsncasecmp_l(const __int32 *a1, const __int32 *a2, size_t n, locale_t a4)
{
  if (!n) {
    return 0;
  }
  unsigned __int32 v6 = *a1;
  if (!v6) {
    return -*a2;
  }
  size_t v8 = n - 1;
  uint64_t v9 = a1 + 1;
  while (1)
  {
    __darwin_ct_rune_t v10 = v6 > 0x7F ? ___tolower_l(v6, a4) : _DefaultRuneLocale.__maplower[v6];
    uint64_t v11 = *(unsigned int *)a2;
    __darwin_ct_rune_t v12 = v11 > 0x7F ? ___tolower_l(v11, a4) : _DefaultRuneLocale.__maplower[v11];
    int result = v10 - v12;
    if (result) {
      break;
    }
    if (!v8) {
      return 0;
    }
    ++a2;
    unsigned __int32 v14 = *v9++;
    unsigned __int32 v6 = v14;
    --v8;
    if (!v14) {
      return -*a2;
    }
  }
  return result;
}

int wcsncasecmp(const __int32 *a1, const __int32 *a2, size_t n)
{
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    __int32 v5 = v4;
  }
  else {
    __int32 v5 = (_xlocale *)&__global_locale;
  }
  return wcsncasecmp_l(a1, a2, n, v5);
}

__int32 *__cdecl wcsncat(__int32 *result, const __int32 *a2, size_t a3)
{
  uint64_t v3 = result - 1;
  do
  {
    __int32 v4 = v3[1];
    ++v3;
  }
  while (v4);
  __int32 v5 = *a2;
  if (*a2) {
    BOOL v6 = a3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = 0;
    size_t v8 = a3 - 1;
    do
    {
      v3[v7] = v5;
      __int32 v5 = a2[v7 + 1];
      BOOL v10 = v8-- != 0;
      ++v7;
    }
    while (v5 && v10);
    uint64_t v3 = (__int32 *)((char *)v3 + v7 * 4);
  }
  __int32 *v3 = 0;
  return result;
}

int wcsncmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  if (!a3) {
    return 0;
  }
  for (size_t i = a3 - 1; ; --i)
  {
    __int32 v4 = *a1;
    int v5 = *a1 - *a2;
    if (*a1 != *a2) {
      break;
    }
    ++a2;
    ++a1;
    if (v4) {
      BOOL v6 = i == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  return v5;
}

__int32 *__cdecl wcsncpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  if (a3)
  {
    size_t v5 = 4 * a3 - 4;
    for (size_t i = a1 + 1; ; ++i)
    {
      __int32 v7 = *a2;
      *(i - 1) = *a2;
      if (!v7) {
        break;
      }
      ++a2;
      v5 -= 4;
      if (!--a3) {
        return a1;
      }
    }
    if (a3 != 1) {
      MEMORY[0x18C122530]();
    }
  }
  return a1;
}

size_t wcsnlen(const __int32 *a1, size_t a2)
{
  if (!a2) {
    return 0;
  }
  size_t result = 0;
  while (a1[result])
  {
    if (a2 == ++result) {
      return a2;
    }
  }
  return result;
}

__int32 *__cdecl wcspbrk(__int32 *__s1, const __int32 *__s2)
{
  __int32 v2 = *__s1;
  if (!*__s1) {
    return 0;
  }
  __int32 v5 = *__s2;
  uint64_t v3 = __s2 + 1;
  __int32 v4 = v5;
  while (1)
  {
    BOOL v6 = v3;
    __int32 v7 = v4;
    if (v4) {
      break;
    }
LABEL_6:
    __int32 v9 = __s1[1];
    ++__s1;
    __int32 v2 = v9;
    if (!v9) {
      return 0;
    }
  }
  while (v2 != v7)
  {
    __int32 v8 = *v6++;
    __int32 v7 = v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
  return __s1;
}

__int32 *__cdecl wcsrchr(__int32 *__s, __int32 __c)
{
  size_t result = 0;
  __int32 v4 = __s;
  do
  {
    __int32 v6 = *v4++;
    __int32 v5 = v6;
    if (v6 == __c) {
      size_t result = __s;
    }
    long long __s = v4;
  }
  while (v5);
  return result;
}

size_t wcsspn(const __int32 *a1, const __int32 *a2)
{
  __int32 v2 = *a1;
  uint64_t v3 = a1;
  if (*a1)
  {
    __int32 v6 = *a2;
    __int32 v4 = a2 + 1;
    __int32 v5 = v6;
    uint64_t v3 = a1;
    while (1)
    {
      __int32 v7 = v4;
      __int32 v8 = v5;
      if (!v5) {
        break;
      }
      while (v2 != v8)
      {
        __int32 v9 = *v7++;
        __int32 v8 = v9;
        if (!v9) {
          return v3 - a1;
        }
      }
      __int32 v10 = v3[1];
      ++v3;
      __int32 v2 = v10;
      if (!v10) {
        return v3 - a1;
      }
    }
    uint64_t v3 = a1;
  }
  return v3 - a1;
}

FILE *__cdecl fmemopen(void *__buf, size_t __size, const char *__mode)
{
  uint64_t v3 = (FILE *)__size;
  int v16 = 0;
  if (!__size)
  {
    __int32 v6 = __error();
    goto LABEL_7;
  }
  if (!__sflags((char *)__mode, &v16) || !__buf && (v16 & 2) == 0)
  {
    __int32 v6 = __error();
    uint64_t v3 = 0;
LABEL_7:
    *__int32 v6 = 22;
    return v3;
  }
  __int32 v8 = malloc_type_malloc(0x28uLL, 0x10100402BFFC1BCuLL);
  if (!v8) {
    return 0;
  }
  __int32 v10 = v8;
  void v8[4] = 0;
  char v8[2] = v3;
  void *v8 = __buf;
  *((unsigned char *)v8 + 8) = __buf == 0;
  if (!__buf)
  {
    uint64_t v11 = malloc_type_malloc((size_t)v3, 0x10A053D1uLL);
    void *v10 = v11;
    if (!v11)
    {
LABEL_31:
      free(v10);
      return 0;
    }
    __unint64_t buf = v11;
    if (*((unsigned char *)v10 + 8)) {
      goto LABEL_15;
    }
  }
  if (*__mode == 119) {
LABEL_15:
  }
    *(unsigned char *)__unint64_t buf = 0;
  *((unsigned char *)v10 + 9) = j__strncasecmp(__mode, (const char *)0x62, v9) != 0;
  int v12 = *__mode;
  switch(v12)
  {
    case 'w':
      v10[3] = 0;
      break;
    case 'r':
      v10[3] = v3;
      break;
    case 'a':
      uint64_t v13 = MEMORY[0x18C122FD0](*v10, v10[2]);
      v10[3] = v13;
      v10[4] = v13;
      break;
  }
  if (v16) {
    unsigned __int32 v14 = 0;
  }
  else {
    unsigned __int32 v14 = (int (__cdecl *)(void *, char *, int))fmemopen_read;
  }
  int v15 = funopen(v10, v14, (int (__cdecl *)(void *, const char *, int))fmemopen_write, (fpos_t (__cdecl *)(void *, fpos_t, int))fmemopen_seek, (int (__cdecl *)(void *))fmemopen_close);
  if (!v15)
  {
    if (*((unsigned char *)v10 + 8)) {
      free((void *)*v10);
    }
    goto LABEL_31;
  }
  uint64_t v3 = v15;
  if (*__mode == 97) {
    v15->_flags |= 0x100u;
  }
  setvbuf(v15, 0, 2, 0);
  return v3;
}

uint64_t fmemopen_read(void *a1, int dfd, unsigned int a3)
{
  uint64_t v3 = a1[4];
  unint64_t v4 = a1[3] - v3;
  if (v4 >= (int)a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    j__mkdtempat_np(dfd, (char *)(*a1 + v3));
    a1[4] += (int)v5;
  }
  return v5;
}

uint64_t fmemopen_write(uint64_t a1, char *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 16) - v3;
  if (v4 >= (int)a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5)
  {
    j__mkdtempat_np(*(_DWORD *)a1 + v3, a2);
    unint64_t v7 = *(void *)(a1 + 24);
    unint64_t v8 = *(void *)(a1 + 32) + (int)v5;
    *(void *)(a1 + 32) = v8;
    if (v8 > v7) {
      *(void *)(a1 + 24) = v8;
    }
    if (!*(unsigned char *)(a1 + 9) && v8 < *(void *)(a1 + 16) && *(unsigned char *)(v8 + *(void *)a1 - 1)) {
      *(unsigned char *)(*(void *)a1 + v8) = 0;
    }
  }
  return v5;
}

uint64_t fmemopen_seek(void *a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    if (a2 > 0) {
      goto LABEL_10;
    }
    unint64_t v3 = a1[3];
    if (v3 < -a2) {
      goto LABEL_10;
    }
    a2 += v3;
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    a2 += a1[4];
    if ((unint64_t)a2 > a1[2]) {
      goto LABEL_10;
    }
LABEL_11:
    a1[4] = a2;
    return a2;
  }
  if (!a3 && a1[2] >= (unint64_t)a2) {
    goto LABEL_11;
  }
LABEL_10:
  *__error() = 22;
  return -1;
}

uint64_t fmemopen_close(void **a1)
{
  if (*((unsigned char *)a1 + 8)) {
    free(*a1);
  }
  free(a1);
  return 0;
}

__int32 *__cdecl wcsstr(__int32 *__s1, const __int32 *__s2)
{
  __int32 v2 = __s1;
  unint64_t v3 = __s2 + 1;
  __int32 v4 = *__s2;
  if (!*__s2) {
    return __s1;
  }
  size_t v5 = wcslen(__s2 + 1);
  while (1)
  {
    __int32 v6 = *v2;
    if (!*v2) {
      break;
    }
    unint64_t v7 = v2++;
    if (v6 == v4 && !wcsncmp(v2, v3, v5)) {
      return v7;
    }
  }
  return 0;
}

__int32 *__cdecl wcstok(__int32 *result, const __int32 *a2, __int32 **a3)
{
  if (result || (size_t result = *a3) != 0)
  {
    unint64_t v3 = result;
LABEL_4:
    __int32 v5 = *v3++;
    __int32 v4 = v5;
    __int32 v6 = a2;
    while (1)
    {
      __int32 v7 = *v6;
      if (!*v6) {
        break;
      }
      ++v6;
      if (v4 == v7)
      {
        size_t result = v3;
        goto LABEL_4;
      }
    }
    if (v4)
    {
      unint64_t v8 = v3;
LABEL_10:
      __int32 v10 = *v8++;
      __int32 v9 = v10;
      uint64_t v11 = a2;
      while (1)
      {
        __int32 v12 = *v11;
        if (*v11 == v9) {
          break;
        }
        ++v11;
        if (!v12)
        {
          unint64_t v3 = v8;
          goto LABEL_10;
        }
      }
      if (v9) {
        __int32 *v3 = 0;
      }
      else {
        unint64_t v8 = 0;
      }
    }
    else
    {
      unint64_t v8 = 0;
      size_t result = 0;
    }
    *a3 = v8;
  }
  return result;
}

int wcswidth_l(const __int32 *a1, size_t a2, locale_t a3)
{
  locale_t v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1) {
    locale_t v3 = a3;
  }
  if (a3) {
    __int32 v4 = v3;
  }
  else {
    __int32 v4 = (_xlocale *)__c_locale;
  }
  if (!a2) {
    return 0;
  }
  size_t v5 = a2;
  int v7 = 0;
  while (*a1)
  {
    int v8 = wcwidth_l(*a1, v4);
    if (v8 < 0) {
      return -1;
    }
    v7 += v8;
    ++a1;
    if (!--v5) {
      return v7;
    }
  }
  return v7;
}

int wcswidth(const __int32 *a1, size_t a2)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    __int32 v4 = v3;
  }
  else {
    __int32 v4 = (_xlocale *)&__global_locale;
  }
  return wcswidth_l(a1, a2, v4);
}

size_t wcsxfrm_l(__int32 *a1, const __int32 *a2, size_t a3, locale_t a4)
{
  size_t v4 = a3;
  size_t v5 = a1;
  if (*a2)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)unint64_t v20 = 0u;
    locale_t v7 = (locale_t)&__global_locale;
    if (a4 != (locale_t)-1) {
      locale_t v7 = a4;
    }
    if (a4) {
      int v8 = (char *)v7;
    }
    else {
      int v8 = __c_locale;
    }
    if (*(unsigned char *)(*((void *)v8 + 165) + 64))
    {
      size_t v9 = wcslen(a2);
      size_t v10 = v9;
      if (v4)
      {
        if (v9 >= v4)
        {
          size_t v15 = v4 - 1;
          wcsncpy(v5, a2, v15);
          v5[v15] = 0;
        }
        else
        {
          wcscpy(v5, a2);
        }
      }
    }
    else
    {
      __collate_xfrm((__int32 *)a2, v20, (uint64_t)v8);
      uint64_t v11 = (int *)v20[0];
      size_t v10 = wcslen((const __int32 *)v20[0]);
      __int32 v12 = (char *)v20[1];
      if (v20[1]) {
        v10 += wcslen((const __int32 *)v20[1]) + 1;
      }
      if (v4)
      {
        if (v4 != 1)
        {
          uint64_t v13 = v5 + 1;
          while (1)
          {
            int v14 = *v11;
            if (!*v11) {
              break;
            }
            ++v11;
            *(v13 - 1) = v14 + 1;
            --v4;
            ++v13;
            if (v4 <= 1)
            {
              size_t v5 = v13 - 1;
              goto LABEL_27;
            }
          }
          size_t v5 = v13 - 1;
          if (v12)
          {
            uint64_t v16 = 0;
            *size_t v5 = 1;
            do
            {
              int v17 = *(_DWORD *)&v12[v16 * 4];
              if (!v17) {
                break;
              }
              v13[v16] = v17 + 1;
              --v4;
              ++v16;
            }
            while (v4 > 1);
            size_t v5 = &v13[v16];
          }
        }
LABEL_27:
        *size_t v5 = 0;
      }
      int v18 = *__error();
      free(v20[0]);
      free(v20[1]);
      *__error() = v18;
    }
  }
  else
  {
    size_t v10 = 0;
    if (a3) {
      *a1 = 0;
    }
  }
  return v10;
}

size_t wcsxfrm(__int32 *a1, const __int32 *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = (_xlocale *)&__global_locale;
  }
  return wcsxfrm_l(a1, a2, a3, v5);
}

int wmemcmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  if (!a3) {
    return 0;
  }
  while (*a1 == *a2)
  {
    ++a1;
    ++a2;
    if (!--a3) {
      return 0;
    }
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return -1;
  }
}

__int32 *__cdecl wmemcpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  return (__int32 *)j__mkdtempat_np((int)a1, (char *)a2);
}

__int32 *__cdecl wmemmove(__int32 *a1, const __int32 *a2, size_t a3)
{
  return (__int32 *)j__mkostemp((char *)a1, (int)a2);
}

__int32 *__cdecl wmemset(__int32 *result, __int32 a2, size_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    do
    {
      *v3++ = a2;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t _UTF2_init(void *a1)
{
  a1[9] = _UTF2_mbrtowc;
  a1[12] = _UTF2_wcrtomb;
  a1[10] = _UTF2_mbsinit;
  a1[11] = _UTF2_mbsnrtowcs;
  a1[13] = _UTF2_wcsnrtombs;
  a1[8] = 0x8000000003;
  return 0;
}

uint64_t _UTF2_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  unsigned int v4 = a4[1];
  if (v4 >= 7)
  {
    size_t v5 = __error();
    int v6 = 22;
LABEL_3:
    *size_t v5 = v6;
    return -1;
  }
  if (a2) {
    int v8 = a2;
  }
  else {
    int v8 = "";
  }
  if (!a2) {
    a3 = 1;
  }
  if (a2) {
    size_t v10 = a1;
  }
  else {
    size_t v10 = 0;
  }
  if (!a3) {
    return -2;
  }
  if (v4)
  {
    int v11 = a4[2];
    int v12 = *a4;
    int v13 = a4[1];
  }
  else
  {
    int v18 = *(unsigned __int8 *)v8;
    if ((*v8 & 0x80000000) == 0)
    {
      if (v10) {
        int *v10 = v18;
      }
      return v18 != 0;
    }
    if ((v18 & 0xE0) == 0xC0)
    {
      int v11 = 128;
      int v13 = 2;
      int v19 = 31;
    }
    else
    {
      if ((v18 & 0xF0) != 0xE0) {
        goto LABEL_30;
      }
      int v11 = 2048;
      int v13 = 3;
      int v19 = 15;
    }
    ++v8;
    int v12 = v19 & v18;
  }
  unint64_t v14 = v4 == 0;
  unint64_t v15 = v13;
  if (a3 < v13) {
    unint64_t v15 = a3;
  }
  uint64_t v16 = v15 - v14;
  if (v15 > v14)
  {
    while (1)
    {
      char v17 = *v8;
      if ((*v8 & 0xC0) != 0x80) {
        goto LABEL_30;
      }
      ++v8;
      int v12 = v17 & 0x3F | (v12 << 6);
      if (!--v16)
      {
        LODWORD(v14) = v15;
        break;
      }
    }
  }
  if (v13 > (int)v14)
  {
    a4[1] = v13 - v14;
    a4[2] = v11;
    uint64_t result = -2;
    *a4 = v12;
    return result;
  }
  if (v12 < v11)
  {
LABEL_30:
    size_t v5 = __error();
    int v6 = 92;
    goto LABEL_3;
  }
  if (v10) {
    int *v10 = v12;
  }
  a4[1] = 0;
  if (v12) {
    return v13;
  }
  else {
    return 0;
  }
}

uint64_t _UTF2_wcrtomb(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4))
  {
    uint64_t v3 = __error();
    int v4 = 22;
LABEL_3:
    int *v3 = v4;
    return -1;
  }
  if (!a1) {
    return 1;
  }
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1;
  }
  if (a2 >= 0x800)
  {
    if (a2 >= 0x10000)
    {
      uint64_t v3 = __error();
      int v4 = 92;
      goto LABEL_3;
    }
    char v6 = -32;
    uint64_t v5 = 3;
  }
  else
  {
    char v6 = -64;
    uint64_t v5 = 2;
  }
  uint64_t v7 = v5 - 1;
  do
  {
    a1[v7] = a2 & 0x3F | 0x80;
    a2 = (int)a2 >> 6;
    unint64_t v8 = v7-- + 1;
  }
  while (v8 > 2);
  *a1 = a2 | v6;
  return v5;
}