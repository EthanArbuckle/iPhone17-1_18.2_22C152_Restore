void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;
  uint64_t vars8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      v6 = __sz | 7;
    }
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(uint64_t a1, void **a2)
{
  v2 = (void **)(a1 + 8);
  v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      v7 = v3;
    }
    else {
      v7 = v3 + 1;
    }
    if (v6 >= 0) {
      v5 = (void **)v3;
    }
    v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  char v6 = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  v5 = (void *)(a1 + 8);
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        v4 = (void *)*v7;
        v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      v5 = v7 + 1;
      v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

double marisa::Agent::Agent(marisa::Agent *this)
{
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void marisa::Agent::~Agent(marisa::Agent *this)
{
}

void *marisa::Agent::set_query(void *this, const char *a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x200000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:21: MARISA_NULL_ERROR: (ptr == NULL)"
                   " && (length != 0)";
  }
  uint64_t v3 = this[5];
  if (v3) {
    *(_DWORD *)(v3 + 108) = 0;
  }
  *this = a2;
  this[1] = a3;
  return this;
}

uint64_t marisa::Agent::set_query(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 40);
  if (v2) {
    *(_DWORD *)(v2 + 108) = 0;
  }
  *(void *)(this + 16) = a2;
  return this;
}

void *marisa::Agent::init_state(marisa::Agent *this)
{
  v1 = (uint64_t *)((char *)this + 40);
  if (*((void *)this + 5))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x100000024;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:36: MARISA_STATE_ERROR: state_.get() != NULL";
    goto LABEL_8;
  }
  uint64_t v2 = operator new(0x70uLL, MEMORY[0x263F8C180]);
  if (v2)
  {
    *(_OWORD *)((char *)v2 + 2marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    *(_OWORD *)((char *)v2 + 73) = 0u;
    *((void *)v2 + 12) = 0;
    *((void *)v2 + 13) = 0;
  }
  double result = marisa::scoped_ptr<marisa::grimoire::trie::State>::reset(v1, (uint64_t)v2);
  if (!*v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x800000026;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:38: MARISA_MEMORY_ERROR: state_.get() == NULL";
LABEL_8:
    exception[3] = v5;
  }
  return result;
}

void *marisa::scoped_ptr<marisa::grimoire::trie::State>::reset(uint64_t *a1, uint64_t a2)
{
  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
  }
  uint64_t v4 = *a1;
  *a1 = a2;
  return marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr(&v4);
}

void marisa::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x2166855D0);
}

uint64_t marisa::Exception::what(marisa::Exception *this)
{
  return *((void *)this + 3);
}

void *marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = v2[6];
    if (v3) {
      MEMORY[0x2166855A0](v3, 0x1000C8077774924);
    }
    if (*v2) {
      MEMORY[0x2166855A0](*v2, 0x1000C8077774924);
    }
    MEMORY[0x2166855D0](v2, 0x1070C406A3FAA47);
  }
  return a1;
}

uint64_t marisa::grimoire::io::Mapper::Mapper(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = -1;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = -1;
  return this;
}

void marisa::grimoire::io::Mapper::~Mapper(marisa::grimoire::io::Mapper *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2 != (void *)-1) {
    munmap(v2, *((void *)this + 3));
  }
  int v3 = *((_DWORD *)this + 8);
  if (v3 != -1) {
    close(v3);
  }
}

void __clang_call_terminate(void *a1)
{
}

uint64_t *marisa::grimoire::io::Mapper::swap(uint64_t *this, marisa::grimoire::io::Mapper *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v4 = this[1];
  uint64_t v3 = this[2];
  uint64_t v5 = *((void *)a2 + 2);
  this[1] = *((void *)a2 + 1);
  this[2] = v5;
  *((void *)a2 + 1) = v4;
  *((void *)a2 + 2) = v3;
  uint64_t v6 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return this;
}

__n128 marisa::grimoire::io::Mapper::open(marisa::grimoire::io::Mapper *this, const void *a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x20000003FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:63: MARISA_NULL_ERROR: "
                   "(ptr == NULL) && (size != 0)";
  }
  long long v3 = *(_OWORD *)this;
  long long v4 = *((_OWORD *)this + 1);
  *(void *)this = a2;
  *((void *)this + 1) = -1;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = -1;
  int v9 = v5;
  marisa::grimoire::io::Mapper::~Mapper((marisa::grimoire::io::Mapper *)v8);
  return result;
}

uint64_t marisa::grimoire::io::Mapper::seek(marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000047;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:71: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_8;
  }
  if (*((void *)this + 2) < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000048;
    long long v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:72: MARISA_IO_ERROR: size > avail_";
LABEL_8:
    exception[3] = v4;
  }

  return marisa::grimoire::io::Mapper::map_data(this, a2);
}

uint64_t marisa::grimoire::io::Mapper::map_data(marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000063;
    v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:99: MARISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
  }
  unint64_t v3 = *((void *)this + 2);
  BOOL v4 = v3 >= a2;
  unint64_t v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000064;
    v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:100: MARISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *(void *)this = v2 + a2;
  *((void *)this + 2) = v5;
  return v2;
}

uint64_t marisa::grimoire::io::Writer::Writer(uint64_t this)
{
  *(void *)this = 0;
  *(_DWORD *)(this + 8) = -1;
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

void marisa::grimoire::io::Writer::~Writer(FILE **this)
{
  if (*((unsigned char *)this + 24)) {
    fclose(*this);
  }
}

FILE *marisa::grimoire::io::Writer::open(uint64_t a1, uint64_t a2)
{
  __n128 result = *(FILE **)a1;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(void *)(a1 + 16) = a2;
  int v4 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = 0;
  if (v4) {
    return (FILE *)fclose(result);
  }
  return result;
}

uint64_t marisa::grimoire::io::Writer::seek(uint64_t this, size_t __nitems)
{
  size_t v2 = __nitems;
  uint64_t v3 = this;
  __buf[128] = *MEMORY[0x263EF8340];
  if (!*(void *)this && *(_DWORD *)(this + 8) == -1 && !*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000044;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:68: MARISA_STATE_ERROR: !is_open()";
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400) {
          size_t v4 = 1024;
        }
        else {
          size_t v4 = v2;
        }
        this = marisa::grimoire::io::Writer::write_data(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return marisa::grimoire::io::Writer::write_data(this, (char *)__buf, __nitems);
    }
  }
  return this;
}

uint64_t marisa::grimoire::io::Writer::write_data(uint64_t this, char *__buf, size_t __nitems)
{
  size_t v3 = __nitems;
  size_t v4 = __buf;
  uint64_t v5 = this;
  uint64_t v6 = *(FILE **)this;
  if (!*(void *)this && *(_DWORD *)(this + 8) == -1 && !*(void *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000071;
    int v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:113: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(this + 8) != -1)
    {
      while (1)
      {
        size_t v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        this = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (this <= 0) {
          break;
        }
        v4 += this;
        v3 -= this;
        if (!v3) {
          return this;
        }
      }
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000081;
      int v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:129: MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C3C3A00;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000086;
        int v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:134: MARISA_IO_ERROR: ::fwrit"
             "e(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      this = fflush(*(FILE **)v5);
      if (this)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C3C3A00;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000087;
        int v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:135: MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      this = *(void *)(this + 16);
      if (this)
      {
        this = std::ostream::write();
        if ((*(unsigned char *)(this + *(void *)(*(void *)this - 24) + 32) & 5) != 0)
        {
          unint64_t v10 = __cxa_allocate_exception(0x20uLL);
          *unint64_t v10 = &unk_26C3C3A00;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008BLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:139: MARISA_IO_ERROR: !"
                   "stream_->write(static_cast<const char *>(data), size)";
        }
      }
    }
  }
  return this;
}

void sub_2128BE704()
{
}

void sub_2128BE780()
{
}

marisa::grimoire::trie::LoudsTrie *marisa::grimoire::trie::LoudsTrie::LoudsTrie(marisa::grimoire::trie::LoudsTrie *this)
{
  *(_OWORD *)((char *)this + 2marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 18marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 34marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 393) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 297) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 441) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 553) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(_OWORD *)((char *)this + 601) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 50marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 649) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 697) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((void *)this + 90) = 0;
  *((_DWORD *)this + 182) = 0;
  *((void *)this + 92) = 0;
  marisa::grimoire::trie::Tail::Tail((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744));
  *((unsigned char *)this + 1048) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((void *)this + 134) = 3;
  *((void *)this + 13marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0x100000000200;
  *((_DWORD *)this + 272) = 0x20000;
  marisa::grimoire::io::Mapper::Mapper((uint64_t)this + 1096);
  return this;
}

void sub_2128BE8B8(_Unwind_Exception *a1)
{
  uint64_t v9 = *((void *)v1 + 126);
  if (v9) {
    MEMORY[0x2166855A0](v9, 0x1000C8077774924);
  }
  marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(v5);
  marisa::grimoire::trie::Tail::~Tail(v4);
  if (*v7) {
    MEMORY[0x2166855A0](*v7, 0x1000C8077774924);
  }
  if (*v6) {
    MEMORY[0x2166855A0](*v6, 0x1000C8077774924);
  }
  marisa::grimoire::vector::BitVector::~BitVector(v3);
  marisa::grimoire::vector::BitVector::~BitVector(v2);
  marisa::grimoire::vector::BitVector::~BitVector(v1);
  _Unwind_Resume(a1);
}

void marisa::grimoire::trie::Tail::~Tail(marisa::grimoire::trie::Tail *this)
{
  uint64_t v2 = *((void *)this + 26);
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 20);
  if (v3) {
    MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 14);
  if (v4) {
    MEMORY[0x2166855A0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    MEMORY[0x2166855A0](v5, 0x1000C8077774924);
  }
  if (*(void *)this) {
    MEMORY[0x2166855A0](*(void *)this, 0x1000C8077774924);
  }
}

void marisa::grimoire::vector::BitVector::~BitVector(marisa::grimoire::vector::BitVector *this)
{
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    MEMORY[0x2166855A0](v4, 0x1000C8077774924);
  }
  if (*(void *)this) {
    MEMORY[0x2166855A0](*(void *)this, 0x1000C8077774924);
  }
}

void marisa::grimoire::trie::LoudsTrie::~LoudsTrie(marisa::grimoire::trie::LoudsTrie *this)
{
  marisa::grimoire::io::Mapper::~Mapper((marisa::grimoire::trie::LoudsTrie *)((char *)this + 1096));
  uint64_t v2 = *((void *)this + 126);
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8077774924);
  }
  marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((char *)this + 1000);
  uint64_t v3 = *((void *)this + 119);
  if (v3) {
    MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 113);
  if (v4) {
    MEMORY[0x2166855A0](v4, 0x1000C8077774924);
  }
  uint64_t v5 = *((void *)this + 107);
  if (v5) {
    MEMORY[0x2166855A0](v5, 0x1000C8077774924);
  }
  uint64_t v6 = *((void *)this + 99);
  if (v6) {
    MEMORY[0x2166855A0](v6, 0x1000C8077774924);
  }
  uint64_t v7 = *((void *)this + 93);
  if (v7) {
    MEMORY[0x2166855A0](v7, 0x1000C8077774924);
  }
  uint64_t v8 = *((void *)this + 84);
  if (v8) {
    MEMORY[0x2166855A0](v8, 0x1000C8077774924);
  }
  uint64_t v9 = *((void *)this + 78);
  if (v9) {
    MEMORY[0x2166855A0](v9, 0x1000C8077774924);
  }
  uint64_t v10 = *((void *)this + 72);
  if (v10) {
    MEMORY[0x2166855A0](v10, 0x1000C8077774924);
  }
  uint64_t v11 = *((void *)this + 66);
  if (v11) {
    MEMORY[0x2166855A0](v11, 0x1000C8077774924);
  }
  uint64_t v12 = *((void *)this + 60);
  if (v12) {
    MEMORY[0x2166855A0](v12, 0x1000C8077774924);
  }
  uint64_t v13 = *((void *)this + 52);
  if (v13) {
    MEMORY[0x2166855A0](v13, 0x1000C8077774924);
  }
  uint64_t v14 = *((void *)this + 46);
  if (v14) {
    MEMORY[0x2166855A0](v14, 0x1000C8077774924);
  }
  uint64_t v15 = *((void *)this + 40);
  if (v15) {
    MEMORY[0x2166855A0](v15, 0x1000C8077774924);
  }
  uint64_t v16 = *((void *)this + 34);
  if (v16) {
    MEMORY[0x2166855A0](v16, 0x1000C8077774924);
  }
  uint64_t v17 = *((void *)this + 26);
  if (v17) {
    MEMORY[0x2166855A0](v17, 0x1000C8077774924);
  }
  uint64_t v18 = *((void *)this + 20);
  if (v18) {
    MEMORY[0x2166855A0](v18, 0x1000C8077774924);
  }
  uint64_t v19 = *((void *)this + 14);
  if (v19) {
    MEMORY[0x2166855A0](v19, 0x1000C8077774924);
  }
  uint64_t v20 = *((void *)this + 8);
  if (v20) {
    MEMORY[0x2166855A0](v20, 0x1000C8077774924);
  }
  if (*(void *)this) {
    MEMORY[0x2166855A0](*(void *)this, 0x1000C8077774924);
  }
}

void marisa::grimoire::trie::LoudsTrie::build(marisa::grimoire::trie::LoudsTrie *this, marisa::Keyset *a2, unsigned int a3)
{
  uint64_t v5 = 3;
  uint64_t v6 = 0x100000000200;
  int v7 = 0x20000;
  marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v5, a3);
  v8[0] = v5;
  v8[1] = v6;
  int v9 = v7;
  marisa::grimoire::trie::LoudsTrie::LoudsTrie((marisa::grimoire::trie::LoudsTrie *)&v5);
  marisa::grimoire::trie::LoudsTrie::build_((marisa::grimoire::trie::LoudsTrie *)&v5, a2, (const marisa::grimoire::trie::Config *)v8);
  marisa::grimoire::trie::LoudsTrie::swap(this, (marisa::grimoire::trie::LoudsTrie *)&v5);
  marisa::grimoire::trie::LoudsTrie::~LoudsTrie((marisa::grimoire::trie::LoudsTrie *)&v5);
}

void sub_2128BED94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  marisa::grimoire::trie::LoudsTrie::~LoudsTrie((marisa::grimoire::trie::LoudsTrie *)va);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_(marisa::grimoire::trie::LoudsTrie *this, marisa::Keyset *a2, const marisa::grimoire::trie::Config *a3)
{
  memset(v31, 0, 41);
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::resize((uint64_t *)v31, *((void *)a2 + 11));
  if (*((void *)a2 + 11))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)&v31[0] + 1) + v6;
      uint64_t v9 = *(void *)(*((void *)a2 + 6) + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7;
      int v10 = *(_DWORD *)(v9 + 8);
      *(void *)uint64_t v8 = *(void *)v9;
      *(_DWORD *)(v8 + 8) = v10;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
      ++v7;
      v6 += 24;
    }
    while (v7 < *((void *)a2 + 11));
  }
  long long v29 = 0u;
  memset(v30, 0, 25);
  marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::Key>((uint64_t)this, (uint64_t *)v31, &v29, (uint64_t)a3, 1);
  memset(v28, 0, 41);
  marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize((uint64_t *)v28, v30[1]);
  unint64_t v11 = *((void *)&v28[1] + 1);
  if (*((void *)&v28[1] + 1))
  {
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)&v29 + 1);
    uint64_t v14 = (_DWORD *)(*((void *)&v28[0] + 1) + 4);
    do
    {
      *(v14 - 1) = *(_DWORD *)(v13 + 4 * v12);
      _DWORD *v14 = v12++;
      v14 += 2;
    }
    while (v11 != v12);
  }
  uint64_t v15 = v29;
  long long v29 = 0u;
  memset(v30, 0, 25);
  if (v15)
  {
    MEMORY[0x2166855A0](v15, 0x1000C8077774924);
    unint64_t v11 = *((void *)&v28[1] + 1);
  }
  unint64_t v16 = 126 - 2 * __clz(v11);
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(*((uint64_t *)&v28[0] + 1), (unsigned int *)(*((void *)&v28[0] + 1) + 8 * v11), (uint64_t)&v32, v17, 1);
  if (*((void *)&v28[1] + 1))
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      for (uint64_t i = *((void *)&v28[0] + 1); ; uint64_t i = *((void *)&v28[0] + 1))
      {
        unint64_t v21 = *(unsigned int *)(i + 8 * v18);
        if (v19 >= v21) {
          break;
        }
        marisa::grimoire::vector::BitVector::push_back((uint64_t *)this + 26, 0);
        ++v19;
      }
      if (v19 == v21)
      {
        marisa::grimoire::vector::BitVector::push_back((uint64_t *)this + 26, 1);
        ++v19;
      }
      ++v18;
    }
    while (v18 < *((void *)&v28[1] + 1));
  }
  else
  {
    unint64_t v19 = 0;
  }
  for (; v19 < *((void *)this + 81); ++v19)
    marisa::grimoire::vector::BitVector::push_back((uint64_t *)this + 26, 0);
  v22 = (uint64_t *)((char *)this + 208);
  marisa::grimoire::vector::BitVector::push_back(v22, 0);
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)v22, 0, 1);
  if (*((void *)a2 + 11))
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      unint64_t v25 = *(unsigned int *)(*((void *)&v28[0] + 1) + v23 + 4);
      uint64_t v26 = *(void *)(*((void *)a2 + 6) + ((v25 >> 5) & 0x7FFFFF8));
      *(_DWORD *)(v26 + 16 * v25 + 12) = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::vector::BitVector *)v22, *(unsigned int *)(*((void *)&v28[0] + 1) + v23));
      ++v24;
      v23 += 8;
    }
    while (v24 < *((void *)a2 + 11));
  }
  if (*(void *)&v28[0]) {
    MEMORY[0x2166855A0](*(void *)&v28[0], 0x1000C8077774924);
  }
  if ((void)v29) {
    MEMORY[0x2166855A0](v29, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v31[0];
  if (*(void *)&v31[0]) {
    return MEMORY[0x2166855A0](*(void *)&v31[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128BF078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    MEMORY[0x2166855A0](a15, 0x1000C8077774924);
  }
  if (a21) {
    MEMORY[0x2166855A0](a21, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *marisa::grimoire::trie::LoudsTrie::swap(marisa::grimoire::trie::LoudsTrie *this, marisa::grimoire::trie::LoudsTrie *a2)
{
  marisa::grimoire::vector::BitVector::swap(this, a2);
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 208));
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 416));
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 78, (uint64_t *)a2 + 78);
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 84, (uint64_t *)a2 + 84);
  uint64_t v4 = *((void *)this + 90);
  *((void *)this + 90) = *((void *)a2 + 90);
  *((void *)a2 + 90) = v4;
  LODWORD(v4) = *((_DWORD *)this + 182);
  *((_DWORD *)this + 182) = *((_DWORD *)a2 + 182);
  *((_DWORD *)a2 + 182) = v4;
  uint64_t v5 = *((void *)this + 92);
  *((void *)this + 92) = *((void *)a2 + 92);
  *((void *)a2 + 92) = v5;
  marisa::grimoire::trie::Tail::swap((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 744));
  uint64_t v6 = *((void *)this + 125);
  *((void *)this + 12marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = *((void *)a2 + 125);
  *((void *)a2 + 12marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v6;
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 126, (uint64_t *)a2 + 126);
  uint64_t v7 = *((void *)this + 132);
  *((void *)this + 132) = *((void *)a2 + 132);
  *((void *)a2 + 132) = v7;
  uint64_t v8 = *((void *)this + 133);
  *((void *)this + 133) = *((void *)a2 + 133);
  *((void *)a2 + 133) = v8;
  uint64_t v9 = *((void *)this + 134);
  *((void *)this + 134) = *((void *)a2 + 134);
  *((void *)a2 + 134) = v9;
  uint64_t v10 = *((void *)this + 135);
  *((void *)this + 13marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = *((void *)a2 + 135);
  *((void *)a2 + 13marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v10;
  LODWORD(v9) = *((_DWORD *)this + 272);
  *((_DWORD *)this + 272) = *((_DWORD *)a2 + 272);
  *((_DWORD *)a2 + 272) = v9;

  return marisa::grimoire::io::Mapper::swap((uint64_t *)this + 137, (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 1096));
}

void marisa::grimoire::trie::LoudsTrie::map(marisa::grimoire::trie::LoudsTrie *this, marisa::grimoire::io::Mapper *a2)
{
  marisa::grimoire::trie::Header::map((marisa::grimoire::trie::Header *)v4, a2);
  marisa::grimoire::trie::LoudsTrie::LoudsTrie((marisa::grimoire::trie::LoudsTrie *)v4);
  marisa::grimoire::trie::LoudsTrie::map_((marisa::grimoire::trie::LoudsTrie *)v4, a2);
  marisa::grimoire::io::Mapper::swap(v5, a2);
  marisa::grimoire::trie::LoudsTrie::swap(this, (marisa::grimoire::trie::LoudsTrie *)v4);
  marisa::grimoire::trie::LoudsTrie::~LoudsTrie((marisa::grimoire::trie::LoudsTrie *)v4);
}

void sub_2128BF288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *marisa::grimoire::trie::Header::map(marisa::grimoire::trie::Header *this, marisa::grimoire::io::Mapper *a2)
{
  uint64_t result = (unsigned char *)marisa::grimoire::io::Mapper::map_data(a2, 0x10uLL);
  if (*result != 87) {
    goto LABEL_7;
  }
  uint64_t v3 = 1u;
  do
  {
    if (v3 == 16) {
      return result;
    }
    int v4 = result[v3];
    int v5 = marisa::grimoire::trie::Header::get_header(void)::buf[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h:21: MARISA_FORMAT_ERRO"
                   "R: !test_header(ptr)";
  }
  return result;
}

double marisa::grimoire::trie::LoudsTrie::map_(marisa::grimoire::trie::LoudsTrie *this, marisa::grimoire::io::Mapper *a2)
{
  marisa::grimoire::vector::BitVector::map(this, a2);
  marisa::grimoire::vector::BitVector::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  marisa::grimoire::vector::BitVector::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), a2);
  marisa::grimoire::vector::Vector<unsigned char>::map((long long *)this + 39, a2);
  marisa::grimoire::vector::FlatVector::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 672), a2);
  marisa::grimoire::trie::Tail::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2);
  if (*((void *)this + 59) && !*((void *)this + 96))
  {
    int v4 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x263F8C180]);
    int v5 = v4;
    if (v4) {
      marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
    }
    marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset((marisa::grimoire::trie::LoudsTrie **)this + 125, v5);
    uint64_t v6 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x80000021ELL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:542: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
    }
    marisa::grimoire::trie::LoudsTrie::map_(v6, a2);
  }
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::map((long long *)this + 63, a2);
  *((void *)this + 132) = *((void *)this + 129) - 1;
  *((void *)this + 133) = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  unsigned int v7 = *(_DWORD *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  uint64_t v10 = 3;
  *(void *)&double v11 = 0x100000000200;
  int v12 = 0x20000;
  marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v10, v7);
  *((void *)this + 134) = v10;
  double result = v11;
  *((double *)this + 13marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v11;
  *((_DWORD *)this + 272) = v12;
  return result;
}

void sub_2128BF4F8(_Unwind_Exception *a1)
{
  MEMORY[0x2166855C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::LoudsTrie::write(marisa::grimoire::trie::LoudsTrie **this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, "We love Marisa.", 0x10uLL);

  return marisa::grimoire::trie::LoudsTrie::write_(this, a2);
}

uint64_t marisa::grimoire::trie::LoudsTrie::write_(marisa::grimoire::trie::LoudsTrie **this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::vector::BitVector::write_((marisa::grimoire::vector::BitVector *)this, a2);
  marisa::grimoire::vector::BitVector::write_((marisa::grimoire::vector::BitVector *)(this + 26), a2);
  marisa::grimoire::vector::BitVector::write_((marisa::grimoire::vector::BitVector *)(this + 52), a2);
  marisa::grimoire::vector::Vector<unsigned char>::write_((uint64_t)(this + 78), a2);
  marisa::grimoire::vector::FlatVector::write_((marisa::grimoire::vector::FlatVector *)(this + 84), a2);
  marisa::grimoire::trie::Tail::write((marisa::grimoire::trie::Tail *)(this + 93), a2);
  int v4 = this[125];
  if (v4) {
    marisa::grimoire::trie::LoudsTrie::write_(v4, a2);
  }
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::write_((uint64_t)(this + 126), a2);
  unsigned int __buf = this[133];
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  int v6 = *((_DWORD *)this + 271) | *((_DWORD *)this + 268) | *((_DWORD *)this + 272);
  return marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v6, 4uLL);
}

uint64_t marisa::grimoire::trie::LoudsTrie::lookup(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2)
{
  uint64_t v4 = *((void *)a2 + 5);
  *(void *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 108) = 0;
  while (1)
  {
    unint64_t v5 = *((void *)a2 + 1);
    if (v5 <= *(unsigned int *)(v4 + 100)) {
      break;
    }
    if ((marisa::grimoire::trie::LoudsTrie::find_child(this, a2) & 1) == 0) {
      return 0;
    }
  }
  unint64_t v6 = *(unsigned int *)(v4 + 96);
  if ((*(void *)(*((void *)this + 28) + ((v6 >> 3) & 0x1FFFFFF8)) >> v6))
  {
    *((void *)a2 + 3) = *(void *)a2;
    *((_DWORD *)a2 + 8) = v5;
    *((_DWORD *)a2 + 9) = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), v6);
    return 1;
  }
  return 0;
}

uint64_t marisa::grimoire::trie::LoudsTrie::find_child(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2)
{
  uint64_t v4 = *((void *)a2 + 5);
  unint64_t v5 = *(unsigned int *)(v4 + 96);
  uint64_t v6 = *(unsigned int *)(v4 + 100);
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)a2 + v6) ^ (32 * v5) ^ v5) & *((void *)this + 132);
  uint64_t v8 = *((void *)this + 128);
  if (v5 != *(_DWORD *)(v8 + 12 * v7))
  {
    unint64_t v10 = marisa::grimoire::vector::BitVector::select0(this, v5);
    uint64_t v11 = *((void *)this + 2);
    if ((*(void *)(v11 + (((v10 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 + 1)))
    {
      unsigned int v12 = v10 - *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 96) = v12;
      unint64_t v13 = v10 + 2;
      uint64_t v14 = 0xFFFFFFFFLL;
      while (1)
      {
        uint64_t v15 = v12;
        if ((*(void *)(*((void *)this + 54) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12))
        {
          if (v14 == 0xFFFFFFFFLL)
          {
            uint64_t v14 = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), v12);
            uint64_t v15 = *(unsigned int *)(v4 + 96);
          }
          else
          {
            ++v14;
          }
          int v17 = *(_DWORD *)(v4 + 100);
          uint64_t v18 = *((void *)this + 90);
          unint64_t v19 = (unint64_t)(v18 * v14) >> 6;
          uint64_t v20 = (v18 * v14) & 0x3F;
          unint64_t v21 = v20 + v18;
          uint64_t v22 = *((void *)this + 86);
          uint64_t v23 = *(void *)(v22 + 8 * v19) >> v20;
          if (v21 > 0x40) {
            v23 |= (2 * *(void *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          }
          unint64_t v24 = *(unsigned __int8 *)(*((void *)this + 80) + v15) | ((*((_DWORD *)this + 182) & v23) << 8);
          unint64_t v25 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
          if (v25)
          {
            if (marisa::grimoire::trie::LoudsTrie::match_(v25, a2, v24)) {
              return 1;
            }
          }
          else if (marisa::grimoire::trie::Tail::match((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2, v24))
          {
            return 1;
          }
          if (*(_DWORD *)(v4 + 100) != v17) {
            return 0;
          }
          unsigned int v12 = *(_DWORD *)(v4 + 96);
          uint64_t v11 = *((void *)this + 2);
        }
        else
        {
          uint64_t v16 = *(unsigned int *)(v4 + 100);
          if (*(unsigned __int8 *)(*((void *)this + 80) + v12) == *(unsigned __int8 *)(*(void *)a2 + v16))
          {
            *(_DWORD *)(v4 + 100) = v16 + 1;
            return 1;
          }
        }
        *(_DWORD *)(v4 + 96) = ++v12;
        uint64_t v26 = *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
        ++v13;
        if ((v26 & 1) == 0) {
          return 0;
        }
      }
    }
    return 0;
  }
  unint64_t v9 = *(unsigned int *)(v8 + 12 * v7 + 8);
  if (v9 > 0xFFFFFEFF)
  {
    *(_DWORD *)(v4 + 100) = v6 + 1;
    goto LABEL_24;
  }
  v27 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
  if (v27)
  {
    if (marisa::grimoire::trie::LoudsTrie::match_(v27, a2, v9)) {
      goto LABEL_24;
    }
    return 0;
  }
  if ((marisa::grimoire::trie::Tail::match((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2, v9) & 1) == 0) {
    return 0;
  }
LABEL_24:
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(*((void *)this + 128) + 12 * v7 + 4);
  return 1;
}

unint64_t marisa::grimoire::trie::LoudsTrie::reverse_lookup(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2)
{
  unint64_t v3 = *((void *)a2 + 2);
  if (v3 >= *((void *)this + 33))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x300000049;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:73: MARISA_BOUND_"
                   "ERROR: agent.query().id() >= size()";
  }
  uint64_t v5 = *((void *)a2 + 5);
  *(void *)(v5 + 24) = 0;
  unint64_t v6 = *(void *)(v5 + 32);
  if (v6 <= 0x1F)
  {
    if (v6 <= 0x10) {
      size_t v7 = 32;
    }
    else {
      size_t v7 = 2 * v6;
    }
    marisa::grimoire::vector::Vector<char>::realloc((uint64_t *)v5, v7);
    unint64_t v3 = *((void *)a2 + 2);
  }
  *(_DWORD *)(v5 + 108) = 0;
  unint64_t result = marisa::grimoire::vector::BitVector::select1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), v3);
  *(_DWORD *)(v5 + 96) = result;
  if (!result) {
    goto LABEL_30;
  }
  while (1)
  {
    if ((*(void *)(*((void *)this + 54) + ((result >> 3) & 0x1FFFFFF8)) >> result))
    {
      uint64_t v9 = *(void *)(v5 + 24);
      int v10 = *(unsigned __int8 *)(*((void *)this + 80) + result);
      uint64_t v11 = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), result);
      uint64_t v12 = *((void *)this + 90);
      unint64_t v13 = (unint64_t)(v12 * v11) >> 6;
      uint64_t v14 = (v12 * v11) & 0x3F;
      unint64_t v15 = v14 + v12;
      uint64_t v16 = *((void *)this + 86);
      uint64_t v17 = *(void *)(v16 + 8 * v13) >> v14;
      if (v15 > 0x40) {
        v17 |= (2 * *(void *)(v16 + 8 * v13 + 8)) << (v14 ^ 0x3Fu);
      }
      unint64_t v18 = v10 | ((*((_DWORD *)this + 182) & v17) << 8);
      unint64_t v19 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
      if (v19) {
        unint64_t result = (unint64_t)marisa::grimoire::trie::LoudsTrie::restore_(v19, a2, v18);
      }
      else {
        unint64_t result = (unint64_t)marisa::grimoire::trie::Tail::restore((uint64_t *)this + 93, a2, v18);
      }
      uint64_t v20 = *(void *)(v5 + 24);
      if (v9 != v20)
      {
        uint64_t v21 = *(void *)(v5 + 8);
        uint64_t v22 = (unsigned char *)(v21 + v20 - 1);
        if ((unint64_t)v22 > v21 + v9)
        {
          unint64_t v23 = v21 + v9 + 1;
          do
          {
            char v24 = *(unsigned char *)(v23 - 1);
            *(unsigned char *)(v23 - 1) = *v22;
            *v22-- = v24;
            BOOL v25 = v23++ >= (unint64_t)v22;
          }
          while (!v25);
        }
      }
    }
    else
    {
      char v35 = *(unsigned char *)(*((void *)this + 80) + result);
      unint64_t result = (unint64_t)marisa::grimoire::vector::Vector<char>::push_back((uint64_t *)v5, &v35);
    }
    unint64_t v26 = *(unsigned int *)(v5 + 96);
    if (*((void *)this + 133) >= v26) {
      break;
    }
    unint64_t result = marisa::grimoire::vector::BitVector::select1(this, v26) + ~(unint64_t)*(unsigned int *)(v5 + 96);
    *(_DWORD *)(v5 + 96) = result;
  }
  unint64_t v27 = *(void *)(v5 + 8);
  uint64_t v28 = *(void *)(v5 + 24);
  long long v29 = (unsigned char *)(v27 + v28 - 1);
  if (v28) {
    BOOL v30 = (unint64_t)v29 > v27;
  }
  else {
    BOOL v30 = 0;
  }
  if (v30)
  {
    unint64_t v31 = v27 + 1;
    do
    {
      char v32 = *(unsigned char *)(v31 - 1);
      *(unsigned char *)(v31 - 1) = *v29;
      *v29-- = v32;
      BOOL v25 = v31++ >= (unint64_t)v29;
    }
    while (!v25);
LABEL_30:
    unint64_t v27 = *(void *)(v5 + 8);
    uint64_t v28 = *(void *)(v5 + 24);
  }
  *((void *)a2 + 3) = v27;
  uint64_t v33 = *((void *)a2 + 2);
  *((_DWORD *)a2 + 8) = v28;
  *((_DWORD *)a2 + 9) = v33;
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<char>::push_back(uint64_t *result, unsigned char *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[3];
  uint64_t v5 = result[4];
  size_t v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    uint64_t v7 = 2 * v5;
    if (v5 < 0) {
      uint64_t v7 = -1;
    }
    if (v5 <= v6 >> 1) {
      size_t v8 = v6;
    }
    else {
      size_t v8 = v7;
    }
    unint64_t result = (uint64_t *)marisa::grimoire::vector::Vector<char>::realloc(result, v8);
    uint64_t v4 = v3[3];
  }
  *(unsigned char *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

uint64_t *marisa::grimoire::vector::BitVector::swap(marisa::grimoire::vector::BitVector *this, marisa::grimoire::vector::BitVector *a2)
{
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 8, (uint64_t *)a2 + 8);
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 14, (uint64_t *)a2 + 14);

  return marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 20, (uint64_t *)a2 + 20);
}

uint64_t *marisa::grimoire::vector::Vector<unsigned char>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  unsigned char *result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  uint64_t v4 = result[2];
  uint64_t v5 = result[3];
  uint64_t v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  uint64_t v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((unsigned char *)result + 40);
  *((unsigned char *)result + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0x555555555555555) {
      uint64_t v5 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    unint64_t result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::realloc(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 24 * v6;
    do
    {
      uint64_t v9 = v3[1] + v8;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::Key>((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3]) {
    marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::Key>(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  marisa::grimoire::vector::FlatVector::build((long long *)(a1 + 672), (uint64_t)v17);
  marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x2166855A0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128BFF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = a1[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 60) {
      uint64_t v5 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    marisa::grimoire::vector::Vector<unsigned long long>::realloc(a1, a2);
  }
  unint64_t v6 = a1[3];
  if (v2 > v6) {
    bzero((void *)(a1[1] + 8 * v6), 8 * (v2 - v6));
  }
  a1[3] = v2;
}

uint64_t *marisa::grimoire::vector::BitVector::push_back(uint64_t *this, int a2)
{
  unint64_t v2 = this[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0x700000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:52: MARI"
                   "SA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
  }
  unint64_t v4 = this;
  uint64_t v5 = this[3];
  if (v2 == v5 << 6)
  {
    uint64_t v7 = 0;
    this = marisa::grimoire::vector::Vector<unsigned long long>::resize(this, v5 + 1, &v7);
    unint64_t v2 = v4[6];
  }
  if (a2)
  {
    *(void *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return this;
}

uint64_t marisa::grimoire::vector::BitVector::build(marisa::grimoire::vector::BitVector *this, int a2, int a3)
{
  memset(v8, 0, 41);
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  marisa::grimoire::vector::BitVector::build_index((marisa::grimoire::vector::BitVector *)v8, this, a2, a3);
  marisa::grimoire::vector::Vector<unsigned long long>::shrink(this);
  long long v4 = v8[0];
  v8[0] = *(_OWORD *)this;
  *(_OWORD *)this = v4;
  uint64_t v5 = *(void *)&v8[1];
  *(void *)&v8[1] = *((void *)this + 2);
  *((void *)this + 2) = v5;
  long long v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = v6;
  LOBYTE(vmarisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = v5;
  marisa::grimoire::vector::BitVector::swap(this, (marisa::grimoire::vector::BitVector *)v8);
  if ((void)v13) {
    MEMORY[0x2166855A0](v13, 0x1000C8077774924);
  }
  if ((void)v11) {
    MEMORY[0x2166855A0](v11, 0x1000C8077774924);
  }
  if ((void)v9) {
    MEMORY[0x2166855A0](v9, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x2166855A0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128C01D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::resize((uint64_t *)&v26, a2[3]);
    uint64_t v9 = a2[3];
    if (v9)
    {
      unsigned int v10 = (unsigned int *)(*((void *)&v26 + 1) + 8);
      long long v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        unsigned int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 + v13 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    marisa::grimoire::trie::Tail::build((long long *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    long long v26 = 0u;
    memset(v27, 0, sizeof(v27));
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::resize((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *((void *)&v26 + 1) + v15;
        uint64_t v18 = a2[1] + v15;
        uint64_t v19 = *(unsigned int *)(v18 + 8);
        *(void *)uint64_t v17 = *(void *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    uint64_t v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 2marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
    if (v20) {
      MEMORY[0x2166855A0](v20, 0x1000C8077774924);
    }
    uint64_t v21 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x263F8C180]);
    uint64_t v22 = v21;
    if (v21) {
      marisa::grimoire::trie::LoudsTrie::LoudsTrie(v21);
    }
    unint64_t v23 = (marisa::grimoire::trie::LoudsTrie **)(a1 + 1000);
    marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset(v23, v22);
    if (!*v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001C3;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:451: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
    }
    marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::ReverseKey>((uint64_t)*v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  uint64_t result = v26;
  if ((void)v26) {
    return MEMORY[0x2166855A0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C0400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x2166855C0](v9, MEMORY[0x263F8C180]);
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 59) {
      uint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::realloc(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 16 * v6;
    do
    {
      uint64_t v9 = (void *)(v3[1] + v8);
      *uint64_t v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

marisa::grimoire::trie::LoudsTrie **marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset(marisa::grimoire::trie::LoudsTrie **a1, marisa::grimoire::trie::LoudsTrie *a2)
{
  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
  }
  unint64_t v4 = *a1;
  *a1 = a2;
  return marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v4);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::ReverseKey>((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(void *)(a2 + 24)) {
    marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::ReverseKey>(a1, a2, v17, a4, a5);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    unsigned int v10 = (v9[268] + 1) | v9[271] | v9[272];
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(void *)(a1 + 840)) {
      int v11 = 0x2000;
    }
    else {
      int v11 = 4096;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    uint64_t v18 = 3;
    uint64_t v19 = 0x100000000200;
    int v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(void *)(a1 + 1072) = v18;
  *(void *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((void *)&v17[1] + 1))
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      do
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(unsigned char *)(*(void *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((void *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((void *)&v17[1] + 1));
  }
  marisa::grimoire::vector::FlatVector::build((long long *)(a1 + 672), (uint64_t)v17);
  marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  uint64_t result = *(void *)&v17[0];
  if (*(void *)&v17[0]) {
    return MEMORY[0x2166855A0](*(void *)&v17[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128C0718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a4 == a5)
  {
    memset(v19, 0, 41);
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::resize((uint64_t *)v19, *(void *)(a2 + 24));
    uint64_t v9 = *(void *)(a2 + 24);
    if (v9)
    {
      unsigned int v10 = (_DWORD *)(*((void *)&v19[0] + 1) + 8);
      int v11 = (_DWORD *)(*(void *)(a2 + 8) + 8);
      do
      {
        uint64_t v12 = *((void *)v11 - 1);
        int v13 = *v11;
        v11 += 6;
        *((void *)v10 - 1) = v12 - 1;
        *unsigned int v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    marisa::grimoire::trie::Tail::build((long long *)(a1 + 744), (uint64_t)v19, a3, *(_DWORD *)(a4 + 12));
    uint64_t result = *(void *)&v19[0];
    if (*(void *)&v19[0]) {
      return MEMORY[0x2166855A0](*(void *)&v19[0], 0x1000C8077774924);
    }
  }
  else
  {
    uint64_t v15 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x263F8C180]);
    unint64_t v16 = v15;
    if (v15) {
      marisa::grimoire::trie::LoudsTrie::LoudsTrie(v15);
    }
    uint64_t v17 = (marisa::grimoire::trie::LoudsTrie **)(a1 + 1000);
    marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset(v17, v16);
    if (!*v17)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001D4;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:468: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
    }
    return marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::ReverseKey>();
  }
  return result;
}

void sub_2128C08E4(_Unwind_Exception *a1)
{
  MEMORY[0x2166855C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      uint64_t v5 = 0x1555555555555555;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::realloc(result, a2);
  }
  unint64_t v6 = v3[3];
  unint64_t v7 = v2 - v6;
  if (v2 > v6)
  {
    uint64_t v8 = 12 * v6;
    do
    {
      uint64_t v9 = v3[1] + v8;
      *(void *)uint64_t v9 = 0;
      *(_DWORD *)(v9 + 8) = 0x800000;
      v8 += 12;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::fill_cache(uint64_t this)
{
  unint64_t v1 = *(void *)(this + 1032);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = (marisa::grimoire::vector::BitVector *)(this + 416);
    do
    {
      uint64_t v6 = *(void *)(v2 + 1016);
      unint64_t v7 = *(unsigned int *)(v6 + v3 + 4);
      if (v7)
      {
        *(unsigned char *)(v6 + v3 + 8) = *(unsigned char *)(*(void *)(v2 + 632) + v7);
        uint64_t v8 = *(void *)(v2 + 1016);
        if ((*(void *)(*(void *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7))
        {
          this = marisa::grimoire::vector::BitVector::rank1(v5, v7);
          uint64_t v9 = *(void *)(v2 + 720);
          unint64_t v10 = (unint64_t)(v9 * this) >> 6;
          uint64_t v11 = (v9 * this) & 0x3F;
          unint64_t v12 = v11 + v9;
          uint64_t v13 = *(void *)(v2 + 688);
          unint64_t v14 = *(void *)(v13 + 8 * v10);
          if (v12 > 0x40) {
            uint64_t v15 = ((2 * *(void *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          }
          else {
            uint64_t v15 = v14 >> v11;
          }
          int v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          int v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        unint64_t v1 = *(void *)(v2 + 1032);
      }
      else
      {
        *(void *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return this;
}

uint64_t marisa::grimoire::vector::BitVector::map(marisa::grimoire::vector::BitVector *this, marisa::grimoire::io::Mapper *a2)
{
  memset(v4, 0, 41);
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  marisa::grimoire::vector::BitVector::map_((marisa::grimoire::vector::BitVector *)v4, a2);
  marisa::grimoire::vector::BitVector::swap(this, (marisa::grimoire::vector::BitVector *)v4);
  if ((void)v9) {
    MEMORY[0x2166855A0](v9, 0x1000C8077774924);
  }
  if ((void)v7) {
    MEMORY[0x2166855A0](v7, 0x1000C8077774924);
  }
  if ((void)v5) {
    MEMORY[0x2166855A0](v5, 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v4[0];
  if (*(void *)&v4[0]) {
    return MEMORY[0x2166855A0](*(void *)&v4[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128C0B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t marisa::grimoire::vector::Vector<unsigned char>::map(long long *a1, marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C0C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::FlatVector::map(marisa::grimoire::vector::FlatVector *this, marisa::grimoire::io::Mapper *a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  marisa::grimoire::vector::FlatVector::map_((marisa::grimoire::vector::FlatVector *)v9, a2);
  long long v3 = *(_OWORD *)this;
  *(_OWORD *)this = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C0D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::map(long long *a1, marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C0E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *marisa::grimoire::trie::LoudsTrie::restore_(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2, unint64_t a3)
{
  uint64_t v6 = (uint64_t *)*((void *)a2 + 5);
  uint64_t v7 = (marisa::grimoire::trie::LoudsTrie *)((char *)this + 416);
  uint64_t v8 = (uint64_t *)((char *)this + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v9 = *((void *)this + 132) & a3;
      uint64_t v10 = *((void *)this + 128);
      if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4)) {
        break;
      }
      uint64_t v11 = v10 + 12 * v9;
      unint64_t v12 = *(unsigned int *)(v11 + 8);
      if (v12 <= 0xFFFFFEFF)
      {
        unint64_t v23 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
        if (v23) {
          uint64_t result = (uint64_t *)marisa::grimoire::trie::LoudsTrie::restore_(v23, a2, v12);
        }
        else {
          uint64_t result = marisa::grimoire::trie::Tail::restore(v8, a2, v12);
        }
      }
      else
      {
        char v27 = *(_DWORD *)(v11 + 8);
        uint64_t result = marisa::grimoire::vector::Vector<char>::push_back(v6, &v27);
      }
      a3 = *(unsigned int *)(*((void *)this + 128) + 12 * v9);
      if (!a3) {
        return result;
      }
    }
    if ((*(void *)(*((void *)this + 54) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
    {
      int v14 = *(unsigned __int8 *)(*((void *)this + 80) + a3);
      uint64_t v15 = marisa::grimoire::vector::BitVector::rank1(v7, a3);
      uint64_t v16 = *((void *)this + 90);
      unint64_t v17 = (unint64_t)(v16 * v15) >> 6;
      uint64_t v18 = (v16 * v15) & 0x3F;
      unint64_t v19 = v18 + v16;
      uint64_t v20 = *((void *)this + 86);
      unint64_t v21 = *(void *)(v20 + 8 * v17);
      uint64_t v22 = v19 > 0x40
          ? ((2 * *(void *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18)
          : v21 >> v18;
      unint64_t v24 = v14 | ((*((_DWORD *)this + 182) & v22) << 8);
      BOOL v25 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
      uint64_t result = v25
             ? (uint64_t *)marisa::grimoire::trie::LoudsTrie::restore_(v25, a2, v24)
             : marisa::grimoire::trie::Tail::restore(v8, a2, v24);
    }
    else
    {
      char v26 = *(unsigned char *)(*((void *)this + 80) + a3);
      uint64_t result = marisa::grimoire::vector::Vector<char>::push_back(v6, &v26);
    }
    if (a3 <= *((void *)this + 133)) {
      break;
    }
    a3 = marisa::grimoire::vector::BitVector::select1(this, a3) + ~a3;
  }
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::match_(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2, unint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v7 = (marisa::grimoire::trie::LoudsTrie *)((char *)this + 416);
  uint64_t v8 = (marisa::grimoire::trie::LoudsTrie *)((char *)this + 744);
  while (1)
  {
    while (1)
    {
      unint64_t v9 = *((void *)this + 132) & a3;
      uint64_t v10 = *((void *)this + 128);
      if (a3 == *(_DWORD *)(v10 + 12 * v9 + 4)) {
        break;
      }
      if ((*(void *)(*((void *)this + 54) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3))
      {
        uint64_t v13 = *((void *)this + 125);
        int v14 = *(unsigned __int8 *)(*((void *)this + 80) + a3);
        uint64_t v15 = marisa::grimoire::vector::BitVector::rank1(v7, a3);
        uint64_t v16 = *((void *)this + 90);
        unint64_t v17 = (unint64_t)(v16 * v15) >> 6;
        uint64_t v18 = (v16 * v15) & 0x3F;
        unint64_t v19 = v18 + v16;
        uint64_t v20 = *((void *)this + 86);
        unint64_t v21 = *(void *)(v20 + 8 * v17);
        if (v13)
        {
          unint64_t v22 = v21 >> v18;
          if (v19 > 0x40) {
            v22 |= (2 * *(void *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu);
          }
          unint64_t v23 = v14 | ((*((_DWORD *)this + 182) & v22) << 8);
          unint64_t v24 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
          if (v24)
          {
            if ((marisa::grimoire::trie::LoudsTrie::match_(v24, a2, v23) & 1) == 0) {
              return 0;
            }
            goto LABEL_27;
          }
        }
        else
        {
          if (v19 > 0x40) {
            uint64_t v27 = ((2 * *(void *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18);
          }
          else {
            uint64_t v27 = v21 >> v18;
          }
          unint64_t v23 = v14 | ((*((_DWORD *)this + 182) & v27) << 8);
        }
        if ((marisa::grimoire::trie::Tail::match(v8, a2, v23) & 1) == 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v26 = *(unsigned int *)(v6 + 100);
        if (*(unsigned __int8 *)(*((void *)this + 80) + a3) != *(unsigned __int8 *)(*(void *)a2 + v26)) {
          return 0;
        }
        *(_DWORD *)(v6 + 100) = v26 + 1;
      }
LABEL_27:
      if (a3 <= *((void *)this + 133)) {
        return 1;
      }
      if (*((void *)a2 + 1) <= (unint64_t)*(unsigned int *)(v6 + 100)) {
        return 0;
      }
      a3 = marisa::grimoire::vector::BitVector::select1(this, a3) + ~a3;
    }
    unint64_t v11 = *(unsigned int *)(v10 + 12 * v9 + 8);
    if (v11 <= 0xFFFFFEFF)
    {
      BOOL v25 = (marisa::grimoire::trie::LoudsTrie *)*((void *)this + 125);
      if (v25)
      {
        if ((marisa::grimoire::trie::LoudsTrie::match_(v25, a2, v11) & 1) == 0) {
          return 0;
        }
      }
      else if ((marisa::grimoire::trie::Tail::match(v8, a2, v11) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      uint64_t v12 = *(unsigned int *)(v6 + 100);
      if (*(unsigned __int8 *)(*(void *)a2 + v12) != v11) {
        return 0;
      }
      *(_DWORD *)(v6 + 100) = v12 + 1;
    }
    a3 = *(unsigned int *)(*((void *)this + 128) + 12 * v9);
    if (!a3) {
      return 1;
    }
    if (*((void *)a2 + 1) <= (unint64_t)*(unsigned int *)(v6 + 100)) {
      return 0;
    }
  }
}

uint64_t marisa::grimoire::trie::Config::parse_(marisa::grimoire::trie::Config *this, unsigned int a2)
{
  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x50000003BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:59: MARISA_CODE_ERROR:"
                   " (config_flags & ~MARISA_CONFIG_MASK) != 0";
  }
  if ((a2 & 0x7F) != 0) {
    *(void *)this = a2 & 0x7F;
  }
  marisa::grimoire::trie::Config::parse_cache_level((uint64_t)this, a2);
  marisa::grimoire::trie::Config::parse_tail_mode((uint64_t)this, a2);

  return marisa::grimoire::trie::Config::parse_node_order((uint64_t)this, a2);
}

uint64_t marisa::grimoire::trie::Config::parse_cache_level(uint64_t this, __int16 a2)
{
  unsigned int v2 = a2 & 0xF80;
  int v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512) {
      goto LABEL_11;
    }
    if (v2 != 1024)
    {
      int v3 = a2 & 0xF80;
      if (v2 != 2048) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
LABEL_10:
    int v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0) {
    goto LABEL_11;
  }
  if (v2 == 128) {
    goto LABEL_10;
  }
  int v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000065;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:101: MARISA_CODE_ERROR"
                   ": undefined cache level";
  }
LABEL_11:
  *(_DWORD *)(this + 8) = v3;
  return this;
}

uint64_t marisa::grimoire::trie::Config::parse_tail_mode(uint64_t this, __int16 a2)
{
  int v2 = 4096;
  int v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000079;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:121: MARISA_CODE_ERR"
                     "OR: undefined tail mode";
    }
    int v2 = 0x2000;
  }
  *(_DWORD *)(this + 12) = v2;
  return this;
}

uint64_t marisa::grimoire::trie::Config::parse_node_order(uint64_t this, int a2)
{
  int v2 = 0x20000;
  int v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008DLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:141: MARISA_CODE_ERR"
                     "OR: undefined node order";
    }
    int v2 = 0x10000;
  }
  *(_DWORD *)(this + 16) = v2;
  return this;
}

unsigned char *marisa::grimoire::vector::Vector<char>::realloc(uint64_t *a1, size_t __sz)
{
  uint64_t result = operator new[](__sz, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (char *)a1[1];
    uint64_t v7 = result;
    do
    {
      char v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = result;
  unint64_t v6 = result[4];
  if (v6 < a2)
  {
    uint64_t v7 = 2 * v6;
    if (v6 >> 60) {
      uint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v6 > a2 >> 1) {
      a2 = v7;
    }
    uint64_t result = marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    uint64_t v10 = (void *)(v5[1] + 8 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

void *marisa::grimoire::vector::Vector<unsigned long long>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](8 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

void *marisa::grimoire::vector::Vector<unsigned long long>::shrink(void *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
  }
  uint64_t v1 = result[3];
  if (v1 != result[4])
  {
    return marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, v1);
  }
  return result;
}

uint64_t marisa::grimoire::vector::BitVector::map_(marisa::grimoire::vector::BitVector *this, marisa::grimoire::io::Mapper *a2)
{
  marisa::grimoire::vector::Vector<unsigned long long>::map((long long *)this, a2);
  *((void *)this + 6) = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  unint64_t v4 = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (*((void *)this + 6) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0xA00000087;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:135: MAR"
                   "ISA_FORMAT_ERROR: temp_num_1s > size_";
  }
  *((void *)this + 7) = v4;
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map((long long *)this + 4, a2);
  marisa::grimoire::vector::Vector<unsigned int>::map((long long *)this + 7, a2);

  return marisa::grimoire::vector::Vector<unsigned int>::map((long long *)this + 10, a2);
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::map(long long *a1, marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned long long>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C18A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map(long long *a1, marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C1964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<unsigned int>::map(long long *a1, marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned int>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C1A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  marisa::grimoire::io::Mapper::map<unsigned long long>(this, (uint64_t *)(a1 + 16), v4 >> 3);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 3;

  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::io::Mapper::map<unsigned long long>(marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = marisa::grimoire::io::Mapper::map_data(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::fix(uint64_t result)
{
  if (*(unsigned char *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x10000006BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:107: MARISA_"
                   "STATE_ERROR: fixed_";
  }
  *(unsigned char *)(result + 40) = 1;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  unint64_t v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  marisa::grimoire::io::Mapper::map<marisa::grimoire::vector::RankIndex>(this, (uint64_t *)(a1 + 16), v5);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v5;

  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::io::Mapper::map<marisa::grimoire::vector::RankIndex>(marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = marisa::grimoire::io::Mapper::map_data(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<unsigned int>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  marisa::grimoire::io::Mapper::map<unsigned int>(this, (uint64_t *)(a1 + 16), v4 >> 2);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4 >> 2;

  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::io::Mapper::map<unsigned int>(marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  uint64_t result = marisa::grimoire::io::Mapper::map_data(a1, 4 * a3);
  *a2 = result;
  return result;
}

void *marisa::grimoire::vector::FlatVector::map_(marisa::grimoire::vector::FlatVector *this, marisa::grimoire::io::Mapper *a2)
{
  marisa::grimoire::vector::Vector<unsigned long long>::map((long long *)this, a2);
  uint64_t v4 = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h:134: MA"
                   "RISA_FORMAT_ERROR: temp_value_size > 32";
  }
  *((void *)this + 6) = v4;
  *((_DWORD *)this + 14) = *(_DWORD *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  uint64_t result = (void *)marisa::grimoire::io::Mapper::map_data(a2, 8uLL);
  *((void *)this + 8) = *result;
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 60) {
      uint64_t v5 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

void marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = a1[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL) {
      uint64_t v5 = 0x1555555555555555;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::realloc(a1, a2);
  }
  unint64_t v6 = a1[3];
  if (v2 > v6) {
    bzero((void *)(a1[1] + 12 * v6), 12 * (v2 - v6));
  }
  a1[3] = v2;
}

_DWORD *marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](12 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *v6;
      v7[2] = *((_DWORD *)v6 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 3;
      unint64_t v6 = (uint64_t *)((char *)v6 + 12);
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v3 = result;
  unint64_t v4 = result[4];
  if (v4 < a2)
  {
    uint64_t v5 = 2 * v4;
    if (v4 >> 61) {
      uint64_t v5 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v4 > a2 >> 1) {
      a2 = v5;
    }
    uint64_t result = (uint64_t *)marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

_DWORD *marisa::grimoire::vector::Vector<unsigned int>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](4 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (int *)a1[1];
    uint64_t v7 = result;
    do
    {
      int v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

uint64_t marisa::grimoire::vector::BitVector::write_(marisa::grimoire::vector::BitVector *this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  int __buf = *((void *)this + 6);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  int v5 = *((void *)this + 7);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v5, 4uLL);
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::write_((uint64_t)this + 64, a2);
  marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 112, a2);
  return marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 160, a2);
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = 8 * *(void *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<unsigned long long>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, 0);
}

uint64_t marisa::grimoire::io::Writer::write<unsigned long long>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 8 * a3;

  return marisa::grimoire::io::Writer::write_data(a1, a2, v3);
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = 12 * *(void *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t marisa::grimoire::io::Writer::write<marisa::grimoire::vector::RankIndex>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 12 * a3;

  return marisa::grimoire::io::Writer::write_data(a1, a2, v3);
}

uint64_t marisa::grimoire::vector::Vector<unsigned int>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = 4 * *(void *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<unsigned int>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t marisa::grimoire::io::Writer::write<unsigned int>(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_9;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    unint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_9:
    exception[3] = v6;
  }
  size_t v3 = 4 * a3;

  return marisa::grimoire::io::Writer::write_data(a1, a2, v3);
}

uint64_t marisa::grimoire::vector::FlatVector::write_(marisa::grimoire::vector::FlatVector *this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  LODWORD(__buf) = *((void *)this + 6);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *((_DWORD *)this + 14);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  uint64_t __buf = *((void *)this + 8);
  return marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 8uLL);
}

marisa::grimoire::trie::LoudsTrie **marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(marisa::grimoire::trie::LoudsTrie **a1)
{
  unint64_t v2 = *a1;
  if (v2)
  {
    marisa::grimoire::trie::LoudsTrie::~LoudsTrie(v2);
    MEMORY[0x2166855D0]();
  }
  return a1;
}

char *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](24 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    unint64_t v6 = (_DWORD *)(a1[1] + 16);
    uint64_t v7 = result + 16;
    do
    {
      *((void *)v7 - 2) = *((void *)v6 - 2);
      *(v7 - 2) = *(v6 - 2);
      *(v7 - 1) = *(v6 - 1);
      int v8 = *v6;
      v6 += 6;
      _DWORD *v7 = v8;
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::Key>(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (_DWORD *)(v10 + 16);
    do
    {
      *uint64_t v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  unint64_t v13 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v10, v10 + 24 * v9, 0);
  uint64_t v14 = 256;
  if (a5 != 1) {
    uint64_t v14 = 1;
  }
  do
  {
    unint64_t v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::resize(a1 + 126, v15);
  a1[132] = v15 - 1;
  marisa::grimoire::vector::BitVector::push_back(a1, 1);
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  uint64_t v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  marisa::grimoire::vector::Vector<char>::push_back(a1 + 78, v84);
  v77 = a1 + 52;
  marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  uint64_t v72 = a5;
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  uint64_t v17 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      uint64_t v18 = a1[58];
      unint64_t v19 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v18 = v23;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      uint64_t v76 = v17;
      uint64_t v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          uint64_t v25 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != v22) {
            break;
          }
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          uint64_t v20 = (v20 + 1);
          if (v21 == v20) {
            goto LABEL_49;
          }
        }
      }
      if (v20 != v21)
      {
        uint64_t v75 = v18;
        uint64_t v26 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v26) {
          MEMORY[0x2166855A0](v26, 0x1000C8077774924);
        }
        uint64_t v27 = *(void *)(a2 + 8);
        double v28 = *(float *)(v27 + 24 * v20 + 12);
        uint64_t v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          uint64_t v30 = 24 * v20;
          uint64_t v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(void *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&unsigned int v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              uint64_t v27 = *(void *)(a2 + 8);
              double v28 = 0.0;
              LODWORD(v20) = v29;
            }
            double v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&unsigned int v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        __n128 v34 = marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        uint64_t v16 = a1 + 78;
        uint64_t v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v36 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v37 = v81[1];
          if (v81[1] < 129)
          {
            v38 = 0;
            uint64_t v40 = 0;
          }
          else
          {
            v38 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<marisa::grimoire::trie::WeightedRange>(v81[1]);
            uint64_t v40 = v39;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38) {
            operator delete(v38);
          }
          uint64_t v35 = v75;
        }
        uint64_t v41 = v81[1];
        if (v35 == v76) {
          a1[133] = v81[1];
        }
        if (v41)
        {
          unint64_t v42 = 0;
          do
          {
            v43 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v42);
            v44 = (uint64_t *)v43;
            uint64_t v45 = v43[2];
            unsigned int v46 = *v43;
            uint64_t v47 = *(void *)(a2 + 8);
            unint64_t v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            unint64_t v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              unint64_t v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              unint64_t v50 = v48 - 1;
              unint64_t v51 = v43[2];
              do
              {
                unint64_t v52 = v51;
                unint64_t v51 = v49;
                v53 = (uint64_t *)(v47 + 24 * v46);
                uint64_t v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  uint64_t v55 = *v53;
                  uint64_t v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    unint64_t v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                unint64_t v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            float v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            float v59 = v58;
            uint64_t v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(void *)(v47 + 24 * v46) + v45)) & a1[132];
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = a1[81];
              v66 = (_DWORD *)(v61 + 12 * v60);
              _DWORD *v66 = v24;
              v66[1] = v65;
              float *v63 = v59;
              uint64_t v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(unsigned char *)(*(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v77, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            std::deque<marisa::grimoire::trie::Range>::push_back(v82, v44);
            marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      marisa::grimoire::vector::BitVector::push_back(a1, 0);
      uint64_t v17 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)a1, v72 == 1, 1);
  marisa::grimoire::vector::Vector<unsigned char>::shrink(v16);
  marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::Key>((uint64_t)a1, a2, a3);
  long long v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  uint64_t v69 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v69;
  long long v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((void)v80) {
    MEMORY[0x2166855A0](v80, 0x1000C8077774924);
  }
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x2166855A0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128C2F80(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  va_start(va, a18);
  if (a13) {
    MEMORY[0x2166855A0](a13, 0x1000C8077774924);
  }
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100]((uint64_t *)va);
  uint64_t v21 = *(void *)(v18 - 144);
  if (v21) {
    MEMORY[0x2166855A0](v21, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::vector::FlatVector::build(long long *a1, uint64_t a2)
{
  memset(v9, 0, 41);
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  marisa::grimoire::vector::FlatVector::build_((uint64_t)v9, a2);
  long long v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v9[1];
  *(void *)&v9[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  uint64_t v6 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v10;
  uint64_t v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  int v11 = v6;
  uint64_t v7 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v12;
  uint64_t result = v3;
  uint64_t v12 = v7;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C3174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

__n128 marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back(uint64_t *a1, __n128 *a2)
{
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 >> 59) {
      uint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::realloc(a1, v8);
    uint64_t v4 = a1[3];
  }
  __n128 result = *a2;
  *(__n128 *)(a1[1] + 16 * v4) = *a2;
  ++a1[3];
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::push_back(uint64_t *result, uint64_t a2)
{
  long long v3 = result;
  uint64_t v4 = result[3];
  unint64_t v5 = result[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 > 0x555555555555555) {
      uint64_t v7 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    __n128 result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::realloc(result, v8);
    uint64_t v4 = v3[3];
  }
  uint64_t v9 = v3[1] + 24 * v4;
  *(void *)uint64_t v9 = *(void *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + 16);
  ++v3[3];
  return result;
}

unsigned char *marisa::grimoire::vector::Vector<unsigned char>::shrink(unsigned char *result)
{
  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
  }
  size_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return marisa::grimoire::vector::Vector<char>::realloc((uint64_t *)result, v1);
  }
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    uint64_t v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x2166855A0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    uint64_t v7 = 0;
    goto LABEL_69;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Key>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 + a3);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        uint64_t v17 = *(void *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(void *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 24;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 + a3);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 24);
          v13 -= 24;
          uint64_t v22 = *(void *)v11;
          *(void *)unint64_t v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v23 = *(void *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(void *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      int v25 = *(_DWORD *)(v10 + 16);
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v26 = *(void *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v24;
      *(void *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    uint64_t v44 = v7;
    if (v12 > v5)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = v12 + v27;
        uint64_t v29 = v10 + v27;
        uint64_t v30 = *(void *)(v12 + v27 - 24);
        int v31 = *(_DWORD *)(v12 + v27 - 8);
        *(void *)(v28 - 24) = *(void *)(v10 + v27 - 24);
        uint64_t v32 = *(void *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(void *)(v29 - 24) = v30;
        *(void *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      uint64_t v33 = *(void *)v13;
      int v34 = *(_DWORD *)(v13 + 16);
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v35 = *(void *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v33;
      *(void *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    uint64_t v36 = v10 - v5;
    int64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    uint64_t v38 = v11 - v10;
    int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      uint64_t v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          uint64_t v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25) {
            goto LABEL_53;
          }
          uint64_t v41 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v5, v10, a3) + v44;
        }
        uint64_t v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          uint64_t v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          uint64_t v7 = v44;
        }
        else
        {
          uint64_t v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_64:
        unint64_t v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24) {
      goto LABEL_32;
    }
    if (v38 < 25)
    {
      uint64_t v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      uint64_t v7 = v44 + 1;
    }
    else
    {
      uint64_t v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v10, v11, a3 + 1) + v44;
    }
    uint64_t v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_65:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25) {
    v7 += marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Key *>(v5, v4, a3);
  }
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(*(void *)a1 + a4);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(*(void *)a2 + a4);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(*(void *)a3 + a4);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1 + 24;
  if (a1 + 24 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = v3;
    if (v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        unint64_t v9 = v8 - 24;
        int v10 = marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Key>(v8 - 24, v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(void *)(v8 - 24);
        int v12 = *(_DWORD *)(v8 - 8);
        *(void *)(v8 - 24) = *(void *)v8;
        uint64_t v13 = *(void *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(void *)uint64_t v8 = v11;
        uint64_t v14 = *(void *)(v8 - 16);
        *(void *)(v8 - 16) = v13;
        *(void *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a1 + a3);
    uint64_t v8 = (unsigned __int8 *)(*(void *)a2 + a3);
    while (v6)
    {
      int v9 = *v7;
      int v10 = *v8;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      ++v7;
      ++v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

void std::deque<marisa::grimoire::trie::Range>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<marisa::grimoire::trie::Range>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

void std::deque<marisa::grimoire::trie::Range>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      std::__split_buffer<marisa::grimoire::trie::Range *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    std::__split_buffer<marisa::grimoire::trie::Range *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  std::__split_buffer<marisa::grimoire::trie::Range *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<marisa::grimoire::trie::Range *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2128C3E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<marisa::grimoire::trie::Range *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(a1[4], v16);
      unint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<marisa::grimoire::trie::Range *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  size_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

_OWORD *marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = operator new[](16 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (long long *)a1[1];
    unint64_t v7 = result;
    do
    {
      long long v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<marisa::grimoire::trie::WeightedRange>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  unint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v13 = a4 >> 1;
      uint64_t v14 = &a1[a4 >> 1];
      unint64_t v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*>(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>((long long *)a1, (long long *)&a1[a4 >> 1], (long long *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        float v5 = *(float *)(v4 + 28);
        float v6 = *(float *)(v4 + 12);
        uint64_t v4 = v2;
        if (v5 > v6)
        {
          uint64_t v10 = *(void *)v2;
          int v11 = *(_DWORD *)(v2 + 8);
          uint64_t v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7) {
              break;
            }
            float v8 = *(float *)(result + v7 - 4);
            v7 -= 16;
            if (v5 <= v8)
            {
              uint64_t v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(void *)uint64_t v9 = v10;
          *(_DWORD *)(v9 + 8) = v11;
          *(float *)(v9 + 12) = v5;
        }
        uint64_t v2 = v4 + 16;
        v3 += 16;
      }
      while (v4 + 16 != a2);
    }
  }
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (a3->n128_f32[3] <= a1->n128_f32[3])
    {
      __n128 v7 = *a1++;
      uint64_t result = v7;
    }
    else
    {
      __n128 v6 = *a3++;
      uint64_t result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  if (a6)
  {
    uint64_t v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = &a1[v12];
        if (result.n128_f32[0] > *((float *)&a1[v12] + 3)) {
          break;
        }
        ++v12;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      uint64_t v39 = a3;
      uint64_t v40 = a8;
      if (-v13 >= v10)
      {
        if (v13 == -1)
        {
          __n128 v43 = (__n128)a1[v12];
          a1[v12] = *a2;
          uint64_t result = v43;
          *a2 = (__int128)v43;
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v26 = v16 >> 1;
        uint64_t v20 = &a1[(v16 >> 1) + v12];
        uint64_t v19 = a3;
        if (a3 != a2)
        {
          unint64_t v27 = a3 - a2;
          uint64_t v19 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v19[v27 >> 1];
            float v30 = *((float *)v29 + 3);
            long long v31 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v30 > *((float *)v20 + 3)) {
              uint64_t v19 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v18 = v19 - a2;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v17 = v10;
        }
        else {
          uint64_t v17 = v10 + 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = &a2[v17 >> 1];
        uint64_t v20 = a2;
        if (v14 != a2)
        {
          unint64_t v21 = ((char *)a2 - (char *)a1 - v12 * 16) >> 4;
          uint64_t v20 = &a1[v12];
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = &v20[v21 >> 1];
            float v24 = *((float *)v23 + 3);
            unint64_t v25 = v23 + 1;
            v21 += ~(v21 >> 1);
            if (*((float *)v19 + 3) > v24) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v25;
            }
          }
          while (v21);
        }
        uint64_t v26 = ((char *)v20 - (char *)a1 - v12 * 16) >> 4;
      }
      a5 = -(v26 + v13);
      uint64_t v32 = v10 - v18;
      uint64_t v33 = v18;
      int v34 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *,marisa::grimoire::trie::WeightedRange *>((char *)v20, (char *)a2, (char *)v19);
      uint64_t v35 = v33;
      uint64_t v36 = (long long *)v34;
      if (v26 + v35 >= v10 - (v26 + v35) - v13)
      {
        uint64_t v38 = v35;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v34, v19, v39, a4, a5, v32, a7, v40);
        uint64_t v19 = v20;
        uint64_t v32 = v38;
        a5 = v26;
        a8 = v40;
        a3 = v36;
      }
      else
      {
        uint64_t v37 = v26;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v14, v20, v34, a4, v37, v35, a7, v40);
        uint64_t v14 = v36;
        a3 = v39;
      }
      uint64_t v10 = v32;
      a1 = v14;
      a2 = v19;
      if (!v32) {
        return result;
      }
    }
    std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, a2, a3, a4, a5, v10, a7);
  }
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3)
{
  if (a1 != a2)
  {
    __n128 result = *a1;
    *a3 = *a1;
    uint64_t v4 = a1 + 1;
    if (&a1[1] != a2)
    {
      uint64_t v5 = 0;
      __n128 v6 = a3;
      do
      {
        __n128 v7 = a1;
        __n128 v8 = v6;
        a1 = v4;
        uint64_t v9 = ++v6;
        if (v7[1].n128_f32[3] > v8->n128_f32[3])
        {
          *__n128 v6 = *v8;
          uint64_t v9 = a3;
          if (v8 != a3)
          {
            uint64_t v10 = v5;
            while (1)
            {
              uint64_t v9 = (__n128 *)((char *)a3 + v10);
              if (v7[1].n128_f32[3] <= *(float *)((char *)&a3->n128_f32[-1] + v10)) {
                break;
              }
              *uint64_t v9 = v9[-1];
              v10 -= 16;
              if (!v10)
              {
                uint64_t v9 = a3;
                break;
              }
            }
          }
        }
        __n128 result = *a1;
        *uint64_t v9 = *a1;
        uint64_t v4 = a1 + 1;
        v5 += 16;
      }
      while (&a1[1] != a2);
    }
  }
  return result;
}

long long *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(long long *result, long long *a2, long long *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result != a2)
    {
      unint64_t v13 = 0;
      do
      {
        *(_OWORD *)&__src[v13] = result[v13 / 0x10];
        v13 += 16;
      }
      while (&result[v13 / 0x10] != a2);
      if (v13)
      {
        uint64_t v14 = (float *)__src;
        while (a2 != a3)
        {
          if (*((float *)a2 + 3) <= v14[3])
          {
            long long v17 = *(_OWORD *)v14;
            v14 += 4;
            long long v16 = v17;
          }
          else
          {
            long long v15 = *a2++;
            long long v16 = v15;
          }
          *result++ = v16;
          if (&__src[v13] == (char *)v14) {
            return result;
          }
        }
        return (long long *)memmove(result, v14, __src - (char *)v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(_OWORD *)&__src[v7 * 16] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      __n128 v8 = (float *)&__src[v7 * 16];
      uint64_t v9 = a3 - 1;
      while (a2 != result)
      {
        float v10 = *(v8 - 1);
        float v11 = *((float *)a2 - 1);
        if (v10 <= v11) {
          uint64_t v12 = (char *)(v8 - 4);
        }
        else {
          uint64_t v12 = (char *)(a2 - 1);
        }
        if (v10 <= v11) {
          v8 -= 4;
        }
        else {
          --a2;
        }
        *v9-- = *(_OWORD *)v12;
        if (v8 == (float *)__src) {
          return result;
        }
      }
      unint64_t v18 = 0;
      do
      {
        v9[v18 / 4] = *(_OWORD *)&v8[v18 - 4];
        v18 -= 4;
      }
      while (&v8[v18] != (float *)__src);
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *,marisa::grimoire::trie::WeightedRange *>(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      long long v9 = *(_OWORD *)__src;
      int64_t v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v6];
      *(_OWORD *)uint64_t v4 = v9;
    }
    else if (a2 + 16 == a3)
    {
      uint64_t v4 = __src + 16;
      long long v10 = *((_OWORD *)a3 - 1);
      size_t v7 = a3 - 16 - __src;
      if (a3 - 16 != __src) {
        memmove(__src + 16, __src, v7);
      }
      *(_OWORD *)__src = v10;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *>(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *>(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = 0;
      do
      {
        long long v5 = a1[v4];
        a1[v4] = a2[v4];
        uint64_t v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        uint64_t v7 = (uint64_t)&a2[++v4];
      }
      while ((_OWORD *)v6 != a2 && v7 != (void)a3);
    }
  }
  else
  {
    uint64_t v9 = a3 - a2;
    uint64_t v10 = a2 - a1;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = v9;
      uint64_t v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      uint64_t v12 = &a1[v10];
      do
      {
        long long v13 = *--v12;
        uint64_t v14 = &v12[v3];
        long long v15 = v12;
        do
        {
          long long v16 = v15;
          long long v15 = v14;
          _OWORD *v16 = *v14;
          BOOL v17 = __OFSUB__(v3, a3 - v14);
          uint64_t v19 = v3 - (a3 - v14);
          char v18 = (v19 < 0) ^ v17;
          uint64_t v14 = &a1[v19];
          if (v18) {
            uint64_t v14 = &v15[v3];
          }
        }
        while (v14 != v12);
        _OWORD *v15 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<marisa::grimoire::trie::Range *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<marisa::grimoire::trie::Range *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t marisa::grimoire::vector::FlatVector::build_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    goto LABEL_10;
  }
  unsigned int v5 = 0;
  uint64_t v6 = *(unsigned int **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  do
  {
    unsigned int v9 = *v6++;
    unsigned int v8 = v9;
    if (v9 > v5) {
      unsigned int v5 = v8;
    }
    --v7;
  }
  while (v7);
  if (v5)
  {
    uint64_t v10 = 0;
    do
    {
      ++v10;
      BOOL v11 = v5 > 1;
      v5 >>= 1;
    }
    while (v11);
  }
  else
  {
LABEL_10:
    uint64_t v10 = 0;
  }
  BOOL v12 = v4 != 0;
  unint64_t v13 = (unint64_t)(v10 * v4 + 63) >> 6;
  if (v10) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v12;
  }
  uint64_t result = (uint64_t)marisa::grimoire::vector::Vector<unsigned long long>::resize((uint64_t *)a1, v14);
  if (v14) {
    *(void *)(*(void *)(a1 + 8) + 8 * *(void *)(a1 + 24) - 8) = 0;
  }
  *(void *)(a1 + 48) = v10;
  if (v10) {
    *(_DWORD *)(a1 + 56) = 0xFFFFFFFF >> -(char)v10;
  }
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(a1 + 64) = v16;
  if (v16)
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t result = marisa::grimoire::vector::FlatVector::set(a1, v17, *(_DWORD *)(*(void *)(a2 + 16) + 4 * v17));
      ++v17;
    }
    while (v17 < *(void *)(a2 + 24));
  }
  return result;
}

uint64_t marisa::grimoire::vector::FlatVector::set(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(this + 48);
  unint64_t v4 = (unint64_t)(v3 * a2) >> 6;
  uint64_t v5 = (v3 * a2) & 0x3F;
  unint64_t v6 = *(unsigned int *)(this + 56);
  uint64_t v7 = *(void *)(this + 8);
  unint64_t v8 = v6 & a3;
  *(void *)(v7 + 8 * v4) = *(void *)(v7 + 8 * v4) & ~(v6 << (v3 * a2)) | (v8 << (v3 * a2));
  if ((unint64_t)(v5 + v3) >= 0x41) {
    *(void *)(v7 + 8 * v4 + 8) = *(void *)(v7 + 8 * v4 + 8) & ~(v6 >> -(char)v5) | (v8 >> -(char)v5);
  }
  return this;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unsigned int *)result;
LABEL_2:
  BOOL v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v23 = *(a2 - 2);
          unsigned int v24 = *v11;
          if (v23 < *v11 || v24 >= v23 && *(a2 - 1) < v11[1])
          {
            *BOOL v11 = v23;
            *(a2 - 2) = v24;
            unsigned int v25 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v25;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      uint64_t v18 = *(void *)v11;
      *(void *)BOOL v11 = *(void *)v17;
      *(void *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    unsigned int v19 = *(v11 - 2);
    if (v19 >= *v11 && (*v11 < v19 || *(v11 - 1) >= v11[1]))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v11, a2);
      BOOL v11 = (unsigned int *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, v20);
    BOOL v11 = v20 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v20 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(v10, v20, a3, -v13, a5 & 1);
      BOOL v11 = v20 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v11, a2);
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v4;
        unint64_t v4 = v2;
        unsigned int v6 = v5[2];
        unsigned int v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          unsigned int v9 = v5[2];
          unsigned int v8 = v5[3];
          unsigned int v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          BOOL v11 = result;
          if (v5 != result)
          {
            uint64_t v12 = v3;
            do
            {
              unsigned int v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  BOOL v11 = v5;
                  goto LABEL_17;
                }
                BOOL v11 = (unsigned int *)((char *)result + v12);
                unsigned int v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8) {
                  goto LABEL_17;
                }
              }
              else
              {
                unsigned int v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              unint64_t v15 = (unsigned int *)((char *)result + v12);
              unsigned int *v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            BOOL v11 = result;
          }
LABEL_17:
          *BOOL v11 = v9;
          v11[1] = v8;
        }
        uint64_t v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = result + 1;
      do
      {
        unint64_t v4 = result;
        uint64_t result = v2;
        unsigned int v5 = v4[2];
        unsigned int v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          unsigned int v7 = *result;
          unsigned int v8 = result[1];
          for (uint64_t i = v3; ; i -= 2)
          {
            unsigned int v10 = *i;
            i[1] = v6;
            i[2] = v10;
            unsigned int v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8)) {
              break;
            }
          }
          *(i - 1) = v7;
          *uint64_t i = v8;
        }
        uint64_t v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unsigned int v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    BOOL v11 = (int *)(a2 + 1);
    unsigned int v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    unsigned int v12 = *a2;
    unsigned int v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    unsigned int v6 = (int *)(a1 + 1);
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    unsigned int v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      unsigned int v6 = (int *)(a1 + 1);
      *a3 = v4;
      unsigned int v7 = (int *)(a3 + 1);
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      unsigned int v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      unsigned int v15 = *a3;
      unsigned int v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      unsigned int v7 = (int *)(a3 + 1);
      uint64_t v8 = 2;
      unsigned int v6 = (int *)(a2 + 1);
    }
    BOOL v11 = v7;
  }
  int v17 = *v6;
  *unsigned int v6 = *v11;
  *BOOL v11 = v17;
  return v8;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a1;
  unsigned int v2 = a1[1];
  unsigned int v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (uint64_t i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unsigned int v7 = i[2];
      i += 2;
      unsigned int v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      unsigned int v8 = *(a2 - 2);
      unsigned int v4 = v8;
    }
  }
  if (i < a2)
  {
    unsigned int v9 = *i;
    unsigned int v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      unsigned int v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        unsigned int v12 = i[2];
        i += 2;
        unsigned int v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          unsigned int v13 = *(a2 - 2);
          a2 -= 2;
          unsigned int v10 = v13;
          BOOL v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  unsigned int v4 = a1[1];
  while (1)
  {
    unsigned int v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      unsigned int v8 = *(a2 - 2);
      a2 -= 2;
      unsigned int v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unsigned int v10 = *(a2 - 2);
        a2 -= 2;
        unsigned int v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v9 > v3) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unsigned int v13 = (unsigned int *)v6;
  }
  else
  {
    unsigned int v12 = *a2;
    unsigned int v13 = (unsigned int *)v6;
    BOOL v14 = a2;
    do
    {
      *unsigned int v13 = v12;
      unsigned int *v14 = v5;
      unsigned int v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          unsigned int v16 = v13[2];
          v13 += 2;
          unsigned int v5 = v16;
          BOOL v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        unsigned int v18 = *(v14 - 2);
        v14 -= 2;
        unsigned int v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 2);
      unsigned int v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unsigned int v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unsigned int v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      unsigned int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unsigned int v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1])) {
      goto LABEL_22;
    }
    unsigned int v14 = *v10;
    unsigned int v15 = v10[1];
    *unsigned int v10 = v13;
    v10[1] = v9[1];
    unsigned int v16 = a1;
    if (v9 == a1) {
      goto LABEL_21;
    }
    uint64_t v17 = v11;
    while (1)
    {
      unsigned int v18 = (char *)a1 + v17;
      unsigned int v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14) {
        break;
      }
      unsigned int v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        unsigned int v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      unsigned int v16 = v9;
      goto LABEL_21;
    }
    unsigned int v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15) {
      goto LABEL_18;
    }
    unsigned int v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    unsigned int *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_22:
    unsigned int v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  unsigned int v9 = *a4;
  unsigned int v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unsigned int v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unsigned int v12 = *a3;
    unsigned int v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unsigned int v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unsigned int v15 = *a2;
      unsigned int v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unsigned int v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unsigned int v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unsigned int v14 = *a4;
    unsigned int v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unsigned int v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unsigned int v17 = *a3;
      unsigned int v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unsigned int v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unsigned int v20 = *a2;
        unsigned int v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unsigned int v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = a2;
    if (a2 != a3)
    {
      unsigned int v14 = a2;
      do
      {
        unsigned int v15 = *v14;
        unsigned int v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          unsigned int *v14 = v16;
          *a1 = v15;
          unsigned int v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v18 = (unint64_t)v8 >> 3;
      unsigned int v19 = a2 - 2;
      do
      {
        unsigned int v21 = *a1;
        unsigned int v20 = a1[1];
        unsigned int v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          unsigned int *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          unsigned int *v22 = *v19;
          v22[1] = v19[1];
          *unsigned int v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unsigned int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unsigned int v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unsigned int v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        unsigned int v12 = *a4;
        unsigned int v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unsigned int v14 = (unsigned int *)(result + 8 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unsigned int v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            unsigned int v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13) {
              break;
            }
            unsigned int *v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_22;
            }
          }
        }
        unsigned int v14 = v8;
LABEL_22:
        unsigned int *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unsigned int v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    *uint64_t v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    unsigned int v7 = *v6;
    unsigned int v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      unsigned int v9 = *(_DWORD *)(a2 - 8);
      unsigned int v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v12 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          unsigned int v11 = (unsigned int *)(result + 8 * v5);
          unsigned int v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9) {
              break;
            }
            unsigned int v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10) {
              break;
            }
          }
          else
          {
            unsigned int v14 = v11[1];
          }
          *uint64_t v6 = v13;
          v6[1] = v14;
          uint64_t v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1) {
            goto LABEL_12;
          }
        }
      }
      unsigned int v11 = v6;
LABEL_12:
      *unsigned int v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

char *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](16 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1[1] + 8);
    unsigned int v7 = result + 8;
    do
    {
      *(v7 - 1) = *(v6 - 1);
      uint64_t v8 = *v6;
      v6 += 2;
      void *v7 = v8;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::ReverseKey>(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    unsigned int v11 = (_DWORD *)(v9 + 16);
    do
    {
      *unsigned int v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  unint64_t v12 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v9, v9 + 24 * v8, 0);
  uint64_t v13 = 256;
  if (a5 != 1) {
    uint64_t v13 = 1;
  }
  do
  {
    unint64_t v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::resize(a1 + 126, v14);
  a1[132] = v14 - 1;
  marisa::grimoire::vector::BitVector::push_back(a1, 1);
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  uint64_t v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  marisa::grimoire::vector::Vector<char>::push_back(a1 + 78, v84);
  marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  memset(v84, 0, 41);
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  long long v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(void *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  uint64_t v16 = *((void *)&v83 + 1);
  if (*((void *)&v83 + 1))
  {
    uint64_t v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      uint64_t v17 = a1[58];
      unsigned int v18 = (unsigned int *)(*(void *)(*((void *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      *(void *)&long long v83 = v83 + 1;
      *((void *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        uint64_t v22 = v17;
        uint64_t v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        uint64_t v16 = v23;
        uint64_t v17 = v22;
        *((void *)&v82[0] + 1) += 8;
        *(void *)&long long v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          uint64_t v24 = *(void *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != v21) {
            break;
          }
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          uint64_t v19 = (v19 + 1);
          if (v20 == v19) {
            goto LABEL_49;
          }
        }
      }
      if (v19 != v20)
      {
        uint64_t v76 = v16;
        int v77 = v17 - v16;
        uint64_t v25 = v80;
        long long v80 = 0u;
        memset(v81, 0, 25);
        if (v25) {
          MEMORY[0x2166855A0](v25, 0x1000C8077774924);
        }
        uint64_t v75 = v17;
        uint64_t v26 = *(void *)(a2 + 8);
        double v27 = *(float *)(v26 + 24 * v19 + 12);
        uint64_t v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          uint64_t v29 = 24 * v19;
          uint64_t v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(void *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(void *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&unsigned int v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              uint64_t v26 = *(void *)(a2 + 8);
              double v27 = 0.0;
              LODWORD(v19) = v28;
            }
            double v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&unsigned int v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        __n128 v33 = marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        uint64_t v15 = a1 + 78;
        uint64_t v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          uint64_t v35 = (__n128 *)*((void *)&v80 + 1);
          unint64_t v36 = v81[1];
          if (v81[1] < 129)
          {
            uint64_t v37 = 0;
            uint64_t v39 = 0;
          }
          else
          {
            uint64_t v37 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<marisa::grimoire::trie::WeightedRange>(v81[1]);
            uint64_t v39 = v38;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37) {
            operator delete(v37);
          }
          uint64_t v34 = v76;
        }
        uint64_t v40 = v81[1];
        if (v75 == v34) {
          a1[133] = v81[1];
        }
        if (v40)
        {
          unint64_t v41 = 0;
          do
          {
            uint64_t v42 = (unsigned int *)(*((void *)&v80 + 1) + 16 * v41);
            __n128 v43 = (uint64_t *)v42;
            uint64_t v44 = v42[2];
            uint64_t v45 = *(void *)(a2 + 8);
            unint64_t v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            unint64_t v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              unint64_t v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              unint64_t v48 = v46 - 1;
              uint64_t v49 = (uint64_t *)(v45 + 24 * *v42);
              unint64_t v50 = v42[2];
              do
              {
                unint64_t v51 = v50;
                unint64_t v50 = v47;
                uint64_t v52 = v49;
                uint64_t v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  uint64_t v54 = *v52;
                  uint64_t v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    unint64_t v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            uint64_t v56 = a1[81];
            float v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            float v59 = v58;
            uint64_t v60 = a1[132] & v56;
            uint64_t v61 = a1[127];
            uint64_t v62 = v61 + 12 * v60;
            float v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              uint64_t v65 = (_DWORD *)(v61 + 12 * v60);
              *uint64_t v65 = v77;
              v65[1] = v56;
              float *v63 = v59;
              uint64_t v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(unsigned char *)(~v48 + *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43));
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v72, 1);
              __n128 v78 = 0uLL;
              int v79 = 0;
              uint64_t v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(void *)(*(void *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            std::deque<marisa::grimoire::trie::Range>::push_back(v82, v43);
            marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      marisa::grimoire::vector::BitVector::push_back(a1, 0);
      uint64_t v16 = *((void *)&v83 + 1);
    }
    while (*((void *)&v83 + 1));
  }
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)a1, a5 == 1, 1);
  marisa::grimoire::vector::Vector<unsigned char>::shrink(v15);
  marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::ReverseKey>((uint64_t)a1, a2, a3);
  long long v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  uint64_t v68 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)&v84[1];
  *(void *)&v84[1] = v68;
  long long v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((void)v80) {
    MEMORY[0x2166855A0](v80, 0x1000C8077774924);
  }
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  uint64_t result = *(void *)&v84[0];
  if (*(void *)&v84[0]) {
    return MEMORY[0x2166855A0](*(void *)&v84[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128C6950(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a21) {
    MEMORY[0x2166855A0](a21, 0x1000C8077774924);
  }
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](&a27);
  uint64_t v30 = *(void *)(v27 - 144);
  if (v30) {
    MEMORY[0x2166855A0](v30, 0x1000C8077774924);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, long long *a3)
{
  memset(v13, 0, 41);
  marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
    unsigned int v7 = (unsigned int *)(*(void *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = *((void *)&v13[0] + 1);
  }
  long long v8 = *a3;
  uint64_t v9 = *(void *)&v13[1];
  *(void *)a3 = *(void *)&v13[0];
  *((void *)a3 + 1) = v6;
  v13[0] = v8;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 2) = v9;
  *(void *)&v13[1] = v10;
  long long v11 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v13[2]);
  uint64_t result = v8;
  BYTE8(v13[2]) = v10;
  if ((void)v8) {
    return MEMORY[0x2166855A0](v8, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C6B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    uint64_t v7 = 0;
    goto LABEL_69;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::ReverseKey>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 - a3 - 1);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        uint64_t v17 = *(void *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(void *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 24;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 - a3 - 1);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 24);
          v13 -= 24;
          uint64_t v22 = *(void *)v11;
          *(void *)unint64_t v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          uint64_t v23 = *(void *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(void *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      int v25 = *(_DWORD *)(v10 + 16);
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v26 = *(void *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v24;
      *(void *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    uint64_t v44 = v7;
    if (v12 > v5)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = v12 + v27;
        uint64_t v29 = v10 + v27;
        uint64_t v30 = *(void *)(v12 + v27 - 24);
        int v31 = *(_DWORD *)(v12 + v27 - 8);
        *(void *)(v28 - 24) = *(void *)(v10 + v27 - 24);
        uint64_t v32 = *(void *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(void *)(v29 - 24) = v30;
        *(void *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      uint64_t v33 = *(void *)v13;
      int v34 = *(_DWORD *)(v13 + 16);
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v35 = *(void *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(void *)unint64_t v11 = v33;
      *(void *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    uint64_t v36 = v10 - v5;
    int64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    uint64_t v38 = v11 - v10;
    int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      uint64_t v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          uint64_t v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25) {
            goto LABEL_53;
          }
          uint64_t v41 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v5, v10, a3) + v44;
        }
        uint64_t v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          uint64_t v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          uint64_t v7 = v44;
        }
        else
        {
          uint64_t v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_64:
        unint64_t v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24) {
      goto LABEL_32;
    }
    if (v38 < 25)
    {
      uint64_t v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      uint64_t v7 = v44 + 1;
    }
    else
    {
      uint64_t v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v10, v11, a3 + 1) + v44;
    }
    uint64_t v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_65:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25) {
    v7 += marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::ReverseKey *>(v5, v4, a3);
  }
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(~a4 + *(void *)a1);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(~a4 + *(void *)a2);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(~a4 + *(void *)a3);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1 + 24;
  if (a1 + 24 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    uint64_t v8 = v3;
    if (v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        unint64_t v9 = v8 - 24;
        int v10 = marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::ReverseKey>(v8 - 24, v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(void *)(v8 - 24);
        int v12 = *(_DWORD *)(v8 - 8);
        *(void *)(v8 - 24) = *(void *)v8;
        uint64_t v13 = *(void *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(void *)uint64_t v8 = v11;
        uint64_t v14 = *(void *)(v8 - 16);
        *(void *)(v8 - 16) = v13;
        *(void *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a2 + ~a3);
    uint64_t v8 = (unsigned __int8 *)(*(void *)a1 + ~a3);
    while (v6)
    {
      int v9 = *v8;
      int v10 = *v7;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      --v7;
      --v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

char *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::realloc(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new[](12 * a2, MEMORY[0x263F8C180]);
  uint64_t v5 = a1[3];
  if (v5)
  {
    uint64_t v6 = (_DWORD *)(a1[1] + 8);
    uint64_t v7 = result + 8;
    do
    {
      *((void *)v7 - 1) = *((void *)v6 - 1);
      int v8 = *v6;
      v6 += 3;
      _DWORD *v7 = v8;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  uint64_t v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
  {
    JUMPOUT(0x2166855A0);
  }
  return result;
}

uint64_t marisa::grimoire::vector::Vector<unsigned char>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4 = *(void *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  *(void *)(a1 + 16) = marisa::grimoire::io::Mapper::map_data(this, v4);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(void *)(a1 + 24) = v4;

  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::vector::Vector<unsigned char>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = *(void *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<unsigned char>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t marisa::grimoire::io::Writer::write<unsigned char>(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_"
                   "ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return marisa::grimoire::io::Writer::write_data(a1, a2, a3);
}

double marisa::grimoire::trie::Tail::Tail(marisa::grimoire::trie::Tail *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 2marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 18marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  return result;
}

uint64_t marisa::grimoire::trie::Tail::build(long long *a1, uint64_t a2, long long *a3, int a4)
{
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x20000000DLL;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:13: MARISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000) {
    goto LABEL_15;
  }
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000024;
    uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:36: MARISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = 0;
    a4 = 4096;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8) + 16 * v6;
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8) {
        break;
      }
LABEL_11:
      if (++v6 == v5) {
        goto LABEL_15;
      }
    }
    uint64_t v9 = -v8;
    uint64_t v10 = *(void *)v7 + 1;
    while (*(unsigned char *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1)) {
        goto LABEL_11;
      }
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  _OWORD v19[3] = 0u;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  marisa::grimoire::trie::Tail::build_((uint64_t)v18, a2, a3, a4);
  long long v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v18[1];
  *(void *)&v18[1] = v13;
  long long v14 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::vector::BitVector *)(a1 + 3), (marisa::grimoire::vector::BitVector *)v19);
  if ((void)v24) {
    MEMORY[0x2166855A0](v24, 0x1000C8077774924);
  }
  if ((void)v22) {
    MEMORY[0x2166855A0](v22, 0x1000C8077774924);
  }
  if ((void)v20) {
    MEMORY[0x2166855A0](v20, 0x1000C8077774924);
  }
  if (*(void *)&v19[0]) {
    MEMORY[0x2166855A0](*(void *)&v19[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v18[0];
  if (*(void *)&v18[0]) {
    return MEMORY[0x2166855A0](*(void *)&v18[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128C7650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t marisa::grimoire::trie::Tail::build_(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (_DWORD *)(v9 + 12);
    do
    {
      *uint64_t v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  unint64_t v12 = *(void *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v13 = *(void *)(a2 + 24);
  if (v13)
  {
    long long v14 = v33;
    do
    {
      --v13;
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = v15 + 16 * v13;
      unint64_t v18 = (unsigned int *)(v16 + 8);
      uint64_t v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        void *exception = &unk_26C3C3A00;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000AALL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:170: MARISA_RANGE_E"
                       "RROR: current.length() == 0";
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(void *)v16 + v19)) {
          goto LABEL_13;
        }
        ++v20;
        --v19;
        if (v17 == v20) {
          goto LABEL_14;
        }
      }
      uint64_t v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        uint64_t v22 = *((void *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v22 = *((void *)&v34[0] + 1);
      if (v21)
      {
        *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((void *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(void *)(a1 + 24);
      unint64_t v23 = *v18;
      if (v23)
      {
        for (unint64_t i = 0; i < v23; ++i)
        {
          char v32 = *(unsigned char *)(*(void *)v16 - v23 + i + 1);
          marisa::grimoire::vector::Vector<char>::push_back((uint64_t *)a1, &v32);
          unint64_t v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            unint64_t v25 = 1;
            do
            {
              marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      char v32 = 0;
      marisa::grimoire::vector::Vector<char>::push_back((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        int v31 = __cxa_allocate_exception(0x20uLL);
        *int v31 = &unk_26C3C3A00;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C0;
        _OWORD v31[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:192: MARISA_SIZE_ERROR: b"
                 "uf_.size() > MARISA_UINT32_MAX";
      }
LABEL_29:
      long long v14 = (void *)v16;
    }
    while (v13);
  }
  marisa::grimoire::vector::Vector<unsigned char>::shrink((unsigned char *)a1);
  long long v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  uint64_t v27 = *((void *)a3 + 2);
  *((void *)a3 + 2) = *(void *)&v34[1];
  *(void *)&v34[1] = v27;
  long long v28 = *(long long *)((char *)a3 + 24);
  *(long long *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((unsigned char *)a3 + 40);
  *((unsigned char *)a3 + 40) = BYTE8(v34[2]);
  uint64_t result = v26;
  BYTE8(v34[2]) = v27;
  if ((void)v26) {
    return MEMORY[0x2166855A0](v26, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C7990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x2166855A0](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *marisa::grimoire::trie::Tail::swap(marisa::grimoire::trie::Tail *this, marisa::grimoire::trie::Tail *a2)
{
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);

  return marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::Tail *)((char *)this + 48), (marisa::grimoire::trie::Tail *)((char *)a2 + 48));
}

uint64_t marisa::grimoire::trie::Tail::map(marisa::grimoire::trie::Tail *this, marisa::grimoire::io::Mapper *a2)
{
  memset(v8, 0, 41);
  memset(v9, 0, 41);
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  _OWORD v9[3] = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  marisa::grimoire::vector::Vector<char>::map(v8, a2);
  marisa::grimoire::vector::BitVector::map((marisa::grimoire::vector::BitVector *)v9, a2);
  long long v4 = *(_OWORD *)this;
  *(_OWORD *)this = v8[0];
  v8[0] = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *(void *)&v8[1];
  *(void *)&v8[1] = v5;
  long long v6 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(long long *)((char *)&v8[1] + 8);
  *(long long *)((char *)&v8[1] + 8) = v6;
  LOBYTE(vmarisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::Tail *)((char *)this + 48), (marisa::grimoire::vector::BitVector *)v9);
  if ((void)v14) {
    MEMORY[0x2166855A0](v14, 0x1000C8077774924);
  }
  if ((void)v12) {
    MEMORY[0x2166855A0](v12, 0x1000C8077774924);
  }
  if ((void)v10) {
    MEMORY[0x2166855A0](v10, 0x1000C8077774924);
  }
  if (*(void *)&v9[0]) {
    MEMORY[0x2166855A0](*(void *)&v9[0], 0x1000C8077774924);
  }
  uint64_t result = *(void *)&v8[0];
  if (*(void *)&v8[0]) {
    return MEMORY[0x2166855A0](*(void *)&v8[0], 0x1000C8077774924);
  }
  return result;
}

void sub_2128C7B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t marisa::grimoire::trie::Tail::write(marisa::grimoire::trie::Tail *this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::vector::Vector<char>::write_((uint64_t)this, a2);

  return marisa::grimoire::vector::BitVector::write_((marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

uint64_t *marisa::grimoire::trie::Tail::restore(uint64_t *this, marisa::Agent *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  long long v4 = this;
  uint64_t v5 = (uint64_t *)*((void *)a2 + 5);
  if (this[12])
  {
    do
    {
      this = marisa::grimoire::vector::Vector<char>::push_back(v5, (unsigned char *)(v4[2] + v3));
      uint64_t v6 = *(void *)(v4[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    uint64_t v7 = (unsigned char *)(this[2] + a3);
    if (*v7)
    {
      do
        this = marisa::grimoire::vector::Vector<char>::push_back(v5, v7);
      while (*++v7);
    }
  }
  return this;
}

uint64_t marisa::grimoire::trie::Tail::match(marisa::grimoire::trie::Tail *this, marisa::Agent *a2, unint64_t a3)
{
  uint64_t v3 = *((void *)a2 + 5);
  uint64_t v4 = *((void *)this + 2);
  if (*((void *)this + 12))
  {
    unsigned int v5 = *(_DWORD *)(v3 + 100);
    uint64_t v6 = *(void *)a2;
    unint64_t v7 = *((void *)a2 + 1);
    do
    {
      if (*(unsigned __int8 *)(v4 + a3) != *(unsigned __int8 *)(v6 + v5)) {
        break;
      }
      *(_DWORD *)(v3 + 100) = ++v5;
      if ((*(void *)(*((void *)this + 8) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3)) {
        return 1;
      }
      ++a3;
    }
    while (v7 > v5);
  }
  else
  {
    unint64_t v12 = v4 + a3;
    uint64_t v8 = v4 + a3 - *(unsigned int *)(v3 + 100);
    uint64_t v9 = *(void *)a2;
    unint64_t v10 = *((void *)a2 + 1);
    int v11 = *(unsigned __int8 *)v12;
    LODWORD(v12) = *(_DWORD *)(v3 + 100);
    while (v11 == *(unsigned __int8 *)(v9 + v12))
    {
      unint64_t v12 = (v12 + 1);
      *(_DWORD *)(v3 + 100) = v12;
      int v11 = *(unsigned __int8 *)(v8 + v12);
      if (!*(unsigned char *)(v8 + v12)) {
        return 1;
      }
      if (v10 <= v12) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4 = a2;
  unsigned int v5 = result;
  unint64_t v6 = result[4];
  if (v6 < a2)
  {
    uint64_t v7 = 2 * v6;
    if (v6 >> 61) {
      uint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v6 > a2 >> 1) {
      a2 = v7;
    }
    uint64_t result = (uint64_t *)marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  unint64_t v8 = v5[3];
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    unint64_t v10 = (_DWORD *)(v5[1] + 4 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<char>::map(long long *a1, marisa::grimoire::io::Mapper *a2)
{
  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  long long v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = *(void *)&v7[1];
  *(void *)&v7[1] = v4;
  long long v5 = *(long long *)((char *)a1 + 24);
  *(long long *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((unsigned char *)a1 + 40);
  *((unsigned char *)a1 + 40) = BYTE8(v7[2]);
  uint64_t result = v3;
  BYTE8(v7[2]) = v4;
  if ((void)v3) {
    return MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C7E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    MEMORY[0x2166855A0](a9, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = a1;
  uint64_t v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 161)
  {
    uint64_t v7 = 0;
    goto LABEL_68;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Entry>(v5, v5 + 16 * ((unint64_t)v6 >> 5), v4 - 16, a3);
    int v9 = v8;
    unint64_t v10 = v5;
    unint64_t v11 = v4;
    unint64_t v12 = v5;
    unint64_t v13 = v4;
    while (v10 < v11)
    {
      unint64_t v14 = *(unsigned int *)(v10 + 8);
      int v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(void *)v10 - a3);
      if (v15 > v8) {
        break;
      }
      if (v15 == v8)
      {
        uint64_t v16 = *(void *)v10;
        int v17 = *(_DWORD *)(v10 + 12);
        *(void *)unint64_t v10 = *(void *)v12;
        *(void *)(v10 + 8) = *(void *)(v12 + 8);
        *(void *)unint64_t v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_DWORD *)(v12 + 12) = v17;
        v12 += 16;
      }
LABEL_11:
      v10 += 16;
    }
    if (v10 < v11)
    {
      unint64_t v18 = v11 - 16;
      do
      {
        unint64_t v11 = v18;
        unint64_t v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19) {
          int v20 = -1;
        }
        else {
          int v20 = *(unsigned __int8 *)(*(void *)v11 - a3);
        }
        if (v20 < v8) {
          break;
        }
        if (v20 == v8)
        {
          uint64_t v21 = *(void *)(v13 - 16);
          v13 -= 16;
          uint64_t v22 = *(void *)v11;
          int v23 = *(_DWORD *)(v11 + 12);
          *(void *)unint64_t v11 = v21;
          *(void *)(v11 + 8) = *(void *)(v13 + 8);
          *(void *)unint64_t v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_DWORD *)(v13 + 12) = v23;
        }
        unint64_t v18 = v11 - 16;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      uint64_t v24 = *(void *)v10;
      *(void *)unint64_t v10 = *(void *)v11;
      uint64_t v25 = *(void *)(v11 + 8);
      *(void *)unint64_t v11 = v24;
      uint64_t v26 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = v25;
      *(void *)(v11 + 8) = v26;
      goto LABEL_11;
    }
    uint64_t v42 = v7;
    while (v12 > v5)
    {
      uint64_t v28 = *(void *)(v12 - 16);
      v12 -= 16;
      uint64_t v27 = v28;
      uint64_t v29 = *(void *)(v10 - 16);
      v10 -= 16;
      *(void *)unint64_t v12 = v29;
      uint64_t v30 = *(void *)(v10 + 8);
      *(void *)unint64_t v10 = v27;
      uint64_t v31 = *(void *)(v12 + 8);
      *(void *)(v12 + 8) = v30;
      *(void *)(v10 + 8) = v31;
    }
    while (v13 < v4)
    {
      uint64_t v32 = *(void *)v13;
      *(void *)unint64_t v13 = *(void *)v11;
      uint64_t v33 = *(void *)(v11 + 8);
      *(void *)unint64_t v11 = v32;
      uint64_t v34 = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = v33;
      *(void *)(v11 + 8) = v34;
      v11 += 16;
      v13 += 16;
    }
    uint64_t v35 = v10 - v5;
    uint64_t v36 = (uint64_t)(v10 - v5) >> 4;
    uint64_t v37 = v11 - v10;
    if (v36 <= (uint64_t)(v11 - v10) >> 4)
    {
      uint64_t v38 = v4 - v11;
      if (v37 >> 4 >= (uint64_t)(v4 - v11) >> 4)
      {
        if (v35 == 16)
        {
          uint64_t v39 = v42 + 1;
        }
        else
        {
          if (v35 < 17) {
            goto LABEL_52;
          }
          uint64_t v39 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v5, v10, a3) + v42;
        }
        uint64_t v42 = v39;
LABEL_52:
        if (v38 == 16)
        {
          uint64_t v7 = v42 + 1;
        }
        else if (v38 < 17)
        {
          uint64_t v7 = v42;
        }
        else
        {
          uint64_t v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v11, v4, a3) + v42;
        }
        if (v37 == 16)
        {
          ++v7;
        }
        else if (v37 >= 17)
        {
          if (v9 == -1)
          {
            ++v7;
            unint64_t v5 = v11;
            goto LABEL_63;
          }
          ++a3;
        }
        unint64_t v5 = v10;
LABEL_63:
        unint64_t v4 = v11;
        goto LABEL_64;
      }
    }
    if (v37 == 16) {
      goto LABEL_31;
    }
    if (v37 < 17)
    {
      uint64_t v7 = v42;
    }
    else if (v8 == -1)
    {
LABEL_31:
      uint64_t v7 = v42 + 1;
    }
    else
    {
      uint64_t v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v10, v11, a3 + 1) + v42;
    }
    uint64_t v40 = v4 - v11;
    if (v36 >= (uint64_t)(v4 - v11) >> 4)
    {
      if (v40 == 16)
      {
        ++v7;
      }
      else if (v40 >= 17)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v11, v4, a3);
      }
      unint64_t v4 = v10;
    }
    else
    {
      if (v35 == 16)
      {
        ++v7;
      }
      else if (v35 >= 17)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v5, v10, a3);
      }
      unint64_t v5 = v11;
    }
LABEL_64:
    uint64_t v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 160);
LABEL_68:
  if (v6 >= 17) {
    v7 += marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Entry *>(v5, v4, a3);
  }
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(unsigned int *)(a1 + 8) <= a4) {
    int v4 = -1;
  }
  else {
    int v4 = *(unsigned __int8 *)(*(void *)a1 - a4);
  }
  if (*(unsigned int *)(a2 + 8) <= a4) {
    int v5 = -1;
  }
  else {
    int v5 = *(unsigned __int8 *)(*(void *)a2 - a4);
  }
  if (*(unsigned int *)(a3 + 8) <= a4) {
    int v6 = -1;
  }
  else {
    int v6 = *(unsigned __int8 *)(*(void *)a3 - a4);
  }
  if (v4 <= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v4;
  }
  if (v4 >= v5) {
    int v4 = v5;
  }
  if (v4 <= v6) {
    int v4 = v6;
  }
  if (v7 >= v6) {
    return v4;
  }
  else {
    return v7;
  }
}

uint64_t marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  long long v3 = (void *)(a1 + 16);
  if (a1 + 16 >= a2) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    int v8 = v3;
    if ((unint64_t)v3 <= a1)
    {
      int v10 = 0;
    }
    else
    {
      while (1)
      {
        int v9 = v8 - 2;
        int v10 = marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Entry>((uint64_t)(v8 - 2), (uint64_t)v8, a3);
        if (v10 < 1) {
          break;
        }
        uint64_t v11 = *(v8 - 2);
        *(v8 - 2) = *v8;
        uint64_t v12 = v8[1];
        void *v8 = v11;
        uint64_t v13 = *(v8 - 1);
        *(v8 - 1) = v12;
        v8[1] = v13;
        v8 -= 2;
        if ((unint64_t)v9 <= a1)
        {
          int v10 = 1;
          break;
        }
      }
    }
    if (v10) {
      ++v7;
    }
    v3 += 2;
  }
  while ((unint64_t)v3 < a2);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unint64_t v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4) {
      unsigned int v12 = -1;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v3 == v4) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else
  {
    uint64_t v6 = v4 - a3;
    uint64_t v7 = (unsigned __int8 *)(*(void *)a2 - a3);
    int v8 = (unsigned __int8 *)(*(void *)a1 - a3);
    while (v6)
    {
      int v9 = *v8;
      int v10 = *v7;
      uint64_t result = (v9 - v10);
      if (v9 != v10) {
        return result;
      }
      --v6;
      --v7;
      --v8;
      if (!--v5) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

uint64_t marisa::grimoire::vector::Vector<char>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf = *(void *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<char>((uint64_t)this, *(char **)(a1 + 16), *(void *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t marisa::grimoire::io::Writer::write<char>(uint64_t a1, char *a2, size_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h:30: MA"
                   "RISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return marisa::grimoire::io::Writer::write_data(a1, a2, a3);
}

uint64_t marisa::grimoire::vector::BitVector::rank1(marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  unint64_t v2 = a2 >> 9;
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      unint64_t v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      unint64_t v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      unint64_t v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  unint64_t v7 = *(void *)(*((void *)this + 2) + 8 * (a2 >> 6)) & ~(-1 << a2);
  unint64_t v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t marisa::grimoire::vector::BitVector::select0(marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 16);
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = *((void *)this + 10);
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3;
    unint64_t v8 = v3-- << 9;
    int v9 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  uint64_t v11 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v12 = v11[1];
  uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)(a2 - (v3 << 9) + *v11);
  uint64_t v14 = 8 * v3;
  if ((unint64_t)v13 >= 256 - (v12 >> 23))
  {
    unint64_t v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    uint64_t v16 = (v15 >> 9) & 0x1FF;
    if ((unint64_t)v13 >= 384 - v16)
    {
      uint64_t v18 = (v15 >> 18) & 0x1FF;
      if ((unint64_t)v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v18 - 448);
      }
      else
      {
        v14 |= 6uLL;
        uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v16 - 384);
      }
    }
    else if ((unint64_t)v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v15 & 0x1FF) - 320);
    }
    else
    {
      v14 |= 4uLL;
      uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 23) - 256);
    }
  }
  else if ((unint64_t)v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    uint64_t v17 = (v12 >> 15);
    if ((unint64_t)v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v17 - 192);
    }
    else
    {
      v14 |= 2uLL;
      uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 7) - 128);
    }
  }
  else if ((unint64_t)v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    uint64_t v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 & 0x7F) - 64);
  }
}

unint64_t marisa::grimoire::vector::anonymous namespace'::select_bit(marisa::grimoire::vector::_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  uint64_t v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  unint64_t v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * (void)this
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
                                                                     * ((void)this
                                                                      - ((unint64_t)(0x101010101010100 * v4) >> v5))
                                                                     + (a3 >> v5)];
}

unint64_t marisa::grimoire::vector::BitVector::select1(marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 22);
  if ((a2 & 0x1FF) == 0) {
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  }
  unint64_t v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  unint64_t v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  uint64_t v5 = *((void *)this + 10);
  if (v3 + 10 >= v4)
  {
    uint64_t v7 = v5 + 12 * v3--;
    unint64_t v8 = (unsigned int *)(v7 + 12);
    do
    {
      unsigned int v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2) {
        unint64_t v4 = (v4 + v3) >> 1;
      }
      else {
        unint64_t v3 = (v4 + v3) >> 1;
      }
    }
    while (v3 + 1 < v4);
  }
  unsigned int v10 = (unsigned int *)(v5 + 12 * v3);
  unint64_t v11 = v10[1];
  unint64_t v12 = a2 - *v10;
  uint64_t v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    unint64_t v23 = v11 >> 23;
    unint64_t v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    unint64_t v25 = (v24 >> 9) & 0x1FF;
    unint64_t v26 = (v24 >> 18) & 0x1FF;
    uint64_t v27 = v13 | 7;
    BOOL v28 = v12 >= v26;
    if (v12 < v26) {
      uint64_t v29 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v25);
    }
    else {
      uint64_t v29 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v26);
    }
    if (!v28) {
      uint64_t v27 = v13 | 6;
    }
    unint64_t v30 = v24 & 0x1FF;
    uint64_t v31 = v13 | 5;
    uint64_t v32 = v13 | 4;
    uint64_t v33 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v23);
    BOOL v34 = v12 >= v30;
    if (v12 < v30) {
      uint64_t v21 = v33;
    }
    else {
      uint64_t v21 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v30);
    }
    if (v34) {
      uint64_t v32 = v31;
    }
    if (v12 < v25)
    {
      uint64_t v22 = v32;
    }
    else
    {
      uint64_t v21 = v29;
      uint64_t v22 = v27;
    }
  }
  else
  {
    unint64_t v14 = v11 >> 7;
    unint64_t v15 = (v11 >> 15);
    uint64_t v16 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - (v11 >> 7));
    if (v12 < v15)
    {
      uint64_t v17 = v13 | 2;
    }
    else
    {
      uint64_t v16 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v15);
      uint64_t v17 = v13 | 3;
    }
    unint64_t v18 = v11 & 0x7F;
    BOOL v20 = v12 >= v18;
    unint64_t v19 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v18);
    if (v20) {
      v13 |= 1uLL;
    }
    else {
      unint64_t v19 = (marisa::grimoire::vector::_anonymous_namespace_ *)v12;
    }
    BOOL v20 = v12 >= v14;
    if (v12 < v14) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v16;
    }
    if (v20) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v13;
    }
  }
}

void marisa::grimoire::vector::BitVector::build_index(marisa::grimoire::vector::BitVector *this, const marisa::grimoire::vector::BitVector *a2, int a3, int a4)
{
  unint64_t v8 = (uint64_t *)((char *)this + 64);
  unint64_t v9 = *((void *)a2 + 6);
  if ((v9 & 0x1FF) != 0) {
    uint64_t v10 = (v9 >> 9) + 1;
  }
  else {
    uint64_t v10 = v9 >> 9;
  }
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::resize(v8, v10 + 1);
  unint64_t v11 = *((void *)a2 + 6);
  if (v11)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    __int16 v14 = 0;
    do
    {
      if ((v12 & 0x3F) == 0)
      {
        unint64_t v15 = v12 >> 9;
        switch((v12 >> 6) & 7)
        {
          case 1uLL:
            uint64_t v16 = (_DWORD *)(*((void *)this + 9) + 12 * v15);
            unsigned int v17 = v16[1] & 0xFFFFFF80 | (v13 - *v16) & 0x7F;
            goto LABEL_13;
          case 2uLL:
            uint64_t v16 = (_DWORD *)(*((void *)this + 9) + 12 * v15);
            unsigned int v17 = v16[1] & 0xFFFF807F | ((v13 - *(unsigned char *)v16) << 7);
            goto LABEL_13;
          case 3uLL:
            uint64_t v16 = (_DWORD *)(*((void *)this + 9) + 12 * v15);
            unsigned int v17 = v16[1] & 0xFF807FFF | ((v13 - *(unsigned char *)v16) << 15);
            goto LABEL_13;
          case 4uLL:
            uint64_t v16 = (_DWORD *)(*((void *)this + 9) + 12 * v15);
            unsigned int v17 = v16[1] & 0x7FFFFF | ((unsigned __int16)(v13 - *(_WORD *)v16) << 23);
LABEL_13:
            v16[1] = v17;
            break;
          case 5uLL:
            unint64_t v18 = (_DWORD *)(*((void *)this + 9) + 12 * v15);
            unsigned int v19 = v18[2] & 0xFFFFFE00 | (v13 - *v18) & 0x1FF;
            goto LABEL_17;
          case 6uLL:
            unint64_t v18 = (_DWORD *)(*((void *)this + 9) + 12 * v15);
            unsigned int v19 = v18[2] & 0xFFFC01FF | (((v13 - *v18) & 0x1FF) << 9);
            goto LABEL_17;
          case 7uLL:
            unint64_t v18 = (_DWORD *)(*((void *)this + 9) + 12 * v15);
            unsigned int v19 = v18[2] & 0xF803FFFF | (((v13 - *v18) & 0x1FF) << 18);
LABEL_17:
            v18[2] = v19;
            break;
          default:
            *(_DWORD *)(*((void *)this + 9) + 12 * v1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v13;
            break;
        }
      }
      if ((*(void *)(*((void *)a2 + 2) + 8 * (v12 >> 6)) >> (v12 & 0x3F)))
      {
        if (a4 && (v13 & 0x1FF) == 0)
        {
          int v36 = v12;
          marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)this + 20, &v36);
        }
        ++v13;
      }
      else
      {
        if (a3 && (v14 & 0x1FF) == 0)
        {
          int v36 = v12;
          marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)this + 14, &v36);
        }
        ++v14;
      }
      ++v12;
      unint64_t v11 = *((void *)a2 + 6);
    }
    while (v12 < v11);
    if ((v11 & 0x1FF) != 0)
    {
      unint64_t v20 = (v11 - 1) >> 9;
      switch(((unint64_t)(v11 - 1) >> 6) & 7)
      {
        case 0uLL:
          uint64_t v21 = *((void *)this + 9);
          uint64_t v22 = (_DWORD *)(v21 + 12 * v20);
          int v23 = v13 - *v22;
          unsigned int v24 = v22[1] & 0xFFFFFF80 | v23 & 0x7F;
          v22[1] = v24;
          goto LABEL_33;
        case 1uLL:
          uint64_t v21 = *((void *)this + 9);
          unint64_t v25 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v24 = v25[1];
          int v23 = v13 - *v25;
LABEL_33:
          unsigned int v26 = v24 & 0xFFFF807F | (v23 << 7);
          *(_DWORD *)(v21 + 12 * v20 + 4) = v26;
          goto LABEL_35;
        case 2uLL:
          uint64_t v21 = *((void *)this + 9);
          uint64_t v27 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v26 = v27[1];
          int v23 = v13 - *v27;
LABEL_35:
          unsigned int v28 = v26 & 0xFF807FFF | (v23 << 15);
          *(_DWORD *)(v21 + 12 * v20 + 4) = v28;
          goto LABEL_37;
        case 3uLL:
          uint64_t v21 = *((void *)this + 9);
          uint64_t v29 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v28 = v29[1];
          int v23 = v13 - *v29;
LABEL_37:
          *(_DWORD *)(v21 + 12 * v20 + 4) = v28 & 0x7FFFFF | ((unsigned __int16)v23 << 23);
          goto LABEL_39;
        case 4uLL:
          uint64_t v21 = *((void *)this + 9);
          int v23 = v13 - *(_DWORD *)(v21 + 12 * v20);
LABEL_39:
          uint64_t v30 = v21 + 12 * v20;
          unsigned int v31 = *(_DWORD *)(v30 + 8) & 0xFFFFFE00 | v23 & 0x1FF;
          *(_DWORD *)(v30 + 8) = v31;
          goto LABEL_40;
        case 5uLL:
          uint64_t v21 = *((void *)this + 9);
          BOOL v34 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v31 = v34[2];
          int v23 = v13 - *v34;
LABEL_40:
          unsigned int v32 = v31 & 0xFFFC01FF | ((v23 & 0x1FF) << 9);
          *(_DWORD *)(v21 + 12 * v20 + 8) = v32;
          goto LABEL_41;
        case 6uLL:
          uint64_t v21 = *((void *)this + 9);
          uint64_t v35 = (_DWORD *)(v21 + 12 * v20);
          unsigned int v32 = v35[2];
          int v23 = v13 - *v35;
LABEL_41:
          *(_DWORD *)(v21 + 12 * v20 + 8) = v32 & 0xF803FFFF | ((v23 & 0x1FF) << 18);
          break;
        default:
          break;
      }
    }
  }
  else
  {
    int v13 = 0;
  }
  *((void *)this + 6) = v11;
  *((void *)this + 7) = *((void *)a2 + 7);
  *(_DWORD *)(*((void *)this + 9) + 12 * *((void *)this + 11) - 12) = v13;
  if (a3)
  {
    int v36 = *((void *)a2 + 6);
    marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)this + 14, &v36);
    marisa::grimoire::vector::Vector<unsigned int>::shrink((_DWORD *)this + 28);
  }
  if (a4)
  {
    uint64_t v33 = (uint64_t *)((char *)this + 160);
    int v36 = *((void *)a2 + 6);
    marisa::grimoire::vector::Vector<unsigned int>::push_back(v33, &v36);
    marisa::grimoire::vector::Vector<unsigned int>::shrink(v33);
  }
}

uint64_t *marisa::grimoire::vector::Vector<unsigned int>::push_back(uint64_t *result, _DWORD *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[3];
  unint64_t v5 = result[4];
  unint64_t v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    uint64_t v7 = 2 * v5;
    if (v5 >> 61) {
      uint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v5 <= v6 >> 1) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t result = (uint64_t *)marisa::grimoire::vector::Vector<unsigned int>::realloc(result, v8);
    uint64_t v4 = v3[3];
    unint64_t v6 = v4 + 1;
  }
  *(_DWORD *)(v3[1] + 4 * v4) = *a2;
  v3[3] = v6;
  return result;
}

_DWORD *marisa::grimoire::vector::Vector<unsigned int>::shrink(_DWORD *result)
{
  if (*((unsigned char *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h:100: MARISA_STATE_ERROR: fixed_";
  }
  uint64_t v1 = *((void *)result + 3);
  if (v1 != *((void *)result + 4))
  {
    return marisa::grimoire::vector::Vector<unsigned int>::realloc((uint64_t *)result, v1);
  }
  return result;
}

double marisa::Keyset::Keyset(marisa::Keyset *this)
{
  *((void *)this + 12) = 0;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

size_t marisa::Keyset::reserve(size_t *this, size_t __sz)
{
  if (this[7] == this[11] >> 8) {
    marisa::Keyset::append_key_block((marisa::Keyset *)this);
  }
  if (__sz < 0x401)
  {
    size_t v5 = this[10];
    if (v5 < __sz)
    {
      marisa::Keyset::append_base_block((uint64_t *)this);
      size_t v5 = this[10];
    }
    size_t result = this[9];
    this[9] = result + __sz;
    this[10] = v5 - __sz;
  }
  else
  {
    marisa::Keyset::append_extra_block((marisa::Keyset *)this, __sz);
    return *(void *)(this[3] + 8 * this[4] - 8);
  }
  return result;
}

uint64_t marisa::Keyset::append_key_block(marisa::Keyset *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2 == *((void *)this + 8))
  {
    if (v2) {
      unint64_t v3 = 2 * v2;
    }
    else {
      unint64_t v3 = 1;
    }
    BOOL v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0) {
      BOOL v4 = 1;
    }
    if (v4) {
      size_t v5 = -1;
    }
    else {
      size_t v5 = 8 * v3 + 16;
    }
    unint64_t v6 = operator new[](v5, MEMORY[0x263F8C180]);
    if (!v6)
    {
      uint64_t v20 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x8000000A9;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:169: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
    }
    *unint64_t v6 = 8;
    v6[1] = v3;
    uint64_t v7 = (uint64_t)(v6 + 2);
    if (v3) {
      bzero(v6 + 2, 8 * v3);
    }
    uint64_t v20 = v7;
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v9 = *((void *)this + 6);
        uint64_t v10 = v20;
        uint64_t v11 = *(void *)(v9 + 8 * i);
        *(void *)(v9 + 8 * i) = *(void *)(v20 + 8 * i);
        *(void *)(v10 + 8 * i) = v11;
      }
      uint64_t v7 = v20;
    }
    uint64_t v12 = *((void *)this + 6);
    *((void *)this + 6) = v7;
    uint64_t v20 = v12;
    *((void *)this + 8) = v3;
    marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array(&v20);
  }
  int v13 = operator new[](0x1000uLL, MEMORY[0x263F8C180]);
  if (!v13)
  {
    unint64_t v18 = __cxa_allocate_exception(0x20uLL);
    *unint64_t v18 = &unk_26C3C3A00;
    v18[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v18[2] = 0x8000000B1;
    _OWORD v18[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:177: MARISA_MEMORY_ERROR: new_block.get() == NULL";
  }
  __int16 v14 = v13;
  bzero(v13, 0x1000uLL);
  uint64_t v16 = *((void *)this + 6);
  uint64_t v15 = *((void *)this + 7);
  *((void *)this + 7) = v15 + 1;
  uint64_t result = *(void *)(v16 + 8 * v15);
  *(void *)(v16 + 8 * v1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v14;
  if (result) {
    return MEMORY[0x2166855A0](result, 0x1050C80717B85FCLL);
  }
  return result;
}

void sub_2128C913C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t marisa::Keyset::push_back(size_t *this, const char *a2, size_t __sz, float a4)
{
  unint64_t v6 = a2;
  if (!a2 && __sz)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x20000003DLL;
    uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:61: MARISA_NULL_ERROR: (ptr == NULL) && (length != 0)";
    goto LABEL_10;
  }
  if (HIDWORD(__sz))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x70000003ELL;
    uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:62: MARISA_SIZE_ERROR: length > MARISA_UINT32_MAX";
LABEL_10:
    exception[3] = v15;
  }
  size_t result = marisa::Keyset::reserve(this, __sz);
  if (__sz)
  {
    uint64_t v9 = (unsigned char *)result;
    size_t v10 = __sz;
    do
    {
      char v11 = *v6++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  uint64_t v12 = *(void *)(this[6] + ((this[11] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * this[11];
  *(void *)uint64_t v12 = result;
  *(_DWORD *)(v12 + 8) = __sz;
  *(float *)(v12 + 12) = a4;
  size_t v13 = this[12] + __sz;
  ++this[11];
  this[12] = v13;
  return result;
}

void *marisa::Keyset::append_extra_block(marisa::Keyset *this, size_t __sz)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4 == *((void *)this + 5))
  {
    if (v4) {
      unint64_t v5 = 2 * v4;
    }
    else {
      unint64_t v5 = 1;
    }
    BOOL v6 = v5 >> 61 != 0;
    if (8 * v5 >= 0xFFFFFFFFFFFFFFF0) {
      BOOL v6 = 1;
    }
    if (v6) {
      size_t v7 = -1;
    }
    else {
      size_t v7 = 8 * v5 + 16;
    }
    uint64_t v8 = operator new[](v7, MEMORY[0x263F8C180]);
    if (!v8)
    {
      uint64_t v21 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000097;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:151: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
    }
    void *v8 = 8;
    v8[1] = v5;
    uint64_t v9 = (uint64_t)(v8 + 2);
    if (v5) {
      bzero(v8 + 2, 8 * v5);
    }
    uint64_t v21 = v9;
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v11 = *((void *)this + 3);
        uint64_t v12 = v21;
        uint64_t v13 = *(void *)(v11 + 8 * i);
        *(void *)(v11 + 8 * i) = *(void *)(v21 + 8 * i);
        *(void *)(v12 + 8 * i) = v13;
      }
      uint64_t v9 = v21;
    }
    uint64_t v14 = *((void *)this + 3);
    *((void *)this + 3) = v9;
    uint64_t v21 = v14;
    *((void *)this + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v5;
    marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array(&v21);
  }
  size_t result = operator new[](__sz, MEMORY[0x263F8C180]);
  if (!result)
  {
    unsigned int v19 = __cxa_allocate_exception(0x20uLL);
    *unsigned int v19 = &unk_26C3C3A00;
    v19[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v19[2] = 0x80000009FLL;
    _OWORD v19[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:159: MARISA_MEMORY_ERROR: new_block.get() == NULL";
  }
  uint64_t v17 = *((void *)this + 3);
  uint64_t v16 = *((void *)this + 4);
  *((void *)this + 4) = v16 + 1;
  uint64_t v18 = *(void *)(v17 + 8 * v16);
  *(void *)(v17 + 8 * v16) = result;
  if (v18) {
    return (void *)MEMORY[0x2166855A0](v18, 0x1000C8077774924);
  }
  return result;
}

void sub_2128C9494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *marisa::Keyset::append_base_block(uint64_t *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[1];
  if (v2 == this[2])
  {
    if (v2) {
      unint64_t v3 = 2 * v2;
    }
    else {
      unint64_t v3 = 1;
    }
    BOOL v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0) {
      BOOL v4 = 1;
    }
    if (v4) {
      size_t v5 = -1;
    }
    else {
      size_t v5 = 8 * v3 + 16;
    }
    BOOL v6 = operator new[](v5, MEMORY[0x263F8C180]);
    if (!v6)
    {
      uint64_t v16 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      void *exception = &unk_26C3C3A00;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000081;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:129: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
    }
    *BOOL v6 = 8;
    v6[1] = v3;
    uint64_t v7 = (uint64_t)(v6 + 2);
    if (v3) {
      bzero(v6 + 2, 8 * v3);
    }
    uint64_t v16 = v7;
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v9 = v16;
        uint64_t v10 = *(void *)(*v1 + 8 * i);
        *(void *)(*v1 + 8 * i) = *(void *)(v16 + 8 * i);
        *(void *)(v9 + 8 * i) = v10;
      }
      uint64_t v7 = v16;
    }
    uint64_t v11 = *v1;
    uint64_t *v1 = v7;
    uint64_t v16 = v11;
    v1[2] = v3;
    this = marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array(&v16);
    uint64_t v2 = v1[1];
  }
  uint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 8 * v2);
  if (!v13)
  {
    this = (uint64_t *)operator new[](0x1000uLL, MEMORY[0x263F8C180]);
    if (!this)
    {
      uint64_t v15 = __cxa_allocate_exception(0x20uLL);
      void *v15 = &unk_26C3C3A00;
      v15[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      v15[2] = 0x80000008ALL;
      v15[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:138: MARISA_MEMORY_ERROR: new_block.get() == NULL";
    }
    *(void *)(v12 + 8 * v2) = this;
    uint64_t v13 = *(void *)(*v1 + 8 * v2);
  }
  v1[1] = v2 + 1;
  v1[9] = v13;
  v1[10] = 4096;
  return this;
}

void sub_2128C9698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    uint64_t v4 = v2 - 8;
    uint64_t v3 = v5;
    if (v5)
    {
      uint64_t v6 = 8 * v3;
      do
      {
        uint64_t v7 = *(void *)(v4 + v6);
        if (v7) {
          MEMORY[0x2166855A0](v7, 0x1000C8077774924);
        }
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x2166855A0](v4 - 8, 0x10C80436913F5);
  }
  return a1;
}

uint64_t *marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    uint64_t v4 = v2 - 8;
    uint64_t v3 = v5;
    if (v5)
    {
      uint64_t v6 = 8 * v3;
      do
      {
        uint64_t v7 = *(void *)(v4 + v6);
        if (v7) {
          MEMORY[0x2166855A0](v7, 0x1050C80717B85FCLL);
        }
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x2166855A0](v4 - 8, 0x20C8093837F09);
  }
  return a1;
}

void *marisa::Trie::Trie(void *this)
{
  *this = 0;
  return this;
}

marisa::grimoire::trie::LoudsTrie **marisa::Trie::build(marisa::grimoire::trie::LoudsTrie **this, marisa::Keyset *a2, unsigned int a3)
{
  uint64_t v6 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v6)
  {
    uint64_t v11 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x80000000ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:14: MARISA_MEMORY_ERROR: temp.get() == NULL";
  }
  uint64_t v7 = v6;
  marisa::grimoire::trie::LoudsTrie::LoudsTrie(v6);
  uint64_t v11 = v7;
  marisa::grimoire::trie::LoudsTrie::build(v7, a2, a3);
  uint64_t v8 = *this;
  *this = v7;
  uint64_t v11 = v8;
  return marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_2128C98A0(_Unwind_Exception *a1)
{
  MEMORY[0x2166855C0](v1, MEMORY[0x263F8C180]);
  _Unwind_Resume(a1);
}

marisa::grimoire::trie::LoudsTrie **marisa::Trie::map(marisa::grimoire::trie::LoudsTrie **this, const void *a2, uint64_t a3)
{
  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:33: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
  }
  uint64_t v6 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x263F8C180]);
  if (!v6)
  {
    uint64_t v13 = 0;
    uint64_t v11 = __cxa_allocate_exception(0x20uLL);
    *uint64_t v11 = &unk_26C3C3A00;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v11[2] = 0x800000024;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:36: MARISA_MEMORY_ERROR: temp.get() == NULL";
  }
  uint64_t v7 = v6;
  marisa::grimoire::trie::LoudsTrie::LoudsTrie(v6);
  uint64_t v13 = v7;
  marisa::grimoire::io::Mapper::Mapper((uint64_t)v12);
  marisa::grimoire::io::Mapper::open((marisa::grimoire::io::Mapper *)v12, a2, a3);
  marisa::grimoire::trie::LoudsTrie::map(v13, (marisa::grimoire::io::Mapper *)v12);
  uint64_t v8 = *this;
  *this = v13;
  uint64_t v13 = v8;
  marisa::grimoire::io::Mapper::~Mapper((marisa::grimoire::io::Mapper *)v12);
  return marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v13);
}

void sub_2128C9A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

marisa::grimoire::trie::LoudsTrie *marisa::Trie::lookup(marisa::grimoire::trie::LoudsTrie **this, marisa::Agent *a2)
{
  size_t result = *this;
  if (result)
  {
    if (!*((void *)a2 + 5))
    {
      marisa::Agent::init_state(a2);
      size_t result = *this;
    }
    return (marisa::grimoire::trie::LoudsTrie *)marisa::grimoire::trie::LoudsTrie::lookup(result, a2);
  }
  return result;
}

marisa::grimoire::trie::LoudsTrie *marisa::Trie::reverse_lookup(marisa::grimoire::trie::LoudsTrie **this, marisa::Agent *a2)
{
  size_t result = *this;
  if (result)
  {
    if (!*((void *)a2 + 5))
    {
      marisa::Agent::init_state(a2);
      size_t result = *this;
    }
    return (marisa::grimoire::trie::LoudsTrie *)marisa::grimoire::trie::LoudsTrie::reverse_lookup(result, a2);
  }
  return result;
}

uint64_t marisa::TrieIO::write(uint64_t a1, marisa::grimoire::trie::LoudsTrie ***a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    void *exception = &unk_26C3C3A00;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:213: MARISA_STATE_ERROR: trie.trie_.get() == NULL";
  }
  marisa::grimoire::io::Writer::Writer((uint64_t)v6);
  marisa::grimoire::io::Writer::open((uint64_t)v6, a1);
  marisa::grimoire::trie::LoudsTrie::write(*a2, (marisa::grimoire::io::Writer *)v6);
  marisa::grimoire::io::Writer::~Writer(v6);
  return a1;
}

void sub_2128C9BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
}

void MeCab::ContextID::add(uint64_t **this, char *a2, char *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v5, a2);
  *(_OWORD *)__p = *(_OWORD *)v5;
  uint64_t v8 = v6;
  v5[1] = 0;
  uint64_t v6 = 0;
  v5[0] = 0;
  int v9 = 1;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(this, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v5, a3);
  *(_OWORD *)__p = *(_OWORD *)v5;
  uint64_t v8 = v6;
  v5[1] = 0;
  uint64_t v6 = 0;
  v5[0] = 0;
  int v9 = 1;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(this + 3, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
}

void sub_2128C9CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t save(const char *a1, void *a2)
{
  v29[19] = *MEMORY[0x263EF8340];
  std::ofstream::basic_ofstream(&v27);
  if ((v28[*(void *)(v27 - 24) + 24] & 5) != 0)
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    uint64_t v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ofs", 3);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"permission denied: ", 19);
    size_t v10 = strlen(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a1, v10);
    MeCab::die::~die((MeCab::die *)&v26);
  }
  uint64_t v13 = (void *)*a2;
  uint64_t v11 = a2 + 1;
  uint64_t v12 = v13;
  if (v13 != v11)
  {
    uint64_t v14 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v15 = (void *)std::ostream::operator<<();
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
      int v17 = *((char *)v12 + 55);
      if (v17 >= 0) {
        uint64_t v18 = (uint64_t)(v12 + 4);
      }
      else {
        uint64_t v18 = v12[4];
      }
      if (v17 >= 0) {
        uint64_t v19 = *((unsigned __int8 *)v12 + 55);
      }
      else {
        uint64_t v19 = v12[5];
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      uint64_t v21 = std::locale::use_facet(&v26, v14);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v26);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v22 = (void *)v12[1];
      if (v22)
      {
        do
        {
          int v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          int v23 = (void *)v12[2];
          BOOL v24 = *v23 == (void)v12;
          uint64_t v12 = v23;
        }
        while (!v24);
      }
      uint64_t v12 = v23;
    }
    while (v23 != v11);
  }
  uint64_t v27 = *MEMORY[0x263F8C2B0];
  *(void *)&v28[*(void *)(v27 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x2166853A0](v28);
  std::ostream::~ostream();
  return MEMORY[0x216685570](v29);
}

void sub_2128CA014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11)
{
}

uint64_t open_map(const char *a1, uint64_t a2, uint64_t a3)
{
  v45[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v43);
  if ((v44[*(void *)(v43[0] - 24) + 16] & 5) != 0)
  {
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ifs", 3);
    size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such file or directory: ", 27);
    size_t v12 = strlen(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a1, v12);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a2, *(char **)(a2 + 8));
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v41 = 0;
  __s = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v13 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v14 = (void *)MEMORY[0x263F8C0F8];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(v43[0] - 24)));
    uint64_t v15 = std::locale::use_facet((const std::locale *)&__p, v13);
    unsigned __int8 v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale((std::locale *)&__p);
    int v17 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v43, (uint64_t)&v38, v16);
    if ((*((unsigned char *)v17 + *(void *)(*v17 - 24) + 32) & 5) != 0) {
      break;
    }
    if (v40 >= 0) {
      uint64_t v18 = (const char *)&v38;
    }
    else {
      uint64_t v18 = (const char *)v38;
    }
    size_t v19 = strlen(v18);
    unint64_t v20 = 0;
    uint64_t v21 = &v18[v19];
    uint64_t v22 = &v41;
    while (v20 <= 1)
    {
      int v23 = v21;
      if (v18 != v21)
      {
        int v23 = v18;
LABEL_12:
        uint64_t v24 = 0;
        while (*(unsigned __int8 *)v23 != asc_212914825[v24])
        {
          if (++v24 == 2)
          {
            if (++v23 != v21) {
              goto LABEL_12;
            }
            int v23 = v21;
            break;
          }
        }
      }
      *int v23 = 0;
      if (*v18)
      {
        *v22++ = (char *)v18;
        ++v20;
      }
      uint64_t v18 = v23 + 1;
      if (v23 == v21)
      {
        if (v20 != 2)
        {
          unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::locale v26 = (void *)std::ostream::operator<<();
          uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
          unsigned int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"2 == tokenize2(const_cast<char *>(line.c_str()), \" \\t\", col, 2)", 63);
          uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
          uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"format error: ", 14);
          if (v40 >= 0) {
            unsigned int v31 = &v38;
          }
          else {
            unsigned int v31 = v38;
          }
          if (v40 >= 0) {
            uint64_t v32 = HIBYTE(v40);
          }
          else {
            uint64_t v32 = v39;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
          MeCab::die::~die((MeCab::die *)&__p);
        }
        break;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v37, __s);
    if (a3) {
      MeCab::Iconv::convert(a3, &v37);
    }
    int v33 = atoi(v41);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v37;
    }
    int v36 = v33;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>((uint64_t **)a2, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v38);
  }
  v43[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v43 + *(void *)(v43[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v44);
  std::istream::~istream();
  return MEMORY[0x216685570](v45);
}

void sub_2128CA4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
}

void build(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    int v4 = 1;
    do
    {
      *((_DWORD *)v3 + 14) = v4;
      uint64_t v5 = (uint64_t *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = (uint64_t **)v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t **)v3[2];
          BOOL v7 = *v6 == v3;
          uint64_t v3 = (uint64_t *)v6;
        }
        while (!v7);
      }
      ++v4;
      uint64_t v3 = (uint64_t *)v6;
    }
    while (v6 != a1 + 1);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v9 = 0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(a1, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2128CA640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::ContextID::lid(MeCab::ContextID *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  int v4 = (unsigned int *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)this, __p);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((unsigned int *)((char *)this + 8) == v4)
  {
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") [", 3);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"it != left_.end()", 17);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"cannot find LEFT-ID  for ", 25);
    size_t v11 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a2, v11);
    MeCab::die::~die((MeCab::die *)__p);
  }
  return v4[14];
}

void sub_2128CA75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::ContextID::rid(MeCab::ContextID *this, char *a2)
{
  int v4 = (char *)this + 24;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v5 = (unsigned int *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)v4, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if ((unsigned int *)((char *)this + 32) == v5)
  {
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    BOOL v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"it != right_.end()", 18);
    size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"cannot find RIGHT-ID  for ", 26);
    size_t v12 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
    MeCab::die::~die((MeCab::die *)__p);
  }
  return v5[14];
}

void sub_2128CA88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + vmarisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264192FE8, MEMORY[0x263F8C060]);
}

void sub_2128CA9CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  size_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  unint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x216685390](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_2128CACA4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x216685570](v1);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2166853A0](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x216685570](a1 + 52);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x216685450](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x216685460](v13);
  return a1;
}

void sub_2128CAEE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x216685460](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2128CAEC4);
}

void sub_2128CAF38(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_2128CB0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x216685390](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_2128CB30C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x216685570](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2166853A0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x216685570](a1 + 53);
  return a1;
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x2166853B0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    size_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      _OWORD v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2128CB570(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2128CB530);
  }
  __cxa_rethrow();
}

void sub_2128CB5EC(_Unwind_Exception *a1)
{
}

void MeCab::die::~die(MeCab::die *this)
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
  uint64_t v1 = std::locale::use_facet(&v2, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v1->__vftable[2].~facet_0)(v1, 10);
  std::locale::~locale(&v2);
  std::ostream::put();
  std::ostream::flush();
  exit(-1);
}

void sub_2128CB6A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      size_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      size_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              size_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            size_t v3 = v9[2];
            size_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *size_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            size_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          size_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        size_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *size_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t mecab_dict_gen(MeCab::DictionaryGenerator *a1, char **a2)
{
  MEMORY[0x216685530](&v7);
  uint64_t v5 = MeCab::DictionaryGenerator::run(a1, a2, v4);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v7);
  return v5;
}

void sub_2128CBA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t MeCab::DictionaryGenerator::run(MeCab::DictionaryGenerator *this, char **a2, char **a3)
{
  int v4 = (int)this;
  uint64_t v99 = *MEMORY[0x263EF8340];
  MeCab::Param::Param((MeCab::Param *)v92);
  if (MeCab::Param::open((uint64_t)v92, v4, a2, (uint64_t)&MeCab::DictionaryGenerator::run(int,char **)::long_options))
  {
    if (MeCab::Param::help_version((MeCab::Param *)v92))
    {
      v87[0] = 0;
      v86 = v87;
      v88[1] = 0;
      v88[0] = 0;
      v87[1] = 0;
      v87[2] = v88;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      MeCab::FeatureIndex::FeatureIndex((MeCab::FeatureIndex *)&v82);
      v82.__locale_ = (std::locale::__imp *)&unk_26C3C3768;
      MeCab::Mmap<char>::Mmap((uint64_t)&v83);
      uint64_t v85 = 0;
      *(_OWORD *)v84 = 0u;
      v81[1] = 0;
      v81[0] = 0;
      *(_OWORD *)uint64_t v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      uint64_t v79 = 0;
      long long v80 = v81;
      MeCab::Param::get<std::string>((uint64_t)v92, "dicdir", &__s1);
      MeCab::Param::get<std::string>((uint64_t)v92, "outdir", &v73);
      MeCab::Param::get<std::string>((uint64_t)v92, "model", &v72);
      std::string::basic_string[abi:ne180100]<0>(&__str, "dicrc");
      MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__str, v68);
      if ((v68[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = v68;
      }
      else {
        uint64_t v5 = (std::string *)v68[0].__r_.__value_.__r.__words[0];
      }
      if (!MeCab::Param::load((MeCab::Param *)v92, (const char *)v5))
      {
        int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
        char v7 = (void *)std::ostream::operator<<();
        int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"param.load(DCONF(DICRC))", 24);
        unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
        uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such file or directory: ", 27);
        std::string::basic_string[abi:ne180100]<0>(&v94, "dicrc");
        MeCab::create_filename((uint64_t)&__s1, (uint64_t)&v94, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        size_t v13 = strlen((const char *)p_p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v95 < 0) {
          operator delete(v94);
        }
        MeCab::die::~die((MeCab::die *)&v97);
      }
      if (SHIBYTE(v68[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      memset(&v71, 0, sizeof(v71));
      MeCab::Dictionary::Dictionary((MeCab::Dictionary *)v68);
      std::string::basic_string[abi:ne180100]<0>(&__p, "sys.dic");
      MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((MeCab::Dictionary::open((MeCab::Dictionary *)v68, (std::string::value_type *)p_str, "r") & 1) == 0)
      {
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
        unsigned __int8 v16 = (void *)std::ostream::operator<<();
        int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
        char v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"dic.open(DCONF(SYS_DIC_FILE), \"r\")", 34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
        MeCab::die::~die((MeCab::die *)&v94);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::__assign_external(&v71, __s);
      std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v71.__r_.__value_.__l.__size_;
      }
      if (!size)
      {
        unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
        uint64_t v21 = (void *)std::ostream::operator<<();
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
        int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"!charset.empty()", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
        MeCab::die::~die((MeCab::die *)&__str);
      }
      MeCab::Dictionary::~Dictionary((MeCab::Dictionary *)v68);
      MeCab::CharProperty::CharProperty((MeCab::CharProperty *)v68);
      if (!MeCab::CharProperty::open((MeCab::CharProperty *)v68, (const MeCab::Param *)v92))
      {
        unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
        std::locale v26 = (void *)std::ostream::operator<<();
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
        unsigned int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"property.open(param)", 20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
        MeCab::die::~die((MeCab::die *)&__str);
      }
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v71;
      }
      else {
        uint64_t v29 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      int v70 = MeCab::decode_charset((MeCab *)v29, v24);
      MeCab::Param::get<std::string>((uint64_t)v92, "bos-feature", &v67);
      MeCab::Param::get<int>((uint64_t)v92, "cost-factor");
      memset(v66, 0, sizeof(v66));
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s1 = &__s1;
      }
      else {
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      MeCab::enum_csv_dictionaries((char *)p_s1, (uint64_t)v66);
      uint64_t v31 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = __s1.__r_.__value_.__l.__size_;
      }
      std::string::size_type v33 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      char v34 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      std::string::size_type v35 = v73.__r_.__value_.__l.__size_;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v73.__r_.__value_.__l.__size_;
      }
      if (v32 != v36) {
        goto LABEL_67;
      }
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v37 = &v73;
      }
      else {
        std::string v37 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, v37, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_67;
        }
      }
      else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        uint64_t v38 = &__s1;
        while (v38->__r_.__value_.__s.__data_[0] == v37->__r_.__value_.__s.__data_[0])
        {
          uint64_t v38 = (std::string *)((char *)v38 + 1);
          std::string v37 = (std::string *)((char *)v37 + 1);
          if (!--v31) {
            goto LABEL_66;
          }
        }
LABEL_67:
        if (v34 >= 0) {
          std::string::size_type v53 = v33;
        }
        else {
          std::string::size_type v53 = v35;
        }
        if (!v53)
        {
          uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"(", 1);
          uint64_t v55 = (void *)std::ostream::operator<<();
          uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") [", 3);
          v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"!outdir.empty()", 15);
          float v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"output directory is empty", 25);
          MeCab::die::~die((MeCab::die *)&__str);
        }
        std::string::size_type v59 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v59 = v72.__r_.__value_.__l.__size_;
        }
        if (!v59)
        {
          uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"(", 1);
          uint64_t v61 = (void *)std::ostream::operator<<();
          uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)") [", 3);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"!model.empty()", 14);
          float v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"model file is empty", 19);
          MeCab::die::~die((MeCab::die *)&__str);
        }
        MeCab::DecoderFeatureIndex::open((MeCab::DecoderFeatureIndex *)&v82, (const MeCab::Param *)v92);
      }
LABEL_66:
      unint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"(", 1);
      uint64_t v49 = (void *)std::ostream::operator<<();
      unint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)") [", 3);
      unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"dicdir != outdir", 16);
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"output directory = dictionary directory! Please specify different directory.", 76);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v39 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v93);
    std::string::basic_string[abi:ne180100]<0>(v68, v39);
    if ((v68[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v40 = v68;
    }
    else {
      uint64_t v40 = (std::string *)v68[0].__r_.__value_.__r.__words[0];
    }
    if ((v68[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v41 = HIBYTE(v68[0].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v41 = v68[0].__r_.__value_.__l.__size_;
    }
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v40, v41);
    __n128 v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"\n\n", 2);
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\ntry '--help' for more information.", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
    unint64_t v46 = std::locale::use_facet(&v82, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
    std::locale::~locale(&v82);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v68[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68[0].__r_.__value_.__l.__data_);
    }
    uint64_t v47 = 0xFFFFFFFFLL;
  }
  MeCab::Param::~Param(v92);
  return v47;
}

void sub_2128CD470()
{
  if (SLOBYTE(STACK[0x98F]) < 0) {
    operator delete((void *)STACK[0x978]);
  }
  if (SLOBYTE(STACK[0x8FF]) < 0) {
    operator delete((void *)STACK[0x8E8]);
  }
  MeCab::die::~die((MeCab::die *)&STACK[0xA08]);
}

void sub_2128CD770()
{
}

void sub_2128CD7A4()
{
  if (SLOBYTE(STACK[0x98F]) < 0) {
    operator delete((void *)STACK[0x978]);
  }
  if (SLOBYTE(STACK[0x8FF]) < 0) {
    JUMPOUT(0x2128CD7CCLL);
  }
  if (SLOBYTE(STACK[0xA57]) < 0) {
    JUMPOUT(0x2128CD81CLL);
  }
  JUMPOUT(0x2128CD820);
}

void sub_2128CD7D4()
{
}

void sub_2128CD7EC()
{
}

void sub_2128CD7F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, ...)
{
  va_start(va1, a14);
  va_start(va, a14);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  size_t v19 = va_arg(va1, void *);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  std::ofstream::~ofstream(&STACK[0xA40]);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a8 < 0) {
    operator delete(a3);
  }
  STACK[0x978] = (unint64_t)va;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x978]);
  if (SHIBYTE(v21) < 0) {
    operator delete(v19);
  }
  MeCab::CharProperty::~CharProperty((void **)va1);
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  MeCab::DictionaryRewriter::~DictionaryRewriter((MeCab::DictionaryRewriter *)&STACK[0x3B0]);
  MeCab::DecoderFeatureIndex::~DecoderFeatureIndex((void **)&STACK[0x410]);
  MeCab::ContextID::~ContextID((MeCab::ContextID *)&STACK[0x6E8]);
  MeCab::Param::~Param((void **)&STACK[0x748]);
  _Unwind_Resume(v14);
}

double MeCab::Param::get<std::string>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  int v6 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v5, &__p);
  if (v10 < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v6) {
    operator new();
  }
  if (*((char *)v6 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v8, (const std::string::value_type *)v6[7], (std::string::size_type)v6[8]);
  }
  else {
    std::string v8 = *(std::string *)(v6 + 7);
  }
  double result = *(double *)&v8.__r_.__value_.__l.__data_;
  *a3 = v8;
  return result;
}

void sub_2128CD9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Param::get<int>(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  int v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, &__p);
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v4) {
    operator new();
  }
  if (*((char *)v4 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
  }
  else {
    std::string v13 = *(std::string *)(v4 + 7);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  unsigned int v14 = 0;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v13;
  }
  else {
    uint64_t v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, size);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0
    || (std::string v8 = (void *)MEMORY[0x216685400](&__p, &v14), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
    || (uint64_t v9 = std::ws[abi:ne180100]<char,std::char_traits<char>>(&__p),
        (*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  uint64_t v12 = v14;
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v16 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x216685570](&v18);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_2128CDCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MeCab::DictionaryGenerator::gencid(MeCab::DictionaryGenerator *this, const char *a2, MeCab::DictionaryRewriter *a3, MeCab::ContextID *a4)
{
  v14[72] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v14);
  if ((*((unsigned char *)&v14[4] + *(void *)(v14[0] - 24)) & 5) != 0)
  {
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
    int v6 = (void *)std::ostream::operator<<();
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") [", 3);
    std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ifs", 3);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"no such file or directory: ", 27);
    size_t v11 = strlen((const char *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)this, v11);
    MeCab::die::~die((MeCab::die *)&v13);
  }
  uint64_t v12 = &unk_26C3C3A28;
  operator new[]();
}

void sub_2128CE3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
}

void MeCab::DictionaryGenerator::gendic(MeCab::DictionaryGenerator *this, const char *a2, const char *a3, const MeCab::CharProperty *a4, MeCab::DictionaryRewriter *a5, const MeCab::ContextID *a6, MeCab::DecoderFeatureIndex *a7, BOOL a8, int a9)
{
  v36[72] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v36);
  if ((*((unsigned char *)&v36[4] + *(void *)(v36[0] - 24)) & 5) != 0)
  {
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    uint64_t v12 = (void *)std::ostream::operator<<();
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
    unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ifs", 3);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
    unsigned __int8 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"no such file or directory: ", 27);
    size_t v17 = strlen((const char *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)this, v17);
    MeCab::die::~die((MeCab::die *)v35);
  }
  std::ofstream::basic_ofstream(v35);
  if ((*((unsigned char *)&v35[4] + *(void *)(v35[0] - 24)) & 5) != 0)
  {
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"(", 1);
    size_t v19 = (void *)std::ostream::operator<<();
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") [", 3);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"ofs", 3);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"] ", 2);
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"permission denied: ", 19);
    size_t v24 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)a2, v24);
    MeCab::die::~die((MeCab::die *)v31);
  }
  unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"emitting ", 9);
  size_t v26 = strlen(a2);
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)a2, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ... ", 5);
  std::ostream::flush();
  char v30 = 0;
  char v33 = 0;
  std::string::size_type v32 = v34;
  uint64_t v29 = v34;
  v34[2] = &v28;
  v34[0] = v31;
  operator new[]();
}

void sub_2128CF1D4(_Unwind_Exception *a1)
{
}

uint64_t MeCab::copy(MeCab *this, const char *a2, const char *a3)
{
  v35[19] = *MEMORY[0x263EF8340];
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"copying ", 8);
  size_t v6 = strlen((const char *)this);
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)this, v6);
  std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" to ", 4);
  size_t v9 = strlen(a2);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  size_t v11 = std::locale::use_facet(&v31, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  MeCab::Mmap<char>::Mmap((uint64_t)v29);
  if ((MeCab::Mmap<char>::open((uint64_t)v29, (char *)this, "r") & 1) == 0)
  {
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(", 1);
    long long v13 = (void *)std::ostream::operator<<();
    unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"mmap.open(src)", 14);
    unsigned __int8 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] ", 2);
    size_t v17 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v30);
    std::string::basic_string[abi:ne180100]<0>(&v31, v17);
    if ((v33 & 0x80u) == 0) {
      locale = &v31;
    }
    else {
      locale = v31.__locale_;
    }
    if ((v33 & 0x80u) == 0) {
      uint64_t v19 = v33;
    }
    else {
      uint64_t v19 = v32;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)locale, v19);
    if ((char)v33 < 0) {
      operator delete(v31.__locale_);
    }
    MeCab::die::~die((MeCab::die *)&v28);
  }
  std::ofstream::basic_ofstream((uint64_t *)&v31);
  if ((v34[*((void *)v31.__locale_ - 3)] & 5) != 0)
  {
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"ofs", 3);
    size_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"permission denied: ", 19);
    size_t v26 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)a2, v26);
    MeCab::die::~die((MeCab::die *)&v28);
  }
  std::ostream::write();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)&v31 + *((void *)v31.__locale_ - 3)), *(_DWORD *)&v34[*((void *)v31.__locale_ - 3)] | 4);
  }
  v31.__locale_ = (std::locale::__imp *)*MEMORY[0x263F8C2B0];
  *(std::locale *)((char *)&v31 + *((void *)v31.__locale_ - 3)) = *(std::locale *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x2166853A0](&v32);
  std::ostream::~ostream();
  MEMORY[0x216685570](v35);
  return MeCab::Mmap<char>::~Mmap((uint64_t)v29);
}

void sub_2128CF6EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::locale a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(*v61);
  }
  MeCab::die::~die((MeCab::die *)&a12);
}

void sub_2128CF73C()
{
}

void sub_2128CF744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

void MeCab::DictionaryRewriter::~DictionaryRewriter(MeCab::DictionaryRewriter *this)
{
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  size_t v2 = (void **)((char *)this + 48);
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v2);
  size_t v2 = (void **)((char *)this + 24);
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v2);
  size_t v2 = (void **)this;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void MeCab::DecoderFeatureIndex::~DecoderFeatureIndex(void **this)
{
  *this = &unk_26C3C3768;
  if (*((char *)this + 711) < 0) {
    operator delete(this[86]);
  }
  MeCab::Mmap<char>::~Mmap((uint64_t)(this + 43));

  MeCab::FeatureIndex::~FeatureIndex((MeCab::FeatureIndex *)this);
}

{
  uint64_t vars8;

  *this = &unk_26C3C3768;
  if (*((char *)this + 711) < 0) {
    operator delete(this[86]);
  }
  MeCab::Mmap<char>::~Mmap((uint64_t)(this + 43));
  MeCab::FeatureIndex::~FeatureIndex((MeCab::FeatureIndex *)this);

  JUMPOUT(0x2166855D0);
}

void MeCab::ContextID::~ContextID(MeCab::ContextID *this)
{
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this, *((char **)this + 1));
}

MeCab::Param *MeCab::Param::Param(MeCab::Param *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  *(void *)this = &unk_26C3C3898;
  *((void *)this + 3) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 128);
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  return this;
}

void sub_2128CF92C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 + 127) < 0) {
    operator delete(*(void **)(v3 + 104));
  }
  if (*(char *)(v3 + 103) < 0) {
    operator delete(*(void **)(v3 + 80));
  }
  if (*(char *)(v3 + 79) < 0) {
    operator delete(*(void **)(v3 + 56));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *v4);
  _Unwind_Resume(a1);
}

void MeCab::Param::~Param(void **this)
{
  MeCab::Param::~Param(this);

  JUMPOUT(0x2166855D0);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *this = &unk_26C3C3898;
  uint64_t v2 = (char *)(this + 16);
  if (*((char *)this + 415) < 0) {
    operator delete(this[49]);
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  int v4 = *MEMORY[0x263F8C2C8];
  this[16] = (void *)*MEMORY[0x263F8C2C8];
  *(void *)&v2[*(void *)(v4 - 24)] = *(void *)(v3 + 24);
  this[17] = (void *)(MEMORY[0x263F8C318] + 16);
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](this + 30);
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v5 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 1), this[2]);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2128CFB28(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x216685570](v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void **MeCab::whatlog::str(MeCab::whatlog *this)
{
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)this + 8, &v4);
  uint64_t v2 = (void **)((char *)this + 264);
  if (*((char *)this + 287) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)uint64_t v2 = v4;
  *((void *)this + 3marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v5;
  if (*((char *)this + 287) < 0) {
    return (void **)*v2;
  }
  return v2;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

double MeCab::FeatureIndex::FeatureIndex(MeCab::FeatureIndex *this)
{
  *(void *)this = &unk_26C3C3598;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &unk_26C3C3660;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0x40000;
  *((void *)this + 11) = &unk_26C3C3640;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0x40000;
  *((void *)this + 34) = 0;
  *((void *)this + 3marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = (char *)this + 272;
  *((void *)this + 36) = &unk_26C3C35E0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((_WORD *)this + 160) = 1;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  return result;
}

void MeCab::FeatureIndex::~FeatureIndex(MeCab::FeatureIndex *this)
{
  *(void *)this = &unk_26C3C3598;
  MeCab::StringBuffer::~StringBuffer((MeCab::FeatureIndex *)((char *)this + 288));
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)this + 264, *((void **)this + 34));
  uint64_t v5 = (void **)((char *)this + 240);
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 216);
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 192);
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  MeCab::ChunkFreeList<char>::~ChunkFreeList((void *)this + 11);
  MeCab::ChunkFreeList<int>::~ChunkFreeList((void *)this + 4);
  unint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void MeCab::ChunkFreeList<int>::~ChunkFreeList(void *a1)
{
  MeCab::ChunkFreeList<int>::~ChunkFreeList(a1);

  JUMPOUT(0x2166855D0);
}

void MeCab::ChunkFreeList<char>::~ChunkFreeList(void *a1)
{
  MeCab::ChunkFreeList<char>::~ChunkFreeList(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::ChunkFreeList<char>::~ChunkFreeList(void *a1)
{
  *a1 = &unk_26C3C3640;
  a1[5] = 0;
  unint64_t v4 = a1 + 1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v3 = (char *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (*(void *)&v2[16 * v5 + 8])
    {
      MEMORY[0x2166855A0](*(void *)&v2[16 * v5 + 8], 0x1000C8077774924);
      unint64_t v5 = a1[5];
      uint64_t v2 = (char *)a1[1];
      unint64_t v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *MeCab::ChunkFreeList<int>::~ChunkFreeList(void *a1)
{
  *a1 = &unk_26C3C3660;
  a1[5] = 0;
  unint64_t v4 = a1 + 1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v3 = (char *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (*(void *)&v2[16 * v5 + 8])
    {
      MEMORY[0x2166855A0](*(void *)&v2[16 * v5 + 8], 0x1000C8052888210);
      unint64_t v5 = a1[5];
      uint64_t v2 = (char *)a1[1];
      unint64_t v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t MeCab::Mmap<char>::Mmap(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C3818;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 48);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_2128D00DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::Mmap<char>::~Mmap(uint64_t a1)
{
  MeCab::Mmap<char>::~Mmap(a1);

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::Mmap<char>::~Mmap(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C3818;
  MeCab::Mmap<char>::close(a1);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 48) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 48 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 56) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](a1 + 160);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void *MeCab::Mmap<char>::close(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 336);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 336) = -1;
  }
  double result = *(void **)(a1 + 8);
  if (result) {
    double result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void MeCab::scoped_ptr<std::string>::~scoped_ptr(void *a1)
{
  MeCab::scoped_ptr<std::string>::~scoped_ptr(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_ptr<std::string>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C34D8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x2166855D0](v2, 0x1012C40EC159624);
  }
  return a1;
}

MeCab::CharProperty *MeCab::CharProperty::CharProperty(MeCab::CharProperty *this)
{
  *(void *)this = &unk_26C3C3578;
  MeCab::Mmap<char>::Mmap((uint64_t)this + 8);
  *((_DWORD *)this + 96) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 392);
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  *((void *)this + 84) = 0;
  return this;
}

void sub_2128D03EC(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;
  size_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 360) = v6;
    operator delete(v6);
  }
  MeCab::Mmap<char>::~Mmap(v2);
  _Unwind_Resume(a1);
}

void MeCab::CharProperty::~CharProperty(void **this)
{
  MeCab::CharProperty::~CharProperty(this);

  JUMPOUT(0x2166855D0);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *this = &unk_26C3C3578;
  uint64_t v2 = (char *)(this + 1);
  MeCab::Mmap<char>::close((uint64_t)(this + 1));
  if (*((char *)this + 679) < 0) {
    operator delete(this[82]);
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  unint64_t v4 = *MEMORY[0x263F8C2C8];
  this[49] = (void *)*MEMORY[0x263F8C2C8];
  *(void **)((char *)this + *(void *)(v4 - 24) + 392) = *(void **)(v3 + 24);
  this[50] = (void *)(MEMORY[0x263F8C318] + 16);
  if (*((char *)this + 487) < 0) {
    operator delete(this[58]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](this + 63);
  unint64_t v5 = this[44];
  if (v5)
  {
    this[45] = v5;
    operator delete(v5);
  }
  MeCab::Mmap<char>::~Mmap((uint64_t)v2);
}

void *MeCab::scoped_ptr<int>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3538;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855D0](v2, 0x1000C4052888210);
  }
  return a1;
}

void MeCab::scoped_ptr<int>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3538;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855D0](v1, 0x1000C4052888210);
  }

  JUMPOUT(0x2166855D0);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  unint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2128D07D4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x216685570](v1);
  _Unwind_Resume(a1);
}

void *std::ws[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  MEMORY[0x2166853B0](&v12, a1, 1);
  if (!v12) {
    return a1;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
  std::locale::~locale(&v11);
  uint64_t v3 = a1 + 5;
  while (1)
  {
    uint64_t v4 = *(void **)((char *)v3 + *(void *)(*a1 - 24));
    unint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4]) {
      break;
    }
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      int v9 = 0;
      goto LABEL_12;
    }
    uint64_t v7 = *(void **)((char *)v3 + *(void *)(*a1 - 24));
    uint64_t v8 = v7[3];
    if (v8 == v7[4]) {
      (*(void (**)(void *))(*v7 + 80))(v7);
    }
    else {
      _OWORD v7[3] = v8 + 1;
    }
  }
  int v6 = (*(uint64_t (**)(void *))(*v4 + 72))(v4);
  if (v6 != -1) {
    goto LABEL_6;
  }
  int v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2128D097C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2128D0938);
  }
  __cxa_rethrow();
}

void sub_2128D0A10(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x216685570](a1 + 128);
  return a1;
}

void *MeCab::scoped_fixed_array<char,8192>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3A28;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8077774924);
  }
  return a1;
}

void MeCab::scoped_fixed_array<char,8192>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3A28;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::Mmap<char>::open(uint64_t a1, char *a2, const char *a3)
{
  MeCab::Mmap<char>::close(a1);
  std::string::basic_string[abi:ne180100]<0>(&v44, a2);
  int v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)int v6 = *(_OWORD *)&v44.st_dev;
  *(void *)(a1 + 40) = *(void *)&v44.st_uid;
  if (!strcmp(a3, "r"))
  {
    int v16 = 0;
  }
  else
  {
    if (strcmp(a3, "r+"))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v7 = (void *)(a1 + 48);
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(void *)(v8 - 24)), 0);
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"false", 5);
      long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
      unsigned int v14 = "unknown open mode: ";
      uint64_t v15 = 19;
LABEL_18:
      std::string::size_type v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      size_t v42 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)a2, v42);
      return 0;
    }
    int v16 = 2;
  }
  *(_DWORD *)(a1 + 340) = v16;
  int v17 = open(a2, v16);
  *(_DWORD *)(a1 + 336) = v17;
  if (v17 < 0)
  {
    uint64_t v24 = *(void *)(a1 + 48);
    int v23 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v23 + *(void *)(v24 - 24)), 0);
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
    size_t v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
    char v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(fd = ::open(filename, flag | O_BINARY)) >= 0", 45);
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
    unsigned int v14 = "open failed: ";
    uint64_t v15 = 13;
    goto LABEL_18;
  }
  if (fstat(v17, &v44) < 0)
  {
    uint64_t v30 = *(void *)(a1 + 48);
    uint64_t v29 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v29 + *(void *)(v30 - 24)), 0);
    std::locale v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
    uint64_t v32 = (void *)std::ostream::operator<<();
    unsigned __int8 v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") [", 3);
    char v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"::fstat(fd, &st) >= 0", 21);
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] ", 2);
    unsigned int v14 = "failed to get file size: ";
    uint64_t v15 = 25;
    goto LABEL_18;
  }
  st_std::string::size_type size = v44.st_size;
  *(void *)(a1 + 16) = v44.st_size;
  if (*(_DWORD *)(a1 + 340) == 2) {
    int v19 = 3;
  }
  else {
    int v19 = 1;
  }
  uint64_t v20 = mmap(0, st_size, v19, 1, *(_DWORD *)(a1 + 336), 0);
  if (v20 == (void *)-1)
  {
    uint64_t v36 = *(void *)(a1 + 48);
    std::string::size_type v35 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v35 + *(void *)(v36 - 24)), 0);
    std::string v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
    uint64_t v38 = (void *)std::ostream::operator<<();
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") [", 3);
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
    long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    unsigned int v14 = "mmap() failed: ";
    uint64_t v15 = 15;
    goto LABEL_18;
  }
  uint64_t v21 = v20;
  uint64_t v22 = 1;
  madvise(v20, *(void *)(a1 + 16), 1);
  *(void *)(a1 + 8) = v21;
  close(*(_DWORD *)(a1 + 336));
  *(_DWORD *)(a1 + 336) = -1;
  return v22;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,MeCab::FeatureSet>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MeCab::FeatureSet>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (void ***)*a1;
  if (*v2)
  {
    std::vector<MeCab::RewritePattern>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<MeCab::RewritePattern>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      unint64_t v5 = v4 - 6;
      int v6 = v4 - 3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      int v6 = v5;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void MeCab::RewritePattern::set_pattern(MeCab::RewritePattern *this, const char *a2, const char *a3)
{
}

void sub_2128D15B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x2166855A0](a11, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<std::string>>>(const char *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  int64_t v4 = strlen(a1);
  if (v4 >= 1)
  {
    unint64_t v5 = (unint64_t)&v3[v4];
    unint64_t v6 = 512;
    do
    {
      for (uint64_t i = (unsigned __int8 *)v3; ; ++i)
      {
        int v8 = *i;
        if (v8 != 9 && v8 != 32) {
          break;
        }
        ++v3;
      }
      if (v8 == 34)
      {
        int v9 = ++i;
        uint64_t v10 = i;
        if ((unint64_t)i < v5)
        {
          uint64_t v10 = i;
          int v9 = i;
          do
          {
            int v11 = *v10;
            if (v11 == 34)
            {
              int v12 = *++v10;
              if (v12 != 34) {
                break;
              }
            }
            *v9++ = v11;
            ++v10;
          }
          while ((unint64_t)v10 < v5);
        }
        long long v13 = (unsigned __int8 *)memchr(v10, 44, v5 - (void)v10);
        if (v13) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = (unsigned __int8 *)v5;
        }
      }
      else
      {
        uint64_t v15 = memchr(i, 44, v5 - (void)v3);
        if (v15) {
          int v16 = v15;
        }
        else {
          int v16 = (unsigned char *)v5;
        }
        int v9 = &i[v16 - v3];
        unsigned int v14 = v9;
      }
      if (v6 >= 2) {
        *int v9 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)i);
      unint64_t v18 = *(void *)(a2 + 8);
      unint64_t v17 = *(void *)(a2 + 16);
      if (v18 >= v17)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(void *)a2) >> 3);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a2) >> 3);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0x555555555555555) {
          unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v23 = v21;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v23) {
          uint64_t v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v23);
        }
        else {
          uint64_t v24 = 0;
        }
        unint64_t v25 = v24 + v20;
        __v.__first_ = v24;
        __v.__begin_ = v25;
        __v.__end_cap_.__value_ = &v24[v23];
        long long v26 = *(_OWORD *)__p;
        v25->__r_.__value_.__r.__words[2] = v30;
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
        __p[1] = 0;
        std::string::size_type v30 = 0;
        __p[0] = 0;
        __v.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v27 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v28 = SHIBYTE(v30);
        *(void *)(a2 + 8) = v27;
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)__p;
        *(void *)(v18 + 16) = v30;
        *(_OWORD *)unint64_t v18 = v19;
        *(void *)(a2 + 8) = v18 + 24;
      }
      if (!--v6) {
        break;
      }
      uint64_t v3 = (const char *)(v14 + 1);
    }
    while ((unint64_t)(v14 + 1) < v5);
  }
}

void sub_2128D181C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::RewriteRules::rewrite(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  unint64_t v5 = 0;
  while (1)
  {
    unint64_t v6 = (uint64_t *)(v4 + 48 * v5);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - *v6) >> 3) <= a2) {
      break;
    }
LABEL_19:
    ++v5;
    uint64_t v4 = *a1;
    if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4)) {
      return 0;
    }
  }
  if (v7 != v8)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (const char *)(v8 + 24 * v9);
      if (v10[23] < 0) {
        uint64_t v10 = *(const char **)v10;
      }
      int v11 = *(unsigned __int8 *)v10;
      if (v11 != 42)
      {
        if (strcmp(v10, *(const char **)(a3 + 8 * v9))) {
          break;
        }
      }
      if (++v9 >= 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3)) {
        goto LABEL_21;
      }
    }
    size_t v12 = strlen(v10);
    if (v11 == 40 && v12 >= 3 && v10[v12 - 1] == 41)
    {
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C3C3A28;
      operator new[]();
    }
    goto LABEL_19;
  }
LABEL_21:
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
  }
  uint64_t v15 = v4 + 48 * v5;
  uint64_t v18 = *(void *)(v15 + 24);
  unint64_t v17 = (uint64_t *)(v15 + 24);
  uint64_t v16 = v18;
  if (v17[1] != v18)
  {
    unint64_t v19 = 0;
    unint64_t v48 = v17 + 1;
    do
    {
      memset(&v56, 0, sizeof(v56));
      unint64_t v20 = (std::string::value_type *)(v16 + 24 * v19);
      if (v20[23] < 0)
      {
        unint64_t v20 = *(std::string::value_type **)v20;
        uint64_t v21 = *(void *)(v16 + 24 * v19 + 8);
      }
      else
      {
        uint64_t v21 = v20[23];
      }
      if (v21 >= 1)
      {
        unint64_t v22 = (unint64_t)&v20[v21];
        unint64_t v50 = &v20[v21];
        uint64_t v52 = (uint64_t)&v20[v21 - 2];
        do
        {
          int v23 = *v20;
          if (v23 == 36)
          {
            uint64_t v24 = v20 + 1;
            if ((unint64_t)(v20 + 1) >= v22 || (v20[1] - 48) > 9) {
              goto LABEL_39;
            }
            uint64_t v25 = 0;
            signed __int8 v26 = v20[1];
            uint64_t v27 = v52 - (void)v20;
            while (1)
            {
              uint64_t v25 = 10 * v25 + v26 - 48;
              if (!v27) {
                break;
              }
              signed __int8 v26 = *++v24;
              --v27;
              if ((*v24 - 48) > 9) {
                goto LABEL_51;
              }
            }
            uint64_t v24 = v50;
LABEL_51:
            unint64_t v40 = v25 - 1;
            BOOL v41 = !v25 || v40 >= a2;
            unint64_t v20 = v24;
            if (v41)
            {
LABEL_39:
              int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
              uint64_t v29 = (void *)std::ostream::operator<<();
              std::string::size_type v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
              std::locale v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"n > 0 && (n - 1) < size", 23);
              uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
              unsigned __int8 v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" out of range: [", 16);
              uint64_t v34 = *v17 + 24 * v19;
              int v35 = *(char *)(v34 + 23);
              if (v35 >= 0) {
                uint64_t v36 = *v17 + 24 * v19;
              }
              else {
                uint64_t v36 = *(void *)v34;
              }
              if (v35 >= 0) {
                uint64_t v37 = *(unsigned __int8 *)(v34 + 23);
              }
              else {
                uint64_t v37 = *(void *)(v34 + 8);
              }
              uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v36, v37);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"] ", 2);
              std::ostream::operator<<();
              MeCab::die::~die((MeCab::die *)&v55);
            }
            std::string::size_type v39 = strlen(*(const char **)(a3 + 8 * v40));
            std::string::append(&v56, *(const std::string::value_type **)(a3 + 8 * v40), v39);
            if ((unint64_t)v24 < v22) {
              std::string::push_back(&v56, *v24);
            }
          }
          else
          {
            std::string::push_back(&v56, v23);
          }
          ++v20;
        }
        while ((unint64_t)v20 < v22);
      }
      if ((MeCab::escape_csv_element(&v56) & 1) == 0)
      {
        size_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"(", 1);
        __n128 v43 = (void *)std::ostream::operator<<();
        stat v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"escape_csv_element(&elm)", 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"] ", 2);
        MeCab::die::~die((MeCab::die *)&v55);
      }
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v46 = &v56;
      }
      else {
        unint64_t v46 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v56.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)a4, (const std::string::value_type *)v46, size);
      if (++v19 != 0xAAAAAAAAAAAAAAABLL * ((*v48 - *v17) >> 3)) {
        std::string::append((std::string *)a4, ",", 1uLL);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = *v17;
    }
    while (v19 < 0xAAAAAAAAAAAAAAABLL * ((*v48 - *v17) >> 3));
  }
  return 1;
}

void sub_2128D1FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a24) {
    MEMORY[0x2166855A0](a24, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::DictionaryRewriter::open(MeCab::DictionaryRewriter *this, const char *a2, MeCab::Iconv *a3)
{
  v46[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v44);
  if ((v45[*(void *)(v44[0] - 24) + 16] & 5) != 0)
  {
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ifs", 3);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such file or directory: ", 27);
    size_t v12 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  int v13 = 0;
  unsigned int v14 = (std::locale::id *)MEMORY[0x263F8C108];
  memset(&__p, 0, sizeof(__p));
LABEL_4:
  int v15 = v13;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(v44[0] - 24)));
    uint64_t v16 = std::locale::use_facet(&v43, v14);
    unsigned __int8 v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v43);
    uint64_t v18 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, (uint64_t)&__p, v17);
    if ((*((unsigned char *)v18 + *(void *)(*v18 - 24) + 32) & 5) != 0) {
      break;
    }
    if (a3) {
      MeCab::Iconv::convert((uint64_t)a3, &__p);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_13;
      }
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      p_p = &__p;
LABEL_13:
      if (p_p->__r_.__value_.__s.__data_[0] != 35)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (size == 14)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = &__p;
          }
          else {
            uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v28 = v27->__r_.__value_.__r.__words[0];
          uint64_t v29 = *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 6);
          BOOL v30 = v28 == 0x6572207466656C5BLL && v29 == 0x5D65746972776572;
          int v13 = 2;
          if (v30) {
            goto LABEL_4;
          }
LABEL_48:
          if (v15)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v35 = &__p;
            }
            else {
              int v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if (v15 != 1)
            {
              if (v15 != 2) {
            }
              }
          }
          uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"(", 1);
          uint64_t v37 = (void *)std::ostream::operator<<();
          uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
          std::string::size_type v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"append_to != 0", 14);
          unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"no sections found", 17);
          MeCab::die::~die((MeCab::die *)&v43);
        }
        if (size == 15)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::locale v31 = &__p;
          }
          else {
            std::locale v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
          uint64_t v33 = *(std::string::size_type *)((char *)v31->__r_.__value_.__r.__words + 7);
          BOOL v34 = v32 == 0x722074686769725BLL && v33 == 0x5D65746972776572;
          int v13 = 3;
          if (v34) {
            goto LABEL_4;
          }
          goto LABEL_48;
        }
        if (size != 17) {
          goto LABEL_48;
        }
        uint64_t v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
        std::string::size_type v23 = v21->__r_.__value_.__l.__size_;
        int v24 = v21->__r_.__value_.__s.__data_[16];
        BOOL v25 = v22 == 0x6D617267696E755BLL && v23 == 0x6574697277657220;
        BOOL v26 = v25 && v24 == 93;
        int v13 = 1;
        if (!v26) {
          goto LABEL_48;
        }
        goto LABEL_4;
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v44[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v45);
  std::istream::~istream();
  MEMORY[0x216685570](v46);
  return 1;
}

void sub_2128D2538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a16);
  _Unwind_Resume(a1);
}

void anonymous namespace'::append_rewrite_rule(void *a1, char *__s)
{
  memset(__p, 0, sizeof(__p));
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
  unint64_t v4 = 0;
  unint64_t v5 = &__s[strlen(__s)];
  unint64_t v6 = __s;
  while (1)
  {
    uint64_t v7 = v5;
    if (v6 == v5) {
      goto LABEL_9;
    }
    while (1)
    {
      uint64_t v8 = 0;
LABEL_4:
      if (*v6 == asc_212914825[v8]) {
        break;
      }
      if (++v8 != 2) {
        goto LABEL_4;
      }
      if (++v6 == v5)
      {
        uint64_t v7 = v5;
        goto LABEL_9;
      }
    }
    uint64_t v7 = v6;
LABEL_9:
    char *v7 = 0;
    if (*v19.__r_.__value_.__l.__data_)
    {
      uint64_t v21 = __p;
      std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v21, &v19);
      ++v4;
    }
    if (v7 == v5)
    {
      if (v4 <= 1)
      {
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
        uint64_t v10 = (void *)std::ostream::operator<<();
        int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
        size_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"n >= 2", 6);
        int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
        unsigned int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"format error: ", 14);
        size_t v15 = strlen(__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__s, v15);
        MeCab::die::~die((MeCab::die *)&v19);
      }
LABEL_16:
      std::vector<MeCab::RewritePattern>::resize((uint64_t)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) + 1);
      memset(&v19, 0, sizeof(v19));
      uint64_t v16 = (const char **)__p[0];
      unsigned __int8 v17 = (std::string *)*((void *)__p[0] + 1);
      if (v4 >= 3)
      {
        std::string::__assign_external(&v19, *((const std::string::value_type **)__p[0] + 1));
        std::string::push_back(&v19, 32);
        std::string::size_type v18 = strlen(*((const char **)__p[0] + 2));
        std::string::append(&v19, *((const std::string::value_type **)__p[0] + 2), v18);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v17 = &v19;
        }
        else {
          unsigned __int8 v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
        }
        uint64_t v16 = (const char **)__p[0];
        *((void *)__p[0] + 1) = v17;
      }
      MeCab::RewritePattern::set_pattern((MeCab::RewritePattern *)(a1[1] - 48), *v16, (const char *)v17);
    }
    unint64_t v6 = v7 + 1;
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 1);
    if (v4 >= 3) {
      goto LABEL_16;
    }
  }
}

void sub_2128D27E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::DictionaryRewriter::rewrite()
{
  v0 = &unk_26C3C3A28;
  operator new[]();
}

void sub_2128D2C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20) {
    MEMORY[0x2166855A0](a20, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void *MeCab::scoped_fixed_array<char *,8192>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3A58;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x10C80436913F5);
  }
  return a1;
}

uint64_t MeCab::DictionaryRewriter::rewrite2(uint64_t a1, void **a2, std::string *a3, std::string *a4, std::string *a5)
{
  uint64_t v9 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 72, a2);
  if ((void **)(a1 + 80) == v9) {
    MeCab::DictionaryRewriter::rewrite();
  }
  uint64_t v10 = v9;
  std::string::operator=(a3, (const std::string *)(v9 + 7));
  std::string::operator=(a4, (const std::string *)(v10 + 10));
  std::string::operator=(a5, (const std::string *)(v10 + 13));
  return 1;
}

void sub_2128D2E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

uint64_t std::pair<std::string,MeCab::FeatureSet>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MeCab::FeatureSet::~FeatureSet(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t MeCab::POSIDGenerator::open(MeCab::POSIDGenerator *this, const char *a2, MeCab::Iconv *a3, unint64_t *a4)
{
  v49[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v47);
  if ((v48[*(void *)(v47[0] - 24) + 16] & 5) != 0)
  {
    size_t v7 = strlen(a2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)a2, v7);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" is not found. minimum setting is used", 38);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet((const std::locale *)&v44, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)&v44);
    std::ostream::put();
    std::ostream::flush();
    std::vector<MeCab::RewritePattern>::resize((uint64_t)this, 1uLL);
    MeCab::RewritePattern::set_pattern((MeCab::RewritePattern *)(*((void *)this + 1) - 48), "*", "1");
  }
  memset(&v44, 0, sizeof(v44));
  std::string __p = 0;
  size_t v42 = 0;
  uint64_t v43 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(v47[0] - 24)));
  int v11 = std::locale::use_facet(&v46, MEMORY[0x263F8C108]);
  unsigned __int8 v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v46);
  int v13 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v47, (uint64_t)&v44, v12);
  if ((*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) == 0)
  {
    size_t v42 = __p;
    if (a3) {
      MeCab::Iconv::convert((uint64_t)a3, &v44);
    }
    unsigned int v14 = this;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v15 = &v44;
    }
    else {
      size_t v15 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    v46.__locale_ = (std::locale::__imp *)v15;
    unint64_t v16 = 0;
    unsigned __int8 v17 = (std::string *)((char *)v15 + strlen((const char *)v15));
    while (1)
    {
      std::string::size_type v18 = v17;
      if (v15 == v17) {
        goto LABEL_17;
      }
      while (1)
      {
        uint64_t v19 = 0;
LABEL_12:
        if (v15->__r_.__value_.__s.__data_[0] == asc_212914825[v19]) {
          break;
        }
        if (++v19 != 2) {
          goto LABEL_12;
        }
        size_t v15 = (std::string *)((char *)v15 + 1);
        if (v15 == v17)
        {
          std::string::size_type v18 = v17;
          goto LABEL_17;
        }
      }
      std::string::size_type v18 = v15;
LABEL_17:
      v18->__r_.__value_.__s.__data_[0] = 0;
      if (*(unsigned char *)v46.__locale_)
      {
        p_p = &__p;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&p_p, &v46);
        ++v16;
      }
      if (v18 != v17)
      {
        size_t v15 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
        v46.__locale_ = (std::locale::__imp *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
        if (v16 < 2) {
          continue;
        }
      }
      if (v16 != 2)
      {
        unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
        uint64_t v21 = (void *)std::ostream::operator<<();
        std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
        std::string::size_type v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"n == 2", 6);
        int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
        BOOL v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"format error: ", 14);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v26 = &v44;
        }
        else {
          BOOL v26 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v44.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, size);
        MeCab::die::~die((MeCab::die *)&v46);
      }
      std::string::size_type v28 = (unsigned char *)*((void *)__p + 1);
      int v29 = *v28;
      if (*v28)
      {
        BOOL v30 = v28 + 1;
        do
        {
          if ((v29 - 48) >= 0xA)
          {
            std::locale v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
            std::string::size_type v32 = (void *)std::ostream::operator<<();
            uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") [", 3);
            BOOL v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"*p >= '0' && *p <= '9'", 22);
            int v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] ", 2);
            uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"not a number: ", 14);
            size_t v37 = strlen(*((const char **)__p + 1));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, *((void *)__p + 1), v37);
            MeCab::die::~die((MeCab::die *)&v46);
          }
          int v38 = *v30++;
          int v29 = v38;
        }
        while (v38);
      }
      std::vector<MeCab::RewritePattern>::resize((uint64_t)v14, 1 - 0x5555555555555555 * ((uint64_t)(*((void *)v14 + 1) - *(void *)v14) >> 4));
      MeCab::RewritePattern::set_pattern((MeCab::RewritePattern *)(*((void *)v14 + 1) - 48), *(const char **)__p, *((const char **)__p + 1));
    }
  }
  if (a4) {
    *a4 = 0xAAAAAAAAAAAAAAABLL
  }
        * ((uint64_t)(*(void *)(*((void *)this + 1) - 40) - *(void *)(*((void *)this + 1) - 48)) >> 3);
  if (__p)
  {
    size_t v42 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  v47[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v47 + *(void *)(v47[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v48);
  std::istream::~istream();
  MEMORY[0x216685570](v49);
  return 1;
}

void sub_2128D34FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23,char a24)
{
}

void std::vector<MeCab::RewritePattern>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void ***)a1;
  uint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 4);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 4) >= v6)
    {
      bzero(*(void **)(a1 + 8), 48 * ((48 * v6 - 48) / 0x30) + 48);
      *(void *)(a1 + 8) = &v3[6 * ((48 * v6 - 48) / 0x30) + 6];
      return;
    }
    if (a2 > 0x555555555555555) {
      std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 4);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 3 * v10;
    unsigned __int8 v12 = (char *)operator new(48 * v10);
    int v13 = &v12[48 * v5];
    unsigned int v14 = &v12[16 * v11];
    size_t v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      uint64_t v17 = 0;
      do
      {
        std::string::size_type v18 = &v13[v17 * 8];
        uint64_t v19 = &v3[v17];
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v3[v17 - 6];
        *((void *)v18 - 4) = v3[v17 - 4];
        *(v19 - 6) = 0;
        *(v19 - marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
        *(v19 - 4) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v3[v17 - 3];
        *((void *)v18 - 1) = v3[v17 - 1];
        *(v19 - 3) = 0;
        *(v19 - 2) = 0;
        *(v19 - 1) = 0;
        v17 -= 6;
      }
      while (&v3[v17] != v4);
      uint64_t v3 = *(void ***)a1;
      unint64_t v20 = *(void ***)(a1 + 8);
      *(void *)a1 = &v13[v17 * 8];
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v20 != v3)
      {
        do
        {
          uint64_t v21 = v20 - 6;
          std::string::size_type v23 = v20 - 3;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
          std::string::size_type v23 = v21;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v23);
          unint64_t v20 = v21;
        }
        while (v21 != v3);
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    std::string::size_type v22 = &v4[6 * a2];
    std::vector<MeCab::RewritePattern>::__base_destruct_at_end[abi:ne180100](a1, v22);
  }
}

void MeCab::POSIDGenerator::id(MeCab::POSIDGenerator *this, const char *a2)
{
  uint64_t v2 = &unk_26C3C3A28;
  operator new[]();
}

void sub_2128D3B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    MEMORY[0x2166855A0](a17, 0x10C80436913F5);
  }
  if (a20) {
    MEMORY[0x2166855A0](a20, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,MeCab::FeatureSet>::pair[abi:ne180100]<std::string const&,MeCab::FeatureSet&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  unint64_t v8 = this + 3;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v9 = a3[3];
    this[3].__r_.__value_.__r.__words[2] = *((void *)a3 + 8);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_2128D3CB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]()
{
}

void ***std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](void ***a1, void *a2)
{
  unint64_t v4 = *a1;
  long long v5 = (*a1)[1];
  long long v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      size_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v7, v14);
    }
    else {
      size_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = *a2;
    unint64_t v10 = v16 + 8;
    uint64_t v19 = (char *)*v4;
    std::string::size_type v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      std::string::size_type v18 = (char *)*v4;
    }
    void *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v5 = *a2;
    unint64_t v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void MeCab::scoped_fixed_array<char *,8192>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3A58;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x10C80436913F5);
  }

  JUMPOUT(0x2166855D0);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      long long v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        long long v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::__emplace_unique_key_args<std::string,std::pair<std::string,MeCab::FeatureSet>>(uint64_t **a1, void **a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    long long v6 = operator new(0x80uLL);
    v10[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *((void *)v6 + 12) = *(void *)(a3 + 64);
    v6[5] = *(_OWORD *)(a3 + 48);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    long long v8 = *(_OWORD *)(a3 + 72);
    *((void *)v6 + 1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = *(void *)(a3 + 88);
    *(_OWORD *)((char *)v6 + 104) = v8;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    char v11 = 1;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MeCab::FeatureSet>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

unint64_t anonymous namespace'::__btrie_insert_fat(unint64_t result, int a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  uint64_t v6 = *(void *)(result + 56);
  uint64_t v7 = (4 * a2);
  long long v8 = (unsigned int *)(v6 + v7);
  if (!a4)
  {
LABEL_19:
    unsigned int *v8 = a5;
    return result;
  }
  int v9 = a4;
  unint64_t v11 = result;
  uint64_t v12 = (unint64_t *)(result + 64);
  while (1)
  {
    uint64_t v13 = *a3;
    long long v14 = &v8[v13];
    unsigned int v16 = v14[1];
    long long v15 = v14 + 1;
    int v17 = v16 & 3;
    unint64_t v18 = (unint64_t)v16 >> 2;
    if (v17 != 3) {
      break;
    }
    double result = v18 | 0x300000000;
    ++a3;
    LODWORD(v19) = v9 - 1;
LABEL_18:
    uint64_t v7 = (4 * result);
    long long v8 = (unsigned int *)(v6 + v7);
    int v9 = v19;
    if (!v19) {
      goto LABEL_19;
    }
  }
  if (v17 != 1)
  {
    if (v17) {
      return result;
    }
    if (*(void *)(v11 + 80) != *(void *)(v11 + 72)) {
      *(void *)(v11 + 72) = (*(void *)(v11 + 80) & 0xFFFFFFFCLL)
    }
                            + *(unsigned int *)(*(void *)(v11 + 120) + (*(void *)(v11 + 80) & 0xFFFFFFFCLL))
                            + 4;
    if (result == -1) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = (result >> 2) | 0x100000000;
    }
    _DWORD *v15 = HIDWORD(v18) | (4 * v18);
  }
  uint64_t v20 = (int *)(*(void *)(v11 + 120) + (4 * v18));
  size_t v19 = (v9 - 1);
  if (v9 == 1)
  {
    v20[1] = a5;
    int v24 = 4;
    goto LABEL_22;
  }
  uint64_t v21 = *v20;
  if (!v21)
  {
    *(void *)uint64_t v20 = 4;
    uint64_t v21 = 4;
  }
  ++a3;
  uint64_t v22 = (v9 + 4);
  uint64_t v23 = v21 + 4;
  if (v23 + v22 >= (unint64_t)*(unsigned int *)(v11 + 200))
  {
    uint64_t v6 = *(void *)(v11 + 56);
    *(_DWORD *)(v6 + v7 + 4 * v13 + 4) = HIDWORD(result) | (4 * result);
    goto LABEL_18;
  }
  *((unsigned char *)v20 + v23) = v19;
  BOOL v25 = (char *)v20 + v23 + 1;
  double result = (unint64_t)memcpy(v25, a3, v19);
  *(_DWORD *)&v25[v19] = a5;
  int v24 = *v20 + v22;
LABEL_22:
  *uint64_t v20 = v24;
  return result;
}

uint64_t btrie_build(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5 = 1;
  if (a1)
  {
    uint64_t v6 = a2;
    if (a2)
    {
      uint64_t v7 = a3;
      if (a3)
      {
        long long v8 = a4;
        if (a4)
        {
          unsigned int v48 = 1024;
          unint64_t v31 = 0;
          uint64_t v32 = 0;
          unint64_t v30 = 0x10000;
          BOOL v34 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          int v33 = 0;
          bzero(v34, 0x10000uLL);
          size_t __n = 0;
          uint64_t v37 = 0;
          size_t v35 = 0x10000;
          __src = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          int v38 = 0;
          bzero(__src, 0x10000uLL);
          size_t size = 0;
          uint64_t v42 = 0;
          size_t v40 = *(void *)(a1 + 40);
          unint64_t v11 = *(void **)(a1 + 8);
          long long v45 = *(_OWORD *)(a1 + 56);
          uint64_t v44 = a1 + 48;
          ptr = v11;
          int v43 = 1;
          bzero(v11, v40);
          uint64_t v13 = (v12 >> 2) | 0x300000000;
          if (v12 == -1) {
            uint64_t v13 = 0;
          }
          uint64_t v47 = v13;
          while (1)
          {
            uint64_t v15 = *v8++;
            int v14 = v15;
            if ((unint64_t)(v15 - 257) <= 0xFFFFFFFFFFFFFEFFLL) {
              break;
            }
            int v17 = *v7++;
            unsigned int v16 = v17;
            LODWORD(v17) = *a5++;
            if (!--v6)
            {
              unint64_t v30 = v31;
              size_t v35 = (v37 & 0xFFFFFFFC)
                  + (unint64_t)*(unsigned int *)((char *)__src + (v37 & 0xFFFFFFFC))
                  + 4;
              size_t __n = v35;
              int v20 = size;
              if (v21 == -1)
              {
                uint64_t v5 = 0xFFFFFFFFLL;
              }
              else
              {
                uint64_t v22 = v21;
                memcpy((char *)ptr + v21, __src, __n);
                int v23 = HIDWORD(v19) + 4 * v19;
                int v24 = ptr;
                BOOL v25 = (char *)ptr + v18;
                *BOOL v25 = 1;
                v25[1] = v23;
                v25[2] = v20;
                v25[3] = v22;
                uint64_t v26 = __n;
                v25[4] = __n;
                uint64_t v27 = v48;
                v25[5] = v48;
                *(_DWORD *)a1 = v23;
                *(void *)(a1 + 24) = v26;
                *(void *)(a1 + 32) = v27;
                size_t v40 = size;
                if ((void)v45) {
                  std::string::size_type v28 = (char *)((uint64_t (*)(void))v45)();
                }
                else {
                  std::string::size_type v28 = (char *)malloc_type_realloc(v24, size, 0x21AF457BuLL);
                }
                uint64_t v5 = 0;
                ptr = v28;
                *(void *)(a1 + 8) = v28;
                *(void *)(a1 + 16) = &v28[v22];
              }
              if (v34) {
                free(v34);
              }
              if (__src) {
                free(__src);
              }
              return v5;
            }
          }
          if (v34) {
            free(v34);
          }
          if (__src) {
            free(__src);
          }
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v5;
}

uint64_t anonymous namespace'::__btrie_storage_alloc_aligned(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (a3 + a1[1] - 1) & -a3;
  unint64_t v6 = v5 + a2;
  if (v5 + a2 <= *a1)
  {
LABEL_13:
    a1[1] = v6;
    a1[2] = v5;
    return v5;
  }
  while (1)
  {
    int v7 = 2 * (int)v4 ? 2 * v4 : 0x10000;
    if (!*((_DWORD *)a1 + 6)) {
      break;
    }
    long long v8 = (uint64_t (*)(void *, void, unint64_t))a1[5];
    int v9 = (void *)a1[7];
    unint64_t v4 = v7;
    if (!v8)
    {
      long long v10 = (char *)malloc_type_realloc(v9, v7, 0x64A7BD1uLL);
      a1[7] = (unint64_t)v10;
      *(_DWORD *)a1[4] = 1;
      goto LABEL_11;
    }
    a1[7] = v8(v9, v7, a1[6]);
LABEL_12:
    *a1 = v4;
    if (v6 <= v4) {
      goto LABEL_13;
    }
  }
  unint64_t v4 = v7;
  long long v10 = (char *)malloc_type_realloc((void *)a1[7], v7, 0x2715C904uLL);
  a1[7] = (unint64_t)v10;
  if (v10)
  {
LABEL_11:
    bzero(&v10[*a1], v4 - *a1);
    goto LABEL_12;
  }
  return -1;
}

uint64_t anonymous namespace'::__btrie_burst_flat(unint64_t *a1)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = MEMORY[0x270FA5388]();
  unint64_t v4 = (_DWORD *)((char *)v15 - ((v3 + 19) & 0x1FFFFFFF0));
  uint64_t v6 = (4 * v5);
  int v7 = (unsigned int *)(*(void *)(v2 + 120) + v6);
  size_t v8 = *v7;
  _DWORD *v4 = v8;
  memcpy(v4 + 1, v7 + 1, v8);
  if (a1[10] == v6)
  {
    bzero(v7, a1[9] - v6);
    a1[9] = a1[10];
  }
  if (v9 == -1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (v9 >> 2) | 0x300000000;
  }
  *(_DWORD *)(a1[7] + (4 * v10)) = v4[1];
  unint64_t v11 = (unsigned __int8 *)(v4 + 2);
  unint64_t v12 = (unint64_t)v4 + v8 + 4;
  if ((unint64_t)(v4 + 2) < v12)
  {
    do
    {
      unint64_t v13 = (unint64_t)&v11[*v11 + 5];
      unint64_t v11 = (unsigned __int8 *)v13;
    }
    while (v13 < v12);
  }
  return v10;
}

unint64_t anonymous namespace'::__btrie_build_compact_trie(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  LODWORD(v4) = a2;
  unint64_t v5 = HIDWORD(a2);
  if (HIDWORD(a2) == 3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (4 * a2);
    int32x4_t v11 = 0uLL;
    v12.i64[0] = 0x300000003;
    v12.i64[1] = 0x300000003;
    do
    {
      int32x4_t v11 = vsubq_s32(v11, vtstq_s32(*(int32x4_t *)(v10 + v9 + 4 + v8), v12));
      v8 += 16;
    }
    while (v8 != 1024);
    if (a4 || (unsigned int v13 = vaddvq_s32(v11), v13 >= 0x21))
    {
      uint64_t v25 = 0;
      if (v24 == -1) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = (v24 >> 2) | 0x300000000;
      }
      uint64_t v26 = (4 * v4);
      uint64_t v27 = (int *)(v9 + v10);
      int v29 = *v27;
      std::string::size_type v28 = v27 + 1;
      *(_DWORD *)(a3[7] + v26) = v29;
      uint64_t v30 = v26 + 4;
      do
      {
        *(_DWORD *)(a3[7] + v30 + v25 * 4) = HIDWORD(v31) + 4 * v31;
        ++v25;
      }
      while (v25 != 256);
    }
    else
    {
      uint64_t v15 = 0;
      if (v14 == -1) {
        unint64_t v4 = 0;
      }
      else {
        unint64_t v4 = (v14 >> 2) | 0x200000000;
      }
      uint64_t v16 = (4 * v4);
      int v17 = (int *)(v9 + v10);
      int v19 = *v17;
      uint64_t v18 = v17 + 1;
      uint64_t v20 = a3[7] + v16;
      *(_DWORD *)uint64_t v20 = v19;
      *(unsigned char *)(v20 + 37) = v13;
      do
      {
        if (HIDWORD(v21))
        {
          uint64_t v22 = a3[7] + v16;
          uint64_t v23 = *(unsigned __int8 *)(v22 + 36);
          *(unsigned char *)(v22 + 36) = v23 + 1;
          *(_DWORD *)(v22 + 4 * v23 + 40) = HIDWORD(v21) + 4 * v21;
          *(_DWORD *)(v22 + 4 * (v15 >> 5) + 4) |= 1 << v15;
        }
        ++v15;
      }
      while (v15 != 256);
    }
    unint64_t v5 = HIDWORD(v4);
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t mecab_system_eval(int a1, char **a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  MEMORY[0x216685530](&v56);
  MeCab::Param::Param((MeCab::Param *)v66);
  MeCab::Param::open((uint64_t)v66, a1, a2, (uint64_t)&MeCab::Eval::eval(int,char **)::long_options);
  if ((MeCab::Param::open((uint64_t)v66, a1, a2, (uint64_t)&MeCab::Eval::eval(int,char **)::long_options) & 1) == 0)
  {
    uint64_t v10 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v71);
    std::string::basic_string[abi:ne180100]<0>(&v74, v10);
    if ((v76 & 0x80u) == 0) {
      locale = &v74;
    }
    else {
      locale = v74.__locale_;
    }
    if ((v76 & 0x80u) == 0) {
      uint64_t v12 = v76;
    }
    else {
      uint64_t v12 = v75;
    }
    unsigned int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)locale, v12);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\n", 2);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\ntry '--help' for more information.", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
    int v17 = std::locale::use_facet(&v73, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v73);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v76 < 0) {
      operator delete(v74.__locale_);
    }
    goto LABEL_54;
  }
  if (MeCab::Param::help_version((MeCab::Param *)v66))
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v68 - (uint64_t)v67) >> 3) > 1)
    {
      MeCab::Param::get<std::string>((uint64_t)v66, "output", &v65);
      std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      char v20 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v65.__r_.__value_.__l.__size_;
      }
      if (!size)
      {
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        {
          v65.__r_.__value_.__l.__size_ = 1;
          unint64_t v21 = (std::string *)v65.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((unsigned char *)&v65.__r_.__value_.__s + 23) = 1;
          unint64_t v21 = &v65;
        }
        LOWORD(v21->__r_.__value_.__l.__data_) = 45;
        char v20 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      }
      if (v20 >= 0) {
        uint64_t v22 = &v65;
      }
      else {
        uint64_t v22 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      MeCab::ostream_wrapper::ostream_wrapper((MeCab::ostream_wrapper *)v63, (const char *)v22);
      if ((*((unsigned char *)v64 + *(void *)(*v64 - 24) + 32) & 5) != 0)
      {
        uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
        unint64_t v24 = (void *)std::ostream::operator<<();
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"*ofs", 4);
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
        std::string::size_type v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"no such file or directory: ", 27);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v29 = &v65;
        }
        else {
          int v29 = (std::string *)v65.__r_.__value_.__r.__words[0];
        }
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v30 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = v65.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        MeCab::die::~die((MeCab::die *)&v74);
      }
      uint64_t v31 = v67;
      if (*((char *)v67 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v67, *((void *)v67 + 1));
        uint64_t v31 = v67;
      }
      else
      {
        long long v32 = *v67;
        v62.__r_.__value_.__r.__words[2] = *((void *)v67 + 2);
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v32;
      }
      if (*((char *)v31 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v61, *((const std::string::value_type **)v31 + 3), *((void *)v31 + 4));
      }
      else {
        std::string v61 = *(std::string *)((unsigned char *)v31 + 1);
      }
      MeCab::Param::get<std::string>((uint64_t)v66, "level", &v60);
      std::ifstream::basic_ifstream((uint64_t *)&v74);
      std::ifstream::basic_ifstream((uint64_t *)&v73);
      if ((v77[*((void *)v74.__locale_ - 3)] & 5) != 0)
      {
        int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"(", 1);
        BOOL v34 = (void *)std::ostream::operator<<();
        size_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") [", 3);
        uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"ifs1", 4);
        uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"] ", 2);
        int v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"no such file or directory: ", 27);
        std::string::size_type v39 = (const char *)v67;
        if (*((char *)v67 + 23) < 0) {
          std::string::size_type v39 = *(const char **)v67;
        }
        size_t v40 = strlen(v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
        MeCab::die::~die((MeCab::die *)&v72);
      }
      if ((*((unsigned char *)&v73 + *((void *)v73.__locale_ - 3) + 32) & 5) != 0)
      {
        BOOL v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"(", 1);
        uint64_t v42 = (void *)std::ostream::operator<<();
        int v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)") [", 3);
        uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ifs2", 4);
        long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"] ", 2);
        std::locale v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"no such file or directory: ", 27);
        uint64_t v47 = (const char *)v67;
        if (*((char *)v67 + 23) < 0) {
          uint64_t v47 = *(const char **)v67;
        }
        size_t v48 = strlen(v47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
        MeCab::die::~die((MeCab::die *)&v72);
      }
      std::string::size_type v49 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v49 = v60.__r_.__value_.__l.__size_;
      }
      if (!v49)
      {
        unint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"(", 1);
        unint64_t v51 = (void *)std::ostream::operator<<();
        uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)") [", 3);
        std::string::size_type v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"!level_str.empty()", 18);
        uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"level_str is NULL", 17);
        MeCab::die::~die((MeCab::die *)&v72);
      }
      std::string __p = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      v72.__locale_ = (std::locale::__imp *)&unk_26C3C3A28;
      operator new[]();
    }
    unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Usage: ", 7);
    if (v70 >= 0) {
      unint64_t v5 = (const char *)&v69;
    }
    else {
      unint64_t v5 = v69;
    }
    size_t v6 = strlen(v5);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" output answer", 14);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    uint64_t v9 = std::locale::use_facet(&v74, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v74);
    std::ostream::put();
    std::ostream::flush();
LABEL_54:
    uint64_t v18 = 1;
    goto LABEL_55;
  }
  uint64_t v18 = 0;
LABEL_55:
  MeCab::Param::~Param(v66);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v56);
  return v18;
}

void sub_2128D5B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56)
{
  if (a47 < 0) {
    operator delete(a42);
  }
  a48 = &unk_26C3C3700;
  if (a49 != MEMORY[0x263F8C100] && a49) {
    (*(void (**)(void))(*(void *)a49 + 8))();
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  MeCab::Param::~Param(&a56);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a25);
  _Unwind_Resume(a1);
}

uint64_t mecab_test_gen(int a1, char **a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  MEMORY[0x216685530](&v35);
  MeCab::Param::Param((MeCab::Param *)v41);
  MeCab::Param::open((uint64_t)v41, a1, a2, (uint64_t)&MeCab::TestSentenceGenerator::run(int,char **)::long_options);
  if (MeCab::Param::open((uint64_t)v41, a1, a2, (uint64_t)&MeCab::TestSentenceGenerator::run(int,char **)::long_options))
  {
    if (MeCab::Param::help_version((MeCab::Param *)v41))
    {
      memset(&v40, 0, sizeof(v40));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, v42, v43, 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (char *)v42) >> 3));
      if (v40.__r_.__value_.__r.__words[0] == v40.__r_.__value_.__l.__size_)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "-");
        std::string::size_type size = (_OWORD *)v40.__r_.__value_.__l.__size_;
        if (v40.__r_.__value_.__l.__size_ >= v40.__r_.__value_.__r.__words[2])
        {
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556
             * ((uint64_t)(v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0]) >> 3) > v16)
            unint64_t v16 = 0x5555555555555556
                * ((uint64_t)(v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v17 = v16;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v40.__r_.__value_.__r.__words[2];
          if (v17) {
            uint64_t v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v40.__r_.__value_.__r.__words[2], v17);
          }
          else {
            uint64_t v18 = 0;
          }
          int v19 = v18 + v15;
          __v.__first_ = v18;
          __v.__begin_ = v19;
          __v.__end_cap_.__value_ = &v18[v17];
          long long v20 = *(_OWORD *)__p;
          v19->__r_.__value_.__r.__words[2] = v39;
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
          __p[1] = 0;
          std::string::size_type v39 = 0;
          __p[0] = 0;
          __v.__end_ = v19 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v40, &__v);
          std::string::size_type v21 = v40.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v40.__r_.__value_.__l.__size_ = v21;
          if (SHIBYTE(v39) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v5 = *(_OWORD *)__p;
          *(void *)(v40.__r_.__value_.__l.__size_ + 16) = v39;
          *std::string::size_type size = v5;
          v40.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
        }
      }
      MeCab::Param::get<std::string>((uint64_t)v41, "output", (std::string *)&__v);
      std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
      char v23 = HIBYTE(__v.__end_);
      if (SHIBYTE(__v.__end_) < 0) {
        std::__split_buffer<std::string>::pointer end_high = __v.__begin_;
      }
      if (!end_high)
      {
        if (SHIBYTE(__v.__end_) < 0)
        {
          __v.__begin_ = (std::__split_buffer<std::string>::pointer)1;
          first = __v.__first_;
        }
        else
        {
          HIBYTE(__v.__end_) = 1;
          first = &__v;
        }
        _WORD *first = 45;
        char v23 = HIBYTE(__v.__end_);
      }
      if (v23 >= 0) {
        p_v = (const char *)&__v;
      }
      else {
        p_v = (const char *)__v.__first_;
      }
      MeCab::ostream_wrapper::ostream_wrapper((MeCab::ostream_wrapper *)&v36, p_v);
      if ((*((unsigned char *)v37 + *(void *)(*v37 - 24) + 32) & 5) != 0)
      {
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
        uint64_t v27 = (void *)std::ostream::operator<<();
        std::string::size_type v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") [", 3);
        int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"*ofs", 4);
        std::string::size_type v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] ", 2);
        uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"permission denied: ", 19);
        if (SHIBYTE(__v.__end_) >= 0) {
          long long v32 = &__v;
        }
        else {
          long long v32 = __v.__first_;
        }
        if (SHIBYTE(__v.__end_) >= 0) {
          uint64_t begin = HIBYTE(__v.__end_);
        }
        else {
          uint64_t begin = (uint64_t)__v.__begin_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, begin);
        MeCab::die::~die((MeCab::die *)__p);
      }
      __p[0] = &unk_26C3C3A28;
      operator new[]();
    }
    uint64_t v14 = 0;
  }
  else
  {
    size_t v6 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v44);
    std::string::basic_string[abi:ne180100]<0>(&__v, v6);
    if (SHIBYTE(__v.__end_) >= 0) {
      int v7 = &__v;
    }
    else {
      int v7 = __v.__first_;
    }
    if (SHIBYTE(__v.__end_) >= 0) {
      uint64_t v8 = HIBYTE(__v.__end_);
    }
    else {
      uint64_t v8 = (uint64_t)__v.__begin_;
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v7, v8);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n\n", 2);
    int32x4_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\ntry '--help' for more information.", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    unsigned int v13 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale((std::locale *)&v40);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  MeCab::Param::~Param(v41);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v35);
  return v14;
}

void sub_2128D6718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,std::locale *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::locale a31,uint64_t a32,uint64_t a33,void *a34)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v34 - 160));
  if (a30 < 0) {
    operator delete(__p);
  }
  std::string __p = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  MeCab::Param::~Param(&a34);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a14);
  _Unwind_Resume(a1);
}

uint64_t MeCab::Eval::read(void *a1)
{
  if ((*(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0) {
    operator new[]();
  }
  return 0;
}

void sub_2128D709C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::locale a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21) {
    MEMORY[0x2166855A0](a21, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::ostream_wrapper::~ostream_wrapper(MeCab::ostream_wrapper *this)
{
  *(void *)this = &unk_26C3C3700;
  uint64_t v1 = *((void *)this + 1);
  if (v1 != MEMORY[0x263F8C100] && v1 != 0) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26C3C3700;
  uint64_t v1 = *((void *)this + 1);
  if (v1 != MEMORY[0x263F8C100] && v1 != 0) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

MeCab::ostream_wrapper *MeCab::ostream_wrapper::ostream_wrapper(MeCab::ostream_wrapper *this, const char *__s1)
{
  *(void *)this = &unk_26C3C3700;
  *((void *)this + 1) = 0;
  if (strcmp(__s1, "-")) {
    operator new();
  }
  *((void *)this + 1) = MEMORY[0x263F8C100];
  return this;
}

void sub_2128D72A4(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

void *MeCab::scoped_fixed_array<char *,512>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3A88;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x10C80436913F5);
  }
  return a1;
}

void MeCab::scoped_fixed_array<char *,512>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3A88;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x10C80436913F5);
  }

  JUMPOUT(0x2166855D0);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2128D7584(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2128D7600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  int32x4_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      size_t v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2128D7720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t std::__split_buffer<std::vector<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    size_t v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        size_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void MeCab::istream_wrapper::~istream_wrapper(MeCab::istream_wrapper *this)
{
  *(void *)this = &unk_26C3C36E0;
  uint64_t v1 = *((void *)this + 1);
  if (v1 != MEMORY[0x263F8C0E8] && v1 != 0) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26C3C36E0;
  uint64_t v1 = *((void *)this + 1);
  if (v1 != MEMORY[0x263F8C0E8] && v1 != 0) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

MeCab::istream_wrapper *MeCab::istream_wrapper::istream_wrapper(MeCab::istream_wrapper *this, const char *__s1)
{
  *(void *)this = &unk_26C3C36E0;
  *((void *)this + 1) = 0;
  if (strcmp(__s1, "-")) {
    operator new();
  }
  *((void *)this + 1) = MEMORY[0x263F8C0E8];
  return this;
}

void sub_2128D799C(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10F1C40A09425BCLL);
  _Unwind_Resume(a1);
}

unsigned __int16 *Thai::seekToSyllableEnd(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v2 = a1;
  if ((unint64_t)a1 < a2)
  {
    if ((int v4 = *a1, v4 == 46)
      || v4 == 3654
      || ((v5 = v4 - 3585, unsigned int v6 = v4 - 3648, v5 >= 0x2E) ? (v7 = v6 > 4) : (v7 = 0), !v7))
    {
      char v8 = 0;
      while (1)
      {
        int v9 = *v2;
        unsigned int v10 = v9 - 3632;
        if ((v9 - 3648) >= 0xE
          && (unsigned __int16)(v9 - 3585) >= 0x2Eu
          && (unsigned __int16)(v9 - 3632) > 0xAu)
        {
          return v2;
        }
        if (v8)
        {
          BOOL v15 = Thai::isEndingChar(*v2) == 0;
          double result = v2 + 1;
          if (!v15 && (unint64_t)result < a2)
          {
            int v14 = *result;
            if (v14 == 46 || v14 == 3654 || (v14 - 3585) < 0x2E || (v14 - 3648) < 5) {
              return result;
            }
          }
        }
        BOOL v15 = v10 > 3 || v10 == 1;
        if (!v15) {
          return v2 + 1;
        }
        if ((unsigned __int16)(v9 - 3648) <= 4u) {
          break;
        }
        if (v9 == 3633)
        {
LABEL_37:
          if (Thai::isEndingChar(v9))
          {
            double result = v2 + 1;
            if ((unint64_t)(v2 + 1) < a2)
            {
              int v18 = *result;
              if (v18 == 46 || v18 == 3654 || (v18 - 3585) < 0x2E || (v18 - 3648) < 5) {
                return result;
              }
            }
          }
          goto LABEL_43;
        }
        if (v9 == 3631) {
          return v2 + 1;
        }
        uint64_t v16 = 1;
        while (v16 != 13)
        {
          int v17 = __const__ZN4Thai13isVowelSymbolEDs_kThaiVowels[v16++];
          if (v17 == v9)
          {
            if ((unint64_t)(v16 - 2) > 0xB) {
              break;
            }
            goto LABEL_37;
          }
        }
LABEL_44:
        double result = ++v2;
        if ((unint64_t)v2 >= a2) {
          return result;
        }
      }
      if (v8) {
        return v2;
      }
LABEL_43:
      char v8 = 1;
      goto LABEL_44;
    }
  }
  return v2;
}

uint64_t Thai::isEndingChar(int a1)
{
  if ((a1 - 3597) < 0xF) {
    return 1;
  }
  if ((a1 - 3585) >= 0xB)
  {
    if ((a1 - 3614) < 0xD) {
      return 1;
    }
  }
  else
  {
    uint64_t v1 = 1;
    if (((0x6FFu >> (a1 - 1)) & 1) != 0 || (unsigned __int16)(a1 - 3614) <= 0xCu) {
      return v1;
    }
  }
  uint64_t v1 = 1;
  if ((a1 - 3628) > 0x1A || ((1 << (a1 - 44)) & 0x4000013) == 0)
  {
    BOOL v2 = (a1 - 3634) < 9 || (a1 - 3653) < 0xA;
    return a1 == 46 || v2;
  }
  return v1;
}

const char *MeCab::FeatureIndex::getIndex(MeCab::FeatureIndex *this, char **a2, char **a3)
{
  uint64_t v3 = (*(void *)this)++;
  int v4 = *(unsigned __int8 *)(v3 + 1);
  int v21 = v4;
  if (v4 == 63)
  {
    *(void *)this = v3 + 2;
    int v4 = *(unsigned __int8 *)(v3 + 2);
  }
  if (v4 != 91)
  {
    unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
    unsigned int v6 = (void *)std::ostream::operator<<();
    BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") [", 3);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"**p == '['", 10);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"getIndex(): unmatched '['", 25);
    MeCab::die::~die((MeCab::die *)&v23);
  }
  unint64_t v10 = 0;
  int32x4_t v11 = (void *)MEMORY[0x263F8C0F8];
  while (1)
  {
    long long v12 = (char *)(*(void *)this + 1);
    *(void *)this = v12;
    int v13 = *v12;
    if ((v13 - 48) >= 0xA) {
      break;
    }
    unint64_t v10 = *v12 + 10 * v10 - 48;
  }
  if (v13 != 93)
  {
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
    BOOL v15 = (void *)std::ostream::operator<<();
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"false", 5);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"unmatched '['", 13);
    MeCab::die::~die((MeCab::die *)&v22);
  }
  if (v10 >= (unint64_t)a3) {
    return 0;
  }
  int v19 = a2[v10];
  if (v21 == 63 && (!strcmp("*", v19) || !*v19)) {
    return 0;
  }
  return v19;
}

void sub_2128D7EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_2128D7ED8()
{
  _Unwind_Resume(v0);
}

void MeCab::FeatureIndex::openTemplate(MeCab::FeatureIndex *this, const MeCab::Param *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", v13);
  std::string::basic_string[abi:ne180100]<0>(__p, "feature.def");
  MeCab::create_filename((uint64_t)v13, (uint64_t)__p, &v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13[0].__r_.__value_.__l.__data_);
  }
  std::ifstream::basic_ifstream((uint64_t *)v13);
  if ((v13[1].__r_.__value_.__s.__data_[*(void *)(v13[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
  {
    BOOL v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") [", 3);
    unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ifs", 3);
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"] ", 2);
    BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"no such file or directory: ", 27);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v8 = &v10;
    }
    else {
      char v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v10.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
    MeCab::die::~die((MeCab::die *)__p);
  }
  operator new[]();
}

void sub_2128D86F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a31) {
    MEMORY[0x2166855A0](a31, 0x1000C8077774924);
  }
  std::ifstream::~ifstream(&a47);
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *MeCab::FeatureIndex::strdup(MeCab::FeatureIndex *this, const char *__s)
{
  size_t v4 = strlen(__s);
  unsigned int v5 = (void *)((char *)this + 88);
  size_t v6 = v4 + 1;
  BOOL v7 = (char *)MeCab::ChunkFreeList<char>::alloc(v5, v4 + 1);

  return strncpy(v7, __s, v6);
}

void MeCab::EncoderFeatureIndex::open(MeCab::EncoderFeatureIndex *this, const MeCab::Param *a2)
{
}

void MeCab::DecoderFeatureIndex::open(MeCab::DecoderFeatureIndex *this, const MeCab::Param *a2)
{
  MeCab::Param::get<std::string>((uint64_t)a2, "model", &__p);
  if (!MeCab::DecoderFeatureIndex::openBinaryModel(this, a2))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)p_p, size);
    BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is not a binary model. reopen it as text mode...", 49);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    char v8 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v10);
    std::ostream::put();
    std::ostream::flush();
    MeCab::DecoderFeatureIndex::openTextModel(this, a2);
  }
  MeCab::FeatureIndex::openTemplate(this, a2);
}

void sub_2128D8A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL MeCab::DecoderFeatureIndex::openBinaryModel(MeCab::DecoderFeatureIndex *this, const MeCab::Param *a2)
{
  MeCab::Param::get<std::string>((uint64_t)a2, "model", &v38);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v4 = &v38;
  }
  else {
    size_t v4 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((MeCab::Mmap<char>::open((uint64_t)this + 344, (char *)v4, "r") & 1) == 0)
  {
    unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
    size_t v6 = (void *)std::ostream::operator<<();
    BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") [", 3);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"mmap_.open(modelfile.c_str())", 29);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    std::locale v10 = (char *)MeCab::whatlog::str((MeCab::DecoderFeatureIndex *)((char *)this + 392));
    std::string::basic_string[abi:ne180100]<0>(&__p, v10);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    MeCab::die::~die((MeCab::die *)&v37);
  }
  int v13 = (unsigned int *)*((void *)this + 44);
  uint64_t v14 = *((void *)this + 45);
  uint64_t v15 = *v13;
  *((void *)this + 41) = v15;
  uint64_t v16 = 16 * v15 + 36;
  if (v16 == v14)
  {
    *((void *)this + 90) = v13 + 1;
    int v17 = v13 + 9;
    *((void *)this + 42) = v17;
    *((void *)this + 89) = &v17[2 * v15];
    MeCab::Param::get<std::string>((uint64_t)a2, "charset", &__p);
    int v20 = MeCab::decode_charset(*((MeCab **)this + 90), v18);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v21 = (MeCab *)&__p;
    }
    else {
      int v21 = (MeCab *)__p.__r_.__value_.__r.__words[0];
    }
    if (v20 != MeCab::decode_charset(v21, v19))
    {
      char v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
      char v23 = (void *)std::ostream::operator<<();
      unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") [", 3);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"decode_charset(charset_) == decode_charset(to.c_str())", 54);
      uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"model charset and dictionary charset are different. ", 52);
      std::string::size_type v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"model_charset=", 14);
      int v29 = (const char *)*((void *)this + 90);
      size_t v30 = strlen(v29);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" dictionary_charset=", 20);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v33 = &__p;
      }
      else {
        int v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
      MeCab::die::~die((MeCab::die *)&v37);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    MeCab::Mmap<char>::close((uint64_t)this + 344);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  return v16 == v14;
}

void sub_2128D8D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::DecoderFeatureIndex::openTextModel(MeCab::DecoderFeatureIndex *this, const MeCab::Param *a2)
{
  MeCab::Param::get<std::string>((uint64_t)a2, "model", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  MeCab::FeatureIndex::convert((uint64_t)a2, (const char *)p_p);
}

void sub_2128D8E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::FeatureIndex::convert(uint64_t a1, const char *a2)
{
  v11[72] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v11);
  if ((*((unsigned char *)&v11[4] + *(void *)(v11[0] - 24)) & 5) != 0)
  {
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    size_t v4 = (void *)std::ostream::operator<<();
    unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") [", 3);
    size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ifs", 3);
    BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"] ", 2);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"no such file or directory: ", 27);
    size_t v9 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
    MeCab::die::~die((MeCab::die *)v10);
  }
  operator new[]();
}

void sub_2128D9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  MeCab::Iconv::~Iconv((MeCab::Iconv *)&a15);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (v49) {
    operator delete(v49);
  }
  a35 = a12;
  if (a36) {
    MEMORY[0x2166855A0](a36, 0x1000C8077774924);
  }
  std::ifstream::~ifstream(&a49);
  _Unwind_Resume(a1);
}

uint64_t MeCab::DecoderFeatureIndex::clear(uint64_t this)
{
  *(void *)(this + 64) = 0;
  *(void *)(this + 72) = 0;
  return this;
}

void MeCab::EncoderFeatureIndex::clearcache(char **this)
{
  this[47] = 0;
  this[48] = 0;
  this[46] = (char *)(this + 47);
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)(this + 33), this[34]);
  this[34] = 0;
  this[35] = 0;
  this[33] = (char *)(this + 34);
}

void MeCab::EncoderFeatureIndex::close(char **this)
{
  this[44] = 0;
  this[45] = 0;
  this[43] = (char *)(this + 44);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 46), this[47]);
  this[47] = 0;
  this[48] = 0;
  this[46] = (char *)(this + 47);
  this[41] = 0;
}

void *MeCab::DecoderFeatureIndex::close(MeCab::DecoderFeatureIndex *this)
{
  double result = MeCab::Mmap<char>::close((uint64_t)this + 344);
  if (*((char *)this + 711) < 0)
  {
    **((unsigned char **)this + 86) = 0;
    *((void *)this + 87) = 0;
  }
  else
  {
    *((unsigned char *)this + 688) = 0;
    *((unsigned char *)this + 711) = 0;
  }
  *((void *)this + 41) = 0;
  return result;
}

double MeCab::FeatureIndex::calcCost(uint64_t a1, double *a2, double result)
{
  double v3 = *a2;
  if (*(void *)(*(void *)a2 + 32) || *(unsigned char *)(*(void *)&v3 + 87) == 3)
  {
    uint64_t v4 = *((void *)a2 + 2);
    if (*(void *)(v4 + 40) || *(unsigned char *)(v4 + 87) == 2)
    {
      double result = *(double *)(*(void *)&v3 + 112);
      a2[4] = result;
      unsigned int v5 = (int *)*((void *)a2 + 5);
      int v6 = *v5;
      if (*v5 != -1)
      {
        uint64_t v7 = *(void *)(a1 + 336);
        char v8 = v5 + 1;
        do
        {
          double result = result + *(double *)(v7 + 8 * v6);
          a2[4] = result;
          int v9 = *v8++;
          int v6 = v9;
        }
        while (v9 != -1);
      }
    }
  }
  return result;
}

uint64_t MeCab::ChunkFreeList<char>::alloc(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2] - v3;
  unint64_t v5 = a1[5];
  if (v5 >= v4 >> 4) {
LABEL_5:
  }
    operator new[]();
  uint64_t v6 = v4 >> 4;
  uint64_t v7 = a1[4];
  char v8 = (void *)(v3 + 16 * v5 + 8);
  while ((unint64_t)(v7 + a2) >= *(v8 - 1))
  {
    uint64_t v7 = 0;
    ++v5;
    a1[4] = 0;
    a1[5] = v5;
    v8 += 2;
    if (v6 == v5) {
      goto LABEL_5;
    }
  }
  uint64_t result = *v8 + v7;
  a1[4] = v7 + a2;
  return result;
}

void MeCab::DecoderFeatureIndex::buildFeature(uint64_t a1, void *a2)
{
  a2[4] = 0;
  *(void *)(*a2 + 112) = 0;
  memset(&v26, 0, sizeof(v26));
  memset(&v25, 0, sizeof(v25));
  memset(&v24, 0, sizeof(v24));
  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  memset(&v21, 0, sizeof(v21));
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(a2[2] + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v26, &v25, &v24) & 1) == 0)
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    unint64_t v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"rewrite_.rewrite2(path->lnode->feature, &ufeature1, &lfeature1, &rfeature1)", 75);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" cannot rewrite pattern: ", 25);
    size_t v10 = strlen(*(const char **)(a2[2] + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(a2[2] + 64), v10);
    MeCab::die::~die((MeCab::die *)&v18);
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(*a2 + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v23, &v22, &v21) & 1) == 0)
  {
    int32x4_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    char v12 = (void *)std::ostream::operator<<();
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"rewrite_.rewrite2(path->rnode->feature, &ufeature2, &lfeature2, &rfeature2)", 75);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" cannot rewrite pattern: ", 25);
    size_t v17 = strlen(*(const char **)(*a2 + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(void *)(*a2 + 64), v17);
    MeCab::die::~die((MeCab::die *)&v18);
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  MeCab::FeatureIndex::buildUnigramFeature();
}

void sub_2128DA238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (*(char *)(v43 - 73) < 0) {
    operator delete(*(void **)(v43 - 96));
  }
  if (*(char *)(v43 - 49) < 0) {
    operator delete(*(void **)(v42 + 24));
  }
  _Unwind_Resume(exception_object);
}

void MeCab::FeatureIndex::buildUnigramFeature()
{
}

void sub_2128DAA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a20) {
    MEMORY[0x2166855A0](a20, 0x10C80436913F5);
  }
  if (a23) {
    MEMORY[0x2166855A0](a23, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::FeatureIndex::buildBigramFeature()
{
}

void sub_2128DB360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a23) {
    MEMORY[0x2166855A0](a23, 0x10C80436913F5);
  }
  if (a26) {
    MEMORY[0x2166855A0](a26, 0x10C80436913F5);
  }
  if (a29) {
    MEMORY[0x2166855A0](a29, 0x1000C8077774924);
  }
  *(void *)(v29 - 120) = a14;
  uint64_t v31 = *(void *)(v29 - 112);
  if (v31) {
    MEMORY[0x2166855A0](v31, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::EncoderFeatureIndex::buildFeature(uint64_t a1, void *a2)
{
  a2[4] = 0;
  *(void *)(*a2 + 112) = 0;
  memset(&v44, 0, sizeof(v44));
  memset(&v43, 0, sizeof(v43));
  memset(&v42, 0, sizeof(v42));
  memset(&v41, 0, sizeof(v41));
  memset(&v40, 0, sizeof(v40));
  memset(&v39, 0, sizeof(v39));
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(a2[2] + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v44, &v43, &v42) & 1) == 0)
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    unint64_t v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"rewrite_.rewrite2(path->lnode->feature, &ufeature1, &lfeature1, &rfeature1)", 75);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" cannot rewrite pattern: ", 25);
    size_t v10 = strlen(*(const char **)(a2[2] + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(a2[2] + 64), v10);
    MeCab::die::~die((MeCab::die *)&v45);
  }
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(*a2 + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v41, &v40, &v39) & 1) == 0)
  {
    int32x4_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    char v12 = (void *)std::ostream::operator<<();
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"rewrite_.rewrite2(path->rnode->feature, &ufeature2, &lfeature2, &rfeature2)", 75);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" cannot rewrite pattern: ", 25);
    size_t v17 = strlen(*(const char **)(*a2 + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(void *)(*a2 + 64), v17);
    MeCab::die::~die((MeCab::die *)&v45);
  }
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 296) = 0;
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v18 = &v41;
  }
  else {
    char v18 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), (const char *)v18);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1)) {
    *(unsigned char *)(*(void *)(a1 + 312) + (*(void *)(a1 + 296))++) = 32;
  }
  char v19 = *(unsigned char *)(*a2 + 86);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1)) {
    *(unsigned char *)(*(void *)(a1 + 312) + (*(void *)(a1 + 296))++) = v19;
  }
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1)) {
    *(unsigned char *)(*(void *)(a1 + 312) + (*(void *)(a1 + 296))++) = 0;
  }
  if (*(unsigned char *)(a1 + 321)) {
    char v20 = 0;
  }
  else {
    char v20 = *(char **)(a1 + 312);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v20);
  std::string v21 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 368, __p);
  if ((void **)(a1 + 376) == v21) {
    MeCab::FeatureIndex::buildUnigramFeature();
  }
  *(void *)(*a2 + 128) = v21[7];
  v21[8] = (char *)v21[8] + 1;
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 296) = 0;
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v22 = &v42;
  }
  else {
    std::string v22 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), (const char *)v22);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1)) {
    *(unsigned char *)(*(void *)(a1 + 312) + (*(void *)(a1 + 296))++) = 32;
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v23 = &v40;
  }
  else {
    std::string v23 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), (const char *)v23);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1)) {
    *(unsigned char *)(*(void *)(a1 + 312) + (*(void *)(a1 + 296))++) = 0;
  }
  if (*(unsigned char *)(a1 + 321)) {
    std::string v24 = 0;
  }
  else {
    std::string v24 = *(char **)(a1 + 312);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v24);
  std::string v25 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 368, __p);
  if ((void **)(a1 + 376) == v25) {
    MeCab::FeatureIndex::buildBigramFeature();
  }
  a2[5] = v25[7];
  v25[8] = (char *)v25[8] + 1;
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  if (!a2[5])
  {
    std::string v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::string::size_type v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") [", 3);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"path->fvector", 13);
    size_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" fvector is NULL", 16);
    MeCab::die::~die((MeCab::die *)__p);
  }
  if (!*(void *)(*a2 + 128))
  {
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
    long long v32 = (void *)std::ostream::operator<<();
    int v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") [", 3);
    std::string::size_type v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"path->rnode->fvector", 20);
    char v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"fevector is NULL", 16);
    MeCab::die::~die((MeCab::die *)__p);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_2128DBB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  operator delete(v44);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  _Unwind_Resume(a1);
}

MeCab::StringBuffer *MeCab::StringBuffer::operator<<(MeCab::StringBuffer *a1, unint64_t a2)
{
  *(void *)&v11[63] = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v2 = 0;
  do
  {
    v11[v2++ - 1] = (a2 % 0xA) | 0x30;
    BOOL v3 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v3);
  if (v2)
  {
    uint64_t v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    uint64_t v4 = v11;
    char __s = 48;
  }
  char *v4 = 0;
  unint64_t v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    uint64_t v6 = v11;
    do
    {
      char v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return MeCab::StringBuffer::write(a1, &__s);
}

uint64_t MeCab::ChunkFreeList<int>::alloc(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2] - v3;
  unint64_t v5 = a1[5];
  if (v5 >= v4 >> 4) {
LABEL_5:
  }
    operator new[]();
  uint64_t v6 = v4 >> 4;
  uint64_t v7 = a1[4];
  char v8 = (void *)(v3 + 16 * v5 + 8);
  while ((unint64_t)(v7 + a2) >= *(v8 - 1))
  {
    uint64_t v7 = 0;
    ++v5;
    a1[4] = 0;
    a1[5] = v5;
    v8 += 2;
    if (v6 == v5) {
      goto LABEL_5;
    }
  }
  uint64_t result = *v8 + 4 * v7;
  a1[4] = v7 + a2;
  return result;
}

void *MeCab::scoped_fixed_array<char *,64>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3AE8;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x10C80436913F5);
  }
  return a1;
}

void *MeCab::scoped_fixed_array<char,2048>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3AB8;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8077774924);
  }
  return a1;
}

unint64_t MeCab::DecoderFeatureIndex::id(MeCab::DecoderFeatureIndex *this, char *__s)
{
  size_t v4 = strlen(__s);
  unint64_t v5 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)&v21, (uint64_t *)__s, v4);
  unint64_t v6 = *((void *)this + 41);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = (char *)*((void *)this + 89);
  char v8 = &v7[8 * v6];
  int v9 = v7;
  do
  {
    unint64_t v10 = v6 >> 1;
    int32x4_t v11 = (unint64_t *)&v9[8 * (v6 >> 1)];
    unint64_t v13 = *v11;
    char v12 = (char *)(v11 + 1);
    v6 += ~(v6 >> 1);
    if (v13 < v5) {
      int v9 = v12;
    }
    else {
      unint64_t v6 = v10;
    }
  }
  while (v6);
  if (v9 == v8 || *(void *)v9 != v5) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v14 = (unint64_t)(v9 - v7) >> 3;
  if (*(void *)&v7[8 * (int)v14] != v5)
  {
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    uint64_t v16 = (void *)std::ostream::operator<<();
    size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    char v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"key_[n] == fp", 13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)&v20);
  }
  return v14;
}

void sub_2128DC09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
}

void sub_2128DC0A8()
{
  _Unwind_Resume(v0);
}

uint64_t MeCab::EncoderFeatureIndex::id(MeCab::EncoderFeatureIndex *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  size_t v4 = (void **)((char *)this + 352);
  unint64_t v5 = (void *)*((void *)this + 44);
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v6 = (void **)((char *)this + 352);
  do
  {
    char v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, __p);
    if (v7 >= 0) {
      char v8 = v5;
    }
    else {
      char v8 = v5 + 1;
    }
    if (v7 >= 0) {
      unint64_t v6 = (void **)v5;
    }
    unint64_t v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v4
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v6 + 4) & 0x80) != 0)
  {
LABEL_11:
    unint64_t v6 = (void **)((char *)this + 352);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (v4 != v6) {
    return *((unsigned int *)v6 + 14);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, a2);
  uint64_t v10 = *((void *)this + 41);
  *(_OWORD *)std::string __p = *(_OWORD *)v11;
  uint64_t v14 = v12;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  int v15 = v10;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>((uint64_t **)this + 43, __p, (uint64_t)__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  uint64_t result = *((void *)this + 41);
  *((void *)this + 41) = result + 1;
  return result;
}

void sub_2128DC1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::EncoderFeatureIndex::shrink(void *a1, unint64_t a2, char *a3)
{
  if (a2 < 2) {
    return;
  }
  v107 = 0;
  v108 = 0;
  v109 = 0;
  unint64_t v5 = a1[41];
  if (v5)
  {
    if (v5 >> 61) {
      std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v109, v5);
    char v8 = &v6[8 * v7];
    bzero(v6, 8 * v5);
    v107 = v6;
    v108 = &v6[8 * v5];
    v109 = v8;
  }
  else
  {
    unint64_t v6 = 0;
  }
  int v9 = (void *)a1[46];
  uint64_t v10 = a1 + 47;
  if (v9 != a1 + 47)
  {
    do
    {
      int32x4_t v11 = (int *)v9[7];
      int v12 = *v11;
      if (*v11 != -1)
      {
        unint64_t v13 = v11 + 1;
        do
        {
          *(void *)&v6[8 * v12] += v9[8];
          int v14 = *v13++;
          int v12 = v14;
        }
        while (v14 != -1);
      }
      int v15 = (void *)v9[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          int v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v9[2];
          BOOL v62 = *v16 == (void)v9;
          int v9 = v16;
        }
        while (!v62);
      }
      int v9 = v16;
    }
    while (v16 != v10);
  }
  a1[41] = 0;
  v105 = 0;
  uint64_t v106 = 0;
  v104 = &v105;
  size_t v17 = v108;
  if (v108 != v6)
  {
    unint64_t v18 = 0;
    do
    {
      if (*(void *)&v6[8 * v18] >= a2)
      {
        uint64_t v19 = a1[41];
        a1[41] = v19 + 1;
        char v20 = &v105;
        char v21 = &v105;
        if (v105)
        {
          std::string v22 = v105;
          while (1)
          {
            while (1)
            {
              char v21 = (uint64_t **)v22;
              int v23 = *((_DWORD *)v22 + 7);
              if (v23 <= (int)v18) {
                break;
              }
              std::string v22 = *v21;
              char v20 = v21;
              if (!*v21) {
                goto LABEL_27;
              }
            }
            if (v23 >= (int)v18) {
              break;
            }
            std::string v22 = v21[1];
            if (!v22)
            {
              char v20 = v21 + 1;
              goto LABEL_27;
            }
          }
        }
        else
        {
LABEL_27:
          std::string v24 = operator new(0x28uLL);
          v24[7] = v18;
          v24[8] = v19;
          *(void *)std::string v24 = 0;
          *((void *)v24 + 1) = 0;
          *((void *)v24 + 2) = v21;
          *char v20 = (uint64_t *)v24;
          if (*v104)
          {
            v104 = (uint64_t **)*v104;
            std::string v24 = *v20;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v105, (uint64_t *)v24);
          unint64_t v6 = (char *)v107;
          ++v106;
          size_t v17 = v108;
        }
      }
      ++v18;
    }
    while (v18 < (v17 - v6) >> 3);
  }
  std::string v25 = (char *)a1[43];
  if (v25 == (char *)(a1 + 44)) {
    goto LABEL_138;
  }
  do
  {
    std::string v26 = v105;
    if (v105)
    {
      int v27 = *((_DWORD *)v25 + 14);
      std::string::size_type v28 = &v105;
      do
      {
        uint64_t v29 = v26;
        size_t v30 = v28;
        int v31 = *((_DWORD *)v26 + 7);
        long long v32 = (uint64_t **)(v26 + 1);
        if (v31 >= v27)
        {
          long long v32 = (uint64_t **)v29;
          std::string::size_type v28 = (uint64_t **)v29;
        }
        std::string v26 = *v32;
      }
      while (v26);
      if (v28 != &v105)
      {
        int v33 = v31 >= v27 ? v29 : (uint64_t *)v30;
        if (v27 >= *((_DWORD *)v33 + 7))
        {
          if (v31 >= v27) {
            uint64_t v45 = v29;
          }
          else {
            uint64_t v45 = v30;
          }
          *((_DWORD *)v25 + 14) = v45[8];
          uint64_t v46 = (char *)*((void *)v25 + 1);
          if (v46)
          {
            do
            {
              char v37 = v46;
              uint64_t v46 = *(char **)v46;
            }
            while (v46);
          }
          else
          {
            do
            {
              char v37 = (char *)*((void *)v25 + 2);
              BOOL v62 = *(void *)v37 == (void)v25;
              std::string v25 = v37;
            }
            while (!v62);
          }
          goto LABEL_137;
        }
      }
    }
    std::string::size_type v34 = (char *)*((void *)v25 + 1);
    char v35 = v34;
    uint64_t v36 = v25;
    if (v34)
    {
      do
      {
        char v37 = v35;
        char v35 = *(char **)v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        char v37 = (char *)*((void *)v36 + 2);
        BOOL v62 = *(void *)v37 == (void)v36;
        uint64_t v36 = v37;
      }
      while (!v62);
    }
    char v38 = v25;
    if (v34)
    {
      do
      {
        std::string v39 = v34;
        std::string::size_type v34 = *(char **)v34;
      }
      while (v34);
    }
    else
    {
      do
      {
        std::string v39 = (char *)*((void *)v38 + 2);
        BOOL v62 = *(void *)v39 == (void)v38;
        char v38 = v39;
      }
      while (!v62);
    }
    if ((char *)a1[43] == v25) {
      a1[43] = v39;
    }
    std::string v40 = (char *)a1[44];
    --a1[45];
    uint64_t v41 = *(void *)v25;
    std::string v42 = v25;
    if (*(void *)v25)
    {
      std::string v43 = (char *)*((void *)v25 + 1);
      if (!v43)
      {
        std::string v42 = v25;
LABEL_69:
        int v44 = 0;
        *(void *)(v41 + 16) = *((void *)v42 + 2);
        goto LABEL_70;
      }
      do
      {
        std::string v42 = v43;
        std::string v43 = *(char **)v43;
      }
      while (v43);
    }
    uint64_t v41 = *((void *)v42 + 1);
    if (v41) {
      goto LABEL_69;
    }
    int v44 = 1;
LABEL_70:
    uint64_t v47 = (char **)*((void *)v42 + 2);
    size_t v48 = *v47;
    if (*v47 == v42)
    {
      *uint64_t v47 = (char *)v41;
      if (v42 == v40)
      {
        size_t v48 = 0;
        std::string v40 = (char *)v41;
      }
      else
      {
        size_t v48 = v47[1];
      }
    }
    else
    {
      v47[1] = (char *)v41;
    }
    int v49 = v42[24];
    if (v42 != v25)
    {
      uint64_t v50 = *((void *)v25 + 2);
      *((void *)v42 + 2) = v50;
      *(void *)(v50 + 8 * (**((void **)v25 + 2) != (void)v25)) = v42;
      uint64_t v51 = *(void *)v25;
      *(void *)std::string v42 = *(void *)v25;
      *(void *)(v51 + 16) = v42;
      uint64_t v52 = *((void *)v25 + 1);
      *((void *)v42 + 1) = v52;
      if (v52) {
        *(void *)(v52 + 16) = v42;
      }
      v42[24] = v25[24];
      if (v40 == v25) {
        std::string v40 = v42;
      }
    }
    if (!v49 || !v40) {
      goto LABEL_134;
    }
    if (!v44)
    {
      *(unsigned char *)(v41 + 24) = 1;
      goto LABEL_134;
    }
    while (1)
    {
      uint64_t v53 = *((void *)v48 + 2);
      if (*(char **)v53 != v48) {
        break;
      }
      if (!v48[24])
      {
        v48[24] = 1;
        *(unsigned char *)(v53 + 24) = 0;
        uint64_t v59 = *((void *)v48 + 1);
        *(void *)uint64_t v53 = v59;
        if (v59) {
          *(void *)(v59 + 16) = v53;
        }
        *((void *)v48 + 2) = *(void *)(v53 + 16);
        *(void *)(*(void *)(v53 + 16) + 8 * (**(void **)(v53 + 16) != v53)) = v48;
        *((void *)v48 + 1) = v53;
        *(void *)(v53 + 16) = v48;
        if (v40 == (char *)v53) {
          std::string v40 = v48;
        }
        size_t v48 = *(char **)v53;
      }
      std::string v60 = *(char **)v48;
      if (*(void *)v48 && !v60[24]) {
        goto LABEL_129;
      }
      std::string v61 = (uint64_t *)*((void *)v48 + 1);
      if (v61 && !*((unsigned char *)v61 + 24))
      {
        if (v60 && !v60[24])
        {
LABEL_129:
          std::string v61 = (uint64_t *)v48;
        }
        else
        {
          *((unsigned char *)v61 + 24) = 1;
          v48[24] = 0;
          uint64_t v67 = *v61;
          *((void *)v48 + 1) = *v61;
          if (v67) {
            *(void *)(v67 + 16) = v48;
          }
          v61[2] = *((void *)v48 + 2);
          *(void *)(*((void *)v48 + 2) + 8 * (**((void **)v48 + 2) != (void)v48)) = v61;
          *std::string v61 = (uint64_t)v48;
          *((void *)v48 + 2) = v61;
          std::string v60 = v48;
        }
        uint64_t v64 = v61[2];
        *((unsigned char *)v61 + 24) = *(unsigned char *)(v64 + 24);
        *(unsigned char *)(v64 + 24) = 1;
        v60[24] = 1;
        std::string v65 = *(uint64_t **)v64;
        uint64_t v68 = *(void *)(*(void *)v64 + 8);
        *(void *)uint64_t v64 = v68;
        if (v68) {
          *(void *)(v68 + 16) = v64;
        }
        v65[2] = *(void *)(v64 + 16);
        *(void *)(*(void *)(v64 + 16) + 8 * (**(void **)(v64 + 16) != v64)) = v65;
        v65[1] = v64;
        goto LABEL_133;
      }
      v48[24] = 0;
      uint64_t v58 = (char *)*((void *)v48 + 2);
      if (v58[24]) {
        BOOL v62 = v58 == v40;
      }
      else {
        BOOL v62 = 1;
      }
      if (v62) {
        goto LABEL_114;
      }
LABEL_111:
      size_t v48 = *(char **)(*((void *)v58 + 2) + 8 * (**((void **)v58 + 2) == (void)v58));
    }
    if (!v48[24])
    {
      v48[24] = 1;
      *(unsigned char *)(v53 + 24) = 0;
      uint64_t v54 = *(uint64_t **)(v53 + 8);
      uint64_t v55 = *v54;
      *(void *)(v53 + 8) = *v54;
      if (v55) {
        *(void *)(v55 + 16) = v53;
      }
      v54[2] = *(void *)(v53 + 16);
      *(void *)(*(void *)(v53 + 16) + 8 * (**(void **)(v53 + 16) != v53)) = v54;
      *uint64_t v54 = v53;
      *(void *)(v53 + 16) = v54;
      if (v40 == *(char **)v48) {
        std::string v40 = v48;
      }
      size_t v48 = *(char **)(*(void *)v48 + 8);
    }
    char v56 = *(char **)v48;
    if (!*(void *)v48 || v56[24])
    {
      v57 = (char *)*((void *)v48 + 1);
      if (v57 && !v57[24]) {
        goto LABEL_120;
      }
      v48[24] = 0;
      uint64_t v58 = (char *)*((void *)v48 + 2);
      if (v58 == v40)
      {
        uint64_t v58 = v40;
LABEL_114:
        v58[24] = 1;
        goto LABEL_134;
      }
      if (!v58[24]) {
        goto LABEL_114;
      }
      goto LABEL_111;
    }
    v57 = (char *)*((void *)v48 + 1);
    if (v57 && !v57[24])
    {
LABEL_120:
      char v56 = v48;
    }
    else
    {
      v56[24] = 1;
      v48[24] = 0;
      uint64_t v63 = *((void *)v56 + 1);
      *(void *)size_t v48 = v63;
      if (v63) {
        *(void *)(v63 + 16) = v48;
      }
      *((void *)v56 + 2) = *((void *)v48 + 2);
      *(void *)(*((void *)v48 + 2) + 8 * (**((void **)v48 + 2) != (void)v48)) = v56;
      *((void *)v56 + 1) = v48;
      *((void *)v48 + 2) = v56;
      v57 = v48;
    }
    uint64_t v64 = *((void *)v56 + 2);
    v56[24] = *(unsigned char *)(v64 + 24);
    *(unsigned char *)(v64 + 24) = 1;
    v57[24] = 1;
    std::string v65 = *(uint64_t **)(v64 + 8);
    uint64_t v66 = *v65;
    *(void *)(v64 + 8) = *v65;
    if (v66) {
      *(void *)(v66 + 16) = v64;
    }
    v65[2] = *(void *)(v64 + 16);
    *(void *)(*(void *)(v64 + 16) + 8 * (**(void **)(v64 + 16) != v64)) = v65;
    *std::string v65 = v64;
LABEL_133:
    *(void *)(v64 + 16) = v65;
LABEL_134:
    if (v25[55] < 0) {
      operator delete(*((void **)v25 + 4));
    }
    operator delete(v25);
LABEL_137:
    std::string v25 = v37;
  }
  while (v37 != (char *)(a1 + 44));
LABEL_138:
  long long v69 = (void *)a1[46];
  if (v69 != v10)
  {
    char v70 = v105;
    do
    {
      uint64_t v71 = (_DWORD *)v69[7];
      int v72 = *v71;
      std::locale v73 = v71;
      while (v72 != -1)
      {
        if (v70)
        {
          std::locale v74 = &v105;
          uint64_t v75 = v70;
          do
          {
            unsigned __int8 v76 = v75;
            long long v77 = v74;
            int v78 = *((_DWORD *)v75 + 7);
            if (v78 >= v72) {
              std::locale v74 = (uint64_t **)v75;
            }
            else {
              ++v75;
            }
            uint64_t v75 = (uint64_t *)*v75;
          }
          while (v75);
          if (v74 != &v105)
          {
            uint64_t v79 = v78 >= v72 ? (uint64_t **)v76 : v77;
            if (v72 >= *((_DWORD *)v79 + 7))
            {
              if (v78 >= v72) {
                long long v80 = (uint64_t **)v76;
              }
              else {
                long long v80 = v77;
              }
              *v71++ = *((_DWORD *)v80 + 8);
            }
          }
        }
        int v81 = v73[1];
        ++v73;
        int v72 = v81;
      }
      *uint64_t v71 = -1;
      std::locale v82 = (void *)v69[1];
      if (v82)
      {
        do
        {
          uint64_t v83 = v82;
          std::locale v82 = (void *)*v82;
        }
        while (v82);
      }
      else
      {
        do
        {
          uint64_t v83 = (void *)v69[2];
          BOOL v62 = *v83 == (void)v69;
          long long v69 = v83;
        }
        while (!v62);
      }
      long long v69 = v83;
    }
    while (v83 != v10);
  }
  unint64_t v84 = a1[41];
  v102 = 0;
  uint64_t v103 = 0;
  std::string __p = 0;
  if (v84)
  {
    std::vector<double>::__vallocate[abi:ne180100](&__p, v84);
    uint64_t v85 = (char *)v102;
    bzero(v102, 8 * v84);
    v86 = &v85[8 * v84];
    v102 = v86;
    v87 = (char *)__p;
  }
  else
  {
    v86 = 0;
    v87 = 0;
  }
  uint64_t v88 = *(void *)a3;
  uint64_t v89 = *((void *)a3 + 1);
  uint64_t v90 = v89 - *(void *)a3;
  if (v89 != *(void *)a3)
  {
    uint64_t v91 = 0;
    unint64_t v92 = v90 >> 3;
    uint64_t v93 = v105;
    if (v92 <= 1) {
      unint64_t v92 = 1;
    }
    do
    {
      if (v93)
      {
        v94 = &v105;
        char v95 = v93;
        do
        {
          v96 = (uint64_t **)v95;
          v97 = v94;
          int v98 = *((_DWORD *)v95 + 7);
          if (v98 >= (int)v91) {
            v94 = (uint64_t **)v95;
          }
          else {
            ++v95;
          }
          char v95 = (uint64_t *)*v95;
        }
        while (v95);
        if (v94 != &v105)
        {
          uint64_t v99 = v98 >= (int)v91 ? v96 : v97;
          if (*((_DWORD *)v99 + 7) <= (int)v91)
          {
            if (v98 < (int)v91) {
              v96 = v97;
            }
            *(void *)&v87[8 * *((int *)v96 + 8)] = *(void *)(v88 + 8 * v91);
          }
        }
      }
      ++v91;
    }
    while (v91 != v92);
  }
  if (&__p != (void **)a3)
  {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(a3, v87, (uint64_t)v86, (v86 - v87) >> 3);
    v87 = (char *)__p;
  }
  if (v87)
  {
    v102 = v87;
    operator delete(v87);
  }
  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(v105);
  if (v107)
  {
    v108 = (char *)v107;
    operator delete(v107);
  }
}

void sub_2128DCAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(a14);
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void MeCab::FeatureIndex::compile(MeCab::FeatureIndex *this, const MeCab::Param *a2, const char *a3, const char *a4)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  MeCab::FeatureIndex::convert((uint64_t)this, (const char *)a2);
}

void sub_2128DCD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MeCab::EncoderFeatureIndex::reopen(uint64_t a1)
{
  v4[19] = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  std::ifstream::basic_ifstream(v2);
  if ((*(_DWORD *)&v3[*(void *)(v2[0] - 24) + 16] & 5) == 0) {
    operator new[]();
  }
  v2[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v3);
  std::istream::~istream();
  MEMORY[0x216685570](v4);
  return 0;
}

void sub_2128DD8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  a34 = a11;
  if (a35) {
    MEMORY[0x2166855A0](a35, 0x1000C8077774924);
  }
  std::ifstream::~ifstream(&a46);
  _Unwind_Resume(a1);
}

void MeCab::Param::set<std::string>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  v16[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v13, a2);
  if ((a4 & 1) != 0
    || (void **)(a1 + 16) == std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 8, v13))
  {
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    v16[0] = __p.__r_.__value_.__l.__size_;
    std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
    *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    int v15 = v13;
    int v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), v13, (uint64_t)&std::piecewise_construct, (long long **)&v15);
    uint64_t v10 = v9;
    if (*((char *)v9 + 79) < 0) {
      operator delete((void *)v9[7]);
    }
    uint64_t v11 = v16[0];
    v10[7] = v7;
    v10[8] = v11;
    *(uint64_t *)((char *)v10 + 71) = *(void *)((char *)v16 + 7);
    *((unsigned char *)v10 + 79) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_2128DDB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MeCab::EncoderFeatureIndex::save(MeCab::EncoderFeatureIndex *this, const char *a2, const char *a3)
{
  v32[19] = *MEMORY[0x263EF8340];
  if (!a3)
  {
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::string::size_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") [", 3);
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"header", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)&v30);
  }
  if (!*((void *)this + 42))
  {
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
    uint64_t v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"alpha_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)&v30);
  }
  std::ofstream::basic_ofstream(&v30);
  uint64_t v13 = v30;
  char v14 = &v31[*(void *)(v30 - 24) - 8];
  int v15 = *((_DWORD *)v14 + 8) & 5;
  if (!v15)
  {
    *((_DWORD *)v14 + 2) = *((_DWORD *)v14 + 2) & 0xFFFFFEFB | 4;
    *(void *)&v31[*(void *)(v13 - 24) + 8] = 16;
    size_t v16 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)a3, v16);
    std::ios_base::getloc((const std::ios_base *)&v31[*(void *)(v30 - 24) - 8]);
    size_t v17 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v18 = (MeCab::EncoderFeatureIndex *)*((void *)this + 43);
    if (v18 != (MeCab::EncoderFeatureIndex *)((char *)this + 352))
    {
      do
      {
        uint64_t v19 = (void *)std::ostream::operator<<();
        LOBYTE(v29.__locale_) = 9;
        char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v29, 1);
        int v21 = *((char *)v18 + 55);
        if (v21 >= 0) {
          uint64_t v22 = (uint64_t)v18 + 32;
        }
        else {
          uint64_t v22 = *((void *)v18 + 4);
        }
        if (v21 >= 0) {
          uint64_t v23 = *((unsigned __int8 *)v18 + 55);
        }
        else {
          uint64_t v23 = *((void *)v18 + 5);
        }
        std::string v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
        LOBYTE(v29.__locale_) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v29, 1);
        std::string v25 = (MeCab::EncoderFeatureIndex *)*((void *)v18 + 1);
        if (v25)
        {
          do
          {
            std::string v26 = v25;
            std::string v25 = *(MeCab::EncoderFeatureIndex **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            std::string v26 = (MeCab::EncoderFeatureIndex *)*((void *)v18 + 2);
            BOOL v27 = *(void *)v26 == (void)v18;
            unint64_t v18 = v26;
          }
          while (!v27);
        }
        unint64_t v18 = v26;
      }
      while (v26 != (MeCab::EncoderFeatureIndex *)((char *)this + 352));
    }
  }
  uint64_t v30 = *MEMORY[0x263F8C2B0];
  *(void *)&v31[*(void *)(v30 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x2166853A0](v31);
  std::ostream::~ostream();
  MEMORY[0x216685570](v32);
  return v15 == 0;
}

void sub_2128DDF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
}

void MeCab::EncoderFeatureIndex::~EncoderFeatureIndex(char **this)
{
  *this = (char *)&unk_26C3C37B0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 46), this[47]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 43), this[44]);

  MeCab::FeatureIndex::~FeatureIndex((MeCab::FeatureIndex *)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_26C3C37B0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 46), this[47]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 43), this[44]);
  MeCab::FeatureIndex::~FeatureIndex((MeCab::FeatureIndex *)this);

  JUMPOUT(0x2166855D0);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  std::string::size_type v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  char v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
LABEL_1:
  v166 = (unint64_t *)(a2 - 16);
  unint64_t v10 = (unint64_t)a1;
  while (1)
  {
    a1 = (unint64_t *)v10;
    uint64_t v11 = a2 - v10;
    unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v78 = *(void *)(a2 - 16);
          unint64_t v79 = *(void *)v10;
          if (v78 == *(void *)v10)
          {
            double v80 = *(double *)(a2 - 8);
            double v81 = *(double *)(v10 + 8);
            if (v80 == v81) {
              unsigned __int8 v82 = 0;
            }
            else {
              unsigned __int8 v82 = -127;
            }
            if (v80 > v81) {
              unsigned __int8 v82 = 1;
            }
            if (v80 < v81) {
              unsigned __int8 v82 = -1;
            }
          }
          else if (v78 < *(void *)v10)
          {
            unsigned __int8 v82 = -1;
          }
          else
          {
            unsigned __int8 v82 = 1;
          }
          if (v82 != 129 && (v82 & 0x80) != 0)
          {
            *(void *)unint64_t v10 = v78;
            *(void *)(a2 - 16) = v79;
            uint64_t v151 = *(void *)(v10 + 8);
            *(void *)(v10 + 8) = *(void *)(a2 - 8);
            *(void *)(a2 - 8) = v151;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)v10, (unint64_t *)(v10 + 16), v166);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v10, v10 + 16, v10 + 32, (uint64_t)v166);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v10, v10 + 16, v10 + 32, v10 + 48, (uint64_t)v166);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return;
      }
      int64_t v100 = (v12 - 2) >> 1;
      int64_t v101 = v100;
      do
      {
        int64_t v102 = v101;
        if (v100 >= v101)
        {
          uint64_t v103 = (2 * v101) | 1;
          unint64_t v104 = v10 + 16 * v103;
          if (2 * v102 + 2 < (uint64_t)v12)
          {
            unint64_t v105 = *(void *)(v104 + 16);
            if (*(void *)v104 == v105)
            {
              double v106 = *(double *)(v10 + 16 * v103 + 8);
              double v107 = *(double *)(v104 + 24);
              if (v106 == v107) {
                char v108 = 0;
              }
              else {
                char v108 = -127;
              }
              if (v106 > v107) {
                char v108 = 1;
              }
              if (v106 < v107) {
                char v108 = -1;
              }
            }
            else if (*(void *)v104 < v105)
            {
              char v108 = -1;
            }
            else
            {
              char v108 = 1;
            }
            if (v108 != 129 && v108 < 0)
            {
              v104 += 16;
              uint64_t v103 = 2 * v102 + 2;
            }
          }
          unint64_t v109 = v10 + 16 * v102;
          uint64_t v110 = *(void *)v104;
          unint64_t v111 = *(void *)v109;
          if (*(void *)v104 == *(void *)v109)
          {
            double v112 = *(double *)(v104 + 8);
            double v113 = *(double *)(v10 + 16 * v102 + 8);
            if (v112 == v113) {
              unsigned __int8 v114 = 0;
            }
            else {
              unsigned __int8 v114 = -127;
            }
            if (v112 > v113) {
              unsigned __int8 v114 = 1;
            }
            if (v112 < v113) {
              unsigned __int8 v114 = -1;
            }
          }
          else if (*(void *)v104 < *(void *)v109)
          {
            unsigned __int8 v114 = -1;
          }
          else
          {
            unsigned __int8 v114 = 1;
          }
          if (v114 == 129 || (v114 & 0x80) == 0)
          {
            double v115 = *(double *)(v109 + 8);
            do
            {
              v116 = (void *)v109;
              unint64_t v109 = v104;
              void *v116 = v110;
              v116[1] = *(void *)(v104 + 8);
              if (v100 < v103) {
                break;
              }
              uint64_t v117 = (2 * v103) | 1;
              unint64_t v104 = v10 + 16 * v117;
              uint64_t v103 = 2 * v103 + 2;
              if (v103 < (uint64_t)v12)
              {
                unint64_t v118 = *(void *)(v104 + 16);
                if (*(void *)v104 == v118)
                {
                  double v119 = *(double *)(v10 + 16 * v117 + 8);
                  double v120 = *(double *)(v104 + 24);
                  if (v119 == v120) {
                    char v121 = 0;
                  }
                  else {
                    char v121 = -127;
                  }
                  if (v119 > v120) {
                    char v121 = 1;
                  }
                  if (v119 < v120) {
                    char v121 = -1;
                  }
                }
                else
                {
                  char v121 = *(void *)v104 < v118 ? -1 : 1;
                }
                if (v121 != 129 && v121 < 0) {
                  v104 += 16;
                }
                else {
                  uint64_t v103 = v117;
                }
              }
              else
              {
                uint64_t v103 = v117;
              }
              uint64_t v110 = *(void *)v104;
              if (*(void *)v104 == v111)
              {
                double v122 = *(double *)(v104 + 8);
                if (v122 == v115) {
                  unsigned __int8 v123 = 0;
                }
                else {
                  unsigned __int8 v123 = -127;
                }
                if (v122 > v115) {
                  unsigned __int8 v123 = 1;
                }
                if (v122 < v115) {
                  unsigned __int8 v123 = -1;
                }
              }
              else
              {
                unsigned __int8 v123 = *(void *)v104 < v111 ? -1 : 1;
              }
            }
            while (v123 == 129 || (v123 & 0x80) == 0);
            *(void *)unint64_t v109 = v111;
            *(double *)(v109 + 8) = v115;
          }
        }
        int64_t v101 = v102 - 1;
      }
      while (v102);
      uint64_t v124 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v125 = 0;
        unint64_t v126 = *(void *)v10;
        double v127 = *(double *)(v10 + 8);
        uint64_t v128 = v124 - 2;
        if (v124 < 2) {
          uint64_t v128 = v124 - 1;
        }
        uint64_t v129 = v128 >> 1;
        v130 = (void *)v10;
        do
        {
          uint64_t v131 = v125 + 1;
          v132 = (double *)&v130[2 * v125 + 2];
          uint64_t v133 = (2 * v125) | 1;
          uint64_t v134 = 2 * v125 + 2;
          if (v134 < v124)
          {
            unint64_t v135 = *((void *)v132 + 2);
            if (*(void *)v132 == v135)
            {
              double v136 = *(double *)&v130[2 * v131 + 1];
              double v137 = v132[3];
              if (v136 == v137) {
                char v138 = 0;
              }
              else {
                char v138 = -127;
              }
              if (v136 > v137) {
                char v138 = 1;
              }
              if (v136 < v137) {
                char v138 = -1;
              }
            }
            else if (*(void *)v132 < v135)
            {
              char v138 = -1;
            }
            else
            {
              char v138 = 1;
            }
            if (v138 != 129 && v138 < 0)
            {
              v132 += 2;
              uint64_t v133 = v134;
            }
          }
          void *v130 = *(void *)v132;
          v130[1] = *((void *)v132 + 1);
          v130 = v132;
          uint64_t v125 = v133;
        }
        while (v133 <= v129);
        if (v132 != (double *)(a2 - 16))
        {
          double *v132 = *(double *)(a2 - 16);
          v132[1] = *(double *)(a2 - 8);
          *(void *)(a2 - 16) = v126;
          *(double *)(a2 - 8) = v127;
          uint64_t v139 = (uint64_t)v132 - v10 + 16;
          if (v139 >= 17)
          {
            unint64_t v140 = (((unint64_t)v139 >> 4) - 2) >> 1;
            unint64_t v141 = v10 + 16 * v140;
            uint64_t v142 = *(void *)v141;
            double v143 = *v132;
            if (*(void *)v141 == *(void *)v132)
            {
              double v144 = *(double *)(v141 + 8);
              double v145 = v132[1];
              if (v144 == v145) {
                unsigned __int8 v146 = 0;
              }
              else {
                unsigned __int8 v146 = -127;
              }
              if (v144 > v145) {
                unsigned __int8 v146 = 1;
              }
              if (v144 < v145) {
                unsigned __int8 v146 = -1;
              }
            }
            else
            {
              unsigned __int8 v146 = *(void *)v141 < *(void *)v132 ? -1 : 1;
            }
            if (v146 != 129 && (v146 & 0x80) != 0)
            {
              double v127 = v132[1];
              do
              {
                v147 = v132;
                v132 = (double *)v141;
                *(void *)v147 = v142;
                v147[1] = *(double *)(v141 + 8);
                if (!v140) {
                  break;
                }
                unint64_t v140 = (v140 - 1) >> 1;
                unint64_t v141 = v10 + 16 * v140;
                uint64_t v142 = *(void *)v141;
                if (*(void *)v141 == *(void *)&v143)
                {
                  double v148 = *(double *)(v141 + 8);
                  if (v148 == v127) {
                    unsigned __int8 v149 = 0;
                  }
                  else {
                    unsigned __int8 v149 = -127;
                  }
                  if (v148 > v127) {
                    unsigned __int8 v149 = 1;
                  }
                  if (v148 < v127) {
                    unsigned __int8 v149 = -1;
                  }
                }
                else
                {
                  unsigned __int8 v149 = *(void *)v141 < *(void *)&v143 ? -1 : 1;
                }
              }
              while (v149 != 129 && (v149 & 0x80) != 0);
              double *v132 = v143;
LABEL_382:
              v132[1] = v127;
            }
          }
          a2 -= 16;
          if (v124-- <= 2) {
            return;
          }
          continue;
        }
        break;
      }
      *(void *)v132 = v126;
      goto LABEL_382;
    }
    unint64_t v13 = v12 >> 1;
    char v14 = (unint64_t *)(v10 + 16 * (v12 >> 1));
    if ((unint64_t)v11 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, &a1[2 * (v12 >> 1)], v166);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1 + 2, v14 - 2, (unint64_t *)(a2 - 32));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1 + 4, &a1[2 * v13 + 2], (unint64_t *)(a2 - 48));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v14 - 2, v14, &a1[2 * v13 + 2]);
      unint64_t v15 = *a1;
      *a1 = *v14;
      unint64_t *v14 = v15;
      unint64_t v16 = a1[1];
      a1[1] = v14[1];
      v14[1] = v16;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(&a1[2 * (v12 >> 1)], a1, v166);
    }
    --a3;
    unint64_t v17 = *a1;
    if (a4) {
      goto LABEL_23;
    }
    unint64_t v18 = *(a1 - 2);
    if (v18 == v17)
    {
      double v19 = *((double *)a1 - 1);
      double v20 = *((double *)a1 + 1);
      if (v19 == v20) {
        unsigned __int8 v21 = 0;
      }
      else {
        unsigned __int8 v21 = -127;
      }
      if (v19 > v20) {
        unsigned __int8 v21 = 1;
      }
      if (v19 < v20) {
        unsigned __int8 v21 = -1;
      }
    }
    else
    {
      unsigned __int8 v21 = v18 < v17 ? -1 : 1;
    }
    if (v21 != 129 && (v21 & 0x80) != 0)
    {
LABEL_23:
      uint64_t v22 = 0;
      double v23 = *((double *)a1 + 1);
      do
      {
        unint64_t v24 = a1[v22 + 2];
        if (v24 == v17)
        {
          double v25 = *(double *)&a1[v22 + 3];
          if (v25 == v23) {
            unsigned __int8 v26 = 0;
          }
          else {
            unsigned __int8 v26 = -127;
          }
          if (v25 > v23) {
            unsigned __int8 v26 = 1;
          }
          if (v25 < v23) {
            unsigned __int8 v26 = -1;
          }
        }
        else if (v24 < v17)
        {
          unsigned __int8 v26 = -1;
        }
        else
        {
          unsigned __int8 v26 = 1;
        }
        v22 += 2;
      }
      while (v26 != 129 && (v26 & 0x80) != 0);
      BOOL v27 = &a1[v22];
      std::string::size_type v28 = (double *)a2;
      if (v22 == 2)
      {
        int v33 = (double *)a2;
        while (v27 < (unint64_t *)v33)
        {
          std::locale v29 = (unint64_t *)(v33 - 2);
          unint64_t v34 = *((void *)v33 - 2);
          if (v34 == v17)
          {
            double v35 = *(v33 - 1);
            if (v35 == v23) {
              char v36 = 0;
            }
            else {
              char v36 = -127;
            }
            if (v35 > v23) {
              char v36 = 1;
            }
            if (v35 < v23) {
              unsigned __int8 v37 = -1;
            }
            else {
              unsigned __int8 v37 = v36;
            }
          }
          else if (v34 < v17)
          {
            unsigned __int8 v37 = -1;
          }
          else
          {
            unsigned __int8 v37 = 1;
          }
          int v33 = (double *)v29;
          if (v37 != 129)
          {
            int v33 = (double *)v29;
            if ((v37 & 0x80) != 0) {
              goto LABEL_70;
            }
          }
        }
        std::locale v29 = (unint64_t *)v33;
      }
      else
      {
        while (1)
        {
          std::locale v29 = (unint64_t *)(v28 - 2);
          unint64_t v30 = *((void *)v28 - 2);
          if (v30 == v17)
          {
            double v31 = *(v28 - 1);
            if (v31 == v23) {
              unsigned __int8 v32 = 0;
            }
            else {
              unsigned __int8 v32 = -127;
            }
            if (v31 > v23) {
              unsigned __int8 v32 = 1;
            }
            if (v31 < v23) {
              unsigned __int8 v32 = -1;
            }
          }
          else if (v30 < v17)
          {
            unsigned __int8 v32 = -1;
          }
          else
          {
            unsigned __int8 v32 = 1;
          }
          v28 -= 2;
          if (v32 != 129)
          {
            std::string::size_type v28 = (double *)v29;
            if ((v32 & 0x80) != 0) {
              break;
            }
          }
        }
      }
LABEL_70:
      if (v27 >= v29)
      {
        unint64_t v10 = (unint64_t)v27;
      }
      else
      {
        unint64_t v38 = *v29;
        unint64_t v10 = (unint64_t)v27;
        std::string v39 = (double *)v29;
        do
        {
          *(void *)unint64_t v10 = v38;
          *(void *)std::string v39 = v24;
          uint64_t v40 = *(void *)(v10 + 8);
          *(double *)(v10 + 8) = v39[1];
          *((void *)v39 + 1) = v40;
          unint64_t v41 = v10;
          do
          {
            unint64_t v42 = *(void *)(v10 + 16);
            v10 += 16;
            unint64_t v24 = v42;
            BOOL v43 = v42 >= v17;
            if (v42 == v17)
            {
              double v44 = *(double *)(v41 + 24);
              if (v44 == v23) {
                unsigned __int8 v45 = 0;
              }
              else {
                unsigned __int8 v45 = -127;
              }
              if (v44 > v23) {
                unsigned __int8 v45 = 1;
              }
              if (v44 < v23) {
                unsigned __int8 v45 = -1;
              }
            }
            else if (v43)
            {
              unsigned __int8 v45 = 1;
            }
            else
            {
              unsigned __int8 v45 = -1;
            }
            if (v45 == 129) {
              break;
            }
            unint64_t v41 = v10;
          }
          while ((v45 & 0x80) != 0);
          while (1)
          {
            uint64_t v46 = v39 - 2;
            unint64_t v38 = *((void *)v39 - 2);
            if (v38 == v17)
            {
              double v47 = *(v39 - 1);
              if (v47 == v23) {
                char v48 = 0;
              }
              else {
                char v48 = -127;
              }
              if (v47 > v23) {
                char v48 = 1;
              }
              if (v47 < v23) {
                unsigned __int8 v49 = -1;
              }
              else {
                unsigned __int8 v49 = v48;
              }
            }
            else if (v38 < v17)
            {
              unsigned __int8 v49 = -1;
            }
            else
            {
              unsigned __int8 v49 = 1;
            }
            std::string v39 = v46;
            if (v49 != 129)
            {
              std::string v39 = v46;
              if ((v49 & 0x80) != 0) {
                break;
              }
            }
          }
          std::string v39 = v46;
        }
        while (v10 < (unint64_t)v46);
      }
      if ((unint64_t *)(v10 - 16) != a1)
      {
        *a1 = *(void *)(v10 - 16);
        a1[1] = *(void *)(v10 - 8);
      }
      *(void *)(v10 - 16) = v17;
      *(double *)(v10 - 8) = v23;
      if (v27 < v29) {
        goto LABEL_108;
      }
      BOOL v50 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((uint64_t)a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(v10, a2))
      {
        a2 = v10 - 16;
        if (v50) {
          return;
        }
        goto LABEL_1;
      }
      if (!v50)
      {
LABEL_108:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v51 = *((double *)a1 + 1);
      if (v17 == *v166)
      {
        double v52 = *(double *)(a2 - 8);
        if (v51 == v52) {
          unsigned __int8 v53 = 0;
        }
        else {
          unsigned __int8 v53 = -127;
        }
        if (v51 > v52) {
          unsigned __int8 v53 = 1;
        }
        if (v51 < v52) {
          unsigned __int8 v53 = -1;
        }
      }
      else if (v17 < *v166)
      {
        unsigned __int8 v53 = -1;
      }
      else
      {
        unsigned __int8 v53 = 1;
      }
      if (v53 == 129 || (v53 & 0x80) == 0)
      {
        uint64_t v58 = a1 + 2;
        do
        {
          unint64_t v10 = (unint64_t)v58;
          if ((unint64_t)v58 >= a2) {
            break;
          }
          if (v17 == *v58)
          {
            double v59 = *((double *)v58 + 1);
            if (v51 == v59) {
              unsigned __int8 v60 = 0;
            }
            else {
              unsigned __int8 v60 = -127;
            }
            if (v51 > v59) {
              unsigned __int8 v60 = 1;
            }
            if (v51 < v59) {
              unsigned __int8 v60 = -1;
            }
          }
          else
          {
            unsigned __int8 v60 = v17 < *v58 ? -1 : 1;
          }
          v58 += 2;
        }
        while (v60 == 129 || (v60 & 0x80) == 0);
      }
      else
      {
        unint64_t v54 = (unint64_t)a1;
        while (1)
        {
          unint64_t v10 = v54 + 16;
          unint64_t v55 = *(void *)(v54 + 16);
          if (v17 == v55)
          {
            double v56 = *(double *)(v54 + 24);
            if (v51 == v56) {
              unsigned __int8 v57 = 0;
            }
            else {
              unsigned __int8 v57 = -127;
            }
            if (v51 > v56) {
              unsigned __int8 v57 = 1;
            }
            if (v51 < v56) {
              unsigned __int8 v57 = -1;
            }
          }
          else if (v17 < v55)
          {
            unsigned __int8 v57 = -1;
          }
          else
          {
            unsigned __int8 v57 = 1;
          }
          v54 += 16;
          if (v57 != 129)
          {
            unint64_t v54 = v10;
            if ((v57 & 0x80) != 0) {
              break;
            }
          }
        }
      }
      std::string v61 = (double *)a2;
      if (v10 < a2)
      {
        BOOL v62 = (double *)a2;
        std::string v61 = (double *)a2;
        do
        {
          unint64_t v63 = *((void *)v61 - 2);
          v61 -= 2;
          BOOL v64 = v17 >= v63;
          if (v17 == v63)
          {
            double v65 = *(v62 - 1);
            if (v51 == v65) {
              unsigned __int8 v66 = 0;
            }
            else {
              unsigned __int8 v66 = -127;
            }
            if (v51 > v65) {
              unsigned __int8 v66 = 1;
            }
            if (v51 < v65) {
              unsigned __int8 v66 = -1;
            }
          }
          else if (v64)
          {
            unsigned __int8 v66 = 1;
          }
          else
          {
            unsigned __int8 v66 = -1;
          }
          if (v66 == 129) {
            break;
          }
          BOOL v62 = v61;
        }
        while ((v66 & 0x80) != 0);
      }
      if (v10 < (unint64_t)v61)
      {
        unint64_t v67 = *(void *)v10;
        unint64_t v68 = *(void *)v61;
        do
        {
          *(void *)unint64_t v10 = v68;
          *(void *)std::string v61 = v67;
          uint64_t v69 = *(void *)(v10 + 8);
          *(double *)(v10 + 8) = v61[1];
          *((void *)v61 + 1) = v69;
          unint64_t v70 = v10;
          while (1)
          {
            unint64_t v10 = v70 + 16;
            unint64_t v67 = *(void *)(v70 + 16);
            if (v17 == v67)
            {
              double v71 = *(double *)(v70 + 24);
              if (v51 == v71) {
                unsigned __int8 v72 = 0;
              }
              else {
                unsigned __int8 v72 = -127;
              }
              if (v51 > v71) {
                unsigned __int8 v72 = 1;
              }
              if (v51 < v71) {
                unsigned __int8 v72 = -1;
              }
            }
            else if (v17 < v67)
            {
              unsigned __int8 v72 = -1;
            }
            else
            {
              unsigned __int8 v72 = 1;
            }
            v70 += 16;
            if (v72 != 129)
            {
              unint64_t v70 = v10;
              if ((v72 & 0x80) != 0) {
                break;
              }
            }
          }
          std::locale v73 = v61;
          do
          {
            unint64_t v74 = *((void *)v61 - 2);
            v61 -= 2;
            unint64_t v68 = v74;
            BOOL v75 = v17 >= v74;
            if (v17 == v74)
            {
              double v76 = *(v73 - 1);
              if (v51 == v76) {
                unsigned __int8 v77 = 0;
              }
              else {
                unsigned __int8 v77 = -127;
              }
              if (v51 > v76) {
                unsigned __int8 v77 = 1;
              }
              if (v51 < v76) {
                unsigned __int8 v77 = -1;
              }
            }
            else if (v75)
            {
              unsigned __int8 v77 = 1;
            }
            else
            {
              unsigned __int8 v77 = -1;
            }
            if (v77 == 129) {
              break;
            }
            std::locale v73 = v61;
          }
          while ((v77 & 0x80) != 0);
        }
        while (v10 < (unint64_t)v61);
      }
      BOOL v4 = v10 - 16 >= (unint64_t)a1;
      BOOL v5 = v10 - 16 == (void)a1;
      if ((unint64_t *)(v10 - 16) != a1)
      {
        *a1 = *(void *)(v10 - 16);
        a1[1] = *(void *)(v10 - 8);
      }
      a4 = 0;
      *(void *)(v10 - 16) = v17;
      *(double *)(v10 - 8) = v51;
    }
  }
  uint64_t v83 = (unint64_t *)(v10 + 16);
  BOOL v85 = v10 == a2 || v83 == (unint64_t *)a2;
  if (a4)
  {
    if (!v85)
    {
      uint64_t v86 = 0;
      unint64_t v87 = v10;
      do
      {
        unint64_t v88 = v87;
        unint64_t v87 = (unint64_t)v83;
        unint64_t v89 = *(void *)(v88 + 16);
        unint64_t v90 = *(void *)v88;
        if (v89 == *(void *)v88)
        {
          double v91 = *(double *)(v88 + 24);
          double v92 = *(double *)(v88 + 8);
          if (v91 == v92) {
            unsigned __int8 v93 = 0;
          }
          else {
            unsigned __int8 v93 = -127;
          }
          if (v91 > v92) {
            unsigned __int8 v93 = 1;
          }
          if (v91 < v92) {
            unsigned __int8 v93 = -1;
          }
        }
        else if (v89 < *(void *)v88)
        {
          unsigned __int8 v93 = -1;
        }
        else
        {
          unsigned __int8 v93 = 1;
        }
        if (v93 != 129 && (v93 & 0x80) != 0)
        {
          double v94 = *(double *)(v88 + 24);
          uint64_t v95 = v86;
          while (1)
          {
            uint64_t v96 = v10 + v95;
            *(void *)(v96 + 16) = v90;
            *(void *)(v96 + 24) = *(void *)(v10 + v95 + 8);
            if (!v95) {
              break;
            }
            unint64_t v90 = *(void *)(v96 - 16);
            if (v89 == v90)
            {
              double v97 = *(double *)(v10 + v95 - 8);
              if (v94 == v97) {
                unsigned __int8 v98 = 0;
              }
              else {
                unsigned __int8 v98 = -127;
              }
              if (v94 > v97) {
                unsigned __int8 v98 = 1;
              }
              if (v94 < v97) {
                unsigned __int8 v98 = -1;
              }
            }
            else if (v89 < v90)
            {
              unsigned __int8 v98 = -1;
            }
            else
            {
              unsigned __int8 v98 = 1;
            }
            v95 -= 16;
            if (v98 == 129 || (v98 & 0x80) == 0)
            {
              uint64_t v99 = v10 + v95 + 16;
              goto LABEL_261;
            }
          }
          uint64_t v99 = v10;
LABEL_261:
          *(void *)uint64_t v99 = v89;
          *(double *)(v99 + 8) = v94;
        }
        uint64_t v83 = (unint64_t *)(v87 + 16);
        v86 += 16;
      }
      while (v87 + 16 != a2);
    }
  }
  else if (!v85)
  {
    v152 = (double *)(v10 + 24);
    do
    {
      v153 = a1;
      a1 = v83;
      unint64_t v154 = v153[2];
      unint64_t v155 = *v153;
      if (v154 == *v153)
      {
        double v156 = *((double *)v153 + 3);
        double v157 = *((double *)v153 + 1);
        if (v156 == v157) {
          unsigned __int8 v158 = 0;
        }
        else {
          unsigned __int8 v158 = -127;
        }
        if (v156 > v157) {
          unsigned __int8 v158 = 1;
        }
        if (v156 < v157) {
          unsigned __int8 v158 = -1;
        }
      }
      else if (v154 < *v153)
      {
        unsigned __int8 v158 = -1;
      }
      else
      {
        unsigned __int8 v158 = 1;
      }
      if (v158 != 129 && (v158 & 0x80) != 0)
      {
        double v159 = *((double *)v153 + 3);
        v160 = v152;
        v161 = v152;
        do
        {
          *((void *)v160 - 1) = v155;
          uint64_t v162 = *((void *)v161 - 2);
          v161 -= 2;
          *(void *)v160 = v162;
          unint64_t v155 = *((void *)v160 - 5);
          if (v154 == v155)
          {
            double v163 = *(v160 - 4);
            if (v159 == v163) {
              char v164 = 0;
            }
            else {
              char v164 = -127;
            }
            if (v159 > v163) {
              char v164 = 1;
            }
            if (v159 < v163) {
              unsigned __int8 v165 = -1;
            }
            else {
              unsigned __int8 v165 = v164;
            }
          }
          else if (v154 < v155)
          {
            unsigned __int8 v165 = -1;
          }
          else
          {
            unsigned __int8 v165 = 1;
          }
          if (v165 == 129) {
            break;
          }
          v160 = v161;
        }
        while ((v165 & 0x80) != 0);
        *((void *)v161 - 1) = v154;
        double *v161 = v159;
      }
      uint64_t v83 = a1 + 2;
      v152 += 2;
    }
    while (a1 + 2 != (unint64_t *)a2);
  }
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  if (*a2 == *result)
  {
    double v5 = *((double *)a2 + 1);
    double v6 = *((double *)result + 1);
    if (v5 == v6) {
      char v7 = 0;
    }
    else {
      char v7 = -127;
    }
    if (v5 > v6) {
      char v7 = 1;
    }
    if (v5 < v6) {
      unsigned __int8 v8 = -1;
    }
    else {
      unsigned __int8 v8 = v7;
    }
  }
  else if (*a2 < *result)
  {
    unsigned __int8 v8 = -1;
  }
  else
  {
    unsigned __int8 v8 = 1;
  }
  unint64_t v9 = *a3;
  if (v8 == 129 || (v8 & 0x80) == 0)
  {
    if (v9 == v3)
    {
      double v13 = *((double *)a3 + 1);
      double v14 = *((double *)a2 + 1);
      if (v13 == v14) {
        unsigned __int8 v15 = 0;
      }
      else {
        unsigned __int8 v15 = -127;
      }
      if (v13 > v14) {
        unsigned __int8 v15 = 1;
      }
      if (v13 < v14) {
        unsigned __int8 v15 = -1;
      }
    }
    else if (v9 < v3)
    {
      unsigned __int8 v15 = -1;
    }
    else
    {
      unsigned __int8 v15 = 1;
    }
    if (v15 != 129 && (v15 & 0x80) != 0)
    {
      *a2 = v9;
      *a3 = v3;
      unint64_t v17 = a2[1];
      a2[1] = a3[1];
      a3[1] = v17;
      unint64_t v18 = *result;
      if (*a2 == *result)
      {
        double v19 = *((double *)a2 + 1);
        double v20 = *((double *)result + 1);
        if (v19 == v20) {
          unsigned __int8 v21 = 0;
        }
        else {
          unsigned __int8 v21 = -127;
        }
        if (v19 > v20) {
          unsigned __int8 v21 = 1;
        }
        if (v19 < v20) {
          unsigned __int8 v21 = -1;
        }
      }
      else if (*a2 < *result)
      {
        unsigned __int8 v21 = -1;
      }
      else
      {
        unsigned __int8 v21 = 1;
      }
      if (v21 != 129 && (v21 & 0x80) != 0)
      {
        char *result = *a2;
        *a2 = v18;
        unint64_t v24 = result[1];
        result[1] = a2[1];
        a2[1] = v24;
      }
    }
  }
  else
  {
    if (v9 == v3)
    {
      double v10 = *((double *)a3 + 1);
      double v11 = *((double *)a2 + 1);
      if (v10 == v11) {
        unsigned __int8 v12 = 0;
      }
      else {
        unsigned __int8 v12 = -127;
      }
      if (v10 > v11) {
        unsigned __int8 v12 = 1;
      }
      if (v10 < v11) {
        unsigned __int8 v12 = -1;
      }
    }
    else if (v9 < v3)
    {
      unsigned __int8 v12 = -1;
    }
    else
    {
      unsigned __int8 v12 = 1;
    }
    if (v12 != 129 && (v12 & 0x80) != 0)
    {
      char *result = v9;
      *a3 = v4;
      double v16 = *((double *)result + 1);
      result[1] = a3[1];
LABEL_70:
      *((double *)a3 + 1) = v16;
      return result;
    }
    char *result = v3;
    *a2 = v4;
    double v16 = *((double *)result + 1);
    result[1] = a2[1];
    *((double *)a2 + 1) = v16;
    if (*a3 == v4)
    {
      double v22 = *((double *)a3 + 1);
      if (v22 == v16) {
        unsigned __int8 v23 = 0;
      }
      else {
        unsigned __int8 v23 = -127;
      }
      if (v22 > v16) {
        unsigned __int8 v23 = 1;
      }
      if (v22 < v16) {
        unsigned __int8 v23 = -1;
      }
    }
    else if (*a3 < v4)
    {
      unsigned __int8 v23 = -1;
    }
    else
    {
      unsigned __int8 v23 = 1;
    }
    if (v23 != 129 && (v23 & 0x80) != 0)
    {
      *a2 = *a3;
      *a3 = v4;
      a2[1] = a3[1];
      goto LABEL_70;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 16);
      unint64_t v7 = *(void *)a1;
      if (v6 == *(void *)a1)
      {
        double v8 = *(double *)(a2 - 8);
        double v9 = *(double *)(a1 + 8);
        if (v8 == v9) {
          unsigned __int8 v10 = 0;
        }
        else {
          unsigned __int8 v10 = -127;
        }
        if (v8 > v9) {
          unsigned __int8 v10 = 1;
        }
        if (v8 < v9) {
          unsigned __int8 v10 = -1;
        }
      }
      else if (v6 < *(void *)a1)
      {
        unsigned __int8 v10 = -1;
      }
      else
      {
        unsigned __int8 v10 = 1;
      }
      if (v10 != 129 && (v10 & 0x80) != 0)
      {
        *(void *)a1 = v6;
        *(void *)(a2 - 16) = v7;
        uint64_t v26 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v26;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v11 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      uint64_t v12 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unint64_t v15 = *(void *)v12;
    unint64_t v16 = *(void *)v11;
    if (*(void *)v12 == *(void *)v11)
    {
      double v17 = *(double *)(v12 + 8);
      double v18 = *(double *)(v11 + 8);
      if (v17 == v18) {
        unsigned __int8 v19 = 0;
      }
      else {
        unsigned __int8 v19 = -127;
      }
      if (v17 > v18) {
        unsigned __int8 v19 = 1;
      }
      if (v17 < v18) {
        unsigned __int8 v19 = -1;
      }
    }
    else
    {
      unsigned __int8 v19 = *(void *)v12 < *(void *)v11 ? -1 : 1;
    }
    if (v19 != 129 && (v19 & 0x80) != 0)
    {
      double v20 = *(double *)(v12 + 8);
      uint64_t v21 = v13;
      while (1)
      {
        double v22 = (void *)(a1 + v21);
        v22[6] = v16;
        v22[7] = *(void *)(a1 + v21 + 40);
        if (v21 == -32) {
          break;
        }
        unint64_t v16 = v22[2];
        if (v15 == v16)
        {
          double v23 = *(double *)(a1 + v21 + 24);
          if (v20 == v23) {
            unsigned __int8 v24 = 0;
          }
          else {
            unsigned __int8 v24 = -127;
          }
          if (v20 > v23) {
            unsigned __int8 v24 = 1;
          }
          if (v20 < v23) {
            unsigned __int8 v24 = -1;
          }
        }
        else if (v15 < v16)
        {
          unsigned __int8 v24 = -1;
        }
        else
        {
          unsigned __int8 v24 = 1;
        }
        v21 -= 16;
        if (v24 == 129 || (v24 & 0x80) == 0)
        {
          uint64_t v25 = a1 + v21 + 48;
          goto LABEL_42;
        }
      }
      uint64_t v25 = a1;
LABEL_42:
      *(void *)uint64_t v25 = v15;
      *(double *)(v25 + 8) = v20;
      if (++v14 == 8) {
        return v12 + 16 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2) {
      return 1;
    }
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a3;
  if (*(void *)a4 == *(void *)a3)
  {
    double result = *(double *)(a4 + 8);
    double v10 = *(double *)(a3 + 8);
    if (result == v10) {
      unsigned __int8 v11 = 0;
    }
    else {
      unsigned __int8 v11 = -127;
    }
    if (result > v10) {
      unsigned __int8 v11 = 1;
    }
    if (result < v10) {
      unsigned __int8 v11 = -1;
    }
  }
  else if (*(void *)a4 < *(void *)a3)
  {
    unsigned __int8 v11 = -1;
  }
  else
  {
    unsigned __int8 v11 = 1;
  }
  if (v11 != 129 && (v11 & 0x80) != 0)
  {
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    double result = *(double *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(double *)(a4 + 8) = result;
    unint64_t v12 = *(void *)a2;
    if (*(void *)a3 == *(void *)a2)
    {
      double result = *(double *)(a3 + 8);
      double v13 = *(double *)(a2 + 8);
      if (result == v13) {
        unsigned __int8 v14 = 0;
      }
      else {
        unsigned __int8 v14 = -127;
      }
      if (result > v13) {
        unsigned __int8 v14 = 1;
      }
      if (result < v13) {
        unsigned __int8 v14 = -1;
      }
    }
    else if (*(void *)a3 < *(void *)a2)
    {
      unsigned __int8 v14 = -1;
    }
    else
    {
      unsigned __int8 v14 = 1;
    }
    if (v14 != 129 && (v14 & 0x80) != 0)
    {
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v12;
      double result = *(double *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(double *)(a3 + 8) = result;
      unint64_t v15 = *(void *)a1;
      if (*(void *)a2 == *(void *)a1)
      {
        double result = *(double *)(a2 + 8);
        double v16 = *(double *)(a1 + 8);
        if (result == v16) {
          unsigned __int8 v17 = 0;
        }
        else {
          unsigned __int8 v17 = -127;
        }
        if (result > v16) {
          unsigned __int8 v17 = 1;
        }
        if (result < v16) {
          unsigned __int8 v17 = -1;
        }
      }
      else if (*(void *)a2 < *(void *)a1)
      {
        unsigned __int8 v17 = -1;
      }
      else
      {
        unsigned __int8 v17 = 1;
      }
      if (v17 != 129 && (v17 & 0x80) != 0)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v15;
        double result = *(double *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(double *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a2, a3, a4);
  uint64_t v11 = *(void *)a4;
  if (*(void *)a5 == *(void *)a4)
  {
    double result = *(double *)(a5 + 8);
    double v12 = *(double *)(a4 + 8);
    if (result == v12) {
      unsigned __int8 v13 = 0;
    }
    else {
      unsigned __int8 v13 = -127;
    }
    if (result > v12) {
      unsigned __int8 v13 = 1;
    }
    if (result < v12) {
      unsigned __int8 v13 = -1;
    }
  }
  else if (*(void *)a5 < *(void *)a4)
  {
    unsigned __int8 v13 = -1;
  }
  else
  {
    unsigned __int8 v13 = 1;
  }
  if (v13 != 129 && (v13 & 0x80) != 0)
  {
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    double result = *(double *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(double *)(a5 + 8) = result;
    uint64_t v14 = *(void *)a3;
    if (*(void *)a4 == *(void *)a3)
    {
      double result = *(double *)(a4 + 8);
      double v15 = *(double *)(a3 + 8);
      if (result == v15) {
        unsigned __int8 v16 = 0;
      }
      else {
        unsigned __int8 v16 = -127;
      }
      if (result > v15) {
        unsigned __int8 v16 = 1;
      }
      if (result < v15) {
        unsigned __int8 v16 = -1;
      }
    }
    else if (*(void *)a4 < *(void *)a3)
    {
      unsigned __int8 v16 = -1;
    }
    else
    {
      unsigned __int8 v16 = 1;
    }
    if (v16 != 129 && (v16 & 0x80) != 0)
    {
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      double result = *(double *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(double *)(a4 + 8) = result;
      uint64_t v17 = *(void *)a2;
      if (*(void *)a3 == *(void *)a2)
      {
        double result = *(double *)(a3 + 8);
        double v18 = *(double *)(a2 + 8);
        if (result == v18) {
          unsigned __int8 v19 = 0;
        }
        else {
          unsigned __int8 v19 = -127;
        }
        if (result > v18) {
          unsigned __int8 v19 = 1;
        }
        if (result < v18) {
          unsigned __int8 v19 = -1;
        }
      }
      else if (*(void *)a3 < *(void *)a2)
      {
        unsigned __int8 v19 = -1;
      }
      else
      {
        unsigned __int8 v19 = 1;
      }
      if (v19 != 129 && (v19 & 0x80) != 0)
      {
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v17;
        double result = *(double *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(double *)(a3 + 8) = result;
        uint64_t v20 = *(void *)a1;
        if (*(void *)a2 == *(void *)a1)
        {
          double result = *(double *)(a2 + 8);
          double v21 = *(double *)(a1 + 8);
          if (result == v21) {
            unsigned __int8 v22 = 0;
          }
          else {
            unsigned __int8 v22 = -127;
          }
          if (result > v21) {
            unsigned __int8 v22 = 1;
          }
          if (result < v21) {
            unsigned __int8 v22 = -1;
          }
        }
        else if (*(void *)a2 < *(void *)a1)
        {
          unsigned __int8 v22 = -1;
        }
        else
        {
          unsigned __int8 v22 = 1;
        }
        if (v22 != 129 && (v22 & 0x80) != 0)
        {
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v20;
          double result = *(double *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(double *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char *>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void MeCab::scoped_fixed_array<char,2048>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3AB8;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_fixed_array<char *,64>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C3AE8;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x10C80436913F5);
  }

  JUMPOUT(0x2166855D0);
}

void std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(*a1);
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 4);
  double v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2128DF7E8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

const char *mecab_version()
{
  return "0.996";
}

uint64_t mecab_strerror(uint64_t a1)
{
  if (!a1) {
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 232);
  }

  return v1();
}

uint64_t mecab_destroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 248))();
  }
  return result;
}

uint64_t mecab_get_partial(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
}

uint64_t mecab_set_partial(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 168))(a1, a2 != 0);
}

uint64_t mecab_get_theta(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 216))();
}

uint64_t mecab_set_theta(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t mecab_get_lattice_level(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t mecab_set_lattice_level(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t mecab_get_all_morphs(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
}

uint64_t mecab_set_all_morphs(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 200))(a1, a2 != 0);
}

uint64_t mecab_sparse_tostr(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t mecab_sparse_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t mecab_sparse_tostr3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mecab_sparse_tonode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mecab_sparse_tonode2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t mecab_nbest_sparse_tostr(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mecab_nbest_sparse_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t mecab_nbest_sparse_tostr3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t mecab_nbest_init(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

uint64_t mecab_nbest_init2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
}

uint64_t mecab_nbest_next_tostr(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mecab_nbest_next_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t mecab_nbest_next_tonode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t mecab_format_node(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mecab_dictionary_info(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 224))();
}

uint64_t mecab_parse_lattice(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t mecab_lattice_destroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 312))();
  }
  return result;
}

uint64_t mecab_lattice_clear(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t mecab_lattice_is_available(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t mecab_lattice_get_bos_node(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mecab_lattice_get_eos_node(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mecab_lattice_get_all_begin_nodes(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t mecab_lattice_get_all_end_nodes(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t mecab_lattice_get_begin_nodes(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mecab_lattice_get_end_nodes(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mecab_lattice_get_sentence(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mecab_lattice_set_sentence(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t mecab_lattice_set_sentence2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t mecab_lattice_get_size(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t mecab_lattice_get_z(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t mecab_lattice_set_z(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

double mecab_lattice_get_theta(uint64_t a1)
{
  return (*(float (**)(uint64_t))(*(void *)a1 + 120))(a1);
}

uint64_t mecab_lattice_set_theta(uint64_t a1, double a2)
{
  float v2 = a2;
  return (*(uint64_t (**)(float))(*(void *)a1 + 112))(v2);
}

uint64_t mecab_lattice_next(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
}

uint64_t mecab_lattice_get_request_type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t mecab_lattice_has_request_type(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
}

uint64_t mecab_lattice_set_request_type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t mecab_lattice_add_request_type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t mecab_lattice_remove_request_type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t mecab_lattice_new_node(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t mecab_lattice_tostr(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t mecab_lattice_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 216))();
}

uint64_t mecab_lattice_nbest_tostr(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t mecab_lattice_nbest_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

uint64_t mecab_lattice_has_constraint(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
}

uint64_t mecab_lattice_get_boundary_constraint(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

uint64_t mecab_lattice_get_feature_constraint(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
}

uint64_t mecab_lattice_set_boundary_constraint(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 264))();
}

uint64_t mecab_lattice_set_feature_constraint(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

uint64_t mecab_lattice_set_result(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 280))();
}

uint64_t mecab_lattice_strerror(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 288))();
}

uint64_t mecab_model_destroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t mecab_model_new_tagger(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t mecab_model_new_lattice(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t mecab_model_swap(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
}

uint64_t mecab_model_dictionary_info(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t mecab_model_transition_cost(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t mecab_model_lookup(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t mecab_get_lastname_length(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t mecab_get_feature(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

BOOL MeCab::CharProperty::open(MeCab::CharProperty *this, const MeCab::Param *a2)
{
  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v9);
  std::string::basic_string[abi:ne180100]<0>(__p, "char.bin");
  MeCab::create_filename((uint64_t)&v9, (uint64_t)__p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v3 = &v8;
  }
  else {
    unint64_t v3 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  BOOL v4 = MeCab::CharProperty::open(this, (char *)v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_2128E047C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL MeCab::CharProperty::open(MeCab::CharProperty *this, char *a2)
{
  if (MeCab::Mmap<char>::open((uint64_t)this + 8, a2, "r"))
  {
    unint64_t v3 = (const char *)*((void *)this + 2);
    uint64_t v4 = *((void *)this + 3);
    return MeCab::CharProperty::open(this, v3, v4);
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 49) - 24) + 392), 0);
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    char v7 = (void *)std::ostream::operator<<();
    std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"cmmap_.open(filename, \"r\")", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    return 0;
  }
}

BOOL MeCab::CharProperty::open(MeCab::CharProperty *this, const char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int v5 = *(_DWORD *)a2;
  uint64_t v6 = ((32 * *(_DWORD *)a2) | 4u) + 262140;
  if (v6 == a3)
  {
    char v7 = a2 + 4;
    std::string v8 = (const char **)*((void *)this + 44);
    *((void *)this + 4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v8;
    if (v5)
    {
      int v9 = 0;
      double v10 = (char **)((char *)this + 352);
      uint64_t v11 = (void *)((char *)this + 368);
      do
      {
        if ((unint64_t)v8 >= *v11)
        {
          uint64_t v12 = ((char *)v8 - *v10) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = *v11 - (void)*v10;
          uint64_t v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
            uint64_t v14 = v12 + 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unsigned __int8 v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)this + 368, v15);
          }
          else {
            unsigned __int8 v16 = 0;
          }
          uint64_t v17 = (const char **)&v16[8 * v12];
          const std::locale::facet *v17 = v7;
          std::string v8 = v17 + 1;
          unsigned __int8 v19 = (char *)*((void *)this + 44);
          double v18 = (char *)*((void *)this + 45);
          if (v18 != v19)
          {
            do
            {
              uint64_t v20 = (const char *)*((void *)v18 - 1);
              v18 -= 8;
              *--uint64_t v17 = v20;
            }
            while (v18 != v19);
            double v18 = *v10;
          }
          *((void *)this + 44) = v17;
          *((void *)this + 4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v8;
          *((void *)this + 46) = &v16[8 * v15];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *v8++ = v7;
        }
        v7 += 32;
        *((void *)this + 4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v8;
        ++v9;
      }
      while (v9 != v5);
    }
    *((void *)this + 47) = v7;
    uint64_t v3 = a3;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 49) - 24) + 392), 0);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
    unsigned __int8 v22 = (void *)std::ostream::operator<<();
    double v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    unsigned __int8 v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"fsize == size", 13);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"invalid file size", 17);
  }
  return v6 == v3;
}

uint64_t MeCab::CharProperty::id(MeCab::CharProperty *this, const char *__s1)
{
  uint64_t v2 = *((void *)this + 44);
  uint64_t v3 = *((void *)this + 45) - v2;
  if (v3 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 0;
  uint64_t v6 = (unint64_t)v3 >> 3;
  if (v6 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = v6;
  }
  while (strcmp(__s1, *(const char **)(v2 + 8 * v5)))
  {
    if (v7 == ++v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

void MeCab::CharProperty::compile(MeCab::CharProperty *this, const char *a2, const char *a3, const char *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v29);
  std::string::basic_string[abi:ne180100]<0>(__p, "DEFAULT 1 0 0\nSPACE   0 1 0\n0x0020 SPACE\n");
  std::istringstream::basic_istringstream[abi:ne180100](&v23, (long long *)__p, 8);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if ((*((unsigned char *)&v29[4] + *(void *)(v29[0] - 24)) & 5) != 0)
  {
    size_t v7 = strlen((const char *)this);
    std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)this, v7);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" is not found. minimum setting is used", 38);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    double v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DEFAULT,0,0,0,*\nSPACE,0,0,0,*\n");
  std::istringstream::basic_istringstream[abi:ne180100](&v22, (long long *)__p, 8);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if ((v28[*((void *)__p[0] - 3)] & 5) != 0)
  {
    size_t v11 = strlen(a2);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)a2, v11);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" is not found. minimum setting is used.", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    uint64_t v14 = std::locale::use_facet(&v25, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v25);
    std::ostream::put();
    std::ostream::flush();
  }
  std::ofstream::basic_ofstream((uint64_t *)&v25);
  if ((*((unsigned char *)&v25 + *((void *)v25.__locale_ - 3) + 32) & 5) != 0)
  {
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    unsigned __int8 v16 = (void *)std::ostream::operator<<();
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ofs", 3);
    unsigned __int8 v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"permission denied: ", 19);
    size_t v21 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)a3, v21);
    MeCab::die::~die((MeCab::die *)&v30);
  }
  unsigned __int8 v24 = &unk_26C3C3A28;
  operator new[]();
}

void sub_2128E26AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  STACK[0x2B8] = v50;
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  STACK[0x270] = (unint64_t)&STACK[0x2B0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy((char *)STACK[0x2D0]);
  STACK[0x2F8] = a11;
  if (STACK[0x300]) {
    MEMORY[0x2166855A0](STACK[0x300], 0x10C80436913F5);
  }
  STACK[0x310] = a12;
  if (STACK[0x318]) {
    MEMORY[0x2166855A0](STACK[0x318], 0x1000C8077774924);
  }
  std::ofstream::~ofstream(&STACK[0x338]);
  std::ifstream::~ifstream(&STACK[0x570]);
  std::istringstream::~istringstream((uint64_t)&a16);
  std::istringstream::~istringstream((uint64_t)&a50);
  std::ifstream::~ifstream(&STACK[0x7B0]);
  _Unwind_Resume(a1);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, long long *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  double v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_2128E2BD0(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x216685570](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x216685570](a1 + 120);
  return a1;
}

uint64_t MeCab::anonymous namespace'::atohex(MeCab::_anonymous_namespace_ *this, const char *a2)
{
  if (strlen((const char *)this) < 3 || *(unsigned char *)this != 48 || (*((unsigned __int8 *)this + 1) | 0x20) != 0x78)
  {
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") [", 3);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"std::strlen(s) >= 3 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X')", 66);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"] ", 2);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"no hex value: ", 14);
    size_t v9 = strlen((const char *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)this, v9);
    MeCab::die::~die((MeCab::die *)&v23);
  }
  LOBYTE(v10) = *((unsigned char *)this + 2);
  if (!(_BYTE)v10) {
    return 0;
  }
  LODWORD(v11) = 0;
  uint64_t v12 = 3;
  do
  {
    if ((v10 - 48) > 9u)
    {
      if (((char)v10 - 65) > 5)
      {
        if (((char)v10 - 97) > 5)
        {
          uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
          unint64_t v15 = (void *)std::ostream::operator<<();
          unsigned __int8 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"false", 5);
          double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
          unsigned __int8 v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"no hex value: ", 14);
          size_t v20 = strlen((const char *)this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)this, v20);
          MeCab::die::~die((MeCab::die *)&v22);
        }
        int v13 = (char)v10 - 87;
      }
      else
      {
        int v13 = (char)v10 - 55;
      }
    }
    else
    {
      int v13 = (char)v10 - 48;
    }
    int v10 = *((unsigned __int8 *)this + v12++);
    uint64_t v11 = (v13 + 16 * v11);
  }
  while (v10);
  return v11;
}

void sub_2128E2F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_2128E2F38()
{
  _Unwind_Resume(v0);
}

uint64_t MeCab::anonymous namespace'::encode(void ****a1, uint64_t a2)
{
  if (a1[1] == *a1)
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    uint64_t v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"c.size()", 8);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"category size is empty", 22);
    MeCab::die::~die((MeCab::die *)&v39);
  }
  size_t v9 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a2, (void **)*a1);
  if ((void **)(a2 + 8) == v9)
  {
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    uint64_t v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"it != category->end()", 21);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"category [", 10);
    int v16 = *((char *)*a1 + 23);
    if (v16 >= 0) {
      uint64_t v17 = (void **)*a1;
    }
    else {
      uint64_t v17 = **a1;
    }
    if (v16 >= 0) {
      uint64_t v18 = *((unsigned __int8 *)*a1 + 23);
    }
    else {
      uint64_t v18 = (uint64_t)(*a1)[1];
    }
    unsigned __int8 v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] is undefined", 14);
    MeCab::die::~die((MeCab::die *)&v38);
  }
  uint64_t v20 = *((unsigned int *)v9 + 14);
  size_t v21 = (void **)*a1;
  if (a1[1] != *a1)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      unsigned __int8 v24 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a2, &v21[v22]);
      if ((void **)(a2 + 8) == v24)
      {
        std::locale v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
        uint64_t v26 = (void *)std::ostream::operator<<();
        char v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
        std::string::size_type v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"it != category->end()", 21);
        std::locale v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
        std::locale v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"category [", 10);
        uint64_t v31 = &(*a1)[v22];
        int v32 = *((char *)v31 + 23);
        if (v32 >= 0) {
          uint64_t v33 = (uint64_t)&(*a1)[v22];
        }
        else {
          uint64_t v33 = (uint64_t)*v31;
        }
        if (v32 >= 0) {
          uint64_t v34 = *((unsigned __int8 *)v31 + 23);
        }
        else {
          uint64_t v34 = (uint64_t)v31[1];
        }
        double v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] is undefined", 14);
        MeCab::die::~die((MeCab::die *)&v37);
      }
      uint64_t v20 = v20 & 0xFFFC0000 | ((1 << (*((_DWORD *)v24 + 14) >> 18)) + v20) & 0x3FFFF;
      ++v23;
      size_t v21 = (void **)*a1;
      v22 += 3;
    }
    while (v23 < 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  }
  return v20;
}

void sub_2128E31F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_2128E321C()
{
  _Unwind_Resume(v0);
}

void **std::vector<MeCab::anonymous namespace'::Range>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 32;
        uint64_t v7 = (void **)(v3 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<MeCab::anonymous namespace'::Range>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v5 = (void **)(i - 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  long long v7 = *a2;
  *(void *)(v6 + 80) = *((void *)a2 + 2);
  *(_OWORD *)(v6 + 64) = v7;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 96) = a3;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v6);
  return a1;
}

void sub_2128E337C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

BOOL MeCab::Iconv::open(MeCab::Iconv *this, _anonymous_namespace_ *a2, _anonymous_namespace_ *a3)
{
  *((void *)this + 1) = 0;
  if (!strcmp(v5, v7)) {
    return 1;
  }
  uint64_t v8 = MEMORY[0x2166857F0](v7, v5);
  BOOL result = v8 != -1;
  if (v8 == -1) {
    uint64_t v8 = 0;
  }
  *((void *)this + 1) = v8;
  return result;
}

const char *anonymous namespace'::decode_charset_iconv(_anonymous_namespace_ *this, const char *a2)
{
  unsigned int v3 = MeCab::decode_charset(this, a2);
  if (v3 < 6) {
    return off_2641932D0[v3];
  }
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"charset ", 8);
  size_t v6 = strlen((const char *)this);
  std::string::size_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not defined, use EUC-JP", 27);
  return "EUC-JP";
}

uint64_t MeCab::Iconv::convert(uint64_t a1, std::string *a2)
{
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!a2->__r_.__value_.__l.__size_) {
      return 1;
    }
  }
  else if (!*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    return 1;
  }
  if (!*(void *)(a1 + 8)) {
    return 1;
  }
  if ((size & 0x80) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  int64_t v5 = 4 * size;
  uint64_t v13 = 4 * size;
  std::string::size_type v14 = size;
  memset(&v12, 0, sizeof(v12));
  std::string::reserve(&v12, 4 * size);
  size_t v6 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    size_t v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v11 = v6;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = &v12;
  }
  else {
    std::string::size_type v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  unint64_t v10 = v7;
  if (v5 >= 1) {
    bzero(v7, v5);
  }
  MEMORY[0x2166857D0](*(void *)(a1 + 8), 0, &v14, 0, &v13);
  while (1)
  {
    BOOL v8 = v14 == 0;
    if (!v14) {
      break;
    }
    if (MEMORY[0x2166857D0](*(void *)(a1 + 8), &v11, &v14, &v10, &v13) == -1) {
      goto LABEL_21;
    }
  }
  std::string::__assign_external(a2, (const std::string::value_type *)v7, v5 - v13);
LABEL_21:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_2128E3700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::Iconv::~Iconv(MeCab::Iconv *this)
{
  *(void *)this = &unk_26C3C3858;
  if (*((void *)this + 1)) {
    MEMORY[0x2166857E0]();
  }
}

{
  uint64_t vars8;

  MeCab::Iconv::~Iconv(this);

  JUMPOUT(0x2166855D0);
}

uint64_t *MeCab::get_char_category(unsigned int a1)
{
  unsigned int v3 = a1;
  {
    if (v2)
    {
      MeCab::new_char_category_map(v2);
      MeCab::get_char_category(char32_t)::category_map = (uint64_t)&MeCab::new_char_category_map(void)::m;
    }
  }
  BOOL result = std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::find<char32_t>((void *)MeCab::get_char_category(char32_t)::category_map, &v3);
  if (result) {
    return (uint64_t *)*((unsigned int *)result + 5);
  }
  return result;
}

void sub_2128E3830(_Unwind_Exception *a1)
{
}

void *MeCab::new_char_category_map(MeCab *this)
{
  {
    MeCab::new_char_category_map(void)::m = 0u;
    *(_OWORD *)&qword_267795B60 = 0u;
    dword_267795B70 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<char32_t,MeCab::UnicodeCharCategory>::~unordered_map[abi:ne180100], &MeCab::new_char_category_map(void)::m, &dword_2128BC000);
  }
  unsigned int v1 = 33;
  int v352 = 33;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v1++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v1;
  }
  while (v1 != 45);
  int v2 = 46;
  int v352 = 46;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v2++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v2;
  }
  while (v2 != 48);
  int v352 = 48;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v2++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v2;
  }
  while (v2 != 58);
  int v352 = 58;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v2++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v2;
  }
  while (v2 != 65);
  unsigned int v3 = 91;
  int v352 = 91;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v3++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v3;
  }
  while (v3 != 95);
  int v352 = 96;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x60u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v4 = 123;
  int v352 = 123;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v4++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v4;
  }
  while (v4 != 127);
  unsigned int v5 = 161;
  int v352 = 161;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v5++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v5;
  }
  while (v5 != 170);
  unsigned int v6 = 171;
  int v352 = 171;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v6++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v6;
  }
  while (v6 != 173);
  unsigned int v7 = 174;
  int v352 = 174;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v7++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v7;
  }
  while (v7 != 178);
  int v352 = 178;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v7++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v7;
  }
  while (v7 != 180);
  int v352 = 180;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xB4u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v8 = 182;
  int v352 = 182;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v8++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v8;
  }
  while (v8 != 185);
  int v352 = 185;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xB9u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
  int v352 = 187;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xBBu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v9 = 188;
  int v352 = 188;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v9++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v9;
  }
  while (v9 != 191);
  int v352 = 191;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xBFu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 215;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xD7u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 247;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF7u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v10 = 706;
  int v352 = 706;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v10++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v10;
  }
  while (v10 != 710);
  unsigned int v11 = 722;
  int v352 = 722;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v11++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v11;
  }
  while (v11 != 736);
  unsigned int v12 = 741;
  int v352 = 741;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v12++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v12;
  }
  while (v12 != 748);
  int v352 = 749;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2EDu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v13 = 751;
  int v352 = 751;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v13++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v13;
  }
  while (v13 != 768);
  int v352 = 885;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x375u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 894;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x37Eu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v14 = 900;
  int v352 = 900;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v14++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v14;
  }
  while (v14 != 902);
  int v352 = 903;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x387u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 1014;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3F6u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 1154;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x482u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v15 = 1370;
  int v352 = 1370;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v15++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v15;
  }
  while (v15 != 1376);
  unsigned int v16 = 1417;
  int v352 = 1417;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v16++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v16;
  }
  while (v16 != 1419);
  unsigned int v17 = 1421;
  int v352 = 1421;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v17++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v17;
  }
  while (v17 != 1424);
  int v352 = 1470;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5BEu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 1472;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5C0u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 1475;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5C3u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 1478;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5C6u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v18 = 1523;
  int v352 = 1523;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v18++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v18;
  }
  while (v18 != 1525);
  unsigned int v19 = 1542;
  int v352 = 1542;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v19++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v19;
  }
  while (v19 != 1552);
  int v352 = 1563;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x61Bu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v20 = 1565;
  int v352 = 1565;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v20++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v20;
  }
  while (v20 != 1568);
  unsigned int v21 = 1632;
  int v352 = 1632;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v21++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v21;
  }
  while (v21 != 1642);
  int v352 = 1642;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v21++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v21;
  }
  while (v21 != 1646);
  int v352 = 1748;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x6D4u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 1758;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x6DEu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 1769;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x6E9u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v22 = 1776;
  int v352 = 1776;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v22++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v22;
  }
  while (v22 != 1786);
  unsigned int v23 = 1789;
  int v352 = 1789;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v23++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v23;
  }
  while (v23 != 1791);
  unsigned int v24 = 1792;
  int v352 = 1792;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v24++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v24;
  }
  while (v24 != 1806);
  unsigned int v25 = 1984;
  int v352 = 1984;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v25++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v25;
  }
  while (v25 != 1994);
  unsigned int v26 = 2038;
  int v352 = 2038;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v26++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v26;
  }
  while (v26 != 2042);
  unsigned int v27 = 2046;
  int v352 = 2046;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v27++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v27;
  }
  while (v27 != 2048);
  unsigned int v28 = 2096;
  int v352 = 2096;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v28++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v28;
  }
  while (v28 != 2111);
  int v352 = 2142;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x85Eu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 2184;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x888u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v29 = 2404;
  int v352 = 2404;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v29++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v29;
  }
  while (v29 != 2406);
  int v352 = 2406;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v29++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v29;
  }
  while (v29 != 2416);
  int v352 = 2416;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x970u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v30 = 2534;
  int v352 = 2534;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v30++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v30;
  }
  while (v30 != 2544);
  int v31 = 2546;
  int v352 = 2546;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v31++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v31;
  }
  while (v31 != 2548);
  int v352 = 2548;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v31++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v31;
  }
  while (v31 != 2554);
  int v352 = 2554;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v31++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v31;
  }
  while (v31 != 2556);
  int v352 = 2557;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x9FDu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v32 = 2662;
  int v352 = 2662;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v32++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v32;
  }
  while (v32 != 2672);
  int v352 = 2678;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA76u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v33 = 2790;
  int v352 = 2790;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v33++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v33;
  }
  while (v33 != 2800);
  int v352 = 2800;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v33++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v33;
  }
  while (v33 != 2802);
  unsigned int v34 = 2918;
  int v352 = 2918;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v34++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v34;
  }
  while (v34 != 2928);
  int v352 = 2928;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xB70u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v35 = 2930;
  int v352 = 2930;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v35++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v35;
  }
  while (v35 != 2936);
  unsigned int v36 = 3046;
  int v352 = 3046;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v36++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v36;
  }
  while (v36 != 3059);
  int v352 = 3059;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v36++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v36;
  }
  while (v36 != 3067);
  unsigned int v37 = 3174;
  int v352 = 3174;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v37++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v37;
  }
  while (v37 != 3184);
  int v352 = 3191;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xC77u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v38 = 3192;
  int v352 = 3192;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v38++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v38;
  }
  while (v38 != 3199);
  int v352 = 3199;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xC7Fu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 3204;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xC84u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v39 = 3302;
  int v352 = 3302;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v39++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v39;
  }
  while (v39 != 3312);
  int v352 = 3407;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xD4Fu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v40 = 3416;
  int v352 = 3416;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v40++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v40;
  }
  while (v40 != 3423);
  unsigned int v41 = 3430;
  int v352 = 3430;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v41++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v41;
  }
  while (v41 != 3449);
  int v352 = 3449;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xD79u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v42 = 3558;
  int v352 = 3558;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v42++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v42;
  }
  while (v42 != 3568);
  int v352 = 3572;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xDF4u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 3647;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xE3Fu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 3663;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xE4Fu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v43 = 3664;
  int v352 = 3664;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v43++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v43;
  }
  while (v43 != 3674);
  int v352 = 3674;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v43++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v43;
  }
  while (v43 != 3676);
  unsigned int v44 = 3792;
  int v352 = 3792;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v44++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v44;
  }
  while (v44 != 3802);
  unsigned int v45 = 3841;
  int v352 = 3841;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v45++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v45;
  }
  while (v45 != 3864);
  unsigned int v46 = 3866;
  int v352 = 3866;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v46++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v46;
  }
  while (v46 != 3872);
  int v352 = 3872;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v46++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v46;
  }
  while (v46 != 3892);
  int v352 = 3892;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF34u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 3894;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF36u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 3896;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF38u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v47 = 3898;
  int v352 = 3898;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v47++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v47;
  }
  while (v47 != 3902);
  int v352 = 3973;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF85u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v48 = 4030;
  int v352 = 4030;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v48++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v48;
  }
  while (v48 != 4038);
  unsigned int v49 = 4039;
  int v352 = 4039;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v49++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v49;
  }
  while (v49 != 4045);
  unsigned int v50 = 4046;
  int v352 = 4046;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v50++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v50;
  }
  while (v50 != 4059);
  unsigned int v51 = 4160;
  int v352 = 4160;
  int v52 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v51++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v51;
    --v52;
  }
  while (v52);
  unsigned int v53 = 4170;
  int v352 = 4170;
  int v54 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v53++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v53;
    --v54;
  }
  while (v54);
  unsigned int v55 = 4240;
  int v352 = 4240;
  int v56 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v55++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v55;
    --v56;
  }
  while (v56);
  unsigned int v57 = 4254;
  int v352 = 4254;
  int v58 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v57++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v57;
    --v58;
  }
  while (v58);
  int v352 = 4347;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x10FBu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v59 = 4960;
  int v352 = 4960;
  int v60 = 9;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v59++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v59;
    --v60;
  }
  while (v60);
  unsigned int v61 = 4969;
  int v352 = 4969;
  int v62 = 20;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v61++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v61;
    --v62;
  }
  while (v62);
  unsigned int v63 = 5008;
  int v352 = 5008;
  int v64 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v63++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v63;
    --v64;
  }
  while (v64);
  int v352 = 5120;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1400u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v65 = 5741;
  int v352 = 5741;
  int v66 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v65++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v65;
    --v66;
  }
  while (v66);
  unsigned int v67 = 5787;
  int v352 = 5787;
  int v68 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v67++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v67;
    --v68;
  }
  while (v68);
  unsigned int v69 = 5867;
  int v352 = 5867;
  int v70 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v69++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v69;
    --v70;
  }
  while (v70);
  unsigned int v71 = 5870;
  int v352 = 5870;
  int v72 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v71++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v71;
    --v72;
  }
  while (v72);
  unsigned int v73 = 5941;
  int v352 = 5941;
  int v74 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v73++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v73;
    --v74;
  }
  while (v74);
  unsigned int v75 = 6100;
  int v352 = 6100;
  int v76 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v75++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v75;
    --v76;
  }
  while (v76);
  unsigned int v77 = 6104;
  int v352 = 6104;
  int v78 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v77++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v77;
    --v78;
  }
  while (v78);
  unsigned int v79 = 6112;
  int v352 = 6112;
  int v80 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v79++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v79;
    --v80;
  }
  while (v80);
  unsigned int v81 = 6128;
  int v352 = 6128;
  int v82 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v81++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v81;
    --v82;
  }
  while (v82);
  unsigned int v83 = 6144;
  int v352 = 6144;
  int v84 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v83++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v83;
    --v84;
  }
  while (v84);
  unsigned int v85 = 6160;
  int v352 = 6160;
  int v86 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v85++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v85;
    --v86;
  }
  while (v86);
  int v352 = 6464;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1940u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v87 = 6468;
  int v352 = 6468;
  int v88 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v87++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v87;
    --v88;
  }
  while (v88);
  unsigned int v89 = 6470;
  int v352 = 6470;
  int v90 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v89++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v89;
    --v90;
  }
  while (v90);
  unsigned int v91 = 6608;
  int v352 = 6608;
  int v92 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v91++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v91;
    --v92;
  }
  while (v92);
  unsigned int v93 = 6622;
  int v352 = 6622;
  int v94 = 34;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v93++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v93;
    --v94;
  }
  while (v94);
  unsigned int v95 = 6686;
  int v352 = 6686;
  int v96 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v95++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v95;
    --v96;
  }
  while (v96);
  unsigned int v97 = 6784;
  int v352 = 6784;
  int v98 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v97++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v97;
    --v98;
  }
  while (v98);
  unsigned int v99 = 6800;
  int v352 = 6800;
  int v100 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v99++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v99;
    --v100;
  }
  while (v100);
  unsigned int v101 = 6816;
  int v352 = 6816;
  int v102 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v101++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v101;
    --v102;
  }
  while (v102);
  unsigned int v103 = 6824;
  int v352 = 6824;
  int v104 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v103++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v103;
    --v104;
  }
  while (v104);
  unsigned int v105 = 6992;
  int v352 = 6992;
  int v106 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v105++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v105;
    --v106;
  }
  while (v106);
  unsigned int v107 = 7002;
  int v352 = 7002;
  int v108 = 17;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v107++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v107;
    --v108;
  }
  while (v108);
  unsigned int v109 = 7028;
  int v352 = 7028;
  int v110 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v109++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v109;
    --v110;
  }
  while (v110);
  unsigned int v111 = 7088;
  int v352 = 7088;
  int v112 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v111++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v111;
    --v112;
  }
  while (v112);
  unsigned int v113 = 7164;
  int v352 = 7164;
  int v114 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v113++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v113;
    --v114;
  }
  while (v114);
  unsigned int v115 = 7227;
  int v352 = 7227;
  int v116 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v115++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v115;
    --v116;
  }
  while (v116);
  unsigned int v117 = 7232;
  int v352 = 7232;
  int v118 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v117++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v117;
    --v118;
  }
  while (v118);
  unsigned int v119 = 7248;
  int v352 = 7248;
  int v120 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v119++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v119;
    --v120;
  }
  while (v120);
  unsigned int v121 = 7294;
  int v352 = 7294;
  int v122 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v121++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v121;
    --v122;
  }
  while (v122);
  unsigned int v123 = 7360;
  int v352 = 7360;
  int v124 = 8;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v123++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v123;
    --v124;
  }
  while (v124);
  int v352 = 7379;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1CD3u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 8125;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1FBDu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v125 = 8127;
  int v352 = 8127;
  int v126 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v125++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v125;
    --v126;
  }
  while (v126);
  unsigned int v127 = 8141;
  int v352 = 8141;
  int v128 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v127++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v127;
    --v128;
  }
  while (v128);
  unsigned int v129 = 8157;
  int v352 = 8157;
  int v130 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v129++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v129;
    --v130;
  }
  while (v130);
  unsigned int v131 = 8173;
  int v352 = 8173;
  int v132 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v131++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v131;
    --v132;
  }
  while (v132);
  int v352 = 8189;
  for (int i = 8190; i != 0x2000; ++i)
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(i - 1, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = i;
  }
  unsigned int v134 = 8208;
  int v352 = 8208;
  int v135 = 24;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v134++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v134;
    --v135;
  }
  while (v135);
  unsigned int v136 = 8240;
  int v352 = 8240;
  int v137 = 47;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v136++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v136;
    --v137;
  }
  while (v137);
  int v352 = 8304;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2070u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
  unsigned int v138 = 8308;
  int v352 = 8308;
  int v139 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v138++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v138;
    --v139;
  }
  while (v139);
  unsigned int v140 = 8314;
  int v352 = 8314;
  int v141 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v140++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v140;
    --v141;
  }
  while (v141);
  unsigned int v142 = 8320;
  int v352 = 8320;
  int v143 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v142++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v142;
    --v143;
  }
  while (v143);
  unsigned int v144 = 8330;
  int v352 = 8330;
  int v145 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v144++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v144;
    --v145;
  }
  while (v145);
  unsigned int v146 = 8352;
  int v352 = 8352;
  int v147 = 33;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v146++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v146;
    --v147;
  }
  while (v147);
  unsigned int v148 = 8448;
  int v352 = 8448;
  int v149 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v148++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v148;
    --v149;
  }
  while (v149);
  unsigned int v150 = 8451;
  int v352 = 8451;
  int v151 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v150++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v150;
    --v151;
  }
  while (v151);
  unsigned int v152 = 8456;
  int v352 = 8456;
  int v153 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v152++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v152;
    --v153;
  }
  while (v153);
  int v352 = 8468;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2114u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v154 = 8470;
  int v352 = 8470;
  int v155 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v154++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v154;
    --v155;
  }
  while (v155);
  unsigned int v156 = 8478;
  int v352 = 8478;
  int v157 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v156++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v156;
    --v157;
  }
  while (v157);
  int v352 = 8485;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2125u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 8487;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2127u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 8489;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2129u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 8494;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x212Eu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v158 = 8506;
  int v352 = 8506;
  int v159 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v158++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v158;
    --v159;
  }
  while (v159);
  unsigned int v160 = 8512;
  int v352 = 8512;
  int v161 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v160++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v160;
    --v161;
  }
  while (v161);
  unsigned int v162 = 8522;
  int v352 = 8522;
  int v163 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v162++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v162;
    --v163;
  }
  while (v163);
  int v352 = 8527;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x214Fu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v164 = 8528;
  int v352 = 8528;
  int v165 = 51;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v164++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v164;
    --v165;
  }
  while (v165);
  unsigned int v166 = 8581;
  int v352 = 8581;
  int v167 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v166++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v166;
    --v167;
  }
  while (v167);
  unsigned int v168 = 8586;
  int v352 = 8586;
  int v169 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v168++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v168;
    --v169;
  }
  while (v169);
  unsigned int v170 = 8592;
  int v352 = 8592;
  int v171 = 663;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v170++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v170;
    --v171;
  }
  while (v171);
  unsigned int v172 = 9280;
  int v352 = 9280;
  int v173 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v172++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v172;
    --v173;
  }
  while (v173);
  unsigned int v174 = 9312;
  int v352 = 9312;
  int v175 = 60;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v174++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v174;
    --v175;
  }
  while (v175);
  unsigned int v176 = 9372;
  int v352 = 9372;
  int v177 = 78;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v176++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v176;
    --v177;
  }
  while (v177);
  unsigned int v178 = 9450;
  int v352 = 9450;
  int v179 = 22;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v178++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v178;
    --v179;
  }
  while (v179);
  unsigned int v180 = 9472;
  int v352 = 9472;
  int v181 = 630;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v180++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v180;
    --v181;
  }
  while (v181);
  unsigned int v182 = 10102;
  int v352 = 10102;
  int v183 = 30;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v182++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v182;
    --v183;
  }
  while (v183);
  unsigned int v184 = 10132;
  int v352 = 10132;
  int v185 = 992;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v184++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v184;
    --v185;
  }
  while (v185);
  unsigned int v186 = 11126;
  int v352 = 11126;
  int v187 = 32;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v186++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v186;
    --v187;
  }
  while (v187);
  unsigned int v188 = 11159;
  int v352 = 11159;
  int v189 = 105;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v188++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v188;
    --v189;
  }
  while (v189);
  unsigned int v190 = 11493;
  int v352 = 11493;
  int v191 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v190++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v190;
    --v191;
  }
  while (v191);
  unsigned int v192 = 11513;
  int v352 = 11513;
  int v193 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v192++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v192;
    --v193;
  }
  while (v193);
  int v352 = 11517;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2CFDu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
  unsigned int v194 = 11518;
  int v352 = 11518;
  int v195 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v194++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v194;
    --v195;
  }
  while (v195);
  int v352 = 11632;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2D70u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v196 = 11776;
  int v352 = 11776;
  int v197 = 47;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v196++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v196;
    --v197;
  }
  while (v197);
  unsigned int v198 = 11824;
  int v352 = 11824;
  int v199 = 46;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v198++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v198;
    --v199;
  }
  while (v199);
  unsigned int v200 = 11904;
  int v352 = 11904;
  int v201 = 26;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v200++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v200;
    --v201;
  }
  while (v201);
  unsigned int v202 = 11931;
  int v352 = 11931;
  int v203 = 89;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v202++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v202;
    --v203;
  }
  while (v203);
  unsigned int v204 = 12032;
  int v352 = 12032;
  int v205 = 214;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v204++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v204;
    --v205;
  }
  while (v205);
  unsigned int v206 = 12272;
  int v352 = 12272;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v206++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v206;
  }
  while (v206 != 12288);
  unsigned int v207 = 12289;
  int v352 = 12289;
  int v208 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v207++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v207;
    --v208;
  }
  while (v208);
  int v352 = 12295;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3007u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
  unsigned int v209 = 12296;
  int v352 = 12296;
  int v210 = 25;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v209++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v209;
    --v210;
  }
  while (v210);
  unsigned int v211 = 12321;
  int v352 = 12321;
  int v212 = 9;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v211++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v211;
    --v212;
  }
  while (v212);
  int v352 = 12336;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3030u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v213 = 12342;
  int v352 = 12342;
  int v214 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v213++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v213;
    --v214;
  }
  while (v214);
  unsigned int v215 = 12344;
  int v352 = 12344;
  int v216 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v215++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v215;
    --v216;
  }
  while (v216);
  unsigned int v217 = 12349;
  int v352 = 12349;
  int v218 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v217++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v217;
    --v218;
  }
  while (v218);
  unsigned int v219 = 12443;
  int v352 = 12443;
  int v220 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v219++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v219;
    --v220;
  }
  while (v220);
  int v352 = 12448;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x30A0u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 12539;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x30FBu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v221 = 12688;
  int v352 = 12688;
  int v222 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v221++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v221;
    --v222;
  }
  while (v222);
  unsigned int v223 = 12690;
  int v352 = 12690;
  int v224 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v223++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v223;
    --v224;
  }
  while (v224);
  unsigned int v225 = 12694;
  int v352 = 12694;
  int v226 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v225++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v225;
    --v226;
  }
  while (v226);
  unsigned int v227 = 12736;
  int v352 = 12736;
  int v228 = 36;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v227++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v227;
    --v228;
  }
  while (v228);
  int v352 = 12783;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x31EFu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v229 = 12800;
  int v352 = 12800;
  int v230 = 31;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v229++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v229;
    --v230;
  }
  while (v230);
  unsigned int v231 = 12832;
  int v352 = 12832;
  int v232 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v231++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v231;
    --v232;
  }
  while (v232);
  unsigned int v233 = 12842;
  int v352 = 12842;
  int v234 = 30;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v233++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v233;
    --v234;
  }
  while (v234);
  unsigned int v235 = 12872;
  int v352 = 12872;
  int v236 = 8;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v235++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v235;
    --v236;
  }
  while (v236);
  int v352 = 12880;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3250u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v237 = 12881;
  int v352 = 12881;
  int v238 = 15;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v237++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v237;
    --v238;
  }
  while (v238);
  unsigned int v239 = 12896;
  int v352 = 12896;
  int v240 = 32;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v239++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v239;
    --v240;
  }
  while (v240);
  unsigned int v241 = 12928;
  int v352 = 12928;
  int v242 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v241++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v241;
    --v242;
  }
  while (v242);
  unsigned int v243 = 12938;
  int v352 = 12938;
  int v244 = 39;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v243++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v243;
    --v244;
  }
  while (v244);
  unsigned int v245 = 12977;
  int v352 = 12977;
  int v246 = 15;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v245++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v245;
    --v246;
  }
  while (v246);
  unsigned int v247 = 12992;
  int v352 = 12992;
  int v248 = 320;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v247++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v247;
    --v248;
  }
  while (v248);
  unsigned int v249 = 19904;
  int v352 = 19904;
  int v250 = 64;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v249++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v249;
    --v250;
  }
  while (v250);
  unsigned int v251 = 42128;
  int v352 = 42128;
  int v252 = 55;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v251++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v251;
    --v252;
  }
  while (v252);
  unsigned int v253 = 42238;
  int v352 = 42238;
  int v254 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v253++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v253;
    --v254;
  }
  while (v254);
  unsigned int v255 = 42509;
  int v352 = 42509;
  int v256 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v255++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v255;
    --v256;
  }
  while (v256);
  unsigned int v257 = 42528;
  int v352 = 42528;
  int v258 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v257++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v257;
    --v258;
  }
  while (v258);
  int v352 = 42611;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA673u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 42622;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA67Eu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v259 = 42726;
  int v352 = 42726;
  int v260 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v259++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v259;
    --v260;
  }
  while (v260);
  unsigned int v261 = 42738;
  int v352 = 42738;
  int v262 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v261++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v261;
    --v262;
  }
  while (v262);
  unsigned int v263 = 42752;
  int v352 = 42752;
  int v264 = 23;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v263++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v263;
    --v264;
  }
  while (v264);
  unsigned int v265 = 42784;
  int v352 = 42784;
  int v266 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v265++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v265;
    --v266;
  }
  while (v266);
  unsigned int v267 = 42889;
  int v352 = 42889;
  int v268 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v267++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v267;
    --v268;
  }
  while (v268);
  unsigned int v269 = 43048;
  int v352 = 43048;
  int v270 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v269++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v269;
    --v270;
  }
  while (v270);
  unsigned int v271 = 43056;
  int v352 = 43056;
  int v272 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v271++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v271;
    --v272;
  }
  while (v272);
  unsigned int v273 = 43062;
  int v352 = 43062;
  int v274 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v273++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v273;
    --v274;
  }
  while (v274);
  unsigned int v275 = 43124;
  int v352 = 43124;
  int v276 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v275++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v275;
    --v276;
  }
  while (v276);
  unsigned int v277 = 43214;
  int v352 = 43214;
  int v278 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v277++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v277;
    --v278;
  }
  while (v278);
  unsigned int v279 = 43216;
  int v352 = 43216;
  int v280 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v279++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v279;
    --v280;
  }
  while (v280);
  unsigned int v281 = 43256;
  int v352 = 43256;
  int v282 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v281++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v281;
    --v282;
  }
  while (v282);
  int v352 = 43260;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA8FCu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v283 = 43264;
  int v352 = 43264;
  int v284 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v283++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v283;
    --v284;
  }
  while (v284);
  unsigned int v285 = 43310;
  int v352 = 43310;
  int v286 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v285++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v285;
    --v286;
  }
  while (v286);
  int v352 = 43359;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA95Fu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v287 = 43457;
  int v352 = 43457;
  int v288 = 13;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v287++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v287;
    --v288;
  }
  while (v288);
  unsigned int v289 = 43472;
  int v352 = 43472;
  int v290 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v289++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v289;
    --v290;
  }
  while (v290);
  unsigned int v291 = 43486;
  int v352 = 43486;
  int v292 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v291++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v291;
    --v292;
  }
  while (v292);
  unsigned int v293 = 43504;
  int v352 = 43504;
  int v294 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v293++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v293;
    --v294;
  }
  while (v294);
  unsigned int v295 = 43600;
  int v352 = 43600;
  int v296 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v295++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v295;
    --v296;
  }
  while (v296);
  unsigned int v297 = 43612;
  int v352 = 43612;
  int v298 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v297++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v297;
    --v298;
  }
  while (v298);
  unsigned int v299 = 43639;
  int v352 = 43639;
  int v300 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v299++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v299;
    --v300;
  }
  while (v300);
  unsigned int v301 = 43742;
  int v352 = 43742;
  int v302 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v301++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v301;
    --v302;
  }
  while (v302);
  unsigned int v303 = 43760;
  int v352 = 43760;
  int v304 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v303++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v303;
    --v304;
  }
  while (v304);
  int v352 = 43867;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xAB5Bu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v305 = 43882;
  int v352 = 43882;
  int v306 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v305++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v305;
    --v306;
  }
  while (v306);
  int v352 = 44011;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xABEBu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v307 = 44016;
  int v352 = 44016;
  int v308 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v307++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v307;
    --v308;
  }
  while (v308);
  unsigned int v309 = 63475;
  int v352 = 63475;
  int v310 = 125;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v309++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v309;
    --v310;
  }
  while (v310);
  unsigned int v311 = 63616;
  int v352 = 63616;
  int v312 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v311++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v311;
    --v312;
  }
  while (v312);
  int v352 = 63619;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF883u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  int v352 = 63648;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF8A0u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v313 = 63649;
  int v352 = 63649;
  int v314 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v313++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v313;
    --v314;
  }
  while (v314);
  unsigned int v315 = 63656;
  int v352 = 63656;
  int v316 = 16;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v315++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v315;
    --v316;
  }
  while (v316);
  unsigned int v317 = 63673;
  int v352 = 63673;
  int v318 = 8;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v317++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v317;
    --v318;
  }
  while (v318);
  unsigned int v319 = 63703;
  int v352 = 63703;
  int v320 = 41;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v319++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v319;
    --v320;
  }
  while (v320);
  int v352 = 64297;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xFB29u, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v321 = 64434;
  int v352 = 64434;
  int v322 = 17;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v321++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v321;
    --v322;
  }
  while (v322);
  unsigned int v323 = 64830;
  int v352 = 64830;
  int v324 = 18;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v323++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v323;
    --v324;
  }
  while (v324);
  int v352 = 64975;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xFDCFu, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
  unsigned int v325 = 65020;
  int v352 = 65020;
  int v326 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v325++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v325;
    --v326;
  }
  while (v326);
  unsigned int v327 = 65040;
  int v352 = 65040;
  int v328 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v327++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v327;
    --v328;
  }
  while (v328);
  unsigned int v329 = 65072;
  int v352 = 65072;
  int v330 = 35;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v329++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v329;
    --v330;
  }
  while (v330);
  unsigned int v331 = 65108;
  int v352 = 65108;
  int v332 = 19;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v331++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v331;
    --v332;
  }
  while (v332);
  unsigned int v333 = 65128;
  int v352 = 65128;
  int v334 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v333++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v333;
    --v334;
  }
  while (v334);
  unsigned int v335 = 65281;
  int v352 = 65281;
  int v336 = 15;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v335++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v335;
    --v336;
  }
  while (v336);
  unsigned int v337 = 65296;
  int v352 = 65296;
  int v338 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v337++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
    int v352 = v337;
    --v338;
  }
  while (v338);
  unsigned int v339 = 65306;
  int v352 = 65306;
  int v340 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v339++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v339;
    --v340;
  }
  while (v340);
  unsigned int v341 = 65339;
  int v352 = 65339;
  int v342 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v341++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v341;
    --v342;
  }
  while (v342);
  unsigned int v343 = 65371;
  int v352 = 65371;
  int v344 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v343++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v343;
    --v344;
  }
  while (v344);
  unsigned int v345 = 65504;
  int v352 = 65504;
  int v346 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v345++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v345;
    --v346;
  }
  while (v346);
  unsigned int v347 = 65512;
  int v352 = 65512;
  int v348 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v347++, &v352)+ marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = v347;
    --v348;
  }
  while (v348);
  unsigned int v349 = 65532;
  int v352 = 65532;
  int v350 = 2;
  do
  {
    BOOL result = std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v349, &v352);
    *((_DWORD *)result + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 2;
    int v352 = ++v349;
    --v350;
  }
  while (v350);
  return result;
}

uint64_t std::unordered_map<char32_t,MeCab::UnicodeCharCategory>::~unordered_map[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned int v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  unsigned int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(unsigned int a1, _DWORD *a2)
{
  unint64_t v4 = a1;
  unint64_t v5 = *((void *)&MeCab::new_char_category_map(void)::m + 1);
  if (*((void *)&MeCab::new_char_category_map(void)::m + 1))
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&MeCab::new_char_category_map(void)::m + 8));
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v2 = a1;
      if (*((void *)&MeCab::new_char_category_map(void)::m + 1) <= (unint64_t)a1) {
        unint64_t v2 = (unint64_t)a1 % *((void *)&MeCab::new_char_category_map(void)::m + 1);
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & a1;
    }
    unsigned int v7 = *(void ***)(MeCab::new_char_category_map(void)::m + 8 * v2);
    if (v7)
    {
      unsigned int v8 = *v7;
      if (*v7)
      {
        do
        {
          unint64_t v9 = v8[1];
          if (v9 == a1)
          {
            if (*((_DWORD *)v8 + 4) == a1) {
              return v8;
            }
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v9 >= *((void *)&MeCab::new_char_category_map(void)::m + 1)) {
                v9 %= *((void *)&MeCab::new_char_category_map(void)::m + 1);
              }
            }
            else
            {
              v9 &= *((void *)&MeCab::new_char_category_map(void)::m + 1) - 1;
            }
            if (v9 != v2) {
              break;
            }
          }
          unsigned int v8 = (void *)*v8;
        }
        while (v8);
      }
    }
  }
  unsigned int v8 = operator new(0x18uLL);
  void *v8 = 0;
  v8[1] = v4;
  *((_DWORD *)v8 + 4) = *a2;
  *((_DWORD *)v8 + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  float v10 = (float)(unint64_t)(qword_267795B68 + 1);
  if (!v5 || (float)(*(float *)&dword_267795B70 * (float)v5) < v10)
  {
    BOOL v11 = 1;
    if (v5 >= 3) {
      BOOL v11 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v5);
    unint64_t v13 = vcvtps_u32_f32(v10 / *(float *)&dword_267795B70);
    if (v12 <= v13) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v12;
    }
    std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__rehash<true>(v14);
    unint64_t v5 = *((void *)&MeCab::new_char_category_map(void)::m + 1);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (*((void *)&MeCab::new_char_category_map(void)::m + 1) <= v4) {
        unint64_t v2 = v4 % *((void *)&MeCab::new_char_category_map(void)::m + 1);
      }
      else {
        unint64_t v2 = v4;
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & v4;
    }
  }
  uint64_t v15 = MeCab::new_char_category_map(void)::m;
  unsigned int v16 = *(void **)(MeCab::new_char_category_map(void)::m + 8 * v2);
  if (v16)
  {
    void *v8 = *v16;
LABEL_38:
    void *v16 = v8;
    goto LABEL_39;
  }
  void *v8 = qword_267795B60;
  qword_267795B60 = (uint64_t)v8;
  *(void *)(v15 + 8 * v2) = &qword_267795B60;
  if (*v8)
  {
    unint64_t v17 = *(void *)(*v8 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v17 >= v5) {
        v17 %= v5;
      }
    }
    else
    {
      v17 &= v5 - 1;
    }
    unsigned int v16 = (void *)(MeCab::new_char_category_map(void)::m + 8 * v17);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_267795B68;
  return v8;
}

void sub_2128E689C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&MeCab::new_char_category_map(void)::m + 1);
  if (prime <= *((void *)&MeCab::new_char_category_map(void)::m + 1))
  {
    if (prime >= *((void *)&MeCab::new_char_category_map(void)::m + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)(unint64_t)qword_267795B68 / *(float *)&dword_267795B70);
    if (*((void *)&MeCab::new_char_category_map(void)::m + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&MeCab::new_char_category_map(void)::m + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      size_t v14 = (void *)MeCab::new_char_category_map(void)::m;
      *(void *)&MeCab::new_char_category_map(void)::m = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&MeCab::new_char_category_map(void)::m + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unsigned int v3 = operator new(8 * prime);
  unint64_t v4 = (void *)MeCab::new_char_category_map(void)::m;
  *(void *)&MeCab::new_char_category_map(void)::m = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&MeCab::new_char_category_map(void)::m + 1) = prime;
  do
    *(void *)(MeCab::new_char_category_map(void)::m + 8 * v5++) = 0;
  while (prime != v5);
  uint8x8_t v6 = (void **)qword_267795B60;
  if (qword_267795B60)
  {
    size_t v7 = *(void *)(qword_267795B60 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(MeCab::new_char_category_map(void)::m + 8 * v7) = &qword_267795B60;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(MeCab::new_char_category_map(void)::m + 8 * v13))
        {
          *(void *)(MeCab::new_char_category_map(void)::m + 8 * v13) = v6;
          goto LABEL_31;
        }
        *uint8x8_t v6 = (void *)*i;
        *int i = **(void **)(MeCab::new_char_category_map(void)::m + 8 * v13);
        **(void **)(MeCab::new_char_category_map(void)::m + 8 * v13) = i;
        int i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      uint8x8_t v6 = (void **)i;
      int i = (void *)*i;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(unsigned int a1, _DWORD *a2)
{
  unint64_t v4 = a1;
  unint64_t v5 = *((void *)&MeCab::new_char_category_map(void)::m + 1);
  if (*((void *)&MeCab::new_char_category_map(void)::m + 1))
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&MeCab::new_char_category_map(void)::m + 8));
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v2 = a1;
      if (*((void *)&MeCab::new_char_category_map(void)::m + 1) <= (unint64_t)a1) {
        unint64_t v2 = (unint64_t)a1 % *((void *)&MeCab::new_char_category_map(void)::m + 1);
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & a1;
    }
    size_t v7 = *(void ***)(MeCab::new_char_category_map(void)::m + 8 * v2);
    if (v7)
    {
      uint8x8_t v8 = *v7;
      if (*v7)
      {
        do
        {
          unint64_t v9 = v8[1];
          if (v9 == a1)
          {
            if (*((_DWORD *)v8 + 4) == a1) {
              return v8;
            }
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v9 >= *((void *)&MeCab::new_char_category_map(void)::m + 1)) {
                v9 %= *((void *)&MeCab::new_char_category_map(void)::m + 1);
              }
            }
            else
            {
              v9 &= *((void *)&MeCab::new_char_category_map(void)::m + 1) - 1;
            }
            if (v9 != v2) {
              break;
            }
          }
          uint8x8_t v8 = (void *)*v8;
        }
        while (v8);
      }
    }
  }
  uint8x8_t v8 = operator new(0x18uLL);
  void *v8 = 0;
  v8[1] = v4;
  *((_DWORD *)v8 + 4) = *a2;
  *((_DWORD *)v8 + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  float v10 = (float)(unint64_t)(qword_267795B68 + 1);
  if (!v5 || (float)(*(float *)&dword_267795B70 * (float)v5) < v10)
  {
    BOOL v11 = 1;
    if (v5 >= 3) {
      BOOL v11 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v5);
    unint64_t v13 = vcvtps_u32_f32(v10 / *(float *)&dword_267795B70);
    if (v12 <= v13) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v12;
    }
    std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__rehash<true>(v14);
    unint64_t v5 = *((void *)&MeCab::new_char_category_map(void)::m + 1);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (*((void *)&MeCab::new_char_category_map(void)::m + 1) <= v4) {
        unint64_t v2 = v4 % *((void *)&MeCab::new_char_category_map(void)::m + 1);
      }
      else {
        unint64_t v2 = v4;
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & v4;
    }
  }
  uint64_t v15 = MeCab::new_char_category_map(void)::m;
  unsigned int v16 = *(void **)(MeCab::new_char_category_map(void)::m + 8 * v2);
  if (v16)
  {
    void *v8 = *v16;
LABEL_38:
    void *v16 = v8;
    goto LABEL_39;
  }
  void *v8 = qword_267795B60;
  qword_267795B60 = (uint64_t)v8;
  *(void *)(v15 + 8 * v2) = &qword_267795B60;
  if (*v8)
  {
    unint64_t v17 = *(void *)(*v8 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v17 >= v5) {
        v17 %= v5;
      }
    }
    else
    {
      v17 &= v5 - 1;
    }
    unsigned int v16 = (void *)(MeCab::new_char_category_map(void)::m + 8 * v17);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_267795B68;
  return v8;
}

void sub_2128E6CDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::find<char32_t>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint8x8_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MeCab::NBestGenerator::set(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = (char **)(a1 + 1);
  uint8x8_t v4 = (void *)a1[1];
  v5[8] = 0;
  v5[9] = 0;
  if (v4)
  {
    a1[2] = (uint64_t)v4;
    operator delete(v4);
  }
  void *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  double v6 = MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::alloc(v5 + 4);
  unint64_t v8 = v7;
  void *v7 = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 24))(a2, v6);
  v8[1] = 0;
  void v8[2] = 0;
  long long v8[3] = 0;
  unint64_t v9 = a1[3];
  float v10 = (char *)a1[2];
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = (v10 - *v5) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<MeCab::NBestGenerator::QueueElement *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v9 - (void)*v5;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      unsigned int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v15);
    }
    else {
      unsigned int v16 = 0;
    }
    unint64_t v17 = &v16[8 * v12];
    unsigned int v18 = &v16[8 * v15];
    *(void *)unint64_t v17 = v8;
    uint64_t v11 = (uint64_t)(v17 + 8);
    unsigned int v20 = (char *)a1[1];
    unsigned int v19 = (char *)a1[2];
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      unsigned int v19 = *v5;
    }
    a1[1] = (uint64_t)v17;
    a1[2] = v11;
    a1[3] = (uint64_t)v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *(void *)float v10 = v8;
    uint64_t v11 = (uint64_t)(v10 + 8);
  }
  a1[2] = v11;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>(a1[1], v11, (uint64_t)&v23, (v11 - a1[1]) >> 3);
  return 1;
}

double MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::alloc(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = a1[4];
  if (v2 == a1[6])
  {
    uint64_t v2 = 0;
    ++v1;
    a1[4] = 0;
    a1[5] = v1;
  }
  uint64_t v3 = a1[1];
  if (v1 == (a1[2] - v3) >> 3) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(v3 + 8 * v1);
  a1[4] = v2 + 1;
  unint64_t v5 = (_OWORD *)(v4 + 32 * v2);
  double result = 0.0;
  _OWORD *v5 = 0u;
  v5[1] = 0u;
  return result;
}

BOOL MeCab::NBestGenerator::next(MeCab::NBestGenerator *this)
{
  uint64_t v2 = (char **)((char *)this + 8);
  uint64_t v3 = (void *)((char *)this + 40);
  unsigned int v42 = (char *)this + 24;
  do
  {
    uint64_t v4 = (char *)*((void *)this + 1);
    unint64_t v5 = (char *)*((void *)this + 2);
    if (v4 == v5) {
      break;
    }
    double v6 = *(void **)v4;
    if (v5 - v4 >= 9)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (unint64_t)(v5 - v4) >> 3;
      uint64_t v9 = v8 - 2;
      if (v8 < 2) {
        uint64_t v9 = v8 - 1;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = (char *)*((void *)this + 1);
      do
      {
        uint64_t v12 = &v11[8 * v7];
        uint64_t v15 = *((void *)v12 + 1);
        uint64_t v13 = v12 + 8;
        uint64_t v14 = v15;
        uint64_t v16 = (2 * v7) | 1;
        uint64_t v17 = 2 * v7 + 2;
        if (v17 < (uint64_t)v8 && *(void *)(v14 + 16) > *(void *)(*((void *)v13 + 1) + 16))
        {
          uint64_t v14 = *((void *)v13 + 1);
          v13 += 8;
          uint64_t v16 = v17;
        }
        *(void *)uint64_t v11 = v14;
        uint64_t v11 = v13;
        uint64_t v7 = v16;
      }
      while (v16 <= v10);
      unsigned int v18 = v5 - 8;
      if (v5 - 8 == v13)
      {
        *(void *)uint64_t v13 = v6;
      }
      else
      {
        *(void *)uint64_t v13 = *(void *)v18;
        *(void *)unsigned int v18 = v6;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>((uint64_t)v4, (uint64_t)(v13 + 8), (uint64_t)&v43, (v13 + 8 - v4) >> 3);
      }
    }
    *((void *)this + 2) -= 8;
    unsigned int v19 = (void *)*v6;
    int v20 = *(unsigned __int8 *)(*v6 + 91);
    if (v20 == 2)
    {
      uint64_t v21 = v6[1];
      if (!v21) {
        return v4 != v5;
      }
      do
      {
        unsigned int v22 = *(void **)v21;
        v19[1] = *(void *)v21;
        void *v22 = v19;
        uint64_t v21 = *(void *)(v21 + 8);
        unsigned int v19 = v22;
      }
      while (v21);
    }
    else
    {
      for (uint64_t i = v19[5]; i; uint64_t i = *(void *)(i + 16))
      {
        MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::alloc(v3);
        unsigned int v25 = v24;
        uint64_t v26 = *(void *)(i + 8);
        uint64_t v27 = *(int *)(i + 24);
        v24[3] = v6[3] + v27;
        uint64_t v28 = *(void *)(v26 + 96) + v27 + v6[3];
        v24[1] = v6;
        v24[2] = v28;
        *unsigned int v24 = v26;
        unsigned int v30 = (char *)*((void *)this + 2);
        unint64_t v29 = *((void *)this + 3);
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v32 = (v30 - *v2) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            std::vector<MeCab::NBestGenerator::QueueElement *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v29 - (void)*v2;
          uint64_t v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
            uint64_t v34 = v32 + 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            unsigned int v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)v42, v35);
          }
          else {
            unsigned int v36 = 0;
          }
          unsigned int v37 = &v36[8 * v32];
          *(void *)unsigned int v37 = v25;
          uint64_t v31 = (uint64_t)(v37 + 8);
          unsigned int v39 = (char *)*((void *)this + 1);
          unsigned int v38 = (char *)*((void *)this + 2);
          if (v38 != v39)
          {
            do
            {
              uint64_t v40 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            unsigned int v38 = *v2;
          }
          *((void *)this + 1) = v37;
          *((void *)this + 2) = v31;
          *((void *)this + 3) = &v36[8 * v35];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *(void *)unsigned int v30 = v24;
          uint64_t v31 = (uint64_t)(v30 + 8);
        }
        *((void *)this + 2) = v31;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>(*((void *)this + 1), v31, (uint64_t)&v44, (v31 - *((void *)this + 1)) >> 3);
      }
    }
  }
  while (v20 != 2);
  return v4 != v5;
}

void std::vector<MeCab::NBestGenerator::QueueElement *>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    unint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    uint64_t v10 = *(void *)(v9 + 16);
    if (*(void *)(*v5 + 16) > v10)
    {
      do
      {
        uint64_t v11 = v5;
        void *v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        unint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v11;
      }
      while (*(void *)(*v5 + 16) > v10);
      *uint64_t v11 = v8;
    }
  }
  return result;
}

uint64_t MeCab::LBFGS::clear(MeCab::LBFGS *this)
{
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 10) = *((void *)this + 9);
  *((void *)this + 13) = *((void *)this + 12);
  uint64_t result = *((void *)this + 15);
  if (result) {
    uint64_t result = MEMORY[0x2166855D0](result, 0x1000C40DF44A08DLL);
  }
  *((void *)this + 1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  return result;
}

void MeCab::LBFGS::lbfgs_optimize(MeCab::LBFGS *this, int a2, int a3, double *a4, double a5, double *a6, double *__b, double *a8, char a9, double a10, int *a11)
{
  unsigned int v18 = a8 - 1;
  int v205 = __b;
  unsigned int v206 = a4;
  if (!*((void *)this + 15)) {
    operator new();
  }
  int v19 = *a11;
  double v20 = 0.0;
  if (*a11 == 2) {
    goto LABEL_24;
  }
  if (v19 == 1) {
    goto LABEL_77;
  }
  if (!v19)
  {
    *((_DWORD *)this + 6) = 0;
    if (a2 <= 0)
    {
      int v33 = a2 + 2 * a3;
      *((_DWORD *)this + 10) = v33;
      *((_DWORD *)this + 12) = v33 + a3 * a2;
      if (!a2)
      {
        double v30 = 0.0;
LABEL_14:
        *((double *)this + 8) = 1.0 / sqrt(v30);
        goto LABEL_15;
      }
    }
    else
    {
      memset_pattern16(__b, &unk_212911DF0, 8 * a2);
      __b = v205;
      int v21 = a2 + 2 * a3;
      *((_DWORD *)this + 10) = v21;
      *((_DWORD *)this + 12) = v21 + a3 * a2;
      uint64_t v22 = (a2 + 1) - 1;
      char v23 = &a8[v21];
      unsigned int v24 = a6;
      unsigned int v25 = v205;
      do
      {
        double v26 = *v24++;
        double v27 = v26;
        double v28 = *v25++;
        *v23++ = -(v27 * v28);
        --v22;
      }
      while (v22);
    }
    uint64_t v29 = 8 * a2;
    double v30 = 0.0;
    uint64_t v31 = a6;
    a4 = v206;
    do
    {
      double v32 = *v31++;
      double v30 = v30 + v32 * v32;
      v29 -= 8;
    }
    while (v29);
    goto LABEL_14;
  }
  while (1)
  {
LABEL_15:
    int v34 = *((_DWORD *)this + 8);
    *((void *)this + 4) = (v34 + 1);
    if (v34)
    {
      double v20 = 0.0;
      if (a2)
      {
        int v35 = *((_DWORD *)this + 7) + 1;
        unsigned int v36 = &v18[v35 + *((_DWORD *)this + 12)];
        unsigned int v37 = &v18[*((_DWORD *)this + 10) + v35];
        uint64_t v38 = 8 * a2;
        uint64_t v39 = v38;
        uint64_t v40 = v36;
        do
        {
          double v41 = *v40++;
          double v42 = v41;
          double v43 = *v37++;
          double v20 = v20 + v42 * v43;
          v39 -= 8;
        }
        while (v39);
        double v44 = 0.0;
        do
        {
          double v45 = *v36++;
          double v44 = v44 + v45 * v45;
          v38 -= 8;
        }
        while (v38);
        if (a2 >= 1)
        {
          uint64_t v46 = (a2 + 1) - 1;
          unsigned int v47 = __b;
          double v48 = v20 / v44;
          do
          {
            *v47++ = v48;
            --v46;
          }
          while (v46);
        }
      }
LABEL_24:
      int v49 = *((_DWORD *)this + 6);
      if (v49) {
        int v50 = *((_DWORD *)this + 6);
      }
      else {
        int v50 = a3;
      }
      v18[v50 + a2] = 1.0 / v20;
      if (a2 >= 1)
      {
        uint64_t v51 = (a2 + 1) - 1;
        int v52 = a6;
        unsigned int v53 = a8;
        do
        {
          double v54 = *v52++;
          *v53++ = -v54;
          --v51;
        }
        while (v51);
      }
      int v55 = *((_DWORD *)this + 8);
      int v56 = v55 - 1;
      if (v55 - 1 >= a3) {
        int v56 = a3;
      }
      if (v56 < 1)
      {
        int v60 = v49;
      }
      else
      {
        int v57 = *((_DWORD *)this + 12);
        int v58 = *((_DWORD *)this + 10) + 1;
        int v59 = 1;
        int v60 = v49;
        do
        {
          if (v60) {
            int v61 = v60;
          }
          else {
            int v61 = a3;
          }
          int v60 = v61 - 1;
          int v62 = (v61 - 1) * a2;
          if (a2)
          {
            double v63 = 0.0;
            uint64_t v64 = 8 * a2;
            unsigned int v65 = a8;
            do
            {
              double v66 = v65[v58 - 1 + v62];
              double v67 = *v65++;
              double v63 = v63 + v66 * v67;
              v64 -= 8;
            }
            while (v64);
          }
          else
          {
            double v63 = 0.0;
          }
          int v68 = v62 + v57;
          double v69 = v18[v61 + a2];
          v18[a3 + a2 + v61] = v63 * v69;
          if (a2 >= 1)
          {
            double v70 = -(v63 * v69);
            unsigned int v71 = a8;
            uint64_t v72 = a2;
            do
            {
              *unsigned int v71 = *v71 + v70 * v71[v68];
              ++v71;
              --v72;
            }
            while (v72);
          }
          BOOL v73 = v59++ == v56;
        }
        while (!v73);
        *((_DWORD *)this + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v68;
      }
      if (a2 >= 1)
      {
        uint64_t v74 = (a2 + 1) - 1;
        unsigned int v75 = __b;
        int v76 = a8;
        do
        {
          double v77 = *v75++;
          *int v76 = v77 * *v76;
          ++v76;
          --v74;
        }
        while (v74);
      }
      if (v56 >= 1)
      {
        int v78 = *((_DWORD *)this + 10);
        int v79 = *((_DWORD *)this + 12) + 1;
        int v80 = 1;
        do
        {
          int v81 = v60 * a2;
          if (a2)
          {
            double v82 = 0.0;
            uint64_t v83 = 8 * a2;
            int v84 = a8;
            do
            {
              double v85 = v84[v79 - 1 + v81];
              double v86 = *v84++;
              double v82 = v82 + v85 * v86;
              v83 -= 8;
            }
            while (v83);
          }
          else
          {
            double v82 = 0.0;
          }
          int v87 = v81 + v78;
          if (a2 >= 1)
          {
            double v88 = v18[a2 + 1 + a3 + v60] - v82 * v18[v60 + 1 + a2];
            unsigned int v89 = a8;
            uint64_t v90 = a2;
            do
            {
              *unsigned int v89 = *v89 + v88 * v89[v87];
              ++v89;
              --v90;
            }
            while (v90);
          }
          if (v60 + 1 == a3) {
            int v60 = 0;
          }
          else {
            ++v60;
          }
          BOOL v73 = v80++ == v56;
        }
        while (!v73);
        *((_DWORD *)this + 3) = v87;
      }
      if (a2 >= 1)
      {
        int v91 = *((_DWORD *)this + 10) + v49 * a2;
        uint64_t v92 = (a2 + 1) - 1;
        int v93 = v91 + 1;
        int v94 = a8;
        do
        {
          double v95 = *v94++;
          v18[v93++] = v95;
          --v92;
        }
        while (v92);
      }
      *((_DWORD *)this + 4) = 0;
      *((void *)this + 7) = 0x3FF0000000000000;
      if (v55 != 1) {
        goto LABEL_74;
      }
    }
    else
    {
      *((_DWORD *)this + 4) = 0;
    }
    *((void *)this + 7) = *((void *)this + 8);
LABEL_74:
    if (a2 >= 1)
    {
      uint64_t v96 = (a2 + 1) - 1;
      unsigned int v97 = a6;
      int v98 = a8;
      do
      {
        uint64_t v99 = *(void *)v97++;
        *(void *)v98++ = v99;
        --v96;
      }
      while (v96);
    }
LABEL_77:
    uint64_t v100 = *((void *)this + 15);
    int v101 = *((_DWORD *)this + 9);
    int v102 = &v18[*((_DWORD *)this + 10) + 1 + *((_DWORD *)this + 6) * a2];
    unsigned int v103 = (double *)((char *)this + 56);
    if (v101 != -1)
    {
      *(_DWORD *)uint64_t v100 = 1;
      if (a2 < 1) {
        goto LABEL_199;
      }
      if (*v103 <= 0.0) {
        goto LABEL_119;
      }
      uint64_t v104 = 8 * a2;
      double v105 = 0.0;
      int v106 = v102;
      unsigned int v107 = a6;
      do
      {
        double v108 = *v107++;
        double v109 = v108;
        double v110 = *v106++;
        double v105 = v105 + v109 * v110;
        v104 -= 8;
      }
      while (v104);
      *(double *)(v100 + 24) = v105;
      if (v105 >= 0.0)
      {
LABEL_119:
        int v101 = *((_DWORD *)this + 9);
        goto LABEL_199;
      }
      *(void *)(v100 + 4) = 1;
      *((_DWORD *)this + 4) = 0;
      *(double *)(v100 + 16) = a5;
      *(double *)(v100 + 32) = v105 * 0.0001;
      *(_OWORD *)(v100 + 40) = xmmword_212911DE0;
      uint64_t v111 = (a2 + 1) - 1;
      int v112 = a4;
      unsigned int v113 = __b;
      do
      {
        uint64_t v114 = *(void *)v112++;
        *(void *)v113++ = v114;
        --v111;
      }
      while (v111);
      uint64_t v116 = *(void *)(v100 + 16);
      uint64_t v115 = *(void *)(v100 + 24);
      *(void *)(v100 + 56) = 0;
      *(void *)(v100 + 64) = v116;
      *(void *)(v100 + 72) = v115;
      *(void *)(v100 + 80) = 0;
      *(void *)(v100 + 88) = v116;
      *(void *)(v100 + 96) = v115;
      double v117 = 0.0;
      double v118 = 0.0;
      if (!*(_DWORD *)(v100 + 8)) {
        goto LABEL_136;
      }
      goto LABEL_129;
    }
    *((_DWORD *)this + 9) = 0;
    int v119 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v119 + 1;
    double v120 = 0.0;
    if (a2)
    {
      uint64_t v121 = 8 * a2;
      int v122 = v102;
      unsigned int v123 = a6;
      do
      {
        double v124 = *v123++;
        double v125 = v124;
        double v126 = *v122++;
        double v120 = v120 + v125 * v126;
        v121 -= 8;
      }
      while (v121);
    }
    int v101 = 0;
    unsigned int v127 = (_DWORD *)(v100 + 8);
    double v128 = *v103;
    double v129 = *(double *)(v100 + 32);
    double v130 = *(double *)(v100 + 16) + *v103 * v129;
    if (*(_DWORD *)(v100 + 8))
    {
      if (v128 <= *(double *)(v100 + 104) || v128 >= *(double *)(v100 + 112) || (int v101 = 0, !*(_DWORD *)v100))
      {
        int v101 = 6;
        *((_DWORD *)this + 9) = 6;
      }
    }
    BOOL v131 = v128 != 1.0e20 || v130 < a5;
    if (!v131 && v120 <= v129)
    {
      int v101 = 5;
      *((_DWORD *)this + 9) = 5;
    }
    if (v128 == 1.0e-20 && (v130 < a5 || v120 >= v129))
    {
      int v101 = 4;
      *((_DWORD *)this + 9) = 4;
    }
    if (v119 >= 19)
    {
      int v101 = 3;
      *((_DWORD *)this + 9) = 3;
    }
    if (*v127 && *(double *)(v100 + 112) - *(double *)(v100 + 104) <= *(double *)(v100 + 112) * 1.0e-16)
    {
      int v101 = 2;
      *((_DWORD *)this + 9) = 2;
    }
    if (v130 >= a5)
    {
      int v133 = 1;
      if (fabs(v120) <= *(double *)(v100 + 24) * -0.9) {
        goto LABEL_198;
      }
    }
    if (v101) {
      goto LABEL_199;
    }
    int v134 = *(_DWORD *)(v100 + 4);
    if (v130 >= a5 && v134)
    {
      if (v120 >= *(double *)(v100 + 24) * 0.0001)
      {
        *(_DWORD *)(v100 + 4) = 0;
LABEL_124:
        goto LABEL_125;
      }
    }
    else if (!v134)
    {
      goto LABEL_124;
    }
    double v135 = *(double *)(v100 + 64);
    if (v135 < a5 || v130 >= a5) {
      goto LABEL_124;
    }
    double v136 = v135 - *(double *)(v100 + 56) * v129;
    double v137 = *(double *)(v100 + 96);
    double v210 = *(double *)(v100 + 88) - *(double *)(v100 + 80) * v129;
    *(double *)&v211.__locale_ = v136;
    double v138 = *(double *)(v100 + 72) - v129;
    double v208 = v137 - v129;
    double v209 = v138;
    double v139 = *(double *)(v100 + 32);
    double v140 = v210 + *(double *)(v100 + 80) * v139;
    double v141 = v139 + v209;
    *(double *)(v100 + 64) = *(double *)&v211.__locale_ + *(double *)(v100 + 56) * v139;
    *(double *)(v100 + 72) = v141;
    double v142 = v139 + v208;
    *(double *)(v100 + 88) = v140;
    *(double *)(v100 + 96) = v142;
LABEL_125:
    __b = v205;
    a4 = v206;
    if (!*v127)
    {
      double v117 = *(double *)(v100 + 56);
LABEL_136:
      *(double *)(v100 + 104) = v117;
      double v117 = *v103 + (*v103 - v117) * 4.0;
      char v145 = 1;
      goto LABEL_137;
    }
    double v118 = *(double *)(v100 + 80);
    double v117 = *(double *)(v100 + 56);
    double v143 = vabdd_f64(v118, v117);
    if (v143 >= *(double *)(v100 + 48) * 0.66)
    {
      *unsigned int v103 = v117 + (v118 - v117) * 0.5;
      double v118 = *(double *)(v100 + 80);
      double v117 = *(double *)(v100 + 56);
      double v143 = vabdd_f64(v118, v117);
    }
    uint64_t v144 = *(void *)(v100 + 40);
    *(double *)(v100 + 40) = v143;
    *(void *)(v100 + 48) = v144;
LABEL_129:
    char v145 = 0;
    if (v118 >= v117) {
      double v146 = v117;
    }
    else {
      double v146 = v118;
    }
    *(double *)(v100 + 104) = v146;
    if (v117 < v118) {
      double v117 = v118;
    }
LABEL_137:
    *(double *)(v100 + 112) = v117;
    double v147 = *v103;
    if (*v103 < 1.0e-20) {
      double v147 = 1.0e-20;
    }
    if (v147 <= 1.0e20) {
      double v148 = v147;
    }
    else {
      double v148 = 1.0e20;
    }
    *unsigned int v103 = v148;
    if ((v145 & 1) == 0)
    {
      double v149 = *(double *)(v100 + 104);
      if (v148 <= v149
        || (double v150 = *(double *)(v100 + 112), v148 >= v150)
        || *((int *)this + 4) > 18
        || !*(_DWORD *)v100
        || v150 - v149 <= v150 * 1.0e-16)
      {
        *unsigned int v103 = *(double *)(v100 + 56);
      }
    }
    if (a9)
    {
      int v133 = -1;
      if (a2 >= 1)
      {
        uint64_t v151 = (a2 + 1) - 1;
        unsigned int v152 = __b;
        int v153 = a6;
        unsigned int v154 = a4;
        double v155 = 1.0 / a10;
        do
        {
          double v156 = *v152++;
          double v157 = v156;
          double v158 = *v153++;
          double v159 = v158;
          if (v157 >= 0.0) {
            double v160 = 0.0;
          }
          else {
            double v160 = -1.0;
          }
          if (v157 > 0.0) {
            double v160 = 1.0;
          }
          double v161 = v159 - v155;
          double v162 = v159 + v160 / a10;
          double v163 = v155 + v159;
          if (v157 != 0.0)
          {
            double v161 = v162;
            double v163 = v162;
          }
          double v164 = fmin(v163, 0.0);
          if (v161 > 0.0) {
            double v164 = v161;
          }
          double v165 = *v102++;
          double v166 = v165;
          BOOL v167 = v165 <= 0.0;
          if (v165 >= 0.0) {
            double v168 = 0.0;
          }
          else {
            double v168 = -1.0;
          }
          if (!v167) {
            double v168 = 1.0;
          }
          BOOL v169 = v164 < 0.0;
          if (v164 <= 0.0) {
            double v170 = 0.0;
          }
          else {
            double v170 = -1.0;
          }
          if (v169) {
            double v170 = 1.0;
          }
          if (v168 != v170) {
            double v166 = 0.0;
          }
          if (v157 >= 0.0) {
            double v171 = 0.0;
          }
          else {
            double v171 = -1.0;
          }
          if (v157 > 0.0) {
            double v171 = 1.0;
          }
          if (v157 != 0.0) {
            double v170 = v171;
          }
          double v172 = v157 + *v103 * v166;
          if (v172 >= 0.0) {
            double v173 = 0.0;
          }
          else {
            double v173 = -1.0;
          }
          if (v172 > 0.0) {
            double v173 = 1.0;
          }
          BOOL v174 = v170 <= 0.0;
          if (v170 >= 0.0) {
            double v175 = 0.0;
          }
          else {
            double v175 = -1.0;
          }
          if (!v174) {
            double v175 = 1.0;
          }
          if (v173 != v175) {
            double v172 = 0.0;
          }
          *v154++ = v172;
          --v151;
        }
        while (v151);
        goto LABEL_197;
      }
    }
    else
    {
      int v133 = -1;
      if (a2 >= 1)
      {
        uint64_t v176 = (a2 + 1) - 1;
        int v177 = __b;
        unsigned int v178 = a4;
        do
        {
          double v179 = *v177++;
          double v180 = v179;
          double v181 = *v102++;
          *v178++ = v180 + *v103 * v181;
          --v176;
        }
        while (v176);
LABEL_197:
        int v133 = -1;
      }
    }
LABEL_198:
    *((_DWORD *)this + 9) = v133;
    int v101 = v133;
LABEL_199:
    if (v101 != 1) {
      break;
    }
    int v182 = *((_DWORD *)this + 6);
    int v183 = v182 * a2;
    *((_DWORD *)this + 7) = v182 * a2;
    if (a2 >= 1)
    {
      uint64_t v184 = (a2 + 1) - 1;
      int v185 = *((_DWORD *)this + 12) + v183 + 1;
      int v186 = *((_DWORD *)this + 10) + v183 + 1;
      int v187 = a6;
      unsigned int v188 = a8;
      do
      {
        v18[v186] = *v103 * v18[v186];
        double v189 = *v187++;
        double v190 = v189;
        double v191 = *v188++;
        v18[v185++] = v190 - v191;
        ++v186;
        --v184;
      }
      while (v184);
    }
    if (v182 + 1 == a3) {
      int v192 = 0;
    }
    else {
      int v192 = v182 + 1;
    }
    *((_DWORD *)this + 6) = v192;
    double v193 = 0.0;
    double v194 = 0.0;
    if (a2)
    {
      uint64_t v195 = 8 * a2;
      uint64_t v196 = v195;
      int v197 = a6;
      do
      {
        double v198 = *v197++;
        double v193 = v193 + v198 * v198;
        v196 -= 8;
      }
      while (v196);
      double v194 = 0.0;
      int v199 = a4;
      do
      {
        double v200 = *v199++;
        double v194 = v194 + v200 * v200;
        v195 -= 8;
      }
      while (v195);
      double v193 = sqrt(v193);
    }
    if (v193 / fmax(sqrt(v194), 1.0) <= 0.0000001)
    {
      int v201 = 0;
      goto LABEL_217;
    }
  }
  if (v101 == -1)
  {
    int v201 = 1;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"The line search routine mcsrch failed: error code:", 50);
    unsigned int v202 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v202 + *(void *)(*v202 - 24)));
    int v203 = std::locale::use_facet(&v211, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v203->__vftable[2].~facet_0)(v203, 10);
    std::locale::~locale(&v211);
    std::ostream::put();
    std::ostream::flush();
    int v201 = -1;
  }
LABEL_217:
  *a11 = v201;
}

void sub_2128E7FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
}

double *anonymous namespace'::mcstep(double *this, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9, double a10, double a11, double a12, int *a13, int *a14)
{
  *a13 = 0;
  if (!*(_DWORD *)a8)
  {
    double v18 = *a3;
    goto LABEL_13;
  }
  double v14 = *a7;
  double v15 = *a4;
  double v16 = *this;
  if (*a4 >= *this) {
    double v17 = *this;
  }
  else {
    double v17 = *a4;
  }
  if (v14 > v17)
  {
    if (v16 >= v15) {
      double v15 = *this;
    }
    if (v14 < v15 && a12 >= a11)
    {
      double v18 = *a3;
      if ((v14 - v16) * *a3 < 0.0)
      {
LABEL_13:
        double v19 = fabs(v18);
        double v20 = *a2;
        if (*a2 < a9)
        {
          int v21 = 1;
          *a13 = 1;
          double v22 = v20 - a9;
          double v23 = *a7;
          double v24 = *this;
          double v25 = *a7 - *this;
          double v26 = v18 + v22 * 3.0 / v25 + a10;
          double v27 = fabs(v26);
          if (v27 >= v19) {
            double v19 = v27;
          }
          double v28 = fabs(a10);
          if (v19 < v28) {
            double v19 = v28;
          }
          double v29 = v19 * sqrt(-v18 / v19 * (a10 / v19) + v26 / v19 * (v26 / v19));
          double v30 = -v29;
          if (v23 >= v24) {
            double v30 = v29;
          }
          double v31 = v24 + (v26 + v30 - v18) / (v30 + v30 - v18 + a10) * v25;
          double v32 = v24 + v18 / (v18 + v22 / v25) * 0.5 * v25;
          double v33 = vabdd_f64(v31, v24);
          double v34 = vabdd_f64(v32, v24);
          double v35 = (v32 - v31) * 0.5;
          if (v33 < v34) {
            double v35 = -0.0;
          }
          double v36 = v31 + v35;
          *(_DWORD *)a8 = 1;
          *a4 = v23;
          a2 = a5;
          a3 = a6;
          int v37 = 1;
          goto LABEL_65;
        }
        if (v18 / v19 * a10 < 0.0)
        {
          int v37 = 0;
          *a13 = 2;
          double v38 = *a7;
          double v39 = *this;
          double v40 = v18 + (v20 - a9) * 3.0 / (*a7 - *this) + a10;
          double v41 = fabs(v40);
          if (v41 >= v19) {
            double v19 = v41;
          }
          double v42 = fabs(a10);
          if (v19 < v42) {
            double v19 = v42;
          }
          double v43 = v19 * sqrt(-v18 / v19 * (a10 / v19) + v40 / v19 * (v40 / v19));
          double v44 = -v43;
          if (v38 <= v39) {
            double v44 = v43;
          }
          double v45 = v38 + (v40 + v44 - a10) / (v18 + v44 + v44 - a10) * (v39 - v38);
          double v46 = v38 + a10 / (a10 - v18) * (v39 - v38);
          if (vabdd_f64(v45, v38) <= vabdd_f64(v46, v38)) {
            double v36 = v46;
          }
          else {
            double v36 = v45;
          }
          int v21 = 1;
          *(_DWORD *)a8 = 1;
          *a4 = v39;
          *a5 = *a2;
          *a6 = *a3;
          double v47 = *a7;
          goto LABEL_64;
        }
        double v48 = fabs(a10);
        if (v48 >= v19)
        {
          *a13 = 4;
          int v21 = *(_DWORD *)a8;
          if (*(_DWORD *)a8)
          {
            int v37 = 0;
            double v47 = *a7;
            double v56 = *a4 - *a7;
            double v57 = *a6;
            double v58 = *a6 + (a9 - *a5) * 3.0 / v56 + a10;
            double v59 = fabs(v58);
            double v60 = fabs(*a6);
            if (v59 < v60) {
              double v59 = v60;
            }
            if (v59 >= v48) {
              double v48 = v59;
            }
            double v61 = v48 * sqrt(-v57 / v48 * (a10 / v48) + v58 / v48 * (v58 / v48));
            if (v47 <= *a4) {
              double v62 = v61;
            }
            else {
              double v62 = -v61;
            }
            double v36 = v47 + (v58 + v62 - a10) / (v57 + v62 + v62 - a10) * v56;
          }
          else
          {
            double v47 = *a7;
            int v37 = 0;
            if (*a7 <= *this) {
              double v36 = a11;
            }
            else {
              double v36 = a12;
            }
            int v21 = 0;
          }
          goto LABEL_64;
        }
        *a13 = 3;
        double v49 = (v20 - a9) * 3.0;
        double v47 = *a7;
        double v50 = *this;
        double v51 = v18 + v49 / (*a7 - *this) + a10;
        double v52 = fabs(v51);
        if (v52 >= v19) {
          double v19 = v52;
        }
        if (v19 < v48) {
          double v19 = v48;
        }
        double v53 = v19 * sqrt(fmax(-v18 / v19 * (a10 / v19) + v51 / v19 * (v51 / v19), 0.0));
        double v54 = -v53;
        if (v47 <= v50) {
          double v54 = v53;
        }
        if (v54 == 0.0 || (double v55 = (v51 + v54 - a10) / (v54 + v18 - a10 + v54), v55 >= 0.0))
        {
          double v36 = a12;
          if (v47 <= v50) {
            double v36 = a11;
          }
        }
        else
        {
          double v36 = v47 + v55 * (v50 - v47);
        }
        double v63 = v47 + a10 / (a10 - v18) * (v50 - v47);
        int v21 = *(_DWORD *)a8;
        double v64 = vabdd_f64(v47, v36);
        double v65 = vabdd_f64(v47, v63);
        if (*(_DWORD *)a8)
        {
          if (v64 < v65)
          {
LABEL_57:
            int v37 = 1;
LABEL_64:
            *this = v47;
LABEL_65:
            *a2 = a9;
            *a3 = a10;
            if (v36 >= a12) {
              double v66 = a12;
            }
            else {
              double v66 = v36;
            }
            if (v66 <= a11) {
              double v66 = a11;
            }
            *a7 = v66;
            if (v37 && v21)
            {
              double v67 = *this + (*a4 - *this) * 0.66;
              BOOL v68 = v67 < v66;
              if (*a4 > *this) {
                BOOL v68 = v66 < v67;
              }
              if (!v68) {
                double v66 = *this + (*a4 - *this) * 0.66;
              }
              *a7 = v66;
            }
            return this;
          }
        }
        else
        {
          int v21 = 0;
          if (v64 > v65) {
            goto LABEL_57;
          }
        }
        int v37 = 1;
        double v36 = v63;
        goto LABEL_64;
      }
    }
  }
  return this;
}

BOOL mecab_cost_train(int a1, char **a2)
{
  MEMORY[0x216685530](&v15);
  MeCab::Param::Param((MeCab::Param *)v18);
  {
    if (MeCab::Param::help_version((MeCab::Param *)v18)) {
    else
    }
      BOOL v5 = 0;
  }
  else
  {
    uint64_t v6 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v19);
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    if ((v17 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v8 = v17;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v7, v8);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n\n", 2);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\ntry '--help' for more information.", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
    uint64_t v13 = std::locale::use_facet(&v20, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
    BOOL v5 = 1;
  }
  MeCab::Param::~Param(v18);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v15);
  return v5;
}

void sub_2128E85DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20)
{
  std::locale::~locale((std::locale *)(v20 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  MeCab::Param::~Param(&a20);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MeCab::anonymous namespace'::CRFLearner::run(MeCab::_anonymous_namespace_::CRFLearner *this, MeCab::Param *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  MeCab::Param::get<std::string>((uint64_t)this, "dicdir", &v44);
  std::string::basic_string[abi:ne180100]<0>(&v45, "dicrc");
  MeCab::create_filename((uint64_t)&v44, (uint64_t)&v45, v24);
  if ((v24[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = v24;
  }
  else {
    uint64_t v3 = (std::string *)v24[0].__r_.__value_.__r.__words[0];
  }
  if (!MeCab::Param::load(this, (const char *)v3))
  {
    unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    BOOL v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"param->load(DCONF(DICRC))", 25);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"no such file or directory: ", 27);
    std::string::basic_string[abi:ne180100]<0>(&v21, "dicrc");
    uint64_t v10 = __p;
    MeCab::create_filename((uint64_t)&v44, (uint64_t)&v21, __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    size_t v11 = strlen((const char *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (v22 < 0) {
      operator delete(v21.__locale_);
    }
    MeCab::die::~die((MeCab::die *)&v23);
  }
  if (SHIBYTE(v24[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24[0].__r_.__value_.__l.__data_);
  }
  if (v46 < 0) {
    operator delete(v45.__locale_);
  }
  uint64_t v12 = (long long *)*((void *)this + 4);
  if (*((void *)this + 5) - (void)v12 == 48)
  {
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v12, *((void *)v12 + 1));
      uint64_t v12 = (long long *)*((void *)this + 4);
    }
    else
    {
      long long v13 = *v12;
      v43.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
    }
    if (*((char *)v12 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)v12 + 3), *((void *)v12 + 4));
    }
    else {
      std::string v42 = *(std::string *)((unsigned char *)v12 + 1);
    }
    MeCab::Param::get<std::string>((uint64_t)this, "old-model", &v41);
    MeCab::FeatureIndex::FeatureIndex((MeCab::FeatureIndex *)__p);
    v39[1] = 0;
    v39[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C3C37B0;
    double v38 = v39;
    v40[1] = 0;
    v40[0] = 0;
    v39[2] = v40;
    uint64_t v35 = 0;
    double v34 = 0;
    uint64_t v36 = 0;
    uint64_t v32 = 0;
    double v31 = 0;
    uint64_t v33 = 0;
    uint64_t v29 = 0;
    double v28 = 0;
    uint64_t v30 = 0;
    uint64_t v26 = 0;
    __src = 0;
    uint64_t v27 = 0;
    MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::Tokenizer((uint64_t)v24);
  }
  double v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Usage: ", 7);
  char v15 = (char *)this + 56;
  if (*((char *)this + 79) < 0) {
    char v15 = *(const char **)v15;
  }
  size_t v16 = strlen(v15);
  unsigned __int8 v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  double v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" corpus model", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  uint64_t v19 = std::locale::use_facet((const std::locale *)v24, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)v24);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  return 0xFFFFFFFFLL;
}

void sub_2128EAAC4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0xC57]) < 0) {
    operator delete((void *)STACK[0xC40]);
  }
  if (SLOBYTE(STACK[0xC77]) < 0) {
    operator delete((void *)STACK[0xC60]);
  }
  _Unwind_Resume(a1);
}

double MeCab::Param::get<double>(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  unint64_t v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, &__p);
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v4) {
    operator new();
  }
  if (*((char *)v4 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
  }
  else {
    std::string v13 = *(std::string *)(v4 + 7);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  double v14 = 0.0;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v5 = &v13;
  }
  else {
    BOOL v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, size);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0
    || (uint64_t v8 = (void *)MEMORY[0x2166853F0](&__p, &v14), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
    || (uint64_t v9 = std::ws[abi:ne180100]<char,std::char_traits<char>>(&__p),
        (*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  double v12 = v14;
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v16 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x216685570](&v18);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_2128EB130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MeCab::Param::get<unsigned long>(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  unint64_t v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, &__p);
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v4) {
    operator new();
  }
  if (*((char *)v4 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
  }
  else {
    std::string v13 = *(std::string *)(v4 + 7);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  uint64_t v14 = 0;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v5 = &v13;
  }
  else {
    BOOL v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, size);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0
    || (uint64_t v8 = (void *)MEMORY[0x216685410](&__p, &v14), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
    || (uint64_t v9 = std::ws[abi:ne180100]<char,std::char_traits<char>>(&__p),
        (*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  uint64_t v12 = v14;
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v16 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x216685570](&v18);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_2128EB4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](a1 + 112);
  return a1;
}

void **std::vector<MeCab::anonymous namespace'::learner_thread>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      BOOL v5 = v3 - 104;
      uint64_t v6 = v3 - 104;
      uint64_t v7 = v3 - 104;
      do
      {
        uint64_t v8 = *(void *)v7;
        v7 -= 104;
        (*(void (**)(char *))(v8 + 8))(v6);
        v5 -= 104;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void MeCab::Allocator<mecab_learner_node_t,mecab_learner_path_t>::Allocator(void *a1)
{
  *a1 = &unk_26C3C3B58;
  a1[1] = 0;
  operator new();
}

void sub_2128EB854(_Unwind_Exception *exception_object)
{
  BOOL v9 = (void *)v1[10];
  if (v9)
  {
    v1[11] = v9;
    operator delete(v9);
  }
  void *v7 = v5;
  if (*v6) {
    (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
  }
  v1[6] = v4;
  uint64_t v10 = v1[7];
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  v1[4] = v3;
  uint64_t v11 = v1[5];
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  v1[2] = v2;
  uint64_t v12 = v1[3];
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(exception_object);
}

void *MeCab::scoped_ptr<MeCab::NBestGenerator>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3418;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::ChunkFreeList<char>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3BE8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::FreeList<mecab_learner_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3BB8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::FreeList<mecab_learner_node_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3B88;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MeCab::Allocator<mecab_learner_node_t,mecab_learner_path_t>::~Allocator(void *a1)
{
  MeCab::Allocator<mecab_learner_node_t,mecab_learner_path_t>::~Allocator(a1);

  JUMPOUT(0x2166855D0);
}

void MeCab::FreeList<mecab_learner_node_t>::~FreeList(void *a1)
{
  MeCab::FreeList<mecab_learner_node_t>::~FreeList(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::FreeList<mecab_learner_node_t>::~FreeList(void *a1)
{
  *a1 = &unk_26C3C3938;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166855A0](v2[v5], 0x1070C80728FD4AFLL);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::FreeList<mecab_learner_node_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3B88;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::FreeList<mecab_learner_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3BB8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::ChunkFreeList<char>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3BE8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::NBestGenerator>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3418;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_array<trie_search_result_type_t>::~scoped_array(void *a1)
{
  *a1 = &unk_26C3C3600;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8094CA146DLL);
  }
  return a1;
}

void MeCab::scoped_array<trie_search_result_type_t>::~scoped_array(void *a1)
{
  *a1 = &unk_26C3C3600;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x1000C8094CA146DLL);
  }

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_ptr<double>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3518;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855D0](v2, 0x1000C4000313F17);
  }
  return a1;
}

void MeCab::scoped_ptr<double>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3518;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855D0](v1, 0x1000C4000313F17);
  }

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_ptr<unsigned long>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3558;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855D0](v2, 0x1000C4000313F17);
  }
  return a1;
}

void MeCab::scoped_ptr<unsigned long>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3558;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855D0](v1, 0x1000C4000313F17);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::EncoderLearnerTagger::~EncoderLearnerTagger(MeCab::EncoderLearnerTagger *this)
{
  MeCab::EncoderLearnerTagger::~EncoderLearnerTagger(this);

  JUMPOUT(0x2166855D0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C3C37F8;
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }

  MeCab::LearnerTagger::~LearnerTagger(this);
}

void MeCab::LearnerTagger::~LearnerTagger(MeCab::LearnerTagger *this)
{
  MeCab::LearnerTagger::~LearnerTagger(this);

  JUMPOUT(0x2166855D0);
}

{
  void *v2;
  void *v3;
  uint64_t v4;

  *(void *)this = &unk_26C3C3680;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  *((void *)this + 4) = &unk_26C3C3620;
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    MEMORY[0x2166855A0](v4, 0x1000C8077774924);
  }
}

void MeCab::scoped_string::scoped_string(MeCab::scoped_string *this)
{
  *(void *)this = &unk_26C3C36A0;
  *((void *)this + 1) = 0;
  MeCab::scoped_string::reset_string(this, (const char *)&unk_2129160B6);
}

void sub_2128EC178(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_26C3C3620;
  uint64_t v3 = v1[1];
  if (v3) {
    MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::scoped_string::reset_string(MeCab::scoped_string *this, const char *__s)
{
}

void MeCab::scoped_string::~scoped_string(MeCab::scoped_string *this)
{
  *(void *)this = &unk_26C3C3620;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_26C3C3620;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_array<char>::~scoped_array(void *a1)
{
  *a1 = &unk_26C3C3620;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8077774924);
  }
  return a1;
}

void MeCab::scoped_array<char>::~scoped_array(void *a1)
{
  *a1 = &unk_26C3C3620;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x1000C8077774924);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::anonymous namespace'::learner_thread::run(MeCab::_anonymous_namespace_::learner_thread *this)
{
  double v2 = 0.0;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v3 = (unint64_t *)((char *)this + 48);
  *((_OWORD *)this + 2) = 0u;
  uint64_t v4 = (unint64_t *)((char *)this + 32);
  *((void *)this + 8) = 0;
  unint64_t v5 = (void *)*((void *)this + 10);
  uint64_t v6 = v3[5] - (void)v5;
  if (v6 >= 1) {
    bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
  }
  for (unint64_t i = *((unsigned __int16 *)this + 8); i < *((void *)this + 3); i += *((unsigned __int16 *)this + 9))
  {
    *((double *)this + 8) = MeCab::EncoderLearnerTagger::gradient(*(MeCab::EncoderLearnerTagger **)(*((void *)this + 9) + 8 * i), *((double **)this + 10), v2)+ *((double *)this + 8);
    *((void *)this + 7) += (int)MeCab::EncoderLearnerTagger::eval(*(MeCab::EncoderLearnerTagger **)(*((void *)this + 9) + 8 * i), v3, v4, v3 - 1);
  }
}

void MeCab::anonymous namespace'::learner_thread::~learner_thread(MeCab::_anonymous_namespace_::learner_thread *this)
{
  *(void *)this = &unk_26C3C3B18;
  double v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C3C3B18;
  double v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::LBFGS::~LBFGS(MeCab::LBFGS *this)
{
  MeCab::LBFGS::~LBFGS(this);

  JUMPOUT(0x2166855D0);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_26C3C3878;
  MeCab::LBFGS::clear(this);
  double v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
}

uint64_t MeCab::thread::wrapper(MeCab::thread *this, void *a2)
{
  return 0;
}

void *MeCab::Allocator<mecab_learner_node_t,mecab_learner_path_t>::~Allocator(void *a1)
{
  *a1 = &unk_26C3C3B58;
  a1[13] = &unk_26C3C3600;
  uint64_t v2 = a1[14];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8094CA146DLL);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  a1[8] = &unk_26C3C3418;
  uint64_t v4 = a1[9];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[6] = &unk_26C3C3BE8;
  uint64_t v5 = a1[7];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  a1[4] = &unk_26C3C3BB8;
  uint64_t v6 = a1[5];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  a1[2] = &unk_26C3C3B88;
  uint64_t v7 = a1[3];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::~Tokenizer(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C3C18;
  MeCab::Tokenizer<mecab_node_t,mecab_path_t>::close((void *)a1);
  if (*(char *)(a1 + 1879) < 0) {
    operator delete(*(void **)(a1 + 1856));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 1592) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 1592 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 1600) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 1687) < 0) {
    operator delete(*(void **)(a1 + 1664));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](a1 + 1704);
  MeCab::CharProperty::~CharProperty((void **)(a1 + 904));
  uint64_t v4 = *(void **)(a1 + 864);
  if (v4)
  {
    *(void *)(a1 + 872) = v4;
    operator delete(v4);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList((void *)(a1 + 808));
  *(void *)(a1 + 792) = &unk_26C3C3620;
  uint64_t v5 = *(void *)(a1 + 800);
  if (v5) {
    MEMORY[0x2166855A0](v5, 0x1000C8077774924);
  }
  *(void *)(a1 + 776) = &unk_26C3C3620;
  uint64_t v6 = *(void *)(a1 + 784);
  if (v6) {
    MEMORY[0x2166855A0](v6, 0x1000C8077774924);
  }
  MeCab::Dictionary::~Dictionary((MeCab::Dictionary *)(a1 + 40));
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::~Tokenizer(uint64_t a1)
{
  MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::~Tokenizer(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(void *a1)
{
  *a1 = &unk_26C3C3978;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166855A0](v2[v5], 0x1070C802D7A0B02);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(void *a1)
{
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(a1);

  JUMPOUT(0x2166855D0);
}

void MeCab::EncoderLearnerTagger::read()
{
}

void sub_2128ED94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a25) {
    MEMORY[0x2166855A0](a25, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::anonymous namespace'::mystrdup(MeCab::_anonymous_namespace_ *this, const char *a2)
{
}

void MeCab::scoped_string::reset_string()
{
}

uint64_t MeCab::LearnerTagger::lookup(MeCab::LearnerTagger *this, uint64_t a2)
{
  uint64_t result = *(void *)(*((void *)this + 9) + 8 * a2);
  if (!result)
  {
    uint64_t result = MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::lookup<false>(*((void *)this + 1), (unsigned __int8 *)(*((void *)this + 6) + a2), *((void *)this + 7), *((void *)this + 2));
    *(void *)(*((void *)this + 9) + 8 * a2) = result;
  }
  return result;
}

uint64_t MeCab::EncoderLearnerTagger::eval(MeCab::EncoderLearnerTagger *this, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v5 = **((void **)this + 12);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 48);
  uint64_t v8 = *(void *)(v7 + 48);
  if (v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v6;
    while (1)
    {
      uint64_t v6 = *(void *)(v13 + 8);
      if (!v6) {
        break;
      }
      if (v11 == v10)
      {
        size_t v14 = *(unsigned __int16 *)(v7 + 76);
        if (v14 != *(unsigned __int16 *)(v13 + 76)) {
          goto LABEL_12;
        }
        uint64_t v16 = *((void *)this + 15);
        uint64_t v15 = *((void *)this + 16);
        if (strncmp(*(const char **)(v7 + 56), *(const char **)(v13 + 56), v14)) {
          goto LABEL_12;
        }
        unsigned int v28 = v12;
        char v17 = *(char **)(v7 + 64);
        uint64_t v18 = *(char **)(v13 + 64);
        uint64_t v19 = *(unsigned char *)(v13 + 87) == 1 ? v15 : v16;
        size_t v20 = strlen(v17);
        std::locale v21 = MeCab::repeat_find_if<char const*,char>(v17, &v17[v20], 44, v19);
        size_t v22 = strlen(v18);
        if (v21 - v17 == MeCab::repeat_find_if<char const*,char>(v18, &v18[v22], 44, v19) - v18
          && !strncmp(v17, v18, v21 - v17))
        {
          ++*a2;
          uint64_t v12 = v28;
        }
        else
        {
LABEL_12:
          uint64_t v12 = 1;
        }
        ++*a3;
        ++*a4;
        unint64_t v11 = v10 + *(unsigned __int16 *)(v6 + 78);
        v10 += *(unsigned __int16 *)(v8 + 78);
      }
      else if (v11 >= v10)
      {
        v10 += *(unsigned __int16 *)(v8 + 78);
        ++*a3;
        uint64_t v12 = 1;
        uint64_t v6 = v13;
      }
      else
      {
        v11 += *(unsigned __int16 *)(v6 + 78);
        ++*a4;
        uint64_t v12 = 1;
        uint64_t v8 = v7;
      }
      uint64_t v7 = v8;
      uint64_t v8 = *(void *)(v8 + 48);
      uint64_t v13 = v6;
      if (!v8) {
        goto LABEL_24;
      }
    }
    unint64_t v23 = *a3;
    do
    {
      ++v23;
      uint64_t v8 = *(void *)(v8 + 48);
    }
    while (v8);
    *a3 = v23;
    uint64_t v6 = v13;
  }
  else
  {
    uint64_t v12 = 0;
  }
LABEL_24:
  uint64_t v24 = *(void *)(v6 + 8);
  if (v24)
  {
    unint64_t v25 = *a4;
    do
    {
      ++v25;
      uint64_t v24 = *(void *)(v24 + 8);
    }
    while (v24);
    *a4 = v25;
  }
  return v12;
}

uint64_t MeCab::LearnerTagger::connect(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = result;
    uint64_t v24 = a2;
    do
    {
      uint64_t v5 = *(void *)(v4 + 96);
      uint64_t v6 = *(void *)(v5 + 8 * a2);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(void **)(*(void *)(v4 + 16) + 40);
          if (!v7) {
            operator new();
          }
          uint64_t v8 = v7[5];
          unint64_t v9 = v7[6];
          uint64_t v10 = v7[4];
          if (v10 == v9)
          {
            uint64_t v10 = 0;
            ++v8;
            v7[4] = 0;
            v7[5] = v8;
          }
          uint64_t v11 = v7[1];
          if (v8 == (v7[2] - v11) >> 3)
          {
            is_mul_ok(v9, 0x30uLL);
            operator new[]();
          }
          uint64_t v12 = *(void *)(v11 + 8 * v8);
          v7[4] = v10 + 1;
          uint64_t v13 = v12 + 48 * v10;
          *(void *)(v13 + 40) = 0;
          size_t v14 = (void *)(v13 + 40);
          *(_OWORD *)(v13 + 8) = 0u;
          *(_OWORD *)(v13 + 24) = 0u;
          *(void *)uint64_t v13 = v3;
          *(void *)(v13 + 24) = *(void *)(v3 + 40);
          *(void *)(v3 + 40) = v13;
          *(void *)(v13 + 8) = *(void *)(v6 + 32);
          *(void *)(v13 + 16) = v6;
          *(void *)(v6 + 32) = v13;
          uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + 24) + 24))(*(void *)(v4 + 24));
          if ((result & 1) == 0)
          {
            uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
            uint64_t v16 = (void *)std::ostream::operator<<();
            char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
            uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"feature_index_->buildFeature(path)", 34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
            MeCab::die::~die((MeCab::die *)&v26);
          }
          if (!*v14)
          {
            uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"(", 1);
            size_t v20 = (void *)std::ostream::operator<<();
            std::locale v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
            size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"path->fvector", 13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
            MeCab::die::~die((MeCab::die *)&v25);
          }
          uint64_t v6 = *(void *)(v6 + 16);
        }
        while (v6);
        uint64_t v5 = *(void *)(v4 + 96);
      }
      a2 = v24;
      uint64_t v23 = *(unsigned __int16 *)(v3 + 78) + v24;
      *(void *)(v3 + 16) = *(void *)(v5 + 8 * v23);
      *(void *)(v5 + 8 * v23) = v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while (v3);
  }
  return result;
}

void sub_2128EE0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
}

void sub_2128EE0D0()
{
  _Unwind_Resume(v0);
}

void std::vector<mecab_learner_node_t *>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    size_t v20 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    size_t v20 = &v4[8 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v7, v11);
  uint64_t v13 = &v12[8 * v5];
  uint64_t v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  uint64_t v16 = &v13[8 * v6];
  uint64_t v18 = (char *)*a1;
  char v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    char v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

double MeCab::EncoderLearnerTagger::gradient(MeCab::EncoderLearnerTagger *this, double *a2, double a3)
{
  uint64_t v5 = *((void *)this + 8);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*((void *)this + 9) + 8 * v6);
      if (v7)
      {
        do
        {
          uint64_t v8 = *((void *)this + 3);
          *(void *)(v7 + 112) = 0;
          if (*(unsigned char *)(v7 + 87) != 3)
          {
            uint64_t v9 = *(int **)(v7 + 128);
            int v10 = *v9;
            if (*v9 != -1)
            {
              uint64_t v11 = *(void *)(v8 + 336);
              uint64_t v12 = v9 + 1;
              a3 = 0.0;
              do
              {
                a3 = a3 + *(double *)(v11 + 8 * v10);
                *(double *)(v7 + 112) = a3;
                int v13 = *v12++;
                int v10 = v13;
              }
              while (v13 != -1);
            }
          }
          uint64_t v14 = *(void *)(v7 + 40);
          if (v14)
          {
            uint64_t v15 = 0;
            double v16 = -1.0e37;
            do
            {
              MeCab::FeatureIndex::calcCost(*((void *)this + 3), (double *)v14, a3);
              double v17 = *(double *)(v14 + 32);
              uint64_t v18 = *(void *)(v14 + 16);
              uint64_t v14 = *(void *)(v14 + 24);
              a3 = v17 + *(double *)(v18 + 120);
              if (a3 > v16)
              {
                double v16 = a3;
                uint64_t v15 = v18;
              }
            }
            while (v14);
          }
          else
          {
            uint64_t v15 = 0;
            double v16 = -1.0e37;
          }
          *(void *)uint64_t v7 = v15;
          *(double *)(v7 + 120) = v16;
          uint64_t v7 = *(void *)(v7 + 24);
        }
        while (v7);
        uint64_t v5 = *((void *)this + 8);
      }
      ++v6;
    }
    while (v5 >= v6);
  }
  uint64_t v19 = *((void *)this + 9);
  size_t v20 = *(void **)(v19 + 8 * v5);
  if (v20)
  {
    std::locale v21 = (void *)*v20;
    if (*v20)
    {
      do
      {
        v21[1] = v20;
        size_t v20 = v21;
        std::locale v21 = (void *)*v21;
      }
      while (v21);
    }
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v22 = 0;
    do
    {
      for (unint64_t i = *(double **)(v19 + 8 * v22); i; unint64_t i = (double *)*((void *)i + 3))
      {
        i[12] = 0.0;
        uint64_t v24 = *((void *)i + 5);
        if (v24)
        {
          double v25 = 0.0;
          uint64_t v26 = *((void *)i + 5);
          do
          {
            double v27 = *(double *)(v26 + 32);
            double v28 = *(double *)(*(void *)(v26 + 16) + 96);
            double v29 = v27 + v28;
            if (v26 != v24)
            {
              if (v29 >= v25) {
                double v30 = v25;
              }
              else {
                double v30 = v27 + v28;
              }
              if (v25 >= v29) {
                double v29 = v25;
              }
              if (v29 <= v30 + 50.0)
              {
                long double v31 = exp(v30 - v29);
                double v29 = v29 + log(v31 + 1.0);
              }
            }
            i[12] = v29;
            uint64_t v26 = *(void *)(v26 + 24);
            double v25 = v29;
          }
          while (v26);
        }
      }
      BOOL v32 = v22++ == v5;
    }
    while (!v32);
  }
  if ((v5 & 0x80000000) == 0)
  {
    uint64_t v33 = *((void *)this + 12);
    uint64_t v34 = v5;
    do
    {
      for (j = *(double **)(v33 + 8 * v34); j; j = (double *)*((void *)j + 2))
      {
        j[13] = 0.0;
        uint64_t v36 = *((void *)j + 4);
        if (v36)
        {
          double v37 = 0.0;
          uint64_t v38 = *((void *)j + 4);
          do
          {
            double v39 = *(double *)(v38 + 32);
            double v40 = *(double *)(*(void *)v38 + 104);
            double v41 = v39 + v40;
            if (v38 != v36)
            {
              if (v41 >= v37) {
                double v42 = v37;
              }
              else {
                double v42 = v39 + v40;
              }
              if (v37 >= v41) {
                double v41 = v37;
              }
              if (v41 <= v42 + 50.0)
              {
                long double v43 = exp(v42 - v41);
                double v41 = v41 + log(v43 + 1.0);
              }
            }
            j[13] = v41;
            uint64_t v38 = *(void *)(v38 + 8);
            double v37 = v41;
          }
          while (v38);
        }
      }
    }
    while (v34-- > 0);
  }
  uint64_t v45 = *(void *)(v19 + 8 * v5);
  if (!v45)
  {
    uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"(", 1);
    double v48 = (void *)std::ostream::operator<<();
    double v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)") [", 3);
    double v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"node != nullptr", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)&v71);
  }
  double v46 = *(double *)(v45 + 96);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v51 = 0;
    uint64_t v52 = *((void *)this + 9);
    do
    {
      for (uint64_t k = *(void *)(v52 + 8 * v51); k; uint64_t k = *(void *)(k + 24))
      {
        for (m = *(double **)(k + 40); m; m = (double *)*((void *)m + 3))
        {
          double v55 = *m;
          if (*(void *)(*(void *)m + 32) || *(unsigned char *)(*(void *)&v55 + 87) == 3)
          {
            uint64_t v56 = *((void *)m + 2);
            if (*(void *)(v56 + 40) || *(unsigned char *)(v56 + 87) == 2)
            {
              double v57 = exp(*(double *)(v56 + 96) + m[4] + *(double *)(*(void *)&v55 + 104) - v46);
              double v58 = (int *)*((void *)m + 5);
              int v59 = *v58;
              if (*v58 != -1)
              {
                double v60 = v58 + 1;
                do
                {
                  a2[v59] = v57 + a2[v59];
                  int v61 = *v60++;
                  int v59 = v61;
                }
                while (v61 != -1);
              }
              if (*(unsigned char *)(*(void *)&v55 + 87) != 3)
              {
                double v62 = *(int **)(*(void *)&v55 + 128);
                int v63 = *v62;
                if (*v62 != -1)
                {
                  double v64 = v62 + 1;
                  do
                  {
                    a2[v63] = v57 + a2[v63];
                    int v65 = *v64++;
                    int v63 = v65;
                  }
                  while (v65 != -1);
                }
              }
            }
          }
        }
      }
      BOOL v32 = v51++ == v5;
    }
    while (!v32);
  }
  double v66 = (uint64_t *)*((void *)this + 17);
  uint64_t v67 = *((void *)this + 18) - (void)v66;
  if (v67)
  {
    unint64_t v68 = v67 >> 3;
    if (v68 <= 1) {
      unint64_t v68 = 1;
    }
    do
    {
      uint64_t v69 = *v66++;
      double v46 = v46 - *(double *)(v69 + 32);
      --v68;
    }
    while (v68);
  }
  return v46;
}

void sub_2128EE618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_2128EE624()
{
  _Unwind_Resume(v0);
}

char *MeCab::repeat_find_if<char const*,char>(char *result, char *a2, char a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    int v6 = a3;
    while (1)
    {
      uint64_t v7 = (char *)memchr(result, v6, a2 - result);
      uint64_t v8 = v7 ? v7 : a2;
      if (v8 == a2) {
        break;
      }
      uint64_t result = v8 + 1;
      if (!--v4) {
        return v8;
      }
    }
    return a2;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

double MeCab::FreeList<mecab_learner_node_t>::alloc(void *a1)
{
  uint64_t v1 = a1[5];
  unint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (v3 == v2)
  {
    uint64_t v3 = 0;
    ++v1;
    a1[4] = 0;
    a1[5] = v1;
  }
  uint64_t v4 = a1[1];
  if (v1 == (a1[2] - v4) >> 3)
  {
    is_mul_ok(v2, 0x90uLL);
    operator new[]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * v1);
  a1[4] = v3 + 1;
  int v6 = (_OWORD *)(v5 + 144 * v3);
  double result = 0.0;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *int v6 = 0u;
  return result;
}

void MeCab::FreeList<mecab_learner_path_t>::~FreeList(void *a1)
{
  MeCab::FreeList<mecab_learner_path_t>::~FreeList(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::FreeList<mecab_learner_path_t>::~FreeList(void *a1)
{
  *a1 = &unk_26C3C3958;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  unint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    unint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166855A0](v2[v5], 0x1070C805CA89F8DLL);
      unint64_t v5 = a1[5];
      unint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL MeCab::compressReading(std::string *a1)
{
  if (a1)
  {
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = a1->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    memset(&v10, 0, sizeof(v10));
    std::string::reserve(&v10, size);
    uint64_t v3 = a1;
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v3 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    std::string::size_type v4 = size >> 1;
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v5 = &v10;
    }
    else {
      unint64_t v5 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((uint64_t)size >= 1) {
      bzero(v5, size);
    }
    if (size >= 2)
    {
      if (v4 <= 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = size >> 1;
      }
      uint64_t v7 = v5;
      do
      {
        int data_low = LOWORD(v3->__r_.__value_.__l.__data_);
        uint64_t v3 = (std::string *)((char *)v3 + 2);
        v7->__r_.__value_.__s.__data_[0] = MeCab::internal::encodeChar(data_low);
        uint64_t v7 = (std::string *)((char *)v7 + 1);
        --v6;
      }
      while (v6);
    }
    std::string::__assign_external(a1, (const std::string::value_type *)v5, v4);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  return a1 != 0;
}

void sub_2128EEA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::internal::encodeChar(int a1)
{
  if (a1 > 251)
  {
    switch(a1)
    {
      case 252:
        return 66;
      case 12539:
        return -103;
      case 12540:
        return -102;
      default:
LABEL_15:
        unsigned __int8 v1 = a1 + 2;
        if ((a1 - 12353) >= 0x56) {
          return 0;
        }
        break;
    }
  }
  else
  {
    unsigned __int8 v1 = 1;
    switch(a1)
    {
      case '*':
        return v1;
      case '+':
        unsigned __int8 v1 = 2;
        break;
      case ',':
        unsigned __int8 v1 = 3;
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        unsigned __int8 v1 = a1 - 44;
        break;
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        unsigned __int8 v1 = a1 - 51;
        break;
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        unsigned __int8 v1 = a1 - 57;
        break;
      default:
        goto LABEL_15;
    }
  }
  return v1;
}

uint64_t mecab_dict_index(int a1, char **a2)
{
  MEMORY[0x216685530](&v69);
  MeCab::Param::Param((MeCab::Param *)v85);
  if (MeCab::Param::open((uint64_t)v85, a1, a2, (uint64_t)&MeCab::DictionaryComplier::run(int,char **)::long_options))
  {
    if (!MeCab::Param::help_version((MeCab::Param *)v85))
    {
LABEL_123:
      uint64_t v33 = 0;
      goto LABEL_124;
    }
    MeCab::Param::get<std::string>((uint64_t)v85, "dicdir", &v84);
    MeCab::Param::get<std::string>((uint64_t)v85, "outdir", &v83);
    BOOL v4 = MeCab::Param::get<BOOL>((uint64_t)v85, "build-unknown");
    BOOL v5 = MeCab::Param::get<BOOL>((uint64_t)v85, "build-matrix");
    BOOL v6 = MeCab::Param::get<BOOL>((uint64_t)v85, "quantize");
    BOOL v7 = MeCab::Param::get<BOOL>((uint64_t)v85, "compress-feature");
    MeCab::Param::get<std::string>((uint64_t)v85, "language", &v82);
    BOOL v8 = MeCab::Param::get<BOOL>((uint64_t)v85, "build-charcategory");
    BOOL v9 = MeCab::Param::get<BOOL>((uint64_t)v85, "build-sysdic");
    BOOL v10 = MeCab::Param::get<BOOL>((uint64_t)v85, "build-model");
    BOOL v11 = MeCab::Param::get<BOOL>((uint64_t)v85, "assign-user-dictionary-costs");
    MeCab::Param::get<std::string>((uint64_t)v85, "userdic", &v81);
    uint64_t v80 = 0;
    WORD2(v80) = 0;
    BYTE6(v80) = 0;
    if (v6) {
      BYTE4(v80) = 1;
    }
    if (v7) {
      *(_WORD *)((char *)&v80 + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 257;
    }
    uint64_t v79 = 0;
    v78[1] = v79;
    std::string::basic_string[abi:ne180100]<0>(&v76, "dicrc");
    MeCab::create_filename((uint64_t)&v84, (uint64_t)&v76, (std::string *)&__v);
    if (SHIBYTE(__v.__end_) >= 0) {
      p_v = (const char *)&__v;
    }
    else {
      p_v = (const char *)__v.__first_;
    }
    if (!MeCab::Param::load((MeCab::Param *)v85, p_v))
    {
      int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_compiler.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
      uint64_t v14 = (void *)std::ostream::operator<<();
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") [", 3);
      double v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"param.load(DCONF(DICRC))", 24);
      double v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"no such file or directory: ", 27);
      std::string::basic_string[abi:ne180100]<0>(&v74, "dicrc");
      p_p = &__p;
      MeCab::create_filename((uint64_t)&v84, (uint64_t)&v74, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      size_t v20 = strlen((const char *)p_p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      MeCab::die::~die((MeCab::die *)v72);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    if (SHIBYTE(v78[0]) < 0) {
      operator delete(v76);
    }
    int v76 = 0;
    double v77 = 0;
    v78[0] = 0;
    std::string::size_type size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v81.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v22 = v86;
      uint64_t v23 = v87;
      if (v87 != v86)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87 - (char *)v86) >> 3);
        if (v24 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
        }
        std::vector<std::string>::__vallocate[abi:ne180100](&v76, v24);
        double v77 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)v78, v22, v23, v77);
      }
    }
    else
    {
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v84;
      }
      else {
        uint64_t v34 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      MeCab::enum_csv_dictionaries((char *)v34, (uint64_t)&v76);
    }
    std::string::size_type v35 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v35 = v81.__r_.__value_.__l.__size_;
    }
    if (v35)
    {
      if (v77 == v76)
      {
        uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_compiler.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"(", 1);
        double v37 = (void *)std::ostream::operator<<();
        uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
        double v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"dic.size()", 10);
        double v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"no dictionaries are specified", 29);
        MeCab::die::~die((MeCab::die *)&__v);
      }
      LODWORD(__v.__first_) = 1;
      MeCab::Param::set<int>((uint64_t)v85, "type", (uint64_t)&__v, 1);
      if (v11) {
        MeCab::Dictionary::assignUserDictionaryCosts((const MeCab::Param *)v85);
      }
      MeCab::Dictionary::compile();
    }
    if (v4)
    {
LABEL_49:
      std::string::basic_string[abi:ne180100]<0>(&__p, "char.def");
      first = (MeCab::CharProperty *)&__v;
      MeCab::create_filename((uint64_t)&v84, (uint64_t)&__p, (std::string *)&__v);
      if (SHIBYTE(__v.__end_) < 0) {
        first = (MeCab::CharProperty *)__v.__first_;
      }
      std::string::basic_string[abi:ne180100]<0>(v72, "unk.def");
      double v42 = &v74;
      MeCab::create_filename((uint64_t)&v84, (uint64_t)v72, &v74);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v42 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string[abi:ne180100]<0>(v70, "char.bin");
      MeCab::create_filename((uint64_t)&v83, (uint64_t)v70, &v71);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v44 = &v71;
      }
      else {
        std::string v44 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      MeCab::CharProperty::compile(first, (const char *)v42, (const char *)v44, v43);
    }
    if (v5)
    {
      if (v8) {
        goto LABEL_49;
      }
      int v56 = 1;
      if (!v10) {
        goto LABEL_90;
      }
    }
    else
    {
      if (v8 || !v9 && !v10) {
        goto LABEL_49;
      }
      int v56 = 0;
      if (v9 && !v10)
      {
LABEL_90:
        if (v9) {
          goto LABEL_91;
        }
LABEL_84:
        if (v56)
        {
          if (!v6)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "matrix.def");
            int v65 = (MeCab::Connector *)&__v;
            MeCab::create_filename((uint64_t)&v84, (uint64_t)&__p, (std::string *)&__v);
            if (SHIBYTE(__v.__end_) < 0) {
              int v65 = (MeCab::Connector *)__v.__first_;
            }
            std::string::basic_string[abi:ne180100]<0>(v72, "matrix.bin");
            MeCab::create_filename((uint64_t)&v83, (uint64_t)v72, &v74);
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v67 = &v74;
            }
            else {
              uint64_t v67 = (std::string *)v74.__r_.__value_.__r.__words[0];
            }
            MeCab::Connector::compile(v65, (const char *)v67, v66);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "matrix.def");
          double v62 = (MeCab::QuantizedConnector *)&__v;
          MeCab::create_filename((uint64_t)&v84, (uint64_t)&__p, (std::string *)&__v);
          if (SHIBYTE(__v.__end_) < 0) {
            double v62 = (MeCab::QuantizedConnector *)__v.__first_;
          }
          std::string::basic_string[abi:ne180100]<0>(v72, "matrix.bin");
          MeCab::create_filename((uint64_t)&v83, (uint64_t)v72, &v74);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v64 = &v74;
          }
          else {
            double v64 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          MeCab::QuantizedConnector::compile(v62, (const char *)v64, v63);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          if (v73 < 0) {
            operator delete(v72[0]);
          }
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"\ndone!\n", 7);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v76;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        goto LABEL_123;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "model.def");
    MeCab::create_filename((uint64_t)&v84, (uint64_t)&__p, (std::string *)&__v);
    if (SHIBYTE(__v.__end_) >= 0) {
      double v46 = (MeCab *)&__v;
    }
    else {
      double v46 = (MeCab *)__v.__first_;
    }
    BOOL v47 = MeCab::file_exists(v46, v45);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v47)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "model.def");
      double v48 = (const MeCab::Param *)&__v;
      MeCab::create_filename((uint64_t)&v84, (uint64_t)&__p, (std::string *)&__v);
      if (SHIBYTE(__v.__end_) < 0) {
        double v48 = (const MeCab::Param *)__v.__first_;
      }
      std::string::basic_string[abi:ne180100]<0>(v72, "model.bin");
      MeCab::create_filename((uint64_t)&v83, (uint64_t)v72, &v74);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v50 = &v74;
      }
      else {
        double v50 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      MeCab::FeatureIndex::compile((MeCab::FeatureIndex *)v85, v48, (const char *)v50, v49);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "model.def");
    uint64_t v51 = (const char *)&__v;
    MeCab::create_filename((uint64_t)&v84, (uint64_t)&__p, (std::string *)&__v);
    if (SHIBYTE(__v.__end_) < 0) {
      uint64_t v51 = (const char *)__v.__first_;
    }
    size_t v52 = strlen(v51);
    double v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v51, v52);
    double v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" is not found. skipped.", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
    double v55 = std::locale::use_facet((const std::locale *)&v74, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
    std::locale::~locale((std::locale *)&v74);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9)
    {
LABEL_91:
      if (v77 == v76)
      {
        double v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_compiler.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"(", 1);
        double v58 = (void *)std::ostream::operator<<();
        int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)") [", 3);
        double v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"dic.size()", 10);
        int v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"no dictionaries are specified", 29);
        MeCab::die::~die((MeCab::die *)&__v);
      }
      LODWORD(__v.__first_) = 0;
      MeCab::Param::set<int>((uint64_t)v85, "type", (uint64_t)&__v, 1);
      std::string::basic_string[abi:ne180100]<0>(&__p, "sys.dic");
      MeCab::create_filename((uint64_t)&v83, (uint64_t)&__p, (std::string *)&__v);
      MeCab::Dictionary::compile();
    }
    goto LABEL_84;
  }
  double v25 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v88);
  std::string::basic_string[abi:ne180100]<0>(&__v, v25);
  if (SHIBYTE(__v.__end_) >= 0) {
    uint64_t v26 = &__v;
  }
  else {
    uint64_t v26 = __v.__first_;
  }
  if (SHIBYTE(__v.__end_) >= 0) {
    uint64_t end_high = HIBYTE(__v.__end_);
  }
  else {
    uint64_t end_high = (uint64_t)__v.__begin_;
  }
  double v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v26, end_high);
  double v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n\n", 2);
  double v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
  long double v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\ntry '--help' for more information.", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
  BOOL v32 = std::locale::use_facet((const std::locale *)&v84, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale((std::locale *)&v84);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  uint64_t v33 = 0xFFFFFFFFLL;
LABEL_124:
  MeCab::Param::~Param(v85);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v69);
  return v33;
}

void sub_2128EFA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,std::locale a61,uint64_t a62,int a63)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v67 - 128));
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::string __p = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a34 = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a66 < 0) {
    operator delete(a61.__locale_);
  }
  MeCab::Param::~Param(&a67);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a12);
  _Unwind_Resume(a1);
}

BOOL MeCab::Param::get<BOOL>(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  BOOL v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, &__p);
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(__p);
  }
  if ((void **)(a1 + 16) == v4) {
    operator new();
  }
  if (*((char *)v4 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
  }
  else {
    std::string v13 = *(std::string *)(v4 + 7);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  unsigned __int8 v14 = 0;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v5 = &v13;
  }
  else {
    BOOL v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  BOOL v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v5, size);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0
    || (BOOL v8 = (void *)MEMORY[0x2166853E0](&__p, &v14), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
    || (BOOL v9 = std::ws[abi:ne180100]<char,std::char_traits<char>>(&__p),
        (*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 2) == 0))
  {
    operator new();
  }
  int v12 = v14;
  std::string __p = (void *)*MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v16 + *((void *)__p - 3)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[0] = v10;
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x216685570](&v18);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v12 != 0;
}

void sub_2128F0134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MeCab::anonymous namespace'::toLanguage(void **a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267795B88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267795B88))
  {
    operator new();
  }
  uint64_t v2 = _MergedGlobals + 8;
  uint64_t v3 = *(void **)(_MergedGlobals + 8);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v4 = _MergedGlobals + 8;
  do
  {
    char v5 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a1);
    if (v5 >= 0) {
      BOOL v6 = v3;
    }
    else {
      BOOL v6 = v3 + 1;
    }
    if (v5 >= 0) {
      uint64_t v4 = (uint64_t)v3;
    }
    uint64_t v3 = (void *)*v6;
  }
  while (*v6);
  if (v4 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (void **)(v4 + 32)) & 0x80) != 0)
  {
LABEL_12:
    uint64_t v4 = v2;
  }
  if (_MergedGlobals + 8 == v4) {
    return 0;
  }
  else {
    return *(unsigned int *)(v4 + 56);
  }
}

void sub_2128F036C(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 151) < 0) {
      operator delete(*(void **)(v2 + v4 + 128));
    }
    v4 -= 32;
    if (v4 == -160)
    {
      MEMORY[0x2166855D0](v1, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_267795B88);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2128F03FC()
{
}

void MeCab::Param::set<int>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  v22[2] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v15, a2);
  if ((a4 & 1) != 0
    || (void **)(a1 + 16) == std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 8, v15))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
    std::string __p = 0;
    long long v18 = 0uLL;
    BOOL v6 = (void *)std::ostream::operator<<();
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0
      || (BOOL v7 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v19, (uint64_t)&__p), (*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)|| (v8 = std::ws[abi:ne180100]<char,std::char_traits<char>>(v19), (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 2) == 0))
    {
      operator new();
    }
    std::string v13 = __p;
    v22[0] = v18;
    *(void *)((char *)v22 + 7) = *(void *)((char *)&v18 + 7);
    char v14 = HIBYTE(v18);
    v19[0] = *(long long **)MEMORY[0x263F8C2B8];
    BOOL v9 = *(long long **)(MEMORY[0x263F8C2B8] + 72);
    *(long long **)((char *)v19 + *((void *)v19[0] - 3)) = *(long long **)(MEMORY[0x263F8C2B8] + 64);
    v19[2] = v9;
    _OWORD v19[3] = (long long *)(MEMORY[0x263F8C318] + 16);
    if (v20 < 0) {
      operator delete(v19[11]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x216685570](&v21);
    v19[0] = (long long *)v15;
    uint64_t v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), v15, (uint64_t)&std::piecewise_construct, v19);
    BOOL v11 = v10;
    if (*((char *)v10 + 79) < 0) {
      operator delete((void *)v10[7]);
    }
    uint64_t v12 = v22[0];
    v11[7] = (uint64_t)v13;
    v11[8] = v12;
    *(uint64_t *)((char *)v11 + 71) = *(void *)((char *)v22 + 7);
    *((unsigned char *)v11 + 79) = v14;
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
}

void sub_2128F0734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *MeCab::scoped_ptr<BOOL>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C34F8;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855D0](v2, 0x1000C4077774924);
  }
  return a1;
}

void MeCab::scoped_ptr<BOOL>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C34F8;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855D0](v1, 0x1000C4077774924);
  }

  JUMPOUT(0x2166855D0);
}

uint64_t **std::map<std::string,MeCab::Language>::map[abi:ne180100](uint64_t **a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    char v5 = a2;
    BOOL v6 = &a2[2 * a3];
    while (1)
    {
      BOOL v7 = (char *)a1[1];
      if (*a1 == v4) {
        break;
      }
      BOOL v8 = (char *)v4;
      if (v7)
      {
        do
        {
          BOOL v9 = v7;
          BOOL v7 = (char *)*((void *)v7 + 1);
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v9 = (char *)*((void *)v8 + 2);
          BOOL v10 = *(void *)v9 == (void)v8;
          BOOL v8 = v9;
        }
        while (v10);
      }
      char v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v9 + 4, (void **)v5);
      BOOL v7 = (char *)*v4;
      if (v11 < 0) {
        goto LABEL_18;
      }
      uint64_t v12 = (char **)v4;
      std::string v13 = (char **)v4;
      if (v7)
      {
        std::string v13 = (char **)v4;
        do
        {
          while (1)
          {
            uint64_t v12 = (char **)v7;
            char v14 = v7 + 32;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (void **)v7 + 4) & 0x80) == 0) {
              break;
            }
            BOOL v7 = *v12;
            std::string v13 = v12;
            if (!*v12) {
              goto LABEL_21;
            }
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (void **)v5) & 0x80) == 0) {
            goto LABEL_20;
          }
          std::string v13 = v12 + 1;
          BOOL v7 = v12[1];
        }
        while (v7);
      }
LABEL_21:
      uint64_t v15 = (char *)operator new(0x40uLL);
      char v16 = (std::string *)(v15 + 32);
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v17 = *v5;
        *((void *)v15 + 6) = *((void *)v5 + 2);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      *((_DWORD *)v15 + 14) = *((_DWORD *)v5 + 6);
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = v12;
      *std::string v13 = v15;
      long long v18 = (uint64_t *)**a1;
      if (v18)
      {
        *a1 = v18;
        uint64_t v15 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v15);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      v5 += 2;
      if (v5 == v6) {
        return a1;
      }
    }
    BOOL v9 = (char *)v4;
LABEL_18:
    uint64_t v12 = (char **)v4;
    std::string v13 = (char **)v4;
    if (v7)
    {
      std::string v13 = (char **)(v9 + 8);
      uint64_t v12 = (char **)v9;
LABEL_20:
      if (*v13) {
        goto LABEL_27;
      }
    }
    goto LABEL_21;
  }
  return a1;
}

void sub_2128F0A08(_Unwind_Exception *a1)
{
  operator delete(v1);
  std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x2166853B0](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  BOOL v7 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  BOOL v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    char v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    char v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_2128F0C4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2128F0C08);
  }
  __cxa_rethrow();
}

void sub_2128F0CE8(_Unwind_Exception *a1)
{
}

MeCab::Dictionary *MeCab::Dictionary::Dictionary(MeCab::Dictionary *this)
{
  *(void *)this = &unk_26C3C32C8;
  MeCab::Mmap<char>::Mmap((uint64_t)this + 8);
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 432);
  *((void *)this + 88) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 89) = 0;
  marisa::Trie::Trie((void *)this + 91);
  return this;
}

void sub_2128F0D80(_Unwind_Exception *a1)
{
  MeCab::whatlog::~whatlog(v3);
  if (*(char *)(v2 + 431) < 0) {
    operator delete(*(void **)(v2 + 408));
  }
  MeCab::Mmap<char>::~Mmap(v1);
  _Unwind_Resume(a1);
}

void MeCab::whatlog::~whatlog(void **this)
{
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *this = (void *)*MEMORY[0x263F8C2C8];
  *(void **)((char *)this + *(void *)(v3 - 24)) = *(void **)(v2 + 24);
  this[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](this + 14);
}

void MeCab::Dictionary::~Dictionary(MeCab::Dictionary *this)
{
  *(void *)this = &unk_26C3C32C8;
  btrie_close(*((void ***)this + 45));
  *((void *)this + 4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  MeCab::Mmap<char>::close((uint64_t)this + 8);
  marisa::Trie::~Trie((MeCab::Dictionary *)((char *)this + 728));
  if (*((char *)this + 719) < 0) {
    operator delete(*((void **)this + 87));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *((void *)this + 54) = *MEMORY[0x263F8C2C8];
  *(void *)((char *)this + *(void *)(v3 - 24) + 432) = *(void *)(v2 + 24);
  *((void *)this + 5marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 527) < 0) {
    operator delete(*((void **)this + 63));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570]((char *)this + 544);
  if (*((char *)this + 431) < 0) {
    operator delete(*((void **)this + 51));
  }
  MeCab::Mmap<char>::~Mmap((uint64_t)this + 8);
}

{
  uint64_t vars8;

  MeCab::Dictionary::~Dictionary(this);

  JUMPOUT(0x2166855D0);
}

int *MeCab::Dictionary::commonPrefixSearch(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  double result = *(int **)(a1 + 360);
  if (result)
  {
    unint64_t v6 = 0;
    return (int *)v6;
  }
  return result;
}

uint64_t MeCab::Dictionary::exactMatchSearch(MeCab::Dictionary *this, char *__s)
{
  uint64_t v2 = *((void *)this + 45);
  if (v2)
  {
    unsigned int v4 = strlen(__s);
    btrie_exact_match_search(v2, (unsigned __int8 *)__s, v4, v5);
  }
  return 0;
}

uint64_t MeCab::Dictionary::open(MeCab::Dictionary *this, std::string::value_type *a2, const char *a3)
{
  btrie_close(*((void ***)this + 45));
  *((void *)this + 4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  MeCab::Mmap<char>::close((uint64_t)this + 8);
  unint64_t v6 = (uint64_t *)((char *)this + 408);
  std::string::__assign_external((std::string *)this + 17, a2);
  if ((MeCab::Mmap<char>::open((uint64_t)this + 8, a2, a3) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 54) - 24) + 432), 0);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
    char v14 = (void *)std::ostream::operator<<();
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") [", 3);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"dmmap_.open(file, mode)", 23);
    uint64_t v17 = "no such file or directory: ";
LABEL_61:
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
    double v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v17, 27);
    size_t v47 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)a2, v47);
    return 0;
  }
  unint64_t v7 = *((void *)this + 3);
  if (v7 <= 0x63)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 54) - 24) + 432), 0);
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"(", 1);
    std::locale v19 = (void *)std::ostream::operator<<();
    char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") [", 3);
    uint64_t v21 = "dmmap_.size() >= 100";
    uint64_t v22 = 20;
LABEL_60:
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    uint64_t v17 = "dictionary file is broken: ";
    goto LABEL_61;
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 2);
  if (v7 != (*v8 ^ 0xEF718F77))
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 54) - 24) + 432), 0);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
    unint64_t v24 = (void *)std::ostream::operator<<();
    char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
    uint64_t v21 = "(magic ^ DictionaryMagicID) == dmmap_.size()";
    uint64_t v22 = 44;
    goto LABEL_60;
  }
  *((_DWORD *)this + 96) = v8[1];
  *((_DWORD *)this + 97) = v8[2];
  *((_DWORD *)this + 98) = v8[3];
  *((_DWORD *)this + 99) = v8[4];
  *((_DWORD *)this + 100) = v8[5];
  unint64_t v9 = v8[6];
  uint64_t v10 = v8[7];
  uint64_t v12 = v8[8];
  unsigned int v11 = v8[9];
  if ((v11 & 0x3FFFFF) != 0)
  {
    if (*((_DWORD *)this + 180)) {
      goto LABEL_53;
    }
  }
  else
  {
    *((_DWORD *)this + 180) = v11 >> 28;
    *((unsigned char *)this + 724) = (v11 >> 26) & 3;
    *((unsigned char *)this + 72marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = HIBYTE(v11) & 3;
    *((unsigned char *)this + 726) = (v11 >> 22) & 3;
    if (v11 >> 28) {
      goto LABEL_53;
    }
  }
  char v25 = *((unsigned char *)this + 431);
  if (v25 < 0) {
    uint64_t v26 = *((void *)this + 52);
  }
  else {
    uint64_t v26 = *((unsigned __int8 *)this + 431);
  }
  if (v26)
  {
    if (v25 >= 0) {
      uint64_t v27 = *((unsigned __int8 *)this + 431);
    }
    else {
      uint64_t v27 = *((void *)this + 52);
    }
    if (v27 == 36)
    {
      if (v25 < 0) {
        unint64_t v6 = (uint64_t *)*v6;
      }
      if (!memcmp(v6, "/usr/share/tokenizer/zh/Hans/sys.dic", 0x24uLL))
      {
        int v39 = 2;
      }
      else
      {
        if (memcmp(v6, "/usr/share/tokenizer/zh/Hant/sys.dic", 0x24uLL)) {
          goto LABEL_53;
        }
        int v39 = 3;
      }
    }
    else
    {
      if (v27 != 31) {
        goto LABEL_53;
      }
      if (v25 >= 0) {
        double v28 = (uint64_t *)((char *)this + 408);
      }
      else {
        double v28 = (uint64_t *)*v6;
      }
      if (*v28 == 0x6168732F7273752FLL
        && v28[1] == 0x6E656B6F742F6572
        && v28[2] == 0x2F616A2F72657A69
        && *(uint64_t *)((char *)v28 + 23) == 0x6369642E7379732FLL)
      {
        int v39 = 1;
      }
      else
      {
        uint64_t v32 = *v28;
        uint64_t v33 = v28[1];
        uint64_t v34 = v28[2];
        uint64_t v35 = *(uint64_t *)((char *)v28 + 23);
        if (v32 != 0x6168732F7273752FLL
          || v33 != 0x6E656B6F742F6572
          || v34 != 0x2F6F6B2F72657A69
          || v35 != 0x6369642E7379732FLL)
        {
          goto LABEL_53;
        }
        int v39 = 5;
      }
    }
    *((_DWORD *)this + 180) = v39;
  }
LABEL_53:
  *((void *)this + 47) = v8 + 10;
  btrie_open(0, 0, v8 + 18, v9);
  *((void *)this + 44) = (char *)v8 + v9 + 72;
  *((void *)this + 4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v40;
  double v41 = (char *)v8 + v9 + v10 + 72;
  if (v12) {
    *((void *)this + 46) = v41;
  }
  double v42 = &v41[v12];
  if (*((unsigned char *)this + 725) == 1 && *((unsigned char *)this + 726) == 1) {
    marisa::Trie::map((marisa::grimoire::trie::LoudsTrie **)this + 91, *((const void **)this + 46), v12);
  }
  if (v42 != (char *)(*((void *)this + 2) + *((void *)this + 3)))
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 54) - 24) + 432), 0);
    long double v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::string v44 = (void *)std::ostream::operator<<();
    char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") [", 3);
    uint64_t v21 = "ptr == dmmap_.end()";
    uint64_t v22 = 19;
    goto LABEL_60;
  }
  return 1;
}

void MeCab::Dictionary::assignUserDictionaryCosts(const MeCab::Param *a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  MeCab::Connector::Connector((MeCab::Connector *)v52);
  v51[1] = 0;
  v51[0] = 0;
  memset(v48, 0, sizeof(v48));
  uint64_t v49 = 0;
  double v50 = v51;
  MeCab::FeatureIndex::FeatureIndex((MeCab::FeatureIndex *)v45);
  v45[0] = &unk_26C3C3768;
  MeCab::Mmap<char>::Mmap((uint64_t)v46);
  uint64_t v47 = 0;
  *(_OWORD *)&v46[344] = 0u;
  v40[0] = 0;
  int v39 = v40;
  v41[1] = 0;
  v41[0] = 0;
  v40[1] = 0;
  void v40[2] = v41;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  MeCab::CharProperty::CharProperty((MeCab::CharProperty *)v38);
  MeCab::Param::get<std::string>((uint64_t)a1, "dicdir", &v37);
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix.def");
  MeCab::create_filename((uint64_t)&v37, (uint64_t)__p, &v36);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix.bin");
  MeCab::create_filename((uint64_t)&v37, (uint64_t)__p, &v35);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "left-id.def");
  MeCab::create_filename((uint64_t)&v37, (uint64_t)__p, &v34);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "right-id.def");
  MeCab::create_filename((uint64_t)&v37, (uint64_t)__p, &v33);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rewrite.def");
  MeCab::create_filename((uint64_t)&v37, (uint64_t)__p, &v32);
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  MeCab::Param::get<std::string>((uint64_t)a1, "dictionary-charset", &__str);
  if ((int)MeCab::Param::get<int>((uint64_t)a1, "cost-factor") <= 0)
  {
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") [", 3);
    uint8x8_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"factor > 0", 10);
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"cost factor needs to be positive value", 38);
    MeCab::die::~die((MeCab::die *)__p);
  }
  MeCab::Param::get<std::string>((uint64_t)a1, "config-charset", &v30);
  std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::operator=(&v30, &__str);
  }
  std::string::size_type v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v8 = __str.__r_.__value_.__l.__size_;
  }
  if (!v8)
  {
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
    uint64_t v10 = (void *)std::ostream::operator<<();
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"!from.empty()", 13);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"input dictionary charset is empty", 33);
    MeCab::die::~die((MeCab::die *)__p);
  }
  v29[0] = &unk_26C3C3858;
  v29[1] = 0;
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v14 = &v30;
  }
  else {
    char v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (!MeCab::Iconv::open((MeCab::Iconv *)v29, (_anonymous_namespace_ *)v14, (_anonymous_namespace_ *)p_str))
  {
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
    uint64_t v17 = (void *)std::ostream::operator<<();
    long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    std::locale v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"config_iconv.open(config_charset.c_str(), from.c_str())", 55);
    char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] ", 2);
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"iconv_open() failed with from=", 30);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v30;
    }
    else {
      uint64_t v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v30.__r_.__value_.__l.__size_;
    }
    unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    char v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" to=", 4);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &__str;
    }
    else {
      uint64_t v26 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __str.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    MeCab::die::~die((MeCab::die *)__p);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v28 = &v32;
  }
  else {
    double v28 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  MeCab::DictionaryRewriter::open((MeCab::DictionaryRewriter *)v48, (const char *)v28, (MeCab::Iconv *)v29);
  MeCab::DecoderFeatureIndex::open((MeCab::DecoderFeatureIndex *)v45, a1);
}

void sub_2128F28D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  MeCab::CharProperty::~CharProperty(&a79);
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (SLOBYTE(STACK[0x4BF]) < 0) {
    operator delete((void *)STACK[0x4A8]);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a13, (char *)STACK[0x498]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&STACK[0x478], (char *)STACK[0x480]);
  STACK[0x4D8] = a10;
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  MeCab::Mmap<char>::~Mmap(a11);
  MeCab::FeatureIndex::~FeatureIndex((MeCab::FeatureIndex *)&STACK[0x4D8]);
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(a12, (void *)STACK[0x800]);
  STACK[0x4D8] = (unint64_t)&STACK[0x7E0];
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4D8]);
  STACK[0x4D8] = (unint64_t)&STACK[0x7C8];
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4D8]);
  STACK[0x4D8] = (unint64_t)&STACK[0x7B0];
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4D8]);
  MeCab::Connector::~Connector((void **)&STACK[0x818]);
  _Unwind_Resume(a1);
}

void MeCab::anonymous namespace'::calcCost(unsigned __int8 *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    if (a5)
    {
      if (!a6)
      {
        char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
        uint64_t v15 = (void *)std::ostream::operator<<();
        int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"property", 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
        MeCab::die::~die((MeCab::die *)v30);
      }
      char v29 = 0;
      char v33 = 0;
      long double v31 = v34;
      double v28 = v34;
      v34[2] = &v27;
      v34[0] = v30;
      int v18 = (char)a1[23];
      unint64_t v19 = *((void *)a1 + 1);
      BOOL v20 = v18 < 0;
      if (v18 >= 0) {
        uint64_t v21 = (char *)a1;
      }
      else {
        uint64_t v21 = *(char **)a1;
      }
      if (!v20) {
        unint64_t v19 = a1[23];
      }
      if ((*(_DWORD *)(a6 + 384) - 3) > 2)
      {
        __int16 v23 = *v21;
        if (*v21 < 0)
        {
          if (v19 >= 2 && (v23 & 0xE0) == 0xC0)
          {
            unsigned __int16 v22 = v21[1] & 0x3F | ((v23 & 0x1F) << 6);
          }
          else
          {
            unsigned __int16 v22 = 0;
            if (v19 >= 3 && (v23 & 0xF0) == 0xE0) {
              unsigned __int16 v22 = (v23 << 12) | ((v21[1] & 0x3F) << 6) | v21[2] & 0x3F;
            }
          }
        }
        else
        {
          unsigned __int16 v22 = *v21;
        }
      }
      else if (v19 < 2)
      {
        unsigned __int16 v22 = 0;
      }
      else
      {
        unsigned __int16 v22 = *(_WORD *)v21;
      }
      char v32 = *(_DWORD *)(*(void *)(a6 + 376) + 4 * v22) >> 18;
      memset(&v26, 0, sizeof(v26));
      memset(&v25, 0, sizeof(v25));
      memset(&__p, 0, sizeof(__p));
      MeCab::DictionaryRewriter::rewrite2(a5, a2, &v26, &v25, &__p);
      MeCab::FeatureIndex::buildUnigramFeature();
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    unsigned int v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"rewriter", 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)v30);
  }
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
  unint64_t v7 = (void *)std::ostream::operator<<();
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fi", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
  MeCab::die::~die((MeCab::die *)v30);
}

void sub_2128F3148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::Dictionary::compile()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v96 = *MEMORY[0x263EF8340];
  MeCab::Connector::Connector((MeCab::Connector *)v92);
  uint64_t v90 = &unk_26C3C3458;
  int v91 = 0;
  uint64_t v88 = &unk_26C3C3438;
  unsigned int v89 = 0;
  double v86 = &unk_26C3C3C48;
  uint64_t v87 = 0;
  std::string v84 = &unk_26C3C34B8;
  double v85 = 0;
  std::string v82 = &unk_26C3C3478;
  uint64_t v83 = 0;
  uint64_t v80 = &unk_26C3C3CA8;
  uint64_t v81 = 0;
  int v78 = &unk_26C3C33F8;
  uint64_t v79 = 0;
  int v76 = &unk_26C3C3C78;
  uint64_t v77 = 0;
  MeCab::Param::get<std::string>(v0, "dicdir", &v75);
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix.def");
  MeCab::create_filename((uint64_t)&v75, (uint64_t)&__p, &v74);
  if (v95 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix.bin");
  MeCab::create_filename((uint64_t)&v75, (uint64_t)&__p, &v73);
  if (v95 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "left-id.def");
  MeCab::create_filename((uint64_t)&v75, (uint64_t)&__p, &v72);
  if (v95 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "right-id.def");
  MeCab::create_filename((uint64_t)&v75, (uint64_t)&__p, &v71);
  if (v95 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rewrite.def");
  MeCab::create_filename((uint64_t)&v75, (uint64_t)&__p, &v70);
  if (v95 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "pos-id.def");
  MeCab::create_filename((uint64_t)&v75, (uint64_t)&__p, &v69);
  if (v95 < 0) {
    operator delete(__p);
  }
  uint64_t v67 = 0;
  uint64_t v66 = 0;
  uint64_t v68 = 0;
  uint64_t v64 = 0;
  uint64_t v63 = 0;
  uint64_t v65 = 0;
  int v62 = 0;
  memset(&v61, 0, sizeof(v61));
  memset(&v60, 0, sizeof(v60));
  MeCab::Param::get<std::string>(v0, "dictionary-charset", &__str);
  MeCab::Param::get<std::string>(v0, "charset", &v58);
  MeCab::Param::get<BOOL>(v0, "wakati");
  int v57 = MeCab::Param::get<int>(v0, "type");
  MeCab::Param::get<std::string>(v0, "node-format", &v56);
  if ((int)MeCab::Param::get<int>(v0, "cost-factor") <= 0)
  {
    uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") [", 3);
    unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"factor > 0", 10);
    uint8x8_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"cost factor needs to be positive value", 38);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  MeCab::Param::get<std::string>(v0, "config-charset", &v55);
  std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v55.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::operator=(&v55, &__str);
  }
  std::string::size_type v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = __str.__r_.__value_.__l.__size_;
  }
  if (!v7)
  {
    std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    unint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") [", 3);
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"!from.empty()", 13);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"input dictionary charset is empty", 33);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  std::string::size_type v13 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = v58.__r_.__value_.__l.__size_;
  }
  if (!v13)
  {
    char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
    uint64_t v15 = (void *)std::ostream::operator<<();
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"!to.empty()", 11);
    int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"output dictionary charset is empty", 34);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  marisa::Trie::Trie(&v53);
  marisa::Agent::Agent((marisa::Agent *)&v54);
  memset(&v52, 0, sizeof(v52));
  v51[0] = &unk_26C3C3858;
  v51[1] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v20 = (_anonymous_namespace_ *)&v58;
  }
  else {
    BOOL v20 = (_anonymous_namespace_ *)v58.__r_.__value_.__r.__words[0];
  }
  if (!MeCab::Iconv::open((MeCab::Iconv *)v51, (_anonymous_namespace_ *)p_str, v20))
  {
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
    unsigned __int16 v22 = (void *)std::ostream::operator<<();
    __int16 v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"iconv.open(from.c_str(), to.c_str())", 36);
    std::string v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
    std::string v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"iconv_open() failed with from=", 30);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v27 = &__str;
    }
    else {
      char v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
    }
    char v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    std::string v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" to=", 4);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long double v31 = &v58;
    }
    else {
      long double v31 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v32 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v32 = v58.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  v50[0] = &unk_26C3C3858;
  v50[1] = 0;
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v33 = &v55;
  }
  else {
    char v33 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v34 = &__str;
  }
  else {
    std::string v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (!MeCab::Iconv::open((MeCab::Iconv *)v50, (_anonymous_namespace_ *)v33, (_anonymous_namespace_ *)v34))
  {
    std::string v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
    std::string v36 = (void *)std::ostream::operator<<();
    std::string v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") [", 3);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"config_iconv.open(config_charset.c_str(), from.c_str())", 55);
    int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"] ", 2);
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"iconv_open() failed with from=", 30);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v41 = &v55;
    }
    else {
      double v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v55.__r_.__value_.__l.__size_;
    }
    long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" to=", 4);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v45 = &__str;
    }
    else {
      uint64_t v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = __str.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  std::string::size_type v47 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v47 = v56.__r_.__value_.__l.__size_;
  }
  if (v47) {
    operator new();
  }
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v48 = &v74;
  }
  else {
    double v48 = (std::string *)v74.__r_.__value_.__r.__words[0];
  }
  if (!MeCab::Connector::openText((MeCab::Connector *)v92, (const char *)v48))
  {
    uint64_t v49 = (v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v73
        : (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((MeCab::Connector::open((MeCab::Connector *)v92, (char *)v49, "r") & 1) == 0) {
      int v93 = 65537;
    }
  }
  operator new();
}

void sub_2128F6F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, unint64_t a17, unint64_t a18, marisa::Agent *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void **a63)
{
  MEMORY[0x216685460](&STACK[0x800]);
  std::ofstream::~ofstream(&STACK[0x830]);
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (v74) {
    operator delete(v74);
  }
  if (a57) {
    operator delete(a57);
  }
  if (a60) {
    operator delete(a60);
  }
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  a63 = (void **)*MEMORY[0x263F8C2C0];
  *(void ***)((char *)&a63 + (void)*(a63 - 3)) = *(void ***)(MEMORY[0x263F8C2C0] + 24);
  a65 = MEMORY[0x263F8C318] + 16;
  if (a73 < 0) {
    operator delete(a72);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x216685570](&a74);
  MeCab::Iconv::~Iconv((MeCab::Iconv *)&STACK[0x298]);
  MeCab::Iconv::~Iconv((MeCab::Iconv *)&STACK[0x2A8]);
  a63 = (void **)&STACK[0x2B8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a63);
  marisa::Agent::~Agent(a19);
  marisa::Trie::~Trie((marisa::Trie *)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  a63 = (void **)&STACK[0x3A8];
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a63);
  a63 = (void **)&STACK[0x3C0];
  std::vector<std::pair<std::string,mecab_token_t *>>::__destroy_vector::operator()[abi:ne180100](&a63);
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete((void *)STACK[0x408]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete((void *)STACK[0x438]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  STACK[0x4F0] = a14;
  if (STACK[0x4F8]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x4F8] + 8))(STACK[0x4F8]);
  }
  STACK[0x500] = a15;
  if (STACK[0x508]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x508] + 8))(STACK[0x508]);
  }
  STACK[0x510] = a16;
  if (STACK[0x518]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x518] + 312))(STACK[0x518]);
  }
  STACK[0x520] = a17;
  if (STACK[0x528]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x528] + 8))(STACK[0x528]);
  }
  MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(&STACK[0x530]);
  STACK[0x540] = a18;
  if (STACK[0x548]) {
    (*(void (**)(unint64_t))(*(void *)STACK[0x548] + 40))(STACK[0x548]);
  }
  MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(&STACK[0x550]);
  MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(&STACK[0x560]);
  MeCab::Connector::~Connector((void **)&STACK[0x570]);
  _Unwind_Resume(a1);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_2128F7914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t MeCab::scoped_ptr<MeCab::DictionaryRewriter>::reset(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(v4 + 72, *(void **)(v4 + 80));
    uint8x8_t v5 = (void **)(v4 + 48);
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint8x8_t v5 = (void **)(v4 + 24);
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint8x8_t v5 = (void **)v4;
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v5);
    double result = MEMORY[0x2166855D0](v4, 0x1020C401749051DLL);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *MeCab::scoped_ptr<MeCab::CharProperty>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3C78;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::StringBuffer>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C33F8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::Lattice>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3CA8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 312))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::Writer>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3478;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::DecoderFeatureIndex>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3C48;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::string,mecab_token_t *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void marisa::Keyset::~Keyset(marisa::Keyset *this)
{
  marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array((uint64_t *)this + 6);
  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)this + 3);

  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)this);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

void std::vector<std::pair<std::string,mecab_token_t *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint8x8_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(void *a1)
{
  MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3458;
  uint64_t v2 = a1[1];
  if (v2)
  {
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(v2 + 72, *(void **)(v2 + 80));
    uint64_t v4 = (void **)(v2 + 48);
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 24);
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)v2;
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2166855D0](v2, 0x1020C401749051DLL);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(void *a1)
{
  MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3438;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v4 = (void **)a1[1];
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2166855D0](v2, 0x20C40960023A9);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::DecoderFeatureIndex>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3C48;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(void *a1)
{
  MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C34B8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    if (*(char *)(v2 + 95) < 0) {
      operator delete(*(void **)(v2 + 72));
    }
    if (*(char *)(v2 + 71) < 0) {
      operator delete(*(void **)(v2 + 48));
    }
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v2 + 24, *(char **)(v2 + 32));
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v2, *(char **)(v2 + 8));
    MEMORY[0x2166855D0](v2, 0x1032C40D2D3B4A1);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::Writer>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3478;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::Lattice>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3CA8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 312))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::StringBuffer>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C33F8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::CharProperty>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3C78;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(void **a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t)a1;
    if (a3 == 2)
    {
      std::string::size_type v7 = a2 - 2;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a2[-2].n128_u64, a1) & 0x80) != 0)
      {
        unint64_t v8 = *(void *)(v6 + 16);
        __n128 v9 = *(__n128 *)v6;
        unint64_t v10 = a2[-1].n128_u64[0];
        *(__n128 *)uint64_t v6 = *v7;
        *(void *)(v6 + 16) = v10;
        __n128 *v7 = v9;
        a2[-1].n128_u64[0] = v8;
        unint64_t v11 = *(void *)(v6 + 24);
        *(void *)(v6 + 24) = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (void **)a2)
      {
        int v18 = a1 + 4;
        if (a1 + 4 != (void **)a2)
        {
          uint64_t v19 = 0;
          BOOL v20 = a1;
          do
          {
            uint64_t v21 = v18;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, v20) & 0x80) != 0)
            {
              long long v22 = *(_OWORD *)v21;
              uint64_t v46 = v21[2];
              long long v45 = v22;
              v21[1] = 0;
              v21[2] = 0;
              *uint64_t v21 = 0;
              std::string::size_type v47 = v20[7];
              uint64_t v23 = v19;
              while (1)
              {
                uint64_t v24 = v6 + v23;
                std::string v25 = (void **)(v6 + v23 + 32);
                if (*(char *)(v6 + v23 + 55) < 0) {
                  operator delete(*v25);
                }
                *(_OWORD *)std::string v25 = *(_OWORD *)v24;
                *(void *)(v6 + v23 + 48) = *(void *)(v24 + 16);
                *(unsigned char *)(v24 + 23) = 0;
                *(unsigned char *)uint64_t v24 = 0;
                *(void *)(v24 + 56) = *(void *)(v24 + 24);
                if (!v23) {
                  break;
                }
                v23 -= 32;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v45, (void **)(v23 + v6)) & 0x80) == 0)
                {
                  uint64_t v26 = v6 + v23 + 32;
                  goto LABEL_21;
                }
              }
              uint64_t v26 = v6;
LABEL_21:
              if (*(char *)(v26 + 23) < 0) {
                operator delete(*(void **)v26);
              }
              long long v27 = v45;
              *(void *)(v26 + 16) = v46;
              *(_OWORD *)uint64_t v26 = v27;
              *(void *)(v26 + 24) = v47;
            }
            int v18 = v21 + 4;
            v19 += 32;
            BOOL v20 = (void **)v21;
          }
          while (v21 + 4 != (void *)a2);
        }
      }
    }
    else
    {
      uint64_t v14 = (uint64_t)a4;
      unint64_t v15 = a3 >> 1;
      int v16 = (__n128 *)&a1[4 * (a3 >> 1)];
      unint64_t v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>((__n128 *)a1, v16, v17, a4);
        std::string::size_type v28 = (__n128 *)(v14 + 32 * v15);
        std::__stable_sort_move<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>((__n128 *)(v6 + 32 * (a3 >> 1)), a2, a3 - (a3 >> 1), v28);
        char v29 = (__n128 *)(v14 + 32 * a3);
        std::string v30 = v28;
        uint64_t v31 = v14;
        while (v30 != v29)
        {
          char v32 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (void **)v31);
          int v33 = *(char *)(v6 + 23);
          if (v32 < 0)
          {
            if (v33 < 0) {
              operator delete(*(void **)v6);
            }
            __n128 v35 = *v30;
            *(void *)(v6 + 16) = v30[1].n128_u64[0];
            *(__n128 *)uint64_t v6 = v35;
            v30[1].n128_u8[7] = 0;
            v30->n128_u8[0] = 0;
            *(void *)(v6 + 24) = v30[1].n128_u64[1];
            v30 += 2;
          }
          else
          {
            if (v33 < 0) {
              operator delete(*(void **)v6);
            }
            long long v34 = *(_OWORD *)v31;
            *(void *)(v6 + 16) = *(void *)(v31 + 16);
            *(_OWORD *)uint64_t v6 = v34;
            *(unsigned char *)(v31 + 23) = 0;
            *(unsigned char *)uint64_t v31 = 0;
            *(void *)(v6 + 24) = *(void *)(v31 + 24);
            v31 += 32;
          }
          v6 += 32;
          if ((__n128 *)v31 == v28)
          {
            if (v30 != v29)
            {
              uint64_t v36 = 0;
              do
              {
                uint64_t v37 = v6 + v36 * 16;
                if (*(char *)(v6 + v36 * 16 + 23) < 0) {
                  operator delete(*(void **)(v6 + v36 * 16));
                }
                uint64_t v38 = &v30[v36];
                __n128 v39 = v30[v36];
                *(void *)(v37 + 16) = v30[v36 + 1].n128_u64[0];
                *(__n128 *)uint64_t v37 = v39;
                v38[1].n128_u8[7] = 0;
                v38->n128_u8[0] = 0;
                *(void *)(v37 + 24) = v30[v36 + 1].n128_u64[1];
                v36 += 2;
              }
              while (&v38[2] != v29);
            }
            goto LABEL_47;
          }
        }
        if ((__n128 *)v31 != v28)
        {
          uint64_t v40 = 0;
          do
          {
            uint64_t v41 = v6 + v40;
            if (*(char *)(v6 + v40 + 23) < 0) {
              operator delete(*(void **)v41);
            }
            std::string::size_type v42 = (unsigned char *)(v31 + v40);
            long long v43 = *(_OWORD *)(v31 + v40);
            *(void *)(v41 + 16) = *(void *)(v31 + v40 + 16);
            *(_OWORD *)uint64_t v41 = v43;
            v42[23] = 0;
            *std::string::size_type v42 = 0;
            *(void *)(v41 + 24) = *(void *)(v31 + v40 + 24);
            v40 += 32;
          }
          while (v42 + 32 != (unsigned char *)v28);
        }
LABEL_47:
        if (v14)
        {
          unint64_t v44 = a3;
          do
          {
            if (*(char *)(v14 + 23) < 0) {
              operator delete(*(void **)v14);
            }
            v14 += 32;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(a1, v16, v17, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(v6 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), v14, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(v6, (void **)(v6 + 32 * (a3 >> 1)), (uint64_t)a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
}

void sub_2128F861C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
      ++v4;
      v1 += 32;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    std::string::size_type v7 = a1;
    if (a3 == 2)
    {
      __n128 v9 = a2 - 2;
      char v10 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a2[-2].n128_u64, (void **)a1);
      unint64_t v11 = v4 + 2;
      if (v10 < 0)
      {
        __n128 v30 = *v9;
        v4[1].n128_u64[0] = a2[-1].n128_u64[0];
        __n128 *v4 = v30;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v4[1].n128_u64[1] = a2[-1].n128_u64[1];
        __n128 result = *v7;
        v4[3].n128_u64[0] = v7[1].n128_u64[0];
        *unint64_t v11 = result;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        std::string::size_type v13 = &v7[1].n128_u64[1];
      }
      else
      {
        __n128 v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        __n128 *v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v4[1].n128_u64[1] = v7[1].n128_u64[1];
        __n128 result = *v9;
        v4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *unint64_t v11 = result;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        std::string::size_type v13 = &a2[-1].n128_u64[1];
      }
      v4[3].n128_u64[1] = *v13;
    }
    else if (a3 == 1)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v24 = &a1[2 * (a3 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(a1, v24, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      std::string v25 = &v7[2 * (a3 >> 1)];
      while (v25 != a2)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (void **)v7) & 0x80) != 0)
        {
          __n128 result = *v25;
          v4[1].n128_u64[0] = v25[1].n128_u64[0];
          __n128 *v4 = result;
          v25->n128_u64[1] = 0;
          v25[1].n128_u64[0] = 0;
          v25->n128_u64[0] = 0;
          uint64_t v26 = v25;
          v25 += 2;
        }
        else
        {
          __n128 result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          __n128 *v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          uint64_t v26 = v7;
          v7 += 2;
        }
        v4[1].n128_u64[1] = v26[1].n128_u64[1];
        v4 += 2;
        if (v7 == v24)
        {
          if (v25 != a2)
          {
            uint64_t v27 = 0;
            do
            {
              std::string::size_type v28 = &v25[v27];
              char v29 = &v4[v27];
              __n128 result = v25[v27];
              v29[1].n128_u64[0] = v25[v27 + 1].n128_u64[0];
              *char v29 = result;
              v28->n128_u64[1] = 0;
              v28[1].n128_u64[0] = 0;
              v28->n128_u64[0] = 0;
              v29[1].n128_u64[1] = v25[v27 + 1].n128_u64[1];
              v27 += 2;
            }
            while (&v28[2] != a2);
          }
          return result;
        }
      }
      if (v7 != v24)
      {
        uint64_t v31 = 0;
        do
        {
          char v32 = &v4[v31];
          int v33 = &v7[v31];
          __n128 result = v7[v31];
          v32[1].n128_u64[0] = v7[v31 + 1].n128_u64[0];
          *char v32 = result;
          v33->n128_u64[1] = 0;
          v33[1].n128_u64[0] = 0;
          v33->n128_u64[0] = 0;
          v32[1].n128_u64[1] = v7[v31 + 1].n128_u64[1];
          v31 += 2;
        }
        while (&v33[2] != v24);
      }
    }
    else if (a1 != a2)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      uint64_t v14 = a1 + 2;
      if (&a1[2] != a2)
      {
        uint64_t v15 = 0;
        int v16 = a4;
        do
        {
          unint64_t v17 = v14;
          int v18 = v16 + 2;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (void **)v16) & 0x80) != 0)
          {
            *int v18 = *v16;
            unint64_t v19 = v16[1].n128_u64[1];
            v16[3].n128_u64[0] = v16[1].n128_u64[0];
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v19;
            BOOL v20 = v4;
            if (v16 != v4)
            {
              uint64_t v21 = v15;
              while (1)
              {
                BOOL v20 = (__n128 *)((char *)v4 + v21);
                long long v22 = (void **)((char *)&v4[-2] + v21);
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, v22) & 0x80) == 0) {
                  break;
                }
                if (v20[1].n128_i8[7] < 0) {
                  operator delete((void *)v20->n128_u64[0]);
                }
                uint64_t v23 = (char *)v4 + v21;
                *BOOL v20 = *(__n128 *)v22;
                v20[1].n128_u64[0] = *(unint64_t *)((char *)v4[-1].n128_u64 + v21);
                *(v23 - 9) = 0;
                *(unsigned char *)long long v22 = 0;
                *((void *)v23 + 3) = *(unint64_t *)((char *)&v4->n128_u64[-1] + v21);
                v21 -= 32;
                if (!v21)
                {
                  BOOL v20 = v4;
                  break;
                }
              }
            }
            if (v20[1].n128_i8[7] < 0) {
              operator delete((void *)v20->n128_u64[0]);
            }
            __n128 result = *v17;
            v20[1].n128_u64[0] = v17[1].n128_u64[0];
            *BOOL v20 = result;
            v7[3].n128_u8[7] = 0;
            v17->n128_u8[0] = 0;
            v20[1].n128_u64[1] = v7[3].n128_u64[1];
          }
          else
          {
            __n128 result = *v17;
            v16[3].n128_u64[0] = v17[1].n128_u64[0];
            *int v18 = result;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v7[3].n128_u64[1];
          }
          uint64_t v14 = v17 + 2;
          v15 += 32;
          int v16 = v18;
          std::string::size_type v7 = v17;
        }
        while (&v17[2] != a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v70 = a7;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4) {
        return;
      }
      std::string::size_type v13 = 0;
      uint64_t v14 = -a4;
      while (1)
      {
        uint64_t v15 = (uint64_t)v13 + a1;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)((char *)v13 + a1)) & 0x80) != 0)break; {
        v13 += 4;
        }
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v14;
      uint64_t v69 = v8;
      uint64_t v71 = a6;
      uint64_t v73 = a3;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          uint64_t v63 = (uint64_t)v13 + a1;
          uint64_t v79 = *(void **)((char *)v13 + a1 + 16);
          long long v76 = *(_OWORD *)((char *)v13 + a1);
          long long v64 = *(_OWORD *)a2;
          *(void *)(v63 + 16) = a2[2];
          *(_OWORD *)uint64_t v63 = v64;
          *(_OWORD *)a2 = v76;
          a2[2] = v79;
          uint64_t v65 = *(void **)((char *)v13 + a1 + 24);
          *(void *)(v63 + 24) = a2[3];
          a2[3] = v65;
          return;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v23 = v17 >> 1;
        uint64_t v21 = (void **)((char *)&v13[4 * (v17 >> 1)] + a1);
        uint64_t v24 = a3;
        BOOL v20 = a2;
        if (a2 != (void **)v24)
        {
          uint64_t v68 = v23;
          unint64_t v25 = (v73 - (uint64_t)a2) >> 5;
          BOOL v20 = a2;
          do
          {
            uint64_t v26 = &v20[4 * (v25 >> 1)];
            int v27 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, v21);
            if (v27 >= 0) {
              v25 >>= 1;
            }
            else {
              v25 += ~(v25 >> 1);
            }
            if (v27 < 0) {
              BOOL v20 = v26 + 4;
            }
          }
          while (v25);
          uint64_t v23 = v68;
        }
        uint64_t v19 = ((char *)v20 - (char *)a2) >> 5;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v18 = v8;
        }
        else {
          uint64_t v18 = v8 + 1;
        }
        uint64_t v19 = v18 >> 1;
        BOOL v20 = &a2[4 * (v18 >> 1)];
        uint64_t v21 = a2;
        if ((void **)((char *)a2 - a1) != v13)
        {
          uint64_t v67 = v18 >> 1;
          unint64_t v22 = ((char *)a2 - a1 - (char *)v13) >> 5;
          uint64_t v21 = (void **)((char *)v13 + a1);
          do
          {
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v21[4 * (v22 >> 1)]) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              v21 += 4 * (v22 >> 1) + 4;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          uint64_t v19 = v67;
        }
        uint64_t v23 = ((char *)v21 - a1 - (char *)v13) >> 5;
      }
      if (v21 == a2)
      {
        std::string::size_type v28 = v20;
      }
      else if (v20 == a2)
      {
        std::string::size_type v28 = v21;
      }
      else
      {
        std::string::size_type v28 = v21 + 4;
        char v29 = v21 + 4;
        __n128 v30 = a2;
        while (1)
        {
          uint64_t v77 = *(v29 - 2);
          long long v74 = *((_OWORD *)v29 - 2);
          long long v31 = *(_OWORD *)v30;
          *(v29 - 2) = v30[2];
          *((_OWORD *)v29 - 2) = v31;
          *(_OWORD *)__n128 v30 = v74;
          v30[2] = v77;
          char v32 = *(v29 - 1);
          *(v29 - 1) = v30[3];
          v30[3] = v32;
          v30 += 4;
          if (v30 == v20) {
            break;
          }
          if (v29 == a2) {
            a2 = v30;
          }
          v29 += 4;
          v28 += 4;
        }
        if (v29 != a2)
        {
          int v33 = a2;
          do
          {
            while (1)
            {
              int v78 = v29[2];
              long long v75 = *(_OWORD *)v29;
              long long v34 = *(_OWORD *)v33;
              void v29[2] = v33[2];
              *(_OWORD *)char v29 = v34;
              void v33[2] = v78;
              *(_OWORD *)int v33 = v75;
              __n128 v35 = v29[3];
              v29[3] = v33[3];
              v33[3] = v35;
              v29 += 4;
              v33 += 4;
              if (v33 == v20) {
                break;
              }
              if (v29 == a2) {
                a2 = v33;
              }
            }
            int v33 = a2;
          }
          while (v29 != a2);
        }
      }
      a4 = -v23 - v14;
      uint64_t v36 = v69 - v19;
      if (v23 + v19 >= v69 - (v23 + v19) - v14)
      {
        uint64_t v38 = v20;
        uint64_t v39 = v23;
        uint64_t v40 = v19;
        std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(v28, v38, v73, a4, v69 - v19, v71, v70);
        a2 = v21;
        a6 = v71;
        uint64_t v36 = v40;
        a4 = v39;
        a3 = (uint64_t)v28;
        a7 = v70;
      }
      else
      {
        uint64_t v37 = v21;
        a6 = v71;
        std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>((char *)v13 + a1, v37, v28, v23, v19, v71, v70);
        uint64_t v15 = (uint64_t)v28;
        a7 = v70;
        a2 = v20;
        a3 = v73;
      }
      uint64_t v8 = v36;
      a1 = v15;
      if (!v36) {
        return;
      }
    }
    if (a4 <= v8)
    {
      if ((void **)a1 == a2) {
        return;
      }
      uint64_t v53 = 0;
      unint64_t v42 = 0;
      do
      {
        uint64_t v54 = a6 + v53;
        std::string v55 = (void *)(a1 + v53);
        long long v56 = *(_OWORD *)(a1 + v53);
        *(void *)(v54 + 16) = *(void *)(a1 + v53 + 16);
        *(_OWORD *)uint64_t v54 = v56;
        v55[1] = 0;
        v55[2] = 0;
        *std::string v55 = 0;
        *(void *)(v54 + 24) = *(void *)(a1 + v53 + 24);
        ++v42;
        v53 += 32;
      }
      while (v55 + 4 != a2);
      if (v53)
      {
        int v57 = (__n128 *)(a6 + v53);
        uint64_t v58 = a6;
        while (a2 != (void **)a3)
        {
          char v59 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v58);
          int v60 = *(char *)(a1 + 23);
          if (v59 < 0)
          {
            if (v60 < 0) {
              operator delete(*(void **)a1);
            }
            long long v62 = *(_OWORD *)a2;
            *(void *)(a1 + 16) = a2[2];
            *(_OWORD *)a1 = v62;
            *((unsigned char *)a2 + 23) = 0;
            *(unsigned char *)a2 = 0;
            *(void *)(a1 + 24) = a2[3];
            a2 += 4;
          }
          else
          {
            if (v60 < 0) {
              operator delete(*(void **)a1);
            }
            long long v61 = *(_OWORD *)v58;
            *(void *)(a1 + 16) = *(void *)(v58 + 16);
            *(_OWORD *)a1 = v61;
            *(unsigned char *)(v58 + 23) = 0;
            *(unsigned char *)uint64_t v58 = 0;
            *(void *)(a1 + 24) = *(void *)(v58 + 24);
            v58 += 32;
          }
          a1 += 32;
          if (v57 == (__n128 *)v58) {
            goto LABEL_96;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *>((__n128 *)v58, v57, a1);
      }
    }
    else
    {
      if ((void **)a3 == a2) {
        return;
      }
      uint64_t v41 = 0;
      unint64_t v42 = 0;
      do
      {
        uint64_t v43 = a6 + v41 * 8;
        unint64_t v44 = &a2[v41];
        long long v45 = *(_OWORD *)&a2[v41];
        *(void *)(v43 + 16) = a2[v41 + 2];
        *(_OWORD *)uint64_t v43 = v45;
        v44[1] = 0;
        uint64_t v44[2] = 0;
        void *v44 = 0;
        *(void *)(v43 + 24) = a2[v41 + 3];
        ++v42;
        v41 += 4;
      }
      while (v44 + 4 != (void **)a3);
      if (v41 * 8)
      {
        uint64_t v46 = a6 + v41 * 8;
        uint64_t v47 = a3 - 32;
        uint64_t v72 = a6;
        while (a2 != (void **)a1)
        {
          uint64_t v48 = a3;
          int v49 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v46 - 32), a2 - 4);
          if (v49 >= 0) {
            uint64_t v50 = v46;
          }
          else {
            uint64_t v50 = (uint64_t)a2;
          }
          if (v49 >= 0) {
            uint64_t v51 = v46 - 32;
          }
          else {
            uint64_t v51 = (uint64_t)(a2 - 4);
          }
          if (v49 >= 0) {
            v46 -= 32;
          }
          else {
            a2 -= 4;
          }
          if (*(char *)(v47 + 23) < 0) {
            operator delete(*(void **)v47);
          }
          long long v52 = *(_OWORD *)v51;
          *(void *)(v47 + 16) = *(void *)(v51 + 16);
          *(_OWORD *)uint64_t v47 = v52;
          *(unsigned char *)(v50 - 9) = 0;
          *(unsigned char *)uint64_t v51 = 0;
          *(void *)(v47 + 24) = *(void *)(v50 - 8);
          a3 = v48 - 32;
          v47 -= 32;
          a6 = v72;
          if (v46 == v72) {
            goto LABEL_96;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>>(v46, a6, a3);
      }
    }
LABEL_96:
    if (a6)
    {
      unint64_t v66 = 0;
      do
      {
        if (*(char *)(a6 + 23) < 0) {
          operator delete(*(void **)a6);
        }
        ++v66;
        a6 += 32;
      }
      while (v66 < v42);
    }
  }
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint8x8_t v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      __n128 result = *v5;
      *(void *)(a3 + 16) = v5[1].n128_u64[0];
      *(__n128 *)a3 = result;
      v5[1].n128_u8[7] = 0;
      v5->n128_u8[0] = 0;
      *(void *)(a3 + 24) = v5[1].n128_u64[1];
      a3 += 32;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 - 32;
    do
    {
      if (*(char *)(v5 + 23) < 0) {
        operator delete(*(void **)v5);
      }
      __n128 result = *(__n128 *)(v4 - 32);
      *(void *)(v5 + 16) = *(void *)(v4 - 16);
      *(__n128 *)uint64_t v5 = result;
      *(unsigned char *)(v4 - 9) = 0;
      *(unsigned char *)(v4 - 32) = 0;
      *(void *)(v5 + 24) = *(void *)(v4 - 8);
      v5 -= 32;
      v4 -= 32;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t MeCab::Param::dump_config(uint64_t result, void *a2)
{
  unint64_t v2 = *(void **)(result + 8);
  uint64_t v3 = (void *)(result + 16);
  if (v2 != (void *)(result + 16))
  {
    uint64_t v5 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      int v6 = *((char *)v2 + 55);
      if (v6 >= 0) {
        uint64_t v7 = (uint64_t)(v2 + 4);
      }
      else {
        uint64_t v7 = v2[4];
      }
      if (v6 >= 0) {
        uint64_t v8 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        uint64_t v8 = v2[5];
      }
      __n128 v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v7, v8);
      char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      int v11 = *((char *)v2 + 79);
      if (v11 >= 0) {
        uint64_t v12 = (uint64_t)(v2 + 7);
      }
      else {
        uint64_t v12 = v2[7];
      }
      if (v11 >= 0) {
        uint64_t v13 = *((unsigned __int8 *)v2 + 79);
      }
      else {
        uint64_t v13 = v2[8];
      }
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
      uint64_t v15 = std::locale::use_facet(&v19, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v19);
      std::ostream::put();
      __n128 result = std::ostream::flush();
      int v16 = (void *)v2[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v2[2];
          BOOL v18 = *v17 == (void)v2;
          unint64_t v2 = v17;
        }
        while (!v18);
      }
      unint64_t v2 = v17;
    }
    while (v17 != v3);
  }
  return result;
}

void sub_2128F9228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL MeCab::Param::load(MeCab::Param *this, const char *a2)
{
  v55[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v53);
  uint64_t v4 = v53[0];
  if ((v54[*(void *)(v53[0] - 24) + 16] & 5) != 0)
  {
    uint64_t v6 = *((void *)this + 16);
    uint64_t v5 = (void *)((char *)this + 128);
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(void *)(v6 - 24)), 0);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    uint64_t v8 = (void *)std::ostream::operator<<();
    __n128 v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ifs", 3);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"no such file or directory: ", 27);
    size_t v13 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a2, v13);
    BOOL v14 = 0;
    goto LABEL_61;
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v15 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v16 = MEMORY[0x263EF8318];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(v4 - 24)));
    uint64_t v17 = std::locale::use_facet((const std::locale *)&v50, v15);
    unsigned __int8 v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v50);
    std::locale v19 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v53, (uint64_t)&__str, v18);
    BOOL v14 = (*(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 32) & 5) != 0;
    if ((*(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 32) & 5) != 0) {
      break;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_51;
      }
      int v20 = *__str.__r_.__value_.__l.__data_;
    }
    else
    {
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        goto LABEL_51;
      }
      int v20 = __str.__r_.__value_.__s.__data_[0];
    }
    if (v20 != 59 && v20 != 35)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (!size
        || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (std::string::size_type v22 = (std::string::size_type)&__str)
          : (std::string::size_type v22 = __str.__r_.__value_.__r.__words[0]),
            (uint64_t v23 = (char *)memchr((void *)v22, 61, size)) == 0 || (v24 = v23, &v23[-v22] == (char *)-1)))
      {
        uint64_t v39 = *((void *)this + 16);
        uint64_t v38 = (void *)((char *)this + 128);
        std::ios_base::clear((std::ios_base *)((char *)v38 + *(void *)(v39 - 24)), 0);
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
        uint64_t v41 = (void *)std::ostream::operator<<();
        unint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)") [", 3);
        uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"pos != std::string::npos", 24);
        unint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"format error: ", 14);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = __str.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_str, v47);
        break;
      }
      unint64_t v25 = (unint64_t)&v23[-v22 + 1];
      do
      {
        std::string::size_type v26 = v25;
        std::string::size_type v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v27 = __str.__r_.__value_.__l.__size_;
        }
        if (v25 >= v27) {
          break;
        }
        std::string::size_type v28 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__str
            : (std::string *)__str.__r_.__value_.__r.__words[0];
        unsigned int v29 = v28->__r_.__value_.__s.__data_[v26];
        int v30 = (v29 & 0x80000000) != 0 ? __maskrune(v29, 0x4000uLL) : *(_DWORD *)(v16 + 4 * v29 + 60) & 0x4000;
        unint64_t v25 = v26 + 1;
      }
      while (v30);
      long long v31 = &v24[~v22];
      while (1)
      {
        char v32 = v31;
        std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if (((unint64_t)v32 & 0x8000000000000000) != 0) {
          break;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v34 = &__str;
        }
        else {
          long long v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        unsigned int v35 = v32[(void)v34];
        if ((v35 & 0x80000000) != 0) {
          int v36 = __maskrune(v35, 0x4000uLL);
        }
        else {
          int v36 = *(_DWORD *)(v16 + 4 * v35 + 60) & 0x4000;
        }
        long long v31 = v32 - 1;
        if (!v36)
        {
          std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          break;
        }
      }
      if ((v33 & 0x80u) != 0) {
        std::string::size_type v33 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string(&v50, &__str, v26, v33 - v26, (std::allocator<char> *)&__p);
      std::string::basic_string(&__p, &__str, 0, (std::string::size_type)(v32 + 1), (std::allocator<char> *)&v52);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      MeCab::Param::set<std::string>((uint64_t)this, (char *)p_p, (uint64_t)&v50, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
    }
LABEL_51:
    uint64_t v4 = v53[0];
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_61:
  v53[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v53 + *(void *)(v53[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v54);
  std::istream::~istream();
  MEMORY[0x216685570](v55);
  return v14;
}

void sub_2128F9774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a28);
  _Unwind_Resume(a1);
}

uint64_t MeCab::Param::open(uint64_t a1, int a2, char **a3, uint64_t a4)
{
  v101[2] = *MEMORY[0x263EF8340];
  if (a2 <= 0)
  {
    if (*(char *)(a1 + 79) < 0)
    {
      *(void *)(a1 + 64) = 7;
      unint64_t v25 = *(char **)(a1 + 56);
    }
    else
    {
      unint64_t v25 = (char *)(a1 + 56);
      *(unsigned char *)(a1 + 79) = 7;
    }
    strcpy(v25, "unknown");
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v100, *a3);
  uint64_t v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)&v100.__first_;
  *(void *)(a1 + 72) = v100.__end_;
  std::string::basic_string[abi:ne180100]<0>(&v98, "MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n");
  uint64_t v6 = std::string::append(&v98, "\nUsage: ", 8uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a1 + 79);
  if (v8 >= 0) {
    __n128 v9 = (const std::string::value_type *)(a1 + 56);
  }
  else {
    __n128 v9 = *(const std::string::value_type **)(a1 + 56);
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    std::string::size_type v10 = *(void *)(a1 + 64);
  }
  int v11 = std::string::append(&v99, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v100.__end_ = (std::__split_buffer<std::string>::pointer)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__first_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  size_t v13 = std::string::append((std::string *)&v100, " [options] files\n", 0x11uLL);
  BOOL v14 = (std::string *)(a1 + 80);
  std::string::size_type v15 = v13->__r_.__value_.__r.__words[0];
  v101[0] = v13->__r_.__value_.__l.__size_;
  *(void *)((char *)v101 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(v14->__r_.__value_.__l.__data_);
  }
  uint64_t v17 = v101[0];
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 9marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = *(void *)((char *)v101 + 7);
  *(unsigned char *)(a1 + 103) = v16;
  if (SHIBYTE(v100.__end_) < 0) {
    operator delete(v100.__first_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v98, "mecab");
  unsigned __int8 v18 = std::string::append(&v98, " of ", 4uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = std::string::append(&v99, "0.996", 5uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v100.__end_ = (std::__split_buffer<std::string>::pointer)v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__first_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back((std::string *)&v100, 10);
  v101[0] = v100.__begin_;
  std::__split_buffer<std::string>::pointer first = v100.__first_;
  *(void *)((char *)v101 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&v100.__begin_ + 7);
  char end_high = HIBYTE(v100.__end_);
  memset(&v100, 0, 24);
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    int v26 = SHIBYTE(v100.__end_);
    uint64_t v27 = v101[0];
    *(void *)(a1 + 104) = first;
    *(void *)(a1 + 112) = v27;
    *(void *)(a1 + 119) = *(void *)((char *)v101 + 7);
    *(unsigned char *)(a1 + 127) = end_high;
    if (v26 < 0) {
      operator delete(v100.__first_);
    }
  }
  else
  {
    uint64_t v24 = v101[0];
    *(void *)(a1 + 104) = first;
    *(void *)(a1 + 112) = v24;
    *(void *)(a1 + 119) = *(void *)((char *)v101 + 7);
    *(unsigned char *)(a1 + 127) = end_high;
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  std::string::size_type v28 = *(const char **)a4;
  if (*(void *)a4)
  {
    size_t v29 = 0;
    int v30 = (const char **)(a4 + 40);
    long long v31 = *(const char **)a4;
    do
    {
      size_t v32 = strlen(v31);
      std::string::size_type v33 = *(v30 - 2);
      if (v33) {
        size_t v34 = v32 + strlen(v33) + 2;
      }
      else {
        size_t v34 = v32 + 1;
      }
      if (v34 > v29) {
        size_t v29 = v34;
      }
      unsigned int v35 = *v30;
      v30 += 5;
      long long v31 = v35;
    }
    while (v35);
    uint64_t v36 = 0;
    uint64_t v37 = (const char **)a4;
    do
    {
      size_t v38 = strlen(v28);
      uint64_t v39 = a4 + 40 * v36;
      unint64_t v42 = *(const char **)(v39 + 24);
      uint64_t v41 = (const char **)(v39 + 24);
      uint64_t v40 = v42;
      if (v42) {
        v38 += strlen(v40) + 1;
      }
      std::string::append(v14, " -", 2uLL);
      std::string::push_back(v14, *(unsigned char *)(a4 + 40 * v36 + 8));
      std::string::append(v14, ", --", 4uLL);
      uint64_t v43 = *v37;
      std::string::size_type v44 = strlen(v43);
      std::string::append(v14, v43, v44);
      if (*v41)
      {
        std::string::push_back(v14, 61);
        std::string::size_type v45 = strlen(*v41);
        std::string::append(v14, *v41, v45);
      }
      while (v38 <= v29)
      {
        std::string::push_back(v14, 32);
        ++v38;
      }
      std::string::size_type v46 = strlen(*(const char **)(a4 + 40 * v36 + 32));
      std::string::append(v14, *(const std::string::value_type **)(a4 + 40 * v36 + 32), v46);
      std::string::push_back(v14, 10);
      ++v36;
      uint64_t v37 = (const char **)(a4 + 40 * v36);
      std::string::size_type v28 = *v37;
    }
    while (*v37);
  }
  std::string::push_back(v14, 10);
  std::string::size_type v47 = *(char **)a4;
  uint64_t v48 = a1;
  if (*(void *)a4)
  {
    int v49 = (char **)(a4 + 40);
    do
    {
      std::string v50 = *(v49 - 3);
      if (v50)
      {
        std::string::basic_string[abi:ne180100]<0>(&v100, v50);
        uint64_t v48 = a1;
        MeCab::Param::set<std::string>(a1, v47, (uint64_t)&v100, 1);
        if (SHIBYTE(v100.__end_) < 0) {
          operator delete(v100.__first_);
        }
      }
      uint64_t v51 = *v49;
      v49 += 5;
      std::string::size_type v47 = v51;
    }
    while (v51);
  }
  uint64_t result = 1;
  if (a2 < 2) {
    return result;
  }
  uint64_t v53 = (std::vector<std::string> *)(v48 + 32);
  uint64_t v54 = (std::allocator<std::string> *)(v48 + 48);
  LODWORD(v5marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 1;
  long long v56 = a3;
  int v94 = (std::allocator<std::string> *)(v48 + 48);
  while (1)
  {
    int v57 = v56[(int)v55];
    if (*v57 != 45)
    {
      std::string::basic_string[abi:ne180100]<0>(&v99, v56[(int)v55]);
      unint64_t v63 = *(void *)(a1 + 40);
      unint64_t v62 = *(void *)(a1 + 48);
      if (v63 >= v62)
      {
        unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (unint64_t)v53->__begin_) >> 3);
        unint64_t v66 = v65 + 1;
        if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (unint64_t)v53->__begin_) >> 3);
        if (2 * v67 > v66) {
          unint64_t v66 = 2 * v67;
        }
        if (v67 >= 0x555555555555555) {
          unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v68 = v66;
        }
        v100.__end_cap_.__value_ = v54;
        if (v68) {
          uint64_t v69 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v54, v68);
        }
        else {
          uint64_t v69 = 0;
        }
        long long v76 = v69 + v65;
        v100.__first_ = v69;
        v100.__begin_ = v76;
        v100.__end_cap_.__value_ = &v69[v68];
        long long v77 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        v76->__r_.__value_.__r.__words[2] = v99.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
        memset(&v99, 0, sizeof(v99));
        v100.__end_ = v76 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v53, &v100);
        uint64_t v78 = *(void *)(a1 + 40);
        std::__split_buffer<std::string>::~__split_buffer(&v100);
        int v79 = SHIBYTE(v99.__r_.__value_.__r.__words[2]);
        *(void *)(a1 + 40) = v78;
        if (v79 < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v64 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        *(void *)(v63 + 16) = *((void *)&v99.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v63 = v64;
        *(void *)(a1 + 40) = v63 + 24;
      }
LABEL_99:
      long long v56 = a3;
      goto LABEL_100;
    }
    int v58 = v57[1];
    if (v57[1]) {
      break;
    }
LABEL_100:
    LODWORD(v5marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v55 + 1;
    if ((int)v55 >= a2) {
      return 1;
    }
  }
  uint64_t v59 = (int)v55;
  if (v58 != 45)
  {
    long long v74 = *(char **)a4;
    if (!*(void *)a4) {
      goto LABEL_106;
    }
    if (*(unsigned __int8 *)(a4 + 8) != v58)
    {
      uint64_t v75 = 0;
      uint64_t v80 = (unsigned __int8 *)(a4 + 48);
      while (1)
      {
        long long v74 = (char *)*((void *)v80 - 1);
        if (!v74) {
          break;
        }
        int v81 = *v80;
        v80 += 40;
        ++v75;
        if (v81 == v58) {
          goto LABEL_85;
        }
      }
LABEL_106:
      size_t v86 = strlen(a3[(int)v55]);
      uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)a3[(int)v55], v86);
      return 0;
    }
    uint64_t v75 = 0;
LABEL_85:
    int v84 = v57[2];
    uint64_t v83 = v57 + 2;
    int v82 = v84;
    uint64_t v54 = v94;
    if (!*(void *)(a4 + 40 * v75 + 24))
    {
      if (v82) {
        goto LABEL_112;
      }
      LODWORD(v100.__first_) = 1;
      MeCab::Param::set<int>(a1, v74, (uint64_t)&v100, 1);
      goto LABEL_99;
    }
    if (v82)
    {
      std::string::basic_string[abi:ne180100]<0>(&v100, v83);
      MeCab::Param::set<std::string>(a1, v74, (uint64_t)&v100, 1);
      goto LABEL_104;
    }
    uint64_t v55 = (int)v55 + 1;
    if (v59 + 1 == a2) {
      goto LABEL_113;
    }
    std::string::basic_string[abi:ne180100]<0>(&v100, a3[v55]);
    MeCab::Param::set<std::string>(a1, v74, (uint64_t)&v100, 1);
    long long v56 = a3;
    if (SHIBYTE(v100.__end_) < 0) {
      operator delete(v100.__first_);
    }
    goto LABEL_100;
  }
  for (size_t i = 0; ; ++i)
  {
    int v61 = v57[i + 2];
    if (!v57[i + 2] || v61 == 61) {
      break;
    }
  }
  if (!i) {
    return 1;
  }
  uint64_t v70 = *(char **)a4;
  if (!*(void *)a4) {
    goto LABEL_106;
  }
  uint64_t v71 = v53;
  uint64_t v72 = (char **)(a4 + 40);
  while (strlen(v70) != i || strncmp(v57 + 2, v70, i))
  {
    uint64_t v73 = *v72;
    v72 += 5;
    uint64_t v70 = v73;
    if (!v73) {
      goto LABEL_106;
    }
  }
  if (!*(v72 - 2))
  {
    uint64_t v54 = v94;
    if (v61 == 61)
    {
LABEL_112:
      size_t v89 = strlen(a3[(int)v55]);
      uint64_t v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)a3[(int)v55], v89);
      return 0;
    }
    uint64_t v53 = v71;
    LODWORD(v100.__first_) = 1;
    MeCab::Param::set<int>(a1, v70, (uint64_t)&v100, 1);
    goto LABEL_99;
  }
  uint64_t v53 = v71;
  if (v61 == 61)
  {
    std::string::basic_string[abi:ne180100]<0>(&v100, &v57[i + 3]);
    uint64_t v54 = v94;
    MeCab::Param::set<std::string>(a1, v70, (uint64_t)&v100, 1);
    goto LABEL_104;
  }
  uint64_t v55 = (int)v55 + 1;
  uint64_t v54 = v94;
  if (v59 + 1 != a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v100, a3[v55]);
    MeCab::Param::set<std::string>(a1, v70, (uint64_t)&v100, 1);
LABEL_104:
    long long v56 = a3;
    if (SHIBYTE(v100.__end_) < 0) {
      operator delete(v100.__first_);
    }
    goto LABEL_100;
  }
LABEL_113:
  size_t v92 = strlen(a3[v59]);
  int v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)a3[v59], v92);
  return 0;
}

void sub_2128FA190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::Param::open()
{
}

void sub_2128FA4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x2166855A0](a11, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Param::help_version(MeCab::Param *this)
{
  if (MeCab::Param::get<BOOL>((uint64_t)this, "help"))
  {
    unint64_t v2 = (char *)this + 80;
    if ((*((char *)this + 103) & 0x80000000) == 0)
    {
LABEL_4:
      size_t v3 = strlen(v2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v2, v3);
      return 0;
    }
LABEL_3:
    unint64_t v2 = *(const char **)v2;
    goto LABEL_4;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)this, "version"))
  {
    unint64_t v2 = (char *)this + 104;
    if ((*((char *)this + 127) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  return 1;
}

void MeCab::ModelImpl::ModelImpl(MeCab::ModelImpl *this)
{
  *(void *)this = &unk_26C3C3CD8;
  operator new();
}

void sub_2128FA640(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10B3C4016B90007);
  _Unwind_Resume(a1);
}

void MeCab::ModelImpl::~ModelImpl(MeCab::ModelImpl *this)
{
  *(void *)this = &unk_26C3C3CD8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_26C3C3478;
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t vars8;

  MeCab::ModelImpl::~ModelImpl(this);

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::ModelImpl::open(MeCab::Viterbi **this, int a2, char **a3)
{
  MeCab::Param::Param((MeCab::Param *)v16);
    && MeCab::load_dictionary_resource((MeCab *)v16, v6))
  {
    uint64_t v7 = MeCab::ModelImpl::open(this, (const MeCab::Param *)v16);
  }
  else
  {
    int v8 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v17);
    std::string::basic_string[abi:ne180100]<0>(&v14, v8);
    int v9 = v15;
    std::string::size_type v10 = v14;
    strncpy(v11, v12, 0xFFuLL)[255] = 0;
    if (v9 < 0) {
      operator delete(v10);
    }
    uint64_t v7 = 0;
  }
  MeCab::Param::~Param(v16);
  return v7;
}

void sub_2128FA84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MeCab::Param::~Param((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MeCab::ModelImpl::open(MeCab::Viterbi **this, const MeCab::Param *a2)
{
  if (MeCab::Writer::open(this[3], a2)) {
    MeCab::Viterbi::open(this[1], a2);
  }
  uint64_t v4 = (char *)MeCab::whatlog::str((MeCab::Viterbi *)((char *)this[1] + 48));
  std::string::basic_string[abi:ne180100]<0>(&v13, v4);
  std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::append(&v13, " ", 1uLL);
  }
  uint64_t v6 = MeCab::whatlog::str((MeCab::Viterbi *)((char *)this[3] + 88));
  std::string::size_type v7 = strlen((const char *)v6);
  std::string::append(&v13, (const std::string::value_type *)v6, v7);
  int v8 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  int v9 = (void *)v13.__r_.__value_.__r.__words[0];
  strncpy(v10, v11, 0xFFuLL)[255] = 0;
  if (v8 < 0) {
    operator delete(v9);
  }
  return 0;
}

void sub_2128FA994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::ModelImpl::open(MeCab::ModelImpl *this, const char *a2)
{
  MeCab::Param::Param((MeCab::Param *)v2);
  MeCab::Param::open();
}

void sub_2128FAA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MeCab::Param::~Param((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MeCab::ModelImpl::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3 || !*(void *)(a1 + 24))
  {
    std::string::size_type v10 = "current model is not available";
LABEL_11:
    uint64_t v8 = 0;
    strncpy(v9, v10, 0xFFuLL)[255] = 0;
    goto LABEL_12;
  }
  if (!a2 || !*(void *)(a2 + 8) || !*(void *)(a2 + 24))
  {
    goto LABEL_11;
  }
  uint64_t v5 = 0;
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 56), 1uLL);
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v5, 1uLL);
  if (v5)
  {
    do
    {
      sched_yield();
      uint64_t v6 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 48), (unint64_t *)&v6, 1uLL);
    }
    while (v6);
  }
  uint64_t v7 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v2 + 32);
  *(void *)(a1 + 40) = *(void *)(v2 + 40);
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t v8 = 1;
  uint64_t v2 = a2;
LABEL_12:
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  return v8;
}

void sub_2128FAC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 56))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *MeCab::scoped_ptr<MeCab::Model>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3EC8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  return a1;
}

uint64_t MeCab::ModelImpl::createTagger(MeCab::ModelImpl *this)
{
  if (*((void *)this + 1) && *((void *)this + 3)) {
    operator new();
  }
  strncpy(v1, "Model is not available", 0xFFuLL)[255] = 0;
  return 0;
}

uint64_t MeCab::ModelImpl::createLattice(MeCab::ModelImpl *this)
{
  if (*((void *)this + 1) && *((void *)this + 3)) {
    operator new();
  }
  strncpy(v1, "Model is not available", 0xFFuLL)[255] = 0;
  return 0;
}

void sub_2128FAED4(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10F3C4065D1497CLL);
  _Unwind_Resume(a1);
}

void *MeCab::scoped_ptr<MeCab::ModelImpl>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3EF8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  return a1;
}

void MeCab::TaggerImpl::~TaggerImpl(void **this)
{
  *this = &unk_26C3C32E8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  this[4] = &unk_26C3C3CA8;
  uint64_t v2 = this[5];
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 312))(v2);
  }
  this[2] = &unk_26C3C3EF8;
  uint64_t v3 = this[3];
  if (v3) {
    (*(void (**)(void *))(*(void *)v3 + 56))(v3);
  }
}

{
  uint64_t vars8;

  MeCab::TaggerImpl::~TaggerImpl(this);

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::TaggerImpl::what(MeCab::TaggerImpl *this)
{
  uint64_t result = (uint64_t)this + 64;
  if (*((char *)this + 87) < 0) {
    return *(void *)result;
  }
  return result;
}

void MeCab::TaggerImpl::open(MeCab::TaggerImpl *this, int a2, char **a3)
{
}

void sub_2128FB190(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10A1C406EC38B7ELL);
  _Unwind_Resume(a1);
}

void MeCab::TaggerImpl::open(MeCab::TaggerImpl *this, const char *a2)
{
}

void sub_2128FB290(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10A1C406EC38B7ELL);
  _Unwind_Resume(a1);
}

uint64_t MeCab::TaggerImpl::set_request_type(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t MeCab::TaggerImpl::request_type(MeCab::TaggerImpl *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t MeCab::TaggerImpl::set_partial(uint64_t this, int a2)
{
  if (a2) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(this + 48) = *(_DWORD *)(this + 48) & 0xFFFFFFFB | v2;
  return this;
}

uint64_t MeCab::TaggerImpl::partial(MeCab::TaggerImpl *this)
{
  return (*((unsigned __int8 *)this + 48) >> 2) & 1;
}

double MeCab::TaggerImpl::set_theta(MeCab::TaggerImpl *this, float a2)
{
  double result = a2;
  *((double *)this + 7) = result;
  return result;
}

float MeCab::TaggerImpl::theta(MeCab::TaggerImpl *this)
{
  return *((double *)this + 7);
}

uint64_t MeCab::TaggerImpl::set_lattice_level(uint64_t this, unsigned int a2)
{
  if (a2 <= 2) {
    *(_DWORD *)(this + 48) |= dword_2129125E4[a2];
  }
  return this;
}

uint64_t MeCab::TaggerImpl::lattice_level(MeCab::TaggerImpl *this)
{
  unsigned int v1 = *((_DWORD *)this + 12);
  if ((v1 & 8) != 0) {
    return 2;
  }
  else {
    return (v1 >> 1) & 1;
  }
}

uint64_t MeCab::TaggerImpl::set_all_morphs(uint64_t this, int a2)
{
  if (a2) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(this + 48) = *(_DWORD *)(this + 48) & 0xFFFFFFDF | v2;
  return this;
}

uint64_t MeCab::TaggerImpl::all_morphs(MeCab::TaggerImpl *this)
{
  return (*((unsigned __int8 *)this + 48) >> 5) & 1;
}

uint64_t MeCab::TaggerImpl::parse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(uint64_t *)(v4 + 56) >= 1)
  {
    do
      sched_yield();
    while (*(uint64_t *)(v4 + 56) > 0);
  }
  atomic_fetch_add((atomic_ullong *volatile)(v4 + 48), 2uLL);
  while ((*(unsigned char *)(v4 + 48) & 1) != 0)
    sched_yield();
  uint64_t result = MeCab::Viterbi::analyze(*(void *)(*(void *)(a1 + 8) + 8), a2);
  atomic_fetch_add((atomic_ullong *volatile)(v4 + 48), 0xFFFFFFFFFFFFFFFELL);
  return result;
}

void sub_2128FB3F4(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_ullong *volatile)(v1 + 48), 0xFFFFFFFFFFFFFFFELL);
  _Unwind_Resume(a1);
}

uint64_t MeCab::TaggerImpl::parse(MeCab::TaggerImpl *this, const char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(MeCab::TaggerImpl *, const char *, size_t))(*(void *)this + 72);

  return v5(this, __s, v4);
}

uint64_t MeCab::TaggerImpl::parse(MeCab::TaggerImpl *this, const char *a2, uint64_t a3)
{
  uint64_t v6 = MeCab::TaggerImpl::mutable_lattice(this);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v6 + 80))(v6, a2, a3);
  MeCab::TaggerImpl::initRequestType(this);
  int v7 = (**(uint64_t (***)(MeCab::TaggerImpl *, uint64_t))this)(this, v6);
  uint64_t v8 = *(void *)v6;
  if (v7)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 192))(v6);
    if (result) {
      return result;
    }
    uint64_t v8 = *(void *)v6;
  }
  std::string::size_type v10 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(v8 + 288))(v6);
  std::string::__assign_external((std::string *)((char *)this + 64), v10);
  return 0;
}

uint64_t MeCab::TaggerImpl::mutable_lattice(MeCab::TaggerImpl *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1)
  {
    uint64_t v1 = (*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
    uint64_t v3 = *((void *)this + 5);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 312))(v3);
    }
    *((void *)this + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v1;
  }
  return v1;
}

uint64_t MeCab::TaggerImpl::initRequestType(MeCab::TaggerImpl *this)
{
  uint64_t v2 = MeCab::TaggerImpl::mutable_lattice(this);
  (*(void (**)(uint64_t, void))(*(void *)v2 + 152))(v2, *((unsigned int *)this + 12));
  uint64_t v3 = MeCab::TaggerImpl::mutable_lattice(this);
  v4.n128_u64[0] = *((void *)this + 7);
  v4.n128_f32[0] = v4.n128_f64[0];
  uint64_t v5 = *(uint64_t (**)(__n128))(*(void *)v3 + 112);

  return v5(v4);
}

uint64_t MeCab::TaggerImpl::parse(MeCab::TaggerImpl *this, const char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v10 = MeCab::TaggerImpl::mutable_lattice(this);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v10 + 80))(v10, a2, a3);
  MeCab::TaggerImpl::initRequestType(this);
  int v11 = (**(uint64_t (***)(MeCab::TaggerImpl *, uint64_t))this)(this, v10);
  uint64_t v12 = *(void *)v10;
  if (v11)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)v10 + 216))(v10, a4, a5);
    if (result) {
      return result;
    }
    uint64_t v12 = *(void *)v10;
  }
  BOOL v14 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(v12 + 288))(v10);
  std::string::__assign_external((std::string *)((char *)this + 64), v14);
  return 0;
}

uint64_t MeCab::TaggerImpl::parseToNode(MeCab::TaggerImpl *this, const char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(MeCab::TaggerImpl *, const char *, size_t))(*(void *)this + 80);

  return v5(this, __s, v4);
}

uint64_t MeCab::TaggerImpl::parseToNode(MeCab::TaggerImpl *this, const char *a2, uint64_t a3)
{
  uint64_t v6 = MeCab::TaggerImpl::mutable_lattice(this);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v6 + 80))(v6, a2, a3);
  MeCab::TaggerImpl::initRequestType(this);
  char v7 = (**(uint64_t (***)(MeCab::TaggerImpl *, uint64_t))this)(this, v6);
  uint64_t v8 = *(void *)v6;
  if (v7)
  {
    int v9 = *(uint64_t (**)(uint64_t))(v8 + 16);
    return v9(v6);
  }
  else
  {
    int v11 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(v8 + 288))(v6);
    std::string::__assign_external((std::string *)((char *)this + 64), v11);
    return 0;
  }
}

uint64_t MeCab::TaggerImpl::parseNBestInit(MeCab::TaggerImpl *this, const char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(MeCab::TaggerImpl *, const char *, size_t))(*(void *)this + 96);

  return v5(this, __s, v4);
}

void MeCab::TaggerImpl::getLastnameLength(MeCab::TaggerImpl *this, const char *a2)
{
}

unint64_t MeCab::TaggerImpl::getFeature(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4)
{
  return MeCab::Tokenizer<mecab_node_t,mecab_path_t>::getFeature(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 16), a2, a3, a4);
}

uint64_t MeCab::TaggerImpl::parseNBestInit(MeCab::TaggerImpl *this, const char *a2, uint64_t a3)
{
  uint64_t v6 = MeCab::TaggerImpl::mutable_lattice(this);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v6 + 80))(v6, a2, a3);
  MeCab::TaggerImpl::initRequestType(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 160))(v6, 2);
  uint64_t v7 = (**(uint64_t (***)(MeCab::TaggerImpl *, uint64_t))this)(this, v6);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 288))(v6);
    std::string::__assign_external((std::string *)((char *)this + 64), v8);
  }
  return v7;
}

uint64_t MeCab::TaggerImpl::nextNode(MeCab::TaggerImpl *this)
{
  uint64_t v1 = MeCab::TaggerImpl::mutable_lattice(this);
  char v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v1);
  uint64_t v3 = *(void *)v1;
  if (v2)
  {
    size_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
    return v4(v1);
  }
  else
  {
    (*(void (**)(uint64_t, const char *))(v3 + 296))(v1, "no more results");
    return 0;
  }
}

uint64_t MeCab::TaggerImpl::next(MeCab::TaggerImpl *this)
{
  uint64_t v2 = MeCab::TaggerImpl::mutable_lattice(this);
  char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 128))(v2);
  uint64_t v4 = *(void *)v2;
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v4 + 192))(v2);
    if (result) {
      return result;
    }
    uint64_t v6 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 288))(v2);
    std::string::__assign_external((std::string *)((char *)this + 64), v6);
  }
  else
  {
    (*(void (**)(uint64_t, const char *))(v4 + 296))(v2, "no more results");
  }
  return 0;
}

uint64_t MeCab::TaggerImpl::next(MeCab::TaggerImpl *this, char *a2, uint64_t a3)
{
  uint64_t v6 = MeCab::TaggerImpl::mutable_lattice(this);
  char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 128))(v6);
  uint64_t v8 = *(void *)v6;
  if (v7)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 216))(v6, a2, a3);
    if (result) {
      return result;
    }
    uint64_t v10 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 288))(v6);
    std::string::__assign_external((std::string *)((char *)this + 64), v10);
  }
  else
  {
    (*(void (**)(uint64_t, const char *))(v8 + 296))(v6, "no more results");
  }
  return 0;
}

uint64_t MeCab::TaggerImpl::parseNBest(MeCab::TaggerImpl *this, uint64_t a2, const char *__s)
{
  size_t v6 = strlen(__s);
  char v7 = *(uint64_t (**)(MeCab::TaggerImpl *, uint64_t, const char *, size_t))(*(void *)this + 88);

  return v7(this, a2, __s, v6);
}

uint64_t MeCab::TaggerImpl::parseNBest(MeCab::TaggerImpl *this, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = MeCab::TaggerImpl::mutable_lattice(this);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v8 + 80))(v8, a3, a4);
  MeCab::TaggerImpl::initRequestType(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 160))(v8, 2);
  int v9 = (**(uint64_t (***)(MeCab::TaggerImpl *, uint64_t))this)(this, v8);
  uint64_t v10 = *(void *)v8;
  if (v9)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 208))(v8, a2);
    if (result) {
      return result;
    }
    uint64_t v10 = *(void *)v8;
  }
  uint64_t v12 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(v10 + 288))(v8);
  std::string::__assign_external((std::string *)((char *)this + 64), v12);
  return 0;
}

uint64_t MeCab::TaggerImpl::parseNBest(MeCab::TaggerImpl *this, uint64_t a2, const char *a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v12 = MeCab::TaggerImpl::mutable_lattice(this);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v12 + 80))(v12, a3, a4);
  MeCab::TaggerImpl::initRequestType(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 160))(v12, 2);
  int v13 = (**(uint64_t (***)(MeCab::TaggerImpl *, uint64_t))this)(this, v12);
  uint64_t v14 = *(void *)v12;
  if (v13)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v12 + 232))(v12, a2, a5, a6);
    if (result) {
      return result;
    }
    uint64_t v14 = *(void *)v12;
  }
  char v16 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(v14 + 288))(v12);
  std::string::__assign_external((std::string *)((char *)this + 64), v16);
  return 0;
}

uint64_t MeCab::TaggerImpl::formatNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MeCab::TaggerImpl::mutable_lattice((MeCab::TaggerImpl *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 200))(v4, a2);
  if (!v5)
  {
    uint64_t v6 = MeCab::TaggerImpl::mutable_lattice((MeCab::TaggerImpl *)a1);
    char v7 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 288))(v6);
    std::string::__assign_external((std::string *)(a1 + 64), v7);
  }
  return v5;
}

uint64_t MeCab::TaggerImpl::formatNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = MeCab::TaggerImpl::mutable_lattice((MeCab::TaggerImpl *)a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 224))(v8, a2, a3, a4);
  if (!v9)
  {
    uint64_t v10 = MeCab::TaggerImpl::mutable_lattice((MeCab::TaggerImpl *)a1);
    int v11 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 288))(v10);
    std::string::__assign_external((std::string *)(a1 + 64), v11);
  }
  return v9;
}

uint64_t MeCab::TaggerImpl::dictionary_info(MeCab::TaggerImpl *this)
{
  return (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
}

void MeCab::LatticeImpl::LatticeImpl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C3C3D28;
  *(_OWORD *)(a1 + 24) = xmmword_2129123B0;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = a2;
  *(void *)(a1 + 176) = &unk_26C3C33F8;
  *(void *)(a1 + 184) = 0;
  operator new();
}

void sub_2128FC598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, void **a12)
{
  std::string::size_type v22 = (void *)v13[10];
  if (v22)
  {
    v13[11] = v22;
    operator delete(v22);
  }
  void *v15 = v21;
  if (*v16) {
    (*(void (**)(void))(*(void *)*v16 + 8))(*v16);
  }
  v13[6] = v20;
  uint64_t v23 = v13[7];
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  v13[4] = v19;
  uint64_t v24 = v13[5];
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  v13[2] = v18;
  uint64_t v25 = v13[3];
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  MEMORY[0x2166855D0](v13, 0x10B1C40567112E6);
  *(void *)(v12 + 176) = a11;
  uint64_t v26 = *(void *)(v12 + 184);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(void **)(v12 + 144);
  if (v27)
  {
    *(void *)(v12 + 152) = v27;
    operator delete(v27);
  }
  std::string::size_type v28 = *(void **)(v12 + 120);
  if (v28)
  {
    *(void *)(v12 + 128) = v28;
    operator delete(v28);
  }
  size_t v29 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 104) = v29;
    operator delete(v29);
  }
  int v30 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 80) = v30;
    operator delete(v30);
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*v17);
  }
  _Unwind_Resume(a1);
}

void std::vector<mecab_node_t *>::reserve(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  if (!((*(void *)(a1 + 16) - *(void *)a1) >> 16))
  {
    char v3 = *(unsigned char **)(a1 + 8);
    uint64_t v4 = (char *)operator new(0x10000uLL);
    uint64_t v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v6 = v5;
    if (v3 != v1)
    {
      uint64_t v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v7 = *((void *)v3 - 1);
        v3 -= 8;
        *((void *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4 + 0x10000;
    if (v1)
    {
      operator delete(v1);
    }
  }
}

void *MeCab::scoped_ptr<MeCab::Allocator<mecab_node_t,mecab_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3F88;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MeCab::LatticeImpl::~LatticeImpl(MeCab::LatticeImpl *this)
{
  *(void *)this = &unk_26C3C3D28;
  *((void *)this + 24) = &unk_26C3C3F88;
  uint64_t v2 = *((void *)this + 25);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 22) = &unk_26C3C33F8;
  uint64_t v3 = *((void *)this + 23);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
}

{
  uint64_t vars8;

  MeCab::LatticeImpl::~LatticeImpl(this);

  JUMPOUT(0x2166855D0);
}

double MeCab::LatticeImpl::clear(MeCab::LatticeImpl *this)
{
  uint64_t v1 = (void *)*((void *)this + 25);
  v1[1] = 0;
  uint64_t v2 = v1[3];
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  uint64_t v3 = v1[5];
  if (v3)
  {
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = 0;
  }
  uint64_t v4 = v1[7];
  if (v4)
  {
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0;
  }
  uint64_t v5 = *((void *)this + 23);
  if (v5) {
    *(void *)(v5 + 8) = 0;
  }
  *((void *)this + 13) = *((void *)this + 12);
  *((void *)this + 10) = *((void *)this + 9);
  *((void *)this + 16) = *((void *)this + 15);
  *((void *)this + 19) = *((void *)this + 18);
  double result = 0.75;
  *(_OWORD *)((char *)this + 24) = xmmword_2129123B0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  return result;
}

uint64_t MeCab::LatticeImpl::set_sentence(MeCab::LatticeImpl *this, const char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(MeCab::LatticeImpl *, const char *, size_t))(*(void *)this + 80);

  return v5(this, __s, v4);
}

void MeCab::LatticeImpl::set_sentence(MeCab::LatticeImpl *this, char *a2, uint64_t a3)
{
  (**(void (***)(MeCab::LatticeImpl *))this)(this);
  uint64_t v6 = a3 + 4;
  std::vector<mecab_learner_node_t *>::resize((void *)this + 9, a3 + 4);
  std::vector<mecab_learner_node_t *>::resize((void *)this + 12, a3 + 4);
  if (((*(uint64_t (**)(MeCab::LatticeImpl *, uint64_t))(*(void *)this + 144))(this, 64) & 1) != 0
    || (*(unsigned int (**)(MeCab::LatticeImpl *, uint64_t))(*(void *)this + 144))(this, 4))
  {
    uint64_t v7 = (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 176))(this);
    uint64_t v8 = (char *)MeCab::Allocator<mecab_node_t,mecab_path_t>::alloc(v7, a3 + 1);
    a2 = strncpy(v8, a2, a3 + 1);
  }
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  bzero(*((void **)this + 9), 8 * v6);
  uint64_t v9 = (void *)*((void *)this + 12);

  bzero(v9, 8 * v6);
}

BOOL MeCab::LatticeImpl::next(MeCab::LatticeImpl *this)
{
  char v2 = (*(uint64_t (**)(MeCab::LatticeImpl *, uint64_t))(*(void *)this + 144))(this, 2);
  uint64_t v3 = *(void *)this;
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(MeCab::LatticeImpl *))(v3 + 176))(this);
    uint64_t v5 = (MeCab::NBestGenerator *)MeCab::Allocator<mecab_node_t,mecab_path_t>::nbest_generator(v4);
    BOOL result = MeCab::NBestGenerator::next(v5);
    if (result)
    {
      MeCab::Viterbi::buildAllLattice((uint64_t)this);
      return 1;
    }
  }
  else
  {
    (*(void (**)(MeCab::LatticeImpl *, const char *))(v3 + 296))(this, "MECAB_NBEST request type is not set");
    return 0;
  }
  return result;
}

uint64_t MeCab::Allocator<mecab_node_t,mecab_path_t>::nbest_generator(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    operator new();
  }
  return *(void *)(a1 + 72);
}

void MeCab::LatticeImpl::set_result(MeCab::LatticeImpl *this, const char *a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 176))(this);
  size_t v5 = strlen(a2) + 1;
  uint64_t v6 = (std::string *)MeCab::Allocator<mecab_node_t,mecab_path_t>::alloc(v4, v5);
  strncpy((char *)v6, a2, v5);
  uint64_t v88 = 0;
  size_t v89 = 0;
  uint64_t v90 = 0;
  size_t v7 = strlen(a2);
  __v.__first_ = v6;
  size_t v8 = strlen((const char *)v6);
  if (v7)
  {
    size_t v9 = 0;
    uint64_t v10 = (std::string *)((char *)v6 + v8);
    while (1)
    {
      int v11 = v10;
      if (v6 != v10)
      {
        while (v6->__r_.__value_.__s.__data_[0] != 10)
        {
          uint64_t v6 = (std::string *)((char *)v6 + 1);
          if (v6 == v10)
          {
            int v11 = v10;
            goto LABEL_8;
          }
        }
        int v11 = v6;
      }
LABEL_8:
      v11->__r_.__value_.__s.__data_[0] = 0;
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
      std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v87, &__v);
      ++v9;
      if (v11 == v10) {
        break;
      }
      uint64_t v6 = (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + 1);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)((char *)&v11->__r_.__value_.__l.__data_ + 1);
      if (v9 == v7)
      {
        size_t v9 = v7;
        break;
      }
    }
    uint64_t v12 = v88;
    int v13 = v89;
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = 0;
    size_t v9 = 0;
  }
  if (v9 != (v13 - (unsigned char *)v12) >> 3)
  {
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
    char v15 = (void *)std::ostream::operator<<();
    char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"lsize == lines.size()", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)&__v);
  }
  memset(&v87, 0, sizeof(v87));
  memset(&v86, 0, sizeof(v86));
  memset(&v85, 0, sizeof(v85));
  if (v13 != (unsigned char *)v12)
  {
    unint64_t v18 = 0;
    while (2)
    {
      uint64_t v19 = (const char *)v12[v18];
      if (strcmp("EOS", v19))
      {
        size_t v92 = 0;
        int v93 = 0;
        size_t v20 = strlen(v19);
        uint64_t v21 = 0;
        std::string::size_type v22 = &v19[v20];
        uint64_t v23 = (const char **)&v92;
        while (v19 != v22)
        {
          uint64_t v24 = v19;
          while (*v24 != 9)
          {
            if (++v24 == v22) {
              goto LABEL_27;
            }
          }
          *uint64_t v24 = 0;
          *v23++ = v19;
          ++v21;
          uint64_t v19 = v24 + 1;
          if (v21 == 2) {
            goto LABEL_28;
          }
        }
        uint64_t v19 = v22;
LABEL_27:
        const char *v22 = 0;
        *uint64_t v23 = v19;
        if (v21 != 1) {
          break;
        }
LABEL_28:
        uint64_t v25 = v92;
        std::string::size_type v26 = strlen(v92);
        std::string::append(&v87, v92, v26);
        std::string::basic_string[abi:ne180100]<0>(__p, v25);
        std::vector<std::string>::pointer end = v86.__end_;
        if (v86.__end_ >= v86.__end_cap_.__value_)
        {
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3);
          unint64_t v30 = v29 + 1;
          if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v86.__end_cap_.__value_ - (char *)v86.__begin_) >> 3) > v30) {
            unint64_t v30 = 0x5555555555555556 * (((char *)v86.__end_cap_.__value_ - (char *)v86.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_cap_.__value_ - (char *)v86.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v31 = v30;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v86.__end_cap_;
          if (v31) {
            size_t v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v86.__end_cap_, v31);
          }
          else {
            size_t v32 = 0;
          }
          std::string::size_type v33 = v32 + v29;
          __v.__first_ = v32;
          __v.__begin_ = v33;
          __v.__end_cap_.__value_ = &v32[v31];
          long long v34 = *(_OWORD *)__p;
          v33->__r_.__value_.__r.__words[2] = v84;
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          __p[1] = 0;
          std::string::size_type v84 = 0;
          __p[0] = 0;
          __v.__end_ = v33 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v86, &__v);
          unsigned int v35 = v86.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v86.__end_ = v35;
          if (SHIBYTE(v84) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v28 = *(_OWORD *)__p;
          v86.__end_->__r_.__value_.__r.__words[2] = v84;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v28;
          v86.__end_ = end + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v93);
        std::vector<std::string>::pointer v36 = v85.__end_;
        if (v85.__end_ >= v85.__end_cap_.__value_)
        {
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_ - (char *)v85.__begin_) >> 3);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) > v39) {
            unint64_t v39 = 0x5555555555555556 * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v85.__end_cap_.__value_ - (char *)v85.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v39;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v85.__end_cap_;
          if (v40) {
            uint64_t v41 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v85.__end_cap_, v40);
          }
          else {
            uint64_t v41 = 0;
          }
          unint64_t v42 = v41 + v38;
          __v.__first_ = v41;
          __v.__begin_ = v42;
          __v.__end_cap_.__value_ = &v41[v40];
          long long v43 = *(_OWORD *)__p;
          v42->__r_.__value_.__r.__words[2] = v84;
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
          __p[1] = 0;
          std::string::size_type v84 = 0;
          __p[0] = 0;
          __v.__end_ = v42 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v85, &__v);
          std::string::size_type v44 = v85.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v85.__end_ = v44;
          if (SHIBYTE(v84) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v37 = *(_OWORD *)__p;
          v85.__end_->__r_.__value_.__r.__words[2] = v84;
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
          v85.__end_ = v36 + 1;
        }
        ++v18;
        uint64_t v12 = v88;
        if (v18 < (v89 - (unsigned char *)v88) >> 3) {
          continue;
        }
      }
      break;
    }
  }
  if ((char *)v85.__end_ - (char *)v85.__begin_ != (char *)v86.__end_ - (char *)v86.__begin_)
  {
    std::string::size_type v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"(", 1);
    std::string::size_type v46 = (void *)std::ostream::operator<<();
    std::string::size_type v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)") [", 3);
    uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"features.size() == surfaces.size()", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)&__v);
  }
  uint64_t v49 = (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 176))(this);
  std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
  int v51 = SHIBYTE(v87.__r_.__value_.__r.__words[2]);
  std::string::size_type v52 = v87.__r_.__value_.__r.__words[0];
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v87.__r_.__value_.__l.__size_;
  }
  size_t v53 = size + 1;
  uint64_t v54 = (char *)MeCab::Allocator<mecab_node_t,mecab_path_t>::alloc(v49, size + 1);
  uint64_t v55 = v54;
  if (v51 >= 0) {
    long long v56 = &v87;
  }
  else {
    long long v56 = (std::string *)v52;
  }
  strncpy(v54, (const char *)v56, v53);
  (*(void (**)(MeCab::LatticeImpl *, char *))(*(void *)this + 72))(this, v55);
  uint64_t v57 = (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 176))(this);
  double v58 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v57 + 24));
  uint64_t v60 = v59;
  *(void *)(v59 + 64) = "BOS/EOS";
  *(void *)(v59 + 72) = "BOS/EOS";
  *(unsigned char *)(v59 + 91) = 2;
  uint64_t v61 = (*(uint64_t (**)(MeCab::LatticeImpl *, double))(*(void *)this + 176))(this, v58);
  v62.n128_f64[0] = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v61 + 24));
  long long v64 = (void *)v63;
  *(void *)(v63 + 64) = "BOS/EOS";
  *(void *)(v63 + 72) = "BOS/EOS";
  *(unsigned char *)(v63 + 91) = 3;
  *(void *)(v60 + 64) = *((void *)this + 1);
  **((void **)this + 9) = v60;
  if (v86.__end_ == v86.__begin_)
  {
    uint64_t v71 = v60;
  }
  else
  {
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    uint64_t v67 = 0;
    do
    {
      uint64_t v68 = (*(uint64_t (**)(MeCab::LatticeImpl *, __n128))(*(void *)this + 176))(this, v62);
      v70.n128_f64[0] = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v68 + 24));
      uint64_t v71 = v69;
      *(void *)uint64_t v69 = v60;
      *(void *)(v60 + 8) = v69;
      *(void *)(v69 + 64) = *((void *)this + 1) + v67;
      std::vector<std::string>::pointer begin = v86.__begin_;
      uint64_t v73 = &v86.__begin_[v65];
      if (SHIBYTE(v86.__begin_[v65].__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v74 = v73->__r_.__value_.__l.__size_;
      }
      else {
        LOWORD(v74) = HIBYTE(v86.__begin_[v65].__r_.__value_.__r.__words[2]);
      }
      *(_WORD *)(v69 + 80) = v74;
      int v75 = SHIBYTE(v73->__r_.__value_.__r.__words[2]);
      if (v75 < 0) {
        std::string::size_type v76 = begin[v65].__r_.__value_.__l.__size_;
      }
      else {
        LOWORD(v76) = v75;
      }
      *(_WORD *)(v69 + 82) = v76;
      *(unsigned char *)(v69 + 91) = 0;
      *(_WORD *)(v69 + 92) = 0;
      *(void *)(v69 + 96) = 0;
      uint64_t v77 = (*(uint64_t (**)(MeCab::LatticeImpl *, __n128))(*(void *)this + 176))(this, v70);
      uint64_t v78 = &v85.__begin_[v65];
      if (SHIBYTE(v85.__begin_[v65].__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v80 = (std::string *)v78->__r_.__value_.__r.__words[0];
        std::string::size_type v79 = v78->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type v79 = HIBYTE(v85.__begin_[v65].__r_.__value_.__r.__words[2]);
        uint64_t v80 = &v85.__begin_[v65];
      }
      size_t v81 = v79 + 1;
      int v82 = (char *)MeCab::Allocator<mecab_node_t,mecab_path_t>::alloc(v77, v79 + 1);
      *(void *)(v71 + 72) = strncpy(v82, (const char *)v80, v81);
      *(void *)(*((void *)this + 12) + 8 * v67) = v71;
      v67 += *(unsigned __int16 *)(v71 + 80);
      *(void *)(*((void *)this + 9) + 8 * v67) = v71;
      ++v66;
      ++v65;
      uint64_t v60 = v71;
    }
    while (v66 < 0xAAAAAAAAAAAAAAABLL * (((char *)v86.__end_ - (char *)v86.__begin_) >> 3));
  }
  *(void *)(v71 + 8) = v64;
  *long long v64 = v71;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (v88)
  {
    size_t v89 = v88;
    operator delete(v88);
  }
}

void sub_2128FD588(_Unwind_Exception *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, int **a9, char a10, uint64_t a11, int *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,void *__pa,std::__split_buffer<std::string> *a22,int a23,__int16 a24,char a25,char a26,void *a27,void *a28)
{
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a12 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a26 < 0) {
    operator delete(__pa);
  }
  if (a27)
  {
    a28 = a27;
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::push_back[abi:ne180100](std::vector<std::string> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  size_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v13) {
      uint64_t v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    char v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    long long v16 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    std::vector<std::string>::pointer end = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    std::vector<std::string>::pointer end = (std::string *)(v7 + 24);
    a1->__end_ = (std::vector<std::string>::pointer)(v7 + 24);
  }
  a1->__end_ = end;
}

void sub_2128FD774(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t MeCab::LatticeImpl::toString(MeCab::LatticeImpl *this)
{
  char v2 = (MeCab::StringBuffer *)MeCab::LatticeImpl::stream(this);

  return MeCab::LatticeImpl::toStringInternal(this, v2);
}

uint64_t MeCab::LatticeImpl::toStringInternal(MeCab::LatticeImpl *this, MeCab::StringBuffer *a2)
{
  *((void *)a2 + 1) = 0;
  uint64_t v4 = *((void *)this + 21);
  if (v4)
  {
    if ((MeCab::Writer::write(v4, (uint64_t)this, (uint64_t)a2) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    MeCab::writeLattice((uint64_t)this, a2);
  }
  if (MeCab::StringBuffer::reserve(a2, 1)) {
    *(unsigned char *)(*((void *)a2 + 3) + (*((void *)a2 + 1))++) = 0;
  }
  if (*((unsigned char *)a2 + 33) || (uint64_t result = *((void *)a2 + 3)) == 0)
  {
    (*(void (**)(MeCab::LatticeImpl *, const char *))(*(void *)this + 296))(this, "output buffer overflow");
    return 0;
  }
  return result;
}

uint64_t MeCab::LatticeImpl::stream(MeCab::LatticeImpl *this)
{
  if (!*((void *)this + 23)) {
    operator new();
  }
  return *((void *)this + 23);
}

uint64_t MeCab::LatticeImpl::toString(MeCab::LatticeImpl *this, char *a2, uint64_t a3)
{
  v5[0] = &unk_26C3C35E0;
  v5[1] = 0;
  v5[2] = a3;
  v5[3] = a2;
  __int16 v6 = 0;
  uint64_t v3 = MeCab::LatticeImpl::toStringInternal(this, (MeCab::StringBuffer *)v5);
  MeCab::StringBuffer::~StringBuffer((MeCab::StringBuffer *)v5);
  return v3;
}

void sub_2128FD98C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MeCab::StringBuffer::~StringBuffer((MeCab::StringBuffer *)va);
  _Unwind_Resume(a1);
}

MeCab::StringBuffer *MeCab::writeLattice(uint64_t a1, MeCab::StringBuffer *a2)
{
  uint64_t v3 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) + 8);
  uint64_t v4 = (uint64_t *)(v3 + 8);
  if (*(void *)(v3 + 8))
  {
    do
    {
      size_t v5 = *(const void **)(v3 + 64);
      size_t v6 = *(unsigned __int16 *)(v3 + 80);
      if (MeCab::StringBuffer::reserve(a2, v6))
      {
        memcpy((void *)(*((void *)a2 + 3) + *((void *)a2 + 1)), v5, v6);
        *((void *)a2 + 1) += v6;
      }
      if (MeCab::StringBuffer::reserve(a2, 1)) {
        *(unsigned char *)(*((void *)a2 + 3) + (*((void *)a2 + 1))++) = 9;
      }
      unint64_t v7 = MeCab::StringBuffer::write(a2, *(const char **)(v3 + 72));
      if (MeCab::StringBuffer::reserve(v7, 1)) {
        *(unsigned char *)(*((void *)a2 + 3) + (*((void *)a2 + 1))++) = 10;
      }
      uint64_t v3 = *v4;
      uint64_t v8 = *v4;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v4 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }

  return MeCab::StringBuffer::write(a2, "EOS\n");
}

uint64_t MeCab::LatticeImpl::toString(MeCab::LatticeImpl *a1, uint64_t a2)
{
  uint64_t v4 = (MeCab::StringBuffer *)MeCab::LatticeImpl::stream(a1);

  return MeCab::LatticeImpl::toStringInternal(a1, a2, v4);
}

uint64_t MeCab::LatticeImpl::toStringInternal(void *a1, uint64_t a2, MeCab::StringBuffer *this)
{
  *((void *)this + 1) = 0;
  if (!a2)
  {
    unint64_t v7 = "node is NULL";
LABEL_15:
    (*(void (**)(void *, const char *))(*a1 + 296))(a1, v7);
    return 0;
  }
  uint64_t v6 = a1[21];
  if (v6)
  {
    if ((MeCab::Writer::writeNode(v6, (uint64_t)a1, a2) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = *(const void **)(a2 + 64);
    size_t v9 = *(unsigned __int16 *)(a2 + 80);
    if (MeCab::StringBuffer::reserve(this, v9))
    {
      memcpy((void *)(*((void *)this + 3) + *((void *)this + 1)), v8, v9);
      *((void *)this + 1) += v9;
    }
    if (MeCab::StringBuffer::reserve(this, 1)) {
      *(unsigned char *)(*((void *)this + 3) + (*((void *)this + 1))++) = 9;
    }
    MeCab::StringBuffer::write(this, *(const char **)(a2 + 72));
  }
  if (MeCab::StringBuffer::reserve(this, 1)) {
    *(unsigned char *)(*((void *)this + 3) + (*((void *)this + 1))++) = 0;
  }
  if (*((unsigned char *)this + 33) || (uint64_t result = *((void *)this + 3)) == 0)
  {
    unint64_t v7 = "output buffer overflow";
    goto LABEL_15;
  }
  return result;
}

uint64_t MeCab::LatticeImpl::toString(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = &unk_26C3C35E0;
  v6[1] = 0;
  v6[2] = a4;
  v6[3] = a3;
  __int16 v7 = 0;
  uint64_t v4 = MeCab::LatticeImpl::toStringInternal(a1, a2, (MeCab::StringBuffer *)v6);
  MeCab::StringBuffer::~StringBuffer((MeCab::StringBuffer *)v6);
  return v4;
}

void sub_2128FDCD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MeCab::StringBuffer::~StringBuffer((MeCab::StringBuffer *)va);
  _Unwind_Resume(a1);
}

uint64_t MeCab::LatticeImpl::enumNBestAsString(MeCab::LatticeImpl *this, uint64_t a2)
{
  uint64_t v4 = (MeCab::StringBuffer *)MeCab::LatticeImpl::stream(this);

  return MeCab::LatticeImpl::enumNBestAsStringInternal(this, a2, v4);
}

uint64_t MeCab::LatticeImpl::enumNBestAsStringInternal(MeCab::LatticeImpl *this, uint64_t a2, MeCab::StringBuffer *a3)
{
  *((void *)a3 + 1) = 0;
  if ((unint64_t)(a2 - 513) < 0xFFFFFFFFFFFFFE00)
  {
    uint64_t v4 = "nbest size must be 1 <= nbest <= 512";
    goto LABEL_17;
  }
  uint64_t v6 = a2;
  do
  {
    if (!(*(unsigned int (**)(MeCab::LatticeImpl *))(*(void *)this + 128))(this)) {
      break;
    }
    uint64_t v7 = *((void *)this + 21);
    if (v7)
    {
      if ((MeCab::Writer::write(v7, (uint64_t)this, (uint64_t)a3) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      MeCab::writeLattice((uint64_t)this, a3);
    }
    --v6;
  }
  while (v6);
  if (!*((void *)this + 21)) {
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  BYTE11(v13) = 4;
  uint64_t v8 = (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 64))(this);
  *(void *)&long long v12 = v8 + (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 88))(this);
  int v9 = MeCab::Writer::writeNode(*((void *)this + 21), (uint64_t)this, (uint64_t)v11);
  uint64_t result = 0;
  if (v9)
  {
LABEL_21:
    if (MeCab::StringBuffer::reserve(a3, 1)) {
      *(unsigned char *)(*((void *)a3 + 3) + (*((void *)a3 + 1))++) = 0;
    }
    if (*((unsigned char *)a3 + 33) || (uint64_t result = *((void *)a3 + 3)) == 0)
    {
      uint64_t v4 = "output buffer overflow";
LABEL_17:
      (*(void (**)(MeCab::LatticeImpl *, const char *))(*(void *)this + 296))(this, v4);
      return 0;
    }
  }
  return result;
}

uint64_t MeCab::LatticeImpl::enumNBestAsString(MeCab::LatticeImpl *this, uint64_t a2, char *a3, uint64_t a4)
{
  v6[0] = &unk_26C3C35E0;
  v6[1] = 0;
  v6[2] = a4;
  v6[3] = a3;
  __int16 v7 = 0;
  uint64_t v4 = MeCab::LatticeImpl::enumNBestAsStringInternal(this, a2, (MeCab::StringBuffer *)v6);
  MeCab::StringBuffer::~StringBuffer((MeCab::StringBuffer *)v6);
  return v4;
}

void sub_2128FDF54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MeCab::StringBuffer::~StringBuffer((MeCab::StringBuffer *)va);
  _Unwind_Resume(a1);
}

BOOL MeCab::LatticeImpl::has_constraint(MeCab::LatticeImpl *this)
{
  return *((void *)this + 18) != *((void *)this + 19);
}

uint64_t MeCab::LatticeImpl::boundary_constraint(MeCab::LatticeImpl *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 18);
  if (v2 == *((void *)this + 19)) {
    return 0;
  }
  else {
    return *(unsigned __int8 *)(v2 + a2);
  }
}

uint64_t MeCab::LatticeImpl::feature_constraint(MeCab::LatticeImpl *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2 == *((void *)this + 16)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * a2);
  }
}

void MeCab::LatticeImpl::set_boundary_constraint(MeCab::LatticeImpl *this, uint64_t a2, char a3)
{
  unint64_t v5 = *((void *)this + 18);
  if (v5 == *((void *)this + 19))
  {
    uint64_t v7 = (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 88))(this);
    unint64_t v8 = v7 + 4;
    unint64_t v5 = *((void *)this + 18);
    int v9 = (char *)*((void *)this + 19);
    size_t v10 = v7 + 4 - (void)&v9[-v5];
    if (v7 + 4 <= (unint64_t)&v9[-v5])
    {
      if (v7 + 4 < (unint64_t)&v9[-v5]) {
        *((void *)this + 19) = v5 + v8;
      }
    }
    else
    {
      uint64_t v11 = *((void *)this + 20);
      if (v11 - (uint64_t)v9 >= v10)
      {
        bzero(*((void **)this + 19), v10);
        *((void *)this + 19) = &v9[v10];
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = v11 - v5;
        uint64_t v13 = 2 * v12;
        if (2 * v12 <= v8) {
          uint64_t v13 = v7 + 4;
        }
        if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v13;
        }
        char v15 = (char *)operator new(v14);
        bzero(&v9[(void)v15 - v5], v10);
        long long v16 = &v15[v8];
        uint64_t v17 = &v15[v14];
        if (v9 == (char *)v5)
        {
          char v15 = &v9[(void)v15 - v5];
        }
        else
        {
          unint64_t v18 = &v9[~v5];
          do
          {
            char v19 = *--v9;
            (v18--)[(void)v15] = v19;
          }
          while (v9 != (char *)v5);
          int v9 = (char *)*((void *)this + 18);
        }
        *((void *)this + 18) = v15;
        *((void *)this + 19) = v16;
        *((void *)this + 20) = v17;
        if (v9) {
          operator delete(v9);
        }
      }
      unint64_t v5 = *((void *)this + 18);
    }
  }
  *(unsigned char *)(v5 + a2) = a3;
}

void *MeCab::LatticeImpl::set_feature_constraint(void *this, unint64_t a2, unint64_t a3, const char *a4)
{
  if (a2 >= a3 || !a4) {
    return this;
  }
  unint64_t v5 = a3;
  uint64_t v7 = this;
  unint64_t v8 = (void **)(this + 15);
  if (this[15] == this[16])
  {
    uint64_t v9 = (*(uint64_t (**)(void *))(*this + 88))(this);
    unint64_t v10 = v9 + 4;
    uint64_t v11 = v7[15];
    uint64_t v12 = v7[16];
    uint64_t v13 = v12 - v11;
    unint64_t v14 = (v12 - v11) >> 3;
    if (v9 + 4 > v14)
    {
      uint64_t v15 = v7[17];
      if (v10 - v14 > (v15 - v12) >> 3)
      {
        uint64_t v30 = v9;
        if (v10 >> 61) {
          std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v15 - v11;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= v10) {
          uint64_t v17 = v9 + 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        char v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(v7 + 17), v18);
        uint64_t v29 = v20;
        uint64_t v21 = &v19[8 * v14];
        std::string::size_type v22 = v19;
        bzero(v21, ((8 * v30 - v13 + 24) & 0xFFFFFFFFFFFFFFF8) + 8);
        uint64_t v24 = (char *)v7[15];
        uint64_t v23 = (char *)v7[16];
        if (v23 != v24)
        {
          do
          {
            uint64_t v25 = *((void *)v23 - 1);
            v23 -= 8;
            *((void *)v21 - 1) = v25;
            v21 -= 8;
          }
          while (v23 != v24);
          uint64_t v23 = (char *)*v8;
        }
        v7[15] = v21;
        v7[16] = &v22[8 * v10];
        v7[17] = &v22[8 * v29];
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_21;
      }
      bzero((void *)v7[16], ((8 * v9 - v13 + 24) & 0xFFFFFFFFFFFFFFF8) + 8);
      uint64_t v26 = v12 + 8 * (v10 - v14);
      goto LABEL_20;
    }
    if (v10 < v14)
    {
      uint64_t v26 = v11 + 8 * v10;
LABEL_20:
      v7[16] = v26;
    }
  }
LABEL_21:
  unint64_t v27 = (*(uint64_t (**)(void *))(*v7 + 88))(v7);
  if (v27 < v5) {
    unint64_t v5 = v27;
  }
  (*(void (**)(void *, unint64_t, uint64_t))(*v7 + 264))(v7, a2, 1);
  this = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*v7 + 264))(v7, v5, 1);
  unint64_t v28 = a2 + 1;
  if (a2 + 1 < v5)
  {
    do
      this = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*v7 + 264))(v7, v28++, 2);
    while (v5 != v28);
  }
  *((void *)*v8 + a2) = a4;
  return this;
}

void MeCab::createTagger(MeCab *this, int a2, char **a3)
{
  MEMORY[0x216685530](&v3);
  operator new();
}

void sub_2128FE508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void MeCab::createTagger(MeCab *this, const char *a2)
{
  MEMORY[0x216685530](&v2, a2);
  operator new();
}

void sub_2128FE664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void MeCab::createModel(MeCab *this, int a2, char **a3)
{
}

void sub_2128FE708(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10A1C406EC38B7ELL);
  _Unwind_Resume(a1);
}

void MeCab::createModel(MeCab *this, const char *a2)
{
}

void sub_2128FE7AC(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10A1C406EC38B7ELL);
  _Unwind_Resume(a1);
}

void *MeCab::scoped_ptr<MeCab::Tagger>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3FB8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 248))(v2);
  }
  return a1;
}

void MeCab::createLattice(MeCab *this)
{
}

void sub_2128FE880(_Unwind_Exception *a1)
{
  MEMORY[0x2166855D0](v1, 0x10F3C4065D1497CLL);
  _Unwind_Resume(a1);
}

uint64_t mecab_do(int a1, char **a2)
{
  MEMORY[0x216685530](&v34);
  MeCab::Param::Param((MeCab::Param *)v30);
  {
    if (MeCab::Param::get<BOOL>((uint64_t)v30, "help"))
    {
      uint64_t v4 = (const char **)&v31;
      uint64_t v5 = 103;
    }
    else
    {
      if (!MeCab::Param::get<BOOL>((uint64_t)v30, "version"))
      {
        if (MeCab::load_dictionary_resource((MeCab *)v30, v12))
        {
          if ((int)MeCab::Param::get<int>((uint64_t)v30, "lattice-level") >= 1)
          {
            unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"lattice-level is DEPERCATED. ", 29);
            char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"use --marginal or --nbest.", 26);
            std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
            uint64_t v20 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
          }
          operator new();
        }
        uint64_t v21 = (char *)MeCab::whatlog::str((MeCab::whatlog *)v33);
        std::string::basic_string[abi:ne180100]<0>(&__p, v21);
        if ((v29 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v23 = v29;
        }
        else {
          uint64_t v23 = v28;
        }
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)p_p, v23);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        uint64_t v25 = std::locale::use_facet(&v26, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v29 < 0) {
          operator delete(__p);
        }
        goto LABEL_19;
      }
      uint64_t v4 = (const char **)&v32;
      uint64_t v5 = 127;
    }
    if (*((char *)v30 + v5) >= 0) {
      uint64_t v13 = (const char *)v4;
    }
    else {
      uint64_t v13 = *v4;
    }
    size_t v14 = strlen(v13);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v16 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
LABEL_19:
    uint64_t v11 = 0;
    goto LABEL_20;
  }
  uint64_t v6 = (char *)MeCab::whatlog::str((MeCab::whatlog *)v33);
  std::string::basic_string[abi:ne180100]<0>(&__p, v6);
  if ((v29 & 0x80u) == 0) {
    uint64_t v7 = &__p;
  }
  else {
    uint64_t v7 = __p;
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v8 = v29;
  }
  else {
    uint64_t v8 = v28;
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v7, v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  unint64_t v10 = std::locale::use_facet(&v26, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v26);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v29 < 0) {
    operator delete(__p);
  }
  uint64_t v11 = 1;
LABEL_20:
  MeCab::Param::~Param(v30);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v34);
  return v11;
}

void sub_2128FFAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42)
{
  if (a18 != MEMORY[0x263F8C0E8] && a18 != 0) {
    (*(void (**)(void))(*(void *)a18 + 8))();
  }
  if (a20) {
    (*(void (**)(uint64_t))(*(void *)a20 + 248))(a20);
  }
  if (a22) {
    MEMORY[0x2166855A0](a22, 0x1000C8077774924);
  }
  a23 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a32 = &unk_26C3C3700;
  if (a33 != MEMORY[0x263F8C100] && a33 != 0) {
    (*(void (**)(void))(*(void *)a33 + 8))();
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a35) {
    (*(void (**)(uint64_t))(*(void *)a35 + 56))(a35);
  }
  MeCab::Param::~Param(&a42);
  std::ios_base::Init::~Init((std::ios_base::Init *)(v42 - 97));
  _Unwind_Resume(a1);
}

uint64_t std::istream::getline[abi:ne180100](void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v1 = std::locale::use_facet(&v3, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v1->__vftable[2].~facet_0)(v1, 10);
  std::locale::~locale(&v3);
  return std::istream::getline();
}

void sub_2128FFE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t MeCab::ModelImpl::dictionary_info(MeCab::ModelImpl *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 16);
  if (v1) {
    return *(void *)(v1 + 888);
  }
  else {
    return 0;
  }
}

uint64_t MeCab::ModelImpl::transition_cost(MeCab::ModelImpl *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 32) + 8))();
}

uint64_t MeCab::ModelImpl::lookup(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 176))(a4);

  return MeCab::Tokenizer<mecab_node_t,mecab_path_t>::lookup<false>(v6, a2, a3, v7);
}

BOOL MeCab::LatticeImpl::is_available(MeCab::LatticeImpl *this)
{
  return *((void *)this + 1)
      && *((void *)this + 12) != *((void *)this + 13)
      && *((void *)this + 9) != *((void *)this + 10);
}

uint64_t MeCab::LatticeImpl::bos_node(MeCab::LatticeImpl *this)
{
  return **((void **)this + 9);
}

uint64_t MeCab::LatticeImpl::eos_node(MeCab::LatticeImpl *this)
{
  return *(void *)(*((void *)this + 12)
                   + 8 * (*(uint64_t (**)(MeCab::LatticeImpl *))(*(void *)this + 88))(this));
}

uint64_t MeCab::LatticeImpl::begin_nodes(MeCab::LatticeImpl *this)
{
  return *((void *)this + 12);
}

uint64_t MeCab::LatticeImpl::end_nodes(MeCab::LatticeImpl *this)
{
  return *((void *)this + 9);
}

uint64_t MeCab::LatticeImpl::end_nodes(MeCab::LatticeImpl *this, uint64_t a2)
{
  return *(void *)(*((void *)this + 9) + 8 * a2);
}

uint64_t MeCab::LatticeImpl::begin_nodes(MeCab::LatticeImpl *this, uint64_t a2)
{
  return *(void *)(*((void *)this + 12) + 8 * a2);
}

uint64_t MeCab::LatticeImpl::sentence(MeCab::LatticeImpl *this)
{
  return *((void *)this + 1);
}

uint64_t MeCab::LatticeImpl::size(MeCab::LatticeImpl *this)
{
  return *((void *)this + 2);
}

uint64_t MeCab::LatticeImpl::set_Z(uint64_t this, double a2)
{
  *(double *)(this + 32) = a2;
  return this;
}

double MeCab::LatticeImpl::Z(MeCab::LatticeImpl *this)
{
  return *((double *)this + 4);
}

double MeCab::LatticeImpl::set_theta(MeCab::LatticeImpl *this, float a2)
{
  double result = a2;
  *((double *)this + 3) = result;
  return result;
}

float MeCab::LatticeImpl::theta(MeCab::LatticeImpl *this)
{
  return *((double *)this + 3);
}

uint64_t MeCab::LatticeImpl::request_type(MeCab::LatticeImpl *this)
{
  return *((unsigned int *)this + 10);
}

BOOL MeCab::LatticeImpl::has_request_type(MeCab::LatticeImpl *this, int a2)
{
  return (*((_DWORD *)this + 10) & a2) != 0;
}

uint64_t MeCab::LatticeImpl::set_request_type(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t MeCab::LatticeImpl::add_request_type(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) |= a2;
  return this;
}

uint64_t MeCab::LatticeImpl::remove_request_type(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) &= ~a2;
  return this;
}

uint64_t MeCab::LatticeImpl::allocator(MeCab::LatticeImpl *this)
{
  return *((void *)this + 25);
}

double MeCab::LatticeImpl::newNode(MeCab::LatticeImpl *this)
{
  return MeCab::FreeList<mecab_node_t>::alloc(*(void **)(*((void *)this + 25) + 24));
}

uint64_t MeCab::LatticeImpl::what(MeCab::LatticeImpl *this)
{
  uint64_t result = (uint64_t)this + 48;
  if (*((char *)this + 71) < 0) {
    return *(void *)result;
  }
  return result;
}

std::string *MeCab::LatticeImpl::set_what(std::string *this, const char *a2)
{
  return std::string::__assign_external(this + 2, a2);
}

double MeCab::FreeList<mecab_node_t>::alloc(void *a1)
{
  uint64_t v1 = a1[5];
  unint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (v3 == v2)
  {
    uint64_t v3 = 0;
    ++v1;
    a1[4] = 0;
    a1[5] = v1;
  }
  uint64_t v4 = a1[1];
  if (v1 == (a1[2] - v4) >> 3)
  {
    is_mul_ok(v2, 0x68uLL);
    operator new[]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * v1);
  a1[4] = v3 + 1;
  uint64_t v6 = v5 + 104 * v3;
  *(void *)(v6 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  return result;
}

void MeCab::scoped_ptr<MeCab::Model>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3EC8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 56))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::ModelImpl>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3EF8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 56))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void *MeCab::scoped_ptr<MeCab::FreeList<mecab_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3498;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::FreeList<mecab_node_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3F58;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MeCab::Allocator<mecab_node_t,mecab_path_t>::~Allocator(void *a1)
{
  MeCab::Allocator<mecab_node_t,mecab_path_t>::~Allocator(a1);

  JUMPOUT(0x2166855D0);
}

void MeCab::FreeList<mecab_node_t>::~FreeList(void *a1)
{
  MeCab::FreeList<mecab_node_t>::~FreeList(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::FreeList<mecab_node_t>::~FreeList(void *a1)
{
  *a1 = &unk_26C3C38F8;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166855A0](v2[v5], 0x10F0C80D97060F7);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::FreeList<mecab_node_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3F58;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::FreeList<mecab_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3498;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void *MeCab::Allocator<mecab_node_t,mecab_path_t>::~Allocator(void *a1)
{
  *a1 = &unk_26C3C3F28;
  a1[13] = &unk_26C3C3600;
  uint64_t v2 = a1[14];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8094CA146DLL);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  a1[8] = &unk_26C3C3418;
  uint64_t v4 = a1[9];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[6] = &unk_26C3C3BE8;
  uint64_t v5 = a1[7];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  a1[4] = &unk_26C3C3498;
  uint64_t v6 = a1[5];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  a1[2] = &unk_26C3C3F58;
  uint64_t v7 = a1[3];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::Allocator<mecab_node_t,mecab_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3F88;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::Allocator<mecab_node_t,mecab_path_t>::alloc(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (!v2) {
    operator new();
  }
  uint64_t v3 = a2 + 1;

  return MeCab::ChunkFreeList<char>::alloc(v2, v3);
}

void MeCab::NBestGenerator::~NBestGenerator(MeCab::NBestGenerator *this)
{
  MeCab::NBestGenerator::~NBestGenerator(this);

  JUMPOUT(0x2166855D0);
}

{
  void *v2;

  *(void *)this = &unk_26C3C36C0;
  MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList((void *)this + 5);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList(void *a1)
{
  MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList(void *a1)
{
  *a1 = &unk_26C3C3998;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166855A0](v2[v5], 0x1020C806C4767B9);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::Tagger>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3FB8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 248))(v1);
  }

  JUMPOUT(0x2166855D0);
}

BOOL MeCab::StringBuffer::reserve(MeCab::StringBuffer *this, uint64_t a2)
{
  int v3 = *((unsigned __int8 *)this + 32);
  uint64_t v5 = *((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  unint64_t v6 = v5 + a2;
  if (v3)
  {
    if (v6 >= v4)
    {
      if (!v4)
      {
        *((void *)this + 2) = 0x2000;
        operator new[]();
      }
      do
      {
        BOOL v7 = v6 >= 2 * v4;
        v4 *= 2;
      }
      while (v7);
      *((void *)this + 2) = v4;
      operator new[]();
    }
    return 1;
  }
  else
  {
    BOOL v7 = v6 >= v4;
    BOOL result = v6 < v4;
    char v9 = v7;
    *((unsigned char *)this + 33) = v9;
  }
  return result;
}

void MeCab::StringBuffer::~StringBuffer(MeCab::StringBuffer *this)
{
  *(void *)this = &unk_26C3C35E0;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2) {
      MEMORY[0x2166855A0](v2, 0x1000C8077774924);
    }
    *((void *)this + 3) = 0;
  }
}

{
  uint64_t vars8;

  MeCab::StringBuffer::~StringBuffer(this);

  JUMPOUT(0x2166855D0);
}

MeCab::StringBuffer *MeCab::StringBuffer::write(MeCab::StringBuffer *this, const char *__s)
{
  size_t v4 = strlen(__s);
  if (MeCab::StringBuffer::reserve(this, v4))
  {
    memcpy((void *)(*((void *)this + 3) + *((void *)this + 1)), __s, v4);
    *((void *)this + 1) += v4;
  }
  return this;
}

MeCab::Viterbi *MeCab::Viterbi::Viterbi(MeCab::Viterbi *this)
{
  *(void *)this = &unk_26C3C38D8;
  *((void *)this + 1) = &unk_26C3C3FE8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = &unk_26C3C4018;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 48);
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  return this;
}

void sub_212900DE8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v3;
  v1[3] = v4;
  uint64_t v6 = v1[4];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  v1[1] = v2;
  uint64_t v7 = v1[2];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(exception_object);
}

void *MeCab::scoped_ptr<MeCab::Connector>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C4018;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  return a1;
}

void *MeCab::scoped_ptr<MeCab::Tokenizer<mecab_node_t,mecab_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3FE8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MeCab::Viterbi::~Viterbi(void **this)
{
  *this = &unk_26C3C38D8;
  uint64_t v2 = (char *)(this + 6);
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  this[6] = (void *)*MEMORY[0x263F8C2C8];
  *(void *)&v2[*(void *)(v4 - 24)] = *(void *)(v3 + 24);
  this[7] = (void *)(MEMORY[0x263F8C318] + 16);
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](this + 20);
  this[3] = &unk_26C3C4018;
  uint64_t v5 = this[4];
  if (v5) {
    (*(void (**)(void *))(*(void *)v5 + 48))(v5);
  }
  this[1] = &unk_26C3C3FE8;
  uint64_t v6 = this[2];
  if (v6) {
    (*(void (**)(void *))(*(void *)v6 + 8))(v6);
  }
}

{
  uint64_t vars8;

  MeCab::Viterbi::~Viterbi(this);

  JUMPOUT(0x2166855D0);
}

void MeCab::Viterbi::open(MeCab::Viterbi *this, const MeCab::Param *a2)
{
}

void sub_21290156C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Viterbi::analyze(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a2 + 64))(a2);
  if (!result) {
    return result;
  }
  MeCab::Viterbi::initPartial(a2);
  if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 144))(a2, 2) & 1) != 0
    || (*(unsigned int (**)(uint64_t *, uint64_t))(*a2 + 144))(a2, 8))
  {
    if ((*(unsigned int (**)(uint64_t *))(*a2 + 240))(a2))
    {
      if (MeCab::Viterbi::viterbi<true,true>(a1, (uint64_t)a2)) {
        goto LABEL_15;
      }
    }
    else if (MeCab::Viterbi::viterbi<true,false>(a1, (uint64_t)a2))
    {
      goto LABEL_15;
    }
    return 0;
  }
  if (!(*(unsigned int (**)(uint64_t *))(*a2 + 240))(a2))
  {
    uint64_t result = MeCab::Viterbi::viterbi<false,false>(a1, (uint64_t)a2);
    if (!result) {
      return result;
    }
    goto LABEL_15;
  }
  if ((MeCab::Viterbi::viterbi<false,true>(a1, (uint64_t)a2) & 1) == 0) {
    return 0;
  }
LABEL_15:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 144))(a2, 8);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t *))(*a2 + 24))(a2);
  uint64_t v6 = (void *)*v5;
  if (*v5)
  {
    do
    {
      v6[1] = v5;
      uint64_t v5 = v6;
      uint64_t v6 = (void *)*v6;
    }
    while (v6);
  }
  MeCab::Viterbi::buildAllLattice((uint64_t)a2);
  MeCab::Viterbi::initNBest((uint64_t)a2);
  return 1;
}

uint64_t MeCab::Viterbi::initPartial(uint64_t *a1)
{
  __s1[2] = *(char **)MEMORY[0x263EF8340];
  char v2 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t *))(v3 + 176))(a1);
    uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    unint64_t v6 = v5 + 1;
    uint64_t v8 = (void **)(v4 + 80);
    uint64_t v7 = *(char **)(v4 + 80);
    char v9 = *(char **)(v4 + 88);
    size_t v10 = v5 + 1 - (v9 - v7);
    if (v5 + 1 <= (unint64_t)(v9 - v7))
    {
      if (v5 + 1 < (unint64_t)(v9 - v7)) {
        *(void *)(v4 + 88) = &v7[v6];
      }
    }
    else
    {
      uint64_t v11 = *(void *)(v4 + 96);
      if (v11 - (uint64_t)v9 >= v10)
      {
        bzero(*(void **)(v4 + 88), v10);
        *(void *)(v4 + 88) = &v9[v10];
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = v11 - (void)v7;
        uint64_t v13 = 2 * v12;
        if (2 * v12 <= v6) {
          uint64_t v13 = v5 + 1;
        }
        if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v13;
        }
        uint64_t v15 = operator new(v14);
        uint64_t v16 = (char *)v15 + v14;
        uint64_t v17 = (char *)v15 + v6;
        bzero((char *)v15 + v9 - v7, v10);
        if (v9 == v7)
        {
          uint64_t v15 = (char *)v15 + v9 - v7;
        }
        else
        {
          unint64_t v18 = &v9[~(unint64_t)v7];
          do
          {
            char v19 = *--v9;
            (v18--)[(void)v15] = v19;
          }
          while (v9 != v7);
          char v9 = (char *)*v8;
        }
        *(void *)(v4 + 80) = v15;
        *(void *)(v4 + 88) = v17;
        *(void *)(v4 + 96) = v16;
        if (v9) {
          operator delete(v9);
        }
      }
      uint64_t v7 = (char *)*v8;
    }
    uint64_t v21 = (const char *)(*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    uint64_t v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    strncpy(v7, v21, v22 + 1);
    memset(__p, 0, sizeof(__p));
    uint64_t v23 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    uint64_t v30 = v7;
    size_t v24 = strlen(v7);
    if (v23 != -1)
    {
      uint64_t v25 = 0;
      std::locale v26 = &v7[v24];
      do
      {
        unint64_t v27 = v26;
        if (v7 != v26)
        {
          do
          {
            if (*v7 == 10)
            {
              unint64_t v27 = v7;
              goto LABEL_30;
            }
            ++v7;
          }
          while (v7 != v26);
          unint64_t v27 = v26;
        }
LABEL_30:
        char *v27 = 0;
        __s1[0] = (char *)__p;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)__s1, &v30);
        if (v27 == v26) {
          break;
        }
        uint64_t v7 = v27 + 1;
        uint64_t v30 = v27 + 1;
      }
      while (v25++ != v23);
    }
    __s1[0] = 0;
    __s1[1] = 0;
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    operator new[]();
  }
  if ((*(unsigned int (**)(uint64_t *))(v3 + 240))(a1))
  {
    (*(void (**)(uint64_t *, void, uint64_t))(*a1 + 264))(a1, 0, 1);
    uint64_t v20 = (*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 264))(a1, v20, 1);
  }
  return 1;
}

void sub_212902098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a16) {
    MEMORY[0x2166855A0](a16, 0x1000C8077774924);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Viterbi::viterbi<true,true>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  double v11 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v10 + 24));
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v9 + 784);
  *(void *)(v12 + 64) = "BOS/EOS";
  *(void *)(v12 + 72) = v14;
  *(unsigned char *)(v12 + 91) = 2;
  *(void *)(v12 + 64) = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v11);
  void *v4 = v13;
  if (v7)
  {
    uint64_t v15 = 0;
    while (1)
    {
      if (v4[v15])
      {
        uint64_t v16 = MeCab::Tokenizer<mecab_node_t,mecab_path_t>::lookup<true>(*(void *)(a1 + 16), (unsigned __int8 *)(v8 + v15), v8 + v7, v6, a2);
        *(void *)(v5 + 8 * v1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v16;
          break;
      }
      if (v7 == ++v15) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
    double v19 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v18 + 24));
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v17 + 784);
    *(void *)(v20 + 64) = "BOS/EOS";
    *(void *)(v20 + 72) = v22;
    *(unsigned char *)(v20 + 91) = 3;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v19);
    *(void *)(v21 + 64) = v23 + (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
    if (v7 < 0) {
      goto LABEL_12;
    }
    while (!v4[v7])
    {
      if (v7-- <= 0) {
        goto LABEL_12;
      }
    }
    {
LABEL_12:
      void *v4 = v13;
      *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
      return 1;
    }
  }
  (*(void (**)(uint64_t, const char *))(*(void *)a2 + 296))(a2, "too long sentence.");
  return 0;
}

uint64_t MeCab::Viterbi::viterbi<true,false>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  double v11 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v10 + 24));
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v9 + 784);
  *(void *)(v12 + 64) = "BOS/EOS";
  *(void *)(v12 + 72) = v14;
  *(unsigned char *)(v12 + 91) = 2;
  *(void *)(v12 + 64) = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v11);
  void *v4 = v13;
  if (v7)
  {
    uint64_t v15 = 0;
    while (1)
    {
      if (v4[v15])
      {
        uint64_t v16 = MeCab::Tokenizer<mecab_node_t,mecab_path_t>::lookup<false>(*(void *)(a1 + 16), (unsigned __int8 *)(v8 + v15), v8 + v7, v6);
        *(void *)(v5 + 8 * v1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v16;
          break;
      }
      if (v7 == ++v15) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
    double v19 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v18 + 24));
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v17 + 784);
    *(void *)(v20 + 64) = "BOS/EOS";
    *(void *)(v20 + 72) = v22;
    *(unsigned char *)(v20 + 91) = 3;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v19);
    *(void *)(v21 + 64) = v23 + (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
    if (v7 < 0) {
      goto LABEL_12;
    }
    while (!v4[v7])
    {
      if (v7-- <= 0) {
        goto LABEL_12;
      }
    }
    {
LABEL_12:
      void *v4 = v13;
      *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
      return 1;
    }
  }
  (*(void (**)(uint64_t, const char *))(*(void *)a2 + 296))(a2, "too long sentence.");
  return 0;
}

uint64_t MeCab::Viterbi::viterbi<false,true>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  double v11 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v10 + 24));
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v9 + 784);
  *(void *)(v12 + 64) = "BOS/EOS";
  *(void *)(v12 + 72) = v14;
  *(unsigned char *)(v12 + 91) = 2;
  *(void *)(v12 + 64) = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v11);
  void *v4 = v13;
  if (v7)
  {
    uint64_t v15 = 0;
    while (1)
    {
      if (v4[v15])
      {
        uint64_t v16 = MeCab::Tokenizer<mecab_node_t,mecab_path_t>::lookup<true>(*(void *)(a1 + 16), (unsigned __int8 *)(v8 + v15), v8 + v7, v6, a2);
        *(void *)(v5 + 8 * v1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v16;
          break;
      }
      if (v7 == ++v15) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
    double v19 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v18 + 24));
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v17 + 784);
    *(void *)(v20 + 64) = "BOS/EOS";
    *(void *)(v20 + 72) = v22;
    *(unsigned char *)(v20 + 91) = 3;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v19);
    *(void *)(v21 + 64) = v23 + (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
    if (v7 < 0) {
      goto LABEL_12;
    }
    while (!v4[v7])
    {
      if (v7-- <= 0) {
        goto LABEL_12;
      }
    }
    {
LABEL_12:
      void *v4 = v13;
      *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
      return 1;
    }
  }
  (*(void (**)(uint64_t, const char *))(*(void *)a2 + 296))(a2, "too long sentence.");
  return 0;
}

uint64_t MeCab::Viterbi::viterbi<false,false>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  double v11 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v10 + 24));
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v9 + 784);
  *(void *)(v12 + 64) = "BOS/EOS";
  *(void *)(v12 + 72) = v14;
  *(unsigned char *)(v12 + 91) = 2;
  *(void *)(v12 + 64) = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v11);
  void *v4 = v13;
  if (v7)
  {
    uint64_t v15 = 0;
    while (1)
    {
      if (v4[v15])
      {
        uint64_t v16 = MeCab::Tokenizer<mecab_node_t,mecab_path_t>::lookup<false>(*(void *)(a1 + 16), (unsigned __int8 *)(v8 + v15), v8 + v7, v6);
        *(void *)(v5 + 8 * v1marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = v16;
          break;
      }
      if (v7 == ++v15) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
    double v19 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(v18 + 24));
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v17 + 784);
    *(void *)(v20 + 64) = "BOS/EOS";
    *(void *)(v20 + 72) = v22;
    *(unsigned char *)(v20 + 91) = 3;
    uint64_t v23 = (*(uint64_t (**)(uint64_t, double))(*(void *)a2 + 64))(a2, v19);
    *(void *)(v21 + 64) = v23 + (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
    if (v7 < 0) {
      goto LABEL_12;
    }
    while (!v4[v7])
    {
      if (v7-- <= 0) {
        goto LABEL_12;
      }
    }
    {
LABEL_12:
      void *v4 = v13;
      *(void *)(v5 + 8 * (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2)) = v21;
      return 1;
    }
  }
  (*(void (**)(uint64_t, const char *))(*(void *)a2 + 296))(a2, "too long sentence.");
  return 0;
}

uint64_t MeCab::Viterbi::buildAllLattice(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, 32))
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      uint64_t v5 = 0;
      do
      {
        for (size_t i = *(uint64_t **)(v4 + 8 * v5); i; size_t i = (uint64_t *)i[3])
        {
          *(void *)(v2 + 8) = i;
          *size_t i = v2;
          uint64_t v2 = (uint64_t)i;
        }
      }
      while (v5++ != v3);
    }
  }
  return 1;
}

uint64_t MeCab::Viterbi::initNBest(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, 2))
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
    uint64_t v3 = (uint64_t *)MeCab::Allocator<mecab_node_t,mecab_path_t>::nbest_generator(v2);
    MeCab::NBestGenerator::set(v3, a1);
  }
  return 1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char *,char *>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void MeCab::scoped_ptr<MeCab::Tokenizer<mecab_node_t,mecab_path_t>>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C3FE8;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::scoped_ptr<MeCab::Connector>::~scoped_ptr(void *a1)
{
  *a1 = &unk_26C3C4018;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  }

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::anonymous namespace'::connect<true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2) {
    return 1;
  }
  uint64_t v7 = a2;
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  while (1)
  {
    uint64_t v8 = *(void **)(a3 + 8 * a1);
    if (!v8) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0x7FFFFFFFLL;
    do
    {
      int v11 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a4 + 16))(a4, v8, v7);
      if (v8[12] + v11 < v10)
      {
        uint64_t v10 = v8[12] + v11;
        uint64_t v9 = v8;
      }
      uint64_t v12 = *(void **)(a5 + 40);
      if (!v12) {
        operator new();
      }
      uint64_t v13 = v12[5];
      uint64_t v14 = v12[4];
      if (v14 == v12[6])
      {
        uint64_t v14 = 0;
        ++v13;
        v12[4] = 0;
        v12[5] = v13;
      }
      uint64_t v15 = v12[1];
      if (v13 == (v12[2] - v15) >> 3) {
        operator new[]();
      }
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      v12[4] = v14 + 1;
      uint64_t v17 = (void *)(v16 + 32 * v14);
      v17[2] = 0;
      long long v17[3] = 0;
      *((_DWORD *)v17 + 6) = v11;
      void *v17 = v7;
      v17[1] = 0;
      v17[1] = v8;
      v17[2] = *(void *)(v7 + 40);
      *(void *)(v7 + 40) = v17;
      _OWORD v8[4] = v17;
      uint64_t v8 = (void *)v8[2];
    }
    while (v8);
    if (!v9) {
      break;
    }
    *(void *)uint64_t v7 = v9;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 96) = v10;
    a1 = v20;
    a3 = v21;
    uint64_t v18 = *(unsigned __int16 *)(v7 + 82) + v20;
    *(void *)(v7 + 16) = *(void *)(v21 + 8 * v18);
    *(void *)(v21 + 8 * v18) = v7;
    uint64_t v7 = *(void *)(v7 + 24);
    if (!v7) {
      return 1;
    }
  }
  return 0;
}

void MeCab::FreeList<mecab_path_t>::~FreeList(void *a1)
{
  MeCab::FreeList<mecab_path_t>::~FreeList(a1);

  JUMPOUT(0x2166855D0);
}

void *MeCab::FreeList<mecab_path_t>::~FreeList(void *a1)
{
  *a1 = &unk_26C3C3918;
  a1[5] = 0;
  uint64_t v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return a1;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x2166855A0](v2[v5], 0x1020C8055CCDE27);
      unint64_t v5 = a1[5];
      uint64_t v2 = (void *)a1[1];
      uint64_t v3 = (void *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t MeCab::anonymous namespace'::connect<false>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 1;
  }
  uint64_t v6 = a2;
  while (1)
  {
    uint64_t v8 = *(void *)(a3 + 8 * a1);
    if (!v8) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0x7FFFFFFFLL;
    do
    {
      int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v8, v6);
      if (*(void *)(v8 + 96) + v11 < v10)
      {
        uint64_t v10 = *(void *)(v8 + 96) + v11;
        uint64_t v9 = v8;
      }
      uint64_t v8 = *(void *)(v8 + 16);
    }
    while (v8);
    if (!v9) {
      break;
    }
    *(void *)uint64_t v6 = v9;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 96) = v10;
    uint64_t v12 = *(unsigned __int16 *)(v6 + 82) + a1;
    *(void *)(v6 + 16) = *(void *)(a3 + 8 * v12);
    *(void *)(a3 + 8 * v12) = v6;
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

MeCab::Connector *MeCab::Connector::Connector(MeCab::Connector *this)
{
  *(void *)this = &unk_26C3C39B8;
  MeCab::Mmap<short>::Mmap((uint64_t)this + 8);
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 90) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 368);
  *((void *)this + 80) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 81) = 0;
  return this;
}

void sub_212903710(_Unwind_Exception *a1)
{
  MeCab::Mmap<short>::~Mmap(v1);
  _Unwind_Resume(a1);
}

void MeCab::Connector::~Connector(void **this)
{
  *this = &unk_26C3C39B8;
  uint64_t v2 = (char *)(this + 1);
  MeCab::Mmap<char>::close((uint64_t)(this + 1));
  if (*((char *)this + 655) < 0) {
    operator delete(this[79]);
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  this[46] = (void *)*MEMORY[0x263F8C2C8];
  *(void **)((char *)this + *(void *)(v4 - 24) + 368) = *(void **)(v3 + 24);
  this[47] = (void *)(MEMORY[0x263F8C318] + 16);
  if (*((char *)this + 463) < 0) {
    operator delete(this[55]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](this + 60);
  MeCab::Mmap<short>::~Mmap((uint64_t)v2);
}

{
  uint64_t vars8;

  MeCab::Connector::~Connector(this);

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::Connector::open(MeCab::Connector *this, const MeCab::Param *a2)
{
  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix.bin");
  MeCab::create_filename((uint64_t)&v8, (uint64_t)__p, &v9);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v9;
  }
  else {
    uint64_t v3 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = (*(uint64_t (**)(MeCab::Connector *, std::string *, const char *))(*(void *)this + 24))(this, v3, "r");
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_212903994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Connector::open(MeCab::Connector *this, char *a2, const char *a3)
{
  if (MeCab::Mmap<short>::open((uint64_t)this + 8, a2, a3))
  {
    if ((*(uint64_t (**)(MeCab::Connector *, void, void))(*(void *)this + 32))(this, *((void *)this + 2), *((void *)this + 3)))return 1; {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    uint64_t v16 = (void *)std::ostream::operator<<();
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"open(ptr, cmmap_.file_size())", 29);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    uint64_t v14 = "open failed";
    size_t v12 = 11;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    char v7 = (void *)std::ostream::operator<<();
    std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"cmmap_.open(filename, mode)", 27);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"cannot open: ", 13);
    size_t v12 = strlen(a2);
    uint64_t v13 = v11;
    uint64_t v14 = a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v12);
  return 0;
}

uint64_t MeCab::Mmap<short>::open(uint64_t a1, char *a2, const char *a3)
{
  MeCab::Mmap<char>::close(a1);
  std::string::basic_string[abi:ne180100]<0>(&v44, a2);
  uint64_t v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v44.st_dev;
  *(void *)(a1 + 40) = *(void *)&v44.st_uid;
  if (!strcmp(a3, "r"))
  {
    int v16 = 0;
  }
  else
  {
    if (strcmp(a3, "r+"))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      char v7 = (void *)(a1 + 48);
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(void *)(v8 - 24)), 0);
      std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      size_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"false", 5);
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
      uint64_t v14 = "unknown open mode: ";
      uint64_t v15 = 19;
LABEL_18:
      uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      size_t v42 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)a2, v42);
      return 0;
    }
    int v16 = 2;
  }
  *(_DWORD *)(a1 + 340) = v16;
  int v17 = open(a2, v16);
  *(_DWORD *)(a1 + 336) = v17;
  if (v17 < 0)
  {
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v23 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v23 + *(void *)(v24 - 24)), 0);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
    std::locale v26 = (void *)std::ostream::operator<<();
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(fd = ::open(filename, flag | O_BINARY)) >= 0", 45);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
    uint64_t v14 = "open failed: ";
    uint64_t v15 = 13;
    goto LABEL_18;
  }
  if (fstat(v17, &v44) < 0)
  {
    uint64_t v30 = *(void *)(a1 + 48);
    unsigned __int8 v29 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v29 + *(void *)(v30 - 24)), 0);
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
    uint64_t v32 = (void *)std::ostream::operator<<();
    std::string::size_type v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") [", 3);
    char v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"::fstat(fd, &st) >= 0", 21);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] ", 2);
    uint64_t v14 = "failed to get file size: ";
    uint64_t v15 = 25;
    goto LABEL_18;
  }
  st_std::string::size_type size = v44.st_size;
  *(void *)(a1 + 16) = v44.st_size;
  if (*(_DWORD *)(a1 + 340) == 2) {
    int v19 = 3;
  }
  else {
    int v19 = 1;
  }
  uint64_t v20 = mmap(0, st_size, v19, 1, *(_DWORD *)(a1 + 336), 0);
  if (v20 == (void *)-1)
  {
    uint64_t v36 = *(void *)(a1 + 48);
    unsigned int v35 = (void *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v35 + *(void *)(v36 - 24)), 0);
    long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
    unint64_t v38 = (void *)std::ostream::operator<<();
    unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") [", 3);
    unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    uint64_t v14 = "mmap() failed: ";
    uint64_t v15 = 15;
    goto LABEL_18;
  }
  uint64_t v21 = v20;
  uint64_t v22 = 1;
  madvise(v20, *(void *)(a1 + 16), 1);
  *(void *)(a1 + 8) = v21;
  close(*(_DWORD *)(a1 + 336));
  *(_DWORD *)(a1 + 336) = -1;
  return v22;
}

uint64_t MeCab::Connector::open(MeCab::Connector *this, const char *a2, uint64_t a3)
{
  if (a2)
  {
    unsigned int v3 = *(unsigned __int16 *)a2;
    *((_WORD *)this + 180) = v3;
    unsigned int v4 = *((unsigned __int16 *)a2 + 1);
    *((_WORD *)this + 181) = v4;
    if (2 * v3 * (unint64_t)v4 + 4 == a3)
    {
      *((void *)this + 44) = a2 + 4;
      return 1;
    }
    uint64_t v14 = (void *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    int v16 = (void *)std::ostream::operator<<();
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"length == offset + lsize_ * rsize_ * sizeof(short)", 50);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    size_t v12 = "invalid binary image size";
    uint64_t v13 = 25;
  }
  else
  {
    uint64_t v6 = (void *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ptr", 3);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    size_t v12 = "image is null";
    uint64_t v13 = 13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  return 0;
}

void *MeCab::Connector::close(MeCab::Connector *this)
{
  return MeCab::Mmap<char>::close((uint64_t)this + 8);
}

BOOL MeCab::Connector::openText(MeCab::Connector *this, const char *a2)
{
  v10[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v8);
  int v4 = *(_DWORD *)&v9[*(void *)(v8[0] - 24) + 16] & 5;
  if (!v4) {
    operator new[]();
  }
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 46, (uint64_t)"no such file or directory: ", 27);
  size_t v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  v8[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v9);
  std::istream::~istream();
  MEMORY[0x216685570](v10);
  return v4 == 0;
}

void sub_212904430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void MeCab::Connector::compile(MeCab::Connector *this, const char *a2, const char *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "1 1\n0 0 0\n");
  std::istringstream::basic_istringstream[abi:ne180100](v16, (long long *)__p, 8);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if ((*((unsigned char *)&v20[4] + *(void *)(v20[0] - 24)) & 5) != 0)
  {
    size_t v5 = strlen((const char *)this);
    size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)this, v5);
    char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is not found. minimum setting is used.", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint64_t v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
  }
  std::ofstream::basic_ofstream((uint64_t *)__p);
  if ((v19[*((void *)__p[0] - 3)] & 5) != 0)
  {
    std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
    uint64_t v10 = (void *)std::ostream::operator<<();
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    size_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ofs", 3);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"permission denied: ", 19);
    size_t v15 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)a2, v15);
    MeCab::die::~die((MeCab::die *)v21);
  }
  memset(v21, 0, sizeof(v21));
  v16[35] = (uint64_t)&unk_26C3C3A28;
  operator new[]();
}

void sub_212904F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,void *__p)
{
  if (a47) {
    MEMORY[0x2166855A0](a47, 0x1000C8077774924);
  }
  std::ofstream::~ofstream(&__p);
  std::istringstream::~istringstream((uint64_t)&a11);
  std::ifstream::~ifstream(&STACK[0x380]);
  _Unwind_Resume(a1);
}

uint64_t MeCab::Connector::transition_cost(MeCab::Connector *this, unsigned int a2, unsigned int a3)
{
  return *(__int16 *)(*((void *)this + 44)
                                  + 2 * (a2 + *((unsigned __int16 *)this + 180) * (unint64_t)a3));
}

uint64_t MeCab::Connector::cost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(__int16 *)(a3 + 92)
                      + *(__int16 *)(*(void *)(a1 + 352)
                                   + 2
                                   * (*(unsigned __int16 *)(a2 + 84)
                                    + *(unsigned __int16 *)(a3 + 86) * (unint64_t)*(unsigned __int16 *)(a1 + 360))));
}

uint64_t MeCab::Mmap<short>::Mmap(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C3838;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 48);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_21290514C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void MeCab::Mmap<short>::~Mmap(uint64_t a1)
{
  MeCab::Mmap<short>::~Mmap(a1);

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::Mmap<short>::~Mmap(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C3838;
  MeCab::Mmap<char>::close(a1);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 48) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 48 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 56) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](a1 + 160);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t MeCab::decode_charset(MeCab *this, const char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  unint64_t v2 = v40;
  BOOL v3 = (v40 & 0x80u) != 0;
  unint64_t v4 = v39;
  if ((v40 & 0x80u) == 0) {
    unint64_t v5 = v40;
  }
  else {
    unint64_t v5 = v39;
  }
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      if (v3) {
        p_p = __p;
      }
      else {
        p_p = &__p;
      }
      int v8 = p_p[v6];
      if ((v8 - 65) <= 0x19)
      {
        p_p[v6] = v8 + 32;
        unint64_t v2 = v40;
        unint64_t v4 = v39;
      }
      ++v6;
      BOOL v3 = (v2 & 0x80u) != 0;
      if ((v2 & 0x80u) == 0) {
        unint64_t v9 = v2;
      }
      else {
        unint64_t v9 = v4;
      }
    }
    while (v6 < v9);
  }
  if (v3) {
    unint64_t v10 = v4;
  }
  else {
    unint64_t v10 = v2;
  }
  switch(v10)
  {
    case 3uLL:
      BOOL v14 = !v3;
      int v11 = (unsigned __int16 *)&__p;
      if (!v14) {
        int v11 = (unsigned __int16 *)__p;
      }
      int v12 = *v11;
      int v13 = *((unsigned __int8 *)v11 + 2);
      BOOL v14 = v12 == 30053;
      int v15 = 99;
      goto LABEL_32;
    case 4uLL:
      BOOL v14 = !v3;
      int v16 = &__p;
      if (!v14) {
        int v16 = __p;
      }
      if (*v16 == 1936288371) {
        goto LABEL_64;
      }
      goto LABEL_49;
    case 5uLL:
      BOOL v14 = !v3;
      int v17 = (unsigned __int8 *)&__p;
      if (!v14) {
        int v17 = (unsigned __int8 *)__p;
      }
      int v18 = *(_DWORD *)v17;
      int v19 = v17[4];
      BOOL v20 = v18 == 859402339;
      int v21 = 50;
      goto LABEL_45;
    case 6uLL:
      BOOL v14 = !v3;
      uint64_t v22 = (unsigned __int16 *)&__p;
      if (!v14) {
        uint64_t v22 = (unsigned __int16 *)__p;
      }
      int v23 = *(_DWORD *)v22;
      int v13 = v22[2];
      BOOL v14 = v23 == 1600353637;
      int v15 = 28778;
LABEL_32:
      if (!v14 || v13 != v15) {
        goto LABEL_49;
      }
      goto LABEL_65;
    case 9uLL:
      BOOL v14 = !v3;
      uint64_t v25 = (unsigned __int8 *)&__p;
      if (!v14) {
        uint64_t v25 = (unsigned __int8 *)__p;
      }
      int v21 = 115;
      if (*(void *)v25 == 0x696A2D7466696873 && v25[8] == 115) {
        goto LABEL_64;
      }
      uint64_t v27 = *(void *)v25;
      int v19 = v25[8];
      BOOL v20 = v27 == 0x696A5F7466696873;
LABEL_45:
      if (v20 && v19 == v21)
      {
LABEL_64:
        uint64_t v32 = 1;
        goto LABEL_90;
      }
LABEL_49:
      if ((v2 & 0x80u) == 0) {
        unint64_t v29 = v2;
      }
      else {
        unint64_t v29 = v4;
      }
      if (v29 != 4)
      {
        if (v29 != 5)
        {
          if (v29 == 6)
          {
            if ((v2 & 0x80u) == 0) {
              uint64_t v30 = &__p;
            }
            else {
              uint64_t v30 = __p;
            }
            if (*(_DWORD *)v30 == 761492837 && v30[2] == 28778)
            {
LABEL_65:
              uint64_t v32 = 0;
              goto LABEL_90;
            }
            if (!memcmp(v30, "utf_16", 6uLL)) {
              goto LABEL_84;
            }
          }
          goto LABEL_83;
        }
        if ((v2 & 0x80u) == 0) {
          char v34 = &__p;
        }
        else {
          char v34 = __p;
        }
        if (memcmp(v34, "utf_8", 5uLL))
        {
          if (*(_DWORD *)v34 != 761689205 || v34[4] != 56)
          {
            if (*(_DWORD *)v34 == 828798069 && v34[4] == 54) {
              goto LABEL_84;
            }
            goto LABEL_83;
          }
        }
LABEL_89:
        uint64_t v32 = 2;
        goto LABEL_90;
      }
      if ((v2 & 0x80u) == 0) {
        std::string::size_type v33 = &__p;
      }
      else {
        std::string::size_type v33 = __p;
      }
      if (!memcmp(v33, "utf8", 4uLL)) {
        goto LABEL_89;
      }
LABEL_83:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf-16"))
      {
LABEL_84:
        uint64_t v32 = 3;
        goto LABEL_90;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf16be")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf_16be")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf-16be"))
      {
        uint64_t v32 = 5;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf16le")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf_16le")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf-16le"))
      {
        uint64_t v32 = 4;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "ascii"))
      {
        uint64_t v32 = 6;
      }
      else
      {
        uint64_t v32 = 2;
      }
LABEL_90:
      if ((v2 & 0x80) != 0) {
        operator delete(__p);
      }
      return v32;
    default:
      goto LABEL_49;
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

std::string *MeCab::create_filename@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
    if (!size) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!*((unsigned char *)&a3->__r_.__value_.__s + 23)) {
      goto LABEL_13;
    }
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v6->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::push_back(a3, 47);
  }
LABEL_13:
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    int v8 = (const std::string::value_type *)a2;
  }
  else {
    int v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  return std::string::append(a3, v8, v9);
}

void sub_2129057F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double MeCab::remove_pathname(std::string *__str)
{
  uint64_t v1 = __str;
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v3 = LODWORD(__str->__r_.__value_.__r.__words[1]);
  }
  else {
    uint64_t v3 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  if ((int)v3 < 1)
  {
LABEL_10:
    if ((size & 0x80) != 0)
    {
      __str->__r_.__value_.__l.__size_ = 1;
      uint64_t v1 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&__str->__r_.__value_.__s + 23) = 1;
    }
    LOWORD(v1->__r_.__value_.__l.__data_) = 46;
    return result;
  }
  while (1)
  {
    uint64_t v4 = v3 - 1;
    uint64_t v5 = (v3 - 1);
    if ((size & 0x80) != 0) {
      break;
    }
    if (__str->__r_.__value_.__s.__data_[v5] == 47) {
      goto LABEL_15;
    }
LABEL_9:
    --v3;
    if ((unint64_t)(v4 + 1) <= 1) {
      goto LABEL_10;
    }
  }
  if (*(unsigned char *)(__str->__r_.__value_.__r.__words[0] + v5) != 47) {
    goto LABEL_9;
  }
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
LABEL_15:
  std::string::basic_string(&v7, __str, v3, size - v5, (std::allocator<char> *)&v8);
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1->__r_.__value_.__l.__data_);
  }
  double result = *(double *)&v7.__r_.__value_.__l.__data_;
  std::string *v1 = v7;
  return result;
}

void MeCab::enum_csv_dictionaries(char *a1, uint64_t a2)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  uint64_t v4 = opendir(a1);
  uint64_t v5 = v4;
  if (!v4)
  {
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/utils.cpp", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    std::string v7 = (void *)std::ostream::operator<<();
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"dir", 3);
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such directory: ", 19);
    size_t v12 = strlen(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a1, v12);
    MeCab::die::~die((MeCab::die *)&__v);
  }
  int v13 = readdir(v4);
  if (v13)
  {
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, v13->d_name);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ <= 4) {
          goto LABEL_31;
        }
      }
      else
      {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if (HIBYTE(__str.__r_.__value_.__r.__words[2]) <= 4u) {
          goto LABEL_32;
        }
      }
      std::string::basic_string(&v46, &__str, size - 4, 4uLL, (std::allocator<char> *)&__v);
      std::string::size_type v15 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      BOOL v16 = (v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type v17 = v46.__r_.__value_.__l.__size_;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v46.__r_.__value_.__l.__size_;
      }
      if (v18)
      {
        std::string::size_type v19 = 0;
        do
        {
          if (v16) {
            BOOL v20 = (std::string *)v46.__r_.__value_.__r.__words[0];
          }
          else {
            BOOL v20 = &v46;
          }
          int v21 = v20->__r_.__value_.__s.__data_[v19];
          if ((v21 - 65) <= 0x19)
          {
            v20->__r_.__value_.__s.__data_[v19] = v21 + 32;
            std::string::size_type v15 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
            std::string::size_type v17 = v46.__r_.__value_.__l.__size_;
          }
          ++v19;
          BOOL v16 = (v15 & 0x80u) != 0;
          if ((v15 & 0x80u) == 0) {
            std::string::size_type v22 = v15;
          }
          else {
            std::string::size_type v22 = v17;
          }
        }
        while (v19 < v22);
      }
      if (!v16) {
        std::string::size_type v17 = v15;
      }
      if (v17 != 4) {
        break;
      }
      int v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if (!v16) {
        int v23 = &v46;
      }
      if (LODWORD(v23->__r_.__value_.__l.__data_) != 1987273518) {
        break;
      }
      std::string::basic_string[abi:ne180100]<0>(v43, a1);
      MeCab::create_filename((uint64_t)v43, (uint64_t)&__str, &__p);
      unint64_t v24 = *(void *)(a2 + 8);
      unint64_t v25 = *(void *)(a2 + 16);
      if (v24 >= v25)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(void *)a2) >> 3);
        unint64_t v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<MeCab::RewritePattern>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(void *)a2) >> 3);
        if (2 * v29 > v28) {
          unint64_t v28 = 2 * v29;
        }
        if (v29 >= 0x555555555555555) {
          unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v30 = v28;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v30) {
          uint64_t v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v30);
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v32 = v31 + v27;
        __v.__first_ = v31;
        __v.__begin_ = v32;
        __v.__end_cap_.__value_ = &v31[v30];
        long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v32->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v32 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v34 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v34;
        if (v35 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v24 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v24 = v26;
        memset(&__p, 0, sizeof(__p));
        *(void *)(a2 + 8) = v24 + 24;
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      if ((*((unsigned char *)&v46.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_29;
      }
LABEL_30:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
LABEL_31:
      }
        operator delete(__str.__r_.__value_.__l.__data_);
LABEL_32:
      int v13 = readdir(v5);
      if (!v13) {
        goto LABEL_51;
      }
    }
    if ((v15 & 0x80) == 0) {
      goto LABEL_30;
    }
LABEL_29:
    operator delete(v46.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
LABEL_51:
  closedir(v5);
  long long v37 = *(void ***)a2;
  uint64_t v36 = *(__n128 **)(a2 + 8);
  if ((char *)v36 - (char *)v37 < 1)
  {
LABEL_55:
    size_t v42 = 0;
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v38 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v37) >> 3);
    while (1)
    {
      unsigned __int8 v40 = (__n128 *)operator new(24 * v39, v38);
      if (v40) {
        break;
      }
      BOOL v41 = v39 > 1;
      v39 >>= 1;
      if (!v41) {
        goto LABEL_55;
      }
    }
    size_t v42 = v40;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(v37, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v37) >> 3), v42, v39);
  if (v42) {
    operator delete(v42);
  }
}

void sub_212905CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,std::__split_buffer<std::string> *a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::escape_csv_element(std::string *a1)
{
  if (std::string::find(a1, 44, 0) != -1 || std::string::find(a1, 34, 0) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "\"");
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v3 = SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0
         ? a1->__r_.__value_.__l.__size_
         : HIBYTE(a1->__r_.__value_.__r.__words[2]);
      if (i >= v3) {
        break;
      }
      uint64_t v4 = a1;
      if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
        uint64_t v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      if (v4->__r_.__value_.__s.__data_[i] == 34) {
        std::string::push_back(&__str, 34);
      }
      uint64_t v5 = a1;
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
      }
      std::string::push_back(&__str, v5->__r_.__value_.__s.__data_[i]);
    }
    std::string::push_back(&__str, 34);
    std::string::operator=(a1, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return 1;
}

void sub_212905E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::progress_bar(MeCab *this, const char *a2, unint64_t a3)
{
  int v3 = (int)((double)(unint64_t)a2 * 100.0 / (double)a3);
  if (MeCab::progress_bar(char const*,unsigned long,unsigned long)::prev != v3)
  {
    printf("%s: %3d%% |%.*s%*s| ", (const char *)this, (int)((double)(unint64_t)a2 * 100.0 / (double)a3), (int)((double)(unint64_t)a2 * 43.0 / (double)a3), MeCab::progress_bar(char const*,unsigned long,unsigned long)::bar, 43 - (int)((double)(unint64_t)a2 * 43.0 / (double)a3), "");
    if (v3 == 100) {
      int v4 = 10;
    }
    else {
      int v4 = 13;
    }
    putchar(v4);
    fflush((FILE *)*MEMORY[0x263EF8358]);
  }
  MeCab::progress_bar(char const*,unsigned long,unsigned long)::prev = v3;
  return 1;
}

uint64_t MeCab::load_request_type(MeCab *this, const MeCab::Param *a2)
{
  if (MeCab::Param::get<BOOL>((uint64_t)this, "allocate-sentence")) {
    int v3 = 65;
  }
  else {
    int v3 = 1;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)this, "partial")) {
    v3 |= 4u;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)this, "all-morphs")) {
    v3 |= 0x20u;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)this, "marginal")) {
    int v4 = v3 | 8;
  }
  else {
    int v4 = v3;
  }
  int v5 = MeCab::Param::get<int>((uint64_t)this, "nbest");
  int v6 = MeCab::Param::get<int>((uint64_t)this, "lattice-level");
  unsigned int v7 = v4 | 2;
  if (v5 <= 1 && v6 <= 0) {
    unsigned int v7 = v4;
  }
  if (v6 <= 1) {
    return v7;
  }
  else {
    return v7 | 8;
  }
}

BOOL MeCab::load_dictionary_resource(MeCab *this, MeCab::Param *a2)
{
  v40[19] = *MEMORY[0x263EF8340];
  MeCab::Param::get<std::string>((uint64_t)this, "rcfile", &v38);
  std::string::size_type v3 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v38.__r_.__value_.__l.__size_;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = v38.__r_.__value_.__l.__size_;
  }
  if (!v6)
  {
    unsigned int v7 = getenv("HOME");
    if (v7)
    {
      std::string::basic_string[abi:ne180100]<0>(&v39, v7);
      std::string::basic_string[abi:ne180100]<0>(__p, ".mecabrc");
      MeCab::create_filename((uint64_t)&v39, (uint64_t)__p, &__str);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      std::ifstream::basic_ifstream((uint64_t *)&v39);
      if ((*((unsigned char *)&v39 + *(void *)(v39.__r_.__value_.__r.__words[0] - 24) + 32) & 5) == 0) {
        std::string::operator=(&v38, &__str);
      }
      v39.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2A8];
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words
                                + *(void *)(v39.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8]
                                                                                                  + 24);
      MEMORY[0x2166853A0](&v39.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x216685570](v40);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string::size_type v3 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v38.__r_.__value_.__l.__size_;
      char v4 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
  }
  if (v4 >= 0) {
    std::string::size_type v8 = v3;
  }
  else {
    std::string::size_type v8 = size;
  }
  if (!v8)
  {
    std::string::size_type v9 = getenv("MECABRC");
    if (v9) {
      std::string::__assign_external(&v38, v9);
    }
  }
  MeCab::Param::get<std::string>((uint64_t)this, "dicdir", &__str);
  std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
  }
  if (!v10)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      __str.__r_.__value_.__l.__size_ = 1;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 1;
      p_str = &__str;
    }
    LOWORD(p_str->__r_.__value_.__l.__data_) = 46;
  }
  LODWORD(v12) = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  int v13 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    LODWORD(v12) = v38.__r_.__value_.__r.__words[1];
  }
  uint64_t v12 = v12;
  BOOL v14 = &v38;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v14 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  std::string::size_type v15 = (char *)&v14[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if ((int)v12 < 1)
    {
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        v38.__r_.__value_.__l.__size_ = 1;
      }
      else
      {
        *((unsigned char *)&v38.__r_.__value_.__s + 23) = 1;
        int v13 = &v38;
      }
      LOWORD(v13->__r_.__value_.__l.__data_) = 46;
      goto LABEL_42;
    }
    unsigned int v16 = v12 - 1;
    int v17 = v15[v12--];
  }
  while (v17 != 47);
  std::string::basic_string(&v39, &v38, 0, v16, (std::allocator<char> *)__p);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string v38 = v39;
LABEL_42:
  std::string::basic_string[abi:ne180100]<0>(&v39, "$(rcpath)");
  int64_t v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = &__str;
  }
  else {
    std::string::size_type v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v18 = __str.__r_.__value_.__l.__size_;
  }
  char v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v21 = &v39;
  }
  else {
    int v21 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v22 = v39.__r_.__value_.__l.__size_;
  }
  if (v22)
  {
    if (v18 >= v22)
    {
      int v23 = (char *)v19 + v18;
      int v24 = v21->__r_.__value_.__s.__data_[0];
      unint64_t v25 = v19;
      do
      {
        int64_t v26 = v18 - v22;
        if (v26 == -1) {
          break;
        }
        unint64_t v27 = (char *)memchr(v25, v24, v26 + 1);
        if (!v27) {
          break;
        }
        unint64_t v28 = v27;
        if (!memcmp(v27, v21, v22))
        {
          if (v28 != v23)
          {
            std::string::size_type v29 = v28 - (char *)v19;
            if (v28 - (char *)v19 != -1) {
              goto LABEL_62;
            }
          }
          break;
        }
        unint64_t v25 = (std::string *)(v28 + 1);
        int64_t v18 = v23 - (v28 + 1);
      }
      while (v18 >= v22);
    }
  }
  else
  {
    std::string::size_type v29 = 0;
LABEL_62:
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v30 = &v38;
    }
    else {
      unint64_t v30 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v38.__r_.__value_.__l.__size_;
    }
    std::string::replace(&__str, v29, v22, (const std::string::value_type *)v30, v31);
    char v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  if (v20 < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  MeCab::Param::set<std::string>((uint64_t)this, "dicdir", (uint64_t)&__str, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "dicrc");
  MeCab::create_filename((uint64_t)&__str, (uint64_t)__p, &v39);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v39;
  *((unsigned char *)&v39.__r_.__value_.__s + 23) = 0;
  v39.__r_.__value_.__s.__data_[0] = 0;
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v32 = &__str;
  }
  else {
    uint64_t v32 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  BOOL v33 = MeCab::Param::load(this, (const char *)v32);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  return v33;
}

void sub_2129064F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

BOOL MeCab::file_exists(MeCab *this, const char *a2)
{
  v6[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v4);
  BOOL v2 = (*(_DWORD *)&v5[*(void *)(v4[0] - 24) + 16] & 5) == 0;
  v4[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v5);
  std::istream::~istream();
  MEMORY[0x216685570](v6);
  return v2;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(void **a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    std::string::size_type v6 = a1;
    if (a3 == 2)
    {
      unsigned int v7 = &a2[-2].n128_i8[8];
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        unint64_t v8 = (unint64_t)v6[2];
        long long v9 = *(_OWORD *)v6;
        unint64_t v10 = a2[-1].n128_u64[1];
        *(_OWORD *)std::string::size_type v6 = *(_OWORD *)v7;
        v6[2] = (void *)v10;
        *(_OWORD *)unsigned int v7 = v9;
        a2[-1].n128_u64[1] = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (void **)a2)
      {
        int v17 = a1 + 3;
        if (a1 + 3 != (void **)a2)
        {
          uint64_t v18 = 0;
          std::string::size_type v19 = a1;
          do
          {
            char v20 = v19;
            std::string::size_type v19 = v17;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, v20) & 0x80) != 0)
            {
              long long v21 = *(_OWORD *)v19;
              uint64_t v48 = v19[2];
              long long v47 = v21;
              v19[1] = 0;
              v19[2] = 0;
              *std::string::size_type v19 = 0;
              uint64_t v22 = v18;
              do
              {
                int v23 = (char *)v6 + v22;
                int v24 = (void **)((char *)v6 + v22 + 24);
                if (*((char *)v6 + v22 + 47) < 0) {
                  operator delete(*v24);
                }
                *(_OWORD *)int v24 = *(_OWORD *)v23;
                *(void **)((char *)v6 + v22 + 40) = (void *)*((void *)v23 + 2);
                v23[23] = 0;
                *int v23 = 0;
                if (!v22)
                {
                  uint64_t v26 = (uint64_t)v6;
                  goto LABEL_22;
                }
                v22 -= 24;
              }
              while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v47, (void **)((char *)v6 + v22)) & 0x80) != 0);
              int v25 = *((char *)v6 + v22 + 47);
              uint64_t v26 = (uint64_t)v6 + v22 + 24;
              if (v25 < 0) {
                operator delete(*(void **)v26);
              }
LABEL_22:
              long long v27 = v47;
              *(void *)(v26 + 16) = v48;
              *(_OWORD *)uint64_t v26 = v27;
            }
            int v17 = v19 + 3;
            v18 += 24;
          }
          while (v19 + 3 != (void **)a2);
        }
      }
    }
    else
    {
      int v13 = a4;
      unint64_t v14 = a3 >> 1;
      std::string::size_type v15 = (__n128 *)&a1[3 * (a3 >> 1)];
      unint64_t v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((__n128 *)a1, v15, v16, a4);
        unint64_t v28 = (__n128 *)((char *)v13 + 24 * v14);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((__n128 *)&v6[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28);
        std::string::size_type v29 = (__n128 *)((char *)v13 + 24 * a3);
        unint64_t v30 = v28;
        std::string::size_type v31 = v13;
        while (v30 != v29)
        {
          char v32 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (void **)v31);
          int v33 = *((char *)v6 + 23);
          if (v32 < 0)
          {
            if (v33 < 0) {
              operator delete(*v6);
            }
            __n128 v35 = *v30;
            v6[2] = (void *)v30[1].n128_u64[0];
            *(__n128 *)std::string::size_type v6 = v35;
            v30[1].n128_u8[7] = 0;
            v30->n128_u8[0] = 0;
            unint64_t v30 = (__n128 *)((char *)v30 + 24);
          }
          else
          {
            if (v33 < 0) {
              operator delete(*v6);
            }
            __n128 v34 = *v31;
            v6[2] = (void *)v31[1].n128_u64[0];
            *(__n128 *)std::string::size_type v6 = v34;
            v31[1].n128_u8[7] = 0;
            v31->n128_u8[0] = 0;
            std::string::size_type v31 = (__n128 *)((char *)v31 + 24);
          }
          v6 += 3;
          if (v31 == v28)
          {
            if (v30 != v29)
            {
              uint64_t v36 = 0;
              do
              {
                long long v37 = &v6[v36];
                if (SHIBYTE(v6[v36 + 2]) < 0) {
                  operator delete(*v37);
                }
                std::string v38 = (char *)v30 + v36 * 8;
                long long v39 = *(long long *)((char *)v30 + v36 * 8);
                v37[2] = (void *)v30[1].n128_u64[v36];
                *(_OWORD *)long long v37 = v39;
                v38[23] = 0;
                unsigned char *v38 = 0;
                uint64_t v40 = (uint64_t)&v30[1].n128_i64[v36 + 1];
                v36 += 3;
              }
              while ((__n128 *)v40 != v29);
            }
            goto LABEL_46;
          }
        }
        if (v31 != v28)
        {
          uint64_t v41 = 0;
          do
          {
            size_t v42 = &v6[v41];
            if (SHIBYTE(v6[v41 + 2]) < 0) {
              operator delete(*v42);
            }
            long long v43 = (char *)v31 + v41 * 8;
            long long v44 = *(long long *)((char *)v31 + v41 * 8);
            v42[2] = (void *)v31[1].n128_u64[v41];
            *(_OWORD *)size_t v42 = v44;
            v43[23] = 0;
            unsigned char *v43 = 0;
            uint64_t v45 = (uint64_t)&v31[1].n128_i64[v41 + 1];
            v41 += 3;
          }
          while ((__n128 *)v45 != v28);
        }
LABEL_46:
        if (v13)
        {
          unint64_t v46 = a3;
          do
          {
            if (v13[1].n128_i8[7] < 0) {
              operator delete((void *)v13->n128_u64[0]);
            }
            int v13 = (__n128 *)((char *)v13 + 24);
            --v46;
          }
          while (v46);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(a1, v15, v16, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(&v6[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v13, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((char *)v6, (char *)&v6[3 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (long long *)v13, a5);
      }
    }
  }
}

void sub_212906A7C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    unint64_t v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
      ++v4;
      v1 += 24;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  if (a3)
  {
    unint64_t v4 = a4;
    unsigned int v7 = a1;
    if (a3 == 2)
    {
      long long v9 = (__n128 *)((char *)a2 - 24);
      char v10 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], (void **)a1);
      int v11 = (__n128 *)((char *)v4 + 24);
      if ((v10 & 0x80) == 0)
      {
        __n128 v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        __n128 *v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        __n128 result = *v9;
        v4[2].n128_u64[1] = v9[1].n128_u64[0];
        *int v11 = result;
LABEL_37:
        v9->n128_u64[0] = 0;
        v9->n128_u64[1] = 0;
        v9[1].n128_u64[0] = 0;
        return result;
      }
      __n128 v25 = *v9;
      v4[1].n128_u64[0] = v9[1].n128_u64[0];
      __n128 *v4 = v25;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      v9->n128_u64[0] = 0;
      __n128 result = *v7;
      v4[2].n128_u64[1] = v7[1].n128_u64[0];
      *int v11 = result;
LABEL_36:
      long long v9 = v7;
      goto LABEL_37;
    }
    if (a3 == 1)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      goto LABEL_36;
    }
    if ((uint64_t)a3 > 8)
    {
      char v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(a1, v20, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v4 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      long long v21 = (__n128 *)((char *)v7 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (void **)v7) & 0x80) != 0)
        {
          __n128 result = *v21;
          v4[1].n128_u64[0] = v21[1].n128_u64[0];
          __n128 *v4 = result;
          v21->n128_u64[1] = 0;
          v21[1].n128_u64[0] = 0;
          v21->n128_u64[0] = 0;
          long long v21 = (__n128 *)((char *)v21 + 24);
        }
        else
        {
          __n128 result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          __n128 *v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          unsigned int v7 = (__n128 *)((char *)v7 + 24);
        }
        unint64_t v4 = (__n128 *)((char *)v4 + 24);
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            uint64_t v22 = 0;
            do
            {
              int v23 = &v21->n128_u64[v22];
              int v24 = (__n128 *)((char *)v4 + v22 * 8);
              __n128 result = *(__n128 *)((char *)v21 + v22 * 8);
              v24[1].n128_u64[0] = v21[1].n128_u64[v22];
              *int v24 = result;
              v23[1] = 0;
              v23[2] = 0;
              *int v23 = 0;
              v22 += 3;
            }
            while ((__n128 *)((char *)v21 + v22 * 8) != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        uint64_t v26 = 0;
        do
        {
          long long v27 = (__n128 *)((char *)v4 + v26 * 8);
          unint64_t v28 = &v7->n128_u64[v26];
          __n128 result = *(__n128 *)((char *)v7 + v26 * 8);
          v27[1].n128_u64[0] = v7[1].n128_u64[v26];
          __n128 *v27 = result;
          v28[1] = 0;
          v28[2] = 0;
          *unint64_t v28 = 0;
          v26 += 3;
        }
        while ((__n128 *)((char *)v7 + v26 * 8) != v20);
      }
    }
    else if (a1 != a2)
    {
      __n128 result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      int v13 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v14 = 0;
        std::string::size_type v15 = a4;
        do
        {
          unint64_t v16 = v13;
          int v17 = (__n128 *)((char *)v15 + 24);
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (void **)v15) & 0x80) != 0)
          {
            __n128 *v17 = *v15;
            v15[2].n128_u64[1] = v15[1].n128_u64[0];
            v15->n128_u64[1] = 0;
            v15[1].n128_u64[0] = 0;
            v15->n128_u64[0] = 0;
            uint64_t v18 = v4;
            if (v15 != v4)
            {
              uint64_t v19 = v14;
              while (1)
              {
                uint64_t v18 = (__n128 *)((char *)v4 + v19);
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (void **)((char *)&v4[-1] + v19 - 8)) & 0x80) == 0)break; {
                if (v18[1].n128_i8[7] < 0)
                }
                  operator delete((void *)v18->n128_u64[0]);
                *uint64_t v18 = *(__n128 *)((char *)v4 + v19 - 24);
                v18[1].n128_u64[0] = *(unint64_t *)((char *)&v4->n128_u64[-1] + v19);
                v4->n128_u8[v19 - 1] = 0;
                v18[-2].n128_u8[8] = 0;
                v19 -= 24;
                if (!v19)
                {
                  uint64_t v18 = v4;
                  break;
                }
              }
            }
            if (v18[1].n128_i8[7] < 0) {
              operator delete((void *)v18->n128_u64[0]);
            }
            __n128 result = *v16;
            v18[1].n128_u64[0] = v16[1].n128_u64[0];
            *uint64_t v18 = result;
            v7[2].n128_u8[15] = 0;
            v16->n128_u8[0] = 0;
          }
          else
          {
            __n128 result = *v16;
            v15[2].n128_u64[1] = v16[1].n128_u64[0];
            __n128 *v17 = result;
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
          }
          int v13 = (__n128 *)((char *)v16 + 24);
          v14 += 24;
          std::string::size_type v15 = (__n128 *)((char *)v15 + 24);
          unsigned int v7 = v16;
        }
        while (&v16[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(char *a1, char *a2, char *a3, int64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v81 = a5;
  if (a5)
  {
    while (a4 > a7 && v81 > a7)
    {
      if (!a4) {
        return;
      }
      int v13 = 0;
      uint64_t v14 = -a4;
      while (1)
      {
        std::string::size_type v15 = &v13[(void)a1];
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)&v13[(void)a1]) & 0x80) != 0)break; {
        v13 += 24;
        }
        if (__CFADD__(v14++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v14;
      uint64_t v18 = v81;
      std::string::size_type v79 = a6;
      uint64_t v80 = a3;
      uint64_t v78 = a7;
      if (-v14 >= v81)
      {
        if (v14 == -1)
        {
          long long v64 = &v13[(void)a1];
          uint64_t v89 = *(void *)&v13[(void)a1 + 16];
          long long v85 = *(_OWORD *)&v13[(void)a1];
          long long v65 = *(_OWORD *)a2;
          *((void *)v64 + 2) = *((void *)a2 + 2);
          *(_OWORD *)long long v64 = v65;
          *(_OWORD *)a2 = v85;
          *((void *)a2 + 2) = v89;
          return;
        }
        if (v14 > 0) {
          uint64_t v17 = 1 - v14;
        }
        uint64_t v76 = v17 >> 1;
        uint64_t v22 = &a1[24 * (v17 >> 1) + (void)v13];
        long long v21 = a2;
        if (a2 != a3)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          long long v21 = a2;
          do
          {
            uint64_t v26 = &v21[24 * (v25 >> 1)];
            int v27 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, (void **)v22);
            if (v27 >= 0) {
              v25 >>= 1;
            }
            else {
              v25 += ~(v25 >> 1);
            }
            if (v27 < 0) {
              long long v21 = v26 + 24;
            }
          }
          while (v25);
          uint64_t v18 = v81;
        }
        uint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v21 - a2) >> 3);
        unint64_t v24 = v76;
      }
      else
      {
        if (v81 >= 0) {
          uint64_t v19 = v81;
        }
        else {
          uint64_t v19 = v81 + 1;
        }
        uint64_t v20 = v19 >> 1;
        long long v21 = &a2[24 * (v19 >> 1)];
        uint64_t v22 = a2;
        if ((char *)(a2 - a1) != v13)
        {
          uint64_t v75 = v19 >> 1;
          uint64_t v77 = a1;
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1 - (uint64_t)v13) >> 3);
          uint64_t v22 = v15;
          do
          {
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (void **)&v22[24 * (v23 >> 1)]) & 0x80u) != 0)
            {
              v23 >>= 1;
            }
            else
            {
              v22 += 24 * (v23 >> 1) + 24;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
          uint64_t v20 = v75;
          a1 = v77;
          uint64_t v18 = v81;
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - a1 - (uint64_t)v13) >> 3);
      }
      unint64_t v28 = a1;
      if (v22 == a2)
      {
        unint64_t v30 = v21;
      }
      else if (v21 == a2)
      {
        unint64_t v30 = v22;
      }
      else
      {
        uint64_t v86 = *((void *)v22 + 2);
        long long v82 = *(_OWORD *)v22;
        long long v29 = *(_OWORD *)a2;
        *((void *)v22 + 2) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v22 = v29;
        *(_OWORD *)a2 = v82;
        *((void *)a2 + 2) = v86;
        unint64_t v30 = v22 + 24;
        for (unint64_t i = a2 + 24; i != v21; i += 24)
        {
          if (v30 == a2) {
            a2 = i;
          }
          uint64_t v87 = *((void *)v30 + 2);
          long long v83 = *(_OWORD *)v30;
          long long v32 = *(_OWORD *)i;
          *((void *)v30 + 2) = *((void *)i + 2);
          *(_OWORD *)unint64_t v30 = v32;
          v30 += 24;
          *(_OWORD *)unint64_t i = v83;
          *((void *)i + 2) = v87;
        }
        if (v30 != a2)
        {
          int v33 = v30;
          __n128 v34 = a2;
          do
          {
            while (1)
            {
              uint64_t v88 = *((void *)v33 + 2);
              long long v84 = *(_OWORD *)v33;
              long long v35 = *(_OWORD *)v34;
              *((void *)v33 + 2) = *((void *)v34 + 2);
              *(_OWORD *)int v33 = v35;
              v33 += 24;
              *((void *)v34 + 2) = v88;
              *(_OWORD *)__n128 v34 = v84;
              v34 += 24;
              if (v34 == v21) {
                break;
              }
              if (v33 == a2) {
                a2 = v34;
              }
            }
            __n128 v34 = a2;
          }
          while (v33 != a2);
        }
      }
      a4 = -(uint64_t)v24 - v14;
      uint64_t v36 = v18 - v20;
      if ((uint64_t)(v24 + v20) >= (uint64_t)(v18 - (v24 + v20) - v14))
      {
        std::string v38 = v21;
        a6 = v79;
        uint64_t v39 = v20;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(v30, v38, v80, -(uint64_t)v24 - v14, v18 - v20, v79, v78);
        a2 = v22;
        a7 = v78;
        uint64_t v36 = v39;
        a4 = v24;
        a3 = v30;
      }
      else
      {
        long long v37 = v22;
        a7 = v78;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(&v13[(void)v28], v37, v30, v24, v20, v79, v78);
        std::string::size_type v15 = v30;
        a2 = v21;
        a6 = v79;
        a3 = v80;
      }
      uint64_t v81 = v36;
      a1 = v15;
      if (!v36) {
        return;
      }
    }
    if (a4 <= v81)
    {
      if (a1 == a2) {
        return;
      }
      uint64_t v52 = 0;
      unint64_t v41 = 0;
      do
      {
        uint64_t v53 = (uint64_t)a6 + v52;
        uint64_t v54 = &a1[v52];
        long long v55 = *(_OWORD *)&a1[v52];
        *(void *)(v53 + 16) = *(void *)&a1[v52 + 16];
        *(_OWORD *)uint64_t v53 = v55;
        *((void *)v54 + 1) = 0;
        *((void *)v54 + 2) = 0;
        *(void *)uint64_t v54 = 0;
        ++v41;
        v52 += 24;
      }
      while (&a1[v52] != a2);
      if (v52)
      {
        long long v56 = a3;
        uint64_t v57 = (long long *)((char *)a6 + v52);
        uint64_t v58 = (uint64_t)a6 + v52 - 24;
        uint64_t v59 = a6;
        while (a2 != v56)
        {
          char v60 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v59);
          int v61 = a1[23];
          if (v60 < 0)
          {
            if (v61 < 0) {
              operator delete(*(void **)a1);
            }
            long long v63 = *(_OWORD *)a2;
            *((void *)a1 + 2) = *((void *)a2 + 2);
            *(_OWORD *)a1 = v63;
            a2[23] = 0;
            *a2 = 0;
            a2 += 24;
          }
          else
          {
            if (v61 < 0) {
              operator delete(*(void **)a1);
            }
            long long v62 = *v59;
            *((void *)a1 + 2) = *((void *)v59 + 2);
            *(_OWORD *)a1 = v62;
            *((unsigned char *)v59 + 23) = 0;
            *(unsigned char *)uint64_t v59 = 0;
            uint64_t v59 = (long long *)((char *)v59 + 24);
          }
          a1 += 24;
          if (v57 == v59) {
            goto LABEL_104;
          }
        }
        if (v57 != v59)
        {
          uint64_t v70 = 0;
          do
          {
            uint64_t v71 = (void **)&a1[v70];
            if (a1[v70 + 23] < 0) {
              operator delete(*v71);
            }
            uint64_t v72 = (char *)v59 + v70;
            long long v73 = *(long long *)((char *)v59 + v70);
            v71[2] = *(void **)((char *)v59 + v70 + 16);
            *(_OWORD *)uint64_t v71 = v73;
            v72[23] = 0;
            *uint64_t v72 = 0;
            v70 += 24;
          }
          while ((unsigned char *)v58 != v72);
        }
      }
    }
    else
    {
      if (a3 == a2) {
        return;
      }
      uint64_t v40 = 0;
      unint64_t v41 = 0;
      do
      {
        uint64_t v42 = (uint64_t)a6 + v40;
        long long v43 = &a2[v40];
        long long v44 = *(_OWORD *)&a2[v40];
        *(void *)(v42 + 16) = *(void *)&a2[v40 + 16];
        *(_OWORD *)uint64_t v42 = v44;
        *((void *)v43 + 1) = 0;
        *((void *)v43 + 2) = 0;
        *(void *)long long v43 = 0;
        ++v41;
        v40 += 24;
      }
      while (&a2[v40] != a3);
      if (v40)
      {
        uint64_t v45 = (long long *)((char *)a6 + v40);
        unint64_t v46 = (void **)(a3 - 24);
        while (a2 != a1)
        {
          long long v47 = a1;
          int v48 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v45 - 3, (void **)a2 - 3);
          if (v48 >= 0) {
            uint64_t v49 = (char *)v45;
          }
          else {
            uint64_t v49 = a2;
          }
          if (v48 >= 0) {
            std::string v50 = (char *)v45 - 24;
          }
          else {
            std::string v50 = a2 - 24;
          }
          if (v48 >= 0) {
            uint64_t v45 = (long long *)((char *)v45 - 24);
          }
          else {
            a2 -= 24;
          }
          if (*((char *)v46 + 23) < 0) {
            operator delete(*v46);
          }
          long long v51 = *(_OWORD *)v50;
          v46[2] = (void *)*((void *)v50 + 2);
          *(_OWORD *)unint64_t v46 = v51;
          v46 -= 3;
          *(v49 - 1) = 0;
          *std::string v50 = 0;
          a1 = v47;
          if (v45 == a6) {
            goto LABEL_104;
          }
        }
        if (v45 != a6)
        {
          unint64_t v66 = 0;
          do
          {
            uint64_t v67 = &v46[v66 / 8];
            if (SHIBYTE(v46[v66 / 8 + 2]) < 0) {
              operator delete(*v67);
            }
            uint64_t v68 = (void *)((char *)v45 + v66);
            v66 -= 24;
            long long v69 = *(long long *)((char *)v45 + v66);
            v67[2] = *(void **)((char *)v45 + v66 + 16);
            *(_OWORD *)uint64_t v67 = v69;
            *((unsigned char *)v68 - 1) = 0;
            *((unsigned char *)v45 + v66) = 0;
          }
          while ((long long *)((char *)v45 + v66) != a6);
        }
      }
    }
LABEL_104:
    if (a6)
    {
      unint64_t v74 = 0;
      do
      {
        if (*((char *)a6 + 23) < 0) {
          operator delete(*(void **)a6);
        }
        ++v74;
        a6 = (long long *)((char *)a6 + 24);
      }
      while (v74 < v41);
    }
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 <= 0x40)
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = *(uint64_t *)((char *)a2 + a3 - 8) + v8;
      uint64_t v16 = __ROR8__(v15 + v14, 52);
      uint64_t v17 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v18 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      uint64_t v19 = v18 + v15;
      unint64_t v20 = 0x9AE16A3B2F90404FLL;
      unint64_t v21 = 0xC3A5C85C97CB3127 * (v19 + v17)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + v16
           + __ROR8__(v18, 31));
      unint64_t v22 = v17 - 0x3C5A37A36834CED9 * (v21 ^ (v21 >> 47));
      return (v22 ^ (v22 >> 47)) * v20;
    }
    uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 48);
    uint64_t v30 = *(uint64_t *)((char *)a2 + a3 - 40);
    uint64_t v31 = *(uint64_t *)((char *)a2 + a3 - 24);
    uint64_t v33 = *(uint64_t *)((char *)a2 + a3 - 64);
    uint64_t v32 = *(uint64_t *)((char *)a2 + a3 - 56);
    uint64_t v34 = *(uint64_t *)((char *)a2 + a3 - 16);
    uint64_t v35 = *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v36 = v32 + v34;
    unint64_t v37 = 0x9DDFEA08EB382D69
        * (v31 ^ ((0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))));
    unint64_t v38 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
    unint64_t v39 = v29 + v32 + v33 + a3;
    uint64_t v40 = v39 + v30;
    unint64_t v41 = __ROR8__(v39, 44) + v33 + a3 + __ROR8__(v33 + a3 + v30 - 0x622015F714C7D297 * (v37 ^ (v37 >> 47)), 21);
    uint64_t v42 = v32 + v34 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v43 = v31 + v34 + v42;
    uint64_t v44 = __ROR8__(v43, 44);
    uint64_t v45 = v43 + v35;
    uint64_t v46 = v44 + v42 + __ROR8__(v42 + v30 + v35, 21);
    uint64_t v48 = *a2;
    long long v47 = a2 + 4;
    unint64_t v49 = v48 - 0x4B6D499041670D8DLL * v30;
    uint64_t v50 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v51 = *(v47 - 3);
      uint64_t v52 = v49 + v40 + v36 + v51;
      uint64_t v53 = v47[2];
      uint64_t v54 = v47[3];
      uint64_t v55 = v47[1];
      unint64_t v36 = v55 + v40 - 0x4B6D499041670D8DLL * __ROR8__(v36 + v41 + v53, 42);
      uint64_t v56 = v38 + v45;
      uint64_t v57 = *(v47 - 2);
      uint64_t v58 = *(v47 - 1);
      uint64_t v59 = *(v47 - 4) - 0x4B6D499041670D8DLL * v41;
      uint64_t v60 = v59 + v45 + v58;
      uint64_t v61 = v59 + v51 + v57;
      uint64_t v40 = v61 + v58;
      uint64_t v62 = __ROR8__(v61, 44) + v59;
      unint64_t v63 = (0xB492B66FBE98F273 * __ROR8__(v52, 37)) ^ v46;
      unint64_t v49 = 0xB492B66FBE98F273 * __ROR8__(v56, 33);
      unint64_t v41 = v62 + __ROR8__(v60 + v63, 21);
      unint64_t v64 = v49 + v46 + *v47;
      uint64_t v45 = v55 + v53 + v64 + v54;
      uint64_t v46 = __ROR8__(v55 + v53 + v64, 44) + v64 + __ROR8__(v36 + v57 + v64 + v54, 21);
      v47 += 8;
      unint64_t v38 = v63;
      v50 += 64;
    }
    while (v50);
    unint64_t v65 = v49
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) >> 47));
    unint64_t v66 = 0x9DDFEA08EB382D69
        * (v65 ^ (v63
                - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) ^ ((0x9DDFEA08EB382D69 * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) >> 47))));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) ^ ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) >> 47));
  }
  else
  {
    if (a3 > 0x10)
    {
      uint64_t v23 = a2[1];
      unint64_t v24 = 0xB492B66FBE98F273 * *a2;
      uint64_t v25 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v24 - v23, 43);
      unint64_t v26 = v24
          + a3
          + __ROR8__(v23 ^ 0xC949D7C7509E6557, 20)
          - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v27 = 0x9DDFEA08EB382D69 * ((v25 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v26);
      unint64_t v28 = v26 ^ (v27 >> 47) ^ v27;
LABEL_8:
      unint64_t v22 = 0x9DDFEA08EB382D69 * v28;
      return (v22 ^ (v22 >> 47)) * v20;
    }
    if (a3 >= 9)
    {
      uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
      uint64_t v4 = __ROR8__(v3 + a3, a3);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
    }
    if (a3 >= 4)
    {
      uint64_t v67 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v68 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v67);
      unint64_t v28 = v67 ^ (v68 >> 47) ^ v68;
      goto LABEL_8;
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (a3)
    {
      unint64_t v69 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v69 ^ (v69 >> 47));
    }
  }
  return result;
}

uint64_t MeCab::Tokenizer<mecab_node_t,mecab_path_t>::~Tokenizer(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C4048;
  MeCab::Tokenizer<mecab_node_t,mecab_path_t>::close((void *)a1);
  if (*(char *)(a1 + 1879) < 0) {
    operator delete(*(void **)(a1 + 1856));
  }
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 1592) = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + 1592 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 1600) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 1687) < 0) {
    operator delete(*(void **)(a1 + 1664));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](a1 + 1704);
  MeCab::CharProperty::~CharProperty((void **)(a1 + 904));
  uint64_t v4 = *(void **)(a1 + 864);
  if (v4)
  {
    *(void *)(a1 + 872) = v4;
    operator delete(v4);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList((void *)(a1 + 808));
  *(void *)(a1 + 792) = &unk_26C3C3620;
  uint64_t v5 = *(void *)(a1 + 800);
  if (v5) {
    MEMORY[0x2166855A0](v5, 0x1000C8077774924);
  }
  *(void *)(a1 + 776) = &unk_26C3C3620;
  uint64_t v6 = *(void *)(a1 + 784);
  if (v6) {
    MEMORY[0x2166855A0](v6, 0x1000C8077774924);
  }
  MeCab::Dictionary::~Dictionary((MeCab::Dictionary *)(a1 + 40));
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void *MeCab::Tokenizer<mecab_node_t,mecab_path_t>::close(void *a1)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (void *)a1[2];
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        uint64_t v2 = (void *)a1[2];
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = (void *)a1[1];
  }
  a1[2] = v3;
  a1[109] = a1[108];

  return MeCab::Mmap<char>::close((uint64_t)(a1 + 114));
}

void MeCab::Tokenizer<mecab_node_t,mecab_path_t>::~Tokenizer(uint64_t a1)
{
  MeCab::Tokenizer<mecab_node_t,mecab_path_t>::~Tokenizer(a1);

  JUMPOUT(0x2166855D0);
}

void MeCab::Tokenizer<mecab_node_t,mecab_path_t>::Tokenizer(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C4048;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  MeCab::Dictionary::Dictionary((MeCab::Dictionary *)(a1 + 40));
  MeCab::scoped_string::scoped_string((MeCab::scoped_string *)(a1 + 776));
}

void sub_212907BFC(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  MeCab::CharProperty::~CharProperty(v6);
  uint64_t v8 = (void *)v1[108];
  if (v8)
  {
    v1[109] = v8;
    operator delete(v8);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(v4);
  v1[99] = &unk_26C3C3620;
  uint64_t v9 = v1[100];
  if (v9) {
    MEMORY[0x2166855A0](v9, 0x1000C8077774924);
  }
  v1[97] = &unk_26C3C3620;
  uint64_t v10 = v1[98];
  if (v10) {
    MEMORY[0x2166855A0](v10, 0x1000C8077774924);
  }
  MeCab::Dictionary::~Dictionary(v2);
  uint64_t v11 = *v5;
  if (*v5)
  {
    v1[2] = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t MeCab::Tokenizer<mecab_node_t,mecab_path_t>::lookup<false>(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  __int16 v5 = (__int16)a2;
  uint64_t v6 = a1;
  unsigned int v66 = 0;
  uint64_t v65 = 0;
  if (a3 - (unint64_t)a2 <= 0xFFFE) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = (unint64_t)(a2 + 0xFFFF);
  }
  if (v7 <= (unint64_t)a2)
  {
    unsigned int v14 = 0;
    uint64_t v13 = 0;
    uint64_t v15 = a2;
    goto LABEL_33;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 896);
  uint64_t v9 = *(unsigned int **)(a1 + 1280);
  uint64_t v10 = a2;
  while (1)
  {
    unint64_t v11 = v7 - (void)v10;
    if ((*(_DWORD *)(a1 + 1288) - 3) <= 2) {
      break;
    }
    unsigned __int16 v12 = *v10;
    if (((char)*v10 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    if (v11 >= 2 && (v12 & 0xE0) == 0xC0)
    {
      uint64_t v13 = 2;
      unsigned __int16 v12 = v10[1] & 0x3F | ((v12 & 0x1F) << 6);
    }
    else
    {
      if (v11 < 3) {
        goto LABEL_29;
      }
      if ((v12 & 0xF0) == 0xE0)
      {
        unsigned __int16 v12 = (v12 << 12) | ((v10[1] & 0x3F) << 6) | v10[2] & 0x3F;
        uint64_t v13 = 3;
      }
      else
      {
        if (v11 < 4) {
          goto LABEL_29;
        }
        if ((v12 & 0xF8) == 0xF0)
        {
          unsigned __int16 v12 = 0;
          uint64_t v13 = 4;
        }
        else
        {
          if (v11 < 5) {
            goto LABEL_29;
          }
          if ((v12 & 0xFC) == 0xF8)
          {
            unsigned __int16 v12 = 0;
            uint64_t v13 = 5;
          }
          else
          {
            if (v11 < 6 || (v12 & 0xFE) != 0xFC)
            {
LABEL_29:
              unsigned __int16 v12 = 0;
LABEL_10:
              uint64_t v13 = 1;
              goto LABEL_26;
            }
            unsigned __int16 v12 = 0;
            uint64_t v13 = 6;
          }
        }
      }
    }
LABEL_26:
    unsigned int v14 = v9[v12];
    if ((v8 & v14 & 0x3FFFF) != 0)
    {
      v10 += v13;
      unsigned int v8 = v9[v12];
      if ((unint64_t)v10 < v7) {
        continue;
      }
    }
    unsigned int v66 = v9[v12];
LABEL_32:
    uint64_t v15 = v10;
    goto LABEL_33;
  }
  if (v11 >= 2)
  {
    unsigned __int16 v12 = *(_WORD *)v10;
    uint64_t v13 = 2;
    goto LABEL_26;
  }
  uint64_t v13 = 0;
  uint64_t v15 = 0;
  unsigned int v14 = *v9;
  unsigned int v66 = v14;
  if ((v8 & v14 & 0x3FFFF) == 0) {
    goto LABEL_32;
  }
LABEL_33:
  uint64_t v16 = *(uint64_t **)(a1 + 8);
  if (v16 != *(uint64_t **)(a1 + 16))
  {
    uint64_t v53 = v13;
    unint64_t v54 = v7;
    unsigned int v58 = v14;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v60 = v15;
    uint64_t v62 = *(void *)(a4 + 112);
    __int16 v55 = (__int16)a2;
    unsigned int v56 = v7 - v15;
    __int16 v64 = (_WORD)v15 - (_WORD)a2;
    unint64_t v20 = v15;
    do
    {
      unint64_t v21 = v16;
      uint64_t v61 = MeCab::Dictionary::commonPrefixSearch(*v16, v15, v56, v62, 0x200uLL);
      if (v61)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v21;
        do
        {
          uint64_t v63 = v22;
          uint64_t v24 = v62 + 16 * v22;
          uint64_t v25 = *(_DWORD *)(v24 + 8);
          if (*(_DWORD *)(v24 + 8))
          {
            uint64_t v26 = *(void *)(*v23 + 352) + 12 * (*(_DWORD *)(v24 + 8) >> 8);
            unint64_t v27 = (__int16 *)(v24 + 12);
            do
            {
              MeCab::FreeList<mecab_node_t>::alloc(*(void **)(a4 + 24));
              uint64_t v23 = v21;
              uint64_t v17 = v28;
              uint64_t v29 = *v21;
              *(_WORD *)(v28 + 86) = *(_WORD *)v26;
              *(_WORD *)(v28 + 84) = *(_WORD *)(v26 + 2);
              *(_WORD *)(v28 + 88) = *(_WORD *)(v26 + 4);
              *(_WORD *)(v28 + 92) = *(_WORD *)(v26 + 6);
              BOOL v30 = *(unsigned char *)(v29 + 726) == 1 && *(unsigned char *)(v29 + 725) == 1;
              uint64_t v31 = *(void *)(v29 + 368) + *(unsigned int *)(v26 + 8);
              if (v30) {
                uint64_t v31 = v26;
              }
              *(void *)(v28 + 72) = v31;
              __int16 v32 = *v27;
              *(_WORD *)(v28 + 80) = *v27;
              *(_WORD *)(v28 + 82) = v32 + v64;
              *(void *)(v28 + 64) = v20;
              *(unsigned char *)(v28 + 91) = 0;
              *(unsigned char *)(v28 + 90) = v58 >> 18;
              *(void *)(v28 + 24) = v18;
              v26 += 12;
              uint64_t v18 = v28;
              --v25;
            }
            while (v25);
          }
          uint64_t v22 = v63 + 1;
        }
        while ((int *)(v63 + 1) != v61);
      }
      else
      {
        uint64_t v23 = v21;
      }
      uint64_t v16 = v23 + 1;
      uint64_t v6 = a1;
      uint64_t v15 = v60;
    }
    while (v16 != *(uint64_t **)(a1 + 16));
    uint64_t v65 = v17;
    uint64_t v4 = a4;
    unint64_t v7 = v54;
    __int16 v5 = v55;
    unsigned int v14 = v58;
    uint64_t v13 = v53;
    if ((v58 & 0x80000000) == 0)
    {
      if (v18) {
        return v18;
      }
    }
  }
  uint64_t v33 = &v15[v13];
  if ((unint64_t)&v15[v13] > v7)
  {
    MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<false>(v6, &v66, v5, (uint64_t)v15, (_WORD)v15 + v13, v4, &v65);
    return v34;
  }
  if (*(unsigned char *)(v6 + 1888))
  {
    if (*(void *)(v6 + 1880) == (v14 >> 18))
    {
      uint64_t v35 = Thai::seekToSyllableEnd((unsigned __int16 *)v15, v7);
      if (v15 < (unsigned __int8 *)v35)
      {
        MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<false>(v6, &v66, v5, (uint64_t)v15, (__int16)v35, v4, &v65);
        unsigned int v14 = v66;
      }
    }
  }
  if ((v14 & 0x40000000) == 0)
  {
    unint64_t v36 = 0;
    goto LABEL_93;
  }
  unint64_t v37 = *(void *)(v6 + 1584);
  unint64_t v38 = &v33[2 * v37];
  if (v7 - (unint64_t)v33 < 2 * v37) {
    unint64_t v38 = (unsigned __int8 *)v7;
  }
  if (v33 >= v38)
  {
    unint64_t v39 = 0;
    unint64_t v36 = (char *)v33;
    goto LABEL_90;
  }
  unint64_t v39 = 0;
  unint64_t v36 = (char *)v33;
  unsigned int v40 = v14;
  while (2)
  {
    unint64_t v41 = v38 - (unsigned __int8 *)v36;
    if ((*(_DWORD *)(v6 + 1288) - 3) > 2)
    {
      unsigned __int16 v42 = *v36;
      if (*v36 < 0)
      {
        if (v41 >= 2 && (v42 & 0xE0) == 0xC0)
        {
          uint64_t v43 = 2;
          unsigned __int16 v42 = v36[1] & 0x3F | ((v42 & 0x1F) << 6);
          goto LABEL_83;
        }
        if (v41 >= 3)
        {
          if ((v42 & 0xF0) == 0xE0)
          {
            unsigned __int16 v42 = (v42 << 12) | ((v36[1] & 0x3F) << 6) | v36[2] & 0x3F;
            uint64_t v43 = 3;
            goto LABEL_83;
          }
          if (v41 >= 4)
          {
            if ((v42 & 0xF8) == 0xF0)
            {
              unsigned __int16 v42 = 0;
              uint64_t v43 = 4;
              goto LABEL_83;
            }
            if (v41 >= 5)
            {
              if ((v42 & 0xFC) == 0xF8)
              {
                unsigned __int16 v42 = 0;
                uint64_t v43 = 5;
                goto LABEL_83;
              }
              if (v41 >= 6 && (v42 & 0xFE) == 0xFC)
              {
                unsigned __int16 v42 = 0;
                uint64_t v43 = 6;
                goto LABEL_83;
              }
            }
          }
        }
        unsigned __int16 v42 = 0;
      }
      uint64_t v43 = 1;
LABEL_83:
      unsigned int v44 = *(_DWORD *)(*(void *)(v6 + 1280) + 4 * v42);
      if ((v40 & v44 & 0x3FFFF) == 0) {
        goto LABEL_91;
      }
      v36 += v43;
      ++v39;
      unsigned int v40 = v44;
      if (v36 >= (char *)v38) {
        goto LABEL_91;
      }
      continue;
    }
    break;
  }
  if (v41 >= 2)
  {
    unsigned __int16 v42 = *(_WORD *)v36;
    uint64_t v43 = 2;
    goto LABEL_83;
  }
  if ((v40 & **(_DWORD **)(v6 + 1280) & 0x3FFFF) != 0) {
    return v65;
  }
LABEL_90:
  if (!v36) {
    return v65;
  }
LABEL_91:
  if (v39 <= v37)
  {
    MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<false>(v6, &v66, v5, (uint64_t)v15, (__int16)v36, v4, &v65);
    unsigned int v14 = v66;
  }
LABEL_93:
  if ((v14 & 0x3C000000) != 0)
  {
    unint64_t v45 = 1;
    while (1)
    {
      uint64_t v46 = (unsigned __int8 *)v36;
      if (v33 != (unsigned __int8 *)v36) {
        break;
      }
LABEL_107:
      BOOL v51 = v45++ >= ((v14 >> 26) & 0xF) || (unint64_t)v46 > v7;
      uint64_t v33 = v46;
      if (v51) {
        goto LABEL_127;
      }
    }
    MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<false>(v6, &v66, v5, (uint64_t)v15, (__int16)v33, v4, &v65);
    unint64_t v47 = v7 - (void)v33;
    if ((*(_DWORD *)(v6 + 1288) - 3) <= 2)
    {
      if (v47 < 2)
      {
        uint64_t v49 = 0;
        unsigned __int16 v48 = 0;
      }
      else
      {
        unsigned __int16 v48 = *(_WORD *)v33;
        uint64_t v49 = 2;
      }
      goto LABEL_105;
    }
    unsigned __int16 v48 = *v33;
    if ((char)*v33 < 0)
    {
      if (v47 < 2 || (v48 & 0xE0) != 0xC0)
      {
        if (v47 >= 3)
        {
          if ((v48 & 0xF0) == 0xE0)
          {
            unsigned __int16 v48 = (v48 << 12) | ((v33[1] & 0x3F) << 6) | v33[2] & 0x3F;
            uint64_t v49 = 3;
            goto LABEL_105;
          }
          if (v47 >= 4)
          {
            if ((v48 & 0xF8) == 0xF0)
            {
              unsigned __int16 v48 = 0;
              uint64_t v49 = 4;
              goto LABEL_105;
            }
            if (v47 >= 5)
            {
              if ((v48 & 0xFC) == 0xF8)
              {
                unsigned __int16 v48 = 0;
                uint64_t v49 = 5;
                goto LABEL_105;
              }
              if (v47 >= 6 && (v48 & 0xFE) == 0xFC)
              {
                unsigned __int16 v48 = 0;
                uint64_t v49 = 6;
                goto LABEL_105;
              }
            }
          }
        }
        unsigned __int16 v48 = 0;
        goto LABEL_100;
      }
      uint64_t v49 = 2;
      unsigned __int16 v48 = v33[1] & 0x3F | ((v48 & 0x1F) << 6);
    }
    else
    {
LABEL_100:
      uint64_t v49 = 1;
    }
LABEL_105:
    unsigned int v14 = v66;
    if ((*(_DWORD *)(*(void *)(v6 + 1280) + 4 * v48) & v66 & 0x3FFFF) == 0) {
      goto LABEL_126;
    }
    uint64_t v46 = &v33[v49];
    goto LABEL_107;
  }
LABEL_126:
  LOWORD(v46) = (_WORD)v33;
LABEL_127:
  uint64_t v18 = v65;
  if (!v65)
  {
    MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<false>(v6, &v66, v5, (uint64_t)v15, (__int16)v46, v4, &v65);
    return v65;
  }
  return v18;
}

void MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<false>(uint64_t a1, _DWORD *a2, __int16 a3, uint64_t a4, __int16 a5, uint64_t a6, void *a7)
{
  unsigned int v8 = (uint64_t *)(*(void *)(a1 + 864) + 16 * ((unint64_t)*a2 >> 18));
  uint64_t v9 = v8[1];
  if (v9)
  {
    uint64_t v14 = *v8;
    __int16 v15 = a5 - a4;
    __int16 v16 = a5 - a3;
    do
    {
      MeCab::FreeList<mecab_node_t>::alloc(*(void **)(a6 + 24));
      *(_WORD *)(v17 + 86) = *(_WORD *)v14;
      *(_WORD *)(v17 + 84) = *(_WORD *)(v14 + 2);
      *(_WORD *)(v17 + 88) = *(_WORD *)(v14 + 4);
      *(_WORD *)(v17 + 92) = *(_WORD *)(v14 + 6);
      BOOL v18 = *(unsigned char *)(a1 + 766) == 1 && *(unsigned char *)(a1 + 765) == 1;
      uint64_t v19 = *(void *)(a1 + 408) + *(unsigned int *)(v14 + 8);
      if (v18) {
        uint64_t v19 = v14;
      }
      *(void *)(v17 + 72) = v19;
      *(unsigned char *)(v17 + 90) = *a2 >> 18;
      *(void *)(v17 + 64) = a4;
      *(_WORD *)(v17 + 80) = v15;
      *(_WORD *)(v17 + 82) = v16;
      *(unsigned char *)(v17 + 91) = 1;
      *(void *)(v17 + 24) = *a7;
      uint64_t v20 = *(void *)(a1 + 800);
      if (v20) {
        *(void *)(v17 + 72) = v20;
      }
      v14 += 12;
      *a7 = v17;
      --v9;
    }
    while (v9);
  }
}

uint64_t MeCab::Tokenizer<mecab_node_t,mecab_path_t>::lookup<true>(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v77 = 0;
  uint64_t v76 = 0;
  if (a3 - (unint64_t)a2 <= 0xFFFE) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = (unint64_t)(a2 + 0xFFFF);
  }
  uint64_t v9 = &a2[-(*(uint64_t (**)(uint64_t))(*(void *)a5 + 64))(a5)];
  while ((unint64_t)++v9 < (*(uint64_t (**)(uint64_t))(*(void *)a5 + 88))(a5))
  {
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(void *)a5 + 248))(a5, v9) == 1)
    {
      unint64_t v8 = (unint64_t)&v9[(*(uint64_t (**)(uint64_t))(*(void *)a5 + 64))(a5)];
      break;
    }
  }
  unsigned int v66 = a2;
  if (v8 <= (unint64_t)a2)
  {
    unsigned int v16 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = a2;
    goto LABEL_37;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 896);
  unint64_t v11 = *(unsigned int **)(a1 + 1280);
  unsigned __int16 v12 = a2;
  while (1)
  {
    unint64_t v13 = v8 - (void)v12;
    if ((*(_DWORD *)(a1 + 1288) - 3) <= 2) {
      break;
    }
    unsigned __int16 v14 = *v12;
    if (((char)*v12 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    if (v13 >= 2 && (v14 & 0xE0) == 0xC0)
    {
      uint64_t v15 = 2;
      unsigned __int16 v14 = v12[1] & 0x3F | ((v14 & 0x1F) << 6);
    }
    else
    {
      if (v13 < 3) {
        goto LABEL_33;
      }
      if ((v14 & 0xF0) == 0xE0)
      {
        unsigned __int16 v14 = (v14 << 12) | ((v12[1] & 0x3F) << 6) | v12[2] & 0x3F;
        uint64_t v15 = 3;
      }
      else
      {
        if (v13 < 4) {
          goto LABEL_33;
        }
        if ((v14 & 0xF8) == 0xF0)
        {
          unsigned __int16 v14 = 0;
          uint64_t v15 = 4;
        }
        else
        {
          if (v13 < 5) {
            goto LABEL_33;
          }
          if ((v14 & 0xFC) == 0xF8)
          {
            unsigned __int16 v14 = 0;
            uint64_t v15 = 5;
          }
          else
          {
            if (v13 < 6 || (v14 & 0xFE) != 0xFC)
            {
LABEL_33:
              unsigned __int16 v14 = 0;
LABEL_14:
              uint64_t v15 = 1;
              goto LABEL_18;
            }
            unsigned __int16 v14 = 0;
            uint64_t v15 = 6;
          }
        }
      }
    }
LABEL_18:
    unsigned int v16 = v11[v14];
    if ((v10 & v16 & 0x3FFFF) != 0)
    {
      v12 += v15;
      unsigned int v10 = v11[v14];
      if ((unint64_t)v12 < v8) {
        continue;
      }
    }
    unsigned int v77 = v11[v14];
LABEL_36:
    uint64_t v17 = v12;
    goto LABEL_37;
  }
  if (v13 >= 2)
  {
    unsigned __int16 v14 = *(_WORD *)v12;
    uint64_t v15 = 2;
    goto LABEL_18;
  }
  uint64_t v15 = 0;
  uint64_t v17 = 0;
  unsigned int v16 = *v11;
  unsigned int v77 = v16;
  if ((v10 & v16 & 0x3FFFF) == 0) {
    goto LABEL_36;
  }
LABEL_37:
  BOOL v18 = *(uint64_t **)(a1 + 8);
  if (v18 == *(uint64_t **)(a1 + 16)) {
    goto LABEL_55;
  }
  uint64_t v65 = v15;
  unsigned int v73 = v16;
  uint64_t v72 = 0;
  uint64_t v19 = 0;
  uint64_t v70 = *(void *)(a4 + 112);
  unsigned int v67 = v8 - v17;
  uint64_t v68 = a1;
  __int16 v20 = (_WORD)v17 - (_WORD)a2;
  do
  {
    unint64_t v21 = v17;
    unint64_t v69 = MeCab::Dictionary::commonPrefixSearch(*v18, v17, v67, v70, 0x200uLL);
    if (v69)
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v71 = v22;
        uint64_t v23 = v70 + 16 * v22;
        uint64_t v24 = *(_DWORD *)(v23 + 8);
        if (*(_DWORD *)(v23 + 8))
        {
          uint64_t v25 = *(void *)(*v18 + 352) + 12 * (*(_DWORD *)(v23 + 8) >> 8);
          uint64_t v26 = (__int16 *)(v23 + 12);
          do
          {
            MeCab::FreeList<mecab_node_t>::alloc(*(void **)(a4 + 24));
            uint64_t v28 = v27;
            uint64_t v29 = *v18;
            *(_WORD *)(v27 + 86) = *(_WORD *)v25;
            *(_WORD *)(v27 + 84) = *(_WORD *)(v25 + 2);
            *(_WORD *)(v27 + 88) = *(_WORD *)(v25 + 4);
            *(_WORD *)(v27 + 92) = *(_WORD *)(v25 + 6);
            BOOL v30 = *(unsigned char *)(v29 + 726) == 1 && *(unsigned char *)(v29 + 725) == 1;
            uint64_t v31 = *(void *)(v29 + 368) + *(unsigned int *)(v25 + 8);
            if (v30) {
              uint64_t v31 = v25;
            }
            *(void *)(v27 + 72) = v31;
            __int16 v32 = *v26;
            *(_WORD *)(v27 + 80) = *v26;
            *(_WORD *)(v27 + 82) = v32 + v20;
            *(void *)(v27 + 64) = v21;
            *(unsigned char *)(v27 + 91) = 0;
            *(unsigned char *)(v27 + 90) = v73 >> 18;
            {
              *(void *)(v28 + 24) = v19;
              uint64_t v72 = v28;
              uint64_t v19 = v28;
            }
            v25 += 12;
            --v24;
          }
          while (v24);
        }
        uint64_t v22 = v71 + 1;
      }
      while ((int *)(v71 + 1) != v69);
    }
    ++v18;
    a1 = v68;
    uint64_t v17 = v21;
  }
  while (v18 != *(uint64_t **)(v68 + 16));
  uint64_t v76 = v72;
  uint64_t v15 = v65;
  unsigned int v16 = v73;
  if ((v73 & 0x80000000) != 0 || !v19)
  {
LABEL_55:
    uint64_t v33 = &v17[v15];
    if ((unint64_t)&v17[v15] > v8) {
      return MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<true>(a1, &v77, (__int16)v66, (uint64_t)v17, (unsigned __int16)v17 + (unsigned __int16)v15, a4, a5, (uint64_t)&v76);
    }
    if (*(unsigned char *)(a1 + 1888))
    {
      if (*(void *)(a1 + 1880) == (v16 >> 18))
      {
        uint64_t v34 = Thai::seekToSyllableEnd((unsigned __int16 *)v17, v8);
        if (v17 < (unsigned __int8 *)v34)
        {
          MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<true>(a1, &v77, (__int16)v66, (uint64_t)v17, (__int16)v34, a4, a5, (uint64_t)&v76);
          unsigned int v16 = v77;
        }
      }
    }
    if ((v16 & 0x40000000) == 0)
    {
      uint64_t v35 = 0;
      goto LABEL_97;
    }
    unint64_t v36 = *(void *)(a1 + 1584);
    unint64_t v37 = &v33[2 * v36];
    if (v8 - (unint64_t)v33 < 2 * v36) {
      unint64_t v37 = (unsigned __int8 *)v8;
    }
    if (v33 >= v37)
    {
      unint64_t v38 = 0;
      uint64_t v35 = (char *)v33;
      goto LABEL_94;
    }
    unint64_t v38 = 0;
    uint64_t v35 = (char *)v33;
    unsigned int v39 = v16;
    while (2)
    {
      unint64_t v40 = v37 - (unsigned __int8 *)v35;
      if ((*(_DWORD *)(a1 + 1288) - 3) > 2)
      {
        unsigned __int16 v41 = *v35;
        if (*v35 < 0)
        {
          if (v40 >= 2 && (v41 & 0xE0) == 0xC0)
          {
            uint64_t v42 = 2;
            unsigned __int16 v41 = v35[1] & 0x3F | ((v41 & 0x1F) << 6);
            goto LABEL_75;
          }
          if (v40 >= 3)
          {
            if ((v41 & 0xF0) == 0xE0)
            {
              unsigned __int16 v41 = (v41 << 12) | ((v35[1] & 0x3F) << 6) | v35[2] & 0x3F;
              uint64_t v42 = 3;
              goto LABEL_75;
            }
            if (v40 >= 4)
            {
              if ((v41 & 0xF8) == 0xF0)
              {
                unsigned __int16 v41 = 0;
                uint64_t v42 = 4;
                goto LABEL_75;
              }
              if (v40 >= 5)
              {
                if ((v41 & 0xFC) == 0xF8)
                {
                  unsigned __int16 v41 = 0;
                  uint64_t v42 = 5;
                  goto LABEL_75;
                }
                if (v40 >= 6 && (v41 & 0xFE) == 0xFC)
                {
                  unsigned __int16 v41 = 0;
                  uint64_t v42 = 6;
                  goto LABEL_75;
                }
              }
            }
          }
          unsigned __int16 v41 = 0;
        }
        uint64_t v42 = 1;
LABEL_75:
        unsigned int v43 = *(_DWORD *)(*(void *)(a1 + 1280) + 4 * v41);
        if ((v39 & v43 & 0x3FFFF) == 0) {
          goto LABEL_95;
        }
        v35 += v42;
        ++v38;
        unsigned int v39 = v43;
        if (v35 >= (char *)v37) {
          goto LABEL_95;
        }
        continue;
      }
      break;
    }
    if (v40 >= 2)
    {
      unsigned __int16 v41 = *(_WORD *)v35;
      uint64_t v42 = 2;
      goto LABEL_75;
    }
    if ((v39 & **(_DWORD **)(a1 + 1280) & 0x3FFFF) != 0) {
      return v76;
    }
LABEL_94:
    if (!v35) {
      return v76;
    }
LABEL_95:
    if (v38 <= v36)
    {
      MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<true>(a1, &v77, (__int16)v66, (uint64_t)v17, (__int16)v35, a4, a5, (uint64_t)&v76);
      unsigned int v16 = v77;
    }
LABEL_97:
    if ((v16 & 0x3C000000) != 0)
    {
      unint64_t v44 = 1;
      while (1)
      {
        unint64_t v45 = (unsigned __int8 *)v35;
        if (v33 != (unsigned __int8 *)v35) {
          break;
        }
LABEL_123:
        BOOL v50 = v44++ >= ((v16 >> 26) & 0xF) || (unint64_t)v45 > v8;
        uint64_t v33 = v45;
        if (v50) {
          goto LABEL_131;
        }
      }
      MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<true>(a1, &v77, (__int16)v66, (uint64_t)v17, (__int16)v33, a4, a5, (uint64_t)&v76);
      unint64_t v46 = v8 - (void)v33;
      if ((*(_DWORD *)(a1 + 1288) - 3) <= 2)
      {
        if (v46 < 2)
        {
          uint64_t v48 = 0;
          unsigned __int16 v47 = 0;
        }
        else
        {
          unsigned __int16 v47 = *(_WORD *)v33;
          uint64_t v48 = 2;
        }
        goto LABEL_121;
      }
      unsigned __int16 v47 = *v33;
      if ((char)*v33 < 0)
      {
        if (v46 < 2 || (v47 & 0xE0) != 0xC0)
        {
          if (v46 >= 3)
          {
            if ((v47 & 0xF0) == 0xE0)
            {
              unsigned __int16 v47 = (v47 << 12) | ((v33[1] & 0x3F) << 6) | v33[2] & 0x3F;
              uint64_t v48 = 3;
              goto LABEL_121;
            }
            if (v46 >= 4)
            {
              if ((v47 & 0xF8) == 0xF0)
              {
                unsigned __int16 v47 = 0;
                uint64_t v48 = 4;
                goto LABEL_121;
              }
              if (v46 >= 5)
              {
                if ((v47 & 0xFC) == 0xF8)
                {
                  unsigned __int16 v47 = 0;
                  uint64_t v48 = 5;
                  goto LABEL_121;
                }
                if (v46 >= 6 && (v47 & 0xFE) == 0xFC)
                {
                  unsigned __int16 v47 = 0;
                  uint64_t v48 = 6;
                  goto LABEL_121;
                }
              }
            }
          }
          unsigned __int16 v47 = 0;
          goto LABEL_104;
        }
        uint64_t v48 = 2;
        unsigned __int16 v47 = v33[1] & 0x3F | ((v47 & 0x1F) << 6);
      }
      else
      {
LABEL_104:
        uint64_t v48 = 1;
      }
LABEL_121:
      unsigned int v16 = v77;
      if ((*(_DWORD *)(*(void *)(a1 + 1280) + 4 * v47) & v77 & 0x3FFFF) == 0) {
        goto LABEL_130;
      }
      unint64_t v45 = &v33[v48];
      goto LABEL_123;
    }
LABEL_130:
    LOWORD(v4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = (_WORD)v33;
LABEL_131:
    uint64_t v19 = v76;
    if (v76) {
      return v19;
    }
    MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<true>(a1, &v77, (__int16)v66, (uint64_t)v17, (__int16)v45, a4, a5, (uint64_t)&v76);
    uint64_t v19 = v76;
    if (v76) {
      return v19;
    }
    BOOL v51 = v17;
    while (2)
    {
      unint64_t v52 = v8 - (void)v51;
      if ((*(_DWORD *)(a1 + 1288) - 3) > 2)
      {
        unsigned __int16 v53 = *v51;
        if ((char)*v51 < 0)
        {
          if (v52 >= 2 && (v53 & 0xE0) == 0xC0)
          {
            uint64_t v54 = 2;
            unsigned __int16 v53 = v51[1] & 0x3F | ((v53 & 0x1F) << 6);
            goto LABEL_155;
          }
          if (v52 >= 3)
          {
            if ((v53 & 0xF0) == 0xE0)
            {
              unsigned __int16 v53 = (v53 << 12) | ((v51[1] & 0x3F) << 6) | v51[2] & 0x3F;
              uint64_t v54 = 3;
              goto LABEL_155;
            }
            if (v52 >= 4)
            {
              if ((v53 & 0xF8) == 0xF0)
              {
                unsigned __int16 v53 = 0;
                uint64_t v54 = 4;
                goto LABEL_155;
              }
              if (v52 >= 5)
              {
                if ((v53 & 0xFC) == 0xF8)
                {
                  unsigned __int16 v53 = 0;
                  uint64_t v54 = 5;
                  goto LABEL_155;
                }
                if (v52 >= 6 && (v53 & 0xFE) == 0xFC)
                {
                  unsigned __int16 v53 = 0;
                  uint64_t v54 = 6;
                  goto LABEL_155;
                }
              }
            }
          }
          unsigned __int16 v53 = 0;
        }
        uint64_t v54 = 1;
      }
      else if (v52 < 2)
      {
        uint64_t v54 = 0;
        unsigned __int16 v53 = 0;
      }
      else
      {
        unsigned __int16 v53 = *(_WORD *)v51;
        uint64_t v54 = 2;
      }
LABEL_155:
      unsigned int v77 = *(_DWORD *)(*(void *)(a1 + 1280) + 4 * v53);
      v51 += v54;
      if ((unint64_t)v51 > v8
        || (uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 64))(a5),
            (*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(void *)a5 + 248))(a5, &v51[-v55]) != 2))
      {
        MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<true>(a1, &v77, (__int16)v66, (uint64_t)v17, (__int16)v51, a4, a5, (uint64_t)&v76);
        uint64_t v19 = v76;
        if (!v76)
        {
          double v56 = MeCab::FreeList<mecab_node_t>::alloc(*(void **)(a4 + 24));
          uint64_t v19 = v57;
          *(unsigned char *)(v57 + 90) = v77 >> 18;
          *(void *)(v57 + 64) = v17;
          *(_WORD *)(v57 + 80) = (_WORD)v51 - (_WORD)v17;
          *(_WORD *)(v57 + 82) = (_WORD)v51 - (_WORD)v66;
          *(unsigned char *)(v57 + 91) = 1;
          *(void *)(v57 + 24) = 0;
          unsigned int v58 = &v66[-(*(uint64_t (**)(uint64_t, double))(*(void *)a5 + 64))(a5, v56)];
          uint64_t v59 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)a5 + 256))(a5, v58);
          *(void *)(v19 + 72) = v59;
          if (!v59)
          {
            uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"(", 1);
            uint64_t v61 = (void *)std::ostream::operator<<();
            uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)") [", 3);
            uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"new_node->feature", 17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"] ", 2);
            MeCab::die::~die((MeCab::die *)&v75);
          }
        }
        return v19;
      }
      continue;
    }
  }
  return v19;
}

void sub_212909020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_21290902C()
{
  _Unwind_Resume(v0);
}

uint64_t MeCab::anonymous namespace'::is_valid_node<mecab_node_t>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = v4 - (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1) + *(unsigned __int16 *)(a2 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, v5) != 2)
  {
    uint64_t v6 = *(void *)(a2 + 64);
    uint64_t v7 = v6
       + *(unsigned __int16 *)(a2 + 80)
       - *(unsigned __int16 *)(a2 + 82)
       - (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 256))(a1, v7);
    if (!v8) {
      return 1;
    }
    uint64_t v9 = (const char *)v8;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, v7) == 1
      && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, v5) == 1)
    {
      if (strcmp(v9, "*")) {
        operator new[]();
      }
      return 1;
    }
  }
  return 0;
}

void sub_21290962C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15) {
    MEMORY[0x2166855A0](a15, 0x10C80436913F5);
  }
  if (a18) {
    MEMORY[0x2166855A0](a18, 0x1000C8077774924);
  }
  if (a21) {
    MEMORY[0x2166855A0](a21, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Tokenizer<mecab_node_t,mecab_path_t>::addUnknownNodes<true>(uint64_t a1, _DWORD *a2, __int16 a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (uint64_t *)(*(void *)(a1 + 864) + 16 * ((unint64_t)*a2 >> 18));
  uint64_t v10 = v9[1];
  if (v10)
  {
    uint64_t v15 = *v9;
    __int16 v16 = a5 - a4;
    __int16 v17 = a5 - a3;
    do
    {
      MeCab::FreeList<mecab_node_t>::alloc(*(void **)(a6 + 24));
      uint64_t v19 = v18;
      *(_WORD *)(v18 + 86) = *(_WORD *)v15;
      *(_WORD *)(v18 + 84) = *(_WORD *)(v15 + 2);
      *(_WORD *)(v18 + 88) = *(_WORD *)(v15 + 4);
      *(_WORD *)(v18 + 92) = *(_WORD *)(v15 + 6);
      BOOL v20 = *(unsigned char *)(a1 + 766) == 1 && *(unsigned char *)(a1 + 765) == 1;
      uint64_t v21 = *(void *)(a1 + 408) + *(unsigned int *)(v15 + 8);
      if (v20) {
        uint64_t v21 = v15;
      }
      *(void *)(v18 + 72) = v21;
      *(unsigned char *)(v18 + 90) = *a2 >> 18;
      *(void *)(v18 + 64) = a4;
      *(_WORD *)(v18 + 80) = v16;
      *(_WORD *)(v18 + 82) = v17;
      *(unsigned char *)(v18 + 91) = 1;
      *(void *)(v18 + 24) = *(void *)a8;
      uint64_t v22 = *(void *)(a1 + 800);
      if (v22) {
        *(void *)(v18 + 72) = v22;
      }
        *(void *)a8 = v19;
      v15 += 12;
      --v10;
    }
    while (v10);
  }
  return *(void *)a8;
}

void MeCab::Tokenizer<mecab_node_t,mecab_path_t>::get_lastname_length()
{
}

void sub_212909AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    MEMORY[0x2166855A0](a11, 0x1000C8094CA146DLL);
  }
  _Unwind_Resume(exception_object);
}

void *MeCab::scoped_fixed_array<trie_search_result_type_t,512>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C4078;
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x2166855A0](v2, 0x1000C8094CA146DLL);
  }
  return a1;
}

unint64_t MeCab::Tokenizer<mecab_node_t,mecab_path_t>::getFeature(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4)
{
  unint64_t result = 0xFFFFFFFFLL;
  if (a2 && a3)
  {
    if (!*(_WORD *)(a2 + 80) || (*(unsigned char *)(a2 + 91) & 0xFE) == 2) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v6 + 725) == 1 && *(unsigned char *)(v6 + 726) == 1)
    {
      uint64_t v7 = *(void *)(a2 + 72);
      if (!v7) {
        return 0xFFFFFFFFLL;
      }
      if (*(_DWORD *)(v7 + 8) == 42)
      {
        *a3 = 42;
        return 1;
      }
      else
      {
        return MeCab::Dictionary::compressedFeature(v6, v7, (uint64_t)&MeCab::internal::kDecodeArray, (uint64_t)a3, a4);
      }
    }
    else
    {
      return MeCab::Dictionary::copyFeature(v6, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

unint64_t MeCab::Dictionary::compressedFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  marisa::Agent::Agent((marisa::Agent *)v14);
  marisa::Agent::set_query((uint64_t)v14, *(unsigned int *)(a2 + 8));
  marisa::Trie::reverse_lookup((marisa::grimoire::trie::LoudsTrie **)(a1 + 728), (marisa::Agent *)v14);
  unint64_t v10 = v15;
  if (v15)
  {
    unint64_t v11 = 0;
    uint64_t v12 = v14[3];
    while (*(unsigned char *)(v12 + v11))
    {
      *(_WORD *)(a4 + 2 * v11) = *(_WORD *)(a3 + 2 * *(unsigned __int8 *)(v12 + v11));
      if (v11 > a5)
      {
        unint64_t v11 = 0xFFFFFFFFLL;
        break;
      }
      if (v10 == ++v11)
      {
        unint64_t v11 = v10;
        break;
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  marisa::Agent::~Agent((marisa::Agent *)v14);
  return v11;
}

void sub_212909CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MeCab::Dictionary::copyFeature(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = *(_WORD **)(a2 + 72);
  int v5 = (unsigned __int16)*v4;
  if (*(_DWORD *)(a1 + 720) != 1)
  {
    if (*v4)
    {
      uint64_t v11 = 0;
      do
      {
        if (a4 <= (v11 * 2) >> 1) {
          break;
        }
        *(_WORD *)(a3 + v11 * 2) = v5;
        int v5 = (unsigned __int16)v4[++v11];
      }
      while (v5);
      uint64_t v7 = &v4[v11];
      return v7 - v4;
    }
LABEL_17:
    uint64_t v7 = *(_WORD **)(a2 + 72);
    return v7 - v4;
  }
  if (!*v4) {
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(_WORD **)(a2 + 72);
  do
  {
    if (a4 <= (v6 * 2) >> 1) {
      break;
    }
    uint64_t v8 = &v4[++v6];
    if (v5 == 44) {
      uint64_t v7 = &v4[v6];
    }
    int v5 = (unsigned __int16)*v8;
  }
  while (*v8);
  uint64_t v9 = &v4[v6];
  if (v7 == &v4[v6])
  {
    uint64_t v4 = v7;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      *(_WORD *)(a3 + v10 * 2) = v7[v10];
      ++v10;
    }
    while (&v7[v10] != v9);
    uint64_t v4 = v7;
    uint64_t v7 = v9;
  }
  return v7 - v4;
}

uint64_t MeCab::Tokenizer<mecab_node_t,mecab_path_t>::open(void *a1, const MeCab::Param *a2)
{
  MeCab::Tokenizer<mecab_node_t,mecab_path_t>::close(a1);
  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v23);
  std::string::basic_string[abi:ne180100]<0>(&v20, "unk.dic");
  MeCab::create_filename((uint64_t)&v23, (uint64_t)&v20, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  char v5 = MeCab::Dictionary::open((MeCab::Dictionary *)(a1 + 5), (std::string::value_type *)p_p, "r");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21 < 0)
  {
    operator delete(v20);
    if (v5) {
      goto LABEL_8;
    }
LABEL_11:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[199] - 24) + 1592), 0);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 199, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"unkdic_.open(create_filename (prefix, UNK_DIC_FILE).c_str())", 60);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    uint64_t v11 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 59));
    std::string::basic_string[abi:ne180100]<0>(&__p, v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    goto LABEL_23;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (MeCab::CharProperty::open((MeCab::CharProperty *)(a1 + 113), a2)) {
    operator new();
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[199] - 24) + 1592), 0);
  unsigned __int16 v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 199, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
  unsigned int v15 = (void *)std::ostream::operator<<();
  __int16 v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
  __int16 v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"property_.open(param)", 21);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
  uint64_t v18 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 162));
  std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &__p;
  }
  else {
    uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
LABEL_23:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_21290AC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    MEMORY[0x2166855A0](a19, 0x10C80436913F5);
  }
  if (a22) {
    MEMORY[0x2166855A0](a22, 0x1000C8077774924);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  _Unwind_Resume(exception_object);
}

BOOL MeCab::Dictionary::isCompatible(MeCab::Dictionary *this, const MeCab::Dictionary *a2)
{
  if (*((_DWORD *)this + 96) != *((_DWORD *)a2 + 96)
    || *((_DWORD *)this + 99) != *((_DWORD *)a2 + 99)
    || *((_DWORD *)this + 100) != *((_DWORD *)a2 + 100))
  {
    return 0;
  }
  int v3 = MeCab::decode_charset(*((MeCab **)this + 47), (const char *)a2);
  return v3 == MeCab::decode_charset(*((MeCab **)a2 + 47), v4);
}

double MeCab::FreeList<mecab_dictionary_info_t>::alloc(void *a1)
{
  uint64_t v1 = a1[5];
  unint64_t v2 = a1[6];
  uint64_t v3 = a1[4];
  if (v3 == v2)
  {
    uint64_t v3 = 0;
    ++v1;
    a1[4] = 0;
    a1[5] = v1;
  }
  uint64_t v4 = a1[1];
  if (v1 == (a1[2] - v4) >> 3)
  {
    is_mul_ok(v2, 0x30uLL);
    operator new[]();
  }
  uint64_t v5 = *(void *)(v4 + 8 * v1);
  a1[4] = v3 + 1;
  uint64_t v6 = (_OWORD *)(v5 + 48 * v3);
  double result = 0.0;
  v6[1] = 0u;
  v6[2] = 0u;
  *uint64_t v6 = 0u;
  return result;
}

void MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::Tokenizer(uint64_t a1)
{
  *(void *)a1 = &unk_26C3C3C18;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  MeCab::Dictionary::Dictionary((MeCab::Dictionary *)(a1 + 40));
  MeCab::scoped_string::scoped_string((MeCab::scoped_string *)(a1 + 776));
}

void sub_21290B0E0(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;
  MeCab::CharProperty::~CharProperty(v6);
  uint64_t v8 = (void *)v1[108];
  if (v8)
  {
    v1[109] = v8;
    operator delete(v8);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(v4);
  v1[99] = &unk_26C3C3620;
  uint64_t v9 = v1[100];
  if (v9) {
    MEMORY[0x2166855A0](v9, 0x1000C8077774924);
  }
  v1[97] = &unk_26C3C3620;
  uint64_t v10 = v1[98];
  if (v10) {
    MEMORY[0x2166855A0](v10, 0x1000C8077774924);
  }
  MeCab::Dictionary::~Dictionary(v2);
  uint64_t v11 = *v5;
  if (*v5)
  {
    v1[2] = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::lookup<false>(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  __int16 v5 = (__int16)a2;
  uint64_t v6 = a1;
  unsigned int v65 = 0;
  uint64_t v64 = 0;
  if (a3 - (unint64_t)a2 <= 0xFFFE) {
    unint64_t v7 = a3;
  }
  else {
    unint64_t v7 = (unint64_t)(a2 + 0xFFFF);
  }
  if (v7 <= (unint64_t)a2)
  {
    unsigned int v14 = 0;
    uint64_t v13 = 0;
    unsigned int v15 = a2;
    goto LABEL_33;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 896);
  uint64_t v9 = *(unsigned int **)(a1 + 1280);
  uint64_t v10 = a2;
  while (1)
  {
    unint64_t v11 = v7 - (void)v10;
    if ((*(_DWORD *)(a1 + 1288) - 3) <= 2) {
      break;
    }
    unsigned __int16 v12 = *v10;
    if (((char)*v10 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    if (v11 >= 2 && (v12 & 0xE0) == 0xC0)
    {
      uint64_t v13 = 2;
      unsigned __int16 v12 = v10[1] & 0x3F | ((v12 & 0x1F) << 6);
    }
    else
    {
      if (v11 < 3) {
        goto LABEL_29;
      }
      if ((v12 & 0xF0) == 0xE0)
      {
        unsigned __int16 v12 = (v12 << 12) | ((v10[1] & 0x3F) << 6) | v10[2] & 0x3F;
        uint64_t v13 = 3;
      }
      else
      {
        if (v11 < 4) {
          goto LABEL_29;
        }
        if ((v12 & 0xF8) == 0xF0)
        {
          unsigned __int16 v12 = 0;
          uint64_t v13 = 4;
        }
        else
        {
          if (v11 < 5) {
            goto LABEL_29;
          }
          if ((v12 & 0xFC) == 0xF8)
          {
            unsigned __int16 v12 = 0;
            uint64_t v13 = 5;
          }
          else
          {
            if (v11 < 6 || (v12 & 0xFE) != 0xFC)
            {
LABEL_29:
              unsigned __int16 v12 = 0;
LABEL_10:
              uint64_t v13 = 1;
              goto LABEL_26;
            }
            unsigned __int16 v12 = 0;
            uint64_t v13 = 6;
          }
        }
      }
    }
LABEL_26:
    unsigned int v14 = v9[v12];
    if ((v8 & v14 & 0x3FFFF) != 0)
    {
      v10 += v13;
      unsigned int v8 = v9[v12];
      if ((unint64_t)v10 < v7) {
        continue;
      }
    }
    unsigned int v65 = v9[v12];
LABEL_32:
    unsigned int v15 = v10;
    goto LABEL_33;
  }
  if (v11 >= 2)
  {
    unsigned __int16 v12 = *(_WORD *)v10;
    uint64_t v13 = 2;
    goto LABEL_26;
  }
  uint64_t v13 = 0;
  unsigned int v15 = 0;
  unsigned int v14 = *v9;
  unsigned int v65 = v14;
  if ((v8 & v14 & 0x3FFFF) == 0) {
    goto LABEL_32;
  }
LABEL_33:
  __int16 v16 = *(uint64_t **)(a1 + 8);
  if (v16 != *(uint64_t **)(a1 + 16))
  {
    uint64_t v52 = v13;
    unint64_t v53 = v7;
    unsigned int v57 = v14;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v59 = v15;
    uint64_t v61 = *(void *)(a4 + 112);
    __int16 v54 = (__int16)a2;
    unsigned int v55 = v7 - v15;
    __int16 v63 = (_WORD)v15 - (_WORD)a2;
    BOOL v20 = v15;
    do
    {
      char v21 = v16;
      uint64_t v60 = MeCab::Dictionary::commonPrefixSearch(*v16, v15, v55, v61, 0x200uLL);
      if (v60)
      {
        uint64_t v22 = 0;
        std::string v23 = v21;
        do
        {
          uint64_t v62 = v22;
          uint64_t v24 = v61 + 16 * v22;
          uint64_t v25 = *(_DWORD *)(v24 + 8);
          if (*(_DWORD *)(v24 + 8))
          {
            uint64_t v26 = (__int16 *)(v24 + 12);
            uint64_t v27 = *(void *)(*v23 + 352) + 12 * (*(_DWORD *)(v24 + 8) >> 8) + 4;
            do
            {
              MeCab::FreeList<mecab_learner_node_t>::alloc(*(void **)(a4 + 24));
              std::string v23 = v21;
              uint64_t v17 = v28;
              uint64_t v29 = *v21;
              *(_WORD *)(v28 + 82) = *(_WORD *)(v27 - 4);
              *(_WORD *)(v28 + 80) = *(_WORD *)(v27 - 2);
              *(_WORD *)(v28 + 84) = *(_WORD *)v27;
              *(double *)(v28 + 112) = (double)*(__int16 *)(v27 + 2);
              uint64_t v30 = *(void *)(v29 + 368) + *(unsigned int *)(v27 + 4);
              __int16 v31 = *v26;
              *(_WORD *)(v28 + 76) = *v26;
              *(_WORD *)(v28 + 78) = v31 + v63;
              *(void *)(v28 + 56) = v20;
              *(void *)(v28 + 64) = v30;
              *(_WORD *)(v28 + 86) = (v57 >> 18);
              *(void *)(v28 + 24) = v18;
              v27 += 12;
              uint64_t v18 = v28;
              --v25;
            }
            while (v25);
          }
          uint64_t v22 = v62 + 1;
        }
        while ((int *)(v62 + 1) != v60);
      }
      else
      {
        std::string v23 = v21;
      }
      __int16 v16 = v23 + 1;
      uint64_t v6 = a1;
      unsigned int v15 = v59;
    }
    while (v16 != *(uint64_t **)(a1 + 16));
    uint64_t v64 = v17;
    uint64_t v4 = a4;
    unint64_t v7 = v53;
    __int16 v5 = v54;
    unsigned int v14 = v57;
    uint64_t v13 = v52;
    if ((v57 & 0x80000000) == 0)
    {
      if (v18) {
        return v18;
      }
    }
  }
  uint64_t v32 = &v15[v13];
  if ((unint64_t)&v15[v13] > v7)
  {
    MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::addUnknownNodes<false>((void *)v6, &v65, v5, (uint64_t)v15, (_WORD)v15 + v13, v4, &v64);
    return v33;
  }
  if (*(unsigned char *)(v6 + 1888))
  {
    if (*(void *)(v6 + 1880) == (v14 >> 18))
    {
      uint64_t v34 = Thai::seekToSyllableEnd((unsigned __int16 *)v15, v7);
      if (v15 < (unsigned __int8 *)v34)
      {
        MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::addUnknownNodes<false>((void *)v6, &v65, v5, (uint64_t)v15, (__int16)v34, v4, &v64);
        unsigned int v14 = v65;
      }
    }
  }
  if ((v14 & 0x40000000) == 0)
  {
    uint64_t v35 = 0;
    goto LABEL_88;
  }
  unint64_t v36 = *(void *)(v6 + 1584);
  unint64_t v37 = &v32[2 * v36];
  if (v7 - (unint64_t)v32 < 2 * v36) {
    unint64_t v37 = (unsigned __int8 *)v7;
  }
  if (v32 >= v37)
  {
    unint64_t v38 = 0;
    uint64_t v35 = (char *)v32;
    goto LABEL_85;
  }
  unint64_t v38 = 0;
  uint64_t v35 = (char *)v32;
  unsigned int v39 = v14;
  while (2)
  {
    unint64_t v40 = v37 - (unsigned __int8 *)v35;
    if ((*(_DWORD *)(v6 + 1288) - 3) > 2)
    {
      unsigned __int16 v41 = *v35;
      if (*v35 < 0)
      {
        if (v40 >= 2 && (v41 & 0xE0) == 0xC0)
        {
          uint64_t v42 = 2;
          unsigned __int16 v41 = v35[1] & 0x3F | ((v41 & 0x1F) << 6);
          goto LABEL_78;
        }
        if (v40 >= 3)
        {
          if ((v41 & 0xF0) == 0xE0)
          {
            unsigned __int16 v41 = (v41 << 12) | ((v35[1] & 0x3F) << 6) | v35[2] & 0x3F;
            uint64_t v42 = 3;
            goto LABEL_78;
          }
          if (v40 >= 4)
          {
            if ((v41 & 0xF8) == 0xF0)
            {
              unsigned __int16 v41 = 0;
              uint64_t v42 = 4;
              goto LABEL_78;
            }
            if (v40 >= 5)
            {
              if ((v41 & 0xFC) == 0xF8)
              {
                unsigned __int16 v41 = 0;
                uint64_t v42 = 5;
                goto LABEL_78;
              }
              if (v40 >= 6 && (v41 & 0xFE) == 0xFC)
              {
                unsigned __int16 v41 = 0;
                uint64_t v42 = 6;
                goto LABEL_78;
              }
            }
          }
        }
        unsigned __int16 v41 = 0;
      }
      uint64_t v42 = 1;
LABEL_78:
      unsigned int v43 = *(_DWORD *)(*(void *)(v6 + 1280) + 4 * v41);
      if ((v39 & v43 & 0x3FFFF) == 0) {
        goto LABEL_86;
      }
      v35 += v42;
      ++v38;
      unsigned int v39 = v43;
      if (v35 >= (char *)v37) {
        goto LABEL_86;
      }
      continue;
    }
    break;
  }
  if (v40 >= 2)
  {
    unsigned __int16 v41 = *(_WORD *)v35;
    uint64_t v42 = 2;
    goto LABEL_78;
  }
  if ((v39 & **(_DWORD **)(v6 + 1280) & 0x3FFFF) != 0) {
    return v64;
  }
LABEL_85:
  if (!v35) {
    return v64;
  }
LABEL_86:
  if (v38 <= v36)
  {
    MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::addUnknownNodes<false>((void *)v6, &v65, v5, (uint64_t)v15, (__int16)v35, v4, &v64);
    unsigned int v14 = v65;
  }
LABEL_88:
  if ((v14 & 0x3C000000) != 0)
  {
    unint64_t v44 = 1;
    while (1)
    {
      unint64_t v45 = (unsigned __int8 *)v35;
      if (v32 != (unsigned __int8 *)v35) {
        break;
      }
LABEL_102:
      BOOL v50 = v44++ >= ((v14 >> 26) & 0xF) || (unint64_t)v45 > v7;
      uint64_t v32 = v45;
      if (v50) {
        goto LABEL_122;
      }
    }
    MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::addUnknownNodes<false>((void *)v6, &v65, v5, (uint64_t)v15, (__int16)v32, v4, &v64);
    unint64_t v46 = v7 - (void)v32;
    if ((*(_DWORD *)(v6 + 1288) - 3) <= 2)
    {
      if (v46 < 2)
      {
        uint64_t v48 = 0;
        unsigned __int16 v47 = 0;
      }
      else
      {
        unsigned __int16 v47 = *(_WORD *)v32;
        uint64_t v48 = 2;
      }
      goto LABEL_100;
    }
    unsigned __int16 v47 = *v32;
    if ((char)*v32 < 0)
    {
      if (v46 < 2 || (v47 & 0xE0) != 0xC0)
      {
        if (v46 >= 3)
        {
          if ((v47 & 0xF0) == 0xE0)
          {
            unsigned __int16 v47 = (v47 << 12) | ((v32[1] & 0x3F) << 6) | v32[2] & 0x3F;
            uint64_t v48 = 3;
            goto LABEL_100;
          }
          if (v46 >= 4)
          {
            if ((v47 & 0xF8) == 0xF0)
            {
              unsigned __int16 v47 = 0;
              uint64_t v48 = 4;
              goto LABEL_100;
            }
            if (v46 >= 5)
            {
              if ((v47 & 0xFC) == 0xF8)
              {
                unsigned __int16 v47 = 0;
                uint64_t v48 = 5;
                goto LABEL_100;
              }
              if (v46 >= 6 && (v47 & 0xFE) == 0xFC)
              {
                unsigned __int16 v47 = 0;
                uint64_t v48 = 6;
                goto LABEL_100;
              }
            }
          }
        }
        unsigned __int16 v47 = 0;
        goto LABEL_95;
      }
      uint64_t v48 = 2;
      unsigned __int16 v47 = v32[1] & 0x3F | ((v47 & 0x1F) << 6);
    }
    else
    {
LABEL_95:
      uint64_t v48 = 1;
    }
LABEL_100:
    unsigned int v14 = v65;
    if ((*(_DWORD *)(*(void *)(v6 + 1280) + 4 * v47) & v65 & 0x3FFFF) == 0) {
      goto LABEL_121;
    }
    unint64_t v45 = &v32[v48];
    goto LABEL_102;
  }
LABEL_121:
  LOWORD(v4marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = (_WORD)v32;
LABEL_122:
  uint64_t v18 = v64;
  if (!v64)
  {
    MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::addUnknownNodes<false>((void *)v6, &v65, v5, (uint64_t)v15, (__int16)v45, v4, &v64);
    return v64;
  }
  return v18;
}

void MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::addUnknownNodes<false>(void *a1, _DWORD *a2, __int16 a3, uint64_t a4, __int16 a5, uint64_t a6, void *a7)
{
  unsigned int v8 = (void *)(a1[108] + 16 * ((unint64_t)*a2 >> 18));
  uint64_t v9 = v8[1];
  if (v9)
  {
    __int16 v14 = a5 - a4;
    __int16 v15 = a5 - a3;
    uint64_t v16 = *v8 + 4;
    do
    {
      MeCab::FreeList<mecab_learner_node_t>::alloc(*(void **)(a6 + 24));
      *(_WORD *)(v17 + 82) = *(_WORD *)(v16 - 4);
      *(_WORD *)(v17 + 80) = *(_WORD *)(v16 - 2);
      *(_WORD *)(v17 + 84) = *(_WORD *)v16;
      *(double *)(v17 + 112) = (double)*(__int16 *)(v16 + 2);
      *(void *)(v17 + 64) = a1[51] + *(unsigned int *)(v16 + 4);
      *(unsigned char *)(v17 + 86) = *a2 >> 18;
      *(void *)(v17 + 56) = a4;
      *(_WORD *)(v17 + 76) = v14;
      *(_WORD *)(v17 + 78) = v15;
      *(unsigned char *)(v17 + 87) = 1;
      *(void *)(v17 + 24) = *a7;
      uint64_t v18 = a1[100];
      if (v18) {
        *(void *)(v17 + 64) = v18;
      }
      v16 += 12;
      *a7 = v17;
      --v9;
    }
    while (v9);
  }
}

uint64_t MeCab::Tokenizer<mecab_learner_node_t,mecab_learner_path_t>::open(void *a1, const MeCab::Param *a2)
{
  MeCab::Tokenizer<mecab_node_t,mecab_path_t>::close(a1);
  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v23);
  std::string::basic_string[abi:ne180100]<0>(&v20, "unk.dic");
  MeCab::create_filename((uint64_t)&v23, (uint64_t)&v20, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  char v5 = MeCab::Dictionary::open((MeCab::Dictionary *)(a1 + 5), (std::string::value_type *)p_p, "r");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21 < 0)
  {
    operator delete(v20);
    if (v5) {
      goto LABEL_8;
    }
LABEL_11:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[199] - 24) + 1592), 0);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 199, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    unint64_t v7 = (void *)std::ostream::operator<<();
    unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"unkdic_.open(create_filename (prefix, UNK_DIC_FILE).c_str())", 60);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    unint64_t v11 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 59));
    std::string::basic_string[abi:ne180100]<0>(&__p, v11);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int16 v12 = &__p;
    }
    else {
      unsigned __int16 v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    goto LABEL_23;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (MeCab::CharProperty::open((MeCab::CharProperty *)(a1 + 113), a2)) {
    operator new();
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[199] - 24) + 1592), 0);
  __int16 v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 199, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
  __int16 v15 = (void *)std::ostream::operator<<();
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"property_.open(param)", 21);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
  uint64_t v18 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 162));
  std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned __int16 v12 = &__p;
  }
  else {
    unsigned __int16 v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
LABEL_23:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_21290C8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a19) {
    MEMORY[0x2166855A0](a19, 0x10C80436913F5);
  }
  if (a22) {
    MEMORY[0x2166855A0](a22, 0x1000C8077774924);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  _Unwind_Resume(exception_object);
}

void MeCab::scoped_fixed_array<trie_search_result_type_t,512>::~scoped_fixed_array(void *a1)
{
  *a1 = &unk_26C3C4078;
  uint64_t v1 = a1[1];
  if (v1) {
    MEMORY[0x2166855A0](v1, 0x1000C8094CA146DLL);
  }

  JUMPOUT(0x2166855D0);
}

void MeCab::Writer::Writer(MeCab::Writer *this)
{
  *(void *)this = &unk_26C3C38B8;
  MeCab::scoped_string::scoped_string((MeCab::Writer *)((char *)this + 8));
}

void sub_21290CBB4(_Unwind_Exception *exception_object)
{
  v1[9] = &unk_26C3C3620;
  uint64_t v3 = v1[10];
  if (v3) {
    MEMORY[0x2166855A0](v3, 0x1000C8077774924);
  }
  v1[7] = &unk_26C3C3620;
  uint64_t v4 = v1[8];
  if (v4) {
    MEMORY[0x2166855A0](v4, 0x1000C8077774924);
  }
  v1[5] = &unk_26C3C3620;
  uint64_t v5 = v1[6];
  if (v5) {
    MEMORY[0x2166855A0](v5, 0x1000C8077774924);
  }
  v1[3] = &unk_26C3C3620;
  uint64_t v6 = v1[4];
  if (v6) {
    MEMORY[0x2166855A0](v6, 0x1000C8077774924);
  }
  v1[1] = &unk_26C3C3620;
  uint64_t v7 = v1[2];
  if (v7) {
    MEMORY[0x2166855A0](v7, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Writer::writeLattice(uint64_t a1, uint64_t a2, MeCab::StringBuffer *a3)
{
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) + 8);
  uint64_t v5 = (uint64_t *)(v4 + 8);
  if (*(void *)(v4 + 8))
  {
    do
    {
      uint64_t v6 = *(const void **)(v4 + 64);
      size_t v7 = *(unsigned __int16 *)(v4 + 80);
      if (MeCab::StringBuffer::reserve(a3, v7))
      {
        memcpy((void *)(*((void *)a3 + 3) + *((void *)a3 + 1)), v6, v7);
        *((void *)a3 + 1) += v7;
      }
      if (MeCab::StringBuffer::reserve(a3, 1)) {
        *(unsigned char *)(*((void *)a3 + 3) + (*((void *)a3 + 1))++) = 9;
      }
      unsigned int v8 = MeCab::StringBuffer::write(a3, *(const char **)(v4 + 72));
      if (MeCab::StringBuffer::reserve(v8, 1)) {
        *(unsigned char *)(*((void *)a3 + 3) + (*((void *)a3 + 1))++) = 10;
      }
      uint64_t v4 = *v5;
      uint64_t v9 = *v5;
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v5 = (uint64_t *)(v9 + 8);
    }
    while (v10);
  }
  MeCab::StringBuffer::write(a3, "EOS\n");
  return 1;
}

void MeCab::Writer::~Writer(void **this)
{
  *this = &unk_26C3C38B8;
  unint64_t v2 = (char *)(this + 11);
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  uint64_t v3 = MEMORY[0x263F8C2C8];
  uint64_t v4 = *MEMORY[0x263F8C2C8];
  this[11] = (void *)*MEMORY[0x263F8C2C8];
  *(void *)&v2[*(void *)(v4 - 24)] = *(void *)(v3 + 24);
  this[12] = (void *)(MEMORY[0x263F8C318] + 16);
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x216685570](this + 25);
  this[9] = &unk_26C3C3620;
  uint64_t v5 = this[10];
  if (v5) {
    MEMORY[0x2166855A0](v5, 0x1000C8077774924);
  }
  this[7] = &unk_26C3C3620;
  uint64_t v6 = this[8];
  if (v6) {
    MEMORY[0x2166855A0](v6, 0x1000C8077774924);
  }
  this[5] = &unk_26C3C3620;
  size_t v7 = this[6];
  if (v7) {
    MEMORY[0x2166855A0](v7, 0x1000C8077774924);
  }
  this[3] = &unk_26C3C3620;
  unsigned int v8 = this[4];
  if (v8) {
    MEMORY[0x2166855A0](v8, 0x1000C8077774924);
  }
  this[1] = &unk_26C3C3620;
  uint64_t v9 = this[2];
  if (v9) {
    MEMORY[0x2166855A0](v9, 0x1000C8077774924);
  }
}

{
  uint64_t vars8;

  MeCab::Writer::~Writer(this);

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::Writer::open(MeCab::Writer *this, const MeCab::Param *a2)
{
  MeCab::Param::get<std::string>((uint64_t)a2, "output-format-type", &v109);
  *((void *)this + 47) = MeCab::Writer::writeLattice;
  *((void *)this + 48) = 0;
  std::string::size_type size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v109.__r_.__value_.__l.__size_;
  }
  switch(size)
  {
    case 2uLL:
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v10 = &v109;
      }
      else {
        uint64_t v10 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      int data_low = LOWORD(v10->__r_.__value_.__l.__data_);
      uint64_t v9 = MeCab::Writer::writeEM;
      int v12 = 28005;
LABEL_22:
      if (data_low != v12) {
        break;
      }
LABEL_95:
      *((void *)this + 47) = v9;
      *((void *)this + 48) = 0;
LABEL_284:
      uint64_t v92 = 1;
      goto LABEL_287;
    case 4uLL:
      uint64_t v13 = &v109;
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v13 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      uint64_t v9 = MeCab::Writer::writeNone;
      if (LODWORD(v13->__r_.__value_.__l.__data_) == 1701736302) {
        goto LABEL_95;
      }
      int data_low = (int)v13->__r_.__value_.__l.__data_;
      uint64_t v9 = MeCab::Writer::writeDump;
      int v12 = 1886221668;
      goto LABEL_22;
    case 6uLL:
      uint64_t v5 = &v109;
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v5 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      int data = (int)v5->__r_.__value_.__l.__data_;
      int v7 = WORD2(v5->__r_.__value_.__r.__words[0]);
      BOOL v8 = data == 1634427255 && v7 == 26996;
      uint64_t v9 = MeCab::Writer::writeWakati;
      if (v8) {
        goto LABEL_95;
      }
      break;
  }
  std::string::basic_string[abi:ne180100]<0>(&v108, "%m\\t%H\\n");
  std::string::basic_string[abi:ne180100]<0>(&v107, "%m\\t%H\\n");
  std::string::basic_string[abi:ne180100]<0>(&v106, (char *)&unk_2129160B6);
  std::string::basic_string[abi:ne180100]<0>(&v105, "EOS\\n");
  std::string::basic_string[abi:ne180100]<0>(&v104, (char *)&unk_2129160B6);
  std::string::basic_string[abi:ne180100]<0>(&v103, "node-format");
  std::string::basic_string[abi:ne180100]<0>(&v102, "bos-format");
  std::string::basic_string[abi:ne180100]<0>(&v101, "eos-format");
  std::string::basic_string[abi:ne180100]<0>(&v100, "unk-format");
  std::string::basic_string[abi:ne180100]<0>(&v99, "eon-format");
  std::string::size_type v14 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = v109.__r_.__value_.__l.__size_;
  }
  if (!v14) {
    goto LABEL_65;
  }
  std::string::append(&v103, "-", 1uLL);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v15 = &v109;
  }
  else {
    __int16 v15 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v109.__r_.__value_.__l.__size_;
  }
  std::string::append(&v103, (const std::string::value_type *)v15, v16);
  std::string::append(&v102, "-", 1uLL);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v109;
  }
  else {
    uint64_t v17 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = v109.__r_.__value_.__l.__size_;
  }
  std::string::append(&v102, (const std::string::value_type *)v17, v18);
  std::string::append(&v101, "-", 1uLL);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v109;
  }
  else {
    uint64_t v19 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v109.__r_.__value_.__l.__size_;
  }
  std::string::append(&v101, (const std::string::value_type *)v19, v20);
  std::string::append(&v100, "-", 1uLL);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v21 = &v109;
  }
  else {
    char v21 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v109.__r_.__value_.__l.__size_;
  }
  std::string::append(&v100, (const std::string::value_type *)v21, v22);
  std::string::append(&v99, "-", 1uLL);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v23 = &v109;
  }
  else {
    std::string v23 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = v109.__r_.__value_.__l.__size_;
  }
  std::string::append(&v99, (const std::string::value_type *)v23, v24);
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = &v103;
  }
  else {
    uint64_t v25 = (std::string *)v103.__r_.__value_.__r.__words[0];
  }
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v25, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
  }
  if (v26)
  {
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_64;
    }
LABEL_104:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v26) {
      goto LABEL_65;
    }
LABEL_105:
    char v49 = 0;
    goto LABEL_264;
  }
  std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 11) - 24) + 88), 0);
  unint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
  unsigned __int16 v41 = (void *)std::ostream::operator<<();
  uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)") [", 3);
  unsigned int v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"!tmp.empty()", 12);
  unint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
  unint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"unknown format type [", 21);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v46 = &v109;
  }
  else {
    unint64_t v46 = (std::string *)v109.__r_.__value_.__r.__words[0];
  }
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v47 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v47 = v109.__r_.__value_.__l.__size_;
  }
  uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"]", 1);
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_104;
  }
LABEL_64:
  if (!v26) {
    goto LABEL_105;
  }
LABEL_65:
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v27 = &v103;
  }
  else {
    uint64_t v27 = (std::string *)v103.__r_.__value_.__r.__words[0];
  }
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v27, &__p);
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v28 = &v102;
  }
  else {
    uint64_t v28 = (std::string *)v102.__r_.__value_.__r.__words[0];
  }
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v28, &__str);
  if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &v101;
  }
  else {
    uint64_t v29 = (std::string *)v101.__r_.__value_.__r.__words[0];
  }
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v29, &v96);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v30 = &v100;
  }
  else {
    uint64_t v30 = (std::string *)v100.__r_.__value_.__r.__words[0];
  }
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v30, &v95);
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v31 = &v99;
  }
  else {
    __int16 v31 = (std::string *)v99.__r_.__value_.__r.__words[0];
  }
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v31, &v94);
  uint64_t v32 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  std::string::size_type v33 = v108.__r_.__value_.__l.__size_;
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v108.__r_.__value_.__l.__size_;
  }
  std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
  }
  if (v34 != v35)
  {
    *((void *)this + 47) = MeCab::Writer::writeUser;
    *((void *)this + 48) = 0;
LABEL_164:
    std::string::operator=(&v108, &__p);
LABEL_165:
    uint64_t v67 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v106.__r_.__value_.__l.__size_;
    }
    std::string::size_type v69 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = __str.__r_.__value_.__l.__size_;
    }
    if (v68 == v69)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v106.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v106.__r_.__value_.__l.__data_, p_str, v106.__r_.__value_.__l.__size_)) {
          goto LABEL_182;
        }
      }
      else
      {
        if (!*((unsigned char *)&v106.__r_.__value_.__s + 23)) {
          goto LABEL_182;
        }
        uint64_t v71 = &v106;
        while (v71->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
        {
          uint64_t v71 = (std::string *)((char *)v71 + 1);
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v67) {
            goto LABEL_182;
          }
        }
      }
    }
    std::string::operator=(&v106, &__str);
LABEL_182:
    uint64_t v72 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v73 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v73 = v105.__r_.__value_.__l.__size_;
    }
    std::string::size_type v74 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v74 = v96.__r_.__value_.__l.__size_;
    }
    if (v73 == v74)
    {
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v75 = &v96;
      }
      else {
        char v75 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v105.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((unsigned char *)&v105.__r_.__value_.__s + 23))
        {
          uint64_t v76 = &v105;
          while (v76->__r_.__value_.__s.__data_[0] == v75->__r_.__value_.__s.__data_[0])
          {
            uint64_t v76 = (std::string *)((char *)v76 + 1);
            char v75 = (std::string *)((char *)v75 + 1);
            if (!--v72) {
              goto LABEL_199;
            }
          }
          goto LABEL_198;
        }
LABEL_199:
        uint64_t v77 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v78 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v78 = v107.__r_.__value_.__l.__size_;
        }
        std::string::size_type v79 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v79 = v95.__r_.__value_.__l.__size_;
        }
        p_p = &v95;
        if (v78 == v79)
        {
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((*((unsigned char *)&v107.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (memcmp(v107.__r_.__value_.__l.__data_, p_p, v107.__r_.__value_.__l.__size_))
            {
LABEL_214:
              p_p = &v95;
              goto LABEL_232;
            }
          }
          else if (*((unsigned char *)&v107.__r_.__value_.__s + 23))
          {
            uint64_t v81 = &v107;
            while (v81->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
            {
              uint64_t v81 = (std::string *)((char *)v81 + 1);
              p_p = (std::string *)((char *)p_p + 1);
              if (!--v77) {
                goto LABEL_215;
              }
            }
            goto LABEL_214;
          }
LABEL_215:
          uint64_t v82 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
          if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v83 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v83 = v108.__r_.__value_.__l.__size_;
          }
          std::string::size_type v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v84 = __p.__r_.__value_.__l.__size_;
          }
          p_p = &__p;
          if (v83 == v84)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&v108.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (memcmp(v108.__r_.__value_.__l.__data_, p_p, v108.__r_.__value_.__l.__size_))
              {
LABEL_230:
                p_p = &__p;
                goto LABEL_232;
              }
            }
            else if (*((unsigned char *)&v108.__r_.__value_.__s + 23))
            {
              long long v85 = &v108;
              while (v85->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
              {
                long long v85 = (std::string *)((char *)v85 + 1);
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v82) {
                  goto LABEL_231;
                }
              }
              goto LABEL_230;
            }
LABEL_231:
            p_p = &v108;
          }
        }
LABEL_232:
        std::string::operator=(&v107, p_p);
        uint64_t v86 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v87 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v87 = v104.__r_.__value_.__l.__size_;
        }
        std::string::size_type v88 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v88 = v94.__r_.__value_.__l.__size_;
        }
        if (v87 == v88)
        {
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v89 = &v94;
          }
          else {
            uint64_t v89 = (std::string *)v94.__r_.__value_.__r.__words[0];
          }
          if ((*((unsigned char *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(v104.__r_.__value_.__l.__data_, v89, v104.__r_.__value_.__l.__size_)) {
              goto LABEL_249;
            }
          }
          else
          {
            if (!*((unsigned char *)&v104.__r_.__value_.__s + 23)) {
              goto LABEL_249;
            }
            uint64_t v90 = &v104;
            while (v90->__r_.__value_.__s.__data_[0] == v89->__r_.__value_.__s.__data_[0])
            {
              uint64_t v90 = (std::string *)((char *)v90 + 1);
              uint64_t v89 = (std::string *)((char *)v89 + 1);
              if (!--v86) {
                goto LABEL_249;
              }
            }
          }
        }
        std::string::operator=(&v104, &v94);
LABEL_249:
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v91 = &v108;
        }
        else {
          int v91 = (std::string *)v108.__r_.__value_.__r.__words[0];
        }
        MeCab::scoped_string::reset_string((MeCab::Writer *)((char *)this + 8), (const char *)v91);
      }
      if (!memcmp(v105.__r_.__value_.__l.__data_, v75, v105.__r_.__value_.__l.__size_)) {
        goto LABEL_199;
      }
    }
LABEL_198:
    std::string::operator=(&v105, &v96);
    goto LABEL_199;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v36 = &__p;
  }
  else {
    unint64_t v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&v108.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    BOOL v50 = (const void *)v108.__r_.__value_.__r.__words[0];
    if (memcmp(v108.__r_.__value_.__l.__data_, v36, v108.__r_.__value_.__l.__size_))
    {
      *((void *)this + 47) = MeCab::Writer::writeUser;
      *((void *)this + 48) = 0;
      goto LABEL_163;
    }
  }
  else if (*((unsigned char *)&v108.__r_.__value_.__s + 23))
  {
    unint64_t v37 = &v108;
    unint64_t v38 = v36;
    uint64_t v39 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    while (v37->__r_.__value_.__s.__data_[0] == v38->__r_.__value_.__s.__data_[0])
    {
      unint64_t v37 = (std::string *)((char *)v37 + 1);
      unint64_t v38 = (std::string *)((char *)v38 + 1);
      if (!--v39) {
        goto LABEL_108;
      }
    }
    goto LABEL_156;
  }
LABEL_108:
  uint64_t v51 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v52 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v52 = v106.__r_.__value_.__l.__size_;
  }
  std::string::size_type v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v53 = __str.__r_.__value_.__l.__size_;
  }
  if (v52 != v53) {
    goto LABEL_156;
  }
  __int16 v54 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__str
      : (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((*((unsigned char *)&v106.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v106.__r_.__value_.__l.__data_, v54, v106.__r_.__value_.__l.__size_)) {
      goto LABEL_156;
    }
  }
  else if (*((unsigned char *)&v106.__r_.__value_.__s + 23))
  {
    unsigned int v55 = &v106;
    while (v55->__r_.__value_.__s.__data_[0] == v54->__r_.__value_.__s.__data_[0])
    {
      unsigned int v55 = (std::string *)((char *)v55 + 1);
      __int16 v54 = (std::string *)((char *)v54 + 1);
      if (!--v51) {
        goto LABEL_124;
      }
    }
    goto LABEL_156;
  }
LABEL_124:
  uint64_t v56 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v57 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v57 = v105.__r_.__value_.__l.__size_;
  }
  std::string::size_type v58 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v58 = v96.__r_.__value_.__l.__size_;
  }
  if (v57 != v58) {
    goto LABEL_156;
  }
  uint64_t v59 = (v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &v96
      : (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((*((unsigned char *)&v105.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v105.__r_.__value_.__l.__data_, v59, v105.__r_.__value_.__l.__size_)) {
      goto LABEL_156;
    }
  }
  else if (*((unsigned char *)&v105.__r_.__value_.__s + 23))
  {
    uint64_t v60 = &v105;
    while (v60->__r_.__value_.__s.__data_[0] == v59->__r_.__value_.__s.__data_[0])
    {
      uint64_t v60 = (std::string *)((char *)v60 + 1);
      uint64_t v59 = (std::string *)((char *)v59 + 1);
      if (!--v56) {
        goto LABEL_140;
      }
    }
    goto LABEL_156;
  }
LABEL_140:
  uint64_t v61 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v62 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v62 = v107.__r_.__value_.__l.__size_;
  }
  std::string::size_type v63 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v63 = v95.__r_.__value_.__l.__size_;
  }
  if (v62 != v63) {
    goto LABEL_156;
  }
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v64 = &v95;
  }
  else {
    uint64_t v64 = (std::string *)v95.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&v107.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((unsigned char *)&v107.__r_.__value_.__s + 23))
    {
      unsigned int v65 = &v107;
      while (v65->__r_.__value_.__s.__data_[0] == v64->__r_.__value_.__s.__data_[0])
      {
        unsigned int v65 = (std::string *)((char *)v65 + 1);
        uint64_t v64 = (std::string *)((char *)v64 + 1);
        if (!--v61) {
          goto LABEL_253;
        }
      }
      goto LABEL_156;
    }
    goto LABEL_253;
  }
  if (memcmp(v107.__r_.__value_.__l.__data_, v64, v107.__r_.__value_.__l.__size_))
  {
LABEL_156:
    *((void *)this + 47) = MeCab::Writer::writeUser;
    *((void *)this + 48) = 0;
    if ((v32 & 0x80) == 0)
    {
      if (!v32) {
        goto LABEL_165;
      }
      unsigned int v66 = &v108;
      while (v66->__r_.__value_.__s.__data_[0] == v36->__r_.__value_.__s.__data_[0])
      {
        unsigned int v66 = (std::string *)((char *)v66 + 1);
        unint64_t v36 = (std::string *)((char *)v36 + 1);
        if (!--v32) {
          goto LABEL_165;
        }
      }
      goto LABEL_164;
    }
    BOOL v50 = (const void *)v108.__r_.__value_.__r.__words[0];
LABEL_163:
    if (!memcmp(v50, v36, v33)) {
      goto LABEL_165;
    }
    goto LABEL_164;
  }
LABEL_253:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v49 = 1;
LABEL_264:
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v108.__r_.__value_.__l.__data_);
    if (v49) {
      goto LABEL_284;
    }
  }
  else if (v49)
  {
    goto LABEL_284;
  }
  uint64_t v92 = 0;
LABEL_287:
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  return v92;
}

void sub_21290DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  if (*(char *)(v53 - 169) < 0) {
    operator delete(*(void **)(v53 - 192));
  }
  if (*(char *)(v53 - 145) < 0) {
    operator delete(*(void **)(v53 - 168));
  }
  if (*(char *)(v53 - 121) < 0) {
    operator delete(*(void **)(v53 - 144));
  }
  if (*(char *)(v53 - 97) < 0) {
    operator delete(*(void **)(v53 - 120));
  }
  if (*(char *)(v53 - 73) < 0) {
    operator delete(*(void **)(v53 - 96));
  }
  if (*(char *)(v53 - 49) < 0) {
    operator delete(*(void **)(v53 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t MeCab::Writer::writeWakati(uint64_t a1, uint64_t a2, MeCab::StringBuffer *a3)
{
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) + 8);
  uint64_t v5 = (uint64_t *)(v4 + 8);
  if (*(void *)(v4 + 8))
  {
    do
    {
      uint64_t v6 = *(const void **)(v4 + 64);
      size_t v7 = *(unsigned __int16 *)(v4 + 80);
      if (MeCab::StringBuffer::reserve(a3, v7))
      {
        memcpy((void *)(*((void *)a3 + 3) + *((void *)a3 + 1)), v6, v7);
        *((void *)a3 + 1) += v7;
      }
      if (MeCab::StringBuffer::reserve(a3, 1)) {
        *(unsigned char *)(*((void *)a3 + 3) + (*((void *)a3 + 1))++) = 32;
      }
      uint64_t v4 = *v5;
      uint64_t v8 = *v5;
      uint64_t v9 = *(void *)(v8 + 8);
      uint64_t v5 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }
  if (MeCab::StringBuffer::reserve(a3, 1)) {
    *(unsigned char *)(*((void *)a3 + 3) + (*((void *)a3 + 1))++) = 10;
  }
  return 1;
}

uint64_t MeCab::Writer::writeNone()
{
  return 1;
}

uint64_t MeCab::Writer::writeDump()
{
  return 1;
}

uint64_t MeCab::Writer::writeEM()
{
  return 1;
}

void MeCab::Writer::writeUser(uint64_t a1, uint64_t a2)
{
}

uint64_t MeCab::Writer::write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || !(*(unsigned int (**)(uint64_t))(*(void *)a2 + 8))(a2)) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a1 + 376);
  uint64_t v7 = *(void *)(a1 + 384);
  uint64_t v8 = (void *)(a1 + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v8 + v6);
  }

  return v6(v8, a2, a3);
}

void MeCab::Writer::writeNode()
{
}

void sub_21290EF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a29) {
    MEMORY[0x2166855A0](a29, 0x10C80436913F5);
  }
  if (a32) {
    MEMORY[0x2166855A0](a32, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Writer::writeNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(unsigned char *)(a3 + 91))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      MeCab::Writer::writeNode();
    default:
      return 1;
  }
}

MeCab::StringBuffer *MeCab::StringBuffer::operator<<(MeCab::StringBuffer *a1, int a2)
{
  *(void *)&v11[63] = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_6;
  }
  uint64_t v2 = 0;
  do
  {
    unsigned int v3 = (unsigned __int16)a2;
    v11[v2++ - 1] = ((unsigned __int16)a2 % 0xAu) | 0x30;
    LOWORD(a2) = (unsigned __int16)a2 / 0xAu;
  }
  while (v3 > 9);
  if (v2)
  {
    uint64_t v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    uint64_t v4 = v11;
    char __s = 48;
  }
  char *v4 = 0;
  uint64_t v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    uint64_t v6 = v11;
    do
    {
      char v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return MeCab::StringBuffer::write(a1, &__s);
}

{
  char *p_s;
  uint64_t v3;
  unsigned int v4;
  char *v5;
  BOOL v6;
  char *v7;
  char *v8;
  char v9;
  char __s;
  unsigned char v13[71];

  *(void *)&v13[63] = *MEMORY[0x263EF8340];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v13;
    char __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_9:
    *p_s = 48;
    uint64_t v5 = p_s + 1;
    goto LABEL_10;
  }
  unsigned int v3 = 0;
  do
  {
    p_s[v3] = (char)a2 % 10 + 48;
    uint64_t v4 = a2 + 9;
    ++v3;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v5 = &p_s[v3];
LABEL_10:
  uint64_t v6 = p_s == v5;
  char *v5 = 0;
  char v7 = v5 - 1;
  if (!v6 && v7 > p_s)
  {
    uint64_t v8 = p_s + 1;
    do
    {
      uint64_t v9 = *(v8 - 1);
      *(v8 - 1) = *v7;
      *v7-- = v9;
    }
    while (v8++ < v7);
  }
  return MeCab::StringBuffer::write(a1, &__s);
}

float btrie_open(void *(*a1)(void *, unint64_t, void *), void *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  if (v8)
  {
    LODWORD(v9) = 0;
    v8[1] = 0u;
    uint64_t v8[2] = 0u;
    _OWORD *v8 = 0u;
    *((void *)v8 + 7) = a1;
    *((void *)v8 + 8) = a2;
    *((void *)v8 + 1) = a3;
    *((void *)v8 + marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = a4;
    *((void *)v8 + 6) = 0;
    if (a3)
    {
      if (a4 >= 0x18)
      {
        *(_DWORD *)uint64_t v8 = a3[1];
        *((void *)v8 + 2) = (char *)a3 + a3[3];
        uint64_t v9 = *((void *)a3 + 2);
        *(void *)&long long v10 = v9;
        *((void *)&v10 + 1) = HIDWORD(v9);
        *(_OWORD *)((char *)v8 + 24) = v10;
      }
    }
  }
  return *(float *)&v9;
}

void btrie_close(void **a1)
{
  if (a1)
  {
    if (*((_DWORD *)a1 + 12)) {
      free(a1[1]);
    }
    free(a1);
  }
}

uint64_t btrie_exact_match_search(uint64_t a1, unsigned __int8 *__s2, unsigned int a3, uint8x8_t a4)
{
  uint64_t v6 = (unsigned int *)a1;
  while (1)
  {
    unsigned int v7 = *v6;
    int v8 = v7 & 3;
    if (v8 != 2) {
      break;
    }
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = v7 - 2;
    uint64_t v9 = (char *)(v10 + v11);
    if (!a3) {
      return *(unsigned int *)v9;
    }
    unint64_t v12 = *__s2;
    uint64_t v13 = v12 >> 5;
    unsigned int v14 = *(_DWORD *)&v9[4 * (v12 >> 5) + 4];
    if (((v14 >> v12) & 1) == 0) {
      return 0;
    }
    if (v12 >= 0x20)
    {
      int v15 = 0;
      if (v13 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v13;
      }
      std::string::size_type v16 = (unsigned int *)(v10 + v11 + 4);
      do
      {
        unsigned int v17 = *v16++;
        a4 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        a4.i16[0] = vaddlv_u8(a4);
        v15 += a4.i32[0];
        --v13;
      }
      while (v13);
    }
    else
    {
      int v15 = 0;
    }
    a4.i32[0] = v14 & ~(-1 << (v12 & 0x1F));
    a4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
    a4.i16[0] = vaddlv_u8(a4);
    uint64_t v6 = (unsigned int *)&v9[4 * (v15 + a4.i32[0]) + 40];
LABEL_16:
    --a3;
    ++__s2;
  }
  if (v8 == 3)
  {
    uint64_t v9 = (char *)(*(void *)(a1 + 8) + v7 - 3);
    if (!a3) {
      return *(unsigned int *)v9;
    }
    uint64_t v6 = (unsigned int *)&v9[4 * *__s2 + 4];
    goto LABEL_16;
  }
  if (v8 != 1) {
    return 0;
  }
  std::string::size_type v18 = (_DWORD *)(*(void *)(a1 + 16) + v7 - 1);
  uint64_t v9 = (char *)(v18 + 1);
  if (a3)
  {
    int v20 = *v18;
    uint64_t v19 = (unsigned __int8 *)(v18 + 2);
    char v21 = (unsigned __int8 *)&v9[v20];
    while (v19 < v21)
    {
      unsigned int v24 = *v19;
      std::string::size_type v22 = (char *)(v19 + 1);
      uint64_t v23 = v24;
      int v25 = v24 - a3;
      if (v24 >= a3) {
        size_t v26 = a3;
      }
      else {
        size_t v26 = v23;
      }
      int v27 = memcmp(v22, __s2, v26);
      if (v27) {
        int v28 = v27;
      }
      else {
        int v28 = v25;
      }
      if ((v28 & 0x80000000) == 0)
      {
        if (v28) {
          return 0;
        }
        uint64_t v9 = &v22[v23];
        return *(unsigned int *)v9;
      }
      uint64_t v19 = (unsigned __int8 *)&v22[v23 + 4];
    }
    return 0;
  }
  return *(unsigned int *)v9;
}

uint64_t anonymous namespace'::__btrie_find_common_prefix(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, unint64_t a5, unint64_t *a6, uint64_t a7, __int16 a8)
{
  int v13 = a2 & 3;
  if (v13 == 1)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 16) + (a2 - 1));
    std::string::size_type v18 = v17 + 1;
    int v19 = v17[1];
    if (v19)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4) {
          return 0;
        }
        goto LABEL_13;
      }
      unint64_t v20 = *a6;
      uint64_t v21 = a7 + 16 * *a6;
      *(_WORD *)(v21 + 12) = (_WORD)a3 - a8;
      *a6 = v20 + 1;
      *(_DWORD *)(v21 + 8) = v19;
      if (v20 + 1 >= a5) {
        return 1;
      }
    }
    if (!a4) {
      return 0;
    }
LABEL_13:
    unsigned int v23 = *v17;
    std::string::size_type v22 = (char *)(v17 + 2);
    unint64_t v24 = (unint64_t)v18 + v23;
    if ((unint64_t)v22 < v24)
    {
      __int16 v25 = (_WORD)a3 - a8;
      do
      {
        unsigned int v28 = *v22;
        size_t v26 = v22 + 1;
        size_t v27 = v28;
        if (v28 <= a4)
        {
          int v29 = memcmp(v26, a3, v27);
          if (v29 > 0) {
            return 0;
          }
          if (!v29)
          {
            if (a5)
            {
              unint64_t v30 = *a6;
              uint64_t v31 = a7 + 16 * *a6;
              *(_WORD *)(v31 + 12) = v25 + v27;
              int v32 = *(_DWORD *)&v26[v27];
              *a6 = ++v30;
              *(_DWORD *)(v31 + 8) = v32;
              if (v30 >= a5) {
                return 1;
              }
            }
            else
            {
              ++*a6;
            }
          }
        }
        std::string::size_type v22 = &v26[v27 + 4];
      }
      while ((unint64_t)v22 < v24);
    }
    return 0;
  }
  if (v13 == 2)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    uint64_t v34 = (a2 - 2);
    int v35 = *(_DWORD *)(v33 + v34);
    if (v35)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4) {
          return 0;
        }
LABEL_28:
        unint64_t v38 = *a3;
        uint64_t v39 = v38 >> 5;
        if (((*(_DWORD *)(v33 + v34 + 4 * (v38 >> 5) + 4) >> v38) & 1) == 0) {
          return 0;
        }
        if (v38 >= 0x20)
        {
          int v41 = 0;
          if (v39 <= 1) {
            uint64_t v39 = 1;
          }
          else {
            uint64_t v39 = v39;
          }
          uint64_t v42 = (unsigned int *)(v34 + v33 + 4);
          do
          {
            unsigned int v43 = *v42++;
            uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
            v44.i16[0] = vaddlv_u8(v44);
            v41 += v44.i32[0];
            --v39;
          }
          while (v39);
        }
LABEL_42:
        if (!result) {
          return result;
        }
        return 1;
      }
      unint64_t v36 = *a6;
      uint64_t v37 = a7 + 16 * *a6;
      *(_WORD *)(v37 + 12) = (_WORD)a3 - a8;
      *a6 = v36 + 1;
      *(_DWORD *)(v37 + 8) = v35;
      if (v36 + 1 >= a5) {
        return 1;
      }
    }
    if (!a4) {
      return 0;
    }
    goto LABEL_28;
  }
  if (v13 != 3) {
    return 0;
  }
  int v14 = *(_DWORD *)(*(void *)(a1 + 8) + (a2 - 3));
  if (!v14)
  {
LABEL_7:
    if (a4) {
      goto LABEL_42;
    }
    return 0;
  }
  if (!a5)
  {
    ++*a6;
    if (!a4) {
      return 0;
    }
    goto LABEL_42;
  }
  unint64_t v15 = *a6;
  uint64_t v16 = a7 + 16 * *a6;
  *(_WORD *)(v16 + 12) = (_WORD)a3 - a8;
  *a6 = v15 + 1;
  *(_DWORD *)(v16 + 8) = v14;
  if (v15 + 1 < a5) {
    goto LABEL_7;
  }
  return 1;
}

MeCab::QuantizedConnector *MeCab::QuantizedConnector::QuantizedConnector(MeCab::QuantizedConnector *this)
{
  uint64_t v2 = MeCab::Connector::Connector(this);
  *(void *)uint64_t v2 = &unk_26C3C3720;
  MeCab::Mmap<char>::Mmap((uint64_t)v2 + 656);
  *((void *)this + 12marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = 0;
  return this;
}

void sub_21290F910(_Unwind_Exception *a1)
{
  MeCab::Connector::~Connector(v1);
  _Unwind_Resume(a1);
}

void MeCab::QuantizedConnector::~QuantizedConnector(void **this)
{
  *this = &unk_26C3C3720;
  uint64_t v2 = (char *)(this + 82);
  MeCab::Mmap<char>::close((uint64_t)(this + 82));
  MeCab::Mmap<char>::~Mmap((uint64_t)v2);

  MeCab::Connector::~Connector(this);
}

{
  uint64_t vars8;

  MeCab::QuantizedConnector::~QuantizedConnector(this);

  JUMPOUT(0x2166855D0);
}

uint64_t MeCab::QuantizedConnector::open(MeCab::QuantizedConnector *this, char *a2, const char *a3)
{
  if (MeCab::Mmap<char>::open((uint64_t)this + 656, a2, a3))
  {
    if ((*(uint64_t (**)(MeCab::QuantizedConnector *, void, void))(*(void *)this + 32))(this, *((void *)this + 83), *((void *)this + 84)))return 1; {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    }
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    uint64_t v16 = (void *)std::ostream::operator<<();
    unsigned int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"open(ptr, quantized_cmmap_.file_size())", 39);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    int v14 = "QuantizedConnector::open failed";
    size_t v12 = 31;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    unsigned int v7 = (void *)std::ostream::operator<<();
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"quantized_cmmap_.open(filename, mode)", 37);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"cannot open: ", 13);
    size_t v12 = strlen(a2);
    int v13 = v11;
    int v14 = a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v12);
  return 0;
}

uint64_t MeCab::QuantizedConnector::open(MeCab::QuantizedConnector *this, const char *a2, uint64_t a3)
{
  if (a2)
  {
    unsigned int v3 = *(unsigned __int16 *)a2;
    *((_WORD *)this + 180) = v3;
    unsigned int v4 = *((unsigned __int16 *)a2 + 1);
    *((_WORD *)this + 181) = v4;
    if (v4 * (unint64_t)v3 + 4 == a3)
    {
      *((void *)this + 12marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((void *)this + 5) = a2 + 4;
      return 1;
    }
    int v14 = (void *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    uint64_t v16 = (void *)std::ostream::operator<<();
    unsigned int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    std::string::size_type v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"length == offset + lsize_ * rsize_ * sizeof(char)", 49);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    size_t v12 = "invalid binary image";
    uint64_t v13 = 20;
  }
  else
  {
    uint64_t v6 = (void *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(void *)(*((void *)this + 46) - 24) + 368), 0);
    unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    int v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ptr", 3);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    size_t v12 = "matrix is NULL";
    uint64_t v13 = 14;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  return 0;
}

void *MeCab::QuantizedConnector::close(MeCab::QuantizedConnector *this)
{
  return MeCab::Mmap<char>::close((uint64_t)this + 656);
}

uint64_t MeCab::QuantizedConnector::compile(MeCab::QuantizedConnector *this, const char *a2, const char *a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2, a3);
  uint64_t v5 = v4;
  uint64_t v6 = (const char *)v3;
  uint64_t v87 = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v82);
  std::string::basic_string[abi:ne180100]<0>(__p, "1 1\n0 0 0\n");
  std::istringstream::basic_istringstream[abi:ne180100](v70, (long long *)__p, 8);
  if (v86 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v7 = v82;
  if ((v83[*(void *)(v82[0] - 24) + 16] & 5) != 0)
  {
    size_t v8 = strlen(v6);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)v6, v8);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" is not found. minimum setting is used.", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v11 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    unsigned int v7 = v70;
  }
  std::ofstream::basic_ofstream(&v79);
  if ((v80[*(void *)(v79 - 24) + 24] & 5) != 0)
  {
    size_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(", 1);
    uint64_t v13 = (void *)std::ostream::operator<<();
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ofs", 3);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] ", 2);
    unsigned int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"permission denied: ", 19);
    size_t v18 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v5, v18);
    MeCab::die::~die((MeCab::die *)__p);
  }
  int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"reading ", 8);
  size_t v20 = strlen(v6);
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v6, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ... ", 5);
  *(void *)&v74[1] = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  std::string::size_type v22 = std::locale::use_facet(&v78, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v78);
  unsigned int v23 = __p;
  std::istream::getline();
  v78.__locale_ = (std::locale::__imp *)__p;
  unint64_t v24 = 0;
  __int16 v25 = (void **)((char *)__p + strlen((const char *)__p));
  do
  {
    size_t v26 = v25;
    if (v23 != v25)
    {
      while (2)
      {
        for (uint64_t i = 0; i != 2; ++i)
        {
          if (*(unsigned __int8 *)v23 == asc_2129151E5[i])
          {
            size_t v26 = v23;
            goto LABEL_15;
          }
        }
        unsigned int v23 = (void **)((char *)v23 + 1);
        if (v23 != v25) {
          continue;
        }
        break;
      }
      size_t v26 = v25;
    }
LABEL_15:
    *(unsigned char *)size_t v26 = 0;
    if (*(unsigned char *)v78.__locale_)
    {
      uint64_t v77 = (void **)&v74[1];
      std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v77, &v78);
      ++v24;
    }
    if (v26 == v25) {
      break;
    }
    unsigned int v23 = (void **)((char *)v26 + 1);
    v78.__locale_ = (std::locale::__imp *)((char *)v26 + 1);
  }
  while (v24 < 2);
  if (v24 != 2)
  {
    unsigned int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    int v29 = (void *)std::ostream::operator<<();
    unint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 2) == 2", 57);
    int v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"format error: ", 14);
    size_t v34 = strlen((const char *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)__p, v34);
    MeCab::die::~die((MeCab::die *)&v78);
  }
  uint64_t v35 = *(void *)&v74[1];
  unsigned __int16 v36 = atoi(**(const char ***)&v74[1]);
  v74[0] = v36;
  unsigned __int16 v37 = atoi(*(const char **)(v35 + 8));
  unsigned __int16 v73 = v37;
  size_t v38 = v37 * v36;
  if (v38)
  {
    uint64_t v39 = (char *)operator new(v37 * v36);
    unint64_t v40 = &v39[v38];
    bzero(v39, v38);
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0;
  }
  if (v40 - v39 >= 1) {
    bzero(v39, v40 - v39);
  }
  int v41 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"x", 1);
  uint64_t v42 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
  unsigned int v43 = std::locale::use_facet(&v78, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
  std::locale::~locale(&v78);
  std::ostream::put();
  std::ostream::flush();
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    uint8x8_t v44 = std::locale::use_facet(&v78, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v78);
    unint64_t v45 = (void *)std::istream::getline();
    if ((*((unsigned char *)v45 + *(void *)(*v45 - 24) + 32) & 5) != 0) {
      break;
    }
    uint64_t v75 = *(void *)&v74[1];
    unint64_t v46 = __p;
    v78.__locale_ = (std::locale::__imp *)__p;
    unint64_t v47 = 0;
    uint64_t v48 = (void **)((char *)__p + strlen((const char *)__p));
    do
    {
      char v49 = v48;
      if (v46 != v48)
      {
        while (2)
        {
          for (uint64_t j = 0; j != 2; ++j)
          {
            if (*(unsigned __int8 *)v46 == asc_2129151E5[j])
            {
              char v49 = v46;
              goto LABEL_36;
            }
          }
          unint64_t v46 = (void **)((char *)v46 + 1);
          if (v46 != v48) {
            continue;
          }
          break;
        }
        char v49 = v48;
      }
LABEL_36:
      *(unsigned char *)char v49 = 0;
      if (*(unsigned char *)v78.__locale_)
      {
        uint64_t v77 = (void **)&v74[1];
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v77, &v78);
        ++v47;
      }
      if (v49 == v48) {
        break;
      }
      unint64_t v46 = (void **)((char *)v49 + 1);
      v78.__locale_ = (std::locale::__imp *)((char *)v49 + 1);
    }
    while (v47 < 3);
    if (v47 != 3)
    {
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"(", 1);
      std::string::size_type v52 = (void *)std::ostream::operator<<();
      uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)") [", 3);
      __int16 v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 3) == 3", 57);
      unsigned int v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"] ", 2);
      uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"format error: ", 14);
      size_t v57 = strlen((const char *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)__p, v57);
      MeCab::die::~die((MeCab::die *)&v78);
    }
    uint64_t v58 = *(void *)&v74[1];
    unint64_t v59 = atoi(**(const char ***)&v74[1]);
    unint64_t v60 = atoi(*(const char **)(v58 + 8));
    __int16 v61 = atoi(*(const char **)(v58 + 16));
    int v62 = v74[0];
    if (v59 >= v74[0] || v60 >= v73)
    {
      uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"(", 1);
      unsigned int v65 = (void *)std::ostream::operator<<();
      unsigned int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)") [", 3);
      uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"l < lsize && r < rsize", 22);
      std::string::size_type v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"index values are out of range", 29);
      MeCab::die::~die((MeCab::die *)&v78);
    }
    MeCab::progress_bar((MeCab *)"emitting matrix      ", (const char *)(v59 + 1), v74[0]);
    v39[v59 + v62 * (uint64_t)(int)v60] = (unsigned __int16)(v61 + 128) >> 8;
  }
  std::ostream::write();
  if (v80[*(void *)(v79 - 24) + 24]) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ERROR: failed to write lsize\n", 29);
  }
  std::ostream::write();
  if (v80[*(void *)(v79 - 24) + 24]) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ERROR: failed to write rsize\n", 29);
  }
  std::ostream::write();
  if (v80[*(void *)(v79 - 24) + 24]) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"ERROR: failed to write matrix\n", 30);
  }
  if (v39) {
    operator delete(v39);
  }
  if (*(void *)&v74[1])
  {
    uint64_t v75 = *(void *)&v74[1];
    operator delete(*(void **)&v74[1]);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v80[*(void *)(v79 - 24) - 8], *(_DWORD *)&v80[*(void *)(v79 - 24) + 24] | 4);
  }
  uint64_t v79 = *MEMORY[0x263F8C2B0];
  *(void *)&v80[*(void *)(v79 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x2166853A0](v80);
  std::ostream::~ostream();
  MEMORY[0x216685570](&v81);
  v70[0] = *MEMORY[0x263F8C2C0];
  *(uint64_t *)((char *)v70 + *(void *)(v70[0] - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  v70[2] = MEMORY[0x263F8C318] + 16;
  if (v71 < 0) {
    operator delete((void *)v70[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x216685570](&v72);
  v82[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v82 + *(void *)(v82[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x2166853A0](v83);
  std::istream::~istream();
  MEMORY[0x216685570](&v84);
  return 1;
}

void sub_2129108C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,uint64_t a50)
{
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  std::ofstream::~ofstream(&a50);
  std::istringstream::~istringstream((uint64_t)&a10);
  std::ifstream::~ifstream(&STACK[0x380]);
  _Unwind_Resume(a1);
}

uint64_t MeCab::QuantizedConnector::transition_cost(MeCab::QuantizedConnector *this, unsigned int a2, unsigned int a3)
{
  return (*(char *)(*((void *)this + 125) + a2
                                                          + *((unsigned __int16 *)this + 180) * (unint64_t)a3) << 8);
}

uint64_t MeCab::QuantizedConnector::cost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(__int16 *)(a3 + 92)
                      + (*(char *)(*(void *)(a1 + 1000)
                                 + *(unsigned __int16 *)(a2 + 84)
                                 + *(unsigned __int16 *)(a3 + 86) * (unint64_t)*(unsigned __int16 *)(a1 + 360)) << 8));
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x270F98508](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x270F986B8]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986D8]();
}

{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986F0]();
}

{
  return MEMORY[0x270F98708]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987C8]();
}

{
  return MEMORY[0x270F987D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

std::ios_base::Init *__cdecl std::ios_base::Init::Init(std::ios_base::Init *this)
{
  return (std::ios_base::Init *)MEMORY[0x270F98D28](this);
}

void std::ios_base::Init::~Init(std::ios_base::Init *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

size_t iconv(iconv_t a1, char **a2, size_t *a3, char **a4, size_t *a5)
{
  return MEMORY[0x270F994B0](a1, a2, a3, a4, a5);
}

int iconv_close(iconv_t a1)
{
  return MEMORY[0x270F994B8](a1);
}

iconv_t iconv_open(const char *a1, const char *a2)
{
  return (iconv_t)MEMORY[0x270F994C0](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x270EDA320](a1, a2, *(void *)&a3);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x270EDAF10](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x270EDB090](*(void *)&a1);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x270EDB5C0](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}