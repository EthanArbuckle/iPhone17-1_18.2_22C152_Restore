uint64_t CheckedContinuationCanary.__deallocating_deinit()
{
  void *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t vars8;

  swift_arrayDestroy();
  if (v0[2])
  {
    _StringGuts.grow(_:)(60);
    v1._countAndFlagsBits = 0xD000000000000020;
    v1._object = (void *)0x800000018E4D9A80;
    String.append(_:)(v1);
    v2 = v0[3];
    v3 = (void *)v0[4];
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = v2;
    v4._object = v3;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._object = (void *)0x800000018E4DA5D0;
    v5._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v5);
    v6 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    swift_continuation_logFailedCheck(v6 + 32);
    swift_release();
  }

  return swift_deallocClassInstance();
}

void *CheckedContinuation.init(continuation:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  type metadata accessor for CheckedContinuationCanary();
  result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  *a4 = result;
  return result;
}

uint64_t type metadata accessor for CheckedContinuationCanary()
{
  return self;
}

void CheckedContinuation.resume(returning:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(a2 + 16);
  v5 = (swift::AsyncTask *)atomic_exchange((atomic_ullong *volatile)(*v2 + 16), 0);
  if (v5)
  {
    (*(void (**)(void, uint64_t))(*(void *)(v4 - 8) + 32))(*(void *)(*((void *)v5 + 8) + 40), a1);
    swift_continuation_throwingResume(v5);
  }
  else
  {
    uint64_t v6 = v3;
    swift_retain();
    _StringGuts.grow(_:)(98);
    v7._object = (void *)0x800000018E4D9A80;
    v7._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v7);
    uint64_t v8 = *(void *)(v6 + 24);
    v9 = *(void **)(v6 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    v10._countAndFlagsBits = v8;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 0xD00000000000003CLL;
    v11._object = (void *)0x800000018E4D9AB0;
    String.append(_:)(v11);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v12._countAndFlagsBits = 2593;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void CheckedContinuation.resume(throwing:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = *v1;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = atomic_exchange((atomic_ullong *volatile)(*v1 + 16), 0);
  if (v9)
  {
    UnsafeContinuation.resume(throwing:)(v3, v9, v8, v2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v2);
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(97);
    v10._object = (void *)0x800000018E4D9A80;
    v10._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v10);
    uint64_t v11 = *(void *)(v6 + 24);
    Swift::String v12 = *(void **)(v6 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    v13._countAndFlagsBits = v11;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0xD00000000000003BLL;
    v14._object = (void *)0x800000018E4D9B70;
    String.append(_:)(v14);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v15._countAndFlagsBits = 2593;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void UnsafeContinuation.resume(throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v8, a1, a4);

  swift_continuation_throwingResumeWithError(a2, v7);
}

uint64_t closure #1 in withCheckedContinuation<A>(isolation:function:_:)(uint64_t a1, void (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  type metadata accessor for CheckedContinuationCanary();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a4;
  v9[4] = a5;
  uint64_t v11 = v9;
  a2(&v11);

  return swift_release();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  return swift_task_switch(withCheckedContinuation<A>(isolation:function:_:), v11, v13);
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v2 = (void (*)(void **))v0[13];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  v0[2] = v0;
  v0[7] = v4;
  v0[3] = withCheckedContinuation<A>(isolation:function:_:);
  uint64_t v6 = swift_continuation_init(v0 + 2, 0);
  closure #1 in withCheckedContinuation<A>(isolation:function:_:)((uint64_t)v6, v2, v1, v5, v3);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 8);
  return v1();
}

uint64_t withCheckedContinuation<A>(function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(64);
  *(void *)(v6 + 16) = v13;
  v13[2] = a6;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a2;
  v13[6] = a3;
  v16 = (uint64_t (*)(uint64_t, void (*)(swift *)))((char *)&async function pointer to _unsafeInheritExecutor_withUnsafeContinuation<A>(_:)
                                                                      + async function pointer to _unsafeInheritExecutor_withUnsafeContinuation<A>(_:));
  Swift::String v14 = (void *)swift_task_alloc(unk_1E91CFD74);
  *(void *)(v6 + 24) = v14;
  *Swift::String v14 = v6;
  v14[1] = withCheckedContinuation<A>(function:_:);
  return v16(a1, (void (*)(swift *))partial apply for closure #1 in _unsafeInheritExecutor_withCheckedContinuation<A>(function:_:));
}

uint64_t withCheckedContinuation<A>(function:_:)()
{
  uint64_t v1 = *(void *)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  swift_task_dealloc(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t partial apply for closure #1 in _unsafeInheritExecutor_withCheckedContinuation<A>(function:_:)(uint64_t a1)
{
  uint64_t v3 = (void (*)(void **))v1[3];
  uint64_t v5 = v1[5];
  uint64_t v4 = v1[6];
  type metadata accessor for CheckedContinuationCanary();
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = v5;
  v6[4] = v4;
  swift_bridgeObjectRetain();
  uint64_t v8 = v6;
  v3(&v8);

  return swift_release();
}

uint64_t _unsafeInheritExecutor_withUnsafeContinuation<A>(_:)(uint64_t a1, void (*a2)(swift *))
{
  v2[2] = v2;
  v2[7] = a1;
  v2[3] = _unsafeInheritExecutor_withUnsafeContinuation<A>(_:);
  uint64_t v4 = swift_continuation_init(v2 + 2, 0);
  a2(v4);
  return swift_continuation_await((uint64_t)(v2 + 2));
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  return swift_task_switch(withCheckedThrowingContinuation<A>(isolation:function:_:), v11, v13);
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v2 = (void (*)(void **))v0[13];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  v0[2] = v0;
  v0[7] = v4;
  v0[3] = withCheckedThrowingContinuation<A>(isolation:function:_:);
  uint64_t v6 = swift_continuation_init(v0 + 2, 1uLL);
  closure #1 in withCheckedContinuation<A>(isolation:function:_:)((uint64_t)v6, v2, v1, v5, v3);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t withCheckedThrowingContinuation<A>(function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc(64);
  *(void *)(v6 + 16) = v13;
  v13[2] = a6;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a2;
  v13[6] = a3;
  v16 = (uint64_t (*)(uint64_t, void (*)(swift *)))((char *)&async function pointer to _unsafeInheritExecutor_withUnsafeThrowingContinuation<A>(_:)
                                                                      + async function pointer to _unsafeInheritExecutor_withUnsafeThrowingContinuation<A>(_:));
  Swift::String v14 = (void *)swift_task_alloc(unk_1E91CFD8C);
  *(void *)(v6 + 24) = v14;
  *Swift::String v14 = v6;
  v14[1] = withCheckedThrowingContinuation<A>(function:_:);
  return v16(a1, (void (*)(swift *))partial apply for closure #1 in _unsafeInheritExecutor_withCheckedContinuation<A>(function:_:));
}

uint64_t withCheckedThrowingContinuation<A>(function:_:)()
{
  uint64_t v1 = *(void *)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  swift_task_dealloc(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t _unsafeInheritExecutor_withUnsafeThrowingContinuation<A>(_:)(uint64_t a1, void (*a2)(swift *))
{
  v2[2] = v2;
  v2[7] = a1;
  v2[3] = withCheckedThrowingContinuation<A>(isolation:function:_:);
  uint64_t v4 = swift_continuation_init(v2 + 2, 1uLL);
  a2(v4);
  return swift_continuation_await((uint64_t)(v2 + 2));
}

uint64_t swift_deletedAsyncMethodError()
{
  return swift_task_switch(swift_deletedAsyncMethodErrorTY0_, 0, 0);
}

uint64_t swift_deletedAsyncMethodErrorTY0_()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t Executor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t SerialExecutor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Executor.enqueue(_:)(a1, a2, *(void *)(a3 + 8));
}

{
  return Executor.enqueue(_:)(a1, a2, *(void *)(a3 + 8));
}

BOOL SerialExecutor.isSameExclusiveExecutionContext(other:)(uint64_t a1)
{
  return v1 == a1;
}

uint64_t _sSch7enqueueyyScJF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Executor.enqueue(_:)(a1, a2, *(void *)(a3 + 8));
}

uint64_t SerialExecutor.asUnownedSerialExecutor()()
{
  return v0;
}

uint64_t UnownedSerialExecutor.executor.setter(uint64_t result, uint64_t a2)
{
  void *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*UnownedSerialExecutor.executor.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*UnownedTaskExecutor.executor.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

BOOL static UnownedTaskExecutor.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UnownedTaskExecutor(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void _checkExpectedExecutor(_filenameStart:_filenameLength:_filenameIsASCII:_line:_executor:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((swift_task_isCurrentExecutor(a5, a6) & 1) == 0)
  {
    swift_task_reportUnexpectedExecutor(a1, a2, a3 & 1, a4, a5, a6);
  }
}

uint64_t _task_serialExecutor_isSameExclusiveExecutionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(a2, a3, a4) & 1;
}

uint64_t _task_serialExecutor_checkIsolated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
}

uint64_t _task_serialExecutor_getExecutorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
}

uint64_t _task_taskExecutor_getTaskExecutorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
}

uint64_t _swift_task_enqueueOnExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a3, a4);
}

uint64_t _swift_task_enqueueOnTaskExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 32))(a1, a3, a4);
}

uint64_t protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance DispatchQueueShim()
{
  return v0;
}

BOOL protocol witness for SerialExecutor.isSameExclusiveExecutionContext(other:) in conformance DispatchQueueShim(uint64_t a1)
{
  return v1 == a1;
}

void protocol witness for SerialExecutor.checkIsolated() in conformance DispatchQueueShim()
{
  _StringGuts.grow(_:)(60);
  v0._countAndFlagsBits = 0xD00000000000003ALL;
  v0._object = (void *)0x800000018E4DA0D0;
  String.append(_:)(v0);
  v1._object = (void *)0x800000018E4D8300;
  v1._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for Executor.enqueue(_:) in conformance DispatchQueueShim(void *a1)
{
  return swift_task_enqueueOnDispatchQueue(a1, v1);
}

uint64_t SerialExecutor.preconditionIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a7, a8);
  uint64_t result = swift_task_isCurrentExecutor(v9, v10);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v12._object = (void *)0x800000018E4D9C00;
    v12._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v12);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13._countAndFlagsBits = 0x7475636578652027;
    v13._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Actor.preconditionIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 8);
  uint64_t v12 = v11(a7, a8);
  uint64_t result = swift_task_isCurrentExecutor(v12, v13);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v15._object = (void *)0x800000018E4D9C00;
    v15._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v15);
    v11(a7, a8);
    _print_unlocked<A, B>(_:_:)();
    v16._countAndFlagsBits = 0x7475636578652027;
    v16._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static GlobalActor.preconditionIsolated(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static GlobalActor.preconditionIsolated(_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)partial apply for implicit closure #1 in static GlobalActor.preconditionIsolated(_:file:line:), (void (*)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Actor.preconditionIsolated(_:file:line:));
}

uint64_t SerialExecutor.assertIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a7, a8);
  uint64_t result = swift_task_isCurrentExecutor(v9, v10);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v12._object = (void *)0x800000018E4D9C00;
    v12._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v12);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13._countAndFlagsBits = 0x7475636578652027;
    v13._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = a1();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Actor.assertIsolated(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 8);
  uint64_t v12 = v11(a7, a8);
  uint64_t result = swift_task_isCurrentExecutor(v12, v13);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(63);
    v15._object = (void *)0x800000018E4D9C00;
    v15._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v15);
    v11(a7, a8);
    _print_unlocked<A, B>(_:_:)();
    v16._countAndFlagsBits = 0x7475636578652027;
    v16._object = (void *)0xEC000000202E726FLL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = a1();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static GlobalActor.assertIsolated(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static GlobalActor.preconditionIsolated(_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)partial apply for implicit closure #1 in static GlobalActor.assertIsolated(_:file:line:), (void (*)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Actor.assertIsolated(_:file:line:));
}

uint64_t static GlobalActor.preconditionIsolated(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  (*(void (**)(uint64_t, uint64_t))(a8 + 24))(a7, a8);
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a10(a9, v19, a3, a4, a5, a6, AssociatedTypeWitness, AssociatedConformanceWitness);
  return swift_unknownObjectRelease();
}

uint64_t Actor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 8))(a7, a9);
  if ((swift_task_isCurrentExecutor(v15, v16) & 1) == 0) {
    goto LABEL_6;
  }
  Swift::String v17 = (void *)swift_allocObject();
  v17[2] = a7;
  v17[3] = a8;
  v17[4] = a9;
  v17[5] = a1;
  v17[6] = a2;
  closure #1 in Actor.assumeIsolated<A>(_:file:line:)((uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed A) -> (@out A1, @error @owned Error), (uint64_t)v17, v9, a7, a8, a9);
  if (v10) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v20._object = (void *)0x800000018E4DAB40;
    v20._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v20);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v21._countAndFlagsBits = 46;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  return Actor.assumeIsolated<A>(_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t closure #1 in Actor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  swift_retain();
  uint64_t v14 = a3;
  partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@out A1, @error @owned Error)(&v14);
  return swift_release();
}

uint64_t AsyncSequence.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncCompactMapSequence, a6);
}

{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncThrowingCompactMapSequence, a6);
}

uint64_t AsyncCompactMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncCompactMapSequence, a7);
}

uint64_t (*AsyncCompactMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncCompactMapSequence.Iterator, a7);
}

uint64_t AsyncCompactMapSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  uint64_t v4 = type metadata accessor for Optional();
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[9] = AssociatedTypeWitness;
  uint64_t v7 = type metadata accessor for Optional();
  v3[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[11] = v8;
  v3[12] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[15] = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3[16] = AssociatedConformanceWitness;
  uint64_t v11 = *(int **)(AssociatedConformanceWitness + 32);
  v3[17] = v11;
  v3[18] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v12 = swift_checkMetadataState();
  Swift::String v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  uint64_t v13 = (void *)swift_task_alloc(v11[1]);
  v3[19] = v13;
  *uint64_t v13 = v3;
  v13[1] = AsyncCompactMapSequence.Iterator.next();
  uint64_t v14 = v3[16];
  uint64_t v15 = v3[12];
  return v17(v15, v12, v14);
}

uint64_t AsyncCompactMapSequence.Iterator.next()()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncCompactMapSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncCompactMapSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  int **v12;
  int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = v0[2];
    (*(void (**)(uint64_t, void))(v0[11] + 8))(v1, v0[10]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v5, 1, 1, v4);
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[8];
    swift_task_dealloc(v0[14]);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v11 = v0[3];
    uint64_t v10 = v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[14], v1, v3);
    uint64_t v12 = (int **)(v10 + *(int *)(v11 + 44));
    uint64_t v13 = *v12;
    v0[21] = v12[1];
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))((char *)v13 + *v13);
    uint64_t v14 = v13[1];
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc(v14);
    v0[22] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncCompactMapSequence.Iterator.next();
    uint64_t v16 = v0[14];
    Swift::String v17 = v0[8];
    return v18(v17, v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  uint64_t v3 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc(*(void *)(*(void *)v0 + 176));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(AsyncCompactMapSequence.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[7] + 8))(v1, v0[6]);
    uint64_t v4 = (int *)v0[17];
    uint64_t v5 = swift_checkMetadataState();
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
    uint64_t v6 = (void *)swift_task_alloc(v4[1]);
    v0[19] = v6;
    *uint64_t v6 = v0;
    v6[1] = AsyncCompactMapSequence.Iterator.next();
    uint64_t v7 = v0[16];
    uint64_t v8 = v0[12];
    return v14(v8, v5, v7);
  }
  else
  {
    uint64_t v10 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v10, 0, 1, v2);
    uint64_t v11 = v0[12];
    uint64_t v12 = v0[8];
    swift_task_dealloc(v0[14]);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[8];
  swift_task_dealloc(v0[14]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(void *)(a4 + 24);
  uint64_t v7 = type metadata accessor for Optional();
  v6[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[10] = v8;
  v6[11] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[12] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v6[13] = v10;
  v6[14] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v6[15] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  v6[16] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[17] = v13;
  v6[18] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v11 - 8);
  v6[19] = v14;
  v6[20] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[21] = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6[22] = AssociatedConformanceWitness;
  uint64_t v16 = *(int **)(AssociatedConformanceWitness + 40);
  v6[23] = v16;
  v6[24] = (AssociatedConformanceWitness + 40) & 0xFFFFFFFFFFFFLL | 0x2B1A000000000000;
  uint64_t v17 = swift_checkMetadataState();
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
  uint64_t v18 = (void *)swift_task_alloc(v16[1]);
  v6[25] = v18;
  *uint64_t v18 = v6;
  v18[1] = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  uint64_t v19 = v6[22];
  uint64_t v20 = v6[18];
  uint64_t v21 = v6[14];
  uint64_t v22 = v6[3];
  uint64_t v23 = v6[4];
  return v25(v20, v22, v23, v21, v17, v19);
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v3 = *(void **)v1;
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 200));
  uint64_t v4 = v2[3];
  if (v0)
  {
    if (v4)
    {
      uint64_t v5 = v3[4];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v14 = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY4_;
    uint64_t v15 = v7;
  }
  else
  {
    if (v4)
    {
      uint64_t v10 = v3[4];
      uint64_t v11 = swift_getObjectType();
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v9 = 0;
    }
    v3[26] = v12;
    v3[27] = v9;
    uint64_t v14 = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_;
    uint64_t v15 = v12;
  }
  return swift_task_switch(v14, v15, v9);
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[15];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[8];
    uint64_t v5 = v0[2];
    (*(void (**)(uint64_t, void))(v0[17] + 8))(v1, v0[16]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v5, 1, 1, v4);
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[14];
    uint64_t v8 = v0[11];
    swift_task_dealloc(v0[20]);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v12 = v0[5];
    uint64_t v11 = v0[6];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[20], v1, v3);
    uint64_t v13 = (int **)(v11 + *(int *)(v12 + 44));
    uint64_t v14 = *v13;
    v0[28] = v13[1];
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))((char *)v14 + *v14);
    uint64_t v15 = v14[1];
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc(v15);
    v0[29] = v16;
    *uint64_t v16 = v0;
    v16[1] = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_;
    uint64_t v17 = v0[20];
    uint64_t v18 = v0[11];
    return v19(v18, v17);
  }
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  uint64_t v3 = *(void *)(*v0 + 152);
  uint64_t v4 = *(void *)(*v0 + 120);
  swift_task_dealloc(*(void *)(*v0 + 232));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 216);
  uint64_t v6 = *(void *)(v1 + 208);
  return swift_task_switch(_ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_, v6, v5);
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[10] + 8))(v1, v0[9]);
    uint64_t v4 = (int *)v0[23];
    uint64_t v5 = swift_checkMetadataState();
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
    uint64_t v6 = (void *)swift_task_alloc(v4[1]);
    v0[25] = v6;
    *uint64_t v6 = v0;
    v6[1] = _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_;
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[18];
    uint64_t v9 = v0[14];
    uint64_t v10 = v0[3];
    uint64_t v11 = v0[4];
    return v18(v8, v10, v11, v9, v5, v7);
  }
  else
  {
    uint64_t v13 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v13, 0, 1, v2);
    uint64_t v14 = v0[18];
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[11];
    swift_task_dealloc(v0[20]);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[11];
  (*(void (**)(void, uint64_t, void))(v0[13] + 32))(v0[7], v3, v0[12]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCompactMapSequence<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFD9C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncCompactMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFDA4);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss23AsyncCompactMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncCompactMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t))AsyncCompactMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncSequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v4 = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, v4, a2);
    uint64_t result = type metadata accessor for AsyncDropFirstSequence();
    *(void *)(a3 + *(int *)(result + 36)) = a1;
  }
  return result;
}

uint64_t AsyncDropFirstSequence.init(_:dropping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.init(_:dropping:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncDropFirstSequence, a5);
}

uint64_t (*AsyncDropFirstSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncDropFirstSequence.Iterator.count.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncDropFirstSequence.Iterator.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.Iterator.init(_:count:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncDropFirstSequence.Iterator, a5);
}

uint64_t AsyncDropFirstSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  v3[6] = *(void *)(a2 + 16);
  v3[7] = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncDropFirstSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncDropFirstSequence.Iterator.next()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(int *)(v0[3] + 36);
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3 < 1)
  {
    *(void *)(v1 + v2) = 0;
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v13 = *(int **)(AssociatedConformanceWitness + 32);
    uint64_t v14 = swift_checkMetadataState();
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
    uint64_t v15 = (void *)swift_task_alloc(v13[1]);
    v0[18] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncDropFirstSequence.Iterator.next();
    uint64_t v9 = v0[2];
    uint64_t v10 = v14;
    uint64_t v8 = AssociatedConformanceWitness;
    uint64_t v11 = v17;
  }
  else
  {
    v0[11] = swift_getAssociatedTypeWitness();
    uint64_t v4 = swift_getAssociatedConformanceWitness();
    v0[12] = v4;
    uint64_t v5 = *(int **)(v4 + 32);
    v0[13] = v5;
    v0[14] = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
    v0[15] = v3;
    uint64_t v6 = swift_checkMetadataState();
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc(v5[1]);
    v0[16] = v7;
    *uint64_t v7 = v0;
    v7[1] = AsyncDropFirstSequence.Iterator.next();
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[10];
    uint64_t v10 = v6;
    uint64_t v11 = v18;
  }
  return v11(v9, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncDropFirstSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncDropFirstSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  int *v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[3];
    uint64_t v4 = v0[4];
    uint64_t v6 = v0[2];
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    *(void *)(v4 + *(int *)(v5 + 36)) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v6, 1, 1, v2);
    swift_task_dealloc(v0[10]);
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[15];
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    if (v9 <= 1)
    {
      *(void *)(v0[4] + *(int *)(v0[3] + 36)) = 0;
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v18 = *(int **)(AssociatedConformanceWitness + 32);
      uint64_t v19 = swift_checkMetadataState();
      uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v18 + *v18);
      uint64_t v20 = (void *)swift_task_alloc(v18[1]);
      v0[18] = v20;
      *uint64_t v20 = v0;
      v20[1] = AsyncDropFirstSequence.Iterator.next();
      uint64_t v14 = v0[2];
      uint64_t v15 = v19;
      uint64_t v13 = AssociatedConformanceWitness;
      uint64_t v16 = v21;
    }
    else
    {
      v0[15] = v9 - 1;
      uint64_t v10 = (int *)v0[13];
      uint64_t v11 = swift_checkMetadataState();
      uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
      uint64_t v12 = (void *)swift_task_alloc(v10[1]);
      v0[16] = v12;
      *uint64_t v12 = v0;
      v12[1] = AsyncDropFirstSequence.Iterator.next();
      uint64_t v13 = v0[12];
      uint64_t v14 = v0[10];
      uint64_t v15 = v11;
      uint64_t v16 = v22;
    }
    return v16(v14, v15, v13);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 144));
  swift_task_dealloc(*(void *)(v1 + 80));
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc(*(void *)(v0 + 80));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(void *)(a4 + 24);
  v6[9] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v11);
  v6[13] = swift_task_alloc(v11);
  v6[14] = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  v6[15] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[16] = v13;
  v6[17] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  v6[18] = v15;
  v6[19] = v17;
  return swift_task_switch(_ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v15, v17);
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(int *)(v0[5] + 36);
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3 < 1)
  {
    *(void *)(v1 + v2) = 0;
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v16 = *(int **)(AssociatedConformanceWitness + 40);
    uint64_t v17 = swift_checkMetadataState();
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
    uint64_t v18 = (void *)swift_task_alloc(v16[1]);
    v0[26] = v18;
    *uint64_t v18 = v0;
    v18[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    uint64_t v10 = v0[12];
    uint64_t v11 = v0[3];
    uint64_t v12 = v0[4];
    uint64_t v9 = v0[2];
    uint64_t v13 = v17;
    uint64_t v8 = AssociatedConformanceWitness;
    uint64_t v14 = v20;
  }
  else
  {
    v0[20] = swift_getAssociatedTypeWitness();
    uint64_t v4 = swift_getAssociatedConformanceWitness();
    v0[21] = v4;
    uint64_t v5 = *(int **)(v4 + 40);
    v0[22] = v5;
    v0[23] = (v4 + 40) & 0xFFFFFFFFFFFFLL | 0x2B1A000000000000;
    v0[24] = v3;
    uint64_t v6 = swift_checkMetadataState();
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc(v5[1]);
    v0[25] = v7;
    *uint64_t v7 = v0;
    v7[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[3];
    uint64_t v12 = v0[4];
    uint64_t v13 = v6;
    uint64_t v14 = v21;
  }
  return v14(v9, v11, v12, v10, v13, v8);
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 200));
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(void *)(v2 + 144);
  if (v0) {
    uint64_t v5 = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_;
  }
  else {
    uint64_t v5 = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_;
  }
  return swift_task_switch(v5, v4, v3);
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[14];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[5];
    uint64_t v4 = v0[6];
    uint64_t v6 = v0[2];
    (*(void (**)(uint64_t, void))(v0[16] + 8))(v1, v0[15]);
    *(void *)(v4 + *(int *)(v5 + 36)) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v6, 1, 1, v2);
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[13];
    swift_task_dealloc(v0[17]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = v0[24];
    (*(void (**)(uint64_t, void))(v0[16] + 8))(v1, v0[15]);
    if (v11 <= 1)
    {
      *(void *)(v0[6] + *(int *)(v0[5] + 36)) = 0;
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v23 = *(int **)(AssociatedConformanceWitness + 40);
      uint64_t v24 = swift_checkMetadataState();
      uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v23 + *v23);
      v25 = (void *)swift_task_alloc(v23[1]);
      v0[26] = v25;
      void *v25 = v0;
      v25[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
      uint64_t v17 = v0[12];
      uint64_t v18 = v0[3];
      uint64_t v19 = v0[4];
      uint64_t v16 = v0[2];
      uint64_t v20 = v24;
      uint64_t v15 = AssociatedConformanceWitness;
      uint64_t v21 = v26;
    }
    else
    {
      v0[24] = v11 - 1;
      uint64_t v12 = (int *)v0[22];
      uint64_t v13 = swift_checkMetadataState();
      v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
      uint64_t v14 = (void *)swift_task_alloc(v12[1]);
      v0[25] = v14;
      *uint64_t v14 = v0;
      v14[1] = _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
      uint64_t v15 = v0[21];
      uint64_t v16 = v0[17];
      uint64_t v17 = v0[13];
      uint64_t v18 = v0[3];
      uint64_t v19 = v0[4];
      uint64_t v20 = v13;
      uint64_t v21 = v27;
    }
    return v21(v16, v18, v19, v17, v20, v15);
  }
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[18];
    uint64_t v6 = v2[19];
    return swift_task_switch(_ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_, v5, v6);
  }
  else
  {
    uint64_t v8 = v2[17];
    uint64_t v11 = v2 + 12;
    uint64_t v9 = v2[12];
    uint64_t v10 = v11[1];
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    uint64_t v12 = *(uint64_t (**)(void))(v4 + 8);
    return v12();
  }
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  (*(void (**)(void, uint64_t, void))(v0[11] + 32))(v0[7], v2, v0[10]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  (*(void (**)(void, uint64_t, void))(v0[11] + 32))(v0[7], v2, v0[10]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncDropFirstSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFDAC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncDropFirstSequence.Iterator.next()(a1, a2);
}

uint64_t _ss22AsyncDropFirstSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFDB4);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss22AsyncDropFirstSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncDropFirstSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropFirstSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))AsyncDropFirstSequence.Iterator.init(_:count:));
}

uint64_t AsyncDropFirstSequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
    uint64_t v13 = *(void *)(v4 + *(int *)(a2 + 36));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(v4, a2);
    BOOL v14 = __OFADD__(v13, a1);
    uint64_t v15 = v13 + a1;
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v12, v8);
      uint64_t result = type metadata accessor for AsyncDropFirstSequence();
      *(void *)(a3 + *(int *)(result + 36)) = v15;
      return result;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AsyncSequence.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncDropWhileSequence, a5);
}

{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncThrowingDropWhileSequence, a5);
}

uint64_t AsyncDropWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncDropWhileSequence, a6);
}

uint64_t (*AsyncDropWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t key path getter for AsyncDropWhileSequence.Iterator.predicate : <A>AsyncDropWhileSequence<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 16);
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AsyncDropWhileSequence.Iterator() + 36));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7)
  {
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v5;
    v10[3] = v6;
    v10[4] = v8;
    v10[5] = v9;
    uint64_t v11 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  *a4 = v11;
  a4[1] = v10;

  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v8);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v5 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 24) = v5;
  void *v5 = v3;
  v5[1] = thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool);
  return v7(a2);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(char a1)
{
  uint64_t v3 = *(unsigned char **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 24));
  *uint64_t v3 = a1;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t key path setter for AsyncDropWhileSequence.Iterator.predicate : <A>AsyncDropWhileSequence<A>.Iterator(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1)
  {
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = v5;
    v9[3] = v6;
    v9[4] = v7;
    v9[5] = v8;
    uint64_t v10 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v11 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AsyncDropWhileSequence.Iterator() + 36));
  uint64_t v12 = *v11;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v7);
  uint64_t result = _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v12);
  *uint64_t v11 = (uint64_t)v10;
  v11[1] = (uint64_t)v9;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool);
  return v6(v2 + 24, a1);
}

uint64_t thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  uint64_t v2 = *(unsigned __int8 *)(v1 + 24);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t AsyncDropWhileSequence.Iterator.predicate.getter(uint64_t a1)
{
  uint64_t v1 = specialized AsyncFilterSequence.isIncluded.getter(a1);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  return v1;
}

uint64_t AsyncDropWhileSequence.Iterator.predicate.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 36));
  uint64_t result = _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AsyncDropWhileSequence.Iterator.predicate.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncDropWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (void *)(a4 + *(int *)(type metadata accessor for AsyncDropWhileSequence.Iterator() + 36));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  *uint64_t v8 = a2;
  v8[1] = a3;
  return result;
}

uint64_t AsyncDropWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  v3[6] = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncDropWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncDropWhileSequence.Iterator.next()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(int *)(v0[3] + 36);
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    v0[13] = v3;
    v0[14] = *(void *)(v1 + v2 + 8);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = *(int **)(AssociatedConformanceWitness + 32);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v3);
    uint64_t v6 = swift_checkMetadataState();
    BOOL v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc(v5[1]);
    v0[15] = v7;
    *uint64_t v7 = v0;
    v7[1] = AsyncDropWhileSequence.Iterator.next();
    uint64_t v8 = v0[10];
    uint64_t v9 = v6;
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v10 = *(int **)(AssociatedConformanceWitness + 32);
    uint64_t v11 = swift_checkMetadataState();
    BOOL v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
    uint64_t v12 = (void *)swift_task_alloc(v10[1]);
    v0[20] = v12;
    *uint64_t v12 = v0;
    v12[1] = AsyncDropWhileSequence.Iterator.next();
    uint64_t v8 = v0[2];
    uint64_t v9 = v11;
  }
  return v14(v8, v9, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*(void *)(v2 + 104));
    uint64_t v4 = AsyncDropWhileSequence.Iterator.next();
  }
  else
  {
    uint64_t v4 = AsyncDropWhileSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  int *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v5 = v0[8];
    uint64_t v4 = v0[9];
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v0[13]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], 1, 1, v0[7]);
    uint64_t v6 = v0[10];
    swift_task_dealloc(v0[12]);
    swift_task_dealloc(v6);
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = (int *)v0[13];
    uint64_t v10 = v0[12];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[17] = v11;
    v0[18] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v11(v10, v1, v3);
    BOOL v14 = (uint64_t (*)(uint64_t))((char *)v9 + *v9);
    uint64_t v12 = (void *)swift_task_alloc(v9[1]);
    v0[19] = v12;
    *uint64_t v12 = v0;
    v12[1] = AsyncDropWhileSequence.Iterator.next();
    uint64_t v13 = v0[12];
    return v14(v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  int *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  int *v19;
  uint64_t v20;
  void *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  if (*(unsigned char *)(v0 + 168))
  {
    uint64_t v1 = *(void *)(v0 + 24);
    uint64_t v2 = *(void *)(v0 + 32);
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 56));
    uint64_t v3 = *(int *)(v1 + 36);
    uint64_t v4 = *(void *)(v2 + v3);
    if (v4)
    {
      *(void *)(v0 + 104) = v4;
      *(void *)(v0 + 112) = *(void *)(*(void *)(v0 + 32) + v3 + 8);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v6 = *(int **)(AssociatedConformanceWitness + 32);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v4);
      uint64_t v7 = swift_checkMetadataState();
      uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
      uint64_t v8 = (void *)swift_task_alloc(v6[1]);
      *(void *)(v0 + 120) = v8;
      *uint64_t v8 = v0;
      v8[1] = AsyncDropWhileSequence.Iterator.next();
      uint64_t v9 = *(void *)(v0 + 80);
      uint64_t v10 = v7;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v19 = *(int **)(AssociatedConformanceWitness + 32);
      uint64_t v20 = swift_checkMetadataState();
      uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v19 + *v19);
      uint64_t v21 = (void *)swift_task_alloc(v19[1]);
      *(void *)(v0 + 160) = v21;
      *uint64_t v21 = v0;
      v21[1] = AsyncDropWhileSequence.Iterator.next();
      uint64_t v9 = *(void *)(v0 + 16);
      uint64_t v10 = v20;
    }
    return v22(v9, v10, AssociatedConformanceWitness);
  }
  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v13 = *(void *)(v0 + 56);
    BOOL v14 = *(void *)(v0 + 16);
    uint64_t v15 = (uint64_t *)(*(void *)(v0 + 32) + *(int *)(*(void *)(v0 + 24) + 36));
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*v15);
    *uint64_t v15 = 0;
    v15[1] = 0;
    v11(v14, v12, v13);
    (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 16), 0, 1, *(void *)(v0 + 56));
    uint64_t v16 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 96));
    swift_task_dealloc(v16);
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 160));
  uint64_t v2 = *(void *)(v1 + 80);
  swift_task_dealloc(*(void *)(v1 + 96));
  swift_task_dealloc(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[12]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t AsyncDropWhileSequence.Iterator.next()(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  *(unsigned char *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v3);
  return swift_task_switch(AsyncDropWhileSequence.Iterator.next(), 0, 0);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(void *)(a4 + 24);
  v6[9] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v11);
  v6[13] = swift_task_alloc(v11);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v6[14] = v12;
  uint64_t v13 = type metadata accessor for Optional();
  v6[15] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v6[16] = v14;
  v6[17] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v12 - 8);
  v6[18] = v15;
  v6[19] = swift_task_alloc((*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  v6[20] = v17;
  v6[21] = v19;
  return swift_task_switch(_ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v17, v19);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(int *)(v0[5] + 36);
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    v0[22] = v3;
    v0[23] = *(void *)(v1 + v2 + 8);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = *(int **)(AssociatedConformanceWitness + 40);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v3);
    uint64_t v6 = swift_checkMetadataState();
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc(v5[1]);
    v0[24] = v7;
    *uint64_t v7 = v0;
    v7[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    uint64_t v8 = v0[17];
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[3];
    uint64_t v11 = v0[4];
    uint64_t v12 = v6;
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v13 = *(int **)(AssociatedConformanceWitness + 40);
    uint64_t v14 = swift_checkMetadataState();
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
    uint64_t v15 = (void *)swift_task_alloc(v13[1]);
    v0[28] = v15;
    *uint64_t v15 = v0;
    v15[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ5_;
    uint64_t v9 = v0[12];
    uint64_t v10 = v0[3];
    uint64_t v11 = v0[4];
    uint64_t v8 = v0[2];
    uint64_t v12 = v14;
  }
  return v17(v8, v10, v11, v9, v12, AssociatedConformanceWitness);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 192));
  if (v0)
  {
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v2[22]);
    uint64_t v3 = v2[20];
    uint64_t v4 = v2[21];
    uint64_t v5 = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY6_;
  }
  else
  {
    uint64_t v3 = v2[20];
    uint64_t v4 = v2[21];
    uint64_t v5 = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[14];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v5 = v0[15];
    uint64_t v4 = v0[16];
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v0[22]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[18] + 56))(v0[2], 1, 1, v0[14]);
    uint64_t v6 = v0[17];
    uint64_t v8 = v0[12];
    uint64_t v7 = v0[13];
    swift_task_dealloc(v0[19]);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
    uint64_t v11 = (int *)v0[22];
    uint64_t v12 = v0[19];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[25] = v13;
    v0[26] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v13(v12, v1, v3);
    uint64_t v16 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    uint64_t v14 = (void *)swift_task_alloc(v11[1]);
    v0[27] = v14;
    *uint64_t v14 = v0;
    v14[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    uint64_t v15 = v0[19];
    return v16(v15);
  }
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_(char a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 216);
  uint64_t v4 = *(void *)(*v1 + 176);
  *(unsigned char *)(*v1 + 232) = a1;
  swift_task_dealloc(v3);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v4);
  uint64_t v5 = *(void *)(v2 + 168);
  uint64_t v6 = *(void *)(v2 + 160);
  return swift_task_switch(_ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_, v6, v5);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  if (*(unsigned char *)(v0 + 232))
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 112));
    uint64_t v3 = *(int *)(v1 + 36);
    uint64_t v4 = *(void *)(v2 + v3);
    if (v4)
    {
      *(void *)(v0 + 176) = v4;
      *(void *)(v0 + 184) = *(void *)(*(void *)(v0 + 48) + v3 + 8);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v6 = *(int **)(AssociatedConformanceWitness + 40);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v4);
      uint64_t v7 = swift_checkMetadataState();
      v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
      uint64_t v8 = (void *)swift_task_alloc(v6[1]);
      *(void *)(v0 + 192) = v8;
      *uint64_t v8 = v0;
      v8[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
      uint64_t v9 = *(void *)(v0 + 136);
      uint64_t v10 = *(void *)(v0 + 104);
      uint64_t v11 = *(void *)(v0 + 24);
      uint64_t v12 = *(void *)(v0 + 32);
      uint64_t v13 = v7;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v24 = *(int **)(AssociatedConformanceWitness + 40);
      uint64_t v25 = swift_checkMetadataState();
      v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v24 + *v24);
      uint64_t v26 = (void *)swift_task_alloc(v24[1]);
      *(void *)(v0 + 224) = v26;
      *uint64_t v26 = v0;
      v26[1] = _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ5_;
      uint64_t v10 = *(void *)(v0 + 96);
      uint64_t v11 = *(void *)(v0 + 24);
      uint64_t v12 = *(void *)(v0 + 32);
      uint64_t v9 = *(void *)(v0 + 16);
      uint64_t v13 = v25;
    }
    return v27(v9, v11, v12, v10, v13, AssociatedConformanceWitness);
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 16);
    uint64_t v18 = (uint64_t *)(*(void *)(v0 + 48) + *(int *)(*(void *)(v0 + 40) + 36));
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(*v18);
    *uint64_t v18 = 0;
    v18[1] = 0;
    v14(v17, v15, v16);
    (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 144) + 56))(*(void *)(v0 + 16), 0, 1, *(void *)(v0 + 112));
    uint64_t v19 = *(void *)(v0 + 136);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 104);
    swift_task_dealloc(*(void *)(v0 + 152));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ5_()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 224);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[20];
    uint64_t v6 = v2[21];
    return swift_task_switch(_ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY7_, v5, v6);
  }
  else
  {
    uint64_t v8 = v2[19];
    uint64_t v9 = v2[17];
    uint64_t v12 = v2 + 12;
    uint64_t v10 = v2[12];
    uint64_t v11 = v12[1];
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    uint64_t v13 = *(uint64_t (**)(void))(v4 + 8);
    return v13();
  }
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY6_()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  (*(void (**)(void, uint64_t, void))(v0[11] + 32))(v0[7], v3, v0[10]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY7_()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  (*(void (**)(void, uint64_t, void))(v0[11] + 32))(v0[7], v3, v0[10]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncDropWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFDBC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncDropWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss22AsyncDropWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFDC4);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss22AsyncDropWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncDropWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncDropWhileSequence.Iterator.init(_:predicate:));
}

uint64_t AsyncSequence.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncFilterSequence, a5);
}

{
  return AsyncSequence.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncThrowingFilterSequence, a5);
}

uint64_t AsyncFilterSequence.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncFilterSequence, a6);
}

uint64_t AsyncFilterSequence.isIncluded.getter(uint64_t a1)
{
  uint64_t v1 = specialized AsyncFilterSequence.isIncluded.getter(a1);
  swift_retain();
  return v1;
}

uint64_t (*AsyncFilterSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFilterSequence.Iterator.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for AsyncFilterSequence.Iterator();
  uint64_t v10 = (void *)(a4 + *(int *)(result + 36));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t AsyncFilterSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[5] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[11] = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3[12] = AssociatedConformanceWitness;
  uint64_t v9 = *(int **)(AssociatedConformanceWitness + 32);
  v3[13] = v9;
  v3[14] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  uint64_t v11 = (void *)swift_task_alloc(v9[1]);
  v3[15] = v11;
  *uint64_t v11 = v3;
  v11[1] = AsyncFilterSequence.Iterator.next();
  uint64_t v12 = v3[12];
  uint64_t v13 = v3[8];
  return v15(v13, v10, v12);
}

uint64_t AsyncFilterSequence.Iterator.next()()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncFilterSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncFilterSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int **v12;
  int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[5];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[7] + 8))(v1, v0[6]);
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[8];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[9] + 56))(v0[2], 1, 1, v0[5]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[10];
    uint64_t v10 = v0[3];
    uint64_t v9 = v0[4];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[17] = v11;
    v0[18] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v11(v8, v1, v3);
    uint64_t v12 = (int **)(v9 + *(int *)(v10 + 36));
    uint64_t v13 = *v12;
    v0[19] = v12[1];
    uint64_t v17 = (uint64_t (*)(uint64_t))((char *)v13 + *v13);
    uint64_t v14 = v13[1];
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc(v14);
    v0[20] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncFilterSequence.Iterator.next();
    uint64_t v16 = v0[10];
    return v17(v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  int *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  if (*(unsigned char *)(v0 + 168) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 136))(*(void *)(v0 + 16), *(void *)(v0 + 80), *(void *)(v0 + 40));
    uint64_t v1 = *(void *)(v0 + 80);
    uint64_t v2 = *(void *)(v0 + 64);
    (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 72) + 56))(*(void *)(v0 + 16), 0, 1, *(void *)(v0 + 40));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 72) + 8))(*(void *)(v0 + 80), *(void *)(v0 + 40));
    uint64_t v5 = *(int **)(v0 + 104);
    uint64_t v6 = swift_checkMetadataState();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc(v5[1]);
    *(void *)(v0 + 120) = v7;
    *uint64_t v7 = v0;
    v7[1] = AsyncFilterSequence.Iterator.next();
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 64);
    return v10(v9, v6, v8);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[8];
  swift_task_dealloc(v0[10]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t AsyncFilterSequence.Iterator.next()(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  *(unsigned char *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(AsyncFilterSequence.Iterator.next(), 0, 0);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v6[9] = v8;
  v6[10] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  v6[11] = v9;
  uint64_t v10 = type metadata accessor for Optional();
  v6[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[13] = v11;
  v6[14] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v9 - 8);
  v6[15] = v12;
  v6[16] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[17] = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6[18] = AssociatedConformanceWitness;
  uint64_t v14 = *(int **)(AssociatedConformanceWitness + 40);
  v6[19] = v14;
  v6[20] = (AssociatedConformanceWitness + 40) & 0xFFFFFFFFFFFFLL | 0x2B1A000000000000;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  uint64_t v16 = (void *)swift_task_alloc(v14[1]);
  v6[21] = v16;
  *uint64_t v16 = v6;
  v16[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  uint64_t v17 = v6[18];
  uint64_t v18 = v6[14];
  uint64_t v19 = v6[10];
  uint64_t v20 = v6[3];
  uint64_t v21 = v6[4];
  return v23(v18, v20, v21, v19, v15, v17);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v3 = *(void **)v1;
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 168));
  uint64_t v4 = v2[3];
  if (v0)
  {
    if (v4)
    {
      uint64_t v5 = v3[4];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v14 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_;
    uint64_t v15 = v7;
  }
  else
  {
    if (v4)
    {
      uint64_t v10 = v3[4];
      uint64_t v11 = swift_getObjectType();
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v9 = 0;
    }
    v3[22] = v12;
    v3[23] = v9;
    uint64_t v14 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_;
    uint64_t v15 = v12;
  }
  return swift_task_switch(v14, v15, v9);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[13] + 8))(v1, v0[12]);
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[14];
    uint64_t v6 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[15] + 56))(v0[2], 1, 1, v0[11]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[16];
    uint64_t v11 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[24] = v12;
    v0[25] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v12(v9, v1, v3);
    uint64_t v13 = (int **)(v10 + *(int *)(v11 + 36));
    uint64_t v14 = *v13;
    v0[26] = v13[1];
    uint64_t v18 = (uint64_t (*)(uint64_t))((char *)v14 + *v14);
    uint64_t v15 = v14[1];
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc(v15);
    v0[27] = v16;
    *uint64_t v16 = v0;
    v16[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ2_;
    uint64_t v17 = v0[16];
    return v18(v17);
  }
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ2_(char a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 216);
  *(unsigned char *)(*v1 + 224) = a1;
  swift_task_dealloc(v3);
  swift_release();
  uint64_t v4 = *(void *)(v2 + 184);
  uint64_t v5 = *(void *)(v2 + 176);
  return swift_task_switch(_ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY3_, v5, v4);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY3_()
{
  if (*(unsigned char *)(v0 + 224) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 192))(*(void *)(v0 + 16), *(void *)(v0 + 128), *(void *)(v0 + 88));
    uint64_t v1 = *(void *)(v0 + 128);
    uint64_t v2 = *(void *)(v0 + 112);
    uint64_t v3 = *(void *)(v0 + 80);
    (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 120) + 56))(*(void *)(v0 + 16), 0, 1, *(void *)(v0 + 88));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 88));
    uint64_t v6 = *(int **)(v0 + 152);
    uint64_t v7 = swift_checkMetadataState();
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v8 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 168) = v8;
    *uint64_t v8 = v0;
    v8[1] = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 24);
    uint64_t v13 = *(void *)(v0 + 32);
    return v14(v10, v12, v13, v11, v7, v9);
  }
}

uint64_t _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[10];
  (*(void (**)(void, uint64_t, void))(v0[9] + 32))(v0[7], v3, v0[8]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncFilterSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFDCC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncFilterSequence.Iterator.next()(a1, a2);
}

uint64_t _ss19AsyncFilterSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFDD4);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncFilterSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncFilterSequence.Iterator.init(_:isIncluded:));
}

uint64_t AsyncDropWhileSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v20 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v5, v10);
  uint64_t v14 = (uint64_t *)(v3 + *(int *)(a1 + 36));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
  swift_retain();
  v17(v3, a1);
  return v20(v13, v15, v16, v5, v10);
}

uint64_t AsyncSequence.flatMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncSequence.flatMap<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for AsyncFlatMapSequence, a7);
}

{
  return AsyncSequence.flatMap<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for AsyncThrowingFlatMapSequence, a7);
}

uint64_t AsyncFlatMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for AsyncFlatMapSequence, a8);
}

uint64_t (*AsyncFlatMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.transform.getter(uint64_t a1)
{
  uint64_t v1 = specialized AsyncFlatMapSequence.Iterator.transform.getter(a1);
  swift_retain();
  return v1;
}

uint64_t (*AsyncFlatMapSequence.Iterator.currentIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.finished.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t AsyncFlatMapSequence.Iterator.finished.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 60)) = result;
  return result;
}

uint64_t (*AsyncFlatMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for AsyncFlatMapSequence.Iterator, a8);
}

uint64_t AsyncFlatMapSequence.Iterator.next()(uint64_t a1, void *a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v5 = a2[3];
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v7);
  v3[8] = swift_task_alloc(v7);
  v3[9] = a2[4];
  v3[10] = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[11] = AssociatedTypeWitness;
  uint64_t v9 = type metadata accessor for Optional();
  v3[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[13] = v10;
  v3[14] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v3[15] = v11;
  v3[16] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[17] = a2[5];
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v3[18] = v12;
  uint64_t v13 = type metadata accessor for Optional();
  v3[19] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[20] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v15);
  v3[22] = swift_task_alloc(v15);
  uint64_t v16 = *(void *)(v12 - 8);
  v3[23] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[24] = swift_task_alloc(v17);
  v3[25] = swift_task_alloc(v17);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  v3[26] = v18;
  uint64_t v19 = type metadata accessor for Optional();
  v3[27] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[28] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v21);
  v3[30] = swift_task_alloc(v21);
  uint64_t v22 = *(void *)(v18 - 8);
  v3[31] = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v23);
  v3[33] = swift_task_alloc(v23);
  return swift_task_switch(AsyncFlatMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncFlatMapSequence.Iterator.next()()
{
  if (*(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)))
  {
    uint64_t v1 = v0[32];
    uint64_t v2 = v0[33];
    uint64_t v4 = v0[29];
    uint64_t v3 = v0[30];
    uint64_t v6 = v0[24];
    uint64_t v5 = v0[25];
    uint64_t v7 = v0[22];
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[16];
    uint64_t v28 = v0[14];
    uint64_t v29 = v0[8];
    uint64_t v31 = v0[7];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[23] + 56))(v0[2], 1, 1, v0[18]);
    swift_task_dealloc(v2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = v0[30];
    uint64_t v13 = v0[31];
    uint64_t v14 = v0[26];
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
    {
      (*(void (**)(void, void))(v0[28] + 8))(v0[30], v0[27]);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v16 = *(int **)(AssociatedConformanceWitness + 32);
      uint64_t v17 = swift_checkMetadataState();
      v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
      uint64_t v18 = (void *)swift_task_alloc(v16[1]);
      v0[38] = v18;
      *uint64_t v18 = v0;
      v18[1] = AsyncFlatMapSequence.Iterator.next();
      uint64_t v19 = v0[14];
      uint64_t v20 = v17;
    }
    else
    {
      uint64_t v21 = v0[33];
      uint64_t v22 = v0[30];
      uint64_t v23 = v0[31];
      uint64_t v24 = v0[26];
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
      v0[34] = v25;
      v0[35] = (v23 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v25(v21, v22, v24);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v26 = *(int **)(AssociatedConformanceWitness + 32);
      v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v26 + *v26);
      v27 = (void *)swift_task_alloc(v26[1]);
      v0[36] = v27;
      void *v27 = v0;
      v27[1] = AsyncFlatMapSequence.Iterator.next();
      uint64_t v20 = v0[26];
      uint64_t v19 = v0[22];
    }
    return v30(v19, v20, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 288);
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[31] + 8))(v2[33], v2[26]);
    uint64_t v4 = AsyncFlatMapSequence.Iterator.next();
  }
  else
  {
    uint64_t v4 = AsyncFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  int *v41;
  void *v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[31];
    uint64_t v5 = v0[29];
    uint64_t v6 = v0[26];
    uint64_t v7 = v0[19];
    uint64_t v8 = v0[20];
    uint64_t v9 = v0[3];
    (*(void (**)(void, uint64_t))(v4 + 8))(v0[33], v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
    uint64_t v10 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, 1, 1, v6);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v5, v9);
    if ((*(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)) & 1) == 0)
    {
      uint64_t v11 = v0[30];
      uint64_t v12 = v0[31];
      uint64_t v13 = v0[26];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
      {
        (*(void (**)(void, void))(v0[28] + 8))(v0[30], v0[27]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        unint64_t v15 = *(int **)(AssociatedConformanceWitness + 32);
        uint64_t v16 = swift_checkMetadataState();
        v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
        uint64_t v17 = (void *)swift_task_alloc(v15[1]);
        v0[38] = v17;
        *uint64_t v17 = v0;
        v17[1] = AsyncFlatMapSequence.Iterator.next();
        uint64_t v18 = v0[14];
        uint64_t v19 = v16;
      }
      else
      {
        v36 = v0[33];
        v37 = v0[30];
        v38 = v0[31];
        v39 = v0[26];
        v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
        v0[34] = v40;
        v0[35] = (v38 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v40(v36, v37, v39);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v41 = *(int **)(AssociatedConformanceWitness + 32);
        v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v41 + *v41);
        v42 = (void *)swift_task_alloc(v41[1]);
        v0[36] = v42;
        *v42 = v0;
        v42[1] = AsyncFlatMapSequence.Iterator.next();
        uint64_t v19 = v0[26];
        uint64_t v18 = v0[22];
      }
      return v47(v18, v19, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v20 = v0[33];
    v43 = (void (*)(uint64_t, uint64_t, uint64_t))v0[34];
    uint64_t v21 = v0[31];
    uint64_t v22 = v0[29];
    uint64_t v24 = v0[25];
    uint64_t v23 = v0[26];
    v45 = v0[3];
    v49 = v0[2];
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v25(v24, v1, v3);
    v43(v22, v20, v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v23);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v22, v45);
    v25(v49, v24, v3);
    uint64_t v10 = 0;
  }
  v27 = v0[32];
  uint64_t v26 = v0[33];
  uint64_t v29 = v0[29];
  uint64_t v28 = v0[30];
  uint64_t v31 = v0[24];
  v30 = v0[25];
  uint64_t v32 = v0[22];
  v33 = v0[21];
  v44 = v0[16];
  v46 = v0[14];
  v48 = v0[8];
  v50 = v0[7];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[23] + 56))(v0[2], v10, 1, v0[18]);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 304);
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncFlatMapSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  int **v19;
  int *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v5 = v0[3];
    uint64_t v4 = v0[4];
    (*(void (**)(uint64_t, void))(v0[13] + 8))(v1, v0[12]);
    *(unsigned char *)(v4 + *(int *)(v5 + 60)) = 1;
    uint64_t v6 = v0[32];
    uint64_t v7 = v0[33];
    uint64_t v9 = v0[29];
    uint64_t v8 = v0[30];
    uint64_t v11 = v0[24];
    uint64_t v10 = v0[25];
    uint64_t v12 = v0[22];
    uint64_t v13 = v0[21];
    uint64_t v14 = v0[16];
    uint64_t v25 = v0[14];
    uint64_t v26 = v0[8];
    v27 = v0[7];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[23] + 56))(v0[2], 1, 1, v0[18]);
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    unint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    uint64_t v18 = v0[3];
    uint64_t v17 = v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[16], v1, v3);
    uint64_t v19 = (int **)(v17 + *(int *)(v18 + 52));
    uint64_t v20 = *v19;
    v0[40] = v19[1];
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)v20 + *v20);
    uint64_t v21 = v20[1];
    swift_retain();
    uint64_t v22 = (void *)swift_task_alloc(v21);
    v0[41] = v22;
    *uint64_t v22 = v0;
    v22[1] = AsyncFlatMapSequence.Iterator.next();
    uint64_t v23 = v0[16];
    uint64_t v24 = v0[8];
    return v28(v24, v23);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  uint64_t v2 = *(void *)(*(void *)v0 + 120);
  uint64_t v3 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc(*(void *)(*(void *)v0 + 328));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(AsyncFlatMapSequence.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  int *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[5];
  (*(void (**)(void, void, uint64_t))(v0[6] + 32))(v0[7], v0[8], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[42] = v5;
  void *v5 = v0;
  v5[1] = AsyncFlatMapSequence.Iterator.next();
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[21];
  return v9(v7, v6, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 336);
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[26]);
    uint64_t v4 = AsyncFlatMapSequence.Iterator.next();
  }
  else
  {
    uint64_t v4 = AsyncFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  int *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  int *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3);
  uint64_t v6 = v0[31];
  uint64_t v5 = v0[32];
  uint64_t v7 = v0[29];
  uint64_t v8 = v0[26];
  if (v4 == 1)
  {
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[20];
    uint64_t v11 = v0[3];
    (*(void (**)(void, void))(v6 + 8))(v0[32], v0[26]);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
    uint64_t v12 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v11);
    if (*(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)) != 1)
    {
      uint64_t v13 = v0[30];
      uint64_t v14 = v0[31];
      unint64_t v15 = v0[26];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
      {
        (*(void (**)(void, void))(v0[28] + 8))(v0[30], v0[27]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v17 = *(int **)(AssociatedConformanceWitness + 32);
        uint64_t v18 = swift_checkMetadataState();
        v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
        uint64_t v19 = (void *)swift_task_alloc(v17[1]);
        v0[38] = v19;
        *uint64_t v19 = v0;
        v19[1] = AsyncFlatMapSequence.Iterator.next();
        uint64_t v20 = v0[14];
        uint64_t v21 = v18;
      }
      else
      {
        v34 = v0[33];
        v35 = v0[30];
        v36 = v0[31];
        v37 = v0[26];
        v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
        v0[34] = v38;
        v0[35] = (v36 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v38(v34, v35, v37);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v39 = *(int **)(AssociatedConformanceWitness + 32);
        v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v39 + *v39);
        v40 = (void *)swift_task_alloc(v39[1]);
        v0[36] = v40;
        *v40 = v0;
        v40[1] = AsyncFlatMapSequence.Iterator.next();
        uint64_t v21 = v0[26];
        uint64_t v20 = v0[22];
      }
      return v44(v20, v21, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v22 = v0[3];
    v42 = v0[24];
    v46 = v0[2];
    uint64_t v23 = *(void (**)(void))(v1 + 32);
    v23();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v22);
    ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v46, v42, v3);
    uint64_t v12 = 0;
  }
  uint64_t v25 = v0[32];
  uint64_t v24 = v0[33];
  v27 = v0[29];
  uint64_t v26 = v0[30];
  uint64_t v29 = v0[24];
  uint64_t v28 = v0[25];
  v30 = v0[22];
  uint64_t v31 = v0[21];
  v41 = v0[16];
  v43 = v0[14];
  v45 = v0[8];
  v47 = v0[7];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[23] + 56))(v0[2], v12, 1, v0[18]);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v7 = v0[21];
  uint64_t v6 = v0[22];
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[14];
  uint64_t v12 = v0[8];
  uint64_t v13 = v0[7];
  swift_task_dealloc(v0[33]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v7 = v0[21];
  uint64_t v6 = v0[22];
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[14];
  uint64_t v12 = v0[8];
  uint64_t v13 = v0[7];
  swift_task_dealloc(v0[33]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v7 = v0[21];
  uint64_t v6 = v0[22];
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[14];
  uint64_t v12 = v0[8];
  uint64_t v13 = v0[7];
  swift_task_dealloc(v0[33]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v9 = a4[3];
  v6[8] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[9] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[10] = swift_task_alloc(v11);
  v6[11] = swift_task_alloc(v11);
  v6[12] = a4[4];
  v6[13] = a4[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[14] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  v6[17] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v6[18] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[19] = swift_task_alloc(v16);
  v6[20] = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for Optional();
  v6[21] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v6[22] = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[23] = swift_task_alloc(v19);
  v6[24] = swift_task_alloc(v19);
  v6[25] = a4[5];
  uint64_t v20 = swift_getAssociatedTypeWitness();
  v6[26] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v6[27] = v21;
  unint64_t v22 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[28] = swift_task_alloc(v22);
  v6[29] = swift_task_alloc(v22);
  uint64_t v23 = type metadata accessor for Optional();
  v6[30] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v6[31] = v24;
  unint64_t v25 = (*(void *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[32] = swift_task_alloc(v25);
  v6[33] = swift_task_alloc(v25);
  v6[34] = swift_task_alloc(v25);
  v6[35] = swift_task_alloc(v25);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  v6[36] = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  v6[37] = v27;
  unint64_t v28 = (*(void *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[38] = swift_task_alloc(v28);
  v6[39] = swift_task_alloc(v28);
  v6[40] = swift_task_alloc(v28);
  v6[41] = swift_task_alloc(v28);
  v6[42] = swift_task_alloc(v28);
  v6[43] = swift_task_alloc(v28);
  uint64_t v29 = swift_getAssociatedTypeWitness();
  v6[44] = v29;
  uint64_t v30 = type metadata accessor for Optional();
  v6[45] = v30;
  uint64_t v31 = *(void *)(v30 - 8);
  v6[46] = v31;
  unint64_t v32 = (*(void *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[47] = swift_task_alloc(v32);
  v6[48] = swift_task_alloc(v32);
  uint64_t v33 = *(void *)(v29 - 8);
  v6[49] = v33;
  unint64_t v34 = (*(void *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[50] = swift_task_alloc(v34);
  v6[51] = swift_task_alloc(v34);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v36 = (*(uint64_t (**)(uint64_t))(a3 + 8))(ObjectType);
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  v6[52] = v36;
  v6[53] = v38;
  return swift_task_switch(_ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY0_, v36, v38);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  if (*(unsigned char *)(v0[6] + *(int *)(v0[5] + 60)))
  {
    uint64_t v2 = v0[50];
    uint64_t v1 = v0[51];
    uint64_t v3 = v0[47];
    uint64_t v4 = v0[48];
    uint64_t v6 = v0[42];
    uint64_t v5 = v0[43];
    uint64_t v8 = v0[40];
    uint64_t v7 = v0[41];
    uint64_t v9 = v0[39];
    uint64_t v31 = v0[38];
    uint64_t v32 = v0[35];
    uint64_t v33 = v0[34];
    uint64_t v34 = v0[33];
    uint64_t v35 = v0[32];
    uint64_t v36 = v0[29];
    uint64_t v37 = v0[28];
    uint64_t v38 = v0[24];
    uint64_t v39 = v0[23];
    uint64_t v40 = v0[20];
    uint64_t v41 = v0[19];
    uint64_t v42 = v0[16];
    uint64_t v43 = v0[11];
    uint64_t v45 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[27] + 56))(v0[2], 1, 1, v0[26]);
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = v0[48];
    uint64_t v13 = v0[49];
    uint64_t v14 = v0[44];
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
    {
      (*(void (**)(void, void))(v0[46] + 8))(v0[48], v0[45]);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v0[57] = AssociatedConformanceWitness;
      unint64_t v16 = *(int **)(AssociatedConformanceWitness + 40);
      uint64_t v17 = swift_checkMetadataState();
      v0[58] = v17;
      v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
      uint64_t v18 = (void *)swift_task_alloc(v16[1]);
      v0[59] = v18;
      *uint64_t v18 = v0;
      v18[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_;
      uint64_t v19 = v0[24];
      uint64_t v20 = v0[20];
      uint64_t v21 = v0[3];
      uint64_t v22 = v0[4];
      uint64_t v23 = v17;
    }
    else
    {
      uint64_t v24 = v0[51];
      uint64_t v25 = v0[48];
      uint64_t v26 = v0[49];
      uint64_t v27 = v0[44];
      unint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
      v0[54] = v28;
      v0[55] = (v26 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v28(v24, v25, v27);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v29 = *(int **)(AssociatedConformanceWitness + 40);
      v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v29 + *v29);
      uint64_t v30 = (void *)swift_task_alloc(v29[1]);
      v0[56] = v30;
      *uint64_t v30 = v0;
      v30[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_;
      uint64_t v23 = v0[44];
      uint64_t v20 = v0[42];
      uint64_t v19 = v0[35];
      uint64_t v21 = v0[3];
      uint64_t v22 = v0[4];
    }
    return v44(v19, v21, v22, v20, v23, AssociatedConformanceWitness);
  }
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 448));
  if (v0)
  {
    (*(void (**)(void, void))(v2[49] + 8))(v2[51], v2[44]);
    uint64_t v3 = v2[52];
    uint64_t v4 = v2[53];
    uint64_t v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY9_;
  }
  else
  {
    uint64_t v3 = v2[52];
    uint64_t v4 = v2[53];
    uint64_t v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY2_;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[27];
  (*(void (**)(uint64_t, void, void))(v0[31] + 32))(v1, v0[35], v0[30]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[49];
    uint64_t v5 = v0[47];
    uint64_t v6 = v0[44];
    uint64_t v7 = v0[34];
    uint64_t v8 = v0[30];
    uint64_t v9 = v0[31];
    uint64_t v10 = v0[5];
    (*(void (**)(void, uint64_t))(v4 + 8))(v0[51], v6);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    uint64_t v11 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, 1, 1, v6);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v5, v10);
    if ((*(unsigned char *)(v0[6] + *(int *)(v0[5] + 60)) & 1) == 0)
    {
      uint64_t v12 = v0[48];
      uint64_t v13 = v0[49];
      uint64_t v14 = v0[44];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
      {
        (*(void (**)(void, void))(v0[46] + 8))(v0[48], v0[45]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v0[57] = AssociatedConformanceWitness;
        unint64_t v16 = *(int **)(AssociatedConformanceWitness + 40);
        uint64_t v17 = swift_checkMetadataState();
        v0[58] = v17;
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
        uint64_t v18 = (void *)swift_task_alloc(v16[1]);
        v0[59] = v18;
        *uint64_t v18 = v0;
        v18[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_;
        uint64_t v19 = v0[24];
        uint64_t v20 = v0[20];
        uint64_t v21 = v0[3];
        uint64_t v22 = v0[4];
        uint64_t v23 = v17;
      }
      else
      {
        uint64_t v42 = v0[51];
        uint64_t v43 = v0[48];
        uint64_t v44 = v0[49];
        uint64_t v45 = v0[44];
        uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
        v0[54] = v46;
        v0[55] = (v44 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v46(v42, v43, v45);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v47 = *(int **)(AssociatedConformanceWitness + 40);
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v47 + *v47);
        v48 = (void *)swift_task_alloc(v47[1]);
        v0[56] = v48;
        void *v48 = v0;
        v48[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_;
        uint64_t v23 = v0[44];
        uint64_t v20 = v0[42];
        uint64_t v19 = v0[35];
        uint64_t v21 = v0[3];
        uint64_t v22 = v0[4];
      }
      return v63(v19, v21, v22, v20, v23, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[54];
    uint64_t v25 = v0[51];
    uint64_t v26 = v0[49];
    uint64_t v27 = v0[47];
    uint64_t v28 = v0[44];
    uint64_t v29 = v0[29];
    uint64_t v30 = v0[26];
    uint64_t v61 = v0[5];
    uint64_t v65 = v0[2];
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[27] + 32);
    v31(v29, v0[34], v30);
    v24(v27, v25, v28);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v28);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v27, v61);
    v31(v65, v29, v30);
    uint64_t v11 = 0;
  }
  uint64_t v33 = v0[50];
  uint64_t v32 = v0[51];
  uint64_t v34 = v0[47];
  uint64_t v35 = v0[48];
  uint64_t v37 = v0[42];
  uint64_t v36 = v0[43];
  uint64_t v39 = v0[40];
  uint64_t v38 = v0[41];
  uint64_t v49 = v0[39];
  uint64_t v50 = v0[38];
  uint64_t v51 = v0[35];
  uint64_t v52 = v0[34];
  uint64_t v53 = v0[33];
  uint64_t v54 = v0[32];
  uint64_t v55 = v0[29];
  uint64_t v56 = v0[28];
  uint64_t v57 = v0[24];
  uint64_t v58 = v0[23];
  uint64_t v59 = v0[20];
  uint64_t v60 = v0[19];
  uint64_t v62 = v0[16];
  uint64_t v64 = v0[11];
  uint64_t v66 = v0[10];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[27] + 56))(v0[2], v11, 1, v0[26]);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  uint64_t v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 472));
  uint64_t v3 = *(void *)(v2 + 424);
  uint64_t v4 = *(void *)(v2 + 416);
  if (v0) {
    uint64_t v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY10_;
  }
  else {
    uint64_t v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY4_;
  }
  return swift_task_switch(v5, v4, v3);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  (*(void (**)(uint64_t, void, void))(v0[22] + 32))(v1, v0[24], v0[21]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = v0[6];
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    *(unsigned char *)(v5 + *(int *)(v4 + 60)) = 1;
    uint64_t v7 = v0[50];
    uint64_t v6 = v0[51];
    uint64_t v8 = v0[47];
    uint64_t v9 = v0[48];
    uint64_t v11 = v0[42];
    uint64_t v10 = v0[43];
    uint64_t v13 = v0[40];
    uint64_t v12 = v0[41];
    uint64_t v14 = v0[39];
    uint64_t v25 = v0[38];
    uint64_t v26 = v0[35];
    uint64_t v27 = v0[34];
    uint64_t v28 = v0[33];
    uint64_t v29 = v0[32];
    uint64_t v30 = v0[29];
    uint64_t v31 = v0[28];
    uint64_t v32 = v0[24];
    uint64_t v33 = v0[23];
    uint64_t v34 = v0[20];
    uint64_t v35 = v0[19];
    uint64_t v36 = v0[16];
    uint64_t v37 = v0[11];
    uint64_t v38 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[27] + 56))(v0[2], 1, 1, v0[26]);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
  else
  {
    uint64_t v17 = v0[5];
    uint64_t v18 = v0[6];
    (*(void (**)(void, void, void))(v0[15] + 32))(v0[16], v0[23], v0[14]);
    uint64_t v19 = (int **)(v18 + *(int *)(v17 + 52));
    uint64_t v20 = *v19;
    v0[60] = v19[1];
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))((char *)v20 + *v20);
    uint64_t v21 = v20[1];
    swift_retain();
    uint64_t v22 = (void *)swift_task_alloc(v21);
    v0[61] = v22;
    *uint64_t v22 = v0;
    v22[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ5_;
    uint64_t v23 = v0[16];
    uint64_t v24 = v0[11];
    return v39(v24, v23);
  }
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ5_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 128);
  uint64_t v3 = *(void *)(*v0 + 120);
  uint64_t v4 = *(void *)(*v0 + 112);
  swift_task_dealloc(*(void *)(*v0 + 488));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 424);
  uint64_t v6 = *(void *)(v1 + 416);
  return swift_task_switch(_ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY6_, v6, v5);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY6_()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[8];
  (*(void (**)(void, void, uint64_t))(v0[9] + 32))(v0[10], v0[11], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 40);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[62] = v5;
  void *v5 = v0;
  v5[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ7_;
  uint64_t v6 = v0[44];
  uint64_t v7 = v0[40];
  uint64_t v8 = v0[33];
  uint64_t v9 = v0[3];
  uint64_t v10 = v0[4];
  return v12(v8, v9, v10, v7, v6, AssociatedConformanceWitness);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ7_()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 496));
  if (v0)
  {
    (*(void (**)(void, void))(v2[49] + 8))(v2[50], v2[44]);
    uint64_t v3 = v2[52];
    uint64_t v4 = v2[53];
    uint64_t v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY11_;
  }
  else
  {
    uint64_t v3 = v2[52];
    uint64_t v4 = v2[53];
    uint64_t v5 = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY8_;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY8_()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[26];
  uint64_t v3 = v0[27];
  (*(void (**)(uint64_t, void, void))(v0[31] + 32))(v1, v0[33], v0[30]);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v6 = v0[49];
  uint64_t v5 = v0[50];
  uint64_t v7 = v0[47];
  uint64_t v8 = v0[44];
  uint64_t v9 = v0[32];
  if (v4 == 1)
  {
    uint64_t v10 = v0[30];
    uint64_t v11 = v0[31];
    uint64_t v12 = v0[5];
    (*(void (**)(void, void))(v6 + 8))(v0[50], v0[44]);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v13 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v12);
    if (*(unsigned char *)(v0[6] + *(int *)(v0[5] + 60)) != 1)
    {
      uint64_t v14 = v0[48];
      uint64_t v15 = v0[49];
      uint64_t v16 = v0[44];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v14, 1, v16) == 1)
      {
        (*(void (**)(void, void))(v0[46] + 8))(v0[48], v0[45]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v0[57] = AssociatedConformanceWitness;
        uint64_t v18 = *(int **)(AssociatedConformanceWitness + 40);
        uint64_t v19 = swift_checkMetadataState();
        v0[58] = v19;
        uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v18 + *v18);
        uint64_t v20 = (void *)swift_task_alloc(v18[1]);
        v0[59] = v20;
        *uint64_t v20 = v0;
        v20[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ3_;
        uint64_t v21 = v0[24];
        uint64_t v22 = v0[20];
        uint64_t v23 = v0[3];
        uint64_t v24 = v0[4];
        uint64_t v25 = v19;
      }
      else
      {
        uint64_t v39 = v0[51];
        uint64_t v40 = v0[48];
        uint64_t v41 = v0[49];
        uint64_t v42 = v0[44];
        uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32);
        v0[54] = v43;
        v0[55] = (v41 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v43(v39, v40, v42);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v44 = *(int **)(AssociatedConformanceWitness + 40);
        uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v44 + *v44);
        uint64_t v45 = (void *)swift_task_alloc(v44[1]);
        v0[56] = v45;
        *uint64_t v45 = v0;
        v45[1] = _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTQ1_;
        uint64_t v25 = v0[44];
        uint64_t v22 = v0[42];
        uint64_t v21 = v0[35];
        uint64_t v23 = v0[3];
        uint64_t v24 = v0[4];
      }
      return v60(v21, v23, v24, v22, v25, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v58 = v0[28];
    uint64_t v26 = v0[26];
    uint64_t v27 = v0[5];
    uint64_t v62 = v0[2];
    uint64_t v28 = *(void (**)(void))(v0[27] + 32);
    v28();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v27);
    ((void (*)(uint64_t, uint64_t, uint64_t))v28)(v62, v58, v26);
    uint64_t v13 = 0;
  }
  uint64_t v30 = v0[50];
  uint64_t v29 = v0[51];
  uint64_t v31 = v0[47];
  uint64_t v32 = v0[48];
  uint64_t v34 = v0[42];
  uint64_t v33 = v0[43];
  uint64_t v36 = v0[40];
  uint64_t v35 = v0[41];
  uint64_t v46 = v0[39];
  uint64_t v47 = v0[38];
  uint64_t v48 = v0[35];
  uint64_t v49 = v0[34];
  uint64_t v50 = v0[33];
  uint64_t v51 = v0[32];
  uint64_t v52 = v0[29];
  uint64_t v53 = v0[28];
  uint64_t v54 = v0[24];
  uint64_t v55 = v0[23];
  uint64_t v56 = v0[20];
  uint64_t v57 = v0[19];
  uint64_t v59 = v0[16];
  uint64_t v61 = v0[11];
  uint64_t v63 = v0[10];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[27] + 56))(v0[2], v13, 1, v0[26]);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY9_()
{
  uint64_t v1 = v0[43];
  uint64_t v3 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v4 = v0[36];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[37] + 32);
  v7(v1, v0[42], v4);
  v7(v2, v1, v4);
  *(unsigned char *)(v5 + *(int *)(v6 + 60)) = 1;
  v7(v3, v2, v4);
  swift_dynamicCast();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_willThrowTypedImpl();
  uint64_t v9 = v0[50];
  uint64_t v8 = v0[51];
  uint64_t v10 = v0[47];
  uint64_t v11 = v0[48];
  uint64_t v13 = v0[42];
  uint64_t v12 = v0[43];
  uint64_t v15 = v0[40];
  uint64_t v14 = v0[41];
  uint64_t v19 = v0[39];
  uint64_t v20 = v0[38];
  uint64_t v21 = v0[35];
  uint64_t v22 = v0[34];
  uint64_t v23 = v0[33];
  uint64_t v24 = v0[32];
  uint64_t v25 = v0[29];
  uint64_t v26 = v0[28];
  uint64_t v27 = v0[24];
  uint64_t v28 = v0[23];
  uint64_t v16 = v0[19];
  uint64_t v29 = v0[20];
  uint64_t v30 = v0[16];
  uint64_t v31 = v0[11];
  uint64_t v32 = v0[10];
  (*(void (**)(void, uint64_t, void))(v0[18] + 32))(v0[7], v16, v0[17]);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v16);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY10_()
{
  uint64_t v18 = v0[20];
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  uint64_t v3 = v0[47];
  uint64_t v4 = v0[48];
  uint64_t v6 = v0[42];
  uint64_t v5 = v0[43];
  uint64_t v7 = v0[40];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[39];
  uint64_t v12 = v0[38];
  uint64_t v13 = v0[35];
  uint64_t v14 = v0[34];
  uint64_t v15 = v0[33];
  uint64_t v16 = v0[32];
  uint64_t v17 = v0[29];
  uint64_t v19 = v0[28];
  uint64_t v20 = v0[24];
  uint64_t v21 = v0[23];
  uint64_t v22 = v0[19];
  uint64_t v23 = v0[16];
  uint64_t v24 = v0[11];
  uint64_t v25 = v0[10];
  (*(void (**)(void))(v0[18] + 32))(v0[7]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v18);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKFTY11_()
{
  uint64_t v1 = v0[41];
  uint64_t v3 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v4 = v0[36];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[37] + 32);
  v7(v1, v0[40], v4);
  v7(v2, v1, v4);
  *(unsigned char *)(v6 + *(int *)(v5 + 60)) = 1;
  v7(v3, v2, v4);
  swift_dynamicCast();
  swift_getAssociatedConformanceWitness();
  swift_willThrowTypedImpl();
  uint64_t v9 = v0[50];
  uint64_t v8 = v0[51];
  uint64_t v10 = v0[47];
  uint64_t v11 = v0[48];
  uint64_t v13 = v0[42];
  uint64_t v12 = v0[43];
  uint64_t v15 = v0[40];
  uint64_t v14 = v0[41];
  uint64_t v19 = v0[39];
  uint64_t v20 = v0[38];
  uint64_t v21 = v0[35];
  uint64_t v22 = v0[34];
  uint64_t v23 = v0[33];
  uint64_t v24 = v0[32];
  uint64_t v25 = v0[29];
  uint64_t v26 = v0[28];
  uint64_t v27 = v0[24];
  uint64_t v28 = v0[23];
  uint64_t v16 = v0[19];
  uint64_t v29 = v0[20];
  uint64_t v30 = v0[16];
  uint64_t v31 = v0[11];
  uint64_t v32 = v0[10];
  (*(void (**)(void, uint64_t, void))(v0[18] + 32))(v0[7], v16, v0[17]);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v16);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncFlatMapSequence<A, B>.Iterator(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFDDC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncFlatMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss20AsyncFlatMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFDE4);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss20AsyncFlatMapSequenceV8IteratorV4next9isolation7ElementQy_SgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncFlatMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncFlatMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t, void))AsyncFlatMapSequence.Iterator.init(_:transform:));
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[3] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v6[4] = v13;
  uint64_t v14 = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[5] = v14;
  uint64_t v15 = (void *)swift_task_alloc(dword_1E91CFDEC);
  v6[6] = v15;
  *uint64_t v15 = v6;
  v15[1] = _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6, v14);
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[5];
    (*(void (**)(void, uint64_t, void))(v2[4] + 32))(v2[2], v5, v2[3]);
    swift_task_dealloc(v5);
  }
  else
  {
    swift_task_dealloc(v2[5]);
  }
  uint64_t v6 = *(uint64_t (**)(void))(v4 + 8);
  return v6();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = v6;
  v9[6] = a5;
  v9[7] = a6;
  v9[4] = a3;
  v9[5] = a4;
  v9[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[8] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v9[9] = v12;
  v9[10] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(int **)(a5 + 32);
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
  uint64_t v14 = (void *)swift_task_alloc(v13[1]);
  v9[11] = v14;
  *uint64_t v14 = v9;
  v14[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return v16(a1, a4, a5);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  uint64_t v3 = *(void **)v1;
  v3[12] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    if (v3[3])
    {
      uint64_t v4 = v3[4];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    return swift_task_switch(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_, v6, v8);
  }
  else
  {
    swift_task_dealloc(v3[10]);
    uint64_t v9 = (uint64_t (*)(void))v3[1];
    return v9();
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  v0[2] = v0[12];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_getAssociatedConformanceWitness();
  swift_willThrowTypedImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  swift_task_dealloc(v1);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t AsyncSequence.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncMapSequence, a6);
}

{
  return AsyncSequence.compactMap<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncThrowingMapSequence, a6);
}

uint64_t AsyncMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncMapSequence, a7);
}

uint64_t (*AsyncMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncMapSequence.Iterator.transform.getter(uint64_t a1)
{
  uint64_t v1 = specialized AsyncMapSequence.Iterator.transform.getter(a1);
  swift_retain();
  return v1;
}

uint64_t AsyncMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncMapSequence.Iterator, a7);
}

uint64_t AsyncCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a8, a1, AssociatedTypeWitness);
  uint64_t result = a7(0, a4, a5, a6);
  uint64_t v18 = (void *)(a8 + *(int *)(result + 44));
  *uint64_t v18 = a2;
  v18[1] = a3;
  return result;
}

uint64_t AsyncMapSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[5] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  uint64_t v7 = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[8] = v7;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v3[9] = v8;
  v3[10] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(int **)(AssociatedConformanceWitness + 32);
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v12 = (void *)swift_task_alloc(v10[1]);
  v3[11] = v12;
  *uint64_t v12 = v3;
  v12[1] = AsyncMapSequence.Iterator.next();
  return v14(v7, v11, AssociatedConformanceWitness);
}

uint64_t AsyncMapSequence.Iterator.next()()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncMapSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncMapSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  int **v10;
  int *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[5];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[7] + 8))(v1, v0[6]);
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[8];
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(v0[3] + 24) - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v9 = v0[3];
    uint64_t v8 = v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[10], v1, v3);
    uint64_t v10 = (int **)(v8 + *(int *)(v9 + 44));
    uint64_t v11 = *v10;
    v0[13] = v10[1];
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)v11 + *v11);
    uint64_t v12 = v11[1];
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc(v12);
    v0[14] = v13;
    *uint64_t v13 = v0;
    v13[1] = AsyncMapSequence.Iterator.next();
    uint64_t v14 = v0[10];
    uint64_t v15 = v0[2];
    return v16(v15, v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 72);
  uint64_t v3 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(AsyncMapSequence.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  (*(void (**)(void, void, uint64_t))(*(void *)(*(void *)(v0[3] + 24) - 8) + 56))(v0[2], 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[8];
  swift_task_dealloc(v0[10]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v6[9] = v10;
  uint64_t v11 = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[10] = v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v6[11] = v12;
  uint64_t v13 = type metadata accessor for Optional();
  v6[12] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v6[13] = v14;
  uint64_t v15 = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[14] = v15;
  uint64_t v16 = *(void *)(v12 - 8);
  v6[15] = v16;
  v6[16] = swift_task_alloc((*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = *(int **)(AssociatedConformanceWitness + 40);
  uint64_t v19 = swift_checkMetadataState();
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v18 + *v18);
  uint64_t v20 = (void *)swift_task_alloc(v18[1]);
  v6[17] = v20;
  *uint64_t v20 = v6;
  v20[1] = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_;
  return v22(v15, a2, a3, v11, v19, AssociatedConformanceWitness);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ0_()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  swift_task_dealloc(*(void *)(*(void *)v1 + 136));
  if (v0)
  {
    if (v3)
    {
      uint64_t v4 = v2[4];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    uint64_t v13 = _ss19AsyncFilterSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_;
    uint64_t v14 = v6;
  }
  else
  {
    if (v3)
    {
      uint64_t v9 = v2[4];
      uint64_t v10 = swift_getObjectType();
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v9);
      uint64_t v8 = v12;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v8 = 0;
    }
    v2[18] = v11;
    v2[19] = v8;
    uint64_t v13 = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_;
    uint64_t v14 = v11;
  }
  return swift_task_switch(v13, v14, v8);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY1_()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[13] + 8))(v1, v0[12]);
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[14];
    uint64_t v6 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(v0[5] + 24) - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v10 = v0[5];
    uint64_t v9 = v0[6];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[16], v1, v3);
    uint64_t v11 = (int **)(v9 + *(int *)(v10 + 44));
    uint64_t v12 = *v11;
    v0[20] = v11[1];
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))((char *)v12 + *v12);
    uint64_t v13 = v12[1];
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc(v13);
    v0[21] = v14;
    *uint64_t v14 = v0;
    v14[1] = _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_;
    uint64_t v15 = v0[16];
    uint64_t v16 = v0[2];
    return v17(v16, v15);
  }
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTQ2_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 128);
  uint64_t v3 = *(void *)(*v0 + 120);
  uint64_t v4 = *(void *)(*v0 + 88);
  swift_task_dealloc(*(void *)(*v0 + 168));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 152);
  uint64_t v6 = *(void *)(v1 + 144);
  return swift_task_switch(_ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_, v6, v5);
}

uint64_t _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKFTY3_()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[10];
  (*(void (**)(void, void, uint64_t))(*(void *)(*(void *)(v0[5] + 24) - 8) + 56))(v0[2], 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncMapSequence<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFDF4);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss16AsyncMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFDFC);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss16AsyncMapSequenceV8IteratorV4next9isolationq_SgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t))AsyncMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncCompactMapSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v20 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v5, v10);
  uint64_t v14 = (uint64_t *)(v3 + *(int *)(a1 + 44));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
  swift_retain();
  v17(v3, a1);
  return v20(v13, v15, v16, v5, *(void *)(a1 + 24), v10);
}

uint64_t AsyncSequence.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v4 = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, v4, a2);
    uint64_t result = type metadata accessor for AsyncPrefixSequence();
    *(void *)(a3 + *(int *)(result + 36)) = a1;
  }
  return result;
}

uint64_t AsyncPrefixSequence.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.init(_:dropping:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncPrefixSequence, a5);
}

uint64_t AsyncDropFirstSequence.init(_:dropping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a6, a1);
  uint64_t result = a5(0, a3, a4);
  *(void *)(a6 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t AsyncPrefixSequence.count.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t (*AsyncPrefixSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixSequence.Iterator.remaining.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*AsyncPrefixSequence.Iterator.remaining.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixSequence.Iterator.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncDropFirstSequence.Iterator.init(_:count:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncPrefixSequence.Iterator, a5);
}

uint64_t AsyncDropFirstSequence.Iterator.init(_:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  uint64_t result = a5(0, a3, a4);
  *(void *)(a6 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t AsyncPrefixSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(AsyncPrefixSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncPrefixSequence.Iterator.next()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(int *)(v0[3] + 36);
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *(void *)(v1 + v2) = v3 - 1;
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = *(int **)(AssociatedConformanceWitness + 32);
    uint64_t v6 = swift_checkMetadataState();
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc(v5[1]);
    v0[5] = v7;
    *uint64_t v7 = v0;
    v7[1] = AsyncPrefixSequence.Iterator.next();
    uint64_t v8 = v0[2];
    return v13(v8, v6, AssociatedConformanceWitness);
  }
  else
  {
    uint64_t v10 = v0[2];
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(void *)(a4 + 24);
  v6[9] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  v6[13] = v12;
  v6[14] = v14;
  return swift_task_switch(_ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v12, v14);
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(int *)(v0[5] + 36);
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *(void *)(v1 + v2) = v3 - 1;
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = *(int **)(AssociatedConformanceWitness + 40);
    uint64_t v6 = swift_checkMetadataState();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    uint64_t v7 = (void *)swift_task_alloc(v5[1]);
    v0[15] = v7;
    *uint64_t v7 = v0;
    v7[1] = _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[3];
    uint64_t v10 = v0[4];
    uint64_t v11 = v0[2];
    return v16(v11, v9, v10, v8, v6, AssociatedConformanceWitness);
  }
  else
  {
    uint64_t v13 = v0[2];
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v13, 1, 1, AssociatedTypeWitness);
    swift_task_dealloc(v0[12]);
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[15];
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[13];
    uint64_t v6 = v2[14];
    return swift_task_switch(_ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_, v5, v6);
  }
  else
  {
    swift_task_dealloc(v2[12]);
    uint64_t v8 = (uint64_t (*)(void))v4[1];
    return v8();
  }
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v1 = v0[12];
  (*(void (**)(void, uint64_t, void))(v0[11] + 32))(v0[7], v1, v0[10]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPrefixSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1E91CFE04);
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v6[2] = a1;
  return swift_task_switch(AsyncPrefixSequence.Iterator.next(), 0, 0);
}

uint64_t _ss19AsyncPrefixSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFE0C);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss19AsyncPrefixSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncPrefixSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropFirstSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))AsyncPrefixSequence.Iterator.init(_:count:));
}

uint64_t AsyncDropFirstSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v6, v11);
  uint64_t v15 = *(void *)(v4 + *(int *)(a1 + 36));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v4, a1);
  return a2(v14, v15, v6, v11);
}

uint64_t AsyncSequence.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AsyncSequence.prefix(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncPrefixWhileSequence, a5);
}

{
  return AsyncSequence.prefix(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncThrowingPrefixWhileSequence, a5);
}

uint64_t AsyncPrefixWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncPrefixWhileSequence, a6);
}

uint64_t AsyncPrefixWhileSequence.Iterator.predicateHasFailed.getter()
{
  return *v0;
}

uint64_t AsyncPrefixWhileSequence.Iterator.predicateHasFailed.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*AsyncPrefixWhileSequence.Iterator.predicateHasFailed.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncPrefixWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixWhileSequence.Iterator.predicate.getter(uint64_t a1)
{
  uint64_t v1 = specialized AsyncPrefixWhileSequence.Iterator.predicate.getter(a1);
  swift_retain();
  return v1;
}

uint64_t AsyncPrefixWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  return AsyncPrefixWhileSequence.Iterator.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncPrefixWhileSequence.Iterator, a6);
}

uint64_t AsyncPrefixWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  v3[6] = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncPrefixWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncPrefixWhileSequence.Iterator.next()()
{
  if (**(unsigned char **)(v0 + 32))
  {
    uint64_t v1 = *(void *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 80);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 16), 1, 1, *(void *)(v0 + 56));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v6 = *(int **)(AssociatedConformanceWitness + 32);
    uint64_t v7 = swift_checkMetadataState();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v8 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 104) = v8;
    *uint64_t v8 = v0;
    v8[1] = AsyncPrefixWhileSequence.Iterator.next();
    uint64_t v9 = *(void *)(v0 + 80);
    return v10(v9, v7, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncPrefixWhileSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncPrefixWhileSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int **v12;
  int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], 1, 1, v0[7]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[3];
    uint64_t v9 = v0[4];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[15] = v11;
    v0[16] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v11(v8, v1, v3);
    uint64_t v12 = (int **)(v9 + *(int *)(v10 + 40));
    uint64_t v13 = *v12;
    v0[17] = v12[1];
    uint64_t v17 = (uint64_t (*)(uint64_t))((char *)v13 + *v13);
    uint64_t v14 = v13[1];
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc(v14);
    v0[18] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncPrefixWhileSequence.Iterator.next();
    uint64_t v16 = v0[12];
    return v17(v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  if (*(unsigned char *)(v0 + 152) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 120))(*(void *)(v0 + 16), *(void *)(v0 + 96), *(void *)(v0 + 56));
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v2 = *(unsigned char **)(v0 + 32);
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 56));
    uint64_t v1 = 1;
    uint64_t *v2 = 1;
  }
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 80);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 16), v1, 1, *(void *)(v0 + 56));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[12]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t AsyncPrefixWhileSequence.Iterator.next()(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(unsigned char *)(*(void *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(AsyncPrefixWhileSequence.Iterator.next(), 0, 0);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = v5;
  v6[7] = a5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *(void *)(a4 + 24);
  v6[9] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v6[13] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  v6[14] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v11 - 8);
  v6[17] = v14;
  v6[18] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  v6[19] = v16;
  v6[20] = v18;
  return swift_task_switch(_ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_, v16, v18);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY0_()
{
  if (**(unsigned char **)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 144);
    uint64_t v2 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 96);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 136) + 56))(*(void *)(v0 + 16), 1, 1, *(void *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v7 = *(int **)(AssociatedConformanceWitness + 40);
    uint64_t v8 = swift_checkMetadataState();
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
    uint64_t v9 = (void *)swift_task_alloc(v7[1]);
    *(void *)(v0 + 168) = v9;
    void *v9 = v0;
    v9[1] = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_;
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 24);
    uint64_t v13 = *(void *)(v0 + 32);
    return v14(v10, v12, v13, v11, v8, AssociatedConformanceWitness);
  }
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ1_()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 168));
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v5 = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_;
  }
  else {
    uint64_t v5 = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_;
  }
  return swift_task_switch(v5, v4, v3);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY2_()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[13];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[15] + 8))(v1, v0[14]);
    uint64_t v4 = v0[18];
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[12];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[17] + 56))(v0[2], 1, 1, v0[13]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v0[18];
    uint64_t v11 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[22] = v12;
    v0[23] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v12(v9, v1, v3);
    uint64_t v13 = (int **)(v10 + *(int *)(v11 + 40));
    uint64_t v14 = *v13;
    v0[24] = v13[1];
    uint64_t v18 = (uint64_t (*)(uint64_t))((char *)v14 + *v14);
    uint64_t v15 = v14[1];
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc(v15);
    v0[25] = v16;
    *uint64_t v16 = v0;
    v16[1] = _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_;
    uint64_t v17 = v0[18];
    return v18(v17);
  }
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTQ3_(char a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 200);
  *(unsigned char *)(*v1 + 208) = a1;
  swift_task_dealloc(v3);
  swift_release();
  uint64_t v4 = *(void *)(v2 + 160);
  uint64_t v5 = *(void *)(v2 + 152);
  return swift_task_switch(_ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_, v5, v4);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY4_()
{
  if (*(unsigned char *)(v0 + 208) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 176))(*(void *)(v0 + 16), *(void *)(v0 + 144), *(void *)(v0 + 104));
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v2 = *(unsigned char **)(v0 + 48);
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 104));
    uint64_t v1 = 1;
    unsigned char *v2 = 1;
  }
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 96);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 136) + 56))(*(void *)(v0 + 16), v1, 1, *(void *)(v0 + 104));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTY5_()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[12];
  (*(void (**)(void, uint64_t, void))(v0[11] + 32))(v0[7], v3, v0[10]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPrefixWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFE14);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncPrefixWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss24AsyncPrefixWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91CFE1C);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _ss24AsyncPrefixWhileSequenceV8IteratorV4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, v12);
}

uint64_t AsyncPrefixWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncPrefixWhileSequence.Iterator.init(_:predicate:));
}

uint64_t AsyncSequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t v10 = *(void *)(a6 - 8);
  v8[10] = v10;
  v8[11] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[12] = AssociatedTypeWitness;
  uint64_t v12 = type metadata accessor for Optional();
  v8[13] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[14] = v13;
  v8[15] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  v8[16] = v14;
  v8[17] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a5 - 8);
  v8[18] = v15;
  v8[19] = swift_task_alloc((*(void *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  v8[20] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[21] = v17;
  v8[22] = swift_task_alloc((*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.reduce<A>(_:_:), 0, 0);
}

uint64_t AsyncSequence.reduce<A>(_:_:)()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[6];
  (*(void (**)(void, void, void))(v0[10] + 16))(v0[2], v0[3], v0[7]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v5, v4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[23] = AssociatedConformanceWitness;
  uint64_t v7 = *(int **)(AssociatedConformanceWitness + 32);
  v0[24] = v7;
  v0[25] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[26] = v8;
  *uint64_t v8 = v0;
  v8[1] = AsyncSequence.reduce<A>(_:_:);
  uint64_t v9 = v0[23];
  uint64_t v10 = v0[20];
  uint64_t v11 = v0[15];
  return v13(v11, v10, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v12;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 208);
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[21];
    uint64_t v4 = v2[22];
    uint64_t v6 = v2[20];
    uint64_t v7 = v2[10];
    uint64_t v8 = v2[7];
    uint64_t v9 = v2[2];
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
    uint64_t v10 = AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    uint64_t v10 = AsyncSequence.reduce<A>(_:_:);
  }
  return swift_task_switch(v10, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  int *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[22];
    uint64_t v5 = v0[19];
    uint64_t v6 = v0[17];
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[11];
    (*(void (**)(uint64_t, void))(v0[21] + 8))(v4, v0[20]);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    swift_task_dealloc(v9);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = (int *)v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[17], v1, v3);
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
    uint64_t v13 = (void *)swift_task_alloc(v12[1]);
    v0[28] = v13;
    *uint64_t v13 = v0;
    v13[1] = AsyncSequence.reduce<A>(_:_:);
    uint64_t v14 = v0[17];
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[2];
    return v17(v15, v16, v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[21];
    uint64_t v4 = v2[22];
    uint64_t v6 = v2[20];
    uint64_t v8 = v2[16];
    uint64_t v7 = v2[17];
    uint64_t v9 = v2[12];
    uint64_t v10 = v2[10];
    uint64_t v11 = v2[7];
    uint64_t v12 = v2[2];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    uint64_t v13 = AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    uint64_t v15 = v2[16];
    uint64_t v14 = v2[17];
    uint64_t v16 = v2[12];
    uint64_t v17 = v2[10];
    uint64_t v18 = v2[7];
    uint64_t v19 = v2[2];
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    uint64_t v13 = AsyncSequence.reduce<A>(_:_:);
  }
  return swift_task_switch(v13, 0, 0);
}

{
  void *v0;
  int *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  (*(void (**)(void, void, void))(v0[10] + 32))(v0[2], v0[11], v0[7]);
  uint64_t v1 = (int *)v0[24];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[26] = v2;
  unsigned char *v2 = v0;
  v2[1] = AsyncSequence.reduce<A>(_:_:);
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[15];
  return v7(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[11];
  swift_task_dealloc(v0[22]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[11];
  swift_task_dealloc(v0[22]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t AsyncSequence.reduce<A>(into:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[10] = AssociatedTypeWitness;
  uint64_t v11 = type metadata accessor for Optional();
  v8[11] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[12] = v12;
  v8[13] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v8[14] = v13;
  v8[15] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a5 - 8);
  v8[16] = v14;
  v8[17] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  v8[18] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v8[19] = v16;
  v8[20] = swift_task_alloc((*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.reduce<A>(into:_:), 0, 0);
}

uint64_t AsyncSequence.reduce<A>(into:_:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  (*(void (**)(void, void, uint64_t))(v0[16] + 16))(v0[17], v0[9], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[21] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[22] = v4;
  v0[23] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[24] = v5;
  void *v5 = v0;
  v5[1] = AsyncSequence.reduce<A>(into:_:);
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[13];
  return v10(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 192);
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[19];
    uint64_t v4 = v2[20];
    uint64_t v6 = v2[18];
    uint64_t v7 = v2[7];
    uint64_t v8 = v2[3];
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
    uint64_t v9 = AsyncSequence.reduce<A>(into:_:);
  }
  else
  {
    uint64_t v9 = AsyncSequence.reduce<A>(into:_:);
  }
  return swift_task_switch(v9, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[10];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[20];
    uint64_t v5 = v0[17];
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[7];
    uint64_t v11 = v0[2];
    uint64_t v10 = v0[3];
    (*(void (**)(uint64_t, void))(v0[19] + 8))(v4, v0[18]);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v11, v10, v9);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v14 = (int *)v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[15], v1, v3);
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))((char *)v14 + *v14);
    uint64_t v15 = (void *)swift_task_alloc(v14[1]);
    v0[26] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncSequence.reduce<A>(into:_:);
    uint64_t v16 = v0[15];
    uint64_t v17 = v0[3];
    return v18(v17, v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v14;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 208);
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[19];
    uint64_t v4 = v2[20];
    uint64_t v6 = v2[18];
    uint64_t v8 = v2[14];
    uint64_t v7 = v2[15];
    uint64_t v9 = v2[10];
    uint64_t v10 = v2[7];
    uint64_t v11 = v2[3];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v11, v10);
    uint64_t v12 = AsyncSequence.reduce<A>(into:_:);
  }
  else
  {
    (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[10]);
    uint64_t v12 = AsyncSequence.reduce<A>(into:_:);
  }
  return swift_task_switch(v12, 0, 0);
}

{
  void *v0;
  int *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v1 = (int *)v0[22];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[24] = v2;
  unsigned char *v2 = v0;
  v2[1] = AsyncSequence.reduce<A>(into:_:);
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[13];
  return v7(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  swift_task_dealloc(v0[20]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  swift_task_dealloc(v0[20]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t _contains<A>(_:where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  v5[10] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a4 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[14] = v12;
  v5[15] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(_contains<A>(_:where:), 0, 0);
}

uint64_t _contains<A>(_:where:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  (*(void (**)(void, void, uint64_t))(v0[11] + 16))(v0[12], v0[2], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[17] = v4;
  v0[18] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[19] = v5;
  void *v5 = v0;
  v5[1] = _contains<A>(_:where:);
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[13];
  uint64_t v8 = v0[10];
  return v10(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[13]);
    uint64_t v4 = _contains<A>(_:where:);
  }
  else
  {
    uint64_t v4 = _contains<A>(_:where:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(BOOL);
  BOOL v9;
  int *v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  *(_DWORD *)(v0 + 184) = v4;
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 112) + 8))(v5, *(void *)(v0 + 104));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    swift_task_dealloc(v7);
    uint64_t v8 = *(uint64_t (**)(BOOL))(v0 + 8);
    uint64_t v9 = *(_DWORD *)(v0 + 184) != 1;
    return v8(v9);
  }
  else
  {
    uint64_t v11 = *(int **)(v0 + 24);
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 72), v1, v2);
    uint64_t v14 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc(v11[1]);
    *(void *)(v0 + 168) = v12;
    *uint64_t v12 = v0;
    v12[1] = _contains<A>(_:where:);
    uint64_t v13 = *(void *)(v0 + 72);
    return v14(v13);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(BOOL);
  BOOL v6;
  int *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  if (*(unsigned char *)(v0 + 188))
  {
    uint64_t v1 = *(void *)(v0 + 120);
    uint64_t v2 = *(void *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 80);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 112) + 8))(v1, *(void *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    uint64_t v5 = *(uint64_t (**)(BOOL))(v0 + 8);
    uint64_t v6 = *(_DWORD *)(v0 + 184) != 1;
    return v5(v6);
  }
  else
  {
    uint64_t v8 = *(int **)(v0 + 136);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
    uint64_t v9 = (void *)swift_task_alloc(v8[1]);
    *(void *)(v0 + 152) = v9;
    void *v9 = v0;
    v9[1] = _contains<A>(_:where:);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 80);
    return v13(v12, v11, v10);
  }
}

uint64_t _contains<A>(_:where:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 168);
  *(void *)(*v2 + 176) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 112);
    uint64_t v6 = *(void *)(v4 + 120);
    uint64_t v8 = *(void *)(v4 + 104);
    (*(void (**)(void, void))(*(void *)(v4 + 64) + 8))(*(void *)(v4 + 72), *(void *)(v4 + 56));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = _contains<A>(_:where:);
  }
  else
  {
    uint64_t v11 = *(void *)(v4 + 64);
    uint64_t v10 = *(void *)(v4 + 72);
    uint64_t v12 = *(void *)(v4 + 56);
    *(unsigned char *)(v4 + 188) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v9 = _contains<A>(_:where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  v5[10] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[14] = v12;
  v5[15] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.contains(where:), 0, 0);
}

uint64_t AsyncSequence.contains(where:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[4];
  (*(void (**)(void, void, uint64_t))(v0[11] + 16))(v0[12], v0[6], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[17] = v4;
  v0[18] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[19] = v5;
  void *v5 = v0;
  v5[1] = AsyncSequence.contains(where:);
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[13];
  uint64_t v8 = v0[10];
  return v10(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[13]);
    uint64_t v4 = AsyncSequence.contains(where:);
  }
  else
  {
    uint64_t v4 = AsyncSequence.contains(where:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(BOOL);
  BOOL v9;
  int *v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  *(_DWORD *)(v0 + 184) = v4;
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 112) + 8))(v5, *(void *)(v0 + 104));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v1);
    swift_task_dealloc(v7);
    uint64_t v8 = *(uint64_t (**)(BOOL))(v0 + 8);
    uint64_t v9 = *(_DWORD *)(v0 + 184) != 1;
    return v8(v9);
  }
  else
  {
    uint64_t v11 = *(int **)(v0 + 16);
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 72), v1, v2);
    uint64_t v14 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc(v11[1]);
    *(void *)(v0 + 168) = v12;
    *uint64_t v12 = v0;
    v12[1] = AsyncSequence.contains(where:);
    uint64_t v13 = *(void *)(v0 + 72);
    return v14(v13);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  swift_task_dealloc(v0[15]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(BOOL);
  BOOL v6;
  int *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  if (*(unsigned char *)(v0 + 188))
  {
    uint64_t v1 = *(void *)(v0 + 120);
    uint64_t v2 = *(void *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 80);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 112) + 8))(v1, *(void *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    uint64_t v5 = *(uint64_t (**)(BOOL))(v0 + 8);
    uint64_t v6 = *(_DWORD *)(v0 + 184) != 1;
    return v5(v6);
  }
  else
  {
    uint64_t v8 = *(int **)(v0 + 136);
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
    uint64_t v9 = (void *)swift_task_alloc(v8[1]);
    *(void *)(v0 + 152) = v9;
    void *v9 = v0;
    v9[1] = AsyncSequence.contains(where:);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 80);
    return v13(v12, v11, v10);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  swift_task_dealloc(v0[15]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t AsyncSequence.contains(where:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 168);
  *(void *)(*v2 + 176) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 112);
    uint64_t v6 = *(void *)(v4 + 120);
    uint64_t v8 = *(void *)(v4 + 104);
    (*(void (**)(void, void))(*(void *)(v4 + 64) + 8))(*(void *)(v4 + 72), *(void *)(v4 + 56));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = AsyncSequence.contains(where:);
  }
  else
  {
    uint64_t v11 = *(void *)(v4 + 64);
    uint64_t v10 = *(void *)(v4 + 72);
    uint64_t v12 = *(void *)(v4 + 56);
    *(unsigned char *)(v4 + 188) = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v9 = AsyncSequence.contains(where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(AsyncSequence.allSatisfy(_:), 0, 0);
}

uint64_t AsyncSequence.allSatisfy(_:)()
{
  uint64_t v1 = swift_task_alloc(48);
  *(void *)(v0 + 56) = v1;
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFE3C);
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = AsyncSequence.allSatisfy(_:);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 32);
  return AsyncSequence.contains(where:)((uint64_t)&async function pointer to partial apply for closure #1 in AsyncSequence.allSatisfy(_:), v1, v5, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc(*(void *)(v0 + 56));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t AsyncSequence.allSatisfy(_:)(char a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 64);
  uint64_t v5 = *(void **)v2;
  v5[9] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    return swift_task_switch(AsyncSequence.allSatisfy(_:), 0, 0);
  }
  else
  {
    swift_task_dealloc(v5[7]);
    uint64_t v7 = (uint64_t (*)(BOOL))v5[1];
    return v7((a1 & 1) == 0);
  }
}

uint64_t closure #1 in AsyncSequence.allSatisfy(_:)(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in AsyncSequence.allSatisfy(_:);
  return v6(a1);
}

uint64_t closure #1 in AsyncSequence.allSatisfy(_:)(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  uint64_t v6 = *(uint64_t (**)(BOOL))(v5 + 8);
  if (v1) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = (a1 & 1) == 0;
  }
  return v6(v7);
}

uint64_t AsyncSequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  v5[10] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[14] = v12;
  v5[15] = swift_task_alloc((*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence<>.contains(_:), 0, 0);
}

uint64_t AsyncSequence<>.contains(_:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  (*(void (**)(void, void, uint64_t))(v0[11] + 16))(v0[12], v0[6], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[16] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[17] = v4;
  v0[18] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[19] = v5;
  void *v5 = v0;
  v5[1] = AsyncSequence<>.contains(_:);
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[13];
  uint64_t v8 = v0[10];
  return v10(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[13]);
    uint64_t v4 = AsyncSequence<>.contains(_:);
  }
  else
  {
    uint64_t v4 = AsyncSequence<>.contains(_:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(BOOL);
  int *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if (v4 == 1)
  {
LABEL_4:
    uint64_t v7 = v0[15];
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[9];
    (*(void (**)(uint64_t, void))(v0[14] + 8))(v7, v0[13]);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v1);
    swift_task_dealloc(v9);
    uint64_t v10 = (uint64_t (*)(BOOL))v0[1];
    return v10(v4 != 1);
  }
  uint64_t v5 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
  uint64_t v6 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v1 = v0[10];
    goto LABEL_4;
  }
  uint64_t v12 = (int *)v0[17];
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc(v12[1]);
  v0[19] = v13;
  *uint64_t v13 = v0;
  v13[1] = AsyncSequence<>.contains(_:);
  uint64_t v14 = v0[16];
  uint64_t v15 = v0[13];
  uint64_t v16 = v0[10];
  return v17(v16, v15, v14);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  swift_task_dealloc(v0[15]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(0);
}

uint64_t _first<A>(_:where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  v6[11] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a5 - 8);
  v6[12] = v11;
  v6[13] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v6[14] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(_first<A>(_:where:), 0, 0);
}

uint64_t _first<A>(_:where:)()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  (*(void (**)(void, void, uint64_t))(v0[12] + 16))(v0[13], v0[3], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[17] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[18] = v4;
  v0[19] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[20] = v5;
  void *v5 = v0;
  v5[1] = _first<A>(_:where:);
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[11];
  return v10(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
    uint64_t v4 = _first<A>(_:where:);
  }
  else
  {
    uint64_t v4 = _first<A>(_:where:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  int *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[13];
    uint64_t v7 = v0[10];
    uint64_t v6 = v0[11];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[9] + 56))(v0[2], 1, 1, v0[8]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v10 = v0[10];
    uint64_t v11 = (int *)v0[4];
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v0[22] = v12;
    v0[23] = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v12(v10, v1, v2);
    uint64_t v15 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    uint64_t v13 = (void *)swift_task_alloc(v11[1]);
    v0[24] = v13;
    *uint64_t v13 = v0;
    v13[1] = _first<A>(_:where:);
    uint64_t v14 = v0[10];
    return v15(v14);
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  int *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  if (*(unsigned char *)(v0 + 208) == 1)
  {
    uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 176);
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *(void *)(v0 + 16);
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    v1(v4, v2, v3);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 72) + 56))(*(void *)(v0 + 16), 0, 1, *(void *)(v0 + 64));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 72) + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    uint64_t v11 = *(int **)(v0 + 144);
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc(v11[1]);
    *(void *)(v0 + 160) = v12;
    *uint64_t v12 = v0;
    v12[1] = _first<A>(_:where:);
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v15 = *(void *)(v0 + 88);
    return v16(v15, v14, v13);
  }
}

uint64_t _first<A>(_:where:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 192);
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 120);
    uint64_t v6 = *(void *)(v4 + 128);
    uint64_t v8 = *(void *)(v4 + 112);
    (*(void (**)(void, void))(*(void *)(v4 + 72) + 8))(*(void *)(v4 + 80), *(void *)(v4 + 64));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = _first<A>(_:where:);
  }
  else
  {
    *(unsigned char *)(v4 + 208) = a1 & 1;
    uint64_t v9 = _first<A>(_:where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v6[9] = v9;
  v6[10] = swift_task_alloc((*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  v6[11] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a4 - 8);
  v6[12] = v11;
  v6[13] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v6[14] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[15] = v13;
  v6[16] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.first(where:), 0, 0);
}

uint64_t AsyncSequence.first(where:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  (*(void (**)(void, void, uint64_t))(v0[12] + 16))(v0[13], v0[7], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[17] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[18] = v4;
  v0[19] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[20] = v5;
  void *v5 = v0;
  v5[1] = AsyncSequence.first(where:);
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[11];
  return v10(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[14]);
    uint64_t v4 = AsyncSequence.first(where:);
  }
  else
  {
    uint64_t v4 = AsyncSequence.first(where:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  int *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[13];
    uint64_t v7 = v0[10];
    uint64_t v6 = v0[11];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[9] + 56))(v0[2], 1, 1, v0[8]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v10 = v0[10];
    uint64_t v11 = (int *)v0[3];
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v0[22] = v12;
    v0[23] = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v12(v10, v1, v2);
    uint64_t v15 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    uint64_t v13 = (void *)swift_task_alloc(v11[1]);
    v0[24] = v13;
    *uint64_t v13 = v0;
    v13[1] = AsyncSequence.first(where:);
    uint64_t v14 = v0[10];
    return v15(v14);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  swift_task_dealloc(v0[16]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  int *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  if (*(unsigned char *)(v0 + 208) == 1)
  {
    uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 176);
    uint64_t v2 = *(void *)(v0 + 80);
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v4 = *(void *)(v0 + 16);
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    v1(v4, v2, v3);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 72) + 56))(*(void *)(v0 + 16), 0, 1, *(void *)(v0 + 64));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 72) + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    uint64_t v11 = *(int **)(v0 + 144);
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
    uint64_t v12 = (void *)swift_task_alloc(v11[1]);
    *(void *)(v0 + 160) = v12;
    *uint64_t v12 = v0;
    v12[1] = AsyncSequence.first(where:);
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v15 = *(void *)(v0 + 88);
    return v16(v15, v14, v13);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  swift_task_dealloc(v0[16]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AsyncSequence.first(where:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 192);
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 120);
    uint64_t v6 = *(void *)(v4 + 128);
    uint64_t v8 = *(void *)(v4 + 112);
    (*(void (**)(void, void))(*(void *)(v4 + 72) + 8))(*(void *)(v4 + 80), *(void *)(v4 + 64));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = AsyncSequence.first(where:);
  }
  else
  {
    *(unsigned char *)(v4 + 208) = a1 & 1;
    uint64_t v9 = AsyncSequence.first(where:);
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncSequence.min(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  uint64_t v9 = type metadata accessor for Optional();
  v6[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[10] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v11);
  v6[12] = swift_task_alloc(v11);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v6[13] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v13);
  v6[15] = swift_task_alloc(v13);
  uint64_t v14 = *(void *)(a4 - 8);
  v6[16] = v14;
  v6[17] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  v6[18] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v6[19] = v16;
  v6[20] = swift_task_alloc((*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.min(by:), 0, 0);
}

uint64_t AsyncSequence.min(by:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  (*(void (**)(void, void, uint64_t))(v0[16] + 16))(v0[17], v0[7], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[21] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[22] = v4;
  v0[23] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[24] = v5;
  void *v5 = v0;
  v5[1] = AsyncSequence.min(by:);
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[12];
  return v9(v7, v6, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 192);
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[19] + 8))(v2[20], v2[18]);
    uint64_t v4 = AsyncSequence.min(by:);
  }
  else
  {
    uint64_t v4 = AsyncSequence.min(by:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[8];
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[26] = v4;
  v0[27] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v3) == 1)
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[2];
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v3);
    uint64_t v8 = v0[17];
    uint64_t v10 = v0[14];
    uint64_t v9 = v0[15];
    uint64_t v12 = v0[11];
    unint64_t v11 = v0[12];
    swift_task_dealloc(v0[20]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    unint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    uint64_t v15 = v0[15];
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[28] = v16;
    v0[29] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v16(v15, v1, v3);
    uint64_t v17 = (int *)v0[22];
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    uint64_t v18 = (void *)swift_task_alloc(v17[1]);
    v0[30] = v18;
    *uint64_t v18 = v0;
    v18[1] = AsyncSequence.min(by:);
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[18];
    uint64_t v21 = v0[11];
    return v22(v21, v20, v19);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 240);
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[19];
    uint64_t v4 = v2[20];
    uint64_t v6 = v2[18];
    (*(void (**)(void, void))(v2[13] + 8))(v2[15], v2[8]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = AsyncSequence.min(by:);
  }
  else
  {
    uint64_t v7 = AsyncSequence.min(by:);
  }
  return swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 208))(v1, 1, v2) == 1)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 16);
    (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
    v3(v8, v4, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v2);
    uint64_t v9 = *(void *)(v0 + 136);
    unint64_t v11 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    unint64_t v13 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
  else
  {
    uint64_t v16 = *(int **)(v0 + 24);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 224))(*(void *)(v0 + 112), v1, v2);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)v16 + *v16);
    uint64_t v17 = (void *)swift_task_alloc(v16[1]);
    *(void *)(v0 + 256) = v17;
    *uint64_t v17 = v0;
    v17[1] = AsyncSequence.min(by:);
    uint64_t v19 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 120);
    return v20(v19, v18);
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
  if (*(unsigned char *)(v0 + 272))
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 64);
    v1(v4, v5);
    v2(v4, v3, v5);
  }
  else
  {
    v1(*(void *)(v0 + 112), *(void *)(v0 + 64));
  }
  uint64_t v6 = *(int **)(v0 + 176);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v0 + 240) = v7;
  *uint64_t v7 = v0;
  v7[1] = AsyncSequence.min(by:);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 88);
  return v12(v10, v9, v8);
}

uint64_t AsyncSequence.min(by:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 256);
  *(void *)(*v2 + 264) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v8 = *(void *)(v4 + 144);
    uint64_t v9 = *(void *)(v4 + 112);
    uint64_t v10 = *(void *)(v4 + 120);
    uint64_t v11 = *(void *)(v4 + 104);
    uint64_t v12 = *(void *)(v4 + 64);
    unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v13(v9, v12);
    v13(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v14 = AsyncSequence.min(by:);
  }
  else
  {
    *(unsigned char *)(v4 + 272) = a1 & 1;
    uint64_t v14 = AsyncSequence.min(by:);
  }
  return swift_task_switch(v14, 0, 0);
}

uint64_t AsyncSequence.max(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  uint64_t v9 = type metadata accessor for Optional();
  v6[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[10] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v11);
  v6[12] = swift_task_alloc(v11);
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v6[13] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[14] = swift_task_alloc(v13);
  v6[15] = swift_task_alloc(v13);
  uint64_t v14 = *(void *)(a4 - 8);
  v6[16] = v14;
  v6[17] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  v6[18] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v6[19] = v16;
  v6[20] = swift_task_alloc((*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncSequence.max(by:), 0, 0);
}

uint64_t AsyncSequence.max(by:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[5];
  (*(void (**)(void, void, uint64_t))(v0[16] + 16))(v0[17], v0[7], v2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v2, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[21] = AssociatedConformanceWitness;
  uint64_t v4 = *(int **)(AssociatedConformanceWitness + 32);
  v0[22] = v4;
  v0[23] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v5 = (void *)swift_task_alloc(v4[1]);
  v0[24] = v5;
  void *v5 = v0;
  v5[1] = AsyncSequence.max(by:);
  uint64_t v6 = v0[18];
  uint64_t v7 = v0[12];
  return v9(v7, v6, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 192);
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[19] + 8))(v2[20], v2[18]);
    uint64_t v4 = AsyncSequence.max(by:);
  }
  else
  {
    uint64_t v4 = AsyncSequence.max(by:);
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[8];
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  v0[26] = v4;
  v0[27] = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v3) == 1)
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[2];
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v3);
    uint64_t v8 = v0[17];
    uint64_t v10 = v0[14];
    uint64_t v9 = v0[15];
    uint64_t v12 = v0[11];
    unint64_t v11 = v0[12];
    swift_task_dealloc(v0[20]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    unint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    uint64_t v15 = v0[15];
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[28] = v16;
    v0[29] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v16(v15, v1, v3);
    uint64_t v17 = (int *)v0[22];
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
    uint64_t v18 = (void *)swift_task_alloc(v17[1]);
    v0[30] = v18;
    *uint64_t v18 = v0;
    v18[1] = AsyncSequence.max(by:);
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[18];
    uint64_t v21 = v0[11];
    return v22(v21, v20, v19);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 240);
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[19];
    uint64_t v4 = v2[20];
    uint64_t v6 = v2[18];
    (*(void (**)(void, void))(v2[13] + 8))(v2[15], v2[8]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = AsyncSequence.max(by:);
  }
  else
  {
    uint64_t v7 = AsyncSequence.max(by:);
  }
  return swift_task_switch(v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 208))(v1, 1, v2) == 1)
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 16);
    (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
    v3(v8, v4, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v2);
    uint64_t v9 = *(void *)(v0 + 136);
    unint64_t v11 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    unint64_t v13 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
  else
  {
    uint64_t v16 = *(int **)(v0 + 24);
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 224))(*(void *)(v0 + 112), v1, v2);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)v16 + *v16);
    uint64_t v17 = (void *)swift_task_alloc(v16[1]);
    *(void *)(v0 + 256) = v17;
    *uint64_t v17 = v0;
    v17[1] = AsyncSequence.max(by:);
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v19 = *(void *)(v0 + 120);
    return v20(v19, v18);
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
  if (*(unsigned char *)(v0 + 272))
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 64);
    v1(v4, v5);
    v2(v4, v3, v5);
  }
  else
  {
    v1(*(void *)(v0 + 112), *(void *)(v0 + 64));
  }
  uint64_t v6 = *(int **)(v0 + 176);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc(v6[1]);
  *(void *)(v0 + 240) = v7;
  *uint64_t v7 = v0;
  v7[1] = AsyncSequence.max(by:);
  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 88);
  return v12(v10, v9, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  swift_task_dealloc(v0[20]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  swift_task_dealloc(v0[20]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  swift_task_dealloc(v0[20]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t AsyncSequence.max(by:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 256);
  *(void *)(*v2 + 264) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v8 = *(void *)(v4 + 144);
    uint64_t v9 = *(void *)(v4 + 112);
    uint64_t v10 = *(void *)(v4 + 120);
    uint64_t v11 = *(void *)(v4 + 104);
    uint64_t v12 = *(void *)(v4 + 64);
    unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v13(v9, v12);
    v13(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v14 = AsyncSequence.max(by:);
  }
  else
  {
    *(unsigned char *)(v4 + 272) = a1 & 1;
    uint64_t v14 = AsyncSequence.max(by:);
  }
  return swift_task_switch(v14, 0, 0);
}

uint64_t AsyncSequence<>.min()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(AsyncSequence<>.min(), 0, 0);
}

uint64_t AsyncSequence<>.min()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = (void *)swift_allocObject();
  v0[7] = v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v2;
  v5[5] = AssociatedTypeWitness;
  uint64_t v6 = (void *)swift_task_alloc(64);
  v0[8] = v6;
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = partial apply for implicit closure #1 in AsyncSequence<>.min();
  v6[6] = v5;
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFE74);
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = AsyncSequence<>.min();
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[2];
  return AsyncSequence.min(by:)(v10, (uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool), (uint64_t)v6, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void **)v1;
  v3[10] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    return swift_task_switch(AsyncSequence<>.min(), 0, 0);
  }
  else
  {
    uint64_t v5 = v3[8];
    swift_release();
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v3[1];
    return v6();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3() & 1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(v5, v3, v4);
}

uint64_t AsyncSequence<>.max()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(AsyncSequence<>.max(), 0, 0);
}

uint64_t AsyncSequence<>.max()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = (void *)swift_allocObject();
  v0[7] = v5;
  v5[2] = v3;
  v5[3] = v1;
  v5[4] = v2;
  v5[5] = AssociatedTypeWitness;
  uint64_t v6 = (void *)swift_task_alloc(64);
  v0[8] = v6;
  v6[2] = v3;
  v6[3] = v1;
  v6[4] = v2;
  v6[5] = partial apply for implicit closure #1 in AsyncSequence<>.min();
  v6[6] = v5;
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFE7C);
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = AsyncSequence<>.max();
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[2];
  return AsyncSequence.max(by:)(v10, (uint64_t)&thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply, (uint64_t)v6, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  uint64_t v3 = *(void **)v1;
  v3[10] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    return swift_task_switch(AsyncSequence<>.max(), 0, 0);
  }
  else
  {
    uint64_t v5 = v3[8];
    swift_release();
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v3[1];
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 64);
  swift_release();
  swift_task_dealloc(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t AsyncThrowingCompactMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncThrowingCompactMapSequence, a7);
}

uint64_t (*AsyncThrowingCompactMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncThrowingCompactMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncThrowingCompactMapSequence.Iterator, a7);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next()(uint64_t a1, void *a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = a2[3];
  uint64_t v5 = type metadata accessor for Optional();
  v3[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[9] = a2[4];
  v3[10] = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[11] = AssociatedTypeWitness;
  uint64_t v8 = type metadata accessor for Optional();
  v3[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v3[15] = v10;
  v3[16] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingCompactMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next()()
{
  if (*(unsigned char *)(v0[4] + *(int *)(v0[3] + 48)) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[5] - 8) + 56))(v0[2], 1, 1);
    uint64_t v1 = v0[14];
    uint64_t v2 = v0[8];
    swift_task_dealloc(v0[16]);
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    v0[17] = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v0[18] = AssociatedConformanceWitness;
    uint64_t v6 = *(int **)(AssociatedConformanceWitness + 32);
    v0[19] = v6;
    v0[20] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
    uint64_t v7 = swift_checkMetadataState();
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v8 = (void *)swift_task_alloc(v6[1]);
    v0[21] = v8;
    *uint64_t v8 = v0;
    v8[1] = AsyncThrowingCompactMapSequence.Iterator.next();
    uint64_t v9 = v0[18];
    uint64_t v10 = v0[14];
    return v11(v10, v7, v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncThrowingCompactMapSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncThrowingCompactMapSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  int **v14;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v5 = v0[4];
    uint64_t v4 = v0[5];
    uint64_t v6 = v0[2];
    uint64_t v7 = v0[3];
    (*(void (**)(uint64_t, void))(v0[13] + 8))(v1, v0[12]);
    *(unsigned char *)(v5 + *(int *)(v7 + 48)) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v6, 1, 1, v4);
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[8];
    swift_task_dealloc(v0[16]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    unint64_t v13 = v0[3];
    uint64_t v12 = v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[16], v1, v3);
    uint64_t v14 = (int **)(v12 + *(int *)(v13 + 44));
    uint64_t v15 = *v14;
    v0[23] = v14[1];
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)v15 + *v15);
    uint64_t v16 = v15[1];
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc(v16);
    v0[24] = v17;
    *uint64_t v17 = v0;
    v17[1] = AsyncThrowingCompactMapSequence.Iterator.next();
    uint64_t v18 = v0[16];
    uint64_t v19 = v0[8];
    return v20(v19, v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 192);
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[15] + 8))(v2[16], v2[11]);
  swift_release();
  if (v0) {
    uint64_t v4 = AsyncThrowingCompactMapSequence.Iterator.next();
  }
  else {
    uint64_t v4 = AsyncThrowingCompactMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    uint64_t v7 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v7, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v7, 0, 1, v2);
    goto LABEL_5;
  }
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  (*(void (**)(uint64_t, void))(v0[7] + 8))(v1, v0[6]);
  if (*(unsigned char *)(v5 + *(int *)(v6 + 48)) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 56))(v0[2], 1, 1);
LABEL_5:
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[8];
    swift_task_dealloc(v0[16]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  uint64_t v12 = (int *)v0[19];
  unint64_t v13 = swift_checkMetadataState();
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  uint64_t v14 = (void *)swift_task_alloc(v12[1]);
  v0[21] = v14;
  *uint64_t v14 = v0;
  v14[1] = AsyncThrowingCompactMapSequence.Iterator.next();
  uint64_t v15 = v0[18];
  uint64_t v16 = v0[14];
  return v17(v16, v13, v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[8];
  swift_task_dealloc(v0[16]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  *(unsigned char *)(v0[4] + *(int *)(v0[3] + 48)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[8];
  swift_task_dealloc(v0[16]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = a4[3];
  uint64_t v9 = type metadata accessor for Optional();
  v5[8] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[9] = v10;
  v5[10] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[11] = a4[4];
  v5[12] = a4[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[13] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v5[14] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[15] = swift_task_alloc(v13);
  v5[16] = swift_task_alloc(v13);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  v5[17] = v14;
  uint64_t v15 = type metadata accessor for Optional();
  v5[18] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[19] = v16;
  v5[20] = swift_task_alloc((*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v14 - 8);
  v5[21] = v17;
  v5[22] = swift_task_alloc((*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  v5[23] = v19;
  v5[24] = v21;
  return swift_task_switch(AsyncThrowingCompactMapSequence.Iterator.next(isolation:), v19, v21);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.next(isolation:)()
{
  if (*(unsigned char *)(v0[6] + *(int *)(v0[5] + 48)) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[7] - 8) + 56))(v0[2], 1, 1);
    uint64_t v1 = v0[20];
    uint64_t v3 = v0[15];
    uint64_t v2 = v0[16];
    uint64_t v4 = v0[10];
    swift_task_dealloc(v0[22]);
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    v0[25] = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v0[26] = AssociatedConformanceWitness;
    uint64_t v8 = *(int **)(AssociatedConformanceWitness + 40);
    v0[27] = v8;
    v0[28] = (AssociatedConformanceWitness + 40) & 0xFFFFFFFFFFFFLL | 0x2B1A000000000000;
    uint64_t v9 = swift_checkMetadataState();
    v0[29] = v9;
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
    uint64_t v10 = (void *)swift_task_alloc(v8[1]);
    v0[30] = v10;
    *uint64_t v10 = v0;
    v10[1] = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
    uint64_t v11 = v0[26];
    uint64_t v12 = v0[20];
    uint64_t v13 = v0[16];
    uint64_t v14 = v0[3];
    uint64_t v15 = v0[4];
    return v16(v12, v14, v15, v13, v9, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 240));
  uint64_t v3 = *(void *)(v2 + 192);
  uint64_t v4 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v5 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v5 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  int **v16;
  int *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v5 = v0[6];
    uint64_t v4 = v0[7];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[2];
    (*(void (**)(uint64_t, void))(v0[19] + 8))(v1, v0[18]);
    *(unsigned char *)(v5 + *(int *)(v6 + 48)) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v7, 1, 1, v4);
    uint64_t v8 = v0[20];
    uint64_t v10 = v0[15];
    uint64_t v9 = v0[16];
    uint64_t v11 = v0[10];
    swift_task_dealloc(v0[22]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    uint64_t v15 = v0[5];
    uint64_t v14 = v0[6];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[22], v1, v3);
    uint64_t v16 = (int **)(v14 + *(int *)(v15 + 44));
    uint64_t v17 = *v16;
    v0[31] = v16[1];
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)v17 + *v17);
    uint64_t v18 = v17[1];
    swift_retain();
    uint64_t v19 = (void *)swift_task_alloc(v18);
    v0[32] = v19;
    *uint64_t v19 = v0;
    v19[1] = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
    uint64_t v20 = v0[22];
    uint64_t v21 = v0[10];
    return v22(v21, v20);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[21] + 8))(v2[22], v2[17]);
  swift_release();
  uint64_t v4 = v2[24];
  uint64_t v5 = v2[23];
  if (v0) {
    uint64_t v6 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v6 = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v6, v5, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    uint64_t v7 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v7, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v7, 0, 1, v2);
    goto LABEL_5;
  }
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
  if (*(unsigned char *)(v5 + *(int *)(v6 + 48)) == 1)
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 56))(v0[2], 1, 1);
LABEL_5:
    uint64_t v8 = v0[20];
    uint64_t v10 = v0[15];
    uint64_t v9 = v0[16];
    uint64_t v11 = v0[10];
    swift_task_dealloc(v0[22]);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  uint64_t v14 = (int *)v0[27];
  uint64_t v15 = swift_checkMetadataState();
  v0[29] = v15;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  uint64_t v16 = (void *)swift_task_alloc(v14[1]);
  v0[30] = v16;
  *uint64_t v16 = v0;
  v16[1] = AsyncThrowingCompactMapSequence.Iterator.next(isolation:);
  uint64_t v17 = v0[26];
  uint64_t v18 = v0[20];
  uint64_t v19 = v0[16];
  uint64_t v20 = v0[3];
  uint64_t v21 = v0[4];
  return v22(v18, v20, v21, v19, v15, v17);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[14] + 32);
  v3(v1, v0[16], v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  uint64_t v5 = v0[20];
  uint64_t v7 = v0[15];
  uint64_t v6 = v0[16];
  uint64_t v8 = v0[10];
  swift_task_dealloc(v0[22]);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  *(unsigned char *)(v0[6] + *(int *)(v0[5] + 48)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[10];
  swift_task_dealloc(v0[22]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingCompactMapSequence<A, B>.Iterator(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFEAC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncThrowingCompactMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v10 = (void *)swift_task_alloc(dword_1E91CFEB4);
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingCompactMapSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingCompactMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t))AsyncThrowingCompactMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncThrowingDropWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncThrowingDropWhileSequence, a6);
}

uint64_t (*AsyncThrowingDropWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncThrowingDropWhileSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.doneDropping.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.doneDropping.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*AsyncThrowingDropWhileSequence.Iterator.doneDropping.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for AsyncThrowingDropWhileSequence.Iterator();
  *(unsigned char *)(a4 + v8[10]) = 0;
  *(unsigned char *)(a4 + v8[11]) = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t v11 = (void *)(a4 + v8[9]);
  *uint64_t v11 = a2;
  v11[1] = a3;
  return result;
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  v3[6] = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingDropWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next()()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  if (*(unsigned char *)(v1 + *(int *)(v2 + 40)))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], 1, 1, v0[7]);
    uint64_t v3 = v0[10];
    swift_task_dealloc(v0[12]);
    swift_task_dealloc(v3);
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    char v6 = *(unsigned char *)(v1 + *(int *)(v2 + 44));
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v6)
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v9 = *(int **)(AssociatedConformanceWitness + 32);
      uint64_t v10 = swift_checkMetadataState();
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
      uint64_t v11 = (void *)swift_task_alloc(v9[1]);
      v0[24] = v11;
      *uint64_t v11 = v0;
      v11[1] = AsyncThrowingDropWhileSequence.Iterator.next();
      uint64_t v12 = v0[2];
      uint64_t v13 = v10;
      uint64_t v14 = AssociatedConformanceWitness;
      uint64_t v15 = v20;
    }
    else
    {
      v0[13] = AssociatedTypeWitness;
      uint64_t v16 = swift_getAssociatedConformanceWitness();
      v0[14] = v16;
      uint64_t v17 = *(int **)(v16 + 32);
      v0[15] = v17;
      v0[16] = (v16 + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
      uint64_t v18 = swift_checkMetadataState();
      uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
      uint64_t v19 = (void *)swift_task_alloc(v17[1]);
      v0[17] = v19;
      *uint64_t v19 = v0;
      v19[1] = AsyncThrowingDropWhileSequence.Iterator.next();
      uint64_t v14 = v0[14];
      uint64_t v12 = v0[10];
      uint64_t v13 = v18;
      uint64_t v15 = v21;
    }
    return v15(v12, v13, v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int **v11;
  int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], 1, 1, v0[7]);
    uint64_t v4 = v0[10];
    swift_task_dealloc(v0[12]);
    swift_task_dealloc(v4);
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v0[12];
    uint64_t v9 = v0[3];
    uint64_t v8 = v0[4];
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[19] = v10;
    v0[20] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v10(v7, v1, v3);
    uint64_t v11 = (int **)(v8 + *(int *)(v9 + 36));
    uint64_t v12 = *v11;
    v0[21] = v11[1];
    uint64_t v16 = (uint64_t (*)(uint64_t))((char *)v12 + *v12);
    uint64_t v13 = v12[1];
    swift_retain();
    uint64_t v14 = (void *)swift_task_alloc(v13);
    v0[22] = v14;
    *uint64_t v14 = v0;
    v14[1] = AsyncThrowingDropWhileSequence.Iterator.next();
    uint64_t v15 = v0[12];
    return v16(v15);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t AssociatedConformanceWitness;
  int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int *v19;
  uint64_t v20;
  void *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;

  if ((*(unsigned char *)(v0 + 200) & 1) == 0)
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 96);
    char v6 = *(void *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 16);
    *(unsigned char *)(*(void *)(v0 + 32) + *(int *)(*(void *)(v0 + 24) + 44)) = 1;
    v4(v7, v5, v6);
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 56));
  if (*(unsigned char *)(v2 + *(int *)(v1 + 40)))
  {
    uint64_t v3 = 1;
LABEL_5:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 16), v3, 1, *(void *)(v0 + 56));
    uint64_t v8 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 96));
    swift_task_dealloc(v8);
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  if (*(unsigned char *)(*(void *)(v0 + 32) + *(int *)(*(void *)(v0 + 24) + 44)) == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v12 = *(int **)(AssociatedConformanceWitness + 32);
    uint64_t v13 = swift_checkMetadataState();
    uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
    uint64_t v14 = (void *)swift_task_alloc(v12[1]);
    *(void *)(v0 + 192) = v14;
    *uint64_t v14 = v0;
    v14[1] = AsyncThrowingDropWhileSequence.Iterator.next();
    uint64_t v15 = *(void *)(v0 + 16);
    uint64_t v16 = v13;
    uint64_t v17 = AssociatedConformanceWitness;
    uint64_t v18 = v22;
  }
  else
  {
    uint64_t v19 = *(int **)(v0 + 120);
    uint64_t v20 = swift_checkMetadataState();
    uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v19 + *v19);
    uint64_t v21 = (void *)swift_task_alloc(v19[1]);
    *(void *)(v0 + 136) = v21;
    *uint64_t v21 = v0;
    v21[1] = AsyncThrowingDropWhileSequence.Iterator.next();
    uint64_t v17 = *(void *)(v0 + 112);
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = v20;
    uint64_t v18 = v23;
  }
  return v18(v15, v16, v17);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 192));
  uint64_t v2 = *(void *)(v1 + 80);
  swift_task_dealloc(*(void *)(v1 + 96));
  swift_task_dealloc(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[12]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  *(unsigned char *)(v0[4] + *(int *)(v0[3] + 40)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[12]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next()(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 176);
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 88);
    uint64_t v6 = *(void *)(v4 + 96);
    uint64_t v8 = *(void *)(v4 + 56);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 200) = a1 & 1;
    uint64_t v9 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(void *)(a4 + 24);
  v5[8] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  v5[13] = swift_task_alloc(v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[14] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  v5[15] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[16] = v13;
  v5[17] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v11 - 8);
  v5[18] = v14;
  v5[19] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  v5[20] = v16;
  v5[21] = v18;
  return swift_task_switch(AsyncThrowingDropWhileSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next(isolation:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  if (*(unsigned char *)(v1 + *(int *)(v2 + 40)))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[18] + 56))(v0[2], 1, 1, v0[14]);
    uint64_t v3 = v0[17];
    uint64_t v5 = v0[12];
    uint64_t v4 = v0[13];
    uint64_t v6 = v0[11];
    swift_task_dealloc(v0[19]);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    char v9 = *(unsigned char *)(v1 + *(int *)(v2 + 44));
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v9)
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v0[33] = AssociatedConformanceWitness;
      uint64_t v12 = *(int **)(AssociatedConformanceWitness + 40);
      uint64_t v13 = swift_checkMetadataState();
      v0[34] = v13;
      uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
      uint64_t v14 = (void *)swift_task_alloc(v12[1]);
      v0[35] = v14;
      *uint64_t v14 = v0;
      v14[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
      uint64_t v15 = v0[12];
      uint64_t v16 = v0[3];
      uint64_t v17 = v0[4];
      uint64_t v18 = v0[2];
      uint64_t v19 = v13;
      uint64_t v20 = AssociatedConformanceWitness;
      uint64_t v21 = v26;
    }
    else
    {
      v0[22] = AssociatedTypeWitness;
      uint64_t v22 = swift_getAssociatedConformanceWitness();
      v0[23] = v22;
      uint64_t v23 = *(int **)(v22 + 40);
      v0[24] = v23;
      v0[25] = (v22 + 40) & 0xFFFFFFFFFFFFLL | 0x2B1A000000000000;
      uint64_t v24 = swift_checkMetadataState();
      v0[26] = v24;
      uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v23 + *v23);
      uint64_t v25 = (void *)swift_task_alloc(v23[1]);
      v0[27] = v25;
      void *v25 = v0;
      v25[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
      uint64_t v20 = v0[23];
      uint64_t v18 = v0[17];
      uint64_t v15 = v0[13];
      uint64_t v16 = v0[3];
      uint64_t v17 = v0[4];
      uint64_t v19 = v24;
      uint64_t v21 = v27;
    }
    return v21(v18, v16, v17, v15, v19, v20);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 216));
  uint64_t v3 = *(void *)(v2 + 168);
  uint64_t v4 = *(void *)(v2 + 160);
  if (v0) {
    uint64_t v5 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v5 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  int **v14;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[14];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[16] + 8))(v1, v0[15]);
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[18] + 56))(v0[2], 1, 1, v0[14]);
    uint64_t v4 = v0[17];
    uint64_t v6 = v0[12];
    uint64_t v5 = v0[13];
    uint64_t v7 = v0[11];
    swift_task_dealloc(v0[19]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    unint64_t v10 = v0[19];
    uint64_t v12 = v0[5];
    uint64_t v11 = v0[6];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[28] = v13;
    v0[29] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v13(v10, v1, v3);
    uint64_t v14 = (int **)(v11 + *(int *)(v12 + 36));
    uint64_t v15 = *v14;
    v0[30] = v14[1];
    uint64_t v19 = (uint64_t (*)(uint64_t))((char *)v15 + *v15);
    uint64_t v16 = v15[1];
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc(v16);
    v0[31] = v17;
    *uint64_t v17 = v0;
    v17[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
    uint64_t v18 = v0[19];
    return v19(v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int *v25;
  uint64_t v26;
  void *v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;

  if ((*(unsigned char *)(v0 + 288) & 1) == 0)
  {
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 16);
    *(unsigned char *)(*(void *)(v0 + 48) + *(int *)(*(void *)(v0 + 40) + 44)) = 1;
    v4(v7, v5, v6);
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 112));
  if (*(unsigned char *)(v2 + *(int *)(v1 + 40)))
  {
    uint64_t v3 = 1;
LABEL_5:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 144) + 56))(*(void *)(v0 + 16), v3, 1, *(void *)(v0 + 112));
    uint64_t v8 = *(void *)(v0 + 136);
    unint64_t v10 = *(void *)(v0 + 96);
    char v9 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 152));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  if (*(unsigned char *)(*(void *)(v0 + 48) + *(int *)(*(void *)(v0 + 40) + 44)) == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(void *)(v0 + 264) = AssociatedConformanceWitness;
    uint64_t v15 = *(int **)(AssociatedConformanceWitness + 40);
    uint64_t v16 = swift_checkMetadataState();
    *(void *)(v0 + 272) = v16;
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
    uint64_t v17 = (void *)swift_task_alloc(v15[1]);
    *(void *)(v0 + 280) = v17;
    *uint64_t v17 = v0;
    v17[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v19 = *(void *)(v0 + 24);
    uint64_t v20 = *(void *)(v0 + 32);
    uint64_t v21 = *(void *)(v0 + 16);
    uint64_t v22 = v16;
    uint64_t v23 = AssociatedConformanceWitness;
    uint64_t v24 = v28;
  }
  else
  {
    uint64_t v25 = *(int **)(v0 + 192);
    uint64_t v26 = swift_checkMetadataState();
    *(void *)(v0 + 208) = v26;
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v25 + *v25);
    uint64_t v27 = (void *)swift_task_alloc(v25[1]);
    *(void *)(v0 + 216) = v27;
    void *v27 = v0;
    v27[1] = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v21 = *(void *)(v0 + 136);
    uint64_t v18 = *(void *)(v0 + 104);
    uint64_t v19 = *(void *)(v0 + 24);
    uint64_t v20 = *(void *)(v0 + 32);
    uint64_t v22 = v26;
    uint64_t v24 = v29;
  }
  return v24(v21, v19, v20, v18, v22, v23);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;

  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 280);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[20];
    uint64_t v6 = v2[21];
    return swift_task_switch(AsyncThrowingDropWhileSequence.Iterator.next(isolation:), v5, v6);
  }
  else
  {
    uint64_t v8 = v2[19];
    char v9 = v2[17];
    uint64_t v11 = v2[12];
    unint64_t v10 = v2[13];
    uint64_t v12 = v2[11];
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    uint64_t v13 = *(uint64_t (**)(void))(v4 + 8);
    return v13();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 32);
  v3(v1, v0[13], v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[12];
  uint64_t v6 = v0[13];
  uint64_t v8 = v0[11];
  swift_task_dealloc(v0[19]);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  char v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  *(unsigned char *)(v0[6] + *(int *)(v0[5] + 40)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[11];
  swift_task_dealloc(v0[19]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 32);
  v3(v1, v0[12], v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[12];
  uint64_t v6 = v0[13];
  uint64_t v8 = v0[11];
  swift_task_dealloc(v0[19]);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  char v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t AsyncThrowingDropWhileSequence.Iterator.next(isolation:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 248);
  *(void *)(*v2 + 256) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 144);
    uint64_t v7 = *(void *)(v4 + 152);
    uint64_t v8 = *(void *)(v4 + 112);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    uint64_t v9 = *(void *)(v4 + 160);
    uint64_t v10 = *(void *)(v4 + 168);
    uint64_t v11 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 288) = a1 & 1;
    uint64_t v9 = *(void *)(v4 + 160);
    uint64_t v10 = *(void *)(v4 + 168);
    uint64_t v11 = AsyncThrowingDropWhileSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingDropWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFEBC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncThrowingDropWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss30AsyncThrowingDropWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v10 = (void *)swift_task_alloc(dword_1E91CFEC4);
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingDropWhileSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingDropWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncThrowingDropWhileSequence.Iterator.init(_:predicate:));
}

uint64_t AsyncSequence.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a6, v6);
  uint64_t v13 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v13 = a1;
  v13[1] = a2;

  return swift_retain();
}

uint64_t AsyncThrowingFilterSequence.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncThrowingFilterSequence, a6);
}

uint64_t AsyncDropFirstSequence.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t AsyncDropFirstSequence.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v4(v1, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncThrowingFilterSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingFilterSequence.Iterator.finished.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t AsyncThrowingFilterSequence.Iterator.finished.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*AsyncThrowingFilterSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingFilterSequence.Iterator.init(_:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AsyncThrowingFilterSequence.Iterator();
  *(unsigned char *)(a4 + *(int *)(v8 + 40)) = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t v11 = (void *)(a4 + *(int *)(v8 + 36));
  *uint64_t v11 = a2;
  v11[1] = a3;
  return result;
}

uint64_t AsyncThrowingFilterSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  v3[6] = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingFilterSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingFilterSequence.Iterator.next()()
{
  if (*(unsigned char *)(v0[4] + *(int *)(v0[3] + 40)))
  {
    uint64_t v1 = v0[12];
    uint64_t v2 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], 1, 1, v0[7]);
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    v0[13] = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v0[14] = AssociatedConformanceWitness;
    uint64_t v6 = *(int **)(AssociatedConformanceWitness + 32);
    v0[15] = v6;
    v0[16] = (AssociatedConformanceWitness + 32) & 0xFFFFFFFFFFFFLL | 0xE013000000000000;
    uint64_t v7 = swift_checkMetadataState();
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v8 = (void *)swift_task_alloc(v6[1]);
    v0[17] = v8;
    *uint64_t v8 = v0;
    v8[1] = AsyncThrowingFilterSequence.Iterator.next();
    uint64_t v9 = v0[14];
    uint64_t v10 = v0[10];
    return v11(v10, v7, v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncThrowingFilterSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int **v12;
  int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], 1, 1, v0[7]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[3];
    uint64_t v9 = v0[4];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[19] = v11;
    v0[20] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v11(v8, v1, v3);
    uint64_t v12 = (int **)(v9 + *(int *)(v10 + 36));
    uint64_t v13 = *v12;
    v0[21] = v12[1];
    uint64_t v17 = (uint64_t (*)(uint64_t))((char *)v13 + *v13);
    uint64_t v14 = v13[1];
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc(v14);
    v0[22] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncThrowingFilterSequence.Iterator.next();
    uint64_t v16 = v0[12];
    return v17(v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  int *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  if (*(unsigned char *)(v0 + 192))
  {
    (*(void (**)(void, void, void))(v0 + 152))(*(void *)(v0 + 16), *(void *)(v0 + 96), *(void *)(v0 + 56));
    uint64_t v1 = 0;
LABEL_5:
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 80);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 16), v1, 1, *(void *)(v0 + 56));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 56));
  if (*(unsigned char *)(v3 + *(int *)(v2 + 40)) == 1)
  {
    uint64_t v1 = 1;
    goto LABEL_5;
  }
  uint64_t v8 = *(int **)(v0 + 120);
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  uint64_t v10 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v0 + 136) = v10;
  *uint64_t v10 = v0;
  v10[1] = AsyncThrowingFilterSequence.Iterator.next();
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 80);
  return v13(v12, v9, v11);
}

uint64_t AsyncThrowingFilterSequence.Iterator.next()(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 176);
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v7 = *(void *)(v4 + 88);
    uint64_t v6 = *(void *)(v4 + 96);
    uint64_t v8 = *(void *)(v4 + 56);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v9 = AsyncThrowingDropWhileSequence.Iterator.next();
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 192) = a1 & 1;
    uint64_t v9 = AsyncThrowingFilterSequence.Iterator.next();
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t AsyncThrowingFilterSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(void *)(a4 + 24);
  v5[8] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  v5[14] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[15] = v13;
  v5[16] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v11 - 8);
  v5[17] = v14;
  v5[18] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  v5[19] = v16;
  v5[20] = v18;
  return swift_task_switch(AsyncThrowingFilterSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingFilterSequence.Iterator.next(isolation:)()
{
  if (*(unsigned char *)(v0[6] + *(int *)(v0[5] + 40)))
  {
    uint64_t v1 = v0[18];
    uint64_t v2 = v0[16];
    uint64_t v3 = v0[12];
    uint64_t v4 = v0[11];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[17] + 56))(v0[2], 1, 1, v0[13]);
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    v0[21] = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v0[22] = AssociatedConformanceWitness;
    uint64_t v8 = *(int **)(AssociatedConformanceWitness + 40);
    v0[23] = v8;
    v0[24] = (AssociatedConformanceWitness + 40) & 0xFFFFFFFFFFFFLL | 0x2B1A000000000000;
    uint64_t v9 = swift_checkMetadataState();
    v0[25] = v9;
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
    unint64_t v10 = (void *)swift_task_alloc(v8[1]);
    v0[26] = v10;
    *unint64_t v10 = v0;
    v10[1] = AsyncThrowingFilterSequence.Iterator.next(isolation:);
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[16];
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[3];
    uint64_t v15 = v0[4];
    return v16(v12, v14, v15, v13, v9, v11);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 208));
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v5 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v5 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  int **v14;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;

  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[13];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[15] + 8))(v1, v0[14]);
    uint64_t v4 = v0[18];
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[11];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[17] + 56))(v0[2], 1, 1, v0[13]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    unint64_t v10 = v0[18];
    uint64_t v12 = v0[5];
    uint64_t v11 = v0[6];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[27] = v13;
    v0[28] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v13(v10, v1, v3);
    uint64_t v14 = (int **)(v11 + *(int *)(v12 + 36));
    uint64_t v15 = *v14;
    v0[29] = v14[1];
    uint64_t v19 = (uint64_t (*)(uint64_t))((char *)v15 + *v15);
    uint64_t v16 = v15[1];
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc(v16);
    v0[30] = v17;
    *uint64_t v17 = v0;
    v17[1] = AsyncThrowingFilterSequence.Iterator.next(isolation:);
    uint64_t v18 = v0[18];
    return v19(v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  int *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  if (*(unsigned char *)(v0 + 256))
  {
    (*(void (**)(void, void, void))(v0 + 216))(*(void *)(v0 + 16), *(void *)(v0 + 144), *(void *)(v0 + 104));
    uint64_t v1 = 0;
LABEL_5:
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 88);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 136) + 56))(*(void *)(v0 + 16), v1, 1, *(void *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 104));
  if (*(unsigned char *)(v3 + *(int *)(v2 + 40)) == 1)
  {
    uint64_t v1 = 1;
    goto LABEL_5;
  }
  unint64_t v10 = *(int **)(v0 + 184);
  uint64_t v11 = swift_checkMetadataState();
  *(void *)(v0 + 200) = v11;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v12 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v0 + 208) = v12;
  *uint64_t v12 = v0;
  v12[1] = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 24);
  uint64_t v17 = *(void *)(v0 + 32);
  return v18(v14, v16, v17, v15, v11, v13);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 32);
  v3(v1, v0[12], v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  swift_task_dealloc(v0[18]);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  *(unsigned char *)(v0[6] + *(int *)(v0[5] + 40)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  swift_task_dealloc(v0[18]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AsyncThrowingFilterSequence.Iterator.next(isolation:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 240);
  *(void *)(*v2 + 248) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 136);
    uint64_t v7 = *(void *)(v4 + 144);
    uint64_t v8 = *(void *)(v4 + 104);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    uint64_t v9 = *(void *)(v4 + 152);
    uint64_t v10 = *(void *)(v4 + 160);
    uint64_t v11 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 256) = a1 & 1;
    uint64_t v9 = *(void *)(v4 + 152);
    uint64_t v10 = *(void *)(v4 + 160);
    uint64_t v11 = AsyncThrowingFilterSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v11, v9, v10);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingFilterSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFECC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncThrowingFilterSequence.Iterator.next()(a1, a2);
}

uint64_t _ss27AsyncThrowingFilterSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v10 = (void *)swift_task_alloc(dword_1E91CFED4);
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingFilterSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingFilterSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncThrowingFilterSequence.Iterator.init(_:isIncluded:));
}

uint64_t AsyncSequence.flatMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, void *)@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a8, v8);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  v19[3] = a6;
  uint64_t v17 = (void *)(a8 + *(int *)(a7(0, v19) + 52));
  *uint64_t v17 = a1;
  v17[1] = a2;
  return swift_retain();
}

uint64_t AsyncThrowingFlatMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for AsyncThrowingFlatMapSequence, a8);
}

uint64_t AsyncFlatMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9, a1, a4);
  v19[0] = a4;
  v19[1] = a5;
  v19[2] = a6;
  v19[3] = a7;
  uint64_t result = a8(0, v19);
  uint64_t v18 = (void *)(a9 + *(int *)(result + 52));
  *uint64_t v18 = a2;
  v18[1] = a3;
  return result;
}

uint64_t (*AsyncThrowingFlatMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncFlatMapSequence.Iterator.currentIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t AsyncFlatMapSequence.Iterator.currentIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*AsyncThrowingFlatMapSequence.Iterator.currentIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*AsyncThrowingFlatMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return AsyncFlatMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for AsyncThrowingFlatMapSequence.Iterator, a8);
}

uint64_t AsyncFlatMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  v19[0] = a4;
  v19[1] = a5;
  v19[2] = a6;
  v19[3] = a7;
  uint64_t v11 = (int *)a8(0, v19);
  uint64_t v12 = a9 + v11[14];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v12, 1, 1, AssociatedTypeWitness);
  *(unsigned char *)(a9 + v11[15]) = 0;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a9, a1, v14);
  uint64_t v16 = (void *)(a9 + v11[13]);
  *uint64_t v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next()(uint64_t a1, void *a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v5 = a2[3];
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v7);
  v3[8] = swift_task_alloc(v7);
  v3[9] = swift_task_alloc(v7);
  v3[10] = a2[4];
  v3[11] = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[12] = AssociatedTypeWitness;
  uint64_t v9 = type metadata accessor for Optional();
  v3[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[14] = v10;
  v3[15] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v3[16] = v11;
  v3[17] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[18] = a2[5];
  uint64_t v12 = swift_getAssociatedTypeWitness();
  v3[19] = v12;
  uint64_t v13 = type metadata accessor for Optional();
  v3[20] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[21] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[22] = swift_task_alloc(v15);
  v3[23] = swift_task_alloc(v15);
  uint64_t v16 = *(void *)(v12 - 8);
  v3[24] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v17);
  v3[26] = swift_task_alloc(v17);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  v3[27] = v18;
  uint64_t v19 = type metadata accessor for Optional();
  v3[28] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[29] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[30] = swift_task_alloc(v21);
  v3[31] = swift_task_alloc(v21);
  uint64_t v22 = *(void *)(v18 - 8);
  v3[32] = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[33] = swift_task_alloc(v23);
  v3[34] = swift_task_alloc(v23);
  return swift_task_switch(AsyncThrowingFlatMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next()()
{
  if (*(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)))
  {
    uint64_t v2 = v0[33];
    uint64_t v1 = v0[34];
    uint64_t v4 = v0[30];
    uint64_t v3 = v0[31];
    uint64_t v6 = v0[25];
    uint64_t v5 = v0[26];
    uint64_t v7 = v0[23];
    uint64_t v8 = v0[22];
    uint64_t v9 = v0[17];
    uint64_t v28 = v0[15];
    uint64_t v29 = v0[9];
    uint64_t v30 = v0[8];
    uint64_t v32 = v0[7];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[24] + 56))(v0[2], 1, 1, v0[19]);
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = v0[31];
    uint64_t v13 = v0[32];
    uint64_t v14 = v0[27];
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
    {
      (*(void (**)(void, void))(v0[29] + 8))(v0[31], v0[28]);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v16 = *(int **)(AssociatedConformanceWitness + 32);
      uint64_t v17 = swift_checkMetadataState();
      uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
      uint64_t v18 = (void *)swift_task_alloc(v16[1]);
      v0[39] = v18;
      *uint64_t v18 = v0;
      v18[1] = AsyncThrowingFlatMapSequence.Iterator.next();
      uint64_t v19 = v0[15];
      uint64_t v20 = v17;
    }
    else
    {
      uint64_t v21 = v0[34];
      uint64_t v22 = v0[31];
      uint64_t v23 = v0[32];
      uint64_t v24 = v0[27];
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
      v0[35] = v25;
      v0[36] = (v23 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v25(v21, v22, v24);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v26 = *(int **)(AssociatedConformanceWitness + 32);
      uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v26 + *v26);
      uint64_t v27 = (void *)swift_task_alloc(v26[1]);
      v0[37] = v27;
      void *v27 = v0;
      v27[1] = AsyncThrowingFlatMapSequence.Iterator.next();
      uint64_t v20 = v0[27];
      uint64_t v19 = v0[23];
    }
    return v31(v19, v20, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 296);
  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[32] + 8))(v2[34], v2[27]);
    uint64_t v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  else
  {
    uint64_t v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  int *v41;
  void *v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[19];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[32];
    uint64_t v5 = v0[30];
    uint64_t v6 = v0[27];
    uint64_t v7 = v0[20];
    uint64_t v8 = v0[21];
    uint64_t v9 = v0[3];
    (*(void (**)(void, uint64_t))(v4 + 8))(v0[34], v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
    uint64_t v10 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, 1, 1, v6);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v5, v9);
    if ((*(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)) & 1) == 0)
    {
      uint64_t v11 = v0[31];
      uint64_t v12 = v0[32];
      uint64_t v13 = v0[27];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
      {
        (*(void (**)(void, void))(v0[29] + 8))(v0[31], v0[28]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        unint64_t v15 = *(int **)(AssociatedConformanceWitness + 32);
        uint64_t v16 = swift_checkMetadataState();
        uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
        uint64_t v17 = (void *)swift_task_alloc(v15[1]);
        v0[39] = v17;
        *uint64_t v17 = v0;
        v17[1] = AsyncThrowingFlatMapSequence.Iterator.next();
        uint64_t v18 = v0[15];
        uint64_t v19 = v16;
      }
      else
      {
        uint64_t v36 = v0[34];
        uint64_t v37 = v0[31];
        uint64_t v38 = v0[32];
        uint64_t v39 = v0[27];
        uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
        v0[35] = v40;
        v0[36] = (v38 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v40(v36, v37, v39);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v41 = *(int **)(AssociatedConformanceWitness + 32);
        uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v41 + *v41);
        uint64_t v42 = (void *)swift_task_alloc(v41[1]);
        v0[37] = v42;
        *uint64_t v42 = v0;
        v42[1] = AsyncThrowingFlatMapSequence.Iterator.next();
        uint64_t v19 = v0[27];
        uint64_t v18 = v0[23];
      }
      return v48(v18, v19, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v20 = v0[34];
    uint64_t v43 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v21 = v0[32];
    uint64_t v22 = v0[30];
    uint64_t v24 = v0[26];
    uint64_t v23 = v0[27];
    uint64_t v46 = v0[3];
    uint64_t v50 = v0[2];
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v25(v24, v1, v3);
    v43(v22, v20, v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v23);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v22, v46);
    v25(v50, v24, v3);
    uint64_t v10 = 0;
  }
  uint64_t v27 = v0[33];
  uint64_t v26 = v0[34];
  uint64_t v29 = v0[30];
  uint64_t v28 = v0[31];
  uint64_t v31 = v0[25];
  uint64_t v30 = v0[26];
  uint64_t v32 = v0[23];
  uint64_t v33 = v0[22];
  uint64_t v44 = v0[17];
  uint64_t v45 = v0[15];
  uint64_t v47 = v0[9];
  uint64_t v49 = v0[8];
  uint64_t v51 = v0[7];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[24] + 56))(v0[2], v10, 1, v0[19]);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  uint64_t v34 = (uint64_t (*)(void))v0[1];
  return v34();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 312);
  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  int **v17;
  int *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[14] + 8))(v1, v0[13]);
    uint64_t v5 = v0[33];
    uint64_t v4 = v0[34];
    uint64_t v7 = v0[30];
    uint64_t v6 = v0[31];
    uint64_t v9 = v0[25];
    uint64_t v8 = v0[26];
    uint64_t v10 = v0[23];
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[17];
    uint64_t v23 = v0[15];
    uint64_t v24 = v0[9];
    uint64_t v25 = v0[8];
    uint64_t v26 = v0[7];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[24] + 56))(v0[2], 1, 1, v0[19]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    uint64_t v16 = v0[3];
    unint64_t v15 = v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[17], v1, v3);
    uint64_t v17 = (int **)(v15 + *(int *)(v16 + 52));
    uint64_t v18 = *v17;
    v0[41] = v17[1];
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)v18 + *v18);
    uint64_t v19 = v18[1];
    swift_retain();
    uint64_t v20 = (void *)swift_task_alloc(v19);
    v0[42] = v20;
    *uint64_t v20 = v0;
    v20[1] = AsyncThrowingFlatMapSequence.Iterator.next();
    uint64_t v21 = v0[17];
    uint64_t v22 = v0[8];
    return v27(v22, v21);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 336);
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[16] + 8))(v2[17], v2[12]);
  swift_release();
  if (v0) {
    uint64_t v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  else {
    uint64_t v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = v0[18];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[5];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 32))(v2, v0[8], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v5, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(int **)(AssociatedConformanceWitness + 32);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[44] = v8;
  *uint64_t v8 = v0;
  v8[1] = AsyncThrowingFlatMapSequence.Iterator.next();
  uint64_t v9 = v0[27];
  uint64_t v10 = v0[22];
  return v12(v10, v9, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 352);
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(void, void))(v2[32] + 8))(v2[33], v2[27]);
    uint64_t v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  else
  {
    (*(void (**)(void, void))(v2[6] + 8))(v2[9], v2[5]);
    uint64_t v4 = AsyncThrowingFlatMapSequence.Iterator.next();
  }
  return swift_task_switch(v4, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  int *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  int *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v1 = v0[24];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3);
  uint64_t v6 = v0[32];
  uint64_t v5 = v0[33];
  uint64_t v7 = v0[30];
  uint64_t v8 = v0[27];
  if (v4 == 1)
  {
    uint64_t v9 = v0[20];
    uint64_t v10 = v0[21];
    uint64_t v11 = v0[3];
    (*(void (**)(void, void))(v6 + 8))(v0[33], v0[27]);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
    uint64_t v12 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v11);
    if (*(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)) != 1)
    {
      uint64_t v13 = v0[31];
      uint64_t v14 = v0[32];
      unint64_t v15 = v0[27];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
      {
        (*(void (**)(void, void))(v0[29] + 8))(v0[31], v0[28]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v17 = *(int **)(AssociatedConformanceWitness + 32);
        uint64_t v18 = swift_checkMetadataState();
        uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
        uint64_t v19 = (void *)swift_task_alloc(v17[1]);
        v0[39] = v19;
        *uint64_t v19 = v0;
        v19[1] = AsyncThrowingFlatMapSequence.Iterator.next();
        uint64_t v20 = v0[15];
        uint64_t v21 = v18;
      }
      else
      {
        uint64_t v34 = v0[34];
        uint64_t v35 = v0[31];
        uint64_t v36 = v0[32];
        uint64_t v37 = v0[27];
        uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
        v0[35] = v38;
        v0[36] = (v36 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v38(v34, v35, v37);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v39 = *(int **)(AssociatedConformanceWitness + 32);
        uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v39 + *v39);
        uint64_t v40 = (void *)swift_task_alloc(v39[1]);
        v0[37] = v40;
        *uint64_t v40 = v0;
        v40[1] = AsyncThrowingFlatMapSequence.Iterator.next();
        uint64_t v21 = v0[27];
        uint64_t v20 = v0[23];
      }
      return v45(v20, v21, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v22 = v0[3];
    uint64_t v43 = v0[25];
    uint64_t v47 = v0[2];
    uint64_t v23 = *(void (**)(void))(v1 + 32);
    v23();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v22);
    ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v47, v43, v3);
    uint64_t v12 = 0;
  }
  uint64_t v25 = v0[33];
  uint64_t v24 = v0[34];
  uint64_t v27 = v0[30];
  uint64_t v26 = v0[31];
  uint64_t v29 = v0[25];
  uint64_t v28 = v0[26];
  uint64_t v30 = v0[23];
  uint64_t v31 = v0[22];
  uint64_t v41 = v0[17];
  uint64_t v42 = v0[15];
  uint64_t v44 = v0[9];
  uint64_t v46 = v0[8];
  uint64_t v48 = v0[7];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[24] + 56))(v0[2], v12, 1, v0[19]);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(unsigned char *)(v0[4] + *(int *)(v0[3] + 60)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v5 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v7 = v0[22];
  uint64_t v6 = v0[23];
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[15];
  uint64_t v12 = v0[9];
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[7];
  swift_task_dealloc(v0[34]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v5 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v7 = v0[22];
  uint64_t v6 = v0[23];
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[15];
  uint64_t v12 = v0[9];
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[7];
  swift_task_dealloc(v0[34]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[43];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[3];
  *(unsigned char *)(v0[4] + *(int *)(v5 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v4);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v3, v5);
  swift_willThrow();
  if (!v1) {
    (*(void (**)(void, void))(v0[6] + 8))(v0[9], v0[5]);
  }
  uint64_t v6 = v0[33];
  uint64_t v8 = v0[30];
  uint64_t v7 = v0[31];
  uint64_t v10 = v0[25];
  uint64_t v9 = v0[26];
  uint64_t v12 = v0[22];
  uint64_t v11 = v0[23];
  uint64_t v13 = v0[17];
  uint64_t v14 = v0[15];
  uint64_t v17 = v0[9];
  uint64_t v18 = v0[8];
  uint64_t v19 = v0[7];
  swift_task_dealloc(v0[34]);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[43];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[3];
  *(unsigned char *)(v0[4] + *(int *)(v5 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v4);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v3, v5);
  swift_willThrow();
  if (!v1) {
    (*(void (**)(void, void))(v0[6] + 8))(v0[9], v0[5]);
  }
  uint64_t v6 = v0[33];
  uint64_t v8 = v0[30];
  uint64_t v7 = v0[31];
  uint64_t v10 = v0[25];
  uint64_t v9 = v0[26];
  uint64_t v12 = v0[22];
  uint64_t v11 = v0[23];
  uint64_t v13 = v0[17];
  uint64_t v14 = v0[15];
  uint64_t v17 = v0[9];
  uint64_t v18 = v0[8];
  uint64_t v19 = v0[7];
  swift_task_dealloc(v0[34]);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v9 = a4[3];
  v5[7] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[8] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[9] = swift_task_alloc(v11);
  v5[10] = swift_task_alloc(v11);
  v5[11] = swift_task_alloc(v11);
  v5[12] = a4[4];
  v5[13] = a4[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[14] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v5[15] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[16] = swift_task_alloc(v14);
  v5[17] = swift_task_alloc(v14);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  v5[18] = v15;
  uint64_t v16 = type metadata accessor for Optional();
  v5[19] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v5[20] = v17;
  v5[21] = swift_task_alloc((*(void *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v15 - 8);
  v5[22] = v18;
  v5[23] = swift_task_alloc((*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[24] = a4[5];
  uint64_t v19 = swift_getAssociatedTypeWitness();
  v5[25] = v19;
  uint64_t v20 = type metadata accessor for Optional();
  v5[26] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v5[27] = v21;
  unint64_t v22 = (*(void *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[28] = swift_task_alloc(v22);
  v5[29] = swift_task_alloc(v22);
  uint64_t v23 = *(void *)(v19 - 8);
  v5[30] = v23;
  unint64_t v24 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v24);
  v5[32] = swift_task_alloc(v24);
  uint64_t v25 = swift_getAssociatedTypeWitness();
  v5[33] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v5[34] = v26;
  unint64_t v27 = (*(void *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[35] = swift_task_alloc(v27);
  v5[36] = swift_task_alloc(v27);
  v5[37] = swift_task_alloc(v27);
  v5[38] = swift_task_alloc(v27);
  uint64_t v28 = swift_getAssociatedTypeWitness();
  v5[39] = v28;
  uint64_t v29 = type metadata accessor for Optional();
  v5[40] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v5[41] = v30;
  unint64_t v31 = (*(void *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[42] = swift_task_alloc(v31);
  v5[43] = swift_task_alloc(v31);
  uint64_t v32 = *(void *)(v28 - 8);
  v5[44] = v32;
  unint64_t v33 = (*(void *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[45] = swift_task_alloc(v33);
  v5[46] = swift_task_alloc(v33);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v37 = v36;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v37 = 0;
  }
  v5[47] = v35;
  v5[48] = v37;
  return swift_task_switch(AsyncThrowingFlatMapSequence.Iterator.next(isolation:), v35, v37);
}

uint64_t AsyncThrowingFlatMapSequence.Iterator.next(isolation:)()
{
  if (*(unsigned char *)(v0[6] + *(int *)(v0[5] + 60)))
  {
    uint64_t v2 = v0[45];
    uint64_t v1 = v0[46];
    uint64_t v4 = v0[42];
    uint64_t v3 = v0[43];
    uint64_t v6 = v0[37];
    uint64_t v5 = v0[38];
    uint64_t v8 = v0[35];
    uint64_t v7 = v0[36];
    uint64_t v9 = v0[32];
    uint64_t v31 = v0[31];
    uint64_t v32 = v0[29];
    uint64_t v33 = v0[28];
    uint64_t v34 = v0[23];
    uint64_t v35 = v0[21];
    uint64_t v36 = v0[17];
    uint64_t v37 = v0[16];
    uint64_t v38 = v0[11];
    uint64_t v39 = v0[10];
    uint64_t v41 = v0[9];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[30] + 56))(v0[2], 1, 1, v0[25]);
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = v0[43];
    uint64_t v13 = v0[44];
    uint64_t v14 = v0[39];
    AsyncFlatMapSequence.Iterator.currentIterator.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v12, 1, v14) == 1)
    {
      (*(void (**)(void, void))(v0[41] + 8))(v0[43], v0[40]);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v0[53] = AssociatedConformanceWitness;
      uint64_t v16 = *(int **)(AssociatedConformanceWitness + 40);
      uint64_t v17 = swift_checkMetadataState();
      v0[54] = v17;
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v16 + *v16);
      uint64_t v18 = (void *)swift_task_alloc(v16[1]);
      v0[55] = v18;
      *uint64_t v18 = v0;
      v18[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
      uint64_t v19 = v0[21];
      uint64_t v20 = v0[17];
      uint64_t v21 = v0[3];
      uint64_t v22 = v0[4];
      uint64_t v23 = v17;
    }
    else
    {
      uint64_t v24 = v0[46];
      uint64_t v25 = v0[43];
      uint64_t v26 = v0[44];
      uint64_t v27 = v0[39];
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
      v0[49] = v28;
      v0[50] = (v26 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v28(v24, v25, v27);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v0[51] = AssociatedConformanceWitness;
      uint64_t v29 = *(int **)(AssociatedConformanceWitness + 40);
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v29 + *v29);
      uint64_t v30 = (void *)swift_task_alloc(v29[1]);
      v0[52] = v30;
      *uint64_t v30 = v0;
      v30[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
      uint64_t v23 = v0[39];
      uint64_t v20 = v0[37];
      uint64_t v19 = v0[29];
      uint64_t v21 = v0[3];
      uint64_t v22 = v0[4];
    }
    return v40(v19, v21, v22, v20, v23, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 416));
  if (v0)
  {
    (*(void (**)(void, void))(v2[44] + 8))(v2[46], v2[39]);
    uint64_t v3 = v2[47];
    uint64_t v4 = v2[48];
    uint64_t v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  else
  {
    uint64_t v3 = v2[47];
    uint64_t v4 = v2[48];
    uint64_t v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  int *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v1 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[25];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[44];
    uint64_t v5 = v0[42];
    uint64_t v6 = v0[39];
    uint64_t v7 = v0[26];
    uint64_t v8 = v0[27];
    uint64_t v9 = v0[5];
    (*(void (**)(void, uint64_t))(v4 + 8))(v0[46], v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
    uint64_t v10 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, 1, 1, v6);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v5, v9);
    if ((*(unsigned char *)(v0[6] + *(int *)(v0[5] + 60)) & 1) == 0)
    {
      unint64_t v11 = v0[43];
      uint64_t v12 = v0[44];
      uint64_t v13 = v0[39];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
      {
        (*(void (**)(void, void))(v0[41] + 8))(v0[43], v0[40]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v0[53] = AssociatedConformanceWitness;
        uint64_t v15 = *(int **)(AssociatedConformanceWitness + 40);
        uint64_t v16 = swift_checkMetadataState();
        v0[54] = v16;
        uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
        uint64_t v17 = (void *)swift_task_alloc(v15[1]);
        v0[55] = v17;
        *uint64_t v17 = v0;
        v17[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
        uint64_t v18 = v0[21];
        uint64_t v19 = v0[17];
        uint64_t v20 = v0[3];
        uint64_t v21 = v0[4];
        uint64_t v22 = v16;
      }
      else
      {
        uint64_t v39 = v0[46];
        uint64_t v40 = v0[43];
        uint64_t v41 = v0[44];
        uint64_t v42 = v0[39];
        uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32);
        v0[49] = v43;
        v0[50] = (v41 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v43(v39, v40, v42);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v0[51] = AssociatedConformanceWitness;
        uint64_t v44 = *(int **)(AssociatedConformanceWitness + 40);
        uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v44 + *v44);
        uint64_t v45 = (void *)swift_task_alloc(v44[1]);
        v0[52] = v45;
        *uint64_t v45 = v0;
        v45[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
        uint64_t v22 = v0[39];
        uint64_t v19 = v0[37];
        uint64_t v18 = v0[29];
        uint64_t v20 = v0[3];
        uint64_t v21 = v0[4];
      }
      return v57(v18, v20, v21, v19, v22, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t))v0[49];
    uint64_t v23 = v0[46];
    uint64_t v24 = v0[44];
    uint64_t v25 = v0[42];
    uint64_t v26 = v0[39];
    uint64_t v27 = v0[32];
    uint64_t v55 = v0[5];
    uint64_t v59 = v0[2];
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v28(v27, v1, v3);
    v52(v25, v23, v26);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v25, 0, 1, v26);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v25, v55);
    v28(v59, v27, v3);
    uint64_t v10 = 0;
  }
  uint64_t v30 = v0[45];
  uint64_t v29 = v0[46];
  uint64_t v32 = v0[42];
  uint64_t v31 = v0[43];
  uint64_t v34 = v0[37];
  uint64_t v33 = v0[38];
  uint64_t v35 = v0[35];
  uint64_t v36 = v0[36];
  uint64_t v46 = v0[32];
  uint64_t v47 = v0[31];
  uint64_t v48 = v0[29];
  uint64_t v49 = v0[28];
  uint64_t v50 = v0[23];
  uint64_t v51 = v0[21];
  uint64_t v53 = v0[17];
  uint64_t v54 = v0[16];
  uint64_t v56 = v0[11];
  uint64_t v58 = v0[10];
  uint64_t v60 = v0[9];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[30] + 56))(v0[2], v10, 1, v0[25]);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 440));
  uint64_t v3 = *(void *)(v2 + 384);
  uint64_t v4 = *(void *)(v2 + 376);
  if (v0) {
    uint64_t v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  int **v17;
  int *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;

  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[20] + 8))(v1, v0[19]);
    uint64_t v5 = v0[45];
    uint64_t v4 = v0[46];
    uint64_t v7 = v0[42];
    uint64_t v6 = v0[43];
    uint64_t v9 = v0[37];
    uint64_t v8 = v0[38];
    unint64_t v11 = v0[35];
    uint64_t v10 = v0[36];
    uint64_t v12 = v0[32];
    uint64_t v23 = v0[31];
    uint64_t v24 = v0[29];
    uint64_t v25 = v0[28];
    uint64_t v26 = v0[23];
    uint64_t v27 = v0[21];
    uint64_t v28 = v0[17];
    uint64_t v29 = v0[16];
    uint64_t v30 = v0[11];
    uint64_t v31 = v0[10];
    uint64_t v32 = v0[9];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[30] + 56))(v0[2], 1, 1, v0[25]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    uint64_t v16 = v0[5];
    uint64_t v15 = v0[6];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[23], v1, v3);
    uint64_t v17 = (int **)(v15 + *(int *)(v16 + 52));
    uint64_t v18 = *v17;
    v0[56] = v17[1];
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t))((char *)v18 + *v18);
    uint64_t v19 = v18[1];
    swift_retain();
    uint64_t v20 = (void *)swift_task_alloc(v19);
    v0[57] = v20;
    *uint64_t v20 = v0;
    v20[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
    uint64_t v21 = v0[23];
    uint64_t v22 = v0[10];
    return v33(v22, v21);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 456);
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[22] + 8))(v2[23], v2[18]);
  swift_release();
  uint64_t v4 = v2[48];
  uint64_t v5 = v2[47];
  if (v0) {
    uint64_t v6 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v6 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v6, v5, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  uint64_t v1 = v0[24];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[7];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 32))(v2, v0[10], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 40))(v5, v1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v0[59] = AssociatedConformanceWitness;
  uint64_t v7 = *(int **)(AssociatedConformanceWitness + 40);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  v0[60] = v8;
  *uint64_t v8 = v0;
  v8[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  uint64_t v9 = v0[39];
  uint64_t v10 = v0[36];
  unint64_t v11 = v0[28];
  uint64_t v12 = v0[3];
  uint64_t v13 = v0[4];
  return v15(v11, v12, v13, v10, v9, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 480));
  if (v0)
  {
    (*(void (**)(void, void))(v2[44] + 8))(v2[45], v2[39]);
    uint64_t v3 = v2[47];
    uint64_t v4 = v2[48];
    uint64_t v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  else
  {
    (*(void (**)(void, void))(v2[8] + 8))(v2[11], v2[7]);
    uint64_t v3 = v2[47];
    uint64_t v4 = v2[48];
    uint64_t v5 = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  int *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  int *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v1 = v0[30];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[25];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3);
  uint64_t v6 = v0[44];
  uint64_t v5 = v0[45];
  uint64_t v7 = v0[42];
  uint64_t v8 = v0[39];
  if (v4 == 1)
  {
    uint64_t v9 = v0[26];
    uint64_t v10 = v0[27];
    unint64_t v11 = v0[5];
    (*(void (**)(void, void))(v6 + 8))(v0[45], v0[39]);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
    uint64_t v12 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v11);
    if (*(unsigned char *)(v0[6] + *(int *)(v0[5] + 60)) != 1)
    {
      uint64_t v13 = v0[43];
      uint64_t v14 = v0[44];
      uint64_t v15 = v0[39];
      AsyncFlatMapSequence.Iterator.currentIterator.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
      {
        (*(void (**)(void, void))(v0[41] + 8))(v0[43], v0[40]);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v0[53] = AssociatedConformanceWitness;
        uint64_t v17 = *(int **)(AssociatedConformanceWitness + 40);
        uint64_t v18 = swift_checkMetadataState();
        v0[54] = v18;
        uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v17 + *v17);
        uint64_t v19 = (void *)swift_task_alloc(v17[1]);
        v0[55] = v19;
        *uint64_t v19 = v0;
        v19[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
        uint64_t v20 = v0[21];
        uint64_t v21 = v0[17];
        uint64_t v22 = v0[3];
        uint64_t v23 = v0[4];
        uint64_t v24 = v18;
      }
      else
      {
        uint64_t v37 = v0[46];
        uint64_t v38 = v0[43];
        uint64_t v39 = v0[44];
        uint64_t v40 = v0[39];
        uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32);
        v0[49] = v41;
        v0[50] = (v39 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v41(v37, v38, v40);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v0[51] = AssociatedConformanceWitness;
        uint64_t v42 = *(int **)(AssociatedConformanceWitness + 40);
        uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v42 + *v42);
        uint64_t v43 = (void *)swift_task_alloc(v42[1]);
        v0[52] = v43;
        *uint64_t v43 = v0;
        v43[1] = AsyncThrowingFlatMapSequence.Iterator.next(isolation:);
        uint64_t v24 = v0[39];
        uint64_t v21 = v0[37];
        uint64_t v20 = v0[29];
        uint64_t v22 = v0[3];
        uint64_t v23 = v0[4];
      }
      return v54(v20, v22, v23, v21, v24, AssociatedConformanceWitness);
    }
  }
  else
  {
    uint64_t v25 = v0[5];
    uint64_t v52 = v0[31];
    uint64_t v56 = v0[2];
    uint64_t v26 = *(void (**)(void))(v1 + 32);
    v26();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v5, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
    AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v25);
    ((void (*)(uint64_t, uint64_t, uint64_t))v26)(v56, v52, v3);
    uint64_t v12 = 0;
  }
  uint64_t v28 = v0[45];
  uint64_t v27 = v0[46];
  uint64_t v30 = v0[42];
  uint64_t v29 = v0[43];
  uint64_t v32 = v0[37];
  uint64_t v31 = v0[38];
  uint64_t v33 = v0[35];
  uint64_t v34 = v0[36];
  uint64_t v44 = v0[32];
  uint64_t v45 = v0[31];
  uint64_t v46 = v0[29];
  uint64_t v47 = v0[28];
  uint64_t v48 = v0[23];
  uint64_t v49 = v0[21];
  uint64_t v50 = v0[17];
  uint64_t v51 = v0[16];
  uint64_t v53 = v0[11];
  uint64_t v55 = v0[10];
  uint64_t v57 = v0[9];
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[30] + 56))(v0[2], v12, 1, v0[25]);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v33);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  uint64_t v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v1 = v0[38];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[33];
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[34] + 32);
  v6(v1, v0[37], v3);
  v6(v2, v1, v3);
  *(unsigned char *)(v4 + *(int *)(v5 + 60)) = 1;
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v6(v7, v2, v3);
  swift_willThrow();
  uint64_t v8 = v0[45];
  uint64_t v9 = v0[42];
  uint64_t v10 = v0[43];
  uint64_t v12 = v0[37];
  unint64_t v11 = v0[38];
  uint64_t v14 = v0[35];
  uint64_t v13 = v0[36];
  uint64_t v16 = v0[31];
  uint64_t v15 = v0[32];
  uint64_t v19 = v0[29];
  uint64_t v20 = v0[28];
  uint64_t v21 = v0[23];
  uint64_t v22 = v0[21];
  uint64_t v23 = v0[17];
  uint64_t v24 = v0[16];
  uint64_t v25 = v0[11];
  uint64_t v26 = v0[10];
  uint64_t v27 = v0[9];
  swift_task_dealloc(v0[46]);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[15] + 32);
  v3(v1, v0[17], v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[42];
  uint64_t v7 = v0[43];
  uint64_t v9 = v0[37];
  uint64_t v8 = v0[38];
  unint64_t v11 = v0[35];
  uint64_t v10 = v0[36];
  uint64_t v13 = v0[31];
  uint64_t v12 = v0[32];
  uint64_t v16 = v0[29];
  uint64_t v17 = v0[28];
  uint64_t v18 = v0[23];
  uint64_t v19 = v0[21];
  uint64_t v20 = v0[17];
  uint64_t v21 = v0[16];
  uint64_t v22 = v0[11];
  uint64_t v23 = v0[10];
  uint64_t v24 = v0[9];
  swift_task_dealloc(v0[46]);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0[58];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[39];
  uint64_t v5 = v0[5];
  *(unsigned char *)(v0[6] + *(int *)(v5 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v4);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v3, v5);
  swift_willThrow();
  if (!v1) {
    (*(void (**)(void, void))(v0[8] + 8))(v0[11], v0[7]);
  }
  uint64_t v6 = v0[45];
  uint64_t v7 = v0[42];
  uint64_t v8 = v0[43];
  uint64_t v10 = v0[37];
  uint64_t v9 = v0[38];
  uint64_t v12 = v0[35];
  unint64_t v11 = v0[36];
  uint64_t v13 = v0[31];
  uint64_t v14 = v0[32];
  uint64_t v17 = v0[29];
  uint64_t v18 = v0[28];
  uint64_t v19 = v0[23];
  uint64_t v20 = v0[21];
  uint64_t v21 = v0[17];
  uint64_t v22 = v0[16];
  uint64_t v23 = v0[11];
  uint64_t v24 = v0[10];
  uint64_t v25 = v0[9];
  swift_task_dealloc(v0[46]);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = v0[35];
  uint64_t v2 = v0[33];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[34] + 32);
  v3(v1, v0[36], v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  uint64_t v5 = v0[58];
  uint64_t v6 = v0[44];
  uint64_t v7 = v0[42];
  uint64_t v8 = v0[39];
  uint64_t v9 = v0[5];
  *(unsigned char *)(v0[6] + *(int *)(v9 + 60)) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v8);
  AsyncFlatMapSequence.Iterator.currentIterator.setter(v7, v9);
  swift_willThrow();
  if (!v5) {
    (*(void (**)(void, void))(v0[8] + 8))(v0[11], v0[7]);
  }
  uint64_t v10 = v0[45];
  unint64_t v11 = v0[42];
  uint64_t v12 = v0[43];
  uint64_t v14 = v0[37];
  uint64_t v13 = v0[38];
  uint64_t v16 = v0[35];
  uint64_t v15 = v0[36];
  uint64_t v18 = v0[31];
  uint64_t v17 = v0[32];
  uint64_t v21 = v0[29];
  uint64_t v22 = v0[28];
  uint64_t v23 = v0[23];
  uint64_t v24 = v0[21];
  uint64_t v25 = v0[17];
  uint64_t v26 = v0[16];
  uint64_t v27 = v0[11];
  uint64_t v28 = v0[10];
  uint64_t v29 = v0[9];
  swift_task_dealloc(v0[46]);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingFlatMapSequence<A, B>.Iterator(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFEDC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncThrowingFlatMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss28AsyncThrowingFlatMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v10 = (void *)swift_task_alloc(dword_1E91CFEE4);
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingFlatMapSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingFlatMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncFlatMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t, void))AsyncThrowingFlatMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncFlatMapSequence.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t, void))
{
  uint64_t v20 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v5, v10);
  uint64_t v14 = (uint64_t *)(v3 + *(int *)(a1 + 52));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
  swift_retain();
  v17(v3, a1);
  return v20(v13, v15, v16, v5, *(void *)(a1 + 24), v10, *(void *)(a1 + 40));
}

uint64_t AsyncSequence.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a7, v7);
  uint64_t v15 = (void *)(a7 + *(int *)(a6(0, a3, a4, a5) + 44));
  *uint64_t v15 = a1;
  v15[1] = a2;

  return swift_retain();
}

uint64_t AsyncThrowingMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncCompactMapSequence.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncThrowingMapSequence, a7);
}

uint64_t AsyncCompactMapSequence.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a8, a1, a4);
  uint64_t result = a7(0, a4, a5, a6);
  uint64_t v16 = (void *)(a8 + *(int *)(result + 44));
  *uint64_t v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t AsyncCompactMapSequence.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t AsyncCompactMapSequence.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v4(v1, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncThrowingMapSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingMapSequence.Iterator.finished.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t AsyncThrowingMapSequence.Iterator.finished.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t (*AsyncThrowingMapSequence.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AsyncThrowingMapSequence.Iterator, a7);
}

uint64_t AsyncThrowingCompactMapSequence.Iterator.init(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = a7(0, a4, a5, a6);
  *(unsigned char *)(a8 + *(int *)(v12 + 48)) = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a8, a1, AssociatedTypeWitness);
  uint64_t v15 = (void *)(a8 + *(int *)(v12 + 44));
  *uint64_t v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t AsyncThrowingMapSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 32);
  v3[6] = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingMapSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingMapSequence.Iterator.next()()
{
  uint64_t v1 = v0[3];
  if (*(unsigned char *)(v0[4] + *(int *)(v1 + 48)))
  {
    uint64_t v2 = v0[12];
    uint64_t v3 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(v1 + 24) - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v7 = *(int **)(AssociatedConformanceWitness + 32);
    uint64_t v8 = swift_checkMetadataState();
    unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
    uint64_t v9 = (void *)swift_task_alloc(v7[1]);
    v0[13] = v9;
    void *v9 = v0;
    v9[1] = AsyncThrowingMapSequence.Iterator.next();
    uint64_t v10 = v0[10];
    return v11(v10, v8, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncThrowingMapSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncThrowingMapSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  int **v10;
  int *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(v0[3] + 24) - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v9 = v0[3];
    uint64_t v8 = v0[4];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[12], v1, v3);
    uint64_t v10 = (int **)(v8 + *(int *)(v9 + 44));
    unint64_t v11 = *v10;
    v0[15] = v10[1];
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)v11 + *v11);
    uint64_t v12 = v11[1];
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc(v12);
    v0[16] = v13;
    *uint64_t v13 = v0;
    v13[1] = AsyncThrowingMapSequence.Iterator.next();
    uint64_t v14 = v0[12];
    uint64_t v15 = v0[2];
    return v16(v15, v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[12];
  uint64_t v5 = v2[11];
  uint64_t v6 = v2[7];
  if (v0)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = AsyncThrowingMapSequence.Iterator.next();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_release();
    uint64_t v7 = AsyncThrowingMapSequence.Iterator.next();
  }
  return swift_task_switch(v7, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[10];
  (*(void (**)(void, void, uint64_t))(*(void *)(*(void *)(v0[3] + 24) - 8) + 56))(v0[2], 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[12]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  *(unsigned char *)(v0[4] + *(int *)(v0[3] + 48)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[12]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t AsyncThrowingMapSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(void *)(a4 + 32);
  v5[8] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  v5[14] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[15] = v13;
  v5[16] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v11 - 8);
  v5[17] = v14;
  v5[18] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  v5[19] = v16;
  v5[20] = v18;
  return swift_task_switch(AsyncThrowingMapSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingMapSequence.Iterator.next(isolation:)()
{
  uint64_t v1 = v0[5];
  if (*(unsigned char *)(v0[6] + *(int *)(v1 + 48)))
  {
    uint64_t v2 = v0[18];
    uint64_t v3 = v0[16];
    uint64_t v5 = v0[11];
    uint64_t v4 = v0[12];
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(v1 + 24) - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v0[21] = AssociatedConformanceWitness;
    uint64_t v9 = *(int **)(AssociatedConformanceWitness + 40);
    uint64_t v10 = swift_checkMetadataState();
    v0[22] = v10;
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
    uint64_t v11 = (void *)swift_task_alloc(v9[1]);
    v0[23] = v11;
    *uint64_t v11 = v0;
    v11[1] = AsyncThrowingMapSequence.Iterator.next(isolation:);
    uint64_t v12 = v0[16];
    uint64_t v13 = v0[12];
    uint64_t v14 = v0[3];
    uint64_t v15 = v0[4];
    return v16(v12, v14, v15, v13, v10, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 184));
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v5 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v5 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  int **v12;
  int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[13];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[15] + 8))(v1, v0[14]);
    uint64_t v4 = v0[18];
    uint64_t v5 = v0[16];
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(*(void *)(v0[5] + 24) - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v11 = v0[5];
    uint64_t v10 = v0[6];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[18], v1, v3);
    uint64_t v12 = (int **)(v10 + *(int *)(v11 + 44));
    uint64_t v13 = *v12;
    v0[24] = v12[1];
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))((char *)v13 + *v13);
    uint64_t v14 = v13[1];
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc(v14);
    v0[25] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncThrowingMapSequence.Iterator.next(isolation:);
    uint64_t v16 = v0[18];
    uint64_t v17 = v0[2];
    return v18(v17, v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 200);
  v2[26] = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[18];
  uint64_t v5 = v2[17];
  uint64_t v6 = v2[13];
  if (v0)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v2[19];
    uint64_t v8 = v2[20];
    uint64_t v9 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_release();
    uint64_t v7 = v2[19];
    uint64_t v8 = v2[20];
    uint64_t v9 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v9, v7, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  (*(void (**)(void, void, uint64_t))(*(void *)(*(void *)(v0[5] + 24) - 8) + 56))(v0[2], 0, 1);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 32);
  v3(v1, v0[12], v2);
  swift_getAssociatedConformanceWitness();
  swift_allocError();
  v3(v4, v1, v2);
  uint64_t v5 = v0[16];
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  swift_task_dealloc(v0[18]);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  *(unsigned char *)(v0[6] + *(int *)(v0[5] + 48)) = 1;
  swift_willThrow();
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  swift_task_dealloc(v0[18]);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingMapSequence<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFEEC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncThrowingMapSequence.Iterator.next()(a1, a2);
}

uint64_t _ss24AsyncThrowingMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v10 = (void *)swift_task_alloc(dword_1E91CFEF4);
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = _ss24AsyncThrowingMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingMapSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t _ss24AsyncThrowingMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 24));
  if (v0) {
    **(void **)(v2 + 16) = v0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t AsyncThrowingMapSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncCompactMapSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, void, uint64_t))AsyncThrowingMapSequence.Iterator.init(_:transform:));
}

uint64_t AsyncSequence.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a6, v6);
  uint64_t v13 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v13 = a1;
  v13[1] = a2;
  return swift_retain();
}

uint64_t AsyncThrowingPrefixWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return AsyncDropWhileSequence.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncThrowingPrefixWhileSequence, a6);
}

uint64_t AsyncDropWhileSequence.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  *uint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t AsyncCompactMapSequence.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t (*AsyncThrowingPrefixWhileSequence.Iterator.predicateHasFailed.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncPrefixWhileSequence.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t AsyncPrefixWhileSequence.Iterator.baseIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v6(v4, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncThrowingPrefixWhileSequence.Iterator.baseIterator.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  return AsyncPrefixWhileSequence.Iterator.init(_:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AsyncThrowingPrefixWhileSequence.Iterator, a6);
}

uint64_t AsyncPrefixWhileSequence.Iterator.init(_:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, unsigned char *a7@<X8>)
{
  *a7 = 0;
  uint64_t v11 = a6(0, a4, a5);
  uint64_t v12 = &a7[*(int *)(v11 + 36)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v12, a1, AssociatedTypeWitness);
  uint64_t v15 = &a7[*(int *)(v11 + 40)];
  *uint64_t v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 24);
  v3[6] = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Optional();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v3[11] = v7;
  v3[12] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(AsyncThrowingPrefixWhileSequence.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next()()
{
  if (**(unsigned char **)(v0 + 32))
  {
    uint64_t v1 = *(void *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 80);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 16), 1, 1, *(void *)(v0 + 56));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v6 = *(int **)(AssociatedConformanceWitness + 32);
    uint64_t v7 = swift_checkMetadataState();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    uint64_t v8 = (void *)swift_task_alloc(v6[1]);
    *(void *)(v0 + 104) = v8;
    *uint64_t v8 = v0;
    v8[1] = AsyncThrowingPrefixWhileSequence.Iterator.next();
    uint64_t v9 = *(void *)(v0 + 80);
    return v10(v9, v7, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = AsyncThrowingMapSequence.Iterator.next();
  }
  else {
    uint64_t v3 = AsyncThrowingPrefixWhileSequence.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int **v12;
  int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[9] + 8))(v1, v0[8]);
    uint64_t v4 = v0[12];
    uint64_t v5 = v0[10];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[11] + 56))(v0[2], 1, 1, v0[7]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[3];
    uint64_t v9 = v0[4];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[15] = v11;
    v0[16] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v11(v8, v1, v3);
    uint64_t v12 = (int **)(v9 + *(int *)(v10 + 40));
    uint64_t v13 = *v12;
    v0[17] = v12[1];
    uint64_t v17 = (uint64_t (*)(uint64_t))((char *)v13 + *v13);
    uint64_t v14 = v13[1];
    swift_retain();
    uint64_t v15 = (void *)swift_task_alloc(v14);
    v0[18] = v15;
    *uint64_t v15 = v0;
    v15[1] = AsyncThrowingPrefixWhileSequence.Iterator.next();
    uint64_t v16 = v0[12];
    return v17(v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  if (*(unsigned char *)(v0 + 160) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 120))(*(void *)(v0 + 16), *(void *)(v0 + 96), *(void *)(v0 + 56));
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v2 = *(unsigned char **)(v0 + 32);
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 56));
    uint64_t v1 = 1;
    uint64_t *v2 = 1;
  }
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 80);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 16), v1, 1, *(void *)(v0 + 56));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  **(unsigned char **)(v0 + 32) = 1;
  swift_willThrow();
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next()(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 144);
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  swift_release();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v4 + 88) + 8))(*(void *)(v4 + 96), *(void *)(v4 + 56));
    uint64_t v6 = AsyncThrowingPrefixWhileSequence.Iterator.next();
  }
  else
  {
    *(unsigned char *)(v4 + 160) = a1 & 1;
    uint64_t v6 = AsyncThrowingPrefixWhileSequence.Iterator.next();
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = *(void *)(a4 + 24);
  v5[8] = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[9] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v5[10] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v5[13] = v11;
  uint64_t v12 = type metadata accessor for Optional();
  v5[14] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[15] = v13;
  v5[16] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v11 - 8);
  v5[17] = v14;
  v5[18] = swift_task_alloc((*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  v5[19] = v16;
  v5[20] = v18;
  return swift_task_switch(AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:), v16, v18);
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)()
{
  if (**(unsigned char **)(v0 + 48))
  {
    uint64_t v1 = *(void *)(v0 + 144);
    uint64_t v2 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v4 = *(void *)(v0 + 88);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 136) + 56))(*(void *)(v0 + 16), 1, 1, *(void *)(v0 + 104));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    *(void *)(v0 + 168) = AssociatedConformanceWitness;
    uint64_t v8 = *(int **)(AssociatedConformanceWitness + 40);
    uint64_t v9 = swift_checkMetadataState();
    *(void *)(v0 + 176) = v9;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
    unint64_t v10 = (void *)swift_task_alloc(v8[1]);
    *(void *)(v0 + 184) = v10;
    *unint64_t v10 = v0;
    v10[1] = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 96);
    uint64_t v13 = *(void *)(v0 + 24);
    uint64_t v14 = *(void *)(v0 + 32);
    return v15(v11, v13, v14, v12, v9, AssociatedConformanceWitness);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 184));
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v5 = AsyncThrowingMapSequence.Iterator.next(isolation:);
  }
  else {
    uint64_t v5 = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  int **v14;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;

  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[13];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[15] + 8))(v1, v0[14]);
    uint64_t v4 = v0[18];
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[11];
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[17] + 56))(v0[2], 1, 1, v0[13]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    unint64_t v10 = v0[18];
    uint64_t v12 = v0[5];
    uint64_t v11 = v0[6];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v0[24] = v13;
    v0[25] = (v2 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v13(v10, v1, v3);
    uint64_t v14 = (int **)(v11 + *(int *)(v12 + 40));
    uint64_t v15 = *v14;
    v0[26] = v14[1];
    uint64_t v19 = (uint64_t (*)(uint64_t))((char *)v15 + *v15);
    uint64_t v16 = v15[1];
    swift_retain();
    uint64_t v17 = (void *)swift_task_alloc(v16);
    v0[27] = v17;
    *uint64_t v17 = v0;
    v17[1] = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
    uint64_t v18 = v0[18];
    return v19(v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  if (*(unsigned char *)(v0 + 232) == 1)
  {
    (*(void (**)(void, void, void))(v0 + 192))(*(void *)(v0 + 16), *(void *)(v0 + 144), *(void *)(v0 + 104));
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v2 = *(unsigned char **)(v0 + 48);
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 104));
    uint64_t v1 = 1;
    uint64_t *v2 = 1;
  }
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 88);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 136) + 56))(*(void *)(v0 + 16), v1, 1, *(void *)(v0 + 104));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  **(unsigned char **)(v0 + 48) = 1;
  swift_willThrow();
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 216);
  *(void *)(*v2 + 224) = v1;
  swift_task_dealloc(v5);
  swift_release();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v4 + 136) + 8))(*(void *)(v4 + 144), *(void *)(v4 + 104));
    uint64_t v6 = *(void *)(v4 + 152);
    uint64_t v7 = *(void *)(v4 + 160);
    uint64_t v8 = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
  }
  else
  {
    *(unsigned char *)(v4 + 232) = a1 & 1;
    uint64_t v6 = *(void *)(v4 + 152);
    uint64_t v7 = *(void *)(v4 + 160);
    uint64_t v8 = AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:);
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingPrefixWhileSequence<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFEFC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncThrowingPrefixWhileSequence.Iterator.next()(a1, a2);
}

uint64_t _ss32AsyncThrowingPrefixWhileSequenceV8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  uint64_t v10 = (void *)swift_task_alloc(dword_1E91CFF04);
  *(void *)(v5 + 24) = v10;
  *uint64_t v10 = v5;
  v10[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return AsyncThrowingPrefixWhileSequence.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t AsyncThrowingPrefixWhileSequence.makeAsyncIterator()(uint64_t a1)
{
  return AsyncDropWhileSequence.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))AsyncThrowingPrefixWhileSequence.Iterator.init(_:predicate:));
}

uint64_t static GlobalActor.sharedUnownedExecutor.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  uint64_t v4 = swift_checkMetadataState();
  uint64_t v5 = v3(v4, AssociatedConformanceWitness);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t _ss24globalConcurrentExecutorSch_pvg()
{
  return swift_unknownObjectRetain();
}

uint64_t _getUndefinedTaskExecutor()()
{
  return 0;
}

uint64_t _ss32_DefaultGlobalConcurrentExecutorCSchsSch013asUnownedTaskD0s0fgD0VyFTW()
{
  return 0;
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for MainActor();
  uint64_t result = swift_initStaticObject();
  static MainActor.shared = result;
  return result;
}

uint64_t static MainActor.shared.getter()
{
  return swift_initStaticObject();
}

uint64_t MainActor.deinit()
{
  return v0;
}

uint64_t MainActor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance MainActor()
{
  return swift_initStaticObject();
}

uint64_t static MainActor.run<A>(resultType:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  swift_initStaticObject();
  uint64_t MainExecutor = swift_task_getMainExecutor();
  return swift_task_switch(static MainActor.run<A>(resultType:body:), MainExecutor, v5);
}

uint64_t static MainActor.run<A>(resultType:body:)()
{
  (*(void (**)(void))(v0 + 24))();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static MainActor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t MainExecutor = swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor(MainExecutor, v12) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a7;
  v13[3] = a1;
  v13[4] = a2;
  partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  if (v7) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_8:
    _StringGuts.grow(_:)(66);
    v16._object = (void *)0x800000018E4DAB40;
    v16._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 46;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  return static MainActor.assumeIsolated<A>(_:file:line:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t UnownedJob.description.getter(uint64_t a1)
{
  if (!swift_task_getJobTaskId(a1)) {
    return 0xD000000000000013;
  }
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x4A64656E776F6E55;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnownedJob()
{
  return UnownedJob.description.getter(*v0);
}

uint64_t Job.description.getter(uint64_t a1)
{
  if (swift_task_getJobTaskId(a1))
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 41;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
  }
  return 0x203A646928626F4ALL;
}

unint64_t ExecutorJob.description.getter(uint64_t a1)
{
  if (!swift_task_getJobTaskId(a1)) {
    return 0xD000000000000014;
  }
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000010;
}

uint64_t JobPriority.rawValue.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*JobPriority.rawValue.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t TaskPriority.init(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  a2[1] = result == 0;
  return result;
}

uint64_t TaskPriority.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static JobPriority.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

BOOL static JobPriority.!= infix(_:_:)(char a1, char a2)
{
  return a1 != a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static JobPriority.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL static JobPriority.<= infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 >= a1;
}

BOOL static JobPriority.> infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

BOOL static JobPriority.>= infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 >= a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance JobPriority(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t UnsafeContinuation.context.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*UnsafeContinuation.context.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  return swift_task_switch(withUnsafeContinuation<A>(isolation:_:), v8, v10);
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  Swift::String v1 = (void (*)(swift *))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = withCheckedContinuation<A>(isolation:function:_:);
  uint64_t v3 = swift_continuation_init(v0 + 2, 0);
  v1(v3);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  return swift_task_switch(withUnsafeThrowingContinuation<A>(isolation:_:), v8, v10);
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)()
{
  Swift::String v1 = (void (*)(swift *))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = withCheckedThrowingContinuation<A>(isolation:function:_:);
  uint64_t v3 = swift_continuation_init(v0 + 2, 1uLL);
  v1(v3);
  return swift_continuation_await((uint64_t)(v0 + 2));
}

uint64_t static Task<>.yield()()
{
  return swift_task_switch(static Task<>.yield(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  swift *v2;
  uint64_t NullaryContinuationJob;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = v0;
  Swift::String v1 = v0 + 16;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = withCheckedContinuation<A>(isolation:function:_:);
  uint64_t v2 = swift_continuation_init((void *)(v0 + 16), 0);
  static Task<>.currentPriority.getter(&v5);
  NullaryContinuationJob = swift_task_createNullaryContinuationJob(v5, (uint64_t)v2);
  swift_task_enqueueGlobal(NullaryContinuationJob);
  return swift_continuation_await(v1);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = swift_task_addCancellationHandler(a4, a5);
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v8 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v5 + 24) = v8;
  *uint64_t v8 = v5;
  v8[1] = withTaskCancellationHandler<A>(operation:onCancel:);
  return v10(a1);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:)()
{
  uint64_t v1 = *(void *)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  swift_task_removeCancellationHandler(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

unint64_t Task.value.getter(uint64_t a1, unsigned int *a2)
{
  return swift_task_future_wait_throwing(a1, a2, Task.value.getter, (void *)(v2 + 16));
}

uint64_t Task.value.getter()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t Task.result.getter(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a1;
  v5[4] = a3;
  uint64_t v8 = (void *)swift_task_alloc(dword_1E91CFF24);
  v5[7] = v8;
  *uint64_t v8 = v5;
  v8[1] = Task.result.getter;
  return swift_task_future_wait_throwing(a1, a2, Task.value.getter, v8 + 2);
}

uint64_t Task.result.getter()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = Task.result.getter;
  }
  else {
    uint64_t v3 = Task.result.getter;
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  type metadata accessor for Result();
  swift_storeEnumTagMultiPayload();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  v0[2] = v0[8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  type metadata accessor for Result();
  swift_storeEnumTagMultiPayload();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

unint64_t Task<>.value.getter(uint64_t a1, unsigned int *a2)
{
  return swift_task_future_wait(a1, a2, Task.value.getter, (void *)(v2 + 16));
}

void Task.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int Task.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Task<A, B>()
{
  return Task.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Task<A, B>(int a1)
{
  Task.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Task<A, B>()
{
  Hasher.init(_seed:)();
  Task.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

BOOL static Task.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Task<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static Task.== infix(_:_:)(*a1, *a2);
}

swift::AsyncTask *static Task<>.startOnMainActor(priority:_:)(unsigned __int8 *a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (a1[1]) {
    unint64_t v4 = 3072;
  }
  else {
    unint64_t v4 = *a1 | 0xC00;
  }
  uint64_t v5 = (swift::AsyncTask *)swift_task_create(v4, 0, a4, a2, a3);
  swift_task_startOnMainActor(v5);
  return v5;
}

swift::AsyncTask *static Task<>.startOnMainActor(priority:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1[1]) {
    unint64_t v7 = 3072;
  }
  else {
    unint64_t v7 = *a1 | 0xC00;
  }
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a4;
  v8[3] = a2;
  v8[4] = a3;
  uint64_t v9 = (swift::AsyncTask *)swift_task_create(v7, 0, a4, (int *)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A), (uint64_t)v8);
  swift_task_startOnMainActor(v9);
  return v9;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *unint64_t v4 = v2;
  v4[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return v6(a1);
}

uint64_t TaskPriority.rawValue.getter()
{
  return *v0;
}

uint64_t TaskPriority.rawValue.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*TaskPriority.rawValue.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

void static TaskPriority.low.getter(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

void static TaskPriority.userInitiated.getter(unsigned char *a1@<X8>)
{
  *a1 = 25;
}

void static TaskPriority.background.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void static TaskPriority.default.getter(unsigned char *a1@<X8>)
{
  *a1 = 21;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance TaskPriority@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TaskPriority(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL static TaskPriority.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static TaskPriority.!= infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 != *a2;
}

BOOL static TaskPriority.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL static TaskPriority.<= infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL static TaskPriority.> infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

BOOL static TaskPriority.>= infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

unint64_t TaskPriority.description.getter()
{
  unint64_t result = 0xD000000000000010;
  switch(((*v0 - 9) >> 2) | ((*v0 - 9) << 6))
  {
    case 0:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = 41;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      unint64_t result = 0xD000000000000017;
      break;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TaskPriority()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskPriority()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static Task<>.currentPriority.getter@<X0>(unsigned char *a1@<X8>)
{
  if (swift_task_getCurrent())
  {
    swift_retain();
    char v2 = swift_task_currentPriority();
    unint64_t result = swift_release();
LABEL_5:
    *a1 = v2;
    return result;
  }
  unint64_t result = swift_task_getCurrentThreadPriority();
  if ((result & 0x8000000000000000) == 0)
  {
    char v2 = result;
    if (result < 0x100) {
      goto LABEL_5;
    }
  }
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnsafeCurrentTask.priority.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_task_currentPriority();
  *a1 = result;
  return result;
}

uint64_t withUnsafeCurrentTask<A>(body:)(void (*a1)(uint64_t *))
{
  uint64_t Current = swift_task_getCurrent();
  if (Current)
  {
    uint64_t v4 = Current;
    swift_retain();
    a1(&v4);
    return swift_release();
  }
  else
  {
    uint64_t v4 = 0;
    return ((uint64_t (*)(uint64_t *))a1)(&v4);
  }
}

uint64_t static Task<>.basePriority.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_task_getCurrent();
  uint64_t v3 = result;
  if (result)
  {
    uint64_t v4 = swift_retain();
    char v5 = swift_task_basePriority(v4);
    uint64_t result = swift_release();
  }
  else
  {
    char v5 = 0;
  }
  *a1 = v5;
  a1[1] = v3 == 0;
  return result;
}

uint64_t withUnsafeCurrentTask<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return swift_task_switch(withUnsafeCurrentTask<A>(body:), 0, 0);
}

uint64_t withUnsafeCurrentTask<A>(body:)()
{
  uint64_t Current = swift_task_getCurrent();
  v0[7] = Current;
  char v2 = (int *)v0[5];
  if (Current)
  {
    v0[3] = Current;
    uint64_t v9 = (int *)((char *)v2 + *v2);
    uint64_t v3 = v2[1];
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc(v3);
    v0[8] = v4;
    *uint64_t v4 = v0;
    v4[1] = withUnsafeCurrentTask<A>(body:);
    uint64_t v5 = v0[4];
    uint64_t v6 = v0 + 3;
  }
  else
  {
    v0[2] = 0;
    uint64_t v9 = (int *)((char *)v2 + *v2);
    uint64_t v7 = (void *)swift_task_alloc(v2[1]);
    v0[10] = v7;
    *uint64_t v7 = v0;
    v7[1] = withUnsafeCurrentTask<A>(body:);
    uint64_t v5 = v0[4];
    uint64_t v6 = v0 + 2;
  }
  return ((uint64_t (*)(uint64_t, void *))v9)(v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  char v2 = *(void *)(*v1 + 64);
  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
  {
    return swift_task_switch(withUnsafeCurrentTask<A>(body:), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  char v2 = *(void *)(*v1 + 80);
  uint64_t v3 = *v1;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    return swift_task_switch(withUnsafeCurrentTask<A>(body:), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t UnsafeCurrentTask.isCancelled.getter()
{
  return swift_task_isCancelled();
}

uint64_t UnsafeCurrentTask.basePriority.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_task_basePriority(*v1);
  *a1 = result;
  return result;
}

Swift::Void __swiftcall UnsafeCurrentTask.cancel()()
{
  swift_task_cancel(*v0);
}

void UnsafeCurrentTask.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int UnsafeCurrentTask.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnsafeCurrentTask()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnsafeCurrentTask()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnsafeCurrentTask()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static UnsafeCurrentTask.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UnsafeCurrentTask(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t _getGenericSerialExecutor()()
{
  return 0;
}

void _runAsyncMain(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &async function pointer to partial apply for closure #1 in _runAsyncMain(_:);
  *(void *)(v5 + 24) = v4;
  swift_retain();
  swift_task_create(0x1000uLL, 0, MEMORY[0x1E4FBC848] + 8, (int *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu, v5);
  swift_release();
  swift_task_asyncMainDrainQueue();
}

uint64_t closure #1 in _runAsyncMain(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  type metadata accessor for MainActor();
  swift_initStaticObject();
  uint64_t MainExecutor = swift_task_getMainExecutor();
  return swift_task_switch(closure #1 in _runAsyncMain(_:), MainExecutor, v6);
}

uint64_t closure #1 in _runAsyncMain(_:)()
{
  Swift::UInt v1 = *(int **)(v0 + 16);
  uint64_t v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  char v2 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 32) = v2;
  void *v2 = v0;
  v2[1] = closure #1 in _runAsyncMain(_:);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  char v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in _runAsyncMain(_:);
  }
  else {
    uint64_t v3 = (uint64_t (*)(void))closure #1 in _runAsyncMain(_:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  Swift::UInt v1 = *(void *)(v0 + 40);
  swift_errorInMain();
  MEMORY[0x192FAC3C0](v1);
  char v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void closure #1 in _runAsyncMain(_:)()
{
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = v18;
  v7[8] = v19;
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  uint64_t v10 = *(void *)(v18 - 8);
  v7[9] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[10] = swift_task_alloc(v11);
  v7[11] = swift_task_alloc(v11);
  if (a4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(ObjectType, a5);
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  v7[12] = v13;
  v7[13] = v15;
  return swift_task_switch(_ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY0_, v13, v15);
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY0_()
{
  Swift::UInt v1 = (int *)v0[5];
  if (v0[3])
  {
    uint64_t v2 = v0[4];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
    v0[14] = swift_task_pushTaskExecutorPreference(v4, v5);
    unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
    uint64_t v6 = (void *)swift_task_alloc(v1[1]);
    v0[15] = v6;
    *uint64_t v6 = v0;
    v6[1] = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ1_;
    uint64_t v7 = v0[11];
  }
  else
  {
    unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
    uint64_t v8 = (void *)swift_task_alloc(v1[1]);
    v0[16] = v8;
    *uint64_t v8 = v0;
    v8[1] = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ3_;
    uint64_t v7 = v0[10];
  }
  uint64_t v9 = v0[2];
  return v11(v9, v7);
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ1_()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 120));
  uint64_t v3 = *(void *)(v2 + 104);
  uint64_t v4 = *(void *)(v2 + 96);
  if (v0) {
    uint64_t v5 = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY5_;
  }
  else {
    uint64_t v5 = _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY2_;
  }
  return swift_task_switch(v5, v4, v3);
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY2_()
{
  swift_task_popTaskExecutorPreference(v0[14]);
  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[11]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTQ3_()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[12];
    uint64_t v6 = v2[13];
    return swift_task_switch(_ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY4_, v5, v6);
  }
  else
  {
    uint64_t v8 = v2[10];
    swift_task_dealloc(v2[11]);
    swift_task_dealloc(v8);
    uint64_t v9 = *(uint64_t (**)(void))(v4 + 8);
    return v9();
  }
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY4_()
{
  (*(void (**)(void, void, void))(v0[9] + 32))(v0[8], v0[10], v0[7]);
  uint64_t v1 = v0[10];
  swift_task_dealloc(v0[11]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t _ss26withTaskExecutorPreference_9isolation9operationxSch_pSg_ScA_pSgYixyYaq_YKXEtYaq_YKs5ErrorR_r0_lFTY5_()
{
  uint64_t v1 = v0[14];
  (*(void (**)(void, void, void))(v0[9] + 32))(v0[8], v0[11], v0[7]);
  swift_task_popTaskExecutorPreference(v1);
  uint64_t v2 = v0[10];
  swift_task_dealloc(v0[11]);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlF(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v6 = v4;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(ObjectType, a3);
    v6[2] = swift_task_pushTaskExecutorPreference(v10, v11);
    uint64_t v15 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
    uint64_t v12 = (void *)swift_task_alloc(a4[1]);
    v6[3] = v12;
    *uint64_t v12 = v6;
    uint64_t v13 = _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ0_;
  }
  else
  {
    uint64_t v15 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
    uint64_t v12 = (void *)swift_task_alloc(a4[1]);
    v6[4] = v12;
    *uint64_t v12 = v6;
    uint64_t v13 = _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ1_;
  }
  v12[1] = v13;
  return v15(a1);
}

uint64_t _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ0_()
{
  uint64_t v1 = *(void *)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  swift_task_popTaskExecutorPreference(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t _ss26withTaskExecutorPreference_9operationxSch_pSg_xyYaYbKXEtYaKs8SendableRzlFTQ1_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  if (a6)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(ObjectType, a7);
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  v7[7] = v10;
  v7[8] = v12;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), v10, v12);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  uint64_t v1 = (int *)v0[3];
  v0[9] = swift_task_addCancellationHandler(v0[5], v0[6]);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[10] = v2;
  void *v2 = v0;
  v2[1] = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  uint64_t v3 = v0[2];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v6 = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  }
  else {
    uint64_t v6 = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  }
  return swift_task_switch(v6, v5, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_removeCancellationHandler(*(void *)(v0 + 72));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_removeCancellationHandler(*(void *)(v0 + 72));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static Task<>.isCancelled.getter()
{
  uint64_t result = swift_task_getCurrent();
  if (result)
  {
    swift_retain();
    char isCancelled = swift_task_isCancelled();
    swift_release();
    return isCancelled & 1;
  }
  return result;
}

uint64_t static Task<>.checkCancellation()()
{
  uint64_t result = swift_task_getCurrent();
  if (result)
  {
    swift_retain();
    char isCancelled = swift_task_isCancelled();
    uint64_t result = swift_release();
    if (isCancelled)
    {
      lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance CancellationError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance CancellationError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance CancellationError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CancellationError()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t TaskGroup.awaitAllRemainingTasks()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for Optional();
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFF94);
  v2[8] = v5;
  void *v5 = v2;
  v5[1] = TaskGroup.awaitAllRemainingTasks();
  uint64_t v6 = v2[3];
  v5[7] = v2[7];
  v5[8] = v6;
  v5[9] = 0;
  v5[10] = 0;
  return swift_task_switch(TaskGroup.next(isolation:), 0, 0);
}

uint64_t TaskGroup.awaitAllRemainingTasks()()
{
  swift_task_dealloc(*(void *)(*(void *)v0 + 64));
  return swift_task_switch(TaskGroup.awaitAllRemainingTasks(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  int v2;
  uint64_t (*v3)(void);
  void *v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = v0[7];
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0[4] - 8) + 48))(v1, 1);
  (*(void (**)(uint64_t, void))(v0[6] + 8))(v1, v0[5]);
  if (v2 == 1)
  {
    swift_task_dealloc(v1);
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFF94);
    v0[8] = v5;
    void *v5 = v0;
    v5[1] = TaskGroup.awaitAllRemainingTasks();
    uint64_t v6 = v0[3];
    v5[7] = v0[7];
    v5[8] = v6;
    v5[9] = 0;
    v5[10] = 0;
    return swift_task_switch(TaskGroup.next(isolation:), 0, 0);
  }
}

uint64_t withTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[37] = a7;
  v8[38] = a8;
  v8[35] = a1;
  v8[36] = a6;
  if (a4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(ObjectType, a5);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  v8[39] = v11;
  v8[40] = v13;
  return swift_task_switch(withTaskGroup<A, B>(of:returning:isolation:body:), v11, v13);
}

uint64_t withTaskGroup<A, B>(of:returning:isolation:body:)()
{
  uint64_t v1 = (int *)v0[36];
  swift_taskGroup_initialize((uint64_t)(v0 + 2), v0[38]);
  v0[34] = v0 + 2;
  uint64_t v5 = (int *)((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[41] = v2;
  void *v2 = v0;
  v2[1] = withTaskGroup<A, B>(of:returning:isolation:body:);
  uint64_t v3 = v0[35];
  return ((uint64_t (*)(uint64_t, void *))v5)(v3, v0 + 34);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 328));
  uint64_t v2 = (void *)swift_task_alloc(dword_1E91CFF8C);
  *(void *)(v1 + 336) = v2;
  uint64_t v3 = type metadata accessor for TaskGroup();
  void *v2 = v5;
  v2[1] = withTaskGroup<A, B>(of:returning:isolation:body:);
  return TaskGroup.awaitAllRemainingTasks()(v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 336));
  uint64_t v2 = *(void *)(v1 + 320);
  uint64_t v3 = *(void *)(v1 + 312);
  return swift_task_switch(withTaskGroup<A, B>(of:returning:isolation:body:), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_taskGroup_destroy(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t withTaskGroup<A, B>(of:returning:body:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  v6[35] = a6;
  swift_taskGroup_initialize((uint64_t)(v6 + 2), a6);
  v6[34] = v6 + 2;
  uint64_t v11 = (int *)((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc(a4[1]);
  v6[36] = v9;
  void *v9 = v6;
  v9[1] = withTaskGroup<A, B>(of:returning:body:);
  return ((uint64_t (*)(uint64_t, void *))v11)(a1, v6 + 34);
}

uint64_t withTaskGroup<A, B>(of:returning:body:)()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 288));
  uint64_t v2 = (void *)swift_task_alloc(dword_1E91CFF8C);
  *(void *)(v1 + 296) = v2;
  uint64_t v3 = type metadata accessor for TaskGroup();
  void *v2 = v5;
  v2[1] = withTaskGroup<A, B>(of:returning:body:);
  return TaskGroup.awaitAllRemainingTasks()(v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *v0 + 16;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 296));
  swift_taskGroup_destroy(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t ThrowingTaskGroup.awaitAllRemainingTasks()(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFFB4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(0, 0, a1);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[37] = a7;
  v8[38] = a8;
  v8[35] = a1;
  v8[36] = a6;
  if (a4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(ObjectType, a5);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  v8[39] = v11;
  v8[40] = v13;
  return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), v11, v13);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)()
{
  uint64_t v1 = (int *)v0[36];
  swift_taskGroup_initialize((uint64_t)(v0 + 2), v0[38]);
  v0[41] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v0[34] = v0 + 2;
  uint64_t v5 = (int *)((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[42] = v2;
  void *v2 = v0;
  v2[1] = withThrowingTaskGroup<A, B>(of:returning:isolation:body:);
  uint64_t v3 = v0[35];
  return ((uint64_t (*)(uint64_t, void *))v5)(v3, v0 + 34);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v2 = *(void *)(*(void *)v1 + 336);
  uint64_t v3 = *(void **)v1;
  v3[43] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = v3[39];
    uint64_t v5 = v3[40];
    return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), v4, v5);
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFFAC);
    v3[44] = v7;
    uint64_t v8 = type metadata accessor for ThrowingTaskGroup();
    *uint64_t v7 = v3;
    v7[1] = withThrowingTaskGroup<A, B>(of:returning:isolation:body:);
    return ThrowingTaskGroup.awaitAllRemainingTasks()(v8);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 352));
  uint64_t v2 = *(void *)(v1 + 320);
  uint64_t v3 = *(void *)(v1 + 312);
  return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_taskGroup_destroy(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  swift_taskGroup_cancelAll(*(void *)(v0 + 272));
  uint64_t v1 = (void *)swift_task_alloc(dword_1E91CFFAC);
  *(void *)(v0 + 360) = v1;
  uint64_t v2 = type metadata accessor for ThrowingTaskGroup();
  int *v1 = v0;
  v1[1] = withThrowingTaskGroup<A, B>(of:returning:isolation:body:);
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 360));
  uint64_t v2 = *(void *)(v1 + 320);
  uint64_t v3 = *(void *)(v1 + 312);
  return swift_task_switch(withThrowingTaskGroup<A, B>(of:returning:isolation:body:), v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_taskGroup_destroy(v0 + 16);
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:body:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  v6[35] = a6;
  swift_taskGroup_initialize((uint64_t)(v6 + 2), a6);
  v6[36] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v6[34] = v6 + 2;
  uint64_t v11 = (int *)((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc(a4[1]);
  v6[37] = v9;
  void *v9 = v6;
  v9[1] = withThrowingTaskGroup<A, B>(of:returning:body:);
  return ((uint64_t (*)(uint64_t, void *))v11)(a1, v6 + 34);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:body:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[37];
  uint64_t v4 = *v1;
  (*v1)[38] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_taskGroup_cancelAll(v2[34]);
    uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFFAC);
    v2[40] = (uint64_t)v5;
    uint64_t v6 = type metadata accessor for ThrowingTaskGroup();
    void *v5 = v4;
    uint64_t v7 = withThrowingTaskGroup<A, B>(of:returning:body:);
  }
  else
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFFAC);
    v2[39] = (uint64_t)v5;
    uint64_t v6 = type metadata accessor for ThrowingTaskGroup();
    void *v5 = v4;
    uint64_t v7 = withThrowingTaskGroup<A, B>(of:returning:body:);
  }
  v5[1] = v7;
  return ThrowingTaskGroup.awaitAllRemainingTasks()(v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *v0 + 16;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 312));
  swift_taskGroup_destroy(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *v0 + 16;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 320));
  swift_taskGroup_destroy(v1);
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t TaskGroup.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a1;
  v4[8] = v3;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  v4[9] = v7;
  v4[10] = v9;
  return swift_task_switch(TaskGroup.next(isolation:), v7, v9);
}

uint64_t TaskGroup.next(isolation:)()
{
  return swift_taskGroup_wait_next_throwing(*(void *)(v0 + 56), **(void **)(v0 + 64), (uint64_t)TaskGroup.next(isolation:), (uint64_t (*)(void))(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 88) = v0;
  if (v0) {
    return swift_task_switch(TaskGroup.next(isolation:), *(void *)(v1 + 72), *(void *)(v1 + 80));
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

{
  uint64_t v0;

  return MEMORY[0x1F41867D8](*(void *)(v0 + 88), "_Concurrency/TaskGroup.swift", 28, 1, 648);
}

uint64_t TaskGroup.next()(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch(TaskGroup.next(), 0, 0);
}

uint64_t TaskGroup.next()()
{
  return swift_taskGroup_wait_next_throwing(*(void *)(v0 + 56), **(void **)(v0 + 64), (uint64_t)TaskGroup.next(), (uint64_t (*)(void))(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 72) = v0;
  if (v0) {
    return swift_task_switch(TaskGroup.next(), 0, 0);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

{
  uint64_t v0;

  return MEMORY[0x1F41867D8](*(void *)(v0 + 72), "_Concurrency/TaskGroup.swift", 28, 1, 656);
}

uint64_t TaskGroup.awaitAllRemainingTasks(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *(void *)(a3 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFF94);
  v4[10] = v7;
  *uint64_t v7 = v4;
  v7[1] = TaskGroup.awaitAllRemainingTasks(isolation:);
  uint64_t v8 = v4[9];
  uint64_t v9 = v4[2];
  uint64_t v10 = v4[3];
  return TaskGroup.next(isolation:)(v8, v9, v10);
}

uint64_t TaskGroup.awaitAllRemainingTasks(isolation:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  swift_task_dealloc(*(void *)(*v0 + 80));
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  return swift_task_switch(TaskGroup.awaitAllRemainingTasks(isolation:), v5, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v0[6] - 8) + 48))(v1, 1) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[8] + 8))(v1, v0[7]);
    swift_task_dealloc(v1);
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    (*(void (**)(uint64_t, void))(v0[8] + 8))(v1, v0[7]);
    uint64_t v4 = (void *)swift_task_alloc(dword_1E91CFF94);
    v0[10] = v4;
    *uint64_t v4 = v0;
    v4[1] = TaskGroup.awaitAllRemainingTasks(isolation:);
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[2];
    uint64_t v7 = v0[3];
    return TaskGroup.next(isolation:)(v5, v6, v7);
  }
}

uint64_t ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *(void *)(a3 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFFDC);
  v4[10] = v7;
  *uint64_t v7 = v4;
  v7[1] = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  uint64_t v8 = v4[9];
  uint64_t v9 = v4[2];
  uint64_t v10 = v4[3];
  return ThrowingTaskGroup.next(isolation:)(v8, v9, v10);
}

uint64_t ThrowingTaskGroup.awaitAllRemainingTasks(isolation:)()
{
  uint64_t v3 = *v1;
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 80));
  uint64_t v4 = *(void *)(v2 + 16);
  if (v0)
  {
    MEMORY[0x192FAC3C0](v0);
    if (v4)
    {
      uint64_t v5 = *(void *)(v3 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v10 = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  }
  else
  {
    if (v4)
    {
      uint64_t v11 = *(void *)(v3 + 24);
      uint64_t v12 = swift_getObjectType();
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v12, v11);
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v10 = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  }
  return swift_task_switch(v10, v7, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[9];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v0[6] - 8) + 48))(v1, 1) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[8] + 8))(v1, v0[7]);
    swift_task_dealloc(v1);
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    (*(void (**)(uint64_t, void))(v0[8] + 8))(v1, v0[7]);
    uint64_t v4 = (void *)swift_task_alloc(dword_1E91CFFDC);
    v0[10] = v4;
    *uint64_t v4 = v0;
    v4[1] = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
    uint64_t v5 = v0[9];
    uint64_t v6 = v0[2];
    uint64_t v7 = v0[3];
    return ThrowingTaskGroup.next(isolation:)(v5, v6, v7);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = (void *)swift_task_alloc(dword_1E91CFFDC);
  v0[10] = v1;
  uint64_t *v1 = v0;
  v1[1] = ThrowingTaskGroup.awaitAllRemainingTasks(isolation:);
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return ThrowingTaskGroup.next(isolation:)(v2, v3, v4);
}

uint64_t ThrowingTaskGroup.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = v3;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  return swift_task_switch(ThrowingTaskGroup.next(isolation:), v7, v9);
}

uint64_t ThrowingTaskGroup.next(isolation:)()
{
  return swift_taskGroup_wait_next_throwing(*(void *)(v0 + 56), **(void **)(v0 + 64), (uint64_t)Task.value.getter, (uint64_t (*)(void))(v0 + 16));
}

uint64_t ThrowingTaskGroup._waitForAll()(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFFAC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return ThrowingTaskGroup.awaitAllRemainingTasks()(a1);
}

uint64_t ThrowingTaskGroup.next()(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch(ThrowingTaskGroup.next(), 0, 0);
}

uint64_t ThrowingTaskGroup.next()()
{
  return swift_taskGroup_wait_next_throwing(*(void *)(v0 + 56), **(void **)(v0 + 64), (uint64_t)ThrowingTaskGroup.next(), (uint64_t (*)(void))(v0 + 16));
}

uint64_t ThrowingTaskGroup.nextResult()(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  v3[11] = v4;
  uint64_t v5 = type metadata accessor for Optional();
  v3[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(void *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v4 - 8);
  v3[15] = v7;
  v3[16] = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(ThrowingTaskGroup.nextResult(), 0, 0);
}

uint64_t ThrowingTaskGroup.nextResult()()
{
  return swift_taskGroup_wait_next_throwing(*(void *)(v0 + 112), **(void **)(v0 + 80), (uint64_t)ThrowingTaskGroup.nextResult(), (uint64_t (*)(void))(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(void *)(v1 + 136) = v0;
  if (v0) {
    uint64_t v2 = ThrowingTaskGroup.nextResult();
  }
  else {
    uint64_t v2 = ThrowingTaskGroup.nextResult();
  }
  return swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[11];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    uint64_t v4 = v0[8];
    (*(void (**)(uint64_t, void))(v0[13] + 8))(v1, v0[12]);
    uint64_t v5 = type metadata accessor for Result();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  else
  {
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[8];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v8(v6, v1, v3);
    v8(v7, v6, v3);
    uint64_t v9 = type metadata accessor for Result();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  uint64_t v10 = v0[14];
  swift_task_dealloc(v0[16]);
  swift_task_dealloc(v10);
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[8];
  v0[7] = v0[17];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  uint64_t v2 = type metadata accessor for Result();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = v0[14];
  swift_task_dealloc(v0[16]);
  swift_task_dealloc(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t TaskGroup.makeAsyncIterator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t TaskGroup.Iterator.group.getter()
{
  return *(void *)v0;
}

uint64_t TaskGroup.Iterator.group.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*TaskGroup.Iterator.group.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t TaskGroup.Iterator.finished.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t TaskGroup.Iterator.finished.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*TaskGroup.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t TaskGroup.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = v2;
  v3[4] = *(void *)(a2 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(TaskGroup.Iterator.next(), 0, 0);
}

uint64_t TaskGroup.Iterator.next()()
{
  if (*(unsigned char *)(v0[3] + 8))
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[4] - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v0[7]);
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFF94);
    v0[8] = v3;
    *uint64_t v3 = v0;
    v3[1] = TaskGroup.Iterator.next();
    uint64_t v4 = v0[3];
    v3[7] = v0[7];
    v3[8] = v4;
    v3[9] = 0;
    v3[10] = 0;
    return swift_task_switch(TaskGroup.next(isolation:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v2;

  swift_task_dealloc(*(void *)(*(void *)v0 + 64));
  return swift_task_switch(TaskGroup.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = v0[3];
    (*(void (**)(uint64_t, void))(v0[6] + 8))(v1, v0[5]);
    *(unsigned char *)(v5 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v4, 1, 1, v2);
  }
  else
  {
    uint64_t v6 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  swift_task_dealloc(v0[7]);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t TaskGroup.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a3;
  v5[5] = v4;
  v5[2] = a1;
  v5[3] = a2;
  v5[6] = *(void *)(a4 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  v5[7] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[8] = v9;
  v5[9] = swift_task_alloc((*(void *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  v5[10] = v11;
  v5[11] = v13;
  return swift_task_switch(TaskGroup.Iterator.next(isolation:), v11, v13);
}

uint64_t TaskGroup.Iterator.next(isolation:)()
{
  if (*(unsigned char *)(v0[5] + 8))
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[6] - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v0[9]);
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFF94);
    v0[12] = v3;
    *uint64_t v3 = v0;
    v3[1] = TaskGroup.Iterator.next(isolation:);
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[4];
    uint64_t v6 = v0[3];
    return TaskGroup.next(isolation:)(v4, v6, v5);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 96));
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 80);
  return swift_task_switch(TaskGroup.Iterator.next(isolation:), v3, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = v0[2];
    (*(void (**)(uint64_t, void))(v0[8] + 8))(v1, v0[7]);
    *(unsigned char *)(v4 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v2);
  }
  else
  {
    uint64_t v6 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  swift_task_dealloc(v0[9]);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

Swift::Void __swiftcall TaskGroup.Iterator.cancel()()
{
  *(unsigned char *)(v0 + 8) = 1;
  swift_taskGroup_cancelAll(*(void *)v0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TaskGroup<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFFFC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance TaskGroup<A>.Iterator;
  return TaskGroup.Iterator.next()(a1, a2);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance TaskGroup<A>.Iterator()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sScG8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_task_alloc(dword_1E91D0004);
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return TaskGroup.Iterator.next(isolation:)(a1, a2, a3, a5);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance TaskGroup<A>@<X0>(uint64_t a1@<X8>)
{
  return TaskGroup.makeAsyncIterator()(*v1, a1);
}

uint64_t ThrowingTaskGroup.makeAsyncIterator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t ThrowingTaskGroup.Iterator.group.getter()
{
  return *(void *)v0;
}

uint64_t (*ThrowingTaskGroup.Iterator.group.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t (*ThrowingTaskGroup.Iterator.finished.modify())()
{
  return UnownedSerialExecutor.executor.modify;
}

uint64_t ThrowingTaskGroup.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(void *)(a2 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(ThrowingTaskGroup.Iterator.next(), 0, 0);
}

uint64_t ThrowingTaskGroup.Iterator.next()()
{
  if (*(unsigned char *)(v0[4] + 8))
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[5] - 8) + 56))(v0[2], 1, 1);
    swift_task_dealloc(v0[8]);
    uint64_t v1 = (uint64_t (*)(void))v0[1];
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFFDC);
    v0[9] = v3;
    *uint64_t v3 = v0;
    v3[1] = ThrowingTaskGroup.Iterator.next();
    uint64_t v4 = v0[4];
    v3[7] = v0[8];
    v3[8] = v4;
    return swift_task_switch(ThrowingTaskGroup.next(isolation:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = ThrowingTaskGroup.Iterator.next();
  }
  else {
    uint64_t v3 = ThrowingTaskGroup.Iterator.next();
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[4];
    uint64_t v5 = v0[2];
    (*(void (**)(uint64_t, void))(v0[7] + 8))(v1, v0[6]);
    *(unsigned char *)(v4 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v2);
  }
  else
  {
    uint64_t v6 = v0[2];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  swift_task_dealloc(v0[8]);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[8];
  *(unsigned char *)(v0[4] + 8) = 1;
  swift_willThrow();
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[7] = v5;
  v6[8] = a5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v10 = *(void *)(a4 + 24);
  v6[9] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[10] = v11;
  v6[11] = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[12] = *(void *)(a4 + 16);
  uint64_t v12 = type metadata accessor for Optional();
  v6[13] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[14] = v13;
  v6[15] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  v6[16] = v15;
  v6[17] = v17;
  return swift_task_switch(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_, v15, v17);
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_()
{
  if (*(unsigned char *)(v0[7] + 8))
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[12] - 8) + 56))(v0[3], 1, 1);
    uint64_t v1 = v0[11];
    swift_task_dealloc(v0[15]);
    swift_task_dealloc(v1);
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[6];
    uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFFDC);
    v0[18] = v5;
    v0[19] = *(void *)(v4 + 32);
    void *v5 = v0;
    v5[1] = _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_;
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[4];
    uint64_t v8 = v0[5];
    return ThrowingTaskGroup.next(isolation:)(v6, v7, v8);
  }
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 136);
  uint64_t v5 = *(void *)(v2 + 128);
  if (v0) {
    uint64_t v6 = _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY3_;
  }
  else {
    uint64_t v6 = _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_;
  }
  return swift_task_switch(v6, v5, v4);
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[7];
    uint64_t v5 = v0[3];
    (*(void (**)(uint64_t, void))(v0[14] + 8))(v1, v0[13]);
    *(unsigned char *)(v4 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v2);
  }
  else
  {
    uint64_t v6 = v0[3];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v6, 0, 1, v2);
  }
  uint64_t v7 = v0[11];
  swift_task_dealloc(v0[15]);
  swift_task_dealloc(v7);
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY3_()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  *(unsigned char *)(v0[7] + 8) = 1;
  v0[2] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  swift_willThrowTypedImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v3, v5);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

Swift::Void __swiftcall ThrowingTaskGroup.Iterator.cancel()()
{
  *(unsigned char *)(v0 + 8) = 1;
  swift_taskGroup_cancelAll(*(void *)v0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance ThrowingTaskGroup<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91D000C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return ThrowingTaskGroup.Iterator.next()(a1, a2);
}

uint64_t _sScg8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t v10 = *(void *)(a5 + 24);
  v5[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91D0014);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(a1, a2, a3, a5, v12);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance ThrowingTaskGroup<A, B>@<X0>(uint64_t a1@<X8>)
{
  return ThrowingTaskGroup.makeAsyncIterator()(*v1, a1);
}

uint64_t DiscardingTaskGroup.awaitAllRemainingTasks()()
{
  *(void *)(v1 + 56) = v0;
  return swift_task_switch((uint64_t (*)(void))DiscardingTaskGroup.awaitAllRemainingTasks(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(void *)(v1 + 64) = v0;
  if (v0) {
    uint64_t v2 = DiscardingTaskGroup.awaitAllRemainingTasks();
  }
  else {
    uint64_t v2 = DiscardingTaskGroup.awaitAllRemainingTasks();
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void DiscardingTaskGroup.awaitAllRemainingTasks()()
{
  swift_taskGroup_waitAll(v0 + 72, **(os_unfair_lock_s ***)(v0 + 56), 0, (uint64_t)DiscardingTaskGroup.awaitAllRemainingTasks(), (void (*)(void))(v0 + 16));
}

uint64_t withDiscardingTaskGroup<A>(returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[42] = a6;
  v7[43] = a7;
  v7[40] = a1;
  v7[41] = a5;
  uint64_t v10 = *(void *)(a7 - 8);
  v7[44] = v10;
  v7[45] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  v7[46] = v12;
  v7[47] = v14;
  return swift_task_switch(withDiscardingTaskGroup<A>(returning:isolation:body:), v12, v14);
}

uint64_t withDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  uint64_t v1 = (int *)v0[41];
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v0 + 2), v0[43]);
  v0[39] = v0 + 2;
  uint64_t v5 = (int *)((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[48] = v2;
  void *v2 = v0;
  v2[1] = withDiscardingTaskGroup<A>(returning:isolation:body:);
  uint64_t v3 = v0[45];
  return ((uint64_t (*)(uint64_t, void *))v5)(v3, v0 + 39);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(void *)(v1 + 392) = v0;
  if (v0) {
    uint64_t v2 = withDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  else {
    uint64_t v2 = withDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return swift_task_switch(withDiscardingTaskGroup<A>(returning:isolation:body:), *(void *)(v0 + 368), *(void *)(v0 + 376));
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[45];
  (*(void (**)(void, uint64_t, void))(v0[44] + 32))(v0[40], v1, v0[43]);
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;

  return swift_task_switch(withDiscardingTaskGroup<A>(returning:isolation:body:), *(void *)(v0 + 368), *(void *)(v0 + 376));
}

{
  uint64_t v0;

  return MEMORY[0x1F41867D8](*(void *)(v0 + 392), "_Concurrency/DiscardingTaskGroup.swift", 38, 1, 89);
}

void withDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void (*)(void))(*v0 + 272);
  uint64_t v3 = *v0 + 400;
  swift_task_dealloc(*(void *)(*v0 + 384));
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 312);
  swift_taskGroup_waitAll(v3, v4, 0, (uint64_t)withDiscardingTaskGroup<A>(returning:isolation:body:), v2);
}

uint64_t withDiscardingTaskGroup<A>(returning:body:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  v5[40] = a1;
  v5[41] = a5;
  uint64_t v8 = *(void *)(a5 - 8);
  v5[42] = v8;
  uint64_t v9 = swift_task_alloc((*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[43] = v9;
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v5 + 2), a5);
  v5[39] = v5 + 2;
  uint64_t v12 = (int *)((char *)a3 + *a3);
  uint64_t v10 = (void *)swift_task_alloc(a3[1]);
  v5[44] = v10;
  *uint64_t v10 = v5;
  v10[1] = withDiscardingTaskGroup<A>(returning:body:);
  return ((uint64_t (*)(uint64_t, void *))v12)(v9, v5 + 39);
}

void withDiscardingTaskGroup<A>(returning:body:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void (*)(void))(*v0 + 272);
  uint64_t v3 = *v0 + 368;
  swift_task_dealloc(*(void *)(*v0 + 352));
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 312);
  swift_taskGroup_waitAll(v3, v4, 0, (uint64_t)withDiscardingTaskGroup<A>(returning:body:), v2);
}

uint64_t withDiscardingTaskGroup<A>(returning:body:)()
{
  *(void *)(v1 + 360) = v0;
  if (v0) {
    uint64_t v2 = withDiscardingTaskGroup<A>(returning:body:);
  }
  else {
    uint64_t v2 = withDiscardingTaskGroup<A>(returning:body:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[43];
  (*(void (**)(void, uint64_t, void))(v0[42] + 32))(v0[40], v1, v0[41]);
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;

  return MEMORY[0x1F41867D8](*(void *)(v0 + 360), "_Concurrency/DiscardingTaskGroup.swift", 38, 1, 121);
}

uint64_t ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:)(uint64_t a1)
{
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = v1;
  return swift_task_switch((uint64_t (*)(void))ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:), 0, 0);
}

void ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:)()
{
  swift_taskGroup_waitAll(v0 + 80, **(os_unfair_lock_s ***)(v0 + 64), *(void *)(v0 + 56), (uint64_t)ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:), (void (*)(void))(v0 + 16));
}

uint64_t ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:)()
{
  *(void *)(v1 + 72) = v0;
  if (v0) {
    uint64_t v2 = ThrowingDiscardingTaskGroup.awaitAllRemainingTasks(bodyError:);
  }
  else {
    uint64_t v2 = DiscardingTaskGroup.awaitAllRemainingTasks();
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[47] = a6;
  v7[48] = a7;
  v7[45] = a1;
  v7[46] = a5;
  uint64_t v10 = *(void *)(a7 - 8);
  v7[49] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[50] = swift_task_alloc(v11);
  v7[51] = swift_task_alloc(v11);
  if (a3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  v7[52] = v13;
  v7[53] = v15;
  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), v13, v15);
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  uint64_t v1 = (int *)v0[46];
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v0 + 2), v0[48]);
  v0[39] = v0 + 2;
  uint64_t v5 = (int *)((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[54] = v2;
  void *v2 = v0;
  v2[1] = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  uint64_t v3 = v0[50];
  return ((uint64_t (*)(uint64_t, void *))v5)(v3, v0 + 39);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)();
  uint64_t v8;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 432);
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 424);
  uint64_t v5 = *(void *)(v2 + 416);
  if (v0) {
    uint64_t v6 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  else {
    uint64_t v6 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  return swift_task_switch((uint64_t (*)(void))v6, v5, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;

  v1[58] = v0;
  if (v0)
  {
    (*(void (**)(void, void))(v1[49] + 8))(v1[51], v1[48]);
    uint64_t v2 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  else
  {
    uint64_t v2 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(void *)(v0 + 416), *(void *)(v0 + 424));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 408);
  (*(void (**)(void, uint64_t, void))(v0 + 448))(*(void *)(v0 + 360), v1, *(void *)(v0 + 384));
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(void *)(v0 + 416), *(void *)(v0 + 424));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  *(void *)(v1 + 472) = v0;
  uint64_t v2 = *(void *)(v1 + 440);
  MEMORY[0x192FAC3C0](v2);
  if (v0)
  {
    MEMORY[0x192FAC3C0](v2);
    uint64_t v3 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  else
  {
    uint64_t v3 = withThrowingDiscardingTaskGroup<A>(returning:isolation:body:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(void *)(v0 + 416), *(void *)(v0 + 424));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_willThrow();
  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;

  return swift_task_switch(withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), *(void *)(v0 + 416), *(void *)(v0 + 424));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = v0[50];
  uint64_t v1 = v0[51];
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void withThrowingDiscardingTaskGroup<A>(returning:isolation:body:)()
{
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 448) = v5;
  *(void *)(v0 + 456) = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v5(v1, v2, v3);
  uint64_t v6 = *(os_unfair_lock_s **)(v0 + 312);
  swift_taskGroup_waitAll(v0 + 481, v6, 0, (uint64_t)withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), (void (*)(void))(v0 + 320));
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 440);
  swift_taskGroup_cancelAll(*(void *)(v0 + 312));
  MEMORY[0x192FAC3D0](v1);
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 312);
  swift_taskGroup_waitAll(v0 + 480, v2, v1, (uint64_t)withThrowingDiscardingTaskGroup<A>(returning:isolation:body:), (void (*)(void))(v0 + 272));
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:body:)(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  v5[45] = a1;
  v5[46] = a5;
  uint64_t v8 = *(void *)(a5 - 8);
  v5[47] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = swift_task_alloc(v9);
  v5[48] = v10;
  v5[49] = swift_task_alloc(v9);
  swift_taskGroup_initializeWithFlags(256, (uint64_t)(v5 + 2), a5);
  v5[39] = v5 + 2;
  uint64_t v13 = (int *)((char *)a3 + *a3);
  unint64_t v11 = (void *)swift_task_alloc(a3[1]);
  v5[50] = v11;
  *unint64_t v11 = v5;
  v11[1] = withThrowingDiscardingTaskGroup<A>(returning:body:);
  return ((uint64_t (*)(uint64_t, void *))v13)(v10, v5 + 39);
}

void withThrowingDiscardingTaskGroup<A>(returning:body:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[50];
  (*v1)[51] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_taskGroup_cancelAll(v2[39]);
    MEMORY[0x192FAC3D0](v0);
    uint64_t v4 = (os_unfair_lock_s *)v2[39];
    uint64_t v5 = withThrowingDiscardingTaskGroup<A>(returning:body:);
    uint64_t v6 = (uint64_t)(v2 + 56);
    uint64_t v7 = v0;
    uint64_t v8 = (void (*)(void))(v2 + 34);
  }
  else
  {
    uint64_t v10 = v2[48];
    uint64_t v9 = v2[49];
    uint64_t v11 = v2[46];
    uint64_t v12 = v2[47];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v2[52] = (uint64_t)v13;
    v2[53] = (v12 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v13(v9, v10, v11);
    uint64_t v4 = (os_unfair_lock_s *)v2[39];
    uint64_t v5 = withThrowingDiscardingTaskGroup<A>(returning:body:);
    uint64_t v6 = (uint64_t)v2 + 449;
    uint64_t v7 = 0;
    uint64_t v8 = (void (*)(void))(v2 + 40);
  }
  swift_taskGroup_waitAll(v6, v4, v7, (uint64_t)v5, v8);
}

uint64_t withThrowingDiscardingTaskGroup<A>(returning:body:)()
{
  v1[54] = v0;
  if (v0)
  {
    (*(void (**)(void, void))(v1[47] + 8))(v1[49], v1[46]);
    uint64_t v2 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  else
  {
    uint64_t v2 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 392);
  (*(void (**)(void, uint64_t, void))(v0 + 416))(*(void *)(v0 + 360), v1, *(void *)(v0 + 368));
  swift_taskGroup_destroy(v0 + 16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  *(void *)(v1 + 440) = v0;
  uint64_t v2 = *(void *)(v1 + 408);
  MEMORY[0x192FAC3C0](v2);
  if (v0)
  {
    MEMORY[0x192FAC3C0](v2);
    uint64_t v3 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  else
  {
    uint64_t v3 = withThrowingDiscardingTaskGroup<A>(returning:body:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_willThrow();
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  swift_taskGroup_destroy((uint64_t)(v0 + 2));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t TaskLocal.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 88), a1);
  return v2;
}

uint64_t TaskLocal.init(wrappedValue:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 88), a1);
  return v1;
}

uint64_t TaskLocal.get()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = swift_task_localValueGet(v1);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (void *)(v1 + *(void *)(*(void *)v1 + 88));
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, void *))(*(void *)(*(void *)(v3 + 80) - 8) + 16);

  return v6(a1, v5);
}

uint64_t TaskLocal.withValue<A>(_:operation:isolation:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[11] = v21;
  v9[12] = v8;
  v9[9] = a8;
  v9[10] = v20;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  uint64_t v12 = *(void *)(*(void *)v8 + 80);
  v9[13] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v9[14] = v13;
  v9[15] = swift_task_alloc((*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(ObjectType, a6);
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  v9[16] = v15;
  v9[17] = v17;
  return swift_task_switch(TaskLocal.withValue<A>(_:operation:isolation:file:line:), v15, v17);
}

uint64_t TaskLocal.withValue<A>(_:operation:isolation:file:line:)()
{
  (*(void (**)(void, void, void))(v0[14] + 16))(v0[15], v0[3], v0[13]);
  uint64_t v1 = (void *)swift_task_alloc(dword_1E91D0054);
  v0[18] = v1;
  void *v1 = v0;
  v1[1] = TaskLocal.withValue<A>(_:operation:isolation:file:line:);
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  return TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:)(v7, v2, v5, v6, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);
  uint64_t v8;

  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  uint64_t v3 = *(void **)v1;
  v3[19] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = v3[16];
    uint64_t v5 = v3[17];
    return swift_task_switch(TaskLocal.withValue<A>(_:operation:isolation:file:line:), v4, v5);
  }
  else
  {
    swift_task_dealloc(v3[15]);
    uint64_t v7 = (uint64_t (*)(void))v3[1];
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc(*(void *)(v0 + 120));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[5] = a4;
  v7[6] = v6;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v7[7] = *v6;
  if (a5)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(ObjectType, a6);
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  v7[8] = v10;
  v7[9] = v12;
  return swift_task_switch(TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:), v10, v12);
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:)()
{
  uint64_t v1 = (int *)v0[4];
  swift_task_localValuePush(v0[6], v0[3], *(void *)(v0[7] + 80));
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc(v1[1]);
  v0[10] = v2;
  void *v2 = v0;
  v2[1] = TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:);
  uint64_t v3 = v0[2];
  return v5(v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v5 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v6 = TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:);
  }
  else {
    uint64_t v6 = TaskLocal.withValueImpl<A>(_:operation:isolation:file:line:);
  }
  return swift_task_switch(v6, v5, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_localValuePop();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_localValuePop();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TaskLocal.withValue<A>(_:operation:file:line:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)v3 + 80) - 8);
  uint64_t v8 = swift_task_alloc((*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 16) = v8;
  (*(void (**)(void))(v7 + 16))();
  uint64_t v9 = (void *)swift_task_alloc(dword_1E91D0064);
  *(void *)(v4 + 24) = v9;
  void *v9 = v4;
  v9[1] = withCheckedThrowingContinuation<A>(function:_:);
  return TaskLocal.withValueImpl<A>(_:operation:file:line:)(a1, v8, a3);
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:file:line:)(uint64_t a1, uint64_t a2, int *a3)
{
  swift_task_localValuePush(v3, a2, *(void *)(*(void *)v3 + 80));
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  uint64_t v7 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v4 + 16) = v7;
  *uint64_t v7 = v4;
  v7[1] = TaskLocal.withValueImpl<A>(_:operation:file:line:);
  return v9(a1);
}

uint64_t TaskLocal.withValueImpl<A>(_:operation:file:line:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  swift_task_localValuePop();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void TaskLocal.withValue<A>(_:operation:file:line:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(*(void *)v2 + 80);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v9 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)v9 - v5);
  uint64_t v8 = swift_task_localValuePush(v2, (uint64_t)v6, v4);
  a2(v8);
  swift_task_localValuePop();
}

uint64_t TaskLocal.projectedValue.getter()
{
  protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance DispatchQueueShim();

  return swift_retain();
}

uint64_t key path getter for TaskLocal.projectedValue : <A>TaskLocal<A>@<X0>(uint64_t *a1@<X8>)
{
  *a1 = protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance DispatchQueueShim();

  return swift_retain();
}

void key path setter for TaskLocal.projectedValue : <A>TaskLocal<A>()
{
}

void (*TaskLocal.projectedValue.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return TaskLocal.projectedValue.modify;
}

void TaskLocal.projectedValue.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_retain();
    specialized TaskLocal.projectedValue.setter();
  }
  specialized TaskLocal.projectedValue.setter();
}

uint64_t TaskLocal.description.getter()
{
  _StringGuts.grow(_:)(20);
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x746C756166656428;
  v1._object = (void *)0xEF203A65756C6156;
  String.append(_:)(v1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskLocal<A>()
{
  return TaskLocal.description.getter();
}

Swift::Void __swiftcall _checkIllegalTaskLocalBindingWithinWithTaskGroup(file:line:)(Swift::String file, Swift::UInt line)
{
  object = file._object;
  uint64_t countAndFlagsBits = file._countAndFlagsBits;
  uint64_t v5 = swift_task_hasTaskGroupStatusRecord();
  if (v5)
  {
    MEMORY[0x1F4188790](v5);
    v6[2] = countAndFlagsBits;
    v6[3] = object;
    v6[4] = line;
    specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in _checkIllegalTaskLocalBindingWithinWithTaskGroup(file:line:), (uint64_t)v6, countAndFlagsBits, (uint64_t)object);
  }
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000)) {
    return _StringGuts._slowWithCString<A>(_:)();
  }
  MEMORY[0x1F4188790](a1);
  if ((v5 & 0x2000000000000000) != 0)
  {
    v10[0] = v4;
    v10[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    return v6(v10);
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0)
    {
      uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v7 = _StringObject.sharedUTF8.getter();
    }
    return _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n(v7, v8, (uint64_t (*)(uint64_t, uint64_t, void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
  }
}

uint64_t static Task<>.sleep(_:)(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return swift_task_switch(static Task<>.sleep(_:), 0, 0);
}

uint64_t static Task<>.sleep(_:)()
{
  uint64_t v7 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[3] = withCheckedContinuation<A>(isolation:function:_:);
  uint64_t v3 = swift_continuation_init(v0 + 2, 0);
  static Task<>.currentPriority.getter(&v6);
  NullaryContinuationJob = (unsigned char *)swift_task_createNullaryContinuationJob(v6, (uint64_t)v3);
  swift_task_enqueueGlobalWithDelay(v2, NullaryContinuationJob);
  return swift_continuation_await(v1);
}

uint64_t static Task<>.sleep(nanoseconds:)(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

uint64_t static Task<>.sleep(nanoseconds:)()
{
  uint64_t v1 = (unint64_t *)swift_slowAlloc();
  *(void *)(v0 + 88) = v1;
  atomic_store(0, v1);
  uint64_t v2 = swift_task_alloc(32);
  *(void *)(v0 + 96) = v2;
  *(void *)(v2 + 16) = v1;
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 104) = swift_task_addCancellationHandler((uint64_t)partial apply for closure #2 in static Task<>.sleep(nanoseconds:), *(void *)(v0 + 96));
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  swift *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char *v11;
  uint64_t v13;

  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(unint64_t **)(v0 + 88);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = static Task<>.sleep(nanoseconds:);
  uint64_t v3 = swift_continuation_init((void *)(v0 + 16), 1uLL);
  uint64_t v4 = atomic_load(v2);
  uint64_t v5 = v4 & 3;
  if ((v4 & 3) != 0)
  {
LABEL_5:
    if (v5 != 3)
    {
      while (1)
      {
LABEL_11:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    swift_continuation_throwingResume(v3);
  }
  else
  {
    while (1)
    {
      if (v4 > 3) {
        goto LABEL_11;
      }
      unsigned __int8 v6 = 0;
      atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(v0 + 88), (unint64_t *)&v6, (unint64_t)v3);
      if (!v6) {
        break;
      }
      uint64_t v4 = atomic_load(*(unint64_t **)(v0 + 88));
      uint64_t v5 = v4 & 3;
      if ((v4 & 3) != 0) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = v0 + 80;
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v9 + 8);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v7;
    uint64_t v11 = (unsigned char *)swift_task_create(0, 0, MEMORY[0x1E4FBC848] + 8, (int *)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:), v10);
    swift_task_enqueueGlobalWithDelay(v8, v11);
  }
  return swift_continuation_await(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 112) = v1;
  if (v1)
  {
    swift_willThrow();
    uint64_t v2 = static Task<>.sleep(nanoseconds:);
  }
  else
  {
    uint64_t v2 = static Task<>.sleep(nanoseconds:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_removeCancellationHandler(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  uint64_t (*v3)(void);
  uint64_t v4;

  uint64_t v1 = atomic_load(*(unint64_t **)(v0 + 88));
  switch(v1 & 3)
  {
    case 1:
      MEMORY[0x192FAC5A0](*(void *)(v0 + 88), -1, -1);
      uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_5;
    case 3:
      MEMORY[0x192FAC5A0](*(void *)(v0 + 88), -1, -1);
      lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
      swift_allocError();
      swift_willThrow();
      swift_willThrow();
      uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
      uint64_t result = v3();
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_removeCancellationHandler(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch(static Task<>.sleep(nanoseconds:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:)()
{
  specialized static Task<>.onSleepWake(_:)(*(unint64_t **)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AsyncStream._Storage.State.init(limit:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  uint64_t v5 = Array.init()();
  uint64_t result = _Deque._Storage.init()();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

uint64_t AsyncStream._Storage.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void (**)(char *))(v0 + 48);
  if (v2)
  {
    char v5 = 1;
    swift_retain();
    v2(&v5);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v2);
    uint64_t v3 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_release();
  swift_bridgeObjectRelease();
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v3);
  return v1;
}

uint64_t AsyncStream._Storage.__deallocating_deinit()
{
  AsyncStream._Storage.deinit();

  return swift_deallocClassInstance();
}

uint64_t AsyncStream._Storage.getOnTermination()()
{
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + 72));
  uint64_t v1 = *(void *)(v0 + 48);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0 + 72));
  return v1;
}

uint64_t AsyncStream._Storage.setOnTermination(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)&v2->_os_unfair_lock_opaque;
  _swift_async_stream_lock_lock(v2 + 18);
  uint64_t v6 = *(void *)&v2[12]._os_unfair_lock_opaque;
  uint64_t v7 = *(void *)&v2[14]._os_unfair_lock_opaque;
  if (v6)
  {
    uint64_t v8 = (void *)swift_allocObject();
    v8[2] = *(void *)(v5 + 80);
    v8[3] = v6;
    v8[4] = v7;
    uint64_t v9 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> ()partial apply;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  v15[0] = (uint64_t)v9;
  v15[1] = (uint64_t)v8;
  MEMORY[0x1F4188790](v8);
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v6);
  type metadata accessor for AsyncStream.Continuation.Termination();
  uint64_t v10 = MEMORY[0x1E4FBC848] + 8;
  swift_getFunctionTypeMetadata1();
  uint64_t v11 = type metadata accessor for Optional();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in AsyncStream._Storage.setOnTermination(_:), (uint64_t)v14, v11, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v12);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v15[0]);
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

void AsyncStream._Storage.cancel@Sendable ()()
{
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + 72));
  uint64_t v1 = *(void (**)(char *))(v0 + 48);
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0 + 72));
  if (v1)
  {
    char v2 = 1;
    v1(&v2);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v1);
  }

  AsyncStream._Storage.finish()();
}

Swift::Void __swiftcall AsyncStream._Storage.finish()()
{
  uint64_t v1 = v0;
  char v2 = (os_unfair_lock_s *)(v0 + 72);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v24 = (char *)&v19 - v7;
  uint64_t v23 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v19 - v8;
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + 72));
  uint64_t v10 = *(void *)(v0 + 16);
  uint64_t v11 = *(void (**)(uint64_t *))(v0 + 48);
  uint64_t v25 = *(void *)(v0 + 56);
  uint64_t v26 = v10;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 64) = 1;
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  if (v27)
  {
    uint64_t v20 = (swift::AsyncTask *)v27;
    uint64_t v21 = v5;
    uint64_t v22 = v4;
    uint64_t v12 = *(void *)(v0 + 24);
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v18);
    uint64_t v13 = v27;
    swift_release();
    if (v13 >= 1)
    {
      swift_getWitnessTable();
      RangeReplaceableCollection.removeFirst()();
      uint64_t v14 = type metadata accessor for _Deque();
      _Deque.removeFirst()(v14);
      _swift_async_stream_lock_unlock(v2);
      if (v11)
      {
        LOBYTE(v27) = 0;
        v11(&v27);
        _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v11);
      }
      uint64_t v16 = v23;
      uint64_t v15 = v24;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v24, v9, v3);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v3);
LABEL_10:
      uint64_t v17 = v20;
      (*(void (**)(void, char *, uint64_t))(v21 + 32))(*(void *)(*((void *)v20 + 8) + 40), v15, v22);
      swift_continuation_resume(v17);
      return;
    }
    if (*(unsigned char *)(v1 + 64) == 1)
    {
      swift_getWitnessTable();
      RangeReplaceableCollection.removeFirst()();
      _swift_async_stream_lock_unlock(v2);
      if (v11)
      {
        LOBYTE(v27) = 0;
        v11(&v27);
        _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v11);
      }
      uint64_t v15 = v24;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, 1, 1, v3);
      goto LABEL_10;
    }
  }
  _swift_async_stream_lock_unlock(v2);
  if (v11)
  {
    LOBYTE(v27) = 0;
    v11(&v27);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v11);
  }
}

void specialized AsyncStream._Storage.yield(_:)(uint64_t a1@<X8>)
{
  uint64_t v3 = (os_unfair_lock_s *)(v1 + 72);
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v1 + 72));
  uint64_t v4 = (uint64_t *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  unsigned int v6 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v7 = *(void *)(*(void *)(v1 + 24) + 24);
  if (*(void *)(*(void *)(v1 + 16) + 16))
  {
    uint64_t v8 = (swift::AsyncTask *)specialized RangeReplaceableCollection.removeFirst()();
    if (v7 <= 0)
    {
      if (*(unsigned char *)(v1 + 64))
      {
        uint64_t v36 = 0;
        _swift_async_stream_lock_unlock(v3);
        char v34 = 1;
        outlined init with take of ()?((uint64_t)&v34, *(void *)(*((void *)v8 + 8) + 40));
        swift_continuation_resume(v8);
        char v9 = 2;
      }
      else
      {
        if (v6 > 1) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v5;
        }
        _swift_async_stream_lock_unlock(v3);
        char v35 = 0;
        outlined init with take of ()?((uint64_t)&v35, *(void *)(*((void *)v8 + 8) + 40));
        swift_continuation_resume(v8);
        char v9 = 0;
      }
      goto LABEL_64;
    }
    if (*(unsigned char *)(v1 + 64))
    {
      uint64_t v36 = 0;
      char v9 = 2;
LABEL_54:
      specialized _Deque.removeFirst()();
      _swift_async_stream_lock_unlock(v3);
      char v33 = 0;
      outlined init with take of ()?((uint64_t)&v33, *(void *)(*((void *)v8 + 8) + 40));
      swift_continuation_resume(v8);
LABEL_64:
      *(void *)a1 = v36;
      *(unsigned char *)(a1 + 8) = v9;
      return;
    }
    if (v6)
    {
      if (v6 != 1)
      {
        uint64_t v18 = *(void *)(*v4 + 24);
        uint64_t v19 = v18 + 1;
        if (!__OFADD__(v18, 1))
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v21 = *v4;
          if (*(void *)(*v4 + 16) < v19 || (isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v19, 0);
            uint64_t v21 = *v4;
          }
          specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v21 + 16));
          char v9 = 0;
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_54;
        }
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (v7 < v5)
      {
        uint64_t v10 = *(void *)(*v4 + 24);
        uint64_t v11 = v10 + 1;
        if (!__OFADD__(v10, 1))
        {
LABEL_27:
          char v16 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v17 = *v4;
          if (*(void *)(*v4 + 16) < v11 || (v16 & 1) == 0)
          {
            specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v11, 0);
            uint64_t v17 = *v4;
          }
          specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v17 + 16));
          char v9 = 0;
          uint64_t v36 = v5 + ~v7;
          goto LABEL_54;
        }
        __break(1u);
        goto LABEL_15;
      }
      specialized _Deque.removeFirst()();
      uint64_t v25 = *(void *)(*v4 + 24);
      uint64_t v26 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      char v27 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = *v4;
      if (*(void *)(*v4 + 16) < v26 || (v27 & 1) == 0)
      {
        specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v26, 0);
        uint64_t v28 = *v4;
      }
      specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v28 + 16));
    }
    else
    {
      if (v7 < v5)
      {
        uint64_t v15 = *(void *)(*v4 + 24);
        uint64_t v11 = v15 + 1;
        if (!__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        goto LABEL_67;
      }
      uint64_t v36 = 0;
    }
    char v9 = 1;
    goto LABEL_54;
  }
  if (*(unsigned char *)(v1 + 64))
  {
    uint64_t v36 = 0;
    char v9 = 2;
LABEL_63:
    _swift_async_stream_lock_unlock(v3);
    goto LABEL_64;
  }
LABEL_15:
  if (!v6)
  {
    if (v7 >= v5)
    {
LABEL_61:
      uint64_t v36 = 0;
LABEL_62:
      char v9 = 1;
      goto LABEL_63;
    }
    uint64_t v22 = v7 + 1;
    if (__OFSUB__(v5, v7 + 1))
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    uint64_t v36 = v5 - (v7 + 1);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v4;
    if (*(void *)(*v4 + 16) <= v7) {
      goto LABEL_43;
    }
LABEL_42:
    if (v23)
    {
LABEL_44:
      specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v24 + 16));
      char v9 = 0;
      goto LABEL_63;
    }
LABEL_43:
    specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v22, 0);
    uint64_t v24 = *v4;
    goto LABEL_44;
  }
  if (v6 != 1)
  {
    uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v22 = v7 + 1;
    if (!__OFADD__(v7, 1))
    {
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *v4;
      if (*(void *)(*v4 + 16) < v22) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    goto LABEL_66;
  }
  if (v7 < v5)
  {
    uint64_t v12 = v7 + 1;
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v4;
    if (*(void *)(*v4 + 16) <= v7 || (v13 & 1) == 0)
    {
      specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v7 + 1, 0);
      uint64_t v14 = *v4;
    }
    specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v14 + 16));
    if (!__OFSUB__(v5, v12))
    {
      char v9 = 0;
      uint64_t v36 = v5 - v12;
      goto LABEL_63;
    }
    goto LABEL_69;
  }
  if (v7 < 1) {
    goto LABEL_61;
  }
  specialized _Deque.removeFirst()();
  uint64_t v29 = *(void *)(*v4 + 24);
  uint64_t v30 = v29 + 1;
  if (!__OFADD__(v29, 1))
  {
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v4;
    if (*(void *)(*v4 + 16) < v30 || (v31 & 1) == 0)
    {
      specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(v30, 0);
      uint64_t v32 = *v4;
    }
    specialized _Deque._UnsafeHandle.uncheckedAppend(_:)((uint64_t *)(v32 + 16));
    goto LABEL_62;
  }
LABEL_71:
  __break(1u);
}

void AsyncStream._Storage.yield(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v50 = a1;
  uint64_t v48 = a2;
  uint64_t v4 = *(void *)(*(void *)v2 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v44 = (char *)&v41 - v7;
  uint64_t v8 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v42 = (char *)&v41 - v9;
  os_unfair_lock_t v49 = (os_unfair_lock_t)(v2 + 72);
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v2 + 72));
  uint64_t v43 = *(void *)(v2 + 32);
  unsigned int v10 = *(unsigned __int8 *)(v2 + 40);
  uint64_t v11 = v2 + 24;
  uint64_t v12 = *(void *)(v2 + 24);
  uint64_t v47 = v11;
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v40);
  uint64_t v13 = (uint64_t)v51;
  swift_release();
  uint64_t v51 = *(swift::AsyncTask **)(v3 + 16);
  uint64_t v46 = v5;
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_getWitnessTable();
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    uint64_t v14 = v51;
    if (v13 < 1)
    {
      if (*(unsigned char *)(v3 + 64))
      {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v50, v4);
        type metadata accessor for AsyncStream.Continuation.YieldResult();
        swift_storeEnumTagMultiPayload();
        _swift_async_stream_lock_unlock(v49);
        uint64_t v20 = v44;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v44, 1, 1, v4);
      }
      else
      {
        if (v10 > 1) {
          uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v26 = v43;
        }
        uint64_t *v48 = v26;
        type metadata accessor for AsyncStream.Continuation.YieldResult();
        swift_storeEnumTagMultiPayload();
        _swift_async_stream_lock_unlock(v49);
        uint64_t v20 = v44;
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v44, v50, v4);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v4);
      }
      goto LABEL_39;
    }
    uint64_t v15 = v8;
    if (*(unsigned char *)(v3 + 64))
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v50, v4);
      type metadata accessor for AsyncStream.Continuation.YieldResult();
LABEL_8:
      swift_storeEnumTagMultiPayload();
LABEL_33:
      uint64_t v35 = type metadata accessor for _Deque();
      uint64_t v36 = v42;
      _Deque.removeFirst()(v35);
      _swift_async_stream_lock_unlock(v49);
      uint64_t v20 = v44;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v44, v36, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v4);
LABEL_39:
      (*(void (**)(void, char *, uint64_t))(v45 + 32))(*(void *)(*((void *)v14 + 8) + 40), v20, v46);
      swift_continuation_resume(v14);
      return;
    }
    if (v10)
    {
      if (v10 == 1)
      {
        uint64_t v21 = type metadata accessor for _Deque();
        uint64_t v22 = v21;
        uint64_t v23 = v43;
        if (v13 >= v43)
        {
          _Deque.removeFirst()(v21);
          type metadata accessor for AsyncStream.Continuation.YieldResult();
          swift_storeEnumTagMultiPayload();
          uint64_t v39 = v50;
          _Deque.append(_:)(v50, v22);
          (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v39, v4);
          goto LABEL_33;
        }
        uint64_t v24 = v50;
        _Deque.append(_:)(v50, v21);
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v24, v4);
        uint64_t v25 = v23 + ~v13;
      }
      else
      {
        uint64_t v33 = type metadata accessor for _Deque();
        uint64_t v34 = v50;
        _Deque.append(_:)(v50, v33);
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v34, v4);
        uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v30 = v43;
      if (v13 >= v43)
      {
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 32))(v48, v50, v4);
        type metadata accessor for AsyncStream.Continuation.YieldResult();
        goto LABEL_8;
      }
      uint64_t v31 = type metadata accessor for _Deque();
      uint64_t v32 = v50;
      _Deque.append(_:)(v50, v31);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v32, v4);
      uint64_t v25 = v30 + ~v13;
    }
    uint64_t *v48 = v25;
    type metadata accessor for AsyncStream.Continuation.YieldResult();
    swift_storeEnumTagMultiPayload();
    goto LABEL_33;
  }
  if (*(unsigned char *)(v3 + 64))
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v50, v4);
    type metadata accessor for AsyncStream.Continuation.YieldResult();
LABEL_4:
    swift_storeEnumTagMultiPayload();
LABEL_28:
    _swift_async_stream_lock_unlock(v49);
    return;
  }
  uint64_t v16 = v8;
  if (!v10)
  {
    if (v13 >= v43)
    {
LABEL_36:
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 32))(v48, v50, v4);
      type metadata accessor for AsyncStream.Continuation.YieldResult();
      goto LABEL_4;
    }
    uint64_t v27 = v43 - (v13 + 1);
    if (!__OFSUB__(v43, v13 + 1))
    {
LABEL_27:
      uint64_t *v48 = v27;
      type metadata accessor for AsyncStream.Continuation.YieldResult();
      swift_storeEnumTagMultiPayload();
      uint64_t v28 = type metadata accessor for _Deque();
      uint64_t v29 = v50;
      _Deque.append(_:)(v50, v28);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, v4);
      goto LABEL_28;
    }
    __break(1u);
LABEL_26:
    uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_27;
  }
  if (v10 != 1) {
    goto LABEL_26;
  }
  uint64_t v17 = v43;
  if (v13 >= v43)
  {
    if (v13 >= 1)
    {
      uint64_t v37 = type metadata accessor for _Deque();
      _Deque.removeFirst()(v37);
      type metadata accessor for AsyncStream.Continuation.YieldResult();
      swift_storeEnumTagMultiPayload();
      uint64_t v38 = v50;
      _Deque.append(_:)(v50, v37);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v38, v4);
      goto LABEL_28;
    }
    goto LABEL_36;
  }
  uint64_t v18 = type metadata accessor for _Deque();
  uint64_t v19 = v50;
  _Deque.append(_:)(v50, v18);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v4);
  if (!__OFSUB__(v17, v13 + 1))
  {
    uint64_t *v48 = v17 - (v13 + 1);
    type metadata accessor for AsyncStream.Continuation.YieldResult();
    goto LABEL_4;
  }
  __break(1u);
}

uint64_t _Deque.count.getter(uint64_t a1, uint64_t a2)
{
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v3);
  return v4;
}

uint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  if (*(void *)(*(void *)v0 + 16))
  {
    uint64_t v1 = *(void *)(*(void *)v0 + 32);
    specialized RangeReplaceableCollection.removeFirst(_:)(1uLL);
    return v1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _Deque.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v9);
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v11 + 1, 0);
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = v4;
    uint64_t v10 = a1;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.append(_:), (uint64_t)&v8, v7, v4, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

uint64_t specialized _Deque.removeFirst()()
{
  if (!*(void *)(*v0 + 24))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_15;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *v0;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v3 = *v0;
    return specialized _Deque._UnsafeHandle.uncheckedRemoveFirst()((uint64_t *)(v3 + 16));
  }
  uint64_t v4 = *(void *)(v2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  uint64_t v3 = swift_allocObject();
  long long v5 = *(_OWORD *)(v2 + 24);
  *(void *)(v3 + 16) = v4;
  uint64_t v6 = (uint64_t *)(v3 + 16);
  *(_OWORD *)(v3 + 24) = v5;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v7 < 0) {
    goto LABEL_15;
  }
  if (v7 != 16)
  {
    _swift_getObjCClassInstanceExtents();
    if ((v8 & 0x8000000000000000) == 0)
    {
      if (v8 != 40) {
        goto LABEL_16;
      }
      goto LABEL_8;
    }
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_16;
  }
LABEL_8:
  if (_swift_objcClassUsesNativeSwiftReferenceCounting())
  {
    if (*(uint64_t *)(v2 + 24) >= 1)
    {
      specialized _Deque._UnsafeHandle.segments()((void *)(v2 + 16), v2 + 40, (uint64_t)v10);
      specialized _Deque._UnsafeHandle.initialize(at:from:)(*(void *)(v2 + 32), v10[0], v10[1], v6, v3 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v11, (uint64_t)v12, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      if ((v14 & 1) == 0) {
        specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], v6, v3 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
      }
    }
    swift_release();
    uint64_t *v0 = v3;
    return specialized _Deque._UnsafeHandle.uncheckedRemoveFirst()((uint64_t *)(v3 + 16));
  }
LABEL_16:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque.removeFirst()(uint64_t a1)
{
  v7[4] = *v1;
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1F4188790](v4);
    v7[2] = v3;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeFirst(), (uint64_t)v7, v5, v3, v3, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

void AsyncStream._Storage.next(_:)(swift::AsyncTask *a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v21 = (char *)&v21 - v9;
  os_unfair_lock_t v22 = (os_unfair_lock_t)(v1 + 72);
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v1 + 72));
  uint64_t v25 = a1;
  uint64_t v10 = MEMORY[0x1E4FBC248];
  uint64_t v11 = MEMORY[0x1E4FBC278];
  uint64_t v24 = v4;
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  Array.append(_:)();
  uint64_t v12 = *(void *)(v1 + 24);
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, v3, v10, MEMORY[0x1E4FBB550], v11, v20);
  uint64_t v13 = (uint64_t)v25;
  swift_release();
  if (v13 >= 1)
  {
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    char v14 = v25;
    uint64_t v15 = type metadata accessor for _Deque();
    uint64_t v16 = v21;
    _Deque.removeFirst()(v15);
    _swift_async_stream_lock_unlock(v22);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v7, v16, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v3);
    (*(void (**)(void, char *, uint64_t))(v23 + 32))(*(void *)(*((void *)v14 + 8) + 40), v7, v24);
LABEL_5:
    swift_continuation_resume(v14);
    return;
  }
  uint64_t v18 = v22;
  uint64_t v17 = v23;
  uint64_t v19 = v24;
  if (*(unsigned char *)(v1 + 64) == 1)
  {
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    char v14 = v25;
    _swift_async_stream_lock_unlock(v18);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, 1, 1, v3);
    (*(void (**)(void, char *, uint64_t))(v17 + 32))(*(void *)(*((void *)v14 + 8) + 40), v7, v19);
    goto LABEL_5;
  }
  _swift_async_stream_lock_unlock(v22);
}

uint64_t AsyncStream._Storage.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(AsyncStream._Storage.next(), 0, 0);
}

uint64_t AsyncStream._Storage.next()()
{
  uint64_t v1 = v0[3];
  v0[5] = v1;
  swift_retain();
  uint64_t v2 = swift_task_alloc(32);
  v0[6] = v2;
  *(void *)(v2 + 16) = partial apply for implicit closure #2 in implicit closure #1 in AsyncStream._Storage.next();
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFF84);
  v0[7] = v3;
  type metadata accessor for Optional();
  *uint64_t v3 = v0;
  v3[1] = AsyncStream._Storage.next();
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  v3[5] = partial apply for closure #2 in AsyncStream._Storage.next();
  v3[6] = v2;
  v3[3] = &async function pointer to partial apply for closure #1 in AsyncStream._Storage.next();
  v3[4] = v4;
  v3[2] = v5;
  v3[7] = 0;
  v3[8] = 0;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *(void *)(*v0 + 48);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 56));
  swift_release();
  swift_task_dealloc(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t closure #1 in AsyncStream._Storage.next()(uint64_t a1, void *a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = *a2;
  return swift_task_switch(closure #1 in AsyncStream._Storage.next(), 0, 0);
}

uint64_t closure #1 in AsyncStream._Storage.next()()
{
  uint64_t v6 = (char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeContinuation<A>(isolation:_:);
  uint64_t v1 = (void *)swift_task_alloc(unk_1E91D03AC);
  v0[5] = v1;
  uint64_t v2 = type metadata accessor for Optional();
  void *v1 = v0;
  v1[1] = closure #1 in AsyncStream._Storage.next();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return ((uint64_t (*)(uint64_t, void, void, uint64_t (*)(), uint64_t, uint64_t))v6)(v3, 0, 0, partial apply for closure #1 in closure #1 in AsyncStream._Storage.next(), v4, v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t static AsyncStream._Storage.create(limit:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = *((unsigned char *)a1 + 8);
  protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys();
  uint64_t v3 = swift_allocObject();
  *(void *)&long long v6 = v1;
  BYTE8(v6) = v2;
  AsyncStream._Storage.State.init(limit:)((uint64_t *)&v6, (uint64_t)&v11);
  long long v6 = v11;
  uint64_t v7 = v12;
  char v8 = v13;
  long long v9 = v14;
  char v10 = v15;
  uint64_t v4 = type metadata accessor for AsyncStream._Storage.State();
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)(v4 - 8) + 32))(v3 + 16, &v6, v4);
  _swift_async_stream_lock_init((_DWORD *)(v3 + 72));
  return v3;
}

uint64_t AsyncThrowingStream._Storage.State.init(limit:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = _Deque._Storage.init()();
  uint64_t v5 = type metadata accessor for AsyncThrowingStream._Storage.State();
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = a2 + *(int *)(v5 + 56);
  uint64_t v7 = type metadata accessor for AsyncThrowingStream._Storage.Terminal();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

void *AsyncThrowingStream._Storage.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for AsyncThrowingStream.Continuation.Termination();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = (char *)v1 + *(void *)(v2 + 104);
  char v8 = (void (*)(char *))*((void *)v7 + 4);
  if (v8)
  {
    uint64_t v9 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
    swift_retain();
    v8(v6);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v10 = type metadata accessor for AsyncThrowingStream._Storage.State();
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
  return v1;
}

uint64_t AsyncThrowingStream._Storage.__deallocating_deinit()
{
  AsyncThrowingStream._Storage.deinit();

  return swift_deallocClassInstance();
}

void AsyncThrowingStream._Storage.unlock()()
{
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0
                                                   + ((*(unsigned int *)(*(void *)v0 + 48) + 7) & 0x1FFFFFFF8)));
}

uint64_t AsyncThrowingStream._Storage.getOnTermination()()
{
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v0 + ((*(unsigned int *)(*(void *)v0 + 48) + 7) & 0x1FFFFFFF8)));
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 104) + 32);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v0
                                                   + ((*(unsigned int *)(*(void *)v0 + 48) + 7) & 0x1FFFFFFF8)));
  return v1;
}

uint64_t AsyncThrowingStream._Storage.setOnTermination(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
  uint64_t v6 = (uint64_t)v2 + *(void *)(*v2 + 104);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 40);
  if (v7)
  {
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 + 80);
    *(void *)(v9 + 32) = *(void *)(v5 + 96);
    *(void *)(v9 + 40) = v7;
    *(void *)(v9 + 48) = v8;
    uint64_t v10 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> ()partial apply;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  v16[0] = (uint64_t)v10;
  v16[1] = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v15[2] = v2;
  v15[3] = a1;
  v15[4] = a2;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v7);
  type metadata accessor for AsyncThrowingStream.Continuation.Termination();
  uint64_t v11 = MEMORY[0x1E4FBC848] + 8;
  swift_getFunctionTypeMetadata1();
  uint64_t v12 = type metadata accessor for Optional();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #1 in AsyncThrowingStream._Storage.setOnTermination(_:), (uint64_t)v15, v12, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v13);
  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v16[0]);
}

void AsyncThrowingStream._Storage.cancel@Sendable ()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 88);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = type metadata accessor for AsyncThrowingStream.Continuation.Termination();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(v2 + 48) + 7) & 0x1FFFFFFF8)));
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 104);
  uint64_t v13 = *(void (**)(char *))(v12 + 32);
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = 0;
  _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(*v1 + 48) + 7) & 0x1FFFFFFF8)));
  if (v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
    v13(v11);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 1, 1, v3);
  AsyncThrowingStream._Storage.finish(throwing:)((uint64_t)v7);
}

void AsyncThrowingStream._Storage.finish(throwing:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v116 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 88);
  uint64_t v6 = *(void *)(*v1 + 96);
  uint64_t v7 = type metadata accessor for AsyncThrowingStream._Storage.Terminal();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  v90 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v89 = (char *)&v86 - v11;
  uint64_t v99 = type metadata accessor for Optional();
  uint64_t v96 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  v98 = (char *)&v86 - v12;
  uint64_t v13 = type metadata accessor for AsyncThrowingStream.Continuation.Termination();
  uint64_t v106 = *(void *)(v13 - 8);
  uint64_t v107 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  v105 = (char *)&v86 - v15;
  uint64_t v97 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v14);
  v95 = (char *)&v86 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v114 = v17;
  uint64_t v115 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  v100 = (char *)&v86 - v20;
  uint64_t v102 = *(void *)(v5 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v87 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v94 = (char *)&v86 - v23;
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v93 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v86 - v28;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(v3 + 48) + 7) & 0x1FFFFFFF8)));
  uint64_t v30 = (swift::AsyncTask **)((char *)v2 + *(void *)(*v2 + 104));
  uint64_t v31 = v30[4];
  uint64_t v111 = v4;
  v112 = v31;
  v103 = v30[5];
  uint64_t v113 = v5;
  uint64_t v88 = v6;
  uint64_t v32 = type metadata accessor for AsyncThrowingStream._Storage.State();
  v30[4] = 0;
  v30[5] = 0;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v108 = (char *)v30 + *(int *)(v32 + 56);
  v92 = v33;
  ((void (*)(char *))v33)(v29);
  uint64_t v104 = v8;
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v110 = v7;
  v91 = v34;
  LODWORD(v8) = v34(v29, 1, v7);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v109 = v24;
  v101 = v35;
  v35(v29, v24);
  if (v8 == 1)
  {
    uint64_t v36 = v115;
    uint64_t v37 = v100;
    uint64_t v38 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v100, v116, v114);
    uint64_t v39 = v102;
    uint64_t v40 = v113;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v37, 1, v113) == 1)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
      uint64_t v41 = v108;
      v101(v108, v109);
      uint64_t v42 = 1;
    }
    else
    {
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      uint64_t v44 = v94;
      v43(v94, v37, v113);
      uint64_t v41 = v108;
      v101(v108, v109);
      v43(v41, v44, v113);
      uint64_t v40 = v113;
      uint64_t v42 = 0;
    }
    uint64_t v45 = v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v41, v42, 1, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v41, 0, 1, v45);
  }
  uint64_t v46 = *v30;
  if (!*v30)
  {
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
    uint64_t v57 = v112;
    if (!v112)
    {
      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v116, v114);
      return;
    }
    uint64_t v58 = v115;
    uint64_t v59 = v105;
    uint64_t v60 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v105, v116, v114);
LABEL_15:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v60);
    ((void (*)(char *))v57)(v59);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v57);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v59, v107);
    return;
  }
  uint64_t v47 = (uint64_t)v30[1];
  swift_retain();
  uint64_t v48 = v111;
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v47, (uint64_t)&type metadata for _DequeBufferHeader, v111, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v85);
  uint64_t v49 = v117;
  swift_release();
  if (v49 >= 1)
  {
    uint64_t v50 = v46;
    *uint64_t v30 = 0;
    uint64_t v51 = type metadata accessor for _Deque();
    uint64_t v52 = v95;
    _Deque.removeFirst()(v51);
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
    uint64_t v53 = v112;
    if (v112)
    {
      uint64_t v54 = v115;
      uint64_t v55 = v105;
      uint64_t v56 = v114;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v105, v116, v114);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v56);
      ((void (*)(char *))v53)(v55);
      _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v53);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v55, v107);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v116, v114);
    }
    uint64_t v66 = v98;
    uint64_t v65 = v99;
    uint64_t v67 = v96;
    uint64_t v68 = v97;
    (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v52, v48);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v66, 0, 1, v48);
    (*(void (**)(void, char *, uint64_t))(v67 + 32))(*(void *)(*((void *)v50 + 8) + 40), v66, v65);
    swift_continuation_throwingResume(v50);
    return;
  }
  uint64_t v61 = v93;
  uint64_t v62 = v109;
  v92(v93, v108, v109);
  uint64_t v63 = v110;
  int v64 = v91(v61, 1, v110);
  uint64_t v58 = v115;
  if (v64 == 1)
  {
    v101(v61, v62);
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
    uint64_t v60 = v114;
    uint64_t v57 = v112;
    if (!v112)
    {
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v116, v114);
      return;
    }
    uint64_t v59 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v105, v116, v114);
    goto LABEL_15;
  }
  v69 = v46;
  v70 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
  v71 = v89;
  v70(v89, v61, v63);
  *uint64_t v30 = 0;
  _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
  uint64_t v72 = v114;
  v73 = v112;
  if (v112)
  {
    v74 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v105, v116, v114);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v74, 0, 1, v72);
    ((void (*)(char *))v73)(v74);
    _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v73);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v74, v107);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v116, v114);
  }
  uint64_t v75 = v111;
  v76 = v90;
  v70(v90, v71, v63);
  uint64_t v77 = v102;
  uint64_t v78 = v113;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v76, 1, v113) == 1)
  {
    v79 = v98;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v98, 1, 1, v75);
    (*(void (**)(void, char *, uint64_t))(v96 + 32))(*(void *)(*((void *)v69 + 8) + 40), v79, v99);
    swift_continuation_throwingResume(v69);
  }
  else
  {
    v80 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v81 = v87;
    v80(v87, v76, v78);
    uint64_t v82 = swift_allocError();
    v80(v83, v81, v78);
    uint64_t v117 = v82;
    uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    UnsafeContinuation.resume(throwing:)((uint64_t)&v117, (uint64_t)v69, v99, v84);
  }
}

void AsyncThrowingStream._Storage.yield(_:)(void (*a1)(void, void, void)@<X0>, uint64_t *a2@<X8>)
{
  v95 = a2;
  uint64_t v96 = a1;
  uint64_t v3 = *v2;
  uint64_t v82 = *(void *)(*(void *)(*v2 + 88) - 8);
  MEMORY[0x1F4188790](a1);
  v80 = (char *)&v80 - v4;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 96);
  uint64_t v100 = v8;
  uint64_t v98 = v7;
  uint64_t v9 = type metadata accessor for AsyncThrowingStream._Storage.Terminal();
  uint64_t v97 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  v81 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v84 = (char *)&v80 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v92 = *(void *)(v13 - 8);
  uint64_t v93 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  v91 = (char *)&v80 - v15;
  uint64_t v99 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v88 = (char *)&v80 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  v83 = (char *)&v80 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v80 - v24;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v2 + ((*(unsigned int *)(v3 + 48) + 7) & 0x1FFFFFFF8)));
  uint64_t v26 = *(void *)(*v2 + 104);
  v94 = v2;
  uint64_t v27 = (char *)v2 + v26;
  uint64_t v90 = *(uint64_t *)((char *)v2 + v26 + 16);
  int v89 = *((unsigned __int8 *)v2 + v26 + 24);
  uint64_t v28 = *(uint64_t *)((char *)v2 + v26 + 8);
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v28, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v79);
  uint64_t v29 = v101;
  swift_release();
  if (!*(void *)v27)
  {
    uint64_t v93 = v29;
    uint64_t v43 = type metadata accessor for AsyncThrowingStream._Storage.State();
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, &v27[*(int *)(v43 + 56)], v17);
    int v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48))(v21, 1, v9);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    if (v44 != 1)
    {
      (*(void (**)(void (*)(void, void, void), uint64_t))(v99 + 8))(v96, v6);
      type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
      goto LABEL_22;
    }
    uint64_t v45 = v99;
    if (v89)
    {
      uint64_t v46 = v90;
      if (v89 != 1)
      {
        uint64_t *v95 = 0x7FFFFFFFFFFFFFFFLL;
        type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
LABEL_32:
        swift_storeEnumTagMultiPayload();
        uint64_t v66 = type metadata accessor for _Deque();
        uint64_t v67 = v96;
        _Deque.append(_:)((uint64_t)v96, v66);
        (*(void (**)(void (*)(void, void, void), uint64_t))(v45 + 8))(v67, v6);
        goto LABEL_33;
      }
      if (v93 < v90)
      {
        uint64_t v47 = v93;
        uint64_t v48 = type metadata accessor for _Deque();
        uint64_t v49 = v96;
        _Deque.append(_:)((uint64_t)v96, v48);
        (*(void (**)(void (*)(void, void, void), uint64_t))(v45 + 8))(v49, v6);
        if (!__OFSUB__(v46, v47 + 1))
        {
          uint64_t *v95 = v46 - (v47 + 1);
          type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
LABEL_22:
          swift_storeEnumTagMultiPayload();
LABEL_33:
          _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v94
                                                           + ((*(unsigned int *)(*v94 + 48) + 7) & 0x1FFFFFFF8)));
          return;
        }
        __break(1u);
LABEL_48:
        __break(1u);
        return;
      }
      if (v93 >= 1)
      {
        uint64_t v77 = type metadata accessor for _Deque();
        _Deque.removeFirst()(v77);
        type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
        swift_storeEnumTagMultiPayload();
        uint64_t v78 = v96;
        _Deque.append(_:)((uint64_t)v96, v77);
        (*(void (**)(void (*)(void, void, void), uint64_t))(v45 + 8))(v78, v6);
        goto LABEL_33;
      }
    }
    else if (v93 < v90)
    {
      if (!__OFSUB__(v90, v93 + 1))
      {
        uint64_t *v95 = v90 - (v93 + 1);
        type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
        goto LABEL_32;
      }
      goto LABEL_48;
    }
    (*(void (**)(uint64_t *, void, uint64_t))(v99 + 32))(v95, v96, v6);
    type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
    goto LABEL_22;
  }
  uint64_t v86 = *(void *)v27;
  uint64_t v87 = v6;
  uint64_t v30 = *(int *)(type metadata accessor for AsyncThrowingStream._Storage.State() + 56);
  uint64_t v85 = v27;
  uint64_t v31 = &v27[v30];
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  uint64_t v33 = v97;
  uint64_t v34 = (uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  if (v29 >= 1)
  {
    v32(v25, v31, v17);
    int v35 = (*v34)(v25, 1, v9);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
    if (v35 != 1)
    {
      uint64_t v37 = v99;
      uint64_t v36 = v87;
      (*(void (**)(void (*)(void, void, void), uint64_t))(v99 + 8))(v96, v87);
      type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
      goto LABEL_20;
    }
    uint64_t v36 = v87;
    uint64_t v37 = v99;
    if (v89)
    {
      uint64_t v38 = v90;
      if (v89 == 1)
      {
        uint64_t v39 = type metadata accessor for _Deque();
        uint64_t v40 = v39;
        if (v29 < v38)
        {
          uint64_t v41 = v29;
          uint64_t v42 = v96;
          _Deque.append(_:)((uint64_t)v96, v39);
          (*(void (**)(void (*)(void, void, void), uint64_t))(v37 + 8))(v42, v36);
          uint64_t *v95 = v38 + ~v41;
          type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
LABEL_20:
          swift_storeEnumTagMultiPayload();
LABEL_39:
          *(void *)uint64_t v85 = 0;
          uint64_t v74 = type metadata accessor for _Deque();
          uint64_t v75 = v88;
          _Deque.removeFirst()(v74);
          _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v94
                                                           + ((*(unsigned int *)(*v94 + 48) + 7) & 0x1FFFFFFF8)));
          v73 = v91;
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v91, v75, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v73, 0, 1, v36);
          goto LABEL_40;
        }
        _Deque.removeFirst()(v39);
        type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
        swift_storeEnumTagMultiPayload();
        int v64 = v96;
        uint64_t v65 = v96;
        uint64_t v63 = v40;
LABEL_38:
        _Deque.append(_:)((uint64_t)v65, v63);
        (*(void (**)(void (*)(void, void, void), uint64_t))(v37 + 8))(v64, v36);
        goto LABEL_39;
      }
      uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      if (v29 >= v90)
      {
        (*(void (**)(uint64_t *, void, uint64_t))(v99 + 32))(v95, v96, v87);
        type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
        goto LABEL_20;
      }
      uint64_t v62 = v90 + ~v29;
    }
    uint64_t *v95 = v62;
    type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
    swift_storeEnumTagMultiPayload();
    uint64_t v63 = type metadata accessor for _Deque();
    int v64 = v96;
    uint64_t v65 = v96;
    goto LABEL_38;
  }
  uint64_t v50 = v83;
  v32(v83, v31, v17);
  if ((*v34)(v50, 1, v9) != 1)
  {
    (*(void (**)(void (*)(void, void, void), uint64_t))(v99 + 8))(v96, v87);
    uint64_t v55 = v9;
    uint64_t v96 = *(void (**)(void, void, void))(v33 + 32);
    v96(v84, v50, v9);
    uint64_t v56 = v100;
    type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
    swift_storeEnumTagMultiPayload();
    *(void *)uint64_t v85 = 0;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v31, v17);
    uint64_t v57 = v82;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v31, 1, 1, v56);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v31, 0, 1, v55);
    _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v94
                                                     + ((*(unsigned int *)(*v94 + 48) + 7) & 0x1FFFFFFF8)));
    uint64_t v58 = v81;
    v96(v81, v84, v55);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v58, 1, v56) != 1)
    {
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v69 = v80;
      v68(v80, v58, v56);
      uint64_t v70 = swift_allocError();
      v68(v71, v69, v56);
      uint64_t v101 = v70;
      uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      UnsafeContinuation.resume(throwing:)((uint64_t)&v101, v86, v93, v72);
      return;
    }
    uint64_t v59 = v91;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v91, 1, 1, v87);
    uint64_t v60 = v86;
    (*(void (**)(void, char *, uint64_t))(v92 + 32))(*(void *)(*(void *)(v86 + 64) + 40), v59, v93);
    uint64_t v61 = (swift::AsyncTask *)v60;
    goto LABEL_41;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v50, v17);
  uint64_t v51 = v87;
  uint64_t v52 = v99;
  if (v89)
  {
    uint64_t v53 = v85;
    uint64_t v54 = v90;
    if (v89 != 1) {
      uint64_t v54 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v53 = v85;
    uint64_t v54 = v90;
  }
  uint64_t *v95 = v54;
  type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v53 = 0;
  _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v94 + ((*(unsigned int *)(*v94 + 48) + 7) & 0x1FFFFFFF8)));
  v73 = v91;
  (*(void (**)(char *, void, uint64_t))(v52 + 32))(v91, v96, v51);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v73, 0, 1, v51);
LABEL_40:
  uint64_t v76 = v86;
  (*(void (**)(void, char *, uint64_t))(v92 + 32))(*(void *)(*(void *)(v86 + 64) + 40), v73, v93);
  uint64_t v61 = (swift::AsyncTask *)v76;
LABEL_41:
  swift_continuation_throwingResume(v61);
}

void AsyncThrowingStream._Storage.next(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v54 = (swift::AsyncTask *)a1;
  uint64_t v3 = *v1;
  uint64_t v44 = *(void *)(*(void *)(*v1 + 88) - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v42 = (char *)&v41 - v4;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v49 = *(void *)(v5 + 96);
  uint64_t v50 = v7;
  uint64_t v8 = type metadata accessor for AsyncThrowingStream._Storage.Terminal();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t v48 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v46 = (char *)&v41 - v15;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v16 - 8);
  uint64_t v53 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v51 = (char *)&v41 - v18;
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v41 - v20;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(v3 + 48) + 7) & 0x1FFFFFFF8)));
  uint64_t v22 = (swift::AsyncTask **)((char *)v1 + *(void *)(*v1 + 104));
  if (*v22)
  {
    AsyncThrowingStream._Storage.unlock()();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v23 = (uint64_t)v22[1];
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v23, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v40);
    uint64_t v24 = v55;
    swift_release();
    if (v24 >= 1)
    {
      uint64_t v25 = type metadata accessor for _Deque();
      _Deque.removeFirst()(v25);
      _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v1
                                                       + ((*(unsigned int *)(*v1 + 48) + 7) & 0x1FFFFFFF8)));
      uint64_t v26 = v51;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v51, v21, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v26, 0, 1, v6);
LABEL_4:
      uint64_t v27 = v54;
      (*(void (**)(void, char *, uint64_t))(v52 + 32))(*(void *)(*((void *)v54 + 8) + 40), v26, v53);
      swift_continuation_throwingResume(v27);
      return;
    }
    uint64_t v28 = (char *)v22 + *(int *)(type metadata accessor for AsyncThrowingStream._Storage.State() + 56);
    uint64_t v30 = v47;
    uint64_t v29 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v12, v28, v48);
    uint64_t v31 = v45;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v12, 1, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v29);
      *uint64_t v22 = v54;
      _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2
                                                       + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
    }
    else
    {
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
      v41(v46, v12, v8);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v29);
      uint64_t v32 = v44;
      uint64_t v33 = v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v28, 1, 1, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v8);
      _swift_async_stream_lock_unlock((os_unfair_lock_t)((char *)v2
                                                       + ((*(unsigned int *)(*v2 + 48) + 7) & 0x1FFFFFFF8)));
      uint64_t v34 = v43;
      v41(v43, v46, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
      {
        uint64_t v26 = v51;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v51, 1, 1, v6);
        goto LABEL_4;
      }
      int v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      uint64_t v36 = v42;
      v35(v42, v34, v33);
      uint64_t v37 = swift_allocError();
      v35(v38, v36, v33);
      uint64_t v55 = v37;
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      UnsafeContinuation.resume(throwing:)((uint64_t)&v55, (uint64_t)v54, v53, v39);
    }
  }
}

uint64_t AsyncThrowingStream._Storage.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(AsyncThrowingStream._Storage.next(), 0, 0);
}

uint64_t AsyncThrowingStream._Storage.next()()
{
  uint64_t v1 = v0[3];
  swift_retain();
  uint64_t v2 = swift_task_alloc(32);
  v0[5] = v2;
  *(void *)(v2 + 16) = partial apply for implicit closure #2 in implicit closure #1 in AsyncThrowingStream._Storage.next();
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = (void *)swift_task_alloc(dword_1E91CFF84);
  v0[6] = v3;
  type metadata accessor for Optional();
  *uint64_t v3 = v0;
  v3[1] = AsyncThrowingStream._Storage.next();
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  v3[5] = partial apply for closure #2 in AsyncThrowingStream._Storage.next();
  v3[6] = v2;
  v3[3] = &async function pointer to partial apply for closure #1 in AsyncThrowingStream._Storage.next();
  v3[4] = v4;
  v3[2] = v5;
  v3[7] = 0;
  v3[8] = 0;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void **)v1;
  v3[7] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    return swift_task_switch(AsyncThrowingStream._Storage.next(), 0, 0);
  }
  else
  {
    uint64_t v5 = v3[5];
    swift_release();
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v3[1];
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  swift_task_dealloc(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in AsyncThrowingStream._Storage.next()(uint64_t a1, void *a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = *a2;
  return swift_task_switch(closure #1 in AsyncThrowingStream._Storage.next(), 0, 0);
}

uint64_t closure #1 in AsyncThrowingStream._Storage.next()()
{
  uint64_t v6 = (char *)&async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:);
  uint64_t v1 = (void *)swift_task_alloc(unk_1E91D0344);
  v0[5] = v1;
  uint64_t v2 = type metadata accessor for Optional();
  void *v1 = v0;
  v1[1] = closure #1 in AsyncThrowingStream._Storage.next();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return ((uint64_t (*)(uint64_t, void, void, uint64_t (*)(), uint64_t, uint64_t))v6)(v3, 0, 0, partial apply for closure #1 in closure #1 in AsyncThrowingStream._Storage.next(), v4, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *v1;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    return swift_task_switch(closure #1 in AsyncThrowingStream._Storage.next(), 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
    return v5();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static AsyncThrowingStream._Storage.create(limit:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AsyncThrowingStream._Storage.State();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v11 - v4;
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + *(void *)(*(void *)v8 + 104);
  uint64_t v11 = v6;
  char v12 = v7;
  AsyncThrowingStream._Storage.State.init(limit:)(&v11, (uint64_t)v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v9, v5, v2);
  _swift_async_stream_lock_init((_DWORD *)(v8 + ((*(unsigned int *)(*(void *)v8 + 48) + 7) & 0x1FFFFFFF8)));
  return v8;
}

void _AsyncStreamCriticalStorage.value.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  _swift_async_stream_lock_lock((os_unfair_lock_t)((char *)v1 + ((*(unsigned int *)(*v1 + 48) + 7) & 0x1FFFFFFF8)));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, (uint64_t)v1 + *(void *)(*v1 + 88));
  uint64_t v4 = (os_unfair_lock_s *)((char *)v1 + ((*(unsigned int *)(*v1 + 48) + 7) & 0x1FFFFFFF8));

  _swift_async_stream_lock_unlock(v4);
}

uint64_t static _AsyncStreamCriticalStorage.create(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v7 + *(void *)(*(void *)v7 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8, v6, v3);
  _swift_async_stream_lock_init((_DWORD *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48) + 7) & 0x1FFFFFFF8)));
  return v7;
}

uint64_t TaskLocal.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

uint64_t TaskLocal.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));

  return swift_deallocClassInstance();
}

BOOL static AsyncStream.Continuation.Termination.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AsyncStream.Continuation.Termination.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AsyncStream.Continuation.Termination.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AsyncStream<A>.Continuation.Termination()
{
  return Hasher._finalize()();
}

void AsyncStream.Continuation.yield(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t AsyncStream.Continuation.onTermination.getter()
{
  return AsyncStream._Storage.getOnTermination()();
}

void *key path getter for AsyncStream.Continuation.onTermination : <A>AsyncStream<A>.Continuation@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)
{
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t result = (void *)AsyncStream.Continuation.onTermination.getter();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = v6;
    uint64_t result = (void *)swift_allocObject();
    result[2] = v4;
    result[3] = v7;
    result[4] = v8;
    uint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> ();
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a3 = v9;
  a3[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for AsyncStream.Continuation.onTermination : <A>AsyncStream<A>.Continuation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 8);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = v4;
    v7[3] = v5;
    v7[4] = v6;
    uint64_t v8 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> (@out ());
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v5);
  type metadata accessor for AsyncStream.Continuation();
  specialized AsyncStream.Continuation.onTermination.setter((uint64_t)v8, (uint64_t)v7);

  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v8);
}

uint64_t AsyncStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  specialized AsyncStream.Continuation.onTermination.setter(a1, a2);

  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(a1);
}

uint64_t (*AsyncStream.Continuation.onTermination.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = *v1;
  *a1 = AsyncStream._Storage.getOnTermination()();
  a1[1] = v3;
  return AsyncStream.Continuation.onTermination.modify;
}

uint64_t AsyncStream.Continuation.onTermination.modify(uint64_t *a1, char a2)
{
  return AsyncStream.Continuation.onTermination.modify(a1, a2, (void (*)(uint64_t, uint64_t))AsyncStream._Storage.setOnTermination(_:), (void (*)(uint64_t, uint64_t))_sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy, (void (*)(uint64_t, uint64_t))_sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe);
}

uint64_t AsyncStream._Context.__deallocating_deinit()
{
  AsyncStream._Context.deinit(AsyncStream._Storage.cancel@Sendable ());

  return swift_deallocClassInstance();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *)@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  type metadata accessor for AsyncStream._Storage();
  uint64_t v10 = v5;
  char v11 = v6;
  uint64_t v7 = static AsyncStream._Storage.create(limit:)(&v10);
  type metadata accessor for AsyncStream._Context();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:);
  v8[4] = v7;
  swift_retain();
  uint64_t v10 = v7;
  swift_retain();
  a2(&v10);
  uint64_t result = swift_release();
  *a3 = v8;
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91D0394);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[2] = a1;
  v5[3] = a2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v5[4] = *a2;
  return swift_task_switch(AsyncStream._Storage.next(), 0, 0);
}

void *AsyncStream.init(unfolding:onCancel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata0();
  type metadata accessor for Optional();
  type metadata accessor for _AsyncStreamCriticalStorage();
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v12 = static _AsyncStreamCriticalStorage.create(_:)((uint64_t)v15);
  swift_release();
  type metadata accessor for AsyncStream._Context();
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v13[2] = a5;
  v13[3] = v12;
  v13[4] = a3;
  v13[5] = a4;
  uint64_t result = (void *)swift_allocObject();
  result[2] = 0;
  result[3] = &async function pointer to partial apply for closure #1 in AsyncStream.init(unfolding:onCancel:);
  result[4] = v13;
  *a6 = result;
  return result;
}

uint64_t closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

uint64_t closure #1 in AsyncStream.init(unfolding:onCancel:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = swift_task_alloc(32);
  v0[7] = v5;
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v4;
  char v6 = (void *)swift_task_alloc(48);
  v0[8] = v6;
  v6[2] = v1;
  v6[3] = v4;
  v6[4] = v3;
  v6[5] = v2;
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFF84);
  v0[9] = v7;
  type metadata accessor for Optional();
  *uint64_t v7 = v0;
  v7[1] = closure #1 in AsyncStream.init(unfolding:onCancel:);
  uint64_t v8 = v0[2];
  v7[5] = partial apply for closure #2 in closure #1 in AsyncStream.init(unfolding:onCancel:);
  void v7[6] = v6;
  v7[3] = &async function pointer to partial apply for closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:);
  v7[4] = v5;
  v7[2] = v8;
  v7[7] = 0;
  v7[8] = 0;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void *)(*v0 + 64);
  uint64_t v2 = *(void *)(*v0 + 56);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Optional();
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

uint64_t closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)()
{
  _AsyncStreamCriticalStorage.value.getter((uint64_t)(v0 + 2));
  uint64_t v1 = (int *)v0[2];
  v0[12] = v1;
  if (v1)
  {
    v0[13] = v0[3];
    uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
    uint64_t v2 = (void *)swift_task_alloc(v1[1]);
    v0[14] = v2;
    void *v2 = v0;
    v2[1] = closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:);
    uint64_t v3 = v0[11];
    return v8(v3);
  }
  else
  {
    uint64_t v5 = *(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[8] - 8) + 56);
    v5(v0[11], 1, 1);
    (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    v0[5] = 0;
    v0[4] = 0;
    specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)(v0 + 4));
    uint64_t v6 = v0[11];
    ((void (*)(void, uint64_t, uint64_t, void))v5)(v0[6], 1, 1, v0[8]);
    swift_task_dealloc(v6);
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112));
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v1);
  return swift_task_switch(closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, void))(v0[10] + 8))(v1, v0[9]);
    v0[4] = 0;
    v0[5] = 0;
    specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)(v0 + 4));
    uint64_t v4 = 1;
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[6], v1, v2);
    uint64_t v4 = 0;
  }
  uint64_t v5 = v0[11];
  (*(void (**)(void, uint64_t, uint64_t, void))(v3 + 56))(v0[6], v4, 1, v0[8]);
  swift_task_dealloc(v5);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t AsyncStream.Iterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch(AsyncStream.Iterator.next(), 0, 0);
}

uint64_t AsyncStream.Iterator.next()()
{
  uint64_t v1 = **(void **)(v0 + 24);
  uint64_t v2 = *(int **)(v1 + 24);
  *(void *)(v0 + 32) = *(void *)(v1 + 32);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = v2[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 40) = v4;
  *uint64_t v4 = v0;
  v4[1] = AsyncStream.Iterator.next();
  uint64_t v5 = *(void *)(v0 + 16);
  return v7(v5);
}

uint64_t AsyncStream.Iterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v3;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  return swift_task_switch(AsyncStream.Iterator.next(isolation:), v7, v9);
}

uint64_t AsyncStream.Iterator.next(isolation:)()
{
  uint64_t v1 = **(void **)(v0 + 24);
  uint64_t v2 = *(int **)(v1 + 24);
  *(void *)(v0 + 32) = *(void *)(v1 + 32);
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = v2[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 40) = v4;
  *uint64_t v4 = v0;
  v4[1] = AsyncStream.Iterator.next(isolation:);
  uint64_t v5 = *(void *)(v0 + 16);
  return v7(v5);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncStream<A>.Iterator(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1E91D008C);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1;
  v4[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return swift_task_switch(AsyncStream.Iterator.next(), 0, 0);
}

uint64_t _sScS8IteratorVyx_GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91D0094);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncStream.Iterator.next(isolation:)(a1, a2, a3);
}

uint64_t AsyncStream.makeAsyncIterator()@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncStream<A>@<X0>(void *a1@<X8>)
{
  AsyncStream.makeAsyncIterator()(a1);

  return swift_release();
}

void AsyncStream.Continuation.yield(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v13 - v10, a1, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    AsyncStream._Storage.yield(_:)((uint64_t)v8, a3);
  }
}

void AsyncStream.Continuation.yield<A>()(uint64_t a1@<X8>)
{
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  char v7 = *((unsigned char *)a4 + 8);
  uint64_t v12 = 0;
  uint64_t v9 = v6;
  char v10 = v7;
  uint64_t result = AsyncStream.init(_:bufferingPolicy:_:)((uint64_t)&v9, (void (*)(uint64_t *))partial apply for closure #1 in static AsyncStream.makeStream(of:bufferingPolicy:), &v11);
  *a1 = v11;
  if (v12)
  {
    *a2 = v12;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void AsyncThrowingStream.Continuation.yield(_:)(void (*a1)(void, void, void)@<X0>, uint64_t *a2@<X8>)
{
}

void AsyncThrowingStream.Continuation.finish(throwing:)(uint64_t a1)
{
}

uint64_t AsyncThrowingStream.Continuation.onTermination.getter()
{
  return AsyncThrowingStream._Storage.getOnTermination()();
}

uint64_t key path getter for AsyncThrowingStream.Continuation.onTermination : <A, B>AsyncThrowingStream<A, B>.Continuation@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>)
{
  long long v10 = *(_OWORD *)(a2 + a1 - 24);
  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t result = AsyncThrowingStream.Continuation.onTermination.getter();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = v6;
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = v10;
    *(void *)(result + 32) = v4;
    *(void *)(result + 40) = v7;
    *(void *)(result + 48) = v8;
    uint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> ();
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a3 = v9;
  a3[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for AsyncThrowingStream.Continuation.onTermination : <A, B>AsyncThrowingStream<A, B>.Continuation(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1)
  {
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v4;
    v9[3] = v5;
    v9[4] = v6;
    v9[5] = v7;
    v9[6] = v8;
    long long v10 = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> (@out ());
  }
  else
  {
    long long v10 = 0;
    uint64_t v9 = 0;
  }
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v7);
  type metadata accessor for AsyncThrowingStream.Continuation();
  specialized AsyncThrowingStream.Continuation.onTermination.setter((uint64_t)v10, (uint64_t)v9);

  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe((uint64_t)v10);
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  specialized AsyncThrowingStream.Continuation.onTermination.setter(a1, a2);

  return _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(a1);
}

uint64_t (*AsyncThrowingStream.Continuation.onTermination.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = *v1;
  *a1 = AsyncThrowingStream._Storage.getOnTermination()();
  a1[1] = v3;
  return AsyncThrowingStream.Continuation.onTermination.modify;
}

uint64_t AsyncThrowingStream.Continuation.onTermination.modify(uint64_t *a1, char a2)
{
  return AsyncStream.Continuation.onTermination.modify(a1, a2, (void (*)(uint64_t, uint64_t))AsyncThrowingStream._Storage.setOnTermination(_:), (void (*)(uint64_t, uint64_t))_sScs12ContinuationV11TerminationOyxq___Gs5ErrorR_Ri_zRi0_zr0_lyxq_Iseghn_SgsAFR_r0_lWOy, (void (*)(uint64_t, uint64_t))_sScs12ContinuationV11TerminationOyxq___Gs5ErrorR_Ri_zRi0_zr0_lyxq_Iseghn_SgsAFR_r0_lWOe);
}

uint64_t AsyncStream.Continuation.onTermination.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *a1;
  if (a2)
  {
    a4(v8, v7);
    a3(v6, v7);
    a5(v6, v7);
  }
  else
  {
    a3(v8, v7);
  }

  return ((uint64_t (*)(uint64_t, uint64_t))a5)(v6, v7);
}

void *AsyncStream._Context.__allocating_init(storage:produce:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t AsyncStream._Context.deinit(void (*a1)(void))
{
  if (*(void *)(v1 + 16))
  {
    a1();
    swift_release();
  }
  swift_release();
  return v1;
}

uint64_t AsyncThrowingStream._Context.__deallocating_deinit()
{
  AsyncStream._Context.deinit(AsyncThrowingStream._Storage.cancel@Sendable ());

  return swift_deallocClassInstance();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *)@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v7 = *(void *)a1;
  char v8 = *(unsigned char *)(a1 + 8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for AsyncThrowingStream._Storage();
  uint64_t v13 = v7;
  char v14 = v8;
  uint64_t v9 = static AsyncThrowingStream._Storage.create(limit:)((uint64_t)&v13);
  type metadata accessor for AsyncThrowingStream._Context();
  long long v10 = (void *)swift_allocObject();
  uint64_t v10[2] = a3;
  v10[3] = &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:);
  v10[4] = v9;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v9;
  v11[3] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error);
  v11[4] = v10;
  swift_retain();
  uint64_t v13 = v9;
  swift_retain();
  a2(&v13);
  uint64_t result = swift_release();
  *a4 = v11;
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91D032C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[2] = a1;
  v5[3] = a2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v5[4] = *a2;
  return swift_task_switch(AsyncThrowingStream._Storage.next(), 0, 0);
}

uint64_t thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v5 + 24) = v7;
  *uint64_t v7 = v5;
  v7[1] = _ss31AsyncThrowingCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a1);
}

void *AsyncThrowingStream.init<>(unfolding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata0();
  type metadata accessor for Optional();
  type metadata accessor for _AsyncStreamCriticalStorage();
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v8 = static _AsyncStreamCriticalStorage.create(_:)((uint64_t)v11);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for AsyncThrowingStream._Context();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = v8;
  uint64_t result = (void *)swift_allocObject();
  result[2] = 0;
  result[3] = &async function pointer to partial apply for closure #1 in AsyncThrowingStream.init<>(unfolding:);
  result[4] = v9;
  *a4 = result;
  return result;
}

uint64_t closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
}

uint64_t closure #1 in AsyncThrowingStream.init<>(unfolding:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc(32);
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = swift_task_alloc(32);
  v0[7] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFF84);
  v0[8] = v5;
  type metadata accessor for Optional();
  void *v5 = v0;
  v5[1] = closure #1 in AsyncThrowingStream.init<>(unfolding:);
  uint64_t v6 = v0[2];
  v5[5] = partial apply for closure #2 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  v5[6] = v4;
  v5[3] = &async function pointer to partial apply for closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  v5[4] = v3;
  v5[2] = v6;
  v5[7] = 0;
  v5[8] = 0;
  return swift_task_switch(withTaskCancellationHandler<A>(operation:onCancel:isolation:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  uint64_t v3 = *(void **)v1;
  v3[9] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    return swift_task_switch(closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
  }
  else
  {
    uint64_t v5 = v3[6];
    swift_task_dealloc(v3[7]);
    swift_task_dealloc(v5);
    uint64_t v6 = (uint64_t (*)(void))v3[1];
    return v6();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = (void *)v0[5];
  swift_task_dealloc(v0[7]);
  swift_task_dealloc(v2);
  *uint64_t v3 = v1;
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Optional();
  v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
}

uint64_t closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)()
{
  _AsyncStreamCriticalStorage.value.getter((uint64_t)(v0 + 2));
  uint64_t v1 = (int *)v0[2];
  uint64_t v2 = v0[3];
  v0[12] = v1;
  v0[13] = v2;
  if (v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
    uint64_t v3 = (void *)swift_task_alloc(v1[1]);
    v0[14] = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
    uint64_t v4 = v0[11];
    return v9(v4);
  }
  else
  {
    uint64_t v6 = *(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[8] - 8) + 56);
    v6(v0[11], 1, 1);
    (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    v0[5] = 0;
    v0[4] = 0;
    specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)(v0 + 4));
    uint64_t v7 = v0[11];
    ((void (*)(void, uint64_t, uint64_t, void))v6)(v0[6], 1, 1, v0[8]);
    swift_task_dealloc(v7);
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  }
  else {
    uint64_t v3 = closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:);
  }
  return swift_task_switch(v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v0[12]);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
    v0[4] = 0;
    v0[5] = 0;
    specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)(v0 + 4));
    uint64_t v4 = 1;
  }
  else
  {
    (*(void (**)(void, void, void))(v3 + 32))(v0[6], v0[11], v0[8]);
    uint64_t v4 = 0;
  }
  uint64_t v5 = v0[11];
  (*(void (**)(void, uint64_t, uint64_t, void))(v3 + 56))(v0[6], v4, 1, v0[8]);
  swift_task_dealloc(v5);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[11];
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v0[12]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t AsyncThrowingStream.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = *(void *)(a2 + 24);
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v6);
  v3[8] = swift_task_alloc(v6);
  return swift_task_switch(AsyncThrowingStream.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingStream.Iterator.next()()
{
  uint64_t v1 = **(void **)(v0 + 32);
  uint64_t v2 = *(int **)(v1 + 24);
  *(void *)(v0 + 72) = *(void *)(v1 + 32);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v2 + *v2);
  uint64_t v3 = v2[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  v4[1] = AsyncThrowingStream.Iterator.next();
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8(v6, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
  {
    return swift_task_switch(AsyncThrowingStream.Iterator.next(), 0, 0);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 56);
    swift_task_dealloc(*(void *)(v2 + 64));
    swift_task_dealloc(v6);
    uint64_t v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[6] + 32);
  v4(v1, v2, v3);
  swift_allocError();
  v4(v5, v1, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[3] = v5;
  v6[4] = a5;
  v6[2] = a1;
  uint64_t v9 = *(void *)(a4 + 24);
  v6[5] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[6] = v10;
  v6[7] = swift_task_alloc((*(void *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(ObjectType, a3);
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  void v6[8] = v12;
  v6[9] = v14;
  return swift_task_switch(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_, v12, v14);
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY0_()
{
  uint64_t v1 = **(void **)(v0 + 24);
  uint64_t v2 = *(int **)(v1 + 24);
  *(void *)(v0 + 80) = *(void *)(v1 + 32);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v2 + *v2);
  uint64_t v3 = v2[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_;
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 16);
  return v8(v6, v5);
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTQ1_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[11];
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
  {
    uint64_t v5 = v2[8];
    uint64_t v6 = v2[9];
    return swift_task_switch(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_, v5, v6);
  }
  else
  {
    swift_task_dealloc(v2[7]);
    uint64_t v8 = (uint64_t (*)(void))v4[1];
    return v8();
  }
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTY2_()
{
  uint64_t v1 = v0[7];
  (*(void (**)(void, uint64_t, void))(v0[6] + 32))(v0[4], v1, v0[5]);
  swift_task_dealloc(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingStream<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91D00BC);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return AsyncThrowingStream.Iterator.next()(a1, a2);
}

uint64_t _sScs8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  uint64_t v10 = *(void *)(a5 + 24);
  v5[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[4] = v11;
  uint64_t v12 = swift_task_alloc((*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1E91D00C4);
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = _ss23AsyncCompactMapSequenceV8IteratorVyxq__GScIsScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(a1, a2, a3, a5, v12);
}

void AsyncThrowingStream.Continuation.yield<>(with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v13 - v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v13 - v10, a1, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v11;
    AsyncThrowingStream._Storage.finish(throwing:)((uint64_t)&v14);
    type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v11, v5);
    AsyncThrowingStream._Storage.yield(_:)((void (*)(void, void, void))v8, a3);
  }
}

void AsyncThrowingStream.Continuation.yield<>()(void (*a1)(void, void, void)@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)(void *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = *a4;
  char v8 = *((unsigned char *)a4 + 8);
  uint64_t v13 = 0;
  uint64_t v10 = v7;
  char v11 = v8;
  uint64_t result = AsyncThrowingStream.init<>(_:bufferingPolicy:_:)((uint64_t)&v10, (void (*)(uint64_t *))partial apply for closure #1 in static AsyncStream.makeStream(of:bufferingPolicy:), a5, &v12);
  *a1 = v12;
  if (v13)
  {
    *a2 = v13;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void _DequeBuffer.deinit()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  if (__OFADD__(v1, v2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = v0[2];
    if (v3 >= v1 + v2) {
      goto LABEL_5;
    }
    uint64_t v4 = v3 - v1;
    if (!__OFSUB__(v3, v1))
    {
      UnsafeMutablePointer.deinitialize(count:)();
      if (!__OFSUB__(v2, v4))
      {
LABEL_5:
        UnsafeMutablePointer.deinitialize(count:)();
LABEL_11:
        JUMPOUT(0x192FABAB0);
      }
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  __break(1u);
  goto LABEL_10;
}

uint64_t _DequeBuffer.__deallocating_deinit()
{
  _DequeBuffer.deinit();

  return swift_deallocClassInstance();
}

uint64_t _DequeBuffer.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "_DequeStorage<");
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _DequeBufferHeader.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DequeBuffer<A>()
{
  return _DequeBuffer.description.getter();
}

void *one-time initialization function for _emptyDequeStorage()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  _emptyDequeStorage = (uint64_t)result;
  return result;
}

uint64_t _DequeBufferHeader.description.getter()
{
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x3A746E756F63202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", startSlot: ", 0xDuLL, 1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("@", 1uLL, 1);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x7469636170616328;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DequeBufferHeader()
{
  return _DequeBufferHeader.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DequeSlot()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 64;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _DequeSlot(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _DequeSlot(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _DequeSlot(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _DequeSlot(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t specialized _UnsafeWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 < 0 || a4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a2)
  {
    *(void *)a5 = result;
    *(void *)(a5 + 8) = a2;
    *(void *)(a5 + 16) = a3;
    *(void *)(a5 + 24) = a4;
    *(unsigned char *)(a5 + 32) = 0;
    return result;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = UnsafeBufferPointer.init(start:count:)();
  uint64_t v4 = v3;
  uint64_t result = UnsafeBufferPointer.init(start:count:)();
  if (v4 <= 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)a1 = v2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = result;
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (a2 > 0 || (a5 & 1) != 0)
  {
    if (a4) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = 0;
    }
    if (a5) {
      uint64_t v6 = a3;
    }
    *(void *)a6 = result;
    *(void *)(a6 + 8) = a2;
    *(void *)(a6 + 16) = v6;
    *(void *)(a6 + 24) = a4;
    *(unsigned char *)(a6 + 32) = a5 & 1 | (a4 == 0);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = UnsafeMutableBufferPointer.init(start:count:)();
  uint64_t v4 = v3;
  uint64_t result = UnsafeMutableBufferPointer.init(start:count:)();
  if (v4 <= 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (v6) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = 0;
    }
    *(void *)a1 = v2;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = v6 == 0;
  }
  return result;
}

uint64_t specialized _UnsafeMutableWrappedBuffer.init(mutating:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v10 = *a1;
  outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v10, (uint64_t)v11, &demangling cache variable for type metadata for UnsafePointer<()>?);
  uint64_t result = outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v11, (uint64_t)&v12, &demangling cache variable for type metadata for UnsafePointer<()>?);
  uint64_t v5 = *((void *)&v10 + 1);
  int v6 = *((unsigned __int8 *)a1 + 32);
  if (*((uint64_t *)&v10 + 1) <= 0 && v6 == 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v9 = *((void *)a1 + 2);
    uint64_t v8 = *((void *)a1 + 3);
    if (!v8) {
      int v6 = 1;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v8;
    *(unsigned char *)(a2 + 32) = v6;
  }
  return result;
}

double _UnsafeMutableWrappedBuffer.init(mutating:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = MEMORY[0x192FABA00](*a1, a1[1], a2);
  uint64_t v8 = v7;
  type metadata accessor for UnsafeBufferPointer();
  uint64_t v9 = type metadata accessor for Optional();
  long long v10 = *(void (**)(unsigned char *, void *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v20, a1 + 2, v9);
  v10(v18, v20, v9);
  void v15[2] = a2;
  uint64_t v11 = type metadata accessor for UnsafeMutableBufferPointer();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _UnsafeMutableWrappedBuffer.init(mutating:), (uint64_t)v15, MEMORY[0x1E4FBC248], v11, v12, (uint64_t)v16);
  _UnsafeMutableWrappedBuffer.init(_:_:)(v6, v8, v16[0], v16[1], v17, (uint64_t)v18);
  double result = *(double *)v18;
  long long v14 = v18[1];
  *(_OWORD *)a3 = v18[0];
  *(_OWORD *)(a3 + 16) = v14;
  *(unsigned char *)(a3 + 32) = v19;
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t _UnsafeMutableWrappedBuffer.count.getter()
{
  type metadata accessor for UnsafeMutableBufferPointer();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32);
  v2(v6, v0 + 16, v1);
  v2(v7, (uint64_t)v6, v1);
  if (v9) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v8;
  }
  uint64_t v4 = *(void *)(v0 + 8);
  uint64_t result = v4 + v3;
  if (__OFADD__(v4, v3)) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall _UnsafeMutableWrappedBuffer.deinitialize()()
{
  UnsafeMutableBufferPointer._deinitializeAll()();
  type metadata accessor for UnsafeMutableBufferPointer();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32);
  v2((uint64_t *)v3, v0 + 16, v1);
  v2(&v4, (uint64_t)v3, v1);
  if ((v5 & 1) == 0) {
    UnsafeMutableBufferPointer._deinitializeAll()();
  }
}

Swift::Void __swiftcall UnsafeMutableBufferPointer._deinitializeAll()()
{
  if (v0 >= 1)
  {
    if (UnsafeBufferPointer.baseAddress.getter())
    {
      UnsafeMutablePointer.deinitialize(count:)();
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v28 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v33 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v34 = v13;
  int v35 = (char *)&v28 - v12;
  int v38 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = v4[1];
  uint64_t v39 = *v4;
  uint64_t v31 = v15;
  uint64_t v32 = v4 + 2;
  uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v17 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  do
  {
    if (v14 == v15)
    {
      if (v38)
      {
        uint64_t v14 = v15;
        goto LABEL_15;
      }
      type metadata accessor for UnsafeMutableBufferPointer();
      uint64_t v18 = type metadata accessor for Optional();
      uint64_t v19 = *(void (**)(unsigned char *, void *, uint64_t))(*(void *)(v18 - 8) + 32);
      v19(v40, v32, v18);
      v19(&v41, v40, v18);
      if ((v43 & 1) != 0 || v42 < 1) {
        return v15;
      }
      uint64_t v14 = 0;
      int v38 = 1;
      uint64_t v39 = v41;
      uint64_t v15 = v42;
    }
    uint64_t v20 = v35;
    dispatch thunk of IteratorProtocol.next()();
    if ((*v16)(v9, 1, v5) == 1) {
      goto LABEL_12;
    }
    uint64_t v21 = *v17;
    (*v17)(v20, v9, v5);
    uint64_t v22 = UnsafeBufferPointer.baseAddress.getter();
    if (!v22) {
      goto LABEL_18;
    }
    uint64_t v23 = v20;
    uint64_t v24 = v33;
    uint64_t v25 = v22 + *(void *)(v34 + 72) * v14;
    v21(v33, v23, v5);
    v21((char *)v25, v24, v5);
  }
  while (!__OFADD__(v14++, 1));
  __break(1u);
LABEL_12:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  uint64_t v15 = v14;
  if ((v38 & 1) == 0) {
    return v15;
  }
LABEL_15:
  uint64_t v15 = v31 + v14;
  if (!__OFADD__(v31, v14)) {
    return v15;
  }
  __break(1u);
LABEL_18:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v58 = a1;
  uint64_t v55 = a3;
  uint64_t v9 = *((void *)a3 + 2);
  uint64_t v53 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v53 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v53);
  int v64 = (char *)&v50 - v11;
  uint64_t v65 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v63 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v62 = (char *)&v50 - v14;
  uint64_t v59 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v67 = (char *)&v50 - v16;
  uint64_t v17 = *(void *)(a4 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v57 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v50 - v20;
  uint64_t v60 = v5;
  uint64_t v22 = v5 + 16;
  type metadata accessor for UnsafeMutableBufferPointer();
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void (**)(char **, unsigned char *, uint64_t))(*(void *)(v23 - 8) + 32);
  uint64_t v25 = v22;
  uint64_t v26 = a4;
  v24((char **)v68, (unsigned char *)v25, v23);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v61 = a2;
  v27(v21, a2, v26);
  uint64_t v54 = v24;
  v24((char **)v72, v68, v23);
  if (v72[16] == 1)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v17 + 8);
    v28(v21, v26);
    uint64_t v29 = v17;
  }
  else
  {
    uint64_t v51 = *(void *)(v60 + 8);
    uint64_t v30 = dispatch thunk of Sequence.underestimatedCount.getter();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v17 + 8);
    v28(v21, v26);
    BOOL v31 = v51 < v30;
    uint64_t v29 = v17;
    if (v31)
    {
      uint64_t v32 = v58;
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v33 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      return _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(v32, (uint64_t)v55, v33, AssociatedConformanceWitness);
    }
  }
  uint64_t v55 = (void (*)(uint64_t, uint64_t))v28;
  v27(v57, v61, v26);
  uint64_t v36 = *(void (**)(char **, unsigned char *, uint64_t))(v60 + 8);
  uint64_t v35 = dispatch thunk of Sequence._copyContents(initializing:)();
  if ((void (*)(char **, unsigned char *, uint64_t))v35 != v36
    || (v54(&v69, v68, v23), uint64_t v35 = (uint64_t)v36, (v71 & 1) != 0))
  {
    v55(v61, v26);
LABEL_19:
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v58, v67, AssociatedTypeWitness);
    return v35;
  }
  uint64_t v54 = v36;
  uint64_t v37 = v70;
  if (v70 < 1)
  {
    uint64_t v37 = 0;
LABEL_16:
    v55(v61, v26);
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v57 = v69;
    uint64_t v59 = v26;
    uint64_t v60 = swift_getAssociatedConformanceWitness();
    uint64_t v38 = 0;
    uint64_t v39 = (unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    uint64_t v40 = (void (**)(char *, char *, uint64_t))(v65 + 32);
    uint64_t v41 = v63;
    while (1)
    {
      uint64_t v42 = v64;
      dispatch thunk of IteratorProtocol.next()();
      if ((*v39)(v42, 1, v9) == 1) {
        break;
      }
      uint64_t v43 = v29;
      uint64_t v44 = v42;
      uint64_t v45 = *v40;
      uint64_t v46 = v62;
      (*v40)(v62, v44, v9);
      uint64_t v47 = UnsafeBufferPointer.baseAddress.getter();
      if (!v47) {
        goto LABEL_22;
      }
      uint64_t v48 = v47 + *(void *)(v65 + 72) * v38;
      v45(v41, v46, v9);
      v45((char *)v48, v41, v9);
      ++v38;
      uint64_t v29 = v43;
      if (v37 == v38)
      {
        uint64_t v26 = v59;
        goto LABEL_16;
      }
    }
    v55(v61, v59);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v53);
  }
  uint64_t v35 = (uint64_t)v54 + v38;
  if (!__OFADD__(v54, v38)) {
    goto LABEL_19;
  }
  __break(1u);
LABEL_22:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for PartialRangeFrom();
  uint64_t v76 = *(void *)(v11 - 8);
  uint64_t v77 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v74 = (char *)&v56 - v12;
  uint64_t v75 = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  uint64_t v72 = (char *)&v56 - v13;
  uint64_t v67 = (void (*)(char *, uint64_t))AssociatedConformanceWitness;
  uint64_t v68 = type metadata accessor for PartialRangeUpTo();
  uint64_t v66 = *(void *)(v68 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v68);
  uint64_t v65 = (char *)&v56 - v15;
  uint64_t v64 = AssociatedTypeWitness;
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  char v71 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v63 = (char *)&v56 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v62 = (char *)&v56 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v70 = (char *)&v56 - v23;
  uint64_t v24 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v80 = a1;
  v27(v26, a1, a3);
  uint64_t v28 = a2;
  uint64_t v29 = _UnsafeMutableWrappedBuffer.count.getter();
  uint64_t v79 = a4;
  if (v29 == dispatch thunk of Collection.count.getter())
  {
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8);
    uint64_t v30 = v24 + 8;
    BOOL v31 = v32;
    v32((uint64_t)v26, a3);
    uint64_t v33 = v4;
    uint64_t v34 = *(void *)(v28 + 16);
    type metadata accessor for UnsafeMutableBufferPointer();
    uint64_t v35 = type metadata accessor for Optional();
    uint64_t v36 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v35 - 8) + 32);
    v36(v81, v4 + 2, v35);
    v36(v82, v81, v35);
    if (v83)
    {
      uint64_t v37 = v80;
      UnsafeMutableBufferPointer._initialize<A>(from:)(v80, *v33, v33[1], v34, a3, v79);
      return v31(v37, a3);
    }
    uint64_t v69 = v34;
    uint64_t v60 = v30;
    uint64_t v61 = (void (*)(uint64_t, uint64_t))v31;
    uint64_t v59 = v82[0];
    uint64_t v58 = v82[1];
    uint64_t v39 = v62;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v40 = v4[1];
    uint64_t v57 = *v4;
    uint64_t v41 = v70;
    uint64_t v56 = v40;
    dispatch thunk of Collection.index(_:offsetBy:)();
    uint64_t v42 = v78;
    uint64_t v43 = *(void (**)(char *, uint64_t))(v78 + 8);
    uint64_t v44 = v64;
    v43(v39, v64);
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    uint64_t v46 = v63;
    v45(v63, v41, v44);
    uint64_t v62 = (char *)*((void *)v67 + 1);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v67 = v43;
      v43(v46, v44);
      uint64_t v47 = v65;
      v45(v65, v41, v44);
      uint64_t v48 = v68;
      swift_getWitnessTable();
      uint64_t v63 = (char *)v45;
      uint64_t v49 = v41;
      uint64_t v50 = (uint64_t)v72;
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v47, v48);
      uint64_t v51 = v75;
      uint64_t v68 = swift_getAssociatedConformanceWitness();
      UnsafeMutableBufferPointer._initialize<A>(from:)(v50, v57, v56, v69, v51, v68);
      uint64_t v73 = *(void *)(v73 + 8);
      ((void (*)(uint64_t, uint64_t))v73)(v50, v51);
      uint64_t v52 = v71;
      ((void (*)(char *, char *, uint64_t))v63)(v71, v49, v44);
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        v67(v52, v44);
        uint64_t v53 = v74;
        (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v74, v49, v44);
        uint64_t v54 = v77;
        swift_getWitnessTable();
        uint64_t v55 = v80;
        Collection.subscript.getter();
        v61(v55, a3);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v53, v54);
        UnsafeMutableBufferPointer._initialize<A>(from:)(v50, v59, v58, v69, v51, v68);
        return ((uint64_t (*)(uint64_t, uint64_t))v73)(v50, v51);
      }
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferPointer._initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v26[1] = a6;
  uint64_t v27 = a3;
  uint64_t v29 = a2;
  uint64_t v32 = a4;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v30 = (char *)v26 - v10;
  uint64_t v28 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v26 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)v26 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v22 = a1;
  v21((char *)v26 - v19, a1, a5);
  if (dispatch thunk of Collection.count.getter() == v27)
  {
    uint64_t v23 = v27;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, a5);
    v21(v18, v22, a5);
    if (dispatch thunk of Sequence._copyContents(initializing:)() == v23)
    {
      swift_getAssociatedConformanceWitness();
      uint64_t v24 = v30;
      dispatch thunk of IteratorProtocol.next()();
      if ((*(unsigned int (**)(char *, uint64_t))(*(void *)(v32 - 8) + 48))(v24, 1) == 1)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v14, AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v24, v34);
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.assign<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v17 - v11;
  uint64_t v13 = *(void (**)(char *))(v7 + 16);
  uint64_t v17 = v14;
  v13((char *)&v17 - v11);
  uint64_t v18 = a4;
  uint64_t v15 = dispatch thunk of Collection.count.getter();
  if (v15 == _UnsafeMutableWrappedBuffer.count.getter())
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a3);
    _UnsafeMutableWrappedBuffer.deinitialize()();
    ((void (*)(char *, uint64_t, uint64_t))v13)(v10, v17, a3);
    return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v10, a2, a3, v18);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (type metadata accessor for Array() == a1 && (_isBridgedVerbatimToObjectiveC<A>(_:)() & 1) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  else {
    return dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
  }
}

uint64_t _Deque._Storage.description.getter()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x61726F74535F2E3ELL;
  v1._object = (void *)0xEA00000000006567;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = _DequeBufferHeader.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x3C6575716544;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _Deque<A>._Storage()
{
  return _Deque._Storage.description.getter();
}

uint64_t _Deque._Storage.init()()
{
  if (one-time initialization token for _emptyDequeStorage != -1) {
    swift_once();
  }
  swift_retain();

  return ManagedBufferPointer.init(unsafeBufferObject:)();
}

uint64_t _Deque._Storage.init(minimumCapacity:)()
{
  type metadata accessor for _DequeBuffer();
  static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();

  return ManagedBufferPointer.init(unsafeBufferObject:)();
}

void *closure #1 in _Deque._Storage.capacity.getter@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v15+ ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80)), v13);
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v13, a6);
  }
  return result;
}

uint64_t closure #1 in _Deque._Storage.count.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

uint64_t _ss20ManagedBufferPointerVsRi__rlE25withUnsafeMutablePointersyqd_0_qd_0_SpyxG_Spyq_Gtqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t result = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = *(void *)(v19 + 64);
  BOOL v22 = __OFADD__(v20, v21);
  uint64_t v23 = v20 + v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v24 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 1;
  BOOL v25 = __CFADD__(v23, v24);
  uint64_t v26 = v23 + v24;
  if (v25)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = v15(v13 + v20, v13 + ((v26 - 1) & -v24), (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v17, a6);
  }
  return result;
}

uint64_t _Deque._Storage.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return _ss20ManagedBufferPointerVsRi__rlE25withUnsafeMutablePointersyqd_0_qd_0_SpyxG_Spyq_Gtqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a6, (uint64_t)v12, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v10, a5, MEMORY[0x1E4FBC0F0], (uint64_t)&v17);
}

Swift::Void __swiftcall _Deque._Storage.ensureUnique()()
{
  uint64_t v0 = type metadata accessor for ManagedBufferPointer();
  if ((MEMORY[0x192FABB50](v0) & 1) == 0)
  {
    _Deque._Storage._makeUniqueCopy()();
  }
}

Swift::Void __swiftcall _Deque._Storage._makeUniqueCopy()()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(v0 + 16);
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._Storage._makeUniqueCopy(), (uint64_t)&v3, v2, v4, v0, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  swift_release();
  uint64_t *v1 = v5;
}

uint64_t _Deque._UnsafeHandle.copyElements()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _DequeBuffer();
  v9[8] = a1;
  v9[9] = a2;
  static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
  uint64_t v6 = ManagedBufferPointer.init(unsafeBufferObject:)();
  uint64_t v7 = v6;
  if (*(uint64_t *)(a1 + 8) >= 1)
  {
    MEMORY[0x1F4188790](v6);
    void v9[2] = a3;
    v9[3] = a1;
    v9[4] = a2;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque._UnsafeHandle.copyElements(), (uint64_t)v9, v7, a3, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return v7;
}

Swift::Int __swiftcall _Deque._Storage._growCapacity(to:linearly:)(Swift::Int to, Swift::Bool linearly)
{
  if (linearly)
  {
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v8);
    uint64_t v5 = v9;
  }
  else
  {
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v8);
    double v6 = ceil((double)v9 * 1.5);
    if ((~*(void *)&v6 & 0x7FF0000000000000) == 0 || v6 <= -9.22337204e18 || v6 >= 9.22337204e18)
    {
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v5 = (uint64_t)v6;
  }
  if (v5 <= to) {
    return to;
  }
  else {
    return v5;
  }
}

Swift::Void __swiftcall _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = type metadata accessor for ManagedBufferPointer();
  char v8 = MEMORY[0x192FABB50](v7);
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v9);
  if (v10 < minimumCapacity || (v8 & 1) == 0) {
    _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(minimumCapacity, linearGrowth);
  }
}

uint64_t specialized _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(*v2 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (v5 < a1)
  {
    uint64_t v7 = *v2;
    char v8 = (uint64_t *)(*v2 + 16);
    uint64_t v9 = *v8;
    if (!isUniquelyReferenced_nonNull_native)
    {
      if ((a2 & 1) == 0)
      {
        double v22 = ceil((double)v9 * 1.5);
        if ((~*(void *)&v22 & 0x7FF0000000000000) == 0 || v22 <= -9.22337204e18 || v22 >= 9.22337204e18) {
          goto LABEL_37;
        }
        uint64_t v9 = (uint64_t)v22;
      }
      if (v9 <= a1) {
        uint64_t v23 = a1;
      }
      else {
        uint64_t v23 = v9;
      }
      uint64_t v12 = specialized _Deque._UnsafeHandle.copyElements(minimumCapacity:)(v23, v8, v7 + 40);
      goto LABEL_31;
    }
    if (a2)
    {
LABEL_8:
      if (v9 <= a1) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = v9;
      }
      uint64_t v12 = specialized _Deque._UnsafeHandle.moveElements(minimumCapacity:)(v11, v8, v7 + 40);
LABEL_31:
      uint64_t *v2 = v12;
      return swift_release();
    }
    double v10 = ceil((double)v9 * 1.5);
    if ((~*(void *)&v10 & 0x7FF0000000000000) != 0 && v10 > -9.22337204e18 && v10 < 9.22337204e18)
    {
      uint64_t v9 = (uint64_t)v10;
      goto LABEL_8;
    }
LABEL_37:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (isUniquelyReferenced_nonNull_native) {
    goto LABEL_35;
  }
  uint64_t v13 = *v2;
  uint64_t v14 = (uint64_t *)(*v2 + 16);
  uint64_t v15 = *v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  uint64_t v16 = swift_allocObject();
  long long v17 = *(_OWORD *)(v13 + 24);
  *(void *)(v16 + 16) = v15;
  uint64_t v18 = (uint64_t *)(v16 + 16);
  *(_OWORD *)(v16 + 24) = v17;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v19 < 0) {
    goto LABEL_34;
  }
  if (v19 == 16) {
    goto LABEL_17;
  }
  _swift_getObjCClassInstanceExtents();
  if (v20 < 0)
  {
LABEL_34:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_35:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_36;
  }
  if (v20 != 40)
  {
LABEL_36:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_37;
  }
LABEL_17:
  if ((_swift_objcClassUsesNativeSwiftReferenceCounting() & 1) == 0) {
    goto LABEL_36;
  }
  if (*(uint64_t *)(v13 + 24) >= 1)
  {
    specialized _Deque._UnsafeHandle.segments()(v14, v13 + 40, (uint64_t)v24);
    specialized _Deque._UnsafeHandle.initialize(at:from:)(*(void *)(v13 + 32), v24[0], v24[1], v18, v16 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v25, (uint64_t)v26, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v26, (uint64_t)v27, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
    if ((v28 & 1) == 0) {
      specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v27[0], v27[1], v18, v16 + 40, 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
    }
  }
  uint64_t *v2 = v16;
  return swift_release();
}

Swift::Void __swiftcall _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(v2 + 16);
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.capacity.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v17);
  uint64_t v8 = type metadata accessor for ManagedBufferPointer();
  uint64_t v9 = MEMORY[0x192FABB50](v8);
  char v10 = v9;
  if (v19 < minimumCapacity)
  {
    uint64_t v11 = *v3;
    Swift::Int v12 = _Deque._Storage._growCapacity(to:linearly:)(minimumCapacity, linearGrowth);
    uint64_t v17 = v7;
    uint64_t v18 = MEMORY[0x1F4188790](v12);
    if (v10) {
      uint64_t v13 = partial apply for closure #2 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:);
    }
    else {
      uint64_t v13 = partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:);
    }
    uint64_t v14 = v11;
    goto LABEL_8;
  }
  if ((v9 & 1) == 0)
  {
    MEMORY[0x1F4188790](v9);
    uint64_t v17 = v7;
    uint64_t v13 = partial apply for closure #1 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:);
LABEL_8:
    _Deque._Storage.read<A>(_:)((uint64_t)v13, (uint64_t)&v16, v14, v7, v4, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    Swift::Int v15 = v19;
    swift_release();
    *uint64_t v3 = v15;
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  if (v3 > a1) {
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  uint64_t v6 = (uint64_t *)swift_allocObject();
  v6[2] = _swift_stdlib_malloc_size(v6) - 40;
  v6[3] = v3;
  v6[4] = 0;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v7 < 0) {
    goto LABEL_12;
  }
  if (v7 == 16) {
    goto LABEL_6;
  }
  _swift_getObjCClassInstanceExtents();
  if (v8 < 0)
  {
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_14;
  }
  if (v8 != 40)
  {
LABEL_14:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_6:
  if ((_swift_objcClassUsesNativeSwiftReferenceCounting() & 1) == 0) {
    goto LABEL_14;
  }
  if (v3 > 0)
  {
    specialized _Deque._UnsafeHandle.segments()(a2, a3, (uint64_t)v11);
    specialized _UnsafeMutableWrappedBuffer.init(mutating:)(v11, (uint64_t)v12);
    uint64_t v9 = specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v12[0], v12[1], v6 + 2, (uint64_t)(v6 + 5), 211, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v13, (uint64_t)v14, &demangling cache variable for type metadata for UnsafeMutableBufferPointer<()>?);
    outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v14, (uint64_t)v15, &demangling cache variable for type metadata for UnsafeMutableBufferPointer<()>?);
    if ((v16 & 1) == 0) {
      specialized _Deque._UnsafeHandle.initialize(at:from:)(v9, v15[0], v15[1], v6 + 2, (uint64_t)(v6 + 5), 211, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:));
    }
    a2[1] = 0;
  }
  return (uint64_t)v6;
}

uint64_t _Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 > a1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v8 = type metadata accessor for _DequeBuffer();
    MEMORY[0x1F4188790](v8);
    uint64_t v13 = v4;
    static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
    uint64_t v9 = ManagedBufferPointer.init(unsafeBufferObject:)();
    uint64_t v10 = v9;
    if (v4 >= 1)
    {
      MEMORY[0x1F4188790](v9);
      uint64_t v12[2] = a4;
      v12[3] = a2;
      uint64_t v13 = a3;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque._UnsafeHandle.moveElements(minimumCapacity:), (uint64_t)v12, v10, a4, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      *(void *)(a2 + 8) = 0;
    }
    return v10;
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[1] > a1) {
    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DequeBuffer<()>);
  uint64_t v5 = (uint64_t *)swift_allocObject();
  size_t v6 = _swift_stdlib_malloc_size(v5);
  uint64_t v7 = a2[1];
  v5[2] = v6 - 40;
  v5[3] = v7;
  v5[4] = 0;
  swift_getObjectType();
  _swift_getObjCClassInstanceExtents();
  if (v8 < 0)
  {
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_15;
  }
  if (v8 != 16)
  {
    _swift_getObjCClassInstanceExtents();
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (v9 != 40) {
        goto LABEL_15;
      }
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_6:
  if (_swift_objcClassUsesNativeSwiftReferenceCounting())
  {
    uint64_t v10 = a2[1];
    if (v10 <= 0) {
      return (uint64_t)v5;
    }
    if (v5[3] == v10 && !v5[4])
    {
      specialized _Deque._UnsafeHandle.segments()(a2, a3, (uint64_t)v13);
      uint64_t v11 = specialized _Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], v5 + 2, (uint64_t)(v5 + 5), 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)&v14, (uint64_t)v15, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      outlined init with take of UnsafeBufferPointer<()>?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for UnsafeBufferPointer<()>?);
      if ((v17 & 1) == 0) {
        specialized _Deque._UnsafeHandle.initialize(at:from:)(v11, v16[0], v16[1], v5 + 2, (uint64_t)(v5 + 5), 200, (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.initialize(from:count:));
      }
      return (uint64_t)v5;
    }
    goto LABEL_14;
  }
LABEL_15:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 8) > a1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = type metadata accessor for _DequeBuffer();
    MEMORY[0x1F4188790](v7);
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
    uint64_t v8 = ManagedBufferPointer.init(unsafeBufferObject:)();
    uint64_t v9 = v8;
    if (*(uint64_t *)(a2 + 8) >= 1)
    {
      MEMORY[0x1F4188790](v8);
      long long v11[2] = a4;
      v11[3] = a2;
      uint64_t v12 = a3;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque._UnsafeHandle.copyElements(minimumCapacity:), (uint64_t)v11, v9, a4, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    }
    return v9;
  }
  return result;
}

uint64_t _Deque._UnsafeHandle.ptr(at:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 0x8000000000000000) == 0 && *a2 >= a1) {
    return a3 + *(void *)(*(void *)(a4 - 8) + 72) * a1;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.buffer(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 < a2) {
    goto LABEL_7;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_7:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  return UnsafeBufferPointer.init(start:count:)();
}

uint64_t _Deque._UnsafeHandle.limSlot.getter(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.slot(after:)(uint64_t a1, uint64_t *a2)
{
  if (*a2 <= a1) {
    goto LABEL_7;
  }
  uint64_t result = a1 + 1;
  if (result >= *a2) {
    return 0;
  }
  if (a1 <= -2)
  {
LABEL_7:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::_DequeSlot __swiftcall _Deque._UnsafeHandle.slot(before:)(Swift::_DequeSlot before)
{
  uint64_t v2 = *v1;
  if (*v1 <= before.position) {
    goto LABEL_10;
  }
  if (!before.position)
  {
    if (v2 > 0) {
      return (Swift::_DequeSlot)(v2 - 1);
    }
LABEL_10:
    result.position = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  BOOL v3 = __OFSUB__(before.position, 1);
  result.position = before.position - 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (result.position < 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 < a1) {
    goto LABEL_15;
  }
  BOOL v5 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 < 0)
  {
    if ((result & 0x8000000000000000) == 0) {
      return result;
    }
    BOOL v5 = __OFADD__(result, v3);
    result += v3;
    if (v5) {
      goto LABEL_14;
    }
LABEL_10:
    if ((result & 0x8000000000000000) == 0) {
      return result;
    }
LABEL_15:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  BOOL v5 = __OFSUB__(result, v3);
  uint64_t v6 = result - v3;
  if (v6 < 0 != v5) {
    goto LABEL_10;
  }
  if (v5)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = v6;
  if (v6 < 0) {
    goto LABEL_15;
  }
  return result;
}

Swift::_DequeSlot __swiftcall _Deque._UnsafeHandle.slot(forOffset:)(Swift::Int forOffset)
{
  if (forOffset < 0) {
    goto LABEL_9;
  }
  Swift::Int v2 = *v1;
  if (*v1 < forOffset) {
    goto LABEL_9;
  }
  result.position = v1[2] + forOffset;
  BOOL v4 = __OFSUB__(result.position, v2);
  Swift::Int v5 = result.position - v2;
  if (v5 < 0 != v4)
  {
    if ((result.position & 0x8000000000000000) == 0) {
      return result;
    }
LABEL_9:
    result.position = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result.position = v5;
  if (v5 < 0) {
    goto LABEL_9;
  }
  return result;
}

void *specialized _Deque._UnsafeHandle.segments()@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = result[2];
  uint64_t v6 = *result - v5;
  if (__OFSUB__(*result, v5))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = result[1];
  BOOL v9 = v5 < 0 || *result < v5;
  if (v6 < v7)
  {
    if (!v9)
    {
      if (!__OFSUB__(v7, v6))
      {
        Swift::_DequeSlot result = (void *)specialized _UnsafeWrappedBuffer.init(first:count:second:count:)(a2 + v5, v6, a2, v7 - v6, (uint64_t)&v14);
        uint64_t v10 = v14;
        long long v11 = v15;
        uint64_t v12 = v16;
        char v13 = v17;
LABEL_15:
        *(void *)a3 = v10;
        *(_OWORD *)(a3 + 8) = v11;
        *(void *)(a3 + 24) = v12;
        *(unsigned char *)(a3 + 32) = v13;
        return result;
      }
      goto LABEL_17;
    }
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_19;
  }
  if (v9) {
    goto LABEL_18;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = 0;
    uint64_t v10 = a2 + v5;
    long long v11 = (unint64_t)result[1];
    char v13 = 1;
    goto LABEL_15;
  }
LABEL_19:
  Swift::_DequeSlot result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.segments()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t result = a1[2];
  uint64_t v8 = v6 - result;
  if (__OFSUB__(v6, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = a1[1];
    _Deque._UnsafeHandle.ptr(at:)(result, a1, a2, a3);
    if (v8 >= v11)
    {
      uint64_t result = UnsafeBufferPointer.init(start:count:)();
      uint64_t v13 = 0;
      char v14 = 1;
      LOBYTE(v16) = 1;
      long long v12 = v15;
      goto LABEL_6;
    }
    uint64_t result = _Deque._UnsafeHandle.ptr(at:)(0, a1, a2, a3);
    if (!__OFSUB__(a1[1], v8))
    {
      _UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)&v16);
      long long v12 = v17;
      uint64_t v13 = v18;
      char v14 = v19;
      uint64_t result = v16;
LABEL_6:
      *(void *)a4 = result;
      *(_OWORD *)(a4 + 8) = v12;
      *(void *)(a4 + 24) = v13;
      *(unsigned char *)(a4 + 32) = v14;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.segments(forOffsets:)@<X0>(Swift::Int a1@<X0>, Swift::Int a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((a1 & 0x8000000000000000) == 0 && a3[1] >= a2)
  {
    v12.unint64_t position = _Deque._UnsafeHandle.slot(forOffset:)(a1).position;
    v13.unint64_t position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
    BOOL v14 = __OFSUB__(a2, a1);
    Swift::Int v15 = a2 - a1;
    if (v14)
    {
      __break(1u);
    }
    else
    {
      unint64_t position = v13.position;
      _Deque._UnsafeHandle.ptr(at:)(v12.position, a3, a4, a5);
      if (!v15 || v12.position < position)
      {
        uint64_t result = UnsafeBufferPointer.init(start:count:)();
        uint64_t v18 = 0;
        char v19 = 1;
        LOBYTE(v22) = 1;
        long long v17 = v21;
        goto LABEL_9;
      }
      if (!__OFSUB__(*a3, v12.position))
      {
        _Deque._UnsafeHandle.ptr(at:)(0, a3, a4, a5);
        _UnsafeWrappedBuffer.init(first:count:second:count:)((uint64_t)&v22);
        long long v17 = v23;
        uint64_t v18 = v24;
        char v19 = v25;
        uint64_t result = v22;
LABEL_9:
        *(void *)a6 = result;
        *(_OWORD *)(a6 + 8) = v17;
        *(void *)(a6 + 24) = v18;
        *(unsigned char *)(a6 + 32) = v19;
        return result;
      }
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.availableSegments()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1], a1);
  unint64_t v9 = v8;
  if (a1[1] >= *a1)
  {
    _Deque._UnsafeHandle.ptr(at:)(v8, a1, a2, a3);
    uint64_t result = UnsafeMutableBufferPointer.init(start:count:)();
    uint64_t v13 = result;
    uint64_t v15 = v19;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    BOOL v18 = 1;
    goto LABEL_11;
  }
  uint64_t v10 = a1[2];
  if (v8 < v10)
  {
    uint64_t v11 = _Deque._UnsafeHandle.buffer(for:)(v8, v10, a1);
    uint64_t result = MEMORY[0x192FABA00](v11);
    uint64_t v13 = result;
    uint64_t v15 = v14;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    BOOL v18 = 1;
LABEL_11:
    *(void *)a4 = v13;
    *(void *)(a4 + 8) = v15;
    *(void *)(a4 + 16) = v16;
    *(void *)(a4 + 24) = v17;
    *(unsigned char *)(a4 + 32) = v18;
    return result;
  }
  unint64_t v20 = _Deque._UnsafeHandle.limSlot.getter(a1);
  if (v20 < v9
    || (uint64_t v21 = _Deque._UnsafeHandle.buffer(for:)(v9, v20, a1),
        uint64_t v22 = MEMORY[0x192FABA00](v21),
        uint64_t v15 = v23,
        uint64_t v24 = a1[2],
        v24 < 0))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v13 = v22;
    uint64_t v25 = _Deque._UnsafeHandle.buffer(for:)(0, v24, a1);
    uint64_t result = MEMORY[0x192FABA00](v25);
    if (v15 > 0)
    {
      BOOL v18 = v17 == 0;
      if (v17) {
        uint64_t v16 = result;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || &__dst[__n] > __src && &__src[__n] > __dst)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.initialize(at:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = result + a3;
  if (__OFADD__(result, a3))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*a4 < v7) {
    goto LABEL_13;
  }
  if (a3 < 1) {
    return result;
  }
  if (result < 0 || *a4 < result) {
    goto LABEL_13;
  }
  if (!a2)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_13;
  }
  a7(a2, a3, a5 + result);
  uint64_t result = v7;
  if (v7 < 0)
  {
LABEL_13:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _Deque._UnsafeHandle.initialize(at:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t), void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = result + a3;
  if (__OFADD__(result, a3))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*a4 < v9) {
    goto LABEL_10;
  }
  if (a3 < 1) {
    return result;
  }
  uint64_t v14 = _Deque._UnsafeHandle.ptr(at:)(result, a4, a5, a6);
  uint64_t v15 = a8(a2, a3, a6);
  if (!v15)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_10;
  }
  a9(v15, a3, v14, a6);
  uint64_t result = v9;
  if (v9 < 0)
  {
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

Swift::tuple_source__DequeSlot_target__DequeSlot __swiftcall _Deque._UnsafeHandle.move(from:to:count:)(Swift::_DequeSlot from, Swift::_DequeSlot to, Swift::Int count)
{
  if (count < 0) {
    goto LABEL_11;
  }
  Swift::Int position = from.position;
  if (__OFADD__(from.position, count))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v8 = v3;
  if (*v3 < from.position + count)
  {
LABEL_11:
    Swift::Int v12 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_12;
  }
  Swift::Int v9 = to.position;
  if (__OFADD__(to.position, count))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*v3 < to.position + count) {
    goto LABEL_11;
  }
  if (count)
  {
    uint64_t v10 = v5;
    uint64_t v11 = v4;
    _Deque._UnsafeHandle.ptr(at:)(to.position, v3, v4, v5);
    _Deque._UnsafeHandle.ptr(at:)(position, v8, v11, v10);
    UnsafeMutablePointer.moveInitialize(from:count:)();
    Swift::Int position = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(position, count, v8);
    Swift::Int v9 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v9, count, v8);
  }
  Swift::Int v12 = position;
  Swift::Int v13 = v9;
LABEL_12:
  result.target.Swift::Int position = v13;
  result.source.Swift::Int position = v12;
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(Swift::Int a1, Swift::Int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  BOOL v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(void *)(v19 + 8) < v20) {
    goto LABEL_8;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, a7);
  uint64_t v21 = dispatch thunk of Collection.count.getter();
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v21 != a2 - a1)
  {
LABEL_8:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v16 + 8))(v18, a7);
  if (a1 != a2)
  {
    _Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, a4, a5, a6, (uint64_t)v25);
    _UnsafeMutableWrappedBuffer.init(mutating:)(v25, a6, (uint64_t)v24);
    uint64_t v23 = type metadata accessor for _UnsafeMutableWrappedBuffer();
    return _UnsafeMutableWrappedBuffer.assign<A>(from:)(a3, v23, a7, a8);
  }
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.uncheckedAppend(_:)(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (v1 >= *a1
    || (uint64_t result = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], v1, a1), result < 0)
    || *a1 < result)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    a1[1] = v1 + 1;
  }
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedAppend(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12 < *a2)
  {
    uint64_t v13 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a2[2], v12, a2);
    uint64_t v14 = _Deque._UnsafeHandle.ptr(at:)(v13, a2, a3, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14, v10, a4);
    uint64_t v16 = a2[1];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (!v17)
    {
      a2[1] = v18;
      return result;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int _Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(uint64_t a1, uint64_t a2, Swift::Int *a3, uint64_t a4, uint64_t a5)
{
  Swift::Int result = a3[1];
  BOOL v8 = __OFADD__(result, a2);
  Swift::Int v9 = result + a2;
  if (v8)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*a3 < v9)
  {
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < 1) {
    return result;
  }
  a3[1] = v9;
  if (v9 < result)
  {
LABEL_9:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _Deque._UnsafeHandle.segments(forOffsets:)(result, v9, a3, a4, a5, (uint64_t)v15);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v15, a5, (uint64_t)v14);
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v11 = type metadata accessor for _UnsafeMutableWrappedBuffer();
  uint64_t v12 = type metadata accessor for UnsafeBufferPointer();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v15, v11, v12, WitnessTable);
}

uint64_t _Deque._UnsafeHandle.uncheckedPrepend(_:)(uint64_t a1, Swift::_DequeSlot *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11[1] < *v11)
  {
    Swift::Int position = _Deque._UnsafeHandle.slot(before:)(a2[2]).position;
    uint64_t v13 = _Deque._UnsafeHandle.ptr(at:)(position, a2, a3, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v13, v10, a4);
    a2[2].Swift::Int position = position;
    Swift::Int v15 = a2[1].position;
    BOOL v16 = __OFADD__(v15, 1);
    Swift::Int v17 = v15 + 1;
    if (!v16)
    {
      a2[1].Swift::Int position = v17;
      return result;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*a3 >= a1 && *a3 >= a2)
  {
    _Deque._UnsafeHandle.ptr(at:)(a1, a3, a4, a5);
    if (a1 >= a2)
    {
      if (!__OFSUB__(*a3, a1))
      {
        _Deque._UnsafeHandle.ptr(at:)(0, a3, a4, a5);
        _UnsafeMutableWrappedBuffer.init(first:count:second:count:)((uint64_t)&v17);
        long long v16 = v18;
        uint64_t v13 = v19;
        char v14 = v20;
        uint64_t result = v17;
        goto LABEL_8;
      }
    }
    else
    {
      if (!__OFSUB__(a2, a1))
      {
        uint64_t result = UnsafeMutableBufferPointer.init(start:count:)();
        uint64_t v13 = 0;
        char v14 = 1;
        LOBYTE(v17) = 1;
        long long v16 = v15;
LABEL_8:
        *(void *)a6 = result;
        *(_OWORD *)(a6 + 8) = v16;
        *(void *)(a6 + 24) = v13;
        *(unsigned char *)(a6 + 32) = v14;
        return result;
      }
      __break(1u);
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)(uint64_t a1, uint64_t a2, Swift::Int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  long long v18 = &v27[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(void *)(v19 + 8) >= v20
    && (uint64_t v21 = v16,
        uint64_t v22 = v15,
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v18, a1, a7),
        uint64_t v26 = a8,
        dispatch thunk of Collection.count.getter() == a2))
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v14 + 8);
    v23(v18, a7);
    if (a2 < 1)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v23)(a1, a7);
    }
    else
    {
      _Deque._UnsafeHandle.openGap(ofSize:atOffset:)(a2, a3, a4, v22, v21, (uint64_t)v27);
      uint64_t v24 = type metadata accessor for _UnsafeMutableWrappedBuffer();
      return _UnsafeMutableWrappedBuffer.initialize<A>(from:)(a1, v24, a7, v26);
    }
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double _Deque._UnsafeHandle.openGap(ofSize:atOffset:)@<D0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a2 < 0) {
    goto LABEL_64;
  }
  uint64_t v8 = a3[1];
  Swift::Int v9 = v8 - a2;
  if (v8 < a2) {
    goto LABEL_64;
  }
  if (__OFADD__(v8, a1))
  {
    __break(1u);
    goto LABEL_56;
  }
  if (*a3 < v8 + a1 || a1 <= 0) {
    goto LABEL_64;
  }
  uint64_t v13 = a3[2];
  if (v9 <= a2)
  {
    uint64_t v23 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v13, v8, a3);
    uint64_t v24 = a3[1];
    if (!__OFADD__(v24, a1))
    {
      uint64_t v13 = v23;
      Swift::Int v25 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v24 + a1, a3);
      v15.Swift::Int position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
      unint64_t v26 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v15.position, a1, a3);
      v14.Swift::Int position = v26;
      uint64_t v27 = *a3;
      unint64_t v28 = v13;
      if (v13 || (unint64_t v28 = *a3, (v27 & 0x8000000000000000) == 0))
      {
        unint64_t v29 = v25;
        if (v25 || (unint64_t v29 = *a3, (v27 & 0x8000000000000000) == 0))
        {
          if (v28 >= v15.position)
          {
            if (v29 < v26)
            {
              uint64_t v34 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
              if (v34 < 0) {
                goto LABEL_64;
              }
              _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v34, 0, v25);
              BOOL v35 = __OFSUB__(v9, v25);
              v9 -= v25;
              if (v35)
              {
                __break(1u);
LABEL_37:
                if (v13 < v14.position) {
                  goto LABEL_64;
                }
                if (__OFSUB__(v17, v13)) {
                  goto LABEL_61;
                }
                _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v13, v14, v17 - v13);
                uint64_t v32 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
                if (v32 < 0) {
                  goto LABEL_64;
                }
                v31.Swift::Int position = 0;
                Swift::Int position = v15.position;
                goto LABEL_42;
              }
            }
          }
          else if (v29 >= v26)
          {
            uint64_t v40 = v13;
            if (!v13)
            {
              uint64_t v40 = *a3;
              if (v27 < 0) {
                goto LABEL_64;
              }
            }
            if (v40 >= a3[2]) {
              goto LABEL_64;
            }
            _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)a1, v13);
            Swift::Int v9 = *a3 - v15.position;
            if (__OFSUB__(*a3, v15.position))
            {
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
          }
          else
          {
            _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)a1, v13);
            uint64_t v30 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
            if (v30 < 0) {
              goto LABEL_64;
            }
            _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v30, 0, a1);
            uint64_t v17 = v9 - a1;
            if (__OFSUB__(v9, a1)) {
              goto LABEL_62;
            }
            Swift::Int v9 = v17 - v13;
            if (__OFSUB__(v17, v13))
            {
              __break(1u);
              goto LABEL_28;
            }
          }
          _Deque._UnsafeHandle.move(from:to:count:)(v15, v14, v9);
          uint64_t v41 = a3[1];
          BOOL v35 = __OFADD__(v41, a1);
          uint64_t v42 = v41 + a1;
          if (v35)
          {
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
          a3[1] = v42;
          if (v14.position || (v14.Swift::Int position = *a3, (*a3 & 0x8000000000000000) == 0))
          {
            Swift::Int v38 = v15.position;
            Swift::Int v39 = v14.position;
            goto LABEL_54;
          }
        }
      }
      while (1)
      {
LABEL_64:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v14.Swift::Int position = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v13, -a1, a3);
  v15.Swift::Int position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
  uint64_t v16 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v15.position, -a1, a3);
  Swift::Int v9 = v16;
  uint64_t v17 = *a3;
  Swift::Int v18 = v15.position;
  if (!v15.position)
  {
    Swift::Int v18 = *a3;
    if (v17 < 0) {
      goto LABEL_64;
    }
  }
  unint64_t v19 = v16;
  if (!v16)
  {
    unint64_t v19 = *a3;
    if (v17 < 0) {
      goto LABEL_64;
    }
  }
  if (v18 < v13)
  {
    if (v19 < v14.position)
    {
      if (__OFSUB__(v17, v13))
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v13, v14, v17 - v13);
      uint64_t v20 = _Deque._UnsafeHandle.limSlot.getter(a3) - a1;
      if (v20 < 0) {
        goto LABEL_64;
      }
      v21.Swift::Int position = 0;
      Swift::Int v22 = a1;
      goto LABEL_31;
    }
    goto LABEL_37;
  }
LABEL_28:
  if (v19 < v14.position)
  {
    Swift::Int v22 = v17 - v14.position;
    if (__OFSUB__(v17, v14.position))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v21.Swift::Int position = v13;
    uint64_t v20 = v14.position;
LABEL_31:
    _Deque._UnsafeHandle.move(from:to:count:)(v21, (Swift::_DequeSlot)v20, v22);
    v31.Swift::Int position = a1;
    uint64_t v32 = 0;
    Swift::Int position = v9;
    goto LABEL_42;
  }
  v31.Swift::Int position = v13;
  uint64_t v32 = v14.position;
  Swift::Int position = a2;
LABEL_42:
  _Deque._UnsafeHandle.move(from:to:count:)(v31, (Swift::_DequeSlot)v32, position);
  a3[2] = v14.position;
  uint64_t v36 = a3[1];
  BOOL v35 = __OFADD__(v36, a1);
  uint64_t v37 = v36 + a1;
  if (v35)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  a3[1] = v37;
  if (!v15.position)
  {
    v15.Swift::Int position = *a3;
    if (*a3 < 0) {
      goto LABEL_64;
    }
  }
  Swift::Int v38 = v9;
  Swift::Int v39 = v15.position;
LABEL_54:
  _Deque._UnsafeHandle.mutableWrappedBuffer(between:and:)(v38, v39, a3, a4, a5, (uint64_t)v47);
  char v43 = v48;
  double result = *(double *)v47;
  long long v45 = v47[1];
  *(_OWORD *)a6 = v47[0];
  *(_OWORD *)(a6 + 16) = v45;
  *(unsigned char *)(a6 + 32) = v43;
  return result;
}

uint64_t specialized _Deque._UnsafeHandle.uncheckedRemoveFirst()(uint64_t *a1)
{
  if (a1[1] >= 1)
  {
    uint64_t v2 = a1[2];
    if ((v2 & 0x8000000000000000) == 0 && *a1 >= v2)
    {
      uint64_t result = specialized _Deque._UnsafeHandle.slot(after:)(v2, a1);
      a1[2] = result;
      uint64_t v4 = a1[1];
      BOOL v5 = __OFSUB__(v4, 1);
      uint64_t v6 = v4 - 1;
      if (!v5)
      {
        a1[1] = v6;
        return result;
      }
      __break(1u);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedRemoveFirst()(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1[1] > 0)
  {
    _Deque._UnsafeHandle.ptr(at:)(a1[2], a1, a2, a3);
    UnsafeMutablePointer.move()();
    uint64_t result = specialized _Deque._UnsafeHandle.slot(after:)(a1[2], a1);
    a1[2] = result;
    uint64_t v5 = a1[1];
    BOOL v6 = __OFSUB__(v5, 1);
    uint64_t v7 = v5 - 1;
    if (!v6)
    {
      a1[1] = v7;
      return result;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._UnsafeHandle.uncheckedRemoveLast()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[1];
  if (v3 > 0)
  {
    v7.Swift::Int position = _Deque._UnsafeHandle.slot(forOffset:)(v3 - 1).position;
    _Deque._UnsafeHandle.ptr(at:)(v7.position, a1, a2, a3);
    uint64_t result = UnsafeMutablePointer.move()();
    uint64_t v9 = a1[1];
    BOOL v10 = __OFSUB__(v9, 1);
    uint64_t v11 = v9 - 1;
    if (!v10)
    {
      a1[1] = v11;
      return result;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall _Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(Swift::Int a1)
{
  if (v1[1] < a1) {
    goto LABEL_7;
  }
  if (a1 < 1) {
    return;
  }
  uint64_t v5 = v3;
  BOOL v6 = v1;
  _Deque._UnsafeHandle.segments(forOffsets:)(0, a1, v1, v2, v3, (uint64_t)v11);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v11, v5, (uint64_t)v10);
  type metadata accessor for _UnsafeMutableWrappedBuffer();
  _UnsafeMutableWrappedBuffer.deinitialize()();
  v6[2] = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(v6[2], a1, v6);
  uint64_t v7 = v6[1];
  BOOL v8 = __OFSUB__(v7, a1);
  uint64_t v9 = v7 - a1;
  if (v8)
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v6[1] = v9;
}

Swift::Void __swiftcall _Deque._UnsafeHandle.uncheckedRemoveLast(_:)(Swift::Int a1)
{
  uint64_t v4 = v1;
  Swift::Int v6 = v1[1];
  BOOL v7 = __OFSUB__(v6, a1);
  Swift::Int v8 = v6 - a1;
  if (v8 < 0 != v7) {
    goto LABEL_8;
  }
  if (a1 < 1) {
    return;
  }
  if (v6 < v8)
  {
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v9 = v3;
  _Deque._UnsafeHandle.segments(forOffsets:)(v8, v6, v4, v2, v3, (uint64_t)v13);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v13, v9, (uint64_t)v12);
  type metadata accessor for _UnsafeMutableWrappedBuffer();
  _UnsafeMutableWrappedBuffer.deinitialize()();
  uint64_t v10 = v4[1];
  BOOL v7 = __OFSUB__(v10, a1);
  Swift::Int v11 = v10 - a1;
  if (v7)
  {
    __break(1u);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_9;
  }
  v4[1] = v11;
}

Swift::Void __swiftcall _Deque._UnsafeHandle.uncheckedRemoveAll()()
{
  uint64_t v3 = v0 + 1;
  if (v0[1] >= 1)
  {
    uint64_t v4 = v2;
    _Deque._UnsafeHandle.segments()(v0, v1, v2, (uint64_t)v6);
    _UnsafeMutableWrappedBuffer.init(mutating:)(v6, v4, (uint64_t)&v5);
    type metadata accessor for _UnsafeMutableWrappedBuffer();
    _UnsafeMutableWrappedBuffer.deinitialize()();
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
}

unint64_t _Deque._UnsafeHandle.uncheckedRemove(offsets:)(unint64_t a1, Swift::Int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if ((a1 & 0x8000000000000000) != 0 || a3[1] < a2)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    _Deque._UnsafeHandle.segments(forOffsets:)(a1, a2, a3, a4, a5, (uint64_t)v11);
    _UnsafeMutableWrappedBuffer.init(mutating:)(v11, a5, (uint64_t)v10);
    type metadata accessor for _UnsafeMutableWrappedBuffer();
    _UnsafeMutableWrappedBuffer.deinitialize()();
    return _Deque._UnsafeHandle.closeGap(offsets:)(a1, a2, a3);
  }
  return result;
}

unint64_t _Deque._UnsafeHandle.closeGap(offsets:)(unint64_t forOffset, Swift::Int a2, uint64_t *a3)
{
  if ((forOffset & 0x8000000000000000) != 0 || a3[1] < a2) {
    goto LABEL_61;
  }
  int64_t v5 = forOffset;
  uint64_t v6 = a2 - forOffset;
  if (__OFSUB__(a2, forOffset))
  {
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v6 < 1) {
    return forOffset;
  }
  v7.unint64_t position = _Deque._UnsafeHandle.slot(forOffset:)(forOffset).position;
  v8.unint64_t position = _Deque._UnsafeHandle.slot(forOffset:)(a2).position;
  uint64_t v9 = a3[1];
  BOOL v10 = __OFSUB__(v9, a2);
  int64_t v11 = v9 - a2;
  if (v10) {
    goto LABEL_54;
  }
  unint64_t position = v8.position;
  uint64_t v13 = a3[2];
  if (v11 > v5)
  {
    forOffset = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v6, a3);
    int64_t v11 = forOffset;
    uint64_t v14 = *a3;
    Swift::Int v15 = v7.position;
    if (v7.position || (Swift::Int v15 = *a3, (v14 & 0x8000000000000000) == 0))
    {
      unint64_t v16 = position;
      if (position || (unint64_t v16 = *a3, (v14 & 0x8000000000000000) == 0))
      {
        if (!v5)
        {
LABEL_43:
          a3[2] = v11;
          uint64_t v35 = a3[1];
          BOOL v10 = __OFSUB__(v35, v6);
          uint64_t v36 = v35 - v6;
          if (!v10) {
            goto LABEL_51;
          }
          __break(1u);
          goto LABEL_46;
        }
        if (v13 >= v15)
        {
          if (v16 >= forOffset)
          {
            if ((uint64_t)(position - v7.position) >= 0)
            {
              _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)(position - v7.position), v7.position);
              v29.unint64_t position = a3[2];
              Swift::Int v30 = v5 - v7.position;
              goto LABEL_41;
            }
          }
          else
          {
            _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)v6, v7.position);
            uint64_t v17 = _Deque._UnsafeHandle.limSlot.getter(a3) - v6;
            if (v17 >= 0)
            {
              Swift::Int v18 = v6;
              goto LABEL_31;
            }
          }
        }
        else
        {
          if (v16 >= forOffset)
          {
            v29.unint64_t position = v13;
            v34.unint64_t position = v11;
            Swift::Int v30 = v5;
LABEL_42:
            forOffset = _Deque._UnsafeHandle.move(from:to:count:)(v29, v34, v30).source.position;
            goto LABEL_43;
          }
          uint64_t v17 = _Deque._UnsafeHandle.limSlot.getter(a3) - v6;
          if (v17 >= 0)
          {
            Swift::Int v18 = position;
LABEL_31:
            _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v17, 0, v18);
            v29.unint64_t position = a3[2];
            Swift::Int v30 = v5 - position;
LABEL_41:
            v34.unint64_t position = v11;
            goto LABEL_42;
          }
        }
      }
    }
    while (1)
    {
LABEL_61:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  uint64_t v19 = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a3[2], v9, a3);
  uint64_t v20 = a3[1];
  if (__OFSUB__(v20, v6))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  forOffset = _Deque._UnsafeHandle.slot(forOffset:)(v20 - v6).position;
  unint64_t v21 = forOffset;
  uint64_t v22 = *a3;
  unint64_t v23 = v19;
  if (!v19)
  {
    unint64_t v23 = *a3;
    if (v22 < 0) {
      goto LABEL_61;
    }
  }
  unint64_t v24 = forOffset;
  if (!forOffset)
  {
    unint64_t v24 = *a3;
    if (v22 < 0) {
      goto LABEL_61;
    }
  }
  if (!v11) {
    goto LABEL_50;
  }
  if (position >= v23)
  {
    Swift::Int v31 = v22 - position;
    BOOL v32 = __OFSUB__(v22, position);
    if (v24 >= v7.position)
    {
      if (v32)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      Swift::Int v28 = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)position, v7, v31).target.position;
      Swift::Int v26 = 0;
      Swift::Int v27 = v19;
    }
    else
    {
      if (v32)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      Swift::Int v33 = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)position, v7, v31).target.position;
      Swift::Int v26 = _Deque._UnsafeHandle.move(from:to:count:)(0, (Swift::_DequeSlot)v33, v6).source.position;
      Swift::Int v28 = 0;
      Swift::Int v27 = v21;
    }
    goto LABEL_49;
  }
  if (v24 < v7.position)
  {
    int64_t v25 = v22 - v7.position;
    if (__OFSUB__(v22, v7.position))
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (v25 >= v11) {
      goto LABEL_61;
    }
    Swift::Int v26 = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)position, v7, v22 - v7.position).source.position;
    Swift::Int v27 = v11 - v25;
    if (__OFSUB__(v11, v25)) {
      goto LABEL_60;
    }
    Swift::Int v28 = 0;
    goto LABEL_49;
  }
LABEL_46:
  Swift::Int v26 = position;
  Swift::Int v28 = v7.position;
  Swift::Int v27 = v11;
LABEL_49:
  forOffset = _Deque._UnsafeHandle.move(from:to:count:)((Swift::_DequeSlot)v26, (Swift::_DequeSlot)v28, v27).source.position;
LABEL_50:
  uint64_t v37 = a3[1];
  BOOL v10 = __OFSUB__(v37, v6);
  uint64_t v36 = v37 - v6;
  if (v10)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
LABEL_51:
  a3[1] = v36;
  return forOffset;
}

uint64_t _Deque<A>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v19 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v25 = _Deque.makeIterator()(a2, a3);
  uint64_t v26 = v13;
  uint64_t v27 = v14;
  uint64_t v15 = type metadata accessor for _Deque.Iterator();
  _Deque.Iterator.next()(v15, (uint64_t)v12);
  unint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v16(v12, 1, a3) != 1)
  {
    unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v22 = v9;
    uint64_t v20 = (void (**)(char *, uint64_t))(v7 + 8);
    do
    {
      v21(v9, v12, a3);
      uint64_t v24 = v30;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v28, v29);
      uint64_t v17 = v31;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      (*v20)(v9, a3);
      if (v17) {
        break;
      }
      uint64_t v31 = 0;
      _Deque.Iterator.next()(v15, (uint64_t)v12);
    }
    while (v16(v12, 1, a3) != 1);
  }
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t _Deque.makeIterator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized _Deque.Iterator.init(_base:)(v3, a2);
  swift_release();
  return v4;
}

uint64_t _Deque.Iterator.next()@<X0>(BOOL a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  if (v5 == v6)
  {
    a1 = _Deque.Iterator._swapSegment()();
    if (!a1)
    {
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 16) - 8) + 56);
      return v11(a2, 1, 1);
    }
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(v2 + 16);
  }
  if (v5 >= v6)
  {
    LODWORD(v14) = 0;
    uint64_t v13 = 79;
  }
  else
  {
    if (v5 > -2)
    {
      *(void *)(v2 + 8) = v5 + 1;
      MEMORY[0x1F4188790](a1);
      uint64_t v7 = *(void *)(v3 + 16);
      uint64_t v13 = v7;
      uint64_t v14 = v8;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator.next(), (uint64_t)&v12, v9, v7, v7, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
    }
    LODWORD(v14) = 0;
    uint64_t v13 = 21;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> _Deque<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return _Deque<A>.encode(to:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

void *_Deque<A>.init(from:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v16[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = _Deque._Storage.init()();
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v10 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if ((v11 & 1) == 0)
    {
      Swift::Int v12 = v10;
      type metadata accessor for _Deque();
      type metadata accessor for _Deque._Storage();
      _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v12, 1);
    }
    __swift_project_boxed_opaque_existential_1(v16, v17);
    while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      uint64_t v13 = type metadata accessor for _Deque();
      _Deque.append(_:)((uint64_t)v8, v13);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
      __swift_project_boxed_opaque_existential_1(v16, v17);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    uint64_t v9 = (void *)v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v9;
}

Swift::Void __swiftcall _Deque.reserveCapacity(_:)(Swift::Int a1)
{
  type metadata accessor for _Deque._Storage();

  _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(a1, 1);
}

void *protocol witness for Decodable.init(from:) in conformance <A> _Deque<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = _Deque<A>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

Swift::Bool __swiftcall _Deque.Iterator._swapSegment()()
{
  if (v0[1] == v0[2])
  {
    uint64_t v1 = *v0;
    uint64_t v4 = *(void *)(((uint64_t (*)())MEMORY[0x1F4188790])() + 16);
    uint64_t v5 = v0;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator._swapSegment(), (uint64_t)&v3, v1, v4, MEMORY[0x1E4FBB390], (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    swift_release();
    return v6;
  }
  else
  {
    Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void UnsafeMutableBufferPointer._initialize(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a4) {
    goto LABEL_10;
  }
  if (a2 >= 1)
  {
    if (UnsafeBufferPointer.baseAddress.getter() && UnsafeBufferPointer.baseAddress.getter())
    {
      goto _$sSp10initialize4from5countySPyxG_SitF;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
_$sSp10initialize4from5countySPyxG_SitF:
    MEMORY[0x1F41845E0]();
  }
}

uint64_t ContiguousArray.init(unsafeUninitializedCapacity:initializingWith:)()
{
  Array.init(_unsafeUninitializedCapacity:initializingWith:)();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _ArrayBuffer.requestNativeBuffer()();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      type metadata accessor for Array();
      swift_getWitnessTable();
      uint64_t v1 = _copyCollectionToContiguousArray<A>(_:)();
    }
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t _Deque.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v9[2] = a4;
  v9[3] = a5;
  v9[4] = a1;
  v9[5] = a2;
  uint64_t v7 = type metadata accessor for Optional();
  return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.withContiguousStorageIfAvailable<A>(_:), (uint64_t)v9, a3, a4, v7, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = _Deque.makeIterator()(*v2, *(void *)(a1 + 16));
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v8;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _Deque<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _Deque<A>()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Deque<A>(uint64_t a1)
{
  uint64_t v2 = specialized _Deque._copyToContiguousArray()(*v1, *(void *)(a1 + 16));
  swift_release();
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = specialized _Deque._copyContents(initializing:)(a2, a3, *v4, *(void *)(a4 + 16));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  swift_release();
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v10;
  return v12;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Deque.withContiguousStorageIfAvailable<A>(_:)(a1, a2, *v4, *(void *)(a4 + 16), a3);
}

uint64_t _Deque.indices.getter(uint64_t a1, uint64_t a2)
{
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v3);
  if ((v4 & 0x8000000000000000) == 0) {
    return 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0
    || (uint64_t v6 = _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v9), v11 <= a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = a3;
    uint64_t v10 = a1;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.subscript.getter, (uint64_t)&v8, a2, a3, a3, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

void (*_Deque.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = malloc(*(void *)(*(void *)(TupleTypeMetadata2 - 8) + 64));
  v7[4] = v10;
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t v12 = v11;
  v7[5] = v11;
  uint64_t v13 = malloc(*(void *)(v11 + 64));
  void v7[6] = v13;
  if (a2 < 0
    || (uint64_t v14 = v13,
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v20), *v7 <= a2))
  {
    uint64_t result = (void (*)(uint64_t))_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1F4188790](v15);
    uint64_t v20 = v8;
    uint64_t v21 = a2;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.subscript.modify, (uint64_t)&v19, v16, v8, TupleTypeMetadata2, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    uint64_t v17 = (char *)v10 + *(int *)(TupleTypeMetadata2 + 48);
    v7[1] = *v10;
    (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v14, v17, v8);
    return _Deque.subscript.modify;
  }
  return result;
}

void _Deque.subscript.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 8;
  uint64_t v4 = *(void *)(*(void *)a1 + 40);
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  uint64_t v7 = **(void **)(*(void *)a1 + 16);
  uint64_t v9 = *(void *)(*(void *)a1 + 24);
  uint64_t v6 = v9;
  uint64_t v10 = v2;
  uint64_t v11 = v3;
  swift_retain();
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in $defer #1 <A>() in _Deque.subscript.modify, (uint64_t)&v8, v7, v9, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  swift_release();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
  free(v3);
  free(v5);
  free(v1);
}

uint64_t _Deque.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0
    || (_ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v6), v7 < a2))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque();
    swift_retain();
    swift_getWitnessTable();
    Slice.init(base:bounds:)();
    return v7;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance _Deque<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Deque<A>(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _Deque<A>(void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance _Deque<A>(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _Deque.count.getter(*v2, *(void *)(a1 + 16));
  *a2 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _Deque<A>(uint64_t **a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)_Deque.subscript.read(v7, *a2, *v3, *(void *)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _Deque<A>;
}

void protocol witness for Collection.subscript.read in conformance _Deque<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*_Deque.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v7 = *(void *)(a4 - 8);
  *a1 = a4;
  a1[1] = v7;
  a1[2] = (uint64_t)malloc(*(void *)(v7 + 64));
  _Deque.subscript.getter(a2, a3, a4);
  return _Deque.subscript.read;
}

void _Deque.subscript.read(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance _Deque<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _Deque.subscript.getter(*a1, a1[1], *v3, *(void *)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = _Deque.indices.getter(*v2, *(void *)(a1 + 16));
  *a2 = 0;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance _Deque<A>(uint64_t a1)
{
  return _Deque.count.getter(*v1, *(void *)(a1 + 16));
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance _Deque<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _Deque<A>@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _Deque<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized _Deque.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _Deque<A>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8], 714);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8], 722);
}

void *protocol witness for Collection.index(after:) in conformance _Deque<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance _Deque<A>(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

Swift::Void __swiftcall _Deque.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  if (a1 < 0
    || (uint64_t v6 = *v3,
        uint64_t v7 = *(void *)(v2 + 16),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v11), v13 <= a1))
  {
    int v12 = 0;
  }
  else
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v11);
      if (v13 > a2)
      {
        type metadata accessor for _Deque._Storage();
        _Deque._Storage.ensureUnique()();
        MEMORY[0x1F4188790](v8);
        uint64_t v10[2] = v7;
        v10[3] = a1;
        Swift::Int v11 = a2;
        _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.swapAt(_:_:), (uint64_t)v10, v9, v7, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
        return;
      }
    }
    int v12 = 0;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 + 16);
  type metadata accessor for _Deque._Storage();
  _Deque._Storage.ensureUnique()();
  uint64_t v9 = *v4;
  uint64_t v12[2] = v8;
  v12[3] = a4;
  void v12[4] = a1;
  v12[5] = a2;
  uint64_t v10 = type metadata accessor for Optional();
  return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:), (uint64_t)v12, v9, v8, v10, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
}

uint64_t $defer #1 <A><A1>() in closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = UnsafeBufferPointer.baseAddress.getter();
  uint64_t result = UnsafeBufferPointer.baseAddress.getter();
  if (v5)
  {
    if (!result || v5 != result) {
      goto LABEL_7;
    }
LABEL_6:
    if (*(void *)(a1 + 8) == a3) {
      return result;
    }
    goto LABEL_7;
  }
  if (!result) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _Deque<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  specialized _Deque.subscript.setter(a1, *a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);

  return v5(a1);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = _Deque.subscript.modify(v6, *a2, a3);
  return protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _Deque<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  specialized _Deque.subscript.setter(*a1, a1[1], a1[2], *a2, a2[1], a3);

  return swift_release();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>(void *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[3] = v3;
  v7[4] = a3;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  v7[5] = *a2;
  void v7[6] = v9;
  *uint64_t v7 = _Deque.subscript.getter(v8, v9, *v3, *(void *)(a3 + 16));
  v7[1] = v10;
  v7[2] = v11;
  return protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _Deque<A>(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v6 = (*a1)[5];
  uint64_t v5 = (*a1)[6];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[2];
  if (a2)
  {
    swift_retain();
    specialized _Deque.subscript.setter(v3, v4, v8, v6, v5, v7);
    swift_release();
  }
  else
  {
    specialized _Deque.subscript.setter(**a1, v4, v8, v6, v5, v7);
  }
  swift_release();

  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance _Deque<A>()
{
  return MutableCollection<>.partition(by:)();
}

void protocol witness for MutableCollection.swapAt(_:_:) in conformance _Deque<A>(Swift::Int *a1, Swift::Int *a2)
{
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Deque._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a4, a3);
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _Deque.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

unint64_t closure #1 in _Deque.replaceSubrange<A>(_:with:)(uint64_t *a1, uint64_t a2, uint64_t a3, Swift::Int a4, Swift::Int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v68 = a6;
  uint64_t v69 = a8;
  Swift::Int v70 = a5;
  uint64_t v71 = a7;
  Swift::Int v51 = a4;
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for PartialRangeFrom();
  uint64_t v58 = *(void *)(v16 - 8);
  uint64_t v59 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v57 = (char *)&v51 - v17;
  uint64_t v66 = a12;
  uint64_t v67 = a13;
  uint64_t v65 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v65 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v65);
  uint64_t v64 = (char *)&v51 - v20;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v51 - v25;
  uint64_t v27 = AssociatedConformanceWitness;
  uint64_t v28 = type metadata accessor for PartialRangeUpTo();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v51 - v30;
  Swift::Int v61 = a3;
  if (v70 < a3) {
    goto LABEL_15;
  }
  uint64_t v60 = v18;
  uint64_t v55 = v24;
  BOOL v32 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v32(v26, v71, AssociatedTypeWitness);
  uint64_t v53 = *(void *)(v27 + 8);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    goto LABEL_15;
  }
  Swift::Int v33 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v56 = v21 + 8;
  uint64_t v52 = v33;
  v33(v26, AssociatedTypeWitness);
  uint64_t v54 = v32;
  v32(v31, v71, AssociatedTypeWitness);
  swift_getWitnessTable();
  uint64_t v34 = (uint64_t)v64;
  Collection.subscript.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  uint64_t v35 = v65;
  uint64_t v36 = swift_getAssociatedConformanceWitness();
  Swift::Int v37 = v61;
  Swift::Int v38 = v62;
  Swift::Int v39 = v70;
  uint64_t v40 = v63;
  Swift::Int v61 = a11;
  _Deque._UnsafeHandle.uncheckedReplaceInPlace<A>(inOffsets:with:)(v37, v70, v34, v62, v63, a11, v35, v36);
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v34, v35);
  if (v69 < 0)
  {
    Swift::Int v48 = v51 - v39;
    if (v51 >= v39)
    {
      if (__OFSUB__(v51, v39))
      {
        __break(1u);
      }
      else
      {
        BOOL v49 = __OFADD__(a9, v48);
        Swift::Int v50 = a9 + v48;
        if (!v49)
        {
          if (v50 != a10)
          {
LABEL_16:
            unint64_t result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          return _Deque._UnsafeHandle.uncheckedRemove(offsets:)(v39, v51, v38, v40, v61);
        }
      }
      __break(1u);
    }
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_16;
  }
  if (v69)
  {
    uint64_t v60 = v36;
    char v43 = v54;
    uint64_t v42 = v55;
    uint64_t v44 = v71;
    v54(v55, v71, AssociatedTypeWitness);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      v52(v42, AssociatedTypeWitness);
      long long v45 = v57;
      v43(v57, v44, AssociatedTypeWitness);
      uint64_t v46 = v59;
      swift_getWitnessTable();
      uint64_t v47 = (uint64_t)v64;
      Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v46);
      return _Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)(v47, v69, v39, v38, v40, v61, v65, v60);
    }
    goto LABEL_15;
  }
  return result;
}

Swift::Int _Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  Swift::Int v13 = (char *)&v36 - v12;
  uint64_t v48 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  BOOL v49 = (char *)&v36 - v16;
  uint64_t v50 = v9;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v53 = v5;
  uint64_t v17 = a1;
  Swift::Int result = Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)(a3, MEMORY[0x1E4FBC848] + 8, (uint64_t)&v54);
  if (v54 == 1)
  {
    uint64_t v46 = 0;
    uint64_t v36 = v10;
    uint64_t v19 = dispatch thunk of Sequence.underestimatedCount.getter();
    uint64_t v20 = (uint64_t *)a3;
    uint64_t v21 = *v5;
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v21, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v34);
    uint64_t v22 = v54;
    Swift::Int result = swift_release();
    BOOL v23 = __OFADD__(v22, v19);
    Swift::Int v24 = v22 + v19;
    if (v23)
    {
LABEL_10:
      __break(1u);
      return result;
    }
    uint64_t v44 = type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v24, 1);
    long long v45 = &v36;
    uint64_t v25 = *v5;
    MEMORY[0x1F4188790](v26);
    *(&v36 - 4) = v9;
    *(&v36 - 3) = (uint64_t)v20;
    uint64_t v34 = a4;
    uint64_t v35 = v17;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #2 in _Deque.append<A>(contentsOf:), (uint64_t)(&v36 - 6), v25, v9, AssociatedTypeWitness, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    swift_release();
    long long v45 = v20;
    uint64_t v46 = a4;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    uint64_t v42 = v48 + 48;
    if (v41(v13, 1, v9) != 1)
    {
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v48 += 32;
      uint64_t v27 = (void (**)(char *, uint64_t))(v48 - 24);
      uint64_t v39 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v28 = (uint64_t)v49;
      while (1)
      {
        v40(v15, v13, v9);
        uint64_t v29 = *v5;
        swift_retain();
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v29, (uint64_t)&type metadata for _DequeBufferHeader, v9, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v34);
        uint64_t v30 = v54;
        swift_release();
        Swift::Int result = v30 + 1;
        if (__OFADD__(v30, 1)) {
          break;
        }
        _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(result, 0);
        uint64_t v31 = *v5;
        MEMORY[0x1F4188790](v32);
        Swift::Int v33 = v45;
        *(&v36 - 6) = v9;
        *(&v36 - 5) = (uint64_t)v33;
        *(&v36 - 4) = v46;
        *(&v36 - 3) = (uint64_t)v15;
        uint64_t v34 = v28;
        swift_retain();
        _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #3 in _Deque.append<A>(contentsOf:), (uint64_t)(&v36 - 8), v31, v9, v39, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
        swift_release();
        (*v27)(v15, v9);
        dispatch thunk of IteratorProtocol.next()();
        if (v41(v13, 1, v9) == 1) {
          goto LABEL_7;
        }
      }
      __break(1u);
      goto LABEL_10;
    }
LABEL_7:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v49, AssociatedTypeWitness);
  }
  return result;
}

uint64_t _Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = dispatch thunk of Collection.count.getter();
  if (v8 < 1)
  {
    uint64_t v12 = _Deque._Storage.init()();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    return v12;
  }
  else
  {
    uint64_t v9 = v8;
    uint64_t v10 = _Deque._Storage.init(minimumCapacity:)();
    MEMORY[0x1F4188790](v10);
    uint64_t v13[2] = a2;
    v13[3] = a3;
    v13[4] = a4;
    void v13[5] = v9;
    v13[6] = a1;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.init<A>(_:), (uint64_t)v13, v10, a2, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    return v10;
  }
}

uint64_t closure #1 in _Deque.init<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1[2] || a3 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v13 = _Deque._UnsafeHandle.buffer(for:)(0, a3, a1);
    uint64_t v14 = MEMORY[0x192FABA00](v13);
    uint64_t v16 = v15;
    v18[1] = v18;
    MEMORY[0x1F4188790](v14);
    uint64_t result = Sequence._withContiguousStorageIfAvailable_SR14663<A>(_:)(a6, MEMORY[0x1E4FBC848] + 8, (uint64_t)&v19);
    if (v19 == 1) {
      uint64_t result = UnsafeMutableBufferPointer._initialize<A>(from:)(a4, v14, v16, a5, a6, a7);
    }
    a1[1] = a3;
  }
  return result;
}

uint64_t closure #1 in _Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a3;
  swift_retain();
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v12, (uint64_t)&type metadata for _DequeBufferHeader, a4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v17);
  uint64_t result = swift_release();
  if (__OFADD__(v18, a2))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v18 + a2, 0);
    uint64_t v14 = *a3;
    MEMORY[0x1F4188790](v15);
    uint64_t v16[2] = a4;
    void v16[3] = a5;
    v16[4] = a6;
    v16[5] = a1;
    uint64_t v17 = a2;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in closure #1 in _Deque.append<A>(contentsOf:), (uint64_t)v16, v14, a4, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in _Deque.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = (uint64_t *)MEMORY[0x1F4188790](a1);
  uint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  _Deque._UnsafeHandle.availableSegments()(v11, v14, v15, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a3);
  uint64_t v16 = (void (*)(uint64_t, uint64_t))type metadata accessor for _UnsafeMutableWrappedBuffer();
  uint64_t result = _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(a5, (uint64_t)v13, v16, a3, a4);
  uint64_t v18 = *(void *)(a1 + 8);
  BOOL v19 = __OFADD__(v18, result);
  uint64_t v20 = v18 + result;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(a1 + 8) = v20;
  }
  return result;
}

uint64_t _Deque.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = *v3;
    uint64_t v7 = *(void *)(a3 + 16);
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v6, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v13);
    swift_release();
    if (v15 >= a2)
    {
      uint64_t v8 = *v3;
      swift_retain();
      _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v8, (uint64_t)&type metadata for _DequeBufferHeader, v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v13);
      swift_release();
      if (!__OFADD__(v15, 1))
      {
        type metadata accessor for _Deque._Storage();
        _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v15 + 1, 0);
        uint64_t v9 = *v3;
        MEMORY[0x1F4188790](v10);
        uint64_t v12[2] = v7;
        v12[3] = a2;
        uint64_t v13 = a1;
        uint64_t v14 = v3;
        swift_retain();
        _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.insert(_:at:), (uint64_t)v12, v9, v7, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
        return swift_release();
      }
      __break(1u);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _Deque.insert(_:at:)(Swift::_DequeSlot *a1, uint64_t a2, Swift::Int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
  {
    uint64_t v16 = *v12;
    swift_retain();
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v16, (uint64_t)&type metadata for _DequeBufferHeader, a6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v21);
    uint64_t v17 = v22[0];
    swift_release();
    if (v17 == a3) {
      return _Deque._UnsafeHandle.uncheckedAppend(_:)(a4, &a1->position, a2, a6);
    }
    _Deque._UnsafeHandle.openGap(ofSize:atOffset:)(1, a3, &a1->position, a2, a6, (uint64_t)v22);
    if (v22[1] == 1)
    {
      uint64_t v19 = UnsafeBufferPointer.baseAddress.getter();
      if (v19)
      {
        uint64_t v20 = v19;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, a6);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v20, v14, a6);
      }
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  return _Deque._UnsafeHandle.uncheckedPrepend(_:)(a4, a1, a2, a6);
}

uint64_t closure #1 in _Deque.insert<A>(contentsOf:at:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v18, v19);
  return _Deque._UnsafeHandle.uncheckedInsert<A>(contentsOf:count:atOffset:)((uint64_t)v16, a4, a5, a1, a2, a6, a7, a8);
}

uint64_t _Deque.remove(at:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0
    || (uint64_t v4 = *v2,
        uint64_t v5 = *(void *)(a2 + 16),
        swift_retain(),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, v4, (uint64_t)&type metadata for _DequeBufferHeader, v5, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v10), swift_release(), v11 <= a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique()();
    uint64_t v6 = *v2;
    MEMORY[0x1F4188790](v7);
    void v9[2] = v5;
    v9[3] = v2;
    uint64_t v10 = a1;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.remove(at:), (uint64_t)v9, v6, v5, v5, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    return swift_release();
  }
  return result;
}

uint64_t _Deque.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0
    || (uint64_t v6 = *(void *)(a3 + 16),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v11), v12 < a2))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1F4188790](v7);
    uint64_t v10[2] = v6;
    v10[3] = a1;
    uint64_t v11 = a2;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeSubrange(_:), (uint64_t)v10, v8, v6, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

uint64_t _Deque._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v9[4] = *v2;
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1F4188790](v6);
    void v9[2] = v5;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._customRemoveLast(), (uint64_t)v9, v7, v5, v5, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 0, 1, v5);
  }
  return result;
}

Swift::Bool __swiftcall _Deque._customRemoveLast(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    LODWORD(v10) = 0;
    uint64_t v9 = 798;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 16);
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v9);
    if (v11 >= a1)
    {
      type metadata accessor for _Deque._Storage();
      _Deque._Storage.ensureUnique()();
      MEMORY[0x1F4188790](v5);
      uint64_t v9 = v4;
      Swift::Int v10 = a1;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._customRemoveLast(_:), (uint64_t)&v8, v6, v4, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return 1;
    }
    LODWORD(v10) = 0;
    uint64_t v9 = 799;
  }
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall _Deque.removeFirst(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    LODWORD(v9) = 0;
    uint64_t v8 = 829;
  }
  else
  {
    uint64_t v4 = *(void *)(v1 + 16);
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v2, (uint64_t)&type metadata for _DequeBufferHeader, v4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v8);
    if (v10 >= a1)
    {
      type metadata accessor for _Deque._Storage();
      _Deque._Storage.ensureUnique()();
      MEMORY[0x1F4188790](v5);
      uint64_t v8 = v4;
      Swift::Int v9 = a1;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeFirst(_:), (uint64_t)&v7, v6, v4, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return;
    }
    LODWORD(v9) = 0;
    uint64_t v8 = 830;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall _Deque.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  if (keepingCapacity)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1F4188790](v4);
    v6[2] = v3;
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.removeAll(keepingCapacity:), (uint64_t)v6, v5, v3, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  else
  {
    swift_release();
    uint64_t *v2 = _Deque._Storage.init()();
  }
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _Deque.init()(*(void *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized _Deque.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v7(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = specialized _Deque.init(repeating:count:)(a1, a2, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = specialized _Deque.init<A>(_:)(a1, *(void *)(a4 + 16), a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a5 = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance _Deque<A>(uint64_t a1, uint64_t a2)
{
  _Deque.append(_:)(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _Deque.append<A>(contentsOf:)(a1, a4, a2, a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v6(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance _Deque<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _Deque.insert(_:at:)(a1, *a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);

  return v5(a1);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance _Deque<A>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized _Deque.insert<A>(contentsOf:at:)(a1, *a2, a5, a3, a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v7(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2)
{
  return _Deque.remove(at:)(*a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance _Deque<A>(uint64_t *a1, uint64_t a2)
{
  return _Deque.removeSubrange(_:)(*a1, a1[1], a2);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance _Deque<A>(Swift::Int a1)
{
  return 1;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance _Deque<A>()
{
  return RangeReplaceableCollection<>.removeAll(where:)();
}

uint64_t _Deque.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v7 - 8);
  Swift::Int v9 = (char *)&v20 - v8;
  uint64_t v23 = 0x3C6575716544;
  unint64_t v24 = 0xE600000000000000;
  v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 5974078;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  uint64_t v26 = v23;
  unint64_t v27 = v24;
  uint64_t v23 = _Deque.makeIterator()(a1, a2);
  unint64_t v24 = v12;
  uint64_t v25 = v13;
  uint64_t v22 = type metadata accessor for _Deque.Iterator();
  _Deque.Iterator.next()(v22, (uint64_t)v9);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v21(v9, 1, a2) != 1)
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v16(v6, v9, a2);
    long long v20 = xmmword_18E4D7600;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = v20;
      *(void *)(v17 + 56) = a2;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v17 + 32));
      v16((char *)boxed_opaque_existential_0, v6, a2);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
      debugPrint<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _Deque.Iterator.next()(v22, (uint64_t)v9);
      if (v21(v9, 1, a2) == 1) {
        break;
      }
      v16(v6, v9, a2);
      Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
    }
  }
  swift_release();
  v14._uint64_t countAndFlagsBits = 10589;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  return v26;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _Deque<A>(uint64_t a1)
{
  return _Deque.debugDescription.getter(*v1, *(void *)(a1 + 16));
}

uint64_t _Deque.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = a1;
  v13[1] = a1;
  uint64_t v9 = *MEMORY[0x1E4FBC3E8];
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  type metadata accessor for _Deque();
  swift_getWitnessTable();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  swift_retain_n();
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _Deque<A>()
{
  return _Deque.customMirror.getter(*v0);
}

uint64_t _Deque.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v24 = 91;
  unint64_t v25 = 0xE100000000000000;
  uint64_t v21 = _Deque.makeIterator()(a1, a2);
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  uint64_t v12 = type metadata accessor for _Deque.Iterator();
  _Deque.Iterator.next()(v12, (uint64_t)v9);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v13(v9, 1, a2) != 1)
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v16(v6, v9, a2);
    long long v20 = xmmword_18E4D7600;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = v20;
      *(void *)(v17 + 56) = a2;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v17 + 32));
      v16((char *)boxed_opaque_existential_0, v6, a2);
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      _Deque.Iterator.next()(v12, (uint64_t)v9);
      if (v13(v9, 1, a2) == 1) {
        break;
      }
      v16(v6, v9, a2);
      Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
    }
  }
  swift_release();
  v14._uint64_t countAndFlagsBits = 93;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v24;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _Deque<A>(uint64_t a1)
{
  return _Deque.description.getter(*v1, *(void *)(a1 + 16));
}

uint64_t static _Deque<A>.== infix(_:_:)()
{
  return Sequence<>.elementsEqual<A>(_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> _Deque<A>()
{
  return static _Deque<A>.== infix(_:_:)();
}

uint64_t _Deque.init(arrayLiteral:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t v3 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _Deque.init<A>(_:)((uint64_t)&v6, a2, v3, WitnessTable);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance _Deque<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _Deque.init(arrayLiteral:)(a1, *(void *)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t _Deque<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v21 - v11;
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a2, (uint64_t)&type metadata for _DequeBufferHeader, a3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v20);
  v21[0] = a1;
  Hasher._combine(_:)(v22);
  Swift::UInt v22 = _Deque.makeIterator()(a2, a3);
  uint64_t v23 = v13;
  uint64_t v24 = v14;
  uint64_t v15 = type metadata accessor for _Deque.Iterator();
  _Deque.Iterator.next()(v15, (uint64_t)v12);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v16(v12, 1, a3) != 1)
  {
    uint64_t v18 = v7 + 32;
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    do
    {
      v17(v9, v12, a3);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v18 - 24))(v9, a3);
      _Deque.Iterator.next()(v15, (uint64_t)v12);
    }
    while (v16(v12, 1, a3) != 1);
  }
  return swift_release();
}

Swift::Int _Deque<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  _Deque<A>.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> _Deque<A>(uint64_t a1, uint64_t a2)
{
  return _Deque<A>.hashValue.getter(*v2, *(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <A> _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _Deque<A>.hash(into:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> _Deque<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  Hasher.init(_seed:)();
  _Deque<A>.hash(into:)((uint64_t)v7, *v3, *(void *)(a2 + 16), v5);
  return Hasher._finalize()();
}

uint64_t Clock.measure(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v20[2] = a2;
  uint64_t v21 = a1;
  v20[1] = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 32);
  v20[0] = v5;
  uint64_t v16 = v15(a3, a4);
  uint64_t v17 = v22;
  v21(v16);
  if (v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
  }
  uint64_t v22 = 0;
  v15(a3, a4);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of InstantProtocol.duration(to:)();
  Swift::String v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, AssociatedTypeWitness);
}

uint64_t Clock.measure(_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[4] = a5;
  void v6[5] = v5;
  v6[2] = a1;
  v6[3] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v6[6] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v6[7] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  void v6[8] = swift_task_alloc(v12);
  v6[9] = swift_task_alloc(v12);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
  v6[10] = v13;
  v6[11] = (a5 + 32) & 0xFFFFFFFFFFFFLL | 0x18B000000000000;
  v13(a4, a5);
  uint64_t v16 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v14 = (void *)swift_task_alloc(a2[1]);
  v6[12] = v14;
  *uint64_t v14 = v6;
  v14[1] = Clock.measure(_:);
  return v16();
}

uint64_t Clock.measure(_:)()
{
  uint64_t v2 = *(void *)(*v1 + 96);
  uint64_t v3 = *v1;
  swift_task_dealloc(v2);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v4 = *(void *)(v3 + 72);
  if (v0)
  {
    (*(void (**)(void, void))(*(void *)(v3 + 56) + 8))(*(void *)(v3 + 72), *(void *)(v3 + 48));
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 48);
    uint64_t v8 = *(void *)(v3 + 56);
    (*(void (**)(void, void))(v3 + 80))(*(void *)(v3 + 24), *(void *)(v3 + 32));
    swift_getAssociatedConformanceWitness();
    dispatch thunk of InstantProtocol.duration(to:)();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v9(v5, v7);
    v9(v4, v7);
  }
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  uint64_t v6 = *(uint64_t (**)(void))(v3 + 8);
  return v6();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant.CodingKeys()
{
  return 1;
}

void protocol witness for Hashable.hash(into:) in conformance ContinuousClock.Instant.CodingKeys()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  return 0x65756C61765FLL;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance ContinuousClock.Instant.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContinuousClock.Instant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContinuousClock.Instant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ContinuousClock.Instant.encode(to:)(void *a1)
{
  return ContinuousClock.Instant.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<ContinuousClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
}

uint64_t ContinuousClock.Instant.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return ContinuousClock.Instant.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<ContinuousClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContinuousClock.Instant@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return ContinuousClock.Instant.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContinuousClock.Instant(void *a1)
{
  return ContinuousClock.Instant.encode(to:)(a1);
}

uint64_t ContinuousClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)1, a1, a2);
}

uint64_t static ContinuousClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)1, a1, a2);
}

uint64_t ContinuousClock.minimumResolution.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return ContinuousClock.minimumResolution.getter((const char *)1, a2, a3, a4);
}

uint64_t ContinuousClock.sleep(until:tolerance:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 56) = a4;
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a3;
  *(_OWORD *)(v4 + 32) = *a1;
  return swift_task_switch(ContinuousClock.sleep(until:tolerance:), 0, 0);
}

uint64_t ContinuousClock.sleep(until:tolerance:)()
{
  char v1 = *(unsigned char *)(v0 + 56);
  uint64_t v2 = Duration.components.getter();
  uint64_t v4 = v3 / 1000000000;
  uint64_t v5 = swift_task_alloc(dword_1E91D00EC);
  *(void *)(v0 + 48) = v5;
  *(void *)uint64_t v5 = v0;
  *(void *)(v5 + 8) = ContinuousClock.sleep(until:tolerance:);
  long long v6 = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v5 + 145) = 0;
  *(unsigned char *)(v5 + 144) = v1 & 1;
  *(_OWORD *)(v5 + 96) = v6;
  *(void *)(v5 + 80) = v2;
  *(void *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  char v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t static Task<>._sleep(until:_:tolerance:clock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 145) = a6;
  *(unsigned char *)(v6 + 144) = a5;
  *(void *)(v6 + 96) = a3;
  *(void *)(v6 + 104) = a4;
  *(void *)(v6 + 80) = a1;
  *(void *)(v6 + 88) = a2;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static Task<>._sleep(until:_:tolerance:clock:)()
{
  char v1 = (unint64_t *)swift_slowAlloc();
  *(void *)(v0 + 112) = v1;
  atomic_store(0, v1);
  uint64_t v2 = swift_task_alloc(32);
  *(void *)(v0 + 120) = v2;
  *(void *)(v2 + 16) = v1;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 128) = swift_task_addCancellationHandler((uint64_t)partial apply for closure #2 in static Task<>.sleep(nanoseconds:), *(void *)(v0 + 120));
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;
  unint64_t *v1;
  char v2;
  swift *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  char v1 = *(unint64_t **)(v0 + 112);
  uint64_t v2 = *(unsigned char *)(v0 + 144);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = static Task<>._sleep(until:_:tolerance:clock:);
  uint64_t v3 = swift_continuation_init((void *)(v0 + 16), 1uLL);
  uint64_t v4 = atomic_load(v1);
  uint64_t v5 = v4 & 3;
  if ((v4 & 3) != 0)
  {
LABEL_5:
    if (v5 != 3)
    {
      while (1)
      {
LABEL_14:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    swift_continuation_throwingResume(v3);
  }
  else
  {
    while (1)
    {
      if (v4 > 3) {
        goto LABEL_14;
      }
      uint64_t v6 = 0;
      atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(v0 + 112), (unint64_t *)&v6, (unint64_t)v3);
      if (!v6) {
        break;
      }
      uint64_t v4 = atomic_load(*(unint64_t **)(v0 + 112));
      uint64_t v5 = v4 & 3;
      if ((v4 & 3) != 0) {
        goto LABEL_5;
      }
    }
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    uint64_t v9 = (void *)swift_task_create(0, 0, MEMORY[0x1E4FBC848] + 8, (int *)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:), v8);
    if (v2)
    {
      uint64_t v10 = 0;
      unint64_t v12 = -1;
    }
    else
    {
      uint64_t v10 = (const char *)Duration.components.getter();
      unint64_t v12 = v11 / 1000000000;
    }
    swift_task_enqueueGlobalWithDeadline(*(void *)(v0 + 80), *(void *)(v0 + 88), v10, (char *)v12, (*(unsigned char *)(v0 + 145) & 1u) + 1, v9);
  }
  return swift_continuation_await(v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  char v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1)
  {
    swift_willThrow();
    uint64_t v2 = static Task<>._sleep(until:_:tolerance:clock:);
  }
  else
  {
    uint64_t v2 = static Task<>._sleep(until:_:tolerance:clock:);
  }
  return swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  char v1 = *(void *)(v0 + 120);
  swift_task_removeCancellationHandler(*(void *)(v0 + 128));
  swift_task_dealloc(v1);
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  uint64_t (*v3)(void);
  uint64_t v4;

  char v1 = atomic_load(*(unint64_t **)(v0 + 112));
  switch(v1 & 3)
  {
    case 1:
      MEMORY[0x192FAC5A0](*(void *)(v0 + 112), -1, -1);
      uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_5;
    case 3:
      MEMORY[0x192FAC5A0](*(void *)(v0 + 112), -1, -1);
      lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
      swift_allocError();
      swift_willThrow();
      swift_willThrow();
      uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
      uint64_t result = v3();
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  char v1 = *(void *)(v0 + 120);
  swift_task_removeCancellationHandler(*(void *)(v0 + 128));
  swift_task_dealloc(v1);
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for Clock.now.getter in conformance ContinuousClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.now.getter in conformance ContinuousClock((const char *)1, a1, a2);
}

uint64_t protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock((const char *)1, a1, a2);
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance ContinuousClock(long long *a1, long long *a2)
{
  long long v3 = *a2;
  *(unsigned char *)(v2 + 56) = *((unsigned char *)a2 + 16);
  long long v4 = *a1;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(protocol witness for Clock.sleep(until:tolerance:) in conformance ContinuousClock, 0, 0);
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance ContinuousClock()
{
  char v1 = *(unsigned char *)(v0 + 56);
  uint64_t v2 = Duration.components.getter();
  uint64_t v4 = v3 / 1000000000;
  uint64_t v5 = swift_task_alloc(dword_1E91D00EC);
  *(void *)(v0 + 48) = v5;
  *(void *)uint64_t v5 = v0;
  *(void *)(v5 + 8) = ContinuousClock.sleep(until:tolerance:);
  long long v6 = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v5 + 145) = 0;
  *(unsigned char *)(v5 + 144) = v1;
  *(_OWORD *)(v5 + 96) = v6;
  *(void *)(v5 + 80) = v2;
  *(void *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static ContinuousClock.Instant.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)1, a1, a2);
}

void ContinuousClock.Instant.duration(to:)()
{
}

uint64_t ContinuousClock.Instant.hash(into:)()
{
  return Duration.hash(into:)();
}

uint64_t static ContinuousClock.Instant.== infix(_:_:)(void *a1, void *a2)
{
  return MEMORY[0x1F4186188](*a1, a1[1], *a2, a2[1]);
}

uint64_t static ContinuousClock.Instant.< infix(_:_:)()
{
  return static Duration.< infix(_:_:)();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ContinuousClock.Instant()
{
  return static Duration.< infix(_:_:)();
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ContinuousClock.Instant()
{
  return (static Duration.< infix(_:_:)() & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ContinuousClock.Instant()
{
  return (static Duration.< infix(_:_:)() & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ContinuousClock.Instant()
{
  return static Duration.< infix(_:_:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContinuousClock.Instant()
{
  return Duration.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContinuousClock.Instant(void *a1, void *a2)
{
  return MEMORY[0x1F4186188](*a1, a1[1], *a2, a2[1]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContinuousClock.Instant.CodingKeys()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContinuousClock.Instant.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ContinuousClock.Instant.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C61765FLL && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SuspendingClock.Instant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SuspendingClock.Instant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SuspendingClock.Instant.encode(to:)(void *a1)
{
  return ContinuousClock.Instant.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SuspendingClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
}

uint64_t ContinuousClock.Instant.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  unint64_t v12 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v3;
  uint64_t v11 = v3[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v9;
  uint64_t v14 = v11;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SuspendingClock.Instant.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return ContinuousClock.Instant.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<SuspendingClock.Instant.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys, a2);
}

uint64_t ContinuousClock.Instant.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v13 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v15 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v10 = v13;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v7);
    *uint64_t v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SuspendingClock.Instant@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return SuspendingClock.Instant.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SuspendingClock.Instant(void *a1)
{
  return SuspendingClock.Instant.encode(to:)(a1);
}

uint64_t SuspendingClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)2, a1, a2);
}

uint64_t ContinuousClock.now.getter@<X0>(const char *a1@<X0>, char *a2@<X3>, uint64_t *a3@<X8>)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = 0;
  v7[0] = 0;
  swift_get_time(v7, (uint64_t *)&v6, a1, a2);
  uint64_t result = specialized Duration.init(_seconds:nanoseconds:)(v7[0], v6);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t static SuspendingClock.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)2, a1, a2);
}

uint64_t SuspendingClock.minimumResolution.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return ContinuousClock.minimumResolution.getter((const char *)2, a2, a3, a4);
}

uint64_t ContinuousClock.minimumResolution.getter(const char *a1, uint64_t a2, uint64_t a3, char *a4)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = 0;
  v6[0] = 0;
  swift_get_clock_res(v6, (uint64_t *)&v5, a1, a4);
  return specialized Duration.init(_seconds:nanoseconds:)(v6[0], v5);
}

uint64_t SuspendingClock.sleep(until:tolerance:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 56) = a4;
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a3;
  *(_OWORD *)(v4 + 32) = *a1;
  return swift_task_switch(SuspendingClock.sleep(until:tolerance:), 0, 0);
}

uint64_t SuspendingClock.sleep(until:tolerance:)()
{
  char v1 = *(unsigned char *)(v0 + 56);
  uint64_t v2 = Duration.components.getter();
  uint64_t v4 = v3 / 1000000000;
  uint64_t v5 = swift_task_alloc(dword_1E91D00EC);
  *(void *)(v0 + 48) = v5;
  *(void *)uint64_t v5 = v0;
  *(void *)(v5 + 8) = SuspendingClock.sleep(until:tolerance:);
  long long v6 = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v5 + 145) = 1;
  *(unsigned char *)(v5 + 144) = v1 & 1;
  *(_OWORD *)(v5 + 96) = v6;
  *(void *)(v5 + 80) = v2;
  *(void *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t protocol witness for Clock.now.getter in conformance SuspendingClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.now.getter in conformance ContinuousClock((const char *)2, a1, a2);
}

uint64_t protocol witness for Clock.now.getter in conformance ContinuousClock@<X0>(const char *a1@<X2>, char *a2@<X3>, uint64_t *a3@<X8>)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = 0;
  v7[0] = 0;
  swift_get_time(v7, (uint64_t *)&v6, a1, a2);
  uint64_t result = specialized Duration.init(_seconds:nanoseconds:)(v7[0], v6);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for Clock.minimumResolution.getter in conformance SuspendingClock@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock((const char *)2, a1, a2);
}

uint64_t protocol witness for Clock.minimumResolution.getter in conformance ContinuousClock@<X0>(const char *a1@<X2>, char *a2@<X3>, uint64_t *a3@<X8>)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = 0;
  v7[0] = 0;
  swift_get_clock_res(v7, (uint64_t *)&v6, a1, a2);
  uint64_t result = specialized Duration.init(_seconds:nanoseconds:)(v7[0], v6);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance SuspendingClock(long long *a1, long long *a2)
{
  long long v3 = *a2;
  *(unsigned char *)(v2 + 56) = *((unsigned char *)a2 + 16);
  long long v4 = *a1;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(protocol witness for Clock.sleep(until:tolerance:) in conformance SuspendingClock, 0, 0);
}

uint64_t protocol witness for Clock.sleep(until:tolerance:) in conformance SuspendingClock()
{
  char v1 = *(unsigned char *)(v0 + 56);
  uint64_t v2 = Duration.components.getter();
  uint64_t v4 = v3 / 1000000000;
  uint64_t v5 = swift_task_alloc(dword_1E91D00EC);
  *(void *)(v0 + 48) = v5;
  *(void *)uint64_t v5 = v0;
  *(void *)(v5 + 8) = SuspendingClock.sleep(until:tolerance:);
  long long v6 = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v5 + 145) = 1;
  *(unsigned char *)(v5 + 144) = v1;
  *(_OWORD *)(v5 + 96) = v6;
  *(void *)(v5 + 80) = v2;
  *(void *)(v5 + 88) = v4;
  return swift_task_switch(static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static SuspendingClock.Instant.now.getter@<X0>(char *a1@<X3>, uint64_t *a2@<X8>)
{
  return ContinuousClock.now.getter((const char *)2, a1, a2);
}

uint64_t ContinuousClock.Instant.advanced(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = MEMORY[0x192FABD70](*v3, v3[1], a1, a2);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t static SuspendingClock.Instant.+ infix(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = MEMORY[0x192FABD70](*a1, a1[1], a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t static SuspendingClock.Instant.+= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x192FABD70](*a1, a1[1], a2, a3);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t static SuspendingClock.Instant.- infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = static Duration.zero.getter();
  uint64_t v6 = MEMORY[0x192FABD80](v5);
  uint64_t result = MEMORY[0x192FABD70](v3, v4, v6, v7);
  *a2 = result;
  a2[1] = v9;
  return result;
}

uint64_t static SuspendingClock.Instant.-= infix(_:_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = static Duration.zero.getter();
  uint64_t v5 = MEMORY[0x192FABD80](v4);
  uint64_t result = MEMORY[0x192FABD70](v2, v3, v5, v6);
  *a1 = result;
  a1[1] = v8;
  return result;
}

void static SuspendingClock.Instant.- infix(_:_:)()
{
}

Swift::Int ContinuousClock.Instant.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for InstantProtocol.advanced(by:) in conformance ContinuousClock.Instant@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MEMORY[0x192FABD70](*v2, v2[1], *a1, a1[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for InstantProtocol.duration(to:) in conformance ContinuousClock.Instant@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MEMORY[0x192FABD80](*a1, a1[1], *v2, v2[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContinuousClock.Instant()
{
  return Hasher._finalize()();
}

uint64_t closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t static Task<>.sleep<A>(until:tolerance:clock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(int **)(a5 + 48);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = static Task<>.sleep<A>(until:tolerance:clock:);
  return v13(a1, a2, a4, a5);
}

uint64_t static Task<>.sleep<A>(until:tolerance:clock:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  char v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in $defer #1 <A>() in _Deque.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = _Deque._UnsafeHandle.ptr(at:)(*v10, v11, v13, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14, v9, a5);
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!a1) {
    goto LABEL_4;
  }
  if (a2 < 0)
  {
    a1 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_4:
    a2 = 0;
  }
  return a3(a1, a2, a3);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<()?, Never>>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v13);
        *(void *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

unint64_t specialized RangeReplaceableCollection.removeFirst(_:)(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0 || *(void *)(*(void *)v1 + 16) < result)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      return (unint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, result);
    }
  }
  return result;
}

void specialized SerialExecutor.checkIsolated()()
{
  _StringGuts.grow(_:)(60);
  v0._object = (void *)0x800000018E4DA0D0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for implicit closure #1 in static GlobalActor.assertIsolated(_:file:line:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t type metadata accessor for AsyncCompactMapSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncCompactMapSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncDropFirstSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncDropFirstSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncDropWhileSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncDropWhileSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncFilterSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized AsyncFilterSequence.isIncluded.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t specialized AsyncPrefixWhileSequence.Iterator.predicate.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 40));
}

uint64_t specialized AsyncFlatMapSequence.Iterator.transform.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 52));
}

uint64_t type metadata accessor for AsyncFilterSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncFlatMapSequence()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AsyncFlatMapSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for AsyncMapSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized AsyncMapSequence.Iterator.transform.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t type metadata accessor for AsyncMapSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncPrefixSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncPrefixSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncPrefixWhileSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncPrefixWhileSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in AsyncSequence.allSatisfy(_:)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 32);
  char v5 = (void *)swift_task_alloc(dword_1E91CFE4C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #1 in AsyncSequence.allSatisfy(_:);
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to closure #1 in AsyncSequence.allSatisfy(_:)
                                              + async function pointer to closure #1 in AsyncSequence.allSatisfy(_:));
  return v6(a1, v4);
}

uint64_t sub_18E4B0F28()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(uint64_t (**)(void))(v2 + 40);
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFE8C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in AsyncSequence.allSatisfy(_:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)
                                                                   + async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool));
  return v8(a1, a2, v6);
}

uint64_t sub_18E4B101C()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for implicit closure #1 in AsyncSequence<>.min()()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = *(uint64_t (**)(void))(v2 + 40);
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91CFE8C);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)
                                                                   + async function pointer to thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool));
  return v8(a1, a2, v6);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)partial apply(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t type metadata accessor for AsyncThrowingCompactMapSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingCompactMapSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingDropWhileSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingDropWhileSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingFilterSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingFilterSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingFlatMapSequence()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingFlatMapSequence.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingMapSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingMapSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingPrefixWhileSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingPrefixWhileSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _DefaultGlobalConcurrentExecutor()
{
  return self;
}

uint64_t sub_18E4B13B0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFF3C);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)
                                              + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A));
  return v6(a1, v4);
}

uint64_t sub_18E4B14B0()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in _runAsyncMain(_:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc(dword_1E91CFF54);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return closure #1 in _runAsyncMain(_:)((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_18E4B1588()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91CFF64);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

uint64_t type metadata accessor for TaskGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ThrowingTaskGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized _Deque.Iterator.init(_base:)(uint64_t a1, uint64_t a2)
{
  __darwin_time_t v6[2] = a2;
  v6[3] = a1;
  uint64_t v4 = type metadata accessor for _Deque.Iterator();
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator.init(_base:), (uint64_t)v6, a1, a2, v4, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  return v6[5];
}

void specialized TaskLocal.projectedValue.setter()
{
  _StringGuts.grow(_:)(72);
  v0._object = (void *)0x800000018E4DAAF0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v2._object = (void *)0x800000018E4DAB10;
  String.append(_:)(v2);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in _checkIllegalTaskLocalBindingWithinWithTaskGroup(file:line:)(const unsigned __int8 *a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = (const char *)String.count.getter();
  return swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(a1, v4, 1, v3);
}

void specialized static Task<>.onSleepWake(_:)(unint64_t *a1)
{
  unint64_t v1 = atomic_load(a1);
  unint64_t v2 = v1 & 3;
  if ((v1 & 3) != 0) {
    goto LABEL_2;
  }
  uint64_t v3 = (swift::AsyncTask *)(v1 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v1 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
    goto LABEL_16;
  }
  unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
  atomic_compare_exchange_strong((atomic_ullong *volatile)a1, &v4, 1uLL);
  if ((swift::AsyncTask *)v4 != v3)
  {
    while (1)
    {
      unint64_t v5 = atomic_load(a1);
      unint64_t v2 = v5 & 3;
      if ((v5 & 3) != 0) {
        break;
      }
      uint64_t v3 = (swift::AsyncTask *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v5 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
        goto LABEL_16;
      }
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      atomic_compare_exchange_strong((atomic_ullong *volatile)a1, &v6, 1uLL);
      if ((swift::AsyncTask *)v6 == v3) {
        goto LABEL_11;
      }
    }
LABEL_2:
    if (v2 == 2)
    {
      JUMPOUT(0x192FAC5A0);
    }
    if (v2 == 3) {
      return;
    }
    while (1)
    {
LABEL_16:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
LABEL_11:

  swift_continuation_throwingResume(v3);
}

uint64_t specialized _Deque.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v3 <= 0 && v3 > a2) {
    return 0;
  }
LABEL_9:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t specialized _Deque.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v47 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v39 - v15;
  if (a1 < 0) {
    goto LABEL_15;
  }
  uint64_t v17 = *(void *)(a4 + 16);
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, v17, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v38);
  if (v51 < a2) {
    goto LABEL_15;
  }
  uint64_t v49 = a1;
  BOOL v18 = __OFSUB__(a2, a1);
  uint64_t v19 = a2 - a1;
  if (v18)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v20 = v6;
  uint64_t v45 = a2;
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v21 = dispatch thunk of Collection.count.getter();
  uint64_t v22 = v21 - v19;
  if (__OFSUB__(v21, v19))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v23 = v21;
  uint64_t v24 = v17;
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v20, (uint64_t)&type metadata for _DequeBufferHeader, v17, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v38);
  uint64_t v44 = v22;
  BOOL v18 = __OFADD__(v51, v22);
  Swift::Int v25 = v51 + v22;
  if (!v18)
  {
    type metadata accessor for _Deque._Storage();
    char v43 = v20;
    _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v25, 0);
    if (v23 >= v19) {
      uint64_t v26 = v19;
    }
    else {
      uint64_t v26 = v23;
    }
    uint64_t v27 = v49;
    if (!__OFADD__(v49, v26))
    {
      uint64_t v28 = v47;
      uint64_t v41 = v24;
      uint64_t v42 = v49 + v26;
      uint64_t v29 = v50;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.index(_:offsetBy:)();
      uint64_t v40 = v19;
      uint64_t v30 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
      uint64_t v31 = v28;
      uint64_t v32 = v46;
      uint64_t v33 = v30(v31, v46);
      MEMORY[0x1F4188790](v33);
      uint64_t v34 = v41;
      *(&v39 - 12) = v41;
      *(&v39 - 11) = a5;
      *(&v39 - 10) = a6;
      *(&v39 - 9) = v27;
      uint64_t v35 = v42;
      *(&v39 - 8) = v45;
      *(&v39 - 7) = v35;
      *(&v39 - 6) = v29;
      *(&v39 - 5) = (uint64_t)v16;
      *(&v39 - 4) = v44;
      *(&v39 - 3) = v26;
      uint64_t v38 = v40;
      _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.replaceSubrange<A>(_:with:), (uint64_t)(&v39 - 14), v36, v34, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      return v30(v16, v32);
    }
    goto LABEL_14;
  }
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0) {
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2) {
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = (uint64_t)result;
  }
  if (v7 < 0) {
    goto LABEL_24;
  }
  if (!v7)
  {
LABEL_17:
    uint64_t *v2 = v4;
    return result;
  }
  uint64_t v12 = *(void *)(v4 + 16);
  if (!__OFSUB__(v12, a2))
  {
    uint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + 8 * a2), v12 - a2, (char *)(v4 + 32 + 8 * a1));
    uint64_t v13 = *(void *)(v4 + 16);
    BOOL v14 = __OFADD__(v13, v8);
    uint64_t v15 = v13 - v7;
    if (!v14)
    {
      *(void *)(v4 + 16) = v15;
      goto LABEL_17;
    }
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_24:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _AsyncStreamCriticalStorage.value.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  size_t v6 = &v10[-v5];
  _swift_async_stream_lock_lock((os_unfair_lock_t)(v1 + ((*(unsigned int *)(v7 + 48) + 7) & 0x1FFFFFFF8)));
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(void *)(*(void *)v1 + 88), v3);
  uint64_t v11 = v1;
  uint64_t v12 = a1;
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in _AsyncStreamCriticalStorage.value.setter, (uint64_t)v10, v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v8);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t specialized AsyncStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  return AsyncStream._Storage.setOnTermination(_:)(a1, a2);
}

uint64_t _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for AsyncStream._Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncStream._Context()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _AsyncStreamCriticalStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18E4B2348()
{
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v8 = *(_OWORD *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc(dword_1E91D007C);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 40) = v5;
  *(void *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 24) = v8;
  *(void *)(v6 + 8) = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  *(void *)(v6 + 16) = a1;
  return swift_task_switch(closure #1 in AsyncStream.init(unfolding:onCancel:), 0, 0);
}

uint64_t specialized AsyncThrowingStream.Continuation.onTermination.setter(uint64_t a1, uint64_t a2)
{
  return AsyncThrowingStream._Storage.setOnTermination(_:)(a1, a2);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for AsyncThrowingStream._Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingStream._Context()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = (int *)v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc(dword_1E91D009C);
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  uint64_t v10 = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error)
                                                                          + async function pointer to thunk for @escaping @callee_guaranteed @async () -> (@out A?, @error @owned Error));
  return v10(a1, v7, v8, v6, a2);
}

uint64_t partial apply for closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc(dword_1E91D00AC);
  int8x16_t v7 = v2[1];
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  *(void *)(v6 + 40) = a2;
  *(int8x16_t *)(v6 + 24) = vextq_s8(v7, v7, 8uLL);
  *(void *)(v6 + 16) = a1;
  return swift_task_switch(closure #1 in AsyncThrowingStream.init<>(unfolding:), 0, 0);
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.YieldResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static AsyncStream.makeStream(of:bufferingPolicy:)(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 24);
  swift_release();
  *uint64_t v3 = *a1;

  return swift_retain();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant.CodingKeys and conformance ContinuousClock.Instant.CodingKeys);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t specialized _Deque._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[2] = a4;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  type metadata accessor for _Deque.Iterator();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque._copyContents(initializing:), (uint64_t)v8, a3, a4, TupleTypeMetadata2, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  return v8[8];
}

uint64_t specialized _Deque.Iterator.init(_base:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __darwin_time_t v7[2] = a3;
  v7[3] = a2;
  v7[4] = a1;
  uint64_t v5 = type metadata accessor for _Deque.Iterator();
  _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.Iterator.init(_base:from:), (uint64_t)v7, a1, a3, v5, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  return v7[7];
}

uint64_t specialized _Deque._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v3);
  return ContiguousArray.init(unsafeUninitializedCapacity:initializingWith:)();
}

uint64_t specialized _Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 0
    || (uint64_t v6 = *(void *)(a3 + 16),
        _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v11), v12 <= a2))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for _Deque._Storage();
    _Deque._Storage.ensureUnique()();
    MEMORY[0x1F4188790](v7);
    uint64_t v10[2] = v6;
    v10[3] = a2;
    uint64_t v11 = a1;
    return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.subscript.setter, (uint64_t)v10, v8, v6, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
  }
  return result;
}

uint64_t specialized _Deque.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 < 0
    || (_ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v6, (uint64_t)&type metadata for _DequeBufferHeader, *(void *)(a6 + 16), MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v16), v17[0] < a5))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v17[0] = a1;
    v17[1] = a2;
    v17[2] = a3;
    swift_getWitnessTable();
    uint64_t v13 = type metadata accessor for Slice();
    uint64_t WitnessTable = swift_getWitnessTable();
    return specialized _Deque.replaceSubrange<A>(_:with:)(a4, a5, (uint64_t)v17, a6, v13, WitnessTable);
  }
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t), uint64_t a7)
{
  v29[1] = a7;
  uint64_t v33 = a6;
  uint64_t v34 = a2;
  uint64_t v32 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v35 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v29 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v29 - v20;
  uint64_t v31 = v16;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v22((char *)v29 - v20, v34, v15);
  uint64_t v34 = v9;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v23(v13, v32, AssociatedTypeWitness);
  uint64_t v30 = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v32 = v13;
  v23(v35, v13, AssociatedTypeWitness);
  v22(v19, (uint64_t)v21, v15);
  if (AssociatedConformanceWitness)
  {
    uint64_t v24 = v35;
    char v25 = v33(v35, &v19[*(int *)(v15 + 36)], AssociatedTypeWitness, v30);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v31 + 8);
    v26(v19, v15);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v34 + 8);
    v27(v24, AssociatedTypeWitness);
    if (v25)
    {
      v27(v32, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v26)(v21, v15);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v15);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, AssociatedTypeWitness);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Range();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v21 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16((char *)&v21 - v14, v21, v3);
  v16(v13, v22, v3);
  uint64_t v22 = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  v16(v10, (uint64_t)v13, v3);
  v16(v7, (uint64_t)v15, v3);
  if (AssociatedConformanceWitness)
  {
    char v17 = dispatch thunk of static Comparable.<= infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18(v7, v3);
    v18(v10, v3);
    if (v17)
    {
      v18(v13, v3);
      return ((uint64_t (*)(char *, uint64_t))v18)(v15, v3);
    }
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v7, v3);
    v20(v10, v3);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _Deque.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = _Deque._Storage.init(minimumCapacity:)();
    MEMORY[0x1F4188790](v6);
    v8[2] = a3;
    v8[3] = a2;
    v8[4] = a1;
    swift_retain();
    _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.init(repeating:count:), (uint64_t)v8, v6, a3, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
    swift_release();
    return v6;
  }
  return result;
}

uint64_t specialized _Deque.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = _Deque._Storage.init()();
  uint64_t v7 = type metadata accessor for _Deque();
  _Deque.append<A>(contentsOf:)(a1, v7, a3, a4);
  return v9;
}

uint64_t specialized _Deque.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = *(void *)(a3 + 16);
    _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v16);
    if (v18 >= a2)
    {
      uint64_t v11 = dispatch thunk of Collection.count.getter();
      _ss20ManagedBufferPointerVsRi__rlE017withUnsafeMutableC8ToHeaderyqd_0_qd_0_SpyxGqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((uint64_t)closure #1 in _Deque._Storage.count.getter, 0, *v5, (uint64_t)&type metadata for _DequeBufferHeader, v10, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], MEMORY[0x1E4FBC278], v16);
      if (!__OFADD__(v18, v11))
      {
        type metadata accessor for _Deque._Storage();
        _Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(v18 + v11, 0);
        MEMORY[0x1F4188790](v12);
        uint64_t v15[2] = v10;
        v15[3] = a4;
        v15[4] = a5;
        void v15[5] = a1;
        uint64_t v16 = v11;
        uint64_t v17 = a2;
        return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in _Deque.insert<A>(contentsOf:at:), (uint64_t)v15, v13, v10, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
      }
      __break(1u);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Duration.init(_seconds:nanoseconds:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (is_mul_ok(a2, 0x3B9ACA00uLL)) {
      return 1000000000000000000 * a1 + 1000000000 * a2;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant.CodingKeys and conformance SuspendingClock.Instant.CodingKeys);
  }
  return result;
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncCompactMapSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncDropFirstSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncDropWhileSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncFilterSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncFlatMapSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncCompactMapSequence<A, B>.Iterator()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncMapSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncPrefixSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncDropFirstSequence<A>.Iterator()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncPrefixWhileSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncThrowingCompactMapSequence<A, B>.Iterator()
{
  return MEMORY[0x1E4FBC0F0];
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingCompactMapSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingDropWhileSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingFilterSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingFlatMapSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingMapSequence<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingPrefixWhileSequence<A>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for GlobalActor.ActorType : Actor in MainActor()
{
  return &protocol witness table for MainActor;
}

unint64_t lazy protocol witness table accessor for type JobPriority and conformance JobPriority()
{
  unint64_t result = lazy protocol witness table cache variable for type JobPriority and conformance JobPriority;
  if (!lazy protocol witness table cache variable for type JobPriority and conformance JobPriority)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JobPriority and conformance JobPriority);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Task<A, B>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type TaskPriority and conformance TaskPriority()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority;
  if (!lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority;
  if (!lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeCurrentTask and conformance UnsafeCurrentTask()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeCurrentTask and conformance UnsafeCurrentTask;
  if (!lazy protocol witness table cache variable for type UnsafeCurrentTask and conformance UnsafeCurrentTask)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeCurrentTask and conformance UnsafeCurrentTask);
  }
  return result;
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in TaskGroup<A>.Iterator()
{
  return MEMORY[0x1E4FBC278];
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in TaskGroup<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in ThrowingTaskGroup<A, B>.Iterator(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in ThrowingTaskGroup<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in AsyncStream<A>.Continuation.Termination()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncStream<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingStream<A, B>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ContinuousClock.Instant and conformance ContinuousClock.Instant()
{
  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant;
  if (!lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant);
  }
  return result;
}

uint64_t associated type witness table accessor for InstantProtocol.Duration : DurationProtocol in ContinuousClock.Instant()
{
  return MEMORY[0x1E4FBC720];
}

unint64_t lazy protocol witness table accessor for type SuspendingClock.Instant and conformance SuspendingClock.Instant()
{
  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant;
  if (!lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SuspendingClock.Instant and conformance SuspendingClock.Instant);
  }
  return result;
}

uint64_t sub_18E4B3F14()
{
  return 16;
}

__n128 sub_18E4B3F20(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18E4B3F2C()
{
  return 8;
}

void *sub_18E4B3F38(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_18E4B3F44()
{
  return 8;
}

uint64_t sub_18E4B3F50()
{
  return 24;
}

__n128 sub_18E4B3F5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata instantiation function for CheckedContinuation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of Executor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SerialExecutor.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SerialExecutor.asUnownedSerialExecutor()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SerialExecutor.isSameExclusiveExecutionContext(other:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of SerialExecutor.checkIsolated()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t _sSch7enqueueyyScJFTj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t _sSch7enqueueyys3JobVnFTj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t _sSch7enqueueyys11ExecutorJobVnFTj(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t _sSch21asUnownedTaskExecutors0bcD0VyFTj(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UnownedSerialExecutor()
{
  return &type metadata for UnownedSerialExecutor;
}

uint64_t getEnumTagSinglePayload for UnownedSerialExecutor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnownedSerialExecutor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      *(void *)(result + 8) = 0;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnownedTaskExecutor()
{
  return &type metadata for UnownedTaskExecutor;
}

uint64_t type metadata accessor for DispatchQueueShim()
{
  return self;
}

uint64_t destroy for AsyncCompactMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncCompactMapSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);

  return swift_release();
}

uint64_t type metadata instantiation function for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for AsyncDropFirstSequence()
{
  return type metadata completion function for AsyncDropFirstSequence();
}

{
  uint64_t result;
  unint64_t v1;

  __n128 result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncDropFirstSequence.Iterator()
{
  return type metadata completion function for AsyncDropFirstSequence.Iterator();
}

{
  uint64_t result;
  unint64_t v1;

  __n128 result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncDropWhileSequence()
{
  return type metadata completion function for AsyncDropFirstSequence();
}

uint64_t type metadata completion function for AsyncDropWhileSequence.Iterator()
{
  return type metadata completion function for AsyncDropFirstSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncDropWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
      return a1;
    }
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncDropWhileSequence.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  if (*(void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v10 = v8[1];
  *unint64_t v7 = v9;
  v7[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  if ((unint64_t)*v8 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = v8[1];
    *(void *)unint64_t v7 = v9;
    *(void *)(v7 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithTake for AsyncDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v10 = v8[1];
  *unint64_t v7 = v9;
  v7[1] = v10;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncDropWhileSequence.Iterator(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B493CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    if ((v18 + 1) >= 2) {
      return v18;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncDropWhileSequence.Iterator(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v9 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v9 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v9)
  {
    if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v9;
    }
    else {
      int v15 = 1;
    }
    if (((v8 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v9 + a2;
      bzero(a1, v10);
      *a1 = v16;
    }
    switch(v14)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18E4B4B5CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v18 = 0;
            v18[1] = 0;
            *(_DWORD *)unint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v18 = a2;
          }
        }
        else
        {
          uint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for AsyncFilterSequence.Iterator()
{
  return type metadata completion function for AsyncDropFirstSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncFilterSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    size_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    int v12 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncFilterSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFilterSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);

  return swift_release();
}

uint64_t initializeWithCopy for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncFilterSequence.Iterator(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B50DCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncFilterSequence.Iterator(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v9 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v9 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v9)
  {
    if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v9;
    }
    else {
      int v15 = 1;
    }
    if (((v8 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v9 + a2;
      bzero(a1, v10);
      *a1 = v16;
    }
    switch(v14)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18E4B52F0);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = (a2 - 1);
          }
          *unint64_t v18 = v19;
        }
        else
        {
          uint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata instantiation function for AsyncFlatMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t type metadata instantiation function for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t type metadata completion function for AsyncFlatMapSequence.Iterator()
{
  return type metadata completion function for AsyncFlatMapSequence.Iterator();
}

{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncFlatMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unsigned int v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84)) {
    size_t v10 = *(void *)(v8 + 64);
  }
  else {
    size_t v10 = *(void *)(v8 + 64) + 1;
  }
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v9) + v10 + 1 <= 0x18 ? (int v12 = v11 > 7) : (int v12 = 1), v12))
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    unsigned int v13 = v7;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v14 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v15 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = (void *)(((unint64_t)v14 + v9 + 16) & ~v9);
    unint64_t v18 = (const void *)(((unint64_t)v15 + v9 + 16) & ~v9);
    uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
    swift_retain();
    if (v19(v18, 1, v13))
    {
      memcpy(v17, v18, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v17, v18, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v13);
    }
    *((unsigned char *)v17 + v10) = *((unsigned char *)v18 + v10);
  }
  return a1;
}

uint64_t destroy for AsyncFlatMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFlatMapSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t (*v9)(unint64_t, uint64_t);
  uint64_t v10;
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  size_t v10 = v6;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!result)
  {
    unsigned int v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  void (*v20)(void *, void, uint64_t, uint64_t);
  uint64_t v21;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v9 = v8[1];
  *unsigned int v7 = *v8;
  v7[1] = v9;
  size_t v10 = swift_getAssociatedTypeWitness();
  unsigned int v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned __int8 *)(v11 + 80);
  unsigned int v13 = (void *)(((unint64_t)v7 + v12 + 16) & ~v12);
  uint64_t v14 = (const void *)(((unint64_t)v8 + v12 + 16) & ~v12);
  int v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  if (v15(v14, 1, v10))
  {
    int v16 = *(_DWORD *)(v11 + 84);
    uint64_t v17 = *(void *)(v11 + 64);
    if (v16) {
      unint64_t v18 = *(void *)(v11 + 64);
    }
    else {
      unint64_t v18 = v17 + 1;
    }
    memcpy(v13, v14, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
    uint64_t v20 = *(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56);
    uint64_t v19 = v11 + 56;
    v20(v13, 0, 1, v10);
    int v16 = *(_DWORD *)(v19 + 28);
    uint64_t v17 = *(void *)(v19 + 8);
  }
  if (v16) {
    uint64_t v21 = v17;
  }
  else {
    uint64_t v21 = v17 + 1;
  }
  *((unsigned char *)v13 + v21) = *((unsigned char *)v14 + v21);
  return a1;
}

uint64_t assignWithCopy for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  size_t v18;
  size_t v19;
  uint64_t v20;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v9 = v8[1];
  *unsigned int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  size_t v10 = swift_getAssociatedTypeWitness();
  unsigned int v11 = *(void *)(v10 - 8);
  int v12 = *(unsigned __int8 *)(v11 + 80);
  unsigned int v13 = (void *)(((unint64_t)v7 + v12 + 16) & ~v12);
  uint64_t v14 = (void *)(((unint64_t)v8 + v12 + 16) & ~v12);
  int v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v7) = v15(v13, 1, v10);
  int v16 = v15(v14, 1, v10);
  if (v7)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_12;
    }
    uint64_t v17 = *(_DWORD *)(v11 + 84);
    unint64_t v18 = *(void *)(v11 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v13, v14, v10);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v17 = *(_DWORD *)(v11 + 84);
    unint64_t v18 = *(void *)(v11 + 64);
  }
  if (v17) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  memcpy(v13, v14, v19);
LABEL_12:
  if (*(_DWORD *)(v11 + 84)) {
    uint64_t v20 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v11 + 64) + 1;
  }
  *((unsigned char *)v13 + v20) = *((unsigned char *)v14 + v20);
  return a1;
}

uint64_t initializeWithTake for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  void (*v18)(void *, void, uint64_t, uint64_t);
  size_t v19;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unsigned int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  unsigned int v9 = swift_getAssociatedTypeWitness();
  size_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 16) & ~v11);
  unsigned int v13 = (const void *)(((unint64_t)v8 + v11 + 16) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    uint64_t v14 = *(_DWORD *)(v10 + 84);
    int v15 = *(void *)(v10 + 64);
    if (v14) {
      int v16 = v15;
    }
    else {
      int v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    unint64_t v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v17 = v10 + 56;
    v18(v12, 0, 1, v9);
    uint64_t v14 = *(_DWORD *)(v17 + 28);
    int v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    uint64_t v19 = v15;
  }
  else {
    uint64_t v19 = v15 + 1;
  }
  *((unsigned char *)v12 + v19) = *((unsigned char *)v13 + v19);
  return a1;
}

uint64_t assignWithTake for AsyncFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  size_t v17;
  size_t v18;
  uint64_t v19;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unsigned int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  swift_release();
  unsigned int v9 = swift_getAssociatedTypeWitness();
  size_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 16) & ~v11);
  unsigned int v13 = (void *)(((unint64_t)v8 + v11 + 16) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v7) = v14(v12, 1, v9);
  int v15 = v14(v13, 1, v9);
  if (v7)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v10 + 84);
    uint64_t v17 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v16 = *(_DWORD *)(v10 + 84);
    uint64_t v17 = *(void *)(v10 + 64);
  }
  if (v16) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = v17 + 1;
  }
  memcpy(v12, v13, v18);
LABEL_12:
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v19 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v10 + 64) + 1;
  }
  *((unsigned char *)v12 + v19) = *((unsigned char *)v13 + v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(unsigned __int16 *a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t (*v22)(unsigned __int16 *, uint64_t, uint64_t);
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  unsigned int v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  size_t v10 = v9 - 1;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v6 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v6;
  }
  if (v11 <= 0x7FFFFFFF) {
    int v12 = 0x7FFFFFFF;
  }
  else {
    int v12 = v11;
  }
  unsigned int v13 = *(void *)(v5 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  int v15 = *(void *)(v7 + 64);
  int v16 = 1;
  if (!v9) {
    int v16 = 2;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v12) {
    goto LABEL_29;
  }
  uint64_t v17 = v16 + v15 + ((v14 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v14);
  unint64_t v18 = 8 * v17;
  if (v17 > 3) {
    goto LABEL_14;
  }
  uint64_t v20 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    uint64_t v19 = *(_DWORD *)((char *)a1 + v17);
    if (v19) {
      goto LABEL_21;
    }
LABEL_29:
    if (v6 == v12)
    {
      uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
      return v22(a1, v6, AssociatedTypeWitness);
    }
    uint64_t v24 = (unint64_t *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 0x80000000) == 0)
    {
      char v25 = *v24;
      if (v25 >= 0xFFFFFFFF) {
        LODWORD(v25) = -1;
      }
      return (v25 + 1);
    }
    if (v9 >= 2)
    {
      uint64_t v26 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v24 + v14 + 16) & ~v14);
      if (v26 >= 2) {
        return v26 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v20 > 0xFF)
  {
    uint64_t v19 = *(unsigned __int16 *)((char *)a1 + v17);
    if (*(unsigned __int16 *)((char *)a1 + v17)) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }
  if (v20 < 2) {
    goto LABEL_29;
  }
LABEL_14:
  uint64_t v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_29;
  }
LABEL_21:
  uint64_t v21 = (v19 - 1) << v18;
  if (v17 > 3) {
    uint64_t v21 = 0;
  }
  if (v17)
  {
    if (v17 > 3) {
      LODWORD(v17) = 4;
    }
    switch((int)v17)
    {
      case 2:
        LODWORD(v17) = *a1;
        break;
      case 3:
        LODWORD(v17) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v17) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v17) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v12 + (v17 | v21) + 1;
}

void storeEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  size_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  void (*v25)(unsigned char *, uint64_t, uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  void (*v28)(unint64_t, void);
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  unsigned int v9 = 0;
  size_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v11 = v10;
  int v12 = *(_DWORD *)(v10 + 84);
  if (v12) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(void *)(v7 + 64);
  int v15 = *(unsigned __int8 *)(v10 + 80);
  int v16 = *(void *)(v10 + 64);
  if (v8 <= v13) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = v8;
  }
  if (v17 <= 0x7FFFFFFF) {
    unint64_t v18 = 0x7FFFFFFF;
  }
  else {
    unint64_t v18 = v17;
  }
  uint64_t v19 = 1;
  if (!v12) {
    uint64_t v19 = 2;
  }
  uint64_t v20 = v19 + v16 + ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v15);
  if (a3 <= v18) {
    goto LABEL_20;
  }
  if (v20 <= 3)
  {
    uint64_t v21 = ((a3 - v18 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      unsigned int v9 = 4;
      if (v18 >= a2) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    if (v21 >= 0x100) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v21 > 1;
    }
LABEL_20:
    if (v18 >= a2) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  unsigned int v9 = 1;
  if (v18 >= a2)
  {
LABEL_28:
    switch(v9)
    {
      case 1:
        a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 2:
        *(_WORD *)&a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v20] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v8 == v18)
          {
            char v25 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
            v25(a1, a2, v8, AssociatedTypeWitness);
          }
          else
          {
            uint64_t v26 = (void *)((unint64_t)&a1[v14 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((v17 & 0x80000000) != 0)
            {
              if (v12 >= 2)
              {
                uint64_t v28 = *(void (**)(unint64_t, void))(v11 + 56);
                v28(((unint64_t)v26 + v15 + 16) & ~v15, (a2 + 1));
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v27 = a2 ^ 0x80000000;
                v26[1] = 0;
              }
              else
              {
                uint64_t v27 = (a2 - 1);
              }
              *uint64_t v26 = v27;
            }
          }
        }
        break;
    }
    return;
  }
LABEL_21:
  uint64_t v22 = ~v18 + a2;
  if (v20 < 4)
  {
    uint64_t v23 = (v22 >> (8 * v20)) + 1;
    if (v20)
    {
      uint64_t v24 = v22 & ~(-1 << (8 * v20));
      bzero(a1, v20);
      if (v20 == 3)
      {
        *(_WORD *)a1 = v24;
        a1[2] = BYTE2(v24);
      }
      else if (v20 == 2)
      {
        *(_WORD *)a1 = v24;
      }
      else
      {
        *a1 = v24;
      }
    }
  }
  else
  {
    bzero(a1, v20);
    *(_DWORD *)a1 = v22;
    uint64_t v23 = 1;
  }
  switch(v9)
  {
    case 1:
      a1[v20] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v20] = v23;
      break;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x18E4B93DCLL);
    case 4:
      *(_DWORD *)&a1[v20] = v23;
      break;
    default:
      return;
  }
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7 = *(int **)(a3 + 32);
  size_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  uint64_t v8 = (void *)swift_task_alloc(v7[1]);
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = static Task<>.sleep<A>(until:tolerance:clock:);
  return v10(a1, a2, a3);
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v13 = *(int **)(a6 + 40);
  int v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
  uint64_t v14 = (void *)swift_task_alloc(v13[1]);
  *(void *)(v6 + 16) = v14;
  *uint64_t v14 = v6;
  v14[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return v16(a1, a2, a3, a4, a5, a6);
}

uint64_t type metadata completion function for AsyncCompactMapSequence.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCompactMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    size_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    int v12 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCompactMapSequence.Iterator(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B5BE8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncCompactMapSequence.Iterator(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v9 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v9 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v9)
  {
    if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v9;
    }
    else {
      int v15 = 1;
    }
    if (((v8 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v9 + a2;
      bzero(a1, v10);
      *a1 = v16;
    }
    switch(v14)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18E4B5E00);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = (a2 - 1);
          }
          *unint64_t v18 = v19;
        }
        else
        {
          uint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncDropFirstSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for AsyncDropFirstSequence(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncDropFirstSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncDropFirstSequence(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B6250);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AsyncDropFirstSequence(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18E4B6410);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncDropFirstSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for AsyncDropFirstSequence.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncDropFirstSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncDropFirstSequence.Iterator(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v7 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v8 = v7 & 0xFFFFFFF8;
    if ((v7 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = a2 - v6 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v7);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v7);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B6A34);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v7);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v6 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  unsigned int v15 = *(uint64_t (**)(_DWORD *))(v5 + 48);

  return v15(a1);
}

void storeEnumTagSinglePayload for AsyncDropFirstSequence.Iterator(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v11 = 0;
    int v12 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v11)
      {
        case 1:
          *((unsigned char *)a1 + v8) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)((char *)a1 + v8) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)((char *)a1 + v8) = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unsigned int v15 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
            v15(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v9 = a3 - v7 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    int v12 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v13 = v12;
  }
  else {
    int v13 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v14 = ~v7 + a2;
    bzero(a1, v8);
    *a1 = v14;
  }
  switch(v11)
  {
    case 1:
      *((unsigned char *)a1 + v8) = v13;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v8) = v13;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18E4B6C14);
    case 4:
      *(_DWORD *)((char *)a1 + v8) = v13;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for AsyncPrefixWhileSequence.Iterator()
{
  return type metadata completion function for AsyncPrefixWhileSequence.Iterator();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncPrefixWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unsigned int v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 1) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    int v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    int v11 = ~v6;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    int v12 = (char *)a1 + v6;
    int v13 = (char *)a2 + v6;
    int v14 = (unint64_t)(v12 + 1) & v11;
    unsigned int v15 = (unint64_t)(v13 + 1) & v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v14, v15, AssociatedTypeWitness);
    int v16 = (void *)((v7 + v15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = v16[1];
    unint64_t v18 = (void *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v18 = *v16;
    v18[1] = v17;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncPrefixWhileSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncPrefixWhileSequence.Iterator(a1);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);

  return swift_release();
}

unsigned char *initializeWithCopy for AsyncPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return initializeWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 16;
  unsigned int v7 = *(unsigned __int8 *)(v5 + 80);
  size_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  unsigned int v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v9, AssociatedTypeWitness);
  int v10 = *(void *)(v6 + 48) + 7;
  int v11 = (void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  int v12 = (void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  int v13 = v12[1];
  *int v11 = *v12;
  v11[1] = v13;
  swift_retain();
  return a1;
}

unsigned char *assignWithCopy for AsyncPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return assignWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 24;
  unsigned int v7 = *(unsigned __int8 *)(v5 + 80);
  size_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  unsigned int v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v8, v9, AssociatedTypeWitness);
  int v10 = *(void *)(v6 + 40) + 7;
  int v11 = (void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  int v12 = (void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  int v13 = v12[1];
  *int v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *initializeWithTake for AsyncPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return initializeWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 32;
  unsigned int v7 = *(unsigned __int8 *)(v5 + 80);
  size_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  unsigned int v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v9, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v6 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v6 + 32) + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned char *assignWithTake for AsyncPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return assignWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5 + 40;
  unsigned int v7 = *(unsigned __int8 *)(v5 + 80);
  size_t v8 = (unint64_t)&a1[v7 + 1] & ~v7;
  unsigned int v9 = (unint64_t)&a2[v7 + 1] & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v8, v9, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v6 + 24) + 7 + v8) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v6 + 24) + 7 + v9) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(int *a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t v22;
  uint64_t vars8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF) {
    size_t v8 = 0x7FFFFFFF;
  }
  else {
    size_t v8 = *(_DWORD *)(v5 + 84);
  }
  unsigned int v9 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  int v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7;
  if (v8 < a2)
  {
    int v11 = ((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
    int v12 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      int v13 = 2;
    }
    else {
      int v13 = a2 - v8 + 1;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v11);
        if (!v16) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v16) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4BAD20);
      case 4:
        int v16 = *(int *)((char *)a1 + v11);
        if (!v16) {
          break;
        }
LABEL_22:
        unint64_t v18 = v16 - 1;
        if (v12)
        {
          unint64_t v18 = 0;
          uint64_t v19 = *a1;
        }
        else
        {
          uint64_t v19 = 0;
        }
        return v8 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = ((unint64_t)a1 + v9 + 1) & ~v9;
  if (v7 < 0x7FFFFFFF)
  {
    uint64_t v22 = *(void *)((v10 + v20) & 0xFFFFFFFFFFFFFFF8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
  else
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v6 + 48);
    return v21(v20);
  }
}

void storeEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(_DWORD *a1, uint64_t a2, unsigned int a3)
{
}

{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t vars8;

  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  int v10 = *(void *)(v6 + 64) + 7;
  int v11 = ((v10 + ((v8 + 1) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v9 >= a3)
  {
    int v14 = 0;
    unsigned int v15 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)((char *)a1 + v11) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v18 = ((unint64_t)a1 + v8 + 1) & ~v8;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v20 = (void *)((v10 + v18) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v21 = a2 ^ 0x80000000;
                v20[1] = 0;
              }
              else
              {
                uint64_t v21 = (a2 - 1);
              }
              *uint64_t v20 = v21;
            }
            else
            {
              uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v6 + 56);
              v19(v18, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v10 + ((v8 + 1) & ~v8)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v12 = a3 - v9 + 1;
    }
    else {
      int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    unsigned int v15 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v8 + 1) & ~v8)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((v10 + ((v8 + 1) & ~v8)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    uint64_t v17 = ~v9 + a2;
    bzero(a1, v11);
    *a1 = v17;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v11) = v16;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v11) = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18E4BAF68);
    case 4:
      *(_DWORD *)((char *)a1 + v11) = v16;
      break;
    default:
      return;
  }
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t destroy for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncCompactMapSequence.Iterator(a1);
}

uint64_t type metadata completion function for AsyncThrowingDropWhileSequence.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingDropWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
    *(unsigned char *)(v10 + 17) = *(unsigned char *)(v11 + 17);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFilterSequence.Iterator(a1);
}

uint64_t initializeWithCopy for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = v9;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = v9;
  swift_retain();
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  return a1;
}

uint64_t initializeWithTake for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  return a1;
}

uint64_t assignWithTake for AsyncThrowingDropWhileSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingDropWhileSequence.Iterator(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
    if (v9 <= 3) {
      unsigned int v10 = ((a2 - v7 + 0xFFFF) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v9);
        if (*(unsigned __int16 *)((char *)a1 + v9)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B739CLL);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v9);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v9);
        if (v9 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncThrowingDropWhileSequence.Iterator(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
  char v11 = 8 * v10;
  if (v9 >= a3)
  {
    int v14 = 0;
    if (v9 >= a2)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_44;
        case 4:
          *(unsigned int *)((char *)a1 + v10) = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = (a2 - 1);
              }
              *uint64_t v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(unsigned int *, uint64_t))(v6 + 56);
              v18(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v10 <= 3) {
      unsigned int v12 = ((a3 - v9 + 0xFFFF) >> v11) + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v9 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v15 = ~v9 + a2;
  unsigned int v16 = v15 >> v11;
  bzero(a1, v10);
  if (v10 <= 3) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 > 3) {
    *a1 = v15;
  }
  else {
    *(_WORD *)a1 = v15;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v17;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v17;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18E4B75E0);
    case 4:
      *(unsigned int *)((char *)a1 + v10) = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for AsyncThrowingFilterSequence.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingFilterSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = v9;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = v9;
  swift_retain();
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t initializeWithTake for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t assignWithTake for AsyncThrowingFilterSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingFilterSequence.Iterator(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    if (v9 < 4) {
      unsigned int v10 = ((a2 - v7 + 255) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B7CE0);
      case 4:
        int v13 = *(_DWORD *)&a1[v9];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v15 = 0;
        }
        if (v9 == 1) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    int v17 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncThrowingFilterSequence.Iterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v9 >= a3)
  {
    int v14 = 0;
    if (v9 >= a2)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = (a2 - 1);
              }
              *uint64_t v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
              v18(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v10 <= 3) {
      unsigned int v12 = ((a3 - v9 + 255) >> v11) + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v9 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v15 = ~v9 + a2;
  if (v10 < 4) {
    int v16 = (v15 >> v11) + 1;
  }
  else {
    int v16 = 1;
  }
  if (v10 >= 4) {
    unsigned int v17 = v15;
  }
  else {
    unsigned int v17 = v15;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x18E4B7F2CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for AsyncFlatMapSequence()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncThrowingFlatMapSequence.Iterator()
{
  return type metadata completion function for AsyncFlatMapSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingFlatMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t destroy for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncFlatMapSequence.Iterator(a1);
}

uint64_t initializeWithCopy for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t assignWithCopy for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t initializeWithTake for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t assignWithTake for AsyncThrowingFlatMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  return assignWithTake for AsyncFlatMapSequence.Iterator(a1, a2);
}

uint64_t getEnumTagSinglePayload for AsyncThrowingFlatMapSequence.Iterator(unsigned __int16 *a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncFlatMapSequence.Iterator(a1, a2);
}

void storeEnumTagSinglePayload for AsyncThrowingFlatMapSequence.Iterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
}

uint64_t type metadata completion function for AsyncCompactMapSequence()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsyncThrowingCompactMapSequence.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingCompactMapSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = v9;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = v9;
  swift_retain();
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t initializeWithTake for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t assignWithTake for AsyncThrowingCompactMapSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingCompactMapSequence.Iterator(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    if (v9 < 4) {
      unsigned int v10 = ((a2 - v7 + 255) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4B9B98);
      case 4:
        int v13 = *(_DWORD *)&a1[v9];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v15 = 0;
        }
        if (v9 == 1) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    unsigned int v17 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncThrowingCompactMapSequence.Iterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v9 >= a3)
  {
    int v14 = 0;
    if (v9 >= a2)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = (a2 - 1);
              }
              *uint64_t v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
              v18(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v10 <= 3) {
      unsigned int v12 = ((a3 - v9 + 255) >> v11) + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v9 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v15 = ~v9 + a2;
  if (v10 < 4) {
    int v16 = (v15 >> v11) + 1;
  }
  else {
    int v16 = 1;
  }
  if (v10 >= 4) {
    unsigned int v17 = v15;
  }
  else {
    unsigned int v17 = v15;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x18E4B9DE8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCompactMapSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    size_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    unsigned int v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AsyncCompactMapSequence(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncCompactMapSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCompactMapSequence(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18E4BA364);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for AsyncCompactMapSequence(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18E4BA558);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *unint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for AsyncThrowingPrefixWhileSequence.Iterator()
{
  return type metadata completion function for AsyncPrefixWhileSequence.Iterator();
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingPrefixWhileSequence.Iterator(uint64_t *a1, uint64_t *a2)
{
  return initializeBufferWithCopyOfBuffer for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

uint64_t destroy for AsyncThrowingPrefixWhileSequence.Iterator(uint64_t a1)
{
  return destroy for AsyncPrefixWhileSequence.Iterator(a1);
}

unsigned char *initializeWithCopy for AsyncThrowingPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return initializeWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

unsigned char *assignWithCopy for AsyncThrowingPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return assignWithCopy for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

unsigned char *initializeWithTake for AsyncThrowingPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return initializeWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

unsigned char *assignWithTake for AsyncThrowingPrefixWhileSequence.Iterator(unsigned char *a1, unsigned char *a2)
{
  return assignWithTake for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

uint64_t getEnumTagSinglePayload for AsyncThrowingPrefixWhileSequence.Iterator(int *a1, unsigned int a2)
{
  return getEnumTagSinglePayload for AsyncPrefixWhileSequence.Iterator(a1, a2);
}

void storeEnumTagSinglePayload for AsyncThrowingPrefixWhileSequence.Iterator(_DWORD *a1, uint64_t a2, unsigned int a3)
{
}

uint64_t dispatch thunk of static GlobalActor.shared.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static GlobalActor.sharedUnownedExecutor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for MainActor()
{
  return self;
}

uint64_t method lookup function for MainActor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MainActor);
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  char *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UnownedJob()
{
  return &type metadata for UnownedJob;
}

void *type metadata accessor for Job()
{
  return &type metadata for Job;
}

void *type metadata accessor for ExecutorJob()
{
  return &type metadata for ExecutorJob;
}

ValueMetadata *type metadata accessor for JobPriority()
{
  return &type metadata for JobPriority;
}

uint64_t getEnumTagSinglePayload for UnownedJob(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnownedJob(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for UnsafeContinuation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Task()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for TaskPriority()
{
  return &type metadata for TaskPriority;
}

ValueMetadata *type metadata accessor for UnsafeCurrentTask()
{
  return &type metadata for UnsafeCurrentTask;
}

ValueMetadata *type metadata accessor for CancellationError()
{
  return &type metadata for CancellationError;
}

uint64_t type metadata instantiation function for TaskGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t type metadata accessor for TaskGroup.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for TaskGroup.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskGroup.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for ThrowingTaskGroup.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for DiscardingTaskGroup()
{
  return &type metadata for DiscardingTaskGroup;
}

uint64_t getEnumTagSinglePayload for TaskGroup(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ThrowingDiscardingTaskGroup()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for TaskLocal()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata accessor for TaskLocal()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for TaskLocal(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TaskLocal);
}

uint64_t dispatch thunk of TaskLocal.__allocating_init(wrappedValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata completion function for AsyncStream._Storage()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for AsyncThrowingStream._Storage()
{
  uint64_t result = type metadata accessor for AsyncThrowingStream._Storage.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncThrowingStream._Storage.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TaskLocal()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for AsyncStream.Continuation.Termination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  char *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AsyncStream.Continuation.Termination(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AsyncStream.Continuation.Termination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18E4BB640);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for AsyncStream.Continuation.Termination(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for AsyncStream.Continuation.Termination(unsigned char *result, char a2)
{
  char *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for AsyncStream.Continuation.Termination()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTag for AsyncStream.Continuation.BufferingPolicy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for AsyncStream.Continuation.BufferingPolicy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncStream._Context()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncStream.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncThrowingStream.Continuation.Termination()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AsyncThrowingStream.Continuation.Termination(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 >= 2) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = v8 + 1;
  }
  uint64_t v10 = *(_DWORD *)(v6 + 80);
  if (v10 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v9 > 0x18)
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    if (v7 > 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, void, uint64_t))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), v5) >= 2)
      {
LABEL_37:
        memcpy(a1, a2, v9);
        return a1;
      }
    }
    else if (a2[v8])
    {
      int v14 = (a2[v8] - 1) << (8 * v8);
      if (v8 > 3) {
        int v14 = 0;
      }
      if (v8)
      {
        int v15 = v8 <= 3 ? v8 : 4;
        switch(v15)
        {
          case 2:
            int v16 = *(unsigned __int16 *)a2;
            break;
          case 3:
            int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            break;
          case 4:
            int v16 = *(_DWORD *)a2;
            break;
          default:
            int v16 = *a2;
            break;
        }
      }
      else
      {
        int v16 = 0;
      }
      if ((v16 | v14) != 0xFFFFFFFF) {
        goto LABEL_37;
      }
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1) {
        return a1;
      }
      goto LABEL_31;
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    if (v7 <= 1) {
LABEL_31:
    }
      *((unsigned char *)a1 + v8) = 0;
  }
  return a1;
}

unsigned __int16 *destroy for AsyncThrowingStream.Continuation.Termination(unsigned __int16 *result, uint64_t a2)
{
  int v2 = result;
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v4 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v3 - 8);
  if (v5 > 1)
  {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(v4 + 48))(result);
    uint64_t v4 = v9;
    if (result >= 2) {
      return result;
    }
    goto LABEL_19;
  }
  if (!*((unsigned char *)result + v6)) {
    goto LABEL_19;
  }
  int v7 = (*((unsigned __int8 *)result + v6) - 1) << (8 * v6);
  if (v6 > 3) {
    int v7 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *result;
        break;
      case 3:
        LODWORD(v6) = *result | (*((unsigned __int8 *)result + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)result;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)result;
        break;
    }
  }
  if ((v6 | v7) == 0xFFFFFFFF)
  {
LABEL_19:
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
    if (!result)
    {
      size_t v8 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v9 + 8);
      return (unsigned __int16 *)v8(v2, v3);
    }
  }
  return result;
}

void *initializeWithCopy for AsyncThrowingStream.Continuation.Termination(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    if (*((unsigned char *)a2 + v8))
    {
      int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
      if (v8 > 3) {
        int v9 = 0;
      }
      if (v8)
      {
        int v10 = v8 <= 3 ? v8 : 4;
        switch(v10)
        {
          case 2:
            int v11 = *a2;
            break;
          case 3:
            int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v11 = *(_DWORD *)a2;
            break;
          default:
            int v11 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v11 = 0;
      }
      if ((v11 | v9) != 0xFFFFFFFF) {
        goto LABEL_25;
      }
    }
LABEL_15:
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1) {
        return a1;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1) {
        return a1;
      }
    }
    *((unsigned char *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), v5) < 2)goto LABEL_15; {
LABEL_25:
  }
  if (v7 >= 2) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *assignWithCopy for AsyncThrowingStream.Continuation.Termination(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    char v9 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v10 = (*((unsigned __int8 *)a1 + v8) - 1) << v9;
      if (v8 > 3) {
        int v10 = 0;
      }
      if (v8)
      {
        int v11 = v8 <= 3 ? v8 : 4;
        switch(v11)
        {
          case 2:
            int v12 = *a1;
            break;
          case 3:
            int v12 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v12 = *(_DWORD *)a1;
            break;
          default:
            int v12 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v12 = 0;
      }
      if ((v12 | v10) != 0xFFFFFFFF)
      {
        if (a2[v8])
        {
          int v16 = (a2[v8] - 1) << v9;
          if (v8 > 3) {
            int v16 = 0;
          }
          if (v8)
          {
            int v17 = v8 <= 3 ? v8 : 4;
            switch(v17)
            {
              case 2:
                int v18 = *(unsigned __int16 *)a2;
                break;
              case 3:
                int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                break;
              case 4:
                int v18 = *(_DWORD *)a2;
                break;
              default:
                int v18 = *a2;
                break;
            }
          }
          else
          {
            int v18 = 0;
          }
          if ((v18 | v16) != 0xFFFFFFFF) {
            goto LABEL_62;
          }
        }
LABEL_66:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
        {
          memcpy(a1, a2, v8);
          if (v7 > 1) {
            return a1;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
          if (v7 > 1) {
            return a1;
          }
        }
        *((unsigned char *)a1 + v8) = 0;
        return a1;
      }
    }
    if (a2[v8])
    {
      int v19 = (a2[v8] - 1) << v9;
      if (v8 > 3) {
        int v19 = 0;
      }
      if (v8)
      {
        int v20 = v8 <= 3 ? v8 : 4;
        switch(v20)
        {
          case 2:
            int v21 = *(unsigned __int16 *)a2;
            break;
          case 3:
            int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            break;
          case 4:
            int v21 = *(_DWORD *)a2;
            break;
          default:
            int v21 = *a2;
            break;
        }
      }
      else
      {
        int v21 = 0;
      }
      if ((v21 | v19) != 0xFFFFFFFF)
      {
        uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
LABEL_49:
        if (!v13(a1, 1, v5)) {
          (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
        }
        goto LABEL_62;
      }
    }
LABEL_51:
    uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    int v23 = v22(a1, 1, v5);
    int v24 = v22((unsigned __int16 *)a2, 1, v5);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 24))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  unsigned int v14 = v13(a1, *(unsigned int *)(v6 + 84), v5);
  unsigned int v15 = v13((unsigned __int16 *)a2, v7, v5);
  if (v14 < 2)
  {
    if (v15 >= 2) {
      goto LABEL_49;
    }
    goto LABEL_51;
  }
  if (v15 < 2) {
    goto LABEL_66;
  }
LABEL_62:
  if (v7 >= 2) {
    size_t v25 = v8;
  }
  else {
    size_t v25 = v8 + 1;
  }
  memcpy(a1, a2, v25);
  return a1;
}

void *initializeWithTake for AsyncThrowingStream.Continuation.Termination(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    if (*((unsigned char *)a2 + v8))
    {
      int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
      if (v8 > 3) {
        int v9 = 0;
      }
      if (v8)
      {
        int v10 = v8 <= 3 ? v8 : 4;
        switch(v10)
        {
          case 2:
            int v11 = *a2;
            break;
          case 3:
            int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v11 = *(_DWORD *)a2;
            break;
          default:
            int v11 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v11 = 0;
      }
      if ((v11 | v9) != 0xFFFFFFFF) {
        goto LABEL_25;
      }
    }
LABEL_15:
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1) {
        return a1;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1) {
        return a1;
      }
    }
    *((unsigned char *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), v5) < 2)goto LABEL_15; {
LABEL_25:
  }
  if (v7 >= 2) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *assignWithTake for AsyncThrowingStream.Continuation.Termination(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    char v9 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v10 = (*((unsigned __int8 *)a1 + v8) - 1) << v9;
      if (v8 > 3) {
        int v10 = 0;
      }
      if (v8)
      {
        int v11 = v8 <= 3 ? v8 : 4;
        switch(v11)
        {
          case 2:
            int v12 = *a1;
            break;
          case 3:
            int v12 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v12 = *(_DWORD *)a1;
            break;
          default:
            int v12 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v12 = 0;
      }
      if ((v12 | v10) != 0xFFFFFFFF)
      {
        if (a2[v8])
        {
          int v16 = (a2[v8] - 1) << v9;
          if (v8 > 3) {
            int v16 = 0;
          }
          if (v8)
          {
            int v17 = v8 <= 3 ? v8 : 4;
            switch(v17)
            {
              case 2:
                int v18 = *(unsigned __int16 *)a2;
                break;
              case 3:
                int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                break;
              case 4:
                int v18 = *(_DWORD *)a2;
                break;
              default:
                int v18 = *a2;
                break;
            }
          }
          else
          {
            int v18 = 0;
          }
          if ((v18 | v16) != 0xFFFFFFFF) {
            goto LABEL_62;
          }
        }
LABEL_66:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
        {
          memcpy(a1, a2, v8);
          if (v7 > 1) {
            return a1;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
          if (v7 > 1) {
            return a1;
          }
        }
        *((unsigned char *)a1 + v8) = 0;
        return a1;
      }
    }
    if (a2[v8])
    {
      int v19 = (a2[v8] - 1) << v9;
      if (v8 > 3) {
        int v19 = 0;
      }
      if (v8)
      {
        int v20 = v8 <= 3 ? v8 : 4;
        switch(v20)
        {
          case 2:
            int v21 = *(unsigned __int16 *)a2;
            break;
          case 3:
            int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            break;
          case 4:
            int v21 = *(_DWORD *)a2;
            break;
          default:
            int v21 = *a2;
            break;
        }
      }
      else
      {
        int v21 = 0;
      }
      if ((v21 | v19) != 0xFFFFFFFF)
      {
        uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
LABEL_49:
        if (!v13(a1, 1, v5)) {
          (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
        }
        goto LABEL_62;
      }
    }
LABEL_51:
    uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    int v23 = v22(a1, 1, v5);
    int v24 = v22((unsigned __int16 *)a2, 1, v5);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 40))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  unsigned int v14 = v13(a1, *(unsigned int *)(v6 + 84), v5);
  unsigned int v15 = v13((unsigned __int16 *)a2, v7, v5);
  if (v14 < 2)
  {
    if (v15 >= 2) {
      goto LABEL_49;
    }
    goto LABEL_51;
  }
  if (v15 < 2) {
    goto LABEL_66;
  }
LABEL_62:
  if (v7 >= 2) {
    size_t v25 = v8;
  }
  else {
    size_t v25 = v8 + 1;
  }
  memcpy(a1, a2, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingStream.Continuation.Termination(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (v5 < 2)
  {
    unsigned int v7 = 0;
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_27;
  }
  char v10 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_10;
  }
  unsigned int v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v8);
    if (v11) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_27;
      }
LABEL_10:
      int v11 = *((unsigned __int8 *)a1 + v8);
      if (!*((unsigned char *)a1 + v8)) {
        goto LABEL_27;
      }
LABEL_17:
      int v13 = (v11 - 1) << v10;
      if (v8 > 3) {
        int v13 = 0;
      }
      if (v8)
      {
        if (v8 <= 3) {
          int v14 = v8;
        }
        else {
          int v14 = 4;
        }
        switch(v14)
        {
          case 2:
            int v15 = *a1;
            break;
          case 3:
            int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v15 = *(_DWORD *)a1;
            break;
          default:
            int v15 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v15 = 0;
      }
      return v7 + (v15 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_17;
    }
  }
LABEL_27:
  if (!v7) {
    return 0;
  }
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  BOOL v17 = v16 >= 2;
  uint64_t result = v16 - 2;
  if (result == 0 || !v17) {
    return 0;
  }
  return result;
}

void storeEnumTagSinglePayload for AsyncThrowingStream.Continuation.Termination(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v10;
  }
  if (v8 >= 2) {
    unsigned int v11 = v9 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v8 >= 2) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  BOOL v13 = a3 >= v11;
  unsigned int v14 = a3 - v11;
  if (v14 == 0 || !v13)
  {
LABEL_21:
    if (v11 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v11 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_21;
  }
  int v6 = 4;
  if (v11 < a2)
  {
LABEL_22:
    unsigned int v16 = ~v11 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_29:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_61:
      __break(1u);
      JUMPOUT(0x18E4BCD80);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (a2)
      {
LABEL_34:
        if (a2 + 1 <= v9)
        {
          if (a2 != -1 && v8 >= 2)
          {
            uint64_t v22 = *(void (**)(void))(v7 + 56);
            v22();
          }
        }
        else
        {
          if (v10 <= 3) {
            int v19 = ~(-1 << (8 * v10));
          }
          else {
            int v19 = -1;
          }
          if (v10)
          {
            int v20 = v19 & (a2 - v9);
            if (v10 <= 3) {
              int v21 = v10;
            }
            else {
              int v21 = 4;
            }
            bzero(a1, v10);
            switch(v21)
            {
              case 2:
                *(_WORD *)a1 = v20;
                break;
              case 3:
                *(_WORD *)a1 = v20;
                a1[2] = BYTE2(v20);
                break;
              case 4:
                *(_DWORD *)a1 = v20;
                break;
              default:
                *a1 = v20;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t getEnumTag for AsyncThrowingStream.Continuation.Termination(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  unsigned int v3 = *(_DWORD *)(v2 + 84);
  if (v3) {
    uint64_t v4 = *(void *)(v2 + 64);
  }
  else {
    uint64_t v4 = *(void *)(v2 + 64) + 1;
  }
  if (v3 > 1)
  {
    unsigned int v6 = (*(uint64_t (**)(void))(v2 + 48))();
    if (v6 >= 2) {
      return v6 - 1;
    }
    else {
      return 0;
    }
  }
  else if (*((unsigned char *)a1 + v4))
  {
    int v5 = (*((unsigned __int8 *)a1 + v4) - 1) << (8 * v4);
    if (v4 > 3) {
      int v5 = 0;
    }
    if (v4)
    {
      if (v4 > 3) {
        LODWORD(v4) = 4;
      }
      switch((int)v4)
      {
        case 2:
          LODWORD(v4) = *a1;
          break;
        case 3:
          LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          LODWORD(v4) = *(_DWORD *)a1;
          break;
        default:
          LODWORD(v4) = *(unsigned __int8 *)a1;
          break;
      }
    }
    return (v4 | v5) + 1;
  }
  else
  {
    return 0;
  }
}

void destructiveInjectEnumTag for AsyncThrowingStream.Continuation.Termination(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (v5)
  {
    size_t v7 = *(void *)(v4 + 64);
  }
  else
  {
    unsigned int v6 = 0;
    size_t v7 = *(void *)(v4 + 64) + 1;
  }
  if (v6 < a2)
  {
    unsigned int v8 = ~v6 + a2;
    if (v7 >= 4)
    {
      bzero(a1, v7);
      *a1 = v8;
      LOBYTE(v9) = 1;
      if (v5 > 1) {
        return;
      }
LABEL_21:
      *((unsigned char *)a1 + v7) = v9;
      return;
    }
    int v9 = (v8 >> (8 * v7)) + 1;
    if (v7)
    {
      int v10 = v8 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if (v7 != 3)
      {
        if (v7 == 2)
        {
          *(_WORD *)a1 = v10;
          if (v5 > 1) {
            return;
          }
        }
        else
        {
          *(unsigned char *)a1 = v10;
          if (v5 > 1) {
            return;
          }
        }
        goto LABEL_21;
      }
      *(_WORD *)a1 = v10;
      *((unsigned char *)a1 + 2) = BYTE2(v10);
    }
    if (v5 > 1) {
      return;
    }
    goto LABEL_21;
  }
  if (v5 > 1)
  {
    if (a2)
    {
      uint64_t v11 = a2 + 1;
      size_t v12 = *(void (**)(unsigned int *, uint64_t, uint64_t))(v4 + 56);
      v12(a1, v11, v5);
    }
  }
  else
  {
    *((unsigned char *)a1 + v7) = 0;
  }
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.Termination()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncStream.Continuation.YieldResult()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AsyncStream.Continuation.YieldResult(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *unsigned int v3 = *(void *)a2;
    unsigned int v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      (*(void (**)(void *))(v4 + 16))(__dst);
      *((unsigned char *)v3 + v5) = 1;
    }
    else if (v9)
    {
      memcpy(__dst, a2, v5 + 1);
    }
    else
    {
      *__dst = *(void *)a2;
      *((unsigned char *)__dst + v5) = 0;
    }
  }
  return v3;
}

unsigned __int8 *destroy for AsyncStream.Continuation.YieldResult(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = result[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *result;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)result;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        return result;
    }
  }
  if (v3 == 1) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  return result;
}

unsigned char *initializeWithCopy for AsyncStream.Continuation.YieldResult(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    __dst[v4] = 1;
  }
  else if (v5)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else
  {
    *(void *)__dst = *(void *)a2;
    __dst[v4] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for AsyncStream.Continuation.YieldResult(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = __dst[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *__dst;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)__dst;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          goto LABEL_18;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
LABEL_18:
    unsigned int v13 = __src[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *__src;
          goto LABEL_27;
        case 2:
          int v16 = *(unsigned __int16 *)__src;
          goto LABEL_27;
        case 3:
          int v16 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_27;
        case 4:
          int v16 = *(_DWORD *)__src;
LABEL_27:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else if (v13)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      *(void *)__dst = *(void *)__src;
      __dst[v7] = 0;
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for AsyncStream.Continuation.YieldResult(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst);
    __dst[v4] = 1;
  }
  else if (v5)
  {
    memcpy(__dst, a2, v4 + 1);
  }
  else
  {
    *(void *)__dst = *(void *)a2;
    __dst[v4] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for AsyncStream.Continuation.YieldResult(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = __dst[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *__dst;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)__dst;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          goto LABEL_18;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
LABEL_18:
    unsigned int v13 = __src[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *__src;
          goto LABEL_27;
        case 2:
          int v16 = *(unsigned __int16 *)__src;
          goto LABEL_27;
        case 3:
          int v16 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_27;
        case 4:
          int v16 = *(_DWORD *)__src;
LABEL_27:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else if (v13)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      *(void *)__dst = *(void *)__src;
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for AsyncStream.Continuation.YieldResult(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void storeEnumTagSinglePayload for AsyncStream.Continuation.YieldResult(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x18E4BDD80);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for AsyncStream.Continuation.YieldResult(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void destructiveInjectEnumTag for AsyncStream.Continuation.YieldResult(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t getEnumTagSinglePayload for AsyncStream.Continuation.BufferingPolicy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncStream.Continuation.BufferingPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncThrowingStream._Context()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncThrowingStream.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for _DequeBuffer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _DequeBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of Clock.now.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Clock.minimumResolution.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Clock.sleep(until:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = *(int **)(a4 + 48);
  int v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  unsigned int v10 = (void *)swift_task_alloc(v9[1]);
  *(void *)(v4 + 16) = v10;
  *unsigned int v10 = v4;
  v10[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return v12(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for ContinuousClock()
{
  return &type metadata for ContinuousClock;
}

uint64_t getEnumTagSinglePayload for ContinuousClock.Instant(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ContinuousClock.Instant(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ContinuousClock.Instant()
{
  return &type metadata for ContinuousClock.Instant;
}

ValueMetadata *type metadata accessor for SuspendingClock()
{
  return &type metadata for SuspendingClock;
}

ValueMetadata *type metadata accessor for SuspendingClock.Instant()
{
  return &type metadata for SuspendingClock.Instant;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _DequeBufferHeader(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _DequeBufferHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _DequeBufferHeader()
{
  return &type metadata for _DequeBufferHeader;
}

uint64_t type metadata completion function for AsyncThrowingStream._Storage.State()
{
  type metadata accessor for AsyncThrowingStream._Storage.Terminal();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingStream._Storage.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *(unsigned int *)(v5 + 84);
  uint64_t v9 = v7;
  if (v8) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  if (v8 >= 2) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  int v12 = v7 & 0x100000;
  if (v9 > 7 || v12 != 0 || v11 + ((v9 + 48) & ~v9) > 0x18)
  {
    uint64_t v15 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v15 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16)));
    swift_retain();
  }
  else
  {
    size_t __n = v11;
    uint64_t v17 = *a2;
    unint64_t v16 = (unint64_t)a2 + 15;
    *a1 = v17;
    uint64_t v18 = ~v9;
    int v19 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v19 = *(void *)(v16 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v20 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = ((v16 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
    *(void *)unint64_t v20 = v22;
    unint64_t v23 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
    int v24 = (unint64_t *)(((v16 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v25 = *v24;
    swift_retain();
    if (v25 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      unint64_t v26 = v24[1];
      *(void *)unint64_t v23 = v25;
      *(void *)(v23 + 8) = v26;
      swift_retain();
    }
    uint64_t v27 = (char *)v24 + v9;
    uint64_t v28 = (void *)((v23 + v9 + 16) & v18);
    uint64_t v29 = (unsigned __int8 *)((unint64_t)(v27 + 16) & v18);
    if (v8 > 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v29, v8, v4) >= 2)
      {
LABEL_40:
        memcpy(v28, v29, __n);
        return v3;
      }
    }
    else if (v29[v10])
    {
      int v30 = (v29[v10] - 1) << (8 * v10);
      if (v10 > 3) {
        int v30 = 0;
      }
      if (v10)
      {
        int v31 = v10 <= 3 ? v10 : 4;
        switch(v31)
        {
          case 2:
            int v32 = *(unsigned __int16 *)v29;
            break;
          case 3:
            int v32 = *(unsigned __int16 *)v29 | (v29[2] << 16);
            break;
          case 4:
            int v32 = *(_DWORD *)v29;
            break;
          default:
            int v32 = *v29;
            break;
        }
      }
      else
      {
        int v32 = 0;
      }
      if ((v32 | v30) != 0xFFFFFFFF) {
        goto LABEL_40;
      }
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v29, 1, v4))
    {
      memcpy(v28, v29, v10);
      if (v8 > 1) {
        return v3;
      }
      goto LABEL_34;
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v28, v29, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v28, 0, 1, v4);
    if (v8 <= 1) {
LABEL_34:
    }
      *((unsigned char *)v28 + v10) = 0;
  }
  return v3;
}

uint64_t destroy for AsyncThrowingStream._Storage.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = swift_release();
  uint64_t v5 = (void *)((v3 + 31) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = (unsigned __int16 *)(((unint64_t)v5 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  unsigned int v10 = *(_DWORD *)(v7 + 84);
  if (v10) {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v11 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v14 = *(void *)(v6 - 8);
  if (v10 > 1)
  {
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *))(v7 + 48))(v9);
    uint64_t v8 = v14;
    if (result >= 2) {
      return result;
    }
    goto LABEL_21;
  }
  if (!*((unsigned char *)v9 + v11)) {
    goto LABEL_21;
  }
  int v12 = (*((unsigned __int8 *)v9 + v11) - 1) << (8 * v11);
  if (v11 > 3) {
    int v12 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *v9;
        break;
      case 3:
        LODWORD(v11) = *v9 | (*((unsigned __int8 *)v9 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)v9;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)v9;
        break;
    }
  }
  if ((v11 | v12) == 0xFFFFFFFF)
  {
LABEL_21:
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48))(v9, 1, v6);
    if (!result)
    {
      uint64_t v13 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v14 + 8);
      return v13(v9, v6);
    }
  }
  return result;
}

void *initializeWithCopy for AsyncThrowingStream._Storage.State(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)unint64_t v8 = v10;
  unint64_t v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  int v12 = (unint64_t *)(((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = *v12;
  swift_retain();
  if (v13 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  }
  else
  {
    unint64_t v14 = v12[1];
    *(void *)unint64_t v11 = v13;
    *(void *)(v11 + 8) = v14;
    swift_retain();
  }
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (void *)((v11 + v17 + 16) & ~v17);
  int v19 = (unsigned __int16 *)(((unint64_t)v12 + v17 + 16) & ~v17);
  unsigned int v20 = *(_DWORD *)(v16 + 84);
  if (v20) {
    size_t v21 = *(void *)(v16 + 64);
  }
  else {
    size_t v21 = *(void *)(v16 + 64) + 1;
  }
  if (v20 <= 1)
  {
    if (*((unsigned char *)v19 + v21))
    {
      int v22 = (*((unsigned __int8 *)v19 + v21) - 1) << (8 * v21);
      if (v21 > 3) {
        int v22 = 0;
      }
      if (v21)
      {
        int v23 = v21 <= 3 ? v21 : 4;
        switch(v23)
        {
          case 2:
            int v24 = *v19;
            break;
          case 3:
            int v24 = *v19 | (*((unsigned __int8 *)v19 + 2) << 16);
            break;
          case 4:
            int v24 = *(_DWORD *)v19;
            break;
          default:
            int v24 = *(unsigned __int8 *)v19;
            break;
        }
      }
      else
      {
        int v24 = 0;
      }
      if ((v24 | v22) != 0xFFFFFFFF) {
        goto LABEL_28;
      }
    }
LABEL_18:
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
    {
      memcpy(v18, v19, v21);
      if (v20 > 1) {
        return a1;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v16 + 16))(v18, v19, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
      if (v20 > 1) {
        return a1;
      }
    }
    *((unsigned char *)v18 + v21) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v16 + 48))(v19, *(unsigned int *)(v16 + 84), v15) < 2)goto LABEL_18; {
LABEL_28:
  }
  if (v20 >= 2) {
    size_t v25 = v21;
  }
  else {
    size_t v25 = v21 + 1;
  }
  memcpy(v18, v19, v25);
  return a1;
}

void *assignWithCopy for AsyncThrowingStream._Storage.State(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (unint64_t)v5 + 31;
  unint64_t v7 = (((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) = *v5;
  unint64_t v8 = (((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_retain();
  swift_release();
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  int v12 = (void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*(void *)(v8 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *int v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *int v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)int v12 = *(_OWORD *)v13;
LABEL_8:
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  unsigned int v20 = (unsigned __int16 *)(((unint64_t)v12 + v19 + 16) & ~v19);
  size_t v21 = (unsigned __int8 *)(((unint64_t)v13 + v19 + 16) & ~v19);
  uint64_t v22 = *(unsigned int *)(v18 + 84);
  if (v22) {
    size_t v23 = *(void *)(v18 + 64);
  }
  else {
    size_t v23 = *(void *)(v18 + 64) + 1;
  }
  if (v22 <= 1)
  {
    char v24 = 8 * v23;
    if (*((unsigned char *)v20 + v23))
    {
      int v25 = (*((unsigned __int8 *)v20 + v23) - 1) << v24;
      if (v23 > 3) {
        int v25 = 0;
      }
      if (v23)
      {
        int v26 = v23 <= 3 ? v23 : 4;
        switch(v26)
        {
          case 2:
            int v27 = *v20;
            break;
          case 3:
            int v27 = *v20 | (*((unsigned __int8 *)v20 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)v20;
            break;
          default:
            int v27 = *(unsigned __int8 *)v20;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) != 0xFFFFFFFF)
      {
        if (v21[v23])
        {
          int v31 = (v21[v23] - 1) << v24;
          if (v23 > 3) {
            int v31 = 0;
          }
          if (v23)
          {
            int v32 = v23 <= 3 ? v23 : 4;
            switch(v32)
            {
              case 2:
                int v33 = *(unsigned __int16 *)v21;
                break;
              case 3:
                int v33 = *(unsigned __int16 *)v21 | (v21[2] << 16);
                break;
              case 4:
                int v33 = *(_DWORD *)v21;
                break;
              default:
                int v33 = *v21;
                break;
            }
          }
          else
          {
            int v33 = 0;
          }
          if ((v33 | v31) != 0xFFFFFFFF) {
            goto LABEL_69;
          }
        }
LABEL_73:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v18 + 48))(v21, 1, v17))
        {
          memcpy(v20, v21, v23);
          if (v22 > 1) {
            return a1;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v18 + 16))(v20, v21, v17);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
          if (v22 > 1) {
            return a1;
          }
        }
        *((unsigned char *)v20 + v23) = 0;
        return a1;
      }
    }
    if (v21[v23])
    {
      int v34 = (v21[v23] - 1) << v24;
      if (v23 > 3) {
        int v34 = 0;
      }
      if (v23)
      {
        int v35 = v23 <= 3 ? v23 : 4;
        switch(v35)
        {
          case 2:
            int v36 = *(unsigned __int16 *)v21;
            break;
          case 3:
            int v36 = *(unsigned __int16 *)v21 | (v21[2] << 16);
            break;
          case 4:
            int v36 = *(_DWORD *)v21;
            break;
          default:
            int v36 = *v21;
            break;
        }
      }
      else
      {
        int v36 = 0;
      }
      if ((v36 | v34) != 0xFFFFFFFF)
      {
        uint64_t v28 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v18 + 48);
LABEL_56:
        if (!v28(v20, 1, v17)) {
          (*(void (**)(unsigned __int16 *, uint64_t))(v18 + 8))(v20, v17);
        }
        goto LABEL_69;
      }
    }
LABEL_58:
    uint64_t v37 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v18 + 48);
    int v38 = v37(v20, 1, v17);
    int v39 = v37((unsigned __int16 *)v21, 1, v17);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v18 + 16))(v20, v21, v17);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
        return a1;
      }
    }
    else
    {
      if (!v39)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v18 + 24))(v20, v21, v17);
        return a1;
      }
      (*(void (**)(unsigned __int16 *, uint64_t))(v18 + 8))(v20, v17);
    }
    memcpy(v20, v21, v23);
    return a1;
  }
  uint64_t v28 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v18 + 48);
  unsigned int v29 = v28(v20, *(unsigned int *)(v18 + 84), v17);
  unsigned int v30 = v28((unsigned __int16 *)v21, v22, v17);
  if (v29 < 2)
  {
    if (v30 >= 2) {
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v30 < 2) {
    goto LABEL_73;
  }
LABEL_69:
  if (v22 >= 2) {
    size_t v40 = v23;
  }
  else {
    size_t v40 = v23 + 1;
  }
  memcpy(v20, v21, v40);
  return a1;
}

void *initializeWithTake for AsyncThrowingStream._Storage.State(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = ((unint64_t)v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
  }
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (void *)((v10 + v15 + 16) & ~v15);
  uint64_t v17 = (unsigned __int16 *)((v11 + v15 + 16) & ~v15);
  unsigned int v18 = *(_DWORD *)(v14 + 84);
  if (v18) {
    size_t v19 = *(void *)(v14 + 64);
  }
  else {
    size_t v19 = *(void *)(v14 + 64) + 1;
  }
  if (v18 <= 1)
  {
    if (*((unsigned char *)v17 + v19))
    {
      int v20 = (*((unsigned __int8 *)v17 + v19) - 1) << (8 * v19);
      if (v19 > 3) {
        int v20 = 0;
      }
      if (v19)
      {
        int v21 = v19 <= 3 ? v19 : 4;
        switch(v21)
        {
          case 2:
            int v22 = *v17;
            break;
          case 3:
            int v22 = *v17 | (*((unsigned __int8 *)v17 + 2) << 16);
            break;
          case 4:
            int v22 = *(_DWORD *)v17;
            break;
          default:
            int v22 = *(unsigned __int8 *)v17;
            break;
        }
      }
      else
      {
        int v22 = 0;
      }
      if ((v22 | v20) != 0xFFFFFFFF) {
        goto LABEL_28;
      }
    }
LABEL_18:
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
    {
      memcpy(v16, v17, v19);
      if (v18 > 1) {
        return a1;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v14 + 32))(v16, v17, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
      if (v18 > 1) {
        return a1;
      }
    }
    *((unsigned char *)v16 + v19) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v14 + 48))(v17, *(unsigned int *)(v14 + 84), v13) < 2)goto LABEL_18; {
LABEL_28:
  }
  if (v18 >= 2) {
    size_t v23 = v19;
  }
  else {
    size_t v23 = v19 + 1;
  }
  memcpy(v16, v17, v23);
  return a1;
}

void *assignWithTake for AsyncThrowingStream._Storage.State(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v5;
  swift_release();
  unint64_t v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = (void *)(((unint64_t)v6 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (unint64_t *)(((unint64_t)v5 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = *v11;
  if (*v10 < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      unint64_t v14 = v11[1];
      *unint64_t v10 = v12;
      v10[1] = v14;
      goto LABEL_8;
    }
  }
  else
  {
    if (v12 >= 0xFFFFFFFF)
    {
      unint64_t v13 = v11[1];
      *unint64_t v10 = v12;
      v10[1] = v13;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
LABEL_8:
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  unsigned int v18 = (unsigned __int16 *)(((unint64_t)v10 + v17 + 16) & ~v17);
  size_t v19 = (unsigned __int8 *)(((unint64_t)v11 + v17 + 16) & ~v17);
  uint64_t v20 = *(unsigned int *)(v16 + 84);
  if (v20) {
    size_t v21 = *(void *)(v16 + 64);
  }
  else {
    size_t v21 = *(void *)(v16 + 64) + 1;
  }
  if (v20 <= 1)
  {
    char v22 = 8 * v21;
    if (*((unsigned char *)v18 + v21))
    {
      int v23 = (*((unsigned __int8 *)v18 + v21) - 1) << v22;
      if (v21 > 3) {
        int v23 = 0;
      }
      if (v21)
      {
        int v24 = v21 <= 3 ? v21 : 4;
        switch(v24)
        {
          case 2:
            int v25 = *v18;
            break;
          case 3:
            int v25 = *v18 | (*((unsigned __int8 *)v18 + 2) << 16);
            break;
          case 4:
            int v25 = *(_DWORD *)v18;
            break;
          default:
            int v25 = *(unsigned __int8 *)v18;
            break;
        }
      }
      else
      {
        int v25 = 0;
      }
      if ((v25 | v23) != 0xFFFFFFFF)
      {
        if (v19[v21])
        {
          int v29 = (v19[v21] - 1) << v22;
          if (v21 > 3) {
            int v29 = 0;
          }
          if (v21)
          {
            int v30 = v21 <= 3 ? v21 : 4;
            switch(v30)
            {
              case 2:
                int v31 = *(unsigned __int16 *)v19;
                break;
              case 3:
                int v31 = *(unsigned __int16 *)v19 | (v19[2] << 16);
                break;
              case 4:
                int v31 = *(_DWORD *)v19;
                break;
              default:
                int v31 = *v19;
                break;
            }
          }
          else
          {
            int v31 = 0;
          }
          if ((v31 | v29) != 0xFFFFFFFF) {
            goto LABEL_69;
          }
        }
LABEL_73:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
        {
          memcpy(v18, v19, v21);
          if (v20 > 1) {
            return a1;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v16 + 32))(v18, v19, v15);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
          if (v20 > 1) {
            return a1;
          }
        }
        *((unsigned char *)v18 + v21) = 0;
        return a1;
      }
    }
    if (v19[v21])
    {
      int v32 = (v19[v21] - 1) << v22;
      if (v21 > 3) {
        int v32 = 0;
      }
      if (v21)
      {
        int v33 = v21 <= 3 ? v21 : 4;
        switch(v33)
        {
          case 2:
            int v34 = *(unsigned __int16 *)v19;
            break;
          case 3:
            int v34 = *(unsigned __int16 *)v19 | (v19[2] << 16);
            break;
          case 4:
            int v34 = *(_DWORD *)v19;
            break;
          default:
            int v34 = *v19;
            break;
        }
      }
      else
      {
        int v34 = 0;
      }
      if ((v34 | v32) != 0xFFFFFFFF)
      {
        int v26 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v16 + 48);
LABEL_56:
        if (!v26(v18, 1, v15)) {
          (*(void (**)(unsigned __int16 *, uint64_t))(v16 + 8))(v18, v15);
        }
        goto LABEL_69;
      }
    }
LABEL_58:
    int v35 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v16 + 48);
    int v36 = v35(v18, 1, v15);
    int v37 = v35((unsigned __int16 *)v19, 1, v15);
    if (v36)
    {
      if (!v37)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v16 + 32))(v18, v19, v15);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
        return a1;
      }
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v16 + 40))(v18, v19, v15);
        return a1;
      }
      (*(void (**)(unsigned __int16 *, uint64_t))(v16 + 8))(v18, v15);
    }
    memcpy(v18, v19, v21);
    return a1;
  }
  int v26 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v16 + 48);
  unsigned int v27 = v26(v18, *(unsigned int *)(v16 + 84), v15);
  unsigned int v28 = v26((unsigned __int16 *)v19, v20, v15);
  if (v27 < 2)
  {
    if (v28 >= 2) {
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v28 < 2) {
    goto LABEL_73;
  }
LABEL_69:
  if (v20 >= 2) {
    size_t v38 = v21;
  }
  else {
    size_t v38 = v21 + 1;
  }
  memcpy(v18, v19, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingStream._Storage.State(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (v5 >= 2) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v5 >= 2) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v8 + 1;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  int v13 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_32;
  }
  uint64_t v14 = v10 + ((v12 + 48) & ~v12);
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_17;
  }
  unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
  if (HIWORD(v17))
  {
    int v16 = *(_DWORD *)((char *)a1 + v14);
    if (v16) {
      goto LABEL_24;
    }
LABEL_32:
    size_t v19 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v9 & 0x80000000) == 0)
    {
      unint64_t v20 = *v19;
      if (v20 >= 0xFFFFFFFF) {
        LODWORD(v20) = -1;
      }
      return (v20 + 1);
    }
    if (v5 >= 2)
    {
      unsigned int v22 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                   + v12
                                                                   + 32) & ~v12);
      BOOL v23 = v22 >= 2;
      uint64_t result = v22 - 2;
      if (result != 0 && v23) {
        return result;
      }
    }
    return 0;
  }
  if (v17 > 0xFF)
  {
    int v16 = *(unsigned __int16 *)((char *)a1 + v14);
    if (*(unsigned __int16 *)((char *)a1 + v14)) {
      goto LABEL_24;
    }
    goto LABEL_32;
  }
  if (v17 < 2) {
    goto LABEL_32;
  }
LABEL_17:
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_32;
  }
LABEL_24:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v11 + (v14 | v18) + 1;
}

void storeEnumTagSinglePayload for AsyncThrowingStream._Storage.State(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  unsigned int v10 = v9 - 1;
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  if (v8 >= 2)
  {
    size_t v12 = v11;
  }
  else
  {
    unsigned int v10 = 0;
    size_t v12 = v11 + 1;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v10;
  }
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  size_t v15 = ((v14 + 48) & ~v14) + v12;
  BOOL v16 = a3 >= v13;
  unsigned int v17 = a3 - v13;
  if (v17 == 0 || !v16)
  {
LABEL_23:
    if (v13 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (v15 > 3)
  {
    int v6 = 1;
    if (v13 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  unsigned int v18 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
  if (!HIWORD(v18))
  {
    if (v18 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v18 > 1;
    }
    goto LABEL_23;
  }
  int v6 = 4;
  if (v13 < a2)
  {
LABEL_24:
    unsigned int v19 = ~v13 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v21 = v19 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v15] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v20;
        return;
      case 3:
        goto LABEL_75;
      case 4:
        *(_DWORD *)&a1[v15] = v20;
        return;
      default:
        return;
    }
  }
LABEL_16:
  switch(v6)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_75:
      __break(1u);
      JUMPOUT(0x18E4BFD94);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        unsigned int v22 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v10 & 0x80000000) != 0)
        {
          unint64_t v24 = ((((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 32) & ~v14;
          if (v10 >= a2)
          {
            if (a2 + 1 <= v9)
            {
              if (a2 != -1 && v8 >= 2)
              {
                uint64_t v30 = a2 + 2;
                int v31 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
                v31(((((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 32) & ~v14, v30);
              }
            }
            else
            {
              if (v11 <= 3) {
                int v28 = ~(-1 << (8 * v11));
              }
              else {
                int v28 = -1;
              }
              if (v11)
              {
                int v26 = v28 & (a2 - v9);
                if (v11 <= 3) {
                  int v29 = v11;
                }
                else {
                  int v29 = 4;
                }
                bzero((void *)(((((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 32) & ~v14), v11);
                switch(v29)
                {
                  case 2:
LABEL_73:
                    *(_WORD *)unint64_t v24 = v26;
                    break;
                  case 3:
LABEL_72:
                    *(_WORD *)unint64_t v24 = v26;
                    *(unsigned char *)(v24 + 2) = BYTE2(v26);
                    break;
                  case 4:
LABEL_74:
                    *(_DWORD *)unint64_t v24 = v26;
                    break;
                  default:
LABEL_59:
                    *(unsigned char *)unint64_t v24 = v26;
                    break;
                }
              }
            }
          }
          else
          {
            if (v12 <= 3) {
              int v25 = ~(-1 << (8 * v12));
            }
            else {
              int v25 = -1;
            }
            if (v12)
            {
              int v26 = v25 & (~v10 + a2);
              if (v12 <= 3) {
                int v27 = v12;
              }
              else {
                int v27 = 4;
              }
              bzero((void *)(((((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8) + v14 + 32) & ~v14), v12);
              switch(v27)
              {
                case 2:
                  goto LABEL_73;
                case 3:
                  goto LABEL_72;
                case 4:
                  goto LABEL_74;
                default:
                  goto LABEL_59;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v23 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v23 = a2 - 1;
          }
          *unsigned int v22 = v23;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AsyncThrowingStream._Storage.Terminal()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncThrowingStream._Storage.Terminal()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncThrowingStream._Storage.Terminal(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for AsyncThrowingStream._Storage.Terminal(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AsyncThrowingStream._Storage.Terminal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for AsyncThrowingStream._Storage.Terminal(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    unsigned int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *initializeWithTake for AsyncThrowingStream._Storage.Terminal(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for AsyncThrowingStream._Storage.Terminal(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    unsigned int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncThrowingStream._Storage.Terminal(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AsyncThrowingStream._Storage.Terminal(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x18E4C0914);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          unsigned int v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTag for AsyncThrowingStream._Storage.Terminal(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for AsyncThrowingStream._Storage.Terminal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 24) - 8) + 56))(a1, a2, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for AsyncStream._Storage.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AsyncStream._Storage.State(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 32))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AsyncStream._Storage.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  int v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for AsyncStream._Storage.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  if (!v5)
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AsyncStream._Storage.State(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  if (!v5)
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = v7;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v6;
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncStream._Storage.State(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncStream._Storage.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncStream._Storage.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTag for SuspendingClock.Instant.CodingKeys()
{
  return 0;
}

void *type metadata accessor for SuspendingClock.Instant.CodingKeys()
{
  return &unk_1EDD46B10;
}

uint64_t getEnumTagSinglePayload for SuspendingClock.Instant.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SuspendingClock.Instant.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18E4C0E0CLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ContinuousClock.Instant.CodingKeys()
{
  return &unk_1EDD46BA8;
}

uint64_t base witness table accessor for Equatable in <A> _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in _Deque<A>()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _Deque<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in _Deque<A>();
}

{
  lazy protocol witness table accessor for type Int and conformance Int();
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _Deque<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in _Deque<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _Deque<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in _Deque<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _Deque<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _Deque<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _DequeSlot and conformance _DequeSlot()
{
  unint64_t result = lazy protocol witness table cache variable for type _DequeSlot and conformance _DequeSlot;
  if (!lazy protocol witness table cache variable for type _DequeSlot and conformance _DequeSlot)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DequeSlot and conformance _DequeSlot);
  }
  return result;
}

uint64_t type metadata accessor for _Deque.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque.Iterator.next()@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = _Deque._UnsafeHandle.ptr(at:)(*(void *)(v3 + 24), a1, a2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t partial apply for closure #1 in _Deque.Iterator._swapSegment()@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t result = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], a1[1], a1);
  if (result && result != *(void *)(v4 + 8))
  {
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = result;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t partial apply for closure #1 in _Deque._Storage.read<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  return partial apply for closure #1 in _Deque._Storage.read<A>(_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(v3 + 32))();
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque.Iterator.init(_base:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1] + v4;
  if (v5 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = _Deque._UnsafeHandle.limSlot.getter(a1);
    if (v7 >= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v7;
    }
    *a2 = v6;
    a2[1] = v4;
    a2[2] = v8;
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for _Deque()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _Deque._Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = _Deque._UnsafeHandle.copyElements()(a1, a2, *(void *)(v3 + 16));
  *a3 = result;
  return result;
}

uint64_t partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, a2, _Deque._UnsafeHandle.copyElements(minimumCapacity:), a3);
}

uint64_t partial apply for closure #2 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, a2, _Deque._UnsafeHandle.moveElements(minimumCapacity:), a3);
}

uint64_t partial apply for closure #3 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, uint64_t, uint64_t, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*(void *)(v4 + 24), a1, a2, *(void *)(v4 + 16));
  *a4 = result;
  return result;
}

uint64_t partial apply for closure #1 in _Deque._UnsafeHandle.moveElements(minimumCapacity:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = ManagedBuffer.capacity.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = 0;
  return result;
}

uint64_t partial apply for closure #2 in _Deque._UnsafeHandle.moveElements(minimumCapacity:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  _Deque._UnsafeHandle.segments()(*(uint64_t **)(v2 + 24), *(void *)(v2 + 32), v5, (uint64_t)v13);
  _UnsafeMutableWrappedBuffer.init(mutating:)(v13, v5, (uint64_t)v10);
  uint64_t v6 = _Deque._UnsafeHandle.initialize(at:from:)(0, v10[0], v10[1], a1, a2, v5, 211, MEMORY[0x1E4FBB720], MEMORY[0x1E4FBB6F8]);
  type metadata accessor for UnsafeMutableBufferPointer();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 32);
  v8(v12, &v11, v7);
  uint64_t result = v8(v13, v12, v7);
  if ((v14 & 1) == 0) {
    return _Deque._UnsafeHandle.initialize(at:from:)(v6, v13[0], v13[1], a1, a2, v5, 211, MEMORY[0x1E4FBB720], MEMORY[0x1E4FBB6F8]);
  }
  return result;
}

uint64_t partial apply for closure #1 in _UnsafeMutableWrappedBuffer.init(mutating:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MEMORY[0x192FABA00](*a1, a1[1], *(void *)(v2 + 16));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t partial apply for closure #1 in _Deque._UnsafeHandle.copyElements(minimumCapacity:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = ManagedBuffer.capacity.getter();
  uint64_t v5 = *(void *)(v3 + 8);
  *a1 = result;
  a1[1] = v5;
  a1[2] = 0;
  return result;
}

uint64_t partial apply for closure #2 in _Deque._UnsafeHandle.copyElements(minimumCapacity:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)v2[3];
  if (a1[1] != v4[1] || a1[2])
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v2[2];
    _Deque._UnsafeHandle.segments()(v4, v2[4], v6, (uint64_t)v11);
    uint64_t v7 = _Deque._UnsafeHandle.initialize(at:from:)(0, v11[0], v11[1], a1, a2, v6, 200, MEMORY[0x1E4FBB0A8], MEMORY[0x1E4FBB6F0]);
    type metadata accessor for UnsafeBufferPointer();
    uint64_t v8 = type metadata accessor for Optional();
    unsigned int v9 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 32);
    v9(v13, &v12, v8);
    uint64_t result = v9(v14, v13, v8);
    if ((v15 & 1) == 0) {
      return _Deque._UnsafeHandle.initialize(at:from:)(v7, v14[0], v14[1], a1, a2, v6, 200, MEMORY[0x1E4FBB0A8], MEMORY[0x1E4FBB6F0]);
    }
  }
  return result;
}

__n128 partial apply for closure #1 in _Deque._UnsafeHandle.copyElements()@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2 = *(__n128 **)(v1 + 16);
  unint64_t v3 = v2[1].n128_u64[0];
  __n128 result = *v2;
  *a1 = *v2;
  a1[1].n128_u64[0] = v3;
  return result;
}

uint64_t partial apply for closure #2 in _Deque._UnsafeHandle.copyElements()(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = (uint64_t *)v2[3];
  _Deque._UnsafeHandle.segments()(v6, v2[4], v5, (uint64_t)v10);
  _Deque._UnsafeHandle.initialize(at:from:)(v6[2], v10[0], v10[1], a1, a2, v5, 200, MEMORY[0x1E4FBB0A8], MEMORY[0x1E4FBB6F0]);
  type metadata accessor for UnsafeBufferPointer();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 32);
  v8(v12, &v11, v7);
  uint64_t result = v8(v13, v12, v7);
  if ((v14 & 1) == 0) {
    return _Deque._UnsafeHandle.initialize(at:from:)(0, v13[0], v13[1], a1, a2, v5, 200, MEMORY[0x1E4FBB0A8], MEMORY[0x1E4FBB6F0]);
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque.append(_:)(uint64_t *a1, uint64_t a2)
{
  return _Deque._UnsafeHandle.uncheckedAppend(_:)(*(void *)(v2 + 24), a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for closure #1 in _Deque.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1] + v6;
  if (v7 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v2 + 24);
  if (*a1 < v7)
  {
    uint64_t v9 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, v9, 1, v8);
  }
  if (v7 < v6)
  {
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  size_t v10 = *(uint64_t (**)(uint64_t))(v2 + 32);
  uint64_t v11 = _Deque._UnsafeHandle.buffer(for:)(v6, v7, a1);
  uint64_t result = v10(v11);
  if (v3) {
    return result;
  }
  uint64_t v9 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, v9, 1, v8);
}

uint64_t partial apply for closure #1 in _Deque._copyContents(initializing:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v3[2];
  uint64_t v4 = v3[3];
  uint64_t v6 = v3[4];
  _Deque._UnsafeHandle.segments()(a1, a2, v5, (uint64_t)&v37);
  uint64_t v7 = v38;
  uint64_t v44 = v37;
  if (v38 >= v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v38;
  }
  uint64_t v41 = v4;
  uint64_t v42 = v6;
  v40[0] = v8;
  type metadata accessor for UnsafeMutableBufferPointer();
  swift_getCanonicalSpecializedMetadata();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>();
  MutableCollection.subscript.getter();
  uint64_t v9 = UnsafeMutableBufferPointer.init(rebasing:)();
  uint64_t v11 = v10;
  uint64_t v41 = v44;
  uint64_t v42 = v7;
  type metadata accessor for UnsafeBufferPointer();
  swift_getWitnessTable();
  Collection.prefix(_:)();
  uint64_t v12 = UnsafeBufferPointer.init(rebasing:)();
  UnsafeMutableBufferPointer._initialize(from:)(v12, v13, v9, v11);
  if (v7 >= v6
    || (uint64_t v14 = type metadata accessor for Optional(),
        char v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 32),
        v15(v40, &v39, v14),
        v15(&v41, v40, v14),
        (v43 & 1) != 0))
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized _Deque.Iterator.init(_base:from:)(v16, v8, v5);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t result = swift_release();
    *a3 = v17;
    a3[1] = v19;
    a3[2] = v21;
    a3[3] = v8;
    return result;
  }
  uint64_t v23 = v6 - v8;
  if (__OFSUB__(v6, v8))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v23 >= v42) {
    uint64_t v23 = v42;
  }
  uint64_t v24 = v8 + v23;
  if (__OFADD__(v8, v23)) {
    goto LABEL_14;
  }
  uint64_t v44 = v23;
  if (v24 >= v8)
  {
    UnsafeMutableBufferPointer.subscript.getter();
    uint64_t v25 = UnsafeMutableBufferPointer.init(rebasing:)();
    uint64_t v27 = v26;
    Collection.prefix(_:)();
    uint64_t v28 = UnsafeBufferPointer.init(rebasing:)();
    UnsafeMutableBufferPointer._initialize(from:)(v28, v29, v25, v27);
    uint64_t v30 = swift_retain();
    uint64_t v31 = specialized _Deque.Iterator.init(_base:from:)(v30, v24, v5);
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t result = swift_release();
    *a3 = v31;
    a3[1] = v33;
    a3[2] = v35;
    a3[3] = v24;
    return result;
  }
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>)
  {
    swift_getCanonicalSpecializedMetadata();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque.Iterator.init(_base:from:)@<X0>(uint64_t *a1@<X0>, Swift::_DequeSlot *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 < 0 || a1[1] < v3)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Swift::Int v6 = *(void *)(v2 + 32);
    v7.unint64_t position = _Deque._UnsafeHandle.slot(forOffset:)(*(void *)(v2 + 24)).position;
    unint64_t position = v7.position;
    uint64_t v9 = a1[1];
    if (v9 != v3)
    {
      v7.unint64_t position = specialized _Deque._UnsafeHandle.slot(_:offsetBy:)(a1[2], v9, a1);
      if (position >= v7.position) {
        v7.unint64_t position = _Deque._UnsafeHandle.limSlot.getter(a1);
      }
    }
    a2->unint64_t position = v6;
    a2[1].unint64_t position = position;
    a2[2].unint64_t position = v7.position;
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  return _Deque._Storage.read<A>(_:)((uint64_t)partial apply for closure #1 in closure #1 in _Deque._copyToContiguousArray(), (uint64_t)&v5, v3, v6, MEMORY[0x1E4FBC848] + 8, (uint64_t)partial apply for closure #1 in _Deque._Storage.read<A>(_:));
}

void partial apply for closure #1 in closure #1 in _Deque._copyToContiguousArray()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (_OWORD *)v2[3];
  uint64_t v4 = (void *)v2[4];
  _Deque._UnsafeHandle.segments()(a1, a2, v2[2], (uint64_t)&v20);
  uint64_t v6 = v20;
  uint64_t v5 = v21;
  *(_OWORD *)uint64_t v23 = *v3;
  uint64_t v24 = v21;
  type metadata accessor for UnsafeMutableBufferPointer();
  swift_getCanonicalSpecializedMetadata();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>();
  MutableCollection.subscript.getter();
  uint64_t v7 = UnsafeMutableBufferPointer.init(rebasing:)();
  UnsafeMutableBufferPointer._initialize(from:)(v6, v5, v7, v8);
  uint64_t v9 = *v4 + v5;
  if (__OFADD__(*v4, v5))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *uint64_t v4 = v9;
  type metadata accessor for UnsafeBufferPointer();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v23, &v22, v10);
  v11(&v17, v23, v10);
  if (v19) {
    goto LABEL_7;
  }
  uint64_t v12 = v18;
  if (__OFADD__(v5, v18)) {
    goto LABEL_10;
  }
  if (v5 + v18 < v5)
  {
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v13 = v17;
  UnsafeMutableBufferPointer.subscript.getter();
  uint64_t v14 = UnsafeMutableBufferPointer.init(rebasing:)();
  UnsafeMutableBufferPointer._initialize(from:)(v13, v12, v14, v15);
  uint64_t v9 = *v4 + v12;
  if (__OFADD__(*v4, v12)) {
    goto LABEL_11;
  }
  *uint64_t v4 = v9;
LABEL_7:
  if (v9 != a1[1])
  {
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t partial apply for closure #1 in _Deque.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  v8.unint64_t position = _Deque._UnsafeHandle.slot(forOffset:)(*(void *)(v3 + 24)).position;
  uint64_t v9 = _Deque._UnsafeHandle.ptr(at:)(v8.position, a1, a2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3, v9, v7);
}

uint64_t partial apply for closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1] + v6;
  if (v7 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(v2 + 24);
  if (*a1 < v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v8 - 8) + 56))(a2, 1, 1, *(void *)(v2 + 24));
  }
  if (v7 < v6) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void (**)(void *))(v2 + 32);
  uint64_t v11 = _Deque._UnsafeHandle.buffer(for:)(v6, v7, a1);
  uint64_t v12 = MEMORY[0x192FABA00](v11);
  uint64_t v14 = v13;
  v15[0] = v12;
  v15[1] = v13;
  v10(v15);
  if (!v3) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 0, 1, v8);
  }
  return $defer #1 <A><A1>() in closure #1 in _Deque.withContiguousMutableStorageIfAvailable<A>(_:)((uint64_t)v15, v12, v14);
}

void partial apply for closure #1 in _Deque.swapAt(_:_:)()
{
  Swift::Int v1 = *(void *)(v0 + 24);
  Swift::Int v2 = *(void *)(v0 + 32);
  Swift::Int position = _Deque._UnsafeHandle.slot(forOffset:)(v1).position;
  Swift::Int v4 = _Deque._UnsafeHandle.slot(forOffset:)(v2).position;
  UnsafeMutableBufferPointer.init(start:count:)();
  UnsafeMutableBufferPointer.swapAt(_:_:)(position, v4);
}

unint64_t partial apply for closure #1 in _Deque.replaceSubrange<A>(_:with:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in _Deque.replaceSubrange<A>(_:with:)(a1, a2, v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[2], v2[3], v2[4]);
}

uint64_t type metadata accessor for _UnsafeMutableWrappedBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in _Deque.subscript.modify@<X0>(void *a1@<X0>, uint64_t a2@<X1>, Swift::Int *a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  Swift::Int position = _Deque._UnsafeHandle.slot(forOffset:)(*(void *)(v3 + 24)).position;
  swift_getTupleTypeMetadata2();
  *a3 = position;
  _Deque._UnsafeHandle.ptr(at:)(position, a1, a2, v7);
  return UnsafeMutablePointer.move()();
}

uint64_t partial apply for closure #1 in $defer #1 <A>() in _Deque.subscript.modify(uint64_t a1, uint64_t a2)
{
  return closure #1 in $defer #1 <A>() in _Deque.subscript.modify(a1, a2, v2[3], v2[4], v2[2]);
}

uint64_t partial apply for closure #1 in _Deque.subscript.setter(void *a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  Swift::Int v5 = v2[3];
  uint64_t v7 = v2[4];
  v8.Swift::Int position = _Deque._UnsafeHandle.slot(forOffset:)(v5).position;
  uint64_t v9 = _Deque._UnsafeHandle.ptr(at:)(v8.position, a1, a2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(v9, v7, v6);
}

void partial apply for closure #1 in _Deque.removeAll(keepingCapacity:)()
{
}

void partial apply for closure #1 in _Deque.removeFirst(_:)()
{
  _Deque._UnsafeHandle.uncheckedRemoveFirst(_:)(*(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in _Deque.removeFirst()(uint64_t *a1, uint64_t a2)
{
  return _Deque._UnsafeHandle.uncheckedRemoveFirst()(a1, a2, *(void *)(v2 + 16));
}

void partial apply for closure #1 in _Deque._customRemoveLast(_:)()
{
  _Deque._UnsafeHandle.uncheckedRemoveLast(_:)(*(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in _Deque._customRemoveLast()(void *a1, uint64_t a2)
{
  return _Deque._UnsafeHandle.uncheckedRemoveLast()(a1, a2, *(void *)(v2 + 16));
}

unint64_t partial apply for closure #1 in _Deque.removeSubrange(_:)(uint64_t *a1, uint64_t a2)
{
  return _Deque._UnsafeHandle.uncheckedRemove(offsets:)(*(void *)(v2 + 24), *(void *)(v2 + 32), a1, a2, *(void *)(v2 + 16));
}

unint64_t partial apply for closure #1 in _Deque.remove(at:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  int64_t v6 = *(void *)(v2 + 32);
  _Deque.subscript.getter(v6, **(void **)(v2 + 24), v5);
  Swift::Int v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else if (v7 >= v6)
  {
    return _Deque._UnsafeHandle.uncheckedRemove(offsets:)(v6, v7, a1, a2, v5);
  }
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in _Deque.insert<A>(contentsOf:at:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in _Deque.insert<A>(contentsOf:at:)(a1, a2, v2[5], v2[6], v2[7], v2[2], v2[3], v2[4]);
}

uint64_t partial apply for closure #1 in _Deque.insert(_:at:)(Swift::_DequeSlot *a1, uint64_t a2)
{
  return closure #1 in _Deque.insert(_:at:)(a1, a2, v2[3], v2[4], v2[5], v2[2]);
}

uint64_t partial apply for closure #1 in _Deque.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in _Deque.append<A>(contentsOf:)(a1, a2, *(uint64_t **)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for closure #2 in _Deque.append<A>(contentsOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in _Deque.append<A>(contentsOf:)(a1, v2[5], v2[3], v2[4], a2);
}

uint64_t partial apply for closure #3 in _Deque.append<A>(contentsOf:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[6];
  _Deque._UnsafeHandle.uncheckedAppend(_:)(v2[5], a1, a2, v5);
  _Deque._UnsafeHandle.availableSegments()(a1, a2, v5, (uint64_t)v14);
  uint64_t v7 = type metadata accessor for _UnsafeMutableWrappedBuffer();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(v6, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v11 = a1[1];
  BOOL v12 = __OFADD__(v11, result);
  uint64_t v13 = v11 + result;
  if (v12) {
    __break(1u);
  }
  else {
    a1[1] = v13;
  }
  return result;
}

Swift::Int partial apply for closure #1 in closure #1 in _Deque.append<A>(contentsOf:)(Swift::Int *a1, uint64_t a2)
{
  return _Deque._UnsafeHandle.uncheckedAppend(contentsOf:)(v2[5], v2[6], a1, a2, v2[2]);
}

void *partial apply for closure #1 in _Deque.init(repeating:count:)(void *result, uint64_t a2)
{
  if (result[2])
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(v2 + 24);
    if (v4 >= 1)
    {
      _Deque._UnsafeHandle.ptr(at:)(0, result, a2, *(void *)(v2 + 16));
      uint64_t result = (void *)UnsafeMutablePointer.initialize(repeating:count:)();
    }
    v3[1] = v4;
  }
  return result;
}

uint64_t partial apply for closure #1 in _Deque._Storage.init(minimumCapacity:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ManagedBuffer.capacity.getter();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = result;
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  Swift::Int v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t partial apply for closure #1 in _Deque.init<A>(_:)(void *a1, uint64_t a2)
{
  return closure #1 in _Deque.init<A>(_:)(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

void partial apply for closure #1 in closure #1 in _Deque.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  UnsafeMutableBufferPointer._initialize(from:)(a1, a2, *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_18E4C3014()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncThrowingStream<A, B>.Continuation.Termination) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed AsyncStream<A>.Continuation.Termination) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_18E4C30EC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1E91D02D4);
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool)
                                              + async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@out Bool));
  return v6(a1, v4);
}

{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(v2 + 32);
  uint64_t v7 = (void *)swift_task_alloc(dword_1E91D02E4);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = static Task<>.sleep<A>(until:tolerance:clock:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)
                                                       + async function pointer to thunk for @escaping @callee_guaranteed @async (@in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool));
  return v8(a1, a2, v6);
}

void partial apply for closure #2 in static Task<>.sleep(nanoseconds:)()
{
  uint64_t v1 = *(unint64_t **)(v0 + 16);
  unint64_t v2 = atomic_load(v1);
  if ((v2 & 3) != 0) {
    return;
  }
  while (1)
  {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v2 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    {
      uint64_t v3 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)v1, (unint64_t *)&v3, 3uLL);
      if (!v3) {
        return;
      }
      goto LABEL_5;
    }
    unint64_t v5 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v1, &v5, 2uLL);
    if (v5 == v4) {
      break;
    }
LABEL_5:
    unint64_t v2 = atomic_load(v1);
    if ((v2 & 3) != 0) {
      return;
    }
  }
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  uint64_t v6 = swift_allocError();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v7 = swift_allocError();
  *uint64_t v8 = v6;

  swift_continuation_throwingResumeWithError(v4, v7);
}

uint64_t sub_18E4C34F0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1E91D02FC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v3[2] = v2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>._sleep(until:_:tolerance:clock:), 0, 0);
}

uint64_t partial apply for closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_1E91D030C);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return closure #1 in closure #1 in AsyncThrowingStream.init<>(unfolding:)(a1, v4, v5);
}

uint64_t partial apply for closure #2 in closure #1 in AsyncThrowingStream.init<>(unfolding:)()
{
  v1[0] = 0;
  v1[1] = 0;
  return specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)v1);
}

void partial apply for closure #1 in _AsyncStreamCriticalStorage.value.setter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 24))(v1 + *(void *)(*(void *)v1 + 88), *(void *)(v0 + 24));
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v1
                                                   + ((*(unsigned int *)(*(void *)v1 + 48) + 7) & 0x1FFFFFFF8)));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1E91D031C);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return implicit closure #2 in implicit closure #1 in AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(a1, v1);
}

uint64_t partial apply for closure #1 in AsyncThrowingStream._Storage.next()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1E91D0334);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  void v4[2] = a1;
  v4[3] = v1;
  v4[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v4[4] = *v1;
  return swift_task_switch(closure #1 in AsyncThrowingStream._Storage.next(), 0, 0);
}

void partial apply for closure #1 in AsyncThrowingStream._Storage.setOnTermination(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v2 + *(void *)(*(void *)v2 + 104);
  uint64_t v5 = *(void *)(v4 + 32);
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = v3;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v5);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v2
                                                   + ((*(unsigned int *)(*(void *)v2 + 48) + 7) & 0x1FFFFFFF8)));
}

uint64_t outlined init with take of ()?(uint64_t a1, uint64_t a2)
{
  uint64_t CanonicalSpecializedMetadata = swift_getCanonicalSpecializedMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(CanonicalSpecializedMetadata - 8) + 32))(a2, a1, CanonicalSpecializedMetadata);
  return a2;
}

uint64_t outlined init with take of UnsafeBufferPointer<()>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_1E91D0374);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return closure #1 in closure #1 in AsyncStream.init(unfolding:onCancel:)(a1, v4, v5);
}

uint64_t partial apply for closure #2 in closure #1 in AsyncStream.init(unfolding:onCancel:)()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  v3[0] = 0;
  v3[1] = 0;
  uint64_t result = specialized _AsyncStreamCriticalStorage.value.setter((uint64_t)v3);
  if (v1) {
    return v1(result);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1E91D0384);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  return implicit closure #2 in implicit closure #1 in AsyncStream.init(_:bufferingPolicy:_:)(a1, v1);
}

uint64_t partial apply for closure #1 in AsyncStream._Storage.next()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_1E91D039C);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  void v4[2] = a1;
  v4[3] = v1;
  v4[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  v4[4] = *v1;
  return swift_task_switch(closure #1 in AsyncStream._Storage.next(), 0, 0);
}

uint64_t partial apply for closure #2 in AsyncStream._Storage.next()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in AsyncStream._Storage.setOnTermination(_:)()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = v1;
  *(void *)(v2 + 56) = v3;
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOy(v1);
  _sScS12ContinuationV11TerminationOyx__GRi_zRi0_zlyxIseghn_SglWOe(v4);
  _swift_async_stream_lock_unlock((os_unfair_lock_t)(v2 + 72));
}

uint64_t sub_18E4C3D24()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1E91D03B4);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A);
  void v3[2] = v2;
  return swift_task_switch(closure #1 in closure #1 in closure #1 in static Task<>.sleep(nanoseconds:), 0, 0);
}

uint64_t partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_18E4C3E04()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.AsyncSequence.Element, @in_guaranteed A.AsyncSequence.Element) -> (@unowned Bool)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_18E4C3E50()
{
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed A) -> (@out A1, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@out A1, @error @owned Error)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 40))(*a1);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnsafeMutableWrappedBuffer(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _UnsafeMutableWrappedBuffer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _Deque.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for _Deque.Iterator()
{
  return swift_release();
}

void *assignWithCopy for _Deque.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for _Deque.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _Deque.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _Deque.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DequeSlot()
{
  return &type metadata for _DequeSlot;
}

uint64_t *initializeBufferWithCopyOfBuffer for Optional(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t destroy for Optional(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *initializeWithTake for Optional(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for Optional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Optional(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Optional(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x18E4C4B5CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTag for Optional(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for Optional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t partial apply for closure #1 in _Deque._Storage._makeUniqueCopy()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return partial apply for closure #1 in _Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(a1, a2, a3);
}

uint64_t swift::getOverride_task_enqueue(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 8);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_job_run(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 16);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_job_run_on_task_executor(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 24);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_job_run_on_serial_and_task_executor(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 32);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_getCurrentExecutor(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 40);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_isCurrentExecutor(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 48);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_switch(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 56);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_create_common(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 64);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_future_wait(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 72);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_future_wait_throwing(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 80);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_continuation_resume(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 88);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_continuation_throwingResume(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 96);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_continuation_throwingResumeWithError(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 104);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_addCancellationHandler(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 112);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_removeCancellationHandler(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 120);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_createNullaryContinuationJob(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 128);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_asyncMainDrainQueue(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 136);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_suspend(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 144);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_enqueueTaskOnExecutor(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 152);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_continuation_init(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 160);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_continuation_await(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 168);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_wait(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 176);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_wait_throwing(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 184);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_end(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 192);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_get(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 200);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_get_throwing(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 208);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_consume(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 216);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_consume_throwing(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 224);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_asyncLet_finish(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 232);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_initialize(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 240);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_initializeWithFlags(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 248);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_attachChild(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 256);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_destroy(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 264);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_wait_next_throwing(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 272);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_isEmpty(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 280);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_isCancelled(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 288);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_cancelAll(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 296);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_addPending(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 304);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_taskGroup_waitAll(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 312);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 320);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_localValuePush(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 328);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_localValueGet(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 336);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_localValuePop(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 344);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_localsCopyTo(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 352);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_hasTaskGroupStatusRecord(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 360);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_cancel(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 368);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_cancel_group_child_tasks(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 376);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_escalate(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 384);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_getPreferredTaskExecutor(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 392);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_pushTaskExecutorPreference(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 400);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_popTaskExecutorPreference(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 408);
  }
  else {
    return 0;
  }
}

uint64_t swift::getOverride_task_startOnMainActor(swift *this)
{
  if (getOverrideSectionPtr(void)::OverrideSectionPtr) {
    return *(void *)(getOverrideSectionPtr(void)::OverrideSectionPtr + 416);
  }
  else {
    return 0;
  }
}

uint8_t *getOverrideSectionPtr(void)::$_0::__invoke()
{
  unint64_t size = 0;
  uint64_t v0 = _NSGetMachExecuteHeader();
  uint64_t result = getsectiondata(v0, "__DATA", "__s60async_hook", &size);
  if (!result || size <= 0x1A7) {
    uint64_t result = 0;
  }
  getOverrideSectionPtr(void)::OverrideSectionPtr = (uint64_t)result;
  return result;
}

void swift::runJobInEstablishedExecutorContext(uint64_t a1)
{
  if (*MEMORY[0x1E4FBC888]) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBC888])(a1);
  }
  uint64_t v2 = (void *)MEMORY[0x192FAC1D0]();
  StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (!a1 || *(unsigned char *)(a1 + 32))
  {
    uint64_t v8 = StatusReg[104];
    unsigned int v9 = *(void **)(a1 + 40);
    if ((void *)StatusReg[28] != v9) {
      unsigned int v9 = (void *)voucher_adopt();
    }
    *(void *)(a1 + 40) = -1;
    if (*(unsigned char *)(v8 + 48))
    {
      if ((unint64_t)v9 + 1 >= 2) {
        os_release(v9);
      }
    }
    else
    {
      *(void *)(v8 + 40) = v9;
      *(unsigned char *)(v8 + 48) = 1;
    }
    (*(void (**)(uint64_t))(a1 + 56))(a1);
  }
  else
  {
    uint64_t v4 = StatusReg[103];
    StatusReg[103] = a1;
    swift::AsyncTask::flagAsRunning((swift::AsyncTask *)a1);
    unint64_t v5 = swift::concurrency::trace::job_run_begin((swift::AsyncTask *)a1);
    os_signpost_id_t v7 = v6;
    (*(void (**)(void))(a1 + 56))();
    if (v7 != -1 && _os_trace_lazy_init_completed_4swift())
    {
      if (swift::concurrency::trace::LogsToken != -1) {
        dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
      }
      if (swift::concurrency::trace::TracingEnabled)
      {
        if (v7)
        {
          size_t v10 = swift::concurrency::trace::TaskLog;
          if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
          {
            int v11 = 134217984;
            unint64_t v12 = v5;
            _os_signpost_emit_with_name_impl(&dword_18E465000, v10, OS_SIGNPOST_INTERVAL_END, v7, "job_run", "task=%llx", (uint8_t *)&v11, 0xCu);
          }
        }
      }
    }
    if (v4) {
      StatusReg[103] = v4;
    }
  }
  if (*MEMORY[0x1E4FBC890]) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBC890])(a1);
  }
}

uint64_t swift::AsyncTask::flagAsRunning(swift::AsyncTask *this)
{
  unint64_t current_override_qos_floor = dispatch_thread_get_current_override_qos_floor();
  _X20 = 0;
  _X21 = 0;
  unint64_t v29 = current_override_qos_floor;
  unint64_t v5 = HIDWORD(current_override_qos_floor);
  int v28 = HIDWORD(current_override_qos_floor);
  __asm { CASP            X20, X21, X20, X21, [X9] }
  v27[0] = _X20;
  v27[1] = 0;
  if ((_X20 & 0x4000) != 0)
  {
    uint64_t v17 = (swift::AsyncTask *)*((void *)this + 20);
    v26[0] = v27;
    v26[1] = &v29;
    void v26[2] = &v28;
    swift::removeStatusRecord(this, (uint64_t)v17, v27, (void (*)(uint64_t, unint64_t, uint64_t, long long *))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsRunning(void)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)v26);
    swift::_swift_task_dealloc_specific(this, v17, v18, v19);
    *((void *)this + 20) = 0;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v21 = *(void *)(StatusReg + 832);
    uint64_t v22 = (void *)*((void *)this + 5);
    if (*(void **)(StatusReg + 224) != v22) {
      uint64_t v22 = (void *)voucher_adopt();
    }
    *((void *)this + 5) = -1;
    if (*(unsigned char *)(v21 + 48))
    {
      if ((unint64_t)v22 + 1 >= 2) {
        os_release(v22);
      }
    }
    else
    {
      *(void *)(v21 + 40) = v22;
      *(unsigned char *)(v21 + 48) = 1;
    }
    return swift_task_enterThreadLocalContext();
  }
  else
  {
    char v11 = current_override_qos_floor;
    unint64_t v12 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v13 = _X20;
    if ((current_override_qos_floor & 1) == 0) {
      goto LABEL_5;
    }
LABEL_3:
    if (v5 < v13)
    {
      dispatch_thread_override_self();
      LODWORD(v5) = v13;
    }
LABEL_5:
    while (1)
    {
      _X24 = v13 & 0xFFFFEBFF | ((unint64_t)((*(_DWORD *)(v12 + 24) & 0xFFFFFFFC) >> 2) << 34);
      _X1 = 0;
      __asm { CASP            X0, X1, X24, X25, [X10] }
      if (_X0 == _X20) {
        break;
      }
      _X20 = _X0;
      unsigned int v13 = _X0;
      if (v11) {
        goto LABEL_3;
      }
    }
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v13, (v13 >> 8) & 1, 0, 1, (*(_DWORD *)(v12 + 24) & 0xFFFFFFFC) != 0, 0);
    uint64_t v23 = *(void *)(v12 + 832);
    uint64_t v24 = (void *)*((void *)this + 5);
    if (*(void **)(v12 + 224) != v24) {
      uint64_t v24 = (void *)voucher_adopt();
    }
    *((void *)this + 5) = -1;
    if (*(unsigned char *)(v23 + 48))
    {
      if ((unint64_t)v24 + 1 >= 2) {
        os_release(v24);
      }
    }
    else
    {
      *(void *)(v23 + 40) = v24;
      *(unsigned char *)(v23 + 48) = 1;
    }
    return swift_task_enterThreadLocalContext();
  }
}

unint64_t swift::concurrency::trace::job_run_begin(swift::AsyncTask *a1)
{
  unint64_t TaskId = 0;
  if (a1 && !*((unsigned char *)a1 + 32))
  {
    if (!_os_trace_lazy_init_completed_4swift()) {
      return 0;
    }
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v3 = os_signpost_id_generate((os_log_t)swift::concurrency::trace::TaskLog);
      unint64_t TaskId = swift::AsyncTask::getTaskId(a1);
      if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          int v6 = 134217984;
          unint64_t v7 = TaskId;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "job_run", "task=%llx", (uint8_t *)&v6, 0xCu);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return TaskId;
}

uint64_t anonymous namespace'::ExecutorTrackingInfo::current(_anonymous_namespace_::ExecutorTrackingInfo *this)
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
}

uint64_t swift::restoreTaskVoucher(swift *this, swift::AsyncTask *a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v4 = *(void *)(StatusReg + 832);
  uint64_t result = *(void *)(v4 + 40);
  if (*(void *)(StatusReg + 224) != result) {
    uint64_t result = voucher_adopt();
  }
  *((void *)this + 5) = result;
  if (*(unsigned char *)(v4 + 48)) {
    *(unsigned char *)(v4 + 48) = 0;
  }
  return result;
}

uint64_t swift_task_getCurrent()
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 824);
}

uint64_t swift::_swift_task_clearCurrent(swift *this)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t result = *(void *)(StatusReg + 824);
  *(void *)(StatusReg + 824) = 0;
  return result;
}

uint64_t swift::_swift_task_setCurrent(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 824);
  *(void *)(StatusReg + 824) = a1;
  return v2;
}

uint64_t swift_task_getCurrentThreadPriority()
{
  return qos_class_self();
}

uint64_t swift_bincompat_useLegacyNonCrashingExecutorChecks(void)
{
  uint64_t v0 = swift_bincompat_useLegacyNonCrashingExecutorChecks();
  IsCurrentExecutorLegacyModeOverride = (const char *)concurrencyIsCurrentExecutorLegacyModeOverride();
  if (IsCurrentExecutorLegacyModeOverride)
  {
    uint64_t v2 = IsCurrentExecutorLegacyModeOverride;
    if (!strcmp(IsCurrentExecutorLegacyModeOverride, "nocrash") || !strcmp(v2, "legacy"))
    {
      return 1;
    }
    else if (!strcmp(v2, "crash") || !strcmp(v2, "swift6"))
    {
      return 0;
    }
  }
  return v0;
}

void swift_task_reportUnexpectedExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v21[0] = a5;
  v21[1] = a6;
  if (swift_task_reportUnexpectedExecutor::logLevelToken != -1) {
    dispatch_once_f(&swift_task_reportUnexpectedExecutor::logLevelToken, 0, (dispatch_function_t)checkUnexpectedExecutorLogLevel);
  }
  if (unexpectedExecutorLogLevel)
  {
    BOOL v9 = unexpectedExecutorLogLevel == 2;
    isuint64_t MainExecutor = swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)v21);
    unint64_t v12 = "actor-isolated function";
    if (isMainExecutor) {
      unint64_t v12 = "@MainActor function";
    }
    unsigned int v13 = "the same actor";
    if (isMainExecutor) {
      unsigned int v13 = "the main thread";
    }
    uint64_t v20 = 0;
    unsigned int v14 = "warning";
    if (v9) {
      unsigned int v14 = "error";
    }
    swift_asprintf(&v20, v11, v14, v12, a2, a1, a4, v13);
    int shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
    int v16 = v20;
    if (shouldReportFatalErrorsToDebugger)
    {
      memset(&v18[2], 0, 48);
      uint64_t v19 = 0;
      v18[0] = xmmword_1E55C4868;
      v18[1] = *(_OWORD *)&off_1E55C4878;
      MEMORY[0x192FABF30](v9, v20, v18);
    }
    uint64_t v17 = (FILE **)MEMORY[0x1E4F143C8];
    fputs(v16, (FILE *)*MEMORY[0x1E4F143C8]);
    fflush(*v17);
    asl_log(0, 0, 3, "%s", v16);
    free(v16);
    if (v9) {
      abort();
    }
  }
}

const char *checkUnexpectedExecutorLogLevel(void *a1)
{
  uint64_t result = getenv("SWIFT_UNEXPECTED_EXECUTOR_LOG_LEVEL");
  if (result)
  {
    uint64_t result = (const char *)strtol(result, 0, 0);
    if ((unint64_t)result <= 2)
    {
      int v2 = (int)result;
      uint64_t result = (const char *)swift_bincompat_useLegacyNonCrashingExecutorChecks();
      if (result) {
        int v3 = v2;
      }
      else {
        int v3 = 2;
      }
      unexpectedExecutorLogLevel = v3;
    }
  }
  return result;
}

void swift_asprintf(char **a1, const char *a2, ...)
{
  va_start(va, a2);
  int v3 = vsnprintf(0, 0, "%s: data race detected: %s at %.*s:%d was not called on %s\n", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    unint64_t v5 = (char *)malloc_type_malloc(v4, 0x887381A9uLL);
    if (v5)
    {
      int v6 = v5;
      if (vsnprintf(v5, v4, "%s: data race detected: %s at %.*s:%d was not called on %s\n", va) < 0) {
        free(v6);
      }
      else {
        *a1 = v6;
      }
    }
  }
}

{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  int v3 = vsnprintf(0, 0, "error: %sTaskGroup: detected pending task count overflow, in task group %p! Status: %s", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    unint64_t v5 = (char *)malloc_type_malloc(v4, 0x887381A9uLL);
    if (v5)
    {
      int v6 = v5;
      if (vsnprintf(v5, v4, "error: %sTaskGroup: detected pending task count overflow, in task group %p! Status: %s", va) < 0)free(v6); {
      else
      }
        *a1 = v6;
    }
  }
}

{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  int v3 = vsnprintf(0, 0, "error: task-local: detected illegal task-local value binding at %.*s:%d.\nTask-local values must only be set in a structured-context, such as: around any (synchronous or asynchronous function invocation), around an 'async let' declaration, or around a 'with(Throwing)TaskGroup(...){ ... }' invocation. Notably, binding a task-local value is illegal *within the body* of a withTaskGroup invocation.\n\nThe following example is illegal:\n\n    await withTaskGroup(...) { group in \n        await <task-local>.withValue(1234) {\n            group.addTask { ... }\n        }\n    }\n\nAnd should be replaced by, either: setting the value for the entire group:\n\n    // bind task-local for all tasks spawned within the group\n    await <task-local>.withValue(1234) {\n"
         "        await withTaskGroup(...) { group in\n"
         "            group.addTask { ... }\n"
         "        }\n"
         "    }\n"
         "\n"
         "or, inside the specific task-group child task:\n"
         "\n"
         "    // bind-task-local for only specific child-task\n"
         "    await withTaskGroup(...) { group in\n"
         "        group.addTask {\n"
         "            await <task-local>.withValue(1234) {\n"
         "                ... \n"
         "            }\n"
         "        }\n"
         "\n"
         "        group.addTask { ... }\n"
         "    }\n",
         va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    size_t v4 = (v3 + 1);
    unint64_t v5 = (char *)malloc_type_malloc(v4, 0x887381A9uLL);
    if (v5)
    {
      int v6 = v5;
      if (vsnprintf(v5, v4, "error: task-local: detected illegal task-local value binding at %.*s:%d.\nTask-local values must only be set in a structured-context, such as: around any (synchronous or asynchronous function invocation), around an 'async let' declaration, or around a 'with(Throwing)TaskGroup(...){ ... }' invocation. Notably, binding a task-local value is illegal *within the body* of a withTaskGroup invocation.\n\nThe following example is illegal:\n\n    await withTaskGroup(...) { group in \n        await <task-local>.withValue(1234) {\n            group.addTask { ... }\n        }\n    }\n\nAnd should be replaced by, either: setting the value for the entire group:\n\n    // bind task-local for all tasks spawned within the group\n"
             "    await <task-local>.withValue(1234) {\n"
             "        await withTaskGroup(...) { group in\n"
             "            group.addTask { ... }\n"
             "        }\n"
             "    }\n"
             "\n"
             "or, inside the specific task-group child task:\n"
             "\n"
             "    // bind-task-local for only specific child-task\n"
             "    await withTaskGroup(...) { group in\n"
             "        group.addTask {\n"
             "            await <task-local>.withValue(1234) {\n"
             "                ... \n"
             "            }\n"
             "        }\n"
             "\n"
             "        group.addTask { ... }\n"
             "    }\n",
             va) < 0)
        free(v6);
      else {
        *a1 = v6;
      }
    }
  }
}

void swift_defaultActor_initialize(const void *a1)
{
  *((unsigned char *)a1 + 16) = 0;
  uint64_t v1 = *((void *)a1 + 4);
  do
  {
    _X4 = 0;
    _X7 = *((void *)a1 + 5);
    __asm { CASP            X6, X7, X4, X5, [X8] }
    _ZF = _X6 == v1;
    uint64_t v1 = _X6;
  }
  while (!_ZF);
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  swift::concurrency::trace::actor_create(a1);
}

void swift_defaultActor_destroy()
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPA           X2, X3, X2, X3, [X8] }
}

void swift_defaultActor_enqueue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = a2;
  uint64_t v3 = (uint64_t)a1;
  unsigned int v51 = a1[33];
  swift::concurrency::trace::actor_enqueue(a2, (swift::AsyncTask *)a1);
  if (*(void *)v2) {
    uint64_t v4 = *(void *)v2;
  }
  else {
    uint64_t v4 = 0;
  }
  do
  {
    uint64_t v5 = *(void *)(v4 + 64);
    if (v5 && (*(unsigned char *)(v5 + 3) & 1) != 0) {
      break;
    }
    uint64_t v6 = *(void *)(v4 + 8);
    if (!v6) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while ((*(unsigned char *)(v6 + 32) & 2) != 0);
  _X20 = 0;
  _X21 = 0;
  int v9 = 0;
  int v48 = v2[16];
  __asm { CASP            X20, X21, X20, X21, [X8] }
  uint64_t v14 = (__int128)_X20 >> 32;
  unsigned int v56 = v51 << 8;
  LODWORD(_X24) = _X20;
  uint64_t v58 = v2;
  while (1)
  {
    *(void *)(v3 + 16) = _X21;
    unsigned int v16 = BYTE1(_X24);
    if ((_X24 & 7) != 0)
    {
      if (BYTE1(_X24) >= v51) {
        unsigned int v17 = _X24;
      }
      else {
        unsigned int v17 = v56 | _X24 & 0xFFFF00FF | 0x10;
      }
      if ((_X24 & 7) == 1)
      {
        char v18 = 0;
        BOOL v19 = 0;
        uint64_t v20 = v14;
        goto LABEL_18;
      }
      uint64_t v20 = v14;
    }
    else
    {
      uint64_t v20 = 0;
      unsigned int v17 = v56 | _X24 & 0xFFFF00E8 | 1;
    }
    BOOL v19 = (v17 & 7) == 1;
    char v18 = 1;
LABEL_18:
    uint64_t v21 = BYTE1(v17);
    unsigned int v22 = v17 & 7;
    BOOL v24 = BYTE1(_X24) != BYTE1(v17) && v22 == 2;
    int v57 = _X24 & 7;
    if ((v19 || v24) && v3 && !*(unsigned char *)(v3 + 32))
    {
      int v54 = v9;
      uint64_t v52 = BYTE1(v17);
      uint64_t v25 = v20;
      uint64_t v50 = v14;
      unsigned int v26 = v17;
      int v49 = v17 & 7;
      swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)v3);
      unsigned int v22 = v49;
      unsigned int v17 = v26;
      uint64_t v14 = v50;
      uint64_t v20 = v25;
      uint64_t v21 = v52;
      unsigned int v16 = BYTE1(_X24);
      int v9 = v54;
      int v2 = v58;
    }
    if (v22 == 1) {
      char v27 = v18;
    }
    else {
      char v27 = 0;
    }
    if ((v27 & 1) == 0 && v16 != v21 && !v9)
    {
      unsigned int v28 = v16;
      uint64_t v55 = v3;
      uint64_t v29 = v21;
      uint64_t v30 = v20;
      uint64_t v31 = v14;
      uint64_t v53 = _X21;
      unsigned int v32 = v17;
      unsigned int v33 = v22;
      swift_retain();
      unsigned int v22 = v33;
      unsigned int v17 = v32;
      _X21 = v53;
      uint64_t v14 = v31;
      uint64_t v20 = v30;
      uint64_t v21 = v29;
      uint64_t v3 = v55;
      unsigned int v16 = v28;
      int v2 = v58;
      int v9 = 1;
    }
    unint64_t v34 = _X24 | (unint64_t)(v14 << 32);
    _X22 = v17 | (unint64_t)(v20 << 32);
    _X25 = _X21;
    __asm { CASPL           X24, X25, X22, X23, [X8] }
    if (_X24 == v34) {
      break;
    }
    uint64_t v14 = HIDWORD(_X24);
  }
  unsigned int v37 = v16;
  int v38 = v9;
  if (v22 >= 4) {
    unsigned __int8 v39 = -1;
  }
  else {
    unsigned __int8 v39 = v22;
  }
  size_t v40 = v2;
  uint64_t v41 = v21;
  unsigned int v42 = v22;
  swift::concurrency::trace::actor_state_changed(v40, v3, v39, v48 != 0, (v17 >> 4) & 1, v21);
  if (v57 != 1 && v42 == 1) {
  int v43 = v38;
  }
  if (v37 != v41)
  {
    if (v42 != 2)
    {
      int inited = _os_trace_lazy_init_completed_4swift();
      int v45 = v38;
      if (inited)
      {
        if (swift::concurrency::trace::LogsToken != -1)
        {
          dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
          int v45 = v38;
        }
        if (swift::concurrency::trace::TracingEnabled)
        {
          uint64_t v46 = swift::concurrency::trace::PotentialPriorityInversionLog;
          BOOL v47 = os_signpost_enabled((os_log_t)swift::concurrency::trace::PotentialPriorityInversionLog);
          int v45 = v38;
          if (v47)
          {
            *(_DWORD *)buf = 134218496;
            uint64_t v60 = v58;
            __int16 v61 = 2048;
            uint64_t v62 = v37;
            __int16 v63 = 2048;
            uint64_t v64 = v41;
            _os_signpost_emit_with_name_impl(&dword_18E465000, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "scheduled_actor_inversion", " enableTelemetry=YES actor=%p oldPriority=%zu newPriority=%zu", buf, 0x20u);
            int v45 = v38;
          }
        }
      }
      if (!v45) {
        swift_retain();
      }
    }
    dispatch_lock_override_start_with_debounce();
    int v43 = v38;
  }
  if (v43)
  {
    swift_release();
  }
}

_anonymous_namespace_::DefaultActorImpl *swift_defaultActor_deallocate(_anonymous_namespace_::DefaultActorImpl *result)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  if ((_X2 & 7) != 2) {
  unint64_t v8 = HIDWORD(_X2);
  }
  while (1)
  {
    _X4 = _X2 & 0xFFFFFFF8 | 3 | ((unint64_t)v8 << 32);
    unint64_t v10 = _X2 | (v8 << 32);
    _X3 = 0;
    __asm { CASP            X2, X3, X4, X5, [X8] }
    if (_X2 == v10) {
      break;
    }
    unint64_t v8 = HIDWORD(_X2);
    if ((_X2 & 7) != 2) {
  }
    }
  return result;
}

_anonymous_namespace_::DefaultActorImpl *swift_defaultActor_deallocateResilient(_anonymous_namespace_::DefaultActorImpl *result)
{
  if (*(void *)result) {
    uint64_t v1 = *(void *)result;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = v1;
  while (1)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 3)) {
        break;
      }
    }
    uint64_t v4 = *(void *)(v2 + 8);
    if (v4)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if ((*(unsigned char *)(v4 + 32) & 2) != 0) {
        continue;
      }
    }
    return (_anonymous_namespace_::DefaultActorImpl *)MEMORY[0x1F4186498](result, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  }
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  if ((_X2 & 7) != 2) {
  unint64_t v12 = HIDWORD(_X2);
  }
  while (1)
  {
    _X4 = _X2 & 0xFFFFFFF8 | 3 | ((unint64_t)v12 << 32);
    unint64_t v14 = _X2 | (v12 << 32);
    _X3 = 0;
    __asm { CASP            X2, X3, X4, X5, [X8] }
    if (_X2 == v14) {
      break;
    }
    unint64_t v12 = HIDWORD(_X2);
    if ((_X2 & 7) != 2) {
  }
    }
  return result;
}

void swift::swift_executor_escalate(unsigned __int8 *a1, uint64_t a2, swift::AsyncTask *this, unint64_t a4)
{
  if (a1 && !a2)
  {
    uint64_t v4 = this;
    uint64_t v6 = *(void *)a1 ? *(void *)a1 : 0;
    do
    {
      uint64_t v7 = *(void *)(v6 + 64);
      if (v7 && (*(unsigned char *)(v7 + 3) & 1) != 0) {
        break;
      }
      uint64_t v8 = *(void *)(v6 + 8);
      if (!v8) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while ((*(unsigned char *)(v8 + 32) & 2) != 0);
    _X20 = 0;
    int v26 = a1[16];
    _X21 = 0;
    __asm { CASP            X20, X21, X20, X21, [X8] }
    if ((_X20 & 7) != 0)
    {
      unint64_t v16 = HIDWORD(_X20);
      int v28 = a4 << 8;
      while (1)
      {
        unsigned int v17 = BYTE1(_X20) >= a4 ? _X20 : v28 | _X20 & 0xFFFF00FF | 0x10;
        if (_X20 == v17) {
          break;
        }
        if ((v17 & 7) == 1 && v4 && !*((unsigned char *)v4 + 32))
        {
          swift::AsyncTask::getPreferredTaskExecutor(v4);
          uint64_t v4 = this;
        }
        _X2 = v17 | ((unint64_t)v16 << 32);
        _X1 = 0;
        __asm { CASP            X0, X1, X2, X3, [X8] }
        if (_X0 == (_X20 | (v16 << 32)))
        {
          int v21 = 0;
          switch(v17 & 7)
          {
            case 0u:
              goto LABEL_27;
            case 1u:
              swift::concurrency::trace::actor_state_changed(a1, 0, 1, v26 != 0, (v17 >> 4) & 1, BYTE1(v17));
              swift_retain();
            case 2u:
              swift::concurrency::trace::actor_state_changed(a1, 0, 2, v26 != 0, (v17 >> 4) & 1, BYTE1(v17));
              dispatch_lock_override_start_with_debounce();
              goto LABEL_29;
            case 3u:
              int v21 = 3;
LABEL_27:
              BOOL v22 = v26 != 0;
              int v23 = (v17 >> 4) & 1;
              int v24 = BYTE1(v17);
              uint64_t v25 = a1;
              break;
            default:
              BOOL v22 = v26 != 0;
              int v23 = (v17 >> 4) & 1;
              int v24 = BYTE1(v17);
              uint64_t v25 = a1;
              int v21 = 255;
              break;
          }
          swift::concurrency::trace::actor_state_changed(v25, 0, v21, v22, v23, v24);
LABEL_29:
          uint64_t v4 = this;
          if ((_X20 & 7) == 0) {
            return;
          }
        }
        else
        {
          unint64_t v16 = HIDWORD(_X0);
          LODWORD(_X20) = _X0;
          if ((_X0 & 7) == 0) {
            return;
          }
        }
      }
    }
  }
}

void swift_task_enqueue(swift::AsyncTask *a1, unsigned __int8 *a2, uint64_t a3)
{
  swift_once();
  uint64_t v6 = (void (*)(swift::AsyncTask *, unsigned __int8 *, uint64_t, void (*)(swift::AsyncTask *, unsigned __int8 *, uint64_t)))swift_task_enqueue::Override;
  if (swift_task_enqueue::Override)
  {
    v6(a1, a2, a3, swift_task_enqueueImpl);
  }
  else
  {
    swift_task_enqueueImpl(a1, a2, a3);
  }
}

void swift_task_enqueueImpl(swift::AsyncTask *this, unsigned __int8 *a2, uint64_t a3)
{
  if (*MEMORY[0x1E4FBC890]) {
    ((void (*)(swift::AsyncTask *))*MEMORY[0x1E4FBC890])(this);
  }
  if (a2)
  {
    if (a3)
    {
      uint64_t ObjectType = swift_getObjectType();
      _swift_task_enqueueOnExecutor((uint64_t)this, (uint64_t)a2, ObjectType, a3 & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      swift_defaultActor_enqueue((unsigned __int8 *)this, a2);
    }
  }
  else if (this {
         && !*((unsigned char *)this + 32)
  }
         && (uint64_t PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor(this)) != 0)
  {
    uint64_t v9 = PreferredTaskExecutor;
    uint64_t v10 = v8;
    uint64_t v11 = swift_getObjectType();
    _swift_task_enqueueOnTaskExecutor((uint64_t)this, v9, v11, v10 & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    swift_task_enqueueGlobal((uint64_t)this);
  }
}

void swift_job_run(swift::AsyncTask *a1, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3)
{
  swift_once();
  uint64_t v6 = (void (*)(swift::AsyncTask *, _anonymous_namespace_::DefaultActorImpl *, uint64_t, void (*)(swift::AsyncTask *, _anonymous_namespace_::DefaultActorImpl *, uint64_t)))swift_job_run::Override;
  if (swift_job_run::Override)
  {
    v6(a1, a2, a3, swift_job_runImpl);
  }
  else
  {
    swift_job_runImpl(a1, a2, a3);
  }
}

void swift_job_runImpl(swift::AsyncTask *this, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3)
{
  char v14 = 1;
  LOBYTE(v15) = 0;
  char v16 = 0;
  uint64_t PreferredTaskExecutor = 0;
  if (a2)
  {
    uint64_t v7 = 0;
    char v14 = 0;
  }
  else if (this)
  {
    uint64_t v7 = 0;
    if (!*((unsigned char *)this + 32)) {
      uint64_t PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor(this);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = PreferredTaskExecutor;
  uint64_t v13 = v7;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v17 = *(void *)(StatusReg + 832);
  *(void *)(StatusReg + 832) = &v10;
  swift::runJobInEstablishedExecutorContext((uint64_t)this);
  if (v16)
  {
    uint64_t v9 = v15;
    if (*(void **)(StatusReg + 224) != v15) {
      uint64_t v9 = (void *)voucher_adopt();
    }
    if ((unint64_t)v9 + 1 >= 2)
    {
      os_release(v9);
      if (!v16) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (v16) {
LABEL_12:
    }
      char v16 = 0;
  }
LABEL_13:
  *(void *)(StatusReg + 832) = v17;
  if (v14 && v10 && !v11) {
}
  }

void swift_job_run_on_task_executor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_once();
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))swift_job_run_on_task_executor::Override;
  if (swift_job_run_on_task_executor::Override)
  {
    v6(a1, a2, a3, swift_job_run_on_task_executorImpl);
  }
  else
  {
    swift_once();
    uint64_t v7 = swift_job_run_on_serial_and_task_executor::Override;
    if (swift_job_run_on_serial_and_task_executor::Override)
    {
      ((void (*)(uint64_t, void, void, uint64_t, uint64_t, void (*)(uint64_t, _anonymous_namespace_::DefaultActorImpl *, uint64_t, uint64_t, uint64_t)))v7)(a1, 0, 0, a2, a3, swift_job_run_on_serial_and_task_executorImpl);
    }
    else
    {
      swift_job_run_on_serial_and_task_executorImpl(a1, 0, 0, a2, a3);
    }
  }
}

void swift_job_run_on_task_executorImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_once();
  uint64_t v6 = swift_job_run_on_serial_and_task_executor::Override;
  if (swift_job_run_on_serial_and_task_executor::Override)
  {
    ((void (*)(uint64_t, void, void, uint64_t, uint64_t, void (*)(uint64_t, _anonymous_namespace_::DefaultActorImpl *, uint64_t, uint64_t, uint64_t)))v6)(a1, 0, 0, a2, a3, swift_job_run_on_serial_and_task_executorImpl);
  }
  else
  {
    swift_job_run_on_serial_and_task_executorImpl(a1, 0, 0, a2, a3);
  }
}

void swift_job_run_on_serial_and_task_executor(uint64_t a1, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_once();
  uint64_t v10 = (void (*)(uint64_t, _anonymous_namespace_::DefaultActorImpl *, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, _anonymous_namespace_::DefaultActorImpl *, uint64_t, uint64_t, uint64_t)))swift_job_run_on_serial_and_task_executor::Override;
  if (swift_job_run_on_serial_and_task_executor::Override)
  {
    v10(a1, a2, a3, a4, a5, swift_job_run_on_serial_and_task_executorImpl);
  }
  else
  {
    swift_job_run_on_serial_and_task_executorImpl(a1, a2, a3, a4, a5);
  }
}

void swift_job_run_on_serial_and_task_executorImpl(uint64_t a1, _anonymous_namespace_::DefaultActorImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  LOBYTE(v12) = 0;
  char v13 = 0;
  char v11 = 0;
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = a5;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v14 = *(void *)(StatusReg + 832);
  *(void *)(StatusReg + 832) = &v7;
  swift::runJobInEstablishedExecutorContext(a1);
  if (v13)
  {
    uint64_t v6 = v12;
    if (*(void **)(StatusReg + 224) != v12) {
      uint64_t v6 = (void *)voucher_adopt();
    }
    if ((unint64_t)v6 + 1 >= 2)
    {
      os_release(v6);
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    if (v13) {
LABEL_6:
    }
      char v13 = 0;
  }
LABEL_7:
  *(void *)(StatusReg + 832) = v14;
  if (v11 && v7 && !v8) {
}
  }

uint64_t swift_task_getCurrentExecutor()
{
  swift_once();
  uint64_t v0 = (uint64_t (*)(uint64_t (*)(void)))swift_task_getCurrentExecutor::Override;
  if (swift_task_getCurrentExecutor::Override)
  {
    return v0(swift_task_getCurrentExecutorImpl);
  }
  else
  {
    uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
    if (v2) {
      return *(void *)v2;
    }
    else {
      return 0;
    }
  }
}

uint64_t swift_task_getCurrentExecutorImpl(void)
{
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
  if (v0) {
    return *(void *)v0;
  }
  else {
    return 0;
  }
}

uint64_t swift_task_isCurrentExecutor(uint64_t a1, uint64_t a2)
{
  swift_once();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, BOOL (*)(uint64_t, uint64_t)))swift_task_isCurrentExecutor::Override;
  if (swift_task_isCurrentExecutor::Override)
  {
    return v4(a1, a2, swift_task_isCurrentExecutorImpl);
  }
  else
  {
    return swift_task_isCurrentExecutorImpl(a1, a2);
  }
}

BOOL swift_task_isCurrentExecutorImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t v3 = *(long long **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 832);
  if (swift_task_isCurrentExecutorImpl(swift::SerialExecutorRef)::checkModeToken != -1)
  {
    dispatch_once_f(&swift_task_isCurrentExecutorImpl(swift::SerialExecutorRef)::checkModeToken, 0, (dispatch_function_t)checkIsCurrentExecutorMode);
    if (v3) {
      goto LABEL_3;
    }
LABEL_20:
    if (swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10) && pthread_main_np()) {
      return 1;
    }
    if (!isCurrentExecutorMode) {
      goto LABEL_18;
    }
    return 0;
  }
  if (!v3) {
    goto LABEL_20;
  }
LABEL_3:
  long long v9 = *v3;
  if ((void)v9 == a1
    || swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v9)
    && swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10))
  {
    return 1;
  }
  if (isCurrentExecutorMode != 1)
  {
LABEL_11:
    if ((v11 & 7) == 1)
    {
      if ((void)v9)
      {
        if (*((void *)&v9 + 1))
        {
          if (v10)
          {
            if (swift_compareWitnessTables())
            {
              uint64_t v6 = v9;
              uint64_t v7 = v10;
              uint64_t ObjectType = swift_getObjectType();
              if (_task_serialExecutor_isSameExclusiveExecutionContext(v6, v7, ObjectType, v11 & 0xFFFFFFFFFFFFFFF8)) {
                return 1;
              }
            }
          }
        }
      }
    }
    if (!isCurrentExecutorMode)
    {
LABEL_18:
      swift_task_checkIsolated(v10, v11, v4);
      return 1;
    }
    return 0;
  }
  if (!swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10)
    || (BOOL result = swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v9)))
  {
    if (swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v10)
      || !swift::SerialExecutorRef::isMainExecutor((swift::SerialExecutorRef *)&v9))
    {
      goto LABEL_11;
    }
    return 0;
  }
  return result;
}

uint64_t swift_task_switch(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  swift_once();
  uint64_t v6 = (uint64_t (*)(uint64_t (*)(void), uint64_t, uint64_t, uint64_t (*)(uint64_t (*)(void), uint64_t, uint64_t)))swift_task_switch::Override;
  if (swift_task_switch::Override)
  {
    return v6(a1, a2, a3, swift_task_switchImpl);
  }
  else
  {
    return swift_task_switchImpl(a1, a2, a3);
  }
}

uint64_t swift_task_switchImpl(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v25 = v3;
  *(void *)&long long v24 = a2;
  *((void *)&v24 + 1) = a3;
  BOOL v22 = a1;
  uint64_t Current = (_anonymous_namespace_::ExecutorTrackingInfo *)swift_task_getCurrent();
  if (v20) {
  else
  }
    ActiveExecutor = (_anonymous_namespace_::DefaultActorImpl *)_ss32_DefaultGlobalConcurrentExecutorCSchsSch013asUnownedTaskD0s0fgD0VyFTW();
  uint64_t v19 = v5;
  char v18 = ActiveExecutor;
  if (v20) {
  else
  }
    uint64_t TaskExecutor = _ss32_DefaultGlobalConcurrentExecutorCSchsSch013asUnownedTaskD0s0fgD0VyFTW();
  uint64_t v17 = v7;
  uint64_t v16 = TaskExecutor;
  uint64_t PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor(Current);
  if (mustSwitchToRun((uint64_t)v18, v19, v24, *((uint64_t *)&v24 + 1), v16, v17, PreferredTaskExecutor))
  {
    uint64_t v9 = 0;
    if (v23) {
      uint64_t v9 = v23;
    }
    *((void *)Current + 8) = v9;
    uint64_t v10 = 0;
    if (v22) {
      uint64_t v10 = v22;
    }
    *((void *)Current + 7) = v10;
    if (swift::TaskExecutorRef::isUndefined((swift::TaskExecutorRef *)&v16)
      && canGiveUpThreadForSwitch((uint64_t)v20, (uint64_t)v18, v19)
      && (UnownedSerialExecutor.executor.modify(),
          tryAssumeThreadForSwitch((_anonymous_namespace_::DefaultActorImpl *)v24, *((uint64_t *)&v24 + 1), PreferredTaskExecutor)))
    {
      giveUpThreadForSwitch(v18);
      uint64_t v11 = Current;
      uint64_t v12 = (_anonymous_namespace_::DefaultActorImpl **)v20;
      long long v13 = v24;
      return runOnAssumedThread(v11, (_anonymous_namespace_::DefaultActorImpl *)v13, *((_anonymous_namespace_::DefaultActorImpl **)&v13 + 1), v12);
    }
    else
    {
      swift::AsyncTask::flagAsAndEnqueueOnExecutor((uint64_t)Current, (unsigned __int8 *)v24, *((uint64_t *)&v24 + 1));
      return swift::_swift_task_clearCurrent(v14);
    }
  }
  else
  {
    return v22();
  }
}

void swift_nonDefaultDistributedActor_initialize(const void *a1)
{
  *((unsigned char *)a1 + 16) = 0;
  swift::concurrency::trace::actor_create(a1);
}

uint64_t swift_distributedActor_remote_initialize(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  if (*a1 > 0x7FFuLL) {
    LODWORD(v2) = 0;
  }
  if (v2)
  {
    if (v2 == 773) {
      uint64_t v1 = (void *)a1[1];
    }
    else {
      uint64_t v1 = 0;
    }
  }
  uint64_t v3 = swift_allocObject();
  bzero((void *)(v3 + 16), *((unsigned int *)v1 + 12) - 16);
  while (1)
  {
    uint64_t v4 = v1[8];
    if (v4)
    {
      if (*(unsigned char *)(v4 + 3)) {
        break;
      }
    }
    uint64_t v5 = v1[1];
    if (v5)
    {
      uint64_t v1 = (void *)v1[1];
      if ((*(unsigned char *)(v5 + 32) & 2) != 0) {
        continue;
      }
    }
    *(unsigned char *)(v3 + 16) = 1;
    goto LABEL_13;
  }
  *(unsigned char *)(v3 + 16) = 1;
  uint64_t v7 = *(void *)(v3 + 32);
  do
  {
    _X2 = 0;
    _X5 = *(void *)(v3 + 40);
    __asm { CASP            X4, X5, X2, X3, [X8] }
    _ZF = _X4 == v7;
    uint64_t v7 = _X4;
  }
  while (!_ZF);
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
LABEL_13:
  swift::concurrency::trace::actor_create((const void *)v3);
  return v3;
}

uint64_t swift_distributed_actor_is_remote(uint64_t *a1)
{
  if (*a1) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = 0;
  }
  do
  {
    uint64_t v2 = *(void *)(v1 + 64);
    if (v2 && (*(unsigned char *)(v2 + 3) & 1) != 0) {
      break;
    }
    uint64_t v3 = *(void *)(v1 + 8);
    if (!v3) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
  }
  while ((*(unsigned char *)(v3 + 32) & 2) != 0);
  return *((unsigned __int8 *)a1 + 16);
}

void swift::concurrency::trace::task_status_changed(swift::concurrency::trace *this, swift::AsyncTask *a2, int a3, int a4, int a5, int a6, int a7)
{
  int v12 = (int)a2;
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v14 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v15 = v14;
        uint64_t v16 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          int v17 = 134219520;
          unint64_t TaskId = swift::AsyncTask::getTaskId(this);
          __int16 v19 = 2048;
          uint64_t ResumeFunctionForLogging = swift::AsyncTask::getResumeFunctionForLogging(this, a5);
          __int16 v21 = 1024;
          int v22 = v12;
          __int16 v23 = 1024;
          int v24 = a3;
          __int16 v25 = 1024;
          int v26 = a4;
          __int16 v27 = 1024;
          int v28 = a6;
          __int16 v29 = 1024;
          int v30 = a7;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v16, OS_SIGNPOST_EVENT, v15, "task_status_changed", "task=%llx resumefn=%p maxPriority=%u, isCancelled=%{BOOL}d isEscalated=%{BOOL}d, isRunning=%{BOOL}d, isEnqueued=%{BOOL}d", (uint8_t *)&v17, 0x34u);
        }
      }
    }
  }
}

unsigned __int8 **__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsRunning(void)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>(unsigned __int8 **result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*result[1])
  {
    uint64_t v5 = result;
    unsigned int v6 = **result;
    if (*(_DWORD *)result[2] < v6)
    {
      BOOL result = (unsigned __int8 **)dispatch_thread_override_self();
      *(_DWORD *)v5[2] = v6;
    }
  }
  *a4 = *(_DWORD *)a4 & 0xFFFFABFF | ((unint64_t)((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC) >> 2) << 34);
  return result;
}

void swift::concurrency::trace::actor_create(const void *a1)
{
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
      {
        swift_getObjectType();
        uint64_t TypeName = swift_getTypeName();
        int v4 = v3;
        os_signpost_id_t v5 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
        if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          os_signpost_id_t v6 = v5;
          uint64_t v7 = swift::concurrency::trace::ActorLog;
          if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
          {
            int v8 = 134218498;
            uint64_t v9 = a1;
            __int16 v10 = 1040;
            int v11 = v4;
            __int16 v12 = 2080;
            uint64_t v13 = TypeName;
            _os_signpost_emit_with_name_impl(&dword_18E465000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "actor_lifetime", "actor=%p typeName:%.*s", (uint8_t *)&v8, 0x1Cu);
          }
        }
      }
    }
  }
}

void swift::concurrency::trace::actor_enqueue(const void *a1, swift::AsyncTask *a2)
{
  if (a2 && !*((unsigned char *)a2 + 32) && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v4 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        os_signpost_id_t v6 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          int v7 = 134218240;
          int v8 = a1;
          __int16 v9 = 2048;
          unint64_t TaskId = swift::AsyncTask::getTaskId(a2);
          _os_signpost_emit_with_name_impl(&dword_18E465000, v6, OS_SIGNPOST_EVENT, v5, "actor_enqueue", "actor=%p task=%llx", (uint8_t *)&v7, 0x16u);
        }
      }
    }
  }
}

void anonymous namespace'::DefaultActorImpl::scheduleActorProcessJob()
{
}

void swift::concurrency::trace::actor_state_changed(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v12 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v13 = v12;
        os_signpost_id_t v14 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          int v15 = 134219264;
          uint64_t v16 = a1;
          __int16 v17 = 1024;
          BOOL v18 = a2 != 0;
          __int16 v19 = 1024;
          int v20 = a3;
          __int16 v21 = 1024;
          int v22 = a4;
          __int16 v23 = 1024;
          int v24 = a5;
          __int16 v25 = 1024;
          int v26 = a6;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v14, OS_SIGNPOST_EVENT, v13, "actor_state_changed", "actor=%p needsPreprocessing=%d state=%u isDistributedRemote=%{BOOL}d isPriorityEscalated=%{BOOL}d, maxPriority=%u", (uint8_t *)&v15, 0x2Au);
        }
      }
    }
  }
}

uint64_t anonymous namespace'::ProcessOutOfLineJob::process(uint64_t a1)
{
  uint64_t v2 = *(_anonymous_namespace_::DefaultActorImpl **)(a1 + 64);
  int v3 = *(void **)(a1 + 40);
  if ((unint64_t)v3 + 1 >= 2) {
    os_release(v3);
  }
  MEMORY[0x192FABE70](a1, 0x10E0C40E03137E0);
  swift_retain();
  long long v29 = 0u;
  long long v30 = 0u;
  char v31 = 1;
  LOBYTE(v32) = 0;
  char v33 = 0;
    return swift_release();
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  long long v29 = (unint64_t)v2;
  long long v30 = 0uLL;
  os_signpost_id_t v5 = (void (**)(uint64_t *))MEMORY[0x1E4FBC888];
  uint64_t v34 = *(void *)(StatusReg + 832);
  *(void *)(StatusReg + 832) = &v29;
  os_signpost_id_t v6 = (uint64_t *)v2;
  while (1)
  {
    int v7 = v6 + 8;
    uint64_t v8 = v6[8];
    if (v8) {
      break;
    }
      goto LABEL_47;
LABEL_37:
    if (*v6) {
      uint64_t v17 = *v6;
    }
    else {
      uint64_t v17 = 0;
    }
    do
    {
      uint64_t v18 = *(void *)(v17 + 64);
      if (v18 && (*(unsigned char *)(v18 + 3) & 1) != 0) {
        break;
      }
      uint64_t v19 = *(void *)(v17 + 8);
      if (!v19) {
        break;
      }
      uint64_t v17 = *(void *)(v17 + 8);
    }
    while ((*(unsigned char *)(v19 + 32) & 2) != 0);
    _X24 = 0;
    _X25 = 0;
    __asm { CASP            X24, X25, X24, X25, [X8] }
    if (*v5) {
      (*v5)(v6);
    }
  }
  unint64_t v9 = *(unsigned __int8 *)(v8 + 33);
  if (v9 > 9) {
    uint64_t v10 = 3;
  }
  else {
    uint64_t v10 = 4;
  }
  if (v9 > 0x11) {
    uint64_t v10 = 2;
  }
  if (v9 > 0x15) {
    uint64_t v10 = 1;
  }
  if (v9 <= 0x19) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v8 + 16);
  *int v7 = v12;
  if (!v12) {
    goto LABEL_32;
  }
  unint64_t v13 = *(unsigned __int8 *)(v12 + 33);
  if (v13 > 0x19)
  {
    if (!v11) {
      goto LABEL_33;
    }
LABEL_32:
    v7[v11 + 1] = 0;
    goto LABEL_33;
  }
  if (v13 <= 0x15)
  {
    if (v13 > 9) {
      uint64_t v14 = 3;
    }
    else {
      uint64_t v14 = 4;
    }
    if (v13 <= 0x11) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 2;
    }
    if (v11 != v15) {
      goto LABEL_32;
    }
  }
  else if (v11 != 1)
  {
    goto LABEL_32;
  }
LABEL_33:
  swift::concurrency::trace::actor_dequeue(v6, (swift::AsyncTask *)v8);
  if (!*(unsigned char *)(v8 + 32))
  {
    *(void *)&long long v30 = swift::AsyncTask::getPreferredTaskExecutor((swift::AsyncTask *)v8);
    *((void *)&v30 + 1) = v16;
  }
  swift::runJobInEstablishedExecutorContext(v8);
  os_signpost_id_t v6 = (uint64_t *)v29;
  if ((void)v29 && !*((void *)&v29 + 1)) {
    goto LABEL_37;
  }
LABEL_47:
  if (v33)
  {
    __int16 v27 = v32;
    if (*(void **)(StatusReg + 224) != v32) {
      __int16 v27 = (void *)voucher_adopt();
    }
    if ((unint64_t)v27 + 1 >= 2)
    {
      os_release(v27);
      if (v33) {
LABEL_52:
      }
        char v33 = 0;
    }
    else if (v33)
    {
      goto LABEL_52;
    }
  }
  *(void *)(StatusReg + 832) = v34;
  return swift_release();
}

uint64_t anonymous namespace'::DefaultActorImpl::tryLock(_anonymous_namespace_::DefaultActorImpl *this, int a2)
{
  unint64_t current_override_qos_floor = dispatch_thread_get_current_override_qos_floor();
  char v5 = current_override_qos_floor;
  unint64_t v6 = HIDWORD(current_override_qos_floor);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v9 = v8;
  do
  {
LABEL_4:
    uint64_t v10 = *(void *)(v9 + 64);
    if (v10 && (*(unsigned char *)(v10 + 3) & 1) != 0) {
      break;
    }
    uint64_t v11 = *(void *)(v9 + 8);
    if (!v11) {
      break;
    }
    uint64_t v9 = *(void *)(v9 + 8);
  }
  while ((*(unsigned char *)(v11 + 32) & 2) != 0);
  _X22 = 0;
  _X23 = 0;
  int v14 = *((unsigned __int8 *)this + 16);
  __asm { CASP            X22, X23, X22, X23, [X8] }
  uint64_t v20 = (__int128)_X22 >> 32;
  unsigned int v21 = _X22;
  int v22 = _X22 & 7;
  if (!a2) {
    goto LABEL_13;
  }
  while (v22 == 1)
  {
    if ((v5 & 1) != 0 && v6 < BYTE1(v21))
    {
      dispatch_thread_override_self();
      LODWORD(v6) = BYTE1(v21);
      uint64_t v8 = *(void *)this;
      if (*(void *)this) {
        goto LABEL_2;
      }
LABEL_3:
      uint64_t v9 = 0;
      goto LABEL_4;
    }
    while (1)
    {
      _X24 = v21 & 0xFFFFFFE8 | 2 | ((unint64_t)(*(void *)(StatusReg + 24) >> 2) << 34);
      _X1 = 0;
      __asm { CASPA           X0, X1, X24, X25, [X8] }
      if (_X0 == (v21 | (unint64_t)(v20 << 32)))
      {
        if (*MEMORY[0x1E4FBC888])
        {
          int v26 = *((unsigned __int8 *)this + 16);
          ((void (*)(_anonymous_namespace_::DefaultActorImpl *))*MEMORY[0x1E4FBC888])(this);
          int v14 = v26;
        }
        swift::concurrency::trace::actor_state_changed(this, 0, 2, v14 != 0, 0, BYTE1(v21));
        if (a2) {
        return 1;
        }
      }
      uint64_t v20 = HIDWORD(_X0);
      unsigned int v21 = _X0;
      int v22 = _X0 & 7;
      if (a2) {
        break;
      }
LABEL_13:
      if ((v22 - 1) < 2) {
        return 0;
      }
    }
  }
  swift_release();
  return 0;
}

uint64_t anonymous namespace'::DefaultActorImpl::unlock(_anonymous_namespace_::DefaultActorImpl *this, int a2)
{
  if (*(void *)this) {
    uint64_t v4 = *(void *)this;
  }
  else {
    uint64_t v4 = 0;
  }
  do
  {
    uint64_t v5 = *(void *)(v4 + 64);
    if (v5 && (*(unsigned char *)(v5 + 3) & 1) != 0) {
      break;
    }
    uint64_t v6 = *(void *)(v4 + 8);
    if (!v6) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while ((*(unsigned char *)(v6 + 32) & 2) != 0);
  _X24 = 0;
  _X25 = 0;
  int v9 = *((unsigned __int8 *)this + 16);
  __asm { CASP            X24, X25, X24, X25, [X8] }
  uint64_t v15 = (void (**)(_anonymous_namespace_::DefaultActorImpl *))MEMORY[0x1E4FBC890];
  if (*MEMORY[0x1E4FBC890]) {
    ((void (*)(_anonymous_namespace_::DefaultActorImpl *))*MEMORY[0x1E4FBC890])(this);
  }
  if ((_X24 & 7) == 3)
  {
    LOBYTE(_X0) = _X24;
LABEL_19:
    if ((_X0 & 0x10) != 0) {
      dispatch_lock_override_end();
    }
  }
  else
  {
    _X0 = _X24;
    while (1)
    {
      if (*((void *)this + 8))
      {
        if (!a2) {
          return 0;
        }
        unsigned int v17 = _X24 & 0xFFFFFFE8 | 1;
      }
      else
      {
        unsigned int v17 = _X24 & 0xFFFF00E8;
      }
      unint64_t v18 = _X0 & 0xFFFFFFFF00000000 | _X24;
      _X22 = v17;
      _X1 = 0;
      __asm { CASPL           X0, X1, X22, X23, [X10] }
      if (_X0 == v18) {
        break;
      }
      LODWORD(_X24) = _X0;
      if ((_X0 & 7) == 3) {
        goto LABEL_19;
      }
    }
    if (*v15) {
      (*v15)(this);
    }
    switch(v17 & 7)
    {
      case 0u:
        int v22 = 0;
        break;
      case 1u:
        swift::concurrency::trace::actor_state_changed(this, 0, 1, v9 != 0, 0, BYTE1(v17));
        operator new();
      case 2u:
        int v22 = 2;
        break;
      case 3u:
        int v22 = 3;
        break;
      default:
        int v22 = 255;
        break;
    }
    swift::concurrency::trace::actor_state_changed(this, 0, v22, v9 != 0, 0, BYTE1(v17));
    if ((_X24 & 0x10) != 0) {
      dispatch_lock_override_end();
    }
  }
  return 1;
}

uint64_t anonymous namespace'::ExecutorTrackingInfo::getActiveExecutor(_anonymous_namespace_::ExecutorTrackingInfo *this)
{
  return *(void *)this;
}

uint64_t anonymous namespace'::DefaultActorImpl::handleUnprioritizedJobs(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = a2;
      a2 = *(void *)(a2 + 16);
      *(void *)(v2 + 16) = v3;
    }
    while (a2);
    uint64_t v4 = (uint64_t *)(result + 64);
    unsigned int v5 = *(unsigned __int8 *)(v2 + 33);
    if (v5 > 9) {
      unsigned int v6 = 3;
    }
    else {
      unsigned int v6 = 4;
    }
    if (v5 > 0x11) {
      unsigned int v6 = 2;
    }
    if (v5 > 0x15) {
      unsigned int v6 = 1;
    }
    if (v5 <= 0x19) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    do
    {
      uint64_t v8 = *(void *)(v2 + 16);
      uint64_t v9 = v2;
      if (v8)
      {
        while (1)
        {
          uint64_t v10 = v8;
          unsigned int v11 = *(unsigned __int8 *)(v8 + 33);
          if (v11 <= 0x19)
          {
            LODWORD(v12) = v11 > 9 ? 3 : 4;
            if (v11 > 0x11) {
              LODWORD(v12) = 2;
            }
            uint64_t v12 = v11 <= 0x15 ? v12 : 1;
          }
          else
          {
            uint64_t v12 = 0;
          }
          BOOL v13 = v12 == v7;
          if (v12 != v7) {
            break;
          }
          uint64_t v8 = *(void *)(v10 + 16);
          uint64_t v9 = v10;
          if (!v8)
          {
            uint64_t v9 = v10;
            uint64_t v12 = v7;
            uint64_t v10 = 0;
            break;
          }
        }
        int v14 = v7;
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v12 = 0x80000000;
        BOOL v13 = 1;
        uint64_t v9 = v2;
        int v14 = v7;
        if ((v7 & 0x80000000) == 0)
        {
LABEL_33:
          while (1)
          {
            uint64_t v15 = &v4[v14];
            uint64_t v18 = v15[1];
            uint64_t v16 = v15 + 1;
            uint64_t v17 = v18;
            if (v18) {
              break;
            }
            if (v14-- <= 0) {
              goto LABEL_14;
            }
          }
          *(void *)(v9 + 16) = *(void *)(v17 + 16);
          BOOL result = *v16;
          *(void *)(*v16 + 16) = v2;
          goto LABEL_15;
        }
      }
LABEL_14:
      BOOL result = *v4;
      *(void *)(v9 + 16) = *v4;
      *uint64_t v4 = v2;
LABEL_15:
      v4[(int)v7 + 1] = v9;
      uint64_t v2 = v10;
      uint64_t v7 = v12;
    }
    while (!v13);
  }
  return result;
}

void swift::concurrency::trace::actor_dequeue(const void *a1, swift::AsyncTask *a2)
{
  if (a2 && !*((unsigned char *)a2 + 32) && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v4 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, a1);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        unsigned int v6 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          int v7 = 134218240;
          uint64_t v8 = a1;
          __int16 v9 = 2048;
          unint64_t TaskId = swift::AsyncTask::getTaskId(a2);
          _os_signpost_emit_with_name_impl(&dword_18E465000, v6, OS_SIGNPOST_EVENT, v5, "actor_dequeue", "actor=%p task=%llx", (uint8_t *)&v7, 0x16u);
        }
      }
    }
  }
}

void swift::concurrency::trace::actor_note_job_queue(const void *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      unsigned int v6 = swift::concurrency::trace::ActorLog;
      if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
      {
        int v7 = 0;
        if (a2)
        {
          do
          {
            if (!*(unsigned char *)(a2 + 32)) {
              ++v7;
            }
            a2 = a3(a2);
          }
          while (a2);
          unsigned int v6 = swift::concurrency::trace::ActorLog;
        }
        os_signpost_id_t v8 = os_signpost_id_make_with_pointer(v6, a1);
        if (v8 - 1 < 0xFFFFFFFFFFFFFFFELL)
        {
          os_signpost_id_t v9 = v8;
          uint64_t v10 = swift::concurrency::trace::ActorLog;
          if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
          {
            int v11 = 134218240;
            uint64_t v12 = a1;
            __int16 v13 = 1024;
            int v14 = v7;
            _os_signpost_emit_with_name_impl(&dword_18E465000, v10, OS_SIGNPOST_EVENT, v9, "actor_job_queue", "actor=%p jobCount=%u", (uint8_t *)&v11, 0x12u);
          }
        }
      }
    }
  }
}

uint64_t traceJobQueue(anonymous namespace'::DefaultActorImpl *,swift::Job *)::$_0::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t anonymous namespace'::DefaultActorImpl::deallocateUnconditional(_anonymous_namespace_::DefaultActorImpl *this)
{
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::ActorLog, this);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v3 = v2;
        os_signpost_id_t v4 = swift::concurrency::trace::ActorLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::ActorLog))
        {
          int v6 = 134217984;
          int v7 = this;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v4, OS_SIGNPOST_EVENT, v3, "actor_deallocate", "actor=%p", (uint8_t *)&v6, 0xCu);
        }
      }
    }
  }
  return swift_deallocClassInstance();
}

BOOL swift::TaskExecutorRef::isUndefined(swift::TaskExecutorRef *this)
{
  return *(void *)this == 0;
}

void *swift_task_enqueue::$_0::__invoke(swift_task_enqueue::$_0 *this, void *a2)
{
  BOOL result = (void *)swift::getOverride_task_enqueue(this);
  swift_task_enqueue::Override = result;
  return result;
}

void *swift_job_run::$_0::__invoke(swift_job_run::$_0 *this, void *a2)
{
  BOOL result = (void *)swift::getOverride_job_run(this);
  swift_job_run::Override = result;
  return result;
}

void *swift_job_run_on_task_executor::$_0::__invoke(swift_job_run_on_task_executor::$_0 *this, void *a2)
{
  BOOL result = (void *)swift::getOverride_job_run_on_task_executor(this);
  swift_job_run_on_task_executor::Override = result;
  return result;
}

void *swift_job_run_on_serial_and_task_executor::$_0::__invoke(swift_job_run_on_serial_and_task_executor::$_0 *this, void *a2)
{
  BOOL result = (void *)swift::getOverride_job_run_on_serial_and_task_executor(this);
  swift_job_run_on_serial_and_task_executor::Override = result;
  return result;
}

void *swift_task_getCurrentExecutor::$_0::__invoke(swift_task_getCurrentExecutor::$_0 *this, void *a2)
{
  BOOL result = (void *)swift::getOverride_task_getCurrentExecutor(this);
  swift_task_getCurrentExecutor::Override = result;
  return result;
}

void *swift_task_isCurrentExecutor::$_0::__invoke(swift_task_isCurrentExecutor::$_0 *this, void *a2)
{
  BOOL result = (void *)swift::getOverride_task_isCurrentExecutor(this);
  swift_task_isCurrentExecutor::Override = result;
  return result;
}

uint64_t checkIsCurrentExecutorMode(void *a1)
{
  uint64_t result = swift_bincompat_useLegacyNonCrashingExecutorChecks();
  isCurrentExecutorMode = result;
  return result;
}

void *swift_task_switch::$_0::__invoke(swift_task_switch::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_switch(this);
  swift_task_switch::Override = result;
  return result;
}

uint64_t anonymous namespace'::ExecutorTrackingInfo::getTaskExecutor(_anonymous_namespace_::ExecutorTrackingInfo *this)
{
  return *((void *)this + 2);
}

BOOL mustSwitchToRun(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return a1 != a3 || a5 != a7;
}

BOOL canGiveUpThreadForSwitch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && !*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  return !a2 || a3 == 0;
}

uint64_t tryAssumeThreadForSwitch(_anonymous_namespace_::DefaultActorImpl *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return a3 == 0;
  }
  if (a2) {
    return 0;
  }
}

_anonymous_namespace_::DefaultActorImpl *giveUpThreadForSwitch(_anonymous_namespace_::DefaultActorImpl *result)
{
  if (result) {
  return result;
  }
}

uint64_t runOnAssumedThread(swift::AsyncTask *a1, _anonymous_namespace_::DefaultActorImpl *a2, _anonymous_namespace_::DefaultActorImpl *a3, _anonymous_namespace_::DefaultActorImpl **a4)
{
  if (a4)
  {
    *a4 = a2;
    a4[1] = a3;
    a4[2] = (_anonymous_namespace_::DefaultActorImpl *)swift::AsyncTask::getPreferredTaskExecutor(a1);
    a4[3] = v7;
    os_signpost_id_t v8 = (uint64_t (*)(void))*((void *)a1 + 7);
    return v8();
  }
  else
  {
    char v15 = 1;
    char v16 = 0;
    char v17 = 0;
    v14[0] = a2;
    v14[1] = a3;
    uint64_t v14[2] = swift::AsyncTask::getPreferredTaskExecutor(a1);
    v14[3] = v9;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v11 = *(void *)(StatusReg + 832);
    uint64_t v18 = v11;
    *(void *)(StatusReg + 832) = v14;
    uint64_t result = (*((uint64_t (**)(void))a1 + 7))();
    *(void *)(StatusReg + 832) = v11;
    if (a2 && !a3) {
  }
    }
  return result;
}

void swift::AsyncTask::flagAsAndEnqueueOnExecutor(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _X0 = 0;
  _X1 = 0;
  int v26 = a2;
  uint64_t v27 = a3;
  __asm { CASP            X0, X1, X0, X1, [X8] }
  v25[0] = _X0;
  v25[1] = 0;
  if (((unint64_t)_X0 & 0xFFFFFFFC00004000) == 0x4000)
  {
    uint64_t v12 = *(void *)(a1 + 160);
    v23[0] = &v24;
    v23[1] = &v26;
    uint64_t v24 = v12;
    swift::updateStatusRecord((swift::concurrency::trace *)a1, v12, (uint64_t)__swift::__runtime::llvm::function_ref<void ()(void)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(void)#1}>, (uint64_t)v23, (uint64_t *)v25, (void (*)(uint64_t, unint64_t, uint64_t, long long *))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v22);
  }
  else
  {
    uint64_t v14 = swift::_swift_task_alloc_specific((swift *)a1, (swift::AsyncTask *)0x30);
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 32) = 4;
    *(void *)(v14 + 40) = a1;
    *(void *)(v14 + 16) = a2;
    *(void *)(v14 + 24) = a3;
    *(void *)(a1 + 160) = v14;
    swift::addStatusRecord((swift::concurrency::trace *)a1, v14, v25, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#2}>, (uint64_t)v23);
    if (HIDWORD(v25[0]) >= 4)
    {
      if (((uint64_t)v25[0] & 0x400) != 0) {
        dispatch_lock_override_end();
      }
      swift_task_exitThreadLocalContext();
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      uint64_t v16 = *(void *)(StatusReg + 832);
      uint64_t v17 = *(void *)(v16 + 40);
      if (*(void *)(StatusReg + 224) != v17) {
        uint64_t v17 = voucher_adopt();
      }
      *(void *)(a1 + 40) = v17;
      if (*(unsigned char *)(v16 + 48)) {
        *(unsigned char *)(v16 + 48) = 0;
      }
    }
  }
  unsigned int v18 = *(_DWORD *)(a1 + 32);
  uint64_t v19 = (swift::AsyncTask *)LOBYTE(v25[0]);
  *(unsigned char *)(a1 + 33) = v25[0];
  swift::concurrency::trace::task_flags_changed((swift::concurrency::trace *)a1, v19, HIBYTE(v18) & 1, (v18 >> 25) & 1, (v18 >> 26) & 1, (v18 >> 28) & 1);
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  swift_once();
  if (swift_task_enqueue::Override) {
    swift_task_enqueue::Override(a1, v20, v21, swift_task_enqueueImpl);
  }
  else {
    swift_task_enqueueImpl((swift::AsyncTask *)a1, v20, v21);
  }
}

void swift::concurrency::trace::task_flags_changed(swift::concurrency::trace *this, swift::AsyncTask *a2, int a3, int a4, int a5, int a6)
{
  int v10 = (int)a2;
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v12 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v13 = v12;
        uint64_t v14 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          int v15 = 134219264;
          unint64_t TaskId = swift::AsyncTask::getTaskId(this);
          __int16 v17 = 1024;
          int v18 = v10;
          __int16 v19 = 1024;
          int v20 = a3;
          __int16 v21 = 1024;
          int v22 = a4;
          __int16 v23 = 1024;
          int v24 = a5;
          __int16 v25 = 1024;
          int v26 = a6;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v14, OS_SIGNPOST_EVENT, v13, "task_flags_changed", "task=%llx jobPriority=%u isChildTask=%{BOOL}d, isFuture=%{BOOL}d isGroupChildTask=%{BOOL}d isAsyncLetTask=%{BOOL}d", (uint8_t *)&v15, 0x2Au);
        }
      }
    }
  }
}

__n128 __swift::__runtime::llvm::function_ref<void ()(void)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t v1 = *(__n128 **)(a1 + 8);
  os_signpost_id_t v2 = **(__n128 ***)a1;
  v2[2].n128_u32[0] = 4;
  __n128 result = *v1;
  v2[1] = *v1;
  return result;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = *(_DWORD *)a4 & 0xFFFFEBFF | 0x1000 | ((unint64_t)*(unsigned int *)(a4 + 4) << 32);
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsAndEnqueueOnExecutor(swift::SerialExecutorRef)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#2}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = *(_DWORD *)a4 & 0xFFFFABFF | 0x5000 | ((unint64_t)(*(_DWORD *)(a4 + 4) & 3) << 32);
  return 1;
}

uint64_t _GLOBAL__sub_I_Actor_cpp()
{
  uint64_t result = swift_bincompat_useLegacyNonCrashingExecutorChecks();
  if (result) {
    int v1 = 1;
  }
  else {
    int v1 = 2;
  }
  unexpectedExecutorLogLevel = v1;
  return result;
}

uint64_t swift::asyncLet_addImpl(unint64_t this, swift::AsyncTask *a2, swift::AsyncLet *a3)
{
  *(void *)a2 = 1;
  *((void *)a2 + 1) = 0;
  uint64_t v3 = 8;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)a2 + 2) = this;
  *((void *)a2 + 3) = v3 | this & 0xFFFFFFFFFFFFFFF3;
  os_signpost_id_t v5 = &v6;
  unint64_t v6 = this;
  return swift::addStatusRecordToSelf((uint64_t)a2, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::asyncLet_addImpl(swift::AsyncTask *,swift::AsyncLet *,BOOL)::$_0>, (uint64_t)&v5);
}

uint64_t swift_asyncLet_start(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  v6[1] = a2;
  __darwin_time_t v6[2] = a1;
  v6[0] = 2;
  return swift_task_create(0x1000uLL, (unsigned __int8 *)v6, a3, a4, a5);
}

uint64_t swift_asyncLet_begin(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  __darwin_time_t v7[2] = a1;
  v7[3] = a6;
  v7[0] = 3;
  v7[1] = a2;
  return swift_task_create(0x1000uLL, (unsigned __int8 *)v7, a3, a4, a5);
}

uint64_t swift::AsyncLet::getPreallocatedSpace(swift::AsyncLet *this)
{
  return (uint64_t)this + 80;
}

uint64_t swift::AsyncLet::getSizeOfPreallocatedSpace(swift::AsyncLet *this)
{
  return 560;
}

unint64_t swift_asyncLet_wait(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  swift_once();
  os_signpost_id_t v8 = swift_asyncLet_wait::Override;
  if (swift_asyncLet_wait::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *)))v8)(a1, a2, a3, a4, swift_asyncLet_waitImpl);
  }
  else
  {
    int v10 = (unsigned int *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0);
    return swift_task_future_wait(a1, v10, a3, a4);
  }
}

unint64_t swift_asyncLet_waitImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  return swift_task_future_wait(a1, (unsigned int *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0), a3, a4);
}

unint64_t swift_asyncLet_wait_throwing(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  swift_once();
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), uint64_t, unint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void))))swift_asyncLet_wait_throwing::Override;
  if (swift_asyncLet_wait_throwing::Override)
  {
    return v9(a1, a2, a3, a4, swift_asyncLet_wait_throwingImpl);
  }
  else
  {
    uint64_t v11 = (unsigned int *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0);
    return swift_task_future_wait_throwing(a1, v11, a3, v4);
  }
}

unint64_t swift_asyncLet_wait_throwingImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return swift_task_future_wait_throwing(a1, (unsigned int *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF0), a3, v3);
}

void swift_asyncLet_end(uint64_t a1)
{
  swift_once();
  os_signpost_id_t v2 = (void (*)(uint64_t, void (*)(swift::AsyncLet *)))swift_asyncLet_end::Override;
  if (swift_asyncLet_end::Override)
  {
    v2(a1, swift_asyncLet_endImpl);
  }
  else
  {
    uint64_t v3 = (swift::AsyncTask *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0);
    swift_task_cancel(v3);
    swift::removeStatusRecordFromSelf(a1, 0, v4);
    uint64_t Current = (swift *)swift_task_getCurrent();
    swift::_swift_task_dealloc_specific(Current, v3, v6, v7);
  }
}

void swift_asyncLet_endImpl(swift::AsyncLet *a1)
{
  os_signpost_id_t v2 = (swift::AsyncTask *)(*((void *)a1 + 3) & 0xFFFFFFFFFFFFFFF0);
  swift_task_cancel(v2);
  swift::removeStatusRecordFromSelf((uint64_t)a1, 0, v3);
  uint64_t Current = (swift *)swift_task_getCurrent();

  swift::_swift_task_dealloc_specific(Current, v2, v5, v6);
}

unint64_t swift_asyncLet_get(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v7 = swift_once();
  os_signpost_id_t v8 = swift_asyncLet_get::Override;
  if (swift_asyncLet_get::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *)))v8)(a1, a2, a3, a4, swift_asyncLet_getImpl);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    if ((v10 & 4) != 0)
    {
      return ((uint64_t (*)(uint64_t))a3)(v7);
    }
    else
    {
      *(void *)(a1 + 24) = v10 | 4;
      return swift_task_future_wait(a2, (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF0), a3, a4);
    }
  }
}

unint64_t swift_asyncLet_getImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if ((v4 & 4) != 0) {
    return a3();
  }
  *(void *)(a1 + 24) = v4 | 4;
  return swift_task_future_wait(a2, (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF0), a3, a4);
}

unint64_t swift_asyncLet_get_throwing(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  swift_once();
  os_signpost_id_t v8 = swift_asyncLet_get_throwing::Override;
  if (swift_asyncLet_get_throwing::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *)))v8)(a1, a2, a3, a4, swift_asyncLet_get_throwingImpl);
  }
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 4) == 0)
  {
    uint64_t v11 = (uint64_t (**)(void))(a4 + 1);
    if (a3)
    {
      *uint64_t v11 = a3;
      if (v4)
      {
LABEL_8:
        uint64_t v12 = v4;
LABEL_14:
        *a4 = v12;
        a4[2] = a1;
        return swift_task_future_wait_throwing(a2, (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF0), _asyncLet_get_throwing_continuation, (void *)(a1 + 32));
      }
    }
    else
    {
      *uint64_t v11 = 0;
      if (v4) {
        goto LABEL_8;
      }
    }
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  return a3();
}

unint64_t swift_asyncLet_get_throwingImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if ((v5 & 4) != 0) {
    return a3();
  }
  unint64_t v6 = (uint64_t (**)(void))(a4 + 1);
  if (!a3)
  {
    *unint64_t v6 = 0;
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  *unint64_t v6 = a3;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v7 = v4;
LABEL_8:
  *a4 = v7;
  a4[2] = a1;
  return swift_task_future_wait_throwing(a2, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF0), _asyncLet_get_throwing_continuation, (void *)(a1 + 32));
}

unint64_t swift_asyncLet_consume(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  swift_once();
  uint64_t v10 = swift_asyncLet_consume::Override;
  if (swift_asyncLet_consume::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *)))v10)(a1, a2, a3, a4, swift_asyncLet_consumeImpl);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    if ((v12 & 4) != 0)
    {
      return asyncLet_finish_after_task_completion(a1, a3, v9);
    }
    else
    {
      if (v4) {
        uint64_t v13 = v4;
      }
      else {
        uint64_t v13 = 0;
      }
      *a4 = v13;
      if (a3) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = 0;
      }
      a4[1] = v14;
      a4[2] = a1;
      return swift_task_future_wait(a2, (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_continuation, (void *)(a1 + 32));
    }
  }
}

unint64_t swift_asyncLet_consumeImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if ((v5 & 4) != 0) {
    return asyncLet_finish_after_task_completion(a1, a3, (uint64_t)a3);
  }
  if (v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  *a4 = v6;
  if (a3) {
    os_signpost_id_t v8 = a3;
  }
  else {
    os_signpost_id_t v8 = 0;
  }
  a4[1] = v8;
  a4[2] = a1;
  return swift_task_future_wait(a2, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_continuation, (void *)(a1 + 32));
}

unint64_t swift_asyncLet_consume_throwing(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  swift_once();
  uint64_t v10 = swift_asyncLet_consume_throwing::Override;
  if (swift_asyncLet_consume_throwing::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *)))v10)(a1, a2, a3, a4, swift_asyncLet_consume_throwingImpl);
  }
  uint64_t v12 = *(void *)(a1 + 24);
  if ((v12 & 4) == 0)
  {
    uint64_t v13 = (uint64_t (**)(void))(a4 + 1);
    if (a3)
    {
      *uint64_t v13 = a3;
      if (v4)
      {
LABEL_8:
        uint64_t v14 = v4;
LABEL_14:
        *a4 = v14;
        a4[2] = a1;
        return swift_task_future_wait_throwing(a2, (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_throwing_continuation, (void *)(a1 + 32));
      }
    }
    else
    {
      *uint64_t v13 = 0;
      if (v4) {
        goto LABEL_8;
      }
    }
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  return asyncLet_finish_after_task_completion(a1, a3, v9);
}

unint64_t swift_asyncLet_consume_throwingImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if ((v5 & 4) != 0) {
    return asyncLet_finish_after_task_completion(a1, a3, (uint64_t)a3);
  }
  uint64_t v6 = (uint64_t (**)(void))(a4 + 1);
  if (!a3)
  {
    *uint64_t v6 = 0;
    if (v4) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  *uint64_t v6 = a3;
  if (!v4) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v7 = v4;
LABEL_8:
  *a4 = v7;
  a4[2] = a1;
  return swift_task_future_wait_throwing(a2, (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))_asyncLet_consume_throwing_continuation, (void *)(a1 + 32));
}

unint64_t swift_asyncLet_finish(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  swift_once();
  os_signpost_id_t v8 = swift_asyncLet_finish::Override;
  if (swift_asyncLet_finish::Override)
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void), void *)))v8)(a1, a2, a3, a4, swift_asyncLet_finishImpl);
  }
  else
  {
    return swift_asyncLet_finishImpl(a1, a2, a3, a4);
  }
}

unint64_t swift_asyncLet_finishImpl(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = (swift::AsyncTask *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 4) != 0)
  {
    unint64_t v12 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x20);
    uint64_t v13 = 208;
    if ((v12 & 0x1000000) == 0) {
      uint64_t v13 = 192;
    }
    if (*(void *)(*(void *)((char *)v9 + v13 + ((v12 >> 23) & 8) + 8) - 8)) {
      uint64_t v14 = *(void *)(*(void *)((char *)v9 + v13 + ((v12 >> 23) & 8) + 8) - 8);
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t))(v14 + 8))(a2);
    return asyncLet_finish_after_task_completion(a1, a3, v16);
  }
  else
  {
    swift_task_cancel(v9);
    if (v4) {
      uint64_t v11 = v4;
    }
    else {
      uint64_t v11 = 0;
    }
    *a4 = v11;
    if (a3) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = 0;
    }
    a4[1] = v15;
    a4[2] = a1;
    a4[3] = a2;
    int v18 = (unsigned int *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0);
    return swift_task_future_wait_throwing(a2, v18, _asyncLet_finish_continuation, (void *)(a1 + 32));
  }
}

void *swift_asyncLet_wait::$_0::__invoke(swift_asyncLet_wait::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_wait(this);
  swift_asyncLet_wait::Override = result;
  return result;
}

void *swift_asyncLet_wait_throwing::$_0::__invoke(swift_asyncLet_wait_throwing::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_wait_throwing(this);
  swift_asyncLet_wait_throwing::Override = result;
  return result;
}

void *swift_asyncLet_end::$_0::__invoke(swift_asyncLet_end::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_end(this);
  swift_asyncLet_end::Override = result;
  return result;
}

void *swift_asyncLet_get::$_0::__invoke(swift_asyncLet_get::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_get(this);
  swift_asyncLet_get::Override = result;
  return result;
}

void *swift_asyncLet_get_throwing::$_0::__invoke(swift_asyncLet_get_throwing::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_get_throwing(this);
  swift_asyncLet_get_throwing::Override = result;
  return result;
}

uint64_t _asyncLet_get_throwing_continuation()
{
  if (!v0) {
    *(void *)(*(void *)(v1 + 16) + 24) |= 4uLL;
  }
  if (*(void *)(v1 + 8)) {
    os_signpost_id_t v2 = *(uint64_t (**)(void))(v1 + 8);
  }
  else {
    os_signpost_id_t v2 = 0;
  }
  return v2();
}

void *swift_asyncLet_consume::$_0::__invoke(swift_asyncLet_consume::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_consume(this);
  swift_asyncLet_consume::Override = result;
  return result;
}

uint64_t asyncLet_finish_after_task_completion(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = (swift::AsyncTask *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF0);
  swift::removeStatusRecordFromSelf(a1, 0, a3);
  swift::AsyncTask::~AsyncTask(v4);
  if ((*(unsigned char *)(a1 + 24) & 8) != 0) {
    swift_task_dealloc((uint64_t)v4);
  }
  return a2();
}

uint64_t _asyncLet_consume_continuation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3)
  {
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v5 = 0;
    return asyncLet_finish_after_task_completion(v3[2], v5, a3);
  }
  uint64_t v4 = (uint64_t (*)(void))v3[1];
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v5 = v4;
  return asyncLet_finish_after_task_completion(v3[2], v5, a3);
}

void *swift_asyncLet_consume_throwing::$_0::__invoke(swift_asyncLet_consume_throwing::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_consume_throwing(this);
  swift_asyncLet_consume_throwing::Override = result;
  return result;
}

uint64_t _asyncLet_consume_throwing_continuation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3)
  {
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v5 = 0;
    return asyncLet_finish_after_task_completion(v3[2], v5, a3);
  }
  uint64_t v4 = (uint64_t (*)(void))v3[1];
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v5 = v4;
  return asyncLet_finish_after_task_completion(v3[2], v5, a3);
}

void *swift_asyncLet_finish::$_0::__invoke(swift_asyncLet_finish::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_asyncLet_finish(this);
  swift_asyncLet_finish::Override = result;
  return result;
}

uint64_t _asyncLet_finish_continuation()
{
  uint64_t v2 = v0;
  uint64_t v3 = v1[2];
  if (v2)
  {
    MEMORY[0x192FAC3C0]();
    if (*v1) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v5 = (uint64_t (*)(void))v1[1];
    if (v5) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  unint64_t v7 = *(void *)(v3 + 24) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v8 = *(unsigned int *)(v7 + 0x20);
  uint64_t v9 = 208;
  if ((v8 & 0x1000000) == 0) {
    uint64_t v9 = 192;
  }
  if (*(void *)(*(void *)(((v7 + v9) | (v8 >> 23) & 8) + 8) - 8)) {
    uint64_t v10 = *(void *)(*(void *)(((v7 + v9) | (v8 >> 23) & 8) + 8) - 8);
  }
  else {
    uint64_t v10 = 0;
  }
  (*(void (**)(void))(v10 + 8))(v1[3]);
  if (!*v1) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v5 = (uint64_t (*)(void))v1[1];
  if (v5)
  {
LABEL_4:
    uint64_t v6 = v5;
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v6 = 0;
LABEL_13:
  return asyncLet_finish_after_task_completion(v3, v6, v4);
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::asyncLet_addImpl(swift::AsyncTask *,swift::AsyncLet *,BOOL)::$_0>(uint64_t **a1, __int16 a2, int a3)
{
  return 1;
}

uint64_t swift_get_time(__darwin_time_t *a1, uint64_t *a2, const char *a3, char *a4)
{
  if (a3 == 2)
  {
    clockid_t v6 = _CLOCK_UPTIME_RAW;
  }
  else
  {
    if (a3 != 1) {
      swift::swift_Concurrency_fatalError(0, "Fatal error: invalid clock ID %d\n", a3, a4, a3);
    }
    clockid_t v6 = _CLOCK_MONOTONIC_RAW;
  }
  uint64_t result = clock_gettime(v6, &__tp);
  uint64_t tv_nsec = __tp.tv_nsec;
  *a1 = __tp.tv_sec;
  *a2 = tv_nsec;
  return result;
}

uint64_t swift_get_clock_res(__darwin_time_t *a1, uint64_t *a2, const char *a3, char *a4)
{
  if (a3 == 2)
  {
    clockid_t v6 = _CLOCK_UPTIME_RAW;
  }
  else
  {
    if (a3 != 1) {
      swift::swift_Concurrency_fatalError(0, "Fatal error: invalid clock ID %d\n", a3, a4, a3);
    }
    clockid_t v6 = _CLOCK_MONOTONIC_RAW;
  }
  uint64_t result = clock_getres(v6, &__res);
  uint64_t tv_nsec = __res.tv_nsec;
  *a1 = __res.tv_sec;
  *a2 = tv_nsec;
  return result;
}

uint64_t swift_task_enqueueOnDispatchQueue(void *a1, dispatch_queue_s *a2)
{
  qos_class_t v2 = *((unsigned __int8 *)a1 + 33);
  a1[3] = a2;
  return dispatchEnqueueFunc(a2, a1, v2);
}

uint64_t swift_task_enqueueGlobal(uint64_t a1)
{
  if (*MEMORY[0x1E4FBC890]) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBC890])(a1);
  }
  swift::concurrency::trace::job_enqueue_global((unsigned char *)a1);
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t (*)(void *, uint64_t, const char *, char *)))swift_task_enqueueGlobal_hook;
  if (swift_task_enqueueGlobal_hook)
  {
    return v3(a1, swift_task_enqueueGlobalImpl);
  }
  else
  {
    intptr_t v5 = *(unsigned __int8 *)(a1 + 33);
    if (v5 >= 0x22) {
      swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", 0, v2, *(unsigned __int8 *)(a1 + 33));
    }
    if (!globalQueueCache[v5])
    {
      if (!concurrencyEnableCooperativeQueues()
        || (dispatch_queue_global_t global_queue = dispatch_get_global_queue(v5, 4uLL)) == 0)
      {
        dispatch_queue_global_t global_queue = dispatch_get_global_queue(v5, 0);
      }
      globalQueueCache[v5] = global_queue;
    }
    *(void *)(a1 + 24) = 1;
    clockid_t v6 = (uint64_t (*)(void))dispatchEnqueueFunc;
    return v6();
  }
}

void swift::concurrency::trace::job_enqueue_global(unsigned char *a1)
{
  if (a1 && !a1[32] && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a1);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v3 = v2;
        uint64_t v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          int v5 = 134217984;
          unint64_t TaskId = swift::AsyncTask::getTaskId((swift::AsyncTask *)a1);
          _os_signpost_emit_with_name_impl(&dword_18E465000, v4, OS_SIGNPOST_EVENT, v3, "job_enqueue_global", "task=%llx", (uint8_t *)&v5, 0xCu);
        }
      }
    }
  }
}

uint64_t swift_task_enqueueGlobalImpl(void *a1, uint64_t a2, const char *a3, char *a4)
{
  intptr_t v4 = *((unsigned __int8 *)a1 + 33);
  if (v4 >= 0x22) {
    swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", a3, a4, *((unsigned __int8 *)a1 + 33));
  }
  if (!globalQueueCache[v4])
  {
    if (!concurrencyEnableCooperativeQueues()
      || (dispatch_queue_global_t global_queue = dispatch_get_global_queue(v4, 4uLL)) == 0)
    {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(v4, 0);
    }
    globalQueueCache[v4] = global_queue;
  }
  a1[3] = 1;
  clockid_t v6 = (uint64_t (*)(void))dispatchEnqueueFunc;

  return v6();
}

void swift_task_enqueueGlobalWithDelay(uint64_t a1, unsigned char *a2)
{
  swift::concurrency::trace::job_enqueue_global_with_delay(a1, a2);
  int v5 = (void (*)(uint64_t, unsigned char *, void (*)(int64_t, uint64_t, const char *, char *)))swift_task_enqueueGlobalWithDelay_hook;
  if (swift_task_enqueueGlobalWithDelay_hook)
  {
    v5(a1, a2, swift_task_enqueueGlobalWithDelayImpl);
  }
  else
  {
    swift_task_enqueueGlobalWithDelayImpl(a1, (uint64_t)a2, v4, 0);
  }
}

void swift::concurrency::trace::job_enqueue_global_with_delay(uint64_t a1, unsigned char *a2)
{
  if (a2 && !a2[32] && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v4 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a2);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        clockid_t v6 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          int v7 = 134218240;
          unint64_t TaskId = swift::AsyncTask::getTaskId((swift::AsyncTask *)a2);
          __int16 v9 = 2048;
          uint64_t v10 = a1;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v6, OS_SIGNPOST_EVENT, v5, "job_enqueue_global_with_delay", "task=%llx delay=%llu", (uint8_t *)&v7, 0x16u);
        }
      }
    }
  }
}

void swift_task_enqueueGlobalWithDelayImpl(int64_t delta, uint64_t a2, const char *a3, char *a4)
{
  intptr_t v4 = *(unsigned __int8 *)(a2 + 33);
  if (v4 >= 0x22) {
    swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", a3, a4, *(unsigned __int8 *)(a2 + 33));
  }
  dispatch_queue_global_t global_queue = globalQueueCache[v4];
  if (!global_queue)
  {
    if (!concurrencyEnableCooperativeQueues()
      || (dispatch_queue_global_t global_queue = dispatch_get_global_queue(v4, 4uLL)) == 0)
    {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(v4, 0);
    }
    globalQueueCache[v4] = global_queue;
  }
  *(void *)(a2 + 24) = 1;
  dispatch_time_t v8 = dispatch_time(0, delta);

  dispatch_after_f(v8, global_queue, (void *)a2, (dispatch_function_t)__swift_run_job);
}

void swift_task_enqueueGlobalWithDeadline(uint64_t a1, uint64_t a2, const char *a3, char *a4, uint64_t a5, void *a6)
{
  if (swift_task_enqueueGlobalWithDeadline_hook) {
    swift_task_enqueueGlobalWithDeadline_hook(a1, a2, a3, a4, a5, a6, swift_task_enqueueGlobalWithDeadlineImpl);
  }
  else {
    swift_task_enqueueGlobalWithDeadlineImpl(a1, a2, a3, a4, a5, a6);
  }
}

void swift_task_enqueueGlobalWithDeadlineImpl(uint64_t a1, uint64_t a2, const char *a3, char *a4, int a5, void *context)
{
  intptr_t v6 = *((unsigned __int8 *)context + 33);
  if (v6 >= 0x22) {
    swift::swift_Concurrency_fatalError(0, "invalid job priority %#zx", a3, a4, *((unsigned __int8 *)context + 33));
  }
  dispatch_queue_global_t global_queue = globalQueueCache[v6];
  if (!global_queue)
  {
    if (!concurrencyEnableCooperativeQueues()
      || (dispatch_queue_global_t global_queue = dispatch_get_global_queue(v6, 4uLL)) == 0)
    {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(v6, 0);
    }
    globalQueueCache[v6] = global_queue;
  }
  context[3] = 1;
  unint64_t v14 = a2 + 1000000000 * a1;
  if (!v14)
  {
LABEL_12:
    if (a5 == 2) {
      dispatch_time_t v15 = v14;
    }
    else {
      dispatch_time_t v15 = v14 | 0x8000000000000000;
    }
    if (a4 == (char *)-1) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  if (v14 <= 0x7FFFFFFFFFFFFFFELL)
  {
    if (v14 < 0x5555555555555555) {
      unint64_t v14 = 3 * v14 / 0x7D;
    }
    else {
      unint64_t v14 = 3 * (v14 / 0x7D);
    }
    goto LABEL_12;
  }
  dispatch_time_t v15 = -1;
  if (a4 == (char *)-1)
  {
LABEL_6:
    dispatch_after_f(v15, global_queue, context, (dispatch_function_t)__swift_run_job);
    return;
  }
LABEL_16:
  uint64_t v16 = (uint64_t)&a4[1000000000 * (void)a3];
  __int16 v17 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, global_queue);
  dispatch_source_set_timer(v17, v15, 0xFFFFFFFFFFFFFFFFLL, v16);
  int v18 = (void *)swift::_swift_task_alloc_specific((swift *)context, (swift::AsyncTask *)0x10);
  *int v18 = v17;
  v18[1] = context;
  dispatch_set_context(v17, v18);
  dispatch_source_set_event_handler_f(v17, (dispatch_function_t)_swift_run_job_leeway);

  dispatch_activate(v17);
}

void swift_task_checkIsolated(uint64_t a1, uint64_t a2, const char *a3)
{
  os_signpost_id_t v5 = (void (*)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t, const char *, char *)))swift_task_checkIsolated_hook;
  if (swift_task_checkIsolated_hook)
  {
    v5(a1, a2, swift_task_checkIsolatedImpl);
  }
  else if (a1 == MEMORY[0x1E4F14428])
  {
    int v7 = MEMORY[0x1E4F14428];
    dispatch_assert_queue_V2(v7);
  }
  else
  {
    if (!a1 || !a2) {
      swift::swift_Concurrency_fatalError(0, "Incorrect actor executor assumption", a3, 0);
    }
    uint64_t ObjectType = swift_getObjectType();
    _task_serialExecutor_checkIsolated(a1, ObjectType, a2 & 0xFFFFFFFFFFFFFFF8);
  }
}

void swift_task_checkIsolatedImpl(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (a1 == MEMORY[0x1E4F14428])
  {
    int v7 = MEMORY[0x1E4F14428];
    dispatch_assert_queue_V2(v7);
  }
  else
  {
    if (!a1 || !a2) {
      swift::swift_Concurrency_fatalError(0, "Incorrect actor executor assumption", a3, a4);
    }
    uint64_t ObjectType = swift_getObjectType();
    _task_serialExecutor_checkIsolated(a1, ObjectType, a2 & 0xFFFFFFFFFFFFFFF8);
  }
}

uint64_t swift_task_isOnExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_signpost_id_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))swift_task_isOnExecutor_hook;
  if (swift_task_isOnExecutor_hook)
  {
    return v3(a1, a2, a3, swift_task_isOnExecutorImpl);
  }
  else
  {
    uint64_t ExecutorRef = _task_serialExecutor_getExecutorRef(a1, a2, a3);
    return swift_task_isCurrentExecutor(ExecutorRef, v6);
  }
}

uint64_t swift_task_isOnExecutorImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ExecutorRef = _task_serialExecutor_getExecutorRef(a1, a2, a3);

  return swift_task_isCurrentExecutor(ExecutorRef, v4);
}

BOOL swift_executor_isComplexEquality(uint64_t a1, char a2)
{
  return (a2 & 7) == 1;
}

unint64_t swift_task_getJobTaskId(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 32)) {
    return *(unsigned int *)(a1 + 36);
  }
  else {
    return swift::AsyncTask::getTaskId((swift::AsyncTask *)a1);
  }
}

uint64_t swift_task_enqueueMainExecutor(uint64_t a1)
{
  swift::concurrency::trace::job_enqueue_main_executor((unsigned char *)a1);
  os_signpost_id_t v2 = (uint64_t (*)(uint64_t, uint64_t (*)(void *)))swift_task_enqueueMainExecutor_hook;
  if (swift_task_enqueueMainExecutor_hook)
  {
    return v2(a1, swift_task_enqueueMainExecutorImpl);
  }
  else
  {
    *(void *)(a1 + 24) = MEMORY[0x1E4F14428];
    uint64_t v4 = (uint64_t (*)(void))dispatchEnqueueFunc;
    return v4();
  }
}

void swift::concurrency::trace::job_enqueue_main_executor(unsigned char *a1)
{
  if (a1 && !a1[32] && _os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a1);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v3 = v2;
        uint64_t v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          int v5 = 134217984;
          unint64_t TaskId = swift::AsyncTask::getTaskId((swift::AsyncTask *)a1);
          _os_signpost_emit_with_name_impl(&dword_18E465000, v4, OS_SIGNPOST_EVENT, v3, "job_enqueue_main_executor", "task=%llx", (uint8_t *)&v5, 0xCu);
        }
      }
    }
  }
}

uint64_t swift_task_enqueueMainExecutorImpl(void *a1)
{
  qos_class_t v2 = *((unsigned __int8 *)a1 + 33);
  os_signpost_id_t v3 = (dispatch_queue_s *)MEMORY[0x1E4F14428];
  a1[3] = MEMORY[0x1E4F14428];
  return dispatchEnqueueFunc(v3, a1, v2);
}

uint64_t swift_task_getMainExecutor()
{
  return MEMORY[0x1E4F14428];
}

BOOL swift::SerialExecutorRef::isMainExecutor(swift::SerialExecutorRef *this)
{
  return *(void *)this == MEMORY[0x1E4F14428];
}

uint64_t initializeDispatchEnqueueFunc(dispatch_queue_s *a1, void *a2, uint64_t a3)
{
  if (concurrencyEnableJobDispatchIntegration()) {
    uint64_t v6 = (void (*)(NSObject *, void *, qos_class_t))MEMORY[0x1E4F14778];
  }
  else {
    uint64_t v6 = dispatchEnqueueDispatchAsync;
  }
  dispatchEnqueueFunc = (uint64_t (*)(dispatch_queue_s *, void *, qos_class_t))v6;

  return ((uint64_t (*)(dispatch_queue_s *, void *, uint64_t))v6)(a1, a2, a3);
}

void dispatchEnqueueDispatchAsync(NSObject *a1, void *a2, qos_class_t a3)
{
}

uint64_t __swift_run_job(uint64_t *a1)
{
  if (*a1) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = 0;
  }
  return (*(uint64_t (**)(void))(v1 + 48))();
}

uint64_t _swift_run_job_leeway(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)a1);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (*((unsigned char *)v4 + 32)) {
    int v5 = 0;
  }
  else {
    int v5 = *(swift **)(a1 + 8);
  }
  swift::_swift_task_dealloc_specific(v5, (swift::AsyncTask *)a1, v2, v3);
  if (*v4) {
    uint64_t v6 = *v4;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t *, void, void))(v6 + 48);

  return v7(v4, 0, 0);
}

void swift::swift_Concurrency_fatalErrorv(swift *this, const char *a2, va_list a3, char *a4)
{
}

void swift::swift_Concurrency_fatalError(swift *this, const char *a2, const char *a3, char *a4, ...)
{
  va_start(va, a4);
  swift::swift_Concurrency_fatalErrorv(this, a2, va, a4);
}

uint64_t setupStandardConcurrencyDescriptors(void)
{
  return MEMORY[0x1F4186358](&setupStandardConcurrencyDescriptors(void)::descriptors);
}

unint64_t swift::AsyncTask::waitFuture(swift::AsyncTask *a1, swift::AsyncTask *this, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = *((unsigned int *)a1 + 8);
  uint64_t v9 = 208;
  if ((v8 & 0x1000000) == 0) {
    uint64_t v9 = 192;
  }
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (v8 >> 23) & 8;
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)((char *)a1 + v9 + v11), memory_order_acquire);
  unint64_t v13 = explicit & 3;
  if (v13 - 1 < 2)
  {
    int v14 = 0;
    goto LABEL_27;
  }
  int v18 = a3 + 1;
  if ((explicit & 3) == 0)
  {
    uint64_t v19 = a5;
    if (*MEMORY[0x1E4FBC890]) {
      ((void (*)(swift::AsyncTask *))*MEMORY[0x1E4FBC890])(this);
    }
    swift::concurrency::trace::task_wait(this, a1, 0);
    a5 = v19;
  }
  a3[2] = 0;
  a3[3] = a6;
  if (a4) {
    uint64_t v20 = a4;
  }
  else {
    uint64_t v20 = 0;
  }
  *int v18 = v20;
  if (a5) {
    uint64_t v21 = a5;
  }
  else {
    uint64_t v21 = 0;
  }
  *a3 = v21;
  uint64_t v22 = swift::_swift_task_alloc_specific(this, (swift::AsyncTask *)0x30);
  _X2 = 0;
  _X3 = 0;
  *(void *)uint64_t v22 = 0;
  *(void *)(v22 + 8) = 0;
  *(_DWORD *)(v22 + 32) = 1;
  *(void *)(v22 + 40) = this;
  *(void *)(v22 + 16) = a1;
  *((void *)this + 20) = v22;
  uint64_t v38 = v22;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  v37[0] = _X2;
  v37[1] = 0;
  int v36 = &v38;
  swift::addStatusRecord(this, v22, v37, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v36);
  if ((v37[0] & 0x400) != 0) {
    dispatch_lock_override_end();
  }
  swift_task_exitThreadLocalContext();
  char v31 = (swift *)swift::restoreTaskVoucher(this, v30);
  *((void *)this + 2) = explicit & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v32 = explicit;
  atomic_compare_exchange_strong((atomic_ullong *volatile)&v10[v11], &v32, (unint64_t)this);
  if (v32 == explicit)
  {
LABEL_18:
    swift::_swift_task_clearCurrent(v31);
    return 0;
  }
  char v33 = (void (**)(swift::AsyncTask *))MEMORY[0x1E4FBC890];
  while (1)
  {
    unint64_t v13 = v32 & 3;
    if ((v32 & 3) == 0)
    {
      if (*v33) {
        (*v33)(this);
      }
      swift::concurrency::trace::task_wait(this, a1, 0);
      goto LABEL_21;
    }
    if (v13 - 1 <= 1) {
      break;
    }
LABEL_21:
    *((void *)this + 2) = v32 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v34 = v32;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&v10[v11], &v34, (unint64_t)this);
    _ZF = v34 == v32;
    unint64_t v32 = v34;
    if (_ZF) {
      goto LABEL_18;
    }
  }
  int v14 = 1;
LABEL_27:
  if (*MEMORY[0x1E4FBC888]) {
    ((void (*)(swift::AsyncTask *))*MEMORY[0x1E4FBC888])(a1);
  }
  if (v14) {
    swift::AsyncTask::flagAsRunning(this);
  }
  return v13;
}

void swift::concurrency::trace::task_wait(swift::concurrency::trace *this, swift::AsyncTask *a2, swift::AsyncTask *a3)
{
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v6 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      os_signpost_id_t v7 = v6;
      if (a2) {
        unint64_t v8 = (unint64_t)*((unsigned int *)a2 + 9) << *((_DWORD *)a2 + 36);
      }
      else {
        unint64_t v8 = 0;
      }
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v9 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          unint64_t v10 = (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
          int v11 = 134218496;
          unint64_t v12 = v10;
          __int16 v13 = 2048;
          unint64_t v14 = v8;
          __int16 v15 = 2048;
          uint64_t v16 = a3;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "task_wait", "task=%llx waitingOnTask=%llx status=0x%lx", (uint8_t *)&v11, 0x20u);
        }
      }
    }
  }
}

void swift::NullaryContinuationJob::process(uint64_t a1)
{
  qos_class_t v2 = *(swift::AsyncTask **)(a1 + 72);
  os_signpost_id_t v3 = *(void **)(a1 + 40);
  if ((unint64_t)v3 + 1 >= 2) {
    os_release(v3);
  }
  MEMORY[0x192FABE70](a1, 0x10E0C4036F2D63ELL);
  *(void *)(*((void *)v2 + 8) + 32) = 0;
  swift_once();
  uint64_t v4 = (void (*)(swift::AsyncTask *, void (*)(swift::AsyncTask *)))swift_continuation_resume::Override;
  if (swift_continuation_resume::Override)
  {
    v4(v2, swift_continuation_resumeImpl);
  }
  else
  {
    swift_continuation_resumeImpl(v2);
  }
}

void swift_continuation_resume(swift::AsyncTask *a1)
{
  swift_once();
  qos_class_t v2 = (void (*)(swift::AsyncTask *, void (*)(swift::AsyncTask *)))swift_continuation_resume::Override;
  if (swift_continuation_resume::Override)
  {
    v2(a1, swift_continuation_resumeImpl);
  }
  else
  {
    swift_continuation_resumeImpl(a1);
  }
}

void swift::AsyncTask::completeFuture(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(unsigned int *)(a1 + 32);
  uint64_t v4 = 208;
  if ((v3 & 0x1000000) == 0) {
    uint64_t v4 = 192;
  }
  int v5 = (atomic_ullong *)(a1 + v4 + ((v3 >> 23) & 8));
  atomic_ullong v6 = *(void *)(a2 - 8);
  v5[2] = v6;
  if (v6) {
    unint64_t v7 = 2;
  }
  else {
    unint64_t v7 = 1;
  }
  if (*MEMORY[0x1E4FBC890]) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBC890])(a1);
  }
  unint64_t v8 = atomic_exchange(v5, v7);
  int v9 = *(_DWORD *)(a1 + 32);
  if ((v9 & 0x4000000) != 0)
  {
    BOOL v10 = (v9 & 0x1000000) == 0;
    uint64_t v11 = 208;
    if (v10) {
      uint64_t v11 = 192;
    }
    swift::TaskGroup::offer(*(void *)(a1 + v11));
  }
  unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    __int16 v13 = (void (**)(unsigned int *))MEMORY[0x1E4FBC888];
    do
    {
      unint64_t v14 = (unsigned int *)v12;
      uint64_t v15 = *(void *)(v12 + 64);
      unint64_t v12 = *(void *)(v12 + 16);
      if (v15)
      {
        uint64_t v16 = v15;
        if (!v6) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v16 = 0;
        if (!v6)
        {
LABEL_23:
          (*(void (**)(void, unint64_t))(*(void *)(v5[1] - 8) + 16))(*(void *)(v16 + 24), ((unint64_t)v5 + *(unsigned __int8 *)(*(void *)(v5[1] - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5[1] - 8) + 80));
          __int16 v17 = *v13;
          if (!*v13) {
            goto LABEL_19;
          }
LABEL_18:
          v17(v14);
          goto LABEL_19;
        }
      }
      *(void *)(v16 + 16) = v5[2];
      MEMORY[0x192FAC3D0]();
      __int16 v17 = *v13;
      if (*v13) {
        goto LABEL_18;
      }
LABEL_19:
      os_signpost_id_t v18 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, v14);
      if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v19 = v18;
        uint64_t v20 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          unint64_t v21 = (unint64_t)v14[9] << v14[36];
          *(_DWORD *)buf = 134217984;
          unint64_t v23 = v21;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v20, OS_SIGNPOST_INTERVAL_END, v19, "task_wait", "task=%llx", buf, 0xCu);
        }
      }
      swift::AsyncTask::flagAsAndEnqueueOnExecutor((uint64_t)v14, 0, 0);
    }
    while (v12);
  }
}

void swift::AsyncTask::~AsyncTask(swift::AsyncTask *this, uint64_t a2, const char *a3, char *a4)
{
  unint64_t v5 = *((unsigned int *)this + 8);
  if ((v5 & 0x2000000) != 0)
  {
    uint64_t v6 = 208;
    if ((v5 & 0x1000000) == 0) {
      uint64_t v6 = 192;
    }
    unint64_t v7 = (atomic_ullong *)((char *)this + v6 + ((v5 >> 23) & 8));
    unint64_t v8 = atomic_load_explicit(v7, memory_order_acquire) & 3;
    switch(v8)
    {
      case 1uLL:
        (*(void (**)(unint64_t))(*(void *)(v7[1] - 8) + 8))(((unint64_t)v7
                                                                                 + *(unsigned __int8 *)(*(void *)(v7[1] - 8) + 80)
                                                                                 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7[1] - 8) + 80));
        break;
      case 2uLL:
        MEMORY[0x192FAC3C0](v7[2]);
        break;
      case 0uLL:
        abort();
    }
  }
  swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::~StackAllocator((uint64_t)this + 112, a2, a3, a4);
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v9 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v10 = v9;
        uint64_t v11 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          unint64_t v12 = (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
          int v14 = 134217984;
          unint64_t v15 = v12;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v11, OS_SIGNPOST_INTERVAL_END, v10, "task_lifetime", "task=%llx", (uint8_t *)&v14, 0xCu);
        }
      }
    }
  }
  __int16 v13 = (void *)*((void *)this + 5);
  if ((unint64_t)v13 + 1 >= 2) {
    os_release(v13);
  }
}

unint64_t swift::AsyncTask::getTaskId(swift::AsyncTask *this)
{
  return (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
}

void jobInvoke(swift::AsyncTask *a1, void *a2)
{
  unint64_t v2 = *((void *)a1 + 3);
  if (v2 >= 2) {
    unint64_t v3 = &protocol witness table for DispatchQueueShim;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v2 >= 2) {
    uint64_t v4 = (_anonymous_namespace_::DefaultActorImpl *)*((void *)a1 + 3);
  }
  else {
    uint64_t v4 = 0;
  }
  swift_job_run(a1, v4, (uint64_t)v3);
}

void destroyTask(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  swift::AsyncTask::~AsyncTask(v4, a2, a3, a4);

  free(v5);
}

uint64_t non_future_adapter()
{
  return (*(uint64_t (**)(void))(v0 - 24))();
}

uint64_t future_adapter()
{
  return (*(uint64_t (**)(void))(v0 - 24))(*(void *)(v0 - 32));
}

uint64_t task_wait_throwing_resume_adapter()
{
  if (*(void *)(v0 + 8)) {
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  return v1();
}

uint64_t task_future_wait_resume_adapter()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t swift::AsyncTask::getResumeFunctionForLogging(swift::AsyncTask *this, int a2)
{
  unint64_t v2 = (uint64_t (*)())*((void *)this + 7);
  if (!v2) {
    return 0;
  }
  if (v2 == non_future_adapter || v2 == future_adapter)
  {
    if (*(void *)(*((void *)this + 8) - 24))
    {
      uint64_t v3 = *(void *)(*((void *)this + 8) - 24);
      if (!a2) {
        return v3;
      }
    }
    else
    {
      uint64_t v3 = 0;
      if (!a2) {
        return v3;
      }
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 7);
    if (!a2) {
      return v3;
    }
  }
  if (v2 == task_wait_throwing_resume_adapter || v2 == task_future_wait_resume_adapter)
  {
    uint64_t v4 = *((void *)this + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        return v5;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[8];
      if (MEMORY[8]) {
        return v5;
      }
    }
    return 0;
  }
  return v3;
}

uint64_t swift_task_currentPriority()
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  return _X2;
}

uint64_t swift_task_basePriority(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t swift_concurrency_jobPriority(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 33);
}

uint64_t swift_task_create(unint64_t a1, unsigned __int8 *a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t)a4 + *a4;
  uint64_t v10 = a4[1];
  swift_once();
  uint64_t v11 = (uint64_t (*)(unint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(unint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t)))swift_task_create_common::Override;
  if (swift_task_create_common::Override)
  {
    return v11(a1, a2, a3, v9, a5, v10, swift_task_create_commonImpl);
  }
  else
  {
    return swift_task_create_commonImpl(a1, a2, a3, v9, a5, v10);
  }
}

uint64_t swift_task_create_common(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_once();
  unint64_t v12 = (uint64_t (*)(unint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(unint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t)))swift_task_create_common::Override;
  if (swift_task_create_common::Override)
  {
    return v12(a1, a2, a3, a4, a5, a6, swift_task_create_commonImpl);
  }
  else
  {
    return swift_task_create_commonImpl(a1, a2, a3, a4, a5, a6);
  }
}

unint64_t swift_task_future_wait_throwingImpl(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t Current = (swift::AsyncTask *)swift_task_getCurrent();
  *((void *)Current + 7) = task_wait_throwing_resume_adapter;
  if (a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = 0;
  }
  *((void *)Current + 8) = v9;
  unint64_t result = swift::AsyncTask::waitFuture((swift::AsyncTask *)a2, Current, a4, (uint64_t)a3, v4, a1);
  if (result == 2)
  {
    unint64_t v14 = a2[8];
    uint64_t v15 = 52;
    if ((v14 & 0x1000000) == 0) {
      uint64_t v15 = 48;
    }
    MEMORY[0x192FAC3D0](*(void *)((char *)&a2[v15 + 4] + ((v14 >> 23) & 8)));
  }
  else
  {
    if (result != 1) {
      return result;
    }
    unint64_t v11 = a2[8];
    uint64_t v12 = 52;
    if ((v11 & 0x1000000) == 0) {
      uint64_t v12 = 48;
    }
    uint64_t v13 = (uint64_t)&a2[v12] + ((v11 >> 23) & 8);
    (*(void (**)(uint64_t, unint64_t))(*(void *)(*(void *)(v13 + 8) - 8) + 16))(a1, (*(unsigned __int8 *)(*(void *)(*(void *)(v13 + 8) - 8) + 80) + v13 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v13 + 8) - 8) + 80));
  }
  return a3();
}

uint64_t swift_task_getJobFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t swift_task_isCancelled()
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  return (_X2 >> 8) & 1;
}

uint64_t swift_continuation_logFailedCheck(uint64_t a1)
{
  return MEMORY[0x1F4186768](0, a1);
}

uint64_t swift_task_create_commonImpl(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = a1;
  int v8 = (a1 << 16) & 0x1000000;
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v89 = 0;
    uint64_t v10 = 0;
    a2 = 0;
    Taskuint64_t ExecutorRef = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v90 = 0;
    unint64_t v14 = 0;
    do
    {
      switch(*v9)
      {
        case 0u:
          uint64_t v10 = (unsigned __int8 *)*((void *)v9 + 2);
          uint64_t v89 = *((void *)v9 + 3);
          break;
        case 1u:
          uint64_t v12 = (atomic_ullong *)*((void *)v9 + 2);
          v8 |= 0x4000000u;
          break;
        case 2u:
          uint64_t v13 = (swift::AsyncLet *)*((void *)v9 + 2);
          v8 |= 0x11000000u;
          break;
        case 3u:
          uint64_t v13 = (swift::AsyncLet *)*((void *)v9 + 2);
          v8 |= 0x11000000u;
          char v90 = 1;
          break;
        case 4u:
          abort();
        case 5u:
          Taskuint64_t ExecutorRef = *((void *)v9 + 2);
          a2 = (unsigned __int8 *)*((void *)v9 + 3);
          v8 |= 0x20000000u;
          break;
        case 6u:
          uint64_t v15 = *((void *)v9 + 2);
          uint64_t ObjectType = swift_getObjectType();
          Taskuint64_t ExecutorRef = _task_taskExecutor_getTaskExecutorRef(v15, ObjectType, *((void *)v9 + 3));
          v8 |= 0x20000000u;
          break;
        default:
          if (*v9 == 255) {
            unint64_t v14 = v9;
          }
          break;
      }
      uint64_t v9 = (unsigned __int8 *)*((void *)v9 + 1);
    }
    while (v9);
  }
  else
  {
    unint64_t v14 = 0;
    char v90 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    Taskuint64_t ExecutorRef = 0;
    uint64_t v10 = 0;
    uint64_t v89 = 0;
  }
  uint64_t v81 = (uint64_t)a2;
  uint64_t v82 = TaskExecutorRef;
  if (a3) {
    int v17 = v8 | 0x2000000;
  }
  else {
    int v17 = v8;
  }
  uint64_t Current = swift_task_getCurrent();
  uint64_t v19 = Current;
  if ((v17 & 0x1000000) != 0) {
    uint64_t v20 = (swift *)Current;
  }
  else {
    uint64_t v20 = 0;
  }
  if ((v7 & 0x2000) != 0 && v12) {
    swift_taskGroup_addPending(v12, 1);
  }
  if ((v7 & 0x200) != 0)
  {
    uint64_t CurrentThreadPriority = swift_task_getCurrentThreadPriority();
  }
  else
  {
    uint64_t CurrentThreadPriority = v7;
    int v22 = v17 & 0x14000000;
    if ((v7 & 0x400) != 0 || v22)
    {
      if (v22)
      {
        if (!(_BYTE)v7)
        {
          if (*((void *)v20 + 19) == 33) {
            uint64_t CurrentThreadPriority = 25;
          }
          else {
            uint64_t CurrentThreadPriority = *((void *)v20 + 19);
          }
        }
      }
      else if (!(_BYTE)v7)
      {
        uint64_t CurrentThreadPriority = v19 ? *(void *)(v19 + 152) : swift_task_getCurrentThreadPriority();
        if (CurrentThreadPriority == 33) {
          uint64_t CurrentThreadPriority = 25;
        }
      }
    }
  }
  if (CurrentThreadPriority) {
    uint64_t v23 = CurrentThreadPriority;
  }
  else {
    uint64_t v23 = 21;
  }
  uint64_t v24 = 208;
  if (!v20) {
    uint64_t v24 = 192;
  }
  if (v12) {
    uint64_t v25 = v24 | 8;
  }
  else {
    uint64_t v25 = v24;
  }
  uint64_t v80 = v10;
  if (a3) {
    unint64_t v26 = *(void *)(*(void *)(a3 - 8) + 64)
  }
        + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + v25 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80))
        + 32;
  else {
    unint64_t v26 = v25 + 24;
  }
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v28 = v27 + a6;
  uint64_t v84 = v23;
  size_t sizea = v27 + a6;
  if (v13)
  {
    if (((swift::AsyncLet::getSizeOfPreallocatedSpace((swift::AsyncLet *)CurrentThreadPriority) >= v28) & v90) != 0)
    {
      int v29 = v28;
      uint64_t PreallocatedSpace = swift::AsyncLet::getPreallocatedSpace(v13);
      unsigned int v31 = swift::AsyncLet::getSizeOfPreallocatedSpace((swift::AsyncLet *)PreallocatedSpace) - v29;
      char v90 = 1;
      goto LABEL_52;
    }
    uint64_t PreallocatedSpace = swift::_swift_task_alloc_specific(v20, (swift::AsyncTask *)(v28 + 512));
    char v90 = 0;
  }
  else
  {
    if (v14)
    {
      uint64_t PreallocatedSpace = *((void *)v14 + 2);
      if (PreallocatedSpace)
      {
        unsigned int v31 = *((_DWORD *)v14 + 6) - sizea;
        goto LABEL_52;
      }
    }
    uint64_t PreallocatedSpace = (uint64_t)malloc_type_malloc(sizea, 0xF2CDECDCuLL);
  }
  unsigned int v31 = 512;
LABEL_52:
  unint64_t v32 = (void *)(PreallocatedSpace + v27);
  if (a3) {
    int v33 = (v7 >> 14) & 1;
  }
  else {
    int v33 = 1;
  }
  *(v32 - 3) = a4;
  *(v32 - 2) = a5;
  char v83 = v20;
  if ((v17 & 0x20000000) == 0)
  {
    if (v20)
    {
      unint64_t v34 = v20;
      uint64_t v35 = v12;
      uint64_t v36 = a3;
      int v37 = v17;
      __int16 v38 = v7;
      LODWORD(v7) = v31;
      uint64_t PreferredTaskExecutor = swift::AsyncTask::getPreferredTaskExecutor(v34);
      unsigned int v31 = v7;
      LOWORD(v7) = v38;
      int v17 = v37;
      a3 = v36;
      uint64_t v12 = v35;
      if (PreferredTaskExecutor)
      {
        v17 |= 0x20000000u;
        uint64_t v81 = v40;
        uint64_t v82 = PreferredTaskExecutor;
      }
    }
  }
  BOOL v41 = (v17 & 0x14000000) != 0 || (v7 & 0x600) != 0;
  *(void *)uint64_t PreallocatedSpace = &qword_1EB309FD0;
  unsigned int v42 = (void *)(PreallocatedSpace + 36);
  int v43 = non_future_adapter;
  if (!v33) {
    int v43 = future_adapter;
  }
  if (v13)
  {
    *(void *)(PreallocatedSpace + 8) = 0x80000004FFFFFFFFLL;
    *(_DWORD *)(PreallocatedSpace + 32) = v17;
    *unsigned int v42 = 0;
    *(void *)(PreallocatedSpace + 44) = 0;
    *(_DWORD *)(PreallocatedSpace + 52) = 0;
    *(void *)(PreallocatedSpace + 56) = v43;
    if (v41)
    {
      uint64_t v44 = v12;
      uint64_t v45 = a3;
      int v46 = v17;
      __int16 v47 = v7;
      LODWORD(v7) = v31;
      uint64_t v48 = voucher_copy();
      unsigned int v31 = v7;
      LOWORD(v7) = v47;
      int v17 = v46;
      a3 = v45;
      uint64_t v12 = v44;
      *(void *)(PreallocatedSpace + 40) = v48;
    }
    *(void *)(PreallocatedSpace + 64) = v32;
    int v49 = v83;
    do
      add_unint64_t explicit = atomic_fetch_add_explicit(&swift::AsyncTask::setTaskId(void)::NextId, 1uLL, memory_order_relaxed);
    while (!add_explicit);
  }
  else
  {
    *(void *)(PreallocatedSpace + 8) = 3;
    *(_DWORD *)(PreallocatedSpace + 32) = v17;
    *unsigned int v42 = 0;
    *(void *)(PreallocatedSpace + 44) = 0;
    *(_DWORD *)(PreallocatedSpace + 52) = 0;
    *(void *)(PreallocatedSpace + 56) = v43;
    if (v41)
    {
      unsigned int v51 = v12;
      uint64_t v52 = a3;
      int v53 = v17;
      __int16 v54 = v7;
      LODWORD(v7) = v31;
      uint64_t v55 = voucher_copy();
      unsigned int v31 = v7;
      LOWORD(v7) = v54;
      int v17 = v53;
      a3 = v52;
      uint64_t v12 = v51;
      *(void *)(PreallocatedSpace + 40) = v55;
    }
    *(void *)(PreallocatedSpace + 64) = v32;
    int v49 = v83;
    do
      add_unint64_t explicit = atomic_fetch_add_explicit(&swift::AsyncTask::setTaskId(void)::NextId, 1uLL, memory_order_relaxed);
    while (!add_explicit);
  }
  *(_DWORD *)(PreallocatedSpace + 36) = add_explicit;
  *(_DWORD *)(PreallocatedSpace + 144) = HIDWORD(add_explicit);
  if (v49)
  {
    *(void *)(PreallocatedSpace + 192) = v49;
    *(void *)(PreallocatedSpace + 200) = 0;
  }
  if (v12)
  {
    uint64_t v56 = 208;
    if ((*(_DWORD *)(PreallocatedSpace + 32) & 0x1000000) == 0) {
      uint64_t v56 = 192;
    }
    *(void *)(PreallocatedSpace + v56) = v12;
  }
  if (a3)
  {
    unint64_t v57 = *(unsigned int *)(PreallocatedSpace + 32);
    uint64_t v58 = 208;
    if ((v57 & 0x1000000) == 0) {
      uint64_t v58 = 192;
    }
    uint64_t v59 = (void *)(PreallocatedSpace + v58 + ((v57 >> 23) & 8));
    *uint64_t v59 = 0;
    v59[1] = a3;
    v59[2] = 0;
    *(v32 - 4) = ((unint64_t)v59 + *(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80);
  }
  uint64_t v60 = (void (*)(swift *))completeTaskWithClosure;
  if (!a5) {
    uint64_t v60 = (void (*)(swift *))completeTaskAndRelease;
  }
  if (v13) {
    uint64_t v60 = completeTask;
  }
  __int16 v61 = completeInlineTask;
  if (!v14) {
    __int16 v61 = v60;
  }
  v32[1] = v61;
  if ((v13 || v14 && *((void *)v14 + 2)) && v31)
  {
    *(void *)(PreallocatedSpace + 112) = 0;
    *(void *)(PreallocatedSpace + 120) = 0;
    *(_DWORD *)(PreallocatedSpace + 128) = 0;
    *(void *)(PreallocatedSpace + 80) = 0;
    *(void *)(PreallocatedSpace + 88) = 0;
    if (v31 >= 0x21)
    {
      unint64_t v62 = (PreallocatedSpace + sizea + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)unint64_t v62 = &swift::TaskAllocatorSlabMetadata;
      *(void *)(v62 + 8) = 0;
      *(_DWORD *)(v62 + 16) = PreallocatedSpace + sizea + v31 - v62 - 32;
      *(_DWORD *)(v62 + 20) = 0;
      *(void *)(PreallocatedSpace + 120) = v62;
      *(_DWORD *)(PreallocatedSpace + 128) = 1;
    }
    *(void *)(PreallocatedSpace + 136) = 0;
  }
  else
  {
    *(void *)(PreallocatedSpace + 112) = 0;
    *(void *)(PreallocatedSpace + 120) = 0;
    *(_DWORD *)(PreallocatedSpace + 128) = 0;
    *(void *)(PreallocatedSpace + 136) = 0;
    *(void *)(PreallocatedSpace + 80) = 0;
    *(void *)(PreallocatedSpace + 88) = 0;
  }
  *(void *)(PreallocatedSpace + 152) = v84;
  *(void *)(PreallocatedSpace + 160) = 0;
  _X0 = v84;
  uint64_t v64 = *(void *)(PreallocatedSpace + 96);
  do
  {
    _X5 = *(void *)(PreallocatedSpace + 104);
    __asm { CASP            X4, X5, X0, X1, [X8] }
    _ZF = _X4 == v64;
    uint64_t v64 = _X4;
  }
  while (!_ZF);
  if (v49)
  {
    if (v12 && (swift::TaskGroup::isCancelled((swift::TaskGroup *)v12) & 1) != 0) {
      goto LABEL_105;
    }
    _X0 = 0;
    _X1 = 0;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    if ((_X0 & 0x100) != 0) {
LABEL_105:
    }
      swift_task_cancel((swift::AsyncTask *)PreallocatedSpace);
    if (v12
      && (uint64_t v91 = *((void *)v49 + 17),
          uint64_t v74 = swift::TaskLocal::Storage::peekHeadLinkType((swift::TaskLocal::Storage *)&v91),
          v75)
      && v74 == 2)
    {
      swift::TaskLocal::Storage::copyToOnlyOnlyFromCurrentGroup((swift::TaskLocal::Storage *)&v91, (swift::AsyncTask *)PreallocatedSpace);
    }
    else
    {
      swift::TaskLocal::Storage::initializeLinkParent((swift::TaskLocal::Storage *)(PreallocatedSpace + 136), (swift::AsyncTask *)PreallocatedSpace, v49);
    }
  }
  unsigned int v76 = *(_DWORD *)(PreallocatedSpace + 32);
  *unint64_t v32 = 0;
  swift::concurrency::trace::task_create((uint64_t (**)())PreallocatedSpace, (unint64_t)v49, (swift::AsyncTask *)v12, v13, (swift::AsyncLet *)BYTE1(v76), HIBYTE(v76) & 1, (v76 >> 25) & 1, (v76 >> 26) & 1, (v76 & 0x10000000) != 0, v78);
  if (v12) {
    swift_taskGroup_attachChild((uint64_t)v12, PreallocatedSpace);
  }
  if ((v7 & 0x400) != 0) {
    swift_task_localsCopyTo((swift::AsyncTask *)PreallocatedSpace);
  }
  if (v13) {
    swift::asyncLet_addImpl(PreallocatedSpace, v13, (swift::AsyncLet *)((v90 & 1) == 0));
  }
  if ((v17 & 0x20000000) != 0) {
    swift::AsyncTask::pushInitialTaskExecutorPreference((swift *)PreallocatedSpace, v82, v81, v79 & 1);
  }
  if ((v7 & 0x1000) != 0)
  {
    swift_retain();
    swift::AsyncTask::flagAsAndEnqueueOnExecutor(PreallocatedSpace, v80, v89);
  }
  return PreallocatedSpace;
}

unint64_t swift_task_future_wait(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), void *a4)
{
  swift_once();
  int v8 = swift_task_future_wait::Override;
  if (swift_task_future_wait::Override)
  {
    return ((uint64_t (*)(uint64_t, unsigned int *, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, unsigned int *, uint64_t (*)(void), void *)))v8)(a1, a2, a3, a4, swift_task_future_waitImpl);
  }
  else
  {
    return swift_task_future_waitImpl(a1, a2, a3, a4);
  }
}

unint64_t swift_task_future_waitImpl(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), void *a4)
{
  uint64_t Current = (swift::AsyncTask *)swift_task_getCurrent();
  *((void *)Current + 7) = task_future_wait_resume_adapter;
  if (a4) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = 0;
  }
  *((void *)Current + 8) = v9;
  unint64_t result = swift::AsyncTask::waitFuture((swift::AsyncTask *)a2, Current, a4, (uint64_t)a3, v4, a1);
  if (result == 1)
  {
    unint64_t v13 = a2[8];
    uint64_t v14 = 52;
    if ((v13 & 0x1000000) == 0) {
      uint64_t v14 = 48;
    }
    uint64_t v15 = (uint64_t)&a2[v14] + ((v13 >> 23) & 8);
    (*(void (**)(uint64_t, unint64_t))(*(void *)(*(void *)(v15 + 8) - 8) + 16))(a1, (*(unsigned __int8 *)(*(void *)(*(void *)(v15 + 8) - 8) + 80) + v15 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v15 + 8) - 8) + 80));
    return a3();
  }
  else if (result == 2)
  {
    swift::swift_Concurrency_fatalError(0, "future reported an error, but wait cannot throw", v11, v12);
  }
  return result;
}

unint64_t swift_task_future_wait_throwing(uint64_t a1, unsigned int *a2, uint64_t (*a3)(void), void *a4)
{
  swift_once();
  int v8 = swift_task_future_wait_throwing::Override;
  if (swift_task_future_wait_throwing::Override)
  {
    return ((uint64_t (*)(uint64_t, unsigned int *, uint64_t (*)(void), void *, unint64_t (*)(uint64_t, unsigned int *, uint64_t (*)(void), void *)))v8)(a1, a2, a3, a4, swift_task_future_wait_throwingImpl);
  }
  else
  {
    return swift_task_future_wait_throwingImpl(a1, a2, a3, a4);
  }
}

void swift_continuation_resumeImpl(swift::AsyncTask *a1)
{
  if (*((void *)a1 + 8))
  {
    unint64_t v2 = (const void *)*((void *)a1 + 8);
    if (!_os_trace_lazy_init_completed_4swift()) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v2 = 0;
    if (!_os_trace_lazy_init_completed_4swift()) {
      goto LABEL_11;
    }
  }
  if (swift::concurrency::trace::LogsToken != -1) {
    dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
  }
  if (swift::concurrency::trace::TracingEnabled)
  {
    os_signpost_id_t v3 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, v2);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v4 = v3;
      uint64_t v5 = swift::concurrency::trace::TaskLog;
      if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
      {
        int v6 = 134218240;
        unint64_t v7 = v2;
        __int16 v8 = 1024;
        int v9 = 0;
        _os_signpost_emit_with_name_impl(&dword_18E465000, v5, OS_SIGNPOST_INTERVAL_END, v4, "task_continuation", "context=%p error=%{BOOL}d", (uint8_t *)&v6, 0x12u);
      }
    }
  }
LABEL_11:
  resumeTaskAfterContinuation((uint64_t)a1, (uint64_t)v2);
}

void swift_continuation_throwingResume(swift::AsyncTask *a1)
{
  swift_once();
  unint64_t v2 = (void (*)(swift::AsyncTask *, void (*)(swift::AsyncTask *)))swift_continuation_throwingResume::Override;
  if (swift_continuation_throwingResume::Override)
  {
    v2(a1, swift_continuation_throwingResumeImpl);
  }
  else
  {
    swift_continuation_throwingResumeImpl(a1);
  }
}

void swift_continuation_throwingResumeImpl(swift::AsyncTask *a1)
{
  if (*((void *)a1 + 8))
  {
    unint64_t v2 = (const void *)*((void *)a1 + 8);
    if (!_os_trace_lazy_init_completed_4swift()) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v2 = 0;
    if (!_os_trace_lazy_init_completed_4swift()) {
      goto LABEL_11;
    }
  }
  if (swift::concurrency::trace::LogsToken != -1) {
    dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
  }
  if (swift::concurrency::trace::TracingEnabled)
  {
    os_signpost_id_t v3 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, v2);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v4 = v3;
      uint64_t v5 = swift::concurrency::trace::TaskLog;
      if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
      {
        int v6 = 134218240;
        unint64_t v7 = v2;
        __int16 v8 = 1024;
        int v9 = 0;
        _os_signpost_emit_with_name_impl(&dword_18E465000, v5, OS_SIGNPOST_INTERVAL_END, v4, "task_continuation", "context=%p error=%{BOOL}d", (uint8_t *)&v6, 0x12u);
      }
    }
  }
LABEL_11:
  resumeTaskAfterContinuation((uint64_t)a1, (uint64_t)v2);
}

void swift_continuation_throwingResumeWithError(uint64_t a1, uint64_t a2)
{
  swift_once();
  os_signpost_id_t v4 = (void (*)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t)))swift_continuation_throwingResumeWithError::Override;
  if (swift_continuation_throwingResumeWithError::Override)
  {
    v4(a1, a2, swift_continuation_throwingResumeWithErrorImpl);
  }
  else
  {
    swift_continuation_throwingResumeWithErrorImpl(a1, a2);
  }
}

void swift_continuation_throwingResumeWithErrorImpl(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 64))
  {
    os_signpost_id_t v4 = *(void **)(a1 + 64);
    if (!_os_trace_lazy_init_completed_4swift()) {
      goto LABEL_11;
    }
  }
  else
  {
    os_signpost_id_t v4 = 0;
    if (!_os_trace_lazy_init_completed_4swift()) {
      goto LABEL_11;
    }
  }
  if (swift::concurrency::trace::LogsToken != -1) {
    dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
  }
  if (swift::concurrency::trace::TracingEnabled)
  {
    os_signpost_id_t v5 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, v4);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v6 = v5;
      unint64_t v7 = swift::concurrency::trace::TaskLog;
      if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
      {
        int v8 = 134218240;
        int v9 = v4;
        __int16 v10 = 1024;
        int v11 = 1;
        _os_signpost_emit_with_name_impl(&dword_18E465000, v7, OS_SIGNPOST_INTERVAL_END, v6, "task_continuation", "context=%p error=%{BOOL}d", (uint8_t *)&v8, 0x12u);
      }
    }
  }
LABEL_11:
  v4[4] = a2;
  resumeTaskAfterContinuation(a1, (uint64_t)v4);
}

uint64_t swift_task_addCancellationHandler(uint64_t a1, uint64_t a2)
{
  swift_once();
  os_signpost_id_t v4 = (uint64_t (*)(uint64_t, uint64_t, void *(*)(uint64_t, uint64_t)))swift_task_addCancellationHandler::Override;
  if (swift_task_addCancellationHandler::Override)
  {
    return v4(a1, a2, swift_task_addCancellationHandlerImpl);
  }
  else
  {
    os_signpost_id_t v6 = (void *)swift_task_alloc(32);
    unint64_t v7 = v6;
    uint64_t v8 = a1;
    *os_signpost_id_t v6 = 3;
    v6[1] = 0;
    if (a1) {
      uint64_t v8 = a1;
    }
    __darwin_time_t v6[2] = v8;
    void v6[3] = a2;
    char v11 = 0;
    __int16 v10 = &v11;
    uint64_t v9 = swift::addStatusRecordToSelf((uint64_t)v6, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_addCancellationHandlerImpl(void({swiftcall}*)(void * {swift_context}),void *)::$_0>, (uint64_t)&v10);
    if (v11) {
      ((void (*)(uint64_t))v7[2])(v9);
    }
    return (uint64_t)v7;
  }
}

void *swift_task_addCancellationHandlerImpl(uint64_t a1, uint64_t a2)
{
  os_signpost_id_t v4 = (void *)swift_task_alloc(32);
  os_signpost_id_t v5 = v4;
  uint64_t v6 = a1;
  *os_signpost_id_t v4 = 3;
  v4[1] = 0;
  if (a1) {
    uint64_t v6 = a1;
  }
  void v4[2] = v6;
  v4[3] = a2;
  char v10 = 0;
  uint64_t v9 = &v10;
  uint64_t v7 = swift::addStatusRecordToSelf((uint64_t)v4, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_addCancellationHandlerImpl(void({swiftcall}*)(void * {swift_context}),void *)::$_0>, (uint64_t)&v9);
  if (v10) {
    ((void (*)(uint64_t))v5[2])(v7);
  }
  return v5;
}

void swift_task_removeCancellationHandler(uint64_t a1)
{
  swift_once();
  unint64_t v2 = (void (*)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))swift_task_removeCancellationHandler::Override;
  if (swift_task_removeCancellationHandler::Override)
  {
    v2(a1, swift_task_removeCancellationHandlerImpl);
  }
  else
  {
    swift::removeStatusRecordFromSelf(a1, 0, 0);
    swift_task_dealloc(a1);
  }
}

void swift_task_removeCancellationHandlerImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift::removeStatusRecordFromSelf(a1, 0, a3);

  swift_task_dealloc(a1);
}

uint64_t swift_task_createNullaryContinuationJob(uint64_t a1, uint64_t a2)
{
  swift_once();
  os_signpost_id_t v4 = (uint64_t (*)(uint64_t, uint64_t, void (*)(unint64_t, swift::AsyncTask *)))swift_task_createNullaryContinuationJob::Override;
  if (!swift_task_createNullaryContinuationJob::Override) {
    operator new();
  }

  return v4(a1, a2, swift_task_createNullaryContinuationJobImpl);
}

void swift_task_createNullaryContinuationJobImpl(unint64_t a1, swift::AsyncTask *a2)
{
}

void swift_task_asyncMainDrainQueue()
{
  if (!swift_task_asyncMainDrainQueue_hook)
  {
    if (swift_task_asyncMainDrainQueue::Override) {
      swift_task_asyncMainDrainQueue::Override(swift_task_asyncMainDrainQueueImpl);
    }
    swift_task_asyncMainDrainQueueImpl();
  }
  swift_task_asyncMainDrainQueue_hook(swift_task_asyncMainDrainQueueImpl, swift_task_asyncMainDrainQueue::Override);
  abort();
}

void swift_task_asyncMainDrainQueueImpl(void)
{
  uint64_t v0 = (void (*)(void))dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRunLoopRun");
  if (!v0) {
    dispatch_main();
  }
  v0();
  exit(0);
}

swift *swift_task_suspend()
{
  swift_once();
  uint64_t v0 = (uint64_t (*)(swift *(*)(void)))swift_task_suspend::Override;
  if (swift_task_suspend::Override)
  {
    return (swift *)v0(swift_task_suspendImpl);
  }
  else
  {
    return swift_task_suspendImpl();
  }
}

swift *swift_task_suspendImpl(void)
{
  uint64_t Current = (swift *)swift_task_getCurrent();
  uint64_t v1 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x30);
  _X2 = 0;
  _X3 = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 32) = 2;
  *(void *)(v1 + 40) = Current;
  *((void *)Current + 20) = v1;
  uint64_t v14 = v1;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  v13[0] = _X2;
  v13[1] = 0;
  uint64_t v12 = &v14;
  swift::addStatusRecord(Current, v1, v13, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v12);
  if ((v13[0] & 0x400) != 0) {
    dispatch_lock_override_end();
  }
  swift_task_exitThreadLocalContext();
  char v10 = (swift *)swift::restoreTaskVoucher(Current, v9);
  swift::_swift_task_clearCurrent(v10);
  return Current;
}

void swift_task_enqueueTaskOnExecutor(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  swift_once();
  uint64_t v6 = (void (*)(uint64_t, unsigned __int8 *, uint64_t, void *))swift_task_enqueueTaskOnExecutor::Override;
  if (swift_task_enqueueTaskOnExecutor::Override)
  {
    v6(a1, a2, a3, &swift_task_enqueueTaskOnExecutorImpl);
  }
  else
  {
    swift::AsyncTask::flagAsAndEnqueueOnExecutor(a1, a2, a3);
  }
}

swift *swift_continuation_init(void *a1, unint64_t a2)
{
  swift_once();
  os_signpost_id_t v4 = swift_continuation_init::Override;
  if (swift_continuation_init::Override)
  {
    return (swift *)((uint64_t (*)(void *, unint64_t, swift *(*)(void *, unint64_t)))v4)(a1, a2, swift_continuation_initImpl);
  }
  else
  {
    return swift_continuation_initImpl(a1, a2);
  }
}

swift *swift_continuation_initImpl(void *a1, unint64_t a2)
{
  *(void *)buf = a1;
  char v4 = continuationChecking::CurrentState;
  if (!continuationChecking::CurrentState)
  {
    if (concurrencyValidateUncheckedContinuations()) {
      char v4 = 1;
    }
    else {
      char v4 = 2;
    }
    continuationChecking::CurrentState = v4;
  }
  if (v4 == 1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
    if (qword_1E91D4108 != -1) {
      dispatch_once_f(&qword_1E91D4108, continuationChecking::ActiveContinuations, (dispatch_function_t)swift::Lazy<std::unordered_set<swift::ContinuationAsyncContext *>>::defaultInitCallback);
    }
    std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__emplace_unique_key_args<swift::ContinuationAsyncContext *,swift::ContinuationAsyncContext * const&>((uint64_t)continuationChecking::ActiveContinuations, buf, buf);
    if (!v7) {
      swift::swift_Concurrency_fatalError(0, "Initializing continuation context %p that was already initialized.\n", v5, v6, *(void *)buf);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
  }
  a1[2] = a2 & 1 | (2 * ((a2 >> 3) & 1));
  a1[4] = 0;
  if ((a2 & 2) == 0)
  {
    a1[6] = 0;
    a1[7] = 0;
  }
  a1[3] = (a2 >> 2) & 1;
  uint64_t Current = (swift *)swift_task_getCurrent();
  uint64_t v9 = Current;
  if ((a2 & 4) != 0)
  {
    uint64_t v10 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x30);
    _X2 = 0;
    _X3 = 0;
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 32) = 2;
    *(void *)(v10 + 40) = v9;
    *(void *)(v10 + 16) = a1;
    *((void *)v9 + 20) = v10;
    __asm { CASP            X2, X3, X2, X3, [X8] }
    *(void *)&buf[8] = 0;
    uint64_t v26 = v10;
    *(void *)buf = _X2;
    uint64_t v25 = &v26;
    swift::addStatusRecord(v9, v10, buf, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v25);
    if ((*(_WORD *)buf & 0x400) != 0) {
      dispatch_lock_override_end();
    }
    swift_task_exitThreadLocalContext();
    uint64_t v19 = (swift *)swift::restoreTaskVoucher(v9, v18);
    swift::_swift_task_clearCurrent(v19);
  }
  *((void *)v9 + 8) = a1;
  *((void *)v9 + 7) = a1[1];
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v20 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, a1);
      if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v21 = v20;
        int v22 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          unint64_t v23 = (unint64_t)*((unsigned int *)v9 + 9) << *((_DWORD *)v9 + 36);
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = a1;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v22, OS_SIGNPOST_INTERVAL_BEGIN, v21, "task_continuation", "task=%llx context=%p", buf, 0x16u);
        }
      }
    }
  }
  return v9;
}

uint64_t swift_continuation_await(uint64_t a1)
{
  swift_once();
  unint64_t v2 = (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t)))swift_continuation_await::Override;
  if (swift_continuation_await::Override)
  {
    return v2(a1, swift_continuation_awaitImpl);
  }
  else
  {
    return swift_continuation_awaitImpl(a1);
  }
}

uint64_t swift_continuation_awaitImpl(uint64_t a1)
{
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v2 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, (const void *)a1);
      if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v3 = v2;
        char v4 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = a1;
          _os_signpost_emit_with_name_impl(&dword_18E465000, v4, OS_SIGNPOST_EVENT, v3, "task_continuation_await", "context=%p", (uint8_t *)&buf, 0xCu);
        }
      }
    }
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 24), memory_order_acquire);
  if (explicit == 2)
  {
    uint64_t v6 = *(uint64_t (**)(void))(a1 + 8);
    if ((*(unsigned char *)(a1 + 16) & 2) != 0)
    {
      if (v6)
      {
LABEL_11:
        char v7 = v6;
LABEL_22:
        uint64_t v21 = *(void *)(a1 + 48);
        uint64_t v22 = *(void *)(a1 + 56);
        return swift_task_switch(v7, v21, v22);
      }
LABEL_21:
      char v7 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t Current = (swift *)swift_task_getCurrent();
    uint64_t v9 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x30);
    _X2 = 0;
    _X3 = 0;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 32) = 2;
    *(void *)(v9 + 40) = Current;
    *(void *)(v9 + 16) = a1;
    *((void *)Current + 20) = v9;
    uint64_t v25 = v9;
    __asm { CASP            X2, X3, X2, X3, [X8] }
    long long buf = _X2;
    unint64_t v23 = &v25;
    swift::addStatusRecord(Current, v9, &buf, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v23);
    if ((buf & 0x400) != 0) {
      dispatch_lock_override_end();
    }
    swift_task_exitThreadLocalContext();
    os_signpost_id_t v18 = (swift *)swift::restoreTaskVoucher(Current, v17);
    unint64_t v19 = explicit;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 24), &v19, 1uLL);
    if (v19 == explicit) {
      return swift::_swift_task_clearCurrent(v18);
    }
    swift::AsyncTask::flagAsRunning(Current);
    uint64_t v6 = *(uint64_t (**)(void))(a1 + 8);
    if ((*(unsigned char *)(a1 + 16) & 2) != 0)
    {
      if (v6) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }

  return v6();
}

uint64_t swift_task_startOnMainActor(swift::AsyncTask *a1)
{
  swift_once();
  os_signpost_id_t v2 = (uint64_t (*)(swift::AsyncTask *, uint64_t (*)(swift::AsyncTask *)))swift_task_startOnMainActor::Override;
  if (swift_task_startOnMainActor::Override)
  {
    return v2(a1, swift_task_startOnMainActorImpl);
  }
  else
  {
    return swift_task_startOnMainActorImpl(a1);
  }
}

uint64_t swift_task_startOnMainActorImpl(swift::AsyncTask *a1)
{
  uint64_t v2 = swift::_swift_task_clearCurrent(a1);
  uint64_t MainExecutor = (_anonymous_namespace_::DefaultActorImpl *)swift_task_getMainExecutor();
  uint64_t v5 = v4;
  if ((swift_task_isCurrentExecutor((uint64_t)MainExecutor, v4) & 1) == 0) {
    swift::swift_Concurrency_fatalError(0, "Not on the main executor", v6, v7);
  }
  swift_retain();
  swift_job_run(a1, MainExecutor, v5);

  return swift::_swift_task_setCurrent(v2);
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>(uint64_t **a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4 = *a4;
  *(void *)a4 = *a4 & 0xFFFFBBFF | 0x4000 | ((unint64_t)(a4[1] & 3) << 32);
  swift::TaskDependencyStatusRecord::performEscalationAction(**a1, v4);
  return 1;
}

uint64_t swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::~StackAllocator(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  if (*(void *)a1) {
    swift::swift_Concurrency_fatalError(0, "not all allocations are deallocated", a3, a4);
  }
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    memset_s(*(void **)(a1 + 8), 8uLL, 0, 8uLL);
    int v5 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v6 = (void *)(a1 + 8);
  if (v5) {
    uint64_t v6 = (void *)(*v6 + 8);
  }
  char v7 = (void *)*v6;
  *uint64_t v6 = 0;
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)v7[1];
      memset_s(v7, 8uLL, 0, 8uLL);
      free(v7);
      *(_DWORD *)(a1 + 16) -= 2;
      char v7 = v8;
    }
    while (v8);
  }
  return a1;
}

void *swift_task_create_common::$_0::__invoke(swift_task_create_common::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_task_create_common(this);
  swift_task_create_common::Override = result;
  return result;
}

void completeInlineTask(swift *a1)
{
  uint64_t v2 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(a1);
  completeTaskImpl(v2, v1, 0);
}

void completeTask(swift *a1)
{
  uint64_t v3 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(a1);
  completeTaskImpl(v3, v2, v1);
}

uint64_t completeTaskWithClosure()
{
  uint64_t v2 = (swift *)swift_release();
  uint64_t v3 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(v2);
  completeTaskImpl(v3, v1, v0);
  return swift_release();
}

uint64_t completeTaskAndRelease(swift *a1)
{
  uint64_t v3 = (swift::AsyncTask **)swift::_swift_task_clearCurrent(a1);
  completeTaskImpl(v3, v2, v1);
  return swift_release();
}

void swift::concurrency::trace::task_create(uint64_t (**this)(), unint64_t a2, swift::AsyncTask *a3, swift::TaskGroup *a4, swift::AsyncLet *a5, int a6, int a7, int a8, BOOL a9, BOOL a10)
{
  int v13 = (int)a5;
  if (_os_trace_lazy_init_completed_4swift())
  {
    if (swift::concurrency::trace::LogsToken != -1) {
      dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
    }
    if (swift::concurrency::trace::TracingEnabled)
    {
      os_signpost_id_t v18 = os_signpost_id_make_with_pointer((os_log_t)swift::concurrency::trace::TaskLog, this);
      os_signpost_id_t v19 = v18;
      if (a2) {
        a2 = (unint64_t)*(unsigned int *)(a2 + 36) << *(_DWORD *)(a2 + 144);
      }
      if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v20 = swift::concurrency::trace::TaskLog;
        if (os_signpost_enabled((os_log_t)swift::concurrency::trace::TaskLog))
        {
          uint64_t v21 = this[7];
          unint64_t v22 = (unint64_t)*((unsigned int *)this + 9) << *((_DWORD *)this + 36);
          if (!v21)
          {
LABEL_27:
            unint64_t v23 = 0;
            goto LABEL_28;
          }
          if (v21 == non_future_adapter || v21 == future_adapter)
          {
            if (*((void *)this[8] - 3)) {
              unint64_t v23 = (uint64_t (*)())*((void *)this[8] - 3);
            }
            else {
              unint64_t v23 = 0;
            }
          }
          else
          {
            unint64_t v23 = this[7];
          }
          if (v21 == task_wait_throwing_resume_adapter)
          {
            if (this[8]) {
              uint64_t v25 = this[8];
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = (uint64_t (*)())*((void *)v25 + 1);
            if (!v26) {
              goto LABEL_27;
            }
          }
          else
          {
            if (v21 != task_future_wait_resume_adapter)
            {
LABEL_28:
              int v27 = 134220288;
              unint64_t v28 = v22;
              __int16 v29 = 2048;
              long long v30 = v23;
              __int16 v31 = 1024;
              int v32 = v13;
              __int16 v33 = 1024;
              int v34 = a6;
              __int16 v35 = 1024;
              int v36 = a7;
              __int16 v37 = 1024;
              int v38 = a8;
              __int16 v39 = 1024;
              BOOL v40 = a9;
              __int16 v41 = 2048;
              unint64_t v42 = a2;
              __int16 v43 = 2048;
              uint64_t v44 = a3;
              __int16 v45 = 2048;
              int v46 = a4;
              _os_signpost_emit_with_name_impl(&dword_18E465000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v19, "task_lifetime", "task=%llx resumefn=%p jobPriority=%u isChildTask=%{BOOL}d, isFuture=%{BOOL}d isGroupChildTask=%{BOOL}d isAsyncLetTask=%{BOOL}d parent=%llx group=%p asyncLet=%p", (uint8_t *)&v27, 0x52u);
              return;
            }
            if (this[8]) {
              uint64_t v24 = this[8];
            }
            else {
              uint64_t v24 = 0;
            }
            uint64_t v26 = (uint64_t (*)())*((void *)v24 + 1);
            if (!v26) {
              goto LABEL_27;
            }
          }
          unint64_t v23 = v26;
          goto LABEL_28;
        }
      }
    }
  }
}

void completeTaskImpl(swift::AsyncTask **this, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 - 8) = a3;
  if ((*((unsigned char *)this + 35) & 0x20) != 0) {
    swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord((swift::AsyncTask *)this);
  }
  _X0 = 0;
  _X1 = 0;
  __asm { CASP            X0, X1, X0, X1, [X9] }
  _X4 = _X0 & 0x300000000 | _X0 & 0xFFFFCBFF | 0x2000;
  _X3 = 0;
  __asm { CASP            X2, X3, X4, X5, [X9] }
  if (_X2 != (const char *)_X0)
  {
    do
    {
      _X0 = (unint64_t)_X2 & 0x300000000 | _X2 & 0xFFFFCBFF | 0x2000;
      _X5 = 0;
      __asm { CASP            X4, X5, X0, X1, [X9] }
      _ZF = _X4 == _X2;
      LOWORD(_X0) = (_WORD)_X2;
      _X2 = _X4;
    }
    while (!_ZF);
  }
  if ((_X0 & 0x400) != 0) {
    dispatch_lock_override_end();
  }
  swift::TaskLocal::Storage::destroy(this + 17, (swift::AsyncTask *)this, _X2, _X3);
  if ((*((unsigned char *)this + 35) & 2) != 0)
  {
    swift::AsyncTask::completeFuture((uint64_t)this, a2);
  }
}

void *swift_task_future_wait::$_0::__invoke(swift_task_future_wait::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_task_future_wait(this);
  swift_task_future_wait::Override = result;
  return result;
}

void *swift_task_future_wait_throwing::$_0::__invoke(swift_task_future_wait_throwing::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_task_future_wait_throwing(this);
  swift_task_future_wait_throwing::Override = result;
  return result;
}

void *swift_continuation_resume::$_0::__invoke(swift_continuation_resume::$_0 *this, void *a2)
{
  unint64_t result = (void *)swift::getOverride_continuation_resume(this);
  swift_continuation_resume::Override = result;
  return result;
}

void resumeTaskAfterContinuation(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  char v4 = continuationChecking::CurrentState;
  if (!continuationChecking::CurrentState)
  {
    if (concurrencyValidateUncheckedContinuations()) {
      char v4 = 1;
    }
    else {
      char v4 = 2;
    }
    continuationChecking::CurrentState = v4;
  }
  if (v4 == 1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
    if (qword_1E91D4108 != -1) {
      dispatch_once_f(&qword_1E91D4108, continuationChecking::ActiveContinuations, (dispatch_function_t)swift::Lazy<std::unordered_set<swift::ContinuationAsyncContext *>>::defaultInitCallback);
    }
    if (!std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__erase_unique<swift::ContinuationAsyncContext *>(continuationChecking::ActiveContinuations, &v9))swift::swift_Concurrency_fatalError(0, "Resuming continuation context %p that was not awaited (may have already been resumed).\n", v5, v6, v9); {
    os_unfair_lock_unlock((os_unfair_lock_t)&continuationChecking::ActiveContinuationsLock);
    }
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a2 + 24), memory_order_acquire);
  if (*MEMORY[0x1E4FBC890]) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBC890])(a1);
  }
  if (explicit
    || (uint64_t v8 = 0, atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 24), (unint64_t *)&v8, 2uLL), v8))
  {
    swift::AsyncTask::flagAsAndEnqueueOnExecutor(a1, *(unsigned __int8 **)(a2 + 48), *(void *)(a2 + 56));
  }
}

double swift::Lazy<std::unordered_set<swift::ContinuationAsyncContext *>>::defaultInitCallback(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

uint64_t std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__erase_unique<swift::ContinuationAsyncContext *>(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = HIDWORD(*a2);
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v2) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  uint64_t v9 = *(void ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *v9;
  if (!*v9) {
    return 0;
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == v6) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v2) {
        v11 %= *(void *)&v2;
      }
    }
    else
    {
      v11 &= *(void *)&v2 - 1;
    }
    if (v11 != v8) {
      return 0;
    }
LABEL_10:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      return 0;
    }
  }
  if (v10[2] != v3) {
    goto LABEL_10;
  }
  std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::remove(a1, v10, (uint64_t)&__p);
  int v13 = __p;
  __p = 0;
  if (v13) {
    operator delete(v13);
  }
  return 1;
}

void *std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint8x8_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *swift_continuation_throwingResume::$_0::__invoke(swift_continuation_throwingResume::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_continuation_throwingResume(this);
  swift_continuation_throwingResume::Override = result;
  return result;
}

void *swift_continuation_throwingResumeWithError::$_0::__invoke(swift_continuation_throwingResumeWithError::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_continuation_throwingResumeWithError(this);
  swift_continuation_throwingResumeWithError::Override = result;
  return result;
}

void *swift_task_addCancellationHandler::$_0::__invoke(swift_task_addCancellationHandler::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_task_addCancellationHandler(this);
  swift_task_addCancellationHandler::Override = result;
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_addCancellationHandlerImpl(void({swiftcall}*)(void * {swift_context}),void *)::$_0>(unsigned char **a1, __int16 a2)
{
  if ((a2 & 0x100) != 0) {
    **a1 = 1;
  }
  return 1;
}

void *swift_task_removeCancellationHandler::$_0::__invoke(swift_task_removeCancellationHandler::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_task_removeCancellationHandler(this);
  swift_task_removeCancellationHandler::Override = result;
  return result;
}

void *swift_task_createNullaryContinuationJob::$_0::__invoke(swift_task_createNullaryContinuationJob::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_task_createNullaryContinuationJob(this);
  swift_task_createNullaryContinuationJob::Override = result;
  return result;
}

void *swift_task_asyncMainDrainQueue::$_0::__invoke(swift_task_asyncMainDrainQueue::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_task_asyncMainDrainQueue(this);
  swift_task_asyncMainDrainQueue::Override = result;
  return result;
}

void *swift_task_suspend::$_0::__invoke(swift_task_suspend::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_task_suspend(this);
  swift_task_suspend::Override = result;
  return result;
}

void *swift_task_enqueueTaskOnExecutor::$_0::__invoke(swift_task_enqueueTaskOnExecutor::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_task_enqueueTaskOnExecutor(this);
  swift_task_enqueueTaskOnExecutor::Override = result;
  return result;
}

void *swift_continuation_init::$_0::__invoke(swift_continuation_init::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_continuation_init(this);
  swift_continuation_init::Override = result;
  return result;
}

void *std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__emplace_unique_key_args<swift::ContinuationAsyncContext *,swift::ContinuationAsyncContext * const&>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_41;
    }
    if (prime < v9)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v9) {
LABEL_41:
      }
        std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *i = *v24;
LABEL_55:
    *uint64_t v24 = i;
    goto LABEL_56;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return i;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

void std::__hash_table<swift::ContinuationAsyncContext *,std::hash<swift::ContinuationAsyncContext *>,std::equal_to<swift::ContinuationAsyncContext *>,std::allocator<swift::ContinuationAsyncContext *>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    uint8x8_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    unint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *unint64_t v7 = *v11;
            uint64_t v12 = 8 * v13;
            *unint64_t v11 = **(void **)(*(void *)a1 + v12);
            **(void **)(*(void *)a1 + v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v13 = v8;
LABEL_19:
          unint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *swift_continuation_await::$_0::__invoke(swift_continuation_await::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_continuation_await(this);
  swift_continuation_await::Override = result;
  return result;
}

void *swift_task_startOnMainActor::$_0::__invoke(swift_task_startOnMainActor::$_0 *this, void *a2)
{
  double result = (void *)swift::getOverride_task_startOnMainActor(this);
  swift_task_startOnMainActor::Override = result;
  return result;
}

void _GLOBAL__sub_I_Task_cpp()
{
  if (destroyJob) {
    uint64_t v0 = destroyJob;
  }
  else {
    uint64_t v0 = 0;
  }
  swift::jobHeapMetadata = 0;
  if (v0) {
    uint64_t v1 = (uint64_t)v0;
  }
  else {
    uint64_t v1 = 0;
  }
  qword_1EB3088A0 = v1;
  *(void *)algn_1EB3088A8 = 0;
  qword_1EB3088B0 = 1283;
  unk_1EB3088B8 = v6;
  unk_1EB3088C8 = v7;
  qword_1EB3088D8 = 1;
  if (jobInvoke) {
    int8x8_t v2 = jobInvoke;
  }
  else {
    int8x8_t v2 = 0;
  }
  qword_1EB3088E0 = (uint64_t)v2;
  if (destroyTask) {
    unint64_t v3 = destroyTask;
  }
  else {
    unint64_t v3 = 0;
  }
  taskHeapMetadata = 0;
  if (v3) {
    uint64_t v4 = (uint64_t)v3;
  }
  else {
    uint64_t v4 = 0;
  }
  qword_1EB309FC0 = v4;
  *(void *)algn_1EB309FC8 = 0;
  qword_1EB309FD0 = 1282;
  unk_1EB309FD8 = v6;
  unk_1EB309FE8 = v7;
  qword_1EB309FF8 = 1;
  if (jobInvoke) {
    uint8x8_t v5 = jobInvoke;
  }
  else {
    uint8x8_t v5 = 0;
  }
  qword_1EB30A000 = (uint64_t)v5;
}

uint64_t swift_task_alloc(uint64_t a1)
{
  uint64_t Current = swift_task_getCurrent();
  if (Current)
  {
    unint64_t v3 = (uint64_t *)(Current + 112);
  }
  {
    unint64_t v3 = &allocator(swift::AsyncTask *)::global;
  }
  else
  {
    unint64_t v3 = &allocator(swift::AsyncTask *)::global;
    {
      uint8x8_t v9 = (void *)(((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0);
      allocator(swift::AsyncTask *)::global = 0;
      void *v9 = &swift::TaskAllocatorSlabMetadata;
      v9[1] = 0;
      void v9[2] = &allocator(swift::AsyncTask *)::global
            - (((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0)
            + 504;
      qword_1E91D4118 = ((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0;
      dword_1E91D4120 = 1;
    }
  }
  unint64_t v4 = (a1 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlabForAllocation = swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::getSlabForAllocation(v3, v4);
  uint64_t v6 = *((unsigned int *)SlabForAllocation + 5);
  long long v7 = (char *)SlabForAllocation + v6;
  *((void *)v7 + 4) = *v3;
  *((void *)v7 + 5) = SlabForAllocation;
  *((_DWORD *)SlabForAllocation + 5) = v4 + v6 + 16;
  *unint64_t v3 = (uint64_t)SlabForAllocation + v6 + 32;
  return (uint64_t)SlabForAllocation + v6 + 48;
}

uint64_t swift::_swift_task_alloc_specific(swift *this, swift::AsyncTask *a2)
{
  if (this)
  {
    int8x8_t v2 = (uint64_t *)((char *)this + 112);
  }
  {
    int8x8_t v2 = &allocator(swift::AsyncTask *)::global;
  }
  else
  {
    unint64_t v8 = a2;
    int8x8_t v2 = &allocator(swift::AsyncTask *)::global;
    {
      uint8x8_t v9 = (void *)(((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0);
      allocator(swift::AsyncTask *)::global = 0;
      void *v9 = &swift::TaskAllocatorSlabMetadata;
      v9[1] = 0;
      void v9[2] = &allocator(swift::AsyncTask *)::global
            - (((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0)
            + 504;
      qword_1E91D4118 = ((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0;
      dword_1E91D4120 = 1;
    }
    a2 = v8;
  }
  unsigned int v3 = (a2 + 15) & 0xFFFFFFF0;
  SlabForAllocation = swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::getSlabForAllocation(v2, ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *((unsigned int *)SlabForAllocation + 5);
  uint64_t v6 = (char *)SlabForAllocation + v5;
  *((void *)v6 + 4) = *v2;
  *((void *)v6 + 5) = SlabForAllocation;
  *((_DWORD *)SlabForAllocation + 5) = v3 + v5 + 16;
  uint64_t *v2 = (uint64_t)SlabForAllocation + v5 + 32;
  return (uint64_t)SlabForAllocation + v5 + 48;
}

void swift_task_dealloc(uint64_t a1)
{
  uint64_t Current = swift_task_getCurrent();
  if (Current)
  {
    uint64_t v5 = (uint64_t *)(Current + 112);
  }
  {
    uint64_t v5 = &allocator(swift::AsyncTask *)::global;
  }
  else
  {
    uint64_t v5 = &allocator(swift::AsyncTask *)::global;
    {
      uint8x8_t v9 = (void *)(((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0);
      allocator(swift::AsyncTask *)::global = 0;
      void *v9 = &swift::TaskAllocatorSlabMetadata;
      v9[1] = 0;
      void v9[2] = &allocator(swift::AsyncTask *)::global
            - (((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0)
            + 504;
      qword_1E91D4118 = ((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0;
      dword_1E91D4120 = 1;
    }
  }
  uint64_t v6 = (uint64_t *)*v5;
  if (*v5) {
    BOOL v7 = *v5 + 16 == a1;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    swift::swift_Concurrency_fatalError(0, "freed pointer was not the last allocation", v3, v4);
  }
  uint64_t v8 = *v6;
  *(_DWORD *)(v6[1] + 20) = v6 - v6[1] - 32;
  uint64_t *v5 = v8;
}

void swift::_swift_task_dealloc_specific(swift *this, swift::AsyncTask *a2, const char *a3, char *a4)
{
  if (this)
  {
    unint64_t v4 = (uint64_t *)((char *)this + 112);
  }
  {
    unint64_t v4 = &allocator(swift::AsyncTask *)::global;
  }
  else
  {
    uint8x8_t v9 = a2;
    unint64_t v4 = &allocator(swift::AsyncTask *)::global;
    {
      uint64_t v8 = (void *)(((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0);
      allocator(swift::AsyncTask *)::global = 0;
      *uint64_t v8 = &swift::TaskAllocatorSlabMetadata;
      v8[1] = 0;
      v8[2] = &allocator(swift::AsyncTask *)::global
            - (((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0)
            + 504;
      qword_1E91D4118 = ((unint64_t)&qword_1E91D4130 + 7) & 0xFFFFFFFFFFFFFFF0;
      dword_1E91D4120 = 1;
    }
    a2 = v9;
  }
  uint64_t v5 = (uint64_t *)*v4;
  if (*v4) {
    BOOL v6 = *v4 + 16 == (void)a2;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    swift::swift_Concurrency_fatalError(0, "freed pointer was not the last allocation", a3, a4);
  }
  uint64_t v7 = *v5;
  *(_DWORD *)(v5[1] + 20) = v5 - v5[1] - 32;
  *unint64_t v4 = v7;
}

uint64_t *swift::StackAllocator<984ul,&swift::TaskAllocatorSlabMetadata>::getSlabForAllocation(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = (uint64_t *)*a1;
  if (!*a1) {
    unint64_t v4 = a1;
  }
  uint64_t v5 = (uint64_t *)v4[1];
  if (v5)
  {
    if (a2 + 16 + *((unsigned int *)v5 + 5) <= *((unsigned int *)v5 + 4)) {
      return v5;
    }
    uint64_t v6 = v5[1];
    if (v6)
    {
      if (a2 + 16 + *(unsigned int *)(v6 + 20) <= *(unsigned int *)(v6 + 16)) {
        return (uint64_t *)v5[1];
      }
      unint64_t v7 = 0;
      v5[1] = 0;
      do
      {
        uint64_t v8 = *(void *)(v6 + 8);
        v7 += *(unsigned int *)(v6 + 16);
        memset_s((void *)v6, 8uLL, 0, 8uLL);
        free((void *)v6);
        *((_DWORD *)a1 + 4) -= 2;
        uint64_t v6 = v8;
      }
      while (v8);
      if (v7 > v2) {
        unint64_t v2 = v7;
      }
    }
  }
  if (v2 + 16 <= 0x3D8) {
    uint64_t v9 = 984;
  }
  else {
    uint64_t v9 = v2 + 16;
  }
  uint8x8_t v10 = malloc_type_malloc(v9 + 32, 0xAB27EE5uLL);
  if (v5) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = a1;
  }
  *uint8x8_t v10 = &swift::TaskAllocatorSlabMetadata;
  v10[1] = 0;
  *((_DWORD *)v10 + 4) = v9;
  *((_DWORD *)v10 + 5) = 0;
  v11[1] = (uint64_t)v10;
  *((_DWORD *)a1 + 4) += 2;
  return v10;
}

uint64_t swift::addStatusRecord(swift::concurrency::trace *_X0, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, void, void, void *), uint64_t a5)
{
  uint64_t v9 = _X0;
  LODWORD(_X0) = *(_DWORD *)a3;
  uint8x8_t v10 = (void (**)(swift::concurrency::trace *))MEMORY[0x1E4FBC890];
  if ((*(_DWORD *)a3 & 0x200) != 0)
  {
LABEL_2:
    waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)v9, a3);
    LODWORD(_X0) = *(_DWORD *)a3;
  }
  while (1)
  {
    *(void *)(a2 + 8) = a3[1];
    v19[0] = _X0 | ((unint64_t)*((unsigned int *)a3 + 1) << 32);
    v19[1] = a2;
    uint64_t v11 = a4(a5, *a3, a3[1], v19);
    if (!v11) {
      return v11;
    }
    if (*v10) {
      (*v10)(v9);
    }
    _X2 = v19[0];
    _X1 = a3[1];
    __asm { CASPL           X0, X1, X2, X3, [X8] }
    if ((unint64_t)_X0 == *a3)
    {
      swift::concurrency::trace::task_status_changed(v9, (swift::AsyncTask *)LOBYTE(v19[0]), (LODWORD(v19[0]) >> 8) & 1, (LODWORD(v19[0]) >> 10) & 1, 0, HIDWORD(v19[0]) > 3, (LODWORD(v19[0]) >> 12) & 1);
      return v11;
    }
    *a3 = _X0;
    a3[1] = _X1;
    if (((unsigned __int16)_X0 & 0x200) != 0) {
      goto LABEL_2;
    }
  }
}

uint64_t waitForStatusRecordUnlockIfNotSelfLocked(uint64_t a1, void *a2)
{
  unint64_t v4 = (void (**)(uint64_t))MEMORY[0x1E4FBC888];
  do
  {
    os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
    _X26 = 0;
    _X27 = 0;
    __asm { CASP            X26, X27, X26, X27, [X8] }
    *a2 = _X26;
    a2[1] = 0;
    if (*v4)
    {
      (*v4)(a1);
      LODWORD(_X26) = *(_DWORD *)a2;
    }
    if ((_X26 & 0x200) == 0
      || ((uint64_t v12 = a2[1]) != 0 ? (v13 = v12 - 16) : (v13 = 0),
          float v14 = pthread_self(),
          pthread_equal(*(pthread_t *)(v13 + 32), v14)))
    {
      uint64_t v18 = (_X26 >> 9) & 1;
      os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
      return v18;
    }
    ++*(void *)(v12 - 16);
    os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 - 8));
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 - 8));
    os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
    if (*(void *)(v12 - 16) == 1) {
      MEMORY[0x192FAC5A0](v12 - 16, 40, 7);
    }
    else {
      --*(void *)(v12 - 16);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
    _X0 = 0;
    _X1 = 0;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    *a2 = _X0;
    a2[1] = 0;
    if (*v4)
    {
      (*v4)(a1);
      LODWORD(_X0) = *(_DWORD *)a2;
    }
  }
  while ((_X0 & 0x200) != 0);
  return 0;
}

uint64_t swift::addStatusRecordToSelf(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void *), uint64_t a3)
{
  uint64_t Current = (swift::concurrency::trace *)swift_task_getCurrent();
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  v15[0] = _X2;
  v15[1] = 0;
  return swift::addStatusRecord(Current, a1, v15, a2, a3) & 1;
}

void swift::removeStatusRecord(swift::concurrency::trace *this, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, unint64_t, uint64_t, long long *), uint64_t a5)
{
  uint64_t v47 = a2;
  int v10 = *(_DWORD *)a3;
  if ((v10 & 0x200) == 0)
  {
LABEL_14:
    uint64_t v26 = (void (**)(swift::concurrency::trace *))MEMORY[0x1E4FBC888];
    if ((v10 & 0x200) == 0) {
      goto LABEL_30;
    }
    do
    {
LABEL_17:
      os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
      _X0 = 0;
      _X1 = 0;
      __asm { CASP            X0, X1, X0, X1, [X8] }
      *a3 = _X0;
      a3[1] = 0;
      if (*v26)
      {
        (*v26)(this);
        LODWORD(_X0) = *(_DWORD *)a3;
      }
      if ((_X0 & 0x200) == 0)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
        goto LABEL_30;
      }
      uint64_t v30 = a3[1];
      if (v30) {
        uint64_t v31 = v30 - 16;
      }
      else {
        uint64_t v31 = 0;
      }
      int v32 = pthread_self();
      if (pthread_equal(*(pthread_t *)(v31 + 32), v32)) {
        swift::swift_Concurrency_fatalError(0, "Waiting on a status record lock that is owned by self", v33, v34);
      }
      ++*(void *)(v30 - 16);
      os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
      os_unfair_lock_lock((os_unfair_lock_t)(v30 - 8));
      os_unfair_lock_unlock((os_unfair_lock_t)(v30 - 8));
      os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
      if (*(void *)(v30 - 16) == 1) {
        MEMORY[0x192FAC5A0](v30 - 16, 40, 7);
      }
      else {
        --*(void *)(v30 - 16);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
      _X0 = 0;
      _X1 = 0;
      __asm { CASP            X0, X1, X0, X1, [X8] }
      *a3 = _X0;
      a3[1] = 0;
      if (*v26)
      {
        (*v26)(this);
        LODWORD(_X0) = *(_DWORD *)a3;
      }
    }
    while ((_X0 & 0x200) != 0);
    while (1)
    {
LABEL_30:
      if (a3[1] != a2)
      {
        uint64_t v44 = *a3;
        uint64_t v45 = a3[1];
        *(void *)&long long v46 = &v47;
        withStatusRecordLock(this, v44, v45, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>, (uint64_t)&v46, a4, a5);
        return;
      }
      uint64_t v38 = *(unsigned int *)a3;
      unint64_t v39 = *((unsigned int *)a3 + 1);
      uint64_t v40 = *(void *)(a2 + 8);
      _X0 = v38 | (v39 << 32);
      *(void *)&long long v46 = _X0;
      *((void *)&v46 + 1) = v40;
      if (a4)
      {
        a4(a5, *a3, a3[1], &v46);
        _X0 = v46;
        unint64_t v39 = DWORD1(v46);
        LODWORD(v38) = v46;
      }
      _X3 = a3[1];
      __asm { CASP            X2, X3, X0, X1, [X10] }
      if (_X2 == *a3) {
        break;
      }
      *a3 = _X2;
      a3[1] = _X3;
      if ((_X2 & 0x200) != 0) {
        goto LABEL_17;
      }
    }
    unsigned int v21 = (v38 >> 8) & 1;
    unsigned int v22 = (v38 >> 10) & 1;
    BOOL v23 = v39 > 3;
    unsigned int v24 = (v38 >> 12) & 1;
    unint64_t v25 = v38;
    goto LABEL_38;
  }
  if ((waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)this, a3) & 1) == 0)
  {
    int v10 = *(_DWORD *)a3;
    goto LABEL_14;
  }
  uint64_t v11 = a3[1];
  while (v11)
  {
    uint64_t v12 = v11;
    uint64_t v11 = *(void *)(v11 + 8);
    if (v11 == a2)
    {
      *(void *)(v12 + 8) = *(void *)(a2 + 8);
      break;
    }
  }
  if (a4)
  {
    long long v46 = *(_OWORD *)a3;
    a4(a5, *a3, a3[1], &v46);
    _X0 = v46;
    _X5 = a3[1];
    __asm { CASP            X4, X5, X0, X1, [X8] }
    if (_X4 == *a3)
    {
      unint64_t v20 = DWORD1(v46);
    }
    else
    {
      do
      {
        *a3 = _X4;
        a3[1] = _X5;
        long long v46 = *(_OWORD *)a3;
        a4(a5, _X4, _X5, &v46);
        _X0 = v46;
        _X5 = a3[1];
        __asm { CASP            X4, X5, X0, X1, [X8] }
      }
      while (_X4 != *a3);
      unint64_t v20 = DWORD1(v46);
    }
    unsigned int v21 = (_X0 >> 8) & 1;
    unsigned int v22 = (_X0 >> 10) & 1;
    BOOL v23 = v20 > 3;
    unsigned int v24 = (_X0 >> 12) & 1;
    unint64_t v25 = _X0;
LABEL_38:
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v25, v21, v22, 0, v23, v24);
  }
}

void withStatusRecordLock(swift::concurrency::trace *this, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t, uint64_t), uint64_t a5, void (*a6)(uint64_t, unint64_t, uint64_t, long long *), uint64_t a7)
{
  unint64_t v7 = a6;
  _X23 = a3;
  uint64_t v10 = 0;
  *(void *)&long long v31 = a2;
  *((void *)&v31 + 1) = a3;
  if ((a2 & 0x200) == 0) {
    goto LABEL_4;
  }
LABEL_2:
  if (waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)this, &v31))
  {
    int v21 = 0;
    _X27 = *((void *)&v31 + 1);
    LODWORD(_X26) = v31;
    unint64_t v13 = DWORD1(v31);
    uint64_t v11 = *((void *)&v31 + 1);
    _X24 = v31;
  }
  else
  {
    _X23 = *((void *)&v31 + 1);
    while (1)
    {
LABEL_4:
      if (v10)
      {
        *(void *)(v10 + 24) = _X23;
      }
      else
      {
        uint64_t v10 = swift_slowAlloc();
        *(void *)uint64_t v10 = 1;
        *(_DWORD *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 192;
        *(void *)(v10 + 24) = _X23;
        *(void *)(v10 + 32) = pthread_self();
        os_unfair_lock_lock((os_unfair_lock_t)(v10 + 8));
      }
      uint64_t v11 = v10 + 16;
      unsigned int v12 = v31;
      unint64_t v13 = DWORD1(v31);
      _X26 = v31 | 0x200;
      _X24 = _X26 | ((unint64_t)DWORD1(v31) << 32);
      _X23 = *((void *)&v31 + 1);
      __asm { CASPAL          X22, X23, X24, X25, [X8] }
      if (_X22 == (unint64_t)v31) {
        break;
      }
      *(void *)&long long v31 = _X22;
      unint64_t v7 = a6;
      if ((_X22 & 0x200) != 0) {
        goto LABEL_2;
      }
    }
    if (*MEMORY[0x1E4FBC888]) {
      ((void (*)(swift::concurrency::trace *))*MEMORY[0x1E4FBC888])(this);
    }
    if (*MEMORY[0x1E4FBC890]) {
      ((void (*)(swift::concurrency::trace *))*MEMORY[0x1E4FBC890])(this);
    }
    *(void *)&long long v31 = _X24;
    *((void *)&v31 + 1) = v10 + 16;
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v12, (v12 >> 8) & 1, (v12 >> 10) & 1, 0, v13 > 3, (v12 >> 12) & 1);
    int v21 = 1;
    _X27 = v10 + 16;
    unint64_t v7 = a6;
  }
  a4(a5, _X24, v11);
  BOOL v23 = (void (**)(swift::concurrency::trace *))MEMORY[0x1E4FBC890];
  while (1)
  {
    long long v30 = v31;
    if (v21)
    {
      uint64_t v24 = *(void *)(_X27 + 8);
      *(void *)&long long v30 = _X26 & 0xFFFFFDFF | (v13 << 32);
      *((void *)&v30 + 1) = v24;
    }
    if (v7) {
      v7(a7, _X24, v11, &v30);
    }
    if (*v23) {
      (*v23)(this);
    }
    _X0 = v30;
    _X27 = v11;
    __asm { CASPL           X26, X27, X0, X1, [X8] }
    if (_X26 == _X24) {
      break;
    }
    *(void *)&long long v31 = _X26;
    *((void *)&v31 + 1) = v11;
    unint64_t v13 = HIDWORD(_X26);
    _X24 = _X26;
  }
  swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)v30, (v30 >> 8) & 1, (v30 >> 10) & 1, 0, DWORD1(v30) > 3, (v30 >> 12) & 1);
  if (v21)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&StatusRecordLockLock);
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 8));
    if (*(void *)v10 == 1) {
      MEMORY[0x192FAC5A0](v10, 40, 7);
    }
    else {
      --*(void *)v10;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&StatusRecordLockLock);
  }
  else if (v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 8));
    MEMORY[0x192FAC5A0](v10, 40, 7);
  }
}

void swift::removeStatusRecordWhere(swift::concurrency::trace *this, unint64_t *a2, unsigned int (*a3)(uint64_t, unint64_t, unint64_t, unint64_t), uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t, long long *), uint64_t a6)
{
  v26[0] = a3;
  v26[1] = a4;
  if ((*((unsigned char *)a2 + 1) & 2) == 0 || !waitForStatusRecordUnlockIfNotSelfLocked((uint64_t)this, a2)) {
    goto LABEL_16;
  }
  for (unint64_t i = a2[1]; i; unint64_t i = *(void *)(i + 8))
  {
    if (a3(a4, *a2, a2[1], i))
    {
      unint64_t v21 = a2[1];
      while (v21)
      {
        unint64_t v22 = v21;
        unint64_t v21 = *(void *)(v21 + 8);
        if (v21 == i)
        {
          *(void *)(v22 + 8) = *(void *)(i + 8);
          break;
        }
      }
    }
  }
  if (a5)
  {
    long long v25 = *(_OWORD *)a2;
    a5(a6, *a2, a2[1], &v25);
    _X0 = v25;
    _X5 = a2[1];
    __asm { CASP            X4, X5, X0, X1, [X8] }
    if (_X4 == *a2)
    {
      unint64_t v20 = DWORD1(v25);
    }
    else
    {
      do
      {
        *a2 = _X4;
        a2[1] = _X5;
        long long v25 = *(_OWORD *)a2;
        a5(a6, _X4, _X5, &v25);
        _X0 = v25;
        _X5 = a2[1];
        __asm { CASP            X4, X5, X0, X1, [X8] }
      }
      while (_X4 != *a2);
      unint64_t v20 = DWORD1(v25);
    }
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)_X0, (_X0 >> 8) & 1, (_X0 >> 10) & 1, 0, v20 > 3, (_X0 >> 12) & 1);
  }
  else
  {
LABEL_16:
    uint64_t v23 = *a2;
    uint64_t v24 = a2[1];
    *(void *)&long long v25 = v26;
    withStatusRecordLock(this, v23, v24, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecordWhere(swift::AsyncTask *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>, (uint64_t)&v25, a5, a6);
  }
}

void swift::removeStatusRecordFromSelf(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, long long *), uint64_t a3)
{
  uint64_t Current = (swift::concurrency::trace *)swift_task_getCurrent();
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  v14[0] = _X2;
  v14[1] = 0;
  swift::removeStatusRecord(Current, a1, v14, a2, a3);
}

void swift::updateStatusRecord(swift::concurrency::trace *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, unint64_t, uint64_t, long long *), uint64_t a7)
{
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v7 = *a5;
  uint64_t v8 = a5[1];
  uint64_t v9 = v10;
  withStatusRecordLock(a1, v7, v8, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::updateStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,__swift::__runtime::llvm::function_ref<void ()(void)>,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>, (uint64_t)&v9, a6, a7);
}

uint64_t swift::AsyncTask::getPreferredTaskExecutor(swift::AsyncTask *this)
{
  if ((*((unsigned char *)this + 35) & 0x20) != 0) {
    goto LABEL_3;
  }
  _X2 = 0;
  _X3 = 0;
  uint64_t v3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X9] }
  if ((_X2 & 0x8000) != 0)
  {
LABEL_3:
    _X6 = 0;
    _X7 = 0;
    v14[0] = 0;
    v14[1] = 0;
    unint64_t v13 = v14;
    __asm { CASP            X6, X7, X6, X7, [X8] }
    float v15 = &v13;
    withStatusRecordLock(this, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v15, 0, _X6);
    return v14[0];
  }
  return v3;
}

uint64_t swift::AsyncTask::pushInitialTaskExecutorPreference(swift *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = swift::_swift_task_alloc_specific(a1, (swift::AsyncTask *)0x28);
  *(void *)uint64_t v8 = 5;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  if (a4) {
    *(unsigned char *)(v8 + 16) = 1;
  }
  _X2 = 0;
  _X3 = 0;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  v18[0] = _X2;
  v18[1] = 0;
  return swift::addStatusRecord(a1, v8, v18, __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::pushInitialTaskExecutorPreference(swift::TaskExecutorRef,BOOL)::$_0>, (uint64_t)&v17);
}

uint64_t swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(swift::AsyncTask *this)
{
  _X6 = 0;
  _X7 = 0;
  v9[1] = this;
  uint64_t v10 = 0;
  v9[0] = &v10;
  __asm { CASP            X6, X7, X6, X7, [X8] }
  uint64_t v11 = v9;
  withStatusRecordLock(this, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0>(swift::AsyncTask*,swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v11, 0, _X6);
  return swift_unknownObjectRelease();
}

uint64_t swift::updateNewChildWithParentAndGroupState(uint64_t a1, __int16 a2, int a3, swift::TaskGroup *this)
{
  unsigned __int8 v4 = a2;
  _X22 = 0;
  _X23 = 0;
  __asm { CASP            X22, X23, X22, X23, [X8] }
  int v13 = _X22;
  if ((a2 & 0x100) != 0 || this && swift::TaskGroup::isCancelled(this)) {
    int v13 = _X22 | 0x100;
  }
  int v14 = v4;
  if (v4 == 33) {
    int v14 = 25;
  }
  _X22 = v13 & 0xFFFFFF00 | v14;
  uint64_t result = *(void *)(a1 + 96);
  do
  {
    _X3 = *(void *)(a1 + 104);
    __asm { CASP            X2, X3, X22, X23, [X8] }
    _ZF = _X2 == result;
    uint64_t result = _X2;
  }
  while (!_ZF);
  return result;
}

void swift::_swift_taskGroup_detachChild(swift *this, swift::TaskGroup *a2, swift::AsyncTask *a3)
{
  _X6 = 0;
  _X7 = 0;
  int v13 = this;
  uint64_t v5 = (swift::concurrency::trace *)*((void *)a2 + 24);
  v11[0] = &v13;
  v11[1] = &v12;
  unsigned int v12 = a2;
  __asm { CASP            X6, X7, X6, X7, [X8] }
  int v14 = v11;
  withStatusRecordLock(v5, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v14, 0, _X6);
}

void swift::TaskDependencyStatusRecord::performEscalationAction(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 == 4)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v7 = *(swift::AsyncTask **)(a1 + 40);
    uint64_t v8 = *(unsigned __int8 **)(a1 + 16);
    swift::swift_executor_escalate(v8, v6, v7, a2);
  }
  else if (v3 == 1)
  {
    unsigned __int8 v4 = *(swift::AsyncTask **)(a1 + 16);
    swift_once();
    uint64_t v5 = (void (*)(swift::AsyncTask *, unint64_t, uint64_t (*)(swift::AsyncTask *, unint64_t)))swift_task_escalate::Override;
    if (swift_task_escalate::Override)
    {
      v5(v4, a2, swift_task_escalateImpl);
    }
    else
    {
      swift_task_escalateImpl(v4, a2);
    }
  }
}

uint64_t swift_task_escalate(swift::AsyncTask *a1, unint64_t a2)
{
  swift_once();
  unsigned __int8 v4 = (uint64_t (*)(swift::AsyncTask *, unint64_t, uint64_t (*)(swift::AsyncTask *, unint64_t)))swift_task_escalate::Override;
  if (swift_task_escalate::Override)
  {
    return v4(a1, a2, swift_task_escalateImpl);
  }
  else
  {
    return swift_task_escalateImpl(a1, a2);
  }
}

void swift_taskGroup_attachChild(uint64_t a1, uint64_t a2)
{
  swift_once();
  unsigned __int8 v4 = (void (*)(uint64_t, uint64_t, void (*)(swift::TaskGroup *, swift::AsyncTask *)))swift_taskGroup_attachChild::Override;
  if (swift_taskGroup_attachChild::Override)
  {
    v4(a1, a2, swift_taskGroup_attachChildImpl);
  }
  else
  {
    _X6 = 0;
    _X7 = 0;
    uint64_t v14 = a2;
    uint64_t v15 = a1;
    uint64_t v7 = *(swift::concurrency::trace **)(a2 + 192);
    v13[0] = &v15;
    v13[1] = &v14;
    __asm { CASP            X6, X7, X6, X7, [X8] }
    BOOL v16 = v13;
    withStatusRecordLock(v7, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v16, 0, _X6);
  }
}

void swift_taskGroup_attachChildImpl(swift::TaskGroup *a1, swift::AsyncTask *a2)
{
  _X6 = 0;
  _X7 = 0;
  unsigned int v12 = a1;
  unsigned __int8 v4 = (swift::concurrency::trace *)*((void *)a2 + 24);
  v10[0] = &v12;
  v10[1] = &v11;
  uint64_t v11 = a2;
  __asm { CASP            X6, X7, X6, X7, [X8] }
  int v13 = v10;
  withStatusRecordLock(v4, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v13, 0, _X6);
}

swift::concurrency::trace *swift_task_hasTaskGroupStatusRecord()
{
  swift_once();
  uint64_t v0 = (uint64_t (*)(swift::concurrency::trace *(*)(void)))swift_task_hasTaskGroupStatusRecord::Override;
  if (swift_task_hasTaskGroupStatusRecord::Override)
  {
    return (swift::concurrency::trace *)v0(swift_task_hasTaskGroupStatusRecordImpl);
  }
  else
  {
    uint64_t result = (swift::concurrency::trace *)swift_task_getCurrent();
    if (result)
    {
      _X6 = 0;
      _X7 = 0;
      char v10 = 0;
      uint64_t v9 = &v10;
      __asm { CASP            X6, X7, X6, X7, [X8] }
      uint64_t v11 = &v9;
      withStatusRecordLock(result, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_task_hasTaskGroupStatusRecordImpl(void)::$_0>(swift::AsyncTask *,swift_task_hasTaskGroupStatusRecordImpl(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v11, 0, _X6);
      return (swift::concurrency::trace *)(v10 != 0);
    }
  }
  return result;
}

swift::concurrency::trace *swift_task_hasTaskGroupStatusRecordImpl(void)
{
  uint64_t result = (swift::concurrency::trace *)swift_task_getCurrent();
  if (result)
  {
    _X6 = 0;
    _X7 = 0;
    char v9 = 0;
    uint64_t v8 = &v9;
    __asm { CASP            X6, X7, X6, X7, [X8] }
    char v10 = &v8;
    withStatusRecordLock(result, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_task_hasTaskGroupStatusRecordImpl(void)::$_0>(swift::AsyncTask *,swift_task_hasTaskGroupStatusRecordImpl(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v10, 0, _X6);
    return (swift::concurrency::trace *)(v9 != 0);
  }
  return result;
}

void swift_task_cancel(swift::AsyncTask *a1)
{
  swift_once();
  unint64_t v2 = (void (*)(swift::AsyncTask *, void (*)(swift::AsyncTask *)))swift_task_cancel::Override;
  if (swift_task_cancel::Override)
  {
    v2(a1, swift_task_cancelImpl);
  }
  else
  {
    swift_task_cancelImpl(a1);
  }
}

void swift_task_cancelImpl(swift::AsyncTask *this)
{
  _X22 = 0;
  _X23 = 0;
  __asm { CASP            X22, X23, X22, X23, [X8] }
  if ((_X22 & 0x100) == 0)
  {
    unint64_t v9 = HIDWORD(_X22);
    while (1)
    {
      _X20 = _X22 | 0x100 | ((unint64_t)v9 << 32);
      _X1 = 0;
      __asm { CASP            X0, X1, X20, X21, [X8] }
      if (_X0 == (_X22 | (v9 << 32))) {
        break;
      }
      unint64_t v9 = HIDWORD(_X0);
      LODWORD(_X22) = _X0;
      if ((_X0 & 0x100) != 0) {
        return;
      }
    }
    if (*MEMORY[0x1E4FBC888]) {
      ((void (*)(swift::AsyncTask *))*MEMORY[0x1E4FBC888])(this);
    }
    swift::concurrency::trace::task_status_changed(this, (swift::AsyncTask *)_X22, 1, (_X22 >> 10) & 1, 0, v9 > 3, (_X22 >> 12) & 1);
  }
}

uint64_t swift_task_escalateImpl(swift::AsyncTask *a1, unint64_t a2)
{
  _X24 = 0;
  unint64_t v18 = a2;
  _X25 = 0;
  __asm { CASP            X24, X25, X24, X25, [X8] }
  uint64_t result = _X24;
  if (_X24 < a2)
  {
    unint64_t v11 = HIDWORD(_X24);
    while (1)
    {
      if (v11 > 3 || (_X24 & 0x1000) != 0)
      {
        unsigned int v13 = _X24 & 0xFFFFFF00 | a2 | 0x400;
        unint64_t v12 = v11;
      }
      else
      {
        if ((_X24 & 0x2000) != 0) {
          return result;
        }
        unint64_t v12 = 0;
        unsigned int v13 = _X24 & 0xFFFFFF00 | a2;
      }
      _X22 = v13 | (v12 << 32);
      _X3 = 0;
      __asm { CASP            X2, X3, X22, X23, [X8] }
      if (_X2 == (_X24 | (v11 << 32))) {
        break;
      }
      unint64_t v11 = HIDWORD(_X2);
      uint64_t result = _X2;
      LODWORD(_X24) = _X2;
      if (_X2 >= a2) {
        return result;
      }
    }
    if (*MEMORY[0x1E4FBC888]) {
      ((void (*)(swift::AsyncTask *))*MEMORY[0x1E4FBC888])(a1);
    }
    if (v12 < 4)
    {
      if ((v13 & 0x1000) != 0 && _os_trace_lazy_init_completed_4swift())
      {
        if (swift::concurrency::trace::LogsToken != -1) {
          dispatch_once_f(&swift::concurrency::trace::LogsToken, 0, (dispatch_function_t)swift::concurrency::trace::setupLogs);
        }
        if (swift::concurrency::trace::TracingEnabled)
        {
          char v17 = swift::concurrency::trace::PotentialPriorityInversionLog;
          if (os_signpost_enabled((os_log_t)swift::concurrency::trace::PotentialPriorityInversionLog))
          {
            buf[0] = 134218496;
            *(void *)&buf[1] = swift::AsyncTask::getTaskId(a1);
            __int16 v20 = 2048;
            uint64_t v21 = _X24;
            __int16 v22 = 2048;
            uint64_t v23 = v13;
            _os_signpost_emit_with_name_impl(&dword_18E465000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "enqueued_task_inversion", " enableTelemetry=YES task=%llx oldPriority=%zu newPriority=%zu", (uint8_t *)buf, 0x20u);
          }
        }
      }
    }
    else
    {
      dispatch_lock_override_start_with_debounce();
    }
    return v13;
  }
  return result;
}

swift::concurrency::trace *swift_task_getPreferredTaskExecutor()
{
  swift_once();
  uint64_t v0 = (uint64_t (*)(swift::concurrency::trace *(*)(void)))swift_task_getPreferredTaskExecutor::Override;
  if (swift_task_getPreferredTaskExecutor::Override)
  {
    return (swift::concurrency::trace *)v0(swift_task_getPreferredTaskExecutorImpl);
  }
  else
  {
    uint64_t result = (swift::concurrency::trace *)swift_task_getCurrent();
    if (result)
    {
      if ((*((unsigned char *)result + 35) & 0x20) != 0) {
        goto LABEL_9;
      }
      _X2 = 0;
      _X3 = 0;
      __asm { CASP            X2, X3, X2, X3, [X8] }
      if ((_X2 & 0x8000) != 0)
      {
LABEL_9:
        _X6 = 0;
        _X7 = 0;
        v13[0] = 0;
        v13[1] = 0;
        unint64_t v12 = v13;
        __asm { CASP            X6, X7, X6, X7, [X8] }
        uint64_t v14 = &v12;
        withStatusRecordLock(result, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v14, 0, _X6);
        return (swift::concurrency::trace *)v13[0];
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

swift::concurrency::trace *swift_task_getPreferredTaskExecutorImpl(void)
{
  uint64_t result = (swift::concurrency::trace *)swift_task_getCurrent();
  if (result)
  {
    if ((*((unsigned char *)result + 35) & 0x20) != 0) {
      goto LABEL_5;
    }
    _X2 = 0;
    _X3 = 0;
    __asm { CASP            X2, X3, X2, X3, [X8] }
    if ((_X2 & 0x8000) != 0)
    {
LABEL_5:
      _X6 = 0;
      _X7 = 0;
      v12[0] = 0;
      v12[1] = 0;
      unint64_t v11 = v12;
      __asm { CASP            X6, X7, X6, X7, [X8] }
      unsigned int v13 = &v11;
      withStatusRecordLock(result, _X6, 0, (void (*)(uint64_t, unint64_t, uint64_t))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>, (uint64_t)&v13, 0, _X6);
      return (swift::concurrency::trace *)v12[0];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t swift_task_pushTaskExecutorPreference(uint64_t a1, uint64_t a2)
{
  swift_once();
  unsigned __int8 v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))swift_task_pushTaskExecutorPreference::Override;
  if (swift_task_pushTaskExecutorPreference::Override)
  {
    return v4(a1, a2, swift_task_pushTaskExecutorPreferenceImpl);
  }
  else
  {
    uint64_t Current = (swift *)swift_task_getCurrent();
    if (!Current) {
      return 0;
    }
    uint64_t v7 = Current;
    uint64_t v8 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x28);
    _X0 = 0;
    _X1 = 0;
    *(void *)uint64_t v8 = 5;
    *(void *)(v8 + 8) = 0;
    *(unsigned char *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = a1;
    *(void *)(v8 + 32) = a2;
    __asm { CASP            X0, X1, X0, X1, [X8] }
    v17[0] = _X0;
    v17[1] = 0;
    swift::addStatusRecord(v7, v8, v17, __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_pushTaskExecutorPreferenceImpl(swift::TaskExecutorRef)::$_0>, (uint64_t)&v16);
    return v8;
  }
}

uint64_t swift_task_pushTaskExecutorPreferenceImpl(uint64_t a1, uint64_t a2)
{
  uint64_t Current = (swift *)swift_task_getCurrent();
  if (!Current) {
    return 0;
  }
  uint64_t v5 = Current;
  uint64_t v6 = swift::_swift_task_alloc_specific(Current, (swift::AsyncTask *)0x28);
  _X0 = 0;
  _X1 = 0;
  *(void *)uint64_t v6 = 5;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a2;
  __asm { CASP            X0, X1, X0, X1, [X8] }
  v16[0] = _X0;
  v16[1] = 0;
  swift::addStatusRecord(v5, v6, v16, __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_pushTaskExecutorPreferenceImpl(swift::TaskExecutorRef)::$_0>, (uint64_t)&v15);
  return v6;
}

void swift_task_popTaskExecutorPreference(uint64_t a1)
{
  swift_once();
  unint64_t v2 = (void (*)(uint64_t, void (*)(uint64_t)))swift_task_popTaskExecutorPreference::Override;
  if (swift_task_popTaskExecutorPreference::Override)
  {
    v2(a1, swift_task_popTaskExecutorPreferenceImpl);
  }
  else
  {
    uint64_t v14 = a1;
    int v13 = 0;
    uint64_t Current = (swift::concurrency::trace *)swift_task_getCurrent();
    if (Current)
    {
      _X2 = 0;
      _X3 = 0;
      v12[0] = &v13;
      v12[1] = &v14;
      unint64_t v11 = &v13;
      __asm { CASP            X2, X3, X2, X3, [X8] }
      v15[0] = _X2;
      v15[1] = 0;
      swift::removeStatusRecordWhere(Current, v15, (unsigned int (*)(uint64_t, unint64_t, unint64_t, unint64_t))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_0>, (uint64_t)v12, (void (*)(uint64_t, unint64_t, uint64_t, long long *))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_1>, (uint64_t)&v11);
      swift_task_dealloc(v14);
    }
  }
}

void swift_task_popTaskExecutorPreferenceImpl(uint64_t a1)
{
  uint64_t v12 = a1;
  int v11 = 0;
  uint64_t Current = (swift::concurrency::trace *)swift_task_getCurrent();
  if (Current)
  {
    _X2 = 0;
    _X3 = 0;
    v10[0] = &v11;
    v10[1] = &v12;
    unint64_t v9 = &v11;
    __asm { CASP            X2, X3, X2, X3, [X8] }
    v13[0] = _X2;
    v13[1] = 0;
    swift::removeStatusRecordWhere(Current, v13, (unsigned int (*)(uint64_t, unint64_t, unint64_t, unint64_t))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_0>, (uint64_t)v10, (void (*)(uint64_t, unint64_t, uint64_t, long long *))__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_1>, (uint64_t)&v9);
    swift_task_dealloc(v12);
  }
}

void *swift_taskGroup_attachChild::$_0::__invoke(swift_taskGroup_attachChild::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_taskGroup_attachChild(this);
  swift_taskGroup_attachChild::Override = result;
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift_taskGroup_attachChildImpl(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(swift::TaskGroup ****a1, __int16 a2)
{
  int v3 = *a1;
  swift::TaskGroup::addChildTask(***a1, *(*a1)[1]);
  _X20 = 0;
  uint64_t v5 = *v3;
  uint64_t v6 = (uint64_t)*v3[1];
  uint64_t v7 = *v5;
  _X21 = 0;
  __asm { CASP            X20, X21, X20, X21, [X8] }
  int v14 = _X20;
  if ((a2 & 0x100) != 0 || v7 && swift::TaskGroup::isCancelled(v7)) {
    int v14 = _X20 | 0x100;
  }
  int v15 = a2;
  if (a2 == 33) {
    int v15 = 25;
  }
  _X20 = v14 & 0xFFFFFF00 | v15;
  uint64_t result = *(void *)(v6 + 96);
  do
  {
    _X3 = *(void *)(v6 + 104);
    __asm { CASP            X2, X3, X20, X21, [X8] }
    _ZF = _X2 == result;
    uint64_t result = _X2;
  }
  while (!_ZF);
  return result;
}

void *swift_task_hasTaskGroupStatusRecord::$_0::__invoke(swift_task_hasTaskGroupStatusRecord::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_hasTaskGroupStatusRecord(this);
  swift_task_hasTaskGroupStatusRecord::Override = result;
  return result;
}

unsigned char ***__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift_task_hasTaskGroupStatusRecordImpl(void)::$_0>(swift::AsyncTask *,swift_task_hasTaskGroupStatusRecordImpl(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(unsigned char ***result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    while (*(unsigned char *)a3 != 2)
    {
      a3 = *(void *)(a3 + 8);
      if (!a3) {
        return result;
      }
    }
    **void *result = 1;
  }
  return result;
}

void *swift_task_cancel::$_0::__invoke(swift_task_cancel::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_cancel(this);
  swift_task_cancel::Override = result;
  return result;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift_task_cancelImpl(swift::AsyncTask *)::$_0>(int a1, int a2, swift::TaskGroupTaskStatusRecord *this)
{
  if (this)
  {
    int v3 = this;
    do
    {
      int v6 = *(unsigned __int8 *)v3;
      switch(v6)
      {
        case 3:
          (*((void (**)(void))v3 + 2))();
          break;
        case 2:
          uint64_t Group = swift::TaskGroupTaskStatusRecord::getGroup(v3);
          swift::_swift_taskGroup_cancelAllChildren(Group, v5);
          break;
        case 1:
          for (unint64_t i = (swift::AsyncTask *)*((void *)v3 + 2); i; unint64_t i = (swift::AsyncTask *)*((void *)i + 25))
          {
            swift_once();
            if (swift_task_cancel::Override) {
              ((void (*)(swift::AsyncTask *, uint64_t (*)(swift::AsyncTask *)))swift_task_cancel::Override)(i, swift_task_cancelImpl);
            }
            else {
              swift_task_cancelImpl(i);
            }
          }
          break;
      }
      int v3 = (swift::TaskGroupTaskStatusRecord *)*((void *)v3 + 1);
    }
    while (v3);
  }
}

void *swift_task_escalate::$_0::__invoke(swift_task_escalate::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_escalate(this);
  swift_task_escalate::Override = result;
  return result;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift_task_escalateImpl(swift::AsyncTask *,swift::JobPriority)::$_0>(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    do
    {
      unint64_t v5 = **a1;
      switch(*(unsigned char *)v3)
      {
        case 0:
          int v6 = *(_DWORD *)(v3 + 32);
          if (v6 == 4)
          {
            swift::swift_executor_escalate(*(unsigned __int8 **)(v3 + 16), *(void *)(v3 + 24), *(swift::AsyncTask **)(v3 + 40), **a1);
          }
          else if (v6 == 1)
          {
            uint64_t v7 = *(void *)(v3 + 16);
            swift_once();
            if (swift_task_escalate::Override) {
              ((void (*)(uint64_t, unint64_t, uint64_t (*)(void, void)))swift_task_escalate::Override)(v7, v5, swift_task_escalateImpl);
            }
            else {
              swift_task_escalateImpl(v7, v5);
            }
          }
          break;
        case 1:
          for (uint64_t i = *(void *)(v3 + 16); i; uint64_t i = *(void *)(i + 200))
          {
            swift_once();
            if (swift_task_escalate::Override) {
              ((void (*)(uint64_t, unint64_t, uint64_t (*)(void, void)))swift_task_escalate::Override)(i, v5, swift_task_escalateImpl);
            }
            else {
              swift_task_escalateImpl(i, v5);
            }
          }
          break;
        case 2:
          for (uint64_t j = *(void *)(v3 + 16); j; uint64_t j = *(void *)(j + 200))
          {
            swift_once();
            if (swift_task_escalate::Override) {
              ((void (*)(uint64_t, unint64_t, uint64_t (*)(void, void)))swift_task_escalate::Override)(j, v5, swift_task_escalateImpl);
            }
            else {
              swift_task_escalateImpl(j, v5);
            }
          }
          break;
        case 4:
          (*(void (**)(void, unint64_t))(v3 + 16))(*(void *)(v3 + 24), **a1);
          break;
        default:
          break;
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
  }
}

void *swift_task_getPreferredTaskExecutor::$_0::__invoke(swift_task_getPreferredTaskExecutor::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_getPreferredTaskExecutor(this);
  swift_task_getPreferredTaskExecutor::Override = result;
  return result;
}

void *swift_task_pushTaskExecutorPreference::$_0::__invoke(swift_task_pushTaskExecutorPreference::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_pushTaskExecutorPreference(this);
  swift_task_pushTaskExecutorPreference::Override = result;
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_pushTaskExecutorPreferenceImpl(swift::TaskExecutorRef)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 |= 0x8000uLL;
  return 1;
}

void *swift_task_popTaskExecutorPreference::$_0::__invoke(swift_task_popTaskExecutorPreference::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_popTaskExecutorPreference(this);
  swift_task_popTaskExecutorPreference::Override = result;
  return result;
}

BOOL __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_0>(int **a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (*a4 == 5 && (int v4 = **a1, **a1 = v4 + 1, !v4)) {
    return *(void *)a1[1] == (void)a4;
  }
  else {
    return 0;
  }
}

_DWORD **__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_task_popTaskExecutorPreferenceImpl(swift::TaskExecutorPreferenceStatusRecord *)::$_1>(_DWORD **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (**result == 1) {
    *(void *)a4 = *(_DWORD *)a4 & 0xFFFF7FFF | ((unint64_t)*(unsigned int *)(a4 + 4) << 32);
  }
  return result;
}

uint64_t **__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>(uint64_t **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = **result;
  while (a3)
  {
    uint64_t v4 = a3;
    a3 = *(void *)(a3 + 8);
    if (a3 == v3)
    {
      *(void *)(v4 + 8) = *(void *)(v3 + 8);
      return result;
    }
  }
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::removeStatusRecordWhere(swift::AsyncTask *,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::TaskStatusRecord *)>,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    uint64_t v6 = a3;
    do
    {
      uint64_t result = (**(uint64_t (***)(void, uint64_t, uint64_t, uint64_t))v5)(*(void *)(*(void *)v5 + 8), a2, a3, v6);
      if (result)
      {
        uint64_t v7 = a3;
        while (v7)
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(void *)(v7 + 8);
          if (v7 == v6)
          {
            *(void *)(v8 + 8) = *(void *)(v6 + 8);
            break;
          }
        }
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
  }
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<swift::updateStatusRecord(swift::AsyncTask *,swift::TaskStatusRecord *,__swift::__runtime::llvm::function_ref<void ()(void)>,swift::ActiveTaskStatus&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::$_0>(uint64_t a1)
{
  return (**(uint64_t (***)(void))a1)(*(void *)(*(void *)a1 + 8));
}

__n128 __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0>(swift::AsyncTask*,swift::AsyncTask::getPreferredTaskExecutor(BOOL)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(__n128 ***a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    while (*(unsigned char *)a3 != 5)
    {
      a3 = *(void *)(a3 + 8);
      if (!a3) {
        return result;
      }
    }
    __n128 result = *(__n128 *)(a3 + 24);
    ***a1 = result;
  }
  return result;
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::pushInitialTaskExecutorPreference(swift::TaskExecutorRef,BOOL)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 |= 0x8000uLL;
  return 1;
}

void __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0>(swift::AsyncTask*,swift::AsyncTask::dropInitialTaskExecutorPreferenceRecord(void)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(uint64_t a1, int a2, swift::AsyncTask *a3, char *a4)
{
  if (a3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = *(swift **)(*(void *)a1 + 8);
    uint64_t v6 = a3;
    while (*(unsigned char *)v6 != 5)
    {
      uint64_t v6 = (swift::AsyncTask *)*((void *)v6 + 1);
      if (!v6) {
        return;
      }
    }
    if (*((unsigned char *)v6 + 16)) {
      **uint64_t v4 = *((void *)v6 + 3);
    }
    while (a3)
    {
      uint64_t v7 = a3;
      a3 = (swift::AsyncTask *)*((void *)a3 + 1);
      if (a3 == v6)
      {
        *((void *)v7 + 1) = *((void *)v6 + 1);
        break;
      }
    }
    swift::_swift_task_dealloc_specific(v5, v6, (const char *)a3, a4);
  }
}

uint64_t __swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus)>::callback_fn<BOOL withStatusRecordLock<swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0>(swift::AsyncTask *,swift::_swift_taskGroup_detachChild(swift::TaskGroup *,swift::AsyncTask *)::$_0 &&,__swift::__runtime::llvm::function_ref<void ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>)::{lambda(swift::ActiveTaskStatus)#1}>(uint64_t ***a1)
{
  return swift::TaskGroup::removeChildTask(***a1, (swift::AsyncTask *)*(*a1)[1]);
}

uint64_t swift::TaskGroupTaskStatusRecord::getGroup(swift::TaskGroupTaskStatusRecord *this)
{
  return (uint64_t)this - 8;
}

void *swift::TaskGroup::addChildTask(swift::TaskGroup *this, swift::AsyncTask *a2)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  __n128 result = (void *)((char *)this + 24);
  result[1] = a2;
  uint64_t v5 = (void *)(v4 + 200);
  if (v3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = result;
  }
  *uint64_t v6 = a2;
  return result;
}

uint64_t swift::TaskGroup::removeChildTask(uint64_t this, swift::AsyncTask *a2)
{
  unint64_t v2 = *(swift::AsyncTask **)(this + 24);
  if (v2 == a2)
  {
    uint64_t v4 = *((void *)a2 + 25);
    *(void *)(this + 24) = v4;
    if (!v4) {
      *(void *)(this + 32) = 0;
    }
  }
  else
  {
    while (v2)
    {
      uint64_t v3 = v2;
      unint64_t v2 = (swift::AsyncTask *)*((void *)v2 + 25);
      if (v2 == a2)
      {
        *((void *)v3 + 25) = *((void *)a2 + 25);
        if (*(swift::AsyncTask **)(this + 32) == a2) {
          *(void *)(this + 32) = v3;
        }
        return this;
      }
    }
  }
  return this;
}

uint64_t swift::TaskGroup::isCancelled(swift::TaskGroup *this)
{
  return *((void *)this + 6) >> 63;
}

uint64_t swift::TaskGroup::offer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t swift::_swift_taskGroup_cancelAllChildren(uint64_t this, swift::TaskGroup *a2)
{
  for (uint64_t i = *(void *)(this + 24); i; uint64_t i = *(void *)(i + 200))
    this = swift_task_cancel(i, a2);
  return this;
}

uint64_t swift_taskGroup_initialize(uint64_t a1, uint64_t a2)
{
  swift_once();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))swift_taskGroup_initialize::Override;
  if (swift_taskGroup_initialize::Override)
  {
    return v4(a1, a2, swift_taskGroup_initializeImpl);
  }
  else
  {
    swift_once();
    uint64_t v6 = (uint64_t (*)(void, uint64_t, uint64_t, uint64_t (*)(__int16, uint64_t, uint64_t)))swift_taskGroup_initializeWithFlags::Override;
    if (swift_taskGroup_initializeWithFlags::Override)
    {
      return v6(0, a1, a2, swift_taskGroup_initializeWithFlagsImpl);
    }
    else
    {
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      *(void *)(a1 + 8) = 2;
      *(void *)(a1 + 112) = a2;
      *(void *)a1 = &unk_1EDD47180;
      uint64_t v7 = &v8;
      uint64_t v8 = a1;
      return swift::addStatusRecordToSelf(a1 + 8, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v7);
    }
  }
}

uint64_t swift_taskGroup_initializeImpl(uint64_t a1, uint64_t a2)
{
  swift_once();
  uint64_t v4 = (uint64_t (*)(void, uint64_t, uint64_t, uint64_t (*)(__int16, uint64_t, uint64_t)))swift_taskGroup_initializeWithFlags::Override;
  if (swift_taskGroup_initializeWithFlags::Override)
  {
    return v4(0, a1, a2, swift_taskGroup_initializeWithFlagsImpl);
  }
  else
  {
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    *(void *)(a1 + 8) = 2;
    *(void *)(a1 + 112) = a2;
    *(void *)a1 = &unk_1EDD47180;
    uint64_t v6 = &v7;
    uint64_t v7 = a1;
    return swift::addStatusRecordToSelf(a1 + 8, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v6);
  }
}

uint64_t swift_taskGroup_initializeWithFlags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_once();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(__int16, uint64_t, uint64_t)))swift_taskGroup_initializeWithFlags::Override;
  if (swift_taskGroup_initializeWithFlags::Override)
  {
    return v6(a1, a2, a3, swift_taskGroup_initializeWithFlagsImpl);
  }
  else
  {
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    if ((a1 & 0x100) != 0) {
      uint64_t v8 = &unk_1EDD47100;
    }
    else {
      uint64_t v8 = &unk_1EDD47180;
    }
    *(void *)(a2 + 8) = 2;
    *(void *)(a2 + 112) = a3;
    *(void *)a2 = v8;
    unint64_t v9 = &v10;
    uint64_t v10 = a2;
    return swift::addStatusRecordToSelf(a2 + 8, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v9);
  }
}

uint64_t swift_taskGroup_initializeWithFlagsImpl(__int16 a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  if ((a1 & 0x100) != 0) {
    uint64_t v3 = &unk_1EDD47100;
  }
  else {
    uint64_t v3 = &unk_1EDD47180;
  }
  *(void *)(a2 + 8) = 2;
  *(void *)(a2 + 112) = a3;
  *(void *)a2 = v3;
  uint64_t v5 = &v6;
  uint64_t v6 = a2;
  return swift::addStatusRecordToSelf(a2 + 8, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>, (uint64_t)&v5);
}

uint64_t swift_taskGroup_destroy(uint64_t a1)
{
  swift_once();
  unint64_t v2 = (uint64_t (*)(uint64_t, uint64_t (*)(swift::TaskGroup *)))swift_taskGroup_destroy::Override;
  if (swift_taskGroup_destroy::Override)
  {
    return v2(a1, swift_taskGroup_destroyImpl);
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 16);
    return v4(a1);
  }
}

uint64_t swift_taskGroup_destroyImpl(swift::TaskGroup *a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t swift_taskGroup_wait_next_throwing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  swift_once();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void), uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void))))swift_taskGroup_wait_next_throwing::Override;
  if (swift_taskGroup_wait_next_throwing::Override)
  {
    return v8(a1, a2, a3, a4, swift_taskGroup_wait_next_throwingImpl);
  }
  else
  {
    return swift_taskGroup_wait_next_throwingImpl(a1, a2, a3, a4);
  }
}

uint64_t swift_taskGroup_wait_next_throwingImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v61 = v4;
  uint64_t Current = (uint64_t (**)(void))swift_task_getCurrent();
  Current[7] = task_group_wait_resume_adapter;
  if (a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = 0;
  }
  Current[8] = v10;
  if (a3) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = 0;
  }
  *((void *)a4 + 1) = v11;
  unint64_t v57 = Current + 7;
  if (v4) {
    uint64_t v12 = v4;
  }
  else {
    uint64_t v12 = 0;
  }
  *(void *)a4 = v12;
  int v13 = (os_unfair_lock_s *)(a2 + 40);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = a1;
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 40));
  unint64_t v14 = atomic_fetch_or_explicit((atomic_ullong *volatile)(a2 + 48), 0x4000000000000000uLL, memory_order_acquire);
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v16 = 0x7FFFFFFFLL;
  if (v15) {
    uint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
  }
  if ((v16 & v14) == 0)
  {
    atomic_fetch_and_explicit((atomic_ullong *volatile)(a2 + 48), 0xBFFFFFFFFFFFFFFFLL, memory_order_release);
    goto LABEL_38;
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a2 + 56), memory_order_acquire);
  if ((v14 & 0x3FFFFFFF80000000) != 0)
  {
    uint64_t v18 = v14 | 0x4000000000000000;
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    unint64_t v22 = 0xBFFFFFFF7FFFFFFFLL;
    if (v19) {
      unint64_t v22 = 0xBFFFFFFFFFFFFFFFLL;
    }
    uint64_t v23 = v18;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 48), (unint64_t *)&v23, v22 + v18);
    if (v23 == v18)
    {
      uint64_t v24 = *(void *)(a2 + 104);
      if (v24)
      {
        long long v25 = *(void ***)(a2 + 72);
        uint64_t v26 = (*(void **)((char *)v25 + ((*(void *)(a2 + 96) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)(a2 + 96) & 0x1FFLL];
        unint64_t v27 = *(void *)(a2 + 96) + 1;
        *(void *)(a2 + 96) = v27;
        *(void *)(a2 + 104) = v24 - 1;
        if (v27 >= 0x400)
        {
          operator delete(*v25);
          *(void *)(a2 + 72) += 8;
          *(void *)(a2 + 96) -= 512;
        }
        uint64_t v28 = v26 & 3;
        if (v28 == 1) {
          swift::swift_Concurrency_fatalError(0, "accumulating task group should never use raw-errors!", v20, v21);
        }
        __int16 v29 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        unint64_t v30 = v29[8];
        uint64_t v31 = 52;
        if ((v30 & 0x1000000) == 0) {
          uint64_t v31 = 48;
        }
        if (v28)
        {
          uint64_t v32 = (uint64_t)&v29[v31] + ((v30 >> 23) & 8);
          if (v28 == 3)
          {
            uint64_t v33 = *(void *)(v32 + 16);
            if (*MEMORY[0x1E4FBC888]) {
              ((void (*)(unsigned int *))*MEMORY[0x1E4FBC888])(v29);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
            *((void *)a4 + 2) = v33;
            MEMORY[0x192FAC3D0](v33);
          }
          else
          {
            uint64_t v51 = *(void *)(v32 + 8);
            uint64_t v52 = (uint64_t *)(v51 - 8);
            unint64_t v53 = (*(unsigned __int8 *)(*(void *)(v51 - 8) + 80) + v32 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v51 - 8) + 80);
            if (*MEMORY[0x1E4FBC888]) {
              ((void (*)(unsigned int *))*MEMORY[0x1E4FBC888])(v29);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
            uint64_t v54 = *((void *)a4 + 3);
            if (*v52) {
              uint64_t v55 = *v52;
            }
            else {
              uint64_t v55 = 0;
            }
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v55 + 16))(v54, v53, v51);
            if (*(void *)(v51 - 8)) {
              uint64_t v56 = *(void *)(v51 - 8);
            }
            else {
              uint64_t v56 = 0;
            }
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v54, 0, 1, v51);
          }
          swift::_swift_taskGroup_detachChild((swift *)a2, (swift::TaskGroup *)v29, v34);
          swift_release();
          goto LABEL_42;
        }
      }
LABEL_38:
      uint64_t v48 = *(void *)(a2 + 112);
      os_unfair_lock_unlock(v13);
      if (*(void *)(v48 - 8)) {
        uint64_t v49 = *(void *)(v48 - 8);
      }
      else {
        uint64_t v49 = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v49 + 56))(*((void *)a4 + 3), 1, 1, v48);
LABEL_42:
      uint64_t v50 = *v57;
      return v50();
    }
  }
  if (*MEMORY[0x1E4FBC890]) {
    ((void (*)(uint64_t (**)(void)))*MEMORY[0x1E4FBC890])(Current);
  }
  uint64_t v35 = swift::_swift_task_alloc_specific((swift *)Current, (swift::AsyncTask *)0x30);
  _X2 = 0;
  _X3 = 0;
  *(void *)uint64_t v35 = 0;
  *(void *)(v35 + 8) = 0;
  *(_DWORD *)(v35 + 32) = 3;
  *(void *)(v35 + 40) = Current;
  *(void *)(v35 + 16) = a2;
  Current[20] = (uint64_t (*)(void))v35;
  __asm { CASP            X2, X3, X2, X3, [X8] }
  v59[1] = 0;
  uint64_t v60 = v35;
  uint64_t v58 = &v60;
  v59[0] = _X2;
  swift::addStatusRecord((swift::concurrency::trace *)Current, v35, v59, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v58);
  if ((v59[0] & 0x400) != 0) {
    dispatch_lock_override_end();
  }
  swift_task_exitThreadLocalContext();
  swift::restoreTaskVoucher((swift *)Current, v43);
  unint64_t v44 = explicit;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 56), &v44, (unint64_t)Current);
  if (v44 != explicit)
  {
    unint64_t v45 = v44;
    do
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 56), &v45, (unint64_t)Current);
      _ZF = v45 == v44;
      unint64_t v44 = v45;
    }
    while (!_ZF);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 40));
  return swift::_swift_task_clearCurrent(v46);
}

uint64_t swift_taskGroup_isEmpty(void *a1)
{
  swift_once();
  unint64_t v2 = (uint64_t (*)(void *, BOOL (*)(swift::TaskGroup *)))swift_taskGroup_isEmpty::Override;
  if (swift_taskGroup_isEmpty::Override)
  {
    return v2(a1, swift_taskGroup_isEmptyImpl);
  }
  else
  {
    uint64_t v4 = a1[6];
    int v5 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    uint64_t v6 = 0x7FFFFFFFLL;
    if (v5) {
      uint64_t v6 = 0x3FFFFFFFFFFFFFFFLL;
    }
    return (v6 & v4) == 0;
  }
}

BOOL swift_taskGroup_isEmptyImpl(swift::TaskGroup *a1)
{
  uint64_t v1 = *((void *)a1 + 6);
  int v2 = (*(uint64_t (**)(swift::TaskGroup *))(*(void *)a1 + 24))(a1);
  uint64_t v3 = 0x7FFFFFFFLL;
  if (v2) {
    uint64_t v3 = 0x3FFFFFFFFFFFFFFFLL;
  }
  return (v3 & v1) == 0;
}

uint64_t swift_taskGroup_isCancelled(uint64_t a1)
{
  swift_once();
  int v2 = (uint64_t (*)(uint64_t, uint64_t (*)(swift::TaskGroup *)))swift_taskGroup_isCancelled::Override;
  if (!swift_taskGroup_isCancelled::Override) {
    return *(void *)(a1 + 48) >> 63;
  }

  return v2(a1, swift_taskGroup_isCancelledImpl);
}

uint64_t swift_taskGroup_isCancelledImpl(swift::TaskGroup *a1)
{
  return *((void *)a1 + 6) >> 63;
}

void swift_taskGroup_cancelAll(uint64_t a1)
{
  swift_once();
  int v2 = (void (*)(uint64_t, void (*)(swift::TaskGroup *)))swift_taskGroup_cancelAll::Override;
  if (swift_taskGroup_cancelAll::Override)
  {
    v2(a1, swift_taskGroup_cancelAllImpl);
  }
  else if ((atomic_fetch_or_explicit((atomic_ullong *volatile)(a1 + 48), 0x8000000000000000, memory_order_relaxed) & 0x8000000000000000) == 0)
  {
    for (uint64_t i = *(swift::AsyncTask **)(a1 + 24); i; uint64_t i = (swift::AsyncTask *)*((void *)i + 25))
      swift_task_cancel(i);
  }
}

void swift_taskGroup_cancelAllImpl(swift::TaskGroup *a1)
{
  if ((atomic_fetch_or_explicit((atomic_ullong *volatile)a1 + 6, 0x8000000000000000, memory_order_relaxed) & 0x8000000000000000) == 0)
  {
    for (uint64_t i = (swift::AsyncTask *)*((void *)a1 + 3); i; uint64_t i = (swift::AsyncTask *)*((void *)i + 25))
      swift_task_cancel(i);
  }
}

uint64_t swift_taskGroup_addPending(atomic_ullong *a1, char a2)
{
  swift_once();
  uint64_t v4 = (uint64_t (*)(atomic_ullong *, void, BOOL (*)(atomic_ullong *, char)))swift_taskGroup_addPending::Override;
  if (swift_taskGroup_addPending::Override)
  {
    return v4(a1, a2 & 1, swift_taskGroup_addPendingImpl);
  }
  else
  {
    return swift_taskGroup_addPendingImpl(a1, a2 & 1);
  }
}

BOOL swift_taskGroup_addPendingImpl(atomic_ullong *a1, char a2)
{
  int64_t v4 = atomic_fetch_add_explicit(a1 + 6, 1uLL, memory_order_relaxed) + 1;
  if ((*(unsigned int (**)(atomic_ullong *))(*a1 + 24))(a1)) {
    uint64_t v5 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 0x7FFFFFFFLL;
  }
  uint64_t v6 = v5 & v4;
  if ((*(unsigned int (**)(atomic_ullong *))(*a1 + 24))(a1)) {
    uint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v7 = 0x7FFFFFFFLL;
  }
  if (v6 == v7)
  {
    if ((*(unsigned int (**)(atomic_ullong *))(*a1 + 24))(a1)) {
      unint64_t v9 = "Discarding";
    }
    else {
      unint64_t v9 = "";
    }
    memset(&v37, 0, sizeof(v37));
    std::string::append(&v37, "TaskGroupStatus{ ");
    std::string::append(&v37, "C:");
    if (v4 >= 0) {
      uint64_t v10 = "n";
    }
    else {
      uint64_t v10 = "y";
    }
    std::string::append(&v37, v10);
    std::string::append(&v37, " W:");
    if ((v4 & 0x4000000000000000) != 0) {
      uint64_t v11 = "y";
    }
    else {
      uint64_t v11 = "n";
    }
    std::string::append(&v37, v11);
    if (((*(uint64_t (**)(atomic_ullong *))(*a1 + 24))(a1) & 1) == 0)
    {
      std::string::append(&v37, " R:");
      std::to_string((std::string *)v32, ((unint64_t)v4 >> 31) & 0x7FFFFFFF);
      uint64_t v12 = v32[23] >= 0 ? v32 : *(const std::string::value_type **)v32;
      std::string::size_type v13 = v32[23] >= 0 ? v32[23] : *(void *)&v32[8];
      std::string::append(&v37, v12, v13);
      if ((v32[23] & 0x80000000) != 0) {
        operator delete(*(void **)v32);
      }
    }
    std::string::append(&v37, " P:");
    int v14 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 24))(a1);
    uint64_t v15 = 0x7FFFFFFFLL;
    if (v14) {
      uint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    std::to_string((std::string *)v32, v15 & v4);
    if (v32[23] >= 0) {
      uint64_t v16 = v32;
    }
    else {
      uint64_t v16 = *(const std::string::value_type **)v32;
    }
    if (v32[23] >= 0) {
      std::string::size_type v17 = v32[23];
    }
    else {
      std::string::size_type v17 = *(void *)&v32[8];
    }
    std::string::append(&v37, v16, v17);
    if ((v32[23] & 0x80000000) != 0) {
      operator delete(*(void **)v32);
    }
    uint64_t v18 = operator new(0x48uLL);
    uint64_t v19 = 0;
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *(_OWORD *)&v39.__r_.__value_.__r.__words[1] = xmmword_18E4D9A70;
    *(void *)&long long v20 = 0x3030303030303030;
    *((void *)&v20 + 1) = 0x3030303030303030;
    *uint64_t v18 = v20;
    v18[1] = v20;
    void v18[2] = v20;
    v18[3] = v20;
    *((unsigned char *)v18 + 64) = 0;
    for (uint64_t i = 63; ; --i)
    {
      if (((unint64_t)v4 >> v19))
      {
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v22 = &v39;
        }
        else {
          unint64_t v22 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        v22->__r_.__value_.__s.__data_[i] = 49;
      }
      if (++v19 == 64)
      {
        uint64_t v23 = std::string::insert(&v39, 0, " ");
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v32 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        *(void *)&v32[16] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (v32[23] >= 0) {
          long long v25 = v32;
        }
        else {
          long long v25 = *(const std::string::value_type **)v32;
        }
        if (v32[23] >= 0) {
          std::string::size_type v26 = v32[23];
        }
        else {
          std::string::size_type v26 = *(void *)&v32[8];
        }
        std::string::append(&v37, v25, v26);
        if ((v32[23] & 0x80000000) != 0) {
          operator delete(*(void **)v32);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        uint64_t v38 = 0;
        std::string::append(&v37, " }");
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v28 = &v37;
        }
        else {
          uint64_t v28 = (std::string *)v37.__r_.__value_.__r.__words[0];
        }
        swift_asprintf(&v38, v27, v9, a1, v28);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        int shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
        unint64_t v30 = v38;
        if (shouldReportFatalErrorsToDebugger)
        {
          long long v33 = xmmword_1E55C48F8;
          long long v34 = unk_1E55C4908;
          long long v35 = xmmword_1E55C4918;
          uint64_t v36 = 0;
          *(_OWORD *)uint64_t v32 = xmmword_1E55C48D8;
          *(_OWORD *)&v32[16] = *(_OWORD *)&off_1E55C48E8;
          MEMORY[0x192FABF30](1, v38, v32);
        }
        size_t v31 = strlen(v30);
        write(2, v30, v31);
        asl_log(0, 0, 3, "%s", v30);
        free(v30);
        abort();
      }
    }
  }
  if ((a2 & 1) == 0 && v4 < 0) {
    int64_t v4 = atomic_fetch_add_explicit(a1 + 6, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed) - 1;
  }
  return v4 >= 0;
}

void swift_taskGroup_waitAll(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  swift_once();
  uint64_t v10 = (void (*)(uint64_t, os_unfair_lock_s *, uint64_t, uint64_t, void (*)(void), void (*)(uint64_t, os_unfair_lock_s *, uint64_t, uint64_t, void (*)(void))))swift_taskGroup_waitAll::Override;
  if (swift_taskGroup_waitAll::Override)
  {
    v10(a1, a2, a3, a4, a5, swift_taskGroup_waitAllImpl);
  }
  else
  {
    swift_taskGroup_waitAllImpl(a1, a2, a3, a4, a5);
  }
}

void swift_taskGroup_waitAllImpl(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v49 = v5;
  uint64_t Current = (void (**)(void))swift_task_getCurrent();
  os_unfair_lock_lock(a2 + 10);
  Current[7] = (void (*)(void))task_group_wait_resume_adapter;
  if (a5) {
    uint64_t v12 = a5;
  }
  else {
    uint64_t v12 = 0;
  }
  Current[8] = v12;
  if (a4) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = 0;
  }
  *((void *)a5 + 1) = v13;
  unint64_t v45 = Current + 7;
  if (v5) {
    uint64_t v14 = v5;
  }
  else {
    uint64_t v14 = 0;
  }
  *(void *)a5 = v14;
  *((void *)a5 + 2) = 0;
  *((void *)a5 + 3) = a1;
  uint64_t v15 = *(void *)&a2[28]._os_unfair_lock_opaque;
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)&a2[12], memory_order_acquire);
  int v17 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a2->_os_unfair_lock_opaque + 24))(a2);
  uint64_t v18 = 0x7FFFFFFFLL;
  if (v17) {
    uint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
  }
  if ((v18 & explicit) != 0)
  {
    if (a3
      && (*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&a2->_os_unfair_lock_opaque + 24))(a2)
      && !*(void *)&a2[26]._os_unfair_lock_opaque)
    {
    }
    unint64_t v19 = atomic_load_explicit((atomic_ullong *volatile)&a2[14], memory_order_acquire);
    if (*MEMORY[0x1E4FBC890]) {
      ((void (*)(void (**)(void)))*MEMORY[0x1E4FBC890])(Current);
    }
    uint64_t v20 = swift::_swift_task_alloc_specific((swift *)Current, (swift::AsyncTask *)0x30);
    _X2 = 0;
    _X3 = 0;
    *(void *)uint64_t v20 = 0;
    *(void *)(v20 + 8) = 0;
    *(_DWORD *)(v20 + 32) = 3;
    *(void *)(v20 + 40) = Current;
    *(void *)(v20 + 16) = a2;
    Current[20] = (void (*)(void))v20;
    uint64_t v48 = v20;
    __asm { CASP            X2, X3, X2, X3, [X8] }
    v47[0] = _X2;
    v47[1] = 0;
    long long v46 = &v48;
    swift::addStatusRecord((swift::concurrency::trace *)Current, v20, v47, (uint64_t (*)(uint64_t, void, void, void *))__swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift::AsyncTask::flagAsSuspended(swift::TaskDependencyStatusRecord *)::{lambda(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)#1}>, (uint64_t)&v46);
    if ((v47[0] & 0x400) != 0) {
      dispatch_lock_override_end();
    }
    swift_task_exitThreadLocalContext();
    __int16 v29 = (swift *)swift::restoreTaskVoucher((swift *)Current, v28);
    unint64_t v30 = v19;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&a2[14], &v30, (unint64_t)Current);
    if (v30 != v19)
    {
      unint64_t v31 = v30;
      do
      {
        atomic_compare_exchange_strong((atomic_ullong *volatile)&a2[14], &v31, (unint64_t)Current);
        _ZF = v31 == v30;
        unint64_t v30 = v31;
      }
      while (!_ZF);
    }
    atomic_fetch_or_explicit((atomic_ullong *volatile)&a2[12], 0x4000000000000000uLL, memory_order_release);
    swift::_swift_task_clearCurrent(v29);
    os_unfair_lock_unlock(a2 + 10);
    return;
  }
  if (!(*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&a2->_os_unfair_lock_opaque + 24))(a2)) {
    goto LABEL_35;
  }
  uint64_t v32 = *(void *)&a2[26]._os_unfair_lock_opaque;
  if (!v32) {
    goto LABEL_35;
  }
  long long v33 = *(void ***)&a2[18]._os_unfair_lock_opaque;
  uint64_t v34 = (*(void **)((char *)v33 + ((*(void *)&a2[24]._os_unfair_lock_opaque >> 6) & 0x3FFFFFFFFFFFFF8)))[*(void *)&a2[24]._os_unfair_lock_opaque & 0x1FFLL];
  unint64_t v35 = *(void *)&a2[24]._os_unfair_lock_opaque + 1;
  *(void *)&a2[24]._os_unfair_lock_opaque = v35;
  *(void *)&a2[26]._os_unfair_lock_opaque = v32 - 1;
  if (v35 >= 0x400)
  {
    operator delete(*v33);
    *(void *)&a2[18]._os_unfair_lock_opaque += 8;
    *(void *)&a2[24]._os_unfair_lock_opaque -= 512;
  }
  if ((v34 & 3) == 1)
  {
    uint64_t v36 = 0;
    unint64_t v40 = v34 & 0xFFFFFFFFFFFFFFFCLL;
    goto LABEL_38;
  }
  if ((v34 & 3) != 3)
  {
LABEL_35:
    unint64_t v40 = 0;
    uint64_t v36 = 0;
    uint64_t v41 = 0;
    if (!a3) {
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  uint64_t v36 = (swift::TaskGroup *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v37 = *(unsigned int *)((v34 & 0xFFFFFFFFFFFFFFFCLL) + 32);
  uint64_t v38 = 208;
  if ((v37 & 0x1000000) == 0) {
    uint64_t v38 = 192;
  }
  uint64_t v39 = (uint64_t)v36 + v38 + ((v37 >> 23) & 8);
  uint64_t v15 = *(void *)(v39 + 8);
  unint64_t v40 = *(void *)(v39 + 16);
LABEL_38:
  uint64_t v41 = 3;
  if (!a3)
  {
LABEL_39:
    if (v41)
    {
      *((void *)a5 + 2) = v40;
      MEMORY[0x192FAC3D0](v40);
    }
    else
    {
      if (*(void *)(v15 - 8)) {
        uint64_t v43 = *(void *)(v15 - 8);
      }
      else {
        uint64_t v43 = 0;
      }
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v43 + 56))(*((void *)a5 + 3), 1, 1, v15);
    }
    goto LABEL_45;
  }
LABEL_36:
  *((void *)a5 + 2) = a3;
  MEMORY[0x192FAC3D0](a3, v40);
LABEL_45:
  if (v36)
  {
    swift::_swift_taskGroup_detachChild((swift *)a2, v36, v42);
    swift_release();
  }
  os_unfair_lock_unlock(a2 + 10);
  unint64_t v44 = *v45;
  v44();
}

void swift_task_cancel_group_child_tasks(uint64_t a1)
{
  swift_once();
  int v2 = (void (*)(uint64_t, void (*)(swift::TaskGroup *)))swift_task_cancel_group_child_tasks::Override;
  if (swift_task_cancel_group_child_tasks::Override)
  {
    v2(a1, swift_task_cancel_group_child_tasksImpl);
  }
  else
  {
    for (uint64_t i = *(swift::AsyncTask **)(a1 + 24); i; uint64_t i = (swift::AsyncTask *)*((void *)i + 25))
      swift_task_cancel(i);
  }
}

void swift_task_cancel_group_child_tasksImpl(swift::TaskGroup *a1)
{
  for (uint64_t i = (swift::AsyncTask *)*((void *)a1 + 3); i; uint64_t i = (swift::AsyncTask *)*((void *)i + 25))
    swift_task_cancel(i);
}

void *swift_taskGroup_initialize::$_0::__invoke(swift_taskGroup_initialize::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_initialize(this);
  swift_taskGroup_initialize::Override = result;
  return result;
}

void *swift_taskGroup_initializeWithFlags::$_0::__invoke(swift_taskGroup_initializeWithFlags::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_initializeWithFlags(this);
  swift_taskGroup_initializeWithFlags::Override = result;
  return result;
}

void anonymous namespace'::DiscardingTaskGroup::~DiscardingTaskGroup(_anonymous_namespace_::DiscardingTaskGroup *this)
{
  JUMPOUT(0x192FABE70);
}

uint64_t anonymous namespace'::DiscardingTaskGroup::destroy(uint64_t (***this)(_anonymous_namespace_::DiscardingTaskGroup *), uint64_t a2, uint64_t a3)
{
  swift::removeStatusRecordFromSelf((uint64_t)(this + 1), 0, a3);
  int64_t v4 = **this;

  return v4((_anonymous_namespace_::DiscardingTaskGroup *)this);
}

uint64_t anonymous namespace'::DiscardingTaskGroup::isDiscardingResults(_anonymous_namespace_::DiscardingTaskGroup *this)
{
  return 1;
}

void anonymous namespace'::DiscardingTaskGroup::offer(void *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 5);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 10);
  unint64_t explicit = atomic_load_explicit(a1 + 6, memory_order_acquire);
  uint64_t v8 = *(void *)(a3 - 8);
  unint64_t v9 = atomic_fetch_add_explicit(a1 + 6, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) - 1;
  if (!v8)
  {
    if ((v9 & 0x4000000000000000) == 0) {
      goto LABEL_15;
    }
    int v14 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
    uint64_t v15 = 0x7FFFFFFFLL;
    if (v14) {
      uint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if ((v15 & v9) != 0) {
      goto LABEL_15;
    }
    unint64_t v16 = atomic_load_explicit(a1 + 7, memory_order_acquire);
    unint64_t v24 = v16;
    atomic_compare_exchange_strong(a1 + 7, &v24, 0);
    if (v24 == v16)
    {
      uint64_t v25 = a1[13];
      if (v25)
      {
        std::string::size_type v26 = (void **)a1[9];
        uint64_t v20 = (*(void **)((char *)v26 + ((a1[12] >> 6) & 0x3FFFFFFFFFFFFF8)))[a1[12] & 0x1FFLL];
        unint64_t v27 = a1[12] + 1;
        a1[12] = v27;
        a1[13] = v25 - 1;
        if (v27 >= 0x400)
        {
          operator delete(*v26);
          a1[9] += 8;
          a1[12] -= 512;
        }
        swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7);
        if ((v20 & 3) != 3)
        {
          if ((v20 & 3) != 1) {
            swift::swift_Concurrency_fatalError(0, "only errors can be stored by a discarding task group, yet it wasn't an error! 2", v28, v29);
          }
          goto LABEL_32;
        }
        uint64_t v39 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        unint64_t v37 = a1;
        uint64_t v38 = v16;
        int v40 = 1;
        int v41 = 1;
      }
      else
      {
        unint64_t v37 = a1;
        uint64_t v38 = v16;
        uint64_t v39 = a2;
        int v40 = 0;
        int v41 = 0;
      }
      os_unfair_lock_unlock(v6);
      if (!v42) {
        return;
      }
      uint64_t v36 = v42;
      goto LABEL_48;
    }
LABEL_52:
    swift::swift_Concurrency_fatalError(0, "Failed to claim waitingTask!", (const char *)v7, v12);
  }
  if ((atomic_fetch_or_explicit(a1 + 6, 0x8000000000000000, memory_order_relaxed) & 0x8000000000000000) == 0)
  {
    for (uint64_t i = (swift::AsyncTask *)a1[3]; i; uint64_t i = (swift::AsyncTask *)*((void *)i + 25))
      swift_task_cancel(i);
  }
  if ((v9 & 0x4000000000000000) == 0) {
    goto LABEL_56;
  }
  int v11 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t v13 = 0x7FFFFFFFLL;
  if (v11) {
    uint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
  }
  if ((v13 & v9) != 0)
  {
LABEL_56:
    if (!a1[13])
    {
      (*(void (**)(void *, unsigned int *, uint64_t))(*a1 + 40))(a1, a2, 1);
LABEL_16:
      os_unfair_lock_unlock(v6);
      return;
    }
LABEL_15:
    swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7);
    goto LABEL_16;
  }
  unint64_t v16 = atomic_load_explicit(a1 + 7, memory_order_acquire);
  unint64_t v17 = v16;
  atomic_compare_exchange_strong(a1 + 7, &v17, 0);
  if (v17 != v16) {
    goto LABEL_52;
  }
  uint64_t v18 = a1[13];
  if (v18)
  {
    unint64_t v19 = (void **)a1[9];
    uint64_t v20 = (*(void **)((char *)v19 + ((a1[12] >> 6) & 0x3FFFFFFFFFFFFF8)))[a1[12] & 0x1FFLL];
    unint64_t v21 = a1[12] + 1;
    a1[12] = v21;
    a1[13] = v18 - 1;
    if (v21 >= 0x400)
    {
      operator delete(*v19);
      a1[9] += 8;
      a1[12] -= 512;
    }
    swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7);
    if ((v20 & 3) != 3)
    {
      if ((v20 & 3) != 1) {
        swift::swift_Concurrency_fatalError(0, "only errors can be stored by a discarding task group, yet it wasn't an error! 1", v22, v23);
      }
LABEL_32:
      *(void *)(*(void *)(v16 + 64) + 16) = v20 & 0xFFFFFFFFFFFFFFFCLL;
      MEMORY[0x192FAC3D0]();
      goto LABEL_40;
    }
    unint64_t v33 = *(unsigned int *)((v20 & 0xFFFFFFFFFFFFFFFCLL) + 32);
    uint64_t v34 = 208;
    if ((v33 & 0x1000000) == 0) {
      uint64_t v34 = 192;
    }
    *(void *)(*(void *)(v16 + 64) + 16) = *(void *)((v20 & 0xFFFFFFFFFFFFFFFCLL) + v34 + ((v33 >> 23) & 8) + 16);
    MEMORY[0x192FAC3D0]();
    swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)(v20 & 0xFFFFFFFFFFFFFFFCLL), v35);
    if ((*(unsigned int (**)(void *))(*a1 + 24))(a1)) {
      swift_release();
    }
  }
  else
  {
    swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v7);
    unint64_t v30 = a2[8];
    uint64_t v31 = 52;
    if ((v30 & 0x1000000) == 0) {
      uint64_t v31 = 48;
    }
    *(void *)(*(void *)(v16 + 64) + 16) = *(void *)((char *)&a2[v31 + 4] + ((v30 >> 23) & 8));
    MEMORY[0x192FAC3D0]();
    swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a2, v32);
    (*(void (**)(void *))(*a1 + 24))(a1);
  }
LABEL_40:
  if (*MEMORY[0x1E4FBC888]) {
    ((void (*)(unint64_t))*MEMORY[0x1E4FBC888])(v16);
  }
  os_unfair_lock_unlock(v6);
  if (v16)
  {
    uint64_t v36 = v16;
LABEL_48:
    swift::AsyncTask::flagAsAndEnqueueOnExecutor(v36, 0, 0);
  }
}

void anonymous namespace'::DiscardingTaskGroup::enqueueCompletedTask(_anonymous_namespace_::DiscardingTaskGroup *this, unint64_t a2, int a3)
{
  if (a3)
  {
    int64_t v4 = (char *)this + 64;
    swift_retain();
  }
}

void anonymous namespace'::TaskGroupBase::~TaskGroupBase(_anonymous_namespace_::TaskGroupBase *this)
{
  *(void *)this = &unk_1EDD47140;
  int v2 = (void **)*((void *)this + 9);
  uint64_t v3 = (void **)*((void *)this + 10);
  *((void *)this + 13) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)*((void *)this + 10);
      int v2 = (void **)(*((void *)this + 9) + 8);
      *((void *)this + 9) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *((void *)this + 12) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *((void *)this + 9);
    uint64_t v8 = *((void *)this + 10);
    if (v8 != v9) {
      *((void *)this + 10) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  uint64_t v10 = (void *)*((void *)this + 8);
  if (v10) {
    operator delete(v10);
  }
}

uint64_t anonymous namespace'::TaskGroupBase::prepareWaitingTaskWithTask(atomic_ullong *a1, uint64_t a2, unsigned int *a3, uint64_t *a4, int a5, char a6, int a7)
{
  if ((a6 & 1) == 0)
  {
    int v13 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 24))(a1);
    unint64_t v14 = 0xBFFFFFFF7FFFFFFFLL;
    if (v13) {
      unint64_t v14 = 0xBFFFFFFFFFFFFFFFLL;
    }
    uint64_t v15 = *a4;
    unint64_t v16 = v14 + *a4;
    uint64_t v17 = *a4;
    atomic_compare_exchange_strong_explicit(a1 + 6, (unint64_t *)&v17, v16, memory_order_relaxed, memory_order_relaxed);
    if (v17 != v15) {
      *a4 = v17;
    }
  }
  unint64_t v18 = a3[8];
  uint64_t v19 = 52;
  if ((v18 & 0x1000000) == 0) {
    uint64_t v19 = 48;
  }
  uint64_t v20 = (uint64_t)&a3[v19] + ((v18 >> 23) & 8);
  if (a5)
  {
    uint64_t v22 = *(void *)(v20 + 8);
    unint64_t v21 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v22 = *(void *)(v20 + 8);
    unint64_t v21 = (*(unsigned __int8 *)(*(void *)(v22 - 8) + 80) + v20 + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80);
  }
  uint64_t v23 = *(void *)(a2 + 64);
  if (a5)
  {
    *(void *)(v23 + 16) = v21;
    MEMORY[0x192FAC3D0](v21);
  }
  else
  {
    uint64_t v25 = *(void *)(v23 + 24);
    if (*(void *)(v22 - 8)) {
      uint64_t v26 = *(void *)(v22 - 8);
    }
    else {
      uint64_t v26 = 0;
    }
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16))(v25, v21, v22);
    if (*(void *)(v22 - 8)) {
      uint64_t v27 = *(void *)(v22 - 8);
    }
    else {
      uint64_t v27 = 0;
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v22);
  }
  swift::_swift_taskGroup_detachChild((swift *)a1, (swift::TaskGroup *)a3, v24);
  if ((*(unsigned int (**)(atomic_ullong *))(*a1 + 24))(a1)) {
    BOOL v28 = a7 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28 && a5 != 0) {
    swift_release();
  }
  if (*MEMORY[0x1E4FBC888]) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBC888])(a2);
  }
  return a2;
}

void anonymous namespace'::NaiveTaskGroupQueue<anonymous namespace'::TaskGroupBase::ReadyQueueItem>::enqueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *(char **)(a1 + 16);
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v8 = *(void *)(a1 + 32);
  if (v7 != *(void *)(a1 + 40) + v8) {
    goto LABEL_108;
  }
  BOOL v9 = v8 >= 0x200;
  unint64_t v10 = v8 - 512;
  if (v9)
  {
    *(void *)(a1 + 32) = v10;
    int v11 = v5 + 8;
    uint64_t v12 = *(void *)v5;
    *(void *)(a1 + 8) = v5 + 8;
    if (v4 != *(char **)(a1 + 24))
    {
LABEL_8:
      *(void *)unint64_t v4 = v12;
LABEL_107:
      *(void *)(a1 + 16) += 8;
      goto LABEL_108;
    }
    uint64_t v26 = *(char **)a1;
    if ((unint64_t)v11 > *(void *)a1)
    {
      uint64_t v27 = (uint64_t)&v11[-*(void *)a1] >> 3;
      if (v27 >= -1) {
        uint64_t v28 = v27 + 1;
      }
      else {
        uint64_t v28 = v27 + 2;
      }
      uint64_t v29 = v28 >> 1;
      uint64_t v30 = -v29;
      uint64_t v31 = &v11[-8 * v29];
      int64_t v32 = v4 - v11;
      if (v4 != v11)
      {
        memmove(&v11[-8 * v29], v11, v4 - v11);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      *(void *)(a1 + 8) = &v4[8 * v30];
      *(void *)(a1 + 16) = &v31[v32];
      *(void *)&v31[v32] = v12;
      goto LABEL_107;
    }
    unint64_t v34 = (v4 - v26) >> 2;
    if (v4 == v26) {
      unint64_t v34 = 1;
    }
    if (v34 >> 61) {
      goto LABEL_109;
    }
    unint64_t v35 = v34 >> 2;
    uint64_t v36 = 8 * v34;
    unint64_t v37 = (char *)operator new(8 * v34);
    uint64_t v38 = &v37[8 * v35];
    int64_t v40 = v4 - v11;
    BOOL v39 = v4 == v11;
    unint64_t v4 = v38;
    if (!v39)
    {
      unint64_t v4 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v41 = v40 - 8;
      if ((unint64_t)(v40 - 8) < 0x38)
      {
        uint64_t v42 = &v37[8 * v35];
        do
        {
LABEL_90:
          uint64_t v100 = *(void *)v11;
          v11 += 8;
          *(void *)uint64_t v42 = v100;
          v42 += 8;
        }
        while (v42 != v4);
        goto LABEL_91;
      }
      uint64_t v93 = &v37[8 * v35];
      uint64_t v42 = v93;
      if ((unint64_t)(v93 - v11) < 0x20) {
        goto LABEL_90;
      }
      uint64_t v94 = (v41 >> 3) + 1;
      uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v42 = &v38[v95];
      v11 += v95;
      uint64_t v96 = (long long *)(v5 + 24);
      uint64_t v97 = v93 + 16;
      uint64_t v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v99 = *v96;
        *(v97 - 1) = *(v96 - 1);
        *uint64_t v97 = v99;
        v96 += 2;
        v97 += 2;
        v98 -= 4;
      }
      while (v98);
      if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_90;
      }
    }
LABEL_91:
    *(void *)a1 = v37;
    *(void *)(a1 + 8) = v38;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = &v37[v36];
    if (v26)
    {
      operator delete(v26);
      unint64_t v4 = *(char **)(a1 + 16);
    }
    goto LABEL_8;
  }
  uint64_t v13 = v6 >> 3;
  unint64_t v14 = *(char **)(a1 + 24);
  uint64_t v15 = *(char **)a1;
  uint64_t v16 = (uint64_t)&v14[-*(void *)a1];
  if (v6 >> 3 < (unint64_t)(v16 >> 3))
  {
    uint64_t v17 = operator new(0x1000uLL);
    unint64_t v18 = v17;
    if (v14 != v4)
    {
      *(void *)unint64_t v4 = v17;
      goto LABEL_107;
    }
    if (v5 == v15)
    {
      unint64_t v68 = (v14 - v5) >> 2;
      if (v4 == v5) {
        unint64_t v68 = 1;
      }
      if (v68 >> 61) {
        goto LABEL_109;
      }
      unint64_t v69 = (v68 + 3) >> 2;
      uint64_t v70 = 8 * v68;
      uint64_t v71 = (char *)operator new(8 * v68);
      unint64_t v33 = &v71[8 * v69];
      uint64_t v72 = v33;
      if (v4 != v5)
      {
        uint64_t v72 = &v33[8 * v13];
        uint64_t v73 = &v71[8 * v69];
        uint64_t v74 = v5;
        if ((unint64_t)(v6 - 8) < 0x38) {
          goto LABEL_112;
        }
        char v75 = &v71[8 * v69];
        uint64_t v73 = v75;
        uint64_t v74 = v5;
        if ((unint64_t)(v75 - v5) < 0x20) {
          goto LABEL_112;
        }
        unint64_t v76 = ((unint64_t)(v6 - 8) >> 3) + 1;
        uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v73 = &v33[v77];
        uint64_t v74 = &v5[v77];
        BOOL v78 = (long long *)(v5 + 16);
        char v79 = v75 + 16;
        uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v81 = *v78;
          *(v79 - 1) = *(v78 - 1);
          _OWORD *v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_112:
          do
          {
            uint64_t v82 = *(void *)v74;
            v74 += 8;
            *(void *)uint64_t v73 = v82;
            v73 += 8;
          }
          while (v73 != v72);
        }
      }
      *(void *)a1 = v71;
      *(void *)(a1 + 8) = v33;
      *(void *)(a1 + 16) = v72;
      *(void *)(a1 + 24) = &v71[v70];
      if (v5)
      {
        operator delete(v5);
        unint64_t v33 = *(char **)(a1 + 8);
      }
    }
    else
    {
      unint64_t v33 = v5;
    }
    *((void *)v33 - 1) = v18;
    char v83 = *(char **)(a1 + 8);
    uint64_t v84 = *(char **)(a1 + 16);
    *(void *)(a1 + 8) = v83 - 8;
    uint64_t v85 = *((void *)v83 - 1);
    *(void *)(a1 + 8) = v83;
    if (v84 != *(char **)(a1 + 24))
    {
LABEL_106:
      *(void *)uint64_t v84 = v85;
      goto LABEL_107;
    }
    uint64_t v86 = *(char **)a1;
    if ((unint64_t)v83 > *(void *)a1)
    {
      uint64_t v87 = (uint64_t)&v83[-*(void *)a1] >> 3;
      if (v87 >= -1) {
        uint64_t v88 = v87 + 1;
      }
      else {
        uint64_t v88 = v87 + 2;
      }
      uint64_t v89 = v88 >> 1;
      uint64_t v90 = -v89;
      uint64_t v91 = &v83[-8 * v89];
      int64_t v92 = v84 - v83;
      if (v84 != v83)
      {
        memmove(&v83[-8 * v89], v83, v84 - v83);
        char v83 = *(char **)(a1 + 8);
      }
      uint64_t v84 = &v91[v92];
      *(void *)(a1 + 8) = &v83[8 * v90];
      *(void *)(a1 + 16) = &v91[v92];
      goto LABEL_106;
    }
    unint64_t v101 = (v84 - v86) >> 2;
    if (v84 == v86) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      uint64_t v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      int64_t v106 = v84 - v83;
      BOOL v39 = v84 == v83;
      uint64_t v84 = v105;
      if (v39) {
        goto LABEL_104;
      }
      uint64_t v84 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v107 = v106 - 8;
      if ((unint64_t)(v106 - 8) >= 0x38)
      {
        uint64_t v109 = &v104[8 * v102];
        v108 = v109;
        if ((unint64_t)(v109 - v83) >= 0x20)
        {
          uint64_t v110 = (v107 >> 3) + 1;
          uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = &v105[v111];
          v112 = &v83[v111];
          uint64_t v113 = (long long *)(v83 + 16);
          uint64_t v114 = v109 + 16;
          uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *uint64_t v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          char v83 = v112;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_104:
            *(void *)a1 = v104;
            *(void *)(a1 + 8) = v105;
            *(void *)(a1 + 16) = v84;
            *(void *)(a1 + 24) = &v104[v103];
            if (v86)
            {
              operator delete(v86);
              uint64_t v84 = *(char **)(a1 + 16);
            }
            goto LABEL_106;
          }
        }
      }
      else
      {
        v108 = &v104[8 * v102];
      }
      do
      {
        uint64_t v117 = *(void *)v83;
        v83 += 8;
        *(void *)v108 = v117;
        v108 += 8;
      }
      while (v108 != v84);
      goto LABEL_104;
    }
LABEL_109:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v19 = v16 >> 2;
  if (v14 == v15) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >> 61) {
    goto LABEL_109;
  }
  unint64_t v21 = (char *)operator new(8 * v20);
  uint64_t v22 = &v21[8 * v13];
  uint64_t v23 = &v21[8 * v20];
  unint64_t v24 = operator new(0x1000uLL);
  if (v13 == v20)
  {
    if (v6 < 1)
    {
      if (v4 == v5) {
        unint64_t v43 = 1;
      }
      else {
        unint64_t v43 = v6 >> 2;
      }
      if (v43 >> 61) {
        goto LABEL_109;
      }
      unint64_t v44 = (char *)operator new(8 * v43);
      uint64_t v22 = &v44[8 * (v43 >> 2)];
      uint64_t v23 = &v44[8 * v43];
      operator delete(v21);
      unint64_t v5 = *(char **)(a1 + 8);
      unint64_t v4 = *(char **)(a1 + 16);
      unint64_t v21 = v44;
    }
    else
    {
      unint64_t v25 = v13 + 2;
      if (v13 >= -1) {
        unint64_t v25 = v13 + 1;
      }
      v22 -= 8 * (v25 >> 1);
    }
  }
  *(void *)uint64_t v22 = v24;
  unint64_t v45 = v22 + 8;
  if (v4 != v5)
  {
    while (1)
    {
      if (v22 == v21)
      {
        if (v45 >= v23)
        {
          unint64_t v53 = (v23 - v22) >> 2;
          if (v23 == v22) {
            unint64_t v53 = 1;
          }
          if (v53 >> 61) {
            goto LABEL_109;
          }
          unint64_t v54 = (v53 + 3) >> 2;
          uint64_t v55 = 8 * v53;
          uint64_t v56 = (char *)operator new(8 * v53);
          unint64_t v21 = v56;
          uint64_t v49 = &v56[8 * v54];
          uint64_t v47 = v49;
          int64_t v57 = v45 - v22;
          if (v45 != v22)
          {
            uint64_t v47 = &v49[v57 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v58 = v57 - 8;
            uint64_t v59 = &v56[8 * v54];
            uint64_t v60 = v22;
            if (v58 < 0x38) {
              goto LABEL_113;
            }
            uint64_t v59 = &v56[8 * v54];
            uint64_t v60 = v22;
            if ((unint64_t)(v59 - v22) < 0x20) {
              goto LABEL_113;
            }
            uint64_t v61 = (v58 >> 3) + 1;
            uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v49[v62];
            uint64_t v60 = &v22[v62];
            __int16 v63 = (long long *)(v22 + 16);
            uint64_t v64 = &v56[8 * v54 + 16];
            uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v66 = *v63;
              *((_OWORD *)v64 - 1) = *(v63 - 1);
              *(_OWORD *)uint64_t v64 = v66;
              v63 += 2;
              v64 += 32;
              v65 -= 4;
            }
            while (v65);
            if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_113:
              do
              {
                uint64_t v67 = *(void *)v60;
                v60 += 8;
                *(void *)uint64_t v59 = v67;
                v59 += 8;
              }
              while (v59 != v47);
            }
          }
          uint64_t v23 = &v56[v55];
          operator delete(v22);
        }
        else
        {
          uint64_t v51 = (v23 - v45) >> 3;
          if (v51 >= -1) {
            unint64_t v52 = v51 + 1;
          }
          else {
            unint64_t v52 = v51 + 2;
          }
          uint64_t v47 = &v45[8 * (v52 >> 1)];
          uint64_t v49 = &v22[8 * (v52 >> 1)];
          if (v45 == v22)
          {
            unint64_t v21 = v45;
          }
          else
          {
            memmove(&v22[8 * (v52 >> 1)], v22, v45 - v22);
            unint64_t v21 = v22;
          }
        }
      }
      else
      {
        uint64_t v49 = v22;
        uint64_t v47 = v45;
      }
      uint64_t v50 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v49 - 1) = v50;
      long long v46 = v49 - 8;
      unint64_t v45 = v47;
      uint64_t v22 = v46;
      if (v4 == *(char **)(a1 + 8)) {
        goto LABEL_43;
      }
    }
  }
  long long v46 = v22;
  uint64_t v47 = v22 + 8;
LABEL_43:
  uint64_t v48 = *(char **)a1;
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v46;
  *(void *)(a1 + 16) = v47;
  *(void *)(a1 + 24) = v23;
  uint64_t v2 = a2;
  if (v48) {
    operator delete(v48);
  }
LABEL_108:
  unint64_t v118 = *(void *)(a1 + 40) + *(void *)(a1 + 32);
  *(void *)(*(void *)(*(void *)(a1 + 8) + ((v118 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v118 & 0x1FF)) = v2;
  ++*(void *)(a1 + 40);
}

void anonymous namespace'::AccumulatingTaskGroup::~AccumulatingTaskGroup(_anonymous_namespace_::AccumulatingTaskGroup *this)
{
  JUMPOUT(0x192FABE70);
}

uint64_t anonymous namespace'::AccumulatingTaskGroup::destroy(uint64_t (***this)(_anonymous_namespace_::AccumulatingTaskGroup *), uint64_t a2, uint64_t a3)
{
  swift::removeStatusRecordFromSelf((uint64_t)(this + 1), 0, a3);
  unint64_t v4 = **this;

  return v4((_anonymous_namespace_::AccumulatingTaskGroup *)this);
}

uint64_t anonymous namespace'::AccumulatingTaskGroup::isDiscardingResults(_anonymous_namespace_::AccumulatingTaskGroup *this)
{
  return 0;
}

void anonymous namespace'::AccumulatingTaskGroup::offer(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  unint64_t v13 = atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 48), 0x80000000uLL, memory_order_acquire) + 0x80000000;
  uint64_t v9 = *(void *)(a3 - 8);
  if ((v13 & 0x4000000000000000) != 0)
  {
    uint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 56), memory_order_acquire);
    uint64_t v11 = explicit;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 56), (unint64_t *)&v11, 0);
    if (v11 != explicit) {
      swift::swift_Concurrency_fatalError(0, "Failed to claim waitingTask!", v7, v8);
    }
    os_unfair_lock_unlock(v6);
    if (v12)
    {
      swift::AsyncTask::flagAsAndEnqueueOnExecutor(v12, 0, 0);
    }
  }
  else
  {
    (*(void (**)(uint64_t, unsigned int *, BOOL))(*(void *)a1 + 40))(a1, a2, v9 != 0);
    os_unfair_lock_unlock(v6);
  }
}

void anonymous namespace'::AccumulatingTaskGroup::enqueueCompletedTask(_anonymous_namespace_::AccumulatingTaskGroup *this, unint64_t a2, int a3)
{
  swift_retain();
  uint64_t v6 = 2;
  if (a3) {
    uint64_t v6 = 3;
  }
}

uint64_t __swift::__runtime::llvm::function_ref<BOOL ()(swift::ActiveTaskStatus,swift::ActiveTaskStatus&)>::callback_fn<swift_taskGroup_initializeWithFlagsImpl(unsigned long,swift::TaskGroup *,swift::TargetMetadata<swift::InProcess> const*)::$_0>(uint64_t a1, __int16 a2)
{
  if ((a2 & 0x100) != 0) {
    atomic_fetch_or_explicit((atomic_ullong *volatile)(**(void **)a1 + 48), 0x8000000000000000, memory_order_relaxed);
  }
  return 1;
}

void *swift_taskGroup_destroy::$_0::__invoke(swift_taskGroup_destroy::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_destroy(this);
  swift_taskGroup_destroy::Override = result;
  return result;
}

void *swift_taskGroup_wait_next_throwing::$_0::__invoke(swift_taskGroup_wait_next_throwing::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_wait_next_throwing(this);
  swift_taskGroup_wait_next_throwing::Override = result;
  return result;
}

uint64_t task_group_wait_resume_adapter()
{
  if (*(void *)(v0 + 8)) {
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  }
  else {
    uint64_t v1 = 0;
  }
  return v1();
}

void *swift_taskGroup_isEmpty::$_0::__invoke(swift_taskGroup_isEmpty::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_isEmpty(this);
  swift_taskGroup_isEmpty::Override = result;
  return result;
}

void *swift_taskGroup_isCancelled::$_0::__invoke(swift_taskGroup_isCancelled::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_isCancelled(this);
  swift_taskGroup_isCancelled::Override = result;
  return result;
}

void *swift_taskGroup_cancelAll::$_0::__invoke(swift_taskGroup_cancelAll::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_cancelAll(this);
  swift_taskGroup_cancelAll::Override = result;
  return result;
}

void *swift_taskGroup_addPending::$_0::__invoke(swift_taskGroup_addPending::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_addPending(this);
  swift_taskGroup_addPending::Override = result;
  return result;
}

void *swift_taskGroup_waitAll::$_0::__invoke(swift_taskGroup_waitAll::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_taskGroup_waitAll(this);
  swift_taskGroup_waitAll::Override = result;
  return result;
}

void *swift_task_cancel_group_child_tasks::$_0::__invoke(swift_task_cancel_group_child_tasks::$_0 *this, void *a2)
{
  __n128 result = (void *)swift::getOverride_task_cancel_group_child_tasks(this);
  swift_task_cancel_group_child_tasks::Override = result;
  return result;
}

void *swift::TaskLocal::Storage::initializeLinkParent(swift::TaskLocal::Storage *this, swift::AsyncTask *a2, swift::AsyncTask *a3)
{
  __n128 result = (void *)swift::_swift_task_alloc_specific(a2, (swift::AsyncTask *)0x18);
  result[1] = 0;
  result[2] = 0;
  void *result = 0;
  unint64_t v6 = *((void *)a3 + 17);
  if (v6)
  {
    if (*(void *)(v6 + 16))
    {
LABEL_5:
      void *result = v6 | 1;
      goto LABEL_6;
    }
    uint64_t v7 = *(void *)v6;
    if ((v7 & 3) == 1)
    {
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_5;
    }
  }
LABEL_6:
  *(void *)this = result;
  return result;
}

void *swift::TaskLocal::Item::copyTo(swift::TaskLocal::Item *this, swift::AsyncTask *a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 1);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v7 = *(void *)(*(void *)(v2 - 8) + 64);
  if (a2)
  {
    unint64_t v8 = (void *)swift::_swift_task_alloc_specific(a2, (swift::AsyncTask *)(v6 + v7));
    *unint64_t v8 = 0;
    v8[1] = v5;
    v8[2] = v2;
    uint64_t v9 = (void *)((char *)a2 + 136);
  }
  else
  {
    unint64_t v8 = malloc_type_malloc(v6 + v7, 0xDF00BA84uLL);
    *unint64_t v8 = 0;
    v8[1] = v5;
    v8[2] = v2;
    uint64_t v9 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
  }
  *unint64_t v8 = *v9;
  uint64_t v10 = *((void *)this + 2);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = (char *)this + ((*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  }
  else
  {
    uint64_t v11 = MEMORY[0xFFFFFFFFFFFFFFF8];
    uint64_t v12 = (char *)this + 24;
  }
  (*(void (**)(unint64_t, char *))(v11 + 16))((unint64_t)v8+ ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80)), v12);
  *((void *)a2 + 17) = v8;
  return v8;
}

void swift::TaskLocal::Storage::destroy(swift::AsyncTask **this, swift::AsyncTask *a2, const char *a3, char *a4)
{
  unint64_t v4 = *this;
  *this = 0;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *(void *)v4;
        if ((*(void *)v4 & 3) != 0) {
          break;
        }
        uint64_t v7 = *((void *)v4 + 2);
        if (v7) {
          (*(void (**)(unint64_t))(*(void *)(v7 - 8) + 8))((unint64_t)v4+ ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80)));
        }
        unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
        if (a2) {
          swift::_swift_task_dealloc_specific(a2, v4, a3, a4);
        }
        else {
          free(v4);
        }
        unint64_t v4 = (swift::AsyncTask *)v8;
        if (!v8) {
          return;
        }
      }
      if ((*(void *)v4 & 3uLL) - 1 < 2) {
        break;
      }
      if (!v4) {
        return;
      }
    }
    uint64_t v9 = *((void *)v4 + 2);
    if (v9) {
      (*(void (**)(unint64_t))(*(void *)(v9 - 8) + 8))((unint64_t)v4+ ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80)));
    }
    if (a2)
    {
      swift::_swift_task_dealloc_specific(a2, v4, a3, a4);
    }
    else
    {
      free(v4);
    }
  }
}

uint64_t swift::TaskLocal::Storage::pushValue(char **a1, swift *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10 = swift_task_hasTaskGroupStatusRecord();
  if (a5)
  {
    size_t v11 = ((*(unsigned __int8 *)(*(void *)(a5 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a5 - 8) + 80))
        + *(void *)(*(void *)(a5 - 8) + 64);
    if (a2)
    {
LABEL_3:
      uint64_t v12 = (char *)swift::_swift_task_alloc_specific(a2, (swift::AsyncTask *)v11);
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = a3;
      *((void *)v12 + 2) = a5;
      unint64_t v13 = (uint64_t *)((char *)a2 + 136);
      goto LABEL_6;
    }
  }
  else
  {
    size_t v11 = 24;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = (char *)malloc_type_malloc(v11, 0xDF00BA84uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = a3;
  *((void *)v12 + 2) = a5;
  unint64_t v13 = *(uint64_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
LABEL_6:
  uint64_t v14 = *v13;
  uint64_t v15 = 2;
  if ((v10 & 1) == 0) {
    uint64_t v15 = 0;
  }
  *(void *)uint64_t v12 = v15 | v14;
  if (a5)
  {
    uint64_t v16 = *(void *)(a5 - 8);
    unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  }
  else
  {
    uint64_t v16 = MEMORY[0xFFFFFFFFFFFFFFF8];
    unint64_t v17 = 24;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v12[v17], a4, a5);
  *a1 = v12;
  return result;
}

uint64_t swift::TaskLocal::Storage::peekHeadLinkType(swift::TaskLocal::Storage *this)
{
  if (*(void *)this) {
    return **(void **)this & 3;
  }
  else {
    return 0;
  }
}

void swift::TaskLocal::Storage::copyTo(swift::TaskLocal::Item **this, swift::AsyncTask *a2)
{
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = &v13;
  uint64_t v2 = *this;
  if (*this)
  {
    do
    {
      uint64_t v5 = v13;
      unint64_t v6 = *((void *)v2 + 1);
      uint64_t v7 = &v13;
      unint64_t v8 = &v13;
      if (v13)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v8 = (uint64_t **)v5;
            unint64_t v9 = v5[4];
            if (v6 >= v9) {
              break;
            }
            uint64_t v5 = *v8;
            uint64_t v7 = v8;
            if (!*v8) {
              goto LABEL_13;
            }
          }
          if (v9 >= v6) {
            break;
          }
          uint64_t v5 = v8[1];
          if (!v5)
          {
            uint64_t v7 = v8 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        unsigned __int8 v10 = (uint64_t *)operator new(0x28uLL);
        void v10[4] = v6;
        *unsigned __int8 v10 = 0;
        v10[1] = 0;
        void v10[2] = (uint64_t)v8;
        *uint64_t v7 = v10;
        if (*v12)
        {
          uint64_t v12 = (uint64_t **)*v12;
          unint64_t v4 = *v7;
        }
        else
        {
          unint64_t v4 = v10;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v13, v4);
        ++v14;
        swift::TaskLocal::Item::copyTo(v2, a2);
      }
      uint64_t v2 = (swift::TaskLocal::Item *)(*(void *)v2 & 0xFFFFFFFFFFFFFFFCLL);
    }
    while (v2);
    size_t v11 = v13;
  }
  else
  {
    size_t v11 = 0;
  }
  std::__tree<swift::HeapObject const*>::destroy((uint64_t)&v12, v11);
}

void swift::TaskLocal::Storage::copyToOnlyOnlyFromCurrentGroup(swift::TaskLocal::Storage *this, swift::AsyncTask *a2)
{
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = &v17;
  unint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_22;
  }
  unint64_t v4 = 0;
  while (1)
  {
    unint64_t v6 = v17;
    unint64_t v7 = *(void *)(v2 + 8);
    unint64_t v8 = &v17;
    unint64_t v9 = &v17;
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = (uint64_t **)v6;
          unint64_t v10 = v6[4];
          if (v7 >= v10) {
            break;
          }
          unint64_t v6 = *v9;
          unint64_t v8 = v9;
          if (!*v9) {
            goto LABEL_14;
          }
        }
        if (v10 >= v7) {
          goto LABEL_6;
        }
        unint64_t v6 = v9[1];
        if (!v6)
        {
          unint64_t v8 = v9 + 1;
          break;
        }
      }
    }
LABEL_14:
    size_t v11 = (uint64_t *)operator new(0x28uLL);
    void v11[4] = v7;
    *size_t v11 = 0;
    v11[1] = 0;
    void v11[2] = (uint64_t)v9;
    *unint64_t v8 = v11;
    if (*v16)
    {
      uint64_t v16 = (uint64_t **)*v16;
      uint64_t v12 = *v8;
    }
    else
    {
      uint64_t v12 = v11;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v17, v12);
    ++v18;
    uint64_t v13 = *(void *)v2 & 3;
    if (v13 != 2)
    {
      if (v4) {
        break;
      }
    }
    uint64_t v5 = swift::TaskLocal::Item::copyTo((swift::TaskLocal::Item *)v2, a2);
    if (!v4) {
      unint64_t v4 = v5;
    }
    if (!v5) {
      goto LABEL_22;
    }
LABEL_6:
    unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFFCLL;
    if (!v2) {
      goto LABEL_22;
    }
  }
  BOOL v14 = v13 == 0;
  uint64_t v15 = 1;
  if (v14) {
    uint64_t v15 = 2;
  }
  *unint64_t v4 = v15 | v2;
LABEL_22:
  std::__tree<swift::HeapObject const*>::destroy((uint64_t)&v16, v17);
}

uint64_t swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(const unsigned __int8 *a1, const char *a2, char a3, uint64_t a4)
{
  swift_once();
  unint64_t v8 = (uint64_t (*)(const unsigned __int8 *, const char *, void, uint64_t, void (*)(const unsigned __int8 *, const char *, BOOL, uint64_t)))swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::Override;
  if (!swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::Override) {
    swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroupImpl(a1, a2, 0, a4);
  }

  return v8(a1, a2, a3 & 1, a4, swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroupImpl);
}

void swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroupImpl(const unsigned __int8 *a1, const char *a2, BOOL a3, uint64_t a4)
{
  unint64_t v9 = 0;
  swift_asprintf(&v9, a2, a2, a1, a4);
  int shouldReportFatalErrorsToDebugger = _swift_shouldReportFatalErrorsToDebugger();
  uint64_t v5 = v9;
  if (shouldReportFatalErrorsToDebugger)
  {
    memset(&v7[2], 0, 48);
    uint64_t v8 = 0;
    v7[0] = xmmword_1E55C4930;
    v7[1] = *(_OWORD *)&off_1E55C4940;
    MEMORY[0x192FABF30](1, v9, v7);
  }
  unint64_t v6 = (FILE **)MEMORY[0x1E4F143C8];
  fputs(v5, (FILE *)*MEMORY[0x1E4F143C8]);
  fflush(*v6);
  asl_log(0, 0, 3, "%s", v5);
  free(v5);
  abort();
}

uint64_t swift_task_localValuePush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_once();
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))swift_task_localValuePush::Override;
  if (swift_task_localValuePush::Override)
  {
    return v6(a1, a2, a3, swift_task_localValuePushImpl);
  }
  else
  {
    uint64_t Current = swift_task_getCurrent();
    if (Current)
    {
      unint64_t v9 = (swift *)Current;
      unint64_t v10 = (char **)(Current + 136);
    }
    else
    {
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unint64_t v10 = *(char ***)(StatusReg + 840);
      if (!v10)
      {
        unint64_t v10 = (char **)malloc_type_malloc(8uLL, 0x2004093837F09uLL);
        *unint64_t v10 = 0;
        *(void *)(StatusReg + 840) = v10;
      }
      unint64_t v9 = 0;
    }
    return swift::TaskLocal::Storage::pushValue(v10, v9, a1, a2, a3);
  }
}

uint64_t swift_task_localValuePushImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Current = swift_task_getCurrent();
  if (Current)
  {
    unint64_t v7 = (swift *)Current;
    uint64_t v8 = (char **)(Current + 136);
  }
  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v8 = *(char ***)(StatusReg + 840);
    if (!v8)
    {
      uint64_t v8 = (char **)malloc_type_malloc(8uLL, 0x2004093837F09uLL);
      *uint64_t v8 = 0;
      *(void *)(StatusReg + 840) = v8;
    }
    unint64_t v7 = 0;
  }

  return swift::TaskLocal::Storage::pushValue(v8, v7, a1, a2, a3);
}

void *swift_task_localValueGet(uint64_t a1)
{
  swift_once();
  unint64_t v2 = (uint64_t (*)(uint64_t, void *(*)(uint64_t)))swift_task_localValueGet::Override;
  if (swift_task_localValueGet::Override)
  {
    return (void *)v2(a1, swift_task_localValueGetImpl);
  }
  else
  {
    return swift_task_localValueGetImpl(a1);
  }
}

void *swift_task_localValueGetImpl(uint64_t a1)
{
  uint64_t Current = swift_task_getCurrent();
  if (!Current)
  {
    unint64_t v4 = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
    if (v4)
    {
      uint64_t v3 = *v4;
      if (v3)
      {
        while (v3[1] != a1)
        {
          uint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFFCLL);
          if (!v3) {
            return 0;
          }
        }
        goto LABEL_11;
      }
    }
    return 0;
  }
  uint64_t v3 = *(void **)(Current + 136);
  if (!v3) {
    return 0;
  }
  while (v3[1] != a1)
  {
    uint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFFCLL);
    if (!v3) {
      return 0;
    }
  }
LABEL_11:
  uint64_t v6 = v3[2];
  if (v6) {
    return (void *)((char *)v3
  }
                    + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80)));
  else {
    return v3 + 3;
  }
}

void swift_task_localValuePop()
{
  swift_once();
  uint64_t v0 = (void (*)(void (*)(void)))swift_task_localValuePop::Override;
  if (swift_task_localValuePop::Override)
  {
    v0(swift_task_localValuePopImpl);
  }
  else
  {
    swift_task_localValuePopImpl();
  }
}

void swift_task_localValuePopImpl(void)
{
  uint64_t Current = swift_task_getCurrent();
  if (Current)
  {
    uint64_t v3 = (swift *)Current;
    unint64_t v4 = *(swift::AsyncTask **)(Current + 136);
    *(void *)(Current + 136) = *(void *)v4 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v5 = *((void *)v4 + 2);
    if (v5) {
      (*(void (**)(unint64_t))(*(void *)(v5 - 8) + 8))((unint64_t)v4+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)));
    }
    swift::_swift_task_dealloc_specific(v3, v4, v1, v2);
  }
  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unint64_t v7 = *(unint64_t **)(StatusReg + 840);
    if (v7)
    {
      uint64_t v8 = (void *)*v7;
      *unint64_t v7 = *(void *)*v7 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v9 = v8[2];
      if (v9) {
        (*(void (**)(unint64_t))(*(void *)(v9 - 8) + 8))((unint64_t)v8+ ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80)));
      }
      free(v8);
      if (!*v7)
      {
        *(void *)(StatusReg + 840) = 0;
        free(v7);
      }
    }
  }
}

void swift_task_localsCopyTo(swift::AsyncTask *a1)
{
  swift_once();
  unint64_t v2 = (void (*)(swift::AsyncTask *, void (*)(swift::AsyncTask *)))swift_task_localsCopyTo::Override;
  if (swift_task_localsCopyTo::Override)
  {
    v2(a1, swift_task_localsCopyToImpl);
  }
  else
  {
    uint64_t Current = swift_task_getCurrent();
    if (Current)
    {
      unint64_t v4 = (swift::TaskLocal::Item **)(Current + 136);
    }
    else
    {
      unint64_t v4 = *(swift::TaskLocal::Item ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
      if (!v4) {
        return;
      }
    }
    swift::TaskLocal::Storage::copyTo(v4, a1);
  }
}

void swift_task_localsCopyToImpl(swift::AsyncTask *a1)
{
  uint64_t Current = swift_task_getCurrent();
  if (Current)
  {
    uint64_t v3 = (swift::TaskLocal::Item **)(Current + 136);
  }
  else
  {
    uint64_t v3 = *(swift::TaskLocal::Item ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 840);
    if (!v3) {
      return;
    }
  }

  swift::TaskLocal::Storage::copyTo(v3, a1);
}

void *swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::$_0::__invoke(swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_reportIllegalTaskLocalBindingWithinWithTaskGroup(this);
  swift_task_reportIllegalTaskLocalBindingWithinWithTaskGroup::Override = result;
  return result;
}

void *swift_task_localValuePush::$_0::__invoke(swift_task_localValuePush::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_localValuePush(this);
  swift_task_localValuePush::Override = result;
  return result;
}

void *swift_task_localValueGet::$_0::__invoke(swift_task_localValueGet::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_localValueGet(this);
  swift_task_localValueGet::Override = result;
  return result;
}

void *swift_task_localValuePop::$_0::__invoke(swift_task_localValuePop::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_localValuePop(this);
  swift_task_localValuePop::Override = result;
  return result;
}

void *swift_task_localsCopyTo::$_0::__invoke(swift_task_localsCopyTo::$_0 *this, void *a2)
{
  uint64_t result = (void *)swift::getOverride_task_localsCopyTo(this);
  swift_task_localsCopyTo::Override = result;
  return result;
}

void std::__tree<swift::HeapObject const*>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<swift::HeapObject const*>::destroy(a1, *a2);
    std::__tree<swift::HeapObject const*>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = a2[2];
      if (*(unsigned char *)(v2 + 24)) {
        break;
      }
      uint64_t v3 = *(uint64_t **)(v2 + 16);
      uint64_t v4 = *v3;
      if (*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            uint64_t v9 = (uint64_t *)a2[2];
          }
          else
          {
            uint64_t v9 = *(uint64_t **)(v2 + 8);
            uint64_t v10 = *v9;
            *(void *)(v2 + 8) = *v9;
            if (v10)
            {
              *(void *)(v10 + 16) = v2;
              uint64_t v3 = *(uint64_t **)(v2 + 16);
            }
            void v9[2] = (uint64_t)v3;
            *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
            uint64_t *v9 = v2;
            *(void *)(v2 + 16) = v9;
            uint64_t v3 = (uint64_t *)v9[2];
            uint64_t v2 = *v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v14 = *(void *)(v2 + 8);
          *uint64_t v3 = v14;
          if (v14) {
            *(void *)(v14 + 16) = v3;
          }
          *(void *)(v2 + 16) = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          *(void *)(v2 + 8) = v3;
          void v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (int v6 = *(unsigned __int8 *)(v4 + 24), v5 = (unsigned char *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          uint64_t v11 = a2[1];
          *(void *)uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(void *)(v2 + 16) = a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v12 = (uint64_t *)v3[1];
        uint64_t v13 = *v12;
        v3[1] = *v12;
        if (v13) {
          *(void *)(v13 + 16) = v3;
        }
        void v12[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v12;
        *uint64_t v12 = (uint64_t)v3;
        void v3[2] = (uint64_t)v12;
        return result;
      }
      *(unsigned char *)(v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

os_log_t swift::concurrency::trace::setupLogs(swift::concurrency::trace *this, void *a2)
{
  uint64_t v2 = (const char *)*MEMORY[0x1E4F143B0];
  if (!*MEMORY[0x1E4F143B0]
    || (os_log_t result = (os_log_t)strcmp((const char *)*MEMORY[0x1E4F143B0], "logd"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "diagnosticd"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "notifyd"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "xpcproxy"), result)
    && (os_log_t result = (os_log_t)strcmp(v2, "logd_helper"), result))
  {
    swift::concurrency::trace::TracingEnabled = 1;
    swift::concurrency::trace::ActorLog = (uint64_t)os_log_create("com.apple.swift.concurrency", "Actor");
    swift::concurrency::trace::TaskLog = (uint64_t)os_log_create("com.apple.swift.concurrency", "Task");
    os_log_t result = os_log_create("com.apple.swift.concurrency", "PotentialPriorityInversion");
    swift::concurrency::trace::PotentialPriorityInversionLog = (uint64_t)result;
  }
  else
  {
    swift::concurrency::trace::TracingEnabled = 0;
  }
  return result;
}

_DWORD *_swift_async_stream_lock_init(_DWORD *result)
{
  void *result = 0;
  return result;
}

uint64_t Array.init()()
{
  return MEMORY[0x1F4183280]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1F4183740]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1F4183750]();
}

uint64_t MutableCollection.subscript.getter()
{
  return MEMORY[0x1F41837A8]();
}

uint64_t MutableCollection<>.partition(by:)()
{
  return MEMORY[0x1F41837C0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

uint64_t UnsafeBufferPointer.baseAddress.getter()
{
  return MEMORY[0x1F4183840]();
}

uint64_t UnsafeBufferPointer.init(start:count:)()
{
  return MEMORY[0x1F4183850]();
}

uint64_t UnsafeBufferPointer.init(rebasing:)()
{
  return MEMORY[0x1F4183868]();
}

uint64_t type metadata accessor for UnsafeBufferPointer()
{
  return MEMORY[0x1F4183870]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1F41838B8]();
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  uint64_t v3 = MEMORY[0x1F4183978](_builtinStringLiteral, utf8CodeUnitCount, isASCII);
  result._object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t String.count.getter()
{
  return MEMORY[0x1F41839F0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t dispatch thunk of Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1F4183BB0]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1F4183BB8]();
}

uint64_t dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183BD0]();
}

uint64_t Sequence<>.elementsEqual<A>(_:)()
{
  return MEMORY[0x1F4183CD0]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183DC0]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183E38]();
}

uint64_t Array.init(_unsafeUninitializedCapacity:initializingWith:)()
{
  return MEMORY[0x1F4183F10]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x1F4184310]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x1F4184398]();
}

uint64_t Collection.prefix(_:)()
{
  return MEMORY[0x1F41843C0]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t Collection.subscript.getter()
{
  return MEMORY[0x1F4184400]();
}

uint64_t RangeReplaceableCollection.removeFirst()()
{
  return MEMORY[0x1F41844A0]();
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)()
{
  return MEMORY[0x1F4184580]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t UnsafeMutablePointer.initialize(repeating:count:)()
{
  return MEMORY[0x1F41845E8]();
}

uint64_t UnsafeMutablePointer.deinitialize(count:)()
{
  return MEMORY[0x1F41845F8]();
}

uint64_t UnsafeMutablePointer.moveInitialize(from:count:)()
{
  return MEMORY[0x1F4184600]();
}

uint64_t UnsafeMutablePointer.move()()
{
  return MEMORY[0x1F4184608]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t UnsafeMutableBufferPointer.baseAddress.getter()
{
  return MEMORY[0x1F4184680]();
}

uint64_t UnsafeMutableBufferPointer.init(start:count:)()
{
  return MEMORY[0x1F4184688]();
}

Swift::Void __swiftcall UnsafeMutableBufferPointer.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
}

uint64_t UnsafeMutableBufferPointer.init(mutating:)()
{
  return MEMORY[0x1F41846B0]();
}

uint64_t UnsafeMutableBufferPointer.init(rebasing:)()
{
  return MEMORY[0x1F41846B8]();
}

uint64_t type metadata accessor for UnsafeMutableBufferPointer()
{
  return MEMORY[0x1F41846C0]();
}

uint64_t UnsafeMutableBufferPointer.subscript.getter()
{
  return MEMORY[0x1F41846C8]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t debugPrint<A>(_:separator:terminator:to:)()
{
  return MEMORY[0x1F4184BF8]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1F4184CC0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer.requestNativeBuffer()()
{
  return MEMORY[0x1F4184D58]();
}

uint64_t static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)()
{
  return MEMORY[0x1F4184E28]();
}

uint64_t ManagedBuffer.capacity.getter()
{
  return MEMORY[0x1F4184E30]();
}

uint64_t ManagedBuffer.deinit()
{
  return MEMORY[0x1F4184E40]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t dispatch thunk of InstantProtocol.duration(to:)()
{
  return MEMORY[0x1F4184FA0]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x1F4185070]();
}

uint64_t type metadata accessor for PartialRangeUpTo()
{
  return MEMORY[0x1F4185078]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

uint64_t ManagedBufferPointer.init(unsafeBufferObject:)()
{
  return MEMORY[0x1F4185428]();
}

Swift::Bool __swiftcall ManagedBufferPointer.isUniqueReference()()
{
  return MEMORY[0x1F4185430]();
}

uint64_t type metadata accessor for ManagedBufferPointer()
{
  return MEMORY[0x1F4185438]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.count.getter()
{
  return MEMORY[0x1F41857B8]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1F41857F0]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()
{
  return MEMORY[0x1F4185818]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1F41858D8]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1F41859E8]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x1F4185A38]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t _isBridgedVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185D18]();
}

uint64_t _copyCollectionToContiguousArray<A>(_:)()
{
  return MEMORY[0x1F4185D38]();
}

uint64_t Slice.init(base:bounds:)()
{
  return MEMORY[0x1F4185E50]();
}

uint64_t type metadata accessor for Slice()
{
  return MEMORY[0x1F4185E78]();
}

uint64_t print<A>(_:separator:terminator:to:)()
{
  return MEMORY[0x1F4185E88]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x1F4185F28]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x1F4185F38]();
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1F4185F50]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return MEMORY[0x1F4185FB0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return MEMORY[0x1F4185FD8]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x1F4186130]();
}

uint64_t static Duration.< infix(_:_:)()
{
  return MEMORY[0x1F4186160]();
}

uint64_t static Duration.+ infix(_:_:)()
{
  return MEMORY[0x1F4186178]();
}

uint64_t static Duration.- infix(_:_:)()
{
  return MEMORY[0x1F4186180]();
}

uint64_t Duration.hash(into:)()
{
  return MEMORY[0x1F4186198]();
}

uint64_t static Duration.zero.getter()
{
  return MEMORY[0x1F41861A0]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return (mach_header_64 *)MEMORY[0x1F40C9AF0]();
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_trace_lazy_init_completed_4swift()
{
  return MEMORY[0x1F40CA0B8]();
}

uint64_t _swift_getObjCClassInstanceExtents()
{
  return MEMORY[0x1F4186338]();
}

uint64_t _swift_objcClassUsesNativeSwiftReferenceCounting()
{
  return MEMORY[0x1F4186350]();
}

uint64_t _swift_reportToDebugger()
{
  return MEMORY[0x1F4186360]();
}

uint64_t _swift_shouldReportFatalErrorsToDebugger()
{
  return MEMORY[0x1F4186368]();
}

void abort(void)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1F40CA408](client, msg, *(void *)&level, format);
}

void bzero(void *a1, size_t a2)
{
}

int clock_getres(clockid_t __clock_id, timespec *__res)
{
  return MEMORY[0x1F40CB3C8](*(void *)&__clock_id, __res);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1F40CB3D0](*(void *)&__clock_id, __tp);
}

uint64_t concurrencyEnableCooperativeQueues()
{
  return MEMORY[0x1F41863A8]();
}

uint64_t concurrencyEnableJobDispatchIntegration()
{
  return MEMORY[0x1F41863B0]();
}

uint64_t concurrencyIsCurrentExecutorLegacyModeOverride()
{
  return MEMORY[0x1F41863B8]();
}

uint64_t concurrencyValidateUncheckedContinuations()
{
  return MEMORY[0x1F41863C0]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

uint64_t dispatch_lock_override_end()
{
  return MEMORY[0x1F40CBB28]();
}

uint64_t dispatch_lock_override_start_with_debounce()
{
  return MEMORY[0x1F40CBB30]();
}

void dispatch_main(void)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

uint64_t dispatch_thread_get_current_override_qos_floor()
{
  return MEMORY[0x1F40CBD20]();
}

uint64_t dispatch_thread_override_self()
{
  return MEMORY[0x1F40CBD28]();
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void exit(int a1)
{
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x1F40CC528](mhp, segname, sectname, size);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

void os_release(void *object)
{
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1F40CD9E0](a1, a2);
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_bincompat_useLegacyNonCrashingExecutorChecks()
{
  return MEMORY[0x1F4186438]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_compareWitnessTables()
{
  return MEMORY[0x1F4186468]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_errorInMain()
{
  return MEMORY[0x1F4186520]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getCanonicalSpecializedMetadata()
{
  return MEMORY[0x1F4186560]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x1F41865C0]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1F41865C8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getTypeName()
{
  return MEMORY[0x1F4186678]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1F41866B0]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_enterThreadLocalContext()
{
  return MEMORY[0x1F41867C8]();
}

uint64_t swift_task_exitThreadLocalContext()
{
  return MEMORY[0x1F41867D0]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1F40CE708]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1F40CE710]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}